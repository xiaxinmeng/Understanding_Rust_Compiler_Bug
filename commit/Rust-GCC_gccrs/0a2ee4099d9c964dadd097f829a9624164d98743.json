{"sha": "0a2ee4099d9c964dadd097f829a9624164d98743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyZWU0MDk5ZDljOTY0ZGFkZDA5N2Y4MjlhOTYyNDE2NGQ5ODc0Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T19:58:49Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T22:10:11Z"}, "message": "d: Merge upstream dmd 73d8e2fec.\n\nRenames the enum PROTKIND to Prot::Kind, updates all uses of the\noriginal enum accordingly.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 73d8e2fec.\n\t* decl.cc (get_symbol_decl): Use new Prot::Kind enum.\n\t* modules.cc (get_internal_fn): Likewise.", "tree": {"sha": "49bd230244e89f9922e67fdfaf1a26bb401405d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49bd230244e89f9922e67fdfaf1a26bb401405d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2ee4099d9c964dadd097f829a9624164d98743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2ee4099d9c964dadd097f829a9624164d98743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2ee4099d9c964dadd097f829a9624164d98743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2ee4099d9c964dadd097f829a9624164d98743/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f08995eefbf579acfe40f0204727d5ce388e3d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08995eefbf579acfe40f0204727d5ce388e3d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08995eefbf579acfe40f0204727d5ce388e3d0a"}], "stats": {"total": 277, "additions": 138, "deletions": 139}, "files": [{"sha": "bcee0b21e7d918b67d0b5453053ea1ee828cc1e9", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -1325,9 +1325,9 @@ get_symbol_decl (Declaration *decl)\n     TREE_THIS_VOLATILE (decl->csym) = 1;\n \n   /* Protection attributes are used by the debugger.  */\n-  if (decl->protection.kind == PROTprivate)\n+  if (decl->protection.kind == Prot::private_)\n     TREE_PRIVATE (decl->csym) = 1;\n-  else if (decl->protection.kind == PROTprotected)\n+  else if (decl->protection.kind == Prot::protected_)\n     TREE_PROTECTED (decl->csym) = 1;\n \n   /* Likewise, so could the deprecated attribute.  */"}, {"sha": "f71d20cf46232639e8411a12feaec7bc181b9554", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -1,4 +1,4 @@\n-108ca1bcde2096a2c6173c567a204d749538dd74\n+73d8e2fecb9e73422464b4cbf71f2b2967c9a75d\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "f79eaeb8690b447b631b12bc442e7b4c13d19d62", "filename": "gcc/d/dmd/access.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Faccess.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Faccess.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faccess.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -39,7 +39,7 @@ static Dsymbol *mostVisibleOverload(Dsymbol *s);\n  */\n Prot getAccess(AggregateDeclaration *ad, Dsymbol *smember)\n {\n-    Prot access_ret = Prot(PROTnone);\n+    Prot access_ret = Prot(Prot::none);\n \n     assert(ad->isStructDeclaration() || ad->isClassDeclaration());\n     if (smember->toParent() == ad)\n@@ -59,20 +59,20 @@ Prot getAccess(AggregateDeclaration *ad, Dsymbol *smember)\n             Prot access = getAccess(b->sym, smember);\n             switch (access.kind)\n             {\n-                case PROTnone:\n+                case Prot::none:\n                     break;\n \n-                case PROTprivate:\n-                    access_ret = Prot(PROTnone);  // private members of base class not accessible\n+                case Prot::private_:\n+                    access_ret = Prot(Prot::none);  // private members of base class not accessible\n                     break;\n \n-                case PROTpackage:\n-                case PROTprotected:\n-                case PROTpublic:\n-                case PROTexport:\n+                case Prot::package_:\n+                case Prot::protected_:\n+                case Prot::public_:\n+                case Prot::export_:\n                     // If access is to be tightened\n-                    if (PROTpublic < access.kind)\n-                        access = Prot(PROTpublic);\n+                    if (Prot::public_ < access.kind)\n+                        access = Prot(Prot::public_);\n \n                     // Pick path with loosest access\n                     if (access_ret.isMoreRestrictiveThan(access))\n@@ -114,7 +114,7 @@ static bool isAccessible(\n             {\n                 BaseClass *b = (*cdthis->baseclasses)[i];\n                 Prot access = getAccess(b->sym, smember);\n-                if (access.kind >= PROTprotected ||\n+                if (access.kind >= Prot::protected_ ||\n                     isAccessible(smember, sfunc, b->sym, cdscope))\n                 {\n                     return true;\n@@ -164,17 +164,17 @@ bool checkAccess(AggregateDeclaration *ad, Loc loc, Scope *sc, Dsymbol *smember)\n     if (smemberparent == ad)\n     {\n         access = smember->prot();\n-        result = access.kind >= PROTpublic ||\n+        result = access.kind >= Prot::public_ ||\n                  hasPrivateAccess(ad, f) ||\n                  isFriendOf(ad, cdscope) ||\n-                 (access.kind == PROTpackage && hasPackageAccess(sc, smember)) ||\n+                 (access.kind == Prot::package_ && hasPackageAccess(sc, smember)) ||\n                  ad->getAccessModule() == sc->_module;\n     }\n-    else if ((access = getAccess(ad, smember)).kind >= PROTpublic)\n+    else if ((access = getAccess(ad, smember)).kind >= Prot::public_)\n     {\n         result = true;\n     }\n-    else if (access.kind == PROTpackage && hasPackageAccess(sc, ad))\n+    else if (access.kind == Prot::package_ && hasPackageAccess(sc, ad))\n     {\n         result = true;\n     }\n@@ -343,8 +343,8 @@ bool checkAccess(Loc loc, Scope *sc, Expression *e, Declaration *d)\n     }\n     if (!e)\n     {\n-        if ((d->prot().kind == PROTprivate && d->getAccessModule() != sc->_module) ||\n-            (d->prot().kind == PROTpackage && !hasPackageAccess(sc, d)))\n+        if ((d->prot().kind == Prot::private_ && d->getAccessModule() != sc->_module) ||\n+            (d->prot().kind == Prot::package_ && !hasPackageAccess(sc, d)))\n         {\n             error(loc, \"%s %s is not accessible from module %s\",\n                 d->kind(), d->toPrettyChars(), sc->_module->toChars());\n@@ -392,7 +392,7 @@ bool checkAccess(Loc loc, Scope *sc, Package *p)\n         return false;\n     for (; sc; sc = sc->enclosing)\n     {\n-        if (sc->scopesym && sc->scopesym->isPackageAccessible(p, Prot(PROTprivate)))\n+        if (sc->scopesym && sc->scopesym->isPackageAccessible(p, Prot(Prot::private_)))\n             return false;\n     }\n     const char *name = p->toPrettyChars();\n@@ -418,18 +418,18 @@ bool symbolIsVisible(Module *mod, Dsymbol *s)\n \n     switch (s->prot().kind)\n     {\n-        case PROTundefined:\n+        case Prot::undefined:\n             return true;\n-        case PROTnone:\n+        case Prot::none:\n             return false; // no access\n-        case PROTprivate:\n+        case Prot::private_:\n             return s->getAccessModule() == mod;\n-        case PROTpackage:\n+        case Prot::package_:\n             return s->getAccessModule() == mod || hasPackageAccess(mod, s);\n-        case PROTprotected:\n+        case Prot::protected_:\n             return s->getAccessModule() == mod;\n-        case PROTpublic:\n-        case PROTexport:\n+        case Prot::public_:\n+        case Prot::export_:\n             return true;\n         default:\n             assert(0);\n@@ -459,18 +459,18 @@ bool symbolIsVisible(Scope *sc, Dsymbol *s)\n \n     switch (s->prot().kind)\n     {\n-        case PROTundefined:\n+        case Prot::undefined:\n             return true;\n-        case PROTnone:\n+        case Prot::none:\n             return false; // no access\n-        case PROTprivate:\n+        case Prot::private_:\n             return sc->_module == s->getAccessModule();\n-        case PROTpackage:\n+        case Prot::package_:\n             return sc->_module == s->getAccessModule() || hasPackageAccess(sc->_module, s);\n-        case PROTprotected:\n+        case Prot::protected_:\n             return hasProtectedAccess(sc, s);\n-        case PROTpublic:\n-        case PROTexport:\n+        case Prot::public_:\n+        case Prot::export_:\n             return true;\n         default:\n             assert(0);"}, {"sha": "72abd5e9b3094bc6f297a33c8ff3348ffdacc395", "filename": "gcc/d/dmd/arrayop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Farrayop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Farrayop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farrayop.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -70,7 +70,7 @@ FuncDeclaration *buildArrayOp(Identifier *ident, BinExp *exp, Scope *sc)\n     //printf(\"fd: %s %s\\n\", ident->toChars(), ftype->toChars());\n     FuncDeclaration *fd = new FuncDeclaration(Loc(), Loc(), ident, STCundefined, ftype);\n     fd->fbody = fbody;\n-    fd->protection = Prot(PROTpublic);\n+    fd->protection = Prot(Prot::public_);\n     fd->linkage = LINKc;\n     fd->isArrayOp = 1;\n "}, {"sha": "5445b9e596806526434ed7c934fdf17aed46e5ab", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -596,15 +596,15 @@ ProtDeclaration::ProtDeclaration(Loc loc, Identifiers* pkg_identifiers, Dsymbols\n         : AttribDeclaration(decl)\n {\n     this->loc = loc;\n-    this->protection.kind = PROTpackage;\n+    this->protection.kind = Prot::package_;\n     this->protection.pkg  = NULL;\n     this->pkg_identifiers = pkg_identifiers;\n }\n \n Dsymbol *ProtDeclaration::syntaxCopy(Dsymbol *s)\n {\n     assert(!s);\n-    if (protection.kind == PROTpackage)\n+    if (protection.kind == Prot::package_)\n         return new ProtDeclaration(this->loc, pkg_identifiers, Dsymbol::arraySyntaxCopy(decl));\n     else\n         return new ProtDeclaration(this->loc, protection, Dsymbol::arraySyntaxCopy(decl));\n@@ -629,7 +629,7 @@ void ProtDeclaration::addMember(Scope *sc, ScopeDsymbol *sds)\n         pkg_identifiers = NULL;\n     }\n \n-    if (protection.kind == PROTpackage && protection.pkg && sc->_module)\n+    if (protection.kind == Prot::package_ && protection.pkg && sc->_module)\n     {\n         Module *m = sc->_module;\n         Package* pkg = m->parent ? m->parent->isPackage() : NULL;\n@@ -648,7 +648,7 @@ const char *ProtDeclaration::kind() const\n \n const char *ProtDeclaration::toPrettyChars(bool)\n {\n-    assert(protection.kind > PROTundefined);\n+    assert(protection.kind > Prot::undefined);\n \n     OutBuffer buf;\n     buf.writeByte('\\'');"}, {"sha": "73e571b4da9276a407127d663c27d670015425ec", "filename": "gcc/d/dmd/dclass.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -867,7 +867,7 @@ void ClassDeclaration::semantic(Scope *sc)\n         {\n             VarDeclaration *vd = fields[i];\n             if (!vd->isThisDeclaration() &&\n-                !vd->prot().isMoreRestrictiveThan(Prot(PROTpublic)))\n+                !vd->prot().isMoreRestrictiveThan(Prot(Prot::public_)))\n             {\n                 vd->error(\"Field members of a synchronized class cannot be %s\",\n                     protectionToChars(vd->prot().kind));\n@@ -988,7 +988,7 @@ Dsymbol *ClassDeclaration::search(const Loc &loc, Identifier *ident, int flags)\n                         continue;\n                     else if (s == this) // happens if s is nested in this and derives from this\n                         s = NULL;\n-                    else if (!(flags & IgnoreSymbolVisibility) && !(s->prot().kind == PROTprotected) && !symbolIsVisible(this, s))\n+                    else if (!(flags & IgnoreSymbolVisibility) && !(s->prot().kind == Prot::protected_) && !symbolIsVisible(this, s))\n                         s = NULL;\n                     else\n                         break;"}, {"sha": "08b295070b229582ec146035ba33bd515f95a721", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -75,7 +75,7 @@ Declaration::Declaration(Identifier *id)\n     type = NULL;\n     originalType = NULL;\n     storage_class = STCundefined;\n-    protection = Prot(PROTundefined);\n+    protection = Prot(Prot::undefined);\n     linkage = LINKdefault;\n     inuse = 0;\n     mangleOverride = NULL;\n@@ -1830,12 +1830,12 @@ bool VarDeclaration::needThis()\n \n bool VarDeclaration::isExport() const\n {\n-    return protection.kind == PROTexport;\n+    return protection.kind == Prot::export_;\n }\n \n bool VarDeclaration::isImportedSymbol() const\n {\n-    if (protection.kind == PROTexport && !_init &&\n+    if (protection.kind == Prot::export_ && !_init &&\n         (storage_class & STCstatic || parent->isModule()))\n         return true;\n     return false;\n@@ -2218,7 +2218,7 @@ TypeInfoDeclaration::TypeInfoDeclaration(Type *tinfo)\n {\n     this->tinfo = tinfo;\n     storage_class = STCstatic | STCgshared;\n-    protection = Prot(PROTpublic);\n+    protection = Prot(Prot::public_);\n     linkage = LINKc;\n     alignment = target.ptrsize;\n }"}, {"sha": "b881fb6df156d2d772eb58f622b133c6c693613c", "filename": "gcc/d/dmd/denum.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdenum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdenum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -37,7 +37,7 @@ EnumDeclaration::EnumDeclaration(Loc loc, Identifier *id, Type *memtype)\n     defaultval = NULL;\n     sinit = NULL;\n     isdeprecated = false;\n-    protection = Prot(PROTundefined);\n+    protection = Prot(Prot::undefined);\n     parent = NULL;\n     added = false;\n     inuse = 0;\n@@ -550,7 +550,7 @@ void EnumMember::semantic(Scope *sc)\n \n     semanticRun = PASSsemantic;\n \n-    protection = ed->isAnonymous() ? ed->protection : Prot(PROTpublic);\n+    protection = ed->isAnonymous() ? ed->protection : Prot(Prot::public_);\n     linkage = LINKd;\n     storage_class = STCmanifest;\n     userAttribDecl = ed->isAnonymous() ? ed->userAttribDecl : NULL;"}, {"sha": "4b969d4dd600048164ab73e0641a6a20bf1795c0", "filename": "gcc/d/dmd/dimport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdimport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdimport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -35,7 +35,7 @@ Import::Import(Loc loc, Identifiers *packages, Identifier *id, Identifier *alias\n     this->id = id;\n     this->aliasId = aliasId;\n     this->isstatic = isstatic;\n-    this->protection = Prot(PROTprivate); // default to private\n+    this->protection = Prot(Prot::private_); // default to private\n     this->pkg = NULL;\n     this->mod = NULL;\n "}, {"sha": "102bcdc32b6ae29da1b41bea3bd1fbfcb4c57633", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -884,7 +884,7 @@ bool Module::isPackageAccessible(Package *p, Prot protection, int flags)\n     if (insearch) // don't follow import cycles\n         return false;\n     if (flags & IgnorePrivateImports)\n-        protection = Prot(PROTpublic); // only consider public imports\n+        protection = Prot(Prot::public_); // only consider public imports\n     insearch = true;\n     bool r = ScopeDsymbol::isPackageAccessible(p, protection);\n     insearch = false;"}, {"sha": "35ce2f6b7f82fa3ed3bfeacf819174cad9188736", "filename": "gcc/d/dmd/doc.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -732,7 +732,7 @@ void emitMemberComments(ScopeDsymbol *sds, OutBuffer *buf, Scope *sc)\n \n void emitProtection(OutBuffer *buf, Prot prot)\n {\n-    if (prot.kind != PROTundefined && prot.kind != PROTpublic)\n+    if (prot.kind != Prot::undefined && prot.kind != Prot::public_)\n     {\n         protectionToBuffer(buf, prot);\n         buf->writeByte(' ');\n@@ -833,7 +833,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n                     return;\n                 if (!d->type && !d->isCtorDeclaration() && !d->isAliasDeclaration())\n                     return;\n-                if (d->protection.kind == PROTprivate || sc->protection.kind == PROTprivate)\n+                if (d->protection.kind == Prot::private_ || sc->protection.kind == Prot::private_)\n                     return;\n             }\n             if (!com)\n@@ -855,7 +855,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n             }\n             else\n             {\n-                if (ad->prot().kind == PROTprivate || sc->protection.kind == PROTprivate)\n+                if (ad->prot().kind == Prot::private_ || sc->protection.kind == Prot::private_)\n                     return;\n                 if (!ad->comment)\n                     return;\n@@ -869,7 +869,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n         void visit(TemplateDeclaration *td)\n         {\n             //printf(\"TemplateDeclaration::emitComment() '%s', kind = %s\\n\", td->toChars(), td->kind());\n-            if (td->prot().kind == PROTprivate || sc->protection.kind == PROTprivate)\n+            if (td->prot().kind == Prot::private_ || sc->protection.kind == Prot::private_)\n                 return;\n             if (!td->comment)\n                 return;\n@@ -884,7 +884,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n \n         void visit(EnumDeclaration *ed)\n         {\n-            if (ed->prot().kind == PROTprivate || sc->protection.kind == PROTprivate)\n+            if (ed->prot().kind == Prot::private_ || sc->protection.kind == Prot::private_)\n                 return;\n             if (ed->isAnonymous() && ed->members)\n             {\n@@ -906,7 +906,7 @@ void emitComment(Dsymbol *s, OutBuffer *buf, Scope *sc)\n         void visit(EnumMember *em)\n         {\n             //printf(\"EnumMember::emitComment(%p '%s'), comment = '%s'\\n\", em, em->toChars(), em->comment);\n-            if (em->prot().kind == PROTprivate || sc->protection.kind == PROTprivate)\n+            if (em->prot().kind == Prot::private_ || sc->protection.kind == Prot::private_)\n                 return;\n             if (!em->comment)\n                 return;\n@@ -1233,7 +1233,7 @@ void toDocBuffer(Dsymbol *s, OutBuffer *buf, Scope *sc)\n                     buf->writestring(\": \");\n                     any = 1;\n                 }\n-                emitProtection(buf, Prot(PROTpublic));\n+                emitProtection(buf, Prot(Prot::public_));\n                 if (bc->sym)\n                 {\n                     buf->printf(\"$(DDOC_PSUPER_SYMBOL %s)\", bc->sym->toPrettyChars());\n@@ -1486,7 +1486,7 @@ void DocComment::writeSections(Scope *sc, Dsymbols *a, OutBuffer *buf)\n \n         for (UnitTestDeclaration *utd = s->ddocUnittest; utd; utd = utd->ddocUnittest)\n         {\n-            if (utd->protection.kind == PROTprivate || !utd->comment || !utd->fbody)\n+            if (utd->protection.kind == Prot::private_ || !utd->comment || !utd->fbody)\n                 continue;\n \n             // Strip whitespaces to avoid showing empty summary"}, {"sha": "32aa965a93295df7add088a835ac29f5e81b6124", "filename": "gcc/d/dmd/dscope.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -81,7 +81,7 @@ Scope::Scope()\n     this->linkage = LINKd;\n     this->cppmangle = CPPMANGLEdefault;\n     this->inlining = PINLINEdefault;\n-    this->protection = Prot(PROTpublic);\n+    this->protection = Prot(Prot::public_);\n     this->explicitProtection = 0;\n     this->stc = 0;\n     this->depdecl = NULL;\n@@ -120,7 +120,7 @@ Scope *Scope::createGlobal(Module *_module)\n     sc->aligndecl = NULL;\n     sc->linkage = LINKd;\n     sc->inlining = PINLINEdefault;\n-    sc->protection = Prot(PROTpublic);\n+    sc->protection = Prot(Prot::public_);\n \n     sc->_module = _module;\n \n@@ -623,7 +623,7 @@ void *scope_search_fp(void *arg, const char *seed, int* cost)\n         if (scopesym != s->parent)\n         {\n             (*cost)++; // got to the symbol through an import\n-            if (s->prot().kind == PROTprivate)\n+            if (s->prot().kind == Prot::private_)\n                 return NULL;\n         }\n     }"}, {"sha": "86bb6c8aa76e88b89f13bb0e8cf61341a546ce7e", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -187,7 +187,7 @@ AggregateDeclaration::AggregateDeclaration(Loc loc, Identifier *id)\n     this->loc = loc;\n \n     storage_class = 0;\n-    protection = Prot(PROTpublic);\n+    protection = Prot(Prot::public_);\n     type = NULL;\n     structsize = 0;             // size of struct\n     alignsize = 0;              // size of struct for alignment purposes\n@@ -228,7 +228,7 @@ Scope *AggregateDeclaration::newScope(Scope *sc)\n     sc2->parent = this;\n     if (isUnionDeclaration())\n         sc2->inunion = 1;\n-    sc2->protection = Prot(PROTpublic);\n+    sc2->protection = Prot(Prot::public_);\n     sc2->explicitProtection = 0;\n     sc2->aligndecl = NULL;\n     sc2->userAttribDecl = NULL;\n@@ -543,7 +543,7 @@ bool AggregateDeclaration::isDeprecated()\n \n bool AggregateDeclaration::isExport() const\n {\n-    return protection.kind == PROTexport;\n+    return protection.kind == Prot::export_;\n }\n \n /***************************************\n@@ -925,7 +925,7 @@ void AggregateDeclaration::makeNested()\n         // Emulate vthis->semantic()\n         vthis->storage_class |= STCfield;\n         vthis->parent = this;\n-        vthis->protection = Prot(PROTpublic);\n+        vthis->protection = Prot(Prot::public_);\n         vthis->alignment = t->alignment();\n         vthis->semanticRun = PASSsemanticdone;\n "}, {"sha": "d74fe6cfdd5ef88d0d4d32fc5e408023085e5203", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -867,7 +867,7 @@ Module *Dsymbol::getAccessModule()\n \n Prot Dsymbol::prot()\n {\n-    return Prot(PROTpublic);\n+    return Prot(Prot::public_);\n }\n \n /*************************************\n@@ -1100,7 +1100,7 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n         for (size_t i = 0; i < importedScopes->length; i++)\n         {\n             // If private import, don't search it\n-            if ((flags & IgnorePrivateImports) && prots[i] == PROTprivate)\n+            if ((flags & IgnorePrivateImports) && prots[i] == Prot::private_)\n                 continue;\n \n             int sflags = flags & (IgnoreErrors | IgnoreAmbiguous | IgnoreSymbolVisibility); // remember these in recursive searches\n@@ -1144,7 +1144,7 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n                      * the other.\n                      */\n                     if (s->isDeprecated() ||\n-                        (s->prot().isMoreRestrictiveThan(s2->prot()) && s2->prot().kind != PROTnone))\n+                        (s->prot().isMoreRestrictiveThan(s2->prot()) && s2->prot().kind != Prot::none))\n                         s = s2;\n                 }\n                 else\n@@ -1201,7 +1201,7 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n             }\n \n             // TODO: remove once private symbol visibility has been deprecated\n-            if (!(flags & IgnoreErrors) && s->prot().kind == PROTprivate &&\n+            if (!(flags & IgnoreErrors) && s->prot().kind == Prot::private_ &&\n                 !s->isOverloadable() && !s->parent->isTemplateMixin() && !s->parent->isNspace())\n             {\n                 AliasDeclaration *ad;\n@@ -1257,7 +1257,7 @@ OverloadSet *ScopeDsymbol::mergeOverloadSet(Identifier *ident, OverloadSet *os,\n             {\n                 if (s2->isDeprecated() ||\n                     (s2->prot().isMoreRestrictiveThan(s->prot()) &&\n-                     s->prot().kind != PROTnone))\n+                     s->prot().kind != Prot::none))\n                 {\n                     os->a[j] = s;\n                 }\n@@ -1294,7 +1294,7 @@ void ScopeDsymbol::importScope(Dsymbol *s, Prot protection)\n             }\n         }\n         importedScopes->push(s);\n-        prots = (PROTKIND *)mem.xrealloc(prots, importedScopes->length * sizeof(prots[0]));\n+        prots = (Prot::Kind *)mem.xrealloc(prots, importedScopes->length * sizeof(prots[0]));\n         prots[importedScopes->length - 1] = protection.kind;\n     }\n }\n@@ -1333,7 +1333,7 @@ static void bitArrayLength(BitArray *array, size_t len)\n \n void ScopeDsymbol::addAccessiblePackage(Package *p, Prot protection)\n {\n-    BitArray *pary = protection.kind == PROTprivate ? &privateAccessiblePackages : &accessiblePackages;\n+    BitArray *pary = protection.kind == Prot::private_ ? &privateAccessiblePackages : &accessiblePackages;\n     if (pary->len <= p->tag)\n         bitArrayLength(pary, p->tag + 1);\n     bitArraySet(pary, p->tag);\n@@ -1342,7 +1342,7 @@ void ScopeDsymbol::addAccessiblePackage(Package *p, Prot protection)\n bool ScopeDsymbol::isPackageAccessible(Package *p, Prot protection, int)\n {\n     if ((p->tag < accessiblePackages.len && bitArrayGet(&accessiblePackages, p->tag)) ||\n-        (protection.kind == PROTprivate && p->tag < privateAccessiblePackages.len && bitArrayGet(&privateAccessiblePackages, p->tag)))\n+        (protection.kind == Prot::private_ && p->tag < privateAccessiblePackages.len && bitArrayGet(&privateAccessiblePackages, p->tag)))\n         return true;\n     if (importedScopes)\n     {\n@@ -1827,11 +1827,11 @@ Dsymbol *DsymbolTable::update(Dsymbol *s)\n \n Prot::Prot()\n {\n-    this->kind = PROTundefined;\n+    this->kind = Prot::undefined;\n     this->pkg = NULL;\n }\n \n-Prot::Prot(PROTKIND kind)\n+Prot::Prot(Prot::Kind kind)\n {\n     this->kind = kind;\n     this->pkg = NULL;\n@@ -1853,7 +1853,7 @@ bool Prot::operator==(const Prot& other) const\n {\n     if (this->kind == other.kind)\n     {\n-        if (this->kind == PROTpackage)\n+        if (this->kind == Prot::package_)\n             return this->pkg == other.pkg;\n         return true;\n     }\n@@ -1875,7 +1875,7 @@ bool Prot::isSubsetOf(const Prot& parent) const\n     if (this->kind != parent.kind)\n         return false;\n \n-    if (this->kind == PROTpackage)\n+    if (this->kind == Prot::package_)\n     {\n         if (!this->pkg)\n             return true;"}, {"sha": "63dbc2cccbce86d2a276212c6bbd2979802392b4", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -83,24 +83,23 @@ struct Ungag\n     ~Ungag() { global.gag = oldgag; }\n };\n \n-enum PROTKIND\n-{\n-    PROTundefined,\n-    PROTnone,           // no access\n-    PROTprivate,\n-    PROTpackage,\n-    PROTprotected,\n-    PROTpublic,\n-    PROTexport\n-};\n-\n struct Prot\n {\n-    PROTKIND kind;\n+    enum Kind\n+    {\n+        undefined,\n+        none,           // no access\n+        private_,\n+        package_,\n+        protected_,\n+        public_,\n+        export_\n+    };\n+    Kind kind;\n     Package *pkg;\n \n     Prot();\n-    Prot(PROTKIND kind);\n+    Prot(Kind kind);\n \n     bool isMoreRestrictiveThan(const Prot other) const;\n     bool operator==(const Prot& other) const;\n@@ -109,7 +108,7 @@ struct Prot\n \n // in hdrgen.c\n void protectionToBuffer(OutBuffer *buf, Prot prot);\n-const char *protectionToChars(PROTKIND kind);\n+const char *protectionToChars(Prot::Kind kind);\n \n /* State of symbol in winding its way through the passes of the compiler\n  */\n@@ -296,7 +295,7 @@ class ScopeDsymbol : public Dsymbol\n \n private:\n     Dsymbols *importedScopes;   // imported Dsymbol's\n-    PROTKIND *prots;            // array of PROTKIND, one for each import\n+    Prot::Kind *prots;            // array of PROTKIND, one for each import\n \n     BitArray accessiblePackages, privateAccessiblePackages;\n "}, {"sha": "a35721cc9cd795d5417fee68bdb2435d31c19699", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -535,7 +535,7 @@ TemplateDeclaration::TemplateDeclaration(Loc loc, Identifier *id,\n     this->ismixin = ismixin;\n     this->isstatic = true;\n     this->previous = NULL;\n-    this->protection = Prot(PROTundefined);\n+    this->protection = Prot(Prot::undefined);\n     this->instances = NULL;\n \n     // Compute in advance for Ddoc's use\n@@ -6164,7 +6164,7 @@ void TemplateInstance::semantic(Scope *sc, Expressions *fargs)\n     // Declare each template parameter as an alias for the argument type\n     Scope *paramscope = scope->push();\n     paramscope->stc = 0;\n-    paramscope->protection = Prot(PROTpublic);  // Bugzilla 14169: template parameters should be public\n+    paramscope->protection = Prot(Prot::public_);  // Bugzilla 14169: template parameters should be public\n     declareParameters(paramscope);\n     paramscope->pop();\n \n@@ -8408,7 +8408,7 @@ void TemplateMixin::semantic(Scope *sc)\n         ScopeDsymbol *sds = (ScopeDsymbol *)sce->scopesym;\n         if (sds)\n         {\n-            sds->importScope(this, Prot(PROTpublic));\n+            sds->importScope(this, Prot(Prot::public_));\n             break;\n         }\n     }"}, {"sha": "412d416715b9ae372c7152a4e26724136b743c95", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -1537,7 +1537,7 @@ class ExpressionSemanticVisitor : public Visitor\n \n         sc = sc->push();            // just create new scope\n         sc->flags &= ~SCOPEctfe;    // temporary stop CTFE\n-        sc->protection = Prot(PROTpublic);    // Bugzilla 12506\n+        sc->protection = Prot(Prot::public_);    // Bugzilla 12506\n \n         if (!exp->type || exp->type == Type::tvoid)\n         {"}, {"sha": "008f09726b4863c53f00187374cff7a23e3de854", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -739,7 +739,7 @@ void FuncDeclaration::semantic(Scope *sc)\n         const char *sfunc;\n         if (isStatic())\n             sfunc = \"static\";\n-        else if (protection.kind == PROTprivate || protection.kind == PROTpackage)\n+        else if (protection.kind == Prot::private_ || protection.kind == Prot::package_)\n             sfunc = protectionToChars(protection.kind);\n         else\n             sfunc = \"non-virtual\";\n@@ -748,8 +748,8 @@ void FuncDeclaration::semantic(Scope *sc)\n \n     if (isOverride() && !isVirtual())\n     {\n-        PROTKIND kind = prot().kind;\n-        if ((kind == PROTprivate || kind == PROTpackage) && isMember())\n+        Prot::Kind kind = prot().kind;\n+        if ((kind == Prot::private_ || kind == Prot::package_) && isMember())\n             error(\"%s method is not virtual and cannot override\", protectionToChars(kind));\n         else\n             error(\"cannot override a non-virtual function\");\n@@ -868,7 +868,7 @@ void FuncDeclaration::semantic(Scope *sc)\n                         if (f2)\n                         {\n                             f2 = f2->overloadExactMatch(type);\n-                            if (f2 && f2->isFinalFunc() && f2->prot().kind != PROTprivate)\n+                            if (f2 && f2->isFinalFunc() && f2->prot().kind != Prot::private_)\n                                 error(\"cannot override final function %s\", f2->toPrettyChars());\n                         }\n                     }\n@@ -1137,7 +1137,7 @@ void FuncDeclaration::semantic(Scope *sc)\n                     if (f2)\n                     {\n                         f2 = f2->overloadExactMatch(type);\n-                        if (f2 && f2->isFinalFunc() && f2->prot().kind != PROTprivate)\n+                        if (f2 && f2->isFinalFunc() && f2->prot().kind != Prot::private_)\n                             error(\"cannot override final function %s.%s\", b->sym->toChars(), f2->toPrettyChars());\n                     }\n                 }\n@@ -1465,7 +1465,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n                         STCdeprecated | STCoverride |\n                         STC_TYPECTOR | STCfinal | STCtls | STCgshared | STCref | STCreturn |\n                         STCproperty | STCnothrow | STCpure | STCsafe | STCtrusted | STCsystem);\n-        sc2->protection = Prot(PROTpublic);\n+        sc2->protection = Prot(Prot::public_);\n         sc2->explicitProtection = 0;\n         sc2->aligndecl = NULL;\n         if (this->ident != Id::require && this->ident != Id::ensure)\n@@ -3755,14 +3755,14 @@ bool FuncDeclaration::isDllMain()\n \n bool FuncDeclaration::isExport() const\n {\n-    return protection.kind == PROTexport;\n+    return protection.kind == Prot::export_;\n }\n \n bool FuncDeclaration::isImportedSymbol() const\n {\n     //printf(\"isImportedSymbol()\\n\");\n     //printf(\"protection = %d\\n\", protection);\n-    return (protection.kind == PROTexport) && !fbody;\n+    return (protection.kind == Prot::export_) && !fbody;\n }\n \n // Determine if function goes into virtual function pointer table\n@@ -3774,7 +3774,7 @@ bool FuncDeclaration::isVirtual()\n \n     Dsymbol *p = toParent();\n     return isMember() &&\n-        !(isStatic() || protection.kind == PROTprivate || protection.kind == PROTpackage) &&\n+        !(isStatic() || protection.kind == Prot::private_ || protection.kind == Prot::package_) &&\n         p->isClassDeclaration() &&\n         !(p->isInterfaceDeclaration() && isFinalFunc());\n }\n@@ -4136,7 +4136,7 @@ bool FuncDeclaration::addPreInvariant()\n     ClassDeclaration *cd = ad ? ad->isClassDeclaration() : NULL;\n     return (ad && !(cd && cd->isCPPclass()) &&\n             global.params.useInvariants == CHECKENABLEon &&\n-            (protection.kind == PROTprotected || protection.kind == PROTpublic || protection.kind == PROTexport) &&\n+            (protection.kind == Prot::protected_ || protection.kind == Prot::public_ || protection.kind == Prot::export_) &&\n             !naked);\n }\n \n@@ -4147,7 +4147,7 @@ bool FuncDeclaration::addPostInvariant()\n     return (ad && !(cd && cd->isCPPclass()) &&\n             ad->inv &&\n             global.params.useInvariants == CHECKENABLEon &&\n-            (protection.kind == PROTprotected || protection.kind == PROTpublic || protection.kind == PROTexport) &&\n+            (protection.kind == Prot::protected_ || protection.kind == Prot::public_ || protection.kind == Prot::export_) &&\n             !naked);\n }\n \n@@ -4254,7 +4254,7 @@ FuncDeclaration *FuncDeclaration::genCfunc(Parameters *fparams, Type *treturn, I\n     {\n         tf = new TypeFunction(ParameterList(fparams), treturn, LINKc, stc);\n         fd = new FuncDeclaration(Loc(), Loc(), id, STCstatic, tf);\n-        fd->protection = Prot(PROTpublic);\n+        fd->protection = Prot(Prot::public_);\n         fd->linkage = LINKc;\n \n         st->insert(fd);"}, {"sha": "11a06a88ce971a9d31e5e018e5778b659689b1e9", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -3381,25 +3381,25 @@ void protectionToBuffer(OutBuffer *buf, Prot prot)\n     if (p)\n         buf->writestring(p);\n \n-    if (prot.kind == PROTpackage && prot.pkg)\n+    if (prot.kind == Prot::package_ && prot.pkg)\n     {\n         buf->writeByte('(');\n         buf->writestring(prot.pkg->toPrettyChars(true));\n         buf->writeByte(')');\n     }\n }\n \n-const char *protectionToChars(PROTKIND kind)\n+const char *protectionToChars(Prot::Kind kind)\n {\n     switch (kind)\n     {\n-        case PROTundefined: return NULL;\n-        case PROTnone:      return \"none\";\n-        case PROTprivate:   return \"private\";\n-        case PROTpackage:   return \"package\";\n-        case PROTprotected: return \"protected\";\n-        case PROTpublic:    return \"public\";\n-        case PROTexport:    return \"export\";\n+        case Prot::undefined: return NULL;\n+        case Prot::none:      return \"none\";\n+        case Prot::private_:   return \"private\";\n+        case Prot::package_:   return \"package\";\n+        case Prot::protected_: return \"protected\";\n+        case Prot::public_:    return \"public\";\n+        case Prot::export_:    return \"export\";\n         default:            assert(0);\n     }\n     return NULL;    // never reached"}, {"sha": "b1b90d6733476aa32bf9a2b2d35a32b648c128d4", "filename": "gcc/d/dmd/json.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fjson.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fjson.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -438,7 +438,7 @@ class ToJsonVisitor : public Visitor\n             property(\"kind\", s->kind());\n         }\n \n-        if (s->prot().kind != PROTpublic)   // TODO: How about package(names)?\n+        if (s->prot().kind != Prot::public_)   // TODO: How about package(names)?\n             property(\"protection\", protectionToChars(s->prot().kind));\n \n         if (EnumMember *em = s->isEnumMember())\n@@ -546,7 +546,7 @@ class ToJsonVisitor : public Visitor\n         property(\"kind\", s->kind());\n         property(\"comment\", (const char *)s->comment);\n         property(\"line\", \"char\", &s->loc);\n-        if (s->prot().kind != PROTpublic)\n+        if (s->prot().kind != Prot::public_)\n             property(\"protection\", protectionToChars(s->prot().kind));\n         if (s->aliasId)\n             property(\"alias\", s->aliasId->toChars());"}, {"sha": "7684516da9977211188e43304237f0eea53bc0e2", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -5521,7 +5521,7 @@ Type *TypeFunction::semantic(Loc loc, Scope *sc)\n          */\n         Scope *argsc = sc->push();\n         argsc->stc = 0;                 // don't inherit storage class\n-        argsc->protection = Prot(PROTpublic);\n+        argsc->protection = Prot(Prot::public_);\n         argsc->func = NULL;\n \n         size_t dim = tf->parameterList.length();"}, {"sha": "71d1c6f555233e0d0b68962e86110118bbfe5d5b", "filename": "gcc/d/dmd/nspace.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fnspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fnspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -50,7 +50,7 @@ void Nspace::addMember(Scope *sc, ScopeDsymbol *sds)\n             ScopeDsymbol *sds2 = sce->scopesym;\n             if (sds2)\n             {\n-                sds2->importScope(this, Prot(PROTpublic));\n+                sds2->importScope(this, Prot(Prot::public_));\n                 break;\n             }\n         }"}, {"sha": "79acab731a60c2faf73364f14c485303b2a12216", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -231,7 +231,7 @@ struct PrefixAttributes\n         : storageClass(STCundefined),\n           depmsg(NULL),\n           link(LINKdefault),\n-          protection(PROTundefined),\n+          protection(Prot::undefined),\n           setAlignment(false),\n           ealign(NULL),\n           udas(NULL),\n@@ -262,7 +262,7 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n             pAttrs = &attrs;\n             pAttrs->comment = token.blockComment;\n         }\n-        PROTKIND prot;\n+        Prot::Kind prot;\n         StorageClass stc;\n         Condition *condition;\n \n@@ -731,14 +731,14 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n                 break;\n             }\n \n-            case TOKprivate:    prot = PROTprivate;     goto Lprot;\n-            case TOKpackage:    prot = PROTpackage;     goto Lprot;\n-            case TOKprotected:  prot = PROTprotected;   goto Lprot;\n-            case TOKpublic:     prot = PROTpublic;      goto Lprot;\n-            case TOKexport:     prot = PROTexport;      goto Lprot;\n+            case TOKprivate:    prot = Prot::private_;     goto Lprot;\n+            case TOKpackage:    prot = Prot::package_;     goto Lprot;\n+            case TOKprotected:  prot = Prot::protected_;   goto Lprot;\n+            case TOKpublic:     prot = Prot::public_;      goto Lprot;\n+            case TOKexport:     prot = Prot::export_;      goto Lprot;\n             Lprot:\n             {\n-                if (pAttrs->protection.kind != PROTundefined)\n+                if (pAttrs->protection.kind != Prot::undefined)\n                 {\n                     if (pAttrs->protection.kind != prot)\n                         error(\"conflicting protection attribute '%s' and '%s'\",\n@@ -753,7 +753,7 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n                 // optional qualified package identifier to bind\n                 // protection to\n                 Identifiers *pkg_prot_idents = NULL;\n-                if (pAttrs->protection.kind == PROTpackage && token.value == TOKlparen)\n+                if (pAttrs->protection.kind == Prot::package_ && token.value == TOKlparen)\n                 {\n                     pkg_prot_idents = parseQualifiedIdentifier(\"protection package\");\n \n@@ -770,14 +770,14 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n \n                 Loc attrloc = token.loc;\n                 a = parseBlock(pLastDecl, pAttrs);\n-                if (pAttrs->protection.kind != PROTundefined)\n+                if (pAttrs->protection.kind != Prot::undefined)\n                 {\n-                    if (pAttrs->protection.kind == PROTpackage && pkg_prot_idents)\n+                    if (pAttrs->protection.kind == Prot::package_ && pkg_prot_idents)\n                         s = new ProtDeclaration(attrloc, pkg_prot_idents,  a);\n                     else\n                         s = new ProtDeclaration(attrloc, pAttrs->protection, a);\n \n-                    pAttrs->protection = Prot(PROTundefined);\n+                    pAttrs->protection = Prot(Prot::undefined);\n                 }\n                 break;\n             }\n@@ -2365,27 +2365,27 @@ BaseClasses *Parser::parseBaseClasses()\n     for (; 1; nextToken())\n     {\n         bool prot = false;\n-        Prot protection = Prot(PROTpublic);\n+        Prot protection = Prot(Prot::public_);\n         switch (token.value)\n         {\n             case TOKprivate:\n                 prot = true;\n-                protection = Prot(PROTprivate);\n+                protection = Prot(Prot::private_);\n                 nextToken();\n                 break;\n             case TOKpackage:\n                 prot = true;\n-                protection = Prot(PROTpackage);\n+                protection = Prot(Prot::package_);\n                 nextToken();\n                 break;\n             case TOKprotected:\n                 prot = true;\n-                protection = Prot(PROTprotected);\n+                protection = Prot(Prot::protected_);\n                 nextToken();\n                 break;\n             case TOKpublic:\n                 prot = true;\n-                protection = Prot(PROTpublic);\n+                protection = Prot(Prot::public_);\n                 nextToken();\n                 break;\n             default: break;"}, {"sha": "79f42c68b10aa897e5546ee80fba10e3a9ee275a", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ee4099d9c964dadd097f829a9624164d98743/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=0a2ee4099d9c964dadd097f829a9624164d98743", "patch": "@@ -147,7 +147,7 @@ get_internal_fn (tree ident)\n \t\t\t\t\t\t   Identifier::idPool (name));\n   fd->loc = Loc (mod->srcfile->toChars (), 1, 0);\n   fd->parent = mod;\n-  fd->protection.kind = PROTprivate;\n+  fd->protection.kind = Prot::private_;\n   fd->semanticRun = PASSsemantic3done;\n \n   return fd;"}]}