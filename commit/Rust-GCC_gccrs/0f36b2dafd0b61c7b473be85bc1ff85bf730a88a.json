{"sha": "0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzNmIyZGFmZDBiNjFjN2I0NzNiZTg1YmMxZmY4NWJmNzMwYTg4YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-05T10:16:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-05T10:16:48Z"}, "message": "re PR tree-optimization/49984 (VRP does not handle BIT_XOR_EXPR)\n\n2011-08-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49984\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle BIT_XOR_EXPR.\n\n\t* gcc.dg/tree-ssa/vrp59.c: New testcase.\n\nFrom-SVN: r177425", "tree": {"sha": "5dc0207a3bb63bd0426a054a80e8a68dccd41514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc0207a3bb63bd0426a054a80e8a68dccd41514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b201bc546eac5bba84fe9daf7872a7b9803d9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b201bc546eac5bba84fe9daf7872a7b9803d9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b201bc546eac5bba84fe9daf7872a7b9803d9c0"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "d86d24bbcca091cdd1966232ca690775a30d8c09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "patch": "@@ -1,3 +1,8 @@\n+2011-08-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49984\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle BIT_XOR_EXPR.\n+\n 2011-08-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (zero_nonzero_bits_from_vr): Make sure to always"}, {"sha": "78017058ccb271a2d845407d42e7d438396ddcbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "patch": "@@ -1,3 +1,8 @@\n+2011-08-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49984\n+\t* gcc.dg/tree-ssa/vrp59.c: New testcase.\n+\n 2011-08-05  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp51.c: Disable CCP."}, {"sha": "30b26f582cff735c23079683050fd6bcf336ebbf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp59.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c?ref=0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-vrp1\" } */\r\n+\r\n+int f(int x)\r\n+{\r\n+  if (x >= 0 && x <= 3)\r\n+    {\r\n+      x = x ^ 3;\r\n+      x = x & 3;\r\n+    }\r\n+  return x;\r\n+}\r\n+\r\n+int g(int x)\r\n+{\r\n+  if (x >= 0 && x <= 3)\r\n+    {\r\n+      x = x ^ 2;\r\n+      x = x & 3;\r\n+    }\r\n+  return x;\r\n+}\r\n+\r\n+int h(int x)\r\n+{\r\n+  if (x >= 0 && x <= 3)\r\n+    {\r\n+      x = x ^ 1;\r\n+      x = x & 3;\r\n+    }\r\n+  return x;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-not \" & 3;\" \"vrp1\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\r"}, {"sha": "eb6fc9dcc8c9a09402d7fcff1a33cc2ed984f54d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f36b2dafd0b61c7b473be85bc1ff85bf730a88a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0f36b2dafd0b61c7b473be85bc1ff85bf730a88a", "patch": "@@ -2214,7 +2214,8 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       && code != MIN_EXPR\n       && code != MAX_EXPR\n       && code != BIT_AND_EXPR\n-      && code != BIT_IOR_EXPR)\n+      && code != BIT_IOR_EXPR\n+      && code != BIT_XOR_EXPR)\n     {\n       set_value_range_to_varying (vr);\n       return;\n@@ -2635,7 +2636,7 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       min = vrp_int_const_binop (code, vr0.min, vr1.max);\n       max = vrp_int_const_binop (code, vr0.max, vr1.min);\n     }\n-  else if (code == BIT_AND_EXPR || code == BIT_IOR_EXPR)\n+  else if (code == BIT_AND_EXPR || code == BIT_IOR_EXPR || code == BIT_XOR_EXPR)\n     {\n       bool int_cst_range0, int_cst_range1;\n       double_int may_be_nonzero0, may_be_nonzero1;\n@@ -2694,6 +2695,35 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t  if (int_cst_range1)\n \t    min = vrp_int_const_binop (MAX_EXPR, min, vr1.min);\n \t}\n+      else if (code == BIT_XOR_EXPR)\n+\t{\n+\t  double_int result_zero_bits, result_one_bits;\n+\t  result_zero_bits\n+\t    = double_int_ior (double_int_and (must_be_nonzero0,\n+\t\t\t\t\t      must_be_nonzero1),\n+\t\t\t      double_int_not\n+\t\t\t        (double_int_ior (may_be_nonzero0,\n+\t\t\t\t\t\t may_be_nonzero1)));\n+\t  result_one_bits\n+\t    = double_int_ior (double_int_and\n+\t\t\t        (must_be_nonzero0,\n+\t\t\t\t double_int_not (may_be_nonzero1)),\n+\t\t\t      double_int_and\n+\t\t\t        (must_be_nonzero1,\n+\t\t\t\t double_int_not (may_be_nonzero0)));\n+\t  max = double_int_to_tree (expr_type,\n+\t\t\t\t    double_int_not (result_zero_bits));\n+\t  min = double_int_to_tree (expr_type, result_one_bits);\n+\t  /* Return a [min, max] range if we know the\n+\t     result range is either positive or negative.  */\n+\t  if (tree_int_cst_sgn (max) >= 0)\n+\t    /* The range is bound by a lower value of 0.  */;\n+\t  else if (tree_int_cst_sgn (min) < 0)\n+\t    /* The range is bound by an upper value of -1.  */;\n+\t  else\n+\t    /* We don't know whether the sign bit is set or not.  */\n+\t    max = min = NULL_TREE;\n+\t}\n       else\n \t{\n \t  set_value_range_to_varying (vr);"}]}