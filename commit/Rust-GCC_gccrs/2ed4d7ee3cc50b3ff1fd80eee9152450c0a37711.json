{"sha": "2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkNGQ3ZWUzY2M1MGIzZmYxZmQ4MGVlZTkxNTI0NTBjMGEzNzcxMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-20T01:41:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-20T01:41:36Z"}, "message": "tree-ssa-threadupdate.c: Fix trailing whitespace.\n\n\t* tree-ssa-threadupdate.c: Fix trailing whitespace.\n\t* tree-ssa-threadupdate.h: Likewise.\n\nFrom-SVN: r205072", "tree": {"sha": "546aad84eb28d9a7b1322dc72c424f960433091e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/546aad84eb28d9a7b1322dc72c424f960433091e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/comments", "author": null, "committer": null, "parents": [{"sha": "605be31e3f0c0aeec8a253dd7dcf3d6953c5611a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605be31e3f0c0aeec8a253dd7dcf3d6953c5611a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605be31e3f0c0aeec8a253dd7dcf3d6953c5611a"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "01bef34d7987e157c65ba12a12a153355f23ef94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "patch": "@@ -1,3 +1,8 @@\n+2013-11-19  Jeff Law  <law@redhat.com>\n+\t\n+\t* tree-ssa-threadupdate.c: Fix trailing whitespace.\n+\t* tree-ssa-threadupdate.h: Likewise.\n+\n 2013-11-19  Mike Stump  <mikestump@comcast.net>\n \n \t* gdbinit.in: Add pmz to print out mpz values."}, {"sha": "1b7c73d6a0a646d1920168dd7506e735c16703c6", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "patch": "@@ -119,7 +119,7 @@ struct redirection_data : typed_free_remove<redirection_data>\n      and wire up its single remaining outgoing edge to the thread path.\n \n      The other is a joiner block where we leave the control statement\n-     in place, but wire one of the outgoing edges to a thread path. \n+     in place, but wire one of the outgoing edges to a thread path.\n \n      In theory we could have multiple block duplicates in a jump\n      threading path, but I haven't tried that.\n@@ -470,7 +470,7 @@ ssa_fix_duplicate_block_edges (struct redirection_data *rd,\n   vec<jump_thread_edge *> *path = THREAD_PATH (e);\n \n   for (unsigned int count = 0, i = 1; i < path->length (); i++)\n-    { \n+    {\n       /* If we were threading through an joiner block, then we want\n \t to keep its control statement and redirect an outgoing edge.\n \t Else we want to remove the control statement & edges, then create\n@@ -549,10 +549,10 @@ ssa_create_duplicates (struct redirection_data **slot,\n   struct redirection_data *rd = *slot;\n \n   /* The second duplicated block in a jump threading path is specific\n-     to the path.  So it gets stored in RD rather than in LOCAL_DATA. \n+     to the path.  So it gets stored in RD rather than in LOCAL_DATA.\n \t\n      Each time we're called, we have to look through the path and see\n-     if a second block needs to be duplicated. \n+     if a second block needs to be duplicated.\n \n      Note the search starts with the third edge on the path.  The first\n      edge is the incoming edge, the second edge always has its source\n@@ -567,7 +567,7 @@ ssa_create_duplicates (struct redirection_data **slot,\n \t  break;\n \t}\n     }\n-  \n+\n   /* Create a template block if we have not done so already.  Otherwise\n      use the template to create a new block.  */\n   if (local_info->template_block == NULL)\n@@ -732,7 +732,7 @@ redirection_block_p (basic_block bb)\n    the appropriate duplicate of BB.\n \n    If NOLOOP_ONLY is true, we only perform the threading as long as it\n-   does not affect the structure of the loops in a nontrivial way. \n+   does not affect the structure of the loops in a nontrivial way.\n \n    If JOINERS is true, then thread through joiner blocks as well.  */\n \n@@ -892,7 +892,7 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n    By doing things this way we can be as aggressive as possible and\n    not worry that copying a joiner block will create a jump threading\n    opportunity.  */\n-  \n+\n static bool\n thread_block (basic_block bb, bool noloop_only)\n {\n@@ -1591,7 +1591,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n     }\n \n   /* Assume we had a jump thread path which went from the latch to the exit\n-     and a path which goes from outside to inside the same loop.  \n+     and a path which goes from outside to inside the same loop.\n \n      If the latch to exit was handled first, we will thread it and clear\n      loop->header."}, {"sha": "4950170523599dab77d0af4c1fd6d1fecb209dc0", "filename": "gcc/tree-ssa-threadupdate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2Ftree-ssa-threadupdate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711/gcc%2Ftree-ssa-threadupdate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.h?ref=2ed4d7ee3cc50b3ff1fd80eee9152450c0a37711", "patch": "@@ -1,5 +1,5 @@\n /* Communication between registering jump thread requests and\n-   updating the SSA/CFG for jump threading. \n+   updating the SSA/CFG for jump threading.\n    Copyright (C) 2013 Free Software Foundation, Inc.\n \n This file is part of GCC."}]}