{"sha": "fcfce895d320e916fe82ccc0b51701355770ad3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmY2U4OTVkMzIwZTkxNmZlODJjY2MwYjUxNzAxMzU1NzcwYWQzYg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-18T11:06:05Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-18T11:06:05Z"}, "message": "[AArch64]Replace temporary assembler for vld1_dup\n\n        * config/aarch64/arm_neon.h (vld1_dup_f32, vld1_dup_f64, vld1_dup_p8,\n        vld1_dup_p16, vld1_dup_s8, vld1_dup_s16, vld1_dup_s32, vld1_dup_s64,\n        vld1_dup_u8, vld1_dup_u16, vld1_dup_u32, vld1_dup_u64, vld1q_dup_f32,\n        vld1q_dup_f64, vld1q_dup_p8, vld1q_dup_p16, vld1q_dup_s8, vld1q_dup_s16,\n        vld1q_dup_s32, vld1q_dup_s64, vld1q_dup_u8, vld1q_dup_u16,\n        vld1q_dup_u32, vld1q_dup_u64): Replace inline asm with vdup_n_ and\n        pointer dereference.\n\nFrom-SVN: r217705", "tree": {"sha": "29b2716517741eac4bdc8ad84fd78759330a4379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b2716517741eac4bdc8ad84fd78759330a4379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcfce895d320e916fe82ccc0b51701355770ad3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfce895d320e916fe82ccc0b51701355770ad3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfce895d320e916fe82ccc0b51701355770ad3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfce895d320e916fe82ccc0b51701355770ad3b/comments", "author": null, "committer": null, "parents": [{"sha": "ff83f9c8e9e79eb8ec8b9f11b5086f805e774bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff83f9c8e9e79eb8ec8b9f11b5086f805e774bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff83f9c8e9e79eb8ec8b9f11b5086f805e774bad"}], "stats": {"total": 422, "additions": 158, "deletions": 264}, "files": [{"sha": "d3205b275153d70aa687fc3e43a5b7a43b79df65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfce895d320e916fe82ccc0b51701355770ad3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfce895d320e916fe82ccc0b51701355770ad3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcfce895d320e916fe82ccc0b51701355770ad3b", "patch": "@@ -1,3 +1,13 @@\n+2014-11-18  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vld1_dup_f32, vld1_dup_f64, vld1_dup_p8,\n+\tvld1_dup_p16, vld1_dup_s8, vld1_dup_s16, vld1_dup_s32, vld1_dup_s64,\n+\tvld1_dup_u8, vld1_dup_u16, vld1_dup_u32, vld1_dup_u64, vld1q_dup_f32,\n+\tvld1q_dup_f64, vld1q_dup_p8, vld1q_dup_p16, vld1q_dup_s8, vld1q_dup_s16,\n+\tvld1q_dup_s32, vld1q_dup_s64, vld1q_dup_u8, vld1q_dup_u16,\n+\tvld1q_dup_u32, vld1q_dup_u64): Replace inline asm with vdup_n_ and\n+\tpointer dereference.\n+\n 2014-11-18  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* tree.c (element_mode, integer_truep): New functions."}, {"sha": "921a5db1c14dd176d026fcd156f338cf464d0cd3", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 148, "deletions": 264, "changes": 412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfce895d320e916fe82ccc0b51701355770ad3b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfce895d320e916fe82ccc0b51701355770ad3b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=fcfce895d320e916fe82ccc0b51701355770ad3b", "patch": "@@ -6119,270 +6119,6 @@ vhsubq_u32 (uint32x4_t a, uint32x4_t b)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_f32 (const float32_t * a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"ld1r {%0.2s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_f64 (const float64_t * a)\n-{\n-  float64x1_t result;\n-  __asm__ (\"ld1r {%0.1d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_p8 (const poly8_t * a)\n-{\n-  poly8x8_t result;\n-  __asm__ (\"ld1r {%0.8b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_p16 (const poly16_t * a)\n-{\n-  poly16x4_t result;\n-  __asm__ (\"ld1r {%0.4h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_s8 (const int8_t * a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"ld1r {%0.8b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_s16 (const int16_t * a)\n-{\n-  int16x4_t result;\n-  __asm__ (\"ld1r {%0.4h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_s32 (const int32_t * a)\n-{\n-  int32x2_t result;\n-  __asm__ (\"ld1r {%0.2s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_s64 (const int64_t * a)\n-{\n-  int64x1_t result;\n-  __asm__ (\"ld1r {%0.1d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_u8 (const uint8_t * a)\n-{\n-  uint8x8_t result;\n-  __asm__ (\"ld1r {%0.8b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_u16 (const uint16_t * a)\n-{\n-  uint16x4_t result;\n-  __asm__ (\"ld1r {%0.4h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_u32 (const uint32_t * a)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"ld1r {%0.2s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_u64 (const uint64_t * a)\n-{\n-  uint64x1_t result;\n-  __asm__ (\"ld1r {%0.1d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_f32 (const float32_t * a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"ld1r {%0.4s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_f64 (const float64_t * a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"ld1r {%0.2d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_p8 (const poly8_t * a)\n-{\n-  poly8x16_t result;\n-  __asm__ (\"ld1r {%0.16b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_p16 (const poly16_t * a)\n-{\n-  poly16x8_t result;\n-  __asm__ (\"ld1r {%0.8h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_s8 (const int8_t * a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"ld1r {%0.16b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_s16 (const int16_t * a)\n-{\n-  int16x8_t result;\n-  __asm__ (\"ld1r {%0.8h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_s32 (const int32_t * a)\n-{\n-  int32x4_t result;\n-  __asm__ (\"ld1r {%0.4s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_s64 (const int64_t * a)\n-{\n-  int64x2_t result;\n-  __asm__ (\"ld1r {%0.2d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_u8 (const uint8_t * a)\n-{\n-  uint8x16_t result;\n-  __asm__ (\"ld1r {%0.16b}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_u16 (const uint16_t * a)\n-{\n-  uint16x8_t result;\n-  __asm__ (\"ld1r {%0.8h}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_u32 (const uint32_t * a)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"ld1r {%0.4s}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_u64 (const uint64_t * a)\n-{\n-  uint64x2_t result;\n-  __asm__ (\"ld1r {%0.2d}, %1\"\n-\t   : \"=w\"(result)\n-\t   : \"Utv\"(*a)\n-\t   : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmla_n_f32 (float32x2_t a, float32x2_t b, float32_t c)\n {\n@@ -16118,6 +15854,154 @@ vld1q_u64 (const uint64_t *a)\n     __builtin_aarch64_ld1v2di ((const __builtin_aarch64_simd_di *) a);\n }\n \n+/* vld1_dup  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vld1_dup_f32 (const float32_t* __a)\n+{\n+  return vdup_n_f32 (*__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vld1_dup_f64 (const float64_t* __a)\n+{\n+  return vdup_n_f64 (*__a);\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vld1_dup_p8 (const poly8_t* __a)\n+{\n+  return vdup_n_p8 (*__a);\n+}\n+\n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vld1_dup_p16 (const poly16_t* __a)\n+{\n+  return vdup_n_p16 (*__a);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vld1_dup_s8 (const int8_t* __a)\n+{\n+  return vdup_n_s8 (*__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vld1_dup_s16 (const int16_t* __a)\n+{\n+  return vdup_n_s16 (*__a);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vld1_dup_s32 (const int32_t* __a)\n+{\n+  return vdup_n_s32 (*__a);\n+}\n+\n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vld1_dup_s64 (const int64_t* __a)\n+{\n+  return vdup_n_s64 (*__a);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vld1_dup_u8 (const uint8_t* __a)\n+{\n+  return vdup_n_u8 (*__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vld1_dup_u16 (const uint16_t* __a)\n+{\n+  return vdup_n_u16 (*__a);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vld1_dup_u32 (const uint32_t* __a)\n+{\n+  return vdup_n_u32 (*__a);\n+}\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vld1_dup_u64 (const uint64_t* __a)\n+{\n+  return vdup_n_u64 (*__a);\n+}\n+\n+/* vld1q_dup  */\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vld1q_dup_f32 (const float32_t* __a)\n+{\n+  return vdupq_n_f32 (*__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vld1q_dup_f64 (const float64_t* __a)\n+{\n+  return vdupq_n_f64 (*__a);\n+}\n+\n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vld1q_dup_p8 (const poly8_t* __a)\n+{\n+  return vdupq_n_p8 (*__a);\n+}\n+\n+__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n+vld1q_dup_p16 (const poly16_t* __a)\n+{\n+  return vdupq_n_p16 (*__a);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vld1q_dup_s8 (const int8_t* __a)\n+{\n+  return vdupq_n_s8 (*__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vld1q_dup_s16 (const int16_t* __a)\n+{\n+  return vdupq_n_s16 (*__a);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vld1q_dup_s32 (const int32_t* __a)\n+{\n+  return vdupq_n_s32 (*__a);\n+}\n+\n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vld1q_dup_s64 (const int64_t* __a)\n+{\n+  return vdupq_n_s64 (*__a);\n+}\n+\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vld1q_dup_u8 (const uint8_t* __a)\n+{\n+  return vdupq_n_u8 (*__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vld1q_dup_u16 (const uint16_t* __a)\n+{\n+  return vdupq_n_u16 (*__a);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vld1q_dup_u32 (const uint32_t* __a)\n+{\n+  return vdupq_n_u32 (*__a);\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vld1q_dup_u64 (const uint64_t* __a)\n+{\n+  return vdupq_n_u64 (*__a);\n+}\n+\n /* vld1_lane  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}]}