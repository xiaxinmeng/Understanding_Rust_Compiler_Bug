{"sha": "94bedeaf694c728607a718d599edb4d74a2813c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiZWRlYWY2OTRjNzI4NjA3YTcxOGQ1OTllZGI0ZDc0YTI4MTNjMA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-18T21:16:11Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-18T21:18:08Z"}, "message": "rs6000: Rename instruction xvcvbf16sp to xvcvbf16spn\n\nThe xvcvbf16sp mnemonic, which was just added in ISA 3.1 has been renamed\nto xvcvbf16spn, to make it consistent with the other non-signaling conversion\ninstructions which all end with \"n\".  The only use of this instruction is in\nan MMA conversion built-in function, so there is little to no compatibility\nissue.\n\ngcc/\n\t* config/rs6000/rs6000-builtin.def (BU_VSX_1): Rename xvcvbf16sp to\n\txvcvbf16spn.\n\t* config/rs6000/rs6000-call.c (builtin_function_type): Likewise.\n\t* config/rs6000/vsx.md: Likewise.\n\t* doc/extend.texi: Likewise.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-builtin-3.c: Rename xvcvbf16sp to xvcvbf16spn.", "tree": {"sha": "cfe0b1d95eb4933e6ed6f9ce7980678e548deb2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe0b1d95eb4933e6ed6f9ce7980678e548deb2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94bedeaf694c728607a718d599edb4d74a2813c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bedeaf694c728607a718d599edb4d74a2813c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bedeaf694c728607a718d599edb4d74a2813c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bedeaf694c728607a718d599edb4d74a2813c0/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9599c9853a0284789eb8f897a4b5374df694b672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9599c9853a0284789eb8f897a4b5374df694b672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9599c9853a0284789eb8f897a4b5374df694b672"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "03c234ffa98f084b0b46e3153c3c86f9bb7e127e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=94bedeaf694c728607a718d599edb4d74a2813c0", "patch": "@@ -2998,7 +2998,7 @@ BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)\n \n /* POWER10 MMA builtins.  */\n-BU_VSX_1 (XVCVBF16SP,\t    \"xvcvbf16sp\",\tMISC, vsx_xvcvbf16sp)\n+BU_VSX_1 (XVCVBF16SPN,\t    \"xvcvbf16spn\",\tMISC, vsx_xvcvbf16spn)\n BU_VSX_1 (XVCVSPBF16,\t    \"xvcvspbf16\",\tMISC, vsx_xvcvspbf16)\n \n BU_MMA_1 (XXMFACC,\t    \"xxmfacc\",\t\tQUAD, mma_xxmfacc)"}, {"sha": "3a23f1980ce5a7adbefff7803b33e7de988b78ee", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=94bedeaf694c728607a718d599edb4d74a2813c0", "patch": "@@ -14037,7 +14037,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case MISC_BUILTIN_CDTBCD:\n     case MISC_BUILTIN_CBCDTD:\n     case VSX_BUILTIN_XVCVSPBF16:\n-    case VSX_BUILTIN_XVCVBF16SP:\n+    case VSX_BUILTIN_XVCVBF16SPN:\n     case P10_BUILTIN_MTVSRBM:\n     case P10_BUILTIN_MTVSRHM:\n     case P10_BUILTIN_MTVSRWM:"}, {"sha": "54da54c43dcc3f52d258bfc698a8edeb86f15a19", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=94bedeaf694c728607a718d599edb4d74a2813c0", "patch": "@@ -300,7 +300,7 @@\n    UNSPEC_VSX_DIVUD\n    UNSPEC_VSX_MULSD\n    UNSPEC_VSX_SIGN_EXTEND\n-   UNSPEC_VSX_XVCVBF16SP\n+   UNSPEC_VSX_XVCVBF16SPN\n    UNSPEC_VSX_XVCVSPBF16\n    UNSPEC_VSX_XVCVSPSXDS\n    UNSPEC_VSX_XVCVSPHP\n@@ -364,10 +364,10 @@\n   ])\n \n (define_int_iterator XVCVBF16\t[UNSPEC_VSX_XVCVSPBF16\n-\t\t\t\t UNSPEC_VSX_XVCVBF16SP])\n+\t\t\t\t UNSPEC_VSX_XVCVBF16SPN])\n \n (define_int_attr xvcvbf16       [(UNSPEC_VSX_XVCVSPBF16 \"xvcvspbf16\")\n-\t\t\t\t (UNSPEC_VSX_XVCVBF16SP \"xvcvbf16sp\")])\n+\t\t\t\t (UNSPEC_VSX_XVCVBF16SPN \"xvcvbf16spn\")])\n \n ;; Like VI, defined in vector.md, but add ISA 2.07 integer vector ops\n (define_mode_iterator VI2 [V4SI V8HI V16QI V2DI])"}, {"sha": "bcc251481ca3627a5ed4096808ad1bacb86c9d9e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=94bedeaf694c728607a718d599edb4d74a2813c0", "patch": "@@ -21624,7 +21624,7 @@ void __builtin_mma_assemble_pair (__vector_pair *, vec_t, vec_t);\n void __builtin_mma_disassemble_pair (void *, __vector_pair *);\n \n vec_t __builtin_vsx_xvcvspbf16 (vec_t);\n-vec_t __builtin_vsx_xvcvbf16sp (vec_t);\n+vec_t __builtin_vsx_xvcvbf16spn (vec_t);\n @end smallexample\n \n @node RISC-V Built-in Functions"}, {"sha": "9bec78d333fb679aa14f0a32b6433c96bf6d0e37", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bedeaf694c728607a718d599edb4d74a2813c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-3.c?ref=94bedeaf694c728607a718d599edb4d74a2813c0", "patch": "@@ -18,7 +18,7 @@ void\n foo1 (vec_t *vec)\n {\n   vec[1] = __builtin_vsx_xvcvspbf16 (vec[0]);\n-  vec[3] = __builtin_vsx_xvcvbf16sp (vec[2]);\n+  vec[3] = __builtin_vsx_xvcvbf16spn (vec[2]);\n }\n \n /* { dg-final { scan-assembler-times {\\mxxmtacc\\M} 1 } } */\n@@ -28,4 +28,4 @@ foo1 (vec_t *vec)\n /* { dg-final { scan-assembler-not {\\mlxvp\\M} } } */\n /* { dg-final { scan-assembler-not {\\mstxvp\\M} } } */\n /* { dg-final { scan-assembler-times {\\mxvcvspbf16\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcvbf16sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcvbf16spn\\M} 1 } } */"}]}