{"sha": "b3ff651a97bc7d607608ec2e4750646332ad04a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmZjY1MWE5N2JjN2Q2MDc2MDhlYzJlNDc1MDY0NjMzMmFkMDRhNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-16T21:25:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-16T21:25:30Z"}, "message": "cp-tree.h (struct deferred_access_check): Add location.\n\n\t* cp-tree.h (struct deferred_access_check): Add location.\n\t* semantics.c (perform_access_checks): Use it.\n\t(perform_or_defer_access_check): Store it.\n\nFrom-SVN: r189552", "tree": {"sha": "86ad0ab16fc0661b97559a01d587ff8e7f2e41f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ad0ab16fc0661b97559a01d587ff8e7f2e41f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ff651a97bc7d607608ec2e4750646332ad04a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ff651a97bc7d607608ec2e4750646332ad04a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ff651a97bc7d607608ec2e4750646332ad04a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ff651a97bc7d607608ec2e4750646332ad04a5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4111c296f20d0a276a218fd2bbb9308280f86b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4111c296f20d0a276a218fd2bbb9308280f86b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4111c296f20d0a276a218fd2bbb9308280f86b72"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "a8b19aec857bc097d35b3c5b0278e3366e234459", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -1,3 +1,9 @@\n+2012-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (struct deferred_access_check): Add location.\n+\t* semantics.c (perform_access_checks): Use it.\n+\t(perform_or_defer_access_check): Store it.\n+\n 2012-07-16  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* dump.c (dump_stmt): Moved here from c-dump.c."}, {"sha": "59104e7b0943c349851bbdd26e8de71e48de3057", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -5484,6 +5484,8 @@ typedef struct GTY(()) deferred_access_check {\n   tree decl;\n   /* The declaration that should be used in the error message.  */\n   tree diag_decl;\n+  /* The location of this access.  */\n+  location_t loc;\n } deferred_access_check;\n DEF_VEC_O(deferred_access_check);\n DEF_VEC_ALLOC_O(deferred_access_check,gc);"}, {"sha": "81102959f23c663c200e3e460b2b950222bb400f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -259,12 +259,18 @@ perform_access_checks (VEC (deferred_access_check,gc)* checks)\n {\n   int i;\n   deferred_access_check *chk;\n+  location_t loc = input_location;\n \n   if (!checks)\n     return;\n \n   FOR_EACH_VEC_ELT (deferred_access_check, checks, i, chk)\n-    enforce_access (chk->binfo, chk->decl, chk->diag_decl);\n+    {\n+      input_location = chk->loc;\n+      enforce_access (chk->binfo, chk->decl, chk->diag_decl);\n+    }\n+\n+  input_location = loc;\n }\n \n /* Perform the deferred access checks.\n@@ -334,6 +340,7 @@ perform_or_defer_access_check (tree binfo, tree decl, tree diag_decl)\n   new_access->binfo = binfo;\n   new_access->decl = decl;\n   new_access->diag_decl = diag_decl;\n+  new_access->loc = input_location;\n }\n \n /* Used by build_over_call in LOOKUP_SPECULATIVE mode: return whether DECL"}, {"sha": "f0a13ab3c67372fca43574e44a643f7c53e45fb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -1,3 +1,8 @@\n+2012-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/parse/access8.C: Adjust.\n+\t* g++.dg/template/sfinae6_neg.C: Adjust.\n+\n 2012-07-16  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/53824"}, {"sha": "205b7f2712a27a3c0f30b05d37f6ccdf0ca27d2d", "filename": "gcc/testsuite/g++.dg/parse/access8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -5,8 +5,8 @@ class foo\n   typedef int memfun;  // { dg-error \"private\" }\n };\n \n-template<foo::memfun>\n-struct fm_obj { }; // { dg-error \"context\" } \n+template<foo::memfun> // { dg-error \"context\" }\n+struct fm_obj { };\n \n template <typename T = foo::memfun> // { dg-error \"context\" }\n struct S {};"}, {"sha": "28adf73e9f3b5328f1010d5def74f78172d9c15a", "filename": "gcc/testsuite/g++.dg/template/sfinae6_neg.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ff651a97bc7d607608ec2e4750646332ad04a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C?ref=b3ff651a97bc7d607608ec2e4750646332ad04a5", "patch": "@@ -14,14 +14,14 @@ template<typename T> struct enable_if<false, T> { };\n template<typename F, typename T1, typename T2>\n   typename enable_if<sizeof(create_a<F>()(create_a<T1>(), create_a<T2>()), 1),\n \t\t     yes_type>::type\n-  check_is_callable2(type<F>, type<T1>, type<T2>);\n+  check_is_callable2(type<F>, type<T1>, type<T2>); // { dg-error \"within this context\" }\n \n no_type check_is_callable2(...);\n \n template<typename F, typename T1, typename T2 = T1>\n struct is_callable2\n {\n-  static const bool value = // { dg-error \"within this context\" }\n+  static const bool value =\n     (sizeof(check_is_callable2(type<F>(), type<T1>(), type<T2>()))\n      == sizeof(yes_type));\n };"}]}