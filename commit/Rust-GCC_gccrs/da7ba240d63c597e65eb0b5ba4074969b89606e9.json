{"sha": "da7ba240d63c597e65eb0b5ba4074969b89606e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3YmEyNDBkNjNjNTk3ZTY1ZWIwYjViYTQwNzQ5NjliODk2MDZlOQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2009-05-29T15:33:17Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2009-05-29T15:33:17Z"}, "message": "re PR rtl-optimization/40101 (200.sixtrack ICEs in get_seqno_by_preds, at sel-sched-ir.c:3752)\n\n        PR rtl-optimization/40101\n        * sel-sched-ir.c (get_seqno_by_preds): Allow returning negative\n        seqno.  Adjust comment.\n        * sel-sched.c (find_seqno_for_bookkeeping): Assert that when\n        inserting bookkeeping before a jump, the jump is not scheduled.\n        When no positive seqno found, provide a value.  Add comment.\n\nFrom-SVN: r147977", "tree": {"sha": "e67fc2320eecc0c03c624be2080407ae17cbd6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e67fc2320eecc0c03c624be2080407ae17cbd6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7ba240d63c597e65eb0b5ba4074969b89606e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7ba240d63c597e65eb0b5ba4074969b89606e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7ba240d63c597e65eb0b5ba4074969b89606e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7ba240d63c597e65eb0b5ba4074969b89606e9/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71dcd6099ae3f4147d80081042d33d5da3454d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71dcd6099ae3f4147d80081042d33d5da3454d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71dcd6099ae3f4147d80081042d33d5da3454d4d"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "ce0ac90a24e1fac2c3f604a746f3fb5326a1f2c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da7ba240d63c597e65eb0b5ba4074969b89606e9", "patch": "@@ -1,3 +1,12 @@\n+2009-05-29  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/40101\n+\t* sel-sched-ir.c (get_seqno_by_preds): Allow returning negative\n+\tseqno.\tAdjust comment.\n+\t* sel-sched.c (find_seqno_for_bookkeeping): Assert that when \n+\tinserting bookkeeping before a jump, the jump is not scheduled.\n+\tWhen no positive seqno found, provide a value.  Add comment.\n+\n 2009-05-29  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (nonaliasing_component_refs_p): Remove"}, {"sha": "655c87327250bebaee04a27c3e80837a72a994e7", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=da7ba240d63c597e65eb0b5ba4074969b89606e9", "patch": "@@ -3730,7 +3730,8 @@ get_seqno_of_a_pred (insn_t insn)\n   return seqno;\n }\n \n-/*  Find the proper seqno for inserting at INSN.  */\n+/*  Find the proper seqno for inserting at INSN.  Returns -1 if no predecessors\n+    with positive seqno exist.  */\n int\n get_seqno_by_preds (rtx insn)\n {\n@@ -3749,7 +3750,6 @@ get_seqno_by_preds (rtx insn)\n   for (i = 0, seqno = -1; i < n; i++)\n     seqno = MAX (seqno, INSN_SEQNO (preds[i]));\n \n-  gcc_assert (seqno > 0);\n   return seqno;\n }\n "}, {"sha": "a7dedc5ef2d9df30617dd3fa02f67def355e7184", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7ba240d63c597e65eb0b5ba4074969b89606e9/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=da7ba240d63c597e65eb0b5ba4074969b89606e9", "patch": "@@ -4524,11 +4524,27 @@ find_seqno_for_bookkeeping (insn_t place_to_insert, insn_t join_point)\n   if (INSN_P (next) \n       && JUMP_P (next)\n       && BLOCK_FOR_INSN (next) == BLOCK_FOR_INSN (place_to_insert))\n-    seqno = INSN_SEQNO (next);\n+    {\n+      gcc_assert (INSN_SCHED_TIMES (next) == 0);\n+      seqno = INSN_SEQNO (next);\n+    }\n   else if (INSN_SEQNO (join_point) > 0)\n     seqno = INSN_SEQNO (join_point);\n   else\n-    seqno = get_seqno_by_preds (place_to_insert);\n+    {\n+      seqno = get_seqno_by_preds (place_to_insert);\n+\n+      /* Sometimes the fences can move in such a way that there will be \n+         no instructions with positive seqno around this bookkeeping.  \n+         This means that there will be no way to get to it by a regular\n+         fence movement.  Never mind because we pick up such pieces for\n+         rescheduling anyways, so any positive value will do for now.  */\n+      if (seqno < 0)\n+        {\n+          gcc_assert (pipelining_p);\n+          seqno = 1;\n+        }\n+    }\n   \n   gcc_assert (seqno > 0);\n   return seqno;"}]}