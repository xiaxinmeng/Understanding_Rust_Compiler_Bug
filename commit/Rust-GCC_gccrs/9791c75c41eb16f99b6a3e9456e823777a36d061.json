{"sha": "9791c75c41eb16f99b6a3e9456e823777a36d061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5MWM3NWM0MWViMTZmOTliNmEzZTk0NTZlODIzNzc3YTM2ZDA2MQ==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2005-05-04T01:14:51Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2005-05-04T01:14:51Z"}, "message": "xm-m32r.h: Don't define HOST_WORDS_BIG_ENDIAN.\n\n2005-05-04  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* config/m32r/xm-m32r.h: Don't define HOST_WORDS_BIG_ENDIAN.\n\t* config/m32r/xm-linux.h: Don't undefine HOST_WORDS_BIG_ENDIAN.\n\t* mips-tfile.c: Use WORDS_BIG_ENDIAN instead of HOST_WORDS_BIG_ENDIAN.\n\t* aclocal.m4: Don't include accross.m4.\n\t* configure.ac: Use AC_C_BIGENDIAN instead of AC_C_BIGENDIAN_CROSS.\n\tUse AC_CHECK_SIZEOF instead of AC_COMPILE_CHECK_SIZEOF.\n\t* configure, config.in: Regenerate.\n\nFrom-SVN: r99203", "tree": {"sha": "8994305bc3d2598446ce66896886db7939946118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8994305bc3d2598446ce66896886db7939946118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9791c75c41eb16f99b6a3e9456e823777a36d061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9791c75c41eb16f99b6a3e9456e823777a36d061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9791c75c41eb16f99b6a3e9456e823777a36d061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9791c75c41eb16f99b6a3e9456e823777a36d061/comments", "author": null, "committer": null, "parents": [{"sha": "055f6c0fdf11d9afd908f1ee562dd34dc31a2cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/055f6c0fdf11d9afd908f1ee562dd34dc31a2cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/055f6c0fdf11d9afd908f1ee562dd34dc31a2cde"}], "stats": {"total": 177, "additions": 96, "deletions": 81}, "files": [{"sha": "37671990b4e80cb989c1943375b5dec268732332", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -1,3 +1,13 @@\n+2005-05-04  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* config/m32r/xm-m32r.h: Don't define HOST_WORDS_BIG_ENDIAN.\n+\t* config/m32r/xm-linux.h: Don't undefine HOST_WORDS_BIG_ENDIAN.\n+\t* mips-tfile.c: Use WORDS_BIG_ENDIAN instead of HOST_WORDS_BIG_ENDIAN.\n+\t* aclocal.m4: Don't include accross.m4.\n+\t* configure.ac: Use AC_C_BIGENDIAN instead of AC_C_BIGENDIAN_CROSS.\n+\tUse AC_CHECK_SIZEOF instead of AC_COMPILE_CHECK_SIZEOF.\n+\t* configure, config.in: Regenerate.\n+\t\n 2005-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/21265"}, {"sha": "ad7f518f8ede1e9f5c6b9edbfb8b71639f7e54ab", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -1,4 +1,3 @@\n-m4_include([../config/accross.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/iconv.m4])"}, {"sha": "74c3e5a5fca2a87cb410e77b3cbbf69dbdf8d55c", "filename": "gcc/config.in", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -1,8 +1,5 @@\n /* config.in.  Generated from configure.ac by autoheader.  */\n \n-/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */\n-#undef BYTEORDER\n-\n /* Define as the number of bits in a byte, if \\`limits.h' doesn't. */\n #undef CHAR_BIT\n \n@@ -609,10 +606,6 @@\n /* Define if your compiler supports the \\`__int64' type. */\n #undef HAVE___INT64\n \n-/* Define if the host machine stores words of multi-word integers in\n-   big-endian order. */\n-#undef HOST_WORDS_BIG_ENDIAN\n-\n /* Define as const if the declaration of iconv() needs const. */\n #undef ICONV_CONST\n \n@@ -686,7 +679,8 @@\n    The default is the GCC version number. */\n #undef WIN32_REGISTRY_KEY\n \n-/* whether byteorder is bigendian */\n+/* Define to 1 if your processor stores words with the most significant byte\n+   first (like Motorola and SPARC, unlike Intel and VAX). */\n #undef WORDS_BIGENDIAN\n \n /* Always define this when using the GNU C Library */"}, {"sha": "ed7fb68caef6517991ff8b36b49797e91c7c2360", "filename": "gcc/config/m32r/xm-linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig%2Fm32r%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig%2Fm32r%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-linux.h?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -20,7 +20,3 @@\n \n #include <m32r/xm-m32r.h>\n #include <xm-linux.h>\n-\n-/* Doubles are stored in memory with the high order word first.\n-   This matters when cross-compiling.  */\n-#undef HOST_WORDS_BIG_ENDIAN"}, {"sha": "4fd6c06af71c72f70d954b461c526d8cce2e2153", "filename": "gcc/config/m32r/xm-m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -25,10 +25,6 @@\n #define HOST_BITS_PER_LONG      32\n #define HOST_BITS_PER_LONGLONG  64\n \n-/* Doubles are stored in memory with the high order word first.\n-   This matters when cross-compiling.  */\n-#define HOST_WORDS_BIG_ENDIAN    1\n-\n /* target machine dependencies.\n    tm.h is a symbolic link to the actual target specific file.  */\n #include \"tm.h\""}, {"sha": "4c4f3171d9acc1e228cf3eb0cce0cbed470058cb", "filename": "gcc/configure", "status": "modified", "additions": 82, "deletions": 62, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -8344,8 +8344,7 @@ echo $ECHO_N \"checking whether byte ordering is bigendian... $ECHO_C\" >&6\n if test \"${ac_cv_c_bigendian+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n-  ac_cv_c_bigendian=unknown\n-# See if sys/param.h defines the BYTE_ORDER macro.\n+  # See if sys/param.h defines the BYTE_ORDER macro.\n cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n@@ -8354,13 +8353,14 @@ cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n #include <sys/types.h>\n #include <sys/param.h>\n+\n int\n main ()\n {\n-\n #if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN\n  bogus endian macros\n #endif\n+\n   ;\n   return 0;\n }\n@@ -8396,13 +8396,14 @@ cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n #include <sys/types.h>\n #include <sys/param.h>\n+\n int\n main ()\n {\n-\n #if BYTE_ORDER != BIG_ENDIAN\n  not big endian\n #endif\n+\n   ;\n   return 0;\n }\n@@ -8441,19 +8442,79 @@ else\n   echo \"$as_me: failed program was:\" >&5\n sed 's/^/| /' conftest.$ac_ext >&5\n \n+# It does not; compile a test program.\n+if test \"$cross_compiling\" = yes; then\n+  # try to guess the endianness by grepping values into an object file\n+  ac_cv_c_bigendian=unknown\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };\n+short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };\n+void _ascii () { char *s = (char *) ascii_mm; s = (char *) ascii_ii; }\n+short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };\n+short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };\n+void _ebcdic () { char *s = (char *) ebcdic_mm; s = (char *) ebcdic_ii; }\n+int\n+main ()\n+{\n+ _ascii (); _ebcdic ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  if grep BIGenDianSyS conftest.$ac_objext >/dev/null ; then\n+  ac_cv_c_bigendian=yes\n+fi\n+if grep LiTTleEnDian conftest.$ac_objext >/dev/null ; then\n+  if test \"$ac_cv_c_bigendian\" = unknown; then\n+    ac_cv_c_bigendian=no\n+  else\n+    # finding both strings is unlikely to happen, but who knows?\n+    ac_cv_c_bigendian=unknown\n+  fi\n+fi\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n fi\n rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n-if test $ac_cv_c_bigendian = unknown; then\n-if test \"$cross_compiling\" = yes; then\n-   echo $ac_n \"cross-compiling... \" 2>&6\n else\n   cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-main () {\n+int\n+main ()\n+{\n   /* Are we little or big endian?  From Harbison&Steele.  */\n   union\n   {\n@@ -8487,67 +8548,26 @@ fi\n rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n fi\n fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n echo \"$as_me:$LINENO: result: $ac_cv_c_bigendian\" >&5\n echo \"${ECHO_T}$ac_cv_c_bigendian\" >&6\n-if test $ac_cv_c_bigendian = unknown; then\n-echo \"$as_me:$LINENO: checking to probe for byte ordering\" >&5\n-echo $ECHO_N \"checking to probe for byte ordering... $ECHO_C\" >&6\n-\n-cat >conftest.c <<EOF\n-short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };\n-short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };\n-void _ascii() { char* s = (char*) ascii_mm; s = (char*) ascii_ii; }\n-short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };\n-short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };\n-void _ebcdic() { char* s = (char*) ebcdic_mm; s = (char*) ebcdic_ii; }\n-int main() { _ascii (); _ebcdic (); return 0; }\n-EOF\n- if test -f conftest.c ; then\n-     if ${CC-cc} ${CFLAGS} -c conftest.c -o conftest.o && test -f conftest.o ; then\n-        if test `grep -l BIGenDianSyS conftest.o` ; then\n-           echo $ac_n ' big endian probe OK, ' 1>&6\n-           ac_cv_c_bigendian=yes\n-        fi\n-        if test `grep -l LiTTleEnDian conftest.o` ; then\n-           echo $ac_n ' little endian probe OK, ' 1>&6\n-           if test $ac_cv_c_bigendian = yes ; then\n-            ac_cv_c_bigendian=unknown;\n-           else\n-            ac_cv_c_bigendian=no\n-           fi\n-        fi\n-        echo $ac_n 'guessing bigendian ...  ' >&6\n-     fi\n-  fi\n-echo \"$as_me:$LINENO: result: $ac_cv_c_bigendian\" >&5\n-echo \"${ECHO_T}$ac_cv_c_bigendian\" >&6\n-fi\n-if test $ac_cv_c_bigendian = yes; then\n+case $ac_cv_c_bigendian in\n+  yes)\n \n cat >>confdefs.h <<\\_ACEOF\n #define WORDS_BIGENDIAN 1\n _ACEOF\n-\n-\n-cat >>confdefs.h <<\\_ACEOF\n-#define HOST_WORDS_BIG_ENDIAN 1\n-_ACEOF\n-\n-  BYTEORDER=4321\n-else\n-  BYTEORDER=1234\n-fi\n-\n-cat >>confdefs.h <<_ACEOF\n-#define BYTEORDER $BYTEORDER\n-_ACEOF\n-\n-if test $ac_cv_c_bigendian = unknown; then\n-  { { echo \"$as_me:$LINENO: error: unknown endianess - sorry, please pre-set ac_cv_c_bigendian\" >&5\n-echo \"$as_me: error: unknown endianess - sorry, please pre-set ac_cv_c_bigendian\" >&2;}\n-   { (exit 1); exit 1; }; }\n-fi\n+ ;;\n+  no)\n+     ;;\n+  *)\n+    { { echo \"$as_me:$LINENO: error: unknown endianness\n+presetting ac_cv_c_bigendian=no (or yes) will help\" >&5\n+echo \"$as_me: error: unknown endianness\n+presetting ac_cv_c_bigendian=no (or yes) will help\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+esac\n \n \n # --------"}, {"sha": "4a3cb3793706f811b80d16748fdde10e7217cf01", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -893,7 +893,7 @@ AC_CHECK_HEADER(pthread.h, [have_pthread_h=yes], [have_pthread_h=])\n \n # These tests can't be done till we know if we have limits.h.\n gcc_AC_C_CHAR_BIT\n-AC_C_BIGENDIAN_CROSS\n+AC_C_BIGENDIAN\n \n # --------\n # UNSORTED"}, {"sha": "49ae0773d99acd362ddfad71385dec2ee9b9f6a9", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9791c75c41eb16f99b6a3e9456e823777a36d061/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=9791c75c41eb16f99b6a3e9456e823777a36d061", "patch": "@@ -2358,7 +2358,7 @@ initialize_init_file (void)\n   init_file.fdr.fMerge = 1;\n   init_file.fdr.glevel = GLEVEL_2;\n \n-#ifdef HOST_WORDS_BIG_ENDIAN\n+#ifdef WORDS_BIG_ENDIAN\n   init_file.fdr.fBigendian = 1;\n #endif\n "}]}