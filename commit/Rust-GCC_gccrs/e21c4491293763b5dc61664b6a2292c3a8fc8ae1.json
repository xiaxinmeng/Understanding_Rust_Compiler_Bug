{"sha": "e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxYzQ0OTEyOTM3NjNiNWRjNjE2NjRiNmEyMjkyYzNhOGZjOGFlMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-24T19:16:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-24T19:16:21Z"}, "message": "re PR c++/88976 (ICE in fold_convert_loc, at fold-const.c:2552)\n\n\tPR c++/88976\n\t* c-typeck.c (c_finish_omp_cancel): Diagnose more than one if\n\ton #pragma omp cancel with different modifiers.\n\n\t* semantics.c (finish_omp_cancel): Diagnose more than one if\n\ton #pragma omp cancel with different modifiers.  Use\n\tmaybe_convert_cond when not in template or build_x_binary_op\n\totherwise.\n\n\t* c-c++-common/gomp/cancel-2.c: New test.\n\t* gcc.dg/gomp/cancel-1.c: New test.\n\t* g++.dg/gomp/cancel-1.C: New test.\n\t* g++.dg/gomp/cancel-2.C: New test.\n\t* g++.dg/gomp/cancel-3.C: New test.\n\nFrom-SVN: r268245", "tree": {"sha": "d77ff218bb91e25d21ecb7327c17b83a0538d9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d77ff218bb91e25d21ecb7327c17b83a0538d9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acac773aaa0434993650c079685a41b78121a619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acac773aaa0434993650c079685a41b78121a619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acac773aaa0434993650c079685a41b78121a619"}], "stats": {"total": 143, "additions": 139, "deletions": 4}, "files": [{"sha": "32c77f9360b1c5e19ca9d88b8803541974a49c14", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -1,3 +1,9 @@\n+2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88976\n+\t* c-typeck.c (c_finish_omp_cancel): Diagnose more than one if\n+\ton #pragma omp cancel with different modifiers.\n+\n 2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/51628"}, {"sha": "48112006f04d37763a378dfd2d4d6b5c66d60b44", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -12766,6 +12766,18 @@ c_finish_omp_cancel (location_t loc, tree clauses)\n \t  && OMP_CLAUSE_IF_MODIFIER (ifc) != VOID_CST)\n \terror_at (OMP_CLAUSE_LOCATION (ifc),\n \t\t  \"expected %<cancel%> %<if%> clause modifier\");\n+      else\n+\t{\n+\t  tree ifc2 = omp_find_clause (OMP_CLAUSE_CHAIN (ifc), OMP_CLAUSE_IF);\n+\t  if (ifc2 != NULL_TREE)\n+\t    {\n+\t      gcc_assert (OMP_CLAUSE_IF_MODIFIER (ifc) == VOID_CST\n+\t\t\t  && OMP_CLAUSE_IF_MODIFIER (ifc2) != ERROR_MARK\n+\t\t\t  && OMP_CLAUSE_IF_MODIFIER (ifc2) != VOID_CST);\n+\t      error_at (OMP_CLAUSE_LOCATION (ifc2),\n+\t\t\t\"expected %<cancel%> %<if%> clause modifier\");\n+\t    }\n+\t}\n \n       tree type = TREE_TYPE (OMP_CLAUSE_IF_EXPR (ifc));\n       ifc = fold_build2_loc (OMP_CLAUSE_LOCATION (ifc), NE_EXPR,"}, {"sha": "99d43c9d7a4e942e57ebe40cb9ac6dddd0be313f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -1,3 +1,11 @@\n+2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88976\n+\t* semantics.c (finish_omp_cancel): Diagnose more than one if\n+\ton #pragma omp cancel with different modifiers.  Use\n+\tmaybe_convert_cond when not in template or build_x_binary_op\n+\totherwise.\n+\n 2019-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88757 - qualified name treated wrongly as type."}, {"sha": "72191395b47bd43d9e5b9c051e3446bcecf07c93", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -9055,11 +9055,26 @@ finish_omp_cancel (tree clauses)\n \t  && OMP_CLAUSE_IF_MODIFIER (ifc) != VOID_CST)\n \terror_at (OMP_CLAUSE_LOCATION (ifc),\n \t\t  \"expected %<cancel%> %<if%> clause modifier\");\n+      else\n+\t{\n+\t  tree ifc2 = omp_find_clause (OMP_CLAUSE_CHAIN (ifc), OMP_CLAUSE_IF);\n+\t  if (ifc2 != NULL_TREE)\n+\t    {\n+\t      gcc_assert (OMP_CLAUSE_IF_MODIFIER (ifc) == VOID_CST\n+\t\t\t  && OMP_CLAUSE_IF_MODIFIER (ifc2) != ERROR_MARK\n+\t\t\t  && OMP_CLAUSE_IF_MODIFIER (ifc2) != VOID_CST);\n+\t      error_at (OMP_CLAUSE_LOCATION (ifc2),\n+\t\t\t\"expected %<cancel%> %<if%> clause modifier\");\n+\t    }\n+\t}\n \n-      tree type = TREE_TYPE (OMP_CLAUSE_IF_EXPR (ifc));\n-      ifc = fold_build2_loc (OMP_CLAUSE_LOCATION (ifc), NE_EXPR,\n-\t\t\t     boolean_type_node, OMP_CLAUSE_IF_EXPR (ifc),\n-\t\t\t     build_zero_cst (type));\n+      if (!processing_template_decl)\n+\tifc = maybe_convert_cond (OMP_CLAUSE_IF_EXPR (ifc));\n+      else\n+\tifc = build_x_binary_op (OMP_CLAUSE_LOCATION (ifc), NE_EXPR,\n+\t\t\t\t OMP_CLAUSE_IF_EXPR (ifc), ERROR_MARK,\n+\t\t\t\t integer_zero_node, ERROR_MARK,\n+\t\t\t\t NULL, tf_warning_or_error);\n     }\n   else\n     ifc = boolean_true_node;"}, {"sha": "809c952e30ac984bc6d53dc8400abbed8df97cf3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -1,3 +1,12 @@\n+2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88976\n+\t* c-c++-common/gomp/cancel-2.c: New test.\n+\t* gcc.dg/gomp/cancel-1.c: New test.\n+\t* g++.dg/gomp/cancel-1.C: New test.\n+\t* g++.dg/gomp/cancel-2.C: New test.\n+\t* g++.dg/gomp/cancel-3.C: New test.\n+\n 2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89027"}, {"sha": "bd016c231aaec4d81c838d8d66d2d4f514561668", "filename": "gcc/testsuite/c-c++-common/gomp/cancel-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-2.c?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+void\n+foo (void)\n+{\n+  #pragma omp parallel\n+  {\n+    #pragma omp cancel parallel if (1) if (1)\t\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+    #pragma omp cancel parallel if (cancel: 1) if (cancel: 1)\t/* { dg-error \"too many 'if' clauses with 'cancel' modifier\" } */\n+    #pragma omp cancel parallel if (cancel: 1) if (1)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+    #pragma omp cancel parallel if (cancel: 1) if (parallel: 1)\t/* { dg-error \"expected 'cancel' 'if' clause modifier\" } */\n+    #pragma omp cancel parallel if (1) if (cancel: 1)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+    #pragma omp cancel parallel if (parallel: 1) if (cancel: 1)\t/* { dg-error \"expected 'cancel' 'if' clause modifier\" } */\n+  }\n+}"}, {"sha": "a6b1167856fffb878defd65ce438709b66855a3b", "filename": "gcc/testsuite/g++.dg/gomp/cancel-1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-1.C?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/88976\n+// { dg-do compile }\n+\n+template <class T> void\n+foo (T x)\n+{\n+#pragma omp parallel\n+  {\n+  #pragma omp cancel parallel if (x)\n+  }\n+#pragma omp parallel\n+  {\n+  #pragma omp cancel parallel if (1 == 1)\n+  }\n+}\n+\n+void\n+bar (int x, double y, long long z)\n+{\n+  foo (0);\n+  foo (1LL);\n+  foo (1.25);\n+  foo (x);\n+  foo (y);\n+  foo (z);\n+}"}, {"sha": "c9269e7b326f9198da13d8d1a5773407b5a85d72", "filename": "gcc/testsuite/g++.dg/gomp/cancel-2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-2.C?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/88976\n+// { dg-do compile }\n+\n+template <class T> void\n+foo (T x)\n+{\n+#pragma omp parallel\n+  {\n+  #pragma omp cancel parallel if (x)\t// { dg-error \"no match for\" }\n+  }\n+}\n+\n+struct S {};\n+\n+void\n+bar ()\n+{\n+  S s;\n+  foo (s);\n+}"}, {"sha": "87e757b77680d75c87d8ab9b0a7a9d2c3a42cc5f", "filename": "gcc/testsuite/g++.dg/gomp/cancel-3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcancel-3.C?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+\n+struct S { int s; } s;\n+\n+void\n+foo (void)\n+{\n+  #pragma omp parallel\n+  {\n+    #pragma omp cancel parallel if (s)\t// { dg-error \"could not convert 's' from 'S' to 'bool'\" }\n+  }\n+}"}, {"sha": "c2832905d18f73251b7738a936bf01936078330f", "filename": "gcc/testsuite/gcc.dg/gomp/cancel-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fcancel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21c4491293763b5dc61664b6a2292c3a8fc8ae1/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fcancel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fcancel-1.c?ref=e21c4491293763b5dc61664b6a2292c3a8fc8ae1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+struct S { int s; } s;\n+\n+void\n+foo (void)\n+{\n+  #pragma omp parallel\n+  {\n+    #pragma omp cancel parallel if (s)\t/* { dg-error \"used struct type value where scalar is required\" } */\n+  }\n+}"}]}