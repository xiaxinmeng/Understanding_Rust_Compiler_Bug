{"sha": "396ad5177cd6efc2dd508bd44beb0197254ee029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2YWQ1MTc3Y2Q2ZWZjMmRkNTA4YmQ0NGJlYjAxOTcyNTRlZTAyOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-08-10T02:14:26Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-08-10T02:14:26Z"}, "message": "stmt.c (expand_null_return_1): Remove code to generate simple returns and \"use_goto\" argument.\n\n\t* stmt.c (expand_null_return_1): Remove code to generate simple returns\n\tand \"use_goto\" argument.\n\t(expand_null_return, expand_value_return): Update all callers.\n\t* function.c (expand_function_end): Remove code to generate simple\n\treturn.\n\t* config/vax/vax.md (epilogue): New expander for function return.\n\t* doc/md.texi (epilogue): Remove \"if defined\".\n\nFrom-SVN: r44750", "tree": {"sha": "c454a2fe908497cd8a317f531faafcecb078fda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c454a2fe908497cd8a317f531faafcecb078fda1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396ad5177cd6efc2dd508bd44beb0197254ee029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396ad5177cd6efc2dd508bd44beb0197254ee029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396ad5177cd6efc2dd508bd44beb0197254ee029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396ad5177cd6efc2dd508bd44beb0197254ee029/comments", "author": null, "committer": null, "parents": [{"sha": "e4124eb3842f195171f2205e1d66be25e99632c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4124eb3842f195171f2205e1d66be25e99632c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4124eb3842f195171f2205e1d66be25e99632c9"}], "stats": {"total": 86, "additions": 27, "deletions": 59}, "files": [{"sha": "94412ee40669254d9a0dce828e17afba2b3b8da7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=396ad5177cd6efc2dd508bd44beb0197254ee029", "patch": "@@ -1,3 +1,13 @@\n+2001-08-09  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* stmt.c (expand_null_return_1): Remove code to generate simple returns \n+\tand \"use_goto\" argument.\n+\t(expand_null_return, expand_value_return): Update all callers.\n+\t* function.c (expand_function_end): Remove code to generate simple\n+\treturn.\n+\t* config/vax/vax.md (epilogue): New expander for function return.\n+\t* doc/md.texi (epilogue): Remove \"if defined\".\n+\n 2001-08-09  Zack Weinberg  <zackw@stanford.edu>\n \n \t* Makefile.in: Partially revert my previous change:"}, {"sha": "0f976c7b952cc992bb7827ac127068f986b6a32e", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=396ad5177cd6efc2dd508bd44beb0197254ee029", "patch": "@@ -1932,6 +1932,15 @@\n   \"\"\n   \"ret\")\n \n+(define_expand \"epilogue\"\n+  [(return)]\n+  \"\"\n+  \"\n+{\n+  emit_jump_insn (gen_return ());\n+  DONE;\n+}\")\n+\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\""}, {"sha": "f395d6f79671e0dfa4f8dbb0a773ab2f338bbb41", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=396ad5177cd6efc2dd508bd44beb0197254ee029", "patch": "@@ -2966,7 +2966,7 @@ instruction scheduling.\n @cindex @code{epilogue} instruction pattern\n @anchor{epilogue instruction pattern}\n @item @samp{epilogue}\n-This pattern, if defined, emits RTL for exit from a function.  The function\n+This pattern emits RTL for exit from a function.  The function\n exit is responsible for deallocating the stack frame, restoring callee saved\n registers and emitting the return instruction.\n "}, {"sha": "af1c87befb68fbb4f5f7fb413713ac3a867194a8", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=396ad5177cd6efc2dd508bd44beb0197254ee029", "patch": "@@ -7016,18 +7016,6 @@ expand_function_end (filename, line, end_bindings)\n      instead of using the general framework.  */\n   use_return_register ();\n \n-  /* Output a return insn if we are using one.\n-     Otherwise, let the rtl chain end here, to drop through\n-     into the epilogue.  */\n-\n-#ifdef HAVE_return\n-  if (HAVE_return)\n-    {\n-      emit_jump_insn (gen_return ());\n-      emit_barrier ();\n-    }\n-#endif\n-\n   /* Fix up any gotos that jumped out to the outermost\n      binding level of the function.\n      Must follow emitting RETURN_LABEL.  */"}, {"sha": "e9f044a73d833dc33a9c7ce38cab34299f6c3548", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396ad5177cd6efc2dd508bd44beb0197254ee029/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=396ad5177cd6efc2dd508bd44beb0197254ee029", "patch": "@@ -403,7 +403,7 @@ static void expand_nl_goto_receiver\tPARAMS ((void));\n static void expand_nl_goto_receivers\tPARAMS ((struct nesting *));\n static void fixup_gotos\t\t\tPARAMS ((struct nesting *, rtx, tree,\n \t\t\t\t\t       rtx, int));\n-static void expand_null_return_1\tPARAMS ((rtx, int));\n+static void expand_null_return_1\tPARAMS ((rtx));\n static void expand_value_return\t\tPARAMS ((rtx));\n static int tail_recursion_args\t\tPARAMS ((tree, tree));\n static void expand_cleanups\t\tPARAMS ((tree, tree, int, int));\n@@ -2864,21 +2864,14 @@ expand_exit_something ()\n void\n expand_null_return ()\n {\n-  struct nesting *block = block_stack;\n   rtx last_insn = get_last_insn ();\n \n   /* If this function was declared to return a value, but we\n      didn't, clobber the return registers so that they are not\n      propogated live to the rest of the function.  */\n   clobber_return_register ();\n \n-  /* Does any pending block have cleanups?  */\n-  while (block && block->data.block.cleanups == 0)\n-    block = block->next;\n-\n-  /* If yes, use a goto to return, since that runs cleanups.  */\n-\n-  expand_null_return_1 (last_insn, block != 0);\n+  expand_null_return_1 (last_insn);\n }\n \n /* Generate RTL to return from the current function, with value VAL.  */\n@@ -2887,7 +2880,6 @@ static void\n expand_value_return (val)\n      rtx val;\n {\n-  struct nesting *block = block_stack;\n   rtx last_insn = get_last_insn ();\n   rtx return_reg = DECL_RTL (DECL_RESULT (current_function_decl));\n \n@@ -2914,55 +2906,24 @@ expand_value_return (val)\n \temit_move_insn (return_reg, val);\n     }\n \n-  /* Does any pending block have cleanups?  */\n-\n-  while (block && block->data.block.cleanups == 0)\n-    block = block->next;\n-\n-  /* If yes, use a goto to return, since that runs cleanups.\n-     Use LAST_INSN to put cleanups *before* the move insn emitted above.  */\n-\n-  expand_null_return_1 (last_insn, block != 0);\n+  expand_null_return_1 (last_insn);\n }\n \n /* Output a return with no value.  If LAST_INSN is nonzero,\n-   pretend that the return takes place after LAST_INSN.\n-   If USE_GOTO is nonzero then don't use a return instruction;\n-   go to the return label instead.  This causes any cleanups\n-   of pending blocks to be executed normally.  */\n+   pretend that the return takes place after LAST_INSN.  */\n \n static void\n-expand_null_return_1 (last_insn, use_goto)\n+expand_null_return_1 (last_insn)\n      rtx last_insn;\n-     int use_goto;\n {\n   rtx end_label = cleanup_label ? cleanup_label : return_label;\n \n   clear_pending_stack_adjust ();\n   do_pending_stack_adjust ();\n   last_expr_type = 0;\n \n-  /* PCC-struct return always uses an epilogue.  */\n-  if (current_function_returns_pcc_struct || use_goto)\n-    {\n-      if (end_label == 0)\n-\tend_label = return_label = gen_label_rtx ();\n-      expand_goto_internal (NULL_TREE, end_label, last_insn);\n-      return;\n-    }\n-\n-  /* Otherwise output a simple return-insn if one is available,\n-     unless it won't do the job.  */\n-#ifdef HAVE_return\n-  if (HAVE_return && use_goto == 0 && cleanup_label == 0)\n-    {\n-      emit_jump_insn (gen_return ());\n-      emit_barrier ();\n-      return;\n-    }\n-#endif\n-\n-  /* Otherwise jump to the epilogue.  */\n+  if (end_label == 0)\n+     end_label = return_label = gen_label_rtx ();\n   expand_goto_internal (NULL_TREE, end_label, last_insn);\n }\n \f"}]}