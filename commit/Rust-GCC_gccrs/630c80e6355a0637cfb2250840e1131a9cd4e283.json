{"sha": "630c80e6355a0637cfb2250840e1131a9cd4e283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwYzgwZTYzNTVhMDYzN2NmYjIyNTA4NDBlMTEzMWE5Y2Q0ZTI4Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2009-03-04T23:26:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-03-04T23:26:51Z"}, "message": "predcom-1.C: New test.\n\n2009-03-04  Nathan Sidwell  <nathan@codesourcery.com>\n\n\t* g++.dg/torture/predcom-1.C: New test.\n\nFrom-SVN: r144629", "tree": {"sha": "4d4746332f5e2e27d7979a641ab91682ec6ff45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4746332f5e2e27d7979a641ab91682ec6ff45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630c80e6355a0637cfb2250840e1131a9cd4e283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630c80e6355a0637cfb2250840e1131a9cd4e283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630c80e6355a0637cfb2250840e1131a9cd4e283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630c80e6355a0637cfb2250840e1131a9cd4e283/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1242bc9dc6bf9d77e0043367ad1f1319efe4d044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1242bc9dc6bf9d77e0043367ad1f1319efe4d044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1242bc9dc6bf9d77e0043367ad1f1319efe4d044"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "a2f28bba4c8bb636c89199945908d8e38394ac40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630c80e6355a0637cfb2250840e1131a9cd4e283/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630c80e6355a0637cfb2250840e1131a9cd4e283/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=630c80e6355a0637cfb2250840e1131a9cd4e283", "patch": "@@ -1,3 +1,7 @@\n+2009-03-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/torture/predcom-1.C: New test.\n+\n 2009-03-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39362"}, {"sha": "c668cac606dbfc9041288a39faf4db1f2bcdaa1e", "filename": "gcc/testsuite/g++.dg/torture/predcom-1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630c80e6355a0637cfb2250840e1131a9cd4e283/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630c80e6355a0637cfb2250840e1131a9cd4e283/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C?ref=630c80e6355a0637cfb2250840e1131a9cd4e283", "patch": "@@ -0,0 +1,29 @@\n+/* Test for ICE in predictive commoning with empty loop header block\n+   on arm-none-linux-gnueabi.  */\n+\n+struct Foo\n+{\n+  double *ptr;\n+  \n+  Foo (double *ptr_)\n+    : ptr (ptr_)\n+  {\n+  }\n+  \n+  Foo PostInc ()\n+  {\n+    return Foo (ptr++);\n+  }\n+};\n+\n+bool Baz (Foo first, double *last)\n+{\n+  Foo prev (first.ptr);\n+  \n+  first.ptr++;\n+\n+  while (first.ptr != last)\n+    if (*first.PostInc ().ptr < *prev.PostInc ().ptr)\n+      return false;\n+}\n+"}]}