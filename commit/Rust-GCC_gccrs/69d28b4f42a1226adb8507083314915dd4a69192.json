{"sha": "69d28b4f42a1226adb8507083314915dd4a69192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkMjhiNGY0MmExMjI2YWRiODUwNzA4MzMxNDkxNWRkNGE2OTE5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-27T02:12:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-27T02:12:51Z"}, "message": "re PR c++/46105 (Ordering failure among partial specializations with non-deduced context)\n\n\tPR c++/46105\n\t* typeck.c (structural_comptypes): Ignore cv-quals on typename scope.\n\nFrom-SVN: r179229", "tree": {"sha": "252aadf72d57ed1807e5c65376923e98f5088fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/252aadf72d57ed1807e5c65376923e98f5088fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69d28b4f42a1226adb8507083314915dd4a69192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d28b4f42a1226adb8507083314915dd4a69192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d28b4f42a1226adb8507083314915dd4a69192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d28b4f42a1226adb8507083314915dd4a69192/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15442c9c4fc7bb169629a75c170d801e9fa07fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15442c9c4fc7bb169629a75c170d801e9fa07fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15442c9c4fc7bb169629a75c170d801e9fa07fd7"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "abde58c856e48dbc24fa04cee718f66138a49b59", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69d28b4f42a1226adb8507083314915dd4a69192", "patch": "@@ -1,5 +1,8 @@\n 2011-09-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/46105\n+\t* typeck.c (structural_comptypes): Ignore cv-quals on typename scope.\n+\n \tPR c++/50508\n \t* semantics.c (cxx_eval_logical_expression): Use tree_int_cst_equal\n \trather than ==."}, {"sha": "10f17bf0494a900d47328a39afd89bc75693d847", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=69d28b4f42a1226adb8507083314915dd4a69192", "patch": "@@ -1300,7 +1300,9 @@ structural_comptypes (tree t1, tree t2, int strict)\n       if (!cp_tree_equal (TYPENAME_TYPE_FULLNAME (t1),\n \t\t\t  TYPENAME_TYPE_FULLNAME (t2)))\n \treturn false;\n-      if (!same_type_p (TYPE_CONTEXT (t1), TYPE_CONTEXT (t2)))\n+      /* Qualifiers don't matter on scopes.  */\n+      if (!same_type_ignoring_top_level_qualifiers_p (TYPE_CONTEXT (t1),\n+\t\t\t\t\t\t      TYPE_CONTEXT (t2)))\n \treturn false;\n       break;\n "}, {"sha": "32cf9600ca6117000660bcafbfcd69e4e0da0d75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69d28b4f42a1226adb8507083314915dd4a69192", "patch": "@@ -1,5 +1,8 @@\n 2011-09-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/46105\n+\t* g++.dg/template/partial12.C: New.\n+\n \tPR c++/50508\n \t* g++.dg/cpp0x/constexpr-typedef1.C: New.\n "}, {"sha": "05a3eca97be46ea623905a3da7d98e3809b91312", "filename": "gcc/testsuite/g++.dg/template/partial12.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d28b4f42a1226adb8507083314915dd4a69192/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial12.C?ref=69d28b4f42a1226adb8507083314915dd4a69192", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/46105\n+\n+template< typename T >\n+struct empty { // support class is like stripped-down enable_if\n+    typedef void type;\n+};\n+\n+template< class T, typename v = void > // v is always void!\n+struct element {\n+    typedef typename T::value_type type;\n+};\n+\n+template< class T > // T in deduced context, T::element_type is SFINAE:\n+struct element< T, typename empty< typename T::element_type >::type > {\n+    typedef typename T::element_type type;\n+};\n+\n+template< class T >\n+struct element< T const, typename empty< typename T::element_type >::type > {\n+    typedef typename T::element_type const type;\n+};\n+\n+struct has_et {\n+    typedef int element_type;\n+};\n+\n+element<has_et const>::type ip = 0;"}]}