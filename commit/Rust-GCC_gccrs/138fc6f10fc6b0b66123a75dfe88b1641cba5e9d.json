{"sha": "138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4ZmM2ZjEwZmM2YjBiNjYxMjNhNzVkZmU4OGIxNjQxY2JhNWU5ZA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2017-01-19T12:01:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T12:01:01Z"}, "message": "exp_ch3.adb (Expand_Freeze_Enumeration_Type): Mark the representation-to-position function as inlined.\n\n2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Mark the\n\trepresentation-to-position function as inlined.\n\t* sem_cat.adb (Set_Categorization_From_Scope): Do not modify\n\tthe purity of an internally generated entity if it has been\n\texplicitly marked as pure for optimization purposes.\n\t* exp_aggr.adb: Minor reformatting.\n\nFrom-SVN: r244624", "tree": {"sha": "c89100e3151932081eb5f9cfdf34b9a700543cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c89100e3151932081eb5f9cfdf34b9a700543cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed20a004e1fe1423e1e6fb2b47a3aeeb5c5a71ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed20a004e1fe1423e1e6fb2b47a3aeeb5c5a71ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed20a004e1fe1423e1e6fb2b47a3aeeb5c5a71ab"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "29fdcfdaf11006998904a9673bd9bc5a89194128", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "patch": "@@ -1,3 +1,12 @@\n+2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Mark the\n+\trepresentation-to-position function as inlined.\n+\t* sem_cat.adb (Set_Categorization_From_Scope): Do not modify\n+\tthe purity of an internally generated entity if it has been\n+\texplicitly marked as pure for optimization purposes.\n+\t* exp_aggr.adb: Minor reformatting.\n+\n 2017-01-19  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call): Remove side effects on"}, {"sha": "96853395095023634d6655e1262446a74aa02336", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "patch": "@@ -6756,9 +6756,9 @@ package body Exp_Aggr is\n \n          elsif Is_Derived_Type (Typ) then\n \n-            --  For untagged types, non-stored discriminants are replaced\n-            --  with stored discriminants, which are the ones that gigi uses\n-            --  to describe the type and its components.\n+            --  For untagged types, non-stored discriminants are replaced with\n+            --  stored discriminants, which are the ones that gigi uses to\n+            --  describe the type and its components.\n \n             Generate_Aggregate_For_Derived_Type : declare\n                Constraints  : constant List_Id := New_List;\n@@ -6782,9 +6782,8 @@ package body Exp_Aggr is\n                   while Present (Discriminant) loop\n                      New_Comp :=\n                        Make_Component_Association (Loc,\n-                         Choices    =>\n-                           New_List (New_Occurrence_Of (Discriminant, Loc)),\n-\n+                         Choices    => New_List (\n+                           New_Occurrence_Of (Discriminant, Loc)),\n                          Expression =>\n                            New_Copy_Tree\n                              (Get_Discriminant_Value\n@@ -6853,6 +6852,7 @@ package body Exp_Aggr is\n                             (Discriminant,\n                              Typ,\n                              Discriminant_Constraint (Typ)));\n+\n                      Append (New_Comp, Constraints);\n                      Next_Stored_Discriminant (Discriminant);\n                   end loop;\n@@ -6949,7 +6949,6 @@ package body Exp_Aggr is\n             --  all the inherited components.\n \n             if Is_Derived_Type (Typ) then\n-\n                declare\n                   First_Comp   : Node_Id;\n                   Parent_Comps : List_Id;\n@@ -7014,10 +7013,11 @@ package body Exp_Aggr is\n             elsif Tagged_Type_Expansion then\n                declare\n                   Tag_Name  : constant Node_Id :=\n-                    New_Occurrence_Of (First_Tag_Component (Typ), Loc);\n+                                New_Occurrence_Of\n+                                  (First_Tag_Component (Typ), Loc);\n                   Typ_Tag   : constant Entity_Id := RTE (RE_Tag);\n                   Conv_Node : constant Node_Id :=\n-                    Unchecked_Convert_To (Typ_Tag, Tag_Value);\n+                                Unchecked_Convert_To (Typ_Tag, Tag_Value);\n \n                begin\n                   Set_Etype (Conv_Node, Typ_Tag);\n@@ -7040,8 +7040,8 @@ package body Exp_Aggr is\n       begin\n          Aggr := N;\n          while Present (Parent (Aggr))\n-           and then Nkind_In (Parent (Aggr), N_Component_Association,\n-                                             N_Aggregate)\n+           and then Nkind_In (Parent (Aggr), N_Aggregate,\n+                                             N_Component_Association)\n          loop\n             Aggr := Parent (Aggr);\n          end loop;\n@@ -7081,8 +7081,8 @@ package body Exp_Aggr is\n       --  aggregates for C++ imported types must be expanded.\n \n       if Ada_Version >= Ada_2005 and then Is_Limited_View (Typ) then\n-         if not Nkind_In (Parent (N), N_Object_Declaration,\n-                                      N_Component_Association)\n+         if not Nkind_In (Parent (N), N_Component_Association,\n+                                      N_Object_Declaration)\n          then\n             Convert_To_Assignments (N, Typ);\n "}, {"sha": "0acd94f1ab9c800a7ff63087fff75e61bb690a8d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "patch": "@@ -4590,7 +4590,7 @@ package body Exp_Ch3 is\n               Discrete_Subtype_Definitions => New_List (\n                 Make_Subtype_Indication (Loc,\n                   Subtype_Mark => New_Occurrence_Of (Standard_Natural, Loc),\n-                  Constraint =>\n+                  Constraint   =>\n                     Make_Range_Constraint (Loc,\n                       Range_Expression =>\n                         Make_Range (Loc,\n@@ -4810,6 +4810,8 @@ package body Exp_Ch3 is\n          Set_Debug_Info_Off (Fent);\n       end if;\n \n+      Set_Is_Inlined (Fent);\n+\n    exception\n       when RE_Not_Available =>\n          return;"}, {"sha": "a84c0ea475f55eb1d1b2d993cf264bfc45a287f2", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138fc6f10fc6b0b66123a75dfe88b1641cba5e9d/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=138fc6f10fc6b0b66123a75dfe88b1641cba5e9d", "patch": "@@ -777,8 +777,13 @@ package body Sem_Cat is\n       Specification : Node_Id := Empty;\n \n    begin\n-      Set_Is_Pure\n-        (E, Is_Pure (Scop) and then Is_Library_Level_Entity (E));\n+      --  Do not modify the purity of an internally generated entity if it has\n+      --  been explicitly marked as pure for optimization purposes.\n+\n+      if not Has_Pragma_Pure_Function (E) then\n+         Set_Is_Pure\n+           (E, Is_Pure (Scop) and then Is_Library_Level_Entity (E));\n+      end if;\n \n       if not Is_Remote_Call_Interface (E) then\n          if Ekind (E) in Subprogram_Kind then"}]}