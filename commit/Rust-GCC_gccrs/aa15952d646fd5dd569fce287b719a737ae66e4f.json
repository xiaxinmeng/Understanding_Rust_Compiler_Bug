{"sha": "aa15952d646fd5dd569fce287b719a737ae66e4f", "node_id": "C_kwDOANBUbNoAKGFhMTU5NTJkNjQ2ZmQ1ZGQ1NjlmY2UyODdiNzE5YTczN2FlNjZlNGY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-25T07:33:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-25T08:28:00Z"}, "message": "tree-optimization/102920 - fix PHI VN with undefined args\n\nThis fixes a latent issue exposed by now allowing VN_TOP in PHI\narguments.  We may only use optimistic equality when merging values on\ndifferent edges, not when merging values on the same edge - in particular\nwe may not choose the undef value on any edge when there's a not undef\nvalue as well.\n\n2021-10-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102920\n\t* tree-ssa-sccvn.h (expressions_equal_p): Add argument\n\tcontrolling VN_TOP matching behavior.\n\t* tree-ssa-sccvn.c (expressions_equal_p): Likewise.\n\t(vn_phi_eq): Do not optimistically match VN_TOP.\n\n\t* gcc.dg/torture/pr102920.c: New testcase.", "tree": {"sha": "f0b2f3add7c2e9297845e5b19a1dd971f4211791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0b2f3add7c2e9297845e5b19a1dd971f4211791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa15952d646fd5dd569fce287b719a737ae66e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa15952d646fd5dd569fce287b719a737ae66e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa15952d646fd5dd569fce287b719a737ae66e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa15952d646fd5dd569fce287b719a737ae66e4f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c20a9b738a2257bed4e2b0593275336d1e2047a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c20a9b738a2257bed4e2b0593275336d1e2047a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c20a9b738a2257bed4e2b0593275336d1e2047a"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "aa27ac5f6ca9569494b596548eaee3740f9041c0", "filename": "gcc/testsuite/gcc.dg/torture/pr102920.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102920.c?ref=aa15952d646fd5dd569fce287b719a737ae66e4f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-funswitch-loops\" } */\n+\n+unsigned short a = 42;\n+unsigned short b = 1;\n+long int c = 1;\n+unsigned char var_120;\n+unsigned char var_123;\n+\n+void __attribute__((noipa)) test(unsigned short a, unsigned short b, long c)\n+{\n+  for (char i = 0; i < (char)c; i += 5)\n+    if (!b)\n+      var_120 = a;\n+    else\n+      var_123 = a;\n+}\n+\n+int main()\n+{\n+  test(a, b, c);\n+  if (var_123 != 42)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "d524259768410d438d1882073bf457ed5b714bee", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=aa15952d646fd5dd569fce287b719a737ae66e4f", "patch": "@@ -4441,11 +4441,15 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n \t    if (inverted_p)\n \t      std::swap (te2, fe2);\n \n-\t    /* ???  Handle VN_TOP specially.  */\n+\t    /* Since we do not know which edge will be executed we have\n+\t       to be careful when matching VN_TOP.  Be conservative and\n+\t       only match VN_TOP == VN_TOP for now, we could allow\n+\t       VN_TOP on the not prevailing PHI though.  See for example\n+\t       PR102920.  */\n \t    if (! expressions_equal_p (vp1->phiargs[te1->dest_idx],\n-\t\t\t\t       vp2->phiargs[te2->dest_idx])\n+\t\t\t\t       vp2->phiargs[te2->dest_idx], false)\n \t\t|| ! expressions_equal_p (vp1->phiargs[fe1->dest_idx],\n-\t\t\t\t\t  vp2->phiargs[fe2->dest_idx]))\n+\t\t\t\t\t  vp2->phiargs[fe2->dest_idx], false))\n \t      return false;\n \n \t    return true;\n@@ -4470,7 +4474,7 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n       tree phi2op = vp2->phiargs[i];\n       if (phi1op == phi2op)\n \tcontinue;\n-      if (!expressions_equal_p (phi1op, phi2op))\n+      if (!expressions_equal_p (phi1op, phi2op, false))\n \treturn false;\n     }\n \n@@ -5816,17 +5820,20 @@ get_next_constant_value_id (void)\n }\n \n \n-/* Compare two expressions E1 and E2 and return true if they are equal.  */\n+/* Compare two expressions E1 and E2 and return true if they are equal.\n+   If match_vn_top_optimistically is true then VN_TOP is equal to anything,\n+   otherwise VN_TOP only matches VN_TOP.  */\n \n bool\n-expressions_equal_p (tree e1, tree e2)\n+expressions_equal_p (tree e1, tree e2, bool match_vn_top_optimistically)\n {\n   /* The obvious case.  */\n   if (e1 == e2)\n     return true;\n \n   /* If either one is VN_TOP consider them equal.  */\n-  if (e1 == VN_TOP || e2 == VN_TOP)\n+  if (match_vn_top_optimistically\n+      && (e1 == VN_TOP || e2 == VN_TOP))\n     return true;\n \n   /* SSA_NAME compare pointer equal.  */"}, {"sha": "7d53ab5e39f820f039b473df34fb59cf2b2ebaa4", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa15952d646fd5dd569fce287b719a737ae66e4f/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=aa15952d646fd5dd569fce287b719a737ae66e4f", "patch": "@@ -22,7 +22,7 @@\n #define TREE_SSA_SCCVN_H\n \n /* In tree-ssa-sccvn.c  */\n-bool expressions_equal_p (tree, tree);\n+bool expressions_equal_p (tree, tree, bool = true);\n \n \n /* TOP of the VN lattice.  */"}]}