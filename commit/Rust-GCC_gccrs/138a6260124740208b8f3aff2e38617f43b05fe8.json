{"sha": "138a6260124740208b8f3aff2e38617f43b05fe8", "node_id": "C_kwDOANBUbNoAKDEzOGE2MjYwMTI0NzQwMjA4YjhmM2FmZjJlMzg2MTdmNDNiMDVmZTg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-31T11:53:28Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-26T07:32:34Z"}, "message": "rust: Add -frust-compile-until option\n\nThis option helps ensure that we do not introduce regressions on various\nparts of the compilation pipeline. For example, a testcase (or testsuite\nfrom the `testing` project) might pass attribute checking, expansion and\nlowering, but fail during typechecking. Should a change suddenly make\nthat testcase fail expansion, we would not be able to notice it. By\ngenerating tests that run up until expansion, typechecking, compilation\nand so forth we ensure that no regressions are added accidentally to\nalready failing tests/testsuites.", "tree": {"sha": "fadb7a043b546b3b7319377099840839973fea07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fadb7a043b546b3b7319377099840839973fea07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138a6260124740208b8f3aff2e38617f43b05fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138a6260124740208b8f3aff2e38617f43b05fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138a6260124740208b8f3aff2e38617f43b05fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138a6260124740208b8f3aff2e38617f43b05fe8/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0a2729d78d77f14140531ca809d1c45311f0c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2729d78d77f14140531ca809d1c45311f0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a2729d78d77f14140531ca809d1c45311f0c9"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "bb3b9983862ca1cc901681c9c1de9d82f9256d5b", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=138a6260124740208b8f3aff2e38617f43b05fe8", "patch": "@@ -113,6 +113,48 @@ Rust Joined RejectNegative\n \n o\n Rust Joined Separate\n+\n+frust-compile-until=\n+Rust Joined RejectNegative Enum(frust_compile_until) Var(flag_rust_compile_until)\n+-frust-compile-until=[ast|attributecheck|expansion|nameresolution|lowering|typecheck|privacy|unsafety|const|copimlation|end]             When to stop in the pipeline when compiling Rust code\n+\n+Enum\n+Name(frust_compile_until) Type(int) UnknownError(unknown rust compile-until %qs)\n+\n+EnumValue\n+Enum(frust_compile_until) String(ast) Value(0)\n+\n+EnumValue\n+Enum(frust_compile_until) String(attributecheck) Value(1)\n+\n+EnumValue\n+Enum(frust_compile_until) String(expansion) Value(2)\n+\n+EnumValue\n+Enum(frust_compile_until) String(nameresolution) Value(3)\n+\n+EnumValue\n+Enum(frust_compile_until) String(lowering) Value(4)\n+\n+EnumValue\n+Enum(frust_compile_until) String(typecheck) Value(5)\n+\n+EnumValue\n+Enum(frust_compile_until) String(privacy) Value(6)\n+\n+EnumValue\n+Enum(frust_compile_until) String(unsafety) Value(7)\n+\n+EnumValue\n+Enum(frust_compile_until) String(const) Value(8)\n+\n+EnumValue\n+Enum(frust_compile_until) String(compilation) Value(9)\n+\n+EnumValue\n+Enum(frust_compile_until) String(end) Value(10)\n+\n+\n ; Documented in common.opt\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "a6291a3cab8ee7b12061e1a752585c2f8a646a36", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=138a6260124740208b8f3aff2e38617f43b05fe8", "patch": "@@ -223,7 +223,9 @@ Session::handle_option (\n     case OPT_frust_edition_:\n       options.set_edition (flag_rust_edition);\n       break;\n-\n+    case OPT_frust_compile_until_:\n+      options.set_compile_step (flag_rust_compile_until);\n+      break;\n     case OPT_frust_metadata_output_:\n       options.set_metadata_output (arg);\n       break;\n@@ -425,6 +427,8 @@ Session::compile_crate (const char *filename)\n       return;\n     }\n \n+  auto last_step = options.get_compile_until ();\n+\n   // parse file here\n   /* create lexer and parser - these are file-specific and so aren't instance\n    * variables */\n@@ -481,7 +485,7 @@ Session::compile_crate (const char *filename)\n \n   // If -fsyntax-only was passed, we can just skip the remaining passes.\n   // Parsing errors are already emitted in `parse_crate()`\n-  if (flag_syntax_only)\n+  if (flag_syntax_only || last_step == CompileOptions::CompileStep::Ast)\n     return;\n \n   // register plugins pipeline stage\n@@ -500,8 +504,14 @@ Session::compile_crate (const char *filename)\n       // TODO: what do I dump here? injected crate names?\n     }\n \n+  if (last_step == CompileOptions::CompileStep::AttributeCheck)\n+    return;\n+\n   Analysis::AttributeChecker ().go (parsed_crate);\n \n+  if (last_step == CompileOptions::CompileStep::Expansion)\n+    return;\n+\n   // expansion pipeline stage\n   expansion (parsed_crate);\n   rust_debug (\"\\033[0;31mSUCCESSFULLY FINISHED EXPANSION \\033[0m\");\n@@ -514,6 +524,9 @@ Session::compile_crate (const char *filename)\n       rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n \n+  if (last_step == CompileOptions::CompileStep::NameResolution)\n+    return;\n+\n   // resolution pipeline stage\n   Resolver::NameResolution::Resolve (parsed_crate);\n   if (options.dump_option_enabled (CompileOptions::RESOLUTION_DUMP))\n@@ -524,6 +537,9 @@ Session::compile_crate (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Lowering)\n+    return;\n+\n   // lower AST to HIR\n   std::unique_ptr<HIR::Crate> lowered\n     = HIR::ASTLowering::Resolve (parsed_crate);\n@@ -541,6 +557,9 @@ Session::compile_crate (const char *filename)\n       dump_hir_pretty (hir);\n     }\n \n+  if (last_step == CompileOptions::CompileStep::TypeCheck)\n+    return;\n+\n   // type resolve\n   Resolver::TypeResolution::Resolve (hir);\n   if (options.dump_option_enabled (CompileOptions::TYPE_RESOLUTION_DUMP))\n@@ -551,17 +570,30 @@ Session::compile_crate (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Privacy)\n+    return;\n+\n   // Various HIR error passes. The privacy pass happens before the unsafe checks\n   Privacy::Resolver::resolve (hir);\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Unsafety)\n+    return;\n+\n   HIR::UnsafeChecker ().go (hir);\n+\n+  if (last_step == CompileOptions::CompileStep::Const)\n+    return;\n+\n   HIR::ConstChecker ().go (hir);\n \n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Compilation)\n+    return;\n+\n   // do compile to gcc generic\n   Compile::Context ctx (backend);\n   Compile::CompileCrate::Compile (hir, &ctx);"}, {"sha": "6ecd51315c554a3a14c208c36f94646087cc787a", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=138a6260124740208b8f3aff2e38617f43b05fe8", "patch": "@@ -199,6 +199,22 @@ struct CompileOptions\n   } edition\n     = Edition::E2015;\n \n+  enum class CompileStep\n+  {\n+    Ast,\n+    AttributeCheck,\n+    Expansion,\n+    NameResolution,\n+    Lowering,\n+    TypeCheck,\n+    Privacy,\n+    Unsafety,\n+    Const,\n+    Compilation,\n+    End,\n+  } compile_until\n+    = CompileStep::End;\n+\n   bool dump_option_enabled (DumpOption option) const\n   {\n     return dump_options.find (option) != dump_options.end ();\n@@ -239,7 +255,14 @@ struct CompileOptions\n     edition = static_cast<Edition> (raw_edition);\n   }\n \n-  const Edition &get_edition () { return edition; }\n+  const Edition &get_edition () const { return edition; }\n+\n+  void set_compile_step (int raw_step)\n+  {\n+    compile_until = static_cast<CompileStep> (raw_step);\n+  }\n+\n+  const CompileStep &get_compile_until () const { return compile_until; }\n \n   void set_metadata_output (const std::string &path)\n   {"}, {"sha": "7bb3932ef60b27783db576471c121efd1eed80c5", "filename": "gcc/testsuite/rust/compile/frust-compile-until.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138a6260124740208b8f3aff2e38617f43b05fe8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs?ref=138a6260124740208b8f3aff2e38617f43b05fe8", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-compile-until=unsafety\" }\n+\n+unsafe fn foo() {}\n+\n+fn main() {\n+    foo()\n+}"}]}