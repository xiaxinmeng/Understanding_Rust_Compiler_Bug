{"sha": "b29441ec7926c8c8bb789aab3860da6f02a35b80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5NDQxZWM3OTI2YzhjOGJiNzg5YWFiMzg2MGRhNmYwMmEzNWI4MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-25T23:55:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-25T23:55:11Z"}, "message": "semantics.c (classtype_has_nothrow_copy_or_assign_p): Adjust per N2255; rename as classtype_has_nothrow_assign_or_copy_p.\n\ngcc/cp\n2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* semantics.c (classtype_has_nothrow_copy_or_assign_p): Adjust\n\tper N2255; rename as classtype_has_nothrow_assign_or_copy_p.\n\t(trait_expr_value): Adjust.\n\ngcc/testsuite/\n2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* g++.dg/ext/has_nothrow_assign.C: Adjust per N2255.\n\ngcc/\n2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* doc/extend.texi ([Type Traits]): Adjust per N2255.\n\nFrom-SVN: r124170", "tree": {"sha": "6ecdfd411e832bd7ab82f7dc1e3dc7d5b41be3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecdfd411e832bd7ab82f7dc1e3dc7d5b41be3e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29441ec7926c8c8bb789aab3860da6f02a35b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29441ec7926c8c8bb789aab3860da6f02a35b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29441ec7926c8c8bb789aab3860da6f02a35b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29441ec7926c8c8bb789aab3860da6f02a35b80/comments", "author": null, "committer": null, "parents": [{"sha": "d6626ee7a5f2a24b8b6fe2e4d4ae93dabe0f29a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6626ee7a5f2a24b8b6fe2e4d4ae93dabe0f29a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6626ee7a5f2a24b8b6fe2e4d4ae93dabe0f29a7"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "d20eab519610ae9be4cf0f45de99802d64c84a77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -1,3 +1,7 @@\n+2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* doc/extend.texi ([Type Traits]): Adjust per N2255.\n+\n 2007-04-25  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/lib1funcs.asm (__udivsi3, __divsi3): Throw an exception"}, {"sha": "37b7742734e7f8ffefa445f9baa24118989cebad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -1,3 +1,9 @@\n+2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* semantics.c (classtype_has_nothrow_copy_or_assign_p): Adjust\n+\tper N2255; rename as classtype_has_nothrow_assign_or_copy_p.\n+\t(trait_expr_value): Adjust.\n+\n 2007-04-23  Simon Baldwin  <simonb@google.com>\n \n \t* decl.c (grokparms): Added new error for duplicate function"}, {"sha": "c683ba298ff857f4120f7e3c2d21558440112788", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 52, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -4007,63 +4007,37 @@ finish_static_assert (tree condition, tree message, location_t location,\n     }\n }\n \n-/* Called from trait_expr_value to evaluate either __has_nothrow_copy or \n-   __has_nothrow_assign, depending on copy_p.  */\n+/* Called from trait_expr_value to evaluate either __has_nothrow_assign or \n+   __has_nothrow_copy, depending on assign_p.  */\n \n static bool\n-classtype_has_nothrow_copy_or_assign_p (tree type, bool copy_p)\n+classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n {\n-  if ((copy_p && TYPE_HAS_INIT_REF (type))\n-      || (!copy_p && TYPE_HAS_ASSIGN_REF (type)))\n-    {\n-      bool const_p = false;\n-      tree t;\n-\n-      struct copy_data \n-      {\n-\ttree name;\n-\tint quals;\n-      } data;\n-\n-      data.name = copy_p ? NULL_TREE : ansi_assopname (NOP_EXPR);\n-\n-      data.quals = TYPE_QUAL_CONST;\n-      t = locate_copy (type, &data);\n-      if (t)\n-\t{\n-\t  const_p = true;\n-\t  if (!TREE_NOTHROW (t))\n-\t    return false;\n-\t}\n-\n-      if (copy_p || !CP_TYPE_CONST_P (type))\n-\t{\n-\t  data.quals = TYPE_UNQUALIFIED;\n-\t  t = locate_copy (type, &data);\n-\t  if (t && !TREE_NOTHROW (t))\n-\t    return false;\n-\n-\t  data.quals = TYPE_QUAL_VOLATILE;\n-\t  t = locate_copy (type, &data);\n-\t  if (t && !TREE_NOTHROW (t))\n-\t    return false;\n-\t}\n+  tree fns;\n \n-      data.quals = (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n-      t = locate_copy (type, &data);\n-      if (t)\n-\t{\n-\t  const_p = true;\n-\t  if (!TREE_NOTHROW (t))\n-\t    return false;\n-\t}\n-\n-      if (!copy_p && CP_TYPE_CONST_P (type) && !const_p)\n+  if (assign_p)\n+    {\n+      int ix;\n+      ix = lookup_fnfields_1 (type, ansi_assopname (NOP_EXPR));\n+      if (ix < 0)\n \treturn false;\n+      fns = VEC_index (tree, CLASSTYPE_METHOD_VEC (type), ix);\n+    } \n+  else if (TYPE_HAS_INIT_REF (type))\n+    {\n+      /* If construction of the copy constructor was postponed, create\n+\t it now.  */\n+      if (CLASSTYPE_LAZY_COPY_CTOR (type))\n+\tlazily_declare_fn (sfk_copy_constructor, type);\n+      fns = CLASSTYPE_CONSTRUCTORS (type);\n     }\n   else\n     return false;\n \n+  for (; fns; fns = OVL_NEXT (fns))\n+    if (!TREE_NOTHROW (OVL_CURRENT (fns)))\n+      return false;\n+\n   return true;\n }\n \n@@ -4080,9 +4054,11 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n   switch (kind)\n     {\n     case CPTK_HAS_NOTHROW_ASSIGN:\n-      return (trait_expr_value (CPTK_HAS_TRIVIAL_ASSIGN, type1, type2)\n-\t      || (CLASS_TYPE_P (type1)\n-\t\t  && classtype_has_nothrow_copy_or_assign_p (type1, false)));\n+      return (!CP_TYPE_CONST_P (type1) && type_code1 != REFERENCE_TYPE\n+\t      && (trait_expr_value (CPTK_HAS_TRIVIAL_ASSIGN, type1, type2)\n+\t\t  || (CLASS_TYPE_P (type1)\n+\t\t      && classtype_has_nothrow_assign_or_copy_p (type1,\n+\t\t\t\t\t\t\t\t true))));\n \n     case CPTK_HAS_TRIVIAL_ASSIGN:\n       return (!CP_TYPE_CONST_P (type1) && type_code1 != REFERENCE_TYPE\n@@ -4104,7 +4080,7 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_HAS_NOTHROW_COPY:\n       return (trait_expr_value (CPTK_HAS_TRIVIAL_COPY, type1, type2)\n \t      || (CLASS_TYPE_P (type1)\n-\t\t  && classtype_has_nothrow_copy_or_assign_p (type1, true)));\n+\t\t  && classtype_has_nothrow_assign_or_copy_p (type1, false)));\n \n     case CPTK_HAS_TRIVIAL_COPY:\n       return (pod_type_p (type1) || type_code1 == REFERENCE_TYPE"}, {"sha": "45a632493dea990746be7f86e73c2c547c105046", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -11246,13 +11246,12 @@ pair of types).\n \n @table @code\n @item __has_nothrow_assign (type)\n-If @code{__has_trivial_assign (type)} is true then the trait is true, else if\n-@code{type} is a cv class or union type with copy assignment operators that\n-are known not to throw an exception then the trait is true, else it is false.\n-If @code{type} is const qualified, any copy assignment operator must\n-be both known not to throw an exception, and const qualified, for the\n-trait to be true.  Requires: @code{type} shall be a complete type, an\n-array type of unknown bound, or is a @code{void} type.\n+If @code{type} is const qualified or is a reference type then the trait is\n+false.  Otherwise if @code{__has_trivial_assign (type)} is true then the trait\n+is true, else if @code{type} is a cv class or union type with copy assignment\n+operators that are known not to throw an exception then the trait is true,\n+else it is false.  Requires: @code{type} shall be a complete type, an array\n+type of unknown bound, or is a @code{void} type.\n \n @item __has_nothrow_copy (type)\n If @code{__has_trivial_copy (type)} is true then the trait is true, else if"}, {"sha": "c7f3dbb80e26cba491bf98016b30a823eee77717", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -1,3 +1,7 @@\n+2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* g++.dg/ext/has_nothrow_assign.C: Adjust per N2255.\n+\n 2007-04-25  Thiemo Seufer  <ths@mips.com>\n \n \t* gcc.target/mips/mips16e-extends.c (cksum8): Change return"}, {"sha": "5407b963e14a30bb24115b2406bdc6ecd2c63020", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_assign.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29441ec7926c8c8bb789aab3860da6f02a35b80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign.C?ref=b29441ec7926c8c8bb789aab3860da6f02a35b80", "patch": "@@ -146,7 +146,7 @@ int main()\n   assert (NTEST (I1));\n   assert (PTEST (J));\n   assert (NTEST (const K));\n-  assert (PTEST (const L));\n+  assert (NTEST (const L));\n \n   return 0;\n }"}]}