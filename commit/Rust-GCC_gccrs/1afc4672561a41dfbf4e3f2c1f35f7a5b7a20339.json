{"sha": "1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmYzQ2NzI1NjFhNDFkZmJmNGUzZjJjMWYzNWY3YTViN2EyMDMzOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-05-20T08:56:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-05T16:04:13Z"}, "message": "[OpenACC 'exit data'] Strip 'GOMP_MAP_STRUCT' mappings\n\nThese are not itself necessary for OpenACC 'exit data' directives, and are\nskipped over (now) in libgomp.  We might as well not emit them to start with,\nin line with the equivalent OpenMP directive.  We keep the no-op handling in\nlibgomp for the reason of backward compatibility.\n\n\tgcc/\n\t* gimplify.c (gimplify_adjust_omp_clauses): Remove\n\t'GOMP_MAP_STRUCT' mapping from OpenACC 'exit data' directives.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/struct-enter-exit-data-1.c: New file.\n\tlibgomp/\n\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>: Explain\n\tspecial handling.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>", "tree": {"sha": "18196bbe57bf3736f043a52b2204734bafbde9fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18196bbe57bf3736f043a52b2204734bafbde9fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1809628fcff6f512206efd0ae03a3faccc4096f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1809628fcff6f512206efd0ae03a3faccc4096f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1809628fcff6f512206efd0ae03a3faccc4096f2"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "e14932fafaf8e7a39e1069cf15b0ab4b66783a54", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "patch": "@@ -10396,7 +10396,8 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t\t}\n \t    }\n \t  else if (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_STRUCT\n-\t\t   && code == OMP_TARGET_EXIT_DATA)\n+\t\t   && (code == OMP_TARGET_EXIT_DATA\n+\t\t       || code == OACC_EXIT_DATA))\n \t    remove = true;\n \t  else if (DECL_SIZE (decl)\n \t\t   && TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST"}, {"sha": "df405e448b28933a81341e1bb41741fe54c32b25", "filename": "gcc/testsuite/c-c++-common/goacc/struct-enter-exit-data-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c?ref=1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "patch": "@@ -0,0 +1,27 @@\n+/* Check 'GOMP_MAP_STRUCT' mapping, and in particular that it gets removed from\n+   OpenACC 'exit data' directives.  */\n+\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n+\n+struct str {\n+  int a;\n+  int *b;\n+  int *c;\n+  int d;\n+  int *e;\n+  int f;\n+};\n+\n+#define N 1024\n+\n+void\n+test (int *b, int *c, int *e)\n+{\n+  struct str s = { .a = 0, .b = b, .c = c, .d = 0, .e = e, .f = 0 };\n+\n+#pragma acc enter data copyin(s.a, s.b[0:N], s.c[0:N] /* , s.d */ /* , s.e[0:N] */, s.f)\n+  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_enter_exit_data map\\(struct:s \\[len: 4\\]\\) map\\(to:s.a \\[len: [0-9]+\\]\\) map\\(alloc:s.b \\[len: [0-9]+\\]\\) map\\(alloc:s.c \\[len: [0-9]+\\]\\) map\\(to:s.f \\[len: [0-9]+\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.b \\[bias: 0\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.c \\[bias: 0\\]\\)$} gimple } } */\n+\n+#pragma acc exit data copyout(s.a, s.b[0:N], s.c[0:N] /* , s.d */ /* , s.e[0:N] */, s.f)\n+  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_enter_exit_data map\\(from:s.a \\[len: [0-9]+\\]\\) map\\(release:s.b \\[len: [0-9]+\\]\\) map\\(release:s.c \\[len: [0-9]+\\]\\) map\\(from:s.f \\[len: [0-9]+\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.b \\[bias: 0\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.c \\[bias: 0\\]\\)$} gimple } } */\n+}"}, {"sha": "936ae649dd934be6403705a3a22b337d74f06440", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=1afc4672561a41dfbf4e3f2c1f35f7a5b7a20339", "patch": "@@ -1181,8 +1181,9 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \n \tcase GOMP_MAP_STRUCT:\n \t  /* Skip the 'GOMP_MAP_STRUCT' itself, and use the regular processing\n-\t     for all its entries.  TODO: don't generate these no-op\n-\t     'GOMP_MAP_STRUCT's.  */\n+\t     for all its entries.  This special handling exists for GCC 10.1\n+\t     compatibility; afterwards, we're not generating these no-op\n+\t     'GOMP_MAP_STRUCT's anymore.  */\n \t  break;\n \n \tdefault:"}]}