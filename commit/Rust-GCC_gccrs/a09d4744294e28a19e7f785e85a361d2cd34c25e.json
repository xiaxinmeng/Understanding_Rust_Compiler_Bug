{"sha": "a09d4744294e28a19e7f785e85a361d2cd34c25e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5ZDQ3NDQyOTRlMjhhMTllN2Y3ODVlODVhMzYxZDJjZDM0YzI1ZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@duron.akihabara.co.uk", "date": "2004-07-04T12:57:50Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2004-07-04T12:57:50Z"}, "message": "re PR preprocessor/16192 (Bug in expression evaluation when operand is missing)\n\n\t* doc/cpp.texi: Don't document what we do for ill-formed expressions.\n\t* doc/cppopts.texi: Clarify processing of command-line defines.\n\nlibcpp:\n\tPR preprocessor/16192\n\tPR preprocessor/15913\n\tPR preprocessor/15572\n\t* expr.c (_cpp_parse_expr): Handle remaining cases where an\n\texpression is missing.\n\t* init.c (post_options): Traditional cpp doesn't do // comments.\n\ntestsuite:\n\t* gcc.dg/cpp/if-mop.c: Two new testcases.\n\t* gcc.dg/cpp/trad/comment-3.c: New.\n\nFrom-SVN: r84080", "tree": {"sha": "7aa5c20469e6c104827c6efe34863e1cdbc76042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa5c20469e6c104827c6efe34863e1cdbc76042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09d4744294e28a19e7f785e85a361d2cd34c25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09d4744294e28a19e7f785e85a361d2cd34c25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09d4744294e28a19e7f785e85a361d2cd34c25e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09d4744294e28a19e7f785e85a361d2cd34c25e/comments", "author": null, "committer": null, "parents": [{"sha": "b25c17bcf0525adb212c2f08fa2607a0543630a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25c17bcf0525adb212c2f08fa2607a0543630a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25c17bcf0525adb212c2f08fa2607a0543630a8"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "5f635ca21b918c6d0d13dac5bb93c2bbba728cba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -1,3 +1,8 @@\n+2004-07-04  Neil Booth  <neil@duron.akihabara.co.uk>\n+\n+\t* doc/cpp.texi: Don't document what we do for ill-formed expressions.\n+\t* doc/cppopts.texi: Clarify processing of command-line defines.\n+\n 2004-07-04  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/contrib.texi (Contributors): Adjust link for GNU Classpath."}, {"sha": "631992d517309e9fd80ff3578b4b2e090c44baaa", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -2965,9 +2965,6 @@ expression, and may give different results in some cases.  If the value\n comes out to be nonzero, the @samp{#if} succeeds and the @var{controlled\n text} is included; otherwise it is skipped.\n \n-If @var{expression} is not correctly formed, GCC issues an error and\n-treats the conditional as having failed.\n-\n @node Defined\n @subsection Defined\n "}, {"sha": "a6b7eb44fbb4ac01ccad1a79dba1f1decb615219", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -16,11 +16,14 @@\n Predefine @var{name} as a macro, with definition @code{1}.\n \n @item -D @var{name}=@var{definition}\n-Predefine @var{name} as a macro, with definition @var{definition}.\n-There are no restrictions on the contents of @var{definition}, but if\n-you are invoking the preprocessor from a shell or shell-like program you\n-may need to use the shell's quoting syntax to protect characters such as\n-spaces that have a meaning in the shell syntax.\n+The contents of @var{definition} are tokenized and processed as if\n+they appeared during translation phase three in a @samp{#define}\n+directive.  In particular, the definition will be truncated by\n+embedded newline characters.\n+\n+If you are invoking the preprocessor from a shell or shell-like\n+program you may need to use the shell's quoting syntax to protect\n+characters such as spaces that have a meaning in the shell syntax.\n \n If you wish to define a function-like macro on the command line, write\n its argument list with surrounding parentheses before the equals sign"}, {"sha": "9f03b45a6c16557318ca0b43f25cffd6eec9b574", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -1,3 +1,8 @@\n+2004-07-04  Neil Booth  <neil@duron.akihabara.co.uk>\n+\n+\t* gcc.dg/cpp/if-mop.c: Two new testcases.\n+\t* gcc.dg/cpp/trad/comment-3.c: New.\n+\n 2004-07-04  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.fortran-torture/compile/implicit_1.f90: New test."}, {"sha": "119c7392e06caa5cf14e23442f259ec9ef405599", "filename": "gcc/testsuite/gcc.dg/cpp/if-mop.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -23,3 +23,9 @@\n \n #if (2) 4 * 2  /* { dg-error \"missing bin\" \"close paren then immediate\" } */\n #endif\n+\n+#if == 2  /* { dg-error \"no left op\" } */\n+#endif\n+\n+#if (==2)  /* { dg-error \"no left op\" } */\n+#endif"}, {"sha": "e2710ad56297da70c3670d1cb24b2853b00eded7", "filename": "gcc/testsuite/gcc.dg/cpp/trad/comment-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-3.c?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -0,0 +1,6 @@\n+/* Test we don't accept C++ comments.  */\n+\n+/* { dg-do preprocess } */\n+\n+#if 0\n+#endif //  /* { dg-warning \"extra tokens\" } */"}, {"sha": "2cdd78445b88340cf64ce9d3b4a1ac0644592932", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -1,3 +1,12 @@\n+2004-07-04  Neil Booth  <neil@duron.akihabara.co.uk>\n+\n+\tPR preprocessor/16192\n+\tPR preprocessor/15913\n+\tPR preprocessor/15572\n+\t* expr.c (_cpp_parse_expr): Handle remaining cases where an\n+\texpression is missing.\n+\t* init.c (post_options): Traditional cpp doesn't do // comments.\n+\n 2004-06-30  Per Bothner  <per@bothner.com>\n \n \t* include/line-map.h (fileline):  Remove old typedef."}, {"sha": "47689189b2b632379e24bf31c7aacb1a79f8b004", "filename": "libcpp/expr.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -747,18 +747,22 @@ _cpp_parse_expr (cpp_reader *pfile)\n \t}\n       else if (want_value)\n \t{\n-\t  /* Ordering here is subtle and intended to favor the\n-\t     missing parenthesis diagnostics over alternatives.  */\n-\t  if (op.op == CPP_CLOSE_PAREN)\n-\t    {\n-\t      if (top->op == CPP_OPEN_PAREN)\n-\t\tSYNTAX_ERROR (\"void expression between '(' and ')'\");\n-\t    }\n-\t  else if (top->op == CPP_EOF)\n-\t    SYNTAX_ERROR (\"#if with no expression\");\n-\t  if (top->op != CPP_EOF && top->op != CPP_OPEN_PAREN)\n-\t    SYNTAX_ERROR2 (\"operator '%s' has no right operand\",\n-\t\t\t   cpp_token_as_text (pfile, top->token));\n+\t  /* We want a number (or expression) and haven't got one.\n+\t     Try to emit a specific diagnostic.  */\n+\t  if (op.op == CPP_CLOSE_PAREN && top->op == CPP_OPEN_PAREN)\n+\t    SYNTAX_ERROR (\"missing expression between '(' and ')'\");\n+\n+\t  if (op.op == CPP_EOF && top->op == CPP_EOF)\n+ \t    SYNTAX_ERROR (\"#if with no expression\");\n+\n+ \t  if (top->op != CPP_EOF && top->op != CPP_OPEN_PAREN)\n+ \t    SYNTAX_ERROR2 (\"operator '%s' has no right operand\",\n+ \t\t\t   cpp_token_as_text (pfile, top->token));\n+\t  else if (op.op == CPP_CLOSE_PAREN || op.op == CPP_EOF)\n+\t    /* Complain about missing paren during reduction.  */;\n+\t  else\n+\t    SYNTAX_ERROR2 (\"operator '%s' has no left operand\",\n+\t\t\t   cpp_token_as_text (pfile, op.token));\n \t}\n \n       top = reduce (pfile, top, op.op);"}, {"sha": "d1cc1e65d0fff2c100b57827767f7edaa9dbc0ea", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d4744294e28a19e7f785e85a361d2cd34c25e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a09d4744294e28a19e7f785e85a361d2cd34c25e", "patch": "@@ -611,6 +611,8 @@ post_options (cpp_reader *pfile)\n \n   if (CPP_OPTION (pfile, traditional))\n     {\n+      CPP_OPTION (pfile, cplusplus_comments) = 0;\n+\n       /* Traditional CPP does not accurately track column information.  */\n       CPP_OPTION (pfile, show_column) = 0;\n       CPP_OPTION (pfile, trigraphs) = 0;"}]}