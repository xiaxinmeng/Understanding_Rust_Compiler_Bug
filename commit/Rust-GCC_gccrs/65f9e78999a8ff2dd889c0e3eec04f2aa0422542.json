{"sha": "65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmOWU3ODk5OWE4ZmYyZGQ4ODljMGUzZWVjMDRmMmFhMDQyMjU0Mg==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-05-30T16:23:44Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-05-30T16:23:44Z"}, "message": "AArch64 - Support BFI instruction and insv pattern\n\nFrom-SVN: r199454", "tree": {"sha": "25040f18ec2a4983f8e5612e6325ac2bb39367a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25040f18ec2a4983f8e5612e6325ac2bb39367a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/comments", "author": null, "committer": null, "parents": [{"sha": "f1ad09d9bb9c4791c1a849fd476716508d64ef44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ad09d9bb9c4791c1a849fd476716508d64ef44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ad09d9bb9c4791c1a849fd476716508d64ef44"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "f73640a97ec24dc12562538072499f66f7e79928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "patch": "@@ -1,3 +1,8 @@\n+2013-05-30  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.md (insv<mode>): New define_expand.\n+\t(*insv_reg<mode>): New define_insn.\n+\n 2013-05-30  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR rtl-optimization/57439"}, {"sha": "89db09254ebcd6792ad83d5564e2059a87ee8a5b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "patch": "@@ -3163,6 +3163,50 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; Bitfield Insert (insv)\n+(define_expand \"insv<mode>\"\n+  [(set (zero_extract:GPI (match_operand:GPI 0 \"register_operand\")\n+\t\t\t  (match_operand 1 \"const_int_operand\")\n+\t\t\t  (match_operand 2 \"const_int_operand\"))\n+\t(match_operand:GPI 3 \"general_operand\"))]\n+  \"\"\n+{\n+  unsigned HOST_WIDE_INT width = UINTVAL (operands[1]);\n+  unsigned HOST_WIDE_INT pos = UINTVAL (operands[2]);\n+  rtx value = operands[3];\n+\n+  if (width == 0 || (pos + width) > GET_MODE_BITSIZE (<MODE>mode))\n+    FAIL;\n+\n+  if (CONST_INT_P (value))\n+    {\n+      unsigned HOST_WIDE_INT mask = ((unsigned HOST_WIDE_INT)1 << width) - 1;\n+\n+      /* Prefer AND/OR for inserting all zeros or all ones.  */\n+      if ((UINTVAL (value) & mask) == 0\n+\t   || (UINTVAL (value) & mask) == mask)\n+\tFAIL;\n+\n+      /* 16-bit aligned 16-bit wide insert is handled by insv_imm.  */\n+      if (width == 16 && (pos % 16) == 0)\n+\tDONE;\n+    }\n+  operands[3] = force_reg (<MODE>mode, value);\n+})\n+\n+(define_insn \"*insv_reg<mode>\"\n+  [(set (zero_extract:GPI (match_operand:GPI 0 \"register_operand\" \"+r\")\n+\t\t\t  (match_operand 1 \"const_int_operand\" \"n\")\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t(match_operand:GPI 3 \"register_operand\" \"r\"))]\n+  \"!(UINTVAL (operands[1]) == 0\n+     || (UINTVAL (operands[2]) + UINTVAL (operands[1])\n+\t > GET_MODE_BITSIZE (<MODE>mode)))\"\n+  \"bfi\\\\t%<w>0, %<w>3, %2, %1\"\n+  [(set_attr \"v8type\" \"bfm\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n (define_insn \"*<optab><ALLX:mode>_shft_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(ashift:GPI (ANY_EXTEND:GPI"}, {"sha": "65443b9df4302ec144f8d71ba3ac1e3a2db26fbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "patch": "@@ -1,3 +1,7 @@\n+2013-05-30  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/insv_1.c: New test.\n+\n 2013-05-30  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* g++.dg/cpp0x/alias-decl-debug-0.C: Add aarch64*-*-* to the"}, {"sha": "bc8928d734795d62ea8202ee00f012984eba0bb5", "filename": "gcc/testsuite/gcc.target/aarch64/insv_1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f9e78999a8ff2dd889c0e3eec04f2aa0422542/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c?ref=65f9e78999a8ff2dd889c0e3eec04f2aa0422542", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+typedef struct bitfield\n+{\n+  unsigned short eight: 8;\n+  unsigned short four: 4;\n+  unsigned short five: 5;\n+  unsigned short seven: 7;\n+  unsigned int sixteen: 16;\n+} bitfield;\n+\n+bitfield\n+bfi1 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"bfi\\tx\\[0-9\\]+, x\\[0-9\\]+, 0, 8\" } } */\n+  a.eight = 3;\n+  return a;\n+}\n+\n+bitfield\n+bfi2 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"bfi\\tx\\[0-9\\]+, x\\[0-9\\]+, 16, 5\" } } */\n+  a.five = 7;\n+  return a;\n+}\n+\n+bitfield\n+movk (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0x1d6b, lsl 32\" } } */\n+  a.sixteen = 7531;\n+  return a;\n+}\n+\n+bitfield\n+set1 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tx\\[0-9\\]+, x\\[0-9\\]+, 2031616\" } } */\n+  a.five = 0x1f;\n+  return a;\n+}\n+\n+bitfield\n+set0 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, -2031617\" } } */\n+  a.five = 0;\n+  return a;\n+}\n+\n+\n+int\n+main (int argc, char** argv)\n+{\n+  static bitfield a;\n+  bitfield b = bfi1 (a);\n+  bitfield c = bfi2 (b);\n+  bitfield d = movk (c);\n+\n+  if (d.eight != 3)\n+    abort ();\n+\n+  if (d.five != 7)\n+    abort ();\n+\n+  if (d.sixteen != 7531)\n+    abort ();\n+\n+  d = set1 (d);\n+  if (d.five != 0x1f)\n+    abort ();\n+\n+  d = set0 (d);\n+  if (d.five != 0)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}