{"sha": "8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3MTAwNjUwZWY0NDZhZjhhNDZhYzE0MDQyZDZhZTRhOGFiZDVhNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-17T21:47:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-17T21:47:20Z"}, "message": "PR libstdc++/90105 make forward_list::sort stable\n\nWhile testing the fix I also discovered that operator== assumes the\nelements are comparable with operator!= which is not required.\n\n\tPR libstdc++/90105\n\t* include/bits/forward_list.h (operator==): Do not use operator!= to\n\tcompare elements.\n\t(forward_list<T, A>::sort(Comp)): When elements are equal take the one\n\tearlier in the list, so that sort is stable.\n\t* testsuite/23_containers/forward_list/operations/90105.cc: New test.\n\t* testsuite/23_containers/forward_list/comparable.cc: Test with\n\ttypes that meet the minimum EqualityComparable and LessThanComparable\n\trequirements. Remove irrelevant comment.\n\nFrom-SVN: r270427", "tree": {"sha": "01b9b75eee5f0720c6ef40426a35975e2e2cef91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b9b75eee5f0720c6ef40426a35975e2e2cef91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad37a09fa0c457c48dfa83079a9e078e03d5770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad37a09fa0c457c48dfa83079a9e078e03d5770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad37a09fa0c457c48dfa83079a9e078e03d5770"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "fb35a14e1a978e77285e6cd9f95466ee1bf17bad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "patch": "@@ -1,5 +1,15 @@\n 2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90105\n+\t* include/bits/forward_list.h (operator==): Do not use operator!= to\n+\tcompare elements.\n+\t(forward_list<T, A>::sort(Comp)): When elements are equal take the one\n+\tearlier in the list, so that sort is stable.\n+\t* testsuite/23_containers/forward_list/operations/90105.cc: New test.\n+\t* testsuite/23_containers/forward_list/comparable.cc: Test with\n+\ttypes that meet the minimum EqualityComparable and LessThanComparable\n+\trequirements. Remove irrelevant comment.\n+\n \t* include/std/variant (__detail::__variant::_Traits::_S_copy_assign):\n \tDo not depend on whether all alternative types are move constructible.\n \t(__detail::__variant::_Copy_assign_base::operator=): Remove cv-quals"}, {"sha": "088111e3330e5409738d02e2b8946c6b084aeb1d", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "patch": "@@ -399,7 +399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       auto __iy = __ly.cbegin();\n       while (__ix != __lx.cend() && __iy != __ly.cend())\n \t{\n-\t  if (*__ix != *__iy)\n+\t  if (!(*__ix == *__iy))\n \t    return false;\n \t  ++__ix;\n \t  ++__iy;\n@@ -469,9 +469,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t__p = static_cast<_Node*>(__p->_M_next);\n \t\t\t--__psize;\n \t\t      }\n-\t\t    else if (__comp(*__p->_M_valptr(), *__q->_M_valptr()))\n+\t\t    else if (!__comp(*__q->_M_valptr(), *__p->_M_valptr()))\n \t\t      {\n-\t\t\t// First node of p is lower; e must come from p.\n+\t\t\t// First node of q is not lower; e must come from p.\n \t\t\t__e = __p;\n \t\t\t__p = static_cast<_Node*>(__p->_M_next);\n \t\t\t--__psize;"}, {"sha": "252d9b5a423ecbd236abae1579710a72fd4c929b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/comparable.cc", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcomparable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcomparable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcomparable.cc?ref=8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "patch": "@@ -17,15 +17,11 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on list (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n #include <forward_list>\n #include <testsuite_hooks.h>\n \n-int main()\n+void\n+test01()\n {\n   std::forward_list<double> a = {0.0, 1.0, 2.0, 3.0, 4.0};\n   std::forward_list<double> b = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n@@ -43,6 +39,40 @@ int main()\n   VERIFY((b >  a) == true);\n   VERIFY((b >= a) == true);\n   VERIFY((b <= a) == false);\n+}\n+\n+void\n+test02()\n+{\n+  // The EqualityComparable requirements only require ==\n+  struct X {\n+    bool operator==(const X&) const { return true; }\n+  };\n+\n+  std::forward_list<X> a(2);\n+  const auto b = a;\n+  VERIFY( a == b );\n+}\n+\n+void\n+test03()\n+{\n+  // The LessThanComparable requirements only require <\n+  struct X {\n+    bool operator<(const X&) const { return false; }\n+  };\n \n-  return 0;\n+  std::forward_list<X> a(2);\n+  const auto b = a;\n+  VERIFY( !(a < b) );\n+  VERIFY( !(a > b) );\n+  VERIFY( a <= b );\n+  VERIFY( a >= b );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n }"}, {"sha": "3c1478e2e347aca37367d180ae137e84fbacaa3a", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/90105.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F90105.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7100650ef446af8a46ac14042d6ae4a8abd5a6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F90105.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F90105.cc?ref=8c7100650ef446af8a46ac14042d6ae4a8abd5a6", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/90105 - std::forward_list::sort() is not \"stable\"\n+\n+struct X\n+{\n+  int key;\n+  int val;\n+};\n+\n+bool operator<(const X& l, const X& r)\n+{ return l.key < r.key; }\n+\n+bool operator==(const X& l, const X& r)\n+{ return l.key == r.key && l.val == r.val; }\n+\n+void\n+test01()\n+{\n+  std::forward_list<X> l{ {1, 1}, {2, 2}, {1, 3}, {0, 4}, {2, 5}, {0, 6} };\n+  l.sort();\n+  std::forward_list<X> exp{ {0, 4}, {0, 6}, {1, 1}, {1, 3}, {2, 2}, {2, 5} };\n+  VERIFY( l == exp );\n+}\n+\n+void\n+test02()\n+{\n+  std::forward_list<X> l{ {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6} };\n+  const std::forward_list<X> exp = l;\n+  l.sort();\n+  VERIFY( l == exp );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}