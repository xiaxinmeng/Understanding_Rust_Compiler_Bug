{"sha": "36e783e3824427f779f293a991ea97a4d7782588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlNzgzZTM4MjQ0MjdmNzc5ZjI5M2E5OTFlYTk3YTRkNzc4MjU4OA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T21:21:30Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T21:21:30Z"}, "message": "trans-array.c (gfc_trans_array_bound_check, [...]): Rename the former to the latter.\n\n\t* trans-array.c (gfc_trans_array_bound_check,\n\ttrans_array_bound_check): Rename the former to the latter.\n\tReplace descriptor argument with ss argument.  Get descriptor from ss.\n\t(gfc_conv_array_index_offset, conv_array_index_offset): Rename the\n\tformer to the latter.  Update call to trans_array_bound_check.\n\tReplace info argument with ss argument.  Get info from ss.\n\t(gfc_conv_scalarized_array_ref): Update call to conv_array_index_offset.\n\t(add_array_offset): Ditto\n\nFrom-SVN: r180857", "tree": {"sha": "f843134839a71a6ca6b42da7d516d1e90468cbb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f843134839a71a6ca6b42da7d516d1e90468cbb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e783e3824427f779f293a991ea97a4d7782588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e783e3824427f779f293a991ea97a4d7782588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e783e3824427f779f293a991ea97a4d7782588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e783e3824427f779f293a991ea97a4d7782588/comments", "author": null, "committer": null, "parents": [{"sha": "a13d9afef7fc87c6ddd4420192370531ee02524c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13d9afef7fc87c6ddd4420192370531ee02524c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13d9afef7fc87c6ddd4420192370531ee02524c"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "f2640956629a1d98184c07be8feee164fd827cd4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e783e3824427f779f293a991ea97a4d7782588/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e783e3824427f779f293a991ea97a4d7782588/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=36e783e3824427f779f293a991ea97a4d7782588", "patch": "@@ -1,3 +1,14 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_array_bound_check,\n+\ttrans_array_bound_check): Rename the former to the latter.\n+\tReplace descriptor argument with ss argument.  Get descriptor from ss.\n+\t(gfc_conv_array_index_offset, conv_array_index_offset): Rename the\n+\tformer to the latter.  Update call to trans_array_bound_check.\n+\tReplace info argument with ss argument.  Get info from ss.\n+\t(gfc_conv_scalarized_array_ref): Update call to conv_array_index_offset.\n+\t(add_array_offset): Ditto\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_constant_array_constructor,"}, {"sha": "45bf6836f5b212f19436291adcb1d85bee119586", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e783e3824427f779f293a991ea97a4d7782588/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e783e3824427f779f293a991ea97a4d7782588/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=36e783e3824427f779f293a991ea97a4d7782588", "patch": "@@ -2426,17 +2426,20 @@ gfc_conv_array_ubound (tree descriptor, int dim)\n /* Generate code to perform an array index bound check.  */\n \n static tree\n-gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n-\t\t\t     locus * where, bool check_upper)\n+trans_array_bound_check (gfc_se * se, gfc_ss *ss, tree index, int n,\n+\t\t\t locus * where, bool check_upper)\n {\n   tree fault;\n   tree tmp_lo, tmp_up;\n+  tree descriptor;\n   char *msg;\n   const char * name = NULL;\n \n   if (!(gfc_option.rtcheck & GFC_RTCHECK_BOUNDS))\n     return index;\n \n+  descriptor = ss->data.info.descriptor;\n+\n   index = gfc_evaluate_now (index, &se->pre);\n \n   /* We find a name for the error message.  */\n@@ -2521,13 +2524,16 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n    DIM is the array dimension, I is the loop dimension.  */\n \n static tree\n-gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n-\t\t\t     gfc_array_ref * ar, tree stride)\n+conv_array_index_offset (gfc_se * se, gfc_ss * ss, int dim, int i,\n+\t\t\t gfc_array_ref * ar, tree stride)\n {\n+  gfc_ss_info *info;\n   tree index;\n   tree desc;\n   tree data;\n \n+  info = &ss->data.info;\n+\n   /* Get the index into the array for this dimension.  */\n   if (ar)\n     {\n@@ -2544,10 +2550,9 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t  /* We've already translated this value outside the loop.  */\n \t  index = info->subscript[dim]->data.scalar.expr;\n \n-\t  index = gfc_trans_array_bound_check (se, info->descriptor,\n-\t\t\tindex, dim, &ar->where,\n-\t\t\tar->as->type != AS_ASSUMED_SIZE\n-\t\t\t|| dim < ar->dimen - 1);\n+\t  index = trans_array_bound_check (se, ss, index, dim, &ar->where,\n+\t\t\t\t\t   ar->as->type != AS_ASSUMED_SIZE\n+\t\t\t\t\t   || dim < ar->dimen - 1);\n \t  break;\n \n \tcase DIMEN_VECTOR:\n@@ -2574,10 +2579,9 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t  index = fold_convert (gfc_array_index_type, index);\n \n \t  /* Do any bounds checking on the final info->descriptor index.  */\n-\t  index = gfc_trans_array_bound_check (se, info->descriptor,\n-\t\t\tindex, dim, &ar->where,\n-\t\t\tar->as->type != AS_ASSUMED_SIZE\n-\t\t\t|| dim < ar->dimen - 1);\n+\t  index = trans_array_bound_check (se, ss, index, dim, &ar->where,\n+\t\t\t\t\t   ar->as->type != AS_ASSUMED_SIZE\n+\t\t\t\t\t   || dim < ar->dimen - 1);\n \t  break;\n \n \tcase DIMEN_RANGE:\n@@ -2648,7 +2652,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n   else\n     n = 0;\n \n-  index = gfc_conv_array_index_offset (se, info, info->dim[n], n, ar,\n+  index = conv_array_index_offset (se, se->ss, info->dim[n], n, ar,\n \t\t\t\t       info->stride0);\n   /* Add the offset for this dimension to the stored offset for all other\n      dimensions.  */\n@@ -2843,8 +2847,7 @@ add_array_offset (stmtblock_t *pblock, gfc_loopinfo *loop, gfc_ss *ss,\n   se.loop = loop;\n   se.expr = info->descriptor;\n   stride = gfc_conv_array_stride (info->descriptor, array_dim);\n-  index = gfc_conv_array_index_offset (&se, info, array_dim, loop_dim, ar,\n-\t\t\t\t       stride);\n+  index = conv_array_index_offset (&se, ss, array_dim, loop_dim, ar, stride);\n   gfc_add_block_to_block (pblock, &se.pre);\n \n   info->offset = fold_build2_loc (input_location, PLUS_EXPR,"}]}