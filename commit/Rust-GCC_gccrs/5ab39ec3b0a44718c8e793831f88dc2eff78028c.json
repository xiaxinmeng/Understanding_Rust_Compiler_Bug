{"sha": "5ab39ec3b0a44718c8e793831f88dc2eff78028c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiMzllYzNiMGE0NDcxOGM4ZTc5MzgzMWY4OGRjMmVmZjc4MDI4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-02-04T07:37:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-02-04T07:37:44Z"}, "message": "re PR sanitizer/60038 (AddressSanitizer CHECK failed ... \"((*tls_addr + *tls_size)) <= ((*stk_addr + *stk_size))\" on CentOS 5.10)\n\n\tPR sanitizer/60038\n\t* sanitizer_common/sanitizer_linux_libcdep.cc: Include\n\tsanitizer_atomic.h and unistd.h.\n\t(kThreadDescriptorSize): Made static, remove initializer and const,\n\tchange type to atomic_uintptr_t.\n\t(ThreadDescriptorSize): Use confstr(_CS_GNU_LIBC_VERSION, ...) to\n\tquery glibc version, compute kThreadDescriptorSize depending on\n\tglibc version minor number.\n\t(GetThreadStackAndTls): Use ThreadDescriptorSize() instead of\n\tkThreadDescriptorSize directly.\n\nFrom-SVN: r207452", "tree": {"sha": "abc2ecabc213c9fd2c3476ae441836c8c49fdb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc2ecabc213c9fd2c3476ae441836c8c49fdb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab39ec3b0a44718c8e793831f88dc2eff78028c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab39ec3b0a44718c8e793831f88dc2eff78028c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab39ec3b0a44718c8e793831f88dc2eff78028c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab39ec3b0a44718c8e793831f88dc2eff78028c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39960d1cfa261751c9947534590b435b5fe761a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39960d1cfa261751c9947534590b435b5fe761a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39960d1cfa261751c9947534590b435b5fe761a7"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "94eae5e8b8980d590a300fd74c411f21c46837d2", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab39ec3b0a44718c8e793831f88dc2eff78028c/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab39ec3b0a44718c8e793831f88dc2eff78028c/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=5ab39ec3b0a44718c8e793831f88dc2eff78028c", "patch": "@@ -1,3 +1,16 @@\n+2014-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/60038\n+\t* sanitizer_common/sanitizer_linux_libcdep.cc: Include\n+\tsanitizer_atomic.h and unistd.h.\n+\t(kThreadDescriptorSize): Made static, remove initializer and const,\n+\tchange type to atomic_uintptr_t.\n+\t(ThreadDescriptorSize): Use confstr(_CS_GNU_LIBC_VERSION, ...) to\n+\tquery glibc version, compute kThreadDescriptorSize depending on\n+\tglibc version minor number.\n+\t(GetThreadStackAndTls): Use ThreadDescriptorSize() instead of\n+\tkThreadDescriptorSize directly.\n+\n 2014-01-23  Yury Gribov  <y.gribov@samsung.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c9eb435be9157ed0dec479bcda7d0a5f2aaf5ce3", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cc", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab39ec3b0a44718c8e793831f88dc2eff78028c/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab39ec3b0a44718c8e793831f88dc2eff78028c/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cc?ref=5ab39ec3b0a44718c8e793831f88dc2eff78028c", "patch": "@@ -19,6 +19,7 @@\n #include \"sanitizer_placement_new.h\"\n #include \"sanitizer_procmaps.h\"\n #include \"sanitizer_stacktrace.h\"\n+#include \"sanitizer_atomic.h\"\n \n #include <dlfcn.h>\n #include <pthread.h>\n@@ -29,6 +30,7 @@\n #if !SANITIZER_ANDROID\n #include <elf.h>\n #include <link.h>\n+#include <unistd.h>\n #endif\n \n // This function is defined elsewhere if we intercepted pthread_attr_getstack.\n@@ -205,16 +207,41 @@ uptr GetTlsSize() {\n \n #if defined(__x86_64__) || defined(__i386__)\n // sizeof(struct thread) from glibc.\n-// There has been a report of this being different on glibc 2.11 and 2.13. We\n-// don't know when this change happened, so 2.14 is a conservative estimate.\n-#if __GLIBC_PREREQ(2, 14)\n-const uptr kThreadDescriptorSize = FIRST_32_SECOND_64(1216, 2304);\n-#else\n-const uptr kThreadDescriptorSize = FIRST_32_SECOND_64(1168, 2304);\n-#endif\n+static atomic_uintptr_t kThreadDescriptorSize;\n \n uptr ThreadDescriptorSize() {\n-  return kThreadDescriptorSize;\n+  char buf[64];\n+  uptr val = atomic_load(&kThreadDescriptorSize, memory_order_relaxed);\n+  if (val)\n+    return val;\n+#ifdef _CS_GNU_LIBC_VERSION\n+  uptr len = confstr(_CS_GNU_LIBC_VERSION, buf, sizeof(buf));\n+  if (len < sizeof(buf) && internal_strncmp(buf, \"glibc 2.\", 8) == 0) {\n+    char *end;\n+    int minor = internal_simple_strtoll(buf + 8, &end, 10);\n+    if (end != buf + 8 && (*end == '\\0' || *end == '.')) {\n+      /* sizeof(struct thread) values from various glibc versions.  */\n+      if (minor <= 3)\n+        val = FIRST_32_SECOND_64(1104, 1696);\n+      else if (minor == 4)\n+        val = FIRST_32_SECOND_64(1120, 1728);\n+      else if (minor == 5)\n+        val = FIRST_32_SECOND_64(1136, 1728);\n+      else if (minor <= 9)\n+        val = FIRST_32_SECOND_64(1136, 1712);\n+      else if (minor == 10)\n+        val = FIRST_32_SECOND_64(1168, 1776);\n+      else if (minor <= 12)\n+        val = FIRST_32_SECOND_64(1168, 2288);\n+      else\n+        val = FIRST_32_SECOND_64(1216, 2304);\n+    }\n+    if (val)\n+      atomic_store(&kThreadDescriptorSize, val, memory_order_relaxed);\n+    return val;\n+  }\n+#endif\n+  return 0;\n }\n \n // The offset at which pointer to self is located in the thread descriptor.\n@@ -242,7 +269,7 @@ void GetThreadStackAndTls(bool main, uptr *stk_addr, uptr *stk_size,\n   *tls_addr = ThreadSelf();\n   *tls_size = GetTlsSize();\n   *tls_addr -= *tls_size;\n-  *tls_addr += kThreadDescriptorSize;\n+  *tls_addr += ThreadDescriptorSize();\n #else\n   *tls_addr = 0;\n   *tls_size = 0;"}]}