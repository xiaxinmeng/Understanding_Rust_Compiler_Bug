{"sha": "980d88824772f4e5732e7a8722521896bb57b7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwZDg4ODI0NzcyZjRlNTczMmU3YTg3MjI1MjE4OTZiYjU3YjdkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-09-19T15:03:07Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-09-19T15:03:07Z"}, "message": "tm.texi (IS_ASM_LOGICAL_LINE_SEPARATOR): Document new argument.\n\n\t* doc/tm.texi (IS_ASM_LOGICAL_LINE_SEPARATOR): Document new argument.\n\t* final.c (IS_ASM_LOGICAL_LINE_SEPARATOR): Provide two-argument default\n\tdefinition.\n\t(asm_insn_count): Pass template as second argument to it.\n\t* config/avr/avr.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n\t* config/pa/pa.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n\t* config/stormy16/stormy16.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n\t* config/cris/cris.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n\t* config/sh/sh.c (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n\t(sh_insn_length_adjustment): Pass template as second argument to it.\n\t* config/bfin/bfin.h (IS_ASM_LOGICAL_LINE_SEPARATOR): New macro.\n\nFrom-SVN: r128599", "tree": {"sha": "b21e4dce446f7cc1d4263f5bb8e7435e45259ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b21e4dce446f7cc1d4263f5bb8e7435e45259ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980d88824772f4e5732e7a8722521896bb57b7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980d88824772f4e5732e7a8722521896bb57b7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980d88824772f4e5732e7a8722521896bb57b7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980d88824772f4e5732e7a8722521896bb57b7d2/comments", "author": null, "committer": null, "parents": [{"sha": "40a479d430d89c405e5ee33b713b33b2cc07fc27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a479d430d89c405e5ee33b713b33b2cc07fc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a479d430d89c405e5ee33b713b33b2cc07fc27"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "fb335784a2853274b62c0b438b309301c3227467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -1,3 +1,17 @@\n+2007-09-19  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* doc/tm.texi (IS_ASM_LOGICAL_LINE_SEPARATOR): Document new argument.\n+\t* final.c (IS_ASM_LOGICAL_LINE_SEPARATOR): Provide two-argument default\n+\tdefinition.\n+\t(asm_insn_count): Pass template as second argument to it.\n+\t* config/avr/avr.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n+\t* config/pa/pa.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n+\t* config/stormy16/stormy16.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n+\t* config/cris/cris.h (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n+\t* config/sh/sh.c (IS_ASM_LOGICAL_LINE_SEPARATOR): Likewise.\n+\t(sh_insn_length_adjustment): Pass template as second argument to it.\n+\t* config/bfin/bfin.h (IS_ASM_LOGICAL_LINE_SEPARATOR): New macro.\n+\n 2007-09-19  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config.gcc (bfin*-linux-uclibc*): Add ./linux-sysroot-suffix.h"}, {"sha": "3307e970e3e6ecbf8f5e40f9b1f2d6388d20cd04", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -482,8 +482,7 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n \n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '\\n'\t\t\t \\\n-\t\t\t\t\t  || ((C) == '$'))\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '\\n' || ((C) == '$'))\n \n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\t   \\\n do {\t\t\t\t\t\t\t\t\t   \\"}, {"sha": "b568d9a05eb17684ee2746149b020bd433dd5b48", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -1294,6 +1294,10 @@ typedef enum directives {\n     LAST_DIR_NM\n } DIR_ENUM_T;\n \n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR)\t\\\n+  ((C) == ';'\t\t\t\t\t\\\n+   || ((C) == '|' && (STR)[1] == '|'))\n+\n #define TEXT_SECTION_ASM_OP \".text;\"\n #define DATA_SECTION_ASM_OP \".data;\"\n "}, {"sha": "4e1b964c906d834253c6e5e8d0f7e03ec41f017d", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -1179,7 +1179,7 @@ enum cris_pic_symbol_type\n #define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\\n   do { if (!cris_output_addr_const_extra (STREAM, X)) goto FAIL; } while (0)\n \n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) (C) == '@'\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) (C) == '@'\n \n /* Node: Uninitialized Data */\n "}, {"sha": "7680d3d840d6e3a27dd6a924f7b7db6faa222c57", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -1753,7 +1753,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n #define ASM_PN_FORMAT \"%s___%lu\"\n \n /* All HP assemblers use \"!\" to separate logical lines.  */\n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '!')\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '!')\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '@' || (CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^')"}, {"sha": "5a802344e1acf568a6fe6604702807a69654b1d4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -8421,7 +8421,7 @@ fpscr_set_from_mem (int mode, HARD_REG_SET regs_live)\n \n /* Is the given character a logical line separator for the assembler?  */\n #ifndef IS_ASM_LOGICAL_LINE_SEPARATOR\n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == ';')\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == ';')\n #endif\n \n int\n@@ -8484,7 +8484,8 @@ sh_insn_length_adjustment (rtx insn)\n \t  else if ((c == 'r' || c == 'R')\n \t\t   && ! strncasecmp (\"epeat\", template, 5))\n \t    ppi_adjust = 4;\n-\t  while (c && c != '\\n' && ! IS_ASM_LOGICAL_LINE_SEPARATOR (c))\n+\t  while (c && c != '\\n'\n+\t\t && ! IS_ASM_LOGICAL_LINE_SEPARATOR (c, template))\n \t    {\n \t      /* If this is a label, it is obviously not a ppi insn.  */\n \t      if (c == ':' && maybe_label)"}, {"sha": "bd218a6ed04699fa911a93bf7cd93949250d9e5f", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -632,7 +632,7 @@ do {\t\t\t\t\t\t\t\\\n \f\n /* Output of Data.  */\n \n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '|')\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '|')\n \n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(STREAM, DECL, NAME, SIZE, ALIGNMENT) \\\n   xstormy16_asm_output_aligned_common (STREAM, DECL, NAME, SIZE, ALIGNMENT, 1)"}, {"sha": "edcb6702744b18281a476d5eb9e0daaa25ce222d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -7047,9 +7047,11 @@ If no constant-pool epilogue is required, the usual case, you need not\n define this macro.\n @end defmac\n \n-@defmac IS_ASM_LOGICAL_LINE_SEPARATOR (@var{C})\n+@defmac IS_ASM_LOGICAL_LINE_SEPARATOR (@var{C}, @var{STR})\n Define this macro as a C expression which is nonzero if @var{C} is\n-used as a logical line separator by the assembler.\n+used as a logical line separator by the assembler.  @var{STR} points\n+to the position in the string where @var{C} was found; this can be used if\n+a line separator uses multiple characters.\n \n If you do not define this macro, the default is that only\n the character @samp{;} is treated as a logical line separator."}, {"sha": "5187efa6256f5a96bf500d2cd8e9ccfb18eec700", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980d88824772f4e5732e7a8722521896bb57b7d2/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=980d88824772f4e5732e7a8722521896bb57b7d2", "patch": "@@ -109,7 +109,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Is the given character a logical line separator for the assembler?  */\n #ifndef IS_ASM_LOGICAL_LINE_SEPARATOR\n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == ';')\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == ';')\n #endif\n \n #ifndef JUMP_TABLES_IN_TEXT_SECTION\n@@ -1344,7 +1344,8 @@ asm_insn_count (rtx body)\n     template = decode_asm_operands (body, NULL, NULL, NULL, NULL, NULL);\n \n   for (; *template; template++)\n-    if (IS_ASM_LOGICAL_LINE_SEPARATOR (*template) || *template == '\\n')\n+    if (IS_ASM_LOGICAL_LINE_SEPARATOR (*template, template)\n+\t|| *template == '\\n')\n       count++;\n \n   return count;"}]}