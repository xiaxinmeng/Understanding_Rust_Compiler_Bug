{"sha": "701a3eeeef11809f8fcdc2415d846521cde329f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxYTNlZWVlZjExODA5ZjhmY2RjMjQxNWQ4NDY1MjFjZGUzMjlmMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-07-14T22:41:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-07-14T22:41:43Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): New.\n\n2006-07-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): New.\n        * configure.ac: Use it.\n        * configure: Regenerated.\t\n        * config.h.in: Regenerated.\t\t\n        * configure.host: Simplify.\n        * include/bits/atomicity.h: Adjust macros.\t\n        * config/cpu/generic/atomicity.h: Move...\n        * config/cpu/generic/atomicity_mutex: New.\n        * config/cpu/generic/atomicity_mutex/atomicity.h: ...here.\n        * config/cpu/generic/atomic_builtins: Rename...\n        * config/cpu/generic/atomicity_builtins: ...to this.\n        * config/cpu/generic/atomicity_builtins/atomicity.h: Moved.\n\t* config/cpu/mips/atomicity.h: Comment MIPS II requirement.\n\n\t* scripts/testsuite_flags.in: Make --cxxflags reflect CXXFLAGS.\n\nFrom-SVN: r115456", "tree": {"sha": "255b82cf13b2db9f241b86c199799552ea061f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255b82cf13b2db9f241b86c199799552ea061f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/701a3eeeef11809f8fcdc2415d846521cde329f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701a3eeeef11809f8fcdc2415d846521cde329f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701a3eeeef11809f8fcdc2415d846521cde329f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701a3eeeef11809f8fcdc2415d846521cde329f3/comments", "author": null, "committer": null, "parents": [{"sha": "8fce9db0148391e5bc6853c413867a9810c68e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fce9db0148391e5bc6853c413867a9810c68e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fce9db0148391e5bc6853c413867a9810c68e75"}], "stats": {"total": 368, "additions": 239, "deletions": 129}, "files": [{"sha": "28f13ce2d0b0900706dd4d8bf5fb9c54446caaab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -1,3 +1,21 @@\n+2006-07-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): New.\n+        * configure.ac: Use it.\n+        * configure: Regenerated.\t\n+        * config.h.in: Regenerated.\t\t\n+        * configure.host: Simplify.\n+        * include/bits/atomicity.h: Adjust macros.\t\n+        * config/cpu/generic/atomicity.h: Move...\n+        * config/cpu/generic/atomicity_mutex: New.\n+        * config/cpu/generic/atomicity_mutex/atomicity.h: ...here.\n+        * config/cpu/generic/atomic_builtins: Rename...\n+        * config/cpu/generic/atomicity_builtins: ...to this.\n+        * config/cpu/generic/atomicity_builtins/atomicity.h: Moved.\n+\t* config/cpu/mips/atomicity.h: Comment MIPS II requirement.\n+\n+\t* scripts/testsuite_flags.in: Make --cxxflags reflect CXXFLAGS.\n+\t\n 2006-07-14  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (minstd_rand0, minstd_rand, ranlux3, ranlux4):"}, {"sha": "c160a1a33666cd8f28705ea3ad17473a5579739d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -1966,6 +1966,69 @@ AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n ])\n \n \n+dnl\n+dnl Check for atomic builtins.\n+dnl See:\n+dnl http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html#Atomic-Builtins\n+dnl\n+dnl This checks to see if the host supports the compiler-generated\n+dnl builtins for atomic operations. Note, this is intended to be an\n+dnl all-or-nothing switch, so all the atomic operations that are used\n+dnl should be checked.\n+dnl\n+dnl Note:\n+dnl libgomp and libgfortran do this with a link test, instead of an asm test.\n+dnl see: CHECK_SYNC_FETCH_AND_ADD\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_ATOMIC_BUILTINS if the compiler on this target supports atomics.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n+  AC_MSG_CHECKING([for atomic builtins])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n+    cat > conftest.$ac_ext << EOF\n+[#]line __oline__ \"configure\"\n+int main()\n+{\n+  // NB: _Atomic_word not necessarily int. \n+  typedef int atomic_type;\n+  atomic_type c1;\n+  atomic_type c2;\n+  const atomic_type c3(0);\n+  if (__sync_fetch_and_add(&c1, c2) == c3)\n+    {\n+      // Do something.\n+    }\n+   return 0;\n+}\n+EOF\n+    old_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -S\"\n+    if AC_TRY_EVAL(ac_compile); then\n+      if grep __sync_fetch_and_add conftest.s >/dev/null 2>&1 ; then\n+        enable_atomic_builtins=no\n+      else\n+      AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS, 1,\n+        [Define if builtin atomic operations are supported on this host.])\n+        enable_atomic_builtins=yes\n+\tatomicity_dir=cpu/generic/atomicity_builtins\n+      fi\n+    fi\n+    CXXFLAGS=\"$old_CXXFLAGS\"\n+    rm -f conftest*\n+\n+   # Now, if still generic, set to mutex.\n+  if test $atomicity_dir = \"cpu/generic\" ; then\n+\tatomicity_dir=cpu/generic/atomicity_mutex\n+  fi\n+ AC_LANG_RESTORE\n+ AC_MSG_RESULT($enable_atomic_builtins)\n+])\n+\n+\n dnl\n dnl Check for exception handling support.  If an explicit enable/disable\n dnl sjlj exceptions is given, we don't have to detect.  Otherwise the"}, {"sha": "47e3c989b789cf63ac0abd9f9611220b4d249ab4", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -655,7 +655,7 @@\n /* Version number of package */\n #undef VERSION\n \n-/* Define if atomic builtins are provided for this platform. */\n+/* Define if builtin atomic operations are supported on this host. */\n #undef _GLIBCXX_ATOMIC_BUILTINS\n \n /* Define to use concept checking code from the boost libraries. */"}, {"sha": "82429be25937f1de231283ba3a83e11de2937e5b", "filename": "libstdc++-v3/config/cpu/generic/atomicity_builtins/atomicity.h", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -28,10 +28,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <bits/atomicity.h>\n+#include <bits/c++config.h>\n+#include <bits/atomic_word.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+  // XXX GLIBCXX_ABI Deprecated\n+  // Should be inlined, and not exported.\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)", "previous_filename": "libstdc++-v3/config/cpu/generic/atomic_builtins/atomicity.h"}, {"sha": "5ecb465e862740fe2cdd49e0f39ea00219724d0d", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "previous_filename": "libstdc++-v3/config/cpu/generic/atomicity.h"}, {"sha": "33582a3d34c6a89c67506e480349650e235b2824", "filename": "libstdc++-v3/config/cpu/mips/atomicity.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: MIPS version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,6 +32,7 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+  // NB: MIPS II or above required.\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)"}, {"sha": "a180173bec8e0aa1118e546edcb811665ff9ddcf", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -7994,7 +7994,71 @@ _ACEOF\n \n \n \n-if test $atomicity_dir = cpu/generic ; then\n+\n+  echo \"$as_me:$LINENO: checking for atomic builtins\" >&5\n+echo $ECHO_N \"checking for atomic builtins... $ECHO_C\" >&6\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n+    cat > conftest.$ac_ext << EOF\n+#line 8011 \"configure\"\n+int main()\n+{\n+  // NB: _Atomic_word not necessarily int.\n+  typedef int atomic_type;\n+  atomic_type c1;\n+  atomic_type c2;\n+  const atomic_type c3(0);\n+  if (__sync_fetch_and_add(&c1, c2) == c3)\n+    {\n+      // Do something.\n+    }\n+   return 0;\n+}\n+EOF\n+    old_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS=\"$CXXFLAGS -S\"\n+    if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; then\n+      if grep __sync_fetch_and_add conftest.s >/dev/null 2>&1 ; then\n+        enable_atomic_builtins=no\n+      else\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_ATOMIC_BUILTINS 1\n+_ACEOF\n+\n+        enable_atomic_builtins=yes\n+\tatomicity_dir=cpu/generic/atomicity_builtins\n+      fi\n+    fi\n+    CXXFLAGS=\"$old_CXXFLAGS\"\n+    rm -f conftest*\n+\n+   # Now, if still generic, set to mutex.\n+  if test $atomicity_dir = \"cpu/generic\" ; then\n+\tatomicity_dir=cpu/generic/atomicity_mutex\n+  fi\n+ ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+ echo \"$as_me:$LINENO: result: $enable_atomic_builtins\" >&5\n+echo \"${ECHO_T}$enable_atomic_builtins\" >&6\n+\n+if test $atomicity_dir = cpu/generic/atomic_mutex ; then\n   { echo \"$as_me:$LINENO: WARNING: No native atomic operations are provided for this platform.\" >&5\n echo \"$as_me: WARNING: No native atomic operations are provided for this platform.\" >&2;}\n   if test $target_thread_file = single; then\n@@ -109919,14 +109983,6 @@ ABI_TWEAKS_SRCDIR=config/${abi_tweaks_dir}\n \n \n \n-# Atomic builtins can be inlined in bits/atomicity.h.\n-if test $atomicity_dir = cpu/generic/atomic_builtins ; then\n-\n-cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_ATOMIC_BUILTINS 1\n-_ACEOF\n-\n-fi\n \n # Determine cross-compile flags and AM_CONDITIONALs.\n #AC_SUBST(GLIBCXX_IS_NATIVE)"}, {"sha": "baada76a3cbd0dc9479f3724923d6f4b5d83f42c", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -112,7 +112,8 @@ GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n # No surprises, no surprises...\n GLIBCXX_ENABLE_THREADS\n-if test $atomicity_dir = cpu/generic ; then\n+GLIBCXX_ENABLE_ATOMIC_BUILTINS\n+if test $atomicity_dir = cpu/generic/atomic_mutex ; then\n   AC_MSG_WARN([No native atomic operations are provided for this platform.])\n   if test $target_thread_file = single; then\n     AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n@@ -321,11 +322,6 @@ AC_SUBST(CPU_DEFINES_SRCDIR)\n AC_SUBST(ABI_TWEAKS_SRCDIR)\n AC_SUBST(OS_INC_SRCDIR)\n \n-# Atomic builtins can be inlined in bits/atomicity.h.\n-if test $atomicity_dir = cpu/generic/atomic_builtins ; then\n-  AC_DEFINE([_GLIBCXX_ATOMIC_BUILTINS], 1,\n-            [Define if atomic builtins are provided for this platform.])\n-fi\n \n # Determine cross-compile flags and AM_CONDITIONALs.\n #AC_SUBST(GLIBCXX_IS_NATIVE)"}, {"sha": "441eb4cab3713a136b730eeecfaa3f798a0fb365", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 69, "deletions": 71, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -67,13 +67,16 @@\n c_model=c_std\n c_compatibility=no\n atomic_word_dir=cpu/generic\n-cpu_defines_dir=cpu/generic\n+atomicity_dir=\"cpu/generic\"\n+cpu_defines_dir=\"cpu/generic\"\n+try_cpu=generic\n+abi_tweaks_dir=\"cpu/generic\"\n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n-# Here we override defaults and catch more general cases due to naming\n-# conventions (e.g., chip_name* to catch all variants).\n \n+# Provide a way to funnel exotic flavors and prefixed/postfixed chip\n+# variants into the established source config/cpu/* sub-directories.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${host_cpu}\" in\n   alpha*)\n@@ -89,43 +92,29 @@ case \"${host_cpu}\" in\n     try_cpu=hppa\n     ;;\n   mips*)\n-    # NB: cpu/mips/atomicity.h needs MIPS II or above.  \n-    # Of course, there is no sane way to test for this, no ABI macro,\n-    # and no consistent host_cpu name differentiation. Therefore, only\n-    # use it where it is known to be safe, ie it runs linux (see below).\n-    try_cpu=generic\n+    try_cpu=mips\n     ;;\n   m680[246]0)\n     try_cpu=m68k\n     ;;\n   powerpc* | rs6000)\n     try_cpu=powerpc\n     ;;\n-  s390x)\n-    try_cpu=s390\n-    ;;\n   sparc* | ultrasparc)\n     try_cpu=sparc\n     ;;\n   *)\n     if test -d ${glibcxx_srcdir}/config/cpu/${host_cpu}; then\n       try_cpu=${host_cpu}\n-    else\n-      try_cpu=generic\n     fi\n-    ;;\n esac\n \n-# Set specific CPU overrides for atomic_word_dir. Most can just use generic.\n-# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-case \"${host_cpu}\" in\n-  cris*)\n-    atomic_word_dir=cpu/cris\n-    ;;\n-  sparc* | ultrasparc)\n-    atomic_word_dir=cpu/sparc\n-    ;;\n-esac\n+\n+# Now look for the file(s) usually tied to a CPU model, and make\n+# default choices for those if they haven't been explicitly set\n+# already.  \n+cpu_include_dir=cpu/${try_cpu}\n+\n \n # Set specific CPU overrides for cpu_defines_dir. Most can just use generic.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n@@ -135,32 +124,41 @@ case \"${host_cpu}\" in\n     ;;\n esac\n \n-# Now look for the file(s) usually tied to a CPU model, and make\n-# default choices for those if they haven't been explicitly set\n-# already.  \n-cpu_include_dir=cpu/${try_cpu}\n-abi_baseline_pair=${try_cpu}-${host_os}\n-unset try_cpu\n \n+# Set specific CPU overrides for atomic_word_dir. Most can just use generic.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${host_cpu}\" in\n-  alpha* | ia64 | powerpc* | rs6000 | s390*)\n-    atomicity_dir=\"cpu/generic/atomic_builtins\"\n+  alpha*)\n+    atomic_word_dir=cpu/alpha\n     ;;\n-  *)\n-    if test -f ${glibcxx_srcdir}/config/${cpu_include_dir}/atomicity.h ; then\n-      atomicity_dir=$cpu_include_dir\n-    else\n-      atomicity_dir=\"cpu/generic\"\n-    fi\n+  cris*)\n+    atomic_word_dir=cpu/cris\n+    ;;\n+  ia64)\n+    atomic_word_dir=cpu/ia64\n+    ;;\n+  powerpc* | rs6000)\n+    atomic_word_dir=cpu/powerpc\n+    ;;\n+  sparc* | ultrasparc)\n+    atomic_word_dir=cpu/sparc\n     ;;\n esac\n \n+\n+# Set specific CPU overrides for atomicity_dir.\n+# This can be over-ridden in GLIBCXX_ENABLE_ATOMIC_BUILTINS.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+if test -f ${glibcxx_srcdir}/config/${cpu_include_dir}/atomicity.h ; then\n+  atomicity_dir=$cpu_include_dir\n+fi\n+\n+\n if test -f ${glibcxx_srcdir}/config/${cpu_include_dir}/cxxabi_tweaks.h ; then\n   abi_tweaks_dir=$cpu_include_dir\n-else\n-  abi_tweaks_dir=\"cpu/generic\"\n fi\n \n+\n # Set any OS-dependent bits.\n # Set the os_include_dir.\n # Set c_model, c_compatibility here.\n@@ -276,39 +274,39 @@ esac\n # Set any OS-dependent and CPU-dependent bits.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${host}\" in\n-  alpha*-*-freebsd5*)\n-    abi_baseline_pair=\"alpha-freebsd5\"\n-    ;;\n-  arm*-*-linux*)\n-    abi_baseline_pair=\"arm-linux-gnu\"\n-    ;;\n-  i*86-*-freebsd4*)\n-    abi_baseline_pair=\"i386-freebsd4\"\n-    ;;\n-  i*86-*-freebsd5*)\n-    abi_baseline_pair=\"i386-freebsd5\"\n-    ;;\n-  mips*-*-linux*)\n-    atomicity_dir=\"cpu/mips\"\n-    abi_baseline_pair=\"mips-linux-gnu\"\n-    cpu_include_dir=\"cpu/mips\"\n+  *-*-linux*)\n+    case \"${host_cpu}\" in\n+      i[567]86)\n+        abi_baseline_pair=i486-linux-gnu\n+        ;;\n+      powerpc64)\n+        abi_baseline_pair=powerpc64-linux-gnu\n+        ;;\n+      s390)\n+        abi_baseline_pair=s390-linux-gnu\n+        ;;\n+      s390x)\n+        abi_baseline_pair=s390x-linux-gnu\n+        ;;\n+      x86_64)\n+        abi_baseline_pair=x86_64-linux-gnu\n+        ;;\n+      *)\n+        if test -d ${glibcxx_srcdir}/config/abi/post/${try_cpu}-linux-gnu; then\n+          abi_baseline_pair=${try_cpu}-linux-gnu\n+        fi\n+    esac\n+    ;;\n+  mips*-*-*)\n+    case \"${host_os}\" in\n+      gnu* | linux* | irix*)\n+        ;;\n+      *)\n+        atomicity_dir=\"cpu/generic\"\n+        ;;\n+    esac\n     ;;\n   powerpc*-*-darwin*)\n     port_specific_symbol_files=\"\\$(srcdir)/../config/os/bsd/darwin/ppc-extra.ver\"\n     ;;\n-  powerpc64-*-linux*)\n-    abi_baseline_pair=\"powerpc64-linux-gnu\"\n-    ;;\n-  s390-*-linux*)\n-    abi_baseline_pair=\"s390-linux-gnu\"\n-    ;;\n-  s390x-*-linux*)\n-    abi_baseline_pair=\"s390x-linux-gnu\"\n-    ;;\n-  sparc*-*-freebsd5*)\n-    abi_baseline_pair=\"sparc-freebsd5\"\n-    ;;\n-  x86_64-*-linux*)\n-    abi_baseline_pair=\"x86_64-linux-gnu\"\n-    ;;\n esac"}, {"sha": "18832fed800f99f9a5238bae809d5e515f4f675c", "filename": "libstdc++-v3/include/bits/atomicity.h", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -41,41 +41,23 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+#ifdef _GLIBCXX_ATOMIC_BUILTINS\n+  static inline _Atomic_word \n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  { return __sync_fetch_and_add(__mem, __val); }\n+\n+  static inline void\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __sync_fetch_and_add(__mem, __val); }\n+#else\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val);\n \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val);\n-\n-  static inline _Atomic_word\n-  __exchange_and_add_multi(volatile _Atomic_word* __mem, int __val)\n-  {\n-#ifdef _GLIBCXX_ATOMIC_BUILTINS\n-\n-    return __sync_fetch_and_add(__mem, __val);\n-\n-#else\n-\n-    return __exchange_and_add(__mem, __val);\n-\n-#endif\n-  }\n-\n-  static inline void\n-  __atomic_add_multi(volatile _Atomic_word* __mem, int __val)\n-  { \n-#ifdef _GLIBCXX_ATOMIC_BUILTINS\n-\n-    __sync_fetch_and_add(__mem, __val);\n-\n-#else\n-\n-    __atomic_add(__mem, __val);\n-\n #endif\n-  }\n \n   static inline _Atomic_word\n   __exchange_and_add_single(volatile _Atomic_word* __mem, int __val)\n@@ -94,16 +76,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __exchange_and_add_dispatch(volatile _Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n-\n     if (__gthread_active_p())\n-      return __exchange_and_add_multi(__mem, __val);\n+      return __exchange_and_add(__mem, __val);\n     else\n       return __exchange_and_add_single(__mem, __val);\n-\n #else\n-\n     return __exchange_and_add_single(__mem, __val);\n-\n #endif\n   }\n \n@@ -112,23 +90,19 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add_dispatch(volatile _Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n-\n     if (__gthread_active_p())\n-      __atomic_add_multi(__mem, __val);\n+      __atomic_add(__mem, __val);\n     else\n       __atomic_add_single(__mem, __val);\n-\n #else\n-\n     __atomic_add_single(__mem, __val);\n-\n #endif\n   }\n \n _GLIBCXX_END_NAMESPACE\n \n-/* Even if the CPU doesn't need a memory barrier, we need to ensure that\n-   the compiler doesn't reorder memory accesses across the barriers.  */\n+// Even if the CPU doesn't need a memory barrier, we need to ensure that\n+// the compiler doesn't reorder memory accesses across the barriers.\n #ifndef _GLIBCXX_READ_MEM_BARRIER\n #define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n #endif"}, {"sha": "4b841ca5275fe349cb2b030969f977469cdc51f9", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701a3eeeef11809f8fcdc2415d846521cde329f3/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=701a3eeeef11809f8fcdc2415d846521cde329f3", "patch": "@@ -50,7 +50,7 @@ case ${query} in\n     --cxxflags)\n       CXXFLAGS_save=\"-g -O2 -D_GLIBCXX_ASSERT\"\n       CXXFLAGS_config='@SECTION_FLAGS@ -fmessage-length=0 \n- \t\t      @EXTRA_CXX_FLAGS@ '\n+ \t\t      @CXXFLAGS@ @EXTRA_CXX_FLAGS@ '\n       echo ${CXXFLAGS_save} ${CXXFLAGS_config}\n       ;;\n     --cxxpchflags)"}]}