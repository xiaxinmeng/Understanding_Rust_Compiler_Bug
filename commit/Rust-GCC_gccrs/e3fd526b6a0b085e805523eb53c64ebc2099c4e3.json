{"sha": "e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmZDUyNmI2YTBiMDg1ZTgwNTUyM2ViNTNjNjRlYmMyMDk5YzRlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-27T21:54:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-27T21:54:42Z"}, "message": "re PR tree-optimization/36400 (points-to results wrong)\n\n2008-06-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/36400\n\tPR tree-optimization/36373\n\tPR tree-optimization/36344\n\t* tree-ssa-structalias.c (var_escaped, escaped_tree, escaped_id,\n\tvar_nonlocal, nonlocal_tree, nonlocal_id): New globals\n\t(update_alias_info): Remove call clobbering code.\n\t(make_constraint_to): New helper function.\n\t(make_escape_constraint): Likewise.\n\t(handle_rhs_call): Use it on all pointer containing arguments.\n\tAlso mark the static chain escaped.\n\t(handle_lhs_call): Make constraints from NONLOCAL and ESCAPED\n\tinstead of ANYTHING.\n\t(make_constraint_from): New helper split out from ...\n\t(make_constraint_from_anything): ... here.\n\t(find_func_aliases): Add constraints for escape sites.\n\t(intra_create_variable_infos): Make constraints from NONLOCAL\n\tfor parameters.\n\t(find_what_p_points_to): Interpret NONLOCAL and ESCAPED the same\n\tas ANYTHING.\n\t(clobber_what_p_points_to): Remove.\n\t(clobber_what_escaped): New function.\n\t(init_base_vars): Init NONLOCAL and ESCAPED.\n\t(do_sd_constraint): Do not propagate the solution from ESCAPED\n\tbut use ESCAPED as a placeholder.\n\t(solve_graph): Likewise.\n\t* tree-flow.h (clobber_what_p_points_to): Remove.\n\t(clobber_what_escaped): Declare.\n\t* tree-ssa-alias.c (set_initial_properties): Call it.\n\tRemove code clobbering escaped pointers.\n\n\t* gcc.dg/torture/pr36373-1.c: New testcase.\n\t* gcc.dg/torture/pr36373-2.c: Likewise.\n\t* gcc.dg/torture/pr36373-3.c: Likewise.\n\t* gcc.dg/torture/pr36373-4.c: Likewise.\n\t* gcc.dg/torture/pr36373-5.c: Likewise.\n\t* gcc.dg/torture/pr36373-6.c: Likewise.\n\t* gcc.dg/torture/pr36373-7.c: Likewise.\n\t* gcc.dg/torture/pr36373-8.c: Likewise.\n\t* gcc.dg/torture/pr36373-9.c: Likewise.\n\t* gcc.dg/torture/pr36373-10.c: Likewise.\n\t* gcc.dg/torture/pr36400.c: Likewise.\n\t* gcc.c-torture/execute/pta-field-1.c: Likewise.\n\t* gcc.c-torture/execute/pta-field-2.c: Likewise.\n\t* gcc.dg/tree-ssa/loadpre8.c: Remove XFAIL.\n\t* gcc.dg/tree-ssa/pr24287.c: XFAIL.\n\nFrom-SVN: r137204", "tree": {"sha": "bb4518f44507bd5a28b8f4f4627a278c6fa3dfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb4518f44507bd5a28b8f4f4627a278c6fa3dfdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/comments", "author": null, "committer": null, "parents": [{"sha": "7059ea888d4003f899c269cb0759f2f52fe37367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7059ea888d4003f899c269cb0759f2f52fe37367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7059ea888d4003f899c269cb0759f2f52fe37367"}], "stats": {"total": 374, "additions": 374, "deletions": 0}, "files": [{"sha": "1377c4ba61907b2772148267fac68861cbc5bb29", "filename": "gcc/testsuite/gcc.c-torture/execute/pta-field-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-1.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,28 @@\n+struct Foo {\n+  int *p;\n+  int *q;\n+};\n+\n+void __attribute__((noinline))\n+bar (int **x)\n+{\n+  struct Foo *f = (struct Foo *)x;\n+  *(f->q) = 0;\n+}\n+\n+int foo(void)\n+{\n+  struct Foo f;\n+  int i = 1, j = 2;\n+  f.p = &i;\n+  f.q = &j;\n+  bar(&f.p);\n+  return j;\n+}\n+\n+extern void abort (void);\n+int main()\n+{\n+  if (foo () != 0)\n+    abort ();\n+}"}, {"sha": "e9b68d0d55d99e2821233297078d63982cffac94", "filename": "gcc/testsuite/gcc.c-torture/execute/pta-field-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpta-field-2.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,28 @@\n+struct Foo {\n+  int *p;\n+  int *q;\n+};\n+\n+void __attribute__((noinline))\n+bar (int **x)\n+{\n+  struct Foo *f = (struct Foo *)(x - 1);\n+  *(f->p) = 0;\n+}\n+\n+int foo(void)\n+{\n+  struct Foo f;\n+  int i = 1, j = 2;\n+  f.p = &i;\n+  f.q = &j;\n+  bar(&f.q);\n+  return i;\n+}\n+\n+extern void abort (void);\n+int main()\n+{\n+  if (foo () != 0)\n+    abort ();\n+}"}, {"sha": "9cd02c57a40a58dbb1b6e7e569e4af13abce5f82", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-1.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-sra\" } */\n+\n+extern void abort (void);\n+struct Bar {\n+    struct Foo {\n+\tint *p;\n+    } x;\n+    int *q;\n+};\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo(struct Foo f)\n+{\n+  *f.p = 0;\n+}\n+int main()\n+{\n+  int a, b;\n+  a = 0;\n+  b = 1;\n+  struct Bar f;\n+  f.x = bar (&b);\n+  f.q = &a;\n+  foo(f.x);\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "b84e2544152f25f5d4d17503f3e80b6755d738ad", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-10.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+\n+typedef unsigned long uintptr_t;\n+\n+void __attribute__((noinline))\n+foo(uintptr_t l)\n+{\n+  int *p = (int *)l;\n+  *p = 1;\n+}\n+\n+extern void abort (void);\n+int main()\n+{\n+  int b = 0;\n+  uintptr_t l = (uintptr_t)&b;\n+  foo(l);\n+  if (b != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "2653182a52cf09f65f789dc818cc9c49be823719", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-2.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-sra\" } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+};\n+struct Bar {\n+    struct Foo *x;\n+    int *q;\n+};\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo(struct Foo f)\n+{\n+  *f.p = 0;\n+}\n+int main()\n+{\n+  int a, b;\n+  a = 0;\n+  b = 1;\n+  struct Bar f;\n+  struct Foo g = bar (&b);\n+  f.x = &g;\n+  f.q = &a;\n+  foo(*f.x);\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d5ad93e1b9b7d799061282ab270b086e79602d89", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-3.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+};\n+struct Bar {\n+    struct Foo *x;\n+    int *q;\n+};\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo(struct Foo f)\n+{\n+  *f.p = 0;\n+}\n+int main()\n+{\n+  int a, b;\n+  a = 0;\n+  b = 1;\n+  struct Bar f;\n+  struct Foo g = bar (&b);\n+  f.x = &g;\n+  f.q = &a;\n+  foo(*f.x);\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5f3b8334901723fb37d75daa9944cd572f7699e2", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-4.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+    int *q;\n+};\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo(struct Foo f)\n+{\n+  *f.p = 0;\n+}\n+int main()\n+{\n+  int a, b;\n+  a = 0;\n+  b = 1;\n+  struct Foo f;\n+  f = bar (&b);\n+  f.q = &a;\n+  foo(f);\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "0061ef418ee8c3889fbc4f5a08b57c5d8bc87965", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-5.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-5.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-sra\" } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+    int *q;\n+};\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo(struct Foo f)\n+{\n+  *f.p = 0;\n+}\n+int main()\n+{\n+  int a, b;\n+  a = 0;\n+  b = 1;\n+  struct Foo f;\n+  f = bar (&b);\n+  f.q = &a;\n+  foo(f);\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "c55e3ff3fabc16c48beffdad763d8d787a8ae16f", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-6.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-sra\" } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+} x;\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo()\n+{\n+  *x.p = 0;\n+}\n+int main()\n+{\n+  int b;\n+  b = 1;\n+  struct Foo g = bar (&b);\n+  x = g;\n+  foo();\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "103694e1517f6e00a9b8f21a56cafd15aba246b4", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-7.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+} x;\n+struct Foo __attribute__((noinline))\n+bar(int *p)\n+{\n+  struct Foo f;\n+  f.p = p;\n+  return f;\n+}\n+void __attribute__((noinline))\n+foo()\n+{\n+  *x.p = 0;\n+}\n+int main()\n+{\n+  int b;\n+  b = 1;\n+  struct Foo g = bar (&b);\n+  x = g;\n+  foo();\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "9f77ea137349c56201d881673e6019eb4115d459", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-8.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-sra\" } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+} x;\n+void __attribute__((noinline))\n+foo()\n+{\n+  *x.p = 0;\n+}\n+int main()\n+{\n+  int b;\n+  struct Foo g;\n+  b = 1;\n+  g.p = &b;\n+  x = g;\n+  foo();\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5588eadae99ab34a6d183478ecc38ca6cf4b09fd", "filename": "gcc/testsuite/gcc.dg/torture/pr36373-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36373-9.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+struct Foo {\n+    int *p;\n+} x;\n+void __attribute__((noinline))\n+foo()\n+{\n+  *x.p = 0;\n+}\n+int main()\n+{\n+  int b;\n+  struct Foo g;\n+  b = 1;\n+  g.p = &b;\n+  x = g;\n+  foo();\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "bd9f35a5f762111761058d8887f3f6f3bbfb1766", "filename": "gcc/testsuite/gcc.dg/torture/pr36400.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36400.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3fd526b6a0b085e805523eb53c64ebc2099c4e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36400.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36400.c?ref=e3fd526b6a0b085e805523eb53c64ebc2099c4e3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+struct barstruct { char const* some_string; };\n+\n+void changethepointer(struct barstruct***);\n+\n+void baz()\n+{\n+  struct barstruct bar1;\n+  struct barstruct* barptr = &bar1;\n+  struct barstruct** barptr2 = &barptr;\n+  changethepointer(&barptr2);\n+  barptr->some_string = \"Everything OK\";\n+}\n+\n+/* { dg-final { scan-assembler \"Everything OK\" } } */"}]}