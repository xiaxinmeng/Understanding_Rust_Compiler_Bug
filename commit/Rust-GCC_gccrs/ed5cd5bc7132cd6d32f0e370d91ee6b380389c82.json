{"sha": "ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1Y2Q1YmM3MTMyY2Q2ZDMyZjBlMzcwZDkxZWU2YjM4MDM4OWM4Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-07-14T07:44:33Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-07-14T07:44:33Z"}, "message": "Remove Java references in source code.\n\n2017-07-14  Martin Liska  <mliska@suse.cz>\n\n\t* cfgexpand.c (expand_gimple_basic_block): Remove dead comment.\n\t* dwarf2out.c (is_java): Remove the function.\n\t(output_pubname): Remove usage of the function.\n\t(lower_bound_default): Remove usage of DW_LANG_Java.\n\t(gen_compile_unit_die): Likewise.\n\t* gcc.c: Remove compiler defaults for .java and .zip files.\n\t* gimple-expr.c (remove_suffix): Change as there's no longer\n\textension than 4-letter one.\n\t* gimplify.c (mostly_copy_tree_r): Remove Java-special part.\n\t(gimplify_save_expr): Likewise.\n\t* ipa-utils.h (polymorphic_type_binfo_p): Remove the comment\n\tas it's possible even for other languages than Java.\n\t* langhooks.h (struct lang_hooks): Remove Java from a comment.\n\t* lto-opts.c (lto_write_options): Remove reference to Java.\n\t* opts.c (strip_off_ending): Update file extension handling.\n\t* tree-cfg.c (verify_gimple_call): Remove comment with Java.\n\t* tree-eh.c (lower_resx): Likewise.\n\t* tree.c (free_lang_data_in_type): Remove dead code.\n\t(find_decls_types_r): Likewise.\n\t(build_common_builtin_nodes): Remove Java from a comment.\n\t(verify_type): Remove dead code.\n\t* varasm.c (assemble_external): Remove Java from a comment.\n\nFrom-SVN: r250199", "tree": {"sha": "2aa13fe489f32bbc342e80eaac83befdc9753e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa13fe489f32bbc342e80eaac83befdc9753e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f4b35a0a61ce83891b26ace7794b3213fef96a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4b35a0a61ce83891b26ace7794b3213fef96a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4b35a0a61ce83891b26ace7794b3213fef96a7"}], "stats": {"total": 149, "additions": 44, "deletions": 105}, "files": [{"sha": "0a970d7eb93f3aa103bdef551cf18fc4737907de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -1,3 +1,28 @@\n+2017-07-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Remove dead comment.\n+\t* dwarf2out.c (is_java): Remove the function.\n+\t(output_pubname): Remove usage of the function.\n+\t(lower_bound_default): Remove usage of DW_LANG_Java.\n+\t(gen_compile_unit_die): Likewise.\n+\t* gcc.c: Remove compiler defaults for .java and .zip files.\n+\t* gimple-expr.c (remove_suffix): Change as there's no longer\n+\textension than 4-letter one.\n+\t* gimplify.c (mostly_copy_tree_r): Remove Java-special part.\n+\t(gimplify_save_expr): Likewise.\n+\t* ipa-utils.h (polymorphic_type_binfo_p): Remove the comment\n+\tas it's possible even for other languages than Java.\n+\t* langhooks.h (struct lang_hooks): Remove Java from a comment.\n+\t* lto-opts.c (lto_write_options): Remove reference to Java.\n+\t* opts.c (strip_off_ending): Update file extension handling.\n+\t* tree-cfg.c (verify_gimple_call): Remove comment with Java.\n+\t* tree-eh.c (lower_resx): Likewise.\n+\t* tree.c (free_lang_data_in_type): Remove dead code.\n+\t(find_decls_types_r): Likewise.\n+\t(build_common_builtin_nodes): Remove Java from a comment.\n+\t(verify_type): Remove dead code.\n+\t* varasm.c (assemble_external): Remove Java from a comment.\n+\n 2017-07-14  Martin Liska  <mliska@suse.cz>\n \n \t* opts.c (finish_options): Add quotes."}, {"sha": "3e1d24db876ee51d71337cd04c23f75d1fa211a8", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -5497,8 +5497,6 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n       if (elt)\n \temit_label (*elt);\n \n-      /* Java emits line number notes in the top of labels.\n-\t ??? Make this go away once line number notes are obsoleted.  */\n       BB_HEAD (bb) = NEXT_INSN (last);\n       if (NOTE_P (BB_HEAD (bb)))\n \tBB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));"}, {"sha": "72d2c588c86294aaea47d13f773a6d4bfc69b797", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -5049,16 +5049,6 @@ is_cxx (const_tree decl)\n   return is_cxx ();\n }\n \n-/* Return TRUE if the language is Java.  */\n-\n-static inline bool\n-is_java (void)\n-{\n-  unsigned int lang = get_AT_unsigned (comp_unit_die (), DW_AT_language);\n-\n-  return lang == DW_LANG_Java;\n-}\n-\n /* Return TRUE if the language is Fortran.  */\n \n static inline bool\n@@ -10756,8 +10746,8 @@ output_pubname (dw_offset die_offset, pubname_entry *entry)\n         case DW_TAG_enumerator:\n           GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n                                           GDB_INDEX_SYMBOL_KIND_VARIABLE);\n-          if (!is_cxx () && !is_java ())\n-            GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n+\t  if (!is_cxx ())\n+\t    GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n           break;\n         case DW_TAG_subprogram:\n           GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n@@ -10785,7 +10775,7 @@ output_pubname (dw_offset die_offset, pubname_entry *entry)\n         case DW_TAG_union_type:\n         case DW_TAG_enumeration_type:\n           GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags, GDB_INDEX_SYMBOL_KIND_TYPE);\n-          if (!is_cxx () && !is_java ())\n+\t  if (!is_cxx ())\n \t    GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n           break;\n         default:\n@@ -19830,7 +19820,6 @@ lower_bound_default (void)\n     case DW_LANG_C_plus_plus_14:\n     case DW_LANG_ObjC:\n     case DW_LANG_ObjC_plus_plus:\n-    case DW_LANG_Java:\n       return 0;\n     case DW_LANG_Fortran77:\n     case DW_LANG_Fortran90:\n@@ -23550,8 +23539,6 @@ gen_compile_unit_die (const char *filename)\n \t\tlanguage = DW_LANG_Fortran08;\n \t    }\n \t}\n-      else if (strcmp (language_string, \"GNU Java\") == 0)\n-\tlanguage = DW_LANG_Java;\n       else if (strcmp (language_string, \"GNU Objective-C\") == 0)\n \tlanguage = DW_LANG_ObjC;\n       else if (strcmp (language_string, \"GNU Objective-C++\") == 0)"}, {"sha": "d8c5260e36b56b08d1f2cf046dac58c1cb1a5cd9", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -1305,8 +1305,6 @@ static const struct compiler default_compilers[] =\n   {\".f03\", \"#Fortran\", 0, 0, 0}, {\".F03\", \"#Fortran\", 0, 0, 0},\n   {\".f08\", \"#Fortran\", 0, 0, 0}, {\".F08\", \"#Fortran\", 0, 0, 0},\n   {\".r\", \"#Ratfor\", 0, 0, 0},\n-  {\".java\", \"#Java\", 0, 0, 0}, {\".class\", \"#Java\", 0, 0, 0},\n-  {\".zip\", \"#Java\", 0, 0, 0}, {\".jar\", \"#Java\", 0, 0, 0},\n   {\".go\", \"#Go\", 0, 1, 0},\n   /* Next come the entries for C.  */\n   {\".c\", \"@c\", 0, 0, 1},"}, {"sha": "13e55ef55fe6adcab0ec8db1058418219e8306d7", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -388,14 +388,14 @@ copy_var_decl (tree var, tree name, tree type)\n /* Strip off a legitimate source ending from the input string NAME of\n    length LEN.  Rather than having to know the names used by all of\n    our front ends, we strip off an ending of a period followed by\n-   up to five characters.  (Java uses \".class\".)  */\n+   up to four characters.  (like \".cpp\".)  */\n \n static inline void\n remove_suffix (char *name, int len)\n {\n   int i;\n \n-  for (i = 2;  i < 8 && len > i;  i++)\n+  for (i = 2;  i < 7 && len > i;  i++)\n     {\n       if (name[len - i] == '.')\n \t{"}, {"sha": "d456c3ef30110535291803c79bed902d86eb43cf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -818,12 +818,7 @@ mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)\n   /* Stop at types, decls, constants like copy_tree_r.  */\n   else if (TREE_CODE_CLASS (code) == tcc_type\n \t   || TREE_CODE_CLASS (code) == tcc_declaration\n-\t   || TREE_CODE_CLASS (code) == tcc_constant\n-\t   /* We can't do anything sensible with a BLOCK used as an\n-\t      expression, but we also can't just die when we see it\n-\t      because of non-expression uses.  So we avert our eyes\n-\t      and cross our fingers.  Silly Java.  */\n-\t   || code == BLOCK)\n+\t   || TREE_CODE_CLASS (code) == tcc_constant)\n     *walk_subtrees = 0;\n \n   /* Cope with the statement expression extension.  */\n@@ -5807,19 +5802,10 @@ gimplify_save_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   /* If the SAVE_EXPR has not been resolved, then evaluate it once.  */\n   if (!SAVE_EXPR_RESOLVED_P (*expr_p))\n     {\n-      /* The operand may be a void-valued expression such as SAVE_EXPRs\n-\t generated by the Java frontend for class initialization.  It is\n-\t being executed only for its side-effects.  */\n-      if (TREE_TYPE (val) == void_type_node)\n-\t{\n-\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t\t       is_gimple_stmt, fb_none);\n-\t  val = NULL;\n-\t}\n-      else\n-\t/* The temporary may not be an SSA name as later abnormal and EH\n-\t   control flow may invalidate use/def domination.  */\n-\tval = get_initialized_tmp_var (val, pre_p, post_p, false);\n+      gcc_assert (TREE_TYPE (val) != void_type_node);\n+      /* The temporary may not be an SSA name as later abnormal and EH\n+\t control flow may invalidate use/def domination.  */\n+      val = get_initialized_tmp_var (val, pre_p, post_p, false);\n \n       TREE_OPERAND (*expr_p, 0) = val;\n       SAVE_EXPR_RESOLVED_P (*expr_p) = 1;"}, {"sha": "f061c84c8a961208d7dbaba56a5bd751af10eaa5", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -169,9 +169,6 @@ possible_polymorphic_call_target_p (struct cgraph_edge *e,\n inline bool\n polymorphic_type_binfo_p (const_tree binfo)\n {\n-  /* See if BINFO's type has an virtual table associtated with it.\n-     Check is defensive because of Java FE produces BINFOs\n-     without BINFO_TYPE set.   */\n   return (BINFO_TYPE (binfo) && TYPE_BINFO (BINFO_TYPE (binfo))\n \t  && BINFO_VTABLE (TYPE_BINFO (BINFO_TYPE (binfo))));\n }"}, {"sha": "88f6f71b559f8339cf12b8acc70f000d2a1baec7", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -293,7 +293,7 @@ struct lang_hooks_for_lto\n struct lang_hooks\n {\n   /* String identifying the front end and optionally language standard\n-     version, e.g. \"GNU C++98\" or \"GNU Java\".  */\n+     version, e.g. \"GNU C++98\".  */\n   const char *name;\n \n   /* sizeof (struct lang_identifier), so make_node () creates"}, {"sha": "641b2795b2c87b922fd6b5b6a4a965a769040e5d", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -108,8 +108,8 @@ lto_write_options (void)\n \tgcc_unreachable ();\n       }\n   /* The default -fmath-errno, -fsigned-zeros and -ftrapping-math change\n-     depending on the language (they can be disabled by the Ada and Java\n-     front-ends).  Pass thru conservative standard settings.  */\n+     depending on the language (they can be disabled by the Ada front-end).\n+     Pass thru conservative standard settings.  */\n   if (!global_options_set.x_flag_errno_math)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t   global_options.x_flag_errno_math"}, {"sha": "0343d6a5e86d07154b362c4ded5f9cfd559eec43", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -139,13 +139,13 @@ set_struct_debug_option (struct gcc_options *opts, location_t loc,\n /* Strip off a legitimate source ending from the input string NAME of\n    length LEN.  Rather than having to know the names used by all of\n    our front ends, we strip off an ending of a period followed by\n-   up to five characters.  (Java uses \".class\".)  */\n+   up to fource characters.  (C++ uses \".cpp\".)  */\n \n void\n strip_off_ending (char *name, int len)\n {\n   int i;\n-  for (i = 2; i < 6 && len > i; i++)\n+  for (i = 2; i < 5 && len > i; i++)\n     {\n       if (name[len - i] == '.')\n \t{"}, {"sha": "83e4ee60e9f24b23f35cf0e339a5330aaa12a81e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -3497,8 +3497,6 @@ verify_gimple_call (gcall *stmt)\n       && !useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (fntype))\n       /* ???  At least C++ misses conversions at assignments from\n \t void * call results.\n-\t ???  Java is completely off.  Especially with functions\n-\t returning java.lang.Object.\n \t For now simply allow arbitrary pointer type conversions.  */\n       && !(POINTER_TYPE_P (TREE_TYPE (lhs))\n \t   && POINTER_TYPE_P (TREE_TYPE (fntype))))"}, {"sha": "c68d71a5e54403189f4d88ee9d0c3fb12d51a8bc", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -1564,12 +1564,6 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n /* Decide whether or not we are going to duplicate the finally block.\n    There are several considerations.\n \n-   First, if this is Java, then the finally block contains code\n-   written by the user.  It has line numbers associated with it,\n-   so duplicating the block means it's difficult to set a breakpoint.\n-   Since controlling code generation via -g is verboten, we simply\n-   never duplicate code without optimization.\n-\n    Second, we'd like to prevent egregious code growth.  One way to\n    do this is to estimate the size of the finally block, multiply\n    that by the number of copies we'd need to make, and compare against\n@@ -3286,7 +3280,7 @@ lower_resx (basic_block bb, gresx *stmt,\n \t _Unwind_Resume library function.  */\n \n       /* The ARM EABI redefines _Unwind_Resume as __cxa_end_cleanup\n-\t with no arguments for C++ and Java.  Check for that.  */\n+\t with no arguments for C++.  Check for that.  */\n       if (src_r->use_cxa_end_cleanup)\n \t{\n \t  fn = builtin_decl_implicit (BUILT_IN_CXA_END_CLEANUP);"}, {"sha": "678b2708910b804f343b0bb89c8ef9d442718292", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -5162,8 +5162,6 @@ free_lang_data_in_type (tree type)\n \t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n \t  TREE_PURPOSE (p) = NULL;\n \t}\n-      /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n-      TYPE_MINVAL (type) = NULL;\n     }\n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n@@ -5174,8 +5172,6 @@ free_lang_data_in_type (tree type)\n \t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n \t  TREE_PURPOSE (p) = NULL;\n \t}\n-      /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n-      TYPE_MINVAL (type) = NULL;\n     }\n \n   /* Remove members that are not actually FIELD_DECLs from the field\n@@ -5661,16 +5657,7 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t  tree tem;\n \t  FOR_EACH_VEC_ELT (*BINFO_BASE_BINFOS (TYPE_BINFO (t)), i, tem)\n \t    fld_worklist_push (TREE_TYPE (tem), fld);\n-\t  tem = BINFO_VIRTUALS (TYPE_BINFO (t));\n-\t  if (tem\n-\t      /* The Java FE overloads BINFO_VIRTUALS for its own purpose.  */\n-\t      && TREE_CODE (tem) == TREE_LIST)\n-\t    do\n-\t      {\n-\t\tfld_worklist_push (TREE_VALUE (tem), fld);\n-\t\ttem = TREE_CHAIN (tem);\n-\t      }\n-\t    while (tem);\n+\t  fld_worklist_push (BINFO_VIRTUALS (TYPE_BINFO (t)), fld);\n \t}\n       if (RECORD_OR_UNION_TYPE_P (t))\n \t{\n@@ -10799,7 +10786,7 @@ build_common_builtin_nodes (void)\n \t\t\tECF_PURE | ECF_NOTHROW | ECF_LEAF);\n \n   /* If there's a possibility that we might use the ARM EABI, build the\n-    alternate __cxa_end_cleanup node used to resume from C++ and Java.  */\n+    alternate __cxa_end_cleanup node used to resume from C++.  */\n   if (targetm.arm_eabi_unwinder)\n     {\n       ftype = build_function_type_list (void_type_node, NULL_TREE);\n@@ -14029,15 +14016,6 @@ verify_type (const_tree t)\n \t\t\t\t     TREE_TYPE (TYPE_MIN_VALUE (t))\n \t but does not for C sizetypes in LTO.  */\n     }\n-  /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n-  else if (TYPE_MINVAL (t)\n-\t   && ((TREE_CODE (t) != METHOD_TYPE && TREE_CODE (t) != FUNCTION_TYPE)\n-\t       || in_lto_p))\n-    {\n-      error (\"TYPE_MINVAL non-NULL\");\n-      debug_tree (TYPE_MINVAL (t));\n-      error_found = true;\n-    }\n \n   /* Check various uses of TYPE_MAXVAL.  */\n   if (RECORD_OR_UNION_TYPE_P (t))\n@@ -14109,14 +14087,6 @@ verify_type (const_tree t)\n \t  debug_tree (TYPE_BINFO (t));\n \t  error_found = true;\n \t}\n-      /* FIXME: Java builds invalid empty binfos that do not have\n-         TREE_TYPE set.  */\n-      else if (TREE_TYPE (TYPE_BINFO (t)) != TYPE_MAIN_VARIANT (t) && 0)\n-\t{\n-\t  error (\"TYPE_BINFO type is not TYPE_MAIN_VARIANT\");\n-\t  debug_tree (TREE_TYPE (TYPE_BINFO (t)));\n-\t  error_found = true;\n-\t}\n     }\n   else if (TYPE_LANG_SLOT_1 (t) && in_lto_p)\n     {\n@@ -14271,20 +14241,6 @@ verify_type (const_tree t)\n       error (\"TYPE_STRING_FLAG is set on wrong type code\");\n       error_found = true;\n     }\n-  else if (TYPE_STRING_FLAG (t))\n-    {\n-      const_tree b = t;\n-      if (TREE_CODE (b) == ARRAY_TYPE)\n-\tb = TREE_TYPE (t);\n-      /* Java builds arrays with TYPE_STRING_FLAG of promoted_char_type\n-\t that is 32bits.  */\n-      if (TREE_CODE (b) != INTEGER_TYPE)\n-\t{\n-\t  error (\"TYPE_STRING_FLAG is set on type that does not look like \"\n-\t\t \"char nor array of chars\");\n-\t  error_found = true;\n-\t}\n-    }\n   \n   /* ipa-devirt makes an assumption that TYPE_METHOD_BASETYPE is always\n      TYPE_MAIN_VARIANT and it would be odd to add methods only to variatns"}, {"sha": "45611a9a8580e823e9bd8154837b7a56c3b0318c", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "patch": "@@ -2403,7 +2403,7 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n   gcc_assert (asm_out_file);\n \n   /* In a perfect world, the following condition would be true.\n-     Sadly, the Java and Go front ends emit assembly *from the front end*,\n+     Sadly, the Go front end emit assembly *from the front end*,\n      bypassing the call graph.  See PR52739.  Fix before GCC 4.8.  */\n #if 0\n   /* This function should only be called if we are expanding, or have"}]}