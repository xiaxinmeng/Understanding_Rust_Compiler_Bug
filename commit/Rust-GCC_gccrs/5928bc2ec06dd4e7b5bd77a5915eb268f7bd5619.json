{"sha": "5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyOGJjMmVjMDZkZDRlN2I1YmQ3N2E1OTE1ZWIyNjhmN2JkNTYxOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-01-18T07:41:05Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-01-18T07:41:05Z"}, "message": "Reset proper type on vector types (PR middle-end/88587).\n\n2019-01-18  Martin Liska  <mliska@suse.cz>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/88587\n\t* cgraph.h (create_version_clone_with_body): Add new argument\n\twith attributes.\n\t* cgraphclones.c (cgraph_node::create_version_clone): Add\n\tDECL_ATTRIBUTES to a newly created decl.  And call\n\tvalid_attribute_p so that proper cl_target_optimization_node\n\tis set for the newly created declaration.\n\t* multiple_target.c (create_target_clone): Set DECL_ATTRIBUTES\n\tfor declaration.\n\t(expand_target_clones): Do not call valid_attribute_p, it must\n\tbe already done.\n\t* tree-inline.c (copy_decl_for_dup_finish): Reset mode for\n\tvector types.\n2019-01-18  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/88587\n\t* g++.target/i386/pr88587.C: New test.\n\t* gcc.target/i386/mvc13.c: New test.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r268060", "tree": {"sha": "955050e3061a8b77e44e226b4d69eb3cde827502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955050e3061a8b77e44e226b4d69eb3cde827502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c83c58712c72024b893aac5fb0edc597fa583f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c83c58712c72024b893aac5fb0edc597fa583f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c83c58712c72024b893aac5fb0edc597fa583f2"}], "stats": {"total": 114, "additions": 90, "deletions": 24}, "files": [{"sha": "2a18cf80ee4dbfa63f2138d3c44b4ea2fd05b316", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -1,3 +1,20 @@\n+2019-01-18  Martin Liska  <mliska@suse.cz>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/88587\n+\t* cgraph.h (create_version_clone_with_body): Add new argument\n+\twith attributes.\n+\t* cgraphclones.c (cgraph_node::create_version_clone): Add\n+\tDECL_ATTRIBUTES to a newly created decl.  And call\n+\tvalid_attribute_p so that proper cl_target_optimization_node\n+\tis set for the newly created declaration.\n+\t* multiple_target.c (create_target_clone): Set DECL_ATTRIBUTES\n+\tfor declaration.\n+\t(expand_target_clones): Do not call valid_attribute_p, it must\n+\tbe already done.\n+\t* tree-inline.c (copy_decl_for_dup_finish): Reset mode for\n+\tvector types.\n+\n 2019-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/88734"}, {"sha": "bb2318333288c1b96500a638121c575d139b119e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -1019,12 +1019,17 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      If non-NULL BLOCK_TO_COPY determine what basic blocks to copy.\n      If non_NULL NEW_ENTRY determine new entry BB of the clone.\n \n+     If TARGET_ATTRIBUTES is non-null, when creating a new declaration,\n+     add the attributes to DECL_ATTRIBUTES.  And call valid_attribute_p\n+     that will promote value of the attribute DECL_FUNCTION_SPECIFIC_TARGET\n+     of the declaration.\n+\n      Return the new version's cgraph node.  */\n   cgraph_node *create_version_clone_with_body\n     (vec<cgraph_edge *> redirect_callers,\n      vec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip,\n      bool skip_return, bitmap bbs_to_copy, basic_block new_entry_block,\n-     const char *clone_name);\n+     const char *clone_name, tree target_attributes = NULL_TREE);\n \n   /* Insert a new cgraph_function_version_info node into cgraph_fnver_htab\n      corresponding to cgraph_node.  */"}, {"sha": "15f7e119d18ea1ad6ad18c827e4d4bd6cfa41364", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -1012,14 +1012,19 @@ cgraph_node::create_version_clone (tree new_decl,\n    If non-NULL BLOCK_TO_COPY determine what basic blocks to copy.\n    If non_NULL NEW_ENTRY determine new entry BB of the clone.\n \n+   If TARGET_ATTRIBUTES is non-null, when creating a new declaration,\n+   add the attributes to DECL_ATTRIBUTES.  And call valid_attribute_p\n+   that will promote value of the attribute DECL_FUNCTION_SPECIFIC_TARGET\n+   of the declaration.\n+\n    Return the new version's cgraph node.  */\n \n cgraph_node *\n cgraph_node::create_version_clone_with_body\n   (vec<cgraph_edge *> redirect_callers,\n    vec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip,\n    bool skip_return, bitmap bbs_to_copy, basic_block new_entry_block,\n-   const char *suffix)\n+   const char *suffix, tree target_attributes)\n {\n   tree old_decl = decl;\n   cgraph_node *new_version_node = NULL;\n@@ -1044,6 +1049,19 @@ cgraph_node::create_version_clone_with_body\n \n   DECL_VIRTUAL_P (new_decl) = 0;\n \n+  if (target_attributes)\n+    {\n+      DECL_ATTRIBUTES (new_decl) = target_attributes;\n+\n+      location_t saved_loc = input_location;\n+      tree v = TREE_VALUE (target_attributes);\n+      input_location = DECL_SOURCE_LOCATION (new_decl);\n+      bool r = targetm.target_option.valid_attribute_p (new_decl, NULL, v, 0);\n+      input_location = saved_loc;\n+      if (!r)\n+\treturn NULL;\n+    }\n+\n   /* When the old decl was a con-/destructor make sure the clone isn't.  */\n   DECL_STATIC_CONSTRUCTOR (new_decl) = 0;\n   DECL_STATIC_DESTRUCTOR (new_decl) = 0;"}, {"sha": "6126f42d7bf1294d95e06555a4e17988c290e02c", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -294,7 +294,8 @@ create_new_asm_name (char *old_asm_name, char *new_asm_name)\n /*  Creates target clone of NODE.  */\n \n static cgraph_node *\n-create_target_clone (cgraph_node *node, bool definition, char *name)\n+create_target_clone (cgraph_node *node, bool definition, char *name,\n+\t\t     tree attributes)\n {\n   cgraph_node *new_node;\n \n@@ -303,13 +304,16 @@ create_target_clone (cgraph_node *node, bool definition, char *name)\n       new_node = node->create_version_clone_with_body (vNULL, NULL,\n     \t\t\t\t\t\t       NULL, false,\n \t\t\t\t\t\t       NULL, NULL,\n-\t\t\t\t\t\t       name);\n+\t\t\t\t\t\t       name, attributes);\n+      if (new_node == NULL)\n+\treturn NULL;\n       new_node->force_output = true;\n     }\n   else\n     {\n       tree new_decl = copy_node (node->decl);\n       new_node = cgraph_node::get_create (new_decl);\n+      DECL_ATTRIBUTES (new_decl) = attributes;\n       /* Generate a new name for the new version.  */\n       symtab->change_decl_assembler_name (new_node->decl,\n \t\t\t\t\t  clone_function_name_numbered (\n@@ -400,22 +404,16 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n \n       create_new_asm_name (attr, suffix);\n       /* Create new target clone.  */\n-      cgraph_node *new_node = create_target_clone (node, definition, suffix);\n-      new_node->local.local = false;\n-      XDELETEVEC (suffix);\n-\n-      /* Set new attribute for the clone.  */\n       tree attributes = make_attribute (\"target\", attr,\n-\t\t\t\t\tDECL_ATTRIBUTES (new_node->decl));\n-      DECL_ATTRIBUTES (new_node->decl) = attributes;\n-      location_t saved_loc = input_location;\n-      input_location = DECL_SOURCE_LOCATION (node->decl);\n-      if (!targetm.target_option.valid_attribute_p (new_node->decl, NULL,\n-\t\t\t\t\t\t    TREE_VALUE (attributes),\n-\t\t\t\t\t\t    0))\n+\t\t\t\t\tDECL_ATTRIBUTES (node->decl));\n+\n+      cgraph_node *new_node = create_target_clone (node, definition, suffix,\n+\t\t\t\t\t\t   attributes);\n+      if (new_node == NULL)\n \treturn false;\n+      new_node->local.local = false;\n+      XDELETEVEC (suffix);\n \n-      input_location = saved_loc;\n       decl2_v = new_node->function_version ();\n       if (decl2_v != NULL)\n         continue;\n@@ -442,13 +440,7 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n \t\t\t\t    DECL_ATTRIBUTES (node->decl));\n   DECL_ATTRIBUTES (node->decl) = attributes;\n   node->local.local = false;\n-  location_t saved_loc = input_location;\n-  input_location = DECL_SOURCE_LOCATION (node->decl);\n-  bool ret\n-    = targetm.target_option.valid_attribute_p (node->decl, NULL,\n-\t\t\t\t\t       TREE_VALUE (attributes), 0);\n-  input_location = saved_loc;\n-  return ret;\n+  return true;\n }\n \n /* When NODE is a target clone, consider all callees and redirect"}, {"sha": "49fb9b9c8182825e79b0e4b9c967c903fd6b247e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -1,3 +1,9 @@\n+2019-01-18  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/88587\n+\t* g++.target/i386/pr88587.C: New test.\n+\t* gcc.target/i386/mvc13.c: New test.\n+\n 2018-01-17  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR fortran/88898"}, {"sha": "6808ab68cbb862e49fa8739bc05d53c71d9e0908", "filename": "gcc/testsuite/g++.target/i386/pr88587.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88587.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88587.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88587.C?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" }  */\n+/* { dg-options \"-O -m32 -g -mno-sse -Wno-attributes\" } */\n+\n+__attribute__((target(\"default\"),always_inline))\n+void a()\n+{\n+  __attribute__((__vector_size__(4 * sizeof(float)))) int b = {};\n+}\n+\n+__attribute__((target(\"sse2\"))) void a2()\n+{\n+  a ();\n+  __attribute__((__vector_size__(4 * sizeof(float)))) int b = {};\n+}"}, {"sha": "9e31ef7c4da5a7c69c67b61caa9d4086a743178b", "filename": "gcc/testsuite/gcc.target/i386/mvc13.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc13.c?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-O -m32 -g -mno-sse\" } */\n+\n+__attribute__((target_clones(\"default,sse2\")))\n+void a()\n+{\n+  __attribute__((__vector_size__(4 * sizeof(float)))) int b = {};\n+}"}, {"sha": "1c2766d47990e97bc6a4228ff467cb61fbd6b99b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619", "patch": "@@ -5479,6 +5479,10 @@ copy_decl_for_dup_finish (copy_body_data *id, tree decl, tree copy)\n   if (CODE_CONTAINS_STRUCT (TREE_CODE (copy), TS_DECL_WRTL)\n       && !TREE_STATIC (copy) && !DECL_EXTERNAL (copy))\n     SET_DECL_RTL (copy, 0);\n+  /* For vector typed decls make sure to update DECL_MODE according\n+     to the new function context.  */\n+  if (VECTOR_TYPE_P (TREE_TYPE (copy)))\n+    SET_DECL_MODE (copy, TYPE_MODE (TREE_TYPE (copy)));\n \n   /* These args would always appear unused, if not for this.  */\n   TREE_USED (copy) = 1;"}]}