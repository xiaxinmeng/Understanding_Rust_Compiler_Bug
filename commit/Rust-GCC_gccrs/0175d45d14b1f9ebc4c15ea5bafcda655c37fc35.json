{"sha": "0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3NWQ0NWQxNGIxZjllYmM0YzE1ZWE1YmFmY2RhNjU1YzM3ZmMzNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-26T15:08:11Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-26T15:08:11Z"}, "message": "Fix failures with -m32 and some memory leaks.\n\n2020-12-23  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/83118\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Make\n\tsure that class expressions are captured for dummy arguments by\n\tuse of gfc_get_class_from_gfc_expr otherwise the wrong vptr is\n\tused.\n\t* trans-expr.c (gfc_get_class_from_gfc_expr): New function.\n\t(gfc_get_class_from_expr): If a constant expression is\n\tencountered, return NULL_TREE;\n\t(gfc_trans_assignment_1): Deallocate rhs allocatable components\n\tafter passing derived type function results to class lhs.\n\t* trans.h : Add prototype for gfc_get_class_from_gfc_expr.", "tree": {"sha": "90de4c38ecc0351f94f38bab0097c74a633596e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90de4c38ecc0351f94f38bab0097c74a633596e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/comments", "author": null, "committer": null, "parents": [{"sha": "9d426e4dbccf1548f2d11866fe18af04af4109de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d426e4dbccf1548f2d11866fe18af04af4109de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d426e4dbccf1548f2d11866fe18af04af4109de"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "2c6be710ac8be70d9e7fe94961e22cb216ecc600", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "patch": "@@ -10176,6 +10176,7 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   tree jump_label2;\n   tree neq_size;\n   tree lbd;\n+  tree class_expr2 = NULL_TREE;\n   int n;\n   int dim;\n   gfc_array_spec * as;\n@@ -10257,6 +10258,9 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   else if (expr1->ts.type == BT_CLASS)\n     {\n       tmp = expr1->rank ? gfc_get_class_from_expr (desc) : NULL_TREE;\n+      if (tmp == NULL_TREE)\n+\ttmp = gfc_get_class_from_gfc_expr (expr1);\n+\n       if (tmp != NULL_TREE)\n \t{\n \t  tmp2 = gfc_class_vptr_get (tmp);\n@@ -10332,6 +10336,9 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   else if (expr1->ts.type == BT_CLASS && expr2->ts.type == BT_CLASS)\n     {\n       tmp = expr2->rank ? gfc_get_class_from_expr (desc2) : NULL_TREE;\n+      if (tmp == NULL_TREE && expr2->expr_type == EXPR_VARIABLE)\n+\ttmp = class_expr2 = gfc_get_class_from_gfc_expr (expr2);\n+\n       if (tmp != NULL_TREE)\n \ttmp = gfc_class_vtab_size_get (tmp);\n       else\n@@ -10617,6 +10624,8 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n \t  tmp2 = gfc_get_class_from_expr (desc2);\n \t  tmp2 = gfc_class_vptr_get (tmp2);\n \t}\n+      else if (expr2->ts.type == BT_CLASS && class_expr2 != NULL_TREE)\n+\ttmp2 = gfc_class_vptr_get (class_expr2);\n       else\n \t{\n \t  tmp2 = gfc_get_symbol_decl (gfc_find_vtab (&expr2->ts));"}, {"sha": "14361a10f6832d89332f9ef3de6c5882df4ca29f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "patch": "@@ -508,6 +508,25 @@ gfc_reset_len (stmtblock_t *block, gfc_expr *expr)\n }\n \n \n+/* Obtain the last class reference in a gfc_expr. Return NULL_TREE if no class\n+   reference is found. Note that it is up to the caller to avoid using this\n+   for expressions other than variables.  */\n+\n+tree\n+gfc_get_class_from_gfc_expr (gfc_expr *e)\n+{\n+  gfc_expr *class_expr;\n+  gfc_se cse;\n+  class_expr = gfc_find_and_cut_at_last_class_ref (e);\n+  if (class_expr == NULL)\n+    return NULL_TREE;\n+  gfc_init_se (&cse, NULL);\n+  gfc_conv_expr (&cse, class_expr);\n+  gfc_free_expr (class_expr);\n+  return cse.expr;\n+}\n+\n+\n /* Obtain the last class reference in an expression.\n    Return NULL_TREE if no class reference is found.  */\n \n@@ -11297,11 +11316,24 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   tmp = NULL_TREE;\n \n   if (is_poly_assign)\n-    tmp = trans_class_assignment (&body, expr1, expr2, &lse, &rse,\n-\t\t\t\t  use_vptr_copy || (lhs_attr.allocatable\n-\t\t\t\t\t\t     && !lhs_attr.dimension),\n-\t\t\t\t  !realloc_flag && flag_realloc_lhs\n-\t\t\t\t  && !lhs_attr.pointer);\n+    {\n+      tmp = trans_class_assignment (&body, expr1, expr2, &lse, &rse,\n+\t\t\t\t    use_vptr_copy || (lhs_attr.allocatable\n+\t\t\t\t\t\t      && !lhs_attr.dimension),\n+\t\t\t\t    !realloc_flag && flag_realloc_lhs\n+\t\t\t\t    && !lhs_attr.pointer);\n+      if (expr2->expr_type == EXPR_FUNCTION\n+\t  && expr2->ts.type == BT_DERIVED\n+\t  && expr2->ts.u.derived->attr.alloc_comp)\n+\t{\n+\t  tree tmp2 = gfc_deallocate_alloc_comp (expr2->ts.u.derived,\n+\t\t\t\t\t\t rse.expr, expr2->rank);\n+\t  if (lss == gfc_ss_terminator)\n+\t    gfc_add_expr_to_block (&rse.post, tmp2);\n+\t  else\n+\t    gfc_add_expr_to_block (&loop.post, tmp2);\n+\t}\n+    }\n   else if (flag_coarray == GFC_FCOARRAY_LIB\n \t   && lhs_caf_attr.codimension && rhs_caf_attr.codimension\n \t   && ((lhs_caf_attr.allocatable && lhs_refs_comp)"}, {"sha": "9ef9b964e10bfdfa85884a5ecd845055eba7626f", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0175d45d14b1f9ebc4c15ea5bafcda655c37fc35/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0175d45d14b1f9ebc4c15ea5bafcda655c37fc35", "patch": "@@ -443,6 +443,7 @@ tree gfc_vptr_final_get (tree);\n tree gfc_vptr_deallocate_get (tree);\n void gfc_reset_vptr (stmtblock_t *, gfc_expr *);\n void gfc_reset_len (stmtblock_t *, gfc_expr *);\n+tree gfc_get_class_from_gfc_expr (gfc_expr *);\n tree gfc_get_class_from_expr (tree);\n tree gfc_get_vptr_from_expr (tree);\n tree gfc_get_class_array_ref (tree, tree, tree, bool);"}]}