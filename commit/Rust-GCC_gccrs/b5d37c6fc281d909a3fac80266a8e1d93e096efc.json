{"sha": "b5d37c6fc281d909a3fac80266a8e1d93e096efc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkMzdjNmZjMjgxZDkwOWEzZmFjODAyNjZhOGUxZDkzZTA5NmVmYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2000-12-29T18:18:50Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-12-29T18:18:50Z"}, "message": "Improve alias analysis on ia64\n\nFrom-SVN: r38549", "tree": {"sha": "83fca660c67beb768b53a9b3ca10b0065fcfde03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83fca660c67beb768b53a9b3ca10b0065fcfde03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d37c6fc281d909a3fac80266a8e1d93e096efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d37c6fc281d909a3fac80266a8e1d93e096efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d37c6fc281d909a3fac80266a8e1d93e096efc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d37c6fc281d909a3fac80266a8e1d93e096efc/comments", "author": null, "committer": null, "parents": [{"sha": "de10dbf5be469ef56558e6a17e6912da56da57cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de10dbf5be469ef56558e6a17e6912da56da57cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de10dbf5be469ef56558e6a17e6912da56da57cf"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "dcd8be951f7af6e4412caee6ed4185ca94421525", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5d37c6fc281d909a3fac80266a8e1d93e096efc", "patch": "@@ -1,5 +1,15 @@\n 2000-12-29  Bernd Schmidt  <bernds@redhat.com>\n \n+\t* ia64.c (ia64_expand_load_address): Accept additional scratch\n+\tregister argument.  All callers & prototype changed.\n+\tUse scratch register when generating load_symptr insns.\n+\t* ia64.md (movdi_symbolic): Clobber a scratch register.  Use it\n+\twhen calling ia64_expand_load_address.\n+\t(movdi): Generate movdi_symbolic with additional operand.\n+\t(load_gprel64): Use pic_offset_table_rtx instead of (reg:DI 1).\n+\t(load_symptr): Likewise.  Use additional operand as a scratch\n+\tregister instead of generating it here.\n+\n \t* basic-block.h: Add a comment.\n \t* flow.c (PROP_POSTRELOAD): New macro.\n \t(update_life_info): Add it to prop_flags."}, {"sha": "d3eefe66abbcbd4d002d53f2625aab70d77a2fca", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=b5d37c6fc281d909a3fac80266a8e1d93e096efc", "patch": "@@ -81,7 +81,7 @@ extern void ia64_function_prologue PARAMS((FILE *, int));\n extern void ia64_function_epilogue PARAMS((FILE *, int));\n \n extern int ia64_direct_return PARAMS((void));\n-extern void ia64_expand_load_address PARAMS((rtx, rtx));\n+extern void ia64_expand_load_address PARAMS((rtx, rtx, rtx));\n extern int ia64_hard_regno_rename_ok PARAMS((int, int));\n \n extern void ia64_initialize_trampoline PARAMS((rtx, rtx, rtx));"}, {"sha": "d4538664570151363cf34d693e72d1f094971ba9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b5d37c6fc281d909a3fac80266a8e1d93e096efc", "patch": "@@ -798,8 +798,8 @@ ia64_depz_field_mask (rop, rshift)\n /* ??? Should generalize this, so that we can also support 32 bit pointers.  */\n \n void\n-ia64_expand_load_address (dest, src)\n-      rtx dest, src;\n+ia64_expand_load_address (dest, src, scratch)\n+      rtx dest, src, scratch;\n {\n   rtx temp;\n \n@@ -831,11 +831,22 @@ ia64_expand_load_address (dest, src)\n       lo = ((ofs & 0x3fff) ^ 0x2000) - 0x2000;\n       hi = ofs - lo;\n \n-      emit_insn (gen_load_symptr (subtarget, plus_constant (sym, hi)));\n+      if (! scratch)\n+\tscratch = no_new_pseudos ? subtarget : gen_reg_rtx (DImode);\n+\n+      emit_insn (gen_load_symptr (subtarget, plus_constant (sym, hi),\n+\t\t\t\t  scratch));\n       emit_insn (gen_adddi3 (temp, subtarget, GEN_INT (lo)));\n     }\n   else\n-    emit_insn (gen_load_symptr (temp, src));\n+    {\n+      rtx insn;\n+      if (! scratch)\n+\tscratch = no_new_pseudos ? temp : gen_reg_rtx (DImode);\n+\n+      insn = emit_insn (gen_load_symptr (temp, src, scratch));\n+      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, src, REG_NOTES (insn));\n+    }\n \n   if (temp != dest)\n     emit_move_insn (dest, temp);"}, {"sha": "fab94903ca840cea578fb05628238f9d7bf3cb33", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d37c6fc281d909a3fac80266a8e1d93e096efc/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=b5d37c6fc281d909a3fac80266a8e1d93e096efc", "patch": "@@ -484,9 +484,9 @@\n       if (rtx_equal_function_value_matters\n \t  && ! (GET_CODE (operands[1]) == SYMBOL_REF\n \t\t&& SYMBOL_REF_FLAG (operands[1])))\n-\temit_insn (gen_movdi_symbolic (operands[0], operands[1]));\n+\temit_insn (gen_movdi_symbolic (operands[0], operands[1], gen_reg_rtx (DImode)));\n       else\n-        ia64_expand_load_address (operands[0], operands[1]);\n+        ia64_expand_load_address (operands[0], operands[1], NULL_RTX);\n       DONE;\n     }\n }\")\n@@ -551,12 +551,13 @@\n (define_insn_and_split \"movdi_symbolic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+   (clobber (match_operand:DI  2 \"register_operand\" \"+r\"))\n    (use (reg:DI 1))]\n   \"\"\n   \"* abort ();\"\n   \"\"\n   [(const_int 0)]\n-  \"ia64_expand_load_address (operands[0], operands[1]); DONE;\")\n+  \"ia64_expand_load_address (operands[0], operands[1], operands[2]); DONE;\")\n \n (define_insn \"*movdi_internal_astep\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n@@ -640,7 +641,7 @@\n   [(const_int 0)]\n   \"\n {\n-  ia64_expand_load_address (operands[0], operands[1]);\n+  ia64_expand_load_address (operands[0], operands[1], NULL_RTX);\n   DONE;\n }\")\n \n@@ -679,24 +680,25 @@\n \n (define_expand \"load_gprel64\"\n   [(set (match_dup 2)\n-\t(minus:DI (match_operand:DI 1 \"symbolic_operand\" \"\") (reg:DI 1)))\n+\t(minus:DI (match_operand:DI 1 \"symbolic_operand\" \"\") (match_dup 3)))\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (reg:DI 1) (match_dup 2)))]\n+\t(plus:DI (match_dup 3) (match_dup 2)))]\n   \"\"\n   \"\n {\n   operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n+  operands[3] = pic_offset_table_rtx;\n }\")\n \n (define_expand \"load_symptr\"\n-  [(set (match_dup 2)\n-\t(plus:DI (reg:DI 1) (match_operand:DI 1 \"got_symbolic_operand\" \"\")))\n+  [(set (match_operand:DI 2 \"register_operand\" \"\")\n+\t(plus:DI (match_dup 4) (match_operand:DI 1 \"got_symbolic_operand\" \"\")))\n    (set (match_operand:DI 0 \"register_operand\" \"\") (match_dup 3))]\n   \"\"\n   \"\n {\n-  operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n   operands[3] = gen_rtx_MEM (DImode, operands[2]);\n+  operands[4] = pic_offset_table_rtx;\n   RTX_UNCHANGING_P (operands[3]) = 1;\n }\")\n "}]}