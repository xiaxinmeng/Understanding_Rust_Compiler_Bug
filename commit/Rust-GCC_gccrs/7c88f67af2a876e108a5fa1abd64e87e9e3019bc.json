{"sha": "7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4OGY2N2FmMmE4NzZlMTA4YTVmYTFhYmQ2NGU4N2U5ZTMwMTliYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-24T09:27:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-24T09:27:47Z"}, "message": "tree-dfa.c (refs_may_alias_p): Re-instantiate case that a scalar variable can be only accessed through a...\n\n2008-05-24  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (refs_may_alias_p): Re-instantiate case that\n\ta scalar variable can be only accessed through a pointer\n\tor a union.\n\nFrom-SVN: r135846", "tree": {"sha": "b4e6538253993decb91c5f31f992ce1e251da9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e6538253993decb91c5f31f992ce1e251da9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c88f67af2a876e108a5fa1abd64e87e9e3019bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32101f99491da036f466cd6ba1eed7a2586983af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32101f99491da036f466cd6ba1eed7a2586983af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32101f99491da036f466cd6ba1eed7a2586983af"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "d036e0318ac8ae04b28c32476fa714c6571c4891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c88f67af2a876e108a5fa1abd64e87e9e3019bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c88f67af2a876e108a5fa1abd64e87e9e3019bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "patch": "@@ -1,3 +1,9 @@\n+2008-05-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (refs_may_alias_p): Re-instantiate case that\n+\ta scalar variable can be only accessed through a pointer\n+\tor a union.\n+\n 2008-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_fpclassify): Fix spelling of FP_INFINITE."}, {"sha": "7e4bb7681b7b92c107377d3eb53d743ff0300c42", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c88f67af2a876e108a5fa1abd64e87e9e3019bc/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c88f67af2a876e108a5fa1abd64e87e9e3019bc/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=7c88f67af2a876e108a5fa1abd64e87e9e3019bc", "patch": "@@ -1078,8 +1078,23 @@ refs_may_alias_p (tree ref1, tree ref2)\n \n   /* If one base is a ref-all pointer weird things are allowed.  */\n   strict_aliasing_applies = (flag_strict_aliasing\n-\t\t\t     && get_alias_set (base1) != 0\n-\t\t\t     && get_alias_set (base2) != 0);\n+\t\t\t     && (!INDIRECT_REF_P (base1)\n+\t\t\t\t || get_alias_set (base1) != 0)\n+\t\t\t     && (!INDIRECT_REF_P (base2)\n+\t\t\t\t || get_alias_set (base2) != 0));\n+\n+  /* If strict aliasing applies the only way to access a scalar variable\n+     is through a pointer dereference or through a union (gcc extension).  */\n+  if (strict_aliasing_applies\n+      && ((SSA_VAR_P (ref2)\n+\t   && !AGGREGATE_TYPE_P (TREE_TYPE (ref2))\n+\t   && !INDIRECT_REF_P (ref1)\n+\t   && TREE_CODE (TREE_TYPE (base1)) != UNION_TYPE)\n+\t  || (SSA_VAR_P (ref1)\n+\t      && !AGGREGATE_TYPE_P (TREE_TYPE (ref1))\n+\t      && !INDIRECT_REF_P (ref2)\n+\t      && TREE_CODE (TREE_TYPE (base2)) != UNION_TYPE)))\n+    return false;\n \n   /* If both references are through the same type, or if strict aliasing\n      doesn't apply they are through two same pointers, they do not alias"}]}