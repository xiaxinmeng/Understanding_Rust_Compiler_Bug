{"sha": "bea984814c6fcd056dc80c99805925eb19a591b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhOTg0ODE0YzZmY2QwNTZkYzgwYzk5ODA1OTI1ZWIxOWE1OTFiOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-04T03:24:30Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-05T11:39:46Z"}, "message": "i386: Optimize pmovskb on zero_extend of subreg HI of pmovskb result [PR98461]\n\nThe following patch adds define_insn_and_split to optimize\n\n       vpmovmskb       %xmm0, %eax\n-       movzwl  %ax, %eax\n        notl    %eax\n\nand combine splitter to optimize\n\n        pmovmskb        %xmm0, %eax\n-       notl    %eax\n-       movzwl  %ax, %eax\n+       xorl    $65535, %eax\n\ngcc/ChangeLog\n\tPR target/98461\n\t* config/i386/sse.md (*sse2_pmovskb_zexthisi): New\n\tdefine_insn_and_split for zero_extend of subreg HI of pmovskb\n\tresult.\n\t(*sse2_pmovskb_zexthisi): Add new combine splitters for\n\tzero_extend of not of subreg HI of pmovskb result.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-pr98461-2.c: New test.", "tree": {"sha": "33fa2cdc417a299aaf5c9f760fa714c128a298ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33fa2cdc417a299aaf5c9f760fa714c128a298ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea984814c6fcd056dc80c99805925eb19a591b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea984814c6fcd056dc80c99805925eb19a591b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea984814c6fcd056dc80c99805925eb19a591b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea984814c6fcd056dc80c99805925eb19a591b9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8beba1cfc761cc35762283b3b44a355ef05e25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8beba1cfc761cc35762283b3b44a355ef05e25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8beba1cfc761cc35762283b3b44a355ef05e25b"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "582bc07a00aa22af308022a16e14c33d79b146ee", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea984814c6fcd056dc80c99805925eb19a591b9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea984814c6fcd056dc80c99805925eb19a591b9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bea984814c6fcd056dc80c99805925eb19a591b9", "patch": "@@ -16099,6 +16099,34 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*sse2_pmovskb_zexthisi\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(zero_extend:SI\n+\t  (subreg:HI\n+\t    (unspec:SI\n+\t      [(match_operand:V16QI 1 \"register_operand\")]\n+\t      UNSPEC_MOVMSK) 0)))]\n+  \"TARGET_SSE2 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(zero_extend:SI\n+\t  (not:HI\n+\t    (subreg:HI\n+\t      (unspec:SI\n+\t\t[(match_operand:V16QI 1 \"register_operand\")]\n+\t\tUNSPEC_MOVMSK) 0))))]\n+  \"TARGET_SSE2\"\n+  [(set (match_dup 2)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))\n+   (set (match_dup 0)\n+\t(xor:SI (match_dup 2) (const_int 65535)))]\n+ \"operands[2] = gen_reg_rtx (SImode);\")\n+\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(unspec:SI"}, {"sha": "330272c69bc955f2c77d1b828a50469a9140e2a7", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr98461-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea984814c6fcd056dc80c99805925eb19a591b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea984814c6fcd056dc80c99805925eb19a591b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461-2.c?ref=bea984814c6fcd056dc80c99805925eb19a591b9", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/98461 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tpmovmskb\\t\" 3 } } */\n+/* { dg-final { scan-assembler-not \"\\tmovzwl\" } } */\n+/* { dg-final { scan-assembler-times \"\\tnotl\" 1 } } *\n+/* { dg-final { scan-assembler-times \"\\txorl\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int movemask_not1(__m128i logical) {\n+  unsigned short res = (unsigned short)(_mm_movemask_epi8(logical));\n+  return ~res;\n+}\n+\n+unsigned int movemask_not2(__m128i logical) {\n+  unsigned short res = (unsigned short)(_mm_movemask_epi8(logical));\n+  res = ~res;\n+  return res;\n+}\n+\n+unsigned int movemask_zero_extend(__m128i logical) {\n+  unsigned int res = _mm_movemask_epi8(logical);\n+  return res & 0xffff;\n+}"}]}