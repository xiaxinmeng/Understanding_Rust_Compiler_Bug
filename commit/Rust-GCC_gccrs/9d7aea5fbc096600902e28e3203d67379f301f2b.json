{"sha": "9d7aea5fbc096600902e28e3203d67379f301f2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3YWVhNWZiYzA5NjYwMDkwMmUyOGUzMjAzZDY3Mzc5ZjMwMWYyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-04-07T13:27:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-04-07T13:27:45Z"}, "message": "re PR c++/60731 (dynamic library not getting reinitialized on multiple calls to dlopen())\n\n\tPR c++/60731\n\t* lib/gcc-dg.exp (dg-build-dso): New.\n\t(gcc-dg-test-1): Handle dg-do-what \"dso\".\n\t* lib/target-supports.exp (add_options_for_dlopen): New.\n\t(check_effective_target_dlopen): Use it.\n\t* g++.dg/dso/dlclose1.C: New.\n\t* g++.dg/dso/dlclose1-dso.cc: New.\n\nFrom-SVN: r209187", "tree": {"sha": "237ccb99133c0a6b115c594981f93ed9d688628f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237ccb99133c0a6b115c594981f93ed9d688628f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d7aea5fbc096600902e28e3203d67379f301f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7aea5fbc096600902e28e3203d67379f301f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7aea5fbc096600902e28e3203d67379f301f2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7aea5fbc096600902e28e3203d67379f301f2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da34ade5e6c93713fc9cb0b7b505afb06b01b95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da34ade5e6c93713fc9cb0b7b505afb06b01b95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da34ade5e6c93713fc9cb0b7b505afb06b01b95a"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "4b252901db3b375d41d000ebe1817dfcb63fd11f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d7aea5fbc096600902e28e3203d67379f301f2b", "patch": "@@ -1,3 +1,10 @@\n+2014-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/gcc-dg.exp (dg-build-dso): New.\n+\t(gcc-dg-test-1): Handle dg-do-what \"dso\".\n+\t* lib/target-supports.exp (add_options_for_dlopen): New.\n+\t(check_effective_target_dlopen): Use it.\n+\n 2014-04-07  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* gcc.target/arm/pr60657.c: Fix missing curly brace."}, {"sha": "cede4839bc0b1b9a4c531f8b4711cbe348eea34a", "filename": "gcc/testsuite/g++.dg/dso/dlclose1-dso.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1-dso.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1-dso.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1-dso.cc?ref=9d7aea5fbc096600902e28e3203d67379f301f2b", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-fno-gnu-unique\" }\n+\n+// A static variable in an inline function uses STB_GNU_UNIQUE normally.\n+inline int foo() { static int i; return ++i; }\n+\n+extern \"C\" int fn()\n+{\n+  return foo();\n+}"}, {"sha": "95b6fea1f54a53b84c84d6498822f7ca04ca54c9", "filename": "gcc/testsuite/g++.dg/dso/dlclose1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdso%2Fdlclose1.C?ref=9d7aea5fbc096600902e28e3203d67379f301f2b", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/60731\n+// { dg-do run { target dlopen } }\n+// { dg-add-options dlopen }\n+// { dg-build-dso \"dlclose1-dso.cc\" }\n+\n+#include <dlfcn.h>\n+extern \"C\" void abort();\n+extern \"C\" int printf (const char *, ...);\n+\n+// Open and close the DSO for each call so that statics are reinitialized.\n+int call()\n+{\n+  void *h = dlopen (\"./dlclose1-dso.so\", RTLD_NOW);\n+  if (!h) { printf (\"dlopen failed: %s\\n\", dlerror()); abort(); }\n+  int (*fn)() = (int(*)())dlsym (h, \"fn\");\n+  if (!fn) { printf (\"dlsym failed: %s\\n\", dlerror()); abort(); }\n+  int r = fn();\n+  dlclose (h);\n+  return r;\n+}\n+\n+int main() {\n+  int i = call();\n+  int j = call();\n+  if (i != j)\n+    {\n+      printf (\"mismatch: %d != %d\\n\", i, j);\n+      abort();\n+    }\n+}"}, {"sha": "89eec95a5f7b900cbcf7d04947b87feb0981c9fe", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=9d7aea5fbc096600902e28e3203d67379f301f2b", "patch": "@@ -144,6 +144,11 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \t    # The following line is needed for targets like the i960 where\n \t    # the default output file is b.out.  Sigh.\n \t}\n+\t\"dso\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"[file rootname [file tail $prog]].so\"\n+\t    set extra_tool_flags \"$extra_tool_flags -fPIC -shared\"\n+\t}\n \t\"repo\" {\n \t    set compile_type \"object\"\n \t    set output_file \"[file rootname [file tail $prog]].o\"\n@@ -181,6 +186,7 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \tlappend options \"additional_flags=$extra_tool_flags\"\n     }\n \n+    verbose \"$target_compile $prog $output_file $compile_type $options\" 4\n     set comp_output [$target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options]\n \n     # Look for an internal compiler error, which sometimes masks the fact\n@@ -208,6 +214,26 @@ proc gcc-dg-test { prog do_what extra_tool_flags } {\n     return [gcc-dg-test-1 gcc_target_compile $prog $do_what $extra_tool_flags]\n }\n \n+# Usage: { dg-build-dso \"file.ext\" }\n+# Compiles the specified file into \"file.so\" (treating that compilation as\n+# a separate test) for use by the main test, and schedules it for removal\n+# when the main test is complete.  The DSO source file should not use \"dg-do\".\n+# This relies on a couple of local variable names in dg-test.\n+\n+proc dg-build-dso { args } {\n+    global dg-do-what-default\n+    upvar prog main_file\n+    upvar dg-final-code final-code\n+\n+    set file [lindex $args 1]\n+    set dir \"[file dirname $main_file]\"\n+    set dg-do-what-default dso\n+    dg-test -keep-output $dir/$file \"\" \"\"\n+\n+    set output_file \"[file rootname [file tail $file]].so\"\n+    append final-code \"remove-build-file $output_file\"\n+}\n+\n proc gcc-dg-prune { system text } {\n     global additional_prunes\n "}, {"sha": "1a5c2fa1b972e994dcd0c02834ad5c55d2e5354a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7aea5fbc096600902e28e3203d67379f301f2b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9d7aea5fbc096600902e28e3203d67379f301f2b", "patch": "@@ -746,7 +746,14 @@ proc check_effective_target_mmap {} {\n \n # Return 1 if the target supports dlopen, 0 otherwise.\n proc check_effective_target_dlopen {} {\n-    return [check_function_available \"dlopen\"]\n+    return [check_no_compiler_messages dlopen executable {\n+\t#include <dlfcn.h>\n+\tint main(void) { dlopen (\"dummy.so\", RTLD_NOW); }\n+    } [add_options_for_dlopen \"\"]]\n+}\n+\n+proc add_options_for_dlopen { flags } {\n+    return \"$flags -ldl\"\n }\n \n # Return 1 if the target supports clone, 0 otherwise."}]}