{"sha": "400f003ee5531d6998c53082a3f255690e63778c", "node_id": "C_kwDOANBUbNoAKDQwMGYwMDNlZTU1MzFkNjk5OGM1MzA4MmEzZjI1NTY5MGU2Mzc3OGM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-13T08:29:54Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:17:23Z"}, "message": "RISC-V: Add vmslt vv C++ api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmslt_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_m-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_m-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_m-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmslt_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_m-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_m-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_m-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsltu_vv_mu-3.C: New test.", "tree": {"sha": "5b1bcb20a7378d751d6a39750d4e4425654315a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1bcb20a7378d751d6a39750d4e4425654315a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400f003ee5531d6998c53082a3f255690e63778c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400f003ee5531d6998c53082a3f255690e63778c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400f003ee5531d6998c53082a3f255690e63778c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400f003ee5531d6998c53082a3f255690e63778c/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f4691e31e50fae2098c2970ee92c1385929a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f4691e31e50fae2098c2970ee92c1385929a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f4691e31e50fae2098c2970ee92c1385929a81"}], "stats": {"total": 2880, "additions": 2880, "deletions": 0}, "files": [{"sha": "eb0c11909f1e3795eb4a343f2d57d00d533a571e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "0964e57a79cb52130b85496e7bfb5132f1aaeaef", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "460393119964ed702325b7d45bab496540735a25", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "346a1a79bb247a9d9ac2630058c732bbd6ee1083", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_m-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9475ab0df9ffba9912eb628d16102214c1264162", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_m-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a8d1c41c39e3dc2cea50e6cf0c312e82626be73c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_m-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_m-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b5f88f1e4d24b3afade296e43fe806f1a1c78396", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c6b96c3a3fc5e86d87183974a6e5940ba977b144", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a6c5cf94527f826fd3e69f88323f306f80e23613", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmslt_vv_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmslt_vv_mu-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmslt_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmslt_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmslt_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmslt_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmslt_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmslt_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmslt_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmslt_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "eeb9c15d99916f1daf17b368bc2d551d78043080", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "0b1a7b5288f8ec318fe6f0bde7f2f3faa01df90e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "e0bd847f09b02a6333bec4fa6698fa0874caf8ee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "b0b577e333e9d992c871ba1a90487471ebcff847", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_m-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6ecb8862a5b2c86056264e12452c9597a9b8c4e4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_m-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ab0f41dddb1beeab58828f15b887bb0933b53ca8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_m-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_m-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e4e22abaea9c7cf655b834b1419edd8414b90eb5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-1.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6ebc3c77b830159f2c3c38c76aa7c92c0b74a268", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-2.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "32ed1e94313084b9eff47e0f83d8a080467d9675", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsltu_vv_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400f003ee5531d6998c53082a3f255690e63778c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsltu_vv_mu-3.C?ref=400f003ee5531d6998c53082a3f255690e63778c", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsltu_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsltu_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsltu_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsltu_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsltu_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsltu_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsltu_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsltu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsltu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}