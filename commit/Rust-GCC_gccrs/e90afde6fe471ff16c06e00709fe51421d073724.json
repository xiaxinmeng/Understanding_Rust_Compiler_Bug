{"sha": "e90afde6fe471ff16c06e00709fe51421d073724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYWZkZTZmZTQ3MWZmMTZjMDZlMDA3MDlmZTUxNDIxZDA3MzcyNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-17T14:14:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-17T14:14:49Z"}, "message": "options.texi (Variable): Document.\n\n\t* doc/options.texi (Variable): Document.\n\t* optc-gen.awk, opth-gen.awk: Handle Variable records.  Don't\n\tgenerate target_flags declarations explicitly.  Don't define\n\tVarExists variables for the driver.\n\t* common.opt (target_flags): New Variable record.\n\t(flag_dump_unnumbered, flag_dump_unnumbered_links,\n\tflag_var_tracking, flag_var_tracking_assignments,\n\tflag_var_tracking_assignments_toggle): Don't mark variables with\n\tVarExists.\n\t* config/i386/i386.c (ix86_isa_flags): Don't define here.\n\t* config/i386/i386.opt (ix86_isa_flags): Define here.\n\t* config/mcore/mcore.c (mcore_stack_increment): Don't define here.\n\t* config/mcore/mcore.opt (mcore_stack_increment): Don't mark with\n\tVarExists.\n\t* flags.h (flag_dump_unnumbered, flag_var_tracking): Remove.\n\t* print-rtl.c (flag_dump_unnumbered, flag_dump_unnumbered_links):\n\tOnly define for generator programs.\n\t* rtlanal.c (target_flags): Remove.\n\t* toplev.c (flag_var_tracking, flag_var_tracking_assignments,\n\tflag_var_tracking_assignments_toggle): Remove.\n\nFrom-SVN: r164370", "tree": {"sha": "b975a487ff46cf6a7b61b28aaa2fde8f9ec2cd09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b975a487ff46cf6a7b61b28aaa2fde8f9ec2cd09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90afde6fe471ff16c06e00709fe51421d073724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90afde6fe471ff16c06e00709fe51421d073724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90afde6fe471ff16c06e00709fe51421d073724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90afde6fe471ff16c06e00709fe51421d073724/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5581f1b2a140e1ca0bf4d3256457939fc3e6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5581f1b2a140e1ca0bf4d3256457939fc3e6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5581f1b2a140e1ca0bf4d3256457939fc3e6a3"}], "stats": {"total": 145, "additions": 87, "deletions": 58}, "files": [{"sha": "c36b4f0a670456d245f1ec5c3120d23368a69839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -1,3 +1,26 @@\n+2010-09-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/options.texi (Variable): Document.\n+\t* optc-gen.awk, opth-gen.awk: Handle Variable records.  Don't\n+\tgenerate target_flags declarations explicitly.  Don't define\n+\tVarExists variables for the driver.\n+\t* common.opt (target_flags): New Variable record.\n+\t(flag_dump_unnumbered, flag_dump_unnumbered_links,\n+\tflag_var_tracking, flag_var_tracking_assignments,\n+\tflag_var_tracking_assignments_toggle): Don't mark variables with\n+\tVarExists.\n+\t* config/i386/i386.c (ix86_isa_flags): Don't define here.\n+\t* config/i386/i386.opt (ix86_isa_flags): Define here.\n+\t* config/mcore/mcore.c (mcore_stack_increment): Don't define here.\n+\t* config/mcore/mcore.opt (mcore_stack_increment): Don't mark with\n+\tVarExists.\n+\t* flags.h (flag_dump_unnumbered, flag_var_tracking): Remove.\n+\t* print-rtl.c (flag_dump_unnumbered, flag_dump_unnumbered_links):\n+\tOnly define for generator programs.\n+\t* rtlanal.c (target_flags): Remove.\n+\t* toplev.c (flag_var_tracking, flag_var_tracking_assignments,\n+\tflag_var_tracking_assignments_toggle): Remove.\n+\n 2010-09-17  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/43432"}, {"sha": "9d653f61ba3b3e545c956ae135ebf9edfa7c5e83", "filename": "gcc/common.opt", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -23,6 +23,9 @@\n \n ; Please try to keep this file in ASCII collating order.\n \n+Variable\n+int target_flags\n+\n ###\n Driver\n \n@@ -552,11 +555,11 @@ Common Report Var(flag_dump_noaddr)\n Suppress output of addresses in debugging dumps\n \n fdump-unnumbered\n-Common Report Var(flag_dump_unnumbered) VarExists\n+Common Report Var(flag_dump_unnumbered)\n Suppress output of instruction numbers, line number notes and addresses in debugging dumps\n \n fdump-unnumbered-links\n-Common Report Var(flag_dump_unnumbered_links) VarExists\n+Common Report Var(flag_dump_unnumbered_links)\n Suppress output of previous and next insn numbers in debugging dumps\n \n fdwarf2-cfi-asm\n@@ -1511,16 +1514,27 @@ Just generate unwind tables for exception handling\n fuse-linker-plugin\n Common Undocumented\n \n+; Positive if we should track variables, negative if we should run\n+; the var-tracking pass only to discard debug annotations, zero if\n+; we're not to run it.  When flag_var_tracking == 2 (AUTODETECT_VALUE) it\n+; will be set according to optimize, debug_info_level and debug_hooks\n+; in process_options ().\n fvar-tracking\n-Common Report Var(flag_var_tracking) VarExists Optimization\n+Common Report Var(flag_var_tracking) Init(2) Optimization\n Perform variable tracking\n \n+; Positive if we should track variables at assignments, negative if\n+; we should run the var-tracking pass only to discard debug\n+; annotations.  When flag_var_tracking_assignments ==\n+; AUTODETECT_VALUE it will be set according to flag_var_tracking.\n fvar-tracking-assignments\n-Common Report Var(flag_var_tracking_assignments) VarExists Optimization\n+Common Report Var(flag_var_tracking_assignments) Init(2) Optimization\n Perform variable tracking by annotating assignments\n \n+; Nonzero if we should toggle flag_var_tracking_assignments after\n+; processing options and computing its default.  */\n fvar-tracking-assignments-toggle\n-Common Report Var(flag_var_tracking_assignments_toggle) VarExists Optimization\n+Common Report Var(flag_var_tracking_assignments_toggle) Optimization\n Toggle -fvar-tracking-assignments\n \n fvar-tracking-uninit"}, {"sha": "abec05711cb10c935276a13268e75278e700129e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -2025,9 +2025,6 @@ static enum calling_abi ix86_function_abi (const_tree);\n static int ix86_tune_defaulted;\n static int ix86_arch_specified;\n \n-/* Bit flags that specify the ISA we are compiling for.  */\n-int ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT;\n-\n /* A mask of ix86_isa_flags that includes bit X if X\n    was set or cleared on the command line.  */\n static int ix86_isa_flags_explicit;"}, {"sha": "38a53f616c7f516c33893671ba67c0e8f81b2228", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -19,6 +19,10 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+; Bit flags that specify the ISA we are compiling for.\n+Variable\n+int ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT\n+\n ;; Definitions to add to the cl_target_option structure\n ;; -march= processor\n TargetSave"}, {"sha": "ce58827de3e7358ca544b57b3f54493ff7917096", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -46,11 +46,6 @@\n #include \"target-def.h\"\n #include \"df.h\"\n \n-/* Maximum size we are allowed to grow the stack in a single operation.\n-   If we want more, we must do it in increments of at most this size.\n-   If this value is 0, we don't check at all.  */\n-int mcore_stack_increment = STACK_UNITS_MAXSTEP;\n-\n /* For dumping information about frame sizes.  */\n char * mcore_current_function_name = 0;\n long   mcore_current_compilation_timestamp = 0;"}, {"sha": "8e465d3a08cdeea1fcea17a8aa93423a9da6dcef", "filename": "gcc/config/mcore/mcore.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.opt?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -63,8 +63,11 @@ mslow-bytes\n Target Report Mask(SLOW_BYTES)\n Prefer word accesses over byte accesses\n \n+; Maximum size we are allowed to grow the stack in a single operation.\n+; If we want more, we must do it in increments of at most this size.\n+; If this value is 0, we don't check at all.\n mstack-increment=\n-Target RejectNegative Joined UInteger Var(mcore_stack_increment) VarExists\n+Target RejectNegative Joined UInteger Var(mcore_stack_increment) Init(STACK_UNITS_MAXSTEP)\n Set the maximum amount for a single stack increment operation\n \n mwide-bitfields"}, {"sha": "924ac17930432994cc722e6a1c88438ff4692888", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -40,6 +40,17 @@ A target specific save record to save additional information. These\n records have two fields: the string @samp{TargetSave}, and a\n declaration type to go in the @code{cl_target_option} structure.\n \n+@item\n+A variable record to define a variable used to store option\n+information.  These records have two fields: the string\n+@samp{Variable}, and a declaration of the type and name of the\n+variable, optionally with an initializer (but without any trailing\n+@samp{;}).  These records may be used for variables used for many\n+options where declaring the variable and its initializer by omitting\n+@code{VarExists} from a single option definition record would be\n+inappropriate, or for variables set in option handlers rather than\n+referenced by @code{Var} properties.\n+\n @item\n An option definition record.  These records have the following fields:\n @enumerate"}, {"sha": "805308cf9848ef8c1710886260a1ca83559eabd1", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -164,11 +164,6 @@ extern int rtl_dump_and_exit;\n \n extern int flag_gen_aux_info;\n \n-/* Nonzero means suppress output of instruction numbers and line number\n-   notes in debugging dumps.  */\n-\n-extern int flag_dump_unnumbered;\n-\n /* True if printing into -fdump-final-insns= dump.  */\n \n extern bool final_insns_dump_p;\n@@ -301,9 +296,6 @@ enum graph_dump_types\n };\n extern enum graph_dump_types graph_dump_format;\n \n-/* Nonzero if we should track variables.  */\n-extern int flag_var_tracking;\n-\n /* True if flag_speculative_prefetching was set by user.  Used to suppress\n    warning message in case flag was set by -fprofile-{generate,use}.  */\n extern bool flag_speculative_prefetching_set;"}, {"sha": "4a146dddffb82085cd9b6f4f7be8a36640882449", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -30,6 +30,7 @@ BEGIN {\n \tn_opts = 0\n \tn_langs = 0\n \tn_target_save = 0\n+\tn_extra_vars = 0\n         quote = \"\\042\"\n \tcomma = \",\"\n \tFS=SUBSEP\n@@ -48,6 +49,10 @@ BEGIN {\n \t\t\ttarget_save_decl[n_target_save] = $2\n \t\t\tn_target_save++\n \t\t}\n+\t\telse if ($1 == \"Variable\") {\n+\t\t\textra_vars[n_extra_vars] = $2\n+\t\t\tn_extra_vars++\n+\t\t}\n \t\telse {\n \t\t\tname = opt_args(\"Mask\", $1)\n \t\t\tif (name == \"\") {\n@@ -72,7 +77,6 @@ print \"#include \" quote \"opts.h\" quote\n print \"#include \" quote \"intl.h\" quote\n print \"\"\n print \"#ifdef GCC_DRIVER\"\n-print \"int target_flags;\"\n print \"int target_flags_explicit;\"\n print \"#else\"\n print \"#include \" quote \"flags.h\" quote\n@@ -81,6 +85,9 @@ print \"#endif /* GCC_DRIVER */\"\n print \"\"\n \n have_save = 0;\n+for (i = 0; i < n_extra_vars; i++) {\n+\tprint extra_vars[i] \";\"\n+}\n for (i = 0; i < n_opts; i++) {\n \tif (flag_set_p(\"Save\", flags[i]))\n \t\thave_save = 1;\n@@ -90,28 +97,19 @@ for (i = 0; i < n_opts; i++) {\n \t\tcontinue;\n \n \tif (flag_set_p(\"VarExists\", flags[i])) {\n-\t\t# Need it for the gcc driver.\n-\t\tif (name in var_seen)\n-\t\t\tcontinue;\n-\t\tinit = \"\"\n-\t\tgcc_driver = 1\n+\t\tcontinue;\n \t}\n \telse {\n \t\tinit = opt_args(\"Init\", flags[i])\n \t\tif (init != \"\")\n \t\t\tinit = \" = \" init;\n \t\telse if (name in var_seen)\n \t\t\tcontinue;\n-\t\tgcc_driver = 0\n \t}\n \n-\tif (gcc_driver == 1)\n-\t\tprint \"#ifdef GCC_DRIVER\"\n \tprint \"/* Set by -\" opts[i] \".\"\n \tprint \"   \" help[i] \"  */\"\n \tprint var_type(flags[i]) name init \";\"\n-\tif (gcc_driver == 1)\n-\t\tprint \"#endif /* GCC_DRIVER */\"\n \tprint \"\"\n \n \tvar_seen[name] = 1;"}, {"sha": "423328ddfdb239f54a4af78bcb533e11cbbd1cc4", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -28,6 +28,7 @@ BEGIN {\n \tn_opts = 0\n \tn_langs = 0\n \tn_target_save = 0\n+\tn_extra_vars = 0\n \tn_extra_masks = 0\n \tFS=SUBSEP\n }\n@@ -43,6 +44,10 @@ BEGIN {\n \t\t\ttarget_save_decl[n_target_save] = $2\n \t\t\tn_target_save++\n \t\t}\n+\t\telse if ($1 == \"Variable\") {\n+\t\t\textra_vars[n_extra_vars] = $2\n+\t\t\tn_extra_vars++\n+\t\t}\n \t\telse {\n \t\t\tname = opt_args(\"Mask\", $1)\n \t\t\tif (name == \"\") {\n@@ -65,12 +70,17 @@ print \"\"\n print \"#ifndef OPTIONS_H\"\n print \"#define OPTIONS_H\"\n print \"\"\n-print \"extern int target_flags;\"\n print \"extern int target_flags_explicit;\"\n print \"\"\n \n have_save = 0;\n \n+for (i = 0; i < n_extra_vars; i++) {\n+\tvar = extra_vars[i]\n+\tsub(\" *=.*\", \"\", var)\n+\tprint \"extern \" var \";\"\n+}\n+\n for (i = 0; i < n_opts; i++) {\n \tif (flag_set_p(\"Save\", flags[i]))\n \t\thave_save = 1;"}, {"sha": "ec7e35883a82f0fbba7e9c5c8eb0f6f849b2a766", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -58,6 +58,10 @@ static void print_rtx (const_rtx);\n    the assembly output file.  */\n const char *print_rtx_head = \"\";\n \n+#ifdef GENERATOR_FILE\n+/* These are defined from the .opt file when not used in generator\n+   programs.  */\n+\n /* Nonzero means suppress output of instruction numbers\n    in debugging dumps.\n    This must be defined here so that programs like gencodes can be linked.  */\n@@ -67,6 +71,7 @@ int flag_dump_unnumbered = 0;\n    and next insns in debugging dumps.\n    This must be defined here so that programs like gencodes can be linked.  */\n int flag_dump_unnumbered_links = 0;\n+#endif\n \n /* Nonzero means use simplified format without flags, modes, etc.  */\n int flag_simple = 0;"}, {"sha": "d34dc8060090cefbc85d7572df382811ec22f5d4", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -1,6 +1,6 @@\n /* Analyze RTL for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -64,12 +64,6 @@ static unsigned int num_sign_bit_copies1 (const_rtx, enum machine_mode, const_rt\n    -1 if a code has no such operand.  */\n static int non_rtx_starting_operands[NUM_RTX_CODE];\n \n-/* Bit flags that specify the machine subtype we are compiling for.\n-   Bits are tested using macros TARGET_... defined in the tm.h file\n-   and set by `-m...' switches.  Must be defined in rtlanal.c.  */\n-\n-int target_flags;\n-\n /* Truncation narrows the mode from SOURCE mode to DESTINATION mode.\n    If TARGET_MODE_REP_EXTENDED (DESTINATION, DESTINATION_REP) is\n    SIGN_EXTEND then while narrowing we also have to enforce the"}, {"sha": "e43b6d9e3968941df7f891f3f10c4ee0485b5f66", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90afde6fe471ff16c06e00709fe51421d073724/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e90afde6fe471ff16c06e00709fe51421d073724", "patch": "@@ -291,23 +291,6 @@ int flag_dump_rtl_in_asm = 0;\n    the support provided depends on the backend.  */\n rtx stack_limit_rtx;\n \n-/* Positive if we should track variables, negative if we should run\n-   the var-tracking pass only to discard debug annotations, zero if\n-   we're not to run it.  When flag_var_tracking == AUTODETECT_VALUE it\n-   will be set according to optimize, debug_info_level and debug_hooks\n-   in process_options ().  */\n-int flag_var_tracking = AUTODETECT_VALUE;\n-\n-/* Positive if we should track variables at assignments, negative if\n-   we should run the var-tracking pass only to discard debug\n-   annotations.  When flag_var_tracking_assignments ==\n-   AUTODETECT_VALUE it will be set according to flag_var_tracking.  */\n-int flag_var_tracking_assignments = AUTODETECT_VALUE;\n-\n-/* Nonzero if we should toggle flag_var_tracking_assignments after\n-   processing options and computing its default.  */\n-int flag_var_tracking_assignments_toggle = 0;\n-\n /* Type of stack check.  */\n enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n "}]}