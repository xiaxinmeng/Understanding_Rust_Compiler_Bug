{"sha": "12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJjNGY3ZGNhZmMzZmI0NjllOTk1ZDI4M2RjY2JiNGE1OTQ1ZjExYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-17T12:48:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-17T12:48:56Z"}, "message": "re PR c++/80075 (ICE: \"statement marked for throw, but doesn\u2019t\" with -fnon-call-exceptions)\n\n2017-03-17  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/80075\n\t* tree-eh.c (stmt_could_throw_1_p): Only handle gimple assigns.\n\tProperly verify the LHS before the RHS possibly claims to be\n\thandled.\n\t(stmt_could_throw_p): Hande gimple conds fully here.  Clobbers\n\tdo not throw.\n\n\t* g++.dg/torture/pr80075.C: New testcase.\n\nFrom-SVN: r246223", "tree": {"sha": "3a1c18ddfd849a4afa672dd26bb955d6f9e0cfa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1c18ddfd849a4afa672dd26bb955d6f9e0cfa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c7d37de415fe5345c005154ea69d0d9b5a8c8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7d37de415fe5345c005154ea69d0d9b5a8c8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7d37de415fe5345c005154ea69d0d9b5a8c8d6"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "9af58154dd26569f0fd358723890412c1f8bfb10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "patch": "@@ -1,3 +1,12 @@\n+2017-03-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/80075\n+\t* tree-eh.c (stmt_could_throw_1_p): Only handle gimple assigns.\n+\tProperly verify the LHS before the RHS possibly claims to be\n+\thandled.\n+\t(stmt_could_throw_p): Hande gimple conds fully here.  Clobbers\n+\tdo not throw.\n+\n 2017-03-17  Martin Jambor  <mjambor@suse.cz>\n \n \t* doc/invoke.texi (Option Options): Include -fipa-vrp in the list."}, {"sha": "144030e8c0f166294429bf006e7c16f18f7138ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "patch": "@@ -1,3 +1,8 @@\n+2017-03-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/80075\n+\t* g++.dg/torture/pr80075.C: New testcase.\n+\n 2017-03-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71294"}, {"sha": "5bc802027c09289e4fd962a84e65b7a468ae5c82", "filename": "gcc/testsuite/g++.dg/torture/pr80075.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80075.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80075.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80075.C?ref=12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fnon-call-exceptions\" }\n+\n+struct s {\n+    int i;\n+};\n+\n+extern int use_memcpy;\n+extern void my_memcpy(void*, void*, int);\n+\n+int\n+f (struct s* p)\n+{\n+  struct s a;\n+\n+  try\n+    {\n+      a = (struct s){};\n+      if (!use_memcpy)\n+\t*p = a;\n+      else\n+\tmy_memcpy (p, &a, sizeof (struct s));\n+    } catch (...) {\n+\treturn 0;\n+    }\n+  return 1;\n+}"}, {"sha": "fc016d795b72831a7571d6852ac682db5b04e6b5", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c4f7dcafc3fb469e995d283dccbb4a5945f11c/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=12c4f7dcafc3fb469e995d283dccbb4a5945f11c", "patch": "@@ -2726,9 +2726,9 @@ tree_could_trap_p (tree expr)\n    an assignment or a conditional) may throw.  */\n \n static bool\n-stmt_could_throw_1_p (gimple *stmt)\n+stmt_could_throw_1_p (gassign *stmt)\n {\n-  enum tree_code code = gimple_expr_code (stmt);\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n   bool honor_nans = false;\n   bool honor_snans = false;\n   bool fp_operation = false;\n@@ -2742,11 +2742,8 @@ stmt_could_throw_1_p (gimple *stmt)\n       || TREE_CODE_CLASS (code) == tcc_binary\n       || code == FMA_EXPR)\n     {\n-      if (is_gimple_assign (stmt)\n-\t  && TREE_CODE_CLASS (code) == tcc_comparison)\n+      if (TREE_CODE_CLASS (code) == tcc_comparison)\n \tt = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-      else if (gimple_code (stmt) == GIMPLE_COND)\n-\tt = TREE_TYPE (gimple_cond_lhs (stmt));\n       else\n \tt = gimple_expr_type (stmt);\n       fp_operation = FLOAT_TYPE_P (t);\n@@ -2759,17 +2756,21 @@ stmt_could_throw_1_p (gimple *stmt)\n \thonor_trapv = true;\n     }\n \n+  /* First check the LHS.  */\n+  if (tree_could_trap_p (gimple_assign_lhs (stmt)))\n+    return true;\n+\n   /* Check if the main expression may trap.  */\n-  t = is_gimple_assign (stmt) ? gimple_assign_rhs2 (stmt) : NULL;\n   ret = operation_could_trap_helper_p (code, fp_operation, honor_trapv,\n-\t\t\t\t       honor_nans, honor_snans, t,\n+\t\t\t\t       honor_nans, honor_snans,\n+\t\t\t\t       gimple_assign_rhs2 (stmt),\n \t\t\t\t       &handled);\n   if (handled)\n     return ret;\n \n   /* If the expression does not trap, see if any of the individual operands may\n      trap.  */\n-  for (i = 0; i < gimple_num_ops (stmt); i++)\n+  for (i = 1; i < gimple_num_ops (stmt); i++)\n     if (tree_could_trap_p (gimple_op (stmt, i)))\n       return true;\n \n@@ -2795,11 +2796,22 @@ stmt_could_throw_p (gimple *stmt)\n     case GIMPLE_CALL:\n       return !gimple_call_nothrow_p (as_a <gcall *> (stmt));\n \n-    case GIMPLE_ASSIGN:\n     case GIMPLE_COND:\n-      if (!cfun->can_throw_non_call_exceptions)\n+      {\n+\tif (!cfun->can_throw_non_call_exceptions)\n+\t  return false;\n+\tgcond *cond = as_a <gcond *> (stmt);\n+\ttree lhs = gimple_cond_lhs (cond);\n+\treturn operation_could_trap_p (gimple_cond_code (cond),\n+\t\t\t\t       FLOAT_TYPE_P (TREE_TYPE (lhs)),\n+\t\t\t\t       false, NULL_TREE);\n+      }\n+\n+    case GIMPLE_ASSIGN:\n+      if (!cfun->can_throw_non_call_exceptions\n+\t  || gimple_clobber_p (stmt))\n         return false;\n-      return stmt_could_throw_1_p (stmt);\n+      return stmt_could_throw_1_p (as_a <gassign *> (stmt));\n \n     case GIMPLE_ASM:\n       if (!cfun->can_throw_non_call_exceptions)"}]}