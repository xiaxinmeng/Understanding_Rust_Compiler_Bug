{"sha": "6c7a259b817ea4d1eae117a426a08fc85f943788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3YTI1OWI4MTdlYTRkMWVhZTExN2E0MjZhMDhmYzg1Zjk0Mzc4OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-11-20T18:37:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-11-20T18:37:05Z"}, "message": "c-family: add name_hint/deferred_diagnostic\n\nIn various places we use lookup_name_fuzzy to provide a hint,\nand can report messages of the form:\n  error: unknown foo named 'bar'\nor:\n  error: unknown foo named 'bar'; did you mean 'SUGGESTION?\n\nThis patch provides a way for lookup_name_fuzzy to provide\nboth the suggestion above, and (optionally) additional hints\nthat can be printed e.g.\n\n  note: did you forget to include <SOME_HEADER.h>?\n\nThis patch provides the mechanism and ports existing users\nof lookup_name_fuzzy to the new return type.\nThere are no uses of such hints in this patch, but followup\npatches provide various front-end specific uses of this.\n\ngcc/c-family/ChangeLog:\n\t* c-common.h (enum lookup_name_fuzzy_kind): Move to name-hint.h.\n\t(lookup_name_fuzzy): Likewise.  Convert return type from\n\tconst char * to name_hint.  Add location_t param.\n\t* name-hint.h: New header.\n\ngcc/c/ChangeLog:\n\t* c-decl.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n\tInclude \"c-family/name-hint.h\"\n\t(implicit_decl_warning): Convert \"hint\" from\n\tconst char * to name_hint.  Pass location to\n\tlookup_name_fuzzy.  Suppress any deferred diagnostic if the\n\twarning was not printed.\n\t(undeclared_variable): Likewise for \"guessed_id\".\n\t(lookup_name_fuzzy): Convert return type from const char *\n\tto name_hint.  Add location_t param.\n\t* c-parser.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n\tInclude \"c-family/name-hint.h\"\n\t(c_parser_declaration_or_fndef): Convert \"hint\" from\n\tconst char * to name_hint.  Pass location to lookup_name_fuzzy.\n\t(c_parser_parameter_declaration): Likewise.\n\ngcc/cp/ChangeLog:\n\t* name-lookup.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n\tInclude \"c-family/name-hint.h\"\n\t(suggest_alternatives_for): Convert \"fuzzy_name\" from const char *\n\tto name_hint, and rename to \"hint\".  Pass location to\n\tlookup_name_fuzzy.\n\t(lookup_name_fuzzy): Convert return type from const char *\n\tto name_hint.  Add location_t param.\n\t* parser.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n\tInclude \"c-family/name-hint.h\"\n\t(cp_parser_diagnose_invalid_type_name): Convert\n\t\"suggestion\" from const char * to name_hint, and rename to \"hint\".\n\tPass location to lookup_name_fuzzy.\n\nFrom-SVN: r254963", "tree": {"sha": "733042f52e9275c5054c79cb9da0c33989b71861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733042f52e9275c5054c79cb9da0c33989b71861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7a259b817ea4d1eae117a426a08fc85f943788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7a259b817ea4d1eae117a426a08fc85f943788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7a259b817ea4d1eae117a426a08fc85f943788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7a259b817ea4d1eae117a426a08fc85f943788/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74ba745bdc684bc66c669539f487089c7acbcd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ba745bdc684bc66c669539f487089c7acbcd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ba745bdc684bc66c669539f487089c7acbcd77"}], "stats": {"total": 254, "additions": 208, "deletions": 46}, "files": [{"sha": "9d49eb934e4720d6845f1c0d92dac874b6cd4e1d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -1,3 +1,10 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.h (enum lookup_name_fuzzy_kind): Move to name-hint.h.\n+\t(lookup_name_fuzzy): Likewise.  Convert return type from\n+\tconst char * to name_hint.  Add location_t param.\n+\t* name-hint.h: New header.\n+\n 2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/66618"}, {"sha": "3cf4b0aa1046124cd618289c8a4ad265081b86bb", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -991,18 +991,6 @@ extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n extern bool lvalue_p (const_tree);\n \n-enum lookup_name_fuzzy_kind {\n-  /* Names of types.  */\n-  FUZZY_LOOKUP_TYPENAME,\n-\n-  /* Names of function decls.  */\n-  FUZZY_LOOKUP_FUNCTION_NAME,\n-\n-  /* Any name.  */\n-  FUZZY_LOOKUP_NAME\n-};\n-extern const char *lookup_name_fuzzy (tree, enum lookup_name_fuzzy_kind);\n-\n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n extern tree c_build_vec_perm_expr (location_t, tree, tree, tree, bool = true);"}, {"sha": "9f342c8cf4c2142176d4d11cdf8547d9880cb3ca", "filename": "gcc/c-family/name-hint.h", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2Fname-hint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc-family%2Fname-hint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fname-hint.h?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -0,0 +1,121 @@\n+/* Support for offering suggestions for handling unrecognized names.\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_NAME_HINT_H\n+#define GCC_NAME_HINT_H\n+\n+/* This header uses gnu::unique_ptr, but unique-ptr.h can't be directly\n+   included due to issues with macros.  Hence it must be included from\n+   system.h by defining INCLUDE_UNIQUE_PTR in any source file using it.  */\n+\n+#ifndef GNU_UNIQUE_PTR_H\n+# error \"You must define INCLUDE_UNIQUE_PTR before including system.h to use name-hint.h\"\n+#endif\n+\n+enum lookup_name_fuzzy_kind {\n+  /* Names of types.  */\n+  FUZZY_LOOKUP_TYPENAME,\n+\n+  /* Names of function decls.  */\n+  FUZZY_LOOKUP_FUNCTION_NAME,\n+\n+  /* Any name.  */\n+  FUZZY_LOOKUP_NAME\n+};\n+\n+/* A deferred_diagnostic is a wrapper around optional extra diagnostics\n+   that we may want to bundle into a name_hint.\n+\n+   The diagnostic is emitted by the subclass destructor, which should\n+   check that is_suppressed_p () is not true.  */\n+\n+class deferred_diagnostic\n+{\n+ public:\n+  virtual ~deferred_diagnostic () {}\n+\n+  location_t get_location () const { return m_loc; }\n+\n+  /* Call this if the corresponding warning was not emitted,\n+     in which case we should also not emit the deferred_diagnostic.  */\n+  void suppress ()\n+  {\n+    m_suppress = true;\n+  }\n+\n+  bool is_suppressed_p () const { return m_suppress; }\n+\n+ protected:\n+  deferred_diagnostic (location_t loc)\n+  : m_loc (loc), m_suppress (false) {}\n+\n+ private:\n+  location_t m_loc;\n+  bool m_suppress;\n+};\n+\n+/* A name_hint is an optional string suggestion, along with an\n+   optional deferred_diagnostic.\n+   For example:\n+\n+       error: unknown foo named 'bar'\n+\n+   if the SUGGESTION is \"baz\", then one might print:\n+\n+       error: unknown foo named 'bar'; did you mean 'baz'?\n+\n+   and the deferred_diagnostic allows for additional (optional)\n+   diagnostics e.g.:\n+\n+       note: did you check behind the couch?\n+\n+   The deferred_diagnostic is emitted by its destructor, when the\n+   name_hint goes out of scope.  */\n+\n+class name_hint\n+{\n+public:\n+  name_hint () : m_suggestion (NULL), m_deferred () {}\n+\n+  name_hint (const char *suggestion, deferred_diagnostic *deferred)\n+  : m_suggestion (suggestion), m_deferred (deferred)\n+  {\n+  }\n+\n+  const char *suggestion () const { return m_suggestion; }\n+  operator bool () const { return m_suggestion != NULL; }\n+\n+  /* Call this on a name_hint if the corresponding warning was not emitted,\n+     in which case we should also not emit the deferred_diagnostic.  */\n+\n+  void suppress ()\n+  {\n+    if (m_deferred)\n+      m_deferred->suppress ();\n+  }\n+\n+private:\n+  const char *m_suggestion;\n+  gnu::unique_ptr<deferred_diagnostic> m_deferred;\n+};\n+\n+extern name_hint lookup_name_fuzzy (tree, enum lookup_name_fuzzy_kind,\n+\t\t\t\t    location_t);\n+\n+#endif /* ! GCC_NAME_HINT_H */"}, {"sha": "6e193932cba090628469df278f65e7ff95f7e086", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -1,3 +1,20 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n+\tInclude \"c-family/name-hint.h\"\n+\t(implicit_decl_warning): Convert \"hint\" from\n+\tconst char * to name_hint.  Pass location to\n+\tlookup_name_fuzzy.  Suppress any deferred diagnostic if the\n+\twarning was not printed.\n+\t(undeclared_variable): Likewise for \"guessed_id\".\n+\t(lookup_name_fuzzy): Convert return type from const char *\n+\tto name_hint.  Add location_t param.\n+\t* c-parser.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n+\tInclude \"c-family/name-hint.h\"\n+\t(c_parser_declaration_or_fndef): Convert \"hint\" from\n+\tconst char * to name_hint.  Pass location to lookup_name_fuzzy.\n+\t(c_parser_parameter_declaration): Likewise.\n+\n 2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/66618"}, {"sha": "7726476a95ee37a6a12cd3cc130072318addea3d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n    line numbers.  For example, the CONST_DECLs for enum values.  */\n \n #include \"config.h\"\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"target.h\"\n@@ -54,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"spellcheck-tree.h\"\n #include \"gcc-rich-location.h\"\n #include \"asan.h\"\n+#include \"c-family/name-hint.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -3109,20 +3111,20 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n     return;\n \n   bool warned;\n-  const char *hint = NULL;\n+  name_hint hint;\n   if (!olddecl)\n-    hint = lookup_name_fuzzy (id, FUZZY_LOOKUP_FUNCTION_NAME);\n+    hint = lookup_name_fuzzy (id, FUZZY_LOOKUP_FUNCTION_NAME, loc);\n \n   if (flag_isoc99)\n     {\n       if (hint)\n \t{\n \t  gcc_rich_location richloc (loc);\n-\t  richloc.add_fixit_replace (hint);\n+\t  richloc.add_fixit_replace (hint.suggestion ());\n \t  warned = pedwarn (&richloc, OPT_Wimplicit_function_declaration,\n \t\t\t    \"implicit declaration of function %qE;\"\n \t\t\t    \" did you mean %qs?\",\n-\t\t\t    id, hint);\n+\t\t\t    id, hint.suggestion ());\n \t}\n       else\n \twarned = pedwarn (loc, OPT_Wimplicit_function_declaration,\n@@ -3131,18 +3133,21 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n   else if (hint)\n     {\n       gcc_rich_location richloc (loc);\n-      richloc.add_fixit_replace (hint);\n+      richloc.add_fixit_replace (hint.suggestion ());\n       warned = warning_at\n \t(&richloc, OPT_Wimplicit_function_declaration,\n \t G_(\"implicit declaration of function %qE; did you mean %qs?\"),\n-\t id, hint);\n+\t id, hint.suggestion ());\n     }\n   else\n     warned = warning_at (loc, OPT_Wimplicit_function_declaration,\n \t\t\t G_(\"implicit declaration of function %qE\"), id);\n \n   if (olddecl && warned)\n     locate_old_decl (olddecl);\n+\n+  if (!warned)\n+    hint.suppress ();\n }\n \n /* This function represents mapping of a function code FCODE\n@@ -3466,15 +3471,15 @@ undeclared_variable (location_t loc, tree id)\n \n   if (current_function_decl == NULL_TREE)\n     {\n-      const char *guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME);\n+      name_hint guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME, loc);\n       if (guessed_id)\n \t{\n \t  gcc_rich_location richloc (loc);\n-\t  richloc.add_fixit_replace (guessed_id);\n+\t  richloc.add_fixit_replace (guessed_id.suggestion ());\n \t  error_at (&richloc,\n \t\t    \"%qE undeclared here (not in a function);\"\n \t\t    \" did you mean %qs?\",\n-\t\t    id, guessed_id);\n+\t\t    id, guessed_id.suggestion ());\n \t}\n       else\n \terror_at (loc, \"%qE undeclared here (not in a function)\", id);\n@@ -3484,15 +3489,15 @@ undeclared_variable (location_t loc, tree id)\n     {\n       if (!objc_diagnose_private_ivar (id))\n \t{\n-\t  const char *guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME);\n+\t  name_hint guessed_id = lookup_name_fuzzy (id, FUZZY_LOOKUP_NAME, loc);\n \t  if (guessed_id)\n \t    {\n \t      gcc_rich_location richloc (loc);\n-\t      richloc.add_fixit_replace (guessed_id);\n+\t      richloc.add_fixit_replace (guessed_id.suggestion ());\n \t      error_at (&richloc,\n \t\t\t\"%qE undeclared (first use in this function);\"\n \t\t\t\" did you mean %qs?\",\n-\t\t\tid, guessed_id);\n+\t\t\tid, guessed_id.suggestion ());\n \t    }\n \t  else\n \t    error_at (loc, \"%qE undeclared (first use in this function)\", id);\n@@ -4003,8 +4008,8 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n    It also looks for start_typename keywords, to detect \"singed\" vs \"signed\"\n    typos.  */\n \n-const char *\n-lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n+name_hint\n+lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n@@ -4094,9 +4099,9 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n \n   tree best = bm.get_best_meaningful_candidate ();\n   if (best)\n-    return IDENTIFIER_POINTER (best);\n+    return name_hint (IDENTIFIER_POINTER (best), NULL);\n   else\n-    return NULL;\n+    return name_hint (NULL, NULL);\n }\n \n \f"}, {"sha": "4afa9ceb5e94df4b84359b4e26d196099430cb0b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n    location rather than implicitly using input_location.  */\n \n #include \"config.h\"\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"target.h\"\n@@ -65,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"read-rtl-function.h\"\n #include \"run-rtl-passes.h\"\n #include \"intl.h\"\n+#include \"c-family/name-hint.h\"\n \n /* We need to walk over decls with incomplete struct/union/enum types\n    after parsing the whole translation unit.\n@@ -1808,13 +1810,14 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t}\n       else\n \t{\n-\t  const char *hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_TYPENAME);\n+\t  name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_TYPENAME,\n+\t\t\t\t\t      here);\n \t  if (hint)\n \t    {\n-\t      richloc.add_fixit_replace (hint);\n+\t      richloc.add_fixit_replace (hint.suggestion ());\n \t      error_at (&richloc,\n \t\t\t\"unknown type name %qE; did you mean %qs?\",\n-\t\t\tname, hint);\n+\t\t\tname, hint.suggestion ());\n \t    }\n \t  else\n \t    error_at (here, \"unknown type name %qE\", name);\n@@ -4066,15 +4069,16 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n       c_parser_set_source_position_from_token (token);\n       if (c_parser_next_tokens_start_typename (parser, cla_prefer_type))\n \t{\n-\t  const char *hint = lookup_name_fuzzy (token->value,\n-\t\t\t\t\t\tFUZZY_LOOKUP_TYPENAME);\n+\t  name_hint hint = lookup_name_fuzzy (token->value,\n+\t\t\t\t\t      FUZZY_LOOKUP_TYPENAME,\n+\t\t\t\t\t      token->location);\n \t  if (hint)\n \t    {\n \t      gcc_rich_location richloc (token->location);\n-\t      richloc.add_fixit_replace (hint);\n+\t      richloc.add_fixit_replace (hint.suggestion ());\n \t      error_at (&richloc,\n \t\t\t\"unknown type name %qE; did you mean %qs?\",\n-\t\t\ttoken->value, hint);\n+\t\t\ttoken->value, hint.suggestion ());\n \t    }\n \t  else\n \t    error_at (token->location, \"unknown type name %qE\", token->value);"}, {"sha": "6a690a1f06eb189bc5c63ebe7ecf4668ca1170b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -1,3 +1,18 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* name-lookup.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n+\tInclude \"c-family/name-hint.h\"\n+\t(suggest_alternatives_for): Convert \"fuzzy_name\" from const char *\n+\tto name_hint, and rename to \"hint\".  Pass location to\n+\tlookup_name_fuzzy.\n+\t(lookup_name_fuzzy): Convert return type from const char *\n+\tto name_hint.  Add location_t param.\n+\t* parser.c: Define INCLUDE_UNIQUE_PTR before including system.h.\n+\tInclude \"c-family/name-hint.h\"\n+\t(cp_parser_diagnose_invalid_type_name): Convert\n+\t\"suggestion\" from const char * to name_hint, and rename to \"hint\".\n+\tPass location to lookup_name_fuzzy.\n+\n 2017-11-20  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/82878"}, {"sha": "f7da6a290784cc896f1c9374755fd30c678ca6ff", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n@@ -32,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-rich-location.h\"\n #include \"spellcheck-tree.h\"\n #include \"parser.h\"\n+#include \"c-family/name-hint.h\"\n \n static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n@@ -5371,13 +5373,14 @@ suggest_alternatives_for (location_t location, tree name,\n     }\n   else if (!suggest_misspellings)\n     ;\n-  else if (const char *fuzzy = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME))\n+  else if (name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME,\n+\t\t\t\t\t       location))\n     {\n       /* Show a spelling correction.  */\n       gcc_rich_location richloc (location);\n \n-      richloc.add_fixit_replace (fuzzy);\n-      inform (&richloc, \"suggested alternative: %qs\", fuzzy);\n+      richloc.add_fixit_replace (hint.suggestion ());\n+      inform (&richloc, \"suggested alternative: %qs\", hint.suggestion ());\n     }\n }\n \n@@ -5628,8 +5631,8 @@ consider_binding_level (tree name, best_match <tree, const char *> &bm,\n    macro names, returning the best match as a const char *, or NULL if\n    no reasonable match is found.  */\n \n-const char *\n-lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n+name_hint\n+lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n@@ -5683,7 +5686,7 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n       bm.consider (IDENTIFIER_POINTER (resword_identifier));\n     }\n \n-  return bm.get_best_meaningful_candidate ();\n+  return name_hint (bm.get_best_meaningful_candidate (), NULL);\n }\n \n /* Subroutine of outer_binding."}, {"sha": "b3bdd38cc21dc603d94d5b8ba2cf49bfd0819739", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7a259b817ea4d1eae117a426a08fc85f943788/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6c7a259b817ea4d1eae117a426a08fc85f943788", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_UNIQUE_PTR\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n@@ -43,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-cilkplus.h\"\n #include \"gcc-rich-location.h\"\n #include \"tree-iterator.h\"\n+#include \"c-family/name-hint.h\"\n \n \f\n /* The lexer.  */\n@@ -3287,16 +3289,16 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n   else if (!parser->scope)\n     {\n       /* Issue an error message.  */\n-      const char *suggestion = NULL;\n+      name_hint hint;\n       if (TREE_CODE (id) == IDENTIFIER_NODE)\n-        suggestion = lookup_name_fuzzy (id, FUZZY_LOOKUP_TYPENAME);\n-      if (suggestion)\n+\thint = lookup_name_fuzzy (id, FUZZY_LOOKUP_TYPENAME, location);\n+      if (hint)\n \t{\n \t  gcc_rich_location richloc (location);\n-\t  richloc.add_fixit_replace (suggestion);\n+\t  richloc.add_fixit_replace (hint.suggestion ());\n \t  error_at (&richloc,\n \t\t    \"%qE does not name a type; did you mean %qs?\",\n-\t\t    id, suggestion);\n+\t\t    id, hint.suggestion ());\n \t}\n       else\n \terror_at (location, \"%qE does not name a type\", id);"}]}