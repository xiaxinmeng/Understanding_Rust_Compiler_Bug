{"sha": "8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlZDc2MTc5NjU5Y2E4NDMzYTJmYzhmYmNmNTIwZmYwYjZjZDlmZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-02-26T21:59:00Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:57Z"}, "message": "AVX512FP16: Add vreduceph/vreducesh/vrndscaleph/vrndscalesh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_reduce_ph):\n\tNew intrinsic.\n\t(_mm512_mask_reduce_ph): Likewise.\n\t(_mm512_maskz_reduce_ph): Likewise.\n\t(_mm512_reduce_round_ph): Likewise.\n\t(_mm512_mask_reduce_round_ph): Likewise.\n\t(_mm512_maskz_reduce_round_ph): Likewise.\n\t(_mm_reduce_sh): Likewise.\n\t(_mm_mask_reduce_sh): Likewise.\n\t(_mm_maskz_reduce_sh): Likewise.\n\t(_mm_reduce_round_sh): Likewise.\n\t(_mm_mask_reduce_round_sh): Likewise.\n\t(_mm_maskz_reduce_round_sh): Likewise.\n\t(_mm512_roundscale_ph): Likewise.\n\t(_mm512_mask_roundscale_ph): Likewise.\n\t(_mm512_maskz_roundscale_ph): Likewise.\n\t(_mm512_roundscale_round_ph): Likewise.\n\t(_mm512_mask_roundscale_round_ph): Likewise.\n\t(_mm512_maskz_roundscale_round_ph): Likewise.\n\t(_mm_roundscale_sh): Likewise.\n\t(_mm_mask_roundscale_sh): Likewise.\n\t(_mm_maskz_roundscale_sh): Likewise.\n\t(_mm_roundscale_round_sh): Likewise.\n\t(_mm_mask_roundscale_round_sh): Likewise.\n\t(_mm_maskz_roundscale_round_sh): Likewise.\n\t* config/i386/avx512fp16vlintrin.h: (_mm_reduce_ph):\n\tNew intrinsic.\n\t(_mm_mask_reduce_ph): Likewise.\n\t(_mm_maskz_reduce_ph): Likewise.\n\t(_mm256_reduce_ph): Likewise.\n\t(_mm256_mask_reduce_ph): Likewise.\n\t(_mm256_maskz_reduce_ph): Likewise.\n\t(_mm_roundscale_ph): Likewise.\n\t(_mm_mask_roundscale_ph): Likewise.\n\t(_mm_maskz_roundscale_ph): Likewise.\n\t(_mm256_roundscale_ph): Likewise.\n\t(_mm256_mask_roundscale_ph): Likewise.\n\t(_mm256_maskz_roundscale_ph): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t(ix86_expand_round_builtin): Ditto.\n\t* config/i386/sse.md (<mask_codefor>reducep<mode><mask_name>):\n\tRenamed to ...\n\t(<mask_codefor>reducep<mode><mask_name><round_saeonly_name>):\n\t... this, and adjust for round operands.\n\t(reduces<mode><mask_scalar_name>): Likewise, with ...\n\t(reduces<mode><mask_scalar_name><round_saeonly_scalar_name):\n\t... this.\n\t(<avx512>_rndscale<mode><mask_name><round_saeonly_name>):\n\tAdjust for HF vector modes.\n\t(avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\tDitto.\n\t(*avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "f12f65d78e55be4a9654e5db9aeb799095ebc4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f12f65d78e55be4a9654e5db9aeb799095ebc4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1"}], "stats": {"total": 668, "additions": 646, "deletions": 22}, "files": [{"sha": "8c2c9b28987d7d73f4255e48598759785251d215", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 359, "deletions": 0, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -1623,6 +1623,365 @@ _mm_maskz_scalef_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vreduceph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_ph (__m512h __A, int __B)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    (__mmask32) -1,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_ph (__m512h __A, __mmask32 __B, __m512h __C, int __D)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_reduce_ph (__mmask32 __A, __m512h __B, int __C)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    __A,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_round_ph (__m512h __A, int __B, const int __C)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t     int __D, const int __E)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t    __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_reduce_round_ph (__mmask32 __A, __m512h __B, int __C,\n+\t\t\t      const int __D)\n+{\n+  return __builtin_ia32_vreduceph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    __A, __D);\n+}\n+\n+#else\n+#define _mm512_reduce_ph(A, B)\t\t\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (__mmask32)-1,\t\t\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_mask_reduce_ph(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((C), (D), (A), (B),\t\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_maskz_reduce_ph(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (A), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_reduce_round_ph(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_reduce_round_ph(A, B, C, D, E)\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_reduce_round_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vreduceph_v32hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (A), (D)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vreducesh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_sh (__m128h __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__A, __B, __C,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_reduce_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t    __m128h __D, int __E)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__C, __D, __E, __A, __B,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_reduce_sh (__mmask8 __A, __m128h __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__B, __C, __D,\n+\t\t\t\t\t\t   _mm_setzero_ph (), __A,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_round_sh (__m128h __A, __m128h __B, int __C, const int __D)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__A, __B, __C,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) -1, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_reduce_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t  __m128h __D, int __E, const int __F)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__C, __D, __E, __A,\n+\t\t\t\t\t\t   __B, __F);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_reduce_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t   int __D, const int __E)\n+{\n+  return __builtin_ia32_vreducesh_v8hf_mask_round (__B, __C, __D,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   __A, __E);\n+}\n+\n+#else\n+#define _mm_reduce_sh(A, B, C)\t\t\t\t\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((A), (B), (C),\t\t\\\n+\t\t\t\t\t     _mm_setzero_ph (),\t\\\n+\t\t\t\t\t     (__mmask8)-1,\t\t\\\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_reduce_sh(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((C), (D), (E), (A), (B),\t\\\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_reduce_sh(A, B, C, D)\t\t\t\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((B), (C), (D),\t\t\\\n+\t\t\t\t\t     _mm_setzero_ph (),\t\\\n+\t\t\t\t\t     (A), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_reduce_round_sh(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((A), (B), (C),\t\\\n+\t\t\t\t\t     _mm_setzero_ph (),\t\\\n+\t\t\t\t\t     (__mmask8)-1, (D)))\n+\n+#define _mm_mask_reduce_round_sh(A, B, C, D, E, F)\t\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((C), (D), (E), (A), (B), (F)))\n+\n+#define _mm_maskz_reduce_round_sh(A, B, C, D, E)\t\t\\\n+  (__builtin_ia32_vreducesh_v8hf_mask_round ((B), (C), (D),\t\\\n+\t\t\t\t\t     _mm_setzero_ph (),\t\\\n+\t\t\t\t\t     (A), (E)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vrndscaleph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_roundscale_ph (__m512h __A, int __B)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t      _mm512_setzero_ph (),\n+\t\t\t\t\t\t      (__mmask32) -1,\n+\t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_roundscale_ph (__m512h __A, __mmask32 __B,\n+\t\t\t\t __m512h __C, int __D)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_roundscale_ph (__mmask32 __A, __m512h __B, int __C)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t      _mm512_setzero_ph (),\n+\t\t\t\t\t\t      __A,\n+\t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_roundscale_round_ph (__m512h __A, int __B, const int __C)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t      _mm512_setzero_ph (),\n+\t\t\t\t\t\t      (__mmask32) -1,\n+\t\t\t\t\t\t      __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_roundscale_round_ph (__m512h __A, __mmask32 __B,\n+\t\t\t\t __m512h __C, int __D, const int __E)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__C, __D, __A,\n+\t\t\t\t\t\t      __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_roundscale_round_ph (__mmask32 __A, __m512h __B, int __C,\n+\t\t\t\t  const int __D)\n+{\n+  return __builtin_ia32_vrndscaleph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t      _mm512_setzero_ph (),\n+\t\t\t\t\t\t      __A, __D);\n+}\n+\n+#else\n+#define _mm512_roundscale_ph(A, B) \\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t_mm512_setzero_ph (),\t\\\n+\t\t\t\t\t\t(__mmask32)-1,\t\t\\\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_mask_roundscale_ph(A, B, C, D) \\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((C), (D), (A), (B),\t\\\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_maskz_roundscale_ph(A, B, C) \\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t_mm512_setzero_ph (),\t\\\n+\t\t\t\t\t\t(A),\t\t\t\\\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION))\n+#define _mm512_roundscale_round_ph(A, B, C) \\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t_mm512_setzero_ph (),\t\\\n+\t\t\t\t\t\t(__mmask32)-1, (C)))\n+\n+#define _mm512_mask_roundscale_round_ph(A, B, C, D, E)\t\t\t\\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_roundscale_round_ph(A, B, C, D) \\\n+  (__builtin_ia32_vrndscaleph_v32hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t_mm512_setzero_ph (),\t\\\n+\t\t\t\t\t\t(A), (D)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vrndscalesh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_sh (__m128h __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__A, __B, __C,\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask8) -1,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t__m128h __D, int __E)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__C, __D, __E, __A, __B,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_sh (__mmask8 __A, __m128h __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__B, __C, __D,\n+\t\t\t\t\t\t     _mm_setzero_ph (), __A,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_round_sh (__m128h __A, __m128h __B, int __C, const int __D)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__A, __B, __C,\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask8) -1,\n+\t\t\t\t\t\t     __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t      __m128h __D, int __E, const int __F)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__C, __D, __E,\n+\t\t\t\t\t\t     __A, __B, __F);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t       int __D, const int __E)\n+{\n+  return __builtin_ia32_vrndscalesh_v8hf_mask_round (__B, __C, __D,\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     __A, __E);\n+}\n+\n+#else\n+#define _mm_roundscale_sh(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((A), (B), (C),\t\t\\\n+\t\t\t\t\t       _mm_setzero_ph (),\t\\\n+\t\t\t\t\t       (__mmask8)-1, \\\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_roundscale_sh(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((C), (D), (E), (A), (B), \\\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_roundscale_sh(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((B), (C), (D),\t\t\\\n+\t\t\t\t\t       _mm_setzero_ph (),\t\\\n+\t\t\t\t\t       (A), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_roundscale_round_sh(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((A), (B), (C),\t\t\\\n+\t\t\t\t\t       _mm_setzero_ph (),\t\\\n+\t\t\t\t\t       (__mmask8)-1, (D)))\n+\n+#define _mm_mask_roundscale_round_sh(A, B, C, D, E, F)\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((C), (D), (E), (A), (B), (F)))\n+\n+#define _mm_maskz_roundscale_round_sh(A, B, C, D, E)\t\t\t\\\n+  (__builtin_ia32_vrndscalesh_v8hf_mask_round ((B), (C), (D),\t\t\\\n+\t\t\t\t\t       _mm_setzero_ph (),\t\\\n+\t\t\t\t\t       (A), (E)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "20b6716aa00299458d3ea78aa35f8481b4e14d2d", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -548,6 +548,159 @@ _mm256_maskz_scalef_ph (__mmask16 __A, __m256h __B, __m256h __C)\n \t\t\t\t\t      __A);\n }\n \n+/* Intrinsics vreduceph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_ph (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vreduceph_v8hf_mask (__A, __B,\n+\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_reduce_ph (__m128h __A, __mmask8 __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vreduceph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_reduce_ph (__mmask8 __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vreduceph_v8hf_mask (__B, __C,\n+\t\t\t\t\t     _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_reduce_ph (__m256h __A, int __B)\n+{\n+  return __builtin_ia32_vreduceph_v16hf_mask (__A, __B,\n+\t\t\t\t\t      _mm256_setzero_ph (),\n+\t\t\t\t\t      (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_reduce_ph (__m256h __A, __mmask16 __B, __m256h __C, int __D)\n+{\n+  return __builtin_ia32_vreduceph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_reduce_ph (__mmask16 __A, __m256h __B, int __C)\n+{\n+  return __builtin_ia32_vreduceph_v16hf_mask (__B, __C,\n+\t\t\t\t\t      _mm256_setzero_ph (),\n+\t\t\t\t\t      __A);\n+}\n+\n+#else\n+#define _mm_reduce_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v8hf_mask ((A), (B),\\\n+\t\t\t\t       _mm_setzero_ph (),\t\\\n+\t\t\t\t       ((__mmask8)-1)))\n+\n+#define _mm_mask_reduce_ph(A,  B,  C, D)\t\t\\\n+  (__builtin_ia32_vreduceph_v8hf_mask ((C), (D), (A), (B)))\n+\n+#define _mm_maskz_reduce_ph(A,  B, C)\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v8hf_mask ((B), (C), _mm_setzero_ph (), (A)))\n+\n+#define _mm256_reduce_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v16hf_mask ((A), (B),\\\n+\t\t\t\t\t_mm256_setzero_ph (),\t\\\n+\t\t\t\t\t((__mmask16)-1)))\n+\n+#define _mm256_mask_reduce_ph(A, B, C, D)\t\t\\\n+  (__builtin_ia32_vreduceph_v16hf_mask ((C), (D), (A), (B)))\n+\n+#define _mm256_maskz_reduce_ph(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vreduceph_v16hf_mask ((B), (C), _mm256_setzero_ph (), (A)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vrndscaleph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_ph (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vrndscaleph_v8hf_mask (__A, __B,\n+\t\t\t\t\t       _mm_setzero_ph (),\n+\t\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_ph (__m128h __A, __mmask8 __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vrndscaleph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_ph (__mmask8 __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vrndscaleph_v8hf_mask (__B, __C,\n+\t\t\t\t\t       _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_roundscale_ph (__m256h __A, int __B)\n+{\n+  return __builtin_ia32_vrndscaleph_v16hf_mask (__A, __B,\n+\t\t\t\t\t\t_mm256_setzero_ph (),\n+\t\t\t\t\t\t(__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_roundscale_ph (__m256h __A, __mmask16 __B, __m256h __C,\n+\t\t\t   int __D)\n+{\n+  return __builtin_ia32_vrndscaleph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_roundscale_ph (__mmask16 __A, __m256h __B, int __C)\n+{\n+  return __builtin_ia32_vrndscaleph_v16hf_mask (__B, __C,\n+\t\t\t\t\t\t_mm256_setzero_ph (),\n+\t\t\t\t\t\t__A);\n+}\n+\n+#else\n+#define _mm_roundscale_ph(A, B) \\\n+  (__builtin_ia32_vrndscaleph_v8hf_mask ((A), (B), _mm_setzero_ph (),\t\\\n+\t\t\t\t\t ((__mmask8)-1)))\n+\n+#define _mm_mask_roundscale_ph(A, B, C, D) \\\n+  (__builtin_ia32_vrndscaleph_v8hf_mask ((C), (D), (A), (B)))\n+\n+#define _mm_maskz_roundscale_ph(A, B, C) \\\n+  (__builtin_ia32_vrndscaleph_v8hf_mask ((B), (C), _mm_setzero_ph (), (A)))\n+\n+#define _mm256_roundscale_ph(A, B) \\\n+  (__builtin_ia32_vrndscaleph_v16hf_mask ((A), (B),\t      \\\n+\t\t\t\t\t _mm256_setzero_ph(), \\\n+\t\t\t\t\t  ((__mmask16)-1)))\n+\n+#define _mm256_mask_roundscale_ph(A, B, C, D) \\\n+  (__builtin_ia32_vrndscaleph_v16hf_mask ((C), (D), (A), (B)))\n+\n+#define _mm256_maskz_roundscale_ph(A, B, C) \\\n+  (__builtin_ia32_vrndscaleph_v16hf_mask ((B), (C),\t\t\t\\\n+\t\t\t\t\t  _mm256_setzero_ph (), (A)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "aee97ffb5e3aee8f661534e6af63ee7bb1310bcd", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -1307,12 +1307,15 @@ DEF_FUNCTION_TYPE (V8HF, V8HI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, INT, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, UHI)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, INT, V16HF, UHI)\n DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI)\n@@ -1322,3 +1325,4 @@ DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, INT, V32HF, USI, INT)"}, {"sha": "66c29cc8efa7e53738b2cae027cb7d1bfd7eb753", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -2814,6 +2814,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rcpv32hf2_mask, \"__bu\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmrcpv8hf2_mask, \"__builtin_ia32_vrcpsh_v8hf_mask\", IX86_BUILTIN_VRCPSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_scalefv8hf_mask, \"__builtin_ia32_vscalefph_v8hf_mask\", IX86_BUILTIN_VSCALEFPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_scalefv16hf_mask, \"__builtin_ia32_vscalefph_v16hf_mask\", IX86_BUILTIN_VSCALEFPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv8hf_mask, \"__builtin_ia32_vreduceph_v8hf_mask\", IX86_BUILTIN_VREDUCEPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv16hf_mask, \"__builtin_ia32_vreduceph_v16hf_mask\", IX86_BUILTIN_VREDUCEPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rndscalev8hf_mask, \"__builtin_ia32_vrndscaleph_v8hf_mask\", IX86_BUILTIN_VRNDSCALEPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_rndscalev16hf_mask, \"__builtin_ia32_vrndscaleph_v16hf_mask\", IX86_BUILTIN_VRNDSCALEPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3033,6 +3037,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_sqrtv32hf2_mask_round\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsqrtv8hf2_mask_round, \"__builtin_ia32_vsqrtsh_v8hf_mask_round\", IX86_BUILTIN_VSQRTSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_scalefv32hf_mask_round, \"__builtin_ia32_vscalefph_v32hf_mask_round\", IX86_BUILTIN_VSCALEFPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmscalefv8hf_mask_round, \"__builtin_ia32_vscalefsh_v8hf_mask_round\", IX86_BUILTIN_VSCALEFSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv32hf_mask_round, \"__builtin_ia32_vreduceph_v32hf_mask_round\", IX86_BUILTIN_VREDUCEPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_INT_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducesv8hf_mask_round, \"__builtin_ia32_vreducesh_v8hf_mask_round\", IX86_BUILTIN_VREDUCESH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_rndscalev32hf_mask_round, \"__builtin_ia32_vrndscaleph_v32hf_mask_round\", IX86_BUILTIN_VRNDSCALEPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_INT_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_rndscalev8hf_mask_round, \"__builtin_ia32_vrndscalesh_v8hf_mask_round\", IX86_BUILTIN_VRNDSCALESH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "59facfe1c212475e5691d1bf02e4ee2862afe9e2", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -10061,6 +10061,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_V16SF_INT_V16SF_UHI:\n     case V16HI_FTYPE_V16SF_INT_V16HI_UHI:\n     case V16SI_FTYPE_V16SI_INT_V16SI_UHI:\n+    case V16HF_FTYPE_V16HF_INT_V16HF_UHI:\n+    case V8HF_FTYPE_V8HF_INT_V8HF_UQI:\n     case V4SI_FTYPE_V16SI_INT_V4SI_UQI:\n     case V4DI_FTYPE_V8DI_INT_V4DI_UQI:\n     case V4DF_FTYPE_V8DF_INT_V4DF_UQI:\n@@ -10709,6 +10711,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT:\n       nargs = 5;\n       break;\n+    case V32HF_FTYPE_V32HF_INT_V32HF_USI_INT:\n     case V16SF_FTYPE_V16SF_INT_V16SF_HI_INT:\n     case V8DF_FTYPE_V8DF_INT_V8DF_QI_INT:\n     case V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT:\n@@ -10731,6 +10734,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT:\n+    case V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT:\n       nargs = 6;\n       nargs_constant = 4;\n       break;"}, {"sha": "9f4156c9dcf3c60db9592556db92f9b7a9469d30", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -3257,28 +3257,28 @@\n })\n \n (define_insn \"<mask_codefor>reducep<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_AVX512VL\n-\t  [(match_operand:VF_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VFH_AVX512VL\n+\t  [(match_operand:VFH_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_REDUCE))]\n-  \"TARGET_AVX512DQ\"\n+  \"TARGET_AVX512DQ || (VALID_AVX512FP16_REG_MODE (<MODE>mode))\"\n   \"vreduce<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"reduces<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (unspec:VFH_128\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_REDUCE)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"TARGET_AVX512DQ\"\n+  \"TARGET_AVX512DQ || (VALID_AVX512FP16_REG_MODE (<MODE>mode))\"\n   \"vreduce<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n@@ -10794,9 +10794,9 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<avx512>_rndscale<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_AVX512VL\n-\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VFH_AVX512VL\n+\t  [(match_operand:VFH_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_AVX512F\"\n@@ -10806,13 +10806,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (unspec:VF_128\n-\t    [(match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (unspec:VFH_128\n+\t    [(match_operand:VFH_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_ROUND)\n-\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (match_operand:VFH_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n   \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\"\n@@ -10821,14 +10821,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_rndscale<mode><round_saeonly_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_duplicate:VF_128\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_duplicate:VFH_128\n \t    (unspec:<ssescalarmode>\n \t      [(match_operand:<ssescalarmode> 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t       (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t      UNSPEC_ROUND))\n-          (match_operand:VF_128 1 \"register_operand\" \"v\")\n+          (match_operand:VFH_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n   \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\""}, {"sha": "4c8e54e4c2a189ec8244f697a12f9a61e238b513", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -705,6 +705,14 @@\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n #define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vreduceph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vreduceph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vreduceph_v8hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreduceph_v16hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreducesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vreducesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_vrndscaleph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vrndscaleph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "044d427c9325b15cc1935f6ae844c38415d36f2d", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -722,6 +722,14 @@\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n #define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vreduceph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vreduceph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vreduceph_v8hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreduceph_v16hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreducesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vreducesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_vrndscaleph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vrndscaleph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "b7ffdf7e1dff55b5f504e86360340d2c4d99df31", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -671,6 +671,14 @@ test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n \n /* avx512fp16intrin.h */\n test_1 (_mm512_sqrt_round_ph, __m512h, __m512h, 8)\n+test_1 (_mm_reduce_ph, __m128h, __m128h, 123)\n+test_1 (_mm256_reduce_ph, __m256h, __m256h, 123)\n+test_1 (_mm512_reduce_ph, __m512h, __m512h, 123)\n+test_1 (_mm_roundscale_ph, __m128h, __m128h, 123)\n+test_1 (_mm256_roundscale_ph, __m256h, __m256h, 123)\n+test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n+test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n+test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -689,9 +697,21 @@ test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_scalef_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm_scalef_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_maskz_reduce_ph, __m128h, __mmask8, __m128h, 123)\n+test_2 (_mm256_maskz_reduce_ph, __m256h, __mmask16, __m256h, 123)\n+test_2 (_mm512_maskz_reduce_ph, __m512h, __mmask32, __m512h, 123)\n+test_2 (_mm_reduce_sh, __m128h, __m128h, __m128h, 123)\n+test_2 (_mm_maskz_roundscale_ph, __m128h, __mmask8, __m128h, 123)\n+test_2 (_mm256_maskz_roundscale_ph, __m256h, __mmask16, __m256h, 123)\n+test_2 (_mm512_maskz_roundscale_ph, __m512h, __mmask32, __m512h, 123)\n+test_2 (_mm_roundscale_sh, __m128h, __m128h, __m128h, 123)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n+test_2x (_mm512_maskz_reduce_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n+test_2x (_mm512_maskz_roundscale_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n+test_2x (_mm_reduce_round_sh, __m128h, __m128h, __m128h, 123, 8)\n+test_2x (_mm_roundscale_round_sh, __m128h, __m128h, __m128h, 123, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -709,8 +729,20 @@ test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_scalef_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm_maskz_scalef_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_mask_reduce_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n+test_3 (_mm256_mask_reduce_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n+test_3 (_mm512_mask_reduce_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n+test_3 (_mm_maskz_reduce_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_3 (_mm_mask_roundscale_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n+test_3 (_mm256_mask_roundscale_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n+test_3 (_mm512_mask_roundscale_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n+test_3 (_mm_maskz_roundscale_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n+test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n+test_3x (_mm512_mask_roundscale_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n+test_3x (_mm_maskz_reduce_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_3x (_mm_maskz_roundscale_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -726,6 +758,10 @@ test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm_mask_scalef_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "5dbe8cba5ea80c32883774b47ce1b864b6110ca8", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -776,6 +776,14 @@ test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 8)\n \n /* avx512fp16intrin.h */\n test_1 (_mm512_sqrt_round_ph, __m512h, __m512h, 8)\n+test_1 (_mm_reduce_ph, __m128h, __m128h, 123)\n+test_1 (_mm256_reduce_ph, __m256h, __m256h, 123)\n+test_1 (_mm512_reduce_ph, __m512h, __m512h, 123)\n+test_1 (_mm_roundscale_ph, __m128h, __m128h, 123)\n+test_1 (_mm256_roundscale_ph, __m256h, __m256h, 123)\n+test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n+test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n+test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -793,9 +801,21 @@ test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_scalef_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_maskz_reduce_ph, __m128h, __mmask8, __m128h, 123)\n+test_2 (_mm256_maskz_reduce_ph, __m256h, __mmask16, __m256h, 123)\n+test_2 (_mm512_maskz_reduce_ph, __m512h, __mmask32, __m512h, 123)\n+test_2 (_mm_reduce_sh, __m128h, __m128h, __m128h, 123)\n+test_2 (_mm_maskz_roundscale_ph, __m128h, __mmask8, __m128h, 123)\n+test_2 (_mm256_maskz_roundscale_ph, __m256h, __mmask16, __m256h, 123)\n+test_2 (_mm512_maskz_roundscale_ph, __m512h, __mmask32, __m512h, 123)\n+test_2 (_mm_roundscale_sh, __m128h, __m128h, __m128h, 123)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n+test_2x (_mm512_maskz_reduce_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n+test_2x (_mm512_maskz_roundscale_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n+test_2x (_mm_reduce_round_sh, __m128h, __m128h, __m128h, 123, 8)\n+test_2x (_mm_roundscale_round_sh, __m128h, __m128h, __m128h, 123, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -812,8 +832,20 @@ test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_scalef_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_mask_reduce_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n+test_3 (_mm256_mask_reduce_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n+test_3 (_mm512_mask_reduce_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n+test_3 (_mm_maskz_reduce_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_3 (_mm_mask_roundscale_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n+test_3 (_mm256_mask_roundscale_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n+test_3 (_mm512_mask_roundscale_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n+test_3 (_mm_maskz_roundscale_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n+test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n+test_3x (_mm512_mask_roundscale_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n+test_3x (_mm_maskz_reduce_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_3x (_mm_maskz_roundscale_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -828,6 +860,10 @@ test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "2d968f07bc865dbcbbe13bd5c86649ef6a81f728", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "patch": "@@ -723,6 +723,14 @@\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n #define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vreduceph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vreduceph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vreduceph_v8hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreduceph_v16hf_mask(A, B, C, D) __builtin_ia32_vreduceph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vreducesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vreducesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_vrndscaleph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vrndscaleph_v32hf_mask_round(A, 123, C, D, 8)\n+#define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n+#define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}]}