{"sha": "5312fa0fd95aab112abe40f2a5cdb70a76e89fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxMmZhMGZkOTVhYWIxMTJhYmU0MGYyYTVjZGI3MGE3NmU4OWZiZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T18:23:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T18:41:02Z"}, "message": "Raw tree accessors\n\nHere are the couple of raw accessors I make use of in the module streaming.\n\n\tgcc/\n\t* tree.h (DECL_ALIGN_RAW): New.\n\t(DECL_ALIGN): Use it.\n\t(DECL_WARN_IF_NOT_ALIGN_RAW): New.\n\t(DECL_WARN_IF_NOT_ALIGN): Use it.\n\t(SET_DECL_WARN_IF_NOT_ALIGN): Likewise.", "tree": {"sha": "209a06325457a073b8809143b9bd90d48a3c98e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/209a06325457a073b8809143b9bd90d48a3c98e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b6e17b3f753980527721aa8e949d2481b2560b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b6e17b3f753980527721aa8e949d2481b2560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b6e17b3f753980527721aa8e949d2481b2560b"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "b44039f61ffca7ccec9971bf779859a6d18e58fb", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5312fa0fd95aab112abe40f2a5cdb70a76e89fbf/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5312fa0fd95aab112abe40f2a5cdb70a76e89fbf", "patch": "@@ -2529,25 +2529,28 @@ extern tree vector_element_bits_tree (const_tree);\n #define DECL_SIZE(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size)\n /* Likewise for the size in bytes.  */\n #define DECL_SIZE_UNIT(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size_unit)\n+#define DECL_ALIGN_RAW(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)\n /* Returns the alignment required for the datum, in bits.  It must\n    be a power of two, but an \"alignment\" of zero is supported\n    (e.g. as \"uninitialized\" sentinel).  */\n-#define DECL_ALIGN(NODE) \\\n-    (DECL_COMMON_CHECK (NODE)->decl_common.align \\\n-     ? ((unsigned)1) << ((NODE)->decl_common.align - 1) : 0)\n+#define DECL_ALIGN(NODE)\t\t\t\t\t\\\n+  (DECL_ALIGN_RAW (NODE)\t\t\t\t\t\\\n+   ? ((unsigned)1) << (DECL_ALIGN_RAW (NODE) - 1) : 0)\n /* Specify that DECL_ALIGN(NODE) is X.  */\n #define SET_DECL_ALIGN(NODE, X) \\\n-    (DECL_COMMON_CHECK (NODE)->decl_common.align = ffs_hwi (X))\n+  (DECL_ALIGN_RAW (NODE) = ffs_hwi (X))\n \n /* The minimum alignment necessary for the datum, in bits, without\n    warning.  */\n-#define DECL_WARN_IF_NOT_ALIGN(NODE) \\\n-    (DECL_COMMON_CHECK (NODE)->decl_common.warn_if_not_align \\\n-     ? ((unsigned)1) << ((NODE)->decl_common.warn_if_not_align - 1) : 0)\n+#define DECL_WARN_IF_NOT_ALIGN_RAW(NODE)\t\t\t\\\n+  (DECL_COMMON_CHECK (NODE)->decl_common.warn_if_not_align)\n+#define DECL_WARN_IF_NOT_ALIGN(NODE)\t\t\t\t\t\\\n+  (DECL_WARN_IF_NOT_ALIGN_RAW (NODE)\t\t\t\t\t\\\n+   ? ((unsigned)1) << (DECL_WARN_IF_NOT_ALIGN_RAW (NODE) - 1) : 0)\n \n /* Specify that DECL_WARN_IF_NOT_ALIGN(NODE) is X.  */\n-#define SET_DECL_WARN_IF_NOT_ALIGN(NODE, X) \\\n-    (DECL_COMMON_CHECK (NODE)->decl_common.warn_if_not_align = ffs_hwi (X))\n+#define SET_DECL_WARN_IF_NOT_ALIGN(NODE, X)\t\t\\\n+  (DECL_WARN_IF_NOT_ALIGN_RAW (NODE) = ffs_hwi (X))\n \n /* The alignment of NODE, in bytes.  */\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)"}]}