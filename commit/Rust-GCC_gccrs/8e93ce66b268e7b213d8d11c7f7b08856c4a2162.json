{"sha": "8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5M2NlNjZiMjY4ZTdiMjEzZDhkMTFjN2Y3YjA4ODU2YzRhMjE2Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-07-17T10:02:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-07-17T10:02:36Z"}, "message": "decl.c (choices_to_gnu): Rename parameters.\n\n\t* gcc-interface/decl.c (choices_to_gnu): Rename parameters.  Deal with\n\tan operand of Character type.  Factor out range generation to the end.\n\tCheck that the bounds are literals and convert them to the type of the\n\toperand before building the ranges.\n\t* gcc-interface/utils.c (make_dummy_type): Minor tweak.\n\t(make_packable_type): Propagate TYPE_DEBUG_TYPE.\n\t(maybe_pad_type): Likewise.\n\nFrom-SVN: r262812", "tree": {"sha": "6a1cd47e5fd62c1b5247eb23a9c167ba592ae259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a1cd47e5fd62c1b5247eb23a9c167ba592ae259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/comments", "author": null, "committer": null, "parents": [{"sha": "10c6ce7884b1d19a9b85ccf64ac74e44eb7e6623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c6ce7884b1d19a9b85ccf64ac74e44eb7e6623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c6ce7884b1d19a9b85ccf64ac74e44eb7e6623"}], "stats": {"total": 153, "additions": 92, "deletions": 61}, "files": [{"sha": "9e4f36a035bfdd22182f786a361594cb139e0c66", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "patch": "@@ -1,3 +1,13 @@\n+2018-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (choices_to_gnu): Rename parameters.  Deal with\n+\tan operand of Character type.  Factor out range generation to the end.\n+\tCheck that the bounds are literals and convert them to the type of the\n+\toperand before building the ranges.\n+\t* gcc-interface/utils.c (make_dummy_type): Minor tweak.\n+\t(make_packable_type): Propagate TYPE_DEBUG_TYPE.\n+\t(maybe_pad_type): Likewise.\n+\n 2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Try_Object_Operation): Handle properly a prefixed call"}, {"sha": "b1dc379c24771ad796d143c0e839434baf03f8b8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 56, "deletions": 55, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "patch": "@@ -6705,93 +6705,94 @@ elaborate_reference (tree ref, Entity_Id gnat_entity, bool definition,\n    the value passed against the list of choices.  */\n \n static tree\n-choices_to_gnu (tree operand, Node_Id choices)\n+choices_to_gnu (tree gnu_operand, Node_Id gnat_choices)\n {\n-  Node_Id choice;\n-  Node_Id gnat_temp;\n-  tree result = boolean_false_node;\n-  tree this_test, low = 0, high = 0, single = 0;\n+  tree gnu_result = boolean_false_node, gnu_type;\n+\n+  gnu_operand = maybe_character_value (gnu_operand);\n+  gnu_type = TREE_TYPE (gnu_operand);\n \n-  for (choice = First (choices); Present (choice); choice = Next (choice))\n+  for (Node_Id gnat_choice = First (gnat_choices);\n+       Present (gnat_choice);\n+       gnat_choice = Next (gnat_choice))\n     {\n-      switch (Nkind (choice))\n+      tree gnu_low = NULL_TREE, gnu_high = NULL_TREE;\n+      tree gnu_test;\n+\n+      switch (Nkind (gnat_choice))\n \t{\n \tcase N_Range:\n-\t  low = gnat_to_gnu (Low_Bound (choice));\n-\t  high = gnat_to_gnu (High_Bound (choice));\n-\n-\t  this_test\n-\t    = build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n-\t\t\t       build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, low, true),\n-\t\t\t       build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, high, true),\n-\t\t\t       true);\n-\n+\t  gnu_low = gnat_to_gnu (Low_Bound (gnat_choice));\n+\t  gnu_high = gnat_to_gnu (High_Bound (gnat_choice));\n \t  break;\n \n \tcase N_Subtype_Indication:\n-\t  gnat_temp = Range_Expression (Constraint (choice));\n-\t  low = gnat_to_gnu (Low_Bound (gnat_temp));\n-\t  high = gnat_to_gnu (High_Bound (gnat_temp));\n-\n-\t  this_test\n-\t    = build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n-\t\t\t       build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, low, true),\n-\t\t\t       build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\toperand, high, true),\n-\t\t\t       true);\n+\t  gnu_low = gnat_to_gnu (Low_Bound (Range_Expression\n+\t\t\t\t\t    (Constraint (gnat_choice))));\n+\t  gnu_high = gnat_to_gnu (High_Bound (Range_Expression\n+\t\t\t\t\t      (Constraint (gnat_choice))));\n \t  break;\n \n \tcase N_Identifier:\n \tcase N_Expanded_Name:\n-\t  /* This represents either a subtype range, an enumeration\n-\t     literal, or a constant  Ekind says which.  If an enumeration\n-\t     literal or constant, fall through to the next case.  */\n-\t  if (Ekind (Entity (choice)) != E_Enumeration_Literal\n-\t      && Ekind (Entity (choice)) != E_Constant)\n+\t  /* This represents either a subtype range or a static value of\n+\t     some kind; Ekind says which.  */\n+\t  if (Is_Type (Entity (gnat_choice)))\n \t    {\n-\t      tree type = gnat_to_gnu_type (Entity (choice));\n-\n-\t      low = TYPE_MIN_VALUE (type);\n-\t      high = TYPE_MAX_VALUE (type);\n-\n-\t      this_test\n-\t\t= build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n-\t\t\t\t   build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t\t\t    operand, low, true),\n-\t\t\t\t   build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t\t    operand, high, true),\n-\t\t\t\t   true);\n+\t      tree gnu_type = get_unpadded_type (Entity (gnat_choice));\n+\n+\t      gnu_low = TYPE_MIN_VALUE (gnu_type);\n+\t      gnu_high = TYPE_MAX_VALUE (gnu_type);\n \t      break;\n \t    }\n \n \t  /* ... fall through ... */\n \n \tcase N_Character_Literal:\n \tcase N_Integer_Literal:\n-\t  single = gnat_to_gnu (choice);\n-\t  this_test = build_binary_op (EQ_EXPR, boolean_type_node, operand,\n-\t\t\t\t       single, true);\n+\t  gnu_low = gnat_to_gnu (gnat_choice);\n \t  break;\n \n \tcase N_Others_Choice:\n-\t  this_test = boolean_true_node;\n \t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n-      if (result == boolean_false_node)\n-\tresult = this_test;\n+      /* Everything should be folded into constants at this point.  */\n+      gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);\n+      gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);\n+\n+      if (gnu_low && TREE_TYPE (gnu_low) != gnu_type)\n+\tgnu_low = convert (gnu_type, gnu_low);\n+      if (gnu_high && TREE_TYPE (gnu_high) != gnu_type)\n+\tgnu_high = convert (gnu_type, gnu_high);\n+\n+      if (gnu_low && gnu_high)\n+\tgnu_test\n+\t  = build_binary_op (TRUTH_ANDIF_EXPR, boolean_type_node,\n+\t\t\t     build_binary_op (GE_EXPR, boolean_type_node,\n+\t\t\t\t\t      gnu_operand, gnu_low, true),\n+\t\t\t     build_binary_op (LE_EXPR, boolean_type_node,\n+\t\t\t\t\t      gnu_operand, gnu_high, true),\n+\t\t\t     true);\n+      else if (gnu_low)\n+\tgnu_test\n+\t  = build_binary_op (EQ_EXPR, boolean_type_node, gnu_operand, gnu_low,\n+\t\t\t     true);\n+      else\n+\tgnu_test = boolean_true_node;\n+\n+      if (gnu_result == boolean_false_node)\n+\tgnu_result = gnu_test;\n       else\n-\tresult = build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node, result,\n-\t\t\t\t  this_test, true);\n+\tgnu_result\n+\t  = build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node, gnu_result,\n+\t\t\t     gnu_test, true);\n     }\n \n-  return result;\n+  return gnu_result;\n }\n \f\n /* Adjust PACKED setting as passed to gnat_to_gnu_field for a field of"}, {"sha": "cc1fe770f2c023715cd2a4dddc923e91c1c23be1", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "patch": "@@ -391,15 +391,13 @@ make_dummy_type (Entity_Id gnat_type)\n \n   SET_DUMMY_NODE (gnat_equiv, gnu_type);\n \n-  /* Create a debug type so that debug info consumers only see an unspecified\n-     type.  */\n+  /* Create a debug type so that debuggers only see an unspecified type.  */\n   if (Needs_Debug_Info (gnat_type))\n     {\n       debug_type = make_node (LANG_TYPE);\n-      SET_TYPE_DEBUG_TYPE (gnu_type, debug_type);\n-\n       TYPE_NAME (debug_type) = TYPE_NAME (gnu_type);\n       TYPE_ARTIFICIAL (debug_type) = TYPE_ARTIFICIAL (gnu_type);\n+      SET_TYPE_DEBUG_TYPE (gnu_type, debug_type);\n     }\n \n   return gnu_type;\n@@ -1073,7 +1071,9 @@ make_packable_type (tree type, bool in_record, unsigned int max_align)\n \n   finish_record_type (new_type, nreverse (new_field_list), 2, false);\n   relate_alias_sets (new_type, type, ALIAS_SET_COPY);\n-  if (TYPE_STUB_DECL (type))\n+  if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+    SET_TYPE_DEBUG_TYPE (new_type, TYPE_DEBUG_TYPE (type));\n+  else if (TYPE_STUB_DECL (type))\n     SET_DECL_PARALLEL_TYPE (TYPE_STUB_DECL (new_type),\n \t\t\t    DECL_PARALLEL_TYPE (TYPE_STUB_DECL (type)));\n \n@@ -1417,7 +1417,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n     }\n \n   if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n-    SET_TYPE_DEBUG_TYPE (record, type);\n+    SET_TYPE_DEBUG_TYPE (record, maybe_debug_type (type));\n \n   /* Unless debugging information isn't being written for the input type,\n      write a record that shows what we are a subtype of and also make a"}, {"sha": "d0001f0a84e83464a8233e7e4d2a83a79fb1c482", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "patch": "@@ -1,3 +1,7 @@\n+2018-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr55.adb: New test.\n+\n 2018-07-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/vartrack-1.c (dg-options): Add"}, {"sha": "0444672d96deed54aa0452b42cf39d5726522159", "filename": "gcc/testsuite/gnat.dg/discr55.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr55.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93ce66b268e7b213d8d11c7f7b08856c4a2162/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr55.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr55.adb?ref=8e93ce66b268e7b213d8d11c7f7b08856c4a2162", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+\n+procedure Discr55 is\n+\n+  type Rec (C : Character) is record\n+    case C is\n+      when 'Z' .. Character'Val (128) => I : Integer;\n+      when others                     => null;\n+    end case;\n+  end record;\n+\n+  R : Rec ('Z');\n+\n+begin\n+  R.I := 0;\n+end;"}]}