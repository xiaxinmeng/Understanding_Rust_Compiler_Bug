{"sha": "805586285dbb8f34cccd4d34295719f59979b649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1NTg2Mjg1ZGJiOGYzNGNjY2Q0ZDM0Mjk1NzE5ZjU5OTc5YjY0OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-04-09T22:58:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-09T22:58:51Z"}, "message": "re PR target/39678 (complex type isn't passed correctly)\n\ngcc/\n\n2009-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39678\n\t* config/i386/i386.c (classify_argument): Handle SCmode with\n\t(bit_offset % 64) != 0.\n\ngcc/testsuite/\n\n2009-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39678\n\t* g++.dg/torture/pr39678.C: New.\n\t* gcc.dg/compat/struct-complex-2.h: Likewise.\n\t* gcc.dg/compat/struct-complex-2_main.c: Likewise.\n\t* gcc.dg/compat/struct-complex-2_x.c: Likewise.\n\t* gcc.dg/compat/struct-complex-2_y.c: Likewise.\n\t* gcc.dg/torture/pr39678.c: Likewise.\n\t* gcc.target/i386/pr39678.c: Likewise.\n\n\t* gcc.dg/compat/struct-complex-1_x.c: Add -Wno-psabi.\n\t* gcc.dg/compat/struct-complex-1_y.c: Likewise.\n\n\t* gcc.target/x86_64/abi/test_passing_structs.c: Include\n\t<complex.h>.  Add tests for structure with complex float.\n\nFrom-SVN: r145865", "tree": {"sha": "46d24cd733f827340cc68bd83323e40748cfbe0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d24cd733f827340cc68bd83323e40748cfbe0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/805586285dbb8f34cccd4d34295719f59979b649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805586285dbb8f34cccd4d34295719f59979b649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805586285dbb8f34cccd4d34295719f59979b649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805586285dbb8f34cccd4d34295719f59979b649/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c70d28b4da7f0d7ed14425ec9ba6c3f99d25742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c70d28b4da7f0d7ed14425ec9ba6c3f99d25742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c70d28b4da7f0d7ed14425ec9ba6c3f99d25742"}], "stats": {"total": 278, "additions": 275, "deletions": 3}, "files": [{"sha": "1f31df260d4c1c30891861043ce7f3952ca38f3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,3 +1,9 @@\n+2009-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39678\n+\t* config/i386/i386.c (classify_argument): Handle SCmode with\n+\t(bit_offset % 64) != 0.\n+\n 2009-04-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Optimize Options): Add cross-reference to"}, {"sha": "503cc0816e4505cdbde3155b28bf0cb5dd0143c7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -5273,7 +5273,22 @@ classify_argument (enum machine_mode mode, const_tree type,\n       return 2;\n     case SCmode:\n       classes[0] = X86_64_SSE_CLASS;\n-      return 1;\n+      if (!(bit_offset % 64))\n+\treturn 1;\n+      else\n+\t{\n+\t  static bool warned;\n+\n+\t  if (!warned && warn_psabi)\n+\t    {\n+\t      warned = true;\n+\t      inform (input_location,\n+\t\t      \"The ABI of passing structure with complex float\"\n+\t\t      \" member has changed in GCC 4.4\");\n+\t    }\n+\t  classes[1] = X86_64_SSESF_CLASS;\n+\t  return 2;\n+\t}\n     case DCmode:\n       classes[0] = X86_64_SSEDF_CLASS;\n       classes[1] = X86_64_SSEDF_CLASS;"}, {"sha": "3c7cab6df09c6011c73f9e2f932ee40cb1205520", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,3 +1,20 @@\n+2009-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39678\n+\t* g++.dg/torture/pr39678.C: New.\n+\t* gcc.dg/compat/struct-complex-2.h: Likewise.\n+\t* gcc.dg/compat/struct-complex-2_main.c: Likewise.\n+\t* gcc.dg/compat/struct-complex-2_x.c: Likewise.\n+\t* gcc.dg/compat/struct-complex-2_y.c: Likewise.\n+\t* gcc.dg/torture/pr39678.c: Likewise.\n+\t* gcc.target/i386/pr39678.c: Likewise.\n+\n+\t* gcc.dg/compat/struct-complex-1_x.c: Add -Wno-psabi.\n+\t* gcc.dg/compat/struct-complex-1_y.c: Likewise.\n+\n+\t* gcc.target/x86_64/abi/test_passing_structs.c: Include\n+\t<complex.h>.  Add tests for structure with complex float.\n+\n 2009-04-10  Ben Elliston  <bje@au.ibm.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "a7c120ad4db76477e4c1b375a6f24e5ed0de2ca4", "filename": "gcc/testsuite/g++.dg/torture/pr39678.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39678.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39678.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39678.C?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/39678 */\n+/* { dg-do run } */\n+/* { dg-options \"-Wno-psabi\" } */\n+struct Y {};\n+struct X {\n+  struct Y y;\n+  __complex__ float val;\n+};\n+\n+struct X __attribute__((noinline))\n+foo (float *p)\n+{\n+  struct X x;\n+  __real x.val = p[0];\n+  __imag x.val = p[1];\n+  return x;\n+}\n+extern \"C\" void abort (void);\n+float a[2] = { 3., -2. };\n+int main()\n+{\n+  struct X x = foo(a);\n+  if (__real x.val != 3. || __imag x.val != -2.)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "0c6723948705fc3ad199842d057fb8b5f98faa5f", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-1_x.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_x.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -Wno-psabi\" } */\n+\n \n #ifdef __x86_64__\n #include \"struct-complex-1.h\""}, {"sha": "858e6a9da8b4dbdcfba5666179d8650e3468d10a", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-1_y.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-1_y.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -Wno-psabi\" } */\n \n #ifdef __x86_64__\n #include <stdlib.h>"}, {"sha": "1fd1e86c2ba443d0e53fb7948afe912e11028224", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-2.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2.h?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,15 @@\n+#include <complex.h>\n+\n+struct st\n+{\n+  int s1;\n+  float complex x;\n+};\n+\n+typedef struct { float r, i; } _complex;\n+\n+struct stc\n+{\n+  int s1;\n+  _complex x;\n+};"}, {"sha": "74eae62423bb85765e53108569902b4e01b498aa", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-2_main.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_main.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O\" } */\n+\n+#ifdef __x86_64__\n+/* Test function argument passing.  PR target/39678.  */\n+\n+extern void struct_complex_2_x (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  struct_complex_2_x ();\n+  exit (0);\n+}\n+#else\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#endif"}, {"sha": "2fb9826eb0f6a4035bf0b66b71bdad486402c0ce", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-2_x.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_x.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-O -Wno-psabi\" } */\n+\n+\n+#ifdef __x86_64__\n+#include \"struct-complex-2.h\"\n+\n+struct st st1;\n+struct stc st2;\n+\n+extern void foo ();\n+extern void bar ();\n+\n+int\n+struct_complex_2_x ()\n+{\n+  st1.s1 = 1;\n+  __real__ st1.x = 2;\n+  __imag__ st1.x = 4;\n+  st2.s1 = 1;\n+  st2.x.r = 2;\n+  st2.x.i = 4;\n+  foo (st1);\n+  foo (st2);\n+  bar (st1);\n+  bar (st2);\n+  return 0;\n+}\n+#else\n+int dummy_x;\n+#endif"}, {"sha": "54a72fa43f344f197dbb18010846dc90e5ff7a17", "filename": "gcc/testsuite/gcc.dg/compat/struct-complex-2_y.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-complex-2_y.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-options \"-O -Wno-psabi\" } */\n+\n+#ifdef __x86_64__\n+#include <stdlib.h>\n+#include \"struct-complex-2.h\"\n+\n+void\n+bar(struct st x)\n+{\n+  if (x.s1 != 1\n+      || __real__ x.x != 2 || __imag__ x.x != 4)\n+    abort ();\n+}\n+\n+void\n+foo(struct stc x)\n+{\n+  if (x.s1 != 1 || x.x.r != 2 || x.x.i != 4)\n+    abort ();\n+}\n+#else\n+int dummy_y;\n+#endif"}, {"sha": "42de03320cdb8ad4a18e658ebc1d0bf559df2b18", "filename": "gcc/testsuite/gcc.dg/torture/pr39678.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39678.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39678.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39678.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/39678 */\n+/* { dg-do run } */\n+/* { dg-options \"-Wno-psabi\" } */\n+\n+struct X {\n+  char c;\n+  __complex__ float val;\n+};\n+\n+struct X __attribute__((noinline))\n+foo (float *p)\n+{\n+  struct X x;\n+  x.c = -3;\n+  __real x.val = p[0];\n+  __imag x.val = p[1];\n+  return x;\n+}\n+extern void abort (void);\n+float a[2] = { 3., -2. };\n+int main()\n+{\n+  struct X x = foo(a);\n+  if (x.c != -3 || __real x.val != a[0] || __imag x.val != a[1])\n+    abort ();\n+  return 0;\n+}"}, {"sha": "70e8ff497cd296d4cda7330721a776068b0b55c3", "filename": "gcc/testsuite/gcc.target/i386/pr39678.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/39678 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+struct X {\n+  char c;\n+  __complex__ float val;\n+};\n+\n+struct X\n+foo (float *p)\n+{ /* { dg-message \"note: The ABI of passing structure with complex float member has changed in GCC 4.4\" } */\n+  struct X x;\n+  x.c = -3;\n+  __real x.val = p[0];\n+  __imag x.val = p[1];\n+  return x;\n+}"}, {"sha": "299bc80caba5598259748d616883ef6ca65bed90", "filename": "gcc/testsuite/gcc.target/x86_64/abi/test_passing_structs.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -2,6 +2,7 @@\n \n #include \"defines.h\"\n #include \"args.h\"\n+#include <complex.h>\n \n struct IntegerRegisters iregs;\n struct FloatRegisters fregs;\n@@ -116,6 +117,45 @@ check_struct_passing8 (struct flex2_struct is ATTRIBUTE_UNUSED)\n   check_int_arguments;\n }\n \n+struct complex1_struct\n+{\n+  int c;\n+  __complex__ float x;\n+};\n+\n+struct complex1a_struct\n+{\n+  long l;\n+  float f;\n+};\n+\n+struct complex2_struct\n+{\n+  int c;\n+  __complex__ float x;\n+  float y;\n+};\n+\n+struct complex2a_struct\n+{\n+  long l;\n+  double d;\n+};\n+\n+void\n+check_struct_passing9 (struct complex1_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_float_arguments;\n+}\n+\n+void\n+check_struct_passing10 (struct complex2_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_double_arguments;\n+}\n+\n static struct flex1_struct f1s = { 60, { } };\n static struct flex2_struct f2s = { 61, { } };\n \n@@ -136,6 +176,18 @@ main (void)\n   };\n   int i;\n #endif\n+  struct complex1_struct c1s = { 4, ( -13.4 + 3.5*I ) };\n+  union\n+    {\n+      struct complex1_struct c;\n+      struct complex1a_struct u;\n+    } c1u;\n+  struct complex2_struct c2s = { 4, ( -13.4 + 3.5*I ), -34.5 };\n+  union\n+    {\n+      struct complex2_struct c;\n+      struct complex2a_struct u;\n+    } c2u;\n \n   clear_struct_registers;\n   iregs.I0 = is.i;\n@@ -185,5 +237,25 @@ main (void)\n   clear_int_hardware_registers;\n   WRAP_CALL (check_struct_passing8)(f2s);\n \n+  clear_struct_registers;\n+  c1u.c = c1s;\n+  iregs.I0 = c1u.u.l;\n+  num_iregs = 1;\n+  fregs.xmm0._float [0] = c1u.u.f;\n+  num_fregs = 1;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing9)(c1s);\n+\n+  clear_struct_registers;\n+  c2u.c = c2s;\n+  iregs.I0 = c2u.u.l;\n+  num_iregs = 1;\n+  fregs.xmm0._double[0] = c2u.u.d;\n+  num_fregs = 1;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing10)(c2s);\n+\n   return 0;\n }"}]}