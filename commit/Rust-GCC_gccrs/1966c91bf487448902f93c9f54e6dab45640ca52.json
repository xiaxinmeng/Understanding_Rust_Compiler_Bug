{"sha": "1966c91bf487448902f93c9f54e6dab45640ca52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NmM5MWJmNDg3NDQ4OTAyZjkzYzlmNTRlNmRhYjQ1NjQwY2E1Mg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-21T22:22:11Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-21T22:22:11Z"}, "message": "re PR rtl-optimization/55414 (spec2006 416.gamess compilation fails on LRA)\n\n2012-11-21  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55414\n\t* lra-constraints.c (Index): New function.\n\t(lra_constraints): Check dead equiv init insns.\n\nFrom-SVN: r193712", "tree": {"sha": "01fb4ccba359d8ef78098a191519dd742380a9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01fb4ccba359d8ef78098a191519dd742380a9b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1966c91bf487448902f93c9f54e6dab45640ca52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966c91bf487448902f93c9f54e6dab45640ca52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1966c91bf487448902f93c9f54e6dab45640ca52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966c91bf487448902f93c9f54e6dab45640ca52/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecdbf2cdfa8aededf4b1027998af325b0e2ff70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdbf2cdfa8aededf4b1027998af325b0e2ff70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdbf2cdfa8aededf4b1027998af325b0e2ff70c"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "7476b8634da401a326e1994061e7eb5a464332af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966c91bf487448902f93c9f54e6dab45640ca52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966c91bf487448902f93c9f54e6dab45640ca52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1966c91bf487448902f93c9f54e6dab45640ca52", "patch": "@@ -1,3 +1,9 @@\n+2012-11-21  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55414\n+\t* lra-constraints.c (Index): New function.\n+\t(lra_constraints): Check dead equiv init insns.\n+\n 2012-11-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (extvmisaligndi): Rename from extv; update"}, {"sha": "7fbd3d5e7fe539bdc75c8c8d15f20cb930901e1f", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966c91bf487448902f93c9f54e6dab45640ca52/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966c91bf487448902f93c9f54e6dab45640ca52/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1966c91bf487448902f93c9f54e6dab45640ca52", "patch": "@@ -3215,6 +3215,17 @@ multi_block_pseudo_p (int regno)\n     return false;\n }\n \n+/* Return true if LIST contains a deleted insn.  */\n+static bool\n+contains_deleted_insn_p (rtx list)\n+{\n+  for (; list != NULL_RTX; list = XEXP (list, 1))\n+    if (NOTE_P (XEXP (list, 0))\n+\t&& NOTE_KIND (XEXP (list, 0)) == NOTE_INSN_DELETED)\n+      return true;\n+  return false;\n+}\n+\n /* Return true if X contains a pseudo dying in INSN.  */\n static bool\n dead_pseudo_p (rtx x, rtx insn)\n@@ -3317,10 +3328,29 @@ lra_constraints (bool first_p)\n \t    bool pseudo_p = contains_reg_p (x, false, false);\n \t    rtx set, insn;\n \n-\t    /* We don't use DF for compilation speed sake.  So it is\n-\t       problematic to update live info when we use an\n-\t       equivalence containing pseudos in more than one BB.  */\n-\t    if ((pseudo_p && multi_block_pseudo_p (i))\n+\t    /* After RTL transformation, we can not guarantee that\n+\t       pseudo in the substitution was not reloaded which might\n+\t       make equivalence invalid.  For example, in reverse\n+\t       equiv of p0\n+\n+\t       p0 <- ...\n+\t       ...\n+\t       equiv_mem <- p0\n+\n+\t       the memory address register was reloaded before the 2nd\n+\t       insn.  */\n+\t    if ((! first_p && pseudo_p)\n+\t\t/* We don't use DF for compilation speed sake.  So it\n+\t\t   is problematic to update live info when we use an\n+\t\t   equivalence containing pseudos in more than one\n+\t\t   BB.  */\n+\t\t|| (pseudo_p && multi_block_pseudo_p (i))\n+\t\t/* If an init insn was deleted for some reason, cancel\n+\t\t   the equiv.  We could update the equiv insns after\n+\t\t   transformations including an equiv insn deletion\n+\t\t   but it is not worthy as such cases are extremely\n+\t\t   rare.  */ \n+\t\t|| contains_deleted_insn_p (ira_reg_equiv[i].init_insns)\n \t\t/* If it is not a reverse equivalence, we check that a\n \t\t   pseudo in rhs of the init insn is not dying in the\n \t\t   insn.  Otherwise, the live info at the beginning of\n@@ -3335,19 +3365,6 @@ lra_constraints (bool first_p)\n \t\t       && (int) REGNO (SET_DEST (set)) == i)\n \t\t    && init_insn_rhs_dead_pseudo_p (i)))\n \t      ira_reg_equiv[i].defined_p = false;\n-\t    else if (! first_p && pseudo_p)\n-\t      /* After RTL transformation, we can not guarantee that\n-\t\t pseudo in the substitution was not reloaded which\n-\t\t might make equivalence invalid.  For example, in\n-\t\t reverse equiv of p0\n-\n-\t\t p0 <- ...\n-\t\t ...\n-\t\t equiv_mem <- p0\n-\n-\t\t the memory address register was reloaded before the\n-\t\t 2nd insn.  */\n-\t      ira_reg_equiv[i].defined_p = false;\n \t    if (contains_reg_p (x, false, true))\n \t      ira_reg_equiv[i].profitable_p = false;\n \t    if (get_equiv_substitution (reg) != reg)"}]}