{"sha": "1e83b5f197565d700a5a49d523e0ab77bdcbd809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4M2I1ZjE5NzU2NWQ3MDBhNWE0OWQ1MjNlMGFiNzdiZGNiZDgwOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-16T15:10:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-16T15:10:05Z"}, "message": "gimple.c (iterative_hash_gimple_type): Re-instantiate change to always visit pointer target and function result and...\n\n2011-05-16  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (iterative_hash_gimple_type): Re-instantiate\n\tchange to always visit pointer target and function result\n\tand argument types.\n\nFrom-SVN: r173794", "tree": {"sha": "743b8a9127e1e0f5053be9d73ac442287b6ca1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743b8a9127e1e0f5053be9d73ac442287b6ca1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e83b5f197565d700a5a49d523e0ab77bdcbd809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e83b5f197565d700a5a49d523e0ab77bdcbd809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e83b5f197565d700a5a49d523e0ab77bdcbd809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e83b5f197565d700a5a49d523e0ab77bdcbd809/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62e36382018b546b0ad24ff4c01edd7ef6f373fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e36382018b546b0ad24ff4c01edd7ef6f373fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e36382018b546b0ad24ff4c01edd7ef6f373fe"}], "stats": {"total": 48, "additions": 14, "deletions": 34}, "files": [{"sha": "4f8429993fc9ba5b323b93b1233fef91469cdae7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e83b5f197565d700a5a49d523e0ab77bdcbd809/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e83b5f197565d700a5a49d523e0ab77bdcbd809/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e83b5f197565d700a5a49d523e0ab77bdcbd809", "patch": "@@ -1,3 +1,9 @@\n+2011-05-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (iterative_hash_gimple_type): Re-instantiate\n+\tchange to always visit pointer target and function result\n+\tand argument types.\n+\n 2011-05-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48999"}, {"sha": "ce632e04d9402ee74c7b23f457d6057b0462094b", "filename": "gcc/gimple.c", "status": "modified", "additions": 8, "deletions": 34, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e83b5f197565d700a5a49d523e0ab77bdcbd809/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e83b5f197565d700a5a49d523e0ab77bdcbd809/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=1e83b5f197565d700a5a49d523e0ab77bdcbd809", "patch": "@@ -4129,20 +4129,10 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n     }\n \n   /* For pointer and reference types, fold in information about the type\n-     pointed to but do not recurse into possibly incomplete types to\n-     avoid hash differences for complete vs. incomplete types.  */\n+     pointed to.  */\n   if (POINTER_TYPE_P (type))\n-    {\n-      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n-\t{\n-\t  v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n-\t  v = iterative_hash_name\n-\t\t(TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (type))), v);\n-\t}\n-      else\n-\tv = visit (TREE_TYPE (type), state, v,\n-\t\t   sccstack, sccstate, sccstate_obstack);\n-    }\n+    v = visit (TREE_TYPE (type), state, v,\n+\t       sccstack, sccstate, sccstate_obstack);\n \n   /* For integer types hash the types min/max values and the string flag.  */\n   if (TREE_CODE (type) == INTEGER_TYPE)\n@@ -4183,29 +4173,13 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n \tv = visit (TYPE_METHOD_BASETYPE (type), state, v,\n \t\t   sccstack, sccstate, sccstate_obstack);\n \n-      /* For result types allow mismatch in completeness.  */\n-      if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n-\t{\n-\t  v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n-\t  v = iterative_hash_name\n-\t\t(TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (type))), v);\n-\t}\n-      else\n-\tv = visit (TREE_TYPE (type), state, v,\n-\t\t   sccstack, sccstate, sccstate_obstack);\n-\n+      /* Check result and argument types.  */\n+      v = visit (TREE_TYPE (type), state, v,\n+\t\t sccstack, sccstate, sccstate_obstack);\n       for (p = TYPE_ARG_TYPES (type), na = 0; p; p = TREE_CHAIN (p))\n \t{\n-\t  /* For argument types allow mismatch in completeness.  */\n-\t  if (RECORD_OR_UNION_TYPE_P (TREE_VALUE (p)))\n-\t    {\n-\t      v = iterative_hash_hashval_t (TREE_CODE (TREE_VALUE (p)), v);\n-\t      v = iterative_hash_name\n-\t\t    (TYPE_NAME (TYPE_MAIN_VARIANT (TREE_VALUE (p))), v);\n-\t    }\n-\t  else\n-\t    v = visit (TREE_VALUE (p), state, v,\n-\t\t       sccstack, sccstate, sccstate_obstack);\n+\t  v = visit (TREE_VALUE (p), state, v,\n+\t\t     sccstack, sccstate, sccstate_obstack);\n \t  na++;\n \t}\n "}]}