{"sha": "cf7416c32c66b9481386fe86c27c59839666e7d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3NDE2YzMyYzY2Yjk0ODEzODZmZTg2YzI3YzU5ODM5NjY2ZTdkNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-14T08:25:57Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-14T08:25:57Z"}, "message": "Ignore -ftree-parallelize-loops={0,1} using gt\n\n2015-07-14  Tom de Vries  <tom@codesourcery.com>\n\n\t* gcc.c (greater_than_spec_func): Declare forward.\n\t(LINK_COMMAND_SPEC, GOMP_SELF_SPECS): Use gt to ignore\n\t-ftree-parallelize-loops={0,1}.\n\t(static_spec_functions): Add greater_than_spec_func function with name\n\t\"gt\".\n\t(greater_than_spec_func): New function.\n\nFrom-SVN: r225764", "tree": {"sha": "6ba7291de9427f534b5172143522edf217b4c2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba7291de9427f534b5172143522edf217b4c2e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7416c32c66b9481386fe86c27c59839666e7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7416c32c66b9481386fe86c27c59839666e7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7416c32c66b9481386fe86c27c59839666e7d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7416c32c66b9481386fe86c27c59839666e7d6/comments", "author": null, "committer": null, "parents": [{"sha": "c9080ba2a7ff9d0ec82729d54e550b554b78db88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9080ba2a7ff9d0ec82729d54e550b554b78db88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9080ba2a7ff9d0ec82729d54e550b554b78db88"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "b036959f5a583b915733db6447b372e373e4865c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7416c32c66b9481386fe86c27c59839666e7d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7416c32c66b9481386fe86c27c59839666e7d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf7416c32c66b9481386fe86c27c59839666e7d6", "patch": "@@ -1,3 +1,12 @@\n+2015-07-14  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.c (greater_than_spec_func): Declare forward.\n+\t(LINK_COMMAND_SPEC, GOMP_SELF_SPECS): Use gt to ignore\n+\t-ftree-parallelize-loops={0,1}.\n+\t(static_spec_functions): Add greater_than_spec_func function with name\n+\t\"gt\".\n+\t(greater_than_spec_func): New function.\n+\n 2015-07-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-dom.c (record_temporary_equivalences): Merge"}, {"sha": "290ec78d08872095d269135c1be7fafab7b86c0c", "filename": "gcc/gcc.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7416c32c66b9481386fe86c27c59839666e7d6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7416c32c66b9481386fe86c27c59839666e7d6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=cf7416c32c66b9481386fe86c27c59839666e7d6", "patch": "@@ -274,6 +274,7 @@ static const char *compare_debug_self_opt_spec_function (int, const char **);\n static const char *compare_debug_auxbase_opt_spec_function (int, const char **);\n static const char *pass_through_libs_spec_func (int, const char **);\n static const char *replace_extension_spec_func (int, const char **);\n+static const char *greater_than_spec_func (int, const char **);\n static char *convert_white_space (char *);\n \f\n /* The Specs Language\n@@ -881,7 +882,8 @@ proper position among the other output files.  */\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}} \" VTABLE_VERIFICATION_SPEC \" \\\n     %{static:} %{L*} %(mfwrap) %(link_libgcc) \" SANITIZER_EARLY_SPEC \" %o\\\n     \" CHKP_SPEC \" \\\n-    %{fopenacc|fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)}\\\n+    %{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*} 1):\\\n+\t%:include(libgomp.spec)%(link_gomp)}\\\n     %{fcilkplus:%:include(libcilkrts.spec)%(link_cilkrts)}\\\n     %{fgnu-tm:%:include(libitm.spec)%(link_itm)}\\\n     %(mflib) \" STACK_SPLIT_SPEC \"\\\n@@ -1042,7 +1044,8 @@ static const char *const multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n /* Linking to libgomp implies pthreads.  This is particularly important\n    for targets that use different start files and suchlike.  */\n #ifndef GOMP_SELF_SPECS\n-#define GOMP_SELF_SPECS \"%{fopenacc|fopenmp|ftree-parallelize-loops=*: \" \\\n+#define GOMP_SELF_SPECS \\\n+  \"%{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*} 1): \" \\\n   \"-pthread}\"\n #endif\n \n@@ -1482,6 +1485,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"compare-debug-auxbase-opt\", compare_debug_auxbase_opt_spec_function },\n   { \"pass-through-libs\",\tpass_through_libs_spec_func },\n   { \"replace-extension\",\treplace_extension_spec_func },\n+  { \"gt\",\t\t\tgreater_than_spec_func },\n #ifdef EXTRA_SPEC_FUNCTIONS\n   EXTRA_SPEC_FUNCTIONS\n #endif\n@@ -9428,6 +9432,47 @@ replace_extension_spec_func (int argc, const char **argv)\n   return result;\n }\n \n+/* Returns \"\" if the n in ARGV[1] == -opt=<n> is greater than ARGV[2].\n+   Otherwise, return NULL.  */\n+\n+static const char *\n+greater_than_spec_func (int argc, const char **argv)\n+{\n+  char *converted;\n+\n+  if (argc == 1)\n+    return NULL;\n+\n+  gcc_assert (argc == 3);\n+  gcc_assert (argv[0][0] == '-');\n+  gcc_assert (argv[0][1] == '\\0');\n+\n+  /* Point p to <n> in in -opt=<n>.  */\n+  const char *p = argv[1];\n+  while (true)\n+    {\n+      char c = *p;\n+      if (c == '\\0')\n+\tgcc_unreachable ();\n+\n+      ++p;\n+\n+      if (c == '=')\n+\tbreak;\n+    }\n+\n+  long arg = strtol (p, &converted, 10);\n+  gcc_assert (converted != p);\n+\n+  long lim = strtol (argv[2], &converted, 10);\n+  gcc_assert (converted != argv[2]);\n+\n+  if (arg > lim)\n+    return \"\";\n+\n+  return NULL;\n+}\n+\n /* Insert backslash before spaces in ORIG (usually a file path), to \n    avoid being broken by spec parser.\n "}]}