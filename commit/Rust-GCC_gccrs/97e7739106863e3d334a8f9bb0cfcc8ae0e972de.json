{"sha": "97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlNzczOTEwNjg2M2UzZDMzNGE4ZjliYjBjZmNjOGFlMGU5NzJkZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-01T07:42:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-01T07:42:10Z"}, "message": "fold-const.c (fold_binary_loc): Move ~X ^ X -> -1 and (X & Y) ^ Y -> ~X & Y transforms to ...\n\n2015-07-01  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Move ~X ^ X -> -1 and\n\t(X & Y) ^ Y -> ~X & Y transforms to ...\n\t* match.pd: ... here.\n\nFrom-SVN: r225225", "tree": {"sha": "06bc5789da51629911c3c7b5192a9b241054aaf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06bc5789da51629911c3c7b5192a9b241054aaf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a64be36b477db8ab8a10b13c2d18ede5b7f08738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64be36b477db8ab8a10b13c2d18ede5b7f08738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64be36b477db8ab8a10b13c2d18ede5b7f08738"}], "stats": {"total": 73, "additions": 16, "deletions": 57}, "files": [{"sha": "3f0ba84fc1b52060f1b8816c97601cb31bfd27ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "patch": "@@ -1,3 +1,9 @@\n+2015-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Move ~X ^ X -> -1 and\n+\t(X & Y) ^ Y -> ~X & Y transforms to ...\n+\t* match.pd: ... here.\n+\n 2015-07-01  Richard Biener <rguenther@suse.de>\n \n \t* genmatch.c (expr::gen_transform): Shortcut re-simplifying"}, {"sha": "5da6ed3e5d3ee86383225a0f3866b60a0da67370", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "patch": "@@ -10979,24 +10979,6 @@ fold_binary_loc (location_t loc,\n       goto bit_rotate;\n \n     case BIT_XOR_EXPR:\n-      /* ~X ^ X is -1.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n-\t{\n-\t  t1 = build_zero_cst (type);\n-\t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n-\t  return omit_one_operand_loc (loc, type, t1, arg1);\n-\t}\n-\n-      /* X ^ ~X is -1.  */\n-      if (TREE_CODE (arg1) == BIT_NOT_EXPR\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n-\t{\n-\t  t1 = build_zero_cst (type);\n-\t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n-\t  return omit_one_operand_loc (loc, type, t1, arg0);\n-\t}\n-\n       /* Fold (X & 1) ^ 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n \t  && INTEGRAL_TYPE_P (type)\n@@ -11005,45 +10987,6 @@ fold_binary_loc (location_t loc,\n \treturn fold_build2_loc (loc, EQ_EXPR, type, arg0,\n \t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n \n-      /* Fold (X & Y) ^ Y as ~X & Y.  */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg1));\n-\t}\n-      /* Fold (X & Y) ^ X as ~Y & X.  */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n-\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg1));\n-\t}\n-      /* Fold X ^ (X & Y) as X & ~Y.  */\n-      if (TREE_CODE (arg1) == BIT_AND_EXPR\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_convert_loc (loc, type, arg0),\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem));\n-\t}\n-      /* Fold X ^ (Y & X) as ~Y & X.  */\n-      if (TREE_CODE (arg1) == BIT_AND_EXPR\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n-\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg0));\n-\t}\n-\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;"}, {"sha": "f013adc60f1cc7023c07972f6a0c7b8ff0a155de", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e7739106863e3d334a8f9bb0cfcc8ae0e972de/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=97e7739106863e3d334a8f9bb0cfcc8ae0e972de", "patch": "@@ -298,6 +298,11 @@ along with GCC; see the file COPYING3.  If not see\n   (bit_xor @0 integer_all_onesp@1)\n   (bit_not @0))\n \n+/* ~X ^ X is -1.  */\n+(simplify\n+ (bit_xor:c (bit_not @0) @0)\n+ { build_all_ones_cst (type); })\n+\n /* x & ~0 -> x  */\n (simplify\n  (bit_and @0 integer_all_onesp)\n@@ -428,6 +433,11 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_xor (convert? (bit_not @0)) INTEGER_CST@1)\n  (bit_xor (convert @0) (bit_not @1)))\n \n+/* Fold (X & Y) ^ Y as ~X & Y.  */\n+(simplify\n+ (bit_xor:c (bit_and:c @0 @1) @1)\n+ (bit_and (bit_not @0) @1))\n+\n \n (simplify\n  (abs (abs@1 @0))"}]}