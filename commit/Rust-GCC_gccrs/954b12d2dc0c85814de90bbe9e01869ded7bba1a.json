{"sha": "954b12d2dc0c85814de90bbe9e01869ded7bba1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0YjEyZDJkYzBjODU4MTRkZTkwYmJlOWUwMTg2OWRlZDdiYmExYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-19T08:53:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-19T08:53:32Z"}, "message": "basic_string.tcc (_S_construct(size_type, _CharT, const _Alloc&)): Remove redundant try/catch.\n\n2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (_S_construct(size_type,\n\t_CharT, const _Alloc&)): Remove redundant try/catch.\n\t(_M_mutate(size_type, size_type, size_type)): Ditto.\n\t(_M_clone(const _Alloc&, size_type)): Ditto.\n\nFrom-SVN: r76141", "tree": {"sha": "e54d6719f1ac9bdd0393c2187c682728e676830b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54d6719f1ac9bdd0393c2187c682728e676830b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954b12d2dc0c85814de90bbe9e01869ded7bba1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954b12d2dc0c85814de90bbe9e01869ded7bba1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954b12d2dc0c85814de90bbe9e01869ded7bba1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954b12d2dc0c85814de90bbe9e01869ded7bba1a/comments", "author": null, "committer": null, "parents": [{"sha": "8c80adb754abf2db9f949d2cc6047002d624411e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c80adb754abf2db9f949d2cc6047002d624411e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c80adb754abf2db9f949d2cc6047002d624411e"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "adf7bffc91b8807e2fbe90c7ad5ec6e2b03e3f52", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954b12d2dc0c85814de90bbe9e01869ded7bba1a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954b12d2dc0c85814de90bbe9e01869ded7bba1a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=954b12d2dc0c85814de90bbe9e01869ded7bba1a", "patch": "@@ -1,3 +1,10 @@\n+2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (_S_construct(size_type,\n+\t_CharT, const _Alloc&)): Remove redundant try/catch.\n+\t(_M_mutate(size_type, size_type, size_type)): Ditto.\n+\t(_M_clone(const _Alloc&, size_type)): Ditto.\n+\t\n 2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (c_str()): Simplify, due to"}, {"sha": "5809d2a340ede83d836b81aa1d8c5df330756e85", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954b12d2dc0c85814de90bbe9e01869ded7bba1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954b12d2dc0c85814de90bbe9e01869ded7bba1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=954b12d2dc0c85814de90bbe9e01869ded7bba1a", "patch": "@@ -182,16 +182,9 @@ namespace std\n \n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, __a);\n-      try \n-\t{ \n-\t  if (__n) \n-\t    traits_type::assign(__r->_M_refdata(), __n, __c); \n-\t}\n-      catch(...) \n-\t{ \n-\t  __r->_M_destroy(__a); \n-\t  __throw_exception_again;\n-\t}\n+      if (__n) \n+\ttraits_type::assign(__r->_M_refdata(), __n, __c); \n+\n       __r->_M_length = __n;\n       __r->_M_refdata()[__n] = _Rep::_S_terminal;  // grrr\n       return __r->_M_refdata();\n@@ -442,19 +435,13 @@ namespace std\n \t\t\t\t  __new_size : 2*capacity(), __a);\n \t  else\n \t    __r = _Rep::_S_create(__new_size, __a);\n-\t  try \n-\t    {\n-\t      if (__pos)\n-\t\ttraits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n-\t      if (__how_much)\n-\t\ttraits_type::copy(__r->_M_refdata() + __pos + __len2, \n-\t\t\t\t  __src, __how_much);\n-\t    }\n-\t  catch(...) \n-\t    { \n-\t      __r->_M_dispose(get_allocator()); \n-\t      __throw_exception_again;\n-\t    }\n+\n+\t  if (__pos)\n+\t    traits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n+\t  if (__how_much)\n+\t    traits_type::copy(__r->_M_refdata() + __pos + __len2, \n+\t\t\t      __src, __how_much);\n+\n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__r->_M_refdata());\n \t}\n@@ -603,18 +590,9 @@ namespace std\n         __r = _Rep::_S_create(__requested_cap, __alloc);\n       \n       if (this->_M_length)\n-\t{\n-\t  try \n-\t    {\n-\t      traits_type::copy(__r->_M_refdata(), _M_refdata(),\n-\t\t\t\tthis->_M_length);\n-\t    }\n-\t  catch(...)  \n-\t    { \n-\t      __r->_M_destroy(__alloc); \n-\t      __throw_exception_again;\n-\t    }\n-\t}\n+\ttraits_type::copy(__r->_M_refdata(), _M_refdata(),\n+\t\t\t  this->_M_length);\n+\n       __r->_M_length = this->_M_length;\n       __r->_M_refdata()[this->_M_length] = _Rep::_S_terminal;\n       return __r->_M_refdata();"}]}