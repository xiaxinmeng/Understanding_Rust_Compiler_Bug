{"sha": "b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwMDAyYzRlZjY2MzY1OWZjZGY4YzdiN2JhZDJmM2FhYTcxMGZlYQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-01-17T12:36:49Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-01-17T12:36:49Z"}, "message": "Ignore LLVM's blank lines.\n\nThe GCN toolchain must use the LLVM assembler and linker because there's no\nbinutils port.  The LLVM tools do not have the same diagnostic style as\nbinutils, so the \"blank line(s) in output\" tests are inappropriate (and very\nnoisy).\n\nThe LLVM tools also have different command line options, so it's not possible\nto autodetect object formats in the same way.\n\nThis patch addresses both issues.\n\n2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* doc/sourcebuild.texi: Document dg-require-effective-target\n\tllvm_binutils and offload_gcn.\n\n\tgcc/testsuite/\n\t* lib/file-format.exp (gcc_target_object_format): Handle AMD GCN.\n\t* lib/gcc-dg.exp (gcc-dg-prune): Ignore blank lines from the LLVM\n\tlinker.\n\t* lib/target-supports.exp (check_effective_target_llvm_binutils): New.\n\nFrom-SVN: r268027", "tree": {"sha": "1ba31db0ac2a49e75a4db2ed1929691922672a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba31db0ac2a49e75a4db2ed1929691922672a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90eb9be6eb4a7286cf2864d7846103a66c7e3741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eb9be6eb4a7286cf2864d7846103a66c7e3741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eb9be6eb4a7286cf2864d7846103a66c7e3741"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "bf3146d3257b11aed9b27c1b33e3e83c96f8499c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -1,3 +1,8 @@\n+2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* doc/sourcebuild.texi: Document dg-require-effective-target\n+\tllvm_binutils and offload_gcn.\n+\n 2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>"}, {"sha": "b2e6aa42cd71d61b258630152d5fcba407ec3bb1", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -2265,6 +2265,9 @@ Target uses GNU @command{ld}.\n Target keeps null pointer checks, either due to the use of\n @option{-fno-delete-null-pointer-checks} or hardwired into the target.\n \n+@item llvm_binutils\n+Target is using an LLVM assembler and/or linker, instead of GNU Binutils.\n+\n @item lto\n Compiler has been configured to support link-time optimization (LTO).\n \n@@ -2289,6 +2292,9 @@ Target uses natural alignment (aligned to type size) for types of\n @item nonpic\n Target does not generate PIC by default.\n \n+@item offload_gcn\n+Target has been configured for OpenACC/OpenMP offloading on AMD GCN.\n+\n @item pie_enabled\n Target generates PIE by default.\n "}, {"sha": "cf4aa8086cbcea46e32d2ccff3c8480f511c584e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -1,3 +1,10 @@\n+2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* lib/file-format.exp (gcc_target_object_format): Handle AMD GCN.\n+\t* lib/gcc-dg.exp (gcc-dg-prune): Ignore blank lines from the LLVM\n+\tlinker.\n+\t* lib/target-supports.exp (check_effective_target_llvm_binutils): New.\n+\n 2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.dg/graphite/scop-19.c: Check pie_enabled."}, {"sha": "25e0888f8b3ff3245cb428003d249dde1c68846e", "filename": "gcc/testsuite/lib/file-format.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffile-format.exp?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -41,6 +41,9 @@ proc gcc_target_object_format { } {\n     } elseif { [istarget *-*-aix*] } {\n \t# AIX doesn't necessarily have objdump, so hand-code it.\n \tset gcc_target_object_format_saved coff\n+    } elseif { [istarget *-*-amdhsa*] } {\n+\t# AMD GCN uses LLVM objdump which is not CLI-compatible\n+\tset gcc_target_object_format_saved elf\n     } else {\n         set objdump_name [find_binutils_prog objdump]\n         set open_file [open objfmtst.c w]"}, {"sha": "d4e2d97ee5b68e20bab1a8ffef0148c302b2806d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -363,7 +363,7 @@ proc gcc-dg-prune { system text } {\n \n     # Complain about blank lines in the output (PR other/69006)\n     global allow_blank_lines\n-    if { !$allow_blank_lines } {\n+    if { !$allow_blank_lines && ![check_effective_target_llvm_binutils]} {\n \tset num_blank_lines [llength [regexp -all -inline \"\\n\\n\" $text]]\n \tif { $num_blank_lines } {\n \t    global testname_with_flags"}, {"sha": "ec8c67f4f41fc2c3f3beedf7ff68f5dadfd02e25", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50002c4ef663659fcdf8c7b7bad2f3aaa710fea/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b50002c4ef663659fcdf8c7b7bad2f3aaa710fea", "patch": "@@ -8779,6 +8779,14 @@ proc check_effective_target_offload_hsa { } {\n     } \"-foffload=hsa\" ]\n }\n \n+# Return 1 if the compiler has been configured with hsa offloading.\n+\n+proc check_effective_target_offload_gcn { } {\n+    return [check_no_compiler_messages offload_gcn assembly {\n+\tint main () {return 0;}\n+    } \"-foffload=amdgcn-unknown-amdhsa\" ]\n+}\n+\n # Return 1 if the target support -fprofile-update=atomic\n proc check_effective_target_profile_update_atomic {} {\n     return [check_no_compiler_messages profile_update_atomic assembly {\n@@ -9183,3 +9191,8 @@ foreach N {df} {\n     }]\n }\n \n+# Return 1 if this target uses an LLVM assembler and/or linker\n+proc check_effective_target_llvm_binutils { } {\n+    return [expr { [istarget amdgcn*-*-*]\n+\t\t   || [check_effective_target_offload_gcn] } ]\n+}"}]}