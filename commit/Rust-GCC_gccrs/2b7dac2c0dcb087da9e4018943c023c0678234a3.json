{"sha": "2b7dac2c0dcb087da9e4018943c023c0678234a3", "node_id": "C_kwDOANBUbNoAKDJiN2RhYzJjMGRjYjA4N2RhOWU0MDE4OTQzYzAyM2MwNjc4MjM0YTM", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2017-05-02T01:27:59Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-30T11:58:45Z"}, "message": "Make OpenACC orphan gang reductions errors\n\nThis patch promotes all OpenACC gang reductions on orphan loops as\nerrors. Accord to the spec, orphan loops are those which are not\nlexically nested inside an OpenACC parallel or kernels regions. I.e.,\nacc loops inside acc routines.\n\nAt first I thought this could be a warning because the gang reduction\nfinalizer uses an atomic update. However, because there is no\nsynchronization between gangs, there is way to guarantee that reduction\nwill have completed once a single gang entity returns from the acc\nroutine call.\n\n\tgcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): Emit an error on orphan\n\tOpenACC gang reductions.\n\tgcc/cp/\n\t* semantics.c (finish_omp_clauses): Emit an error on orphan\n\tOpenACC gang reductions.\n\tgcc/fortran/\n\t* openmp.c (oacc_is_parallel, oacc_is_kernels): New 'static'\n\tfunctions.\n\t(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC gang\n\treductions.\n\tgcc/\n\t* omp-general.h (enum oacc_loop_flags): Add OLF_REDUCTION enum.\n\t* omp-low.c (lower_oacc_head_mark): Use it to mark OpenACC\n\treductions.\n\t* omp-offload.c (oacc_loop_auto_partitions): Don't assign gang\n\tlevel parallelism to orphan reductions.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/nested-reductions-1-routine.c: Adjust.\n\t* c-c++-common/goacc/nested-reductions-2-routine.c: Likewise.\n\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: Likewise.\n\t* c-c++-common/goacc/orphan-reductions-1.c: New test.\n\t* c-c++-common/goacc/orphan-reductions-2.c: New test.\n\t* gfortran.dg/goacc/orphan-reductions-1.f90: New test.\n\t* gfortran.dg/goacc/orphan-reductions-2.f90: New test.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Temporarily\n\tskip.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "6b3aaedcca9f164f344583c5734b28bfb554ff36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b3aaedcca9f164f344583c5734b28bfb554ff36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b7dac2c0dcb087da9e4018943c023c0678234a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7dac2c0dcb087da9e4018943c023c0678234a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7dac2c0dcb087da9e4018943c023c0678234a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7dac2c0dcb087da9e4018943c023c0678234a3/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83a07557085f6da83c63e86c1cd2e719a39b8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83a07557085f6da83c63e86c1cd2e719a39b8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83a07557085f6da83c63e86c1cd2e719a39b8b2"}], "stats": {"total": 519, "additions": 517, "deletions": 2}, "files": [{"sha": "a025740e618f51c469aa2743da8723402ea6cf89", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -14135,6 +14135,14 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  goto check_dup_generic;\n \n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (ort == C_ORT_ACC && oacc_get_fn_attrib (current_function_decl)\n+\t      && omp_find_clause (clauses, OMP_CLAUSE_GANG))\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"gang reduction on an orphan loop\");\n+\t      remove = true;\n+\t      break;\n+\t    }\n \t  if (reduction_seen == 0)\n \t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n \t  else if (reduction_seen != -2"}, {"sha": "c84caf432517b0d8da106a7fe922085d3a259f96", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -6667,6 +6667,14 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (ort == C_ORT_ACC && oacc_get_fn_attrib (current_function_decl)\n+\t      && omp_find_clause (clauses, OMP_CLAUSE_GANG))\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"gang reduction on an orphan loop\");\n+\t      remove = true;\n+\t      break;\n+\t    }\n \t  if (reduction_seen == 0)\n \t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n \t  else if (reduction_seen != -2"}, {"sha": "4fa38691c0127f38792ffebb340d9935fd4d5c81", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -8322,6 +8322,17 @@ resolve_omp_do (gfc_code *code)\n     }\n }\n \n+static bool\n+oacc_is_parallel (gfc_code *code)\n+{\n+  return code->op == EXEC_OACC_PARALLEL || code->op == EXEC_OACC_PARALLEL_LOOP;\n+}\n+\n+static bool\n+oacc_is_kernels (gfc_code *code)\n+{\n+  return code->op == EXEC_OACC_KERNELS || code->op == EXEC_OACC_KERNELS_LOOP;\n+}\n \n static gfc_statement\n omp_code_to_statement (gfc_code *code)\n@@ -8625,6 +8636,19 @@ resolve_oacc_loop_blocks (gfc_code *code)\n   if (!oacc_is_loop (code))\n     return;\n \n+  if (code->op == EXEC_OACC_LOOP\n+      && code->ext.omp_clauses->lists[OMP_LIST_REDUCTION]\n+      && code->ext.omp_clauses->gang)\n+    {\n+      fortran_omp_context *c;\n+      for (c = omp_current_ctx; c; c = c->previous)\n+\tif (!oacc_is_loop (c->code))\n+\t  break;\n+      if (c == NULL || !(oacc_is_parallel (c->code)\n+\t\t\t || oacc_is_kernels (c->code)))\n+\tgfc_error (\"gang reduction on an orphan loop at %L\", &code->loc);\n+    }\n+\n   if (code->ext.omp_clauses->tile_list && code->ext.omp_clauses->gang\n       && code->ext.omp_clauses->worker && code->ext.omp_clauses->vector)\n     gfc_error (\"Tiled loop cannot be parallelized across gangs, workers and \""}, {"sha": "a0c7c71148c4be530161d984f307fdaebf529fc8", "filename": "gcc/omp-general.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -32,9 +32,10 @@ enum oacc_loop_flags {\n   OLF_INDEPENDENT = 1u << 2,\t/* Iterations are known independent.  */\n   OLF_GANG_STATIC = 1u << 3,\t/* Gang partitioning is static (has op). */\n   OLF_TILE\t= 1u << 4,\t/* Tiled loop. */\n+  OLF_REDUCTION = 1u << 5,\t/* Reduction loop.  */\n   \n   /* Explicitly specified loop axes.  */\n-  OLF_DIM_BASE = 5,\n+  OLF_DIM_BASE = 6,\n   OLF_DIM_GANG   = 1u << (OLF_DIM_BASE + GOMP_DIM_GANG),\n   OLF_DIM_WORKER = 1u << (OLF_DIM_BASE + GOMP_DIM_WORKER),\n   OLF_DIM_VECTOR = 1u << (OLF_DIM_BASE + GOMP_DIM_VECTOR),"}, {"sha": "de3a26e08fcf245ad94ab66f595837978d2b7688", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -8271,6 +8271,10 @@ lower_oacc_head_mark (location_t loc, tree ddvar, tree clauses,\n \t  tag |= OLF_TILE;\n \t  break;\n \n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  tag |= OLF_REDUCTION;\n+\t  break;\n+\n \tdefault:\n \t  continue;\n \t}"}, {"sha": "0aec26b04e7de9683bdb53ad6488f6603f261ca7", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -1611,6 +1611,13 @@ oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask,\n \t non-innermost available level.  */\n       unsigned this_mask = GOMP_DIM_MASK (GOMP_DIM_GANG);\n \n+      /* Orphan reductions cannot have gang partitioning.  */\n+      if ((loop->flags & OLF_REDUCTION)\n+\t  && oacc_get_fn_attrib (current_function_decl)\n+\t  && !lookup_attribute (\"omp target entrypoint\",\n+\t\t\t\tDECL_ATTRIBUTES (current_function_decl)))\n+\tthis_mask = GOMP_DIM_MASK (GOMP_DIM_WORKER);\n+\n       /* Find the first outermost available partition. */\n       while (this_mask <= outer_mask)\n \tthis_mask <<= 1;"}, {"sha": "9e34614eb15d8abe50b064e94d700daed2a62d37", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-routine.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -44,6 +44,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(+:sum)\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n@@ -53,12 +54,14 @@ void acc_routine (void)\n     for (i = 0; i < 10; i++)\n       {\n         #pragma acc loop reduction(+:sum)\n+\t// { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n         for (j = 0; j < 10; j++)\n           #pragma acc loop reduction(+:sum)\n           for (k = 0; k < 10; k++)\n             sum = 1;\n \n         #pragma acc loop reduction(-:diff)\n+\t// { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n         for (j = 0; j < 10; j++)\n           #pragma acc loop reduction(-:diff)\n           for (k = 0; k < 10; k++)"}, {"sha": "9bd79dea4cfb970dd4204c0b8c3d831d917f82a2", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-routine.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -11,6 +11,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum)\n         for (k = 0; k < 10; k++)\n@@ -19,6 +20,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         for (k = 0; k < 10; k++)\n           #pragma acc loop reduction(+:sum)\n@@ -28,6 +30,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n         // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n@@ -39,6 +42,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n         for (k = 0; k < 10; k++)\n@@ -47,6 +51,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop reduction(-:sum)\n         for (k = 0; k < 10; k++)\n@@ -55,6 +60,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n         #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n         // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n@@ -66,6 +72,7 @@ void acc_routine (void)\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n       #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       for (j = 0; j < 10; j++)\n       #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n       // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n@@ -78,12 +85,14 @@ void acc_routine (void)\n     for (i = 0; i < 10; i++)\n       {\n         #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+\t// { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n         for (j = 0; j < 10; j++)\n           #pragma acc loop reduction(+:sum)\n           for (k = 0; k < 10; k++)\n             sum = 1;\n \n         #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+\t// { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n         for (j = 0; j < 10; j++)\n           #pragma acc loop reduction(-:diff)\n           for (k = 0; k < 10; k++)"}, {"sha": "d2fec1082149bfaa8ac23fc0066f72db043f603b", "filename": "gcc/testsuite/c-c++-common/goacc/orphan-reductions-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-1.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -0,0 +1,56 @@\n+/* Test orphan reductions.  */\n+\n+/* { dg-do compile } */\n+\n+#pragma acc routine seq\n+int\n+seq_reduction (int n)\n+{\n+  int i, sum = 0;\n+#pragma acc loop seq reduction(+:sum)\n+  for (i = 0; i < n; i++)\n+    sum = sum + 1;\n+\n+  return sum;\n+}\n+\n+#pragma acc routine gang\n+int\n+gang_reduction (int n)\n+{\n+  int i, s1 = 0, s2 = 0;\n+#pragma acc loop gang reduction(+:s1) /* { dg-error \"gang reduction on an orphan loop\" } */\n+  for (i = 0; i < n; i++)\n+    s1 = s1 + 2;\n+\n+#pragma acc loop gang reduction(+:s2) /* { dg-error \"gang reduction on an orphan loop\" } */\n+  for (i = 0; i < n; i++)\n+    s2 = s2 + 2;\n+\n+\n+  return s1 + s2;\n+}\n+\n+#pragma acc routine worker\n+int\n+worker_reduction (int n)\n+{\n+  int i, sum = 0;\n+#pragma acc loop worker reduction(+:sum)\n+  for (i = 0; i < n; i++)\n+    sum = sum + 3;\n+\n+  return sum;\n+}\n+\n+#pragma acc routine vector\n+int\n+vector_reduction (int n)\n+{\n+  int i, sum = 0;\n+#pragma acc loop vector reduction(+:sum)\n+  for (i = 0; i < n; i++)\n+    sum = sum + 4;\n+\n+  return sum;\n+}"}, {"sha": "941e5c6126ac1c57f9bd596c46045f05887f41c6", "filename": "gcc/testsuite/c-c++-common/goacc/orphan-reductions-2.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Forphan-reductions-2.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -0,0 +1,87 @@\n+/* Ensure that the middle end does not assign gang level parallelism\n+   to orphan loop containing reductions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fopt-info-optimized-omp\" } */\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } */\n+\n+#pragma acc routine gang\n+int\n+f1 () /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" } */\n+{\n+  int sum = 0, i;\n+\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC worker vector loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+    sum++;\n+\n+  return sum;\n+}\n+\n+#pragma acc routine gang\n+int\n+f2 () /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" } */\n+{\n+  int sum = 0, i, j;\n+\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC worker loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC vector loop parallelism\" } */\n+    for (j = 0; j < 100; j++)\n+      sum++;\n+\n+  return sum;\n+}\n+\n+#pragma acc routine gang\n+int\n+f3 () /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" } */\n+{\n+  int sum = 0, i, j, k;\n+\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC worker loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC seq loop parallelism\" } */\n+    /* { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } */\n+    for (j = 0; j < 100; j++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC vector loop parallelism\" } */\n+      for (k = 0; k < 100; k++)\n+\tsum++;\n+\n+  return sum;\n+}\n+\n+int\n+main ()\n+{\n+  int sum = 0, i, j, k;\n+\n+#pragma acc parallel copy (sum)\n+  {\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC gang vector loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+    sum++;\n+  }\n+\n+#pragma acc parallel copy (sum)\n+  {\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC gang worker loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC vector loop parallelism\" } */\n+    for (j = 0; j < 100; j++)\n+      sum++;\n+  }\n+\n+#pragma acc parallel copy (sum)\n+  {\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC gang loop parallelism\" } */\n+  for (i = 0; i < 100; i++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC worker loop parallelism\" } */\n+    for (j = 0; j < 100; j++)\n+#pragma acc loop reduction (+:sum) /* { dg-optimized \"assigned OpenACC vector loop parallelism\" } */\n+      for (k = 0; k < 100; k++)\n+\tsum++;\n+  }\n+\n+  return sum;\n+}"}, {"sha": "f6e25151e1ecff56913100860be0409254dd3fea", "filename": "gcc/testsuite/gcc.dg/goacc/loop-processing-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -15,4 +15,4 @@ void vector_1 (int *ary, int size)\n   }\n }\n \n-/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 24\\(1\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccloops\" } } */\n+/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 44\\(1\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 68\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 68\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccloops\" } } */"}, {"sha": "e8264114714b041c42fc9c1649ac0d2df1075c7a", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-routine.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -59,6 +59,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(+:sum)\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)\n         do k = 1, 10\n@@ -70,6 +71,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum) reduction(-:diff)\n     do i = 1, 10\n       !$acc loop reduction(+:sum)\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)\n         do k = 1, 10\n@@ -78,6 +80,7 @@ subroutine acc_routine ()\n       end do\n \n       !$acc loop reduction(-:diff)\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(-:diff)\n         do k = 1, 10"}, {"sha": "98b1aa641c07253f526529feb04215b937f5ed9e", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-routine.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -10,6 +10,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)\n         do k = 1, 10\n@@ -21,6 +22,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         do k = 1, 10\n           !$acc loop reduction(+:sum)\n@@ -34,6 +36,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n         ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n@@ -49,6 +52,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n         do k = 1, 10\n@@ -60,6 +64,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(-:sum)\n         do k = 1, 10\n@@ -71,6 +76,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n         ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n@@ -86,6 +92,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n         ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n@@ -101,6 +108,7 @@ subroutine acc_routine ()\n     !$acc loop reduction(+:sum) reduction(-:diff)\n     do i = 1, 10\n       !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(+:sum)\n         do k = 1, 10\n@@ -109,6 +117,7 @@ subroutine acc_routine ()\n       end do\n \n       !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do j = 1, 10\n         !$acc loop reduction(-:diff)\n         do k = 1, 10"}, {"sha": "c7fcc9d4ac53d4554944dc9492eb1d556fb4c51e", "filename": "gcc/testsuite/gfortran.dg/goacc/orphan-reductions-1.f90", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -0,0 +1,206 @@\n+! Verify that gang reduction on orphan OpenACC loops reported as errors.\n+\n+! { dg-do compile }\n+\n+subroutine s1\n+  implicit none\n+\n+  integer, parameter :: n = 100\n+  integer :: i, sum\n+  sum = 0\n+\n+  !$acc parallel reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel loop gang reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+\n+  !$acc parallel\n+  !$acc loop gang reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+end subroutine s1\n+\n+subroutine s2\n+  implicit none\n+  !$acc routine worker\n+\n+  integer, parameter :: n = 100\n+  integer :: i, j, sum\n+  sum = 0\n+\n+  !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+\n+  !$acc loop reduction(+:sum)\n+  do i = 1, n\n+     !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+     do j = 1, n\n+        sum = sum + 1\n+     end do\n+  end do\n+end subroutine s2\n+\n+integer function f1 ()\n+  implicit none\n+\n+  integer, parameter :: n = 100\n+  integer :: i, sum\n+  sum = 0\n+\n+  !$acc parallel reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel loop gang reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+\n+  !$acc parallel\n+  !$acc loop gang reduction(+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+\n+  f1 = sum\n+end function f1\n+\n+integer function f2 ()\n+  implicit none\n+  !$acc routine worker\n+\n+  integer, parameter :: n = 100\n+  integer :: i, j, sum\n+  sum = 0\n+\n+  !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+\n+  !$acc loop reduction(+:sum)\n+  do i = 1, n\n+     !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+     do j = 1, n\n+        sum = sum + 1\n+     end do\n+  end do\n+\n+  f2 = sum\n+end function f2\n+\n+module m\n+contains\n+  subroutine s3\n+    implicit none\n+\n+    integer, parameter :: n = 100\n+    integer :: i, sum\n+    sum = 0\n+\n+    !$acc parallel reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+    !$acc end parallel\n+\n+    !$acc parallel loop gang reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+\n+    !$acc parallel\n+    !$acc loop gang reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+    !$acc end parallel\n+  end subroutine s3\n+\n+  subroutine s4\n+    implicit none\n+    !$acc routine worker\n+\n+    integer, parameter :: n = 100\n+    integer :: i, j, sum\n+    sum = 0\n+\n+    !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, n\n+       !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+       do j = 1, n\n+          sum = sum + 1\n+       end do\n+    end do\n+  end subroutine s4\n+\n+  integer function f3 ()\n+    implicit none\n+\n+    integer, parameter :: n = 100\n+    integer :: i, sum\n+    sum = 0\n+\n+    !$acc parallel reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+    !$acc end parallel\n+\n+    !$acc parallel loop gang reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+\n+    !$acc parallel\n+    !$acc loop gang reduction(+:sum)\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+    !$acc end parallel\n+\n+    f3 = sum\n+  end function f3\n+\n+  integer function f4 ()\n+    implicit none\n+    !$acc routine worker\n+\n+    integer, parameter :: n = 100\n+    integer :: i, j, sum\n+    sum = 0\n+\n+    !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+    do i = 1, n\n+       sum = sum + 1\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, n\n+       !$acc loop gang reduction(+:sum) ! { dg-error \"gang reduction on an orphan loop\" }\n+       do j = 1, n\n+          sum = sum + 1\n+       end do\n+    end do\n+\n+    f4 = sum\n+  end function f4\n+end module m"}, {"sha": "7ff0a57e620f1c7a447cd7e2aeaa0065d1f8f514", "filename": "gcc/testsuite/gfortran.dg/goacc/orphan-reductions-2.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-2.f90?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -0,0 +1,89 @@\n+! Ensure that the middle end does not assign gang level parallelism to\n+! orphan loop containing reductions.\n+\n+! { dg-do compile }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-Wopenacc-parallelism\" }\n+\n+subroutine s1 ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" }\n+  implicit none\n+  !$acc routine gang\n+  integer i, sum\n+\n+  sum = 0\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC worker vector loop parallelism\" }\n+  do i = 1, 10\n+     sum = sum + 1\n+  end do\n+end subroutine s1\n+\n+subroutine s2 ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" }\n+  implicit none\n+  !$acc routine gang\n+  integer i, j, sum\n+\n+  sum = 0\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC worker loop parallelism\" }\n+  do i = 1, 10\n+     !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC vector loop parallelism\" }\n+     do j = 1, 10\n+        sum = sum + 1\n+     end do\n+  end do\n+end subroutine s2\n+\n+subroutine s3 ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" }\n+  implicit none\n+  !$acc routine gang\n+  integer i, j, k, sum\n+\n+  sum = 0\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC worker loop parallelism\" }\n+  do i = 1, 10\n+     !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC seq loop parallelism\" }\n+     ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+     do j = 1, 10\n+        !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC vector loop parallelism\" }\n+        do k = 1, 10\n+           sum = sum + 1\n+        end do\n+     end do\n+  end do\n+end subroutine s3\n+\n+subroutine s4\n+  implicit none\n+\n+  integer i, j, k, sum\n+\n+  sum = 0\n+  !$acc parallel copy(sum)\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC gang vector loop parallelism\" }\n+  do i = 1, 10\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel copy(sum)\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC gang worker loop parallelism\" }\n+  do i = 1, 10\n+     !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC vector loop parallelism\" }\n+     do j = 1, 10\n+        sum = sum + 1\n+     end do\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel copy(sum)\n+  !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC gang loop parallelism\" }\n+  do i = 1, 10\n+     !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC worker loop parallelism\" }\n+     do j = 1, 10\n+        !$acc loop reduction (+:sum) ! { dg-optimized \"assigned OpenACC vector loop parallelism\" }\n+        do k = 1, 10\n+           sum = sum + 1\n+        end do\n+     end do\n+  end do\n+  !$acc end parallel\n+end subroutine s4"}, {"sha": "80d64030414d7657373cedaecd4a0e549388188c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7dac2c0dcb087da9e4018943c023c0678234a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7dac2c0dcb087da9e4018943c023c0678234a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=2b7dac2c0dcb087da9e4018943c023c0678234a3", "patch": "@@ -3,6 +3,7 @@\n \n ! { dg-additional-sources parallel-dims-aux.c }\n ! { dg-do run }\n+  ! { dg-skip-if TODO { *-*-* } }\n ! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n \n ! { dg-additional-options \"-fopt-info-note-omp\" }"}]}