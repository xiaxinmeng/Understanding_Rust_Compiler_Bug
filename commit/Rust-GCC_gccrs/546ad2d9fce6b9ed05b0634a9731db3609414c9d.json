{"sha": "546ad2d9fce6b9ed05b0634a9731db3609414c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2YWQyZDlmY2U2YjllZDA1YjA2MzRhOTczMWRiMzYwOTQxNGM5ZA==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-08-16T09:41:33Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-08-16T09:41:33Z"}, "message": "* tree-ssa-loop-niter.c (scev_probably_wraps_p): Reword a comment.\n\nFrom-SVN: r103152", "tree": {"sha": "044bb428cfee06d0eb3cfb07601e98fd7fdcba38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044bb428cfee06d0eb3cfb07601e98fd7fdcba38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/546ad2d9fce6b9ed05b0634a9731db3609414c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ad2d9fce6b9ed05b0634a9731db3609414c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546ad2d9fce6b9ed05b0634a9731db3609414c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ad2d9fce6b9ed05b0634a9731db3609414c9d/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c39be09e9537d1d642cc49a48d2a2d76a7d960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c39be09e9537d1d642cc49a48d2a2d76a7d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c39be09e9537d1d642cc49a48d2a2d76a7d960"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "c9df105860083041583c948396bd5f4981bee178", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ad2d9fce6b9ed05b0634a9731db3609414c9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ad2d9fce6b9ed05b0634a9731db3609414c9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=546ad2d9fce6b9ed05b0634a9731db3609414c9d", "patch": "@@ -1,3 +1,7 @@\n+2005-08-16  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\t* tree-ssa-loop-niter.c (scev_probably_wraps_p): Reword a comment.\n+\n 2005-08-15  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \tPR target/23355"}, {"sha": "ce4b3cf7df195052bc368cbe168d8bccc7ee7f93", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ad2d9fce6b9ed05b0634a9731db3609414c9d/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ad2d9fce6b9ed05b0634a9731db3609414c9d/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=546ad2d9fce6b9ed05b0634a9731db3609414c9d", "patch": "@@ -1891,19 +1891,24 @@ scev_probably_wraps_p (tree type, tree base, tree step,\n \n   /* If AT_STMT represents a cast operation, we may not be able to\n      take advantage of the undefinedness of signed type evolutions.\n+\n+     implement-c.texi states: \"For conversion to a type of width\n+     N, the value is reduced modulo 2^N to be within range of the\n+     type;\"\n+\n      See PR 21959 for a test case.  Essentially, given a cast\n      operation\n-     \t\tunsigned char i;\n-\t\tsigned char i.0;\n+     \t\tunsigned char uc;\n+\t\tsigned char sc;\n \t\t...\n-     \t\ti.0_6 = (signed char) i_2;\n-\t\tif (i.0_6 < 0)\n+     \t\tsc = (signed char) uc;\n+\t\tif (sc < 0)\n \t\t  ...\n \n-     where i_2 and i.0_6 have the scev {0, +, 1}, we would consider\n-     i_2 to wrap around, but not i.0_6, because it is of a signed\n-     type.  This causes VRP to erroneously fold the predicate above\n-     because it thinks that i.0_6 cannot be negative.  */\n+     where uc and sc have the scev {0, +, 1}, we would consider uc to\n+     wrap around, but not sc, because it is of a signed type.  This\n+     causes VRP to erroneously fold the predicate above because it\n+     thinks that sc cannot be negative.  */\n   if (at_stmt && TREE_CODE (at_stmt) == MODIFY_EXPR)\n     {\n       tree rhs = TREE_OPERAND (at_stmt, 1);"}]}