{"sha": "fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3ZjBhODA2Y2QwYWRlMmM5M2JlYmNhM2Y5N2VhNWVlNWVlZGNjMg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-07-02T06:17:36Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-07-02T06:17:36Z"}, "message": "configopts.html, [...]: Tweaks.\n\n2002-07-02  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/configopts.html, docs/html/install.html:  Tweaks.\n\t* include/ext/algorithm, include/ext/hash_map, include/ext/hash_set,\n\tinclude/ext/iterator, include/ext/numeric, include/ext/rb_tree,\n\tinclude/ext/slist, include/ext/stl_rope.h:  Add doxygen hooks.\n\nFrom-SVN: r55172", "tree": {"sha": "75df7cecca57c01063deb91e43b2243b4bb6f93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75df7cecca57c01063deb91e43b2243b4bb6f93b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/comments", "author": null, "committer": null, "parents": [{"sha": "a3acdc0cc1e97311c411656903f7d4e196ed59d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3acdc0cc1e97311c411656903f7d4e196ed59d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3acdc0cc1e97311c411656903f7d4e196ed59d7"}], "stats": {"total": 150, "additions": 125, "deletions": 25}, "files": [{"sha": "2999d1048edb2a3f4f8ec3406ff11faccda4e626", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -1,3 +1,10 @@\n+2002-07-02  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/configopts.html, docs/html/install.html:  Tweaks.\n+\t* include/ext/algorithm, include/ext/hash_map, include/ext/hash_set,\n+\tinclude/ext/iterator, include/ext/numeric, include/ext/rb_tree,\n+\tinclude/ext/slist, include/ext/stl_rope.h:  Add doxygen hooks.\n+\n 2002-07-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/backward/strstream: Remove namespace std. Transfer to..."}, {"sha": "204aba5113618fa0d1d76a5f7d833404f5218ee4", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -26,7 +26,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n <p>Here are some of the non-obvious options to libstdc++'s configure.\n    Keep in mind that\n    <!-- This SECnn should be the \"Choosing Package Options\" section. -->\n-   <a href=\"http://sources.redhat.com/autoconf/autoconf.html#SEC74\">they\n+   <a href=\"http://www.gnu.org/manual/autoconf/html_node/Package-Options.html#Package%20Options\">they\n    all have opposite forms as well</a>\n    (enable/disable and with/without).  The defaults are for current\n    development sources.\n@@ -46,14 +46,13 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n  <dt><code>--enable-debug  </code>\n  <dd><p>The configure script will automatically detect the highest\n-        level of optimization that the compiler in use can use\n-        (certain versions of g++ will ICE if given the <code>-O2</code>\n-        option, but this is fixed in later versions of the compiler).\n+        level of optimization that the compiler in use can use.\n         This --enable flag will disable all optimizations and instruct\n         the compiler to emit as much extra debugging information as it\n-        can, for use inside GDB. Note this make command, executed in\n+        can, for use inside GDB.  Note this make command, executed in\n         the build directory, will do much the same thing, without the\n-        configuration difference:<code>make CXXFLAGS='-g -O0' all</code>\n+        configuration difference:\n+        <code>make CXXFLAGS='-g -O0' all</code>\n      </p>\n \n  <dt><code>--enable-cstdio  </code>"}, {"sha": "a76a932d92e15081ab5a71dd9a76cb51ee1632f4", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -73,7 +73,7 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n       with C++ exception handling related to this change in\n       libstdc++-v3).  The version of these tools should be\n       <code>2.10.90</code>, or later, and you can get snapshots (as\n-      well as releases) of binutils \n+      well as releases) of binutils\n       <a href=\"ftp://sources.redhat.com/pub/binutils\">here</a>. The\n       configure process will automatically detect and use these\n       features if the underlying support is present.\n@@ -87,7 +87,7 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n       configure process will automatically detect and use these\n       features if the underlying support is present.\n    </p>\n- \n+\n     <p>Finally, a few system-specific requirements:\n       <dl>\n         <dt> linux\n@@ -103,22 +103,22 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n         named locale tests. If this isn't an issue, don't worry about\n         it. If named locales are needed, the underlying locale\n         information must be installed. Note that rebuilding libstdc++\n-        after locales are installed is not necessary. \n-\t\n-\t<p> To install\n+        after locales are installed is not necessary.\n+\n+        <p> To install\n         support for locales, do only one of the following: </p>\n         <p>\n- \t  <li> install all locales\n-\t  <p> <code> export LC_ALL=C </code> </p>\n-\t  <p> <code> rpm -e glibc-common --nodeps </code> </p>\n-\t  <p> <code> rpm -i --define \"_install_langs all\" \n-\t  glibc-common-2.2.5-34.i386.rpm </code> </p>\n-\t  </li> \n-\t  <li> install just the necessary locales\n-\t  <p> <code> localedef -i de_DE -f ISO-8859-1 de_DE </code> </p>\n-\t  </li> \n+          <li> install all locales\n+          <p> <code> export LC_ALL=C </code> </p>\n+          <p> <code> rpm -e glibc-common --nodeps </code> </p>\n+          <p> <code> rpm -i --define \"_install_langs all\"\n+          glibc-common-2.2.5-34.i386.rpm </code> </p>\n+          </li>\n+          <li> install just the necessary locales\n+          <p> <code> localedef -i de_DE -f ISO-8859-1 de_DE </code> </p>\n+          </li>\n         </p>\n-\t</dd>\n+        </dd>\n       </dt>\n     </dl>\n    </p>\n@@ -131,7 +131,7 @@ <h2><a name=\"srcsetup\">Setting up the source directories</a></h2>\n       <ul>\n          <li><em>gccsrcdir</em>:  The directory holding the source of the\n                  compiler.  It should have several subdirectories like\n-                 <em>gccsrcdir</em>/libio and <em>gccsrcdir</em>/gcc.\n+                 <em>gccsrcdir</em>/libiberty and <em>gccsrcdir</em>/gcc.\n          <li><em>libsrcdir</em>:  The directory holding the source of the\n                  C++ library.\n          <li><em>gccbuilddir</em>:  The build directory for the compiler\n@@ -216,7 +216,7 @@ <h3>[re]building <em>everything</em></h3>\n    <h3>[re]building only libstdc++</h3>\n    <p>To rebuild just libstdc++, use:\n       <pre>\n-   make all-target-<em>libstdc++-v3</em></pre>\n+   make all-target-libstdc++-v3</pre>\n       This will configure and build the C++ library in the\n       <em>gccbuilddir/cpu-vendor-os/</em>libstdc++ directory.\n    </p>\n@@ -232,7 +232,7 @@ <h3>[re]building only libstdc++</h3>\n    <p>You're done.  Now install the rebuilt pieces with\n       <pre>\n    make install</pre>\n-      or \n+      or\n       <pre>\n    make install-gcc\n    make install-target-libstdc++-v3</pre>"}, {"sha": "b35d36f5e4222ecb74d40219821f764396e0487d", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -247,6 +247,11 @@ namespace __gnu_cxx\n \n   // random_sample and random_sample_n (extensions, not part of the standard).\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _ForwardIter, typename _OutputIter, typename _Distance>\n     _OutputIter\n     random_sample_n(_ForwardIter __first, _ForwardIter __last,\n@@ -273,6 +278,11 @@ namespace __gnu_cxx\n       return __out;\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _ForwardIter, typename _OutputIter, typename _Distance,\n \t   typename _RandomNumberGenerator>\n     _OutputIter\n@@ -353,6 +363,11 @@ namespace __gnu_cxx\n       return __out + __m;\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _InputIter, typename _RandomAccessIter>\n     inline _RandomAccessIter\n     random_sample(_InputIter __first, _InputIter __last,\n@@ -367,6 +382,11 @@ namespace __gnu_cxx\n \t\t\t     __out_first, __out_last - __out_first);\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _InputIter, typename _RandomAccessIter, \n \t   typename _RandomNumberGenerator>\n     inline _RandomAccessIter\n@@ -418,6 +438,11 @@ namespace __gnu_cxx\n       return true;\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _RandomAccessIter>\n     inline bool\n     is_heap(_RandomAccessIter __first, _RandomAccessIter __last)\n@@ -430,6 +455,11 @@ namespace __gnu_cxx\n       return __is_heap(__first, __last - __first);\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _RandomAccessIter, typename _StrictWeakOrdering>\n     inline bool\n     is_heap(_RandomAccessIter __first, _RandomAccessIter __last,\n@@ -448,6 +478,11 @@ namespace __gnu_cxx\n   // nondescending order.  This is an extension, not part of the C++\n   // standard.\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _ForwardIter>\n     bool\n     is_sorted(_ForwardIter __first, _ForwardIter __last)\n@@ -469,6 +504,11 @@ namespace __gnu_cxx\n       return true;\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _ForwardIter, typename _StrictWeakOrdering>\n     bool\n     is_sorted(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)"}, {"sha": "b66758de4462d92b367e92dd373b3a1721ac3b62", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -83,7 +83,11 @@ class hash_map;\n template <class _Key, class _Tp, class _HashFn, class _EqKey, class _Alloc>\n inline bool operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,\n                        const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&);\n-\n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Key, class _Tp, class _HashFcn, class _EqualKey,\n           class _Alloc>\n class hash_map\n@@ -235,6 +239,11 @@ inline bool\n operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,\n            const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2);\n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Key, class _Tp, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multimap\n {"}, {"sha": "0f420e2dd7ebc27b1faabbdaff008634f9314d22", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -85,6 +85,11 @@ inline bool\n operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,\n            const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2);\n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_set\n {\n@@ -236,6 +241,11 @@ operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,\n            const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2);\n \n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multiset\n {"}, {"sha": "f23212f241d6b48134a146d108cbf0f9c99f87a1", "filename": "libstdc++-v3/include/ext/iterator", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -93,6 +93,11 @@ namespace __gnu_cxx\n       __n += __last - __first;\n     }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _InputIterator, typename _Distance>\n     inline void\n     distance(_InputIterator __first, _InputIterator __last,"}, {"sha": "6770461b5c6cc04636c8781a3d89ee344f005688", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -105,18 +105,33 @@ namespace __gnu_cxx\n   // Alias for the internal name __power.  Note that power is an extension,\n   // not part of the C++ standard.\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _Tp, typename _Integer, typename _MonoidOperation>\n     inline _Tp\n     power(_Tp __x, _Integer __n, _MonoidOperation __monoid_op)\n     { return __power(__x, __n, __monoid_op); }\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _Tp, typename _Integer>\n     inline _Tp\n     power(_Tp __x, _Integer __n)\n     { return __power(__x, __n); }\n \n   // iota is not part of the C++ standard.  It is an extension.\n \n+  /**\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+   *  @doctodo\n+  */\n   template<typename _ForwardIter, typename _Tp>\n     void \n     iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)"}, {"sha": "394124383828e993259db4ccc36ab790a7b9799b", "filename": "libstdc++-v3/include/ext/rb_tree", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -73,6 +73,11 @@ using std::allocator;\n // Class rb_tree is not part of the C++ standard.  It is provided for\n // compatibility with the HP STL.\n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Key, class _Value, class _KeyOfValue, class _Compare,\n           class _Alloc = allocator<_Value> >\n struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>"}, {"sha": "35e089af53067f1bee97c13ca1b3041e9fcde8cb", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -295,6 +295,11 @@ _Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,\n   return __last_node;\n }\n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _Tp, class _Alloc = allocator<_Tp> >\n class slist : private _Slist_base<_Tp,_Alloc>\n {"}, {"sha": "bb9bb47258d1699a7d25b46d9c39ecf4c1f3e414", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=fc7f0a806cd0ade2c93bebca3f97ea5ee5eedcc2", "patch": "@@ -1238,6 +1238,11 @@ struct _Rope_base\n };    \n \n \n+/**\n+ *  This is an SGI extension.\n+ *  @ingroup SGIextensions\n+ *  @doctodo\n+*/\n template <class _CharT, class _Alloc>\n class rope : public _Rope_base<_CharT,_Alloc> {\n     public:"}]}