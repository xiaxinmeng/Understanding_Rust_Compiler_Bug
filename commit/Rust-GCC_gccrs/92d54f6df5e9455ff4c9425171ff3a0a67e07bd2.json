{"sha": "92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkNTRmNmRmNWU5NDU1ZmY0Yzk0MjUxNzFmZjNhMGE2N2UwN2JkMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2010-11-03T20:35:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-11-03T20:35:34Z"}, "message": "Add SF min/max under VSX, using the normal double operations\n\nFrom-SVN: r166273", "tree": {"sha": "c8d3b13293610de5fcf133084a4d76dd1f025717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d3b13293610de5fcf133084a4d76dd1f025717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/comments", "author": null, "committer": null, "parents": [{"sha": "0787e2e7a766f7a358abdc88e9e6d339ec2ed30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0787e2e7a766f7a358abdc88e9e6d339ec2ed30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0787e2e7a766f7a358abdc88e9e6d339ec2ed30d"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "5c6387e3c7cd397b01136f3e488431ec01e91b13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "patch": "@@ -1,3 +1,10 @@\n+2010-11-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_minmax): Add support to use\n+\txsmindp/xsmaxdp on VSX for single precision min/max.\n+\t* config/rs6000/vsx.md (vsx_smaxsf3): Ditto.\n+\t(vsx_sminsf3): Ditto.\n+\n 2010-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* combine.c (try_combine): Fix formatting issues, improve comments and"}, {"sha": "7ec66999073d93d0b6307d23db3757700b56de6e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "patch": "@@ -17205,7 +17205,9 @@ rs6000_emit_minmax (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n   rtx target;\n \n   /* VSX/altivec have direct min/max insns.  */\n-  if ((code == SMAX || code == SMIN) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (mode))\n+  if ((code == SMAX || code == SMIN)\n+      && (VECTOR_UNIT_ALTIVEC_OR_VSX_P (mode)\n+\t  || (mode == SFmode && VECTOR_UNIT_VSX_P (DFmode))))\n     {\n       emit_insn (gen_rtx_SET (VOIDmode,\n \t\t\t      dest,"}, {"sha": "4e68987359736e0b25d256ebfcd4992b6c2b48ec", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "patch": "@@ -437,6 +437,28 @@\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n \n+;; Special VSX version of smin/smax for single precision floating point.  Since\n+;; both numbers are rounded to single precision, we can just use the DP version\n+;; of the instruction.\n+\n+(define_insn \"*vsx_smaxsf3\"\n+  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=f\")\n+        (smax:SF (match_operand:SF 1 \"vsx_register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"vsx_register_operand\" \"f\")))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n+  \"xsmaxdp %x0,%x1,%x2\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n+\n+(define_insn \"*vsx_sminsf3\"\n+  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=f\")\n+        (smin:SF (match_operand:SF 1 \"vsx_register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"vsx_register_operand\" \"f\")))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n+  \"xsmindp %x0,%x1,%x2\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n+\n (define_insn \"*vsx_sqrt<mode>2\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n         (sqrt:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,wa\")))]"}, {"sha": "206798dd9b31e8d251a04a3d330f9a971ebdaf26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "patch": "@@ -1,3 +1,8 @@\n+2010-11-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-sfminmax.c: New test for using double\n+\tprecision min/max for single precision on VSX.\n+\n 2010-11-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46289"}, {"sha": "d05ee19d3734f6a862ae0870f6177bf16bee4cee", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-sfminmax.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-sfminmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d54f6df5e9455ff4c9425171ff3a0a67e07bd2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-sfminmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-sfminmax.c?ref=92d54f6df5e9455ff4c9425171ff3a0a67e07bd2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler \"xsmaxdp\" } } */\n+/* { dg-final { scan-assembler \"xsmindp\" } } */\n+\n+float\n+do_fmin (float a, float b)\n+{\n+  return __builtin_fminf (a, b);\n+}\n+\n+float\n+do_fmax (float a, float b)\n+{\n+  return __builtin_fmaxf (a, b);\n+}"}]}