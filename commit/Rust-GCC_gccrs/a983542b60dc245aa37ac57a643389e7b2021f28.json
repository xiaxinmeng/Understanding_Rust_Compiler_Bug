{"sha": "a983542b60dc245aa37ac57a643389e7b2021f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4MzU0MmI2MGRjMjQ1YWEzN2FjNTdhNjQzMzg5ZTdiMjAyMWYyOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-03-15T04:31:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-15T04:31:27Z"}, "message": "re PR tree-optimization/79800 (wrong snprintf result range with precision in a narrow negative-positive range)\n\n\tPR tree-optimization/79800\n\t* gimple-ssa-sprintf.c (format_floating: Add argument.  Handle\n\tprecision in negative-positive range.\n\t(format_floating): Call non-const overload with adjusted precision.\n\n\tPR tree-optimization/79800\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Add test cases.\n\t* gcc.dg/tree-ssa/pr79800.c: New test.\n\nFrom-SVN: r246151", "tree": {"sha": "e75ecafa247efe6b929769f5d5da3ec40e64f3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e75ecafa247efe6b929769f5d5da3ec40e64f3d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a983542b60dc245aa37ac57a643389e7b2021f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a983542b60dc245aa37ac57a643389e7b2021f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a983542b60dc245aa37ac57a643389e7b2021f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a983542b60dc245aa37ac57a643389e7b2021f28/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76ca5f401d53091221b634f4e9774bc03dc8ffbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ca5f401d53091221b634f4e9774bc03dc8ffbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ca5f401d53091221b634f4e9774bc03dc8ffbe"}], "stats": {"total": 116, "additions": 85, "deletions": 31}, "files": [{"sha": "d9f1054b1eea0e9876160170c9460c5446c50c9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a983542b60dc245aa37ac57a643389e7b2021f28", "patch": "@@ -1,3 +1,10 @@\n+2017-03-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/79800\n+\t* gimple-ssa-sprintf.c (format_floating: Add argument.  Handle\n+\tprecision in negative-positive range.\n+\t(format_floating): Call non-const overload with adjusted precision.\n+\n 2017-03-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/79947\n@@ -10,7 +17,6 @@\n \t* builtin-attrs.def (ATTR_ALLOC_SIZE_2_NOTHROW_LIST): New macro.\n \t* builtins.def (aligned_alloc): Use it.\n \n-\n \tPR c/79936\n \t* Makefile.in (GTFILES): Add calls.c.\n \t* calls.c: Include \"gt-calls.h\"."}, {"sha": "2474391cadf6eb328a15f1397be4e14b1031f2c6", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=a983542b60dc245aa37ac57a643389e7b2021f28", "patch": "@@ -1499,11 +1499,13 @@ format_floating_max (tree type, char spec, HOST_WIDE_INT prec)\n }\n \n /* Return a range representing the minimum and maximum number of bytes\n-   that the directive DIR will output for any argument.  This function\n-   is used when the directive argument or its value isn't known.  */\n+   that the directive DIR will output for any argument.  PREC gives\n+   the adjusted precision range to account for negative precisions\n+   meaning the default 6.  This function is used when the directive\n+   argument or its value isn't known.  */\n \n static fmtresult\n-format_floating (const directive &dir)\n+format_floating (const directive &dir, const HOST_WIDE_INT prec[2])\n {\n   tree type;\n \n@@ -1532,8 +1534,8 @@ format_floating (const directive &dir)\n   /* The minimum output as determined by flags.  It's always at least 1.\n      When plus or space are set the output is preceded by either a sign\n      or a space.  */\n-  int flagmin = (1 /* for the first digit */\n-\t\t + (dir.get_flag ('+') | dir.get_flag (' ')));\n+  unsigned flagmin = (1 /* for the first digit */\n+\t\t      + (dir.get_flag ('+') | dir.get_flag (' ')));\n \n   /* When the pound flag is set the decimal point is included in output\n      regardless of precision.  Whether or not a decimal point is included\n@@ -1557,14 +1559,13 @@ format_floating (const directive &dir)\n \t\t\t + minprec\n \t\t\t + 3 /* p+0 */);\n \n-\tres.range.max = format_floating_max (type, 'a', dir.prec[1]);\n+\tres.range.max = format_floating_max (type, 'a', prec[1]);\n \tres.range.likely = res.range.min;\n \n \t/* The unlikely maximum accounts for the longest multibyte\n \t   decimal point character.  */\n \tres.range.unlikely = res.range.max;\n-\tif (dir.prec[0] != dir.prec[1]\n-\t    || dir.prec[0] == -1 || dir.prec[0] > 0)\n+\tif (dir.prec[1] > 0)\n \t  res.range.unlikely += target_mb_len_max () - 1;\n \n \tbreak;\n@@ -1573,23 +1574,18 @@ format_floating (const directive &dir)\n     case 'E':\n     case 'e':\n       {\n+\t/* Minimum output attributable to precision and, when it's\n+\t   non-zero, decimal point.  */\n+\tHOST_WIDE_INT minprec = prec[0] ? prec[0] + !radix : 0;\n+\n \t/* The minimum output is \"[-+]1.234567e+00\" regardless\n \t   of the value of the actual argument.  */\n-\tHOST_WIDE_INT minprec = 6 + !radix /* decimal point */;\n-\tif ((dir.prec[0] < 0 && dir.prec[1] > -1) || dir.prec[0] == 0)\n-\t  minprec = 0;\n-\telse if (dir.prec[0] > 0)\n-\t  minprec = dir.prec[0] + !radix /* decimal point */;\n-\n \tres.range.min = (flagmin\n \t\t\t + radix\n \t\t\t + minprec\n \t\t\t + 2 /* e+ */ + 2);\n-\t/* MPFR uses a precision of 16 by default for some reason.\n-\t   Set it to the C default of 6.  */\n-\tint maxprec = dir.prec[1] < 0 ? 6 : dir.prec[1];\n-\tres.range.max = format_floating_max (type, 'e', maxprec);\n \n+\tres.range.max = format_floating_max (type, 'e', prec[1]);\n \tres.range.likely = res.range.min;\n \n \t/* The unlikely maximum accounts for the longest multibyte\n@@ -1605,21 +1601,19 @@ format_floating (const directive &dir)\n     case 'F':\n     case 'f':\n       {\n+\t/* Minimum output attributable to precision and, when it's non-zero,\n+\t   decimal point.  */\n+\tHOST_WIDE_INT minprec = prec[0] ? prec[0] + !radix : 0;\n+\n \t/* The lower bound when precision isn't specified is 8 bytes\n \t   (\"1.23456\" since precision is taken to be 6).  When precision\n \t   is zero, the lower bound is 1 byte (e.g., \"1\").  Otherwise,\n \t   when precision is greater than zero, then the lower bound\n \t   is 2 plus precision (plus flags).  */\n-\tHOST_WIDE_INT minprec = 0;\n-\tif (dir.prec[0] < 0)\n-\t  minprec = dir.prec[1] < 0 ? 6 + !radix /* decimal point */ : 0;\n-\telse if (dir.prec[0])\n-\t  minprec = dir.prec[0] + !radix /* decimal point */;\n-\n \tres.range.min = flagmin + radix + minprec;\n \n \t/* Compute the upper bound for -TYPE_MAX.  */\n-\tres.range.max = format_floating_max (type, 'f', dir.prec[1]);\n+\tres.range.max = format_floating_max (type, 'f', prec[1]);\n \n \t/* The minimum output with unknown precision is a single byte\n \t   (e.g., \"0\") but the more likely output is 3 bytes (\"0.0\").  */\n@@ -1659,6 +1653,8 @@ format_floating (const directive &dir)\n \t    else if (maxprec < 0)\n \t      maxprec = 5;\n \t  }\n+\telse\n+\t  maxprec = prec[1];\n \n \tres.range.max = format_floating_max (type, spec, maxprec);\n \n@@ -1702,9 +1698,6 @@ format_floating (const directive &dir)\n static fmtresult\n format_floating (const directive &dir, tree arg)\n {\n-  if (!arg || TREE_CODE (arg) != REAL_CST)\n-    return format_floating (dir);\n-\n   HOST_WIDE_INT prec[] = { dir.prec[0], dir.prec[1] };\n \n   /* For an indeterminate precision the lower bound must be assumed\n@@ -1767,6 +1760,9 @@ format_floating (const directive &dir, tree arg)\n \t}\n     }\n \n+  if (!arg || TREE_CODE (arg) != REAL_CST)\n+    return format_floating (dir, prec);\n+\n   /* The minimum and maximum number of bytes produced by the directive.  */\n   fmtresult res;\n "}, {"sha": "616d03b59134f4334fee4eb4d1c6bf3cc825baac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a983542b60dc245aa37ac57a643389e7b2021f28", "patch": "@@ -1,3 +1,9 @@\n+2017-03-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/79800\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Add test cases.\n+\t* gcc.dg/tree-ssa/pr79800.c: New test.\n+\n 2017-03-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/79947"}, {"sha": "0b863a8aaaffc23a5ed3371bf734e6aba59d1ae5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-15.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c?ref=a983542b60dc245aa37ac57a643389e7b2021f28", "patch": "@@ -113,9 +113,16 @@ void test_unknown_precision_integer (int p, int i, double d)\n \n void test_unknown_precision_floating (int p, double d)\n {\n+  T ( 0, \"%.*a\", R (-1, 0), d); /* { dg-warning \"between 6 and 24 \" } */\n+  T ( 6, \"%.*a\", R (-1, 0), d); /* { dg-warning \"writing a terminating nul\" } */\n+  T ( 7, \"%.*a\", R (-1, 0), d);\n   T ( 7, \"%.*a\", p, d);\n   T (21, \"%.*a\", p, 3.141);\n \n+  T ( 0, \"%.*e\",  R (-1, 0), d); /* { dg-warning \"between 5 and 14 \" } */\n+  T ( 0, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"between 5 and 14 \" } */\n+  T ( 5, \"%.*e\",  R (-1, 6), d); /* { dg-warning \"writing a terminating nul\" } */\n+  T ( 6, \"%.*e\",  R (-1, 6), d);\n   /* \"%.0e\", 0.0 results in 5 bytes: \"0e+00\"  */\n   T ( 5, \"%.*e\",  p, d);      /* { dg-warning \"writing a terminating nul\" } */\n   /* \"%#.0e\", 0.0 results in 6 bytes: \"0.e+00\"  */\n@@ -125,6 +132,10 @@ void test_unknown_precision_floating (int p, double d)\n   T ( 6, \"%#.*e\", p, 3.141);  /* { dg-warning \"writing a terminating nul\" } */\n   T ( 7, \"%#.*e\", p, 3.141);\n \n+  T ( 0, \"%.*f\",  R (-1, 0), d); /* { dg-warning \"between 1 and 317 \" } */\n+  T ( 0, \"%.*f\",  R (-1, 6), d); /* { dg-warning \"between 1 and 317 \" } */\n+  T ( 3, \"%.*f\",  R (-1, 6), d); /* { dg-warning \"may write a terminating nul\" } */\n+  T ( 4, \"%.*f\",  R (-1, 6), d);\n   /* \"%.0f\", 0.0 results in 1 byte: \"0\" but precision of at least 1\n      is likely, resulting in \"0.0\".  */\n   T ( 3, \"%.*f\",  p, d);   /* { dg-warning \"may write a terminating nul\" } */\n@@ -138,12 +149,16 @@ void test_unknown_precision_floating (int p, double d)\n   T ( 3, \"%#.*f\", p, 3.141); /* { dg-warning \"may write a terminating nul\" } */\n   T ( 4, \"%#.*f\", p, 3.141);\n \n+  T ( 0, \"%.*g\",  R (-1, 0), d); /* { dg-warning \"between 1 and 13 \" } */\n+  T (12, \"%.*g\",  R (-1, 0), d); /* { dg-warning \"may write a terminating nul\" } */\n+  T (13, \"%.*g\",  R (-1, 0), d);\n   T (12, \"%.*g\",  p, d);   /* { dg-warning \"may write a terminating nul\" } */\n   T (12, \"%#.*g\", p, d);   /* { dg-warning \"may write a terminating nul\" } */\n   T (13, \"%.*g\",  p, d);\n   T (13, \"%#.*g\", p, d);\n-  T ( 6, \"%#.*g\", R (-1, 0), d);/* { dg-warning \"may write a terminating nul\" } */\n-  T ( 7, \"%#.*g\", R (-1, 0), d);\n+  T (12, \"%#.*g\", R (-1, 0), d);/* { dg-warning \"may write a terminating nul\" } */\n+  T (12, \"%#.*g\", R (-1, 6), d);/* { dg-warning \"may write a terminating nul\" } */\n+  T (13, \"%#.*g\", R (-1, 0), d);\n   T ( 6, \"%#.*g\", R ( 0, 0), d);/* { dg-warning \"may write a terminating nul\" } */\n   T ( 7, \"%#.*g\", R ( 0, 0), d);\n   T ( 6, \"%#.*g\", R ( 0, 1), d);/* { dg-warning \"may write a terminating nul\" } */"}, {"sha": "180a6e7863141cae15958df6fff5c7410ce9e39f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79800.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79800.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a983542b60dc245aa37ac57a643389e7b2021f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79800.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79800.c?ref=a983542b60dc245aa37ac57a643389e7b2021f28", "patch": "@@ -0,0 +1,31 @@\n+/* PR 79800 - wrong snprintf result range with precision in a narrow\n+   negative-positive range\n+   { dg-do \"run\" }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define FMT \"%.*a\"\n+char fmt[] = FMT;\n+\n+volatile double x = 1.23456789;\n+\n+void f (int p)\n+{\n+  if (p < -1 || 0 < p)\n+    p = -1;\n+\n+  char d[30];\n+  int n1 = __builtin_sprintf (d, \"%.*a\", p, x);\n+  const char *s = n1 < 20 ? \"< 20\" : \">= 20\";\n+\n+  if (__builtin_strcmp (s, \">= 20\"))\n+    __builtin_abort ();\n+}\n+\n+volatile int i = -1;\n+\n+int main ()\n+{\n+  f (i);\n+\n+  return 0;\n+}"}]}