{"sha": "e08cc018ac1ed9e201d064c52d0a378b7014e636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4Y2MwMThhYzFlZDllMjAxZDA2NGM1MmQwYTM3OGI3MDE0ZTYzNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-02T21:24:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-02T21:24:56Z"}, "message": "re PR c++/50930 ([C++0x] Valid brace-or-equal-initializer of non-static data member rejected)\n\n\tPR c++/50930\n\t* init.c (build_aggr_init): Don't set LOOKUP_ONLYCONVERTING\n\tif the initializer has TARGET_EXPR_DIRECT_INIT_P.\n\t(expand_default_init): An initializer with TARGET_EXPR_DIRECT_INIT_P\n\tor TARGET_EXPR_LIST_INIT_P doesn't need more processing.\n\t* tree.c (bot_manip): Propagate TARGET_EXPR_IMPLICIT_P,\n\tTARGET_EXPR_LIST_INIT_P, TARGET_EXPR_DIRECT_INIT_P.\n\t* call.c (convert_like_real): Set TARGET_EXPR_DIRECT_INIT_P\n\tas appropriate on list-value-initialization.\n\nFrom-SVN: r180802", "tree": {"sha": "5cbcad8071adf2d4745f46369c097544401fe5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cbcad8071adf2d4745f46369c097544401fe5d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08cc018ac1ed9e201d064c52d0a378b7014e636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08cc018ac1ed9e201d064c52d0a378b7014e636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08cc018ac1ed9e201d064c52d0a378b7014e636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08cc018ac1ed9e201d064c52d0a378b7014e636/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "537e309ce321c058535a935e37b005069ef388d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537e309ce321c058535a935e37b005069ef388d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537e309ce321c058535a935e37b005069ef388d5"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "88f7d020b323f491e60d427ac5c8e18601271922", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -1,5 +1,15 @@\n 2011-11-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50930\n+\t* init.c (build_aggr_init): Don't set LOOKUP_ONLYCONVERTING\n+\tif the initializer has TARGET_EXPR_DIRECT_INIT_P.\n+\t(expand_default_init): An initializer with TARGET_EXPR_DIRECT_INIT_P\n+\tor TARGET_EXPR_LIST_INIT_P doesn't need more processing.\n+\t* tree.c (bot_manip): Propagate TARGET_EXPR_IMPLICIT_P,\n+\tTARGET_EXPR_LIST_INIT_P, TARGET_EXPR_DIRECT_INIT_P.\n+\t* call.c (convert_like_real): Set TARGET_EXPR_DIRECT_INIT_P\n+\tas appropriate on list-value-initialization.\n+\n \t* parser.c (cp_parser_decl_specifier_seq): Change \"C++0x\" to\n \t\"C++11\" in warnings.\n \t(cp_lexer_get_preprocessor_token): Likewise."}, {"sha": "ce8933afda9f764d690b33af050f31a8da503a65", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -5655,10 +5655,14 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    && CONSTRUCTOR_NELTS (expr) == 0\n \t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n \t  {\n+\t    bool direct = CONSTRUCTOR_IS_DIRECT_INIT (expr);\n \t    expr = build_value_init (totype, complain);\n \t    expr = get_target_expr_sfinae (expr, complain);\n \t    if (expr != error_mark_node)\n-\t      TARGET_EXPR_LIST_INIT_P (expr) = true;\n+\t      {\n+\t\tTARGET_EXPR_LIST_INIT_P (expr) = true;\n+\t\tTARGET_EXPR_DIRECT_INIT_P (expr) = direct;\n+\t      }\n \t    return expr;\n \t  }\n "}, {"sha": "ec7ba0e802a428acdd565c55b6a76fcdd858acc5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -1377,6 +1377,8 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   TREE_THIS_VOLATILE (exp) = 0;\n \n   if (init && TREE_CODE (init) != TREE_LIST\n+      && !(TREE_CODE (init) == TARGET_EXPR\n+\t   && TARGET_EXPR_DIRECT_INIT_P (init))\n       && !(BRACE_ENCLOSED_INITIALIZER_P (init)\n \t   && CONSTRUCTOR_IS_DIRECT_INIT (init)))\n     flags |= LOOKUP_ONLYCONVERTING;\n@@ -1459,10 +1461,28 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \n   if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CP_AGGREGATE_TYPE_P (type))\n+    /* A brace-enclosed initializer for an aggregate.  In C++0x this can\n+       happen for direct-initialization, too.  */\n+    init = digest_init (type, init, complain);\n+\n+  /* A CONSTRUCTOR of the target's type is a previously digested\n+     initializer, whether that happened just above or in\n+     cp_parser_late_parsing_nsdmi.\n+\n+     A TARGET_EXPR with TARGET_EXPR_DIRECT_INIT_P or TARGET_EXPR_LIST_INIT_P\n+     set represents the whole initialization, so we shouldn't build up\n+     another ctor call.  */\n+  if (init\n+      && (TREE_CODE (init) == CONSTRUCTOR\n+\t  || (TREE_CODE (init) == TARGET_EXPR\n+\t      && (TARGET_EXPR_DIRECT_INIT_P (init)\n+\t\t  || TARGET_EXPR_LIST_INIT_P (init))))\n+      && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init), type))\n     {\n-      /* A brace-enclosed initializer for an aggregate.  In C++0x this can\n-\t happen for direct-initialization, too.  */\n-      init = digest_init (type, init, complain);\n+      /* Early initialization via a TARGET_EXPR only works for\n+\t complete objects.  */\n+      gcc_assert (TREE_CODE (init) == CONSTRUCTOR || true_exp == exp);\n+\n       init = build2 (INIT_EXPR, TREE_TYPE (exp), exp, init);\n       TREE_SIDE_EFFECTS (init) = 1;\n       finish_expr_stmt (init);"}, {"sha": "dc9fc954e41908b195760fa4dbae2117df9f2020", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -1889,6 +1889,10 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n \tu = build_target_expr_with_type (TREE_OPERAND (t, 1), TREE_TYPE (t),\n \t\t\t\t\t tf_warning_or_error);\n \n+      TARGET_EXPR_IMPLICIT_P (u) = TARGET_EXPR_IMPLICIT_P (t);\n+      TARGET_EXPR_LIST_INIT_P (u) = TARGET_EXPR_LIST_INIT_P (t);\n+      TARGET_EXPR_DIRECT_INIT_P (u) = TARGET_EXPR_DIRECT_INIT_P (t);\n+\n       /* Map the old variable to the new one.  */\n       splay_tree_insert (target_remap,\n \t\t\t (splay_tree_key) TREE_OPERAND (t, 0),"}, {"sha": "52ca3c930167583f6eb73d067f6ec5dd16425dd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50930\n+\t* g++.dg/cpp0x/nsdmi-list2.C: New.\n+\n 2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50810"}, {"sha": "a6321ffb60583094aee86d8d5152a9d527265210", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-list2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08cc018ac1ed9e201d064c52d0a378b7014e636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list2.C?ref=e08cc018ac1ed9e201d064c52d0a378b7014e636", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/50930\n+// { dg-options -std=c++0x }\n+\n+struct nmc {\n+ nmc() = default;\n+ nmc(nmc&&) = delete; // line 3\n+};\n+\n+struct A { // line 6\n+ nmc n{};\n+ nmc n2 = {};\n+} a; // line 8\n+\n+// ------\n+\n+struct lock_t {\n+  int lock[4];\n+};\n+\n+struct pthread_mutex_t {\n+  volatile lock_t __spinlock;\n+};\n+\n+struct mutex {\n+  pthread_mutex_t m = { };\n+  mutex() = default;\n+};\n+\n+int main()\n+{\n+  mutex mx;\n+}"}]}