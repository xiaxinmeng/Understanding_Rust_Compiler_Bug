{"sha": "94ed000253a233a9a41c5094d1a932097803cc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlZDAwMDI1M2EyMzNhOWE0MWM1MDk0ZDFhOTMyMDk3ODAzY2MxYQ==", "commit": {"author": {"name": "Adam King", "email": "aking@dreammechanics.com", "date": "2002-04-11T15:57:56Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-04-11T15:57:56Z"}, "message": "jvm.h (_Jv_ThrowBadArrayIndex, [...]): Mark as noreturn.\n\n2002-04-11  Adam King <aking@dreammechanics.com>\n\t    Tom Tromey  <tromey@redhat.com>\n\n\t* include/jvm.h (_Jv_ThrowBadArrayIndex,\n\t_Jv_ThrowNullPointerException): Mark as noreturn.\n\t* win32.cc (_Jv_platform_initProperties): Use _Jv_MallocUnchecked\n\tand _Jv_free.  Correctly invoke GetTempPath().  Indentation\n\tfixes.\n\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r52164", "tree": {"sha": "73e64f669ab3cd3420f63017c43db23e6b929460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e64f669ab3cd3420f63017c43db23e6b929460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ed000253a233a9a41c5094d1a932097803cc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ed000253a233a9a41c5094d1a932097803cc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ed000253a233a9a41c5094d1a932097803cc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ed000253a233a9a41c5094d1a932097803cc1a/comments", "author": null, "committer": null, "parents": [{"sha": "1a05e8743e42d0b3203b30c6d02328fbb4ee4989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a05e8743e42d0b3203b30c6d02328fbb4ee4989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a05e8743e42d0b3203b30c6d02328fbb4ee4989"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "93228f45353b9e2c47debfcf3e041c5b65eb629b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=94ed000253a233a9a41c5094d1a932097803cc1a", "patch": "@@ -1,3 +1,12 @@\n+2002-04-11  Adam King <aking@dreammechanics.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\n+\t* include/jvm.h (_Jv_ThrowBadArrayIndex,\n+\t_Jv_ThrowNullPointerException): Mark as noreturn.\n+\t* win32.cc (_Jv_platform_initProperties): Use _Jv_MallocUnchecked\n+\tand _Jv_free.  Correctly invoke GetTempPath().  Indentation\n+\tfixes.\n+\n 2002-04-10  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "fc3a7f73ecf0a4da944ed34d07a5f102d978c71e", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=94ed000253a233a9a41c5094d1a932097803cc1a", "patch": "@@ -1,6 +1,6 @@\n // jvm.h - Header file for private implementation information. -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -283,8 +283,10 @@ _Jv_GetArrayElementFromElementType (jobject array,\n   return elts;\n }\n \n-extern \"C\" void _Jv_ThrowBadArrayIndex (jint bad_index);\n-extern \"C\" void _Jv_ThrowNullPointerException (void);\n+extern \"C\" void _Jv_ThrowBadArrayIndex (jint bad_index)\n+  __attribute__((noreturn));\n+extern \"C\" void _Jv_ThrowNullPointerException (void)\n+  __attribute__((noreturn));\n extern \"C\" jobject _Jv_NewArray (jint type, jint size)\n   __attribute__((__malloc__));\n extern \"C\" jobject _Jv_NewMultiArray (jclass klass, jint dims, ...)"}, {"sha": "912ca1c7ef31f0b82df1bdbf69c4753f2b27ee49", "filename": "libjava/win32.cc", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ed000253a233a9a41c5094d1a932097803cc1a/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=94ed000253a233a9a41c5094d1a932097803cc1a", "patch": "@@ -76,50 +76,53 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n   SET (\"file.separator\", \"\\\\\");\n   SET (\"path.separator\", \";\");\n   SET (\"line.separator\", \"\\r\\n\");\n-  SET (\"java.io.tmpdir\", GetTempPath ());\n \n   // Use GetCurrentDirectory to set 'user.dir'.\n   DWORD buflen = MAX_PATH;\n-  char* buffer = (char *) malloc (buflen);\n+  char *buffer = (char *) _Jv_MallocUnchecked (buflen);\n   if (buffer != NULL)\n     {\n       if (GetCurrentDirectory (buflen, buffer))\n-          SET (\"user.dir\", buffer);\n-      free (buffer);\n+\tSET (\"user.dir\", buffer);\n+\n+      if (GetTempPath (buflen, buffer))\n+\tSET (\"java.io.tmpdir\", buffer);\n+\n+      _Jv_free (buffer);\n     }\n   \n   // Use GetUserName to set 'user.name'.\n   buflen = 257;  // UNLEN + 1\n-  buffer = (char *) malloc (buflen);\n+  buffer = (char *) _Jv_MallocUnchecked (buflen);\n   if (buffer != NULL)\n     {\n       if (GetUserName (buffer, &buflen))\n         SET (\"user.name\", buffer);\n-      free (buffer);\n+      _Jv_free (buffer);\n     }\n \n   // According to the api documentation for 'GetWindowsDirectory()', the \n   // environmental variable HOMEPATH always specifies the user's home \n   // directory or a default directory.  On the 3 windows machines I checked\n   // only 1 had it set.  If it's not set, JDK1.3.1 seems to set it to\n   // the windows directory, so we'll do the same.\n-  char* userHome = NULL;\n-  if ((userHome = ::getenv( \"HOMEPATH\" )) == NULL )\n+  char *userHome = NULL;\n+  if ((userHome = ::getenv (\"HOMEPATH\")) == NULL )\n     {\n       // Check HOME since it's what I use.\n-      if ((userHome = ::getenv( \"HOME\" )) == NULL )\n+      if ((userHome = ::getenv (\"HOME\")) == NULL )\n         {\n           // Not found - use the windows directory like JDK1.3.1 does.\n-          char* winHome = (char *)malloc (MAX_PATH);\n-          if ( winHome != NULL )\n+          char *winHome = (char *) _Jv_MallocUnchecked (MAX_PATH);\n+          if (winHome != NULL)\n             {\n               if (GetWindowsDirectory (winHome, MAX_PATH))\n-                  SET (\"user.home\", winHome);\n-              free (winHome);\n+\t\tSET (\"user.home\", winHome);\n+              _Jv_free (winHome);\n             }\n         }\n      }\n-  if( userHome != NULL )\n+  if (userHome != NULL)\n     SET (\"user.home\", userHome);\n \n   // Get and set some OS info.\n@@ -128,12 +131,13 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n   osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n   if (GetVersionEx (&osvi))\n     {\n-      char *buffer = (char *) malloc (30);\n+      char *buffer = (char *) _Jv_MallocUnchecked (30);\n       if (buffer != NULL)\n         {\n-          sprintf (buffer, \"%d.%d\", (int)osvi.dwMajorVersion, (int)osvi.dwMinorVersion);\n+          sprintf (buffer, \"%d.%d\", (int) osvi.dwMajorVersion,\n+\t\t   (int) osvi.dwMinorVersion);\n           SET (\"os.version\", buffer);\n-          free (buffer);\n+          _Jv_free (buffer);\n         }\n \n       switch (osvi.dwPlatformId)\n@@ -169,7 +173,7 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n   // Set the OS architecture.\n   SYSTEM_INFO si;\n   GetSystemInfo (&si);\n-  switch( si.dwProcessorType )\n+  switch (si.dwProcessorType)\n     {\n       case PROCESSOR_INTEL_386:\n         SET (\"os.arch\", \"i386\");\n@@ -191,4 +195,3 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n         break;\n     }\n }\n-"}]}