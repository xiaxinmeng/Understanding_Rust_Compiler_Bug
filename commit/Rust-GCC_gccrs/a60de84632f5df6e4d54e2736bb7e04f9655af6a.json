{"sha": "a60de84632f5df6e4d54e2736bb7e04f9655af6a", "node_id": "C_kwDOANBUbNoAKGE2MGRlODQ2MzJmNWRmNmU0ZDU0ZTI3MzZiYjdlMDRmOTY1NWFmNmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-23T11:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T11:29:35Z"}, "message": "Merge #812\n\n812: Remove implicit paths hack r=philberty a=philberty\n\nThe name resolver also created a bunch of duplicates Self::associated_type\r\npaths in the name resolver so associated types paths of this kind could be resolved\r\nat name resolve time.\r\n\r\nAddresses #739 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "893244e2b2d779d34877c6535a97147e969755d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893244e2b2d779d34877c6535a97147e969755d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a60de84632f5df6e4d54e2736bb7e04f9655af6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnNCfCRBK7hj4Ov3rIwAA7f8IABxGhD+3n2K1qKSb2LbwGykJ\nFDsAkXBMJK/3w9iEbYIBhoadL5CiX7znZMS4mS++zfJ1oGK6IafplRkZ4bcQRj7J\nlk0L/7nHAQAkIZ+UV8zvWAyZp+YgyvAPAUkcv/dpx5Jei4HLLHNxGrN/niiae+G4\nCGtgr9ysG3dAsuLngU2uG9+alt0KXTWTZmsETwagut0LSksfIC48EXm5zY1QOJp/\nzFiOqZnX6JZX3dE+GZRI5w558gKakZBo9qHUB3XfpNeYRXlwYwOyM8VQEtfRECUZ\nKKzwn3Mo3CryI8o7mUt8b39svwh00SjRZkzUvaq6SiZ+XYaj5ElM3fvStbjrGWs=\n=83Ff\n-----END PGP SIGNATURE-----\n", "payload": "tree 893244e2b2d779d34877c6535a97147e969755d3\nparent 87da9922e66d64e2ef307d33076da86b8486bea0\nparent 0216a1a9a04c1efa19851aa4b049be3bcb4ff72c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637666975 +0000\ncommitter GitHub <noreply@github.com> 1637666975 +0000\n\nMerge #812\n\n812: Remove implicit paths hack r=philberty a=philberty\n\nThe name resolver also created a bunch of duplicates Self::associated_type\r\npaths in the name resolver so associated types paths of this kind could be resolved\r\nat name resolve time.\r\n\r\nAddresses #739 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60de84632f5df6e4d54e2736bb7e04f9655af6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60de84632f5df6e4d54e2736bb7e04f9655af6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60de84632f5df6e4d54e2736bb7e04f9655af6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87da9922e66d64e2ef307d33076da86b8486bea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87da9922e66d64e2ef307d33076da86b8486bea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87da9922e66d64e2ef307d33076da86b8486bea0"}, {"sha": "0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c"}], "stats": {"total": 129, "additions": 51, "deletions": 78}, "files": [{"sha": "ef7550530438b34798e8c54c35cbad361cec935c", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=a60de84632f5df6e4d54e2736bb7e04f9655af6a", "patch": "@@ -54,9 +54,6 @@ class ResolveToplevelImplItem : public ResolverBase\n \tr.add_range (locus);\n \trust_error_at (r, \"redefined multiple times\");\n       });\n-    resolver->insert_new_definition (type.get_node_id (),\n-\t\t\t\t     Definition{type.get_node_id (),\n-\t\t\t\t\t\ttype.get_node_id ()});\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -181,16 +178,13 @@ class ResolveTopLevelTraitItems : public ResolverBase\n   {\n     auto path\n       = prefix.append (ResolveTraitItemTypeToCanonicalPath::resolve (type));\n-    resolver->get_name_scope ().insert (\n+    resolver->get_type_scope ().insert (\n       path, type.get_node_id (), type.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (locus);\n \trust_error_at (r, \"redefined multiple times\");\n       });\n-    resolver->insert_new_definition (type.get_node_id (),\n-\t\t\t\t     Definition{type.get_node_id (),\n-\t\t\t\t\t\ttype.get_node_id ()});\n   }\n \n private:"}, {"sha": "a4bf2619d40b115848d83ac753f756c9f946ee3b", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=a60de84632f5df6e4d54e2736bb7e04f9655af6a", "patch": "@@ -453,7 +453,7 @@ class ResolveItem : public ResolverBase\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tresolve_impl_item (impl_item.get (), Self);\n+\tresolve_impl_item (impl_item.get ());\n       }\n \n     resolver->get_type_scope ().peek ()->clear_name (\n@@ -584,7 +584,7 @@ class ResolveItem : public ResolverBase\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tresolve_impl_item (impl_item.get (), Self);\n+\tresolve_impl_item (impl_item.get ());\n       }\n \n     resolver->get_type_scope ().peek ()->clear_name (\n@@ -646,9 +646,8 @@ class ResolveItem : public ResolverBase\n   }\n \n protected:\n-  void resolve_impl_item (AST::TraitImplItem *item, const CanonicalPath &self);\n-  void resolve_impl_item (AST::InherentImplItem *item,\n-\t\t\t  const CanonicalPath &self);\n+  void resolve_impl_item (AST::TraitImplItem *item);\n+  void resolve_impl_item (AST::InherentImplItem *item);\n   void resolve_extern_item (AST::ExternalItem *item);\n \n   ResolveItem () : ResolverBase (UNKNOWN_NODEID) {}\n@@ -659,42 +658,29 @@ class ResolveImplItems : public ResolveItem\n   using Rust::Resolver::ResolveItem::visit;\n \n public:\n-  static void go (AST::InherentImplItem *item, const CanonicalPath &self)\n+  static void go (AST::InherentImplItem *item)\n   {\n-    ResolveImplItems resolver (self);\n+    ResolveImplItems resolver;\n     item->accept_vis (resolver);\n   };\n \n-  static void go (AST::TraitImplItem *item, const CanonicalPath &self)\n+  static void go (AST::TraitImplItem *item)\n   {\n-    ResolveImplItems resolver (self);\n+    ResolveImplItems resolver;\n     item->accept_vis (resolver);\n   };\n \n   void visit (AST::TypeAlias &alias) override\n   {\n     ResolveItem::visit (alias);\n \n-    auto path\n-      = self.append (CanonicalPath::new_seg (alias.get_node_id (),\n-\t\t\t\t\t     alias.get_new_type_name ()));\n-    resolver->get_type_scope ().insert (\n-      path, alias.get_node_id (), alias.get_locus (), false,\n-      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\tRichLocation r (alias.get_locus ());\n-\tr.add_range (locus);\n-\trust_error_at (r, \"redefined multiple times\");\n-      });\n-\n     // FIXME this stops the erronious unused decls which will be fixed later on\n     resolver->get_type_scope ().append_reference_for_def (alias.get_node_id (),\n \t\t\t\t\t\t\t  alias.get_node_id ());\n   }\n \n private:\n-  ResolveImplItems (const CanonicalPath &self) : ResolveItem (), self (self) {}\n-\n-  const CanonicalPath &self;\n+  ResolveImplItems () : ResolveItem () {}\n };\n \n class ResolveExternItem : public ResolverBase"}, {"sha": "39e8ee4d8bc1e4c22337f9cebce64ece678b4087", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=a60de84632f5df6e4d54e2736bb7e04f9655af6a", "patch": "@@ -313,14 +313,12 @@ NameResolution::Resolve (AST::Crate &crate)\n void\n NameResolution::go (AST::Crate &crate)\n {\n-  // setup parent scoping for names\n-  resolver->get_name_scope ().push (crate.get_node_id ());\n+  NodeId scope_node_id = crate.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n   resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n-  // setup parent scoping for new types\n-  resolver->get_type_scope ().push (mappings->get_next_node_id ());\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n-  // setup label scope\n-  resolver->get_label_scope ().push (mappings->get_next_node_id ());\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   // first gather the top-level namespace names then we drill down\n@@ -773,17 +771,15 @@ ResolveType::visit (AST::TraitObjectType &type)\n // rust-ast-resolve-item.h\n \n void\n-ResolveItem::resolve_impl_item (AST::TraitImplItem *item,\n-\t\t\t\tconst CanonicalPath &self)\n+ResolveItem::resolve_impl_item (AST::TraitImplItem *item)\n {\n-  ResolveImplItems::go (item, self);\n+  ResolveImplItems::go (item);\n }\n \n void\n-ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n-\t\t\t\tconst CanonicalPath &self)\n+ResolveItem::resolve_impl_item (AST::InherentImplItem *item)\n {\n-  ResolveImplItems::go (item, self);\n+  ResolveImplItems::go (item);\n }\n \n void"}, {"sha": "f03fe06bc9c2402abe625875d7454203ba781f9b", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=a60de84632f5df6e4d54e2736bb7e04f9655af6a", "patch": "@@ -33,7 +33,8 @@ class Rib\n   // Rust uses local_def_ids assigned by def_collector on the AST\n   // lets use NodeId instead\n   Rib (CrateNum crateNum, NodeId node_id)\n-    : crate_num (crateNum), node_id (node_id)\n+    : crate_num (crateNum), node_id (node_id),\n+      mappings (Analysis::Mappings::get ())\n   {}\n \n   ~Rib () {}\n@@ -42,35 +43,30 @@ class Rib\n     const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n     std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n   {\n-    auto it = mappings.find (path);\n-    bool already_exists = it != mappings.end ();\n-    if (already_exists && !shadow)\n+    auto it = path_mappings.find (path);\n+    bool path_already_exists = it != path_mappings.end ();\n+    if (path_already_exists && !shadow)\n       {\n-\tfor (auto &decl : decls_within_rib)\n-\t  {\n-\t    if (decl.first == it->second)\n-\t      {\n-\t\tdup_cb (path, it->second, decl.second);\n-\t\treturn;\n-\t      }\n-\t  }\n-\tdup_cb (path, it->second, locus);\n+\tconst auto &decl = decls_within_rib.find (it->second);\n+\tif (decl != decls_within_rib.end ())\n+\t  dup_cb (path, it->second, decl->second);\n+\telse\n+\t  dup_cb (path, it->second, locus);\n+\n \treturn;\n       }\n \n-    mappings[path] = id;\n-    reverse_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n+    path_mappings[path] = id;\n+    reverse_path_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n     decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n     references[id] = {};\n-\n-    auto mappings = Analysis::Mappings::get ();\n     mappings->insert_canonical_path (mappings->get_current_crate (), id, path);\n   }\n \n   bool lookup_name (const CanonicalPath &ident, NodeId *id)\n   {\n-    auto it = mappings.find (ident);\n-    if (it == mappings.end ())\n+    auto it = path_mappings.find (ident);\n+    if (it == path_mappings.end ())\n       return false;\n \n     *id = it->second;\n@@ -79,8 +75,8 @@ class Rib\n \n   bool lookup_canonical_path (const NodeId &id, CanonicalPath *ident)\n   {\n-    auto it = reverse_mappings.find (id);\n-    if (it == reverse_mappings.end ())\n+    auto it = reverse_path_mappings.find (id);\n+    if (it == reverse_path_mappings.end ())\n       return false;\n \n     *ident = it->second;\n@@ -89,17 +85,17 @@ class Rib\n \n   void clear_name (const CanonicalPath &ident, NodeId id)\n   {\n-    mappings.erase (ident);\n-    reverse_mappings.erase (id);\n+    auto ii = path_mappings.find (ident);\n+    if (ii != path_mappings.end ())\n+      path_mappings.erase (ii);\n \n-    for (auto &it : decls_within_rib)\n-      {\n-\tif (it.first == id)\n-\t  {\n-\t    decls_within_rib.erase (it);\n-\t    break;\n-\t  }\n-      }\n+    auto ij = reverse_path_mappings.find (id);\n+    if (ij != reverse_path_mappings.end ())\n+      reverse_path_mappings.erase (ij);\n+\n+    auto ik = decls_within_rib.find (id);\n+    if (ik != decls_within_rib.end ())\n+      decls_within_rib.erase (ik);\n   }\n \n   CrateNum get_crate_num () const { return crate_num; }\n@@ -154,10 +150,11 @@ class Rib\n private:\n   CrateNum crate_num;\n   NodeId node_id;\n-  std::map<CanonicalPath, NodeId> mappings;\n-  std::map<NodeId, CanonicalPath> reverse_mappings;\n-  std::set<std::pair<NodeId, Location>> decls_within_rib;\n+  std::map<CanonicalPath, NodeId> path_mappings;\n+  std::map<NodeId, CanonicalPath> reverse_path_mappings;\n+  std::map<NodeId, Location> decls_within_rib;\n   std::map<NodeId, std::set<NodeId>> references;\n+  Analysis::Mappings *mappings;\n };\n \n class Scope"}, {"sha": "391ea405d8db94f1be0b444fc42b64312fee47dd", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60de84632f5df6e4d54e2736bb7e04f9655af6a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=a60de84632f5df6e4d54e2736bb7e04f9655af6a", "patch": "@@ -220,7 +220,7 @@ TypeCheckType::visit (HIR::QualifiedPathInType &path)\n   bool fully_resolved = path.get_segments ().empty ();\n   if (fully_resolved)\n     {\n-      resolver->insert_resolved_name (path.get_mappings ().get_nodeid (),\n+      resolver->insert_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t      root_resolved_node_id);\n       context->insert_receiver (path.get_mappings ().get_hirid (), root);\n       return;\n@@ -517,7 +517,7 @@ TypeCheckType::resolve_segments (\n     }\n   else\n     {\n-      resolver->insert_resolved_name (expr_mappings.get_nodeid (),\n+      resolver->insert_resolved_type (expr_mappings.get_nodeid (),\n \t\t\t\t      resolved_node_id);\n     }\n "}]}