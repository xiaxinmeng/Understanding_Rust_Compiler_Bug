{"sha": "82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkZmI5YTU4ZmE3Zjc5N2MxYTllNDk3MDhmZTllZDI3M2JhNGY3MA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-28T17:49:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-28T17:49:47Z"}, "message": "expmed.c (expand_mult_highpart_optab): When attempting to use a non-widening multiplication in a wider mode...\n\n\n\t* expmed.c (expand_mult_highpart_optab): When attempting to use\n\ta non-widening multiplication in a wider mode, the operands need\n\tto be converted (zero or sign extended) to that mode.\n\nFrom-SVN: r94383", "tree": {"sha": "9f7f74daa83e42167de74f75541257536cd7de0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7f74daa83e42167de74f75541257536cd7de0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70/comments", "author": null, "committer": null, "parents": [{"sha": "6aea8136e22b50b779c6a59e10a8b4f583513e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aea8136e22b50b779c6a59e10a8b4f583513e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aea8136e22b50b779c6a59e10a8b4f583513e61"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "08fc4c27e0e2b3e8f2b9a43c861f8b957d0e8e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "patch": "@@ -1,3 +1,9 @@\n+2005-01-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (expand_mult_highpart_optab): When attempting to use\n+\ta non-widening multiplication in a wider mode, the operands need\n+\tto be converted (zero or sign extended) to that mode.\n+\n 2005-01-28  Ian Lance Taylor  <ian@airs.com>\n \n \tPR middle-end/16558"}, {"sha": "87a219d2605fa1a9b5f9e608b6a17e4f2abe8ccd", "filename": "gcc/expmed.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=82dfb9a58fa7f797c1a9e49708fe9ed273ba4f70", "patch": "@@ -3332,15 +3332,29 @@ expand_mult_highpart_optab (enum machine_mode mode, rtx op0, rtx op1,\n     }\n \n   /* Try widening the mode and perform a non-widening multiplication.  */\n-  moptab = smul_optab;\n   if (smul_optab->handlers[wider_mode].insn_code != CODE_FOR_nothing\n       && size - 1 < BITS_PER_WORD\n       && mul_cost[wider_mode] + shift_cost[mode][size-1] < max_cost)\n     {\n-      tem = expand_binop (wider_mode, moptab, op0, op1, 0,\n+      rtx insns, wop0, wop1;\n+\n+      /* We need to widen the operands, for example to ensure the\n+\t constant multiplier is correctly sign or zero extended.\n+\t Use a sequence to clean-up any instructions emitted by\n+\t the conversions if things don't work out.  */\n+      start_sequence ();\n+      wop0 = convert_modes (wider_mode, mode, op0, unsignedp);\n+      wop1 = convert_modes (wider_mode, mode, op1, unsignedp);\n+      tem = expand_binop (wider_mode, smul_optab, wop0, wop1, 0,\n \t\t\t  unsignedp, OPTAB_WIDEN);\n+      insns = get_insns ();\n+      end_sequence ();\n+\n       if (tem)\n-\treturn extract_high_half (mode, tem);\n+\t{\n+\t  emit_insn (insns);\n+\t  return extract_high_half (mode, tem);\n+\t}\n     }\n \n   /* Try widening multiplication of opposite signedness, and adjust.  */"}]}