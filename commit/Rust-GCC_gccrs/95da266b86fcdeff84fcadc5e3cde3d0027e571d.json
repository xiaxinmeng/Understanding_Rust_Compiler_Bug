{"sha": "95da266b86fcdeff84fcadc5e3cde3d0027e571d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkYTI2NmI4NmZjZGVmZjg0ZmNhZGM1ZTNjZGUzZDAwMjdlNTcxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T14:57:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T14:57:26Z"}, "message": "Use build_vector_type_for_mode in get_vectype_for_scalar_type_and_size\n\nExcept for one case, get_vectype_for_scalar_type_and_size calculates\nwhat the vector mode should be and then calls build_vector_type,\nwhich recomputes the mode from scratch.  This patch makes it use\nbuild_vector_type_for_mode instead.\n\nThe exception mentioned above is when preferred_simd_mode returns\nan integer mode, which it does if no appropriate vector mode exists.\nThe integer mode in question is usually word_mode, although epiphany\ncan return a doubleword mode in some cases.\n\nThere's no guarantee that this integer mode is appropriate, since for\nexample the scalar type could be a float.  The traditional behaviour is\ntherefore to use the integer mode to determine a size only, and leave\nmode_for_vector to pick the TYPE_MODE.  (Note that it can actually end\nup picking a vector mode if the target defines a disabled vector mode.\nWe therefore still need to check TYPE_MODE after building the type.)\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size): If\n\ttargetm.vectorize.preferred_simd_mode returns an integer mode,\n\tuse mode_for_vector to decide what the vector type's mode\n\tshould actually be.  Use build_vector_type_for_mode instead\n\tof build_vector_type.\n\nFrom-SVN: r278234", "tree": {"sha": "52b6e4dd3dd096c32a47a7e96a0b5cba544a6e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b6e4dd3dd096c32a47a7e96a0b5cba544a6e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95da266b86fcdeff84fcadc5e3cde3d0027e571d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95da266b86fcdeff84fcadc5e3cde3d0027e571d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95da266b86fcdeff84fcadc5e3cde3d0027e571d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95da266b86fcdeff84fcadc5e3cde3d0027e571d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10116ec1c147a76522cafba6b6a5b4ed1cb37b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10116ec1c147a76522cafba6b6a5b4ed1cb37b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10116ec1c147a76522cafba6b6a5b4ed1cb37b77"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "210a9c4f4ab2e8ae808866f1967a5b42d522af2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95da266b86fcdeff84fcadc5e3cde3d0027e571d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95da266b86fcdeff84fcadc5e3cde3d0027e571d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95da266b86fcdeff84fcadc5e3cde3d0027e571d", "patch": "@@ -1,3 +1,11 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size): If\n+\ttargetm.vectorize.preferred_simd_mode returns an integer mode,\n+\tuse mode_for_vector to decide what the vector type's mode\n+\tshould actually be.  Use build_vector_type_for_mode instead\n+\tof build_vector_type.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (get_mask_mode): Take a vector mode itself as argument,"}, {"sha": "9361a23785e4337a6649b2464aac5500ed812942", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95da266b86fcdeff84fcadc5e3cde3d0027e571d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95da266b86fcdeff84fcadc5e3cde3d0027e571d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=95da266b86fcdeff84fcadc5e3cde3d0027e571d", "patch": "@@ -11176,16 +11176,31 @@ get_vectype_for_scalar_type_and_size (tree scalar_type, poly_uint64 size)\n   /* If no size was supplied use the mode the target prefers.   Otherwise\n      lookup a vector mode of the specified size.  */\n   if (known_eq (size, 0U))\n-    simd_mode = targetm.vectorize.preferred_simd_mode (inner_mode);\n+    {\n+      simd_mode = targetm.vectorize.preferred_simd_mode (inner_mode);\n+      if (SCALAR_INT_MODE_P (simd_mode))\n+\t{\n+\t  /* Traditional behavior is not to take the integer mode\n+\t     literally, but simply to use it as a way of determining\n+\t     the vector size.  It is up to mode_for_vector to decide\n+\t     what the TYPE_MODE should be.\n+\n+\t     Note that nunits == 1 is allowed in order to support single\n+\t     element vector types.  */\n+\t  if (!multiple_p (GET_MODE_SIZE (simd_mode), nbytes, &nunits)\n+\t      || !mode_for_vector (inner_mode, nunits).exists (&simd_mode))\n+\t    return NULL_TREE;\n+\t}\n+    }\n   else if (!multiple_p (size, nbytes, &nunits)\n \t   || !mode_for_vector (inner_mode, nunits).exists (&simd_mode))\n     return NULL_TREE;\n-  /* NOTE: nunits == 1 is allowed to support single element vector types.  */\n-  if (!multiple_p (GET_MODE_SIZE (simd_mode), nbytes, &nunits))\n-    return NULL_TREE;\n \n-  vectype = build_vector_type (scalar_type, nunits);\n+  vectype = build_vector_type_for_mode (scalar_type, simd_mode);\n \n+  /* In cases where the mode was chosen by mode_for_vector, check that\n+     the target actually supports the chosen mode, or that it at least\n+     allows the vector mode to be replaced by a like-sized integer.  */\n   if (!VECTOR_MODE_P (TYPE_MODE (vectype))\n       && !INTEGRAL_MODE_P (TYPE_MODE (vectype)))\n     return NULL_TREE;"}]}