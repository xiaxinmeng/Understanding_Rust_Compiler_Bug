{"sha": "55c078acd90197b56835f0a16ec13c278b73c78e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjMDc4YWNkOTAxOTdiNTY4MzVmMGExNmVjMTNjMjc4YjczYzc4ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T08:23:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T08:23:58Z"}, "message": "[multiple changes]\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb: Minor comment additions\n\n\t* osint.adb: Minor reformatting\n\n2009-05-06  Pascal Obry  <obry@adacore.com>\n\n\t* initialize.c: On Windows, keep full pathname to expanded command\n\tline patterns.\n\nFrom-SVN: r147150", "tree": {"sha": "46afc58ebbad1b9883eada16040bbb2c1df61c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46afc58ebbad1b9883eada16040bbb2c1df61c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55c078acd90197b56835f0a16ec13c278b73c78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c078acd90197b56835f0a16ec13c278b73c78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c078acd90197b56835f0a16ec13c278b73c78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c078acd90197b56835f0a16ec13c278b73c78e/comments", "author": null, "committer": null, "parents": [{"sha": "6bde3eb52c0e21aca8d40442d6832589dccebcc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bde3eb52c0e21aca8d40442d6832589dccebcc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bde3eb52c0e21aca8d40442d6832589dccebcc6"}], "stats": {"total": 125, "additions": 96, "deletions": 29}, "files": [{"sha": "f5da41edb9bd3229468d0649b153c03701533afb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55c078acd90197b56835f0a16ec13c278b73c78e", "patch": "@@ -1,3 +1,14 @@\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb: Minor comment additions\n+\n+\t* osint.adb: Minor reformatting\n+\n+2009-05-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* initialize.c: On Windows, keep full pathname to expanded command\n+\tline patterns.\n+\n 2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aggr.adb (Resolve_Record_Aggregate): If a defaulted component of"}, {"sha": "ccad170c108791639d29599086e51f67b4b3b330", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=55c078acd90197b56835f0a16ec13c278b73c78e", "patch": "@@ -78,19 +78,50 @@ extern void __gnat_plist_init (void);\n #define EXPAND_ARGV_RATE 128\n \n static void\n-append_arg (int *index, LPWSTR value, char ***argv, int *last)\n+append_arg (int *index, LPWSTR dir, LPWSTR value,\n+\t    char ***argv, int *last, int quoted)\n {\n   int size;\n+  LPWSTR fullvalue;\n+  int vallen = _tcslen (value);\n+  int dirlen;\n+\n+  if (dir == NULL)\n+    {\n+      /* no dir prefix */\n+      dirlen = 0;\n+      fullvalue = xmalloc ((vallen + 1) * sizeof(TCHAR));\n+    }\n+  else\n+    {\n+      /* Add dir first */\n+      dirlen = _tcslen (dir);\n+\n+      fullvalue = xmalloc ((dirlen + vallen + 1) * sizeof(TCHAR));\n+      _tcscpy (fullvalue, dir);\n+    }\n+\n+  /* Append value */\n+\n+  if (quoted)\n+    {\n+      _tcsncpy (fullvalue + dirlen, value + 1, vallen - 1);\n+      fullvalue [dirlen + vallen - sizeof(TCHAR)] = _T('\\0');\n+    }\n+  else\n+    _tcscpy (fullvalue + dirlen, value);\n \n   if (*last <= *index)\n     {\n       *last += EXPAND_ARGV_RATE;\n       *argv = (char **) xrealloc (*argv, (*last) * sizeof (char *));\n     }\n \n-  size = WS2SC (NULL, value, 0);\n-  (*argv)[*index] = (char *) xmalloc (size + 1);\n-  WS2SC ((*argv)[*index], value, size);\n+  size = WS2SC (NULL, fullvalue, 0);\n+  (*argv)[*index] = (char *) xmalloc (size + sizeof(TCHAR));\n+  WS2SC ((*argv)[*index], fullvalue, size);\n+\n+  free (fullvalue);\n \n   (*index)++;\n }\n@@ -143,7 +174,7 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n \t /* argv[0] is the executable full path-name. */\n \n \t SearchPath (NULL, wargv[0], _T(\".exe\"), MAX_PATH, result, NULL);\n-\t append_arg (&argc_expanded, result, &gnat_argv, &last);\n+\t append_arg (&argc_expanded, NULL, result, &gnat_argv, &last, 0);\n \n \t for (k=1; k<wargc; k++)\n \t   {\n@@ -157,39 +188,51 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n \t\t /* Wilcards are present, append all corresponding matches. */\n \t\t WIN32_FIND_DATA FileData;\n \t\t HANDLE hDir = FindFirstFile (wargv[k], &FileData);\n+\t\t LPWSTR dir = NULL;\n+\t\t LPWSTR ldir = _tcsrchr (wargv[k], _T('\\\\'));\n+\n+\t\t if (ldir == NULL)\n+\t\t   ldir = _tcsrchr (wargv[k], _T('/'));\n \n \t\t if (hDir == INVALID_HANDLE_VALUE)\n \t\t   {\n \t\t     /* No match, append arg as-is. */\n-\t\t     append_arg (&argc_expanded, wargv[k], &gnat_argv, &last);\n+\t\t     append_arg (&argc_expanded, NULL, wargv[k],\n+\t\t\t\t &gnat_argv, &last, quoted);\n \t\t   }\n \t\t else\n \t\t   {\n+\t\t     if (ldir != NULL)\n+\t\t       {\n+\t\t\t int n = ldir - wargv[k] + 1;\n+\t\t\t dir = xmalloc ((n + 1) * sizeof (TCHAR));\n+\t\t\t _tcsncpy (dir, wargv[k], n);\n+\t\t\t dir[n] = _T('\\0');\n+\t\t       }\n+\n \t\t     /* Append first match and all remaining ones.  */\n \n \t\t     do {\n-\t\t       append_arg (&argc_expanded,\n-\t\t\t\t   FileData.cFileName, &gnat_argv, &last);\n+\t\t       /* Do not add . and .. special entries */\n+\n+\t\t       if (_tcscmp (FileData.cFileName, _T(\".\")) != 0\n+\t\t\t   && _tcscmp (FileData.cFileName, _T(\"..\")) != 0)\n+\t\t\t append_arg (&argc_expanded, dir, FileData.cFileName,\n+\t\t\t\t     &gnat_argv, &last, 0);\n \t\t     } while (FindNextFile (hDir, &FileData));\n \n \t\t     FindClose (hDir);\n+\n+\t\t     if (dir != NULL)\n+\t\t       free (dir);\n \t\t   }\n \t       }\n \t     else\n \t       {\n \t\t /*  No wildcard. Store parameter as-is. Remove quote if\n \t\t     needed. */\n-\t\t if (quoted)\n-\t\t   {\n-\t\t     int len = _tcslen (wargv[k]);\n-\n-\t\t     /* Remove ending quote */\n-\t\t     wargv[k][len-1] = _T('\\0');\n-\t\t     append_arg\n-\t\t       (&argc_expanded, &wargv[k][1], &gnat_argv, &last);\n-\t\t   }\n-\t\t else\n-\t\t   append_arg (&argc_expanded, wargv[k], &gnat_argv, &last);\n+\t\t append_arg (&argc_expanded, NULL, wargv[k],\n+\t\t\t     &gnat_argv, &last, quoted);\n \t       }\n \t   }\n "}, {"sha": "770c499312b64c6724cac9aeb8ff7325b94724bb", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=55c078acd90197b56835f0a16ec13c278b73c78e", "patch": "@@ -2299,7 +2299,8 @@ package body Osint is\n \n       declare\n          Name : String renames Name_Buffer (1 .. Name_Len);\n-         Inc : String renames Include_Dir_Default_Prefix.all;\n+         Inc  : String renames Include_Dir_Default_Prefix.all;\n+\n       begin\n          if Debug.Debug_Flag_Dot_N then\n             Write_Line (Name);\n@@ -2309,7 +2310,9 @@ package body Osint is\n            and then Inc'Length < Name_Len\n            and then Name_Buffer (1 .. Inc'Length) = Inc\n          then\n-            null; -- Part of runtimes, so ignore it\n+            --  Part of runtimes, so ignore it\n+\n+            null;\n \n          else\n             File_Name_Chars.Append_All (File_Name_Chars.Table_Type (Name));\n@@ -2341,9 +2344,9 @@ package body Osint is\n       begin\n          --  Allocate source buffer, allowing extra character at end for EOF\n \n-         --  Some systems (e.g. VMS) have file types that require one\n-         --  read per line, so read until we get the Len bytes or until\n-         --  there are no more characters.\n+         --  Some systems (e.g. VMS) have file types that require one read per\n+         --  line, so read until we get the Len bytes or until there are no\n+         --  more characters.\n \n          Hi := Lo;\n          loop\n@@ -2355,8 +2358,8 @@ package body Osint is\n          Actual_Ptr (Hi) := EOF;\n \n          --  Now we need to work out the proper virtual origin pointer to\n-         --  return. This is exactly Actual_Ptr (0)'Address, but we have\n-         --  to be careful to suppress checks to compute this address.\n+         --  return. This is exactly Actual_Ptr (0)'Address, but we have to\n+         --  be careful to suppress checks to compute this address.\n \n          declare\n             pragma Suppress (All_Checks);"}, {"sha": "aa69a58250451429c1006b09a32500cd78f8fa5e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c078acd90197b56835f0a16ec13c278b73c78e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=55c078acd90197b56835f0a16ec13c278b73c78e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -691,10 +691,16 @@ package body Sem_Ch13 is\n    --  Start of processing for Analyze_Attribute_Definition_Clause\n \n    begin\n+      --  Process Ignore_Rep_Clauses option\n+\n       if Ignore_Rep_Clauses then\n          case Id is\n \n-            --  The following should be ignored\n+            --  The following should be ignored. They do not affect legality\n+            --  and may be target dependent. The basic idea of -gnatI is to\n+            --  ignore any rep clauses that may be target dependent but do not\n+            --  affect legality (except possibly to be rejected because they\n+            --  are incompatible with the compilation target).\n \n             when Attribute_Address        |\n                  Attribute_Alignment      |\n@@ -710,7 +716,11 @@ package body Sem_Ch13 is\n                Rewrite (N, Make_Null_Statement (Sloc (N)));\n                return;\n \n-            --  The following should not be ignored\n+            --  The following should not be ignored, because in the first place\n+            --  they are reasonably portable, and should not cause problems in\n+            --  compiling code from another target, and also they do affect\n+            --  legality, e.g. failing to provide a stream attribute for a\n+            --  type may make a program illegal.\n \n             when Attribute_External_Tag   |\n                  Attribute_Input          |"}]}