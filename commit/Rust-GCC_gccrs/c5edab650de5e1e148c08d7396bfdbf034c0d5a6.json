{"sha": "c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlZGFiNjUwZGU1ZTFlMTQ4YzA4ZDczOTZiZmRiZjAzNGMwZDVhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-11-19T06:27:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-19T06:27:31Z"}, "message": "re PR tree-optimization/34036 (ICE  with control flow in the middle of basic block for -fnon-call-exceptions)\n\n\tPR tree-optimization/34036\n\t* opts.c (set_fast_math_flags): Do not set flags in common\n\twith set_unsafe_math_optimizations_flags, invoke it directly.\n\t(set_unsafe_math_optimizations_flags): Unset flag_trapping_math\n\tand flag_signed_zeros.\n\t* toplev.c (process_options): Force flag_associative_math to 0 and\n\twarn, if it is set and either flag_trapping_math or flag_signed_zeros\n\tis set too.\n\t* doc/invoke.texi (Optimize Options): Document the new behavior\n\tof -funsafe-math-optimizations, that -fassociative-math requires\n\tboth -fno-signed-zeros and -fno-trapping-math and make it clear\n\tthat -fno-trapping-math requires -fno-signaling-nans.\n\nFrom-SVN: r130286", "tree": {"sha": "1e272b2a1434330c1d37940c486411e9cb30b2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e272b2a1434330c1d37940c486411e9cb30b2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88af50ebcd002284ee32bd0a67eccccea1fac47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88af50ebcd002284ee32bd0a67eccccea1fac47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88af50ebcd002284ee32bd0a67eccccea1fac47c"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "b3e98e1152ba02d6cb29ce754217da05c9b10181", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1,3 +1,18 @@\n+2007-11-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR tree-optimization/34036\n+\t* opts.c (set_fast_math_flags): Do not set flags in common\n+\twith set_unsafe_math_optimizations_flags, invoke it directly.\n+\t(set_unsafe_math_optimizations_flags): Unset flag_trapping_math\n+\tand flag_signed_zeros.\n+\t* toplev.c (process_options): Force flag_associative_math to 0 and\n+\twarn, if it is set and either flag_trapping_math or flag_signed_zeros\n+\tis set too.\n+\t* doc/invoke.texi (Optimize Options): Document the new behavior\n+\tof -funsafe-math-optimizations, that -fassociative-math requires\n+\tboth -fno-signed-zeros and -fno-trapping-math and make it clear\n+\tthat -fno-trapping-math requires -fno-signaling-nans.\n+\n 2007-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/34132"}, {"sha": "adf50ad8c25c1c9578300446f6d0e527d8a5525e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -6274,7 +6274,8 @@ it can result in incorrect output for programs which depend on\n an exact implementation of IEEE or ISO rules/specifications for\n math functions. It may, however, yield faster code for programs\n that do not require the guarantees of these specifications.\n-Enables @option{-freciprocal-math} and @option{-fassociative-math}.\n+Enables @option{-fno-signed-zeros}, @option{-fno-trapping-math},\n+@option{-fassociative-math} and @option{-freciprocal-math}.\n \n The default is @option{-fno-unsafe-math-optimizations}.\n \n@@ -6288,8 +6289,9 @@ well as ignore NaNs and inhibit or create underflow or overflow (and\n thus cannot be used on a code which relies on rounding behavior like\n @code{(x + 2**52) - 2**52)}.  May also reorder floating-point comparisons\n and thus may not be used when ordered comparisons are required.\n-This flag doesn't make much sense without @option{-fno-signed-zeros}\n-or @option{-fno-trapping-math} or with @option{-frounding-math}.\n+This option requires that both @option{-fno-signed-zeros} and\n+@option{-fno-trapping-math} be in effect.  Moreover, it doesn't make\n+much sense with @option{-frounding-math}.\n \n The default is @option{-fno-associative-math}.\n \n@@ -6331,9 +6333,9 @@ The default is @option{-fsigned-zeros}.\n @opindex fno-trapping-math\n Compile code assuming that floating-point operations cannot generate\n user-visible traps.  These traps include division by zero, overflow,\n-underflow, inexact result and invalid operation.  This option implies\n-@option{-fno-signaling-nans}.  Setting this option may allow faster\n-code if one relies on ``non-stop'' IEEE arithmetic, for example.\n+underflow, inexact result and invalid operation.  This option requires\n+that @option{-fno-signaling-nans} be in effect.  Setting this option may\n+allow faster code if one relies on ``non-stop'' IEEE arithmetic, for example.\n \n This option should never be turned on by any @option{-O} option since\n it can result in incorrect output for programs which depend on"}, {"sha": "8be098f89b8966ed613b15e3164be57d45360085", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1868,12 +1868,9 @@ set_Wstrict_aliasing (int onoff)\n void\n set_fast_math_flags (int set)\n {\n-  flag_trapping_math = !set;\n   flag_unsafe_math_optimizations = set;\n-  flag_associative_math = set;\n-  flag_reciprocal_math = set;\n+  set_unsafe_math_optimizations_flags (set);\n   flag_finite_math_only = set;\n-  flag_signed_zeros = !set;\n   flag_errno_math = !set;\n   if (set)\n     {\n@@ -1888,8 +1885,10 @@ set_fast_math_flags (int set)\n void\n set_unsafe_math_optimizations_flags (int set)\n {\n-  flag_reciprocal_math = set;\n+  flag_trapping_math = !set;\n+  flag_signed_zeros = !set;\n   flag_associative_math = set;\n+  flag_reciprocal_math = set;\n }\n \n /* Return true iff flags are set as if -ffast-math.  */"}, {"sha": "bf7d440b363510b4befbe1fddab3277eb534eec7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1,3 +1,9 @@\n+2007-11-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/pr33007.c: Expect new warning.\n+\t* gcc.dg/tree-ssa/recip-5.c: Likewise.\n+\t* g++.dg/opt/pr34036.C: New test.\n+\n 2007-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/30988"}, {"sha": "ecf6cf745be1440775e5d5e7a423668211ef851b", "filename": "gcc/testsuite/g++.dg/opt/pr34036.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fnon-call-exceptions -ffast-math -fsignaling-nans\" } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n+\n+template <class T>\n+class ggStaticArray {\n+public:\n+  ~ggStaticArray();\n+};\n+\n+template <class T>\n+class ggGrid {\n+public:\n+  ggGrid() : grid() { }\n+  ggStaticArray<T> grid;\n+};\n+\n+class mrGrid {\n+public:\n+  mrGrid(void);\n+protected:\n+  ggGrid<int*> grid;\n+  double multiplier;\n+};\n+\n+mrGrid::mrGrid(void)\n+{\n+  double xMeasure, yMeasure, zMeasure;\n+  double cellDimension;\n+\n+  cellDimension = multiplier * (xMeasure * yMeasure * zMeasure);\n+}"}, {"sha": "26b22fdd3e19e0a0be7b274ba4cb037d41e97348", "filename": "gcc/testsuite/gcc.dg/pr33007.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -ffast-math -ftrapping-math\" } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n \n long\n foo (int i)"}, {"sha": "aafa98f16530b2b52972f24d1999a1309ef6866a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1,5 +1,6 @@\n /* { dg-options \"-O1 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-optimized\" } */\n /* { dg-do compile } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n \n /* Test the reciprocal optimizations together with trapping math.  */\n "}, {"sha": "c1520a37e54ac9afbdc061cefa9d9f297a963d3b", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5edab650de5e1e148c08d7396bfdbf034c0d5a6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c5edab650de5e1e148c08d7396bfdbf034c0d5a6", "patch": "@@ -1988,6 +1988,13 @@ process_options (void)\n   if (flag_signaling_nans)\n     flag_trapping_math = 1;\n \n+  /* We cannot reassociate if we want traps or signed zeros. \ufffd*/\n+  if (flag_associative_math && (flag_trapping_math || flag_signed_zeros))\n+    {\n+      warning (0, \"-fassociative-math disabled; other options take precedence\");\n+      flag_associative_math = 0;\n+    }\n+\n   /* With -fcx-limited-range, we do cheap and quick complex arithmetic.  */\n   if (flag_cx_limited_range)\n     flag_complex_method = 0;"}]}