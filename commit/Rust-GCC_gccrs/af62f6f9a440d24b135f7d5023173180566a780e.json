{"sha": "af62f6f9a440d24b135f7d5023173180566a780e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2MmY2ZjlhNDQwZDI0YjEzNWY3ZDUwMjMxNzMxODA1NjZhNzgwZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-07-19T20:20:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-07-19T20:20:40Z"}, "message": "re PR tree-optimization/22278 (gcc -O2 discards cast to volatile)\n\n        PR tree-opt/22278\n        * gimplify.c (gimplify_expr): Use main variant type for the temp\n        destination for a discarded volatile read.\n        * tree-ssa.c (tree_ssa_useless_type_conversion_1): Don't elide\n        casts between non-void types that change volatility.\n\nFrom-SVN: r102169", "tree": {"sha": "fbf02d28bdbfe2df54c4da773d527881c941eba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbf02d28bdbfe2df54c4da773d527881c941eba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af62f6f9a440d24b135f7d5023173180566a780e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af62f6f9a440d24b135f7d5023173180566a780e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af62f6f9a440d24b135f7d5023173180566a780e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af62f6f9a440d24b135f7d5023173180566a780e/comments", "author": null, "committer": null, "parents": [{"sha": "b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "d411fc276b3df4c12cb8869884266f611378ac58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af62f6f9a440d24b135f7d5023173180566a780e", "patch": "@@ -1,3 +1,11 @@\n+2005-07-19  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/22278\n+\t* gimplify.c (gimplify_expr): Use main variant type for the temp\n+\tdestination for a discarded volatile read.\n+\t* tree-ssa.c (tree_ssa_useless_type_conversion_1): Don't elide\n+\tcasts between non-void types that change volatility.\n+\n 2005-07-15  DJ Delorie  <dj@redhat.com>\n \n \t* toplev.h: Add comment about the first parameter for warning()."}, {"sha": "3f06d7a0491551da8d8af2d2ffdcbfc2896d3ed5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=af62f6f9a440d24b135f7d5023173180566a780e", "patch": "@@ -4411,8 +4411,9 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t{\n \t  /* Historically, the compiler has treated a bare\n \t     reference to a volatile lvalue as forcing a load.  */\n-\t  tree tmp = create_tmp_var (TREE_TYPE (*expr_p), \"vol\");\n-\t  *expr_p = build (MODIFY_EXPR, TREE_TYPE (tmp), tmp, *expr_p);\n+\t  tree type = TYPE_MAIN_VARIANT (TREE_TYPE (*expr_p));\n+\t  tree tmp = create_tmp_var (type, \"vol\");\n+\t  *expr_p = build (MODIFY_EXPR, type, tmp, *expr_p);\n \t}\n       else\n \t/* We can't do anything useful with a volatile reference to"}, {"sha": "d78a944209e12843b065ae46967ba7e51df75e40", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af62f6f9a440d24b135f7d5023173180566a780e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=af62f6f9a440d24b135f7d5023173180566a780e", "patch": "@@ -903,6 +903,15 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n \t   && TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n     return true;\n \n+  /* Don't lose casts between pointers to volatile and non-volatile\n+     qualified types.  Doing so would result in changing the semantics\n+     of later accesses.  */\n+  else if (POINTER_TYPE_P (inner_type)\n+           && POINTER_TYPE_P (outer_type)\n+\t   && TYPE_VOLATILE (TREE_TYPE (outer_type))\n+\t      != TYPE_VOLATILE (TREE_TYPE (inner_type)))\n+    return false;\n+\n   /* Pointers/references are equivalent if their pointed to types\n      are effectively the same.  This allows to strip conversions between\n      pointer types with different type qualifiers.  */"}]}