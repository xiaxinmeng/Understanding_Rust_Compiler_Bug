{"sha": "bb02177133880626b88e89c2d8bd9e7dcc74e107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwMjE3NzEzMzg4MDYyNmI4OGU4OWMyZDhiZDllN2RjYzc0ZTEwNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-07-09T20:23:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-09T20:23:14Z"}, "message": "trans.c (gnat_gimplify_expr): Deal with CALL_EXPR.\n\n\t* gcc-interface/trans.c (gnat_gimplify_expr) <ADDR_EXPR>: Deal with\n\tCALL_EXPR.\n\nFrom-SVN: r162014", "tree": {"sha": "0997159c88925803203fca27b84d47c8c3f2c8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0997159c88925803203fca27b84d47c8c3f2c8b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb02177133880626b88e89c2d8bd9e7dcc74e107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb02177133880626b88e89c2d8bd9e7dcc74e107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb02177133880626b88e89c2d8bd9e7dcc74e107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb02177133880626b88e89c2d8bd9e7dcc74e107/comments", "author": null, "committer": null, "parents": [{"sha": "85e693aa55c220da35b8b205eded6c4ef42093bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e693aa55c220da35b8b205eded6c4ef42093bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85e693aa55c220da35b8b205eded6c4ef42093bc"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "d91380668e9e4948e1637a2eb2e7b5fab14a6b6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb02177133880626b88e89c2d8bd9e7dcc74e107", "patch": "@@ -1,3 +1,8 @@\n+2010-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_gimplify_expr) <ADDR_EXPR>: Deal with\n+\tCALL_EXPR.\n+\n 2010-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc-interface/utils.c: Include diagnostic-core.h in every file"}, {"sha": "988bfa9ffbfd5393afa8a6d9561969d57a95f295", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=bb02177133880626b88e89c2d8bd9e7dcc74e107", "patch": "@@ -5988,33 +5988,31 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n     case ADDR_EXPR:\n       op = TREE_OPERAND (expr, 0);\n \n-      if (TREE_CODE (op) == CONSTRUCTOR)\n+      /* If we are taking the address of a constant CONSTRUCTOR, make sure it\n+\t is put into static memory.  We know that it's going to be read-only\n+\t given the semantics we have and it must be in static memory when the\n+\t reference is in an elaboration procedure.  */\n+      if (TREE_CODE (op) == CONSTRUCTOR && TREE_CONSTANT (op))\n \t{\n-\t  /* If we are taking the address of a constant CONSTRUCTOR, make sure\n-\t     it is put into static memory.  We know it's going to be read-only\n-\t     given the semantics we have and it must be in static memory when\n-\t     the reference is in an elaboration procedure.  */\n-\t  if (TREE_CONSTANT (op))\n-\t    {\n-\t      tree addr = build_fold_addr_expr (tree_output_constant_def (op));\n-\t      *expr_p = fold_convert (TREE_TYPE (expr), addr);\n-\t    }\n-\n-\t  /* Otherwise explicitly create the local temporary.  That's required\n-\t     if the type is passed by reference.  */\n-\t  else\n-\t    {\n-\t      tree mod, new_var = create_tmp_var_raw (TREE_TYPE (op), \"C\");\n-\t      TREE_ADDRESSABLE (new_var) = 1;\n-\t      gimple_add_tmp_var (new_var);\n+\t  tree addr = build_fold_addr_expr (tree_output_constant_def (op));\n+\t  *expr_p = fold_convert (TREE_TYPE (expr), addr);\n+\t  return GS_ALL_DONE;\n+\t}\n \n-\t      mod = build2 (INIT_EXPR, TREE_TYPE (new_var), new_var, op);\n-\t      gimplify_and_add (mod, pre_p);\n+      /* Otherwise, if we are taking the address of a non-constant CONSTRUCTOR\n+\t or of a call, explicitly create the local temporary.  That's required\n+\t if the type is passed by reference.  */\n+      if (TREE_CODE (op) == CONSTRUCTOR || TREE_CODE (op) == CALL_EXPR)\n+\t{\n+\t  tree mod, new_var = create_tmp_var_raw (TREE_TYPE (op), \"C\");\n+\t  TREE_ADDRESSABLE (new_var) = 1;\n+\t  gimple_add_tmp_var (new_var);\n \n-\t      TREE_OPERAND (expr, 0) = new_var;\n-\t      recompute_tree_invariant_for_addr_expr (expr);\n-\t    }\n+\t  mod = build2 (INIT_EXPR, TREE_TYPE (new_var), new_var, op);\n+\t  gimplify_and_add (mod, pre_p);\n \n+\t  TREE_OPERAND (expr, 0) = new_var;\n+\t  recompute_tree_invariant_for_addr_expr (expr);\n \t  return GS_ALL_DONE;\n \t}\n "}, {"sha": "0f0c4979ae417afb63f6baa45063a577819d8318", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb02177133880626b88e89c2d8bd9e7dcc74e107", "patch": "@@ -1,3 +1,7 @@\n+2010-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/atomic3.adb: New test.\n+\n 2010-07-09  Jakub Jelinek  <jakub@redhat.com>\n \t    Denys Vlasenko  <dvlasenk@redhat.com>\n \t    Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>"}, {"sha": "592a856caef84775ab5d59689a5cbb2745b776f6", "filename": "gcc/testsuite/gnat.dg/atomic3.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb02177133880626b88e89c2d8bd9e7dcc74e107/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic3.adb?ref=bb02177133880626b88e89c2d8bd9e7dcc74e107", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+\n+procedure Atomic3 is\n+\n+   type Unsigned_32_T is mod 2 ** 32;\n+   for Unsigned_32_T'Size use 32;\n+\n+   type Id_T is (One, Two, Three);\n+\n+   type Array_T is array (Id_T) of Unsigned_32_T;\n+   pragma Atomic_Components (Array_T);\n+\n+   A : Array_T := (others => 0);\n+\n+   function Get_Array return Array_T is\n+   begin\n+      return A;\n+   end;\n+\n+   X : Array_T;\n+\n+begin\n+   X := Get_Array;\n+end;"}]}