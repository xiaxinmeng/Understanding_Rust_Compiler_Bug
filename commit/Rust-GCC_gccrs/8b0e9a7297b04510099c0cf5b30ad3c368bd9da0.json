{"sha": "8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwZTlhNzI5N2IwNDUxMDA5OWMwY2Y1YjMwYWQzYzM2OGJkOWRhMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-11-12T00:02:36Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-11-12T00:02:36Z"}, "message": "Makefile.in (c-lang.o): Depend on $(VARRAY_H).\n\n* Makefile.in (c-lang.o): Depend on $(VARRAY_H).\n* c-decl.c (c_expand_body): Take argument can_defer_p.  Use it\nto decide whether to defer a function.\n(finish_function): Adjust.\n(c_expand_deferred_function): New function.\n* c-lang.c (deferred_fns): New variable.\n(c_init): Initialize it, and mark it as a root.\n(defer_fn): New function.\n(finish_file): Expand all deferred functions.\n* c-tree.h (defer_fn): Declare.\n(c_expand_deferred_function): Likewise.\n* objc/Make-lang.in (objc-act.o): Depend on $(VARRAY_H).\n* objc-act.c (deferred_fns): New variable.\n(objc_init): Initialize it, and mark it as a root.\n(defer_fn): New function.\n(finish_file): Expand all deferred functions.\n\nFrom-SVN: r46933", "tree": {"sha": "98496e95cb60a38b607a253c73d876f87f5d80fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98496e95cb60a38b607a253c73d876f87f5d80fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/comments", "author": null, "committer": null, "parents": [{"sha": "950a3816a7e54f132d34e5458474db5465b917ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950a3816a7e54f132d34e5458474db5465b917ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950a3816a7e54f132d34e5458474db5465b917ca"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "675e489b3890a5b488d88ea7555450cd8708b4cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -1,3 +1,22 @@\n+2001-11-11  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Makefile.in (c-lang.o): Depend on $(VARRAY_H).\n+\t* c-decl.c (c_expand_body): Take argument can_defer_p.  Use it\n+\tto decide whether to defer a function.\n+\t(finish_function): Adjust.\n+\t(c_expand_deferred_function): New function.\n+\t* c-lang.c (deferred_fns): New variable.\n+\t(c_init): Initialize it, and mark it as a root.\n+\t(defer_fn): New function.\n+\t(finish_file): Expand all deferred functions.\n+\t* c-tree.h (defer_fn): Declare.\n+\t(c_expand_deferred_function): Likewise.\n+\t* objc/Make-lang.in (objc-act.o): Depend on $(VARRAY_H).\n+\t* objc-act.c (deferred_fns): New variable.\n+\t(objc_init): Initialize it, and mark it as a root.\n+\t(defer_fn): New function.\n+\t(finish_file): Expand all deferred functions.\n+\n 2001-11-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.c (unicosmk_special_name): Prototype."}, {"sha": "c75dcd88da38e67e968a5a29900a182706e5141a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -1169,7 +1169,7 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n-    $(GGC_H)  c-lex.h toplev.h diagnostic.h output.h function.h \\\n+    $(GGC_H) c-lex.h toplev.h diagnostic.h output.h function.h $(VARRAY_H) \\\n     $(RTL_H) $(EXPR_H) tree-inline.h insn-config.h integrate.h langhooks.h \\\n     langhooks-def.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\"}, {"sha": "0e4cf0c6b52322fd3789fde7f459c1b151b832ef", "filename": "gcc/c-decl.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -279,7 +279,7 @@ static tree grokdeclarator\t\tPARAMS ((tree, tree, enum decl_context,\n static tree grokparms\t\t\tPARAMS ((tree, int));\n static void layout_array_type\t\tPARAMS ((tree));\n static tree c_make_fname_decl           PARAMS ((tree, int));\n-static void c_expand_body               PARAMS ((tree, int));\n+static void c_expand_body               PARAMS ((tree, int, int));\n \f\n /* C-specific option variables.  */\n \n@@ -6748,22 +6748,33 @@ finish_function (nested)\n   if (! nested)\n     {\n       /* Generate RTL for the body of this function.  */\n-      c_expand_body (fndecl, nested);\n+      c_expand_body (fndecl, nested, 1);\n       /* Let the error reporting routines know that we're outside a\n \t function.  For a nested function, this value is used in\n \t pop_c_function_context and then reset via pop_function_context.  */\n       current_function_decl = NULL;\n     }\n }\n \n+/* Generate the RTL for a deferred function FNDECL.  */\n+\n+void\n+c_expand_deferred_function (fndecl)\n+     tree fndecl;\n+{\n+  c_expand_body (fndecl, 0, 0);\n+  current_function_decl = NULL;\n+}\n+\n /* Generate the RTL for the body of FNDECL.  If NESTED_P is non-zero,\n    then we are already in the process of generating RTL for another\n-   function.  */\n+   function.  If can_defer_p is zero, we won't attempt to defer the\n+   generation of RTL.  */\n \n static void\n-c_expand_body (fndecl, nested_p)\n+c_expand_body (fndecl, nested_p, can_defer_p)\n      tree fndecl;\n-     int nested_p;\n+     int nested_p, can_defer_p;\n {\n   int uninlinable = 1;\n \n@@ -6781,6 +6792,17 @@ c_expand_body (fndecl, nested_p)\n          function completely.  */\n       uninlinable = ! tree_inlinable_function_p (fndecl);\n       \n+      if (! uninlinable && can_defer_p\n+\t  /* Save function tree for inlining.  Should return 0 if the\n+             language does not support function deferring or the\n+             function could not be deferred.  */\n+\t  && defer_fn (fndecl))\n+\t{\n+\t  /* Let the back-end know that this funtion exists.  */\n+\t  (*debug_hooks->deferred_inline_function) (fndecl);\n+\t  return;\n+\t}\n+      \n       /* Then, inline any functions called in it.  */\n       optimize_inline_calls (fndecl);\n     }\n@@ -7202,7 +7224,7 @@ c_expand_decl_stmt (t)\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_CONTEXT (decl) == current_function_decl\n       && DECL_SAVED_TREE (decl))\n-    c_expand_body (decl, /*nested_p=*/1);\n+    c_expand_body (decl, /*nested_p=*/1, /*can_defer_p=*/0);\n }\n \n /* Return the IDENTIFIER_GLOBAL_VALUE of T, for use in common code, since"}, {"sha": "d6644582fba9138a915170d6394905e036892201", "filename": "gcc/c-lang.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cpplib.h\"\n #include \"insn-config.h\"\n #include \"integrate.h\"\n+#include \"varray.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n@@ -79,6 +80,8 @@ static int c_cannot_inline_tree_fn PARAMS ((tree *));\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+static varray_type deferred_fns;\n+\n /* Post-switch processing.  */\n static void\n c_post_options ()\n@@ -136,6 +139,9 @@ c_init ()\n   lang_missing_noreturn_ok_p = &c_missing_noreturn_ok_p;\n \n   c_parse_init ();\n+\n+  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n+  ggc_add_tree_varray_root (&deferred_fns, 1);\n }\n \n /* Used by c-lex.c, but only for objc.  */\n@@ -242,11 +248,33 @@ finish_cdtor (body)\n }\n #endif\n \n+/* Register a function tree, so that its optimization and conversion\n+   to RTL is only done at the end of the compilation.  */\n+\n+int\n+defer_fn (fn)\n+     tree fn;\n+{\n+  VARRAY_PUSH_TREE (deferred_fns, fn);\n+\n+  return 1;\n+}\n+\n /* Called at end of parsing, but before end-of-file processing.  */\n \n void\n finish_file ()\n {\n+  int i;\n+\n+  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n+    /* Don't output the same function twice.  We may run into such\n+       situations when an extern inline function is later given a\n+       non-extern-inline definition.  */\n+    if (! TREE_ASM_WRITTEN (VARRAY_TREE (deferred_fns, i)))\n+      c_expand_deferred_function (VARRAY_TREE (deferred_fns, i));\n+  VARRAY_FREE (deferred_fns);\n+\n #ifndef ASM_OUTPUT_CONSTRUCTOR\n   if (static_ctors)\n     {"}, {"sha": "19e5b03a79e76d7b32289196298074b5002ddc1a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -152,6 +152,8 @@ extern int maybe_objc_comptypes                 PARAMS ((tree, tree, int));\n extern tree maybe_building_objc_message_expr    PARAMS ((void));\n extern int recognize_objc_keyword\t\tPARAMS ((void));\n extern tree lookup_objc_ivar\t\t\tPARAMS ((tree));\n+/* in c-lang.c and objc/objc-act.c */\n+extern int defer_fn\t\t\t\tPARAMS ((tree));\n \f\n /* in c-parse.in */\n extern void c_parse_init\t\t\tPARAMS ((void));\n@@ -219,6 +221,7 @@ extern tree start_struct                        PARAMS ((enum tree_code, tree));\n extern void store_parm_decls                    PARAMS ((void));\n extern tree xref_tag                            PARAMS ((enum tree_code, tree));\n extern tree c_begin_compound_stmt               PARAMS ((void));\n+extern void c_expand_deferred_function          PARAMS ((tree));\n extern void c_expand_decl_stmt                  PARAMS ((tree));\n \n /* in c-typeck.c */"}, {"sha": "5fec773a994dab69f07c08e94fc88f292d5e86de", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -78,7 +78,7 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \\\n-   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n+   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h $(VARRAY_H) \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n    $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \\\n    $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h"}, {"sha": "2d345882c2de6cb7902febf22a0742a5e7ea31ba", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0e9a7297b04510099c0cf5b30ad3c368bd9da0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8b0e9a7297b04510099c0cf5b30ad3c368bd9da0", "patch": "@@ -58,6 +58,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"varray.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n@@ -469,6 +470,8 @@ static int print_struct_values = 0;\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+static varray_type deferred_fns;\n+\n /* Post-switch processing.  */\n static void\n objc_post_options ()\n@@ -593,11 +596,36 @@ objc_init ()\n \n   objc_act_parse_init ();\n   c_parse_init ();\n+\n+  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n+  ggc_add_tree_varray_root (&deferred_fns, 1);\n+}\n+\n+/* Register a function tree, so that its optimization and conversion\n+   to RTL is only done at the end of the compilation.  */\n+\n+int\n+defer_fn (fn)\n+     tree fn;\n+{\n+  VARRAY_PUSH_TREE (deferred_fns, fn);\n+\n+  return 1;\n }\n \n void\n finish_file ()\n {\n+  int i;\n+\n+  for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n+    /* Don't output the same function twice.  We may run into such\n+       situations when an extern inline function is later given a\n+       non-extern-inline definition.  */\n+    if (! TREE_ASM_WRITTEN (VARRAY_TREE (deferred_fns, i)))\n+      c_expand_deferred_function (VARRAY_TREE (deferred_fns, i));\n+  VARRAY_FREE (deferred_fns);\n+\n   finish_objc ();\t\t/* Objective-C finalization */\n \n   if (gen_declaration_file)"}]}