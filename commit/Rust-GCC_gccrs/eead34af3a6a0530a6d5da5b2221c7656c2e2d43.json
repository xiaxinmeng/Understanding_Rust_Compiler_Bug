{"sha": "eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhZDM0YWYzYTZhMDUzMGE2ZDVkYTViMjIyMWM3NjU2YzJlMmQ0Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-10T19:59:12Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-10T19:59:12Z"}, "message": "[C++ PATCH] Hash mangling alias\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00618.html\n\t* decl2.c (struct mangled_decl_hash): New hash traits.\n\t(mangled_decls): Make hash_table<mangled_decl_hash>.\n\t(generate_mangling_alias, record_mangling): Adjust.\n\nFrom-SVN: r253608", "tree": {"sha": "ea5180cac30efcceb73869fa7b6d056dc6804865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5180cac30efcceb73869fa7b6d056dc6804865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eead34af3a6a0530a6d5da5b2221c7656c2e2d43/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24d8f6b62ad28742c467c937f4521ee7c4967513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d8f6b62ad28742c467c937f4521ee7c4967513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d8f6b62ad28742c467c937f4521ee7c4967513"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "40c4c2f41846efde502cafea12e1152d92bc7c8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eead34af3a6a0530a6d5da5b2221c7656c2e2d43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eead34af3a6a0530a6d5da5b2221c7656c2e2d43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "patch": "@@ -1,3 +1,9 @@\n+2017-10-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.c (struct mangled_decl_hash): New hash traits.\n+\t(mangled_decls): Make hash_table<mangled_decl_hash>.\n+\t(generate_mangling_alias, record_mangling): Adjust.\n+\n 2017-10-10  Jason Merrill  <jason@redhat.com>\n \n \tMore delayed lambda capture fixes."}, {"sha": "3c93d5c7cf5ea1c07fa6ea6ca5bc4d408882175f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eead34af3a6a0530a6d5da5b2221c7656c2e2d43/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eead34af3a6a0530a6d5da5b2221c7656c2e2d43/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eead34af3a6a0530a6d5da5b2221c7656c2e2d43", "patch": "@@ -102,9 +102,35 @@ static GTY(()) vec<tree, va_gc> *no_linkage_decls;\n    is to be an alias for the former if the former is defined.  */\n static GTY(()) vec<tree, va_gc> *mangling_aliases;\n \n-/* A hash table of mangled names to decls.  Used to figure out if we\n-   need compatibility aliases.  */\n-static GTY(()) hash_map<lang_identifier *, tree> *mangled_decls;\n+/* hash traits for declarations.  Hashes single decls via\n+   DECL_ASSEMBLER_NAME.  */\n+\n+struct mangled_decl_hash : ggc_remove <tree>\n+{\n+  typedef tree value_type; /* A DECL.  */\n+  typedef tree compare_type; /* An identifier.  */\n+\n+  static hashval_t hash (const value_type decl)\n+  {\n+    return IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME (decl));\n+  }\n+  static bool equal (const value_type existing, compare_type candidate)\n+  {\n+    tree name = DECL_ASSEMBLER_NAME (existing);\n+    return candidate == name;\n+  }\n+\n+  static inline void mark_empty (value_type &p) {p = NULL_TREE;}\n+  static inline bool is_empty (value_type p) {return !p;}\n+\n+  /* Nothing is deletable.  Everything is insertable.  */\n+  static bool is_deleted (value_type) { return false; }\n+  static void mark_deleted (value_type) { gcc_unreachable (); }\n+};\n+\n+/* A hash table of decls keyed by mangled name.  Used to figure out if\n+   we need compatibility aliases.  */\n+static GTY(()) hash_table<mangled_decl_hash> *mangled_decls;\n \n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n@@ -4304,12 +4330,13 @@ generate_mangling_alias (tree decl, tree id2)\n \treturn;\n     }\n \n-  bool existed;\n-  tree *slot = &mangled_decls->get_or_insert (id2, &existed);\n+  tree *slot\n+    = mangled_decls->find_slot_with_hash (id2, IDENTIFIER_HASH_VALUE (id2),\n+\t\t\t\t\t  INSERT);\n \n   /* If there's a declaration already using this mangled name,\n      don't create a compatibility alias that conflicts.  */\n-  if (existed)\n+  if (*slot)\n     return;\n \n   tree alias = make_alias_for (decl, id2);\n@@ -4369,24 +4396,25 @@ void\n record_mangling (tree decl, bool need_warning)\n {\n   if (!mangled_decls)\n-    mangled_decls = hash_map<lang_identifier *, tree>::create_ggc (499);\n+    mangled_decls = hash_table<mangled_decl_hash>::create_ggc (499);\n \n   gcc_checking_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n   tree id = DECL_ASSEMBLER_NAME (decl);\n-  bool existed;\n-  tree *slot = &mangled_decls->get_or_insert (id, &existed);\n+  tree *slot\n+    = mangled_decls->find_slot_with_hash (id, IDENTIFIER_HASH_VALUE (id),\n+\t\t\t\t\t  INSERT);\n \n   /* If this is already an alias, remove the alias, because the real\n      decl takes precedence.  */\n-  if (existed && DECL_ARTIFICIAL (*slot) && DECL_IGNORED_P (*slot))\n+  if (*slot && DECL_ARTIFICIAL (*slot) && DECL_IGNORED_P (*slot))\n     if (symtab_node *n = symtab_node::get (*slot))\n       if (n->cpp_implicit_alias)\n \t{\n \t  n->remove ();\n-\t  existed = false;\n+\t  *slot = NULL_TREE;\n \t}\n \n-  if (!existed)\n+  if (!*slot)\n     *slot = decl;\n   else if (need_warning)\n     {"}]}