{"sha": "b915718fdd303e6c7717749aa2a37dff0e495890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxNTcxOGZkZDMwM2U2Yzc3MTc3NDlhYTJhMzdkZmYwZTQ5NTg5MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-08-17T08:50:29Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-08-17T08:50:29Z"}, "message": "arm.md (arm_addsi3): New variant for Thumb2 16-bit ADD instruction.\n\n\t* arm.md (arm_addsi3): New variant for Thumb2 16-bit ADD instruction.\n\t* arm.c (thumb2_reorg): Don't convert an ADD instruction that's\n\talready 16 bits.\n\nFrom-SVN: r190472", "tree": {"sha": "ff2d0defdc46e94b1c405da9d86044ecd059f586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff2d0defdc46e94b1c405da9d86044ecd059f586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b915718fdd303e6c7717749aa2a37dff0e495890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b915718fdd303e6c7717749aa2a37dff0e495890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b915718fdd303e6c7717749aa2a37dff0e495890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b915718fdd303e6c7717749aa2a37dff0e495890/comments", "author": null, "committer": null, "parents": [{"sha": "5deac3404d220cb68d893eb6c86ed2fa3ab3134c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5deac3404d220cb68d893eb6c86ed2fa3ab3134c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5deac3404d220cb68d893eb6c86ed2fa3ab3134c"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "a053f1bbebfc78c7d769aa25c8f7f136a0e04868", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b915718fdd303e6c7717749aa2a37dff0e495890", "patch": "@@ -1,3 +1,9 @@\n+2012-08-17  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (arm_addsi3): New variant for Thumb2 16-bit ADD instruction.\n+\t* arm.c (thumb2_reorg): Don't convert an ADD instruction that's\n+\talready 16 bits.\n+\n 2012-08-17  Richard Guenther  <rguenther@suse.de>\n \n \t* hash-table.h (class hash_table): Use a descriptor template"}, {"sha": "2805b7c7bf346af38523e02ee295f7e68c912411", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b915718fdd303e6c7717749aa2a37dff0e495890", "patch": "@@ -13309,6 +13309,13 @@ thumb2_reorg (void)\n \t\t  switch (GET_CODE (src))\n \t\t    {\n \t\t    case PLUS:\n+\t\t      /* Adding two registers and storing the result\n+\t\t\t in the first source is already a 16-bit\n+\t\t\t operation.  */\n+\t\t      if (rtx_equal_p (dst, op0)\n+\t\t\t  && register_operand (op1, SImode))\n+\t\t\tbreak;\n+\n \t\t      if (low_register_operand (op0, SImode))\n \t\t\t{\n \t\t\t  /* ADDS <Rd>,<Rn>,<Rm>  */"}, {"sha": "6a642bfc01e65856abb8e22e94b15e61de30f8fb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b915718fdd303e6c7717749aa2a37dff0e495890/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b915718fdd303e6c7717749aa2a37dff0e495890", "patch": "@@ -746,11 +746,12 @@\n ;;  (plus (reg rN) (reg sp)) into (reg rN).  In this case reload will\n ;; put the duplicated register first, and not try the commutative version.\n (define_insn_and_split \"*arm_addsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=r, k,r,r, k, r, k,k,r, k, r\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"%rk,k,r,rk,k, rk,k,r,rk,k, rk\")\n-\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rI,rI,k,Pj,Pj,L, L,L,PJ,PJ,?n\")))]\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=rk, r,k, r,r, k, r, k,k,r, k, r\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0, rk,k, r,rk,k, rk,k,r,rk,k, rk\")\n+\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rk, rI,rI,k,Pj,Pj,L, L,L,PJ,PJ,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n+   add%?\\\\t%0, %0, %2\n    add%?\\\\t%0, %1, %2\n    add%?\\\\t%0, %1, %2\n    add%?\\\\t%0, %2, %1\n@@ -773,9 +774,9 @@\n \t\t      operands[1], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,16\")\n+  [(set_attr \"length\" \"2,4,4,4,4,4,4,4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"*,*,*,t2,t2,*,*,a,t2,t2,*\")]\n+   (set_attr \"arch\" \"t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")]\n )\n \n (define_insn_and_split \"*thumb1_addsi3\""}]}