{"sha": "30a390c8104f9530cd8721e699deecd823fc4e9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhMzkwYzgxMDRmOTUzMGNkODcyMWU2OTlkZWVjZDgyM2ZjNGU5Yw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-10-08T10:18:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-10-08T10:18:51Z"}, "message": "re PR fortran/47844 (Array stride ignored for pointer-valued function results)\n\n2011-10-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/47844\n\t* trans-array.c (gfc_conv_array_index_offset): Use descriptor\n\tstride for pointer function results.\n\n2011-10-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/47844\n\t* gfortran.dg/pointer_function_result_1.f90 : New test.\n\nFrom-SVN: r179710", "tree": {"sha": "d83041e7329684cc9e5bb1640494f98255167e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83041e7329684cc9e5bb1640494f98255167e1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a390c8104f9530cd8721e699deecd823fc4e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a390c8104f9530cd8721e699deecd823fc4e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a390c8104f9530cd8721e699deecd823fc4e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a390c8104f9530cd8721e699deecd823fc4e9c/comments", "author": null, "committer": null, "parents": [{"sha": "2758ee999024e2142f491114d4c256e7fcd51457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2758ee999024e2142f491114d4c256e7fcd51457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2758ee999024e2142f491114d4c256e7fcd51457"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "2c09f9aeef62300dafda186bbfad6f2dcdec073e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=30a390c8104f9530cd8721e699deecd823fc4e9c", "patch": "@@ -1,3 +1,9 @@\n+2011-10-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/47844\n+\t* trans-array.c (gfc_conv_array_index_offset): Use descriptor\n+\tstride for pointer function results.\n+\n 2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans-array.c\t(gfc_conv_expr_descriptor): Remove trailing whitespace."}, {"sha": "b7556704ca19eb4dcf8b0ded067c03355dfb8528", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=30a390c8104f9530cd8721e699deecd823fc4e9c", "patch": "@@ -2609,6 +2609,18 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n       /* Temporary array or derived type component.  */\n       gcc_assert (se->loop);\n       index = se->loop->loopvar[se->loop->order[i]];\n+\n+      /* Pointer functions can have stride[0] different from unity. \n+\t Use the stride returned by the function call and stored in\n+\t the descriptor for the temporary.  */ \n+      if (se->ss && se->ss->type == GFC_SS_FUNCTION\n+\t    && se->ss->expr\n+\t    && se->ss->expr->symtree\n+\t    && se->ss->expr->symtree->n.sym->result\n+\t    && se->ss->expr->symtree->n.sym->result->attr.pointer)\n+\tstride = gfc_conv_descriptor_stride_get (info->descriptor,\n+\t\t\t\t\t\t gfc_rank_cst[dim]);\n+\n       if (!integer_zerop (info->delta[dim]))\n \tindex = fold_build2_loc (input_location, PLUS_EXPR,\n \t\t\t\t gfc_array_index_type, index, info->delta[dim]);"}, {"sha": "02a8ffd119e837b78a98c68ccf6a1d23e91aa948", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30a390c8104f9530cd8721e699deecd823fc4e9c", "patch": "@@ -1,3 +1,8 @@\n+2011-10-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/47844\n+\t* gfortran.dg/pointer_function_result_1.f90 : New test.\n+\n 2011-10-07  David S. Miller  <davem@davemloft.net>\n \n \tPR 50655"}, {"sha": "764a666be963d4b04f253223b5c4aa9451c4bba6", "filename": "gcc/testsuite/gfortran.dg/pointer_function_result_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_function_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a390c8104f9530cd8721e699deecd823fc4e9c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_function_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_function_result_1.f90?ref=30a390c8104f9530cd8721e699deecd823fc4e9c", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! Test the fix for PR47844, in which the stride in the function result\n+! was ignored. Previously, the result was [1,3] at lines 15 and 16.\n+!\n+! Contributed by KePu  <Kdx1999@gmail.com>\n+!\n+PROGRAM test_pointer_value\n+  IMPLICIT NONE\n+  INTEGER, DIMENSION(10), TARGET :: array= [1,3,5,7,9,11,13,15,17,19]\n+  INTEGER, dimension(2) :: array_fifth\n+  INTEGER, POINTER, DIMENSION(:) :: ptr_array => NULL()\n+  INTEGER, POINTER, DIMENSION(:) :: ptr_array_fifth => NULL()\n+  ptr_array => array\n+  array_fifth = every_fifth (ptr_array)\n+  if (any (array_fifth .ne. [1,11])) call abort\n+  if (any (every_fifth(ptr_array) .ne. [1,11])) call abort\n+CONTAINS\n+  FUNCTION every_fifth (ptr_array) RESULT (ptr_fifth)\n+    IMPLICIT NONE\n+    INTEGER, POINTER, DIMENSION(:) :: ptr_fifth\n+    INTEGER, POINTER, DIMENSION(:), INTENT(in) :: ptr_array\n+    INTEGER :: low\n+    INTEGER :: high\n+    low = LBOUND (ptr_array, 1)\n+    high = UBOUND (ptr_array, 1)\n+    ptr_fifth => ptr_array (low: high: 5) \n+  END FUNCTION every_fifth\n+END PROGRAM test_pointer_value"}]}