{"sha": "4e73978c92be03d54f81d047ad79102c0efcbc5b", "node_id": "C_kwDOANBUbNoAKDRlNzM5NzhjOTJiZTAzZDU0ZjgxZDA0N2FkNzkxMDJjMGVmY2JjNWI", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:38:41Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests for vmlasq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c: Likewise.", "tree": {"sha": "bf0ddda5cce87ab0d120bd8018273b132452f7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf0ddda5cce87ab0d120bd8018273b132452f7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e73978c92be03d54f81d047ad79102c0efcbc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73978c92be03d54f81d047ad79102c0efcbc5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e73978c92be03d54f81d047ad79102c0efcbc5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73978c92be03d54f81d047ad79102c0efcbc5b/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a21c1451fc68c8d97e19aac62ed53fa0b803242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a21c1451fc68c8d97e19aac62ed53fa0b803242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a21c1451fc68c8d97e19aac62ed53fa0b803242"}], "stats": {"total": 432, "additions": 348, "deletions": 84}, "files": [{"sha": "af6e588adad47884a4c80c6bdfe7182275879b15", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo (int16x8_t m1, int16x8_t m2, int16_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_s16 (a, b, c, p);\n+  return vmlasq_m_n_s16 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+foo1 (int16x8_t m1, int16x8_t m2, int16_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9d0cc3076d923394b5a87ce93aec62c028b798f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo (int32x4_t m1, int32x4_t m2, int32_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_s32 (a, b, c, p);\n+  return vmlasq_m_n_s32 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+foo1 (int32x4_t m1, int32x4_t m2, int32_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "772ad8b1e767417f94aa40e598e535269a1d99d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo (int8x16_t m1, int8x16_t m2, int8_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_s8 (a, b, c, p);\n+  return vmlasq_m_n_s8 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+foo1 (int8x16_t m1, int8x16_t m2, int8_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b02dc64a31b863bbced3dd215bd38efde695ec50", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+foo (uint16x8_t m1, uint16x8_t m2, uint16_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_u16 (a, b, c, p);\n+  return vmlasq_m_n_u16 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+foo1 (uint16x8_t m1, uint16x8_t m2, uint16_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t m1, uint16x8_t m2, mve_pred16_t p)\n+{\n+  return vmlasq_m (m1, m2, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0214cf2136e7ca5a2a205e4548269578de613748", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+foo (uint32x4_t m1, uint32x4_t m2, uint32_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_u32 (a, b, c, p);\n+  return vmlasq_m_n_u32 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+foo1 (uint32x4_t m1, uint32x4_t m2, uint32_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t m1, uint32x4_t m2, mve_pred16_t p)\n+{\n+  return vmlasq_m (m1, m2, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c9824e332f7cacb4e5a8acc7ea3b252dd1b2902b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+foo (uint8x16_t m1, uint8x16_t m2, uint8_t add, mve_pred16_t p)\n {\n-  return vmlasq_m_n_u8 (a, b, c, p);\n+  return vmlasq_m_n_u8 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+foo1 (uint8x16_t m1, uint8x16_t m2, uint8_t add, mve_pred16_t p)\n {\n-  return vmlasq_m (a, b, c, p);\n+  return vmlasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmlast.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlast.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t m1, uint8x16_t m2, mve_pred16_t p)\n+{\n+  return vmlasq_m (m1, m2, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6708a7417902562c5f32752b2dc0553eccfdbbf6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo (int16x8_t a, int16x8_t b, int16_t c)\n+foo (int16x8_t m1, int16x8_t m2, int16_t add)\n {\n-  return vmlasq_n_s16 (a, b, c);\n+  return vmlasq_n_s16 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n-foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+foo1 (int16x8_t m1, int16x8_t m2, int16_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4e8bf32e016b2c2b5e20bfe59653a87cbf322b3e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo (int32x4_t a, int32x4_t b, int32_t c)\n+foo (int32x4_t m1, int32x4_t m2, int32_t add)\n {\n-  return vmlasq_n_s32 (a, b, c);\n+  return vmlasq_n_s32 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n-foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+foo1 (int32x4_t m1, int32x4_t m2, int32_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1cb1a31459c5d6af7e68d04314626e9059e06d8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo (int8x16_t a, int8x16_t b, int8_t c)\n+foo (int8x16_t m1, int8x16_t m2, int8_t add)\n {\n-  return vmlasq_n_s8 (a, b, c);\n+  return vmlasq_n_s8 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n-foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+foo1 (int8x16_t m1, int8x16_t m2, int8_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e03c91ef2986abd3fc83f6e8da64120bccd43f46", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+foo (uint16x8_t m1, uint16x8_t m2, uint16_t add)\n {\n-  return vmlasq_n_u16 (a, b, c);\n+  return vmlasq_n_u16 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+foo1 (uint16x8_t m1, uint16x8_t m2, uint16_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmlas.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t m1, uint16x8_t m2)\n+{\n+  return vmlasq (m1, m2, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b80c3c7631f1a7f675a65b736bb3fef0e3001b1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+foo (uint32x4_t m1, uint32x4_t m2, uint32_t add)\n {\n-  return vmlasq_n_u32 (a, b, c);\n+  return vmlasq_n_u32 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+foo1 (uint32x4_t m1, uint32x4_t m2, uint32_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmlas.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t m1, uint32x4_t m2)\n+{\n+  return vmlasq (m1, m2, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0f37550160ed7eadb9a27d5ebae702488a7b590d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e73978c92be03d54f81d047ad79102c0efcbc5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c?ref=4e73978c92be03d54f81d047ad79102c0efcbc5b", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlas.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+foo (uint8x16_t m1, uint8x16_t m2, uint8_t add)\n {\n-  return vmlasq_n_u8 (a, b, c);\n+  return vmlasq_n_u8 (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlas.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+foo1 (uint8x16_t m1, uint8x16_t m2, uint8_t add)\n {\n-  return vmlasq (a, b, c);\n+  return vmlasq (m1, m2, add);\n }\n \n-/* { dg-final { scan-assembler \"vmlas.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmlas.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t m1, uint8x16_t m2)\n+{\n+  return vmlasq (m1, m2, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}