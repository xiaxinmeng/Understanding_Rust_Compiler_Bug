{"sha": "d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiYThhNzVlZjBhMmJiYzA3OGRmMWExMDEyMzVhMDViNmU3MDc4Nw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-01-07T11:32:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-01-07T11:32:07Z"}, "message": "re PR libgcj/18115 (JNI nio buffer functions only work with byte buffers)\n\n2005-01-07  Michael Koch  <konqueror@gmx.de>\n\n\tPR libgcj/18115\n\t* java/nio/Buffer.java (address): New field.\n\t* java/nio/DirectByteBufferImpl.java (address): Removed.\n\t* java/nio/MappedByteBufferImpl.java (address): Likewise.\n\t* java/nio/CharViewBufferImpl.java (CharViewBufferImpl):\n\tExplicitly initialize Buffer.address if needed.\n\t* java/nio/DoubleViewBufferImpl.java (DoubleViewBufferImpl): Likewise.\n\t* java/nio/FloatViewBufferImpl.java (FloatViewBufferImpl): Likewise.\n\t* java/nio/IntViewBufferImpl.java (IntViewBufferImpl): Likewise.\n\t* java/nio/LongViewBufferImpl.java (LongViewBufferImpl): Likewise.\n\t* java/nio/ShortViewBufferImpl.java (ShortViewBufferImpl): Likewise.\n\t* jni.cc (_Jv_JNI_GetDirectBufferAddress): Don't assume buffer is a\n\tDirectByteBufferImpl object.\n\t(_Jv_JNI_GetDirectBufferCapacity): Likewise.\n\t* testsuite/libjava.jni/directbuffer.c,\n\ttestsuite/libjava.jni/directbuffer.java,\n\ttestsuite/libjava.jni/directbuffer.out,\n\ttestsuite/libjava.jni/bytebuffer.c,\n\ttestsuite/libjava.jni/bytebuffer.java,\n\ttestsuite/libjava.jni/bytebuffer.out: New files.\n\nFrom-SVN: r93046", "tree": {"sha": "be94893c552db65c2384cd29222e07c02378c21c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be94893c552db65c2384cd29222e07c02378c21c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/comments", "author": null, "committer": null, "parents": [{"sha": "4600cc14275bb31771b3a5ee914125af1796064b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4600cc14275bb31771b3a5ee914125af1796064b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4600cc14275bb31771b3a5ee914125af1796064b"}], "stats": {"total": 325, "additions": 319, "deletions": 6}, "files": [{"sha": "f60f481317ce3b87a608f752c8c0b137a40b0f9d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -1,3 +1,26 @@\n+2005-01-07  Michael Koch  <konqueror@gmx.de>\n+\n+\tPR libgcj/18115\n+\t* java/nio/Buffer.java (address): New field.\n+\t* java/nio/DirectByteBufferImpl.java (address): Removed.\n+\t* java/nio/MappedByteBufferImpl.java (address): Likewise.\n+\t* java/nio/CharViewBufferImpl.java (CharViewBufferImpl):\n+\tExplicitly initialize Buffer.address if needed.\n+\t* java/nio/DoubleViewBufferImpl.java (DoubleViewBufferImpl): Likewise.\n+\t* java/nio/FloatViewBufferImpl.java (FloatViewBufferImpl): Likewise.\n+\t* java/nio/IntViewBufferImpl.java (IntViewBufferImpl): Likewise.\n+\t* java/nio/LongViewBufferImpl.java (LongViewBufferImpl): Likewise.\n+\t* java/nio/ShortViewBufferImpl.java (ShortViewBufferImpl): Likewise.\n+\t* jni.cc (_Jv_JNI_GetDirectBufferAddress): Don't assume buffer is a\n+\tDirectByteBufferImpl object.\n+\t(_Jv_JNI_GetDirectBufferCapacity): Likewise.\n+\t* testsuite/libjava.jni/directbuffer.c,\n+\ttestsuite/libjava.jni/directbuffer.java,\n+\ttestsuite/libjava.jni/directbuffer.out,\n+\ttestsuite/libjava.jni/bytebuffer.c,\n+\ttestsuite/libjava.jni/bytebuffer.java,\n+\ttestsuite/libjava.jni/bytebuffer.out: New files.\n+\n 2005-01-05  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/zip/ZipEntry.java (setCompressedSize): Allow any"}, {"sha": "dff7f60c7441c1fac9d1c35dd4a988a0731dbfa6", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -38,12 +38,18 @@\n \n package java.nio;\n \n+import gnu.gcj.RawData;\n+\n+/**\n+ * @since 1.4\n+ */\n public abstract class Buffer\n {\n   int cap = 0;\n   int limit = 0;\n   int pos = 0;\n   int mark = -1;\n+  RawData address;\n \n   /**\n    * Creates a new Buffer."}, {"sha": "2701983ead530c08eb10b8dc9c9fa19473e6b45c", "filename": "libjava/java/nio/CharViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ class CharViewBufferImpl extends CharBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public CharViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public CharViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "c272bacbf72887d516ac9e4ded7fb2da015ba49b", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -55,7 +55,6 @@ abstract class DirectByteBufferImpl extends ByteBuffer\n     *                                 memory and should free it.\n     */\n   private final Object owner;\n-  final RawData address;\n \n   final static class ReadOnly extends DirectByteBufferImpl\n   {"}, {"sha": "276e275704528d9faec36e127a61bfc8d7bb3b44", "filename": "libjava/java/nio/DoubleViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ final class DoubleViewBufferImpl extends DoubleBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public DoubleViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public DoubleViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "3dd0736fb491cc0afb181b043ee346a90319a0b6", "filename": "libjava/java/nio/FloatViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ final class FloatViewBufferImpl extends FloatBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public FloatViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public FloatViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "ff8b27be1a48dce903d1c5863254e985377d8020", "filename": "libjava/java/nio/IntViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ final class IntViewBufferImpl extends IntBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public IntViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public IntViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "bfa64d0ad9a37a9352342cbf36cc7a26e9310d09", "filename": "libjava/java/nio/LongViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ final class LongViewBufferImpl extends LongBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public LongViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public LongViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "63e0225bc511d244eee243125872bf439f589f55", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -45,7 +45,6 @@\n final class MappedByteBufferImpl extends MappedByteBuffer\n {\n   boolean readOnly;\n-  RawData address;\n \n   /** Posix uses this for the pointer returned by mmap;\n    * Win32 uses it for the pointer returned by MapViewOfFile. */"}, {"sha": "acd6c233d07902159ad80dbf91b668343de164b4", "filename": "libjava/java/nio/ShortViewBufferImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -53,6 +53,8 @@ final class ShortViewBufferImpl extends ShortBuffer\n     this.offset = bb.position();\n     this.readOnly = bb.isReadOnly();\n     this.endian = bb.order();\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n   \n   public ShortViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n@@ -64,6 +66,8 @@ public ShortViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.offset = offset;\n     this.readOnly = readOnly;\n     this.endian = endian;\n+    if (bb.isDirect())\n+      this.address = VMDirectByteBuffer.adjustAddress(bb.address, offset);\n   }\n \n   /**"}, {"sha": "2f4c3e4fc84c966938fe109fe6b40d8ac01f1fa0", "filename": "libjava/jni.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -41,6 +41,7 @@ details.  */\n #include <java/lang/ThreadGroup.h>\n #include <java/lang/Thread.h>\n #include <java/lang/IllegalAccessError.h>\n+#include <java/nio/Buffer.h>\n #include <java/nio/DirectByteBufferImpl.h>\n #include <java/nio/DirectByteBufferImpl$ReadWrite.h>\n #include <java/util/IdentityHashMap.h>\n@@ -1733,16 +1734,22 @@ static void * JNICALL\n _Jv_JNI_GetDirectBufferAddress (JNIEnv *, jobject buffer)\n {\n   using namespace java::nio;\n-  DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n-  return reinterpret_cast<void *> (bb->address);\n+  if (! _Jv_IsInstanceOf (buffer, &Buffer::class$))\n+    return NULL;\n+  Buffer *tmp = static_cast<Buffer *> (buffer);\n+  return reinterpret_cast<void *> (tmp->address);\n }\n \n static jlong JNICALL\n _Jv_JNI_GetDirectBufferCapacity (JNIEnv *, jobject buffer)\n {\n   using namespace java::nio;\n-  DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n-  return bb->capacity();\n+  if (! _Jv_IsInstanceOf (buffer, &Buffer::class$))\n+    return -1;\n+  Buffer *tmp = static_cast<Buffer *> (buffer);\n+  if (tmp->address == NULL)\n+    return -1;\n+  return tmp->capacity();\n }\n \n \f"}, {"sha": "146c6a8443e33619c3cfb01b855462b70bab2083", "filename": "libjava/testsuite/libjava.jni/bytebuffer.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.c?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,62 @@\n+#include \"bytebuffer.h\"\n+\n+static void\n+test_buffer (JNIEnv *env, jobject buffer, const char *name)\n+{\n+  void *tmp = (*env)->GetDirectBufferAddress (env, buffer);\n+\n+  if (tmp == NULL)\n+    printf (\"PASS: address of %s\\n\", name);\n+  else\n+    printf (\"FAIL: address of %s\\n\", name);\n+\n+  int tmplen = (*env)->GetDirectBufferCapacity (env, buffer);\n+\n+  if (tmplen == -1)\n+    printf (\"PASS: length of %s\\n\", name);\n+  else\n+    printf (\"FAIL: length of %s\\n\", name);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testByteBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.ByteBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testCharBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.CharBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testDoubleBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.DoubleBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testFloatBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.FloatBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testIntBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.IntBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testLongBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.LongBuffer\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_bytebuffer_testShortBuffer (JNIEnv *env, jclass k, jobject buffer)\n+{\n+  test_buffer (env, buffer, \"java.nio.ShortBuffer\");\n+}\n+"}, {"sha": "0e541123f55c7965dc07d5c107a3f566c76836bb", "filename": "libjava/testsuite/libjava.jni/bytebuffer.java", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,38 @@\n+// Test to make sure JNI implementation catches exceptions.\n+\n+import java.nio.*;\n+\n+public class bytebuffer\n+{\n+  static\n+  {\n+    System.loadLibrary(\"bytebuffer\");\n+  }\n+\n+  public static native void testByteBuffer(ByteBuffer bb);\n+  public static native void testCharBuffer(CharBuffer b);\n+  public static native void testDoubleBuffer(DoubleBuffer b);\n+  public static native void testFloatBuffer(FloatBuffer b);\n+  public static native void testIntBuffer(IntBuffer b);\n+  public static native void testLongBuffer(LongBuffer b);\n+  public static native void testShortBuffer(ShortBuffer b);\n+\n+  public static void main(String[] args)\n+  {\n+    ByteBuffer bb = ByteBuffer.allocate(1024);\n+    testByteBuffer(bb);\n+    testCharBuffer(bb.asCharBuffer());\n+    testDoubleBuffer(bb.asDoubleBuffer());\n+    testFloatBuffer(bb.asFloatBuffer());\n+    testIntBuffer(bb.asIntBuffer());\n+    testLongBuffer(bb.asLongBuffer());\n+    testShortBuffer(bb.asShortBuffer());\n+\n+    testCharBuffer(CharBuffer.allocate(1024));\n+    testDoubleBuffer(DoubleBuffer.allocate(1024));\n+    testFloatBuffer(FloatBuffer.allocate(1024));\n+    testIntBuffer(IntBuffer.allocate(1024));\n+    testLongBuffer(LongBuffer.allocate(1024));\n+    testShortBuffer(ShortBuffer.allocate(1024));\n+  }\n+}"}, {"sha": "5af92e20612a8cc87b704de8491b78031f794a3a", "filename": "libjava/testsuite/libjava.jni/bytebuffer.out", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fbytebuffer.out?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,26 @@\n+PASS: address of java.nio.ByteBuffer\n+PASS: length of java.nio.ByteBuffer\n+PASS: address of java.nio.CharBuffer\n+PASS: length of java.nio.CharBuffer\n+PASS: address of java.nio.DoubleBuffer\n+PASS: length of java.nio.DoubleBuffer\n+PASS: address of java.nio.FloatBuffer\n+PASS: length of java.nio.FloatBuffer\n+PASS: address of java.nio.IntBuffer\n+PASS: length of java.nio.IntBuffer\n+PASS: address of java.nio.LongBuffer\n+PASS: length of java.nio.LongBuffer\n+PASS: address of java.nio.ShortBuffer\n+PASS: length of java.nio.ShortBuffer\n+PASS: address of java.nio.CharBuffer\n+PASS: length of java.nio.CharBuffer\n+PASS: address of java.nio.DoubleBuffer\n+PASS: length of java.nio.DoubleBuffer\n+PASS: address of java.nio.FloatBuffer\n+PASS: length of java.nio.FloatBuffer\n+PASS: address of java.nio.IntBuffer\n+PASS: length of java.nio.IntBuffer\n+PASS: address of java.nio.LongBuffer\n+PASS: length of java.nio.LongBuffer\n+PASS: address of java.nio.ShortBuffer\n+PASS: length of java.nio.ShortBuffer"}, {"sha": "3d32aba01fbd9d2e1cc139e1c59020e3fdd2a80c", "filename": "libjava/testsuite/libjava.jni/directbuffer.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.c?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,75 @@\n+#include <stdlib.h>\n+\n+#include \"directbuffer.h\"\n+\n+#define BUFFER_SIZE 1024\n+\n+static void *address;\n+\n+JNIEXPORT jobject JNICALL\n+Java_directbuffer_createDirectByteBuffer (JNIEnv *env, jclass k)\n+{\n+  address = malloc (BUFFER_SIZE);\n+  return (*env)->NewDirectByteBuffer (env, address, 1024);\n+}\n+\n+static void\n+test_buffer (JNIEnv *env, jobject buffer, const char *name, int len)\n+{\n+  void *tmp = (*env)->GetDirectBufferAddress (env, buffer);\n+\n+  if (address == tmp)\n+    printf (\"PASS: address of %s\\n\", name);\n+  else\n+    printf (\"FAIL: address of %s\\n\", name);\n+\n+  int tmplen = (*env)->GetDirectBufferCapacity (env, buffer);\n+\n+  if (len == tmplen)\n+    printf (\"PASS: length of %s\\n\", name);\n+  else\n+    printf (\"FAIL: length of %s\\n\", name);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testDirectByteBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"direct java.nio.ByteBuffer\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testCharBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.CharBuffer view\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testDoubleBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.DoubleBuffer view\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testFloatBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.FloatBuffer view\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testIntBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.IntBuffer view\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testLongBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.LongBuffer view\", len);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_directbuffer_testShortBuffer (JNIEnv *env, jclass k, jobject buffer, jint len)\n+{\n+  test_buffer (env, buffer, \"java.nio.ShortBuffer view\", len);\n+}\n+"}, {"sha": "ee844b9016d1c9c9dccd633e4620e01732754549", "filename": "libjava/testsuite/libjava.jni/directbuffer.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.java?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,40 @@\n+// Test to make sure JNI implementation catches exceptions.\n+\n+import java.nio.*;\n+\n+public class directbuffer\n+{\n+  static\n+  {\n+    System.loadLibrary(\"directbuffer\");\n+  }\n+\n+  public static native ByteBuffer createDirectByteBuffer();\n+  \n+  public static native void testDirectByteBuffer(ByteBuffer bb, int len);\n+  public static native void testCharBuffer(CharBuffer b, int len);\n+  public static native void testDoubleBuffer(DoubleBuffer b, int len);\n+  public static native void testFloatBuffer(FloatBuffer b, int len);\n+  public static native void testIntBuffer(IntBuffer b, int len);\n+  public static native void testLongBuffer(LongBuffer b, int len);\n+  public static native void testShortBuffer(ShortBuffer b, int len);\n+\n+  public static void main(String[] args)\n+  {\n+    ByteBuffer bb = createDirectByteBuffer();\n+    CharBuffer cb = bb.asCharBuffer();\n+    DoubleBuffer db = bb.asDoubleBuffer();\n+    FloatBuffer fb = bb.asFloatBuffer();\n+    IntBuffer ib = bb.asIntBuffer();\n+    LongBuffer lb = bb.asLongBuffer();\n+    ShortBuffer sb = bb.asShortBuffer();\n+\n+    testDirectByteBuffer(bb, 1024);\n+    testCharBuffer(cb, 512);\n+    testDoubleBuffer(db, 128);\n+    testFloatBuffer(fb, 256);\n+    testIntBuffer(ib, 256);\n+    testLongBuffer(lb, 128);\n+    testShortBuffer(sb, 512);\n+  }\n+}"}, {"sha": "c1404b9f21f47136569cd1f7d955be64c5f79576", "filename": "libjava/testsuite/libjava.jni/directbuffer.out", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ba8a75ef0a2bbc078df1a101235a05b6e70787/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fdirectbuffer.out?ref=d2ba8a75ef0a2bbc078df1a101235a05b6e70787", "patch": "@@ -0,0 +1,14 @@\n+PASS: address of direct java.nio.ByteBuffer\n+PASS: length of direct java.nio.ByteBuffer\n+PASS: address of java.nio.CharBuffer view\n+PASS: length of java.nio.CharBuffer view\n+PASS: address of java.nio.DoubleBuffer view\n+PASS: length of java.nio.DoubleBuffer view\n+PASS: address of java.nio.FloatBuffer view\n+PASS: length of java.nio.FloatBuffer view\n+PASS: address of java.nio.IntBuffer view\n+PASS: length of java.nio.IntBuffer view\n+PASS: address of java.nio.LongBuffer view\n+PASS: length of java.nio.LongBuffer view\n+PASS: address of java.nio.ShortBuffer view\n+PASS: length of java.nio.ShortBuffer view"}]}