{"sha": "881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxY2RkNjFlZWY0Y2I0ZTRiOTA3ZjU3MWM2MGM0MWJkYjdkNDNlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-12-22T11:04:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-12-22T11:04:42Z"}, "message": "trans.c (Attribute_to_gnu): If the type is a floating-point type...\n\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_{Min,Max}>: If the\n\ttype is a floating-point type, implement the semantics of the C99\n\tf{min,max} routines with regard to NaNs.\n\t(gnat_to_gnu): Call builtin_decl_implicit.\n\t* gcc-interface/utils2.c (compare_arrays): Adjust comments.\n\nFrom-SVN: r219010", "tree": {"sha": "1aa02b64dae0f5cc24ee6f05fb898f03783b7087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa02b64dae0f5cc24ee6f05fb898f03783b7087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/comments", "author": null, "committer": null, "parents": [{"sha": "35786aad0c7e0ea1987b370a3e69d8730c11ae38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35786aad0c7e0ea1987b370a3e69d8730c11ae38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35786aad0c7e0ea1987b370a3e69d8730c11ae38"}], "stats": {"total": 79, "additions": 69, "deletions": 10}, "files": [{"sha": "a8eba2941f2951e04cb5defcd6a0fc7ae220e79e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "patch": "@@ -1,3 +1,11 @@\n+2014-12-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_{Min,Max}>: If the\n+\ttype is a floating-point type, implement the semantics of the C99\n+\tf{min,max} routines with regard to NaNs.\n+\t(gnat_to_gnu): Call builtin_decl_implicit.\n+\t* gcc-interface/utils2.c (compare_arrays): Adjust comments.\n+\n 2014-12-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_field): Post the error message"}, {"sha": "a91c0c84433ebbd6abe4c378c746f4c2e7f02d37", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "patch": "@@ -2268,9 +2268,56 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \ttree gnu_rhs = gnat_to_gnu (Next (First (Expressions (gnat_node))));\n \n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n-\tgnu_result = build_binary_op (attribute == Attr_Min\n-\t\t\t\t      ? MIN_EXPR : MAX_EXPR,\n-\t\t\t\t      gnu_result_type, gnu_lhs, gnu_rhs);\n+\n+\t/* The result of {MIN,MAX}_EXPR is unspecified if either operand is\n+\t   a NaN so we implement the semantics of C99 f{min,max} to make it\n+\t   predictable in this case: if either operand is a NaN, the other\n+\t   is returned; if both operands are NaN's, a NaN is returned.  */\n+\tif (SCALAR_FLOAT_TYPE_P (gnu_result_type))\n+\t  {\n+\t    const bool lhs_side_effects_p = TREE_SIDE_EFFECTS (gnu_lhs);\n+\t    const bool rhs_side_effects_p = TREE_SIDE_EFFECTS (gnu_rhs);\n+\t    tree t = builtin_decl_explicit (BUILT_IN_ISNAN);\n+\t    tree lhs_is_nan, rhs_is_nan;\n+\n+\t    /* If the operands have side-effects, they need to be evaluated\n+\t       only once in spite of the multiple references in the result.  */\n+\t    if (lhs_side_effects_p)\n+\t      gnu_lhs = gnat_protect_expr (gnu_lhs);\n+\t    if (rhs_side_effects_p)\n+\t      gnu_rhs = gnat_protect_expr (gnu_rhs);\n+\n+\t    lhs_is_nan = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t      build_call_expr (t, 1, gnu_lhs),\n+\t\t\t\t      integer_zero_node);\n+\n+\t    rhs_is_nan = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t      build_call_expr (t, 1, gnu_rhs),\n+\t\t\t\t      integer_zero_node);\n+\n+\t    gnu_result = build_binary_op (attribute == Attr_Min\n+\t\t\t\t\t  ? MIN_EXPR : MAX_EXPR,\n+\t\t\t\t\t  gnu_result_type, gnu_lhs, gnu_rhs);\n+\t    gnu_result = fold_build3 (COND_EXPR, gnu_result_type,\n+\t\t\t\t      rhs_is_nan, gnu_lhs, gnu_result);\n+\t    gnu_result = fold_build3 (COND_EXPR, gnu_result_type,\n+\t\t\t\t      lhs_is_nan, gnu_rhs, gnu_result);\n+\n+\t    /* If the operands have side-effects, they need to be evaluated\n+\t       before doing the tests above since the place they otherwise\n+\t       would end up being evaluated at run time could be wrong.  */\n+\t    if (lhs_side_effects_p)\n+\t      gnu_result\n+\t\t= build2 (COMPOUND_EXPR, gnu_result_type, gnu_lhs, gnu_result);\n+\n+\t    if (rhs_side_effects_p)\n+\t      gnu_result\n+\t\t= build2 (COMPOUND_EXPR, gnu_result_type, gnu_rhs, gnu_result);\n+\t  }\n+\telse\n+\t  gnu_result = build_binary_op (attribute == Attr_Min\n+\t\t\t\t\t? MIN_EXPR : MAX_EXPR,\n+\t\t\t\t\tgnu_result_type, gnu_lhs, gnu_rhs);\n       }\n       break;\n \n@@ -6458,7 +6505,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t      tree size\n \t        = SUBSTITUTE_PLACEHOLDER_IN_EXPR (TYPE_SIZE_UNIT (type), to);\n \t      tree to_ptr = build_fold_addr_expr (to);\n-\t      tree t = builtin_decl_implicit (BUILT_IN_MEMSET);\n+\t      tree t = builtin_decl_explicit (BUILT_IN_MEMSET);\n \t      if (TREE_CODE (value) == INTEGER_CST)\n \t\t{\n \t\t  tree mask\n@@ -6488,7 +6535,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t        = SUBSTITUTE_PLACEHOLDER_IN_EXPR (TYPE_SIZE_UNIT (type), from);\n \t      tree to_ptr = build_fold_addr_expr (to);\n \t      tree from_ptr = build_fold_addr_expr (from);\n-\t      tree t = builtin_decl_implicit (BUILT_IN_MEMMOVE);\n+\t      tree t = builtin_decl_explicit (BUILT_IN_MEMMOVE);\n \t      gnu_result = build_call_expr (t, 3, to_ptr, from_ptr, size);\n \t   }\n \t}"}, {"sha": "43e8a635611d01bb54961071874f8275325f7577", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "patch": "@@ -255,8 +255,8 @@ compare_arrays (location_t loc, tree result_type, tree a1, tree a2)\n   bool a2_side_effects_p = TREE_SIDE_EFFECTS (a2);\n   bool length_zero_p = false;\n \n-  /* If either operand has side-effects, they have to be evaluated only once\n-     in spite of the multiple references to the operand in the comparison.  */\n+  /* If the operands have side-effects, they need to be evaluated only once\n+     in spite of the multiple references in the comparison.  */\n   if (a1_side_effects_p)\n     a1 = gnat_protect_expr (a1);\n \n@@ -419,9 +419,9 @@ compare_arrays (location_t loc, tree result_type, tree a1, tree a2)\n \t\t\t\t\t     a1_is_null, a2_is_null),\n \t\t\t    result);\n \n-  /* If either operand has side-effects, they have to be evaluated before\n-     starting the comparison above since the place they would be otherwise\n-     evaluated could be wrong.  */\n+  /* If the operands have side-effects, they need to be evaluated before\n+     doing the tests above since the place they otherwise would end up\n+     being evaluated at run time could be wrong.  */\n   if (a1_side_effects_p)\n     result = build2 (COMPOUND_EXPR, result_type, a1, result);\n "}, {"sha": "4da1c1955912f15375cc655b13d8e58f04eb848c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881cdd61eef4cb4e4b907f571c60c41bdb7d43ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=881cdd61eef4cb4e4b907f571c60c41bdb7d43ed", "patch": "@@ -1,3 +1,7 @@\n+2014-12-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/nan_max.adb: New test.\n+\n 2014-12-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/volatile1.ads: New test."}]}