{"sha": "ead7c399bc1b0c62bacaf845628ab72024838085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkN2MzOTliYzFiMGM2MmJhY2FmODQ1NjI4YWI3MjAyNDgzODA4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-31T19:15:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-31T19:15:13Z"}, "message": "dwarf2out.c (resolve_addr_in_expr): Optimize away redundant DW_OP_GNU_convert ops.\n\n\t* dwarf2out.c (resolve_addr_in_expr): Optimize away redundant\n\tDW_OP_GNU_convert ops.\n\nFrom-SVN: r174509", "tree": {"sha": "b2319ac7f65366524c7b8737d47793fce8a175cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2319ac7f65366524c7b8737d47793fce8a175cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead7c399bc1b0c62bacaf845628ab72024838085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead7c399bc1b0c62bacaf845628ab72024838085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead7c399bc1b0c62bacaf845628ab72024838085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead7c399bc1b0c62bacaf845628ab72024838085/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "509f4495ee4dedc2a27f9f8f749a0507ef3f1938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509f4495ee4dedc2a27f9f8f749a0507ef3f1938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509f4495ee4dedc2a27f9f8f749a0507ef3f1938"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "8d6dc36ab657354e5e7927dac8aeebfebe29f3ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7c399bc1b0c62bacaf845628ab72024838085/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7c399bc1b0c62bacaf845628ab72024838085/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ead7c399bc1b0c62bacaf845628ab72024838085", "patch": "@@ -1,5 +1,8 @@\n 2011-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (resolve_addr_in_expr): Optimize away redundant\n+\tDW_OP_GNU_convert ops.\n+\n \t* cselib.c (promote_debug_loc): Allow l->next non-NULL for\n \tcselib_preserve_constants.\n \t(cselib_lookup_1): If cselib_preserve_constants,"}, {"sha": "464de166f37ec9e15f52851961b65c4d43985e13", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 75, "deletions": 14, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7c399bc1b0c62bacaf845628ab72024838085/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7c399bc1b0c62bacaf845628ab72024838085/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ead7c399bc1b0c62bacaf845628ab72024838085", "patch": "@@ -24100,23 +24100,84 @@ resolve_one_addr (rtx *addr, void *data ATTRIBUTE_UNUSED)\n static bool\n resolve_addr_in_expr (dw_loc_descr_ref loc)\n {\n+  dw_loc_descr_ref keep = NULL;\n   for (; loc; loc = loc->dw_loc_next)\n-    if (((loc->dw_loc_opc == DW_OP_addr || loc->dtprel)\n-\t && resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n-\t|| (loc->dw_loc_opc == DW_OP_implicit_value\n-\t    && loc->dw_loc_oprnd2.val_class == dw_val_class_addr\n-\t    && resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr, NULL)))\n-      return false;\n-    else if (loc->dw_loc_opc == DW_OP_GNU_implicit_pointer\n-\t     && loc->dw_loc_oprnd1.val_class == dw_val_class_decl_ref)\n+    switch (loc->dw_loc_opc)\n       {\n-\tdw_die_ref ref\n-\t  = lookup_decl_die (loc->dw_loc_oprnd1.v.val_decl_ref);\n-\tif (ref == NULL)\n+      case DW_OP_addr:\n+\tif (resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n+\t  return false;\n+\tbreak;\n+      case DW_OP_const4u:\n+      case DW_OP_const8u:\n+\tif (loc->dtprel\n+\t    && resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n+\t  return false;\n+\tbreak;\n+      case DW_OP_implicit_value:\n+\tif (loc->dw_loc_oprnd2.val_class == dw_val_class_addr\n+\t    && resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr, NULL))\n \t  return false;\n-\tloc->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n-\tloc->dw_loc_oprnd1.v.val_die_ref.die = ref;\n-\tloc->dw_loc_oprnd1.v.val_die_ref.external = 0;\n+\tbreak;\n+      case DW_OP_GNU_implicit_pointer:\n+\tif (loc->dw_loc_oprnd1.val_class == dw_val_class_decl_ref)\n+\t  {\n+\t    dw_die_ref ref\n+\t      = lookup_decl_die (loc->dw_loc_oprnd1.v.val_decl_ref);\n+\t    if (ref == NULL)\n+\t      return false;\n+\t    loc->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n+\t    loc->dw_loc_oprnd1.v.val_die_ref.die = ref;\n+\t    loc->dw_loc_oprnd1.v.val_die_ref.external = 0;\n+\t  }\n+\tbreak;\n+      case DW_OP_GNU_const_type:\n+      case DW_OP_GNU_regval_type:\n+      case DW_OP_GNU_deref_type:\n+      case DW_OP_GNU_convert:\n+      case DW_OP_GNU_reinterpret:\n+\twhile (loc->dw_loc_next\n+\t       && loc->dw_loc_next->dw_loc_opc == DW_OP_GNU_convert)\n+\t  {\n+\t    dw_die_ref base1, base2;\n+\t    unsigned enc1, enc2, size1, size2;\n+\t    if (loc->dw_loc_opc == DW_OP_GNU_regval_type\n+\t\t|| loc->dw_loc_opc == DW_OP_GNU_deref_type)\n+\t      base1 = loc->dw_loc_oprnd2.v.val_die_ref.die;\n+\t    else\n+\t      base1 = loc->dw_loc_oprnd1.v.val_die_ref.die;\n+\t    base2 = loc->dw_loc_next->dw_loc_oprnd1.v.val_die_ref.die;\n+\t    gcc_assert (base1->die_tag == DW_TAG_base_type\n+\t\t\t&& base2->die_tag == DW_TAG_base_type);\n+\t    enc1 = get_AT_unsigned (base1, DW_AT_encoding);\n+\t    enc2 = get_AT_unsigned (base2, DW_AT_encoding);\n+\t    size1 = get_AT_unsigned (base1, DW_AT_byte_size);\n+\t    size2 = get_AT_unsigned (base2, DW_AT_byte_size);\n+\t    if (size1 == size2\n+\t\t&& (((enc1 == DW_ATE_unsigned || enc1 == DW_ATE_signed)\n+\t\t     && (enc2 == DW_ATE_unsigned || enc2 == DW_ATE_signed)\n+\t\t     && loc != keep)\n+\t\t    || enc1 == enc2))\n+\t      {\n+\t\t/* Optimize away next DW_OP_GNU_convert after\n+\t\t   adjusting LOC's base type die reference.  */\n+\t\tif (loc->dw_loc_opc == DW_OP_GNU_regval_type\n+\t\t    || loc->dw_loc_opc == DW_OP_GNU_deref_type)\n+\t\t  loc->dw_loc_oprnd2.v.val_die_ref.die = base2;\n+\t\telse\n+\t\t  loc->dw_loc_oprnd1.v.val_die_ref.die = base2;\n+\t\tloc->dw_loc_next = loc->dw_loc_next->dw_loc_next;\n+\t\tcontinue;\n+\t      }\n+\t    /* Don't change integer DW_OP_GNU_convert after e.g. floating\n+\t       point typed stack entry.  */\n+\t    else if (enc1 != DW_ATE_unsigned && enc1 != DW_ATE_signed)\n+\t      keep = loc;\n+\t    break;\n+\t  }\n+\tbreak;\n+      default:\n+\tbreak;\n       }\n   return true;\n }"}]}