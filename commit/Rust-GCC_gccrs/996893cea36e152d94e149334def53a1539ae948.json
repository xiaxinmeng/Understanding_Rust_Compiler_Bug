{"sha": "996893cea36e152d94e149334def53a1539ae948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2ODkzY2VhMzZlMTUyZDk0ZTE0OTMzNGRlZjUzYTE1MzlhZTk0OA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-16T16:12:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-16T16:12:14Z"}, "message": "re PR target/44762 (score/predicates.md warnings)\n\n\tPR target/44762\n\t* config/score/score3.c (score3_return_in_memory): Constify arguments.\n\t(score3_in_small_data_p, score3_function_value): Likewise.\n\t(score3_trampoline_init): Use LCT_NORMAL.\n\t(score3_print_operand): Initialize code as UNKNOWN.\n\t* config/score/predicates.md (score_load_multiple_operation):\n\tRemove unused variable.\n\t(score_store_multiple_operation): Likewise.\n\t* config/score/score7.c (score7_return_in_memory): Constify arguments.\n        (score7_in_small_data_p, score7_function_value): Likewise.\n\t(score7_trampoline_init): Use LCT_NORMAL.\n\t(score7_print_operand): Initialize code as UNKNOWN.\n\t* config/score/score3.h (score3_return_in_memory): Update prototype.\n\t(score3_in_small_data_p, score3_function_value): Likewise.\n\t* config/score/score-protos.h (score_function_value): Likewise.\n\t* config/score/score7.h (score7_return_in_memory): Update prototype.\n\t(score7_in_small_data_p, score7_function_value): Likewise.\n\t* config/score/score.c (TARGET_PROMOTE_PROTOTYPES): Constify.\n\t(score_return_in_memory, score_pass_by_reference): Constify arguments.\n\t(score_output_mi_thunk, score_function_prologue): Don't return a value.\n\t(score_function_epilogue, score_in_small_data_p): Likewise.\n\t(score_option_override, score_asm_trampoline_template): Likewise.\n\t(score_trampoline_init, score_print_operand): Likewise.\n\t(score_print_operand_address, score_prologue): Likewise.\n\t(score_epilogue, score_call, score_call_value): Likewise.\n\t(score_movsicc, score_movdi, score_zero_extract_andi): Likewise.\n\t(score_function_arg_advance): Likewise. Make static.\n\t(score_asm_file_end): Mark parameter value with ATTRIBUTE_UNUSED.\n\t(score_function_arg, score_legitimate_address_p): Make static.\n\t(score_function_value): Mark parameter func with ATTRIBUTE_UNUSED.\n\t* config/score/score.h (REGNO_REG_CLASS): Cast value to enum reg_class.\n\t* config/score/score-conv.h (UIMM_IN_RANGE, SIMM_IN_RANGE):\n\tAllow (W) == HOST_BITS_PER_WIDE_INT.\n\nFrom-SVN: r166807", "tree": {"sha": "7f2b65bc518dedfda0da9925639625b000f2790f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2b65bc518dedfda0da9925639625b000f2790f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996893cea36e152d94e149334def53a1539ae948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996893cea36e152d94e149334def53a1539ae948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996893cea36e152d94e149334def53a1539ae948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996893cea36e152d94e149334def53a1539ae948/comments", "author": null, "committer": null, "parents": [{"sha": "19cf9bde76edc1c14f233b08c3d7866150b01b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19cf9bde76edc1c14f233b08c3d7866150b01b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19cf9bde76edc1c14f233b08c3d7866150b01b83"}], "stats": {"total": 250, "additions": 143, "deletions": 107}, "files": [{"sha": "7f3ce22cf06e99cd910ae601e47ee4b2d6dcd5bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -1,3 +1,39 @@\n+2010-11-16  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/44762\n+\t* config/score/score3.c (score3_return_in_memory): Constify arguments.\n+\t(score3_in_small_data_p, score3_function_value): Likewise.\n+\t(score3_trampoline_init): Use LCT_NORMAL.\n+\t(score3_print_operand): Initialize code as UNKNOWN.\n+\t* config/score/predicates.md (score_load_multiple_operation):\n+\tRemove unused variable.\n+\t(score_store_multiple_operation): Likewise.\n+\t* config/score/score7.c (score7_return_in_memory): Constify arguments.\n+        (score7_in_small_data_p, score7_function_value): Likewise.\n+\t(score7_trampoline_init): Use LCT_NORMAL.\n+\t(score7_print_operand): Initialize code as UNKNOWN.\n+\t* config/score/score3.h (score3_return_in_memory): Update prototype.\n+\t(score3_in_small_data_p, score3_function_value): Likewise.\n+\t* config/score/score-protos.h (score_function_value): Likewise.\n+\t* config/score/score7.h (score7_return_in_memory): Update prototype.\n+\t(score7_in_small_data_p, score7_function_value): Likewise.\n+\t* config/score/score.c (TARGET_PROMOTE_PROTOTYPES): Constify.\n+\t(score_return_in_memory, score_pass_by_reference): Constify arguments.\n+\t(score_output_mi_thunk, score_function_prologue): Don't return a value.\n+\t(score_function_epilogue, score_in_small_data_p): Likewise.\n+\t(score_option_override, score_asm_trampoline_template): Likewise.\n+\t(score_trampoline_init, score_print_operand): Likewise.\n+\t(score_print_operand_address, score_prologue): Likewise.\n+\t(score_epilogue, score_call, score_call_value): Likewise.\n+\t(score_movsicc, score_movdi, score_zero_extract_andi): Likewise.\n+\t(score_function_arg_advance): Likewise. Make static.\n+\t(score_asm_file_end): Mark parameter value with ATTRIBUTE_UNUSED.\n+\t(score_function_arg, score_legitimate_address_p): Make static.\n+\t(score_function_value): Mark parameter func with ATTRIBUTE_UNUSED.\n+\t* config/score/score.h (REGNO_REG_CLASS): Cast value to enum reg_class.\n+\t* config/score/score-conv.h (UIMM_IN_RANGE, SIMM_IN_RANGE):\n+\tAllow (W) == HOST_BITS_PER_WIDE_INT.\n+\n 2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/arc/arc.c: Delete pasto."}, {"sha": "e438aa9770468b2e93d62ce5ee97c402a5c0224f", "filename": "gcc/config/score/predicates.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fpredicates.md?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -89,7 +89,6 @@\n {\n   int count = XVECLEN (op, 0);\n   int dest_regno;\n-  rtx src_addr;\n   int i;\n \n   /* Perform a quick check so we don't blow up below.  */\n@@ -100,7 +99,6 @@\n     return 0;\n \n   dest_regno = REGNO (SET_DEST (XVECEXP (op, 0, 0)));\n-  src_addr = XEXP (SET_SRC (XVECEXP (op, 0, 0)), 0);\n \n   for (i = 1; i < count; i++)\n     {\n@@ -124,7 +122,6 @@\n {\n   int count = XVECLEN (op, 0);\n   int src_regno;\n-  rtx dest_addr;\n   int i;\n \n   /* Perform a quick check so we don't blow up below.  */\n@@ -135,7 +132,6 @@\n     return 0;\n \n   src_regno = REGNO (SET_SRC (XVECEXP (op, 0, 0)));\n-  dest_addr = XEXP (SET_DEST (XVECEXP (op, 0, 0)), 0);\n \n   for (i = 1; i < count; i++)\n     {"}, {"sha": "f7cc5ce00a51e76338f54958323145ebc7ec936e", "filename": "gcc/config/score/score-conv.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore-conv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore-conv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-conv.h?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -52,11 +52,14 @@\n #define CE_REG_CLASS_P(C) \\\n   ((C) == HI_REG || (C) == LO_REG || (C) == CE_REGS)\n \n-#define UIMM_IN_RANGE(V, W)    ((V) >= 0 && (V) < ((HOST_WIDE_INT) 1 << (W)))\n+#define UIMM_IN_RANGE(V, W) \\\n+  ((V) >= 0 \\\n+   && ((unsigned HOST_WIDE_INT) (V) \\\n+       <= (((unsigned HOST_WIDE_INT) 2 << ((W) - 1)) - 1)))\n \n #define SIMM_IN_RANGE(V, W)                            \\\n-  ((V) >= (-1 * ((HOST_WIDE_INT) 1 << ((W) - 1)))      \\\n-   && (V) < (1 * ((HOST_WIDE_INT) 1 << ((W) - 1))))\n+  ((V) >= ((HOST_WIDE_INT) -1 << ((W) - 1))      \\\n+   && (V) <= (((HOST_WIDE_INT) 1 << ((W) - 1)) - 1))\n \n #define IMM_IN_RANGE(V, W, S)  \\\n   ((S) ? SIMM_IN_RANGE (V, W) : UIMM_IN_RANGE (V, W))"}, {"sha": "385532940d27763a7cf2c6b4077835783888908b", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -56,7 +56,7 @@ extern int score_output_external (FILE *file, tree decl, const char *name);\n extern enum reg_class score_secondary_reload_class (enum reg_class rclass,\n                                                     enum machine_mode mode,\n                                                     rtx x);\n-extern rtx score_function_value (tree valtype, tree func,\n+extern rtx score_function_value (const_tree valtype, const_tree func,\n                                  enum machine_mode mode);\n extern enum reg_class score_preferred_reload_class (rtx x,\n                                                     enum reg_class rclass);"}, {"sha": "6ed15944f6e4e2e4ce34fa78e475ca27bbb98369", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -106,7 +106,7 @@ static const struct default_options score_option_optimization_table[] =\n #define TARGET_PROMOTE_FUNCTION_MODE    default_promote_function_mode_always_promote\n \n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES       hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES       hook_bool_const_tree_true\n \n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK       must_pass_in_stack_var_size\n@@ -152,7 +152,7 @@ enum reg_class score_char_to_class[256];\n    small structures are returned in a register.\n    Objects with varying size must still be returned in memory.  */\n static bool\n-score_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+score_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n     return score7_return_in_memory (type, fndecl);\n@@ -165,7 +165,7 @@ score_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n /* Return nonzero when an argument must be passed by reference.  */\n static bool\n score_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-                         enum machine_mode mode, tree type,\n+                         enum machine_mode mode, const_tree type,\n                          bool named ATTRIBUTE_UNUSED)\n {\n   /* If we have a variable-sized parameter, we have no choice.  */\n@@ -180,12 +180,11 @@ score_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n                        tree function)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_output_mi_thunk (file, thunk_fndecl, delta,\n-                                   vcall_offset, function);\n+    score7_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function);\n   else if (TARGET_SCORE3)\n-    return score3_output_mi_thunk (file, thunk_fndecl, delta,\n-                                   vcall_offset, function);\n-  gcc_unreachable ();\n+    score3_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement TARGET_FUNCTION_OK_FOR_SIBCALL.  */\n@@ -201,11 +200,11 @@ static void\n score_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_function_prologue (file, size);\n+    score7_function_prologue (file, size);\n   else if (TARGET_SCORE3)\n-    return score3_function_prologue (file, size);\n-\n-  gcc_unreachable ();\n+    score3_function_prologue (file, size);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Do any necessary cleanup after a function to restore stack, frame,\n@@ -215,11 +214,11 @@ score_function_epilogue (FILE *file,\n                          HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_function_epilogue (file, size);\n+    score7_function_epilogue (file, size);\n   else if (TARGET_SCORE3)\n-    return score3_function_epilogue (file, size);\n-\n-  gcc_unreachable ();\n+    score3_function_epilogue (file, size);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement TARGET_SCHED_ISSUE_RATE.  */\n@@ -245,7 +244,7 @@ score_select_rtx_section (enum machine_mode mode, rtx x,\n \n /* Implement TARGET_IN_SMALL_DATA_P.  */\n static bool\n-score_in_small_data_p (tree decl)\n+score_in_small_data_p (const_tree decl)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n     return score7_in_small_data_p (decl);\n@@ -293,11 +292,11 @@ static void\n score_asm_file_end (void)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_asm_file_end ();\n+    score7_asm_file_end ();\n   else if (TARGET_SCORE3)\n-    return score3_asm_file_end ();\n-\n-  gcc_unreachable ();\n+    score3_asm_file_end ();\n+  else\n+    gcc_unreachable ();\n }\n \n #define MASK_ALL_CPU_BITS \\\n@@ -306,7 +305,7 @@ score_asm_file_end (void)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n static bool\n-score_handle_option (size_t code, const char *arg, int value)\n+score_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {\n@@ -370,11 +369,11 @@ static void\n score_option_override (void)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_option_override ();\n+    score7_option_override ();\n   else if (TARGET_SCORE3)\n-    return score3_option_override ();\n-\n-  return score7_option_override ();\n+    score3_option_override ();\n+  else\n+    score7_option_override ();\n }\n \n /* Implement REGNO_REG_CLASS macro.  */\n@@ -490,16 +489,16 @@ score_init_cumulative_args (CUMULATIVE_ARGS *cum,\n }\n \n /* Implement TARGET_FUNCTION_ARG_ADVANCE hook.  */\n-void\n+static void\n score_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n                             const_tree type, bool named)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_function_arg_advance (cum, mode, type, named);\n+    score7_function_arg_advance (cum, mode, type, named);\n   else if (TARGET_SCORE3)\n-    return score3_function_arg_advance (cum, mode, type, named);\n-\n-  gcc_unreachable ();\n+    score3_function_arg_advance (cum, mode, type, named);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement TARGET_ARG_PARTIAL_BYTES macro.  */\n@@ -516,7 +515,7 @@ score_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n }\n \n /* Implement TARGET_FUNCTION_ARG hook.  */\n-rtx\n+static rtx\n score_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n                     const_tree type, bool named)\n {\n@@ -532,7 +531,7 @@ score_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n+score_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n                       enum machine_mode mode)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n@@ -548,11 +547,11 @@ static void\n score_asm_trampoline_template (FILE *f)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_asm_trampoline_template (f);\n+    score7_asm_trampoline_template (f);\n   else if (TARGET_SCORE3)\n-    return score3_asm_trampoline_template (f);\n-\n-  gcc_unreachable ();\n+    score3_asm_trampoline_template (f);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement TARGET_TRAMPOLINE_INIT.  */\n@@ -561,11 +560,11 @@ score_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n   /* ??? These two routines are identical.  */\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_trampoline_init (m_tramp, fndecl, chain_value);\n+    score7_trampoline_init (m_tramp, fndecl, chain_value);\n   else if (TARGET_SCORE3)\n-    return score3_trampoline_init (m_tramp, fndecl, chain_value);\n-\n-  gcc_unreachable ();\n+    score3_trampoline_init (m_tramp, fndecl, chain_value);\n+  else\n+    gcc_unreachable ();\n }\n \n /* This function is used to implement REG_MODE_OK_FOR_BASE_P macro.  */\n@@ -581,7 +580,7 @@ score_regno_mode_ok_for_base_p (int regno, int strict)\n }\n \n /* Implement TARGET_LEGITIMIZE_ADDRESS_P.  */\n-bool\n+static bool\n score_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n@@ -678,23 +677,23 @@ void\n score_print_operand (FILE *file, rtx op, int c)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_print_operand (file, op, c);\n+    score7_print_operand (file, op, c);\n   else if (TARGET_SCORE3)\n-    return score3_print_operand (file, op, c);\n-\n-  gcc_unreachable ();\n+    score3_print_operand (file, op, c);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement PRINT_OPERAND_ADDRESS macro.  */\n void\n score_print_operand_address (FILE *file, rtx x)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_print_operand_address (file, x);\n+    score7_print_operand_address (file, x);\n   else if (TARGET_SCORE3)\n-    return score3_print_operand_address (file, x);\n-\n-  gcc_unreachable ();\n+    score3_print_operand_address (file, x);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Implement SELECT_CC_MODE macro.  */\n@@ -728,81 +727,81 @@ void\n score_prologue (void)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_prologue ();\n+    score7_prologue ();\n   else if (TARGET_SCORE3)\n-    return score3_prologue ();\n-\n-  gcc_unreachable ();\n+    score3_prologue ();\n+  else\n+    gcc_unreachable ();\n }\n \n /* Generate the epilogue instructions in a S+core function.  */\n void\n score_epilogue (int sibcall_p)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_epilogue (sibcall_p);\n+    score7_epilogue (sibcall_p);\n   else if (TARGET_SCORE3)\n-    return score3_epilogue (sibcall_p);\n-\n-  gcc_unreachable ();\n+    score3_epilogue (sibcall_p);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Call and sibcall pattern all need call this function.  */\n void\n score_call (rtx *ops, bool sib)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_call (ops, sib);\n+    score7_call (ops, sib);\n   else if (TARGET_SCORE3)\n-    return score3_call (ops, sib);\n-\n-  gcc_unreachable ();\n+    score3_call (ops, sib);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Call value and sibcall value pattern all need call this function.  */\n void\n score_call_value (rtx *ops, bool sib)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_call_value (ops, sib);\n+    score7_call_value (ops, sib);\n   else if (TARGET_SCORE3)\n-    return score3_call_value (ops, sib);\n-\n-  gcc_unreachable ();\n+    score3_call_value (ops, sib);\n+  else\n+    gcc_unreachable ();\n }\n \n void\n score_movsicc (rtx *ops)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_movsicc (ops);\n+    score7_movsicc (ops);\n   else if (TARGET_SCORE3)\n-    return score3_movsicc (ops);\n-\n-  gcc_unreachable ();\n+    score3_movsicc (ops);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Machine Split  */\n void\n score_movdi (rtx *ops)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_movdi (ops);\n+    score7_movdi (ops);\n   else if (TARGET_SCORE3)\n-    return score3_movdi (ops);\n-\n-  gcc_unreachable ();\n+    score3_movdi (ops);\n+  else\n+    gcc_unreachable ();\n }\n \n void\n score_zero_extract_andi (rtx *ops)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_zero_extract_andi (ops);\n+    score7_zero_extract_andi (ops);\n   else if (TARGET_SCORE3)\n-    return score3_zero_extract_andi (ops);\n-\n-  gcc_unreachable ();\n+    score3_zero_extract_andi (ops);\n+  else\n+    gcc_unreachable ();\n }\n \n /* Output asm insn for move.  */"}, {"sha": "ea51e7724b6542054cc4b703178ca5c3b8b4bdae", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -420,7 +420,7 @@ enum reg_class\n    register REGNO.  In general there is more that one such class;\n    choose a class which is \"minimal\", meaning that no smaller class\n    also contains the register.  */\n-#define REGNO_REG_CLASS(REGNO)         score_reg_class (REGNO)\n+#define REGNO_REG_CLASS(REGNO) (enum reg_class) score_reg_class (REGNO)\n \n /* The following macro defines cover classes for Integrated Register\n    Allocator.  Cover classes is a set of non-intersected register"}, {"sha": "3634e4bca3ff647a114648fe23eb1a7a12223490", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -291,7 +291,7 @@ score3_classify_address (struct score3_address_info *info,\n }\n \n bool\n-score3_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+score3_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n     return ((TYPE_MODE (type) == BLKmode)\n             || (int_size_in_bytes (type) > 2 * UNITS_PER_WORD)\n@@ -576,7 +576,7 @@ score3_select_rtx_section (enum machine_mode mode, rtx x,\n \n /* Implement TARGET_IN_SMALL_DATA_P.  */\n bool\n-score3_in_small_data_p (tree decl)\n+score3_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n \n@@ -860,7 +860,8 @@ score3_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score3_function_value (tree valtype, tree func, enum machine_mode mode)\n+score3_function_value (const_tree valtype, const_tree func,\n+\t\t       enum machine_mode mode)\n {\n   if (valtype)\n     {\n@@ -912,7 +913,7 @@ score3_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   emit_move_insn (mem, chain_value);\n \n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, FFCACHE),\n-                     0, VOIDmode, 2,\n+                     LCT_NORMAL, VOIDmode, 2,\n                      addr, Pmode,\n                      GEN_INT (TRAMPOLINE_SIZE), SImode);\n #undef FFCACHE\n@@ -1224,7 +1225,7 @@ score3_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n void\n score3_print_operand (FILE *file, rtx op, int c)\n {\n-  enum rtx_code code = -1;\n+  enum rtx_code code = UNKNOWN;\n   if (!PRINT_OPERAND_PUNCT_VALID_P (c))\n     code = GET_CODE (op);\n "}, {"sha": "47d20e627bbe498111bdf2670d19800e79a692f1", "filename": "gcc/config/score/score3.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.h?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -71,8 +71,8 @@ struct score3_address_info\n \n extern int score3_symbolic_constant_p (rtx x,\n                                        enum score_symbol_type *symbol_type);\n-extern bool score3_return_in_memory (tree type,\n-                                     tree fndecl ATTRIBUTE_UNUSED);\n+extern bool score3_return_in_memory (const_tree type,\n+                                     const_tree fndecl ATTRIBUTE_UNUSED);\n extern void score3_output_mi_thunk (FILE *file,\n                                     tree thunk_fndecl ATTRIBUTE_UNUSED,\n                                     HOST_WIDE_INT delta,\n@@ -87,7 +87,7 @@ score3_function_epilogue (FILE *file,\n                           HOST_WIDE_INT size ATTRIBUTE_UNUSED);\n extern section *score3_select_rtx_section (enum machine_mode mode, rtx x,\n                                            unsigned HOST_WIDE_INT align);\n-extern bool score3_in_small_data_p (tree decl);\n+extern bool score3_in_small_data_p (const_tree decl);\n extern void score3_asm_file_start (void);\n extern void score3_asm_file_end (void);\n extern void score3_option_override (void);\n@@ -117,8 +117,8 @@ extern rtx score3_function_arg (const CUMULATIVE_ARGS *cum,\n                                 enum machine_mode mode,\n                                 const_tree type,\n                                 bool named);\n-extern rtx score3_function_value (tree valtype,\n-                                  tree func ATTRIBUTE_UNUSED,\n+extern rtx score3_function_value (const_tree valtype,\n+                                  const_tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);\n extern void score3_asm_trampoline_template (FILE *);\n extern void score3_trampoline_init (rtx, tree, rtx);"}, {"sha": "90e8446838b0c93146227c24dfa7113093234b9d", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -290,7 +290,7 @@ score7_classify_address (struct score7_address_info *info,\n }\n \n bool\n-score7_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n+score7_return_in_memory (const_tree type, const_tree fndecl ATTRIBUTE_UNUSED)\n {\n     return ((TYPE_MODE (type) == BLKmode)\n             || (int_size_in_bytes (type) > 2 * UNITS_PER_WORD)\n@@ -575,7 +575,7 @@ score7_select_rtx_section (enum machine_mode mode, rtx x,\n \n /* Implement TARGET_IN_SMALL_DATA_P.  */\n bool\n-score7_in_small_data_p (tree decl)\n+score7_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n \n@@ -851,7 +851,8 @@ score7_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score7_function_value (tree valtype, tree func, enum machine_mode mode)\n+score7_function_value (const_tree valtype, const_tree func,\n+\t\t       enum machine_mode mode)\n {\n   if (valtype)\n     {\n@@ -900,7 +901,7 @@ score7_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   emit_move_insn (mem, chain_value);\n \n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, FFCACHE),\n-                     0, VOIDmode, 2,\n+                     LCT_NORMAL, VOIDmode, 2,\n                      addr, Pmode,\n                      GEN_INT (TRAMPOLINE_SIZE), SImode);\n #undef FFCACHE\n@@ -1212,7 +1213,7 @@ score7_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n void\n score7_print_operand (FILE *file, rtx op, int c)\n {\n-  enum rtx_code code = -1;\n+  enum rtx_code code = UNKNOWN;\n   if (!PRINT_OPERAND_PUNCT_VALID_P (c))\n     code = GET_CODE (op);\n "}, {"sha": "71654aae13352e2dc2ebcb8143726a0ff00dc177", "filename": "gcc/config/score/score7.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996893cea36e152d94e149334def53a1539ae948/gcc%2Fconfig%2Fscore%2Fscore7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.h?ref=996893cea36e152d94e149334def53a1539ae948", "patch": "@@ -71,8 +71,8 @@ struct score7_address_info\n \n extern int score7_symbolic_constant_p (rtx x,\n                                        enum score_symbol_type *symbol_type);\n-extern bool score7_return_in_memory (tree type,\n-                                     tree fndecl ATTRIBUTE_UNUSED);\n+extern bool score7_return_in_memory (const_tree type,\n+                                     const_tree fndecl ATTRIBUTE_UNUSED);\n extern void score7_output_mi_thunk (FILE *file,\n                                     tree thunk_fndecl ATTRIBUTE_UNUSED,\n                                     HOST_WIDE_INT delta,\n@@ -87,7 +87,7 @@ score7_function_epilogue (FILE *file,\n                           HOST_WIDE_INT size ATTRIBUTE_UNUSED);\n extern section *score7_select_rtx_section (enum machine_mode mode, rtx x,\n                                            unsigned HOST_WIDE_INT align);\n-extern bool score7_in_small_data_p (tree decl);\n+extern bool score7_in_small_data_p (const_tree decl);\n extern void score7_asm_file_start (void);\n extern void score7_asm_file_end (void);\n extern void score7_option_override (void);\n@@ -117,8 +117,8 @@ extern rtx score7_function_arg (const CUMULATIVE_ARGS *cum,\n                                 enum machine_mode mode,\n                                 const_tree type,\n                                 bool named);\n-extern rtx score7_function_value (tree valtype,\n-                                  tree func ATTRIBUTE_UNUSED,\n+extern rtx score7_function_value (const_tree valtype,\n+                                  const_tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);\n extern void score7_asm_trampoline_template (FILE *);\n extern void score7_trampoline_init (rtx, tree, rtx);"}]}