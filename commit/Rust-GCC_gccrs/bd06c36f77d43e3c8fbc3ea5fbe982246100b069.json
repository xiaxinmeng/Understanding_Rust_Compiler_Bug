{"sha": "bd06c36f77d43e3c8fbc3ea5fbe982246100b069", "node_id": "C_kwDOANBUbNoAKGJkMDZjMzZmNzdkNDNlM2M4ZmJjM2VhNWZiZTk4MjI0NjEwMGIwNjk", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-24T11:30:00Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-24T11:30:00Z"}, "message": "Revert \"Mitigate -Wmaybe-uninitialized in expmed.cc.\"\n\nThis reverts commit c5c523723149112d117a6d3b259dfd95b032a545.", "tree": {"sha": "9fb159aaef3f701b8f0466ff9af26f87bc4c4593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fb159aaef3f701b8f0466ff9af26f87bc4c4593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd06c36f77d43e3c8fbc3ea5fbe982246100b069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd06c36f77d43e3c8fbc3ea5fbe982246100b069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd06c36f77d43e3c8fbc3ea5fbe982246100b069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd06c36f77d43e3c8fbc3ea5fbe982246100b069/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c523723149112d117a6d3b259dfd95b032a545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c523723149112d117a6d3b259dfd95b032a545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c523723149112d117a6d3b259dfd95b032a545"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c3e4aa8019a69431641f8b1097e32e9d28892039", "filename": "gcc/expmed.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd06c36f77d43e3c8fbc3ea5fbe982246100b069/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd06c36f77d43e3c8fbc3ea5fbe982246100b069/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=bd06c36f77d43e3c8fbc3ea5fbe982246100b069", "patch": "@@ -5658,7 +5658,7 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n   /* If we are comparing a double-word integer with zero or -1, we can\n      convert the comparison into one involving a single word.  */\n-  scalar_int_mode int_mode = {};\n+  scalar_int_mode int_mode;\n   if (is_int_mode (mode, &int_mode)\n       && GET_MODE_BITSIZE (int_mode) == BITS_PER_WORD * 2\n       && (!MEM_P (op0) || ! MEM_VOLATILE_P (op0)))"}]}