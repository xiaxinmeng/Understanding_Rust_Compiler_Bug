{"sha": "f08acad732e35396136f9fe3a23f52ec85ca56ce", "node_id": "C_kwDOANBUbNoAKGYwOGFjYWQ3MzJlMzUzOTYxMzZmOWZlM2EyM2Y1MmVjODVjYTU2Y2U", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T22:19:43Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-03T06:57:38Z"}, "message": "RISC-V: Add vsra.vx C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsra_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsra_vx_tumu-3.C: New test.", "tree": {"sha": "45fae1b0e70df220d9cb9c3f90a1b3950749fd86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45fae1b0e70df220d9cb9c3f90a1b3950749fd86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08acad732e35396136f9fe3a23f52ec85ca56ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08acad732e35396136f9fe3a23f52ec85ca56ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08acad732e35396136f9fe3a23f52ec85ca56ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08acad732e35396136f9fe3a23f52ec85ca56ce/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a2abcd79e3c5ec63ac5b94e8b834c91693f612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a2abcd79e3c5ec63ac5b94e8b834c91693f612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a2abcd79e3c5ec63ac5b94e8b834c91693f612"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "e3c152f7f4eb5467a740c3c100fd032dacfb9b2a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-1.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "eb2a55e7f299a9f1e439777a52cb96cf2bb1ed70", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-2.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1332c14c50cf64d1225135ecd87a26c6973cad4f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx-3.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3fa75d27f8d8b4495959445ac310806e6b8bc31f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-1.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "44181df1b514dc2bd2846d7f45863b195ee391a4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-2.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1abdadecb7266aae7a4f91bf363699fdde98e7e9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_mu-3.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "58f5571b3ee9aab1c2bd60450253b9871316b7fa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-1.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "61c62c7341d65e8510b6c9bd59684d14f473463f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-2.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "7f3465692e5448ec087164f7232a97e475a87649", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tu-3.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "18b034c4b72f86e5d0ef0b3c2f3a99d8c9f4adb4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-1.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a4ece2a0fb7fe7dc95ef2a750ef7a21b0c3a0ef7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-2.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "bcac816f5feb7c2173bbad7f214e6f887415dc19", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tum-3.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3e540c1584f3dab6f81148cac8e1a68a902204bb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-1.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9b7f3c74e076f42f7b291bdbc013c95860f59f77", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-2.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f9efaf1734930b9199a507072f00c0bc263eba01", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsra_vx_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08acad732e35396136f9fe3a23f52ec85ca56ce/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsra_vx_tumu-3.C?ref=f08acad732e35396136f9fe3a23f52ec85ca56ce", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}