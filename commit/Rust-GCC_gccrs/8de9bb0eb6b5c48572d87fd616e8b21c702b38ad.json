{"sha": "8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlOWJiMGViNmI1YzQ4NTcyZDg3ZmQ2MTZlOGIyMWM3MDJiMzhhZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-04-21T11:16:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-04-21T11:16:57Z"}, "message": "re PR c++/9881 (What is an address constant expression?)\n\ncp:\n\tPR c++/9881\n\t* typeck.c (build_unary_op): Fold all COMPONENT_REF addr\n\texpressions. Reverts my 2002-08-08 patch.\n\n\t* typeck.c (comp_ptr_ttypes_real): Swap final && operands for\n\tcheaper early exit.\ntestsuite:\n\tPR c++/9881\n\t* g++.dg/init/addr-const1.C: New test.\n\t* g++.dg/other/packed1.C: XFAIL on aligned architectures.\n\nFrom-SVN: r65882", "tree": {"sha": "0911d79333a2d1d3058de7d921e6c97a7425d989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0911d79333a2d1d3058de7d921e6c97a7425d989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/comments", "author": null, "committer": null, "parents": [{"sha": "0f0b91be0ace765e0497add16f7937bb53b7ef93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0b91be0ace765e0497add16f7937bb53b7ef93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0b91be0ace765e0497add16f7937bb53b7ef93"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "cbe913e8d7269c721dd49174c507adccc2d9ba8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "patch": "@@ -1,3 +1,12 @@\n+2003-04-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9881\n+\t* typeck.c (build_unary_op): Fold all COMPONENT_REF addr\n+\texpressions. Reverts my 2002-08-08 patch.\n+\t\n+\t* typeck.c (comp_ptr_ttypes_real): Swap final && operands for\n+\tcheaper early exit.\n+\n 2003-04-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp/decl2.c (start_static_storage_duration_function): Take count"}, {"sha": "e60eb105ada27f26c3297feb262b452e13425111", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "patch": "@@ -4504,19 +4504,19 @@ build_unary_op (code, xarg, noconvert)\n \t    && TREE_CODE (TREE_OPERAND (arg, 1)) == BASELINK)\n \t  arg = BASELINK_FUNCTIONS (TREE_OPERAND (arg, 1));\n \n-\tif (TREE_CODE (arg) == COMPONENT_REF\n-\t    && DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n+\tif (TREE_CODE (arg) != COMPONENT_REF)\n+\t  addr = build_address (arg);\n+\telse if (DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n \t  {\n \t    error (\"attempt to take address of bit-field structure member `%D'\",\n \t\t   TREE_OPERAND (arg, 1));\n \t    return error_mark_node;\n \t  }\n-\telse if (TREE_CODE (arg) == COMPONENT_REF\n-\t\t && TREE_CODE (TREE_OPERAND (arg, 0)) == INDIRECT_REF\n-\t\t && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (arg, 0), 0))\n-\t\t     == INTEGER_CST))\n+\telse\n \t  {\n-\t    /* offsetof idiom, fold it.  */\n+\t    /* Unfortunately we cannot just build an address\n+\t       expression here, because we would not handle\n+\t       address-constant-expressions or offsetof correctly.  */\n \t    tree field = TREE_OPERAND (arg, 1);\n \t    tree rval = build_unary_op (ADDR_EXPR, TREE_OPERAND (arg, 0), 0);\n \t    tree binfo = lookup_base (TREE_TYPE (TREE_TYPE (rval)),\n@@ -4529,8 +4529,6 @@ build_unary_op (code, xarg, noconvert)\n \t    addr = fold (build (PLUS_EXPR, argtype, rval,\n \t\t\t\tcp_convert (argtype, byte_position (field))));\n \t  }\n-\telse\n-\t  addr = build_address (arg);\n \n \tif (TREE_CODE (argtype) == POINTER_TYPE\n \t    && TREE_CODE (TREE_TYPE (argtype)) == METHOD_TYPE)\n@@ -6578,15 +6576,14 @@ comp_ptr_ttypes_real (to, from, constp)\n \t}\n \n       if (TREE_CODE (to) != POINTER_TYPE)\n-\treturn \n-\t  same_type_ignoring_top_level_qualifiers_p (to, from)\n-\t  && (constp >= 0 || to_more_cv_qualified);\n+\treturn ((constp >= 0 || to_more_cv_qualified)\n+\t\t&& same_type_ignoring_top_level_qualifiers_p (to, from));\n     }\n }\n \n-/* When comparing, say, char ** to char const **, this function takes the\n-   'char *' and 'char const *'.  Do not pass non-pointer types to this\n-   function.  */\n+/* When comparing, say, char ** to char const **, this function takes\n+   the 'char *' and 'char const *'.  Do not pass non-pointer/reference\n+   types to this function.  */\n \n int\n comp_ptr_ttypes (to, from)"}, {"sha": "fe9eb5cf4804800ff746dc032c91071b531cd61a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "patch": "@@ -1,4 +1,10 @@\n-2003-04-19  Nathan Sidwell  <nathan@codesourcery.com>\n+2003-04-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9881\n+\t* g++.dg/init/addr-const1.C: New test.\n+\t* g++.dg/other/packed1.C: XFAIL on aligned architectures.\n+\n+2003-04-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/10405\n \t* g++.dg/lookup/struct-hack1.C: New test."}, {"sha": "3b4637a4144e59ff2ddf1571c62fe9aa9513a9ad", "filename": "gcc/testsuite/g++.dg/init/addr-const1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faddr-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faddr-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faddr-const1.C?ref=8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 19 Apr 2003 <nathan@codesourcery.com>\n+\n+// PR 9881. address-constant-expression not static initialized\n+\n+struct bar {\n+  double p;\n+}; // bar\n+    \n+bar v;\n+static bool error = false;\n+\n+struct foo {\n+  static double *a;\n+  static double *b;\n+  static double storage;\n+};\n+\n+struct baz {\n+  baz () {\n+    if (foo::a != &v.p)\n+      error = true;\n+    if (foo::b != &foo::storage)\n+      error = true;\n+  }\n+};\n+\n+baz f; // Get constructor to run before any other non-static initializers\n+\n+double *foo::a = &(((bar *)(&v))->p);\n+double *foo::b = &(((bar *)(&foo::storage))->p);\n+double foo::storage = 0.0;\n+\n+int main() {\n+  return error;\n+}"}, {"sha": "d19bb00b1cf4394cfda81271ebb2f060f94a69da", "filename": "gcc/testsuite/g++.dg/other/packed1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C?ref=8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "patch": "@@ -1,4 +1,7 @@\n-// { dg-do run }\n+// { dg-do run { xfail arm-*-* } { xfail mips-*-* } { xfail powerpc-*-* } { xfail sh-*-* } { xfail sparc-*-* }\n+\n+// NMS:2003-04-21 this fails on strict aligned architectures again,\n+// the patch was reverted because it broke something more important.\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 8 Aug 2002 <nathan@codesourcery.com>"}]}