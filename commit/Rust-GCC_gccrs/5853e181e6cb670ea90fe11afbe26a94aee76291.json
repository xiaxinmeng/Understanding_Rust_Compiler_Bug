{"sha": "5853e181e6cb670ea90fe11afbe26a94aee76291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1M2UxODFlNmNiNjcwZWE5MGZlMTFhZmJlMjZhOTRhZWU3NjI5MQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2014-06-05T17:03:52Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2014-06-05T17:03:52Z"}, "message": "re PR target/46219 (Generate indirect jump instruction on x86-64)\n\n2014-06-05  Kai Tietz  <ktietz@redhat.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\tPR target/46219\n\t* config/i386/predicates.md (memory_nox32_operand): Add memory_operand\n\tchecking for !TARGET_X32.\n\t* config/i386/i386.md (UNSPEC_PEEPSIB): New unspec constant.\n\t(sibcall_intern): New define_insn, plus required peepholes.\n\t(sibcall_pop_intern): Likewise.\n\t(sibcall_value_intern): Likewise.\n\t(sibcall_value_pop_intern): Likewise.\n\n2014-06-05  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/46219\n\t* gcc.target/i386/sibcall-4.c: Remove xfail.\n\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r211283", "tree": {"sha": "0a4caf522966a51664bdbb066ce92052b22edeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a4caf522966a51664bdbb066ce92052b22edeab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5853e181e6cb670ea90fe11afbe26a94aee76291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5853e181e6cb670ea90fe11afbe26a94aee76291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5853e181e6cb670ea90fe11afbe26a94aee76291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5853e181e6cb670ea90fe11afbe26a94aee76291/comments", "author": null, "committer": null, "parents": [{"sha": "beb219dde1fa330c37397500248ae318617ceefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb219dde1fa330c37397500248ae318617ceefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb219dde1fa330c37397500248ae318617ceefb"}], "stats": {"total": 216, "additions": 215, "deletions": 1}, "files": [{"sha": "4d88dd2129dda3bbd1849c06020c832fe666fcdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5853e181e6cb670ea90fe11afbe26a94aee76291", "patch": "@@ -1,3 +1,15 @@\n+2014-06-05  Kai Tietz  <ktietz@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/46219\n+\t* config/i386/predicates.md (memory_nox32_operand): Add memory_operand\n+\tchecking for !TARGET_X32.\n+\t* config/i386/i386.md (UNSPEC_PEEPSIB): New unspec constant.\n+\t(sibcall_intern): New define_insn, plus required peepholes.\n+\t(sibcall_pop_intern): Likewise.\n+\t(sibcall_value_intern): Likewise.\n+\t(sibcall_value_pop_intern): Likewise.\n+\n 2014-06-05  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-inline.c (tree_function_versioning): Check DF info existence"}, {"sha": "d08f47ee5d98e653a789a55589846af6e9b84ed8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5853e181e6cb670ea90fe11afbe26a94aee76291", "patch": "@@ -111,6 +111,7 @@\n   UNSPEC_LEA_ADDR\n   UNSPEC_XBEGIN_ABORT\n   UNSPEC_STOS\n+  UNSPEC_PEEPSIB\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -11382,6 +11383,53 @@\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n+(define_insn \"*sibcall_intern\"\n+  [(call (unspec [(mem:QI (match_operand:W 0 \"memory_nox32_operand\"))]\n+\t   UNSPEC_PEEPSIB)\n+\t (match_operand 1))]\n+  \"\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (match_operand:DI 1 \"memory_nox32_operand\"))\n+   (call (mem:QI (match_dup 0))\n+         (match_operand 3))]\n+  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+         (match_dup 3))])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (match_operand:DI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (call (mem:QI (match_dup 0))\n+         (match_operand 3))]\n+  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+         (match_dup 3))])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (call (mem:QI (match_dup 0))\n+         (match_operand 3))]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+         (match_dup 3))])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (call (mem:QI (match_dup 0))\n+         (match_operand 3))]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB) (match_dup 3))])\n+\n (define_expand \"call_pop\"\n   [(parallel [(call (match_operand:QI 0)\n \t\t    (match_operand:SI 1))\n@@ -11415,6 +11463,43 @@\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n+(define_insn \"*sibcall_pop_intern\"\n+  [(call (unspec [(mem:QI (match_operand:SI 0 \"memory_nox32_operand\"))]\n+           UNSPEC_PEEPSIB)\n+\t (match_operand 1))\n+   (set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_64BIT\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (parallel [(call (mem:QI (match_dup 0))\n+\t\t    (match_operand 3))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (match_operand 4))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(parallel [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t\t    (match_dup 3))\n+\t      (set (reg:SI SP_REG) (match_dup 4))])])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (parallel [(call (mem:QI (match_dup 0))\n+\t\t    (match_operand 3))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (match_operand 4))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (parallel [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t\t    (match_dup 3))\n+\t      (set (reg:SI SP_REG) (match_dup 4))])])\n+\n ;; Call subroutine, returning value in operand 0\n \n (define_expand \"call_value\"\n@@ -11457,6 +11542,63 @@\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n+(define_insn \"*sibcall_value_intern\"\n+  [(set (match_operand 0)\n+    (call (unspec [(mem:QI (match_operand:W 1 \"memory_nox32_operand\"))]\n+\t    UNSPEC_PEEPSIB)\n+          (match_operand 2)))]\n+  \"\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (match_operand:DI 1 \"memory_nox32_operand\"))\n+   (set (match_operand 2)\n+   (call (mem:QI (match_dup 0))\n+\t\t (match_operand 3)))]\n+  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(set (match_dup 2)\n+   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t (match_dup 3)))])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+        (match_operand:DI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (set (match_operand 2)\n+\t(call (mem:QI (match_dup 0))\n+\t      (match_operand 3)))]\n+  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (set (match_dup 2)\n+\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t      (match_dup 3)))])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (set (match_operand 2)\n+\t(call (mem:QI (match_dup 0))\n+\t      (match_operand 3)))]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(set (match_dup 2)\n+\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t      (match_dup 3)))])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (set (match_operand 2)\n+\t(call (mem:QI (match_dup 0))\n+\t      (match_operand 3)))]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (set (match_dup 2)\n+\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t      (match_dup 3)))])\n+\n (define_insn \"*call_value_rex64_ms_sysv\"\n   [(match_parallel 3 \"call_rex64_ms_sysv_operation\"\n     [(set (match_operand 0)\n@@ -11503,6 +11645,56 @@\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n+(define_insn \"*sibcall_value_pop_intern\"\n+  [(set (match_operand 0)\n+        (call (unspec [(mem:QI (match_operand:SI 1 \"memory_nox32_operand\"))]\n+\t       UNSPEC_PEEPSIB)\n+\t  (match_operand 2)))\n+   (set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_64BIT\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (parallel [(set (match_operand 2)\n+\t      (call (mem:QI (match_dup 0))\n+\t\t    (match_operand 3)))\n+\t    (set (reg:SI SP_REG)\n+\t\t(plus:SI (reg:SI SP_REG)\n+\t\t\t  (match_operand:SI 4 \"immediate_operand\")))]\n+   )]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(parallel [(set (match_dup 2)\n+\t      (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t\t    (match_dup 3)))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_dup 4)))])])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"memory_nox32_operand\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (parallel [(set (match_operand 2)\n+\t      (call (mem:QI (match_dup 0))\n+\t\t    (match_operand 3)))\n+\t    (set (reg:SI SP_REG)\n+\t\t(plus:SI (reg:SI SP_REG)\n+\t\t\t  (match_operand:SI 4 \"immediate_operand\")))]\n+   )]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n+   (parallel [(set (match_dup 2)\n+\t      (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t\t    (match_dup 3)))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_dup 4)))])])\n+\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\""}, {"sha": "6794372f199959a1bd6b5b1e45e35a1f0660b457", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5853e181e6cb670ea90fe11afbe26a94aee76291", "patch": "@@ -587,6 +587,11 @@\n   (ior (match_operand 0 \"register_no_elim_operand\")\n        (match_operand 0 \"immediate_operand\")))\n \n+;; Test for a valid memory operand.\n+(define_predicate \"memory_nox32_operand\"\n+  (and (not (match_test \"TARGET_X32\"))\n+       (match_operand 0 \"memory_operand\")))\n+\n ;; Test for a valid operand for indirect branch.\n (define_predicate \"indirect_branch_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "f5e251718c9ea1b3f830eda93bb7d369c666b813", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5853e181e6cb670ea90fe11afbe26a94aee76291", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/46219\n+\t* gcc.target/i386/sibcall-4.c: Remove xfail.\n+\n 2014-06-05  Julian Brown  <julian@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "1d3f391e8fe79580e2dff0dbbbec8f2ecebd50fe", "filename": "gcc/testsuite/gcc.target/i386/sibcall-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5853e181e6cb670ea90fe11afbe26a94aee76291/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c?ref=5853e181e6cb670ea90fe11afbe26a94aee76291", "patch": "@@ -11,4 +11,4 @@ void male_indirect_jump (long offset)\n   dispatch[offset](offset);\n }\n \n-/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*.%eax\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*.%eax\" } } */"}]}