{"sha": "c35cf160a0ed81570cff6600dba465cf95fa80fa", "node_id": "C_kwDOANBUbNoAKGMzNWNmMTYwYTBlZDgxNTcwY2ZmNjYwMGRiYTQ2NWNmOTVmYTgwZmE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T15:17:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T15:17:32Z"}, "message": "c++: Treat unnamed bitfields as padding for __has_unique_object_representations [PR109096]\n\nAs reported in the PR, for __has_unique_object_representations we\nwere treating unnamed bitfields as named ones, which is wrong, they\nare actually padding.\n\nTHe following patch fixes that.\n\n2023-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109096\n\t* tree.cc (record_has_unique_obj_representations): Ignore unnamed\n\tbitfields.\n\n\t* g++.dg/cpp1z/has-unique-obj-representations3.C: New test.", "tree": {"sha": "81d3ab44a48fc02958b1c4af22d7b1943cfcb8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d3ab44a48fc02958b1c4af22d7b1943cfcb8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c35cf160a0ed81570cff6600dba465cf95fa80fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35cf160a0ed81570cff6600dba465cf95fa80fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35cf160a0ed81570cff6600dba465cf95fa80fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35cf160a0ed81570cff6600dba465cf95fa80fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e6f87835ccabfe84afe412583544ff6e6292352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6f87835ccabfe84afe412583544ff6e6292352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6f87835ccabfe84afe412583544ff6e6292352"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "16b8fcb7d57518635e74340758347ae4fcbfae60", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35cf160a0ed81570cff6600dba465cf95fa80fa/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35cf160a0ed81570cff6600dba465cf95fa80fa/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=c35cf160a0ed81570cff6600dba465cf95fa80fa", "patch": "@@ -4851,7 +4851,7 @@ record_has_unique_obj_representations (const_tree t, const_tree sz)\n \t\t\t\t\t\t    DECL_SIZE (field)))\n \t  return false;\n       }\n-    else if (DECL_C_BIT_FIELD (field))\n+    else if (DECL_C_BIT_FIELD (field) && !DECL_UNNAMED_BIT_FIELD (field))\n       {\n \ttree btype = DECL_BIT_FIELD_TYPE (field);\n \tif (!type_has_unique_obj_representations (btype))\n@@ -4862,7 +4862,7 @@ record_has_unique_obj_representations (const_tree t, const_tree sz)\n \n   offset_int cur = 0;\n   for (tree field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n-    if (TREE_CODE (field) == FIELD_DECL)\n+    if (TREE_CODE (field) == FIELD_DECL && !DECL_UNNAMED_BIT_FIELD (field))\n       {\n \toffset_int fld = wi::to_offset (DECL_FIELD_OFFSET (field));\n \toffset_int bitpos = wi::to_offset (DECL_FIELD_BIT_OFFSET (field));"}, {"sha": "349c93e3c2bcab4e7d2fe30168570b813a7a0496", "filename": "gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35cf160a0ed81570cff6600dba465cf95fa80fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35cf160a0ed81570cff6600dba465cf95fa80fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations3.C?ref=c35cf160a0ed81570cff6600dba465cf95fa80fa", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/109096\n+// { dg-do compile { target c++11 } }\n+\n+#define INTB (__SIZEOF_INT__ * __CHAR_BIT__)\n+struct U { int i : INTB * 3 / 4; int : INTB / 4; };\n+struct V { int : INTB * 3 / 4; int j : INTB / 4; };\n+struct W { int i; int : 0; int j; };\n+static_assert (__has_unique_object_representations (U) == false, \"\");\n+static_assert (__has_unique_object_representations (V) == false, \"\");\n+static_assert (sizeof (W) != 2 * sizeof (int) || __has_unique_object_representations (W) == true, \"\");"}]}