{"sha": "002bdd685cc819e9a1609c97d5f2281f6109b297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyYmRkNjg1Y2M4MTllOWExNjA5Yzk3ZDVmMjI4MWY2MTA5YjI5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:00:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:00:21Z"}, "message": "[multiple changes]\n\n2011-08-02  Geert Bosch  <bosch@adacore.com>\n\n\t* gcc-interface/gigi.h, gcc-interface/misc.c (enumerate_modes): New\n\tfunction.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2011-08-02  Olivier Hainque  <hainque@adacore.com>\n\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Set the function\n\tend_locus.\n\nFrom-SVN: r177141", "tree": {"sha": "44991ada9fe1828c27861ec37abc54dd10f99f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44991ada9fe1828c27861ec37abc54dd10f99f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002bdd685cc819e9a1609c97d5f2281f6109b297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002bdd685cc819e9a1609c97d5f2281f6109b297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002bdd685cc819e9a1609c97d5f2281f6109b297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002bdd685cc819e9a1609c97d5f2281f6109b297/comments", "author": null, "committer": null, "parents": [{"sha": "499769ec33c515c433e407ee25729018457ed295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499769ec33c515c433e407ee25729018457ed295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499769ec33c515c433e407ee25729018457ed295"}], "stats": {"total": 158, "additions": 150, "deletions": 8}, "files": [{"sha": "d249de0df52c14695074a6b7884b210089815c51", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=002bdd685cc819e9a1609c97d5f2281f6109b297", "patch": "@@ -1,3 +1,14 @@\n+2011-08-02  Geert Bosch  <bosch@adacore.com>\n+\n+\t* gcc-interface/gigi.h, gcc-interface/misc.c (enumerate_modes): New\n+\tfunction.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2011-08-02  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Set the function\n+\tend_locus.\n+\n 2011-08-02  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Check_Anonymous_Access_Components): Create extra formals"}, {"sha": "c745c404f83ba0fce05619f56084860a43085a3e", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=002bdd685cc819e9a1609c97d5f2281f6109b297", "patch": "@@ -333,6 +333,7 @@ GNAT_ADA_OBJS =\t\\\n  ada/urealp.o\t\\\n  ada/usage.o\t\\\n  ada/validsw.o\t\\\n+ ada/warnsw.o   \\\n  ada/widechar.o\n \n # Object files for gnat executables\n@@ -1530,14 +1531,14 @@ ada/csets.o : ada/ada.ads ada/a-unccon.ads ada/a-uncdea.ads ada/csets.ads \\\n \n ada/cstand.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n-   ada/atree.adb ada/casing.ads ada/checks.ads ada/csets.ads \\\n-   ada/cstand.ads ada/cstand.adb ada/debug.ads ada/einfo.ads ada/einfo.adb \\\n-   ada/elists.ads ada/err_vars.ads ada/errout.ads ada/errout.adb \\\n-   ada/erroutc.ads ada/erroutc.adb ada/exp_ch11.ads ada/exp_disp.ads \\\n-   ada/exp_tss.ads ada/exp_util.ads ada/fname.ads ada/freeze.ads \\\n-   ada/get_targ.ads ada/gnat.ads ada/g-htable.ads ada/gnatvsn.ads \\\n-   ada/hostparm.ads ada/interfac.ads ada/layout.ads ada/lib.ads \\\n-   ada/lib-xref.ads ada/namet.ads ada/namet.adb ada/nlists.ads \\\n+   ada/atree.adb ada/back_end.ads ada/casing.ads ada/checks.ads \\\n+   ada/csets.ads ada/cstand.ads ada/cstand.adb ada/debug.ads ada/einfo.ads \\\n+   ada/einfo.adb ada/elists.ads ada/err_vars.ads ada/errout.ads \\\n+   ada/errout.adb ada/erroutc.ads ada/erroutc.adb ada/exp_ch11.ads \\\n+   ada/exp_disp.ads ada/exp_tss.ads ada/exp_util.ads ada/fname.ads \\\n+   ada/freeze.ads ada/get_targ.ads ada/gnat.ads ada/g-htable.ads \\\n+   ada/gnatvsn.ads ada/hostparm.ads ada/interfac.ads ada/layout.ads \\\n+   ada/lib.ads ada/lib-xref.ads ada/namet.ads ada/namet.adb ada/nlists.ads \\\n    ada/nlists.adb ada/nmake.ads ada/nmake.adb ada/opt.ads ada/output.ads \\\n    ada/restrict.ads ada/rident.ads ada/rtsfind.ads ada/scans.ads \\\n    ada/scn.ads ada/scng.ads ada/scng.adb ada/sem.ads ada/sem_attr.ads \\"}, {"sha": "13c9f5418f8a05f458f6079bf5da0601460b6228", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=002bdd685cc819e9a1609c97d5f2281f6109b297", "patch": "@@ -929,6 +929,11 @@ extern bool default_pass_by_ref (tree gnu_type);\n    if it should be passed by reference.  */\n extern bool must_pass_by_ref (tree gnu_type);\n \n+/* This function is called by the front-end to enumerate all the supported\n+   modes for the machine, as well as some predefined C types.  */\n+extern void enumerate_modes (void (*f) (const char *, int, int, int, int, int,\n+                                        int));\n+\n /* Return the size of the FP mode with precision PREC.  */\n extern int fp_prec_to_size (int prec);\n "}, {"sha": "a03bb0fbf35d691ce3a648ad6cd3dfe5b2fc7cec", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=002bdd685cc819e9a1609c97d5f2281f6109b297", "patch": "@@ -39,6 +39,7 @@\n #include \"opts.h\"\n #include \"options.h\"\n #include \"plugin.h\"\n+#include \"real.h\"\n #include \"function.h\"\t/* For pass_by_reference.  */\n \n #include \"ada.h\"\n@@ -636,6 +637,124 @@ must_pass_by_ref (tree gnu_type)\n \t      && TREE_CODE (TYPE_SIZE (gnu_type)) != INTEGER_CST));\n }\n \n+/* This function is called by the front-end to enumerate all the supported\n+   modes for the machine, as well as some predefined C types.  F is a function\n+   which is called back with the parameters as listed below, first a string,\n+   then six ints.  The name is any arbitrary null-terminated string and has\n+   no particular significance, except for the case of predefined C types, where\n+   it should be the name of the C type.  For integer types, only signed types\n+   should be listed, unsigned versions are assumed.  The order of types should\n+   be in order of preference, with the smallest/cheapest types first.\n+\n+   In particular, C predefined types should be listed before other types,\n+   binary floating point types before decimal ones, and narrower/cheaper\n+   type versions before more expensive ones.  In type selection the first\n+   matching variant will be used.\n+\n+   NAME\t\tpointer to first char of type name\n+   DIGS\t\tnumber of decimal digits for floating-point modes, else 0\n+   COMPLEX_P\tnonzero is this represents a complex mode\n+   COUNT\tcount of number of items, nonzero for vector mode\n+   FLOAT_REP\tFloat_Rep_Kind for FP, otherwise undefined\n+   SIZE\t\tnumber of bits used to store data\n+   ALIGN\tnumber of bits to which mode is aligned.  */\n+\n+void\n+enumerate_modes (void (*f) (const char *, int, int, int, int, int, int))\n+{\n+  const tree c_types[]\n+    = { float_type_node, double_type_node, long_double_type_node };\n+  const char *const c_names[]\n+    = { \"float\", \"double\", \"long double\" };\n+  int iloop;\n+\n+  for (iloop = 0; iloop < NUM_MACHINE_MODES; iloop++)\n+    {\n+      enum machine_mode i = (enum machine_mode) iloop;\n+      enum machine_mode inner_mode = i;\n+      bool float_p = false;\n+      bool complex_p = false;\n+      bool vector_p = false;\n+      bool skip_p = false;\n+      int digs = 0;\n+      unsigned int nameloop;\n+      Float_Rep_Kind float_rep = IEEE_Binary; /* Until proven otherwise */\n+\n+      switch (GET_MODE_CLASS (i))\n+\t{\n+\tcase MODE_INT:\n+\t  break;\n+\tcase MODE_FLOAT:\n+\t  float_p = true;\n+\t  break;\n+\tcase MODE_COMPLEX_INT:\n+\t  complex_p = true;\n+\t  inner_mode = GET_MODE_INNER (i);\n+\t  break;\n+\tcase MODE_COMPLEX_FLOAT:\n+\t  float_p = true;\n+\t  complex_p = true;\n+\t  inner_mode = GET_MODE_INNER (i);\n+\t  break;\n+\tcase MODE_VECTOR_INT:\n+\t  vector_p = true;\n+\t  inner_mode = GET_MODE_INNER (i);\n+\t  break;\n+\tcase MODE_VECTOR_FLOAT:\n+\t  float_p = true;\n+\t  vector_p = true;\n+\t  inner_mode = GET_MODE_INNER (i);\n+\t  break;\n+\tdefault:\n+\t  skip_p = true;\n+\t}\n+\n+      if (float_p)\n+\t{\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (inner_mode);\n+\n+\t  if (fmt->b == 2)\n+\t    digs = (fmt->p - 1) * 1233 / 4096; /* scale by log (2) */\n+\n+\t  else if (fmt->b == 10)\n+\t    digs = fmt->p;\n+\n+\t  else\n+\t    gcc_unreachable();\n+\n+\t  if (fmt == &vax_f_format\n+\t      || fmt == &vax_d_format\n+\t      || fmt == &vax_g_format)\n+\t    float_rep = VAX_Native;\n+\t}\n+\n+      /* First register any C types for this mode that the front end\n+\t may need to know about, unless the mode should be skipped.  */\n+\n+      if (!skip_p)\n+\tfor (nameloop = 0; nameloop < ARRAY_SIZE (c_types); nameloop++)\n+\t  {\n+\t    tree typ = c_types[nameloop];\n+\t    const char *nam = c_names[nameloop];\n+\n+\t    if (TYPE_MODE (typ) == i)\n+\t      {\n+\t\tf (nam, digs, complex_p,\n+\t\t   vector_p ? GET_MODE_NUNITS (i) : 0, float_rep,\n+\t\t   TYPE_PRECISION (typ), TYPE_ALIGN (typ));\n+\t\tskip_p = true;\n+\t      }\n+\t  }\n+\n+      /* If no predefined C types were found, register the mode itself.  */\n+\n+      if (!skip_p)\n+\tf (GET_MODE_NAME (i), digs, complex_p,\n+\t   vector_p ? GET_MODE_NUNITS (i) : 0, float_rep,\n+\t   GET_MODE_PRECISION (i), GET_MODE_ALIGNMENT (i));\n+    }\n+}\n+\n /* Return the size of the FP mode with precision PREC.  */\n \n int"}, {"sha": "f9acdcdfeef66aaf78edbe0c4072ad8bd5f99e66", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd685cc819e9a1609c97d5f2281f6109b297/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=002bdd685cc819e9a1609c97d5f2281f6109b297", "patch": "@@ -2762,6 +2762,12 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   end_subprog_body (gnu_result);\n \n+  /* Attempt setting the end_locus of our GCC body tree, typically a\n+     BIND_EXPR or STATEMENT_LIST, then the end_locus of our GCC subprogram\n+     declaration tree.  */\n+  set_end_locus_from_node (gnu_result, gnat_node);\n+  set_end_locus_from_node (gnu_subprog_decl, gnat_node);\n+\n   /* Finally annotate the parameters and disconnect the trees for parameters\n      that we have turned into variables since they are now unusable.  */\n   for (gnat_param = First_Formal_With_Extras (gnat_subprog_id);"}]}