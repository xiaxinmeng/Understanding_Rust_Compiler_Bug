{"sha": "b5ba95ba974d895b9de195494d947fa7effc6e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViYTk1YmE5NzRkODk1YjlkZTE5NTQ5NGQ5NDdmYTdlZmZjNmU0OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-05-17T23:05:58Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-05-17T23:05:58Z"}, "message": "gcc_diag-11.c: Remove accidentally committed test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/gcc_diag-11.c: Remove accidentally committed test.\n\nFrom-SVN: r271362", "tree": {"sha": "ef01a5dc6c82ae20d08bac14e5552d1d9378dfcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef01a5dc6c82ae20d08bac14e5552d1d9378dfcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ba95ba974d895b9de195494d947fa7effc6e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ba95ba974d895b9de195494d947fa7effc6e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ba95ba974d895b9de195494d947fa7effc6e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ba95ba974d895b9de195494d947fa7effc6e48/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47e4cba60667814309d271fc91cace5eea54fa5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e4cba60667814309d271fc91cace5eea54fa5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e4cba60667814309d271fc91cace5eea54fa5e"}], "stats": {"total": 228, "additions": 6, "deletions": 222}, "files": [{"sha": "a27f50821b3e080c90ac14a4e6163313ae47ddee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ba95ba974d895b9de195494d947fa7effc6e48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ba95ba974d895b9de195494d947fa7effc6e48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5ba95ba974d895b9de195494d947fa7effc6e48", "patch": "@@ -1,3 +1,7 @@\n+2019-05-17  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/gcc_diag-11.c: Remove accidentally committed test.\n+\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR testsuite/89433\n@@ -71,8 +75,8 @@\n         * gcc.dg/debug/pr85252.c: Same.\n         * gcc.dg/dfp/cast-bad.c: Same.\n         * gcc.dg/format/gcc_diag-1.c: Same.\n-        * gcc.dg/format/gcc_diag-11.c: Same.New test.\n-        * gcc.dg/gcc_diag-11.c: Same.New test.\n+        * gcc.dg/format/gcc_diag-11.c: Same.\n+        * gcc.dg/gcc_diag-11.c: Same.\n         * gcc.dg/gnu-cond-expr-2.c: Same.\n         * gcc.dg/gnu-cond-expr-3.c: Same.\n         * gcc.dg/gomp/macro-4.c: Same."}, {"sha": "c359989f481c58246964a391f19c65be7397016c", "filename": "gcc/testsuite/gcc.dg/gcc_diag-11.c", "status": "removed", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e4cba60667814309d271fc91cace5eea54fa5e/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e4cba60667814309d271fc91cace5eea54fa5e/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c?ref=47e4cba60667814309d271fc91cace5eea54fa5e", "patch": "@@ -1,220 +0,0 @@\n-/* Test warnings for for GCC diagnostics.\n-   { dg-do compile }\n-   { dg-options \"-Wformat -Wformat-diag\" } */\n-\n-/* Magic identifiers must be set before the attribute is used.  */\n-\n-typedef long long __gcc_host_wide_int__;\n-\n-typedef struct location_s\n-{\n-  const char *file;\n-  int line;\n-} location_t;\n-\n-union tree_node;\n-typedef union tree_node *tree;\n-\n-/* Define gimple as a dummy type.  The typedef must be provided for\n-   the C test to find the symbol.  */\n-typedef struct gimple gimple;\n-\n-/* Likewise for gimple.  */\n-typedef struct cgraph_node cgraph_node;\n-\n-#define FORMAT(kind) __attribute__ ((format (__gcc_## kind ##__, 1, 2)))\n-\n-/* Basic formatting function like pp_format.  */\n-void diag (const char*, ...) FORMAT (diag);\n-\n-/* Diagnostic formatting function like error or warning declared\n-   by the C front end.  */\n-void cdiag (const char*, ...) FORMAT (cdiag);\n-\n-/* Diagnostic formatting function like error or warning declared\n-   by the middle-end or back-end.  */\n-void tdiag (const char*, ...) FORMAT (tdiag);\n-\n-/* Diagnostic formatting function like error or warning declared\n-   by the C++ front-end.  */\n-void cxxdiag (const char*, ...) FORMAT (cxxdiag);\n-\n-void dump (const char*, ...) FORMAT (dump_printf);\n-\n-/* Verify that functions declared with the C/C++ front-end __gcc_cdiag__\n-   attribute detect invalid whitespace in format strings.  */\n-\n-void test_cdiag_whitespace (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\" a\");             /* { dg-warning \"spurious leading space character in format\" } */\n-  cdiag (\"%< %>a\");\n-  cdiag (\"%<  %>a\");\n-  cdiag (\"a b\");\n-  cdiag (\"a  b\");           /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n-  cdiag (\"a \");             /* { dg-warning \"spurious trailing space character\" } */\n-  cdiag (\"a  \");            /* { dg-warning \"spurious trailing space characters\" } */\n-  cdiag (\"a%< %>\");\n-  cdiag (\"a%< %>%< %>\");\n-  cdiag (\"a%< %> \");        /* { dg-warning \"spurious trailing space character\" } */\n-  cdiag (\"a%< %>  %< %>\");  /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n-\n-  /* It's debatable whether the following two formst strings should\n-     be  cdiagnosed.  They aren't only because it's simpler that way.  */\n-  cdiag (\"a %< %>\");\n-  cdiag (\"a%< %> %< %>\");\n-\n-  /* Exercise other whitespace characters.  */\n-  cdiag (\"a\\fb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0c'\" } */\n-  cdiag (\"a\\nb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0a'\" } */\n-  cdiag (\"a\\rb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0d'\" } */\n-  cdiag (\"a\\vb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0b'\" } */\n-\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wformat-diag\"\n-\n-  /* Verify that the warning can be suppressed.  */\n-  cdiag (\"\\ta\\b    c\\vb\\n\");\n-\n-#pragma GCC diagnostic pop\n-}\n-\n-\n-void test_cdiag_control (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"\\1\");             /* { dg-warning \"unquoted control character '\\\\\\\\x01'\" } */\n-  cdiag (\"a\\ab\");           /* { dg-warning \"unquoted control character '\\\\\\\\x07'\" } */\n-  cdiag (\"a\\bb\");           /* { dg-warning \"unquoted control character '\\\\\\\\x08'\" } */\n-}\n-\n-\n-void test_cdiag_punct (tree t, gimple *gc, int i)\n-{\n-  (void)&t; (void)&gc;\n-\n-  /* Exercise the period.  */\n-  cdiag (\".abc\");           /* { dg-warning \"spurious leading punctuation character\" } */\n-  cdiag (\"abc;\");           /* { dg-warning \"spurious trailing punctuation character\" } */\n-  /* Verify that sentences that start with an uppercase letter and end\n-     in a period are not diagnosed.  */\n-  cdiag (\"This is a full sentence.\");\n-  cdiag (\"Capitalized sentence (with a parethetical note).\");\n-  cdiag (\"Not a full sentence;\");   /* { dg-warning \"spurious trailing punctuation character\" } */\n-  cdiag (\"Neither is this one,\");   /* { dg-warning \"spurious trailing punctuation character\" } */\n-\n-  /* Exercise the ellipsis.  */\n-  cdiag (\"this message...\");\n-  cdiag (\"...continues here\");\n-  cdiag (\"but...not here\"); /* { dg-warning \"unquoted sequence of 3 consecutive punctuation characters\" } */\n-\n-  /* Exercise parentheses.  */\n-  cdiag (\"null argument where non-null required (argument %i)\", i);\n-\n-  /* Exercise C++.  */\n-  cdiag (\"C++ is cool\");\n-  cdiag (\"this is c++\");\n-  cdiag (\"you can do this in C++ but not in C\");\n-\n-  /* Exercise parenthetical note followed by a colon, semicolon,\n-     or a comma.  */\n-  cdiag (\"found a bug (here):\");\n-  cdiag (\"because of another bug (over there); fix it\");\n-\n-  cdiag (\"found foo (123): go look at it\");\n-  cdiag (\"missed bar (abc); will try harder next time\");\n-\n-  cdiag (\"expected this (or that), got something else (or who knows what)\");\n-}\n-\n-\n-void test_cdiag_punct_balance (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"f()\");            /* { dg-warning \"spurious trailing punctuation characters\" } */\n-  cdiag (\"g(1)\");\n-  cdiag (\"(\");              /* { dg-warning \"spurious leading punctuation character|unbalanced\" } */\n-  cdiag (\"()\");             /* { dg-warning \"spurious leading punctuation characters\" } */\n-  cdiag (\")\");              /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" } */\n-  cdiag (\"f()g\");           /* { dg-warning \"unquoted sequence of 2 consecutive punctuation characters\" } */\n-  cdiag (\"illegal operand (1)\");\n-}\n-\n-\n-void test_cdiag_nongraph (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"a\\376b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xfe'\" } */\n-  cdiag (\"a\\377b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xff'\" } */\n-}\n-\n-\n-void test_cdiag_attribute (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"attribute foo\");\n-  cdiag (\"this is attribute bar\");\n-  cdiag (\"bad __attribute bar\");        /* { dg-warning \"unquoted attribute\" } */\n-  cdiag (\"__attribute__ (foobar) bad\"); /* { dg-warning \"unquoted attribute\" } */\n-  cdiag (\"__attribute__ ((foobar))\");   /* { dg-warning \"unquoted attribute\" } */\n-  cdiag (\"__attribute__ (xxx))\");       /* { dg-warning \"unquoted attribute\" } */\n-  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"xxx\" { target *-*-* } .-1 } */\n-  cdiag (\"__attribute__ ((yyy)))\");     /* { dg-warning \"unquoted attribute\" } */\n-  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"yyy\" { target *-*-* } .-1 } */\n-  cdiag (\"__attribute__ ((zzz)\");       /* { dg-warning \"unquoted attribute\" } */\n-  /* { dg-warning \"unbalanced punctuation character '\\\\\\('\" \"zzz\" { target *-*-* } .-1 } */\n-\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wformat-diag\"\n-\n-  /* Verify that the warning can be suppressed.  */\n-  cdiag (\"__attribute__ (((\");\n-\n-#pragma GCC diagnostic pop\n-}\n-\n-void test_cdiag_builtin (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"__builtin_abort\");    /* { dg-warning \"unquoted name of built-in function '__builtin_abort'\" } */\n-  cdiag (\"in __builtin_trap\");  /* { dg-warning \"unquoted name of built-in function '__builtin_trap'\" } */\n-  cdiag (\"__builtin_xyz bites\");/* { dg-warning \"unquoted name of built-in function '__builtin_xyz'\" } */\n-\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wformat-diag\"\n-\n-  /* Verify that the warning can be suppressed.  */\n-  cdiag (\"__builtin____with____lots__of__underscores\");\n-\n-#pragma GCC diagnostic pop\n-}\n-\n-void test_cdiag_option (tree t, gimple *gc)\n-{\n-  (void)&t; (void)&gc;\n-\n-  cdiag (\"%<-Wall%>\");\n-  cdiag (\"use option %<-Wextra%> to enable additinal warnings\");\n-\n-  cdiag (\"-O2 is fast\");       /* { dg-warning \"unquoted option name '-O2'\" } */\n-  cdiag (\"but -O3 is faster\"); /* { dg-warning \"unquoted option name '-O3'\" } */\n-\n-  cdiag (\"get --help\");        /* { dg-warning \"unquoted option name '--help'\" } */\n-  cdiag (\"enable -m32\");       /* { dg-warning \"unquoted option name '-m32'\" } */\n-  cdiag (\"value is -12\");\n-  cdiag (\"foo-O2\");\n-  cdiag (\"a-W\");\n-}\n-\n-void test_cdiag_oper (tree t, gimple *gc)\n-{\n-  cdiag (\"a == b\");            /* { dg-warning \"unquoted operator '=='\" } */\n-  cdiag (\"++a\");               /* { dg-warning \"unquoted operator '\\\\\\+\\\\\\+'\" } */\n-  cdiag (\"b--\");               /* { dg-warning \"unquoted operator '--'\" } */\n-}"}]}