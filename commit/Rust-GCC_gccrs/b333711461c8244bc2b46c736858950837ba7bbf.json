{"sha": "b333711461c8244bc2b46c736858950837ba7bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzMzcxMTQ2MWM4MjQ0YmMyYjQ2YzczNjg1ODk1MDgzN2JhN2JiZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-28T17:34:00Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-05T17:17:40Z"}, "message": "Add lowering for TypeBounds on Generic Parameters\n\nPreserve type-bounds into HIR for type resolution and code generation. This\nfollows the same style of classes in the AST and might need some tweaks\nfor where constraints.", "tree": {"sha": "50adf3b7b04bf4da624b60546c11652cce5e8baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50adf3b7b04bf4da624b60546c11652cce5e8baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b333711461c8244bc2b46c736858950837ba7bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333711461c8244bc2b46c736858950837ba7bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b333711461c8244bc2b46c736858950837ba7bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333711461c8244bc2b46c736858950837ba7bbf/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074c070c02e61033694f2f969a33a795036ad540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074c070c02e61033694f2f969a33a795036ad540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074c070c02e61033694f2f969a33a795036ad540"}], "stats": {"total": 209, "additions": 134, "deletions": 75}, "files": [{"sha": "6baef3f9693fe60f14f6c9c4844d10ee23832f8c", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -1126,9 +1126,16 @@ class TypeParamBound\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  NodeId get_node_id () const { return node_id; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual TypeParamBound *clone_type_param_bound_impl () const = 0;\n+\n+  TypeParamBound () : node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+  {}\n+\n+  NodeId node_id;\n };\n \n // Represents a lifetime (and is also a kind of type param bound)\n@@ -1144,14 +1151,8 @@ class Lifetime : public TypeParamBound\n \n private:\n   LifetimeType lifetime_type;\n-\n-  // TODO: LIFETIME_OR_LABEL (aka lifetime token) is only field\n-  // find way of enclosing token or something\n   std::string lifetime_name;\n-  // only applies for NAMED lifetime_type\n-\n   Location locus;\n-\n   NodeId node_id;\n \n public:"}, {"sha": "e179bb7afa203bed72ce08bc7ab3b35db5a4577d", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -65,6 +65,9 @@ class TraitBound : public TypeParamBound\n   TypePath &get_type_path () { return type_path; }\n   const TypePath &get_type_path () const { return type_path; }\n \n+  bool is_in_parens () const { return in_parens; }\n+  bool has_opening_question_mark () const { return opening_question_mark; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "b1d0df36f4a706e4406d346d90fec76fad7e77a8", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -245,29 +245,15 @@ class ASTLoweringBase : public AST::ASTVisitor\n \n   HIR::Lifetime lower_lifetime (AST::Lifetime &lifetime)\n   {\n-    HIR::Lifetime::LifetimeType type = HIR::Lifetime::LifetimeType::NAMED;\n-    switch (lifetime.get_lifetime_type ())\n-      {\n-      case AST::Lifetime::LifetimeType::NAMED:\n-\ttype = HIR::Lifetime::LifetimeType::NAMED;\n-\tbreak;\n-      case AST::Lifetime::LifetimeType::STATIC:\n-\ttype = HIR::Lifetime::LifetimeType::STATIC;\n-\tbreak;\n-      case AST::Lifetime::LifetimeType::WILDCARD:\n-\ttype = HIR::Lifetime::LifetimeType::WILDCARD;\n-\tbreak;\n-      }\n-\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n     mappings->insert_node_to_hir (mapping.get_crate_num (),\n \t\t\t\t  mapping.get_nodeid (), mapping.get_hirid ());\n \n-    return HIR::Lifetime (mapping, type, lifetime.get_lifetime_name (),\n-\t\t\t  lifetime.get_locus ());\n+    return HIR::Lifetime (mapping, lifetime.get_lifetime_type (),\n+\t\t\t  lifetime.get_lifetime_name (), lifetime.get_locus ());\n   }\n \n   HIR::LoopLabel lower_loop_label (AST::LoopLabel &loop_label)\n@@ -296,6 +282,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::SelfParam lower_self (AST::SelfParam &self);\n \n   HIR::Type *lower_type_no_bounds (AST::TypeNoBounds *type);\n+\n+  HIR::TypeParamBound *lower_bound (AST::TypeParamBound *bound);\n };\n \n } // namespace HIR"}, {"sha": "8db86371f14ed808ed21ac2420b9246e9c171e17", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 61, "deletions": 17, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -294,24 +294,9 @@ class ASTLowerGenericParam : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    HIR::Lifetime::LifetimeType ltt;\n \n-    switch (param.get_lifetime ().get_lifetime_type ())\n-      {\n-      case AST::Lifetime::LifetimeType::NAMED:\n-\tltt = HIR::Lifetime::LifetimeType::NAMED;\n-\tbreak;\n-      case AST::Lifetime::LifetimeType::STATIC:\n-\tltt = HIR::Lifetime::LifetimeType::STATIC;\n-\tbreak;\n-      case AST::Lifetime::LifetimeType::WILDCARD:\n-\tltt = HIR::Lifetime::LifetimeType::WILDCARD;\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-      }\n-\n-    HIR::Lifetime lt (mapping, ltt, param.get_lifetime ().get_lifetime_name (),\n+    HIR::Lifetime lt (mapping, param.get_lifetime ().get_lifetime_type (),\n+\t\t      param.get_lifetime ().get_lifetime_name (),\n \t\t      param.get_lifetime ().get_locus ());\n \n     translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n@@ -322,6 +307,16 @@ class ASTLowerGenericParam : public ASTLoweringBase\n   {\n     AST::Attribute outer_attr = AST::Attribute::create_empty ();\n     std::vector<std::unique_ptr<HIR::TypeParamBound> > type_param_bounds;\n+    if (param.has_type_param_bounds ())\n+      {\n+\tfor (auto &bound : param.get_type_param_bounds ())\n+\t  {\n+\t    HIR::TypeParamBound *lowered_bound = lower_bound (bound.get ());\n+\t    type_param_bounds.push_back (\n+\t      std::unique_ptr<HIR::TypeParamBound> (lowered_bound));\n+\t  }\n+      }\n+\n     HIR::Type *type = param.has_type ()\n \t\t\t? ASTLoweringType::translate (param.get_type ().get ())\n \t\t\t: nullptr;\n@@ -344,6 +339,55 @@ class ASTLowerGenericParam : public ASTLoweringBase\n   HIR::GenericParam *translated;\n };\n \n+class ASTLoweringTypeBounds : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::TypeParamBound *translate (AST::TypeParamBound *type)\n+  {\n+    ASTLoweringTypeBounds resolver;\n+    type->accept_vis (resolver);\n+\n+    rust_assert (resolver.translated != nullptr);\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (),\n+      resolver.translated->get_locus_slow ());\n+\n+    return resolver.translated;\n+  }\n+\n+  void visit (AST::TraitBound &bound) override\n+  {\n+    // FIXME\n+    std::vector<HIR::LifetimeParam> lifetimes;\n+\n+    AST::TypePath &ast_trait_path = bound.get_type_path ();\n+    HIR::TypePath *trait_path = ASTLowerTypePath::translate (ast_trait_path);\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, bound.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::TraitBound (mapping, *trait_path, bound.get_locus (),\n+\t\t\t\t      bound.is_in_parens (),\n+\t\t\t\t      bound.has_opening_question_mark ());\n+  }\n+\n+  void visit (AST::Lifetime &bound) override\n+  {\n+    HIR::Lifetime lifetime = lower_lifetime (bound);\n+    translated = new HIR::Lifetime (lifetime);\n+  }\n+\n+private:\n+  ASTLoweringTypeBounds () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::TypeParamBound *translated;\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "23914f87a453c2351414032e94742a7cbb03d82e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -403,5 +403,11 @@ ASTLoweringBase::lower_type_no_bounds (AST::TypeNoBounds *type)\n   return ASTLoweringType::translate (type);\n }\n \n+HIR::TypeParamBound *\n+ASTLoweringBase::lower_bound (AST::TypeParamBound *bound)\n+{\n+  return ASTLoweringTypeBounds::translate (bound);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "dee2827a346debdf6c4d8a6494b369bc67d0a44f", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -2113,11 +2113,11 @@ Lifetime::as_string () const\n \n   switch (lifetime_type)\n     {\n-    case NAMED:\n+    case AST::Lifetime::LifetimeType::NAMED:\n       return \"'\" + lifetime_name;\n-    case STATIC:\n+    case AST::Lifetime::LifetimeType::STATIC:\n       return \"'static\";\n-    case WILDCARD:\n+    case AST::Lifetime::LifetimeType::WILDCARD:\n       return \"'_\";\n     default:\n       return \"ERROR-MARK-STRING: lifetime type failure\";\n@@ -2747,7 +2747,8 @@ TypePath::to_trait_bound (bool in_parens) const\n   // create clone FIXME is this required? or is copy constructor automatically\n   // called?\n   TypePath copy (*this);\n-  return new TraitBound (std::move (copy), copy.get_locus (), in_parens);\n+  return new TraitBound (mappings, std::move (copy), copy.get_locus (),\n+\t\t\t in_parens);\n }\n \n std::string"}, {"sha": "3ad06c81711eba49f98b260ab0098e546980e2e4", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -333,7 +333,8 @@ struct SelfParam\n   SelfParam (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n \t     bool is_mut, Location locus)\n     : self_kind (is_mut ? ImplicitSelfKind::MUT : ImplicitSelfKind::IMM),\n-      lifetime (Lifetime (mappings, Lifetime::LifetimeType::NAMED, \"\", locus)),\n+      lifetime (\n+\tLifetime (mappings, AST::Lifetime::LifetimeType::NAMED, \"\", locus)),\n       type (std::move (type)), locus (locus), mappings (mappings)\n   {}\n "}, {"sha": "87dffcf267d26dfd3872e13d0b11ed6d076bd835", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -33,26 +33,23 @@ class TraitBound : public TypeParamBound\n {\n   bool in_parens;\n   bool opening_question_mark;\n-\n-  // bool has_for_lifetimes;\n-  // LifetimeParams for_lifetimes;\n-  std::vector<LifetimeParam> for_lifetimes; // inlined LifetimeParams\n-\n+  std::vector<LifetimeParam> for_lifetimes;\n   TypePath type_path;\n-\n   Location locus;\n \n+  Analysis::NodeMapping mappings;\n+\n public:\n   // Returns whether trait bound has \"for\" lifetimes\n   bool has_for_lifetimes () const { return !for_lifetimes.empty (); }\n \n-  TraitBound (TypePath type_path, Location locus, bool in_parens = false,\n-\t      bool opening_question_mark = false,\n+  TraitBound (Analysis::NodeMapping mapping, TypePath type_path, Location locus,\n+\t      bool in_parens = false, bool opening_question_mark = false,\n \t      std::vector<LifetimeParam> for_lifetimes\n \t      = std::vector<LifetimeParam> ())\n     : in_parens (in_parens), opening_question_mark (opening_question_mark),\n       for_lifetimes (std::move (for_lifetimes)),\n-      type_path (std::move (type_path)), locus (locus)\n+      type_path (std::move (type_path)), locus (locus), mappings (mapping)\n   {}\n \n   std::string as_string () const override;\n@@ -61,6 +58,15 @@ class TraitBound : public TypeParamBound\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Analysis::NodeMapping get_mappings () const override final\n+  {\n+    return mappings;\n+  }\n+\n+  Location get_locus_slow () const override final { return get_locus (); }\n+\n+  BoundType get_bound_type () const final override { return TRAITBOUND; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "20408bb677411516a8405c8488e0ad5b710df07c", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333711461c8244bc2b46c736858950837ba7bbf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=b333711461c8244bc2b46c736858950837ba7bbf", "patch": "@@ -406,6 +406,12 @@ class TypeNoBounds : public Type\n class TypeParamBound\n {\n public:\n+  enum BoundType\n+  {\n+    LIFETIME,\n+    TRAITBOUND\n+  };\n+\n   virtual ~TypeParamBound () {}\n \n   // Unique pointer custom clone function\n@@ -418,6 +424,12 @@ class TypeParamBound\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n+  virtual Analysis::NodeMapping get_mappings () const = 0;\n+\n+  virtual Location get_locus_slow () const = 0;\n+\n+  virtual BoundType get_bound_type () const = 0;\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual TypeParamBound *clone_type_param_bound_impl () const = 0;\n@@ -426,44 +438,31 @@ class TypeParamBound\n // Represents a lifetime (and is also a kind of type param bound)\n class Lifetime : public TypeParamBound\n {\n-public:\n-  enum LifetimeType\n-  {\n-    NAMED,   // corresponds to LIFETIME_OR_LABEL\n-    STATIC,  // corresponds to 'static\n-    WILDCARD // corresponds to '_\n-  };\n-\n private:\n-  LifetimeType lifetime_type;\n-\n-  // TODO: LIFETIME_OR_LABEL (aka lifetime token) is only field\n-  // find way of enclosing token or something\n+  AST::Lifetime::LifetimeType lifetime_type;\n   std::string lifetime_name;\n-  // only applies for NAMED lifetime_type\n-\n   Location locus;\n-\n   Analysis::NodeMapping mappings;\n \n public:\n   // Constructor\n-  Lifetime (Analysis::NodeMapping mapping, LifetimeType type, std::string name,\n-\t    Location locus)\n+  Lifetime (Analysis::NodeMapping mapping, AST::Lifetime::LifetimeType type,\n+\t    std::string name, Location locus)\n     : lifetime_type (type), lifetime_name (std::move (name)), locus (locus),\n       mappings (mapping)\n   {}\n \n   // Returns true if the lifetime is in an error state.\n   bool is_error () const\n   {\n-    return lifetime_type == NAMED && lifetime_name.empty ();\n+    return lifetime_type == AST::Lifetime::LifetimeType::NAMED\n+\t   && lifetime_name.empty ();\n   }\n \n   static Lifetime error ()\n   {\n-    return Lifetime (Analysis::NodeMapping::get_error (), LifetimeType::NAMED,\n-\t\t     \"\", Location ());\n+    return Lifetime (Analysis::NodeMapping::get_error (),\n+\t\t     AST::Lifetime::LifetimeType::NAMED, \"\", Location ());\n   }\n \n   std::string as_string () const override;\n@@ -472,11 +471,21 @@ class Lifetime : public TypeParamBound\n \n   std::string get_name () const { return lifetime_name; }\n \n-  LifetimeType get_lifetime_type () const { return lifetime_type; }\n+  AST::Lifetime::LifetimeType get_lifetime_type () const\n+  {\n+    return lifetime_type;\n+  }\n \n   Location get_locus () const { return locus; }\n \n-  Analysis::NodeMapping get_mappings () const { return mappings; }\n+  Analysis::NodeMapping get_mappings () const override final\n+  {\n+    return mappings;\n+  }\n+\n+  Location get_locus_slow () const override final { return get_locus (); }\n+\n+  BoundType get_bound_type () const final override { return LIFETIME; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}]}