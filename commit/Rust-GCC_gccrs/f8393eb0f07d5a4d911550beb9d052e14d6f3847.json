{"sha": "f8393eb0f07d5a4d911550beb9d052e14d6f3847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzOTNlYjBmMDdkNWE0ZDkxMTU1MGJlYjlkMDUyZTE0ZDZmMzg0Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-01-26T14:32:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-01-26T14:32:30Z"}, "message": "omp-low.h (oacc_fn_attrib_kernels_p): Declare.\n\n\t* omp-low.h (oacc_fn_attrib_kernels_p): Declare.\n\t(set_oacc_fn_attrib): Add IS_KERNEL arg.\n\t* omp-low.c (set_oacc_fn_attrib): Add IS_KERNEL arg.\n\t(oacc_fn_attrib_kernels_p, oacc_fn_attrib_level): New.\n\t(expand_omp_target): Pass is_kernel to set_oacc_fn_attrib.\n\t(oacc_validate_dims): Add LEVEL arg, don't return level.\n\t(new_oacc_loop_routine): Use oacc_fn_attrib_level, not\n\toacc_validate_dims.\n\t(execute_oacc_device_lower): Adjust, add more dump output.\n\t* tree-ssa-loop.c (gate_oacc_kernels): Use\n\toacc_fn_attrib_kernels_p.\n\t* tree-parloops.c (create_parallel_loop): Adjust\n\tset_oacc_fn_attrib call.\n\nFrom-SVN: r232830", "tree": {"sha": "ef6837a596586f05759a87232a7af5562f07e08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef6837a596586f05759a87232a7af5562f07e08f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8393eb0f07d5a4d911550beb9d052e14d6f3847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8393eb0f07d5a4d911550beb9d052e14d6f3847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8393eb0f07d5a4d911550beb9d052e14d6f3847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8393eb0f07d5a4d911550beb9d052e14d6f3847/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0b35f86a24b8c404590993d7811fe546fadf1eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b35f86a24b8c404590993d7811fe546fadf1eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b35f86a24b8c404590993d7811fe546fadf1eb"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "0a7a4174a678d008aeba18b1b0fcd2db7ad0bfa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847", "patch": "@@ -1,3 +1,19 @@\n+2016-01-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* omp-low.h (oacc_fn_attrib_kernels_p): Declare.\n+\t(set_oacc_fn_attrib): Add IS_KERNEL arg.\n+\t* omp-low.c (set_oacc_fn_attrib): Add IS_KERNEL arg.\n+\t(oacc_fn_attrib_kernels_p, oacc_fn_attrib_level): New.\n+\t(expand_omp_target): Pass is_kernel to set_oacc_fn_attrib.\n+\t(oacc_validate_dims): Add LEVEL arg, don't return level.\n+\t(new_oacc_loop_routine): Use oacc_fn_attrib_level, not\n+\toacc_validate_dims.\n+\t(execute_oacc_device_lower): Adjust, add more dump output.\n+\t* tree-ssa-loop.c (gate_oacc_kernels): Use\n+\toacc_fn_attrib_kernels_p.\n+\t* tree-parloops.c (create_parallel_loop): Adjust\n+\tset_oacc_fn_attrib call.\n+\n 2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/69254"}, {"sha": "677ad64e7e348e33ed97a06e9771b94369fe844e", "filename": "gcc/omp-low.c", "status": "modified", "additions": 76, "deletions": 30, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847", "patch": "@@ -12487,10 +12487,11 @@ replace_oacc_fn_attrib (tree fn, tree dims)\n \n /* Scan CLAUSES for launch dimensions and attach them to the oacc\n    function attribute.  Push any that are non-constant onto the ARGS\n-   list, along with an appropriate GOMP_LAUNCH_DIM tag.  */\n+   list, along with an appropriate GOMP_LAUNCH_DIM tag.  IS_KERNEL is\n+   true, if these are for a kernels region offload function.  */\n \n void\n-set_oacc_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n+set_oacc_fn_attrib (tree fn, tree clauses, bool is_kernel, vec<tree> *args)\n {\n   /* Must match GOMP_DIM ordering.  */\n   static const omp_clause_code ids[]\n@@ -12515,6 +12516,9 @@ set_oacc_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n \t  non_const |= GOMP_DIM_MASK (ix);\n \t}\n       attr = tree_cons (NULL_TREE, dim, attr);\n+      /* Note kernelness with TREE_PUBLIC.  */\n+      if (is_kernel)\n+\tTREE_PUBLIC (attr) = 1;\n     }\n \n   replace_oacc_fn_attrib (fn, attr);\n@@ -12583,6 +12587,36 @@ get_oacc_fn_attrib (tree fn)\n   return lookup_attribute (OACC_FN_ATTRIB, DECL_ATTRIBUTES (fn));\n }\n \n+/* Return true if this oacc fn attrib is for a kernels offload\n+   region.  We use the TREE_PUBLIC flag of each dimension -- only\n+   need to check the first one.  */\n+\n+bool\n+oacc_fn_attrib_kernels_p (tree attr)\n+{\n+  return TREE_PUBLIC (TREE_VALUE (attr));\n+}\n+\n+/* Return level at which oacc routine may spawn a partitioned loop, or\n+   -1 if it is not a routine (i.e. is an offload fn).  */\n+\n+static int\n+oacc_fn_attrib_level (tree attr)\n+{\n+  tree pos = TREE_VALUE (attr);\n+\n+  if (!TREE_PURPOSE (pos))\n+    return -1;\n+  \n+  int ix = 0;\n+  for (ix = 0; ix != GOMP_DIM_MAX;\n+       ix++, pos = TREE_CHAIN (pos))\n+    if (!integer_zerop (TREE_PURPOSE (pos)))\n+      break;\n+\n+  return ix;\n+}\n+\n /* Extract an oacc execution dimension from FN.  FN must be an\n    offloaded function or routine that has already had its execution\n    dimensions lowered to the target-specific values.  */\n@@ -13125,6 +13159,7 @@ expand_omp_target (struct omp_region *region)\n   enum built_in_function start_ix;\n   location_t clause_loc;\n   unsigned int flags_i = 0;\n+  bool oacc_kernels_p = false;\n \n   switch (gimple_omp_target_kind (entry_stmt))\n     {\n@@ -13144,8 +13179,10 @@ expand_omp_target (struct omp_region *region)\n       start_ix = BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA;\n       flags_i |= GOMP_TARGET_FLAG_EXIT_DATA;\n       break;\n-    case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+      oacc_kernels_p = true;\n+      /* FALLTHROUGH */\n+    case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n       start_ix = BUILT_IN_GOACC_PARALLEL;\n       break;\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n@@ -13304,7 +13341,7 @@ expand_omp_target (struct omp_region *region)\n       break;\n     case BUILT_IN_GOACC_PARALLEL:\n       {\n-\tset_oacc_fn_attrib (child_fn, clauses, &args);\n+\tset_oacc_fn_attrib (child_fn, clauses, oacc_kernels_p, &args);\n \ttagging = true;\n       }\n       /* FALLTHRU */\n@@ -20202,17 +20239,17 @@ oacc_xform_loop (gcall *call)\n }\n \n /* Validate and update the dimensions for offloaded FN.  ATTRS is the\n-   raw attribute.  DIMS is an array of dimensions, which is returned.\n-   Returns the function level dimensionality --  the level at which an\n-   offload routine wishes to partition a loop.  */\n+   raw attribute.  DIMS is an array of dimensions, which is filled in.\n+   LEVEL is the partitioning level of a routine, or -1 for an offload\n+   region itself.  */\n \n-static int\n-oacc_validate_dims (tree fn, tree attrs, int *dims)\n+static void\n+oacc_validate_dims (tree fn, tree attrs, int *dims, int level)\n {\n   tree purpose[GOMP_DIM_MAX];\n   unsigned ix;\n   tree pos = TREE_VALUE (attrs);\n-  int fn_level = -1;\n+  bool is_kernel = oacc_fn_attrib_kernels_p (attrs);\n \n   /* Make sure the attribute creator attached the dimension\n      information.  */\n@@ -20221,21 +20258,12 @@ oacc_validate_dims (tree fn, tree attrs, int *dims)\n   for (ix = 0; ix != GOMP_DIM_MAX; ix++)\n     {\n       purpose[ix] = TREE_PURPOSE (pos);\n-\n-      if (purpose[ix])\n-\t{\n-\t  if (integer_zerop (purpose[ix]))\n-\t    fn_level = ix + 1;\n-\t  else if (fn_level < 0)\n-\t    fn_level = ix;\n-\t}\n-\n       tree val = TREE_VALUE (pos);\n       dims[ix] = val ? TREE_INT_CST_LOW (val) : -1;\n       pos = TREE_CHAIN (pos);\n     }\n \n-  bool changed = targetm.goacc.validate_dims (fn, dims, fn_level);\n+  bool changed = targetm.goacc.validate_dims (fn, dims, level);\n \n   /* Default anything left to 1.  */\n   for (ix = 0; ix != GOMP_DIM_MAX; ix++)\n@@ -20250,13 +20278,15 @@ oacc_validate_dims (tree fn, tree attrs, int *dims)\n       /* Replace the attribute with new values.  */\n       pos = NULL_TREE;\n       for (ix = GOMP_DIM_MAX; ix--;)\n-\tpos = tree_cons (purpose[ix],\n-\t\t\t build_int_cst (integer_type_node, dims[ix]),\n-\t\t\t pos);\n+\t{\n+\t  pos = tree_cons (purpose[ix],\n+\t\t\t   build_int_cst (integer_type_node, dims[ix]),\n+\t\t\t   pos);\n+\t  if (is_kernel)\n+\t    TREE_PUBLIC (pos) = 1;\n+\t}\n       replace_oacc_fn_attrib (fn, pos);\n     }\n-\n-  return fn_level;\n }\n \n /* Create an empty OpenACC loop structure at LOC.  */\n@@ -20327,8 +20357,7 @@ static void\n new_oacc_loop_routine (oacc_loop *parent, gcall *call, tree decl, tree attrs)\n {\n   oacc_loop *loop = new_oacc_loop_raw (parent, gimple_location (call));\n-  int dims[GOMP_DIM_MAX];\n-  int level = oacc_validate_dims (decl, attrs, dims);\n+  int level = oacc_fn_attrib_level (attrs);\n \n   gcc_assert (level >= 0);\n \n@@ -20924,18 +20953,35 @@ static unsigned int\n execute_oacc_device_lower ()\n {\n   tree attrs = get_oacc_fn_attrib (current_function_decl);\n-  int dims[GOMP_DIM_MAX];\n   \n   if (!attrs)\n     /* Not an offloaded function.  */\n     return 0;\n \n-  int fn_level = oacc_validate_dims (current_function_decl, attrs, dims);\n-\n   /* Discover, partition and process the loops.  */\n   oacc_loop *loops = oacc_loop_discovery ();\n+  int fn_level = oacc_fn_attrib_level (attrs);\n+\n+  if (dump_file)\n+    fprintf (dump_file, oacc_fn_attrib_kernels_p (attrs)\n+\t     ? \"Function is kernels offload\\n\"\n+\t     : fn_level < 0 ? \"Function is parallel offload\\n\"\n+\t     : \"Function is routine level %d\\n\", fn_level);\n+\n   unsigned outer_mask = fn_level >= 0 ? GOMP_DIM_MASK (fn_level) - 1 : 0;\n   oacc_loop_partition (loops, outer_mask);\n+\n+  int dims[GOMP_DIM_MAX];\n+  oacc_validate_dims (current_function_decl, attrs, dims, fn_level);\n+\n+  if (dump_file)\n+    {\n+      const char *comma = \"Compute dimensions [\";\n+      for (int ix = 0; ix != GOMP_DIM_MAX; ix++, comma = \", \")\n+\tfprintf (dump_file, \"%s%d\", comma, dims[ix]);\n+      fprintf (dump_file, \"]\\n\");\n+    }\n+\n   oacc_loop_process (loops);\n   if (dump_file)\n     {"}, {"sha": "b1f7885da0e00bdbd65b5408183c3e87acc875de", "filename": "gcc/omp-low.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Fomp-low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Fomp-low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.h?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847", "patch": "@@ -33,7 +33,8 @@ extern tree omp_member_access_dummy_var (tree);\n extern void replace_oacc_fn_attrib (tree, tree);\n extern tree build_oacc_routine_dims (tree);\n extern tree get_oacc_fn_attrib (tree);\n-extern void set_oacc_fn_attrib (tree, tree, vec<tree> *);\n+extern void set_oacc_fn_attrib (tree, tree, bool, vec<tree> *);\n+extern bool oacc_fn_attrib_kernels_p (tree);\n extern int get_oacc_ifn_dim_arg (const gimple *);\n extern int get_oacc_fn_dim_size (tree, int);\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/ipa/inline-9.c", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-9.c?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847"}, {"sha": "139e38c65d952ddc04d01fb2f717e3b276b0fd32", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847", "patch": "@@ -2041,7 +2041,7 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n       tree clause = build_omp_clause (loc, OMP_CLAUSE_NUM_GANGS);\n       OMP_CLAUSE_NUM_GANGS_EXPR (clause)\n \t= build_int_cst (integer_type_node, n_threads);\n-      set_oacc_fn_attrib (cfun->decl, clause, NULL);\n+      set_oacc_fn_attrib (cfun->decl, clause, true, NULL);\n     }\n   else\n     {"}, {"sha": "bdbade5e9ab26fd94ab0dbcb1c6b7f24a07710f7", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8393eb0f07d5a4d911550beb9d052e14d6f3847/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=f8393eb0f07d5a4d911550beb9d052e14d6f3847", "patch": "@@ -154,12 +154,7 @@ gate_oacc_kernels (function *fn)\n   tree oacc_function_attr = get_oacc_fn_attrib (fn->decl);\n   if (oacc_function_attr == NULL_TREE)\n     return false;\n-\n-  tree val = TREE_VALUE (oacc_function_attr);\n-  while (val != NULL_TREE && TREE_VALUE (val) == NULL_TREE)\n-    val = TREE_CHAIN (val);\n-\n-  if (val != NULL_TREE)\n+  if (!oacc_fn_attrib_kernels_p (oacc_function_attr))\n     return false;\n \n   struct loop *loop;"}]}