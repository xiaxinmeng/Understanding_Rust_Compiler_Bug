{"sha": "e3f78d9b1161f68289db5b09304598bb0ee7d441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmNzhkOWIxMTYxZjY4Mjg5ZGI1YjA5MzA0NTk4YmIwZWU3ZDQ0MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-06T22:12:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-06T22:12:34Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_THREADS): Set enable_thread.\n\n\n2004-10-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_THREADS): Set enable_thread.\n\t(GLIBCXX_CONFIGURE_TESTSUITE): Use it.\n\t* configure: Regenerated.\n\t* testsuite/Makefile.am (CLEANFILES): Add TEST for\n\tcheck-performance executables.\n\t(stamp_thread): New.\n\t(all-local): Use it.\n\t* testsuite/Makefile.in: Regenerate.\n\t* scripts/create_testsuite_files: Filter thread tests.\n\n\t* testsuite/thread/pthread1.cc: Remove macro conditionals: this\n\tfile will only be run by thread enabled configurations.\n\t* testsuite/thread/pthread7-rope.cc: Same, add rope_type typedef.\n\t* testsuite/thread/pthread6.cc: Same.\n\t* testsuite/thread/pthread5.cc: Same.\n\t* testsuite/thread/pthread4.cc: Same.\n\t* testsuite/thread/pthread3.cc: Same.\n\t* testsuite/thread/pthread2.cc: Same.\n\n\t* testsuite/ext/mt_allocator/instantiate.cc: Add in __GTHREADS guard.\n\t* testsuite/ext/mt_allocator/deallocate_global-1.cc: Move to...\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: ...here.\n\t* testsuite/ext/mt_allocator/deallocate_global-3.cc: Move to...\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: ...here.\n\t* testsuite/ext/mt_allocator/deallocate_local-1.cc: Move to...\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: ...here.\n\t* testsuite/ext/mt_allocator/deallocate_local-3.cc: Move to...\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: ...here.\n\nFrom-SVN: r88628", "tree": {"sha": "09d00f21fa64925e280dcf8b8337f681a42ec84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09d00f21fa64925e280dcf8b8337f681a42ec84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f78d9b1161f68289db5b09304598bb0ee7d441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f78d9b1161f68289db5b09304598bb0ee7d441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f78d9b1161f68289db5b09304598bb0ee7d441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f78d9b1161f68289db5b09304598bb0ee7d441/comments", "author": null, "committer": null, "parents": [{"sha": "564060c32aba5494ae02d37a7f005798bb646011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564060c32aba5494ae02d37a7f005798bb646011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564060c32aba5494ae02d37a7f005798bb646011"}], "stats": {"total": 160, "additions": 112, "deletions": 48}, "files": [{"sha": "34fea610fba7c216df2eb6ea855b177da5429fc9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -1,3 +1,34 @@\n+2004-10-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_THREADS): Set enable_thread.\n+\t(GLIBCXX_CONFIGURE_TESTSUITE): Use it.\n+\t* configure: Regenerated.\n+\t* testsuite/Makefile.am (CLEANFILES): Add TEST for\n+\tcheck-performance executables.\n+\t(stamp_thread): New.\n+\t(all-local): Use it.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* scripts/create_testsuite_files: Filter thread tests.\n+\n+\t* testsuite/thread/pthread1.cc: Remove macro conditionals: this\n+\tfile will only be run by thread enabled configurations.\n+\t* testsuite/thread/pthread7-rope.cc: Same, add rope_type typedef.\n+\t* testsuite/thread/pthread6.cc: Same.\n+\t* testsuite/thread/pthread5.cc: Same.\n+\t* testsuite/thread/pthread4.cc: Same.\n+\t* testsuite/thread/pthread3.cc: Same.\n+\t* testsuite/thread/pthread2.cc: Same.\n+\n+\t* testsuite/ext/mt_allocator/instantiate.cc: Add in __GTHREADS guard.\n+\t* testsuite/ext/mt_allocator/deallocate_global-1.cc: Move to...\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: ...here.\n+\t* testsuite/ext/mt_allocator/deallocate_global-3.cc: Move to...\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: ...here. \n+\t* testsuite/ext/mt_allocator/deallocate_local-1.cc: Move to...\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: ...here.\n+\t* testsuite/ext/mt_allocator/deallocate_local-3.cc: Move to...\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: ...here.\n+\n 2004-10-06  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "06d8eafadd20a1d68c7293d7ba98894dc85a5e47", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -150,6 +150,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "0bd4aa645d92973a83019469aa83ce2581761166", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -620,6 +620,8 @@ dnl GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE must be done before this.\n dnl\n dnl Sets:\n dnl  enable_abi_check / GLIBCXX_TEST_ABI\n+dnl  GLIBCXX_TEST_WCHAR_T\n+dnl  GLIBCXX_TEST_THREAD\n dnl Substs:\n dnl  baseline_dir\n dnl\n@@ -652,6 +654,7 @@ AC_DEFUN([GLIBCXX_CONFIGURE_TESTSUITE], [\n   AC_SUBST(baseline_dir)\n \n   GLIBCXX_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test $enable_wchar_t = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_TEST_THREAD, test $enable_thread = yes)\n   GLIBCXX_CONDITIONAL(GLIBCXX_TEST_ABI, test $enable_abi_check = yes)\n ])\n \n@@ -1708,8 +1711,10 @@ AC_DEFUN([GLIBCXX_ENABLE_THREADS], [\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n+  enable_thread=no\n   if test $target_thread_file != single; then\n     AC_DEFINE(HAVE_GTHR_DEFAULT)\n+    enable_thread=yes\n   fi\n \n   glibcxx_thread_h=gthr-$target_thread_file.h"}, {"sha": "8fe56ec5981a1b39623fd3bef65d37689e09e629", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_THREAD_TRUE GLIBCXX_TEST_THREAD_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -7728,11 +7728,13 @@ echo $ECHO_N \"checking for thread model used by GCC... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: result: $target_thread_file\" >&5\n echo \"${ECHO_T}$target_thread_file\" >&6\n \n+  enable_thread=no\n   if test $target_thread_file != single; then\n     cat >>confdefs.h <<\\_ACEOF\n #define HAVE_GTHR_DEFAULT 1\n _ACEOF\n \n+    enable_thread=yes\n   fi\n \n   glibcxx_thread_h=gthr-$target_thread_file.h\n@@ -97355,6 +97357,7 @@ done\n \n \n \n+\n # Propagate the target-specific source directories through the build chain.\n ATOMICITY_SRCDIR=config/${atomicity_dir}\n ATOMIC_WORD_SRCDIR=config/${atomic_word_dir}\n@@ -97460,6 +97463,17 @@ fi\n \n \n \n+if test $enable_thread = yes; then\n+  GLIBCXX_TEST_THREAD_TRUE=\n+  GLIBCXX_TEST_THREAD_FALSE='#'\n+else\n+  GLIBCXX_TEST_THREAD_TRUE='#'\n+  GLIBCXX_TEST_THREAD_FALSE=\n+fi\n+\n+\n+\n+\n if test $enable_abi_check = yes; then\n   GLIBCXX_TEST_ABI_TRUE=\n   GLIBCXX_TEST_ABI_FALSE='#'\n@@ -97828,6 +97842,13 @@ echo \"$as_me: error: conditional \\\"GLIBCXX_TEST_WCHAR_T\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${GLIBCXX_TEST_THREAD_TRUE}\" && test -z \"${GLIBCXX_TEST_THREAD_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_TEST_THREAD\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"GLIBCXX_TEST_THREAD\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${GLIBCXX_TEST_ABI_TRUE}\" && test -z \"${GLIBCXX_TEST_ABI_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_TEST_ABI\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -98508,6 +98529,8 @@ s,@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@,$GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE,;t\n s,@baseline_dir@,$baseline_dir,;t t\n s,@GLIBCXX_TEST_WCHAR_T_TRUE@,$GLIBCXX_TEST_WCHAR_T_TRUE,;t t\n s,@GLIBCXX_TEST_WCHAR_T_FALSE@,$GLIBCXX_TEST_WCHAR_T_FALSE,;t t\n+s,@GLIBCXX_TEST_THREAD_TRUE@,$GLIBCXX_TEST_THREAD_TRUE,;t t\n+s,@GLIBCXX_TEST_THREAD_FALSE@,$GLIBCXX_TEST_THREAD_FALSE,;t t\n s,@GLIBCXX_TEST_ABI_TRUE@,$GLIBCXX_TEST_ABI_TRUE,;t t\n s,@GLIBCXX_TEST_ABI_FALSE@,$GLIBCXX_TEST_ABI_FALSE,;t t\n s,@ATOMICITY_SRCDIR@,$ATOMICITY_SRCDIR,;t t"}, {"sha": "bc35f0c2cae7220928a2231d61fc8e2efbc43b0d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -117,6 +117,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "03b598be4690767a0e981d60ed7579c62ac9a129", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -134,6 +134,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "9c622e04451a6bcaa7a107be48c60dba8bcf6d8d", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -173,6 +173,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "edd8f270b3b3c9cb225fa3d07acbd1aa3052b454", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -117,6 +117,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "582f8f5b0ac0d2e6af46a78fcfd026c57a8b7f64", "filename": "libstdc++-v3/scripts/create_testsuite_files", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -47,15 +47,22 @@ else\n   grep -v wchar_t $tmp.1 > $tmp.2\n fi\n \n+# If the library is not configured to support threads, don't run those tests.\n+if test -f \"$outdir/testsuite_thread\"; then\n+  mv $tmp.2 $tmp.3\n+else\n+  grep -v thread $tmp.2 > $tmp.3\n+fi\n+\n # Now filter out classes of tests.  These classes are run using special rules.\n-grep _xin $tmp.2 > $tests_file_inter\n-grep -v _xin $tmp.2 > $tmp.3\n+grep _xin $tmp.3 > $tests_file_inter\n+grep -v _xin $tmp.3 > $tmp.4\n \n-grep performance $tmp.3 > $tests_file_perf\n-grep -v performance $tmp.3 > $tmp.4\n+grep performance $tmp.4 > $tests_file_perf\n+grep -v performance $tmp.4 > $tmp.5\n \n # ...more filters go here.\n-cp $tmp.4 $tests_file_normal\n+cp $tmp.5 $tests_file_normal\n \n rm $tmp*\n exit 0"}, {"sha": "ba9df3c499971b250848c2496bccfd08efd5629d", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -152,6 +152,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@"}, {"sha": "a003497ecaf7d78f16456cbb21e72158cc4e55cf", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -57,7 +57,7 @@ endif\n abi_check_SOURCES = abi_check.cc\n abi_check_DEPENDENCIES = libv3test.a\n \n-all-local: stamp_wchar testsuite_files\n+all-local: stamp_wchar stamp_thread testsuite_files\n \n # Enable wchar_t tests if capable.\n if GLIBCXX_TEST_WCHAR_T\n@@ -67,6 +67,14 @@ else\n stamp_wchar:\n endif\n \n+# Enable thread tests if capable.\n+if GLIBCXX_TEST_THREAD\n+stamp_thread:\n+\ttouch testsuite_thread\n+else\n+stamp_thread:\n+endif\n+\n # Generated lists of files to run.  All of these names are valid make\n # targets, if you wish to generate a list manually.\n lists_of_files = \\\n@@ -183,4 +191,4 @@ check-script check-script-install check-performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols\n+\t     testsuite_* site.exp abi_check baseline_symbols *TEST*"}, {"sha": "1005b34e58d2c52ef6ef7a9d3ed9850174e4df37", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -146,6 +146,8 @@ GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_TEST_ABI_FALSE = @GLIBCXX_TEST_ABI_FALSE@\n GLIBCXX_TEST_ABI_TRUE = @GLIBCXX_TEST_ABI_TRUE@\n+GLIBCXX_TEST_THREAD_FALSE = @GLIBCXX_TEST_THREAD_FALSE@\n+GLIBCXX_TEST_THREAD_TRUE = @GLIBCXX_TEST_THREAD_TRUE@\n GLIBCXX_TEST_WCHAR_T_FALSE = @GLIBCXX_TEST_WCHAR_T_FALSE@\n GLIBCXX_TEST_WCHAR_T_TRUE = @GLIBCXX_TEST_WCHAR_T_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n@@ -311,7 +313,7 @@ performance_script = ${glibcxx_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols\n+\t     testsuite_* site.exp abi_check baseline_symbols *TEST*\n \n all: all-am\n \n@@ -575,13 +577,18 @@ uninstall-am: uninstall-info-am\n \ttags uninstall uninstall-am uninstall-info-am\n \n \n-all-local: stamp_wchar testsuite_files\n+all-local: stamp_wchar stamp_thread testsuite_files\n \n # Enable wchar_t tests if capable.\n @GLIBCXX_TEST_WCHAR_T_TRUE@stamp_wchar:\n @GLIBCXX_TEST_WCHAR_T_TRUE@\ttouch testsuite_wchar_t\n @GLIBCXX_TEST_WCHAR_T_FALSE@stamp_wchar:\n \n+# Enable thread tests if capable.\n+@GLIBCXX_TEST_THREAD_TRUE@stamp_thread:\n+@GLIBCXX_TEST_THREAD_TRUE@\ttouch testsuite_thread\n+@GLIBCXX_TEST_THREAD_FALSE@stamp_thread:\n+\n # We need more things in site.exp, but automake completely controls the\n # creation of that file; there's no way to append to it without messing up\n # the dependancy chains.  So we overrule automake.  This rule is exactly"}, {"sha": "1f0ac281af77a038511f7510a1ad0a699f10282e", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "previous_filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-1.cc"}, {"sha": "10efea66ec60a73f57490b38e7524dd5466a1c78", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "previous_filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-3.cc"}, {"sha": "5664d3caff87e068947ca46aa8af1b98f7366e72", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "previous_filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-1.cc"}, {"sha": "973f758d98df6945632f6d457049606c48eb0e52", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "previous_filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-3.cc"}, {"sha": "4fa49aa09cc9bdbefb6bbc9769db686c0144d410", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/instantiate.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -27,7 +27,9 @@\n \n using namespace __gnu_cxx;\n template class __mt_alloc<int>;\n-template class __mt_alloc<short, __common_pool_policy<true> >;\n template class __mt_alloc<short, __common_pool_policy<false> >;\n-template class __mt_alloc<short, __per_type_pool_policy<short, true> >;\n template class __mt_alloc<short, __per_type_pool_policy<short, false> >;\n+#ifdef __GTHREADS\n+template class __mt_alloc<short, __common_pool_policy<true> >;\n+template class __mt_alloc<short, __per_type_pool_policy<short, true> >;\n+#endif"}, {"sha": "26d198a755e937fb23b4430236edfc238897ddf0", "filename": "libstdc++-v3/testsuite/thread/pthread1.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -34,7 +34,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n using namespace std;\n \n const int thread_cycles = 10;\n@@ -135,6 +134,3 @@ main ()\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "7a0efd067a21ed1aaa0ffd0c9fbed6ea9d8c4a46", "filename": "libstdc++-v3/testsuite/thread/pthread2.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -28,8 +28,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n-\n const int max_thread_count = 2;\n const int max_loop_count = 1000000;\n \n@@ -62,6 +60,3 @@ main()\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "4696fb76cdc0301c475cf811351f83660c369ccd", "filename": "libstdc++-v3/testsuite/thread/pthread3.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -28,8 +28,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n-\n const int max_thread_count = 2;\n const int max_loop_count = 1000000;\n \n@@ -59,6 +57,3 @@ main()\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "a9ec9b84e3878b6a5b2524b42f61b813d691115a", "filename": "libstdc++-v3/testsuite/thread/pthread4.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -30,7 +30,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n using namespace std;\n \n static list<string> foo;\n@@ -113,6 +112,3 @@ main (void)\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "93f03a227615c717747f712cda18f7e084d84be1", "filename": "libstdc++-v3/testsuite/thread/pthread5.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -31,7 +31,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n #include <unistd.h>\t// To test for _POSIX_THREAD_PRIORITY_SCHEDULING\n #endif\n@@ -130,6 +129,3 @@ main ()\n \n   return (0);\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "ba8c341c3f8d150877e6e58bc796043a53370897", "filename": "libstdc++-v3/testsuite/thread/pthread6.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -30,8 +30,6 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n-\n const int max_thread_count = 8;\n const int loops = 100000;\n \n@@ -94,6 +92,3 @@ main (void)\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}, {"sha": "307973c202db7ed930931cdc788a8b92a08b3939", "filename": "libstdc++-v3/testsuite/thread/pthread7-rope.cc", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f78d9b1161f68289db5b09304598bb0ee7d441/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc?ref=e3f78d9b1161f68289db5b09304598bb0ee7d441", "patch": "@@ -29,13 +29,12 @@\n // Do not include <pthread.h> explicitly; if threads are properly\n // configured for the port, then it is picked up free from STL headers.\n \n-#if __GTHREADS\n-\n const int max_thread_count = 4;\n const int max_loop_count = 10000;\n \n-__gnu_cxx::crope foo2;\n-__gnu_cxx::crope foo4;\n+typedef __gnu_cxx::rope<char, std::allocator<char> > rope_type;\n+rope_type foo2;\n+rope_type foo4;\n \n void* thread_main(void *) \n {\n@@ -73,7 +72,7 @@ main()\n   pthread_setconcurrency (max_thread_count);\n #endif\n \n-  __gnu_cxx::crope foo;\n+  rope_type foo;\n   foo += \"bar\";\n   foo += \"baz\";\n   foo += \"bongle\";\n@@ -89,7 +88,7 @@ main()\n     VERIFY( !std::strcmp (data2, \"bar2baz2bongle2\") );\n   }\n \n-  __gnu_cxx::crope foo3 (\"hello\");\n+  rope_type foo3 (\"hello\");\n   const char* data3 = foo3.c_str();\n   VERIFY( !std::strcmp (data3, \"hello\") );\n \n@@ -112,6 +111,3 @@ main()\n \n   return 0;\n }\n-#else\n-int main (void) {}\n-#endif"}]}