{"sha": "1856c8dceafc5a12bf52572424eddd1390d56826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1NmM4ZGNlYWZjNWExMmJmNTI1NzI0MjRlZGRkMTM5MGQ1NjgyNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-20T09:50:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-20T09:50:30Z"}, "message": "builtins.c (expand_builtin_int_roundingfn, [...]): Do not take subtarget argument; it is not useful.\n\n\t* builtins.c (expand_builtin_int_roundingfn,\n\texpand_builtin_int_roundingfn_2): Do not take subtarget argument;\n\tit is not useful.\n\nFrom-SVN: r138006", "tree": {"sha": "10c2cd9b7db25a752eb27ed1b0fa87deb03462bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c2cd9b7db25a752eb27ed1b0fa87deb03462bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1856c8dceafc5a12bf52572424eddd1390d56826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1856c8dceafc5a12bf52572424eddd1390d56826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1856c8dceafc5a12bf52572424eddd1390d56826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1856c8dceafc5a12bf52572424eddd1390d56826/comments", "author": null, "committer": null, "parents": [{"sha": "a6c71033e3b2be70e1775457e0249201648009f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c71033e3b2be70e1775457e0249201648009f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c71033e3b2be70e1775457e0249201648009f6"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "ccdfe61a04ba18c7fbf8b6b377c2defb0de07de5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1856c8dceafc5a12bf52572424eddd1390d56826/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1856c8dceafc5a12bf52572424eddd1390d56826/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1856c8dceafc5a12bf52572424eddd1390d56826", "patch": "@@ -1,3 +1,9 @@\n+2008-07-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* builtins.c (expand_builtin_int_roundingfn,\n+\texpand_builtin_int_roundingfn_2): Do not take subtarget argument;\n+\tit is not useful.\n+\n 2008-07-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR bootstrap/36864"}, {"sha": "630d978528ec974f0dc50e83521a8764fcbe092e", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1856c8dceafc5a12bf52572424eddd1390d56826/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1856c8dceafc5a12bf52572424eddd1390d56826/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1856c8dceafc5a12bf52572424eddd1390d56826", "patch": "@@ -98,8 +98,8 @@ static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n static rtx expand_builtin_interclass_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_sincos (tree);\n static rtx expand_builtin_cexpi (tree, rtx, rtx);\n-static rtx expand_builtin_int_roundingfn (tree, rtx, rtx);\n-static rtx expand_builtin_int_roundingfn_2 (tree, rtx, rtx);\n+static rtx expand_builtin_int_roundingfn (tree, rtx);\n+static rtx expand_builtin_int_roundingfn_2 (tree, rtx);\n static rtx expand_builtin_args_info (tree);\n static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n@@ -2464,11 +2464,10 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n    do not need to worry about setting errno to EDOM.\n    If expanding via optab fails, lower expression to (int)(floor(x)).\n    EXP is the expression that is a call to the builtin function;\n-   if convenient, the result should be placed in TARGET.  SUBTARGET may\n-   be used as the target for computing one of EXP's operands.  */\n+   if convenient, the result should be placed in TARGET.  */\n \n static rtx\n-expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n+expand_builtin_int_roundingfn (tree exp, rtx target)\n {\n   convert_optab builtin_optab;\n   rtx op0, insns, tmp;\n@@ -2511,7 +2510,7 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n      side-effects more the once.  */\n   CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n-  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n+  op0 = expand_expr (arg, NULL, VOIDmode, EXPAND_NORMAL);\n \n   start_sequence ();\n \n@@ -2592,11 +2591,10 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n    conversion (lrint).\n    Return 0 if a normal call should be emitted rather than expanding the\n    function in-line.  EXP is the expression that is a call to the builtin\n-   function; if convenient, the result should be placed in TARGET.\n-   SUBTARGET may be used as the target for computing one of EXP's operands.  */\n+   function; if convenient, the result should be placed in TARGET.  */\n \n static rtx\n-expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n+expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n {\n   convert_optab builtin_optab;\n   rtx op0, insns;\n@@ -2635,7 +2633,7 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n      side-effects more the once.  */\n   CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n-  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n+  op0 = expand_expr (arg, NULL, VOIDmode, EXPAND_NORMAL);\n \n   start_sequence ();\n \n@@ -6207,7 +6205,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_LLCEIL):\n     CASE_FLT_FN (BUILT_IN_LFLOOR):\n     CASE_FLT_FN (BUILT_IN_LLFLOOR):\n-      target = expand_builtin_int_roundingfn (exp, target, subtarget);\n+      target = expand_builtin_int_roundingfn (exp, target);\n       if (target)\n \treturn target;\n       break;\n@@ -6216,7 +6214,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n     CASE_FLT_FN (BUILT_IN_LROUND):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n-      target = expand_builtin_int_roundingfn_2 (exp, target, subtarget);\n+      target = expand_builtin_int_roundingfn_2 (exp, target);\n       if (target)\n \treturn target;\n       break;"}]}