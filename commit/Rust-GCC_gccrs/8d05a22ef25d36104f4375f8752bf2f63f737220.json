{"sha": "8d05a22ef25d36104f4375f8752bf2f63f737220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwNWEyMmVmMjVkMzYxMDRmNDM3NWY4NzUyYmYyZjYzZjczNzIyMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-08T23:37:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-08T23:37:00Z"}, "message": "i860-protos.h (i860_va_arg): Remove.\n\n        * config/i860/i860-protos.h (i860_va_arg): Remove.\n        * config/i860/i860.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (i860_gimplify_va_arg_expr): Rewrite from i860_va_arg.\n        * config/i860/i860.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84327", "tree": {"sha": "de555e3b9b02213f3ee911dde5ee9af93233e5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de555e3b9b02213f3ee911dde5ee9af93233e5c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d05a22ef25d36104f4375f8752bf2f63f737220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d05a22ef25d36104f4375f8752bf2f63f737220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d05a22ef25d36104f4375f8752bf2f63f737220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d05a22ef25d36104f4375f8752bf2f63f737220/comments", "author": null, "committer": null, "parents": [{"sha": "e423d0f6c9acf9f02ac4c5e64e207c49351d4173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e423d0f6c9acf9f02ac4c5e64e207c49351d4173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e423d0f6c9acf9f02ac4c5e64e207c49351d4173"}], "stats": {"total": 155, "additions": 70, "deletions": 85}, "files": [{"sha": "c2993d28995414b909a859301fdee20851dd721c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d05a22ef25d36104f4375f8752bf2f63f737220", "patch": "@@ -1,3 +1,10 @@\n+2004-07-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i860/i860-protos.h (i860_va_arg): Remove.\n+\t* config/i860/i860.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(i860_gimplify_va_arg_expr): Rewrite from i860_va_arg.\n+\t* config/i860/i860.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n 2004-05-31  Aaron W. LaFramboise <aaronraolete36@aaronwl.com>\n \n \t* system.h: Prototype getpagesize if missing."}, {"sha": "1f61eb13ecc2466ded24d0d1a60cf904245f6bdb", "filename": "gcc/config/i860/i860-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860-protos.h?ref=8d05a22ef25d36104f4375f8752bf2f63f737220", "patch": "@@ -46,7 +46,6 @@ extern int logic_int (rtx, enum machine_mode);\n extern int call_insn_operand (rtx, enum machine_mode);\n #ifdef TREE_CODE\n extern void i860_va_start (tree, rtx);\n-extern rtx i860_va_arg (tree, tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n "}, {"sha": "1dc58a400519f770a93c52258cb637152113b47a", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 63, "deletions": 80, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=8d05a22ef25d36104f4375f8752bf2f63f737220", "patch": "@@ -49,6 +49,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n+#include \"tree-gimple.h\"\n \n static rtx find_addr_reg (rtx);\n \n@@ -1923,13 +1924,14 @@ i860_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n /* Update the VALIST structure as necessary for an\n    argument of the given TYPE, and return the argument.  */\n \n-rtx\n-i860_va_arg (tree valist, tree type)\n+static tree\n+i860_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree f_gpr, f_fpr, f_mem, f_sav;\n-  tree gpr, fpr, mem, sav, reg, t, u;\n-  int size, n_reg, sav_ofs, sav_scale, max_reg;\n-  rtx lab_false, lab_over, addr_rtx, r;\n+  tree gpr, fpr, mem, sav;\n+  tree size, t, u, addr, type_ptr;\n+  tree reg, n_reg, sav_ofs, lim_reg;\n+  HOST_WIDE_INT isize;\n \n #ifdef I860_SVR4_VA_LIST\n   f_gpr = TYPE_FIELDS (va_list_type_node);\n@@ -1948,7 +1950,8 @@ i860_va_arg (tree valist, tree type)\n   mem = build (COMPONENT_REF, TREE_TYPE (f_mem), valist, f_mem, NULL_TREE);\n   sav = build (COMPONENT_REF, TREE_TYPE (f_sav), valist, f_sav, NULL_TREE);\n \n-  size = int_size_in_bytes (type);\n+  size = size_in_bytes (type);\n+  type_ptr = build_pointer_type (type);\n \n   if (AGGREGATE_TYPE_P (type))\n     {\n@@ -1960,95 +1963,73 @@ i860_va_arg (tree valist, tree type)\n         align = BITS_PER_WORD;\n       align /= BITS_PER_UNIT;\n \n-      addr_rtx = gen_reg_rtx (Pmode);\n-      t = build (PLUS_EXPR, ptr_type_node, mem, build_int_2 (align - 1, 0));\n-      t = build (BIT_AND_EXPR, ptr_type_node, t, build_int_2 (-align, -1));\n-      r = expand_expr (t, addr_rtx, VOIDmode /* Pmode */, EXPAND_NORMAL);\n-      if (r != addr_rtx)\n-        emit_move_insn (addr_rtx, r);\n+      u = fold_convert (ptr_type_node, size_int (align - 1));\n+      t = build (PLUS_EXPR, ptr_type_node, mem, u);\n+      u = fold (build (BIT_NOT_EXPR, ptr_type_node, u));\n+      t = build (BIT_AND_EXPR, ptr_type_node, t, u);\n+      addr = get_initialized_tmp_var (t, pre_p, post_p);\n \n-      t = fold (build (PLUS_EXPR, ptr_type_node, \n-\t\tmake_tree (ptr_type_node, addr_rtx),\n-\t\tbuild_int_2 (size, 0)));\n+      u = fold_convert (ptr_type_node, size);\n+      t = build (PLUS_EXPR, ptr_type_node, addr, size);\n       t = build (MODIFY_EXPR, ptr_type_node, mem, t);\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\n-      return addr_rtx;\n-    }\n-  else if (FLOAT_TYPE_P (type) || (INTEGRAL_TYPE_P (type) && size == 8))\n-    {\n-      /* Floats and long longs are passed in the floating-point registers.  */\n-      reg = fpr;\n-      n_reg = size / UNITS_PER_WORD;\n-      sav_ofs = FREG_OFFSET;\n-      sav_scale = UNITS_PER_WORD;\n-      max_reg = NUM_PARM_FREGS;\n+      gimplify_and_add (t, pre_p);\n     }\n   else\n     {\n-      /* Everything else is passed in general registers.  */\n-      reg = gpr;\n-      n_reg = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-      sav_ofs = IREG_OFFSET;\n-      sav_scale = UNITS_PER_WORD;\n-      max_reg = NUM_PARM_IREGS;\n-      if (n_reg > 1)\n-        abort ();\n-    }\n-\n-  /* The value was passed in a register, so read it from the register\n-     save area initialized by __builtin_saveregs.  */\n-\n-  lab_false = gen_label_rtx ();\n-  lab_over = gen_label_rtx ();\n-  addr_rtx = gen_reg_rtx (Pmode);\n-\n-  emit_cmp_and_jump_insns (expand_expr (reg, NULL_RTX, Pmode, EXPAND_NORMAL),\n-\t\t\t   GEN_INT (max_reg - n_reg),\n-\t\t\t   GT, const1_rtx, Pmode, 0, lab_false);\n-\n-  if (sav_ofs)\n-    t = build (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n-  else\n-    t = sav;\n+      isize = tree_low_cst (size, 0);\n \n-  u = build (MULT_EXPR, long_integer_type_node,\n-\t     reg, build_int_2 (sav_scale, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n-\n-  t = build (PLUS_EXPR, ptr_type_node, t, u);\n-  TREE_SIDE_EFFECTS (t) = 1;\n+      if (FLOAT_TYPE_P (type) || (INTEGRAL_TYPE_P (type) && isize == 8))\n+\t{\n+\t  /* Floats and long longs are passed in the fp registers.  */\n+\t  reg = fpr;\n+\t  n_reg = size_int (isize / UNITS_PER_WORD);\n+\t  n_reg = fold_convert (unsigned_type_node, n_reg);\n+\t  lim_reg = size_int (NUM_PARM_FREGS - (isize / UNITS_PER_WORD));\n+\t  lim_reg = fold_convert (unsigned_type_node, lim_reg);\n+\t  sav_ofs = size_int (FREG_OFFSET);\n+\t}\n+      else\n+\t{\n+\t  /* Everything else is passed in general registers.  */\n+\t  reg = gpr;\n+\t  if ((isize + UNITS_PER_WORD - 1) / UNITS_PER_WORD > 1)\n+\t    abort ();\n+\t  n_reg = fold_convert (unsigned_type_node, integer_one_node);\n+\t  lim_reg = size_int (NUM_PARM_IREGS - 1);\n+\t  lim_reg = fold_convert (unsigned_type_node, lim_reg);\n+\t  sav_ofs = size_int (IREG_OFFSET);\n+\t}\n \n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n+      u = build (LE_EXPR, boolean_type_node, reg, lim_reg);\n+      addr = build (COND_EXPR, ptr_type_node, u, NULL, NULL);\n \n-  emit_jump_insn (gen_jump (lab_over));\n-  emit_barrier ();\n-  emit_label (lab_false);\n+      /* The value was passed in a register, so read it from the register\n+\t save area initialized by __builtin_saveregs.  */\n \n-  /* The value was passed in memory, so read it from the overflow area.  */\n+      sav_ofs = fold_convert (ptr_type_node, sav_ofs);\n+      sav_ofs = fold (build (PLUS_EXPR, ptr_type_node, sav, sav_ofs));\n \n-  t = save_expr (mem);\n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n+      u = fold_convert (unsigned_type_node, size_int (UNITS_PER_WORD));\n+      u = build (MULT_EXPR, unsigned_type_node, reg, u);\n+      u = fold_convert (ptr_type_node, u);\n+      u = build (PLUS_EXPR, ptr_type_node, sav_ofs, u);\n+      COND_EXPR_THEN (addr) = u;\n \n-  t = build (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (size, 0));\n-  t = build (MODIFY_EXPR, TREE_TYPE (mem), mem, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      /* The value was passed in memory, so read it from the overflow area.  */\n \n-  emit_label (lab_over);\n+      t = fold_convert (ptr_type_node, size);\n+      u = build (POSTINCREMENT_EXPR, ptr_type_node, mem, t);\n+      COND_EXPR_ELSE (addr) = u;\n \n-  /* Increment either the ireg_used or freg_used field.  */\n+      /* Increment either the ireg_used or freg_used field.  */\n \n-  u = build (PREINCREMENT_EXPR, TREE_TYPE (reg), reg, build_int_2 (n_reg, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n-  expand_expr (u, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      t = build (PLUS_EXPR, unsigned_type_node, reg, n_reg);\n+      t = build (MODIFY_EXPR, unsigned_type_node, reg, t);\n+      gimplify_and_add (t, post_p);\n+    }\n \n-  return addr_rtx;\n+  addr = fold_convert (type_ptr, addr);\n+  return build_fold_indirect_ref (addr);\n }\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete\n@@ -2126,6 +2107,8 @@ i860_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST i860_build_builtin_va_list\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR i860_gimplify_va_arg_expr\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX i860_struct_value_rtx"}, {"sha": "a4e9c8b137f55f035b00f6ac002837475e62934e", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05a22ef25d36104f4375f8752bf2f63f737220/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=8d05a22ef25d36104f4375f8752bf2f63f737220", "patch": "@@ -571,10 +571,6 @@ struct cumulative_args { int ints, floats; };\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   i860_va_start (valist, nextarg)\n \n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  i860_va_arg (valist, type)\n-\n /* Store in the variable DEPTH the initial difference between the\n    frame pointer reg contents and the stack pointer reg contents,\n    as of the start of the function body.  This depends on the layout"}]}