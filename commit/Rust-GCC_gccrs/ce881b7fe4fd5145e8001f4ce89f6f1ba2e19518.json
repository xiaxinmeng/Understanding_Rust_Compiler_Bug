{"sha": "ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4ODFiN2ZlNGZkNTE0NWU4MDAxZjRjZTg5ZjZmMWJhMmUxOTUxOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-03T02:28:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-03T02:28:07Z"}, "message": "codecvt_unicode_char.cc: Don't run it if not _GLIBCPP_USE_WCHAR_T.\n\n\t* testsuite/22_locale/codecvt_unicode_char.cc: Don't run it\n\tif not _GLIBCPP_USE_WCHAR_T.\n\t* testsuite/22_locale/codecvt_unicode_wchar_t.cc: Likewise.\n\t* testsuite/22_locale/ctor_copy_dtor.cc: Likewise.\n\t* testsuite/22_locale/ctype_wchar_t_members.cc: Likewise.\n\nFrom-SVN: r37216", "tree": {"sha": "a2323899e872c33018b673fada960d1459982f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2323899e872c33018b673fada960d1459982f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/comments", "author": null, "committer": null, "parents": [{"sha": "dbf5ba31a884fee7880faec9d2b30955afb08cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf5ba31a884fee7880faec9d2b30955afb08cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf5ba31a884fee7880faec9d2b30955afb08cb6"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "86fbc69376a3354259390e4c2f90e360d95fbf52", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_char.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc?ref=ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "patch": "@@ -25,6 +25,8 @@\n \n using namespace std;\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\n /*\n > how do I check that these conversions are correct? \n Very easy.  Since all the characters are from ASCII you simply\n@@ -224,10 +226,14 @@ void test02()\n   delete [] i_arr;\n }\n \n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+\n int main ()\n {\n+#if _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n   return 0;\n }"}, {"sha": "606c7168b576ed772b26da55113637da5c30394d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_wchar_t.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc?ref=ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "patch": "@@ -25,6 +25,8 @@\n \n using namespace std;\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\n void\n initialize_state(__enc_traits& state)\n { state._M_init(); }\n@@ -118,10 +120,13 @@ void test01()\n   delete [] e_arr;\n   delete [] i_arr;\n }\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main ()\n {\n+#if _GLIBCPP_USE_WCHAR_T\n   test01();\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n   return 0;\n }"}, {"sha": "0c723bf624ba183382a596457d113df0cc29706a", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "patch": "@@ -25,6 +25,8 @@\n #include <stdexcept>\n #include <debug_assert.h>\n \n+#if _GLIBCPP_USE_WCHAR_T\n+\n typedef std::codecvt<char, char, std::mbstate_t> \t\tc_codecvt;\n typedef std::codecvt_byname<char, char, std::mbstate_t> \tc_codecvt_byname;\n typedef std::codecvt<wchar_t, char, std::mbstate_t>\t\tw_codecvt;\n@@ -160,10 +162,13 @@ void test01()\n   \n \n }\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main ()\n {\n+#if _GLIBCPP_USE_WCHAR_T\n   test01();\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n   return 0;\n }"}, {"sha": "f4a104e25cea35003819060775c4a65d5bce3f47", "filename": "libstdc++-v3/testsuite/22_locale/ctype_wchar_t_members.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_wchar_t_members.cc?ref=ce881b7fe4fd5145e8001f4ce89f6f1ba2e19518", "patch": "@@ -33,6 +33,7 @@\n // NB: Don't include any other headers in this file.\n #include <debug_assert.h>\n \n+#if _GLIBCPP_USE_WCHAR_T\n class gnu_ctype: public std::ctype<wchar_t> {};\n \n void test01()\n@@ -96,9 +97,12 @@ void test01()\n   assert(test);\n #endif\n }\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main() {\n+#if _GLIBCPP_USE_WCHAR_T\n   test01();\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n   return 0;\n }\n "}]}