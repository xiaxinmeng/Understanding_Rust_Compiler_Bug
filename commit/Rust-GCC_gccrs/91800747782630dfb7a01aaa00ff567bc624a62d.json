{"sha": "91800747782630dfb7a01aaa00ff567bc624a62d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4MDA3NDc3ODI2MzBkZmI3YTAxYWFhMDBmZjU2N2JjNjI0YTYyZA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-08T10:17:21Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-08T10:17:21Z"}, "message": "xref.c (FILE_NAME_ABSOLUTE_P): Add parenthesis.\n\n\n        * xref.c (FILE_NAME_ABSOLUTE_P): Add parenthesis.\n        (PALLOC): Uppercase macro parameter and whitespace.\n        (SALLOC): Uppercase macro parameter.\n        (SFREE): Uppercase macros parameter, add parenthese and\n        whitespace.\n        (STREQL): Uppercase macro parameter and whitespace.\n        (STRNEQ): Likewise.\n        (STRLSS): Likewise.\n        (STRLEQ): Likewise.\n        (STRGTR): Likewise.\n        (STRGEQ): Likewise.\n\nFrom-SVN: r48633", "tree": {"sha": "5787933b6070b6938e2a97f6ed2094e7e6325d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5787933b6070b6938e2a97f6ed2094e7e6325d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91800747782630dfb7a01aaa00ff567bc624a62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91800747782630dfb7a01aaa00ff567bc624a62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91800747782630dfb7a01aaa00ff567bc624a62d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91800747782630dfb7a01aaa00ff567bc624a62d/comments", "author": null, "committer": null, "parents": [{"sha": "a8086abfa0106b810145f8a41058fa7dea4091c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8086abfa0106b810145f8a41058fa7dea4091c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8086abfa0106b810145f8a41058fa7dea4091c3"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "205b67bf4c48cf97d4b7ba2fc40fa28b6895f356", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91800747782630dfb7a01aaa00ff567bc624a62d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91800747782630dfb7a01aaa00ff567bc624a62d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=91800747782630dfb7a01aaa00ff567bc624a62d", "patch": "@@ -1,3 +1,53 @@\n+2002-01-08  Graham Stott  <grahams@redhat.com>\n+\n+\t* xref.c (FILE_NAME_ABSOLUTE_P): Add parenthesis.\n+\t(PALLOC): Uppercase macro parameter and whitespace.\n+\t(SALLOC): Uppercase macro parameter.\n+\t(SFREE): Uppercase macros parameter, add parenthese and\n+\twhitespace.\n+\t(STREQL): Uppercase macro parameter and whitespace.\n+\t(STRNEQ): Likewise.\n+\t(STRLSS): Likewise.\n+\t(STRLEQ): Likewise.\n+\t(STRGTR): Likewise.\n+\t(STRGEQ): Likewise.\n+\n+\t* call.c (convert_like): Add parenthesis and wrap.\n+\t(convert_like_with_context): Likewise.\n+\t(ICS_RANK): Whitespace.\n+\t(NEED_TEMPORARY_P): Remove parenthesis.\n+\n+\t* class.c (VTT_TOP_LEVEL_P): Uppercase macro parameter and\n+\twhitespace.\n+\t(VTT_MARKED_BINFO_P): Likewise.\n+\n+\t* decl.c (BINDING_LEVEL): Add parenthesis.\n+\t(DEF_OPERATOR): Likewise.\n+\n+\t* errors.c (print_scope_operator): Add parenthesis.\n+\t(print_left_paren): Likewise.\n+\t(print_right_paren): Likewise.\n+\t(print_left_bracket): Likewise.\n+\t(print_right_bracket): Likewise.\n+\t(print_template_argument_list_start): Likewise.\n+\t(print_template_argument_list_end): Likewise.\n+\t(print_non_consecutive_character): Likewise.\n+\t(print_tree_identifier): Likewise.\n+\t(print_identifier): Likewise.\n+\t(NEXT_CODE): Uppercase macro parameter.\n+\t(ident_fndecl): Delete unused.\n+\t(GLOBAL_THING): Likewise.\n+\n+\t* mangle.c (MANGLE_TRACE): Add parenthesis.\n+\t(MANGLE_TRACE_TREE): Likewise.\n+\t(write_signed_number): Likewise.\n+\t(write_unsigned_number): Likewise.\n+\n+\t* pt.c (ccat): Uppercase macro parameter.\n+\t(cat): Likewise\n+\n+\t* search.c (SET_BINFO_ACCESS): Add parenthesis.\n+\n 2002-01-07  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (coerce_new_type): Downgrade error for size_t mismatch"}, {"sha": "77272fb55137a44308f420f9e35ab1cb327c6d00", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91800747782630dfb7a01aaa00ff567bc624a62d/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91800747782630dfb7a01aaa00ff567bc624a62d/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=91800747782630dfb7a01aaa00ff567bc624a62d", "patch": "@@ -1,6 +1,6 @@\n /* Code for handling XREF output from GNU C++.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   2000 Free Software Foundation, Inc.\n+   2000, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Nonzero if NAME as a file name is absolute.  */\n #ifndef FILE_NAME_ABSOLUTE_P\n-#define FILE_NAME_ABSOLUTE_P(NAME) (NAME[0] == '/')\n+#define FILE_NAME_ABSOLUTE_P(NAME) ((NAME)[0] == '/')\n #endif\n \n /* For cross referencing.  */\n@@ -57,19 +57,19 @@ int flag_gnu_xref;\n #define FALSE 0\n #endif\n \n-#define PALLOC(typ) ((typ *) xcalloc(1,sizeof(typ)))\n+#define PALLOC(TYP) ((TYP *) xcalloc (1, sizeof (TYP)))\n \n \n /* Return a malloc'd copy of STR.  */\n-#define SALLOC(str) ((char *) ((str) == NULL ? NULL : xstrdup (str)))\n-#define SFREE(str) (str != NULL && (free(str),0))\n-\n-#define STREQL(s1,s2) (strcmp((s1),(s2)) == 0)\n-#define STRNEQ(s1,s2) (strcmp((s1),(s2)) != 0)\n-#define STRLSS(s1,s2) (strcmp((s1),(s2)) < 0)\n-#define STRLEQ(s1,s2) (strcmp((s1),(s2)) <= 0)\n-#define STRGTR(s1,s2) (strcmp((s1),(s2)) > 0)\n-#define STRGEQ(s1,s2) (strcmp((s1),(s2)) >= 0)\n+#define SALLOC(STR) ((char *) ((STR) == NULL ? NULL : xstrdup (STR)))\n+#define SFREE(STR) ((STR) != NULL && (free (STR), 0))\n+\n+#define STREQL(S1,S2) (strcmp ((S1), (S2)) == 0)\n+#define STRNEQ(S1,S2) (strcmp ((S1), (S2)) != 0)\n+#define STRLSS(S1,S2) (strcmp ((S1), (S2)) < 0)\n+#define STRLEQ(S1,S2) (strcmp ((S1), (S2)) <= 0)\n+#define STRGTR(S1,S2) (strcmp ((S1), (S2)) > 0)\n+#define STRGEQ(S1,S2) (strcmp ((S1), (S2)) >= 0)\n \n /************************************************************************/\n /*\t\t\t\t\t\t\t\t\t*/"}]}