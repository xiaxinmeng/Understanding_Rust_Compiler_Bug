{"sha": "9f2cb25e3f332d2f409455e818a2046fa6089b2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyY2IyNWUzZjMzMmQyZjQwOTQ1NWU4MThhMjA0NmZhNjA4OWIyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-08-01T22:15:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-08-01T22:15:32Z"}, "message": "c-ada-spec.c (has_static_fields): Look only into fields.\n\n\t* c-ada-spec.c (has_static_fields): Look only into fields.\n\t(dump_generic_ada_node): Small tweak.\n\t(dump_nested_types): Look only into fields.\n\t(print_ada_declaration): Look only into methods.  Small tweak.\n\t(print_ada_struct_decl): Look only into fields.  Use DECL_VIRTUAL_P.\n\nFrom-SVN: r250802", "tree": {"sha": "06df53ce2df3abf7303dc81fc410d61614504ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06df53ce2df3abf7303dc81fc410d61614504ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f2cb25e3f332d2f409455e818a2046fa6089b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2cb25e3f332d2f409455e818a2046fa6089b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2cb25e3f332d2f409455e818a2046fa6089b2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2cb25e3f332d2f409455e818a2046fa6089b2d/comments", "author": null, "committer": null, "parents": [{"sha": "73380438c9c7ab188f5f21ee27da0f04f89d0417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73380438c9c7ab188f5f21ee27da0f04f89d0417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73380438c9c7ab188f5f21ee27da0f04f89d0417"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "84ef2147d7b9ce748c144958376f29bbf52a0c47", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2cb25e3f332d2f409455e818a2046fa6089b2d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2cb25e3f332d2f409455e818a2046fa6089b2d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9f2cb25e3f332d2f409455e818a2046fa6089b2d", "patch": "@@ -1,3 +1,11 @@\n+2017-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (has_static_fields): Look only into fields.\n+\t(dump_generic_ada_node): Small tweak.\n+\t(dump_nested_types): Look only into fields.\n+\t(print_ada_declaration): Look only into methods.  Small tweak.\n+\t(print_ada_struct_decl): Look only into fields.  Use DECL_VIRTUAL_P.\n+\n 2017-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (print_generic_ada_decl): Pass correctly-typed constant."}, {"sha": "761e518d96571c581a44317831a005d44f64d6f1", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2cb25e3f332d2f409455e818a2046fa6089b2d/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2cb25e3f332d2f409455e818a2046fa6089b2d/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=9f2cb25e3f332d2f409455e818a2046fa6089b2d", "patch": "@@ -1052,13 +1052,11 @@ get_underlying_decl (tree type)\n static bool\n has_static_fields (const_tree type)\n {\n-  tree tmp;\n-\n   if (!type || !RECORD_OR_UNION_TYPE_P (type))\n     return false;\n \n-  for (tmp = TYPE_FIELDS (type); tmp; tmp = TREE_CHAIN (tmp))\n-    if (DECL_NAME (tmp) && TREE_STATIC (tmp))\n+  for (tree fld = TYPE_FIELDS (type); fld; fld = TREE_CHAIN (fld))\n+    if (TREE_CODE (fld) == FIELD_DECL && DECL_NAME (fld) && TREE_STATIC (fld))\n       return true;\n \n   return false;\n@@ -2384,13 +2382,14 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t{\n \t  if (is_tagged_type (TREE_TYPE (node)))\n \t    {\n-\t      tree tmp = TYPE_FIELDS (TREE_TYPE (node));\n \t      int first = 1;\n \n \t      /* Look for ancestors.  */\n-\t      for (; tmp; tmp = TREE_CHAIN (tmp))\n+\t      for (tree fld = TYPE_FIELDS (TREE_TYPE (node));\n+\t\t   fld;\n+\t\t   fld = TREE_CHAIN (fld))\n \t\t{\n-\t\t  if (!DECL_NAME (tmp) && is_tagged_type (TREE_TYPE (tmp)))\n+\t\t  if (!DECL_NAME (fld) && is_tagged_type (TREE_TYPE (fld)))\n \t\t    {\n \t\t      if (first)\n \t\t\t{\n@@ -2400,8 +2399,8 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t      else\n \t\t\tpp_string (buffer, \" and \");\n \n-\t\t      dump_ada_decl_name\n-\t\t\t(buffer, TYPE_NAME (TREE_TYPE (tmp)), false);\n+\t\t      dump_ada_decl_name (buffer, TYPE_NAME (TREE_TYPE (fld)),\n+\t\t\t\t\t  false);\n \t\t    }\n \t\t}\n \n@@ -2504,7 +2503,7 @@ dump_nested_types (pretty_printer *buffer, tree t, tree parent, bool forward,\n       dump_nested_type (buffer, field, t, parent, spc);\n \n   for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n-    if (!TYPE_NAME (TREE_TYPE (field)))\n+    if (TREE_CODE (field) == FIELD_DECL && !TYPE_NAME (TREE_TYPE (field)))\n       dump_nested_type (buffer, field, t, parent, spc);\n \n   TREE_VISITED (t) = 1;\n@@ -2955,7 +2954,8 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n       if (is_constructor && RECORD_OR_UNION_TYPE_P (type))\n \tfor (tree fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n-\t  if (cpp_check (fld, IS_ABSTRACT))\n+\t  if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE\n+\t      && cpp_check (fld, IS_ABSTRACT))\n \t    {\n \t      is_abstract_class = true;\n \t      break;\n@@ -3020,18 +3020,20 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n       if (cpp_check\n \t  && RECORD_OR_UNION_TYPE_P (TREE_TYPE (t)))\n \t{\n-\t  is_interface = -1;\n+\t  bool has_fields = false;\n \n \t  /* Check that there are no fields other than the virtual table.  */\n \t  for (tree fld = TYPE_FIELDS (TREE_TYPE (t));\n-\t       fld; fld = TREE_CHAIN (fld))\n+\t       fld;\n+\t       fld = TREE_CHAIN (fld))\n \t    {\n \t      if (TREE_CODE (fld) == FIELD_DECL)\n \t\t{\n-\t\t  if (is_interface < 0 && DECL_VIRTUAL_P (fld))\n+\t\t  if (!has_fields && DECL_VIRTUAL_P (fld))\n \t\t    is_interface = 1;\n \t\t  else\n \t\t    is_interface = 0;\n+\t\t  has_fields = true;\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE\n \t\t       && !DECL_ARTIFICIAL (fld))\n@@ -3212,10 +3214,10 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t  field_num++;\n \t\t}\n \t    }\n-\t  else if (TREE_CODE (tmp) != TYPE_DECL && !TREE_STATIC (tmp))\n+\t  else if (TREE_CODE (tmp) == FIELD_DECL && !TREE_STATIC (tmp))\n \t    {\n \t      /* Skip internal virtual table field.  */\n-\t      if (strncmp (IDENTIFIER_POINTER (DECL_NAME (tmp)), \"_vptr\", 5))\n+\t      if (!DECL_VIRTUAL_P (tmp))\n \t\t{\n \t\t  if (is_union)\n \t\t    {\n@@ -3306,7 +3308,9 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type, int spc,\n   /* Print the static fields of the structure, if any.  */\n   for (tmp = TYPE_FIELDS (node); tmp; tmp = TREE_CHAIN (tmp))\n     {\n-      if (DECL_NAME (tmp) && TREE_STATIC (tmp))\n+      if (TREE_CODE (tmp) == FIELD_DECL\n+\t  && DECL_NAME (tmp)\n+\t  && TREE_STATIC (tmp))\n \t{\n \t  if (need_semicolon)\n \t    {"}]}