{"sha": "bd022ff9752262a70f44b57808447f823392989e", "node_id": "C_kwDOANBUbNoAKGJkMDIyZmY5NzUyMjYyYTcwZjQ0YjU3ODA4NDQ3ZjgyMzM5Mjk4OWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-10T00:17:14Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-10T00:17:14Z"}, "message": "Daily bump.", "tree": {"sha": "e0c7e32b83313176eec7cf71d8d4e601c1a03076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c7e32b83313176eec7cf71d8d4e601c1a03076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd022ff9752262a70f44b57808447f823392989e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd022ff9752262a70f44b57808447f823392989e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd022ff9752262a70f44b57808447f823392989e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd022ff9752262a70f44b57808447f823392989e/comments", "author": null, "committer": null, "parents": [{"sha": "94c1e9988551d209edbde978257421e3bf356f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c1e9988551d209edbde978257421e3bf356f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c1e9988551d209edbde978257421e3bf356f51"}], "stats": {"total": 557, "additions": 556, "deletions": 1}, "files": [{"sha": "e933edd6257591a698bd025c5d601e85eea3b4d2", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,11 @@\n+2022-05-09  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* MAINTAINERS: Update my email address.\n+\n+2022-05-09  Cl\u00e9ment Chigot  <chigot@adacore.com>\n+\n+\t* MAINTAINERS: Update my email address.\n+\n 2022-05-05  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* MAINTAINERS: Add myself as PowerPC port co-maintainer and to DCO"}, {"sha": "1717079a43b6490fdda3d558429a46f39d14c0b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,92 @@\n+2022-05-09  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR target/101891\n+\t* config/i386/i386.cc (zero_call_used_regno_mode): use V2SImode\n+\tas a generic MMX mode instead of V4HImode.\n+\t(zero_all_mm_registers): Use SET to zero instead of MOV for\n+\tzeroing scratch registers.\n+\t(ix86_zero_call_used_regs): Likewise.\n+\n+2022-05-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105354\n+\t* config/i386/i386-expand.cc\n+\t(expand_vec_perm_pslldq_psrldq_por): New function.\n+\t(ix86_expand_vec_perm_const_1): Try\n+\texpand_vec_perm_pslldq_psrldq_por for both 3-instruction and\n+\t4/5-instruction sequence.\n+\n+2022-05-09  Martin Li\u0161ka  <mliska@suse.cz>\n+\n+\t* basic-block.h (STATIC_ASSERT): Use normal STATIC_ASSERT.\n+\t* system.h (STATIC_ASSERT): Define as static_assert for C++\n+\tand fallback to array index in C.\n+\n+2022-05-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105517\n+\t* tree-ssa-sccvn.cc (vn_reference_lookup): Make sure the accumulated\n+\toffset can be represented in the POINTER_PLUS_EXPR IL.\n+\t(vn_reference_insert): Likewise.\n+\t* poly-int.h (sext_hwi): Add poly version of sext_hwi.\n+\n+2022-05-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Remove #if GIMPLE guards around ! using patterns.\n+\n+2022-05-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105072\n+\t* config/i386/sse.md (*sse4_1_<code>v2qiv2di2<mask_name>_1):\n+\tNew define_insn.\n+\t(*sse4_1_zero_extendv2qiv2di2_2): New pre_reload\n+\tdefine_insn_and_split.\n+\n+2022-05-09  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* cgraph.cc (cgraph_node::get_create): Don't dump if the current\n+\tsymtab state is PARSING.\n+\n+2022-05-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* system.h (LIKELY): Define.\n+\t(UNLIKELY): Likewise.\n+\t* domwalk.cc (sort_bbs_postorder): Use {,UN}LIKELY\n+\tmacros.\n+\t* dse.cc (set_position_unneeded): Likewise.\n+\t(set_all_positions_unneeded): Likewise.\n+\t(any_positions_needed_p): Likewise.\n+\t(all_positions_needed_p): Likewise.\n+\t* expmed.cc (flip_storage_order): Likewise.\n+\t* genmatch.cc (dt_simplify::gen_1): Likewise.\n+\t* ggc-common.cc (gt_pch_save): Likewise.\n+\t* print-rtl.cc: Likewise.\n+\t* rtl-iter.h (T>::array_type::~array_type): Likewise.\n+\t(T>::next): Likewise.\n+\t* rtl-ssa/internals.inl: Likewise.\n+\t* rtl-ssa/member-fns.inl: Likewise.\n+\t* rtlanal.cc (T>::add_subrtxes_to_queue): Likewise.\n+\t(rtx_properties::try_to_add_dest): Likewise.\n+\t* rtlanal.h (growing_rtx_properties::repeat): Likewise.\n+\t(vec_rtx_properties_base::~vec_rtx_properties_base): Likewise.\n+\t* simplify-rtx.cc (simplify_replace_fn_rtx): Likewise.\n+\t* sort.cc (likely): Likewise.\n+\t(mergesort): Likewise.\n+\t* wide-int.h (wi::eq_p): Likewise.\n+\t(wi::ltu_p): Likewise.\n+\t(wi::cmpu): Likewise.\n+\t(wi::bit_and): Likewise.\n+\t(wi::bit_and_not): Likewise.\n+\t(wi::bit_or): Likewise.\n+\t(wi::bit_or_not): Likewise.\n+\t(wi::bit_xor): Likewise.\n+\t(wi::add): Likewise.\n+\t(wi::sub): Likewise.\n+\n+2022-05-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/arch-canonicalize: Handle g correctly.\n+\n 2022-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101833"}, {"sha": "faebf4dcb86c3347c17eb0b5602cb43f30a8fa1b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1 +1 @@\n-20220509\n+20220510"}, {"sha": "3a7b9eeee99cf5e619bf017e987103ff813c9148", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,285 @@\n+2022-05-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Bad_Predicated_Subtype_Use): Add continuation\n+\tmessage.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* uintp.adb (UI_To_CC): Guard against illegal inputs; reuse\n+\tUI_To_Int.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-prag.adb (Prag): Simplify conversion of character codes.\n+\t* sem_case.adb (Choice_Image): Likewise.\n+\t(Lit_Of): Likewise.\n+\n+2022-05-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Tag>:\n+\tDeal specifically wth class-wide equivalent types without a\n+\tparent.\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Extract\n+\tallocator node for calculation of alignment actual and modify\n+\talignment for allocators of class-wide types with associated\n+\texpressions.\n+\t(Make_CW_Equivalent_Type): Handle interface types differently\n+\twhen generating the equivalent record.\n+\t* sem_aux.adb (First_Tag_Component): Accept class-wide\n+\tequivalent types too.\n+\n+2022-05-09  Etienne Servais  <servais@adacore.com>\n+\n+\t* repinfo.adb (List_Name): Rework termination condition.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* bindgen.adb, errout.adb, exp_unst.adb, gnatchop.adb,\n+\tlibgnat/a-ngcefu.adb, libgnat/a-strunb.adb,\n+\tlibgnat/a-stwiun.adb, libgnat/a-stzunb.adb,\n+\tlibgnat/a-wtedit.adb, libgnat/g-debpoo.adb, osint.adb,\n+\tsigtramp-vxworks.c, uintp.adb: Remove extra whitespace around +,\n+\t-, *, / and **.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/s-expmod.adb: Remove CodePeer annotation for pragma\n+\tLoop_Variant.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (In_Statement_Condition_With_Actions): Renamed\n+\tfrom In_While_Loop_Condition; move to fit the alphabetic order.\n+\t* sem_util.adb (In_Statement_Condition_With_Actions): Detect\n+\tElsif condition; stop search on other statements; prevent search\n+\tfrom going too far; move to fit the alphabetic order.\n+\t* sem_res.adb (Resolve_Call): Adapt caller.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Remove redundant guards.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Likewise.\n+\n+2022-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Is_OK_Variable_For_Out_Formal): Remove test on\n+\tComes_From_Source in the condition dealing with the expression\n+\tof an N_Unchecked_Type_Conversion node.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch3.adb, exp_util.adb, freeze.adb,\n+\tgnatfind.adb, gnatlink.adb, gnatxref.adb, gprep.adb,\n+\tlibgnat/a-cfhama.adb, libgnat/g-alleve.adb, sem_ch12.adb,\n+\tsem_ch13.adb, xr_tabls.adb: Fix style labels.\n+\n+2022-05-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* err_vars.ads: Add new error message names and nodes.\n+\t* erroutc.adb (Set_Msg_Insertion_Name,\n+\tSet_Msg_Insertion_Name_Literal): Likewise.\n+\t* errout.adb (Set_Msg_Insertion_Node): Likewise.\n+\t* errout.ads: Likewise.\n+\t* exp_disp.adb (Check_Premature_Freezing): Modify setting of\n+\tError_Msg_Node_2 to occur directly before Error_Msg call where\n+\tapplicable.\n+\t* sem_ch8.adb (Error_Missing_With_Of_Known_Unit): Added to\n+\thandle the printing of full package names of known units.\n+\t(Undefined, Find_Expanded_Name): Replace error printing with\n+\tcall to Error_Missing_With_Of_Known_Unit.\n+\n+2022-05-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Set Error_Msg_Warn\n+\tcorrectly.\n+\n+2022-05-09  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb (Replace_Type_Ref): In the case of an identifier\n+\tthat names a component of the type, simplify the test to decide\n+\twhether to build a prefix for it (the prefix denotes the current\n+\tinstance of the enclosing type): if the identifier doesn't\n+\talready have a prefix, then give it one. This isn't quite right\n+\tin the corner case of a quantified expression or some other such\n+\texpression that declares an object with the same name as a\n+\tcomponent, but it is still an improvement.\n+\n+2022-05-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Do not install\n+\tpackage if array type and element type come from the same\n+\tpackage, and the original array type is private.\n+\n+2022-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Handle_Changed_Representation): Simplify and fix\n+\tthinko in the loop building the constraints for discriminants.\n+\t* exp_ch5.adb (Make_Component_List_Assign): Try also to extract\n+\tdiscriminant values for a derived type.\n+\n+2022-05-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Declare_Expression): Traverse the\n+\texpression to replace references to local variables that occur\n+\twithin declarations of the declare_expression; fix typos in\n+\tcomments.\n+\n+2022-05-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Operator_Check): Fix condition.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst\n+\t(Abstract_State, Async_Readers, Async_Writers,\n+\tConstant_After_Elaboration, Effective_Reads, Effective_Writes,\n+\tExtensions_Visible, Ghost, No_Caching, Volatile_Function): Only\n+\tstatic Boolean expressions are allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Loop_Variant,\n+\tExpand_Pragma_Subprogram_Variant): Adapt call via\n+\tProcess_Variant to Make_Variant_Comparison.\n+\t* exp_util.adb (Make_Variant_Comparison): Compare Big_Integer\n+\texpressions with a function call and not an operator.\n+\t* exp_util.ads (Make_Variant_Comparison): Add type parameter,\n+\twhich is needed because the Curr_Val and Old_Val expressions\n+\tmight not be yet decorated.\n+\t* rtsfind.ads: (RTU_Id): Add support for Big_Integers and\n+\tBig_Integers_Ghost.\n+\t(RE_Id): Add support for Big_Integer and its ghost variant.\n+\t(RE_Unit_Table): Add mapping from Big_Integer to Big_Integers;\n+\tsame for the ghost variants.\n+\t* rtsfind.adb (Get_Unit_Name): Add support for Big_Numbers.\n+\t* sem_prag.adb (Analyze_Pragma): Allow Big_Integer in pragma\n+\tLoop_Variant.\n+\t(Analyze_Variant): Allow Big_Integer in pragma\n+\tSubprogram_Variant.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Preanalyze_Assert_Expression): Add a\n+\tvariant that doesn't force preanalysis to yield a specific type.\n+\n+2022-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Access Kinds): Reorder and beef up.\n+\t* sem.adb (Analyze): Call Analyze_Comparison_Equality_Op for all\n+\tcomparison and equality operators.\n+\t* sem_ch4.ads (Analyze_Comparison_Op): Delete.\n+\t(Analyze_Equality_Op): Likewise.\n+\t(Analyze_Comparison_Equality_Op): Declare.\n+\t(Ambiguous_Operands): Likewise.\n+\t* sem_ch4.adb (Ambiguous_Operands): Remove declaration.\n+\t(Defined_In_Scope): Delete.\n+\t(Find_Comparison_Types): Merge into...\n+\t(Find_Equality_Types): Merge into...\n+\t(Find_Comparison_Equality_Types): ...this.  Make fully symmetrical.\n+\t(Analyze_Arithmetic_Op): Minor consistency tweaks.\n+\t(Analyze_Comparison_Op): Merge into...\n+\t(Analyze_Equality_Op): Merge into...\n+\t(Analyze_Comparison_Equality_Op): ...this.  Make fully symmetrical.\n+\t(Analyze_Logical_Op): Minor consistency tweaks.\n+\t(Analyze_Membership_Op): Make fully symmetrical.\n+\t(Analyze_One_Call): Minor comment tweak.\n+\t(Analyze_Operator_Call): Call Find_Comparison_Equality_Types.\n+\t(Analyze_User_Defined_Binary_Op): Make fully symmetrical.\n+\t(Check_Arithmetic_Pair.Specific_Type): Delete.\n+\t(Diagnose_Call): Add special handling for \"+\" operator.\n+\t(Operator_Check): Call Analyze_Comparison_Equality_Op.\n+\t* sem_ch8.adb (Has_Implicit_Operator): Add Is_Type guard for boolean\n+\toperators, use Valid_Comparison_Arg and Valid_Equality_Arg for resp.\n+\tcomparison and equality operators.\n+\t* sem_res.adb (Check_For_Visible_Operator): Call Is_Visible_Operator\n+\t(Make_Call_Into_Operator): Use Preserve_Comes_From_Source.\n+\t(Resolve_Actuals): Deal specifically with Any_Type actuals for user-\n+\tdefined comparison and equality operators.\n+\t(Resolve_Call): Minor tweaks.\n+\t(Resolve_Comparison_Op): Tidy up and give error for ambiguity.\n+\t(Resolve_Equality_Op): Likewise, as well as other errors.\n+\t(Rewrite_Renamed_Operator): Simplify.\n+\t* sem_type.ads (Is_Invisible_Operator): Delete.\n+\t(Is_Visible_Operator): Declare.\n+\t(Has_Compatible_Type): Remove For_Comparison parameter.\n+\t(Specific_Type): Declare.\n+\t(Valid_Equality_Arg): Likewise.\n+\t* sem_type.adb (Specific_Type): Remove declaration.\n+\t(Add_One_Interp): Call Is_Visible_Operator for the visibility test.\n+\t(Remove_Conversions): Rename into...\n+\t(Remove_Conversions_And_Abstract_Operations): ...this.  Do not apply\n+\tnumeric-type treatment to Any_Type.  Expand the special handling for\n+\tabstract interpretations to second operand.  Remove obsolete code.\n+\t(Disambiguate): Adjust to above renaming.  Tweak to hidden case and\n+\tcall Remove_Conversions_And_Abstract_Operations for operators too.\n+\t(Entity_Matches_Spec): Minor tweak.\n+\t(Find_Unique_Type): Simplify and deal with user-defined literals.\n+\t(Has_Compatible_Type): Remove For_Comparison parameter and adjust.\n+\tCall the Is_User_Defined_Literal predicate and remove call to\n+\tthe Is_Invisible_Operator predicate.\n+\t(Is_Invisible_Operator): Delete.\n+\t(Is_Visible_Operator): New function.\n+\t(Operator_Matches_Spec): Use Valid_Equality_Arg predicate.\n+\t(Specific_Type): Tidy up, make fully symmetrical and deal with\n+\tprivate views the same way as Covers.\n+\t(Valid_Comparison_Arg): Return true for Any_Composite/Any_String.\n+\t(Valid_Equality_Arg): New function.\n+\t* sem_util.ads (Is_User_Defined_Literal): Declare.\n+\t* sem_util.adb (Is_User_Defined_Literal): New function.\n+\n+2022-05-09  Bob Duff  <duff@adacore.com>\n+\n+\t* lib-xref.adb, sem_util.adb: Change wording of warning messages\n+\tto use \"aspect\".\n+\t* sem_prag.adb: Use Fix_Error to change wording of warnings.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Minor: fix\n+\tcut&paste error.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c [vxworks] (CLEAR_EXCEPTION_COUNT): New macro.\n+\t(__gnat_clear_exception_count): Remove.\n+\t(__gnat_map_signal): Call CLEAR_EXCEPTION_COUNT().\n+\n+2022-05-09  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove gnattest\n+\tsection.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Remove calls to Analyze for\n+\tattributes Identity, Priority, Ref, Restriction_Set, To_Address\n+\tand for tasking-related attributes Callable, Terminated and\n+\tStorage_Size.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Don't call Set_Etype for\n+\tBit_Order attribute.\n+\n+2022-05-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch5.adb (Update_Choice_Index): Simplify condition.\n+\t* sem_ch8.adb (Attribute_Renaming): Likewise.\n+\n+2022-05-09  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.c (__gnat_kill): Remove close parameter.\n+\t(__gnat_killprocesstree): Do not provide close parameter on call\n+\tto __gnat_kill.\n+\t* libgnat/g-expect.adb (Kill): Remove Close parameter.\n+\t(Close): Do not provide Close parameter on call to Kill.\n+\t(Send_Signal): Do not provide Close parameter on call to Kill.\n+\t* libgnat/s-os_lib.adb (Kill): Do not provide close parameter on\n+\tcall to __gnat_kill.\n+\n+2022-05-09  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-expect.adb (Close): Call Kill before Close_Input.\n+\n 2022-04-29  Martin Liska  <mliska@suse.cz>\n \n \t* gnatvsn.ads: Bump Library_Version to 13."}, {"sha": "c082499120e2296fd06f76f47adc936cd6f523f0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,15 @@\n+2022-05-09  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* c-common.h (get_dump_info): Delete.\n+\t* c-gimplify.cc (c_genericize): Get TDI_original dump file info\n+\tfrom the global dump_manager instead of the (now obsolete)\n+\tget_dump_info.\n+\t* c-opts.cc (original_dump_file): Delete.\n+\t(original_dump_flags): Delete.\n+\t(c_common_parse_file): Switch to using global dump_manager to\n+\tmanage the original dump file; fix leak of dump file.\n+\t(get_dump_info): Delete.\n+\n 2022-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101833"}, {"sha": "f697867383c7e1098688655cfeea1c44f7738528", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,9 @@\n+2022-05-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-parser.cc (c_parser_conditional_expression): Use {,UN}LIKELY\n+\tmacros.\n+\t(c_parser_binary_expression): Likewise.\n+\n 2022-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101833"}, {"sha": "b916096288f7bf34eb3c9228fc19b25a4d3c1edf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,73 @@\n+2022-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103539\n+\t* parser.cc (cp_parser_statement): Constify the in_compound parameter.\n+\tCreate a modifiable copy.  Allow labels at the end of compound\n+\tstatements.\n+\n+2022-05-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105491\n+\t* call.cc (field_in_pset): Adjust after next_initializable_field\n+\trenaming.\n+\t(build_aggr_conv): Likewise.\n+\t(convert_like_internal): Likewise.\n+\t(type_has_extended_temps): Likewise.\n+\t* class.cc (default_init_uninitialized_part): Likewise.\n+\t(finish_struct): Likewise.\n+\t* constexpr.cc (cx_check_missing_mem_inits): Likewise.\n+\t(reduced_constant_expression_p): Use next_subobject_field\n+\tinstead.\n+\t* cp-gimplify.cc (get_source_location_impl_type): Adjust after\n+\tnext_initializable_field renaming.\n+\t(fold_builtin_source_location): Likewise.\n+\t* cp-tree.h (next_initializable_field): Rename to ...\n+\t(next_aggregate_field): ... this.\n+\t(next_subobject_field): Declare.\n+\t* decl.cc (next_aggregate_field): Renamed from ...\n+\t(next_initializable_field): ... this.  Skip over vptr fields\n+\tagain.\n+\t(next_subobject_field): Define.\n+\t(reshape_init_class): Adjust after next_initializable_field\n+\trenaming.\n+\t* init.cc (build_value_init_noctor): Likewise.\n+\t(emit_mem_initializers): Likewise.\n+\t* lambda.cc (build_capture_proxy): Likewise.\n+\t* method.cc (build_comparison_op): Likewise.\n+\t* pt.cc (maybe_aggr_guide): Likewise.\n+\t* tree.cc (structural_type_p): Likewise.\n+\t* typeck2.cc (split_nonconstant_init_1): Likewise.\n+\t(digest_init_r): Likewise.\n+\n+2022-05-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_MODULE_KEYED_DECLS_P): Renamed from\n+\tDECL_MODULE_ATTACHMENTS_P.\n+\t(struct lane_decl_base): Rename module_attached_p to\n+\tmodule_keyed_decls_p.\n+\t(maybe_key_decl): Renamed from maybe_attach_decl.\n+\t* lambda.cc (record_lambda_scope): Adjust.\n+\t* lex.cc (cxx_dup_lang_specific_decl): Adjust.\n+\t* module.cc (keyed_map_t, keyed_table): Renamed from attached_map_t,\n+\tattached_table.\n+\t(enum merge_kind): Rename MK_attached to MK_keyed.\n+\t(trees_out::lang_decl_bools): Adjust.\n+\t(trees_in::lang_decl_bools): Adjust.\n+\t(trees_in::decl_value): Adjust.\n+\t(trees_out::get_merge_kind): Adjust.\n+\t(trees_out::key_mergeable): Adjust.\n+\t(trees_in::key_mergeable): Adjust.\n+\t(maybe_key_decl): Rename from maybe_attach_decl.\n+\t(direct_import): Adjust.\n+\t(fini_modules): Adjust.\n+\n+2022-05-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* cp-gimplify.cc (cp_genericize_r): Use {,UN}LIKELY\n+\tmacros.\n+\t* parser.cc (cp_finalize_omp_declare_simd): Likewise.\n+\t(cp_finalize_oacc_routine): Likewise.\n+\n 2022-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101833"}, {"sha": "4f63845db1c0ac3326b6fe019d1ac4f9e5c4dc68", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,10 @@\n+2022-05-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105501\n+\t* match.cc (gfc_match_if): Adjust patterns used for matching.\n+\t(gfc_match_select_rank): Likewise.\n+\t* parse.cc (decode_statement): Likewise.\n+\n 2022-05-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gfortran.h (struct gfc_omp_clauses): Add non_rectangular bit."}, {"sha": "94c1368d055b923153df48b47e884ec570fe6055", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,9 @@\n+2022-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n 2022-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "420f6918aa4179f31296d553ae389af8f8843c29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,74 @@\n+2022-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103539\n+\t* g++.dg/cpp23/label1.C: New test.\n+\t* g++.dg/cpp23/label2.C: New test.\n+\n+2022-05-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105501\n+\t* gfortran.dg/pr105501.f90: New test.\n+\n+2022-05-09  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/analyzer/torture/pr51628-30.c: Test can spill excess\n+\terrors for default_packed targets.\n+\n+2022-05-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105256\n+\t* g++.dg/cpp0x/pr105256.C: Remove superfluous semicolon.\n+\n+2022-05-09  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.target/i386/zero-scratch-regs-1.c: Add -fno-stack-protector\n+\t-fno-PIC.\n+\t* gcc.target/i386/zero-scratch-regs-10.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-13.c: Add -msse.\n+\t* gcc.target/i386/zero-scratch-regs-14.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-15.c: Add -fno-stack-protector\n+\t-fno-PIC.\n+\t* gcc.target/i386/zero-scratch-regs-16.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-17.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-18.c: Add -fno-stack-protector\n+\t-fno-PIC, adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-19.c: Add -fno-stack-protector\n+\t-fno-PIC.\n+\t* gcc.target/i386/zero-scratch-regs-2.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-20.c: Add -msse.\n+\t* gcc.target/i386/zero-scratch-regs-21.c: Add -fno-stack-protector\n+\t-fno-PIC, Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-22.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-23.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-26.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-27.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-28.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-3.c: Add -fno-stack-protector.\n+\t* gcc.target/i386/zero-scratch-regs-31.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-4.c: Add -fno-stack-protector\n+\t-fno-PIC.\n+\t* gcc.target/i386/zero-scratch-regs-5.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-6.c: Add -fno-stack-protector.\n+\t* gcc.target/i386/zero-scratch-regs-7.c: Likewise.\n+\t* gcc.target/i386/zero-scratch-regs-8.c: Adjust mov to xor.\n+\t* gcc.target/i386/zero-scratch-regs-9.c: Add -fno-stack-protector.\n+\n+2022-05-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105491\n+\t* g++.dg/cpp0x/constexpr-union7.C: New test.\n+\t* g++.dg/cpp0x/constexpr-union7a.C: New test.\n+\t* g++.dg/cpp2a/constinit17.C: New test.\n+\n+2022-05-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr105354-1.c: New test.\n+\t* gcc.target/i386/pr105354-2.c: New test.\n+\n+2022-05-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr105072.c: New test.\n+\n 2022-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101833"}, {"sha": "04070dd1bb0a196275d30f7c30b2173f505c11b4", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd022ff9752262a70f44b57808447f823392989e/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd022ff9752262a70f44b57808447f823392989e/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=bd022ff9752262a70f44b57808447f823392989e", "patch": "@@ -1,3 +1,7 @@\n+2022-05-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* ansidecl.h (PTR): Remove Not ANCI C part.\n+\n 2022-05-04  Martin Liska  <mliska@suse.cz>\n \n \t* plugin-api.h (enum ld_plugin_tag): Do not set implicit enum"}]}