{"sha": "f8159014019f2aa3b3e53970732d087dd93fc432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxNTkwMTQwMTlmMmFhM2IzZTUzOTcwNzMyZDA4N2RkOTNmYzQzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T09:27:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T09:27:45Z"}, "message": "[multiple changes]\n\n2017-09-06  Raphael Amiard  <amiard@adacore.com>\n\n\t* a-chtgop.ads, a-chtgop.adb: Add versions of First and Next with\n\tPosition parameter. If supplied, use it to provide efficient iteration.\n\t* a-cohase.ads, a-cohase.adb, a-cihama.ads, a-cihama.adb,\n\ta-cohama.ads, a-cohama.adb: Add/Use Position to provide efficient\n\titeration.\n\n2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Build_Allocate_Deallocate_Proc): If the\n\tdesignated type is class-wide and the expression is an unchecked\n\tconversion, preserve the conversion when checking the tag of the\n\tdesignated object, to prevent spurious semantic errors when the\n\texpression in the conversion has an untagged type (for example\n\tan address attribute).\n\nFrom-SVN: r251757", "tree": {"sha": "99c1c017e364b579d6423cc5328b7652bcd5a5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c1c017e364b579d6423cc5328b7652bcd5a5fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8159014019f2aa3b3e53970732d087dd93fc432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8159014019f2aa3b3e53970732d087dd93fc432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8159014019f2aa3b3e53970732d087dd93fc432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8159014019f2aa3b3e53970732d087dd93fc432/comments", "author": null, "committer": null, "parents": [{"sha": "e9982c6ae9c3525d0815963281a825996e392d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9982c6ae9c3525d0815963281a825996e392d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9982c6ae9c3525d0815963281a825996e392d42"}], "stats": {"total": 231, "additions": 162, "deletions": 69}, "files": [{"sha": "268eb13cf8cb9f07d47365ece26f673fca526b8f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -1,3 +1,20 @@\n+2017-09-06  Raphael Amiard  <amiard@adacore.com>\n+\n+\t* a-chtgop.ads, a-chtgop.adb: Add versions of First and Next with\n+\tPosition parameter. If supplied, use it to provide efficient iteration.\n+\t* a-cohase.ads, a-cohase.adb, a-cihama.ads, a-cihama.adb,\n+\ta-cohama.ads, a-cohama.adb: Add/Use Position to provide efficient\n+\titeration.\n+\n+2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): If the\n+\tdesignated type is class-wide and the expression is an unchecked\n+\tconversion, preserve the conversion when checking the tag of the\n+\tdesignated object, to prevent spurious semantic errors when the\n+\texpression in the conversion has an untagged type (for example\n+\tan address attribute).\n+\n 2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_Entry_Call): Check whether a protected"}, {"sha": "2b85b29e9d5ff22f746aa2b5308ea98e78e7a76c", "filename": "gcc/ada/a-chtgop.adb", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-chtgop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-chtgop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.adb?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -300,21 +300,30 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n    -- First --\n    -----------\n \n-   function First (HT : Hash_Table_Type) return Node_Access is\n-      Indx : Hash_Type;\n+   function First\n+     (HT       : Hash_Table_Type) return Node_Access\n+   is\n+      Dummy : Hash_Type;\n+   begin\n+      return First (HT, Dummy);\n+   end First;\n \n+   function First\n+     (HT       : Hash_Table_Type;\n+      Position : out Hash_Type) return Node_Access is\n    begin\n       if HT.Length = 0 then\n+         Position := Hash_Type'Last;\n          return null;\n       end if;\n \n-      Indx := HT.Buckets'First;\n+      Position := HT.Buckets'First;\n       loop\n-         if HT.Buckets (Indx) /= null then\n-            return HT.Buckets (Indx);\n+         if HT.Buckets (Position) /= null then\n+            return HT.Buckets (Position);\n          end if;\n \n-         Indx := Indx + 1;\n+         Position := Position + 1;\n       end loop;\n    end First;\n \n@@ -589,31 +598,51 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n    ----------\n \n    function Next\n-     (HT   : aliased in out Hash_Table_Type;\n-      Node : Node_Access) return Node_Access\n+     (HT            : aliased in out Hash_Table_Type;\n+      Node          : Node_Access;\n+      Position : in out Hash_Type) return Node_Access\n    is\n       Result : Node_Access;\n       First  : Hash_Type;\n \n    begin\n+      --  First, check if the node has other nodes chained to it\n       Result := Next (Node);\n \n       if Result /= null then\n          return Result;\n       end if;\n \n-      First := Checked_Index (HT, Node) + 1;\n+      --  Check if we were supplied a position for Node, from which we\n+      --  can start iteration on the buckets.\n+\n+      if Position /= Hash_Type'Last then\n+         First := Position + 1;\n+      else\n+         First := Checked_Index (HT, Node) + 1;\n+      end if;\n+\n       for Indx in First .. HT.Buckets'Last loop\n          Result := HT.Buckets (Indx);\n \n          if Result /= null then\n+            Position := Indx;\n             return Result;\n          end if;\n       end loop;\n \n       return null;\n    end Next;\n \n+   function Next\n+     (HT            : aliased in out Hash_Table_Type;\n+      Node          : Node_Access) return Node_Access\n+   is\n+      Pos : Hash_Type := Hash_Type'Last;\n+   begin\n+      return Next (HT, Node, Pos);\n+   end Next;\n+\n    ----------------------\n    -- Reserve_Capacity --\n    ----------------------"}, {"sha": "ba68b2dd7720fe60256bee98634e663a6e9602fc", "filename": "gcc/ada/a-chtgop.ads", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-chtgop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-chtgop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.ads?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -142,17 +142,31 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n       X  : Node_Access);\n    --  Removes node X from the hash table without deallocating the node\n \n-   function First (HT : Hash_Table_Type) return Node_Access;\n+   function First\n+     (HT       : Hash_Table_Type) return Node_Access;\n+   function First\n+     (HT       : Hash_Table_Type;\n+      Position : out Hash_Type) return Node_Access;\n    --  Returns the head of the list in the first (lowest-index) non-empty\n-   --  bucket.\n+   --  bucket. Position will be the index of the bucket of the first node.\n+   --  It is provided so that clients can implement efficient iterators.\n \n    function Next\n      (HT   : aliased in out Hash_Table_Type;\n       Node : Node_Access) return Node_Access;\n+   function Next\n+     (HT       : aliased in out Hash_Table_Type;\n+      Node     : Node_Access;\n+      Position : in out Hash_Type) return Node_Access;\n    --  Returns the node that immediately follows Node. This corresponds to\n    --  either the next node in the same bucket, or (if Node is the last node in\n    --  its bucket) the head of the list in the first non-empty bucket that\n    --  follows.\n+   --\n+   --  If Node_Position is supplied, then it will be used as a starting point\n+   --  for iteration (Node_Position must be the index of Node's buckets). If it\n+   --  is not supplied, it will be recomputed. It is provided so that clients\n+   --  can implement efficient iterators.\n \n    generic\n       with procedure Process (Node : Node_Access);"}, {"sha": "0d843795ab856eebab7cc8a3b3b5aae4e7b57b89", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -506,7 +506,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n    end Find;\n \n    --------------------\n@@ -537,12 +537,13 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    -----------\n \n    function First (Container : Map) return Cursor is\n-      Node : constant Node_Access := HT_Ops.First (Container.HT);\n+      Pos  : Hash_Type;\n+      Node : constant Node_Access := HT_Ops.First (Container.HT, Pos);\n    begin\n       if Node = null then\n          return No_Element;\n       else\n-         return Cursor'(Container'Unrestricted_Access, Node);\n+         return Cursor'(Container'Unrestricted_Access, Node, Pos);\n       end if;\n    end First;\n \n@@ -781,7 +782,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n       procedure Process_Node (Node : Node_Access) is\n       begin\n-         Process (Cursor'(Container'Unrestricted_Access, Node));\n+         Process\n+           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);\n@@ -860,6 +862,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    end Next;\n \n    function Next (Position : Cursor) return Cursor is\n+      Node : Node_Access;\n+      Pos  : Hash_Type;\n    begin\n       if Position.Node = null then\n          return No_Element;\n@@ -873,16 +877,14 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n       pragma Assert (Vet (Position), \"Position cursor of Next is bad\");\n \n-      declare\n-         HT   : Hash_Table_Type renames Position.Container.HT;\n-         Node : constant Node_Access := HT_Ops.Next (HT, Position.Node);\n-      begin\n-         if Node = null then\n-            return No_Element;\n-         else\n-            return Cursor'(Position.Container, Node);\n-         end if;\n-      end;\n+      Pos := Position.Position;\n+      Node := HT_Ops.Next (Position.Container.HT, Position.Node, Pos);\n+\n+      if Node = null then\n+         return No_Element;\n+      else\n+         return Cursor'(Position.Container, Node, Pos);\n+      end if;\n    end Next;\n \n    function Next (Object : Iterator; Position : Cursor) return Cursor is"}, {"sha": "dad34756cac374f7f9589e4c4eaf72683a584593", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -354,6 +354,7 @@ private\n    type Cursor is record\n       Container : Map_Access;\n       Node      : Node_Access;\n+      Position  : Hash_Type := Hash_Type'Last;\n    end record;\n \n    procedure Write\n@@ -433,7 +434,8 @@ private\n \n    Empty_Map : constant Map := (Controlled with others => <>);\n \n-   No_Element : constant Cursor := (Container => null, Node => null);\n+   No_Element : constant Cursor :=\n+     (Container => null, Node => null, Position  => Hash_Type'Last);\n \n    type Iterator is new Limited_Controlled and\n      Map_Iterator_Interfaces.Forward_Iterator with"}, {"sha": "d4a0d591ce938a34924e5e07a7f0e1371641018c", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -462,7 +462,7 @@ package body Ada.Containers.Hashed_Maps is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n    end Find;\n \n    --------------------\n@@ -493,14 +493,14 @@ package body Ada.Containers.Hashed_Maps is\n    -----------\n \n    function First (Container : Map) return Cursor is\n-      Node : constant Node_Access := HT_Ops.First (Container.HT);\n-\n+      Pos  : Hash_Type;\n+      Node : constant Node_Access := HT_Ops.First (Container.HT, Pos);\n    begin\n       if Node = null then\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node, Pos);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -710,7 +710,8 @@ package body Ada.Containers.Hashed_Maps is\n \n       procedure Process_Node (Node : Node_Access) is\n       begin\n-         Process (Cursor'(Container'Unrestricted_Access, Node));\n+         Process\n+           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);\n@@ -779,24 +780,27 @@ package body Ada.Containers.Hashed_Maps is\n    end Next;\n \n    function Next (Position : Cursor) return Cursor is\n+      Node    : Node_Access := null;\n+\n+      Pos : Hash_Type;\n+      --  Position of cursor's element in the map buckets.\n    begin\n       if Position.Node = null then\n          return No_Element;\n       end if;\n \n       pragma Assert (Vet (Position), \"bad cursor in function Next\");\n \n-      declare\n-         HT   : Hash_Table_Type renames Position.Container.HT;\n-         Node : constant Node_Access := HT_Ops.Next (HT, Position.Node);\n+      --  Initialize to current position, so that HT_Ops.Next can use it\n+      Pos := Position.Position;\n \n-      begin\n-         if Node = null then\n-            return No_Element;\n-         end if;\n+      Node := HT_Ops.Next (Position.Container.HT, Position.Node, Pos);\n \n-         return Cursor'(Position.Container, Node);\n-      end;\n+      if Node = null then\n+         return No_Element;\n+      else\n+         return Cursor'(Position.Container, Node, Pos);\n+      end if;\n    end Next;\n \n    procedure Next (Position : in out Cursor) is"}, {"sha": "8a6f8c2ca8c51e143fb87eacac4eafe028fc1e29", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -359,7 +359,14 @@ private\n \n    type Cursor is record\n       Container : Map_Access;\n+      --  Access to this cursor's container\n+\n       Node      : Node_Access;\n+      --  Access to the node pointed to by this cursor\n+\n+      Position  : Hash_Type := Hash_Type'Last;\n+      --  Position of the node in the buckets of the container. If this is\n+      --  equal to Hash_Type'Last, then it will not be used.\n    end record;\n \n    procedure Read\n@@ -442,7 +449,8 @@ private\n \n    Empty_Map : constant Map := (Controlled with others => <>);\n \n-   No_Element : constant Cursor := (Container => null, Node => null);\n+   No_Element : constant Cursor := (Container => null, Node => null,\n+                                    Position  => Hash_Type'Last);\n \n    type Iterator is new Limited_Controlled and\n      Map_Iterator_Interfaces.Forward_Iterator with"}, {"sha": "eab8a4056fefc45c42cafe414446cbf7fae55f22", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -595,7 +595,7 @@ package body Ada.Containers.Hashed_Sets is\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last);\n    end Find;\n \n    --------------------\n@@ -657,14 +657,14 @@ package body Ada.Containers.Hashed_Sets is\n    -----------\n \n    function First (Container : Set) return Cursor is\n-      Node : constant Node_Access := HT_Ops.First (Container.HT);\n-\n+      Pos  : Hash_Type;\n+      Node : constant Node_Access := HT_Ops.First (Container.HT, Pos);\n    begin\n       if Node = null then\n          return No_Element;\n       end if;\n \n-      return Cursor'(Container'Unrestricted_Access, Node);\n+      return Cursor'(Container'Unrestricted_Access, Node, Pos);\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n@@ -989,7 +989,8 @@ package body Ada.Containers.Hashed_Sets is\n \n       procedure Process_Node (Node : Node_Access) is\n       begin\n-         Process (Cursor'(Container'Unrestricted_Access, Node));\n+         Process\n+           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);\n@@ -1038,24 +1039,23 @@ package body Ada.Containers.Hashed_Sets is\n    end Next;\n \n    function Next (Position : Cursor) return Cursor is\n+      Node : Node_Access;\n+      Pos  : Hash_Type;\n    begin\n       if Position.Node = null then\n          return No_Element;\n       end if;\n \n       pragma Assert (Vet (Position), \"bad cursor in Next\");\n \n-      declare\n-         HT   : Hash_Table_Type renames Position.Container.HT;\n-         Node : constant Node_Access := HT_Ops.Next (HT, Position.Node);\n+      Pos := Position.Position;\n+      Node := HT_Ops.Next (Position.Container.HT, Position.Node, Pos);\n \n-      begin\n-         if Node = null then\n-            return No_Element;\n-         end if;\n+      if Node = null then\n+         return No_Element;\n+      end if;\n \n-         return Cursor'(Position.Container, Node);\n-      end;\n+      return Cursor'(Position.Container, Node, Pos);\n    end Next;\n \n    procedure Next (Position : in out Cursor) is\n@@ -1957,7 +1957,8 @@ package body Ada.Containers.Hashed_Sets is\n          if Node = null then\n             return No_Element;\n          else\n-            return Cursor'(Container'Unrestricted_Access, Node);\n+            return Cursor'\n+              (Container'Unrestricted_Access, Node, Hash_Type'Last);\n          end if;\n       end Find;\n "}, {"sha": "79e34007428e723b2acc28c31dc4a51c16e540a1", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -528,6 +528,7 @@ private\n    type Cursor is record\n       Container : Set_Access;\n       Node      : Node_Access;\n+      Position  : Hash_Type := Hash_Type'Last;\n    end record;\n \n    procedure Write\n@@ -588,7 +589,8 @@ private\n \n    Empty_Set : constant Set := (Controlled with others => <>);\n \n-   No_Element : constant Cursor := (Container => null, Node => null);\n+   No_Element : constant Cursor :=\n+     (Container => null, Node => null, Position => Hash_Type'Last);\n \n    type Iterator is new Limited_Controlled and\n      Set_Iterator_Interfaces.Forward_Iterator with"}, {"sha": "8098a93af6b41a2c73e7cd15d5241830fc0328bd", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8159014019f2aa3b3e53970732d087dd93fc432/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f8159014019f2aa3b3e53970732d087dd93fc432", "patch": "@@ -871,11 +871,25 @@ package body Exp_Util is\n \n                   --    Temp'Tag\n \n+                  --  If the object is an unchecked conversion (typically to\n+                  --  an access to class-wide type), we must preserve the\n+                  --  conversion to ensure that the object is seen as tagged\n+                  --  in the code that follows.\n+\n                   else\n-                     Param :=\n-                       Make_Attribute_Reference (Loc,\n-                         Prefix         => Relocate_Node (Temp),\n-                         Attribute_Name => Name_Tag);\n+                     if\n+                       Nkind (Parent (Temp)) = N_Unchecked_Type_Conversion\n+                     then\n+                        Param :=\n+                          Make_Attribute_Reference (Loc,\n+                            Prefix         => Relocate_Node (Parent (Temp)),\n+                            Attribute_Name => Name_Tag);\n+                     else\n+                        Param :=\n+                          Make_Attribute_Reference (Loc,\n+                            Prefix         => Relocate_Node (Temp),\n+                            Attribute_Name => Name_Tag);\n+                     end if;\n                   end if;\n \n                   --  Generate:"}]}