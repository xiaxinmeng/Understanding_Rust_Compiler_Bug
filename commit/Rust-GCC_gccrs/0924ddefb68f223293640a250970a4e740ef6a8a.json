{"sha": "0924ddefb68f223293640a250970a4e740ef6a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyNGRkZWZiNjhmMjIzMjkzNjQwYTI1MDk3MGE0ZTc0MGVmNmE4YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T03:06:32Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T03:06:32Z"}, "message": "Renamed TREE_INLINE, TREE_NONLOCAL, TREE_REGDECL, TREE_EXTERNAL.\n\nto DECL_INLINE, DECL_NONLOCAL, DECL_REGISTER, DECL_EXTERNAL.\n\nFrom-SVN: r1570", "tree": {"sha": "1f3fe2da663f6466d9f951ab711fb840657906ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f3fe2da663f6466d9f951ab711fb840657906ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0924ddefb68f223293640a250970a4e740ef6a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0924ddefb68f223293640a250970a4e740ef6a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0924ddefb68f223293640a250970a4e740ef6a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0924ddefb68f223293640a250970a4e740ef6a8a/comments", "author": null, "committer": null, "parents": [{"sha": "1394aabdaac22e52aec22bc95c2202cb71749b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1394aabdaac22e52aec22bc95c2202cb71749b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1394aabdaac22e52aec22bc95c2202cb71749b4e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "f7a7de345ed60e4d52e24aee863d2fa15f499298", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -118,7 +118,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    us to do this.  */\n \n #define ENCODE_SECTION_INFO(decl)  \t\t\t\t\\\n-  if (TREE_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\\\n+  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1; \n \n /* Under VMS we write the actual size of the storage to be allocated even"}, {"sha": "a00258a6ff9ec29ba5ceb4a0c21a32e0825f397e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -1322,7 +1322,7 @@ dbxout_symbol (decl, local)\n     case FUNCTION_DECL:\n       if (DECL_RTL (decl) == 0)\n \treturn;\n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n \tbreak;\n       /* Don't mention a nested function under its parent.  */\n       context = decl_function_context (decl);\n@@ -1478,7 +1478,7 @@ dbxout_symbol (decl, local)\n \treturn;\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n \tbreak;\n \n       /* If the variable is really a constant"}, {"sha": "e25fff489be6a56d9516a6b24eeca81be29f2415", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -2551,7 +2551,7 @@ inline void\n inline_attribute (decl)\n      register tree decl;\n {\n-  if (TREE_INLINE (decl))\n+  if (DECL_INLINE (decl))\n     {\n       ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_inline);\n       ASM_OUTPUT_DWARF_STRING (asm_out_file, \"\");\n@@ -3001,7 +3001,7 @@ output_global_subroutine_die (arg)\n     equate_decl_number_to_die_number (decl);\n   else\n     {\n-      if (! TREE_EXTERNAL (decl))\n+      if (! DECL_EXTERNAL (decl))\n \t{\n \t  char func_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n@@ -3037,7 +3037,7 @@ output_global_variable_die (arg)\n     equate_decl_number_to_die_number (decl);\n   else\n     {\n-      if (!TREE_EXTERNAL (decl))\n+      if (!DECL_EXTERNAL (decl))\n \tlocation_or_const_value_attribute (decl);\n     }\n }\n@@ -4106,7 +4106,7 @@ output_decl (decl, containing_scope)\n \t to the DWARF version 1 specification, don't output DIEs for\n \t mere external function declarations.  */\n \n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n #if (DWARF_VERSION > 1)\n \tif (debug_info_level <= DINFO_LEVEL_TERSE)\n #endif\n@@ -4133,7 +4133,7 @@ output_decl (decl, containing_scope)\n \n       /* Now output a DIE to represent the function itself.  */\n \n-      output_die (TREE_PUBLIC (decl) || TREE_EXTERNAL (decl)\n+      output_die (TREE_PUBLIC (decl) || DECL_EXTERNAL (decl)\n \t\t\t\t? output_global_subroutine_die\n \t\t\t\t: output_local_subroutine_die,\n \t\t  decl);\n@@ -4153,7 +4153,7 @@ output_decl (decl, containing_scope)\n \t we need to do here (and all we *can* do here) is to describe\n \t the *types* of its formal parameters.  */\n \n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n \toutput_formal_types (TREE_TYPE (decl));\n       else\n \t{\n@@ -4385,7 +4385,7 @@ output_decl (decl, containing_scope)\n \t generated any DIEs to represent mere external object declarations.  */\n \n #if (DWARF_VERSION <= 1)\n-      if (TREE_EXTERNAL (decl) && ! TREE_PUBLIC (decl))\n+      if (DECL_EXTERNAL (decl) && ! TREE_PUBLIC (decl))\n \tbreak;\n #endif\n \n@@ -4427,7 +4427,7 @@ output_decl (decl, containing_scope)\n \t  func = output_formal_parameter_die;\n \telse\n \t  {\n-\t    if (TREE_PUBLIC (decl) || TREE_EXTERNAL (decl))\n+\t    if (TREE_PUBLIC (decl) || DECL_EXTERNAL (decl))\n \t      func = output_global_variable_die;\n \t    else\n \t      func = output_local_variable_die;\n@@ -4491,7 +4491,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n \t a builtin function.  Explicit programmer-supplied declarations of\n \t these same functions should NOT be ignored however.  */\n \n-      if (TREE_EXTERNAL (decl) && DECL_FUNCTION_CODE (decl))\n+      if (DECL_EXTERNAL (decl) && DECL_FUNCTION_CODE (decl))\n         return;\n \n       /* Ignore this FUNCTION_DECL if it refers to a file-scope extern\n@@ -4504,11 +4504,11 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n \t lookup mechanism and cause it to miss things which really ought\n \t to be in scope at a given point.  */\n \n-      if (TREE_EXTERNAL (decl) && !TREE_USED (decl))\n+      if (DECL_EXTERNAL (decl) && !TREE_USED (decl))\n \treturn;\n \n       if (TREE_PUBLIC (decl)\n-\t  && ! TREE_EXTERNAL (decl)\n+\t  && ! DECL_EXTERNAL (decl)\n \t  && ! DECL_ABSTRACT (decl))\n \t{\n \t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -4539,11 +4539,11 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n \t lookup mechanism and cause it to miss things which really ought\n \t to be in scope at a given point.  */\n \n-      if (TREE_EXTERNAL (decl) && !TREE_USED (decl))\n+      if (DECL_EXTERNAL (decl) && !TREE_USED (decl))\n \treturn;\n \n       if (TREE_PUBLIC (decl)\n-\t  && ! TREE_EXTERNAL (decl)\n+\t  && ! DECL_EXTERNAL (decl)\n \t  && GET_CODE (DECL_RTL (decl)) == MEM\n \t  && ! DECL_ABSTRACT (decl))\n \t{"}, {"sha": "ed3f7ddba38899940376218d2fcc886f77ce0027", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -2357,7 +2357,7 @@ simple_operand_p (exp)\n \t  || (TREE_CODE_CLASS (TREE_CODE (exp)) == 'd'\n \t      && ! TREE_ADDRESSABLE (exp)\n \t      && ! TREE_THIS_VOLATILE (exp)\n-\t      && ! TREE_NONLOCAL (exp)));\n+\t      && ! DECL_NONLOCAL (exp)));\n }\n \f\n /* Subroutine for fold_truthop: try to optimize a range test."}, {"sha": "e5d271ce10ae2530283c255e8736d245e984938d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -496,7 +496,7 @@ create_builtin_decl (code, type, name)\n   tree decl = build_decl (code, get_identifier (name), type);\n   if (code == VAR_DECL)\n     {\n-      TREE_EXTERNAL (decl) = 1;\n+      DECL_EXTERNAL (decl) = 1;\n       TREE_PUBLIC (decl) = 1;\n       make_decl_rtl (decl, 0, 1);\n       pushdecl (decl);\n@@ -903,7 +903,7 @@ build_module_descriptor ()\n \n     /* Find the name of some global object defined in this file.  */\n     for (t = getdecls (); t; t = TREE_CHAIN (t))\n-      if (TREE_PUBLIC (t) && !TREE_EXTERNAL (t) && DECL_INITIAL (t) != 0)\n+      if (TREE_PUBLIC (t) && !DECL_EXTERNAL (t) && DECL_INITIAL (t) != 0)\n \t{\n \t  global_object_name = IDENTIFIER_POINTER (DECL_NAME (t));\n \t  break;\n@@ -945,7 +945,7 @@ build_module_descriptor ()\n     function_decl = build_decl (FUNCTION_DECL,  \n \t\t\t\tget_identifier (\"__objc_execClass\"),  \n \t\t\t\tfunction_type);\n-    TREE_EXTERNAL (function_decl) = 1;\n+    DECL_EXTERNAL (function_decl) = 1;\n     TREE_PUBLIC (function_decl) = 1;\n     pushdecl (function_decl);\n     rest_of_decl_compilation (function_decl, 0, 0, 0);\n@@ -1083,7 +1083,7 @@ build_selector_reference (idx)\n   else \n     {\n       decl = build_decl (VAR_DECL, ident, selector_type);\n-      TREE_EXTERNAL (decl) = 1;\n+      DECL_EXTERNAL (decl) = 1;\n       TREE_PUBLIC (decl) = 1;\n       TREE_USED (decl) = 1;\n   \n@@ -5052,7 +5052,7 @@ handle_class_ref (chain)\n \n   /* Make a decl for this name, so we can use its address in a tree.  */\n   decl = build_decl (VAR_DECL, get_identifier (string), char_type_node);\n-  TREE_EXTERNAL (decl) = 1;\n+  DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n \n   pushdecl (decl);"}, {"sha": "e3897706b9e3e7c291dba03ac97b9a543ca23f9c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0924ddefb68f223293640a250970a4e740ef6a8a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0924ddefb68f223293640a250970a4e740ef6a8a", "patch": "@@ -1697,7 +1697,7 @@ staticp (arg)\n     case VAR_DECL:\n     case FUNCTION_DECL:\n     case CONSTRUCTOR:\n-      return TREE_STATIC (arg) || TREE_EXTERNAL (arg);\n+      return TREE_STATIC (arg) || DECL_EXTERNAL (arg);\n \n     case STRING_CST:\n       return 1;"}]}