{"sha": "d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3NTUxYzcxYmZhYTEzNTFmYzFkOTJhMmVhNWFiYjRkY2JlMTE4Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-16T18:47:59Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-16T18:47:59Z"}, "message": "calls.c (emit_library_call_value_1): Don't refer to hard_libcall_value.\n\n\t* calls.c (emit_library_call_value_1): Don't refer to\n\thard_libcall_value.\n\t* optabs.c (prepare_float_lib_cmp): Likewise.\n\nFrom-SVN: r57207", "tree": {"sha": "f8a810c6a8fb928f7fbac3705943727a3ac1da16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a810c6a8fb928f7fbac3705943727a3ac1da16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/comments", "author": null, "committer": null, "parents": [{"sha": "36a5eadd1a18a55b7b2b585bb5eb3736ab68ba48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a5eadd1a18a55b7b2b585bb5eb3736ab68ba48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a5eadd1a18a55b7b2b585bb5eb3736ab68ba48"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "23ba6cf8cdd059374e7a3e78a51d99e307c74912", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "patch": "@@ -1,3 +1,9 @@\n+2002-09-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* calls.c (emit_library_call_value_1): Don't refer to\n+\thard_libcall_value.\n+\t* optabs.c (prepare_float_lib_cmp): Likewise.\n+\n 2002-09-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* ggc-common.c (ggc_mark_rtx_children_1): Update for changed name"}, {"sha": "665868f8e03a0b4f0280263ba9992b0a843ac160", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "patch": "@@ -4148,9 +4148,9 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t    emit_move_insn (value, mem_value);\n \t}\n       else if (value != 0)\n-\temit_move_insn (value, hard_libcall_value (outmode));\n+\temit_move_insn (value, valreg);\n       else\n-\tvalue = hard_libcall_value (outmode);\n+\tvalue = valreg;\n     }\n \n   if (ACCUMULATE_OUTGOING_ARGS)"}, {"sha": "7ceec122ff1e18bea9b2ea74a0a6e261be659505", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d57551c71bfaa1351fc1d92a2ea5abb4dcbe118c", "patch": "@@ -4006,14 +4006,9 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n   if (libfunc == 0)\n     abort ();\n \n-  emit_library_call (libfunc, LCT_CONST_MAKE_BLOCK, word_mode, 2, x, mode, y,\n-\t\t     mode);\n-\n-  /* Immediately move the result of the libcall into a pseudo\n-     register so reload doesn't clobber the value if it needs\n-     the return register for a spill reg.  */\n   result = gen_reg_rtx (word_mode);\n-  emit_move_insn (result, hard_libcall_value (word_mode));\n+  emit_library_call_value (libfunc, result, LCT_CONST_MAKE_BLOCK,\n+\t\t\t   word_mode, 2, x, mode, y, mode);\n   *px = result;\n   *py = const0_rtx;\n   *pmode = word_mode;"}]}