{"sha": "28f9f1456e551dabd84c62c6a595256d4c681319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmOWYxNDU2ZTU1MWRhYmQ4NGM2MmM2YTU5NTI1NmQ0YzY4MTMxOQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-02-06T17:41:54Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-02-06T17:41:54Z"}, "message": "re PR tree-optimization/42637 ([graphite] wrong code for -floop-interchange -ftree-loop-distribution)\n\nFix PR42637.\n\n2010-02-05  Sebastian Pop  <sebastian.pop@amd.com>\n\t    Konrad Trifunovic  <konrad.trifunovic@inria.fr>\n\n\tPR middle-end/42637\n\t* graphite-dependences.c (build_lexicographical_constraint): Return\n\ta union of dependence polyhedra.\n\t(dependence_polyhedron_1): Adapt for build_lexicographical_constraint.\n\n\t* testsuite/gcc.dg/graphite/block-0.c: Enable runtime check.  XFAILed.\n\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n\t* testsuite/gcc.dg/graphite/block-7.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-12.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-mvt.c: Same.\n\t* testsuite/gfortran.dg/graphite/interchange-1.f: XFAILed.\n\t* testsuite/gfortran.dg/graphite/interchange-3.f90: XFAILed.\n\t* testsuite/gfortran.dg/graphite/run-id-1.f: New testcase for PR42637.\n\nCo-Authored-By: Konrad Trifunovic <konrad.trifunovic@inria.fr>\n\nFrom-SVN: r156552", "tree": {"sha": "5ec8cdc506e9cb28fd43883064338835c5bdf06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ec8cdc506e9cb28fd43883064338835c5bdf06e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f9f1456e551dabd84c62c6a595256d4c681319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f9f1456e551dabd84c62c6a595256d4c681319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f9f1456e551dabd84c62c6a595256d4c681319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f9f1456e551dabd84c62c6a595256d4c681319/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0bf08b1fee38f60ed5ca16bf8cde66bfc872a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0bf08b1fee38f60ed5ca16bf8cde66bfc872a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0bf08b1fee38f60ed5ca16bf8cde66bfc872a4"}], "stats": {"total": 160, "additions": 106, "deletions": 54}, "files": [{"sha": "5a6a919d3458780c81666d8ba0e48cb955ad3ca4", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -1,3 +1,20 @@\n+2010-02-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Konrad Trifunovic  <konrad.trifunovic@inria.fr>\n+\n+\tPR middle-end/42637\n+\t* graphite-dependences.c (build_lexicographical_constraint): Return\n+\ta union of dependence polyhedra.\n+\t(dependence_polyhedron_1): Adapt for build_lexicographical_constraint.\n+\n+\t* testsuite/gcc.dg/graphite/block-0.c: Enable runtime check.  XFAILed.\n+\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-7.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-12.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-mvt.c: Same.\n+\t* testsuite/gfortran.dg/graphite/interchange-1.f: XFAILed.\n+\t* testsuite/gfortran.dg/graphite/interchange-3.f90: XFAILed.\n+\t* testsuite/gfortran.dg/graphite/run-id-1.f: New testcase for PR42637.\n+\n 2010-02-03  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* testsuite/gcc.dg/graphite/interchange-12.c: Return 0 to avoid"}, {"sha": "4dc5854b3f92103d118582492f81df55b134c6fc", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -412,58 +412,56 @@ build_pairwise_scheduling (graphite_dim_t dim,\n   return res;\n }\n \n-/* Add to a non empty polyhedron RES the precedence constraints for\n-   the lexicographical comparison of time vectors in RES following the\n-   lexicographical order.  DIM is the dimension of the polyhedron RES.\n+/* Add to a non empty polyhedron BAG the precedence constraints for\n+   the lexicographical comparison of time vectors in BAG following the\n+   lexicographical order.  DIM is the dimension of the polyhedron BAG.\n    TDIM is the number of loops common to the two statements that are\n    compared lexicographically, i.e. the number of loops containing\n    both statements.  OFFSET is the number of dimensions needed to\n    represent the first statement, i.e. dimT1 + dimI1 in the layout of\n-   the RES polyhedron: T1|I1|T2|I2|S1|S2|G.  When DIRECTION is set to\n+   the BAG polyhedron: T1|I1|T2|I2|S1|S2|G.  When DIRECTION is set to\n    1, compute the direct dependence from PDR1 to PDR2, and when\n    DIRECTION is -1, compute the reversed dependence relation, from\n    PDR2 to PDR1.  */\n \n-static void\n-build_lexicographical_constraint (ppl_Pointset_Powerset_C_Polyhedron_t *res,\n+static ppl_Pointset_Powerset_C_Polyhedron_t\n+build_lexicographical_constraint (ppl_Pointset_Powerset_C_Polyhedron_t bag,\n \t\t\t\t  graphite_dim_t dim,\n \t\t\t\t  graphite_dim_t tdim,\n \t\t\t\t  graphite_dim_t offset,\n \t\t\t\t  int direction)\n {\n   graphite_dim_t i;\n+  ppl_Pointset_Powerset_C_Polyhedron_t res, lex;\n \n-  for (i = 0; i < tdim - 1; i+=2)\n-    {\n-      ppl_Pointset_Powerset_C_Polyhedron_t ineq;\n-      bool empty_p;\n+  ppl_new_Pointset_Powerset_C_Polyhedron_from_space_dimension (&res, dim, 1);\n \n-      /* Identify the static schedule dimensions.  */\n-      ineq = build_pairwise_scheduling (dim, i, offset, 0);\n-      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (ineq, *res);\n-      empty_p = ppl_Pointset_Powerset_C_Polyhedron_is_empty (ineq);\n+  lex = build_pairwise_scheduling (dim, 0, offset, direction);\n+  ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (lex, bag);\n \n-      if (empty_p)\n-\t{\n-\t  /* Add the lexicographical dynamic schedule dimension.  */\n-\t  if (i > 0)\n-\t    ineq = build_pairwise_scheduling (dim, i - 1, offset, direction);\n+  if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (lex))\n+    ppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (res, lex);\n \n-\t  return;\n-\t}\n+  ppl_delete_Pointset_Powerset_C_Polyhedron (lex);\n+\n+  for (i = 0; i < tdim - 1; i++)\n+    {\n+      ppl_Pointset_Powerset_C_Polyhedron_t sceq;\n+\n+      sceq = build_pairwise_scheduling (dim, i, offset, 0);\n+      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (bag, sceq);\n+      ppl_delete_Pointset_Powerset_C_Polyhedron (sceq);\n+\n+      lex = build_pairwise_scheduling (dim, i + 1, offset, direction);\n+      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (lex, bag);\n \n-      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (*res, ineq);\n-      ppl_delete_Pointset_Powerset_C_Polyhedron (ineq);\n+      if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (lex))\n+\tppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (res, lex);\n \n-      /* Identify the dynamic schedule dimensions.  */\n-      ineq = build_pairwise_scheduling (dim, i + 1, offset, 0);\n-      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (*res, ineq);\n-      ppl_delete_Pointset_Powerset_C_Polyhedron (ineq);\n+      ppl_delete_Pointset_Powerset_C_Polyhedron (lex);\n     }\n \n-  /* There is no dependence.  */\n-  ppl_delete_Pointset_Powerset_C_Polyhedron (*res);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_from_space_dimension (res, dim, 1);\n+  return res;\n }\n \n /* Build the dependence polyhedron for data references PDR1 and PDR2.\n@@ -553,8 +551,13 @@ dependence_polyhedron_1 (poly_dr_p pdr1, poly_dr_p pdr2,\n   ppl_delete_Pointset_Powerset_C_Polyhedron (dreq);\n \n   if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (res))\n-    build_lexicographical_constraint (&res, dim, MIN (tdim1, tdim2),\n-\t\t\t\t      tdim1 + ddim1, direction);\n+    {\n+      ppl_Pointset_Powerset_C_Polyhedron_t lex =\n+\tbuild_lexicographical_constraint (res, dim, MIN (tdim1, tdim2),\n+\t\t\t\t\t  tdim1 + ddim1, direction);\n+      ppl_delete_Pointset_Powerset_C_Polyhedron (res);\n+      res = lex;\n+    }\n \n   return res;\n }"}, {"sha": "320ee7913675bd6c31b176c17446dd158d0265c1", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -32,11 +32,8 @@ main()\n   fprintf (stderr, \"res = %d \\n\", res);\n #endif\n \n-  /* Avoid runtime check for this testcase, as it is miscompiled by\n-     Graphite for the moment.  */\n-  return 0;\n   return res != 1999;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "50927573782ec2806818c6ff659748972dec1dd1", "filename": "gcc/testsuite/gcc.dg/graphite/block-4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -46,11 +46,8 @@ main (void)\n   fprintf (stderr, \"res = %d \\n\", res);\n #endif\n \n-  /* Avoid runtime check for this testcase, as it is miscompiled by\n-     Graphite for the moment.  */\n-  return 0;\n   return res != 998001;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "a07ef11738df1adcc1e76e3e58c70316c81f6a4f", "filename": "gcc/testsuite/gcc.dg/graphite/block-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -44,11 +44,8 @@ main (void)\n   fprintf (stderr, \"res = %d \\n\", res);\n #endif\n \n-  /* Avoid runtime check for this testcase, as it is miscompiled by\n-     Graphite for the moment.  */\n-  return 0;\n   return res != 529340000;\n }\n \n-/* { dg-final { scan-tree-dump-times \"SCoP will be loop blocked\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "c0e331bb68735dae9f025d5d7499268d514fcd4b", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-12.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -44,11 +44,8 @@ main (void)\n   fprintf (stderr, \"res = %d \\n\", res);\n #endif\n \n-  /* Avoid runtime check for this testcase, as it is miscompiled by\n-     Graphite for the moment.  */\n-  return 0;\n   return res != 2626800;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "a1310dd67257cc0c012f7180affd018d9475b57a", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -49,12 +49,9 @@ main (void)\n   fprintf (stderr, \"res = %d \\n\", res);\n #endif\n \n-  /* Avoid runtime check for this testcase, as it is miscompiled by\n-     Graphite for the moment.  */\n-  return 0;\n   return res != 199900000;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */\n "}, {"sha": "334fbd8246a75802a9bf37e3f47c1b4a302d1d2d", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -41,5 +41,5 @@ subroutine foo(f1,f2,f3,f4,f5,f6,f7,f8,f9,f0,g1,g2,g3)\n ! known to be 4 in the inner two loops.  See interchange-2.f for the\n ! kernel from bwaves.\n \n-! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } }\n+! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } }\n ! { dg-final { cleanup-tree-dump \"graphite\" } }"}, {"sha": "04f4a13936121e7a290368d059c78e687eb2c55e", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -24,5 +24,5 @@ Program FOO\n \n end Program FOO\n \n-! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } }\n+! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } }\n ! { dg-final { cleanup-tree-dump \"graphite\" } }"}, {"sha": "521d268f37af3993f7dd6caff7d9ed9f6f4e3997", "filename": "gcc/testsuite/gfortran.dg/graphite/run-id-1.f", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f9f1456e551dabd84c62c6a595256d4c681319/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Frun-id-1.f?ref=28f9f1456e551dabd84c62c6a595256d4c681319", "patch": "@@ -0,0 +1,47 @@\n+      subroutine mul66(rt,rtt,r)\n+      real*8 rt(6,6),r(6,6),rtt(6,6)\n+      do i=1,6\n+        do j=1,6\n+          do ia=1,6\n+            rtt(i,ia)=rt(i,j)*r(j,ia)+rtt(i,ia)\n+          end do\n+        end do\n+      end do\n+      end\n+\n+      program test\n+      real*8 xj(6,6),w(6,6),w1(6,6)\n+      parameter(idump=0)\n+      integer i,j\n+\n+      do i=1,6\n+        do j=1,6\n+          xj(i,j) = 0.0d0\n+          w1(i,j) = 0.0d0\n+          w(i,j) = i * 10.0d0 + j;\n+        end do\n+      end do\n+\n+      xj(1,2) =  1.0d0\n+      xj(2,1) = -1.0d0\n+      xj(3,4) =  1.0d0\n+      xj(4,3) = -1.0d0\n+      xj(5,6) =  1.0d0\n+      xj(6,5) = -1.0d0\n+\n+      call mul66(xj,w1,w)\n+\n+      if (idump.ne.0) then\n+        write(6,*) 'w1 after call to mul66'\n+        do i = 1,6\n+          do j = 1,6\n+            write(6,'(D15.7)') w1(i,j)\n+          end do\n+        end do\n+      end if\n+\n+      if (w1(1,1).ne.21.0d0) then\n+        call abort()\n+      end if\n+\n+      end"}]}