{"sha": "f1d054017ef196644526def7070f20899da52e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFkMDU0MDE3ZWYxOTY2NDQ1MjZkZWY3MDcwZjIwODk5ZGE1MmU0OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-01-15T14:09:32Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-01-15T14:11:07Z"}, "message": "Revert \"arm: Implement vceqq_p64, vceqz_p64 and vceqzq_p64 intrinsics\"\n\nThis reverts commit 1a6306420090409cb397e2e042256eb1905f415f.", "tree": {"sha": "30b0091065a8161434a9a5c2efb4a97604ba4077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30b0091065a8161434a9a5c2efb4a97604ba4077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1d054017ef196644526def7070f20899da52e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d054017ef196644526def7070f20899da52e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d054017ef196644526def7070f20899da52e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d054017ef196644526def7070f20899da52e48/comments", "author": null, "committer": null, "parents": [{"sha": "446703ccc2ce09e9710964f781a21030bf3c2d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446703ccc2ce09e9710964f781a21030bf3c2d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446703ccc2ce09e9710964f781a21030bf3c2d54"}], "stats": {"total": 77, "additions": 1, "deletions": 76}, "files": [{"sha": "f99b9396cce3fb83be5a32cde3b43e5a3abcb1e7", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d054017ef196644526def7070f20899da52e48/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d054017ef196644526def7070f20899da52e48/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=f1d054017ef196644526def7070f20899da52e48", "patch": "@@ -16912,37 +16912,6 @@ vceq_p64 (poly64x1_t __a, poly64x1_t __b)\n   return vreinterpret_u64_u32 (__m);\n }\n \n-__extension__ extern __inline uint64x1_t\n-__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n-vceqz_p64 (poly64x1_t __a)\n-{\n-  poly64x1_t __b = vreinterpret_p64_u32 (vdup_n_u32 (0));\n-  return vceq_p64 (__a, __b);\n-}\n-\n-/* For vceqq_p64, we rely on vceq_p64 for each of the two elements.  */\n-__extension__ extern __inline uint64x2_t\n-__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n-vceqq_p64 (poly64x2_t __a, poly64x2_t __b)\n-{\n-  poly64_t __high_a = vget_high_p64 (__a);\n-  poly64_t __high_b = vget_high_p64 (__b);\n-  uint64x1_t __high = vceq_p64 (__high_a, __high_b);\n-\n-  poly64_t __low_a = vget_low_p64 (__a);\n-  poly64_t __low_b = vget_low_p64 (__b);\n-  uint64x1_t __low = vceq_p64 (__low_a, __low_b);\n-  return vcombine_u64 (__low, __high);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n-vceqzq_p64 (poly64x2_t __a)\n-{\n-  poly64x2_t __b = vreinterpretq_p64_u32 (vdupq_n_u32 (0));\n-  return vceqq_p64 (__a, __b);\n-}\n-\n /* The vtst_p64 intrinsic does not map to a single instruction.\n    We emulate it in way similar to vceq_p64 above but here we do\n    a reduction with max since if any two corresponding bits"}, {"sha": "a3210a94b1dcd00ea8b9f687a7805386ef5c0b08", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d054017ef196644526def7070f20899da52e48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d054017ef196644526def7070f20899da52e48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c?ref=f1d054017ef196644526def7070f20899da52e48", "patch": "@@ -16,11 +16,6 @@ VECT_VAR_DECL(vbsl_expected,poly,64,2) [] = { 0xfffffff1,\n \n /* Expected results: vceq.  */\n VECT_VAR_DECL(vceq_expected,uint,64,1) [] = { 0x0 };\n-VECT_VAR_DECL(vceq_expected,uint,64,2) [] = { 0x0, 0xffffffffffffffff };\n-\n-/* Expected results: vceqz.  */\n-VECT_VAR_DECL(vceqz_expected,uint,64,1) [] = { 0x0 };\n-VECT_VAR_DECL(vceqz_expected,uint,64,2) [] = { 0x0, 0xffffffffffffffff };\n \n /* Expected results: vcombine.  */\n VECT_VAR_DECL(vcombine_expected,poly,64,2) [] = { 0xfffffffffffffff0, 0x88 };\n@@ -218,7 +213,7 @@ int main (void)\n \n   /* vceq_p64 tests. */\n #undef TEST_MSG\n-#define TEST_MSG \"VCEQ/VCEQQ\"\n+#define TEST_MSG \"VCEQ\"\n \n #define TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n   VECT_VAR(vceq_vector_res, T3, W, N) =\t\t\t\t\t\\\n@@ -232,55 +227,16 @@ int main (void)\n   DECL_VARIABLE(vceq_vector, poly, 64, 1);\n   DECL_VARIABLE(vceq_vector2, poly, 64, 1);\n   DECL_VARIABLE(vceq_vector_res, uint, 64, 1);\n-  DECL_VARIABLE(vceq_vector, poly, 64, 2);\n-  DECL_VARIABLE(vceq_vector2, poly, 64, 2);\n-  DECL_VARIABLE(vceq_vector_res, uint, 64, 2);\n \n   CLEAN(result, uint, 64, 1);\n-  CLEAN(result, uint, 64, 2);\n \n   VLOAD(vceq_vector, buffer, , poly, p, 64, 1);\n-  VLOAD(vceq_vector, buffer, q, poly, p, 64, 2);\n \n   VDUP(vceq_vector2, , poly, p, 64, 1, 0x88);\n-  VSET_LANE(vceq_vector2, q, poly, p, 64, 2, 0, 0x88);\n-  VSET_LANE(vceq_vector2, q, poly, p, 64, 2, 1, 0xFFFFFFFFFFFFFFF1);\n \n   TEST_VCOMP(vceq, , poly, p, uint, 64, 1);\n-  TEST_VCOMP(vceq, q, poly, p, uint, 64, 2);\n \n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, vceq_expected, \"\");\n-  CHECK(TEST_MSG, uint, 64, 2, PRIx64, vceq_expected, \"\");\n-\n-  /* vceqz_p64 tests. */\n-#undef TEST_MSG\n-#define TEST_MSG \"VCEQZ/VCEQZQ\"\n-\n-#define TEST_VCOMPZ1(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n-  VECT_VAR(vceqz_vector_res, T3, W, N) =\t\t\t\t\\\n-    INSN##Q##_##T2##W(VECT_VAR(vceqz_vector, T1, W, N));\t\t\\\n-  vst1##Q##_u##W(VECT_VAR(result, T3, W, N), VECT_VAR(vceqz_vector_res, T3, W, N))\n-\n-#define TEST_VCOMPZ(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n-  TEST_VCOMPZ1(INSN, Q, T1, T2, T3, W, N)\n-\n-  DECL_VARIABLE(vceqz_vector, poly, 64, 1);\n-  DECL_VARIABLE(vceqz_vector_res, uint, 64, 1);\n-  DECL_VARIABLE(vceqz_vector, poly, 64, 2);\n-  DECL_VARIABLE(vceqz_vector_res, uint, 64, 2);\n-\n-  CLEAN(result, uint, 64, 1);\n-  CLEAN(result, uint, 64, 2);\n-\n-  VLOAD(vceqz_vector, buffer, , poly, p, 64, 1);\n-  VLOAD(vceqz_vector, buffer, q, poly, p, 64, 2);\n-  VSET_LANE(vceqz_vector, q, poly, p, 64, 2, 1, 0);\n-\n-  TEST_VCOMPZ(vceqz, , poly, p, uint, 64, 1);\n-  TEST_VCOMPZ(vceqz, q, poly, p, uint, 64, 2);\n-\n-  CHECK(TEST_MSG, uint, 64, 1, PRIx64, vceqz_expected, \"\");\n-  CHECK(TEST_MSG, uint, 64, 2, PRIx64, vceqz_expected, \"\");\n \n   /* vcombine_p64 tests.  */\n #undef TEST_MSG"}]}