{"sha": "5779e7133d84c5873249bb643d9852f314022f0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3OWU3MTMzZDg0YzU4NzMyNDliYjY0M2Q5ODUyZjMxNDAyMmYwYg==", "commit": {"author": {"name": "Michael Meissner", "email": "gnu@the-meissners.org", "date": "2008-08-30T23:50:40Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-08-30T23:50:40Z"}, "message": "Change attribute((option(...))) to attribute((target(...))); Do not allocate tree nodes on x86 for builtins until we generate code for the ISA; Delete hot/cold functions changing optimization; Make C++ support target specific functions; Add #pragma GCC {push_options,pop_options,reset_options} instead of #pragma GCC {target,optimize} {push,reset,pop}\n\nFrom-SVN: r139812", "tree": {"sha": "b3ee120a2ecf25d00fba24415c8566f83135a110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ee120a2ecf25d00fba24415c8566f83135a110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5779e7133d84c5873249bb643d9852f314022f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5779e7133d84c5873249bb643d9852f314022f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5779e7133d84c5873249bb643d9852f314022f0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5779e7133d84c5873249bb643d9852f314022f0b/comments", "author": null, "committer": null, "parents": [{"sha": "0257eee5bd4700647061f61b13a2f89b2a4b4f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0257eee5bd4700647061f61b13a2f89b2a4b4f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0257eee5bd4700647061f61b13a2f89b2a4b4f28"}], "stats": {"total": 1653, "additions": 940, "deletions": 713}, "files": [{"sha": "5b5c83353a3a5485e8cfab9fca3eacbd774f0bec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -5,6 +5,151 @@\n \n \t* Makefile.in (dodump.h): Add $(BASIC_BLOCK_H) dependency.\n \n+\t* opts.h (CL_SAVE): New option class for marking options that are\n+\ttarget specific options usable in the target attribute.\n+\t(CL_MIN_OPTION_CLASS): CL_SAVE is now the minimum option.\n+\n+\t* opt-functions.awk (switch_flags): Add CL_SAVE flag so backends\n+\tcan easily find the target specific options that are safe to use\n+\tin the attribute or pragma.\n+\n+\t* attribs.c (decl_attributes): Change #pragma GCC option to\n+\t#pragma GCC target, and attribute((option(...))) to\n+\tattribute((target(...))).\n+\n+\t* doc/extend.texi (target attribute): Change from option\n+\tattribute.  Delete push/pop/reset.\n+\t(#pragma GCC target): Change from #pragma GCC option.  Delete\n+\tpush/pop/reset.\n+\t(#pragma GCC push_options): Document new pragma.\n+\t(#pragma GCC pop_options): Document new pragma.\n+\t(#pragma GCC reset_options): Document new pragma.\n+\n+\t* targhooks.c (default_target_option_valid_attribute_p): Add\n+\twarning about port not supporting target attributes.\n+\t(default_target_option_pragma_parse): New function, warn about\n+\t#pragma GCC target not being supported.\n+\n+\t* targhooks.h (default_target_option_pragma_parse): Add\n+\tdeclaration.\n+\n+\t* tree.h (TI_CURRENT_TARGET_PRAGMA): Rename from\n+\tTI_CURRENT_OPTION_PRAGMA.\n+\t(current_target_pragma): Rename from current_option_pragma.\n+\n+\t* target.h: (struct target_option): Delete booleans for changing\n+\tthe optimization level on hot/cold functions.  Change signature of\n+\tpragma_parse hook to take a second tree.\n+\n+\t* c-tree.h (c_builtin_function_ext_scope): Add declaration.\n+\n+\t* c-decl.c (c_builtin_function_ext_scope): New function, guarantee\n+\tthat the declaration is done at global scope.\n+\n+\t* langhooks.c (add_builtin_function_common): Move most of the code\n+\tfrom add_builtin_function here, calling the hook passed in.\n+\t(add_builtin_function): Call add_builtin_function_common with\n+\tstandard builtin hook.\n+\t(add_builtin_function_ext_scope): New function to add builtins to\n+\tglobal scope.\n+\n+\t* langhooks.h (struct lang_hooks): Add builtin_function_ext_scope\n+\thook.\n+\t(add_builtin_function_ext_scope): Add declaration.\n+\n+\t* c-pragma.c (handle_pragma_target): Rename from\n+\thandle_pragma_option, #pragma GCC option is now #pragma GCC\n+\ttarget.  Move warning about port not supporting target options to\n+\tdefault pragma parse hook.  Remove push/pop/reset from this\n+\tpragma.\n+\t(handle_pragma_optimize): Remove push/pop/reset from this pragma.\n+\t(option_stack): Delete static variable.\n+\t(optimize_stack): Ditto.\n+\t(optons_stack): New stack of saved target and optimization\n+\toptions.\n+\t(handle_pragma_push_options): New function to handle pushing both\n+\ttarget and optimization options.\n+\t(handle_pragma_pop_options): New function to handle popping both\n+\ttarget and optimization options.\n+\t(handle_pragma_reset_options): New function to handle resetting\n+\tboth target and optimization options to their initial state.\n+\t(init_pragma): Rename handle_pragma_option to\n+\thandle_pragma_target.  Add support for push_options, pop_options,\n+\tand reset_options pragmas.\n+\n+\t* target-def.h (TARGET_OPTION_PRAGMA_PARSE): Change default to\n+\tdefault_target_option_pragma_parse.\n+\t(TARGET_OPTION_VALID_ATTRIBUTE_P): Change default to\n+\tdefault_target_option_valid_attribute_p.\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): Delete.\n+\t(TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION): Ditto.\n+\t(TARGET_OPTION_HOOKS): Delete the fields for whether to change\n+\toptimization level on hot/cold functions.\n+\n+\t* tree-inline.c (tree_can_inline_p): Disable suppressing inlining\n+\tif the caller and callee have different optimization levels.\n+\n+\t* c-common.c (handle_target_attribute): Rename from\n+\thandle_option_attribute, attribute((option(...))) is now\n+\tattribute((target(...))).  Move warning if the port does not\n+\tsupport target attributes to the default hook.\n+\t(handle_hot_attribute): Delete code to change the optimization\n+\tlevel of hot functions.\n+\t(handle_cold_attribute): Ditto.\n+\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Take a second\n+\targument that is the binary tree options to use if there are no\n+\targuments.  Call ix86_valid_target_attribute_tree instead of\n+\tix86_valid_option_attribute_tree.\n+\t(ix86_pragma_target_parse): Rename from ix86_pragma_option_parse.\n+\t(ix86_register_pragmas): Use ix86_pragma_target_parse instead of\n+\tix86_pragma_option_parse.\n+\n+\t* config/i386/i386-protos.h (ix86_valid_target_attribute_tree):\n+\tRename from ix86_valid_option_attribute_tree.\n+\n+\t* config/i386/i386.c (ix86_add_new_builtins): New function to add\n+\tnew builtins when the ISA changes.\n+\t(ix86_valid_target_attribute_tree): Rename from\n+\tix86_valid_option_attribute_tree.  Change callers.  If the\n+\tfunction specified optimization options, use those as the starting\n+\tpoint before setting up the target attributes.  If the\n+\toptimization options were changed in the course of setting the\n+\ttarget attributes, record the new optimization options.\n+\t(ix86_valid_target_attribute_tree_inner_p): Rename from\n+\tix86_valid_option_attribute_tree_inner_p.  Change callers.  Call\n+\tix86_add_new_builtins if the ISA changed.\n+\t(ix86_valid_target_attribute_p): Rename from\n+\tix86_valid_option_attribute_p.  Change callers.\n+\t(enum ix86_builtins): Add IX86_BUILTIN_PCMOV to allow both\n+\t__builtin_ia32_pcmov and __builtin_ia32_pcmov_v2di to be declared\n+\tas delayed builtin functions.\n+\t(struct builtin_isa): New structure to record builtin functions\n+\tthat should be delayed until the ISA for that function is used.\n+\t(ix86_builtins_isa): Change from int to struct to track builtin\n+\tfunctions we want to declare at some point.\n+\t(def_builtin): If the front end can delay defining the builtin\n+\tfunctions, don't create builtins for ISAs not part of the default\n+\toptions.\n+\t(def_builtin_const): Ditto.\n+\t(bdesc_multi_arg): Declare __builtin_ia32_pcmov and\n+\t__builtin_ia32_pcmov_v2di to be different builtin functions.\n+\t(ix86_expand_builtin): Changes due to ix86_builtins_isa now being\n+\ta structure instead of an int.\n+\t(TARGET_OPTION_VALID_ATTRIBUTE_P): Use\n+\tix86_valid_target_attribute_p, not ix86_valid_option_attribute_p.\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): Delete.\n+\t(TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION): Ditto.\n+\n+\t* config/ia64/ia64.h\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): Delete.\n+\t(TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION): Ditto.\n+\n+\t* langhooks-def.h (LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE): New\n+\thook, default to being the same as LANG_HOOKS_BUILTIN_FUNCTION.\n+\t(LANG_HOOKS_INITIALIZER): Add\n+\tLANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE hook.\n+\n 2008-08-30  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/37270"}, {"sha": "dbce1815e6810745d9c6ff49834636d1b0f6bc86", "filename": "gcc/attribs.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -252,18 +252,18 @@ decl_attributes (tree *node, tree attributes, int flags)\n       && !DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node))\n     DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node) = optimization_current_node;\n \n-  /* If this is a function and the user used #pragma GCC option, add the\n-     options to the attribute((option(...))) list.  */\n+  /* If this is a function and the user used #pragma GCC target, add the\n+     options to the attribute((target(...))) list.  */\n   if (TREE_CODE (*node) == FUNCTION_DECL\n-      && current_option_pragma\n+      && current_target_pragma\n       && targetm.target_option.valid_attribute_p (*node, NULL_TREE,\n-\t\t\t\t\t\t  current_option_pragma, 0))\n+\t\t\t\t\t\t  current_target_pragma, 0))\n     {\n-      tree cur_attr = lookup_attribute (\"option\", attributes);\n-      tree opts = copy_list (current_option_pragma);\n+      tree cur_attr = lookup_attribute (\"target\", attributes);\n+      tree opts = copy_list (current_target_pragma);\n \n       if (! cur_attr)\n-\tattributes = tree_cons (get_identifier (\"option\"), opts, attributes);\n+\tattributes = tree_cons (get_identifier (\"target\"), opts, attributes);\n       else\n \tTREE_VALUE (cur_attr) = chainon (opts, TREE_VALUE (cur_attr));\n     }"}, {"sha": "748ab52e1c4b217cd6eb32ee835b589885e890de", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 70, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -571,7 +571,7 @@ static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree handle_alloc_size_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_option_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_target_attribute (tree *, tree, tree, int, bool *);\n static tree handle_optimize_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n@@ -856,8 +856,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_error_attribute },\n   { \"error\",\t\t      1, 1, true,  false, false,\n \t\t\t      handle_error_attribute },\n-  { \"option\",                 1, -1, true, false, false,\n-\t\t\t      handle_option_attribute },\n+  { \"target\",                 1, -1, true, false, false,\n+\t\t\t      handle_target_attribute },\n   { \"optimize\",               1, -1, true, false, false,\n \t\t\t      handle_optimize_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n@@ -5260,34 +5260,8 @@ handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t   name, \"cold\");\n \t  *no_add_attrs = true;\n \t}\n-      else\n-\t{\n-\t  tree old_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node);\n-\n-\t  /* If we are not at -O3, but are optimizing, turn on -O3\n-\t     optimizations just for this one function.  */\n-\t  if (((optimize > 0 && optimize < 3) || optimize_size)\n-\t      && targetm.target_option.hot_attribute_sets_optimization\n-\t      && (!old_opts || old_opts == optimization_default_node))\n-\t    {\n-\t      /* Create the hot optimization node if needed.  */\n-\t      if (!optimization_hot_node)\n-\t\t{\n-\t\t  struct cl_optimization current_options;\n-\t\t  static const char *os_argv[] = { NULL, \"-O3\", NULL };\n-\n-\t\t  cl_optimization_save (&current_options);\n-\t\t  decode_options (2, os_argv);\n-\t\t  optimization_hot_node = build_optimization_node ();\n-\t\t  cl_optimization_restore (&current_options);\n-\t\t}\n-\n-\t      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n-\t\t= optimization_hot_node;\n-\t    }\n-\t  /* Most of the rest of the hot processing is done later with\n-\t     lookup_attribute.  */\n-\t}\n+      /* Most of the rest of the hot processing is done later with\n+\t lookup_attribute.  */\n     }\n   else\n     {\n@@ -5312,34 +5286,8 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t   name, \"hot\");\n \t  *no_add_attrs = true;\n \t}\n-      else\n-\t{\n-\t  tree old_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node);\n-\n-\t  /* If we are optimizing, but not optimizing for space, turn on -Os\n-\t     optimizations just for this one function.  */\n-\t  if (optimize && !optimize_size\n-\t      && targetm.target_option.cold_attribute_sets_optimization\n-\t      && (!old_opts || old_opts == optimization_default_node))\n-\t    {\n-\t      /* Create the cold optimization node if needed.  */\n-\t      if (!optimization_cold_node)\n-\t\t{\n-\t\t  struct cl_optimization current_options;\n-\t\t  static const char *os_argv[] = { NULL, \"-Os\", NULL };\n-\n-\t\t  cl_optimization_save (&current_options);\n-\t\t  decode_options (2, os_argv);\n-\t\t  optimization_cold_node = build_optimization_node ();\n-\t\t  cl_optimization_restore (&current_options);\n-\t\t}\n-\n-\t      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n-\t\t= optimization_cold_node;\n-\t    }\n-\t  /* Most of the rest of the cold processing is done later with\n-\t     lookup_attribute.  */\n-\t}\n+      /* Most of the rest of the cold processing is done later with\n+\t lookup_attribute.  */\n     }\n   else\n     {\n@@ -7038,11 +6986,10 @@ handle_type_generic_attribute (tree *node, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n-/* For handling \"option\" attribute. arguments as in\n-   struct attribute_spec.handler.  */\n+/* Handle a \"target\" attribute.  */\n \n static tree\n-handle_option_attribute (tree *node, tree name, tree args, int flags,\n+handle_target_attribute (tree *node, tree name, tree args, int flags,\n \t\t\t bool *no_add_attrs)\n {\n   /* Ensure we have a function type.  */\n@@ -7051,14 +6998,6 @@ handle_option_attribute (tree *node, tree name, tree args, int flags,\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n-  else if (targetm.target_option.valid_attribute_p\n-\t   == default_target_option_valid_attribute_p)\n-    {\n-      warning (OPT_Wattributes,\n-\t       \"%qE attribute is not supported on this machine\",\n-\t       name);\n-      *no_add_attrs = true;\n-    }\n   else if (! targetm.target_option.valid_attribute_p (*node, name, args,\n \t\t\t\t\t\t      flags))\n     *no_add_attrs = true;"}, {"sha": "5a60063c2bdac4c239febe0457aca5394304d029", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -2843,6 +2843,31 @@ c_builtin_function (tree decl)\n \n   return decl;\n }\n+\n+tree\n+c_builtin_function_ext_scope (tree decl)\n+{\n+  tree type = TREE_TYPE (decl);\n+  tree   id = DECL_NAME (decl);\n+\n+  const char *name = IDENTIFIER_POINTER (id);\n+  C_DECL_BUILTIN_PROTOTYPE (decl) = (TYPE_ARG_TYPES (type) != 0);\n+\n+  /* Should never be called on a symbol with a preexisting meaning.  */\n+  gcc_assert (!I_SYMBOL_BINDING (id));\n+\n+  bind (id, decl, external_scope, /*invisible=*/false, /*nested=*/false);\n+\n+  /* Builtins in the implementation namespace are made visible without\n+     needing to be explicitly declared.  See push_file_scope.  */\n+  if (name[0] == '_' && (name[1] == '_' || ISUPPER (name[1])))\n+    {\n+      TREE_CHAIN (decl) = visible_builtins;\n+      visible_builtins = decl;\n+    }\n+\n+  return decl;\n+}\n \f\n /* Called when a declaration is seen that contains no names to declare.\n    If its type is a reference to a structure, union or enum inherited"}, {"sha": "9c73fdd3c1528ed8b01852bb7b60e36b1aca8ffa", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -69,6 +69,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL c_dup_lang_specific_decl\n #undef  LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_BUILTIN_FUNCTION c_builtin_function\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\n+#define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE c_builtin_function_ext_scope\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "2f2095ec81a459fe674429c3e36c98d96a1c2a6f", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 143, "deletions": 180, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -866,15 +866,11 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n   GCC_BAD (\"unknown option after %<#pragma GCC diagnostic%> kind\");\n }\n \n-/* Stack of the #pragma GCC options created with #pragma GCC option push.  */\n-static GTY(()) VEC(tree,gc) *option_stack;\n-\n-/*  Parse #pragma GCC option (xxx) to set target specific options.  */\n+/*  Parse #pragma GCC target (xxx) to set target specific options.  */\n static void\n-handle_pragma_option(cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n {\n   enum cpp_ttype token;\n-  const char *name;\n   tree x;\n   bool close_paren_needed_p = false;\n \n@@ -884,89 +880,16 @@ handle_pragma_option(cpp_reader *ARG_UNUSED(dummy))\n       return;\n     }\n \n-  if (!targetm.target_option.pragma_parse)\n-    {\n-      error (\"#pragma GCC option is not supported for this system\");\n-      return;\n-    }\n-\n   token = pragma_lex (&x);\n   if (token == CPP_OPEN_PAREN)\n     {\n       close_paren_needed_p = true;\n       token = pragma_lex (&x);\n     }\n \n-  if (token == CPP_NAME)\n-    {\n-      bool call_pragma_parse_p = false;\n-      bool ok_p;\n-\n-      name = IDENTIFIER_POINTER (x);\n-      if (strcmp (name, \"reset\") == 0)\n-\t{\n-\t  current_option_pragma = NULL_TREE;\n-\t  call_pragma_parse_p = true;\n-\t}\n-\n-      else if (strcmp (name, \"push\") == 0)\n-\tVEC_safe_push (tree, gc, option_stack,\n-\t\t       copy_list (current_option_pragma));\n-\n-      else if (strcmp (name, \"pop\") == 0)\n-\t{\n-\t  int len = VEC_length (tree, option_stack);\n-\t  if (len == 0)\n-\t    {\n-\t      GCC_BAD (\"%<#pragma GCC option pop%> without a %<#pragma GCC \"\n-\t\t       \"option push%>\");\n-\t      return;\n-\t    }\n-\t  else\n-\t    {\n-\t      VEC_truncate (tree, option_stack, len-1);\n-\t      current_option_pragma = ((len > 1)\n-\t\t\t\t       ? VEC_last (tree, option_stack)\n-\t\t\t\t       : NULL_TREE);\n-\n-\t      call_pragma_parse_p = true;\n-\t    }\n-\t}\n-\n-      else\n-\t{\n-\t  GCC_BAD (\"%<#pragma GCC option%> is not a string or \"\n-\t\t   \"push/pop/reset\");\n-\t  return;\n-\t}\n-\n-      token = pragma_lex (&x);\n-      if (close_paren_needed_p)\n-\t{\n-\t  if (token == CPP_CLOSE_PAREN)\n-\t    token = pragma_lex (&x);\n-\t  else\n-\t    GCC_BAD (\"%<#pragma GCC option ([push|pop|reset])%> does not \"\n-\t\t     \"have a final %<)%>.\");\n-\t}\n-\n-      if (token != CPP_EOF)\n-\t{\n-\t  GCC_BAD (\"%<#pragma GCC option [push|pop|reset]%> is badly \"\n-\t\t   \"formed\");\n-\t  return;\n-\t}\n-\n-      /* See if we need to call the pragma_parse hook.  This must occur at the\n-\t end after processing all of the tokens, or we may get spurious errors\n-\t when we define or undef macros.  */\n-      ok_p = targetm.target_option.pragma_parse (current_option_pragma);\n-      gcc_assert (ok_p);\n-    }\n-\n-  else if (token != CPP_STRING)\n+  if (token != CPP_STRING)\n     {\n-      GCC_BAD (\"%<#pragma GCC option%> is not a string or push/pop/reset\");\n+      GCC_BAD (\"%<#pragma GCC option%> is not a string\");\n       return;\n     }\n \n@@ -993,34 +916,29 @@ handle_pragma_option(cpp_reader *ARG_UNUSED(dummy))\n \t  if (token == CPP_CLOSE_PAREN)\n \t    token = pragma_lex (&x);\n \t  else\n-\t    GCC_BAD (\"%<#pragma GCC option (string [,string]...)%> does \"\n+\t    GCC_BAD (\"%<#pragma GCC target (string [,string]...)%> does \"\n \t\t     \"not have a final %<)%>.\");\n \t}\n \n       if (token != CPP_EOF)\n \t{\n-\t  error (\"#pragma GCC option string... is badly formed\");\n+\t  error (\"#pragma GCC target string... is badly formed\");\n \t  return;\n \t}\n \n       /* put arguments in the order the user typed them.  */\n       args = nreverse (args);\n \n-      if (targetm.target_option.pragma_parse (args))\n-\tcurrent_option_pragma = args;\n+      if (targetm.target_option.pragma_parse (args, NULL_TREE))\n+\tcurrent_target_pragma = args;\n     }\n }\n \n-/* Stack of the #pragma GCC optimize options created with #pragma GCC optimize\n-   push.  */\n-static GTY(()) VEC(tree,gc) *optimize_stack;\n-\n /* Handle #pragma GCC optimize to set optimization options.  */\n static void\n-handle_pragma_optimize(cpp_reader *ARG_UNUSED(dummy))\n+handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n {\n   enum cpp_ttype token;\n-  const char *name;\n   tree x;\n   bool close_paren_needed_p = false;\n   tree optimization_previous_node = optimization_current_node;\n@@ -1038,95 +956,9 @@ handle_pragma_optimize(cpp_reader *ARG_UNUSED(dummy))\n       token = pragma_lex (&x);\n     }\n \n-  if (token == CPP_NAME)\n+  if (token != CPP_STRING && token != CPP_NUMBER)\n     {\n-      bool call_opt_p = false;\n-\n-      name = IDENTIFIER_POINTER (x);\n-      if (strcmp (name, \"reset\") == 0)\n-\t{\n-\t  struct cl_optimization *def\n-\t    = TREE_OPTIMIZATION (optimization_default_node);\n-\t  current_optimize_pragma = NULL_TREE;\n-\t  optimization_current_node = optimization_default_node;\n-\t  cl_optimization_restore (def);\n-\t  call_opt_p = true;\n-\t}\n-\n-      else if (strcmp (name, \"push\") == 0)\n-\tVEC_safe_push (tree, gc, optimize_stack, current_optimize_pragma);\n-\n-      else if (strcmp (name, \"pop\") == 0)\n-\t{\n-\t  int len = VEC_length (tree, optimize_stack);\n-\t  if (len == 0)\n-\t    {\n-\t      GCC_BAD (\"%<#pragma GCC optimize pop%> without a %<#pragma \"\n-\t\t       \"GCC optimize push%>\");\n-\t      return;\n-\t    }\n-\t  else\n-\t    {\n-\t      VEC_truncate (tree, optimize_stack, len-1);\n-\t      current_optimize_pragma\n-\t\t= ((len > 1)\n-\t\t   ? VEC_last (tree, optimize_stack)\n-\t\t   : NULL_TREE);\n-\n-\t      call_opt_p = true;\n-\t      if (current_optimize_pragma)\n-\t\t{\n-\t\t  bool ok_p\n-\t\t    = parse_optimize_options (current_optimize_pragma, false);\n-\t\t  gcc_assert (ok_p);\t/* should be parsed previously.  */\n-\t\t  optimization_current_node = build_optimization_node ();\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  struct cl_optimization *opt\n-\t\t    = TREE_OPTIMIZATION (optimization_default_node);\n-\t\t  optimization_current_node = optimization_default_node;\n-\t\t  cl_optimization_restore (opt);\n-\t\t}\n-\t    }\n-\t}\n-\n-      else\n-\t{\n-\t  GCC_BAD (\"%<#pragma GCC optimize%> is not a string or \"\n-\t\t   \"push/pop/reset\");\n-\t  return;\n-\t}\n-\n-      token = pragma_lex (&x);\n-      if (close_paren_needed_p)\n-\t{\n-\t  if (token == CPP_CLOSE_PAREN)\n-\t    token = pragma_lex (&x);\n-\t  else\n-\t    GCC_BAD (\"%<#pragma GCC optimize ([push|pop|reset])%> does not \"\n-\t\t     \"have a final %<)%>.\");\n-\t}\n-\n-      if (token != CPP_EOF)\n-\t{\n-\t  GCC_BAD (\"%<#pragma GCC optimize [push|pop|reset]%> is badly \"\n-\t\t   \"formed\");\n-\t  return;\n-\t}\n-\n-      if (call_opt_p &&\n-\t  (optimization_previous_node != optimization_current_node))\n-\tc_cpp_builtins_optimize_pragma (parse_in,\n-\t\t\t\t\toptimization_previous_node,\n-\t\t\t\t\toptimization_current_node);\n-\n-    }\n-\n-  else if (token != CPP_STRING && token != CPP_NUMBER)\n-    {\n-      GCC_BAD (\"%<#pragma GCC optimize%> is not a string, number, or \"\n-\t       \"push/pop/reset\");\n+      GCC_BAD (\"%<#pragma GCC optimize%> is not a string or number\");\n       return;\n     }\n \n@@ -1166,13 +998,141 @@ handle_pragma_optimize(cpp_reader *ARG_UNUSED(dummy))\n       args = nreverse (args);\n \n       parse_optimize_options (args, false);\n+      current_optimize_pragma = chainon (current_optimize_pragma, args);\n       optimization_current_node = build_optimization_node ();\n       c_cpp_builtins_optimize_pragma (parse_in,\n \t\t\t\t      optimization_previous_node,\n \t\t\t\t      optimization_current_node);\n     }\n }\n \n+/* Stack of the #pragma GCC options created with #pragma GCC push_option.  Save\n+   both the binary representation of the options and the TREE_LIST of\n+   strings that will be added to the function's attribute list.  */\n+typedef struct opt_stack GTY(())\n+{\n+  struct opt_stack *prev;\n+  tree target_binary;\n+  tree target_strings;\n+  tree optimize_binary;\n+  tree optimize_strings;\n+} opt_stack;\n+\n+static GTY(()) struct opt_stack * options_stack;\n+\n+/* Handle #pragma GCC push_options to save the current target and optimization\n+   options.  */\n+\n+static void\n+handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n+{\n+  enum cpp_ttype token;\n+  tree x = 0;\n+  opt_stack *p;\n+\n+  token = pragma_lex (&x);\n+  if (token != CPP_EOF)\n+    {\n+      warning (OPT_Wpragmas, \"junk at end of %<#pragma push_options%>\");\n+      return;\n+    }\n+\n+  p = GGC_NEW (opt_stack);\n+  p->prev = options_stack;\n+  options_stack = p;\n+\n+  /* Save optimization and target flags in binary format.  */\n+  p->optimize_binary = build_optimization_node ();\n+  p->target_binary = build_target_option_node ();\n+\n+  /* Save optimization and target flags in string list format.  */\n+  p->optimize_strings = copy_list (current_optimize_pragma);\n+  p->target_strings = copy_list (current_target_pragma);\n+}\n+\n+/* Handle #pragma GCC pop_options to restore the current target and\n+   optimization options from a previous push_options.  */\n+\n+static void\n+handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n+{\n+  enum cpp_ttype token;\n+  tree x = 0;\n+  opt_stack *p;\n+\n+  token = pragma_lex (&x);\n+  if (token != CPP_EOF)\n+    {\n+      warning (OPT_Wpragmas, \"junk at end of %<#pragma pop_options%>\");\n+      return;\n+    }\n+\n+  if (! options_stack)\n+    {\n+      warning (OPT_Wpragmas,\n+\t       \"%<#pragma GCC pop_options%> without a corresponding \"\n+\t       \"%<#pragma GCC push_options%>\");\n+      return;\n+    }\n+\n+  p = options_stack;\n+  options_stack = p->prev;\n+\n+  if (p->target_binary != target_option_current_node)\n+    {\n+      (void) targetm.target_option.pragma_parse (NULL_TREE, p->target_binary);\n+      target_option_current_node = p->target_binary;\n+    }\n+\n+  if (p->optimize_binary != optimization_current_node)\n+    {\n+      tree old_optimize = optimization_current_node;\n+      cl_optimization_restore (TREE_OPTIMIZATION (p->optimize_binary));\n+      c_cpp_builtins_optimize_pragma (parse_in, old_optimize,\n+\t\t\t\t      p->optimize_binary);\n+      optimization_current_node = p->optimize_binary;\n+    }\n+\n+  current_target_pragma = p->target_strings;\n+  current_optimize_pragma = p->optimize_strings;\n+}\n+\n+/* Handle #pragma GCC reset_options to restore the current target and\n+   optimization options to the original options used on the command line.  */\n+\n+static void\n+handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n+{\n+  enum cpp_ttype token;\n+  tree x = 0;\n+  tree new_optimize = optimization_default_node;\n+  tree new_target = target_option_default_node;\n+\n+  token = pragma_lex (&x);\n+  if (token != CPP_EOF)\n+    {\n+      warning (OPT_Wpragmas, \"junk at end of %<#pragma reset_options%>\");\n+      return;\n+    }\n+\n+  if (new_target != target_option_current_node)\n+    {\n+      (void) targetm.target_option.pragma_parse (NULL_TREE, new_target);\n+      target_option_current_node = new_target;\n+    }\n+\n+  if (new_optimize != optimization_current_node)\n+    {\n+      tree old_optimize = optimization_current_node;\n+      cl_optimization_restore (TREE_OPTIMIZATION (new_optimize));\n+      c_cpp_builtins_optimize_pragma (parse_in, old_optimize, new_optimize);\n+      optimization_current_node = new_optimize;\n+    }\n+\n+  current_target_pragma = NULL_TREE;\n+  current_optimize_pragma = NULL_TREE;\n+}\n+\n /* Print a plain user-specified message.  */\n \n static void\n@@ -1368,8 +1328,11 @@ init_pragma (void)\n #endif\n \n   c_register_pragma (\"GCC\", \"diagnostic\", handle_pragma_diagnostic);\n-  c_register_pragma (\"GCC\", \"option\", handle_pragma_option);\n+  c_register_pragma (\"GCC\", \"target\", handle_pragma_target);\n   c_register_pragma (\"GCC\", \"optimize\", handle_pragma_optimize);\n+  c_register_pragma (\"GCC\", \"push_options\", handle_pragma_push_options);\n+  c_register_pragma (\"GCC\", \"pop_options\", handle_pragma_pop_options);\n+  c_register_pragma (\"GCC\", \"reset_options\", handle_pragma_reset_options);\n \n   c_register_pragma_with_expansion (0, \"redefine_extname\", handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);"}, {"sha": "ab8b36b2e32523d1daa4c48247c027bd74baec33", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -488,6 +488,7 @@ extern void push_parm_decl (const struct c_parm *);\n extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n \t\t\t\t\t\t\tstruct c_declarator *);\n extern tree c_builtin_function (tree);\n+extern tree c_builtin_function_ext_scope (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (struct c_enum_contents *, tree);"}, {"sha": "3d17c104e39f4872eef76bd9c05f94f40813ae93", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"c-pragma.h\"\n \n-static bool ix86_pragma_option_parse (tree);\n+static bool ix86_pragma_target_parse (tree, tree);\n static void ix86_target_macros_internal\n   (int, enum processor_type, enum processor_type, enum fpmath_unit,\n    void (*def_or_undef) (cpp_reader *, const char *));\n@@ -232,11 +232,12 @@ ix86_target_macros_internal (int isa_flag,\n }\n \n \f\n-/* Hook to validate the current #pragma option and set the state, and update\n-   the macros based on what was changed.  */\n+/* Hook to validate the current #pragma GCC target and set the state, and\n+   update the macros based on what was changed.  If ARGS is NULL, then\n+   POP_TARGET is used to reset the options.  */\n \n static bool\n-ix86_pragma_option_parse (tree args)\n+ix86_pragma_target_parse (tree args, tree pop_target)\n {\n   tree prev_tree = build_target_option_node ();\n   tree cur_tree;\n@@ -252,12 +253,14 @@ ix86_pragma_option_parse (tree args)\n \n   if (! args)\n     {\n-      cur_tree = target_option_default_node;\n+      cur_tree = ((pop_target)\n+\t\t  ? pop_target\n+\t\t  : target_option_default_node);\n       cl_target_option_restore (TREE_TARGET_OPTION (cur_tree));\n     }\n   else\n     {\n-      cur_tree = ix86_valid_option_attribute_tree (args);\n+      cur_tree = ix86_valid_target_attribute_tree (args);\n       if (!cur_tree)\n \treturn false;\n     }\n@@ -339,8 +342,8 @@ ix86_target_macros (void)\n void\n ix86_register_pragmas (void)\n {\n-  /* Update pragma hook to allow parsing #pragma GCC option.  */\n-  targetm.target_option.pragma_parse = ix86_pragma_option_parse;\n+  /* Update pragma hook to allow parsing #pragma GCC target.  */\n+  targetm.target_option.pragma_parse = ix86_pragma_target_parse;\n \n #ifdef REGISTER_SUBTARGET_PRAGMAS\n   REGISTER_SUBTARGET_PRAGMAS ();"}, {"sha": "de024581e80930d3f5932570cd14fc69a74506d7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -204,7 +204,7 @@ extern int ix86_constant_alignment (tree, int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *);\n extern int x86_field_alignment (tree, int);\n-extern tree ix86_valid_option_attribute_tree (tree);\n+extern tree ix86_valid_target_attribute_tree (tree);\n #endif\n \n extern rtx ix86_tls_get_addr (void);"}, {"sha": "b240b7d6b86fe9254e672706cbad5f0c0e7825b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 122, "deletions": 39, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -1793,6 +1793,7 @@ static int ix86_function_regparm (const_tree, const_tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n \t\t\t\t\t\t rtx, rtx, int);\n+static void ix86_add_new_builtins (int);\n \n enum ix86_function_specific_strings\n {\n@@ -1809,8 +1810,8 @@ static void ix86_function_specific_save (struct cl_target_option *);\n static void ix86_function_specific_restore (struct cl_target_option *);\n static void ix86_function_specific_print (FILE *, int,\n \t\t\t\t\t  struct cl_target_option *);\n-static bool ix86_valid_option_attribute_p (tree, tree, tree, int);\n-static bool ix86_valid_option_attribute_inner_p (tree, char *[]);\n+static bool ix86_valid_target_attribute_p (tree, tree, tree, int);\n+static bool ix86_valid_target_attribute_inner_p (tree, char *[]);\n static bool ix86_can_inline_p (tree, tree);\n static void ix86_set_current_function (tree);\n \n@@ -2583,7 +2584,7 @@ override_options (bool main_args_p)\n   int const pta_size = ARRAY_SIZE (processor_alias_table);\n \n   /* Set up prefix/suffix so the error messages refer to either the command\n-     line argument, or the attribute(option).  */\n+     line argument, or the attribute(target).  */\n   if (main_args_p)\n     {\n       prefix = \"-m\";\n@@ -3366,12 +3367,12 @@ ix86_function_specific_print (FILE *file, int indent,\n }\n \n \f\n-/* Inner function to process the attribute((option(...))), take an argument and\n+/* Inner function to process the attribute((target(...))), take an argument and\n    set the current options from the argument. If we have a list, recursively go\n    over the list.  */\n \n static bool\n-ix86_valid_option_attribute_inner_p (tree args, char *p_strings[])\n+ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n {\n   char *next_optstr;\n   bool ret = true;\n@@ -3462,7 +3463,7 @@ ix86_valid_option_attribute_inner_p (tree args, char *p_strings[])\n \n       for (; args; args = TREE_CHAIN (args))\n \tif (TREE_VALUE (args)\n-\t    && !ix86_valid_option_attribute_inner_p (TREE_VALUE (args), p_strings))\n+\t    && !ix86_valid_target_attribute_inner_p (TREE_VALUE (args), p_strings))\n \t  ret = false;\n \n       return ret;\n@@ -3531,7 +3532,7 @@ ix86_valid_option_attribute_inner_p (tree args, char *p_strings[])\n       /* Process the option.  */\n       if (opt == N_OPTS)\n \t{\n-\t  error (\"attribute(option(\\\"%s\\\")) is unknown\", orig_p);\n+\t  error (\"attribute(target(\\\"%s\\\")) is unknown\", orig_p);\n \t  ret = false;\n \t}\n \n@@ -3570,7 +3571,7 @@ ix86_valid_option_attribute_inner_p (tree args, char *p_strings[])\n /* Return a TARGET_OPTION_NODE tree of the target options listed or NULL.  */\n \n tree\n-ix86_valid_option_attribute_tree (tree args)\n+ix86_valid_target_attribute_tree (tree args)\n {\n   const char *orig_arch_string = ix86_arch_string;\n   const char *orig_tune_string = ix86_tune_string;\n@@ -3584,7 +3585,7 @@ ix86_valid_option_attribute_tree (tree args)\n     = TREE_TARGET_OPTION (target_option_default_node);\n \n   /* Process each of the options on the chain.  */\n-  if (! ix86_valid_option_attribute_inner_p (args, option_strings))\n+  if (! ix86_valid_target_attribute_inner_p (args, option_strings))\n     return NULL_TREE;\n \n   /* If the changed options are different from the default, rerun override_options,\n@@ -3617,6 +3618,9 @@ ix86_valid_option_attribute_tree (tree args)\n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n       override_options (false);\n \n+      /* Add any builtin functions with the new isa if any.  */\n+      ix86_add_new_builtins (ix86_isa_flags);\n+\n       /* Save the current options unless we are validating options for\n \t #pragma.  */\n       t = build_target_option_node ();\n@@ -3634,27 +3638,47 @@ ix86_valid_option_attribute_tree (tree args)\n   return t;\n }\n \n-/* Hook to validate attribute((option(\"string\"))).  */\n+/* Hook to validate attribute((target(\"string\"))).  */\n \n static bool\n-ix86_valid_option_attribute_p (tree fndecl,\n+ix86_valid_target_attribute_p (tree fndecl,\n \t\t\t       tree ARG_UNUSED (name),\n \t\t\t       tree args,\n \t\t\t       int ARG_UNUSED (flags))\n {\n-  struct cl_target_option cur_opts;\n+  struct cl_target_option cur_target;\n   bool ret = true;\n-  tree new_opts;\n-\n-  cl_target_option_save (&cur_opts);\n-  new_opts = ix86_valid_option_attribute_tree (args);\n-  if (!new_opts)\n+  tree old_optimize = build_optimization_node ();\n+  tree new_target, new_optimize;\n+  tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n+\n+  /* If the function changed the optimization levels as well as setting target\n+     options, start with the optimizations specified.  */\n+  if (func_optimize && func_optimize != old_optimize)\n+    cl_optimization_restore (TREE_OPTIMIZATION (func_optimize));\n+\n+  /* The target attributes may also change some optimization flags, so update\n+     the optimization options if necessary.  */\n+  cl_target_option_save (&cur_target);\n+  new_target = ix86_valid_target_attribute_tree (args);\n+  new_optimize = build_optimization_node ();\n+\n+  if (!new_target)\n     ret = false;\n \n   else if (fndecl)\n-    DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_opts;\n+    {\n+      DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_target;\n+\n+      if (old_optimize != new_optimize)\n+\tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n+    }\n+\n+  cl_target_option_restore (&cur_target);\n+\n+  if (old_optimize != new_optimize)\n+    cl_optimization_restore (TREE_OPTIMIZATION (old_optimize));\n \n-  cl_target_option_restore (&cur_opts);\n   return ret;\n }\n \n@@ -19535,6 +19559,7 @@ enum ix86_builtins\n   IX86_BUILTIN_FNMSUBSD,\n   IX86_BUILTIN_FNMSUBPS,\n   IX86_BUILTIN_FNMSUBPD,\n+  IX86_BUILTIN_PCMOV,\n   IX86_BUILTIN_PCMOV_V2DI,\n   IX86_BUILTIN_PCMOV_V4SI,\n   IX86_BUILTIN_PCMOV_V8HI,\n@@ -19734,17 +19759,35 @@ enum ix86_builtins\n /* Table for the ix86 builtin decls.  */\n static GTY(()) tree ix86_builtins[(int) IX86_BUILTIN_MAX];\n \n-/* Table to record which ISA options the builtin needs.  */\n-static int ix86_builtins_isa[(int) IX86_BUILTIN_MAX];\n+/* Table of all of the builtin functions that are possible with different ISA's\n+   but are waiting to be built until a function is declared to use that\n+   ISA.  */\n+struct builtin_isa GTY(())\n+{\n+  tree type;\t\t\t/* builtin type to use in the declaration */\n+  const char *name;\t\t/* function name */\n+  int isa;\t\t\t/* isa_flags this builtin is defined for */\n+  bool const_p;\t\t\t/* true if the declaration is constant */\n+};\n+\n+static GTY(()) struct builtin_isa ix86_builtins_isa[(int) IX86_BUILTIN_MAX];\n+\n \n /* Add an ix86 target builtin function with CODE, NAME and TYPE.  Save the MASK\n  * of which isa_flags to use in the ix86_builtins_isa array.  Stores the\n  * function decl in the ix86_builtins array.  Returns the function decl or\n  * NULL_TREE, if the builtin was not added.\n  *\n- * Record all builtins, even if it isn't an instruction set in the current ISA\n- * in case the user uses function specific options for a different ISA.  When\n- * the builtin is expanded, check at that time whether it is valid.  */\n+ * If the front end has a special hook for builtin functions, delay adding\n+ * builtin functions that aren't in the current ISA until the ISA is changed\n+ * with function specific optimization.  Doing so, can save about 300K for the\n+ * default compiler.  When the builtin is expanded, check at that time whether\n+ * it is valid.\n+ *\n+ * If the front end doesn't have a special hook, record all builtins, even if\n+ * it isn't an instruction set in the current ISA in case the user uses\n+ * function specific options for a different ISA, so that we don't get scope\n+ * errors if a builtin is added in the middle of a function scope.  */\n \n static inline tree\n def_builtin (int mask, const char *name, tree type, enum ix86_builtins code)\n@@ -19753,10 +19796,25 @@ def_builtin (int mask, const char *name, tree type, enum ix86_builtins code)\n \n   if (!(mask & OPTION_MASK_ISA_64BIT) || TARGET_64BIT)\n     {\n-      decl = add_builtin_function (name, type, code, BUILT_IN_MD,\n-\t\t\t\t   NULL, NULL_TREE);\n-      ix86_builtins[(int) code] = decl;\n-      ix86_builtins_isa[(int) code] = mask;\n+      ix86_builtins_isa[(int) code].isa = mask;\n+\n+      if ((mask & ix86_isa_flags) != 0\n+\t  || (lang_hooks.builtin_function\n+\t      == lang_hooks.builtin_function_ext_scope))\n+\n+\t{\n+\t  decl = add_builtin_function (name, type, code, BUILT_IN_MD, NULL,\n+\t\t\t\t       NULL_TREE);\n+\t  ix86_builtins[(int) code] = decl;\n+\t  ix86_builtins_isa[(int) code].type = NULL_TREE;\n+\t}\n+      else\n+\t{\n+\t  ix86_builtins[(int) code] = NULL_TREE;\n+\t  ix86_builtins_isa[(int) code].const_p = false;\n+\t  ix86_builtins_isa[(int) code].type = type;\n+\t  ix86_builtins_isa[(int) code].name = name;\n+\t}\n     }\n \n   return decl;\n@@ -19771,9 +19829,40 @@ def_builtin_const (int mask, const char *name, tree type,\n   tree decl = def_builtin (mask, name, type, code);\n   if (decl)\n     TREE_READONLY (decl) = 1;\n+  else\n+    ix86_builtins_isa[(int) code].const_p = true;\n+\n   return decl;\n }\n \n+/* Add any new builtin functions for a given ISA that may not have been\n+   declared.  This saves a bit of space compared to adding all of the\n+   declarations to the tree, even if we didn't use them.  */\n+\n+static void\n+ix86_add_new_builtins (int isa)\n+{\n+  int i;\n+  tree decl;\n+\n+  for (i = 0; i < (int)IX86_BUILTIN_MAX; i++)\n+    {\n+      if ((ix86_builtins_isa[i].isa & isa) != 0\n+\t  && ix86_builtins_isa[i].type != NULL_TREE)\n+\t{\n+\t  decl = add_builtin_function_ext_scope (ix86_builtins_isa[i].name,\n+\t\t\t\t\t\t ix86_builtins_isa[i].type,\n+\t\t\t\t\t\t i, BUILT_IN_MD, NULL,\n+\t\t\t\t\t\t NULL_TREE);\n+\n+\t  ix86_builtins[i] = decl;\n+\t  ix86_builtins_isa[i].type = NULL_TREE;\n+\t  if (ix86_builtins_isa[i].const_p)\n+\t    TREE_READONLY (decl) = 1;\n+\t}\n+    }\n+}\n+\n /* Bits for builtin_description.flag.  */\n \n /* Set when we don't support the comparison natively, and should\n@@ -20787,7 +20876,7 @@ static const struct builtin_description bdesc_multi_arg[] =\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv2df4,    \"__builtin_ia32_fnmsubsd\",   IX86_BUILTIN_FNMSUBSD,   0,            (int)MULTI_ARG_3_DF },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv4sf4,      \"__builtin_ia32_fnmsubps\",   IX86_BUILTIN_FNMSUBPS,   0,            (int)MULTI_ARG_3_SF },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv2df4,      \"__builtin_ia32_fnmsubpd\",   IX86_BUILTIN_FNMSUBPD,   0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov\",      IX86_BUILTIN_PCMOV_V2DI, 0,            (int)MULTI_ARG_3_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov\",      IX86_BUILTIN_PCMOV,\t 0,            (int)MULTI_ARG_3_DI },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov_v2di\", IX86_BUILTIN_PCMOV_V2DI, 0,            (int)MULTI_ARG_3_DI },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4si,        \"__builtin_ia32_pcmov_v4si\", IX86_BUILTIN_PCMOV_V4SI, 0,            (int)MULTI_ARG_3_SI },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v8hi,        \"__builtin_ia32_pcmov_v8hi\", IX86_BUILTIN_PCMOV_V8HI, 0,            (int)MULTI_ARG_3_HI },\n@@ -23986,10 +24075,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n      current ISA based on the command line switches.  With function specific\n      options, we need to check in the context of the function making the call\n      whether it is supported.  */\n-  if (ix86_builtins_isa[fcode]\n-      && !(ix86_builtins_isa[fcode] & ix86_isa_flags))\n+  if (ix86_builtins_isa[fcode].isa\n+      && !(ix86_builtins_isa[fcode].isa & ix86_isa_flags))\n     {\n-      char *opts = ix86_target_string (ix86_builtins_isa[fcode], 0, NULL,\n+      char *opts = ix86_target_string (ix86_builtins_isa[fcode].isa, 0, NULL,\n \t\t\t\t       NULL, NULL, false);\n \n       if (!opts)\n@@ -29026,7 +29115,7 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #define TARGET_SET_CURRENT_FUNCTION ix86_set_current_function\n \n #undef TARGET_OPTION_VALID_ATTRIBUTE_P\n-#define TARGET_OPTION_VALID_ATTRIBUTE_P ix86_valid_option_attribute_p\n+#define TARGET_OPTION_VALID_ATTRIBUTE_P ix86_valid_target_attribute_p\n \n #undef TARGET_OPTION_SAVE\n #define TARGET_OPTION_SAVE ix86_function_specific_save\n@@ -29040,12 +29129,6 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_OPTION_CAN_INLINE_P\n #define TARGET_OPTION_CAN_INLINE_P ix86_can_inline_p\n \n-#undef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION true\n-\n-#undef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION true\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "d9100e8d40bfbf9fc15f9c6729dc03158a284750", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -493,12 +493,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX ia64_c_mode_for_suffix\n \n-#undef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION true\n-\n-#undef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION true\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum"}, {"sha": "30c6aa6e4c95277003f816a620564aec161ef238", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -1,3 +1,19 @@\n+2008-08-29  Michael Meissner  <gnu@the-meissners.org>\n+\n+\t* decl.c (builtin_function_1): Take a bool argument to decide\n+\twhether to use pushdecl or pushdecl_top_level.\n+\t(duplicate_decls): Copy function specific target and optimization\n+\toptions on duplicate declarations.\n+\t(cxx_builtin_function): Update builtin_function_1 call.\n+\t(cxx_builtin_function_ext_scope): New function, guarantee that the\n+\tdeclaration is done at global scope.\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE): New\n+\tmacro, define builtin function hook for delayed machine specific\n+\tbuiltins.\n+\n+\t* cp-tree.h (cxx_builtin_function_ext_scope): Add declaration.\n+\n 2008-08-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37288"}, {"sha": "a7d4f89e8c9fc3037671616053cd9d4562f8960b", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -86,6 +86,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_COMDAT_GROUP cxx_comdat_group\n #undef  LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\n+#define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE cxx_builtin_function_ext_scope\n #undef\tLANG_HOOKS_TYPE_HASH_EQ\n #define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n #undef LANG_HOOKS_MISSING_NORETURN_OK_P"}, {"sha": "37bed91a19cd0a29ef6298062a5b1e2ad7396cf3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -4364,6 +4364,7 @@ extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n extern tree cxx_builtin_function\t\t(tree decl);\n+extern tree cxx_builtin_function_ext_scope\t(tree decl);\n extern tree check_elaborated_type_specifier\t(enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static\t(tree, tree);\n extern const char *cxx_comdat_group\t\t(tree);"}, {"sha": "5a5a41fd30a3cadf75d5c2e89b714b718adc1aa2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -66,7 +66,7 @@ static tree grok_reference_init (tree, tree, tree, tree *);\n static tree grokvardecl (tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, tree);\n static void record_unknown_type (tree, const char *);\n-static tree builtin_function_1 (tree, tree);\n+static tree builtin_function_1 (tree, tree, bool);\n static tree build_library_fn_1 (tree, enum tree_code, tree);\n static int member_function_or_else (tree, tree, enum overload_flags);\n static void bad_specifiers (tree, const char *, int, int, int, int,\n@@ -1764,6 +1764,20 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       if (TREE_DEPRECATED (newdecl))\n \tTREE_DEPRECATED (olddecl) = 1;\n \n+      /* Preserve function specific target and optimization options */\n+      if (TREE_CODE (newdecl) == FUNCTION_DECL)\n+\t{\n+\t  if (DECL_FUNCTION_SPECIFIC_TARGET (olddecl)\n+\t      && !DECL_FUNCTION_SPECIFIC_TARGET (newdecl))\n+\t    DECL_FUNCTION_SPECIFIC_TARGET (newdecl)\n+\t      = DECL_FUNCTION_SPECIFIC_TARGET (olddecl);\n+\n+\t  if (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (olddecl)\n+\t      && !DECL_FUNCTION_SPECIFIC_OPTIMIZATION (newdecl))\n+\t    DECL_FUNCTION_SPECIFIC_OPTIMIZATION (newdecl)\n+\t      = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (olddecl);\n+\t}\n+\n       /* Merge the initialization information.  */\n       if (DECL_INITIAL (newdecl) == NULL_TREE\n \t  && DECL_INITIAL (olddecl) != NULL_TREE)\n@@ -3497,7 +3511,7 @@ cp_make_fname_decl (tree id, int type_dep)\n }\n \n static tree\n-builtin_function_1 (tree decl, tree context)\n+builtin_function_1 (tree decl, tree context, bool is_global)\n {\n   tree          id = DECL_NAME (decl);\n   const char *name = IDENTIFIER_POINTER (id);\n@@ -3518,7 +3532,10 @@ builtin_function_1 (tree decl, tree context)\n \n   DECL_CONTEXT (decl) = context;\n \n-  pushdecl (decl);\n+  if (is_global)\n+    pushdecl_top_level (decl);\n+  else\n+    pushdecl (decl);\n \n   /* A function in the user's namespace should have an explicit\n      declaration before it is used.  Mark the built-in function as\n@@ -3551,11 +3568,36 @@ cxx_builtin_function (tree decl)\n     {\n       tree decl2 = copy_node(decl);\n       push_namespace (std_identifier);\n-      builtin_function_1 (decl2, std_node);\n+      builtin_function_1 (decl2, std_node, false);\n+      pop_namespace ();\n+    }\n+\n+  return builtin_function_1 (decl, NULL_TREE, false);\n+}\n+\n+/* Like cxx_builtin_function, but guarantee the function is added to the global\n+   scope.  This is to allow function specific options to add new machine\n+   dependent builtins when the target ISA changes via attribute((target(...)))\n+   which saves space on program startup if the program does not use non-generic\n+   ISAs.  */\n+\n+tree\n+cxx_builtin_function_ext_scope (tree decl)\n+{\n+\n+  tree          id = DECL_NAME (decl);\n+  const char *name = IDENTIFIER_POINTER (id);\n+  /* All builtins that don't begin with an '_' should additionally\n+     go in the 'std' namespace.  */\n+  if (name[0] != '_')\n+    {\n+      tree decl2 = copy_node(decl);\n+      push_namespace (std_identifier);\n+      builtin_function_1 (decl2, std_node, true);\n       pop_namespace ();\n     }\n \n-  return builtin_function_1 (decl, NULL_TREE);\n+  return builtin_function_1 (decl, NULL_TREE, true);\n }\n \n /* Generate a FUNCTION_DECL with the typical flags for a runtime library"}, {"sha": "05203ddfbb44d2b208c90b23bf55000702d2c27f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 66, "deletions": 94, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -2665,19 +2665,19 @@ take function pointer arguments.  The @code{nothrow} attribute is not\n implemented in GCC versions earlier than 3.3.\n \n @item option\n-@cindex @code{option} function attribute\n-The @code{option} attribute is used to specify that a function is to\n+@cindex @code{target} function attribute\n+The @code{target} attribute is used to specify that a function is to\n be compiled with different target options than specified on the\n command line.  This can be used for instance to have functions\n compiled with a different ISA (instruction set architecture) than the\n-default.  You can also use the @samp{#pragma GCC option} pragma to set\n+default.  You can also use the @samp{#pragma GCC target} pragma to set\n more than one function to be compiled with specific target options.\n @xref{Function Specific Option Pragmas}, for details about the\n-@samp{#pragma GCC option} pragma.\n+@samp{#pragma GCC target} pragma.\n \n For instance on a 386, you could compile one function with\n-@code{option(\"sse4.1,arch=core2\")} and another with\n-@code{option(\"sse4a,arch=amdfam10\")} that would be equivalent to\n+@code{target(\"sse4.1,arch=core2\")} and another with\n+@code{target(\"sse4a,arch=amdfam10\")} that would be equivalent to\n compiling the first function with @option{-msse4.1} and\n @option{-march=core2} options, and the second function with\n @option{-msse4a} and @option{-march=amdfam10} options.  It is up to the\n@@ -2687,141 +2687,141 @@ supports the particular ISA it was compiled for (for example by using\n family are used).\n \n @smallexample\n-int core2_func (void) __attribute__ ((__option__ (\"arch=core2\")));\n-int sse3_func (void) __attribute__ ((__option__ (\"sse3\")));\n+int core2_func (void) __attribute__ ((__target__ (\"arch=core2\")));\n+int sse3_func (void) __attribute__ ((__target__ (\"sse3\")));\n @end smallexample\n \n On the 386, the following options are allowed:\n \n @table @samp\n @item abm\n @itemx no-abm\n-@cindex option(\"abm\")\n+@cindex @code{target(\"abm\")} attribute\n Enable/disable the generation of the advanced bit instructions.\n \n @item aes\n @itemx no-aes\n-@cindex @code{option(\"aes\")} attribute\n+@cindex @code{target(\"aes\")} attribute\n Enable/disable the generation of the AES instructions.\n \n @item mmx\n @itemx no-mmx\n-@cindex @code{option(\"mmx\")} attribute\n+@cindex @code{target(\"mmx\")} attribute\n Enable/disable the generation of the MMX instructions.\n \n @item pclmul\n @itemx no-pclmul\n-@cindex @code{option(\"pclmul\")} attribute\n+@cindex @code{target(\"pclmul\")} attribute\n Enable/disable the generation of the PCLMUL instructions.\n \n @item popcnt\n @itemx no-popcnt\n-@cindex @code{option(\"popcnt\")} attribute\n+@cindex @code{target(\"popcnt\")} attribute\n Enable/disable the generation of the POPCNT instruction.\n \n @item sse\n @itemx no-sse\n-@cindex @code{option(\"sse\")} attribute\n+@cindex @code{target(\"sse\")} attribute\n Enable/disable the generation of the SSE instructions.\n \n @item sse2\n @itemx no-sse2\n-@cindex @code{option(\"sse2\")} attribute\n+@cindex @code{target(\"sse2\")} attribute\n Enable/disable the generation of the SSE2 instructions.\n \n @item sse3\n @itemx no-sse3\n-@cindex @code{option(\"sse3\")} attribute\n+@cindex @code{target(\"sse3\")} attribute\n Enable/disable the generation of the SSE3 instructions.\n \n @item sse4\n @itemx no-sse4\n-@cindex @code{option(\"sse4\")} attribute\n+@cindex @code{target(\"sse4\")} attribute\n Enable/disable the generation of the SSE4 instructions (both SSE4.1\n and SSE4.2).\n \n @item sse4.1\n @itemx no-sse4.1\n-@cindex @code{option(\"sse4.1\")} attribute\n+@cindex @code{target(\"sse4.1\")} attribute\n Enable/disable the generation of the sse4.1 instructions.\n \n @item sse4.2\n @itemx no-sse4.2\n-@cindex @code{option(\"sse4.2\")} attribute\n+@cindex @code{target(\"sse4.2\")} attribute\n Enable/disable the generation of the sse4.2 instructions.\n \n @item sse4a\n @itemx no-sse4a\n-@cindex @code{option(\"sse4a\")} attribute\n+@cindex @code{target(\"sse4a\")} attribute\n Enable/disable the generation of the SSE4A instructions.\n \n @item sse5\n @itemx no-sse5\n-@cindex @code{option(\"sse5\")} attribute\n+@cindex @code{target(\"sse5\")} attribute\n Enable/disable the generation of the SSE5 instructions.\n \n @item ssse3\n @itemx no-ssse3\n-@cindex @code{option(\"ssse3\")} attribute\n+@cindex @code{target(\"ssse3\")} attribute\n Enable/disable the generation of the SSSE3 instructions.\n \n @item cld\n @itemx no-cld\n-@cindex @code{option(\"cld\")} attribute\n+@cindex @code{target(\"cld\")} attribute\n Enable/disable the generation of the CLD before string moves.\n \n @item fancy-math-387\n @itemx no-fancy-math-387\n-@cindex @code{option(\"fancy-math-387\")} attribute\n+@cindex @code{target(\"fancy-math-387\")} attribute\n Enable/disable the generation of the @code{sin}, @code{cos}, and\n @code{sqrt} instructions on the 387 floating point unit.\n \n @item fused-madd\n @itemx no-fused-madd\n-@cindex @code{option(\"fused-madd\")} attribute\n+@cindex @code{target(\"fused-madd\")} attribute\n Enable/disable the generation of the fused multiply/add instructions.\n \n @item ieee-fp\n @itemx no-ieee-fp\n-@cindex @code{option(\"ieee-fp\")} attribute\n+@cindex @code{target(\"ieee-fp\")} attribute\n Enable/disable the generation of floating point that depends on IEEE arithmetic.\n \n @item inline-all-stringops\n @itemx no-inline-all-stringops\n-@cindex @code{option(\"inline-all-stringops\")} attribute\n+@cindex @code{target(\"inline-all-stringops\")} attribute\n Enable/disable inlining of string operations.\n \n @item inline-stringops-dynamically\n @itemx no-inline-stringops-dynamically\n-@cindex @code{option(\"inline-stringops-dynamically\")} attribute\n+@cindex @code{target(\"inline-stringops-dynamically\")} attribute\n Enable/disable the generation of the inline code to do small string\n operations and calling the library routines for large operations.\n \n @item align-stringops\n @itemx no-align-stringops\n-@cindex @code{option(\"align-stringops\")} attribute\n+@cindex @code{target(\"align-stringops\")} attribute\n Do/do not align destination of inlined string operations.\n \n @item recip\n @itemx no-recip\n-@cindex @code{option(\"recip\")} attribute\n+@cindex @code{target(\"recip\")} attribute\n Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS\n instructions followed an additional Newton-Rhapson step instead of\n doing a floating point division.\n \n @item arch=@var{ARCH}\n-@cindex @code{option(\"arch=@var{ARCH}\")} attribute\n+@cindex @code{target(\"arch=@var{ARCH}\")} attribute\n Specify the architecture to generate code for in compiling the function.\n \n @item tune=@var{TUNE}\n-@cindex @code{option(\"tune=@var{TUNE}\")} attribute\n+@cindex @code{target(\"tune=@var{TUNE}\")} attribute\n Specify the architecture to tune for in compiling the function.\n \n @item fpmath=@var{FPMATH}\n-@cindex @code{option(\"fpmath=@var{FPMATH}\")} attribute\n+@cindex @code{target(\"fpmath=@var{FPMATH}\")} attribute\n Specify which floating point unit to use.  The\n-@code{option(\"fpmath=sse,387\")} option must be specified as\n-@code{option(\"fpmath=sse+387\")} because the comma would separate\n+@code{target(\"fpmath=sse,387\")} option must be specified as\n+@code{target(\"fpmath=sse+387\")} because the comma would separate\n different options.\n @end table\n \n@@ -2831,10 +2831,10 @@ options, or you can separate the option with a comma (@code{,}).\n On the 386, the inliner will not inline a function that has different\n target options than the caller, unless the callee has a subset of the\n target options of the caller.  For example a function declared with\n-@code{option(\"sse5\")} can inline a function with\n-@code{option(\"sse2\")}, since @code{-msse5} implies @code{-msse2}.\n+@code{target(\"sse5\")} can inline a function with\n+@code{target(\"sse2\")}, since @code{-msse5} implies @code{-msse2}.\n \n-The @code{option} attribute is not implemented in GCC versions earlier\n+The @code{target} attribute is not implemented in GCC versions earlier\n than 4.4, and at present only the 386 uses it.\n \n @item optimize\n@@ -2853,17 +2853,7 @@ that affect more than one function.\n This can be used for instance to have frequently executed functions\n compiled with more aggressive optimization options that produce faster\n and larger code, while other functions can be called with less\n-aggressive options.  On some targets, the @code{hot} attribute implies\n-@code{optimize(\"O3\")}, and @code{cold} attribute implies\n-@code{optimize(\"Os\")}.\n-\n-@smallexample\n-int fast_func (void) __attribute__ ((__optimize__ (\"O3,unroll-loops\")));\n-int slow_func (void) __attribute__ ((__optimize__ (\"Os\")));\n-@end smallexample\n-\n-The inliner will not inline functions with a higher optimization level\n-than the caller or different space/time trade offs.\n+aggressive options.\n \n @item pure\n @cindex @code{pure} function attribute\n@@ -2903,10 +2893,6 @@ are automatically detected and this attribute is ignored.\n The @code{hot} attribute is not implemented in GCC versions earlier\n than 4.3.\n \n-Starting with GCC 4.4, the @code{hot} attribute sets\n-@code{optimize(\"O3\")} to turn on more aggressive optimization on the\n-the i386, x86_64, and IA-64 targets.\n-\n @item cold\n @cindex @code{cold} function attribute\n The @code{cold} attribute is used to inform the compiler that a function is\n@@ -2924,10 +2910,6 @@ are automatically detected and this attribute is ignored.\n \n The @code{cold} attribute is not implemented in GCC versions earlier than 4.3.\n \n-Starting with GCC 4.4, the @code{cold} attribute sets\n-@code{optimize(\"Os\")} to save space on the the i386, x86_64, and IA-64\n-targets.\n-\n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n @cindex functions that are passed arguments in registers on the 386\n@@ -11834,41 +11816,22 @@ push_macro} and restored by @code{#pragma pop_macro}.\n @subsection Function Specific Option Pragmas\n \n @table @code\n-@item #pragma GCC option (@var{\"string\"}...)\n-@cindex pragma GCC option\n+@item #pragma GCC target (@var{\"string\"}...)\n+@cindex pragma GCC target\n \n This pragma allows you to set target specific options for functions\n defined later in the source file.  One or more strings can be\n specified.  Each function that is defined after this point will be as\n-if @code{attribute((option(\"STRING\")))} was specified for that\n+if @code{attribute((target(\"STRING\")))} was specified for that\n function.  The parenthesis around the options is optional.\n @xref{Function Attributes}, for more information about the\n-@code{option} attribute and the attribute syntax.\n+@code{target} attribute and the attribute syntax.\n \n-The @samp{#pragma GCC option} pragma is not implemented in GCC\n+The @samp{#pragma GCC target} pragma is not implemented in GCC\n versions earlier than 4.4, and is currently only implemented for the\n-386 and x86_64 backend.\n-@end table\n-\n-@table @code\n-@item #pragma GCC option (push)\n-@itemx #pragma GCC option (pop)\n-@cindex pragma GCC option\n-\n-These pragmas maintain a stack of the current options.  It is\n-intended for include files where you temporarily want to switch to\n-using a different @samp{#pragma GCC option} and then to pop back to\n-the previous options.\n+386 and x86_64 backends.\n @end table\n \n-@table @code\n-@item #pragma GCC option (reset)\n-@cindex pragma, target option\n-@cindex pragma GCC option\n-\n-This pragma clears the current @code{#pragma GCC options} to use the\n-default switches as specified on the command line.\n-@end table\n @table @code\n @item #pragma GCC optimize (@var{\"string\"}...)\n @cindex pragma GCC optimize\n@@ -11886,22 +11849,31 @@ versions earlier than 4.4.\n @end table\n \n @table @code\n-@item #pragma GCC optimize (push)\n-@itemx #pragma GCC optimize (pop)\n-@cindex pragma GCC optimize\n-\n-These pragmas maintain a stack of the current optimization options.\n-It is intended for include files where you temporarily want to switch\n-to using a different @code{#pragma GCC optimize} and then to pop back\n-to the previous optimizations.\n+@item #pragma GCC push_options\n+@itemx #pragma GCC pop_options\n+@cindex pragma GCC push_options\n+@cindex pragma GCC pop_options\n+\n+These pragmas maintain a stack of the current target and optimization\n+options.  It is intended for include files where you temporarily want\n+to switch to using a different @samp{#pragma GCC target} or\n+@samp{#pragma GCC optimize} and then to pop back to the previous\n+options.\n+\n+The @samp{#pragma GCC push_options} and @samp{#pragma GCC pop_options}\n+pragmas are not implemented in GCC versions earlier than 4.4.\n @end table\n \n @table @code\n-@item #pragma GCC optimize reset\n-@cindex pragma GCC optimize\n+@item #pragma GCC reset_options\n+@cindex pragma GCC reset_options\n \n-This pragma clears the current @code{#pragma GCC optimize} to use the\n-default switches as specified on the command line.\n+This pragma clears the current @code{#pragma GCC target} and\n+@code{#pragma GCC optimize} to use the default switches as specified\n+on the command line.\n+\n+The @samp{#pragma GCC reset_options} pragma is not implemented in GCC\n+versions earlier than 4.4.\n @end table\n \n @node Unnamed Fields"}, {"sha": "7f8de5b977287cee56911005433625ac6df1c5d9", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -112,6 +112,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tlhd_builtin_function\n+#define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\tLANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n@@ -272,6 +273,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_FOLD_OBJ_TYPE_REF, \\\n   LANG_HOOKS_BUILTIN_FUNCTION, \\\n+  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE, \\\n   LANG_HOOKS_INIT_TS,          \\\n   LANG_HOOKS_EXPR_TO_DECL, \\\n }"}, {"sha": "4d441029802dc3d7a2b9d5f75ae640e5d0a032ed", "filename": "gcc/langhooks.c", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -540,13 +540,16 @@ lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *c ATTRIBUTE_UNUSED,\n {\n }\n \n-tree\n-add_builtin_function (const char *name,\n-\t\t      tree type,\n-\t\t      int function_code,\n-\t\t      enum built_in_class cl,\n-\t\t      const char *library_name,\n-\t\t      tree attrs)\n+/* Common function for add_builtin_function and\n+   add_builtin_function_ext_scope.  */\n+static tree\n+add_builtin_function_common (const char *name,\n+\t\t\t     tree type,\n+\t\t\t     int function_code,\n+\t\t\t     enum built_in_class cl,\n+\t\t\t     const char *library_name,\n+\t\t\t     tree attrs,\n+\t\t\t     tree (*hook) (tree))\n {\n   tree   id = get_identifier (name);\n   tree decl = build_decl (FUNCTION_DECL, id, type);\n@@ -571,8 +574,43 @@ add_builtin_function (const char *name,\n   else\n     decl_attributes (&decl, NULL_TREE, 0);\n \n-  return lang_hooks.builtin_function (decl);\n+  return hook (decl);\n+\n+}\n+\n+/* Create a builtin function.  */\n+\n+tree\n+add_builtin_function (const char *name,\n+\t\t      tree type,\n+\t\t      int function_code,\n+\t\t      enum built_in_class cl,\n+\t\t      const char *library_name,\n+\t\t      tree attrs)\n+{\n+  return add_builtin_function_common (name, type, function_code, cl,\n+\t\t\t\t      library_name, attrs,\n+\t\t\t\t      lang_hooks.builtin_function);\n+}\n \n+/* Like add_builtin_function, but make sure the scope is the external scope.\n+   This is used to delay putting in back end builtin functions until the ISA\n+   that defines the builtin is declared via function specific target options,\n+   which can save memory for machines like the x86_64 that have multiple ISAs.\n+   If this points to the same function as builtin_function, the backend must\n+   add all of the builtins at program initialization time.  */\n+\n+tree\n+add_builtin_function_ext_scope (const char *name,\n+\t\t\t\ttree type,\n+\t\t\t\tint function_code,\n+\t\t\t\tenum built_in_class cl,\n+\t\t\t\tconst char *library_name,\n+\t\t\t\ttree attrs)\n+{\n+  return add_builtin_function_common (name, type, function_code, cl,\n+\t\t\t\t      library_name, attrs,\n+\t\t\t\t      lang_hooks.builtin_function_ext_scope);\n }\n \n tree"}, {"sha": "a10ce482f5c43304bc7f0bd12b06ba85ae7c1800", "filename": "gcc/langhooks.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -410,6 +410,14 @@ struct lang_hooks\n   /* Do language specific processing in the builtin function DECL  */\n   tree (*builtin_function) (tree decl);\n \n+  /* Like builtin_function, but make sure the scope is the external scope.\n+     This is used to delay putting in back end builtin functions until the ISA\n+     that defines the builtin is declared via function specific target options,\n+     which can save memory for machines like the x86_64 that have multiple\n+     ISAs.  If this points to the same function as builtin_function, the\n+     backend must add all of the builtins at program initialization time.  */\n+  tree (*builtin_function_ext_scope) (tree decl);\n+\n   /* Used to set up the tree_contains_structure array for a frontend. */\n   void (*init_ts) (void);\n \n@@ -429,4 +437,10 @@ extern tree add_builtin_function (const char *name, tree type,\n \t\t\t\t  const char *library_name,\n \t\t\t\t  tree attrs);\n \n+extern tree add_builtin_function_ext_scope (const char *name, tree type,\n+\t\t\t\t\t    int function_code,\n+\t\t\t\t\t    enum built_in_class cl,\n+\t\t\t\t\t    const char *library_name,\n+\t\t\t\t\t    tree attrs);\n+\n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "574379bddce734868f7cdc4f349223419dade8f7", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -71,6 +71,7 @@ function switch_flags (flags)\n \tresult = result \\\n \t  test_flag(\"Common\", flags, \" | CL_COMMON\") \\\n \t  test_flag(\"Target\", flags, \" | CL_TARGET\") \\\n+\t  test_flag(\"Save\", flags, \" | CL_SAVE\") \\\n \t  test_flag(\"Joined\", flags, \" | CL_JOINED\") \\\n \t  test_flag(\"JoinedOrMissing\", flags, \" | CL_JOINED | CL_MISSING_OK\") \\\n \t  test_flag(\"Separate\", flags, \" | CL_SEPARATE\") \\"}, {"sha": "7a51a0e3b527bf28f9d1cdf52f859cf7b3948996", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -65,13 +65,14 @@ extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n \n+#define CL_SAVE\t\t\t(1 << 17) /* Target-specific option for attribute.  */\n #define CL_PARAMS               (1 << 18) /* Fake entry.  Used to display --param info with --help.  */\n #define CL_WARNING\t\t(1 << 19) /* Enables an (optional) warning message.  */\n #define CL_OPTIMIZATION\t\t(1 << 20) /* Enables an (optional) optimization.  */\n #define CL_TARGET\t\t(1 << 21) /* Target-specific option.  */\n #define CL_COMMON\t\t(1 << 22) /* Language-independent.  */\n \n-#define CL_MIN_OPTION_CLASS\tCL_PARAMS\n+#define CL_MIN_OPTION_CLASS\tCL_SAVE\n #define CL_MAX_OPTION_CLASS\tCL_COMMON\n \n /* From here on the bits describe attributes of the options."}, {"sha": "817cae4a1d270c1ff9d7eca1c3c725c55664afcb", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -766,7 +766,8 @@\n \n /* Function specific option attribute support.  */\n #ifndef TARGET_OPTION_VALID_ATTRIBUTE_P\n-#define TARGET_OPTION_VALID_ATTRIBUTE_P NULL\n+#define TARGET_OPTION_VALID_ATTRIBUTE_P \\\n+  default_target_option_valid_attribute_p\n #endif\n \n #ifndef TARGET_OPTION_SAVE\n@@ -782,21 +783,13 @@\n #endif\n \n #ifndef TARGET_OPTION_PRAGMA_PARSE\n-#define TARGET_OPTION_PRAGMA_PARSE NULL\n+#define TARGET_OPTION_PRAGMA_PARSE default_target_option_pragma_parse\n #endif\n \n #ifndef TARGET_OPTION_CAN_INLINE_P\n #define TARGET_OPTION_CAN_INLINE_P default_target_option_can_inline_p\n #endif\n \n-#ifndef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION false\n-#endif\n-\n-#ifndef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n-#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION false\n-#endif\n-\n #define TARGET_OPTION_HOOKS\t\t\t\\\n   {\t\t\t\t\t\t\\\n     TARGET_OPTION_VALID_ATTRIBUTE_P,\t\t\\\n@@ -805,8 +798,6 @@\n     TARGET_OPTION_PRINT,\t\t\t\\\n     TARGET_OPTION_PRAGMA_PARSE,\t\t\t\\\n     TARGET_OPTION_CAN_INLINE_P,\t\t\t\\\n-    TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION, \\\n-    TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION, \\\n   }\n \n /* The whole shebang.  */"}, {"sha": "a44eb921a60f47b66bc09f998eb4d4d45188c0bb", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -991,19 +991,13 @@ struct gcc_target\n     void (*print) (FILE *, int, struct cl_target_option *);\n \n     /* Function to parse arguments to be validated for #pragma option, and to\n-       change the state if the options are valid.  If the arguments are NULL,\n-       use the default target options.  Return true if the options are valid,\n-       and set the current state.  */\n-    bool (*pragma_parse) (tree);\n+       change the state if the options are valid.  If the first argument is\n+       NULL, the second argument specifies the default options to use.  Return\n+       true if the options are valid, and set the current state.  */\n+    bool (*pragma_parse) (tree, tree);\n \n     /* Function to determine if one function can inline another function.  */\n     bool (*can_inline_p) (tree, tree);\n-\n-    /* Whether the cold attribute changes the optimization level.  */\n-    bool cold_attribute_sets_optimization;\n-\n-    /* Whether the hot attribute changes the optimization level.  */\n-    bool hot_attribute_sets_optimization;\n   } target_option;\n \n   /* For targets that need to mark extra registers as live on entry to"}, {"sha": "8edfcfce846b3673a36def919889c2234f96ae1f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -715,6 +715,19 @@ default_target_option_valid_attribute_p (tree ARG_UNUSED (fndecl),\n \t\t\t\t\t tree ARG_UNUSED (args),\n \t\t\t\t\t int ARG_UNUSED (flags))\n {\n+  warning (OPT_Wattributes,\n+\t   \"target attribute is not supported on this machine\");\n+\n+  return false;\n+}\n+\n+bool\n+default_target_option_pragma_parse (tree ARG_UNUSED (args),\n+\t\t\t\t    tree ARG_UNUSED (pop_target))\n+{\n+  warning (OPT_Wpragmas,\n+\t   \"#pragma GCC target is not supported for this machine\");\n+\n   return false;\n }\n "}, {"sha": "f8d75e881c82c549cfe6df68a5307b326002230b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -99,4 +99,5 @@ extern tree default_emutls_var_fields (tree, tree *);\n extern tree default_emutls_var_init (tree, tree, tree);\n extern bool default_hard_regno_scratch_ok (unsigned int);\n extern bool default_target_option_valid_attribute_p (tree, tree, tree, int);\n+extern bool default_target_option_pragma_parse (tree, tree);\n extern bool default_target_option_can_inline_p (tree, tree);"}, {"sha": "4fe45de0b54dd3cf1c60d855ddf0b2dbd850bfaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -1,3 +1,31 @@\n+2008-08-29  Michael Meissner  <gnu@the-meissners.org>\n+\n+\t* gcc.target/i386/sse-22.c: Change #pragma GCC option to #pragma\n+\tGCC target.  Change attribute((option(...))) to\n+\tattribute((target(...))).\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/funcspec-1.c: Ditto.\n+\t* gcc.target/i386/funcspec-2.c: Ditto.\n+\t* gcc.target/i386/funcspec-3.c: Ditto.\n+\t* gcc.target/i386/funcspec-4.c: Ditto.\n+\t* gcc.target/i386/funcspec-5.c: Ditto.\n+\t* gcc.target/i386/funcspec-6.c: Ditto.\n+\t* gcc.target/i386/funcspec-7.c: Ditto.\n+\t* gcc.target/i386/funcspec-8.c: Ditto.\n+\t* gcc.target/i386/funcspec-9.c: Ditto.\n+\t* gcc.target/i386/funcspec-10.c: Ditto.\n+\t* gcc.target/i386/funcspec-11.c: Ditto.\n+\n+\t* gcc.target/i386/cold-1.c: Delete.\n+\t* gcc.target/i386/hot-1.c: Ditto.\n+\n+\t* gcc.dg/pr36997.c: Add -msse2 to the target flags.\n+\n+\t* gcc.target/i386/funcspec-8.c: #pragma GCC option push is now\n+\t#pragma GCC push_options, and #pragma GCC option pop is now\n+\t#pragma GCC pop_options.\n+\t* gcc.target/i386/opt-2.c: Ditto.\n+\n 2008-08-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/mangle-neon.C: Add substitution test."}, {"sha": "b7b892d81765c242f1556d1e2152120851af1ab4", "filename": "gcc/testsuite/gcc.dg/pr36997.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36997.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target x86_64-*-* i?86-*-* } } */\n-/* { dg-options \"-std=c99\" } */\n+/* { dg-options \"-std=c99 -msse2\" } */\n \n typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n __m64 _mm_add_si64 (__m64 __m1, __m64 __m2)"}, {"sha": "bcdc471eb589a437fdafdbe516d9bfba4ead5001", "filename": "gcc/testsuite/gcc.target/i386/cold-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0257eee5bd4700647061f61b13a2f89b2a4b4f28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0257eee5bd4700647061f61b13a2f89b2a4b4f28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-1.c?ref=0257eee5bd4700647061f61b13a2f89b2a4b4f28", "patch": "@@ -1,13 +0,0 @@\n-/* Test whether using attribute((cold)) really turns on -Os.  Do this test\n-   by checking whether strcpy calls the library function rather than doing\n-   the move inline.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -march=k8\" } */\n-/* { dg-final { scan-assembler \"(jmp|call)\\t(.*)strcpy\" } } */\n-\n-void cold (char *) __attribute__((__cold__));\n-\n-void cold (char *a)\n-{\n-  __builtin_strcpy (a, \"testing 1.2.3 testing 1.2.3\");\n-}"}, {"sha": "1416c75f357ef94da8bb928ab2b3eb3adff0055c", "filename": "gcc/testsuite/gcc.target/i386/funcspec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-1.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -15,7 +15,7 @@ static float a[SIZE] __attribute__((__aligned__(16)));\n static float b[SIZE] __attribute__((__aligned__(16)));\n static float c[SIZE] __attribute__((__aligned__(16)));\n \n-void sse_addnums (void) __attribute__ ((__option__ (\"sse2\")));\n+void sse_addnums (void) __attribute__ ((__target__ (\"sse2\")));\n \n void\n sse_addnums (void)"}, {"sha": "9526e7df2eb45f2a579dcdaf79847574f0d5dbff", "filename": "gcc/testsuite/gcc.target/i386/funcspec-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-O2 -march=i686\" } */\n /* { dg-final { scan-assembler-not \"cmov\" } } */\n \n-extern int foo (int) __attribute__((__option__(\"arch=i386\")));\n+extern int foo (int) __attribute__((__target__(\"arch=i386\")));\n \n int\n foo (int x)"}, {"sha": "065ca3ccaa83adce5e345d9bbf2edf19747fa586", "filename": "gcc/testsuite/gcc.target/i386/funcspec-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-O2 -march=i386\" } */\n /* { dg-final { scan-assembler \"cmov\" } } */\n \n-extern int foo (int) __attribute__((__option__(\"arch=i686\")));\n+extern int foo (int) __attribute__((__target__(\"arch=i686\")));\n \n int\n foo (int x)"}, {"sha": "e3628e3028569f16257c12476cd76e692085732c", "filename": "gcc/testsuite/gcc.target/i386/funcspec-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -5,7 +5,7 @@\n \n extern void exit (int);\n \n-#define SSE5_ATTR __attribute__((__option__(\"sse5,fused-madd\")))\n+#define SSE5_ATTR __attribute__((__target__(\"sse5,fused-madd\")))\n extern float  flt_mul_add     (float a, float b, float c) SSE5_ATTR;\n extern float  flt_mul_sub     (float a, float b, float c) SSE5_ATTR;\n extern float  flt_neg_mul_add (float a, float b, float c) SSE5_ATTR;"}, {"sha": "62748beeeffc7f405bd37c038a2473ddfbe42f66", "filename": "gcc/testsuite/gcc.target/i386/funcspec-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -7,8 +7,8 @@\n extern void exit (int);\n extern void abort (void);\n \n-#define SSE4A_ATTR __attribute__((__option__(\"arch=amdfam10\")))\n-#define SSE42_ATTR __attribute__((__option__(\"sse4.2\")))\n+#define SSE4A_ATTR __attribute__((__target__(\"arch=amdfam10\")))\n+#define SSE42_ATTR __attribute__((__target__(\"sse4.2\")))\n \n static int sse4a_pop_i (int a) SSE4A_ATTR;\n static long sse42_pop_l (long a) SSE42_ATTR;"}, {"sha": "98f545a1ce88e58cb6771980b41cd7d9a6aab92f", "filename": "gcc/testsuite/gcc.target/i386/funcspec-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -2,13 +2,13 @@\n /* { dg-do compile } */\n \n /* no sse500 switch */\n-extern void error1 (void) __attribute__((__option__(\"sse500\"))); /* { dg-error \"unknown\" } */\n+extern void error1 (void) __attribute__((__target__(\"sse500\"))); /* { dg-error \"unknown\" } */\n \n /* Multiple arch switches */\n-extern void error2 (void) __attribute__((__option__(\"arch=core2,arch=k8\"))); /* { dg-error \"already specified\" } */\n+extern void error2 (void) __attribute__((__target__(\"arch=core2,arch=k8\"))); /* { dg-error \"already specified\" } */\n \n /* Unknown tune target */\n-extern void error3 (void) __attribute__((__option__(\"tune=foobar\"))); /* { dg-error \"bad value\" } */\n+extern void error3 (void) __attribute__((__target__(\"tune=foobar\"))); /* { dg-error \"bad value\" } */\n \n /* option on a variable */\n-extern int error4 __attribute__((__option__(\"sse2\"))); /* { dg-warning \"ignored\" } */\n+extern int error4 __attribute__((__target__(\"sse2\"))); /* { dg-warning \"ignored\" } */"}, {"sha": "378dca5f51c32cd039313b23775e8c9d983998b1", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 116, "deletions": 116, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -3,123 +3,123 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n \n-extern void test_abm (void)\t\t\t__attribute__((__option__(\"abm\")));\n-extern void test_aes (void)\t\t\t__attribute__((__option__(\"aes\")));\n-extern void test_fused_madd (void)\t\t__attribute__((__option__(\"fused-madd\")));\n-extern void test_mmx (void)\t\t\t__attribute__((__option__(\"mmx\")));\n-extern void test_pclmul (void)\t\t\t__attribute__((__option__(\"pclmul\")));\n-extern void test_popcnt (void)\t\t\t__attribute__((__option__(\"popcnt\")));\n-extern void test_recip (void)\t\t\t__attribute__((__option__(\"recip\")));\n-extern void test_sse (void)\t\t\t__attribute__((__option__(\"sse\")));\n-extern void test_sse2 (void)\t\t\t__attribute__((__option__(\"sse2\")));\n-extern void test_sse3 (void)\t\t\t__attribute__((__option__(\"sse3\")));\n-extern void test_sse4 (void)\t\t\t__attribute__((__option__(\"sse4\")));\n-extern void test_sse4_1 (void)\t\t\t__attribute__((__option__(\"sse4.1\")));\n-extern void test_sse4_2 (void)\t\t\t__attribute__((__option__(\"sse4.2\")));\n-extern void test_sse4a (void)\t\t\t__attribute__((__option__(\"sse4a\")));\n-extern void test_sse5 (void)\t\t\t__attribute__((__option__(\"sse5\")));\n-extern void test_ssse3 (void)\t\t\t__attribute__((__option__(\"ssse3\")));\n+extern void test_abm (void)\t\t\t__attribute__((__target__(\"abm\")));\n+extern void test_aes (void)\t\t\t__attribute__((__target__(\"aes\")));\n+extern void test_fused_madd (void)\t\t__attribute__((__target__(\"fused-madd\")));\n+extern void test_mmx (void)\t\t\t__attribute__((__target__(\"mmx\")));\n+extern void test_pclmul (void)\t\t\t__attribute__((__target__(\"pclmul\")));\n+extern void test_popcnt (void)\t\t\t__attribute__((__target__(\"popcnt\")));\n+extern void test_recip (void)\t\t\t__attribute__((__target__(\"recip\")));\n+extern void test_sse (void)\t\t\t__attribute__((__target__(\"sse\")));\n+extern void test_sse2 (void)\t\t\t__attribute__((__target__(\"sse2\")));\n+extern void test_sse3 (void)\t\t\t__attribute__((__target__(\"sse3\")));\n+extern void test_sse4 (void)\t\t\t__attribute__((__target__(\"sse4\")));\n+extern void test_sse4_1 (void)\t\t\t__attribute__((__target__(\"sse4.1\")));\n+extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n+extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n+extern void test_sse5 (void)\t\t\t__attribute__((__target__(\"sse5\")));\n+extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n-extern void test_no_abm (void)\t\t\t__attribute__((__option__(\"no-abm\")));\n-extern void test_no_aes (void)\t\t\t__attribute__((__option__(\"no-aes\")));\n-extern void test_no_fused_madd (void)\t\t__attribute__((__option__(\"no-fused-madd\")));\n-extern void test_no_mmx (void)\t\t\t__attribute__((__option__(\"no-mmx\")));\n-extern void test_no_pclmul (void)\t\t__attribute__((__option__(\"no-pclmul\")));\n-extern void test_no_popcnt (void)\t\t__attribute__((__option__(\"no-popcnt\")));\n-extern void test_no_recip (void)\t\t__attribute__((__option__(\"no-recip\")));\n-extern void test_no_sse (void)\t\t\t__attribute__((__option__(\"no-sse\")));\n-extern void test_no_sse2 (void)\t\t\t__attribute__((__option__(\"no-sse2\")));\n-extern void test_no_sse3 (void)\t\t\t__attribute__((__option__(\"no-sse3\")));\n-extern void test_no_sse4 (void)\t\t\t__attribute__((__option__(\"no-sse4\")));\n-extern void test_no_sse4_1 (void)\t\t__attribute__((__option__(\"no-sse4.1\")));\n-extern void test_no_sse4_2 (void)\t\t__attribute__((__option__(\"no-sse4.2\")));\n-extern void test_no_sse4a (void)\t\t__attribute__((__option__(\"no-sse4a\")));\n-extern void test_no_sse5 (void)\t\t\t__attribute__((__option__(\"no-sse5\")));\n-extern void test_no_ssse3 (void)\t\t__attribute__((__option__(\"no-ssse3\")));\n+extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n+extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n+extern void test_no_fused_madd (void)\t\t__attribute__((__target__(\"no-fused-madd\")));\n+extern void test_no_mmx (void)\t\t\t__attribute__((__target__(\"no-mmx\")));\n+extern void test_no_pclmul (void)\t\t__attribute__((__target__(\"no-pclmul\")));\n+extern void test_no_popcnt (void)\t\t__attribute__((__target__(\"no-popcnt\")));\n+extern void test_no_recip (void)\t\t__attribute__((__target__(\"no-recip\")));\n+extern void test_no_sse (void)\t\t\t__attribute__((__target__(\"no-sse\")));\n+extern void test_no_sse2 (void)\t\t\t__attribute__((__target__(\"no-sse2\")));\n+extern void test_no_sse3 (void)\t\t\t__attribute__((__target__(\"no-sse3\")));\n+extern void test_no_sse4 (void)\t\t\t__attribute__((__target__(\"no-sse4\")));\n+extern void test_no_sse4_1 (void)\t\t__attribute__((__target__(\"no-sse4.1\")));\n+extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n+extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n+extern void test_no_sse5 (void)\t\t\t__attribute__((__target__(\"no-sse5\")));\n+extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n \n-extern void test_arch_i386 (void)\t\t__attribute__((__option__(\"arch=i386\")));\n-extern void test_arch_i486 (void)\t\t__attribute__((__option__(\"arch=i486\")));\n-extern void test_arch_i586 (void)\t\t__attribute__((__option__(\"arch=i586\")));\n-extern void test_arch_pentium (void)\t\t__attribute__((__option__(\"arch=pentium\")));\n-extern void test_arch_pentium_mmx (void)\t__attribute__((__option__(\"arch=pentium-mmx\")));\n-extern void test_arch_winchip_c6 (void)\t\t__attribute__((__option__(\"arch=winchip-c6\")));\n-extern void test_arch_winchip2 (void)\t\t__attribute__((__option__(\"arch=winchip2\")));\n-extern void test_arch_c3 (void)\t\t\t__attribute__((__option__(\"arch=c3\")));\n-extern void test_arch_c3_2 (void)\t\t__attribute__((__option__(\"arch=c3-2\")));\n-extern void test_arch_i686 (void)\t\t__attribute__((__option__(\"arch=i686\")));\n-extern void test_arch_pentiumpro (void)\t\t__attribute__((__option__(\"arch=pentiumpro\")));\n-extern void test_arch_pentium2 (void)\t\t__attribute__((__option__(\"arch=pentium2\")));\n-extern void test_arch_pentium3 (void)\t\t__attribute__((__option__(\"arch=pentium3\")));\n-extern void test_arch_pentium3m (void)\t\t__attribute__((__option__(\"arch=pentium3m\")));\n-extern void test_arch_pentium_m (void)\t\t__attribute__((__option__(\"arch=pentium-m\")));\n-extern void test_arch_pentium4 (void)\t\t__attribute__((__option__(\"arch=pentium4\")));\n-extern void test_arch_pentium4m (void)\t\t__attribute__((__option__(\"arch=pentium4m\")));\n-extern void test_arch_prescott (void)\t\t__attribute__((__option__(\"arch=prescott\")));\n-extern void test_arch_nocona (void)\t\t__attribute__((__option__(\"arch=nocona\")));\n-extern void test_arch_core2 (void)\t\t__attribute__((__option__(\"arch=core2\")));\n-extern void test_arch_geode (void)\t\t__attribute__((__option__(\"arch=geode\")));\n-extern void test_arch_k6 (void)\t\t\t__attribute__((__option__(\"arch=k6\")));\n-extern void test_arch_k6_2 (void)\t\t__attribute__((__option__(\"arch=k6-2\")));\n-extern void test_arch_k6_3 (void)\t\t__attribute__((__option__(\"arch=k6-3\")));\n-extern void test_arch_athlon (void)\t\t__attribute__((__option__(\"arch=athlon\")));\n-extern void test_arch_athlon_tbird (void)\t__attribute__((__option__(\"arch=athlon-tbird\")));\n-extern void test_arch_athlon_4 (void)\t\t__attribute__((__option__(\"arch=athlon-4\")));\n-extern void test_arch_athlon_xp (void)\t\t__attribute__((__option__(\"arch=athlon-xp\")));\n-extern void test_arch_athlon_mp (void)\t\t__attribute__((__option__(\"arch=athlon-mp\")));\n-extern void test_arch_k8 (void)\t\t\t__attribute__((__option__(\"arch=k8\")));\n-extern void test_arch_k8_sse3 (void)\t\t__attribute__((__option__(\"arch=k8-sse3\")));\n-extern void test_arch_opteron (void)\t\t__attribute__((__option__(\"arch=opteron\")));\n-extern void test_arch_opteron_sse3 (void)\t__attribute__((__option__(\"arch=opteron-sse3\")));\n-extern void test_arch_athlon64 (void)\t\t__attribute__((__option__(\"arch=athlon64\")));\n-extern void test_arch_athlon64_sse3 (void)\t__attribute__((__option__(\"arch=athlon64-sse3\")));\n-extern void test_arch_athlon_fx (void)\t\t__attribute__((__option__(\"arch=athlon-fx\")));\n-extern void test_arch_amdfam10 (void)\t\t__attribute__((__option__(\"arch=amdfam10\")));\n-extern void test_arch_barcelona (void)\t\t__attribute__((__option__(\"arch=barcelona\")));\n-extern void test_arch_foo (void)\t\t__attribute__((__option__(\"arch=foo\"))); /* { dg-error \"bad value\" } */\n+extern void test_arch_i386 (void)\t\t__attribute__((__target__(\"arch=i386\")));\n+extern void test_arch_i486 (void)\t\t__attribute__((__target__(\"arch=i486\")));\n+extern void test_arch_i586 (void)\t\t__attribute__((__target__(\"arch=i586\")));\n+extern void test_arch_pentium (void)\t\t__attribute__((__target__(\"arch=pentium\")));\n+extern void test_arch_pentium_mmx (void)\t__attribute__((__target__(\"arch=pentium-mmx\")));\n+extern void test_arch_winchip_c6 (void)\t\t__attribute__((__target__(\"arch=winchip-c6\")));\n+extern void test_arch_winchip2 (void)\t\t__attribute__((__target__(\"arch=winchip2\")));\n+extern void test_arch_c3 (void)\t\t\t__attribute__((__target__(\"arch=c3\")));\n+extern void test_arch_c3_2 (void)\t\t__attribute__((__target__(\"arch=c3-2\")));\n+extern void test_arch_i686 (void)\t\t__attribute__((__target__(\"arch=i686\")));\n+extern void test_arch_pentiumpro (void)\t\t__attribute__((__target__(\"arch=pentiumpro\")));\n+extern void test_arch_pentium2 (void)\t\t__attribute__((__target__(\"arch=pentium2\")));\n+extern void test_arch_pentium3 (void)\t\t__attribute__((__target__(\"arch=pentium3\")));\n+extern void test_arch_pentium3m (void)\t\t__attribute__((__target__(\"arch=pentium3m\")));\n+extern void test_arch_pentium_m (void)\t\t__attribute__((__target__(\"arch=pentium-m\")));\n+extern void test_arch_pentium4 (void)\t\t__attribute__((__target__(\"arch=pentium4\")));\n+extern void test_arch_pentium4m (void)\t\t__attribute__((__target__(\"arch=pentium4m\")));\n+extern void test_arch_prescott (void)\t\t__attribute__((__target__(\"arch=prescott\")));\n+extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n+extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));\n+extern void test_arch_geode (void)\t\t__attribute__((__target__(\"arch=geode\")));\n+extern void test_arch_k6 (void)\t\t\t__attribute__((__target__(\"arch=k6\")));\n+extern void test_arch_k6_2 (void)\t\t__attribute__((__target__(\"arch=k6-2\")));\n+extern void test_arch_k6_3 (void)\t\t__attribute__((__target__(\"arch=k6-3\")));\n+extern void test_arch_athlon (void)\t\t__attribute__((__target__(\"arch=athlon\")));\n+extern void test_arch_athlon_tbird (void)\t__attribute__((__target__(\"arch=athlon-tbird\")));\n+extern void test_arch_athlon_4 (void)\t\t__attribute__((__target__(\"arch=athlon-4\")));\n+extern void test_arch_athlon_xp (void)\t\t__attribute__((__target__(\"arch=athlon-xp\")));\n+extern void test_arch_athlon_mp (void)\t\t__attribute__((__target__(\"arch=athlon-mp\")));\n+extern void test_arch_k8 (void)\t\t\t__attribute__((__target__(\"arch=k8\")));\n+extern void test_arch_k8_sse3 (void)\t\t__attribute__((__target__(\"arch=k8-sse3\")));\n+extern void test_arch_opteron (void)\t\t__attribute__((__target__(\"arch=opteron\")));\n+extern void test_arch_opteron_sse3 (void)\t__attribute__((__target__(\"arch=opteron-sse3\")));\n+extern void test_arch_athlon64 (void)\t\t__attribute__((__target__(\"arch=athlon64\")));\n+extern void test_arch_athlon64_sse3 (void)\t__attribute__((__target__(\"arch=athlon64-sse3\")));\n+extern void test_arch_athlon_fx (void)\t\t__attribute__((__target__(\"arch=athlon-fx\")));\n+extern void test_arch_amdfam10 (void)\t\t__attribute__((__target__(\"arch=amdfam10\")));\n+extern void test_arch_barcelona (void)\t\t__attribute__((__target__(\"arch=barcelona\")));\n+extern void test_arch_foo (void)\t\t__attribute__((__target__(\"arch=foo\"))); /* { dg-error \"bad value\" } */\n \n-extern void test_tune_i386 (void)\t\t__attribute__((__option__(\"tune=i386\")));\n-extern void test_tune_i486 (void)\t\t__attribute__((__option__(\"tune=i486\")));\n-extern void test_tune_i586 (void)\t\t__attribute__((__option__(\"tune=i586\")));\n-extern void test_tune_pentium (void)\t\t__attribute__((__option__(\"tune=pentium\")));\n-extern void test_tune_pentium_mmx (void)\t__attribute__((__option__(\"tune=pentium-mmx\")));\n-extern void test_tune_winchip_c6 (void)\t\t__attribute__((__option__(\"tune=winchip-c6\")));\n-extern void test_tune_winchip2 (void)\t\t__attribute__((__option__(\"tune=winchip2\")));\n-extern void test_tune_c3 (void)\t\t\t__attribute__((__option__(\"tune=c3\")));\n-extern void test_tune_c3_2 (void)\t\t__attribute__((__option__(\"tune=c3-2\")));\n-extern void test_tune_i686 (void)\t\t__attribute__((__option__(\"tune=i686\")));\n-extern void test_tune_pentiumpro (void)\t\t__attribute__((__option__(\"tune=pentiumpro\")));\n-extern void test_tune_pentium2 (void)\t\t__attribute__((__option__(\"tune=pentium2\")));\n-extern void test_tune_pentium3 (void)\t\t__attribute__((__option__(\"tune=pentium3\")));\n-extern void test_tune_pentium3m (void)\t\t__attribute__((__option__(\"tune=pentium3m\")));\n-extern void test_tune_pentium_m (void)\t\t__attribute__((__option__(\"tune=pentium-m\")));\n-extern void test_tune_pentium4 (void)\t\t__attribute__((__option__(\"tune=pentium4\")));\n-extern void test_tune_pentium4m (void)\t\t__attribute__((__option__(\"tune=pentium4m\")));\n-extern void test_tune_prescott (void)\t\t__attribute__((__option__(\"tune=prescott\")));\n-extern void test_tune_nocona (void)\t\t__attribute__((__option__(\"tune=nocona\")));\n-extern void test_tune_core2 (void)\t\t__attribute__((__option__(\"tune=core2\")));\n-extern void test_tune_geode (void)\t\t__attribute__((__option__(\"tune=geode\")));\n-extern void test_tune_k6 (void)\t\t\t__attribute__((__option__(\"tune=k6\")));\n-extern void test_tune_k6_2 (void)\t\t__attribute__((__option__(\"tune=k6-2\")));\n-extern void test_tune_k6_3 (void)\t\t__attribute__((__option__(\"tune=k6-3\")));\n-extern void test_tune_athlon (void)\t\t__attribute__((__option__(\"tune=athlon\")));\n-extern void test_tune_athlon_tbird (void)\t__attribute__((__option__(\"tune=athlon-tbird\")));\n-extern void test_tune_athlon_4 (void)\t\t__attribute__((__option__(\"tune=athlon-4\")));\n-extern void test_tune_athlon_xp (void)\t\t__attribute__((__option__(\"tune=athlon-xp\")));\n-extern void test_tune_athlon_mp (void)\t\t__attribute__((__option__(\"tune=athlon-mp\")));\n-extern void test_tune_k8 (void)\t\t\t__attribute__((__option__(\"tune=k8\")));\n-extern void test_tune_k8_sse3 (void)\t\t__attribute__((__option__(\"tune=k8-sse3\")));\n-extern void test_tune_opteron (void)\t\t__attribute__((__option__(\"tune=opteron\")));\n-extern void test_tune_opteron_sse3 (void)\t__attribute__((__option__(\"tune=opteron-sse3\")));\n-extern void test_tune_athlon64 (void)\t\t__attribute__((__option__(\"tune=athlon64\")));\n-extern void test_tune_athlon64_sse3 (void)\t__attribute__((__option__(\"tune=athlon64-sse3\")));\n-extern void test_tune_athlon_fx (void)\t\t__attribute__((__option__(\"tune=athlon-fx\")));\n-extern void test_tune_amdfam10 (void)\t\t__attribute__((__option__(\"tune=amdfam10\")));\n-extern void test_tune_barcelona (void)\t\t__attribute__((__option__(\"tune=barcelona\")));\n-extern void test_tune_generic (void)\t\t__attribute__((__option__(\"tune=generic\")));\n-extern void test_tune_foo (void)\t\t__attribute__((__option__(\"tune=foo\"))); /* { dg-error \"bad value\" } */\n+extern void test_tune_i386 (void)\t\t__attribute__((__target__(\"tune=i386\")));\n+extern void test_tune_i486 (void)\t\t__attribute__((__target__(\"tune=i486\")));\n+extern void test_tune_i586 (void)\t\t__attribute__((__target__(\"tune=i586\")));\n+extern void test_tune_pentium (void)\t\t__attribute__((__target__(\"tune=pentium\")));\n+extern void test_tune_pentium_mmx (void)\t__attribute__((__target__(\"tune=pentium-mmx\")));\n+extern void test_tune_winchip_c6 (void)\t\t__attribute__((__target__(\"tune=winchip-c6\")));\n+extern void test_tune_winchip2 (void)\t\t__attribute__((__target__(\"tune=winchip2\")));\n+extern void test_tune_c3 (void)\t\t\t__attribute__((__target__(\"tune=c3\")));\n+extern void test_tune_c3_2 (void)\t\t__attribute__((__target__(\"tune=c3-2\")));\n+extern void test_tune_i686 (void)\t\t__attribute__((__target__(\"tune=i686\")));\n+extern void test_tune_pentiumpro (void)\t\t__attribute__((__target__(\"tune=pentiumpro\")));\n+extern void test_tune_pentium2 (void)\t\t__attribute__((__target__(\"tune=pentium2\")));\n+extern void test_tune_pentium3 (void)\t\t__attribute__((__target__(\"tune=pentium3\")));\n+extern void test_tune_pentium3m (void)\t\t__attribute__((__target__(\"tune=pentium3m\")));\n+extern void test_tune_pentium_m (void)\t\t__attribute__((__target__(\"tune=pentium-m\")));\n+extern void test_tune_pentium4 (void)\t\t__attribute__((__target__(\"tune=pentium4\")));\n+extern void test_tune_pentium4m (void)\t\t__attribute__((__target__(\"tune=pentium4m\")));\n+extern void test_tune_prescott (void)\t\t__attribute__((__target__(\"tune=prescott\")));\n+extern void test_tune_nocona (void)\t\t__attribute__((__target__(\"tune=nocona\")));\n+extern void test_tune_core2 (void)\t\t__attribute__((__target__(\"tune=core2\")));\n+extern void test_tune_geode (void)\t\t__attribute__((__target__(\"tune=geode\")));\n+extern void test_tune_k6 (void)\t\t\t__attribute__((__target__(\"tune=k6\")));\n+extern void test_tune_k6_2 (void)\t\t__attribute__((__target__(\"tune=k6-2\")));\n+extern void test_tune_k6_3 (void)\t\t__attribute__((__target__(\"tune=k6-3\")));\n+extern void test_tune_athlon (void)\t\t__attribute__((__target__(\"tune=athlon\")));\n+extern void test_tune_athlon_tbird (void)\t__attribute__((__target__(\"tune=athlon-tbird\")));\n+extern void test_tune_athlon_4 (void)\t\t__attribute__((__target__(\"tune=athlon-4\")));\n+extern void test_tune_athlon_xp (void)\t\t__attribute__((__target__(\"tune=athlon-xp\")));\n+extern void test_tune_athlon_mp (void)\t\t__attribute__((__target__(\"tune=athlon-mp\")));\n+extern void test_tune_k8 (void)\t\t\t__attribute__((__target__(\"tune=k8\")));\n+extern void test_tune_k8_sse3 (void)\t\t__attribute__((__target__(\"tune=k8-sse3\")));\n+extern void test_tune_opteron (void)\t\t__attribute__((__target__(\"tune=opteron\")));\n+extern void test_tune_opteron_sse3 (void)\t__attribute__((__target__(\"tune=opteron-sse3\")));\n+extern void test_tune_athlon64 (void)\t\t__attribute__((__target__(\"tune=athlon64\")));\n+extern void test_tune_athlon64_sse3 (void)\t__attribute__((__target__(\"tune=athlon64-sse3\")));\n+extern void test_tune_athlon_fx (void)\t\t__attribute__((__target__(\"tune=athlon-fx\")));\n+extern void test_tune_amdfam10 (void)\t\t__attribute__((__target__(\"tune=amdfam10\")));\n+extern void test_tune_barcelona (void)\t\t__attribute__((__target__(\"tune=barcelona\")));\n+extern void test_tune_generic (void)\t\t__attribute__((__target__(\"tune=generic\")));\n+extern void test_tune_foo (void)\t\t__attribute__((__target__(\"tune=foo\"))); /* { dg-error \"bad value\" } */\n \n-extern void test_fpmath_sse (void)\t\t__attribute__((__option__(\"sse2,fpmath=sse\")));\n-extern void test_fpmath_387 (void)\t\t__attribute__((__option__(\"sse2,fpmath=387\")));\n-extern void test_fpmath_sse_387 (void)\t\t__attribute__((__option__(\"sse2,fpmath=sse+387\")));\n-extern void test_fpmath_387_sse (void)\t\t__attribute__((__option__(\"sse2,fpmath=387+sse\")));\n-extern void test_fpmath_both (void)\t\t__attribute__((__option__(\"sse2,fpmath=both\")));\n+extern void test_fpmath_sse (void)\t\t__attribute__((__target__(\"sse2,fpmath=sse\")));\n+extern void test_fpmath_387 (void)\t\t__attribute__((__target__(\"sse2,fpmath=387\")));\n+extern void test_fpmath_sse_387 (void)\t\t__attribute__((__target__(\"sse2,fpmath=sse+387\")));\n+extern void test_fpmath_387_sse (void)\t\t__attribute__((__target__(\"sse2,fpmath=387+sse\")));\n+extern void test_fpmath_both (void)\t\t__attribute__((__target__(\"sse2,fpmath=both\")));"}, {"sha": "6b526c2dcc35b0d2bc230dd87ca9241faa736e56", "filename": "gcc/testsuite/gcc.target/i386/funcspec-6.c", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -3,69 +3,69 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n \n-extern void test_abm (void)\t\t\t__attribute__((__option__(\"abm\")));\n-extern void test_aes (void)\t\t\t__attribute__((__option__(\"aes\")));\n-extern void test_fused_madd (void)\t\t__attribute__((__option__(\"fused-madd\")));\n-extern void test_mmx (void)\t\t\t__attribute__((__option__(\"mmx\")));\n-extern void test_pclmul (void)\t\t\t__attribute__((__option__(\"pclmul\")));\n-extern void test_popcnt (void)\t\t\t__attribute__((__option__(\"popcnt\")));\n-extern void test_recip (void)\t\t\t__attribute__((__option__(\"recip\")));\n-extern void test_sse (void)\t\t\t__attribute__((__option__(\"sse\")));\n-extern void test_sse2 (void)\t\t\t__attribute__((__option__(\"sse2\")));\n-extern void test_sse3 (void)\t\t\t__attribute__((__option__(\"sse3\")));\n-extern void test_sse4 (void)\t\t\t__attribute__((__option__(\"sse4\")));\n-extern void test_sse4_1 (void)\t\t\t__attribute__((__option__(\"sse4.1\")));\n-extern void test_sse4_2 (void)\t\t\t__attribute__((__option__(\"sse4.2\")));\n-extern void test_sse4a (void)\t\t\t__attribute__((__option__(\"sse4a\")));\n-extern void test_sse5 (void)\t\t\t__attribute__((__option__(\"sse5\")));\n-extern void test_ssse3 (void)\t\t\t__attribute__((__option__(\"ssse3\")));\n+extern void test_abm (void)\t\t\t__attribute__((__target__(\"abm\")));\n+extern void test_aes (void)\t\t\t__attribute__((__target__(\"aes\")));\n+extern void test_fused_madd (void)\t\t__attribute__((__target__(\"fused-madd\")));\n+extern void test_mmx (void)\t\t\t__attribute__((__target__(\"mmx\")));\n+extern void test_pclmul (void)\t\t\t__attribute__((__target__(\"pclmul\")));\n+extern void test_popcnt (void)\t\t\t__attribute__((__target__(\"popcnt\")));\n+extern void test_recip (void)\t\t\t__attribute__((__target__(\"recip\")));\n+extern void test_sse (void)\t\t\t__attribute__((__target__(\"sse\")));\n+extern void test_sse2 (void)\t\t\t__attribute__((__target__(\"sse2\")));\n+extern void test_sse3 (void)\t\t\t__attribute__((__target__(\"sse3\")));\n+extern void test_sse4 (void)\t\t\t__attribute__((__target__(\"sse4\")));\n+extern void test_sse4_1 (void)\t\t\t__attribute__((__target__(\"sse4.1\")));\n+extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n+extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n+extern void test_sse5 (void)\t\t\t__attribute__((__target__(\"sse5\")));\n+extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n-extern void test_no_abm (void)\t\t\t__attribute__((__option__(\"no-abm\")));\n-extern void test_no_aes (void)\t\t\t__attribute__((__option__(\"no-aes\")));\n-extern void test_no_fused_madd (void)\t\t__attribute__((__option__(\"no-fused-madd\")));\n-extern void test_no_mmx (void)\t\t\t__attribute__((__option__(\"no-mmx\")));\n-extern void test_no_pclmul (void)\t\t__attribute__((__option__(\"no-pclmul\")));\n-extern void test_no_popcnt (void)\t\t__attribute__((__option__(\"no-popcnt\")));\n-extern void test_no_recip (void)\t\t__attribute__((__option__(\"no-recip\")));\n-extern void test_no_sse (void)\t\t\t__attribute__((__option__(\"no-sse\")));\n-extern void test_no_sse2 (void)\t\t\t__attribute__((__option__(\"no-sse2\")));\n-extern void test_no_sse3 (void)\t\t\t__attribute__((__option__(\"no-sse3\")));\n-extern void test_no_sse4 (void)\t\t\t__attribute__((__option__(\"no-sse4\")));\n-extern void test_no_sse4_1 (void)\t\t__attribute__((__option__(\"no-sse4.1\")));\n-extern void test_no_sse4_2 (void)\t\t__attribute__((__option__(\"no-sse4.2\")));\n-extern void test_no_sse4a (void)\t\t__attribute__((__option__(\"no-sse4a\")));\n-extern void test_no_sse5 (void)\t\t\t__attribute__((__option__(\"no-sse5\")));\n-extern void test_no_ssse3 (void)\t\t__attribute__((__option__(\"no-ssse3\")));\n+extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n+extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n+extern void test_no_fused_madd (void)\t\t__attribute__((__target__(\"no-fused-madd\")));\n+extern void test_no_mmx (void)\t\t\t__attribute__((__target__(\"no-mmx\")));\n+extern void test_no_pclmul (void)\t\t__attribute__((__target__(\"no-pclmul\")));\n+extern void test_no_popcnt (void)\t\t__attribute__((__target__(\"no-popcnt\")));\n+extern void test_no_recip (void)\t\t__attribute__((__target__(\"no-recip\")));\n+extern void test_no_sse (void)\t\t\t__attribute__((__target__(\"no-sse\")));\n+extern void test_no_sse2 (void)\t\t\t__attribute__((__target__(\"no-sse2\")));\n+extern void test_no_sse3 (void)\t\t\t__attribute__((__target__(\"no-sse3\")));\n+extern void test_no_sse4 (void)\t\t\t__attribute__((__target__(\"no-sse4\")));\n+extern void test_no_sse4_1 (void)\t\t__attribute__((__target__(\"no-sse4.1\")));\n+extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n+extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n+extern void test_no_sse5 (void)\t\t\t__attribute__((__target__(\"no-sse5\")));\n+extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n \n-extern void test_arch_nocona (void)\t\t__attribute__((__option__(\"arch=nocona\")));\n-extern void test_arch_core2 (void)\t\t__attribute__((__option__(\"arch=core2\")));\n-extern void test_arch_k8 (void)\t\t\t__attribute__((__option__(\"arch=k8\")));\n-extern void test_arch_k8_sse3 (void)\t\t__attribute__((__option__(\"arch=k8-sse3\")));\n-extern void test_arch_opteron (void)\t\t__attribute__((__option__(\"arch=opteron\")));\n-extern void test_arch_opteron_sse3 (void)\t__attribute__((__option__(\"arch=opteron-sse3\")));\n-extern void test_arch_athlon64 (void)\t\t__attribute__((__option__(\"arch=athlon64\")));\n-extern void test_arch_athlon64_sse3 (void)\t__attribute__((__option__(\"arch=athlon64-sse3\")));\n-extern void test_arch_athlon_fx (void)\t\t__attribute__((__option__(\"arch=athlon-fx\")));\n-extern void test_arch_amdfam10 (void)\t\t__attribute__((__option__(\"arch=amdfam10\")));\n-extern void test_arch_barcelona (void)\t\t__attribute__((__option__(\"arch=barcelona\")));\n-extern void test_arch_foo (void)\t\t__attribute__((__option__(\"arch=foo\"))); /* { dg-error \"bad value\" } */\n+extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n+extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));\n+extern void test_arch_k8 (void)\t\t\t__attribute__((__target__(\"arch=k8\")));\n+extern void test_arch_k8_sse3 (void)\t\t__attribute__((__target__(\"arch=k8-sse3\")));\n+extern void test_arch_opteron (void)\t\t__attribute__((__target__(\"arch=opteron\")));\n+extern void test_arch_opteron_sse3 (void)\t__attribute__((__target__(\"arch=opteron-sse3\")));\n+extern void test_arch_athlon64 (void)\t\t__attribute__((__target__(\"arch=athlon64\")));\n+extern void test_arch_athlon64_sse3 (void)\t__attribute__((__target__(\"arch=athlon64-sse3\")));\n+extern void test_arch_athlon_fx (void)\t\t__attribute__((__target__(\"arch=athlon-fx\")));\n+extern void test_arch_amdfam10 (void)\t\t__attribute__((__target__(\"arch=amdfam10\")));\n+extern void test_arch_barcelona (void)\t\t__attribute__((__target__(\"arch=barcelona\")));\n+extern void test_arch_foo (void)\t\t__attribute__((__target__(\"arch=foo\"))); /* { dg-error \"bad value\" } */\n \n-extern void test_tune_nocona (void)\t\t__attribute__((__option__(\"tune=nocona\")));\n-extern void test_tune_core2 (void)\t\t__attribute__((__option__(\"tune=core2\")));\n-extern void test_tune_k8 (void)\t\t\t__attribute__((__option__(\"tune=k8\")));\n-extern void test_tune_k8_sse3 (void)\t\t__attribute__((__option__(\"tune=k8-sse3\")));\n-extern void test_tune_opteron (void)\t\t__attribute__((__option__(\"tune=opteron\")));\n-extern void test_tune_opteron_sse3 (void)\t__attribute__((__option__(\"tune=opteron-sse3\")));\n-extern void test_tune_athlon64 (void)\t\t__attribute__((__option__(\"tune=athlon64\")));\n-extern void test_tune_athlon64_sse3 (void)\t__attribute__((__option__(\"tune=athlon64-sse3\")));\n-extern void test_tune_athlon_fx (void)\t\t__attribute__((__option__(\"tune=athlon-fx\")));\n-extern void test_tune_amdfam10 (void)\t\t__attribute__((__option__(\"tune=amdfam10\")));\n-extern void test_tune_barcelona (void)\t\t__attribute__((__option__(\"tune=barcelona\")));\n-extern void test_tune_generic (void)\t\t__attribute__((__option__(\"tune=generic\")));\n-extern void test_tune_foo (void)\t\t__attribute__((__option__(\"tune=foo\"))); /* { dg-error \"bad value\" } */\n+extern void test_tune_nocona (void)\t\t__attribute__((__target__(\"tune=nocona\")));\n+extern void test_tune_core2 (void)\t\t__attribute__((__target__(\"tune=core2\")));\n+extern void test_tune_k8 (void)\t\t\t__attribute__((__target__(\"tune=k8\")));\n+extern void test_tune_k8_sse3 (void)\t\t__attribute__((__target__(\"tune=k8-sse3\")));\n+extern void test_tune_opteron (void)\t\t__attribute__((__target__(\"tune=opteron\")));\n+extern void test_tune_opteron_sse3 (void)\t__attribute__((__target__(\"tune=opteron-sse3\")));\n+extern void test_tune_athlon64 (void)\t\t__attribute__((__target__(\"tune=athlon64\")));\n+extern void test_tune_athlon64_sse3 (void)\t__attribute__((__target__(\"tune=athlon64-sse3\")));\n+extern void test_tune_athlon_fx (void)\t\t__attribute__((__target__(\"tune=athlon-fx\")));\n+extern void test_tune_amdfam10 (void)\t\t__attribute__((__target__(\"tune=amdfam10\")));\n+extern void test_tune_barcelona (void)\t\t__attribute__((__target__(\"tune=barcelona\")));\n+extern void test_tune_generic (void)\t\t__attribute__((__target__(\"tune=generic\")));\n+extern void test_tune_foo (void)\t\t__attribute__((__target__(\"tune=foo\"))); /* { dg-error \"bad value\" } */\n \n-extern void test_fpmath_sse (void)\t\t__attribute__((__option__(\"sse2,fpmath=sse\")));\n-extern void test_fpmath_387 (void)\t\t__attribute__((__option__(\"sse2,fpmath=387\")));\n-extern void test_fpmath_sse_387 (void)\t\t__attribute__((__option__(\"sse2,fpmath=sse+387\")));\n-extern void test_fpmath_387_sse (void)\t\t__attribute__((__option__(\"sse2,fpmath=387+sse\")));\n-extern void test_fpmath_both (void)\t\t__attribute__((__option__(\"sse2,fpmath=both\")));\n+extern void test_fpmath_sse (void)\t\t__attribute__((__target__(\"sse2,fpmath=sse\")));\n+extern void test_fpmath_387 (void)\t\t__attribute__((__target__(\"sse2,fpmath=387\")));\n+extern void test_fpmath_sse_387 (void)\t\t__attribute__((__target__(\"sse2,fpmath=sse+387\")));\n+extern void test_fpmath_387_sse (void)\t\t__attribute__((__target__(\"sse2,fpmath=387+sse\")));\n+extern void test_fpmath_both (void)\t\t__attribute__((__target__(\"sse2,fpmath=both\")));"}, {"sha": "56b5490501ab22077c1a9859556261c54faaeaec", "filename": "gcc/testsuite/gcc.target/i386/funcspec-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-7.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=k8 -mno-recip -mfpmath=sse -ffast-math\" } */\n \n-float do_recip  (float a) __attribute__((__option__(\"recip\")));\n+float do_recip  (float a) __attribute__((__target__(\"recip\")));\n float do_normal (float a);\n \n float do_recip  (float a) { return 1.0f / __builtin_sqrtf (a); }"}, {"sha": "2478c672d0c0723fc15f464b1f9d83ff8ebd3d38", "filename": "gcc/testsuite/gcc.target/i386/funcspec-8.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -12,7 +12,7 @@ typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n #error \"-msse3 should not be set for this test\"\n #endif\n \n-__m128d sse3_hsubpd (__m128d a, __m128d b) __attribute__((__option__(\"sse3\")));\n+__m128d sse3_hsubpd (__m128d a, __m128d b) __attribute__((__target__(\"sse3\")));\n __m128d generic_hsubpd (__m128d a, __m128d b);\n \n __m128d\n@@ -31,7 +31,7 @@ generic_hsubpd (__m128d a, __m128d b)\n #error \"-mssse3 should not be set for this test\"\n #endif\n \n-__m128w ssse3_psignd128 (__m128w a, __m128w b) __attribute__((__option__(\"ssse3\")));\n+__m128w ssse3_psignd128 (__m128w a, __m128w b) __attribute__((__target__(\"ssse3\")));\n __m128w generic_psignd (__m128w ab, __m128w b);\n \n __m128w\n@@ -50,7 +50,7 @@ generic_psignd128 (__m128w a, __m128w b)\n #error \"-msse4.1 should not be set for this test\"\n #endif\n \n-__m128d sse4_1_blendvpd (__m128d a, __m128d b, __m128d c) __attribute__((__option__(\"sse4.1\")));\n+__m128d sse4_1_blendvpd (__m128d a, __m128d b, __m128d c) __attribute__((__target__(\"sse4.1\")));\n __m128d generic_blendvpd (__m128d a, __m128d b, __m128d c);\n \n __m128d\n@@ -69,7 +69,7 @@ generic_blendvpd  (__m128d a, __m128d b, __m128d c)\n #error \"-msse4.2 should not be set for this test\"\n #endif\n \n-__m128i sse4_2_pcmpgtq (__m128i a, __m128i b) __attribute__((__option__(\"sse4.2\")));\n+__m128i sse4_2_pcmpgtq (__m128i a, __m128i b) __attribute__((__target__(\"sse4.2\")));\n __m128i generic_pcmpgtq (__m128i ab, __m128i b);\n \n __m128i\n@@ -88,7 +88,7 @@ generic_pcmpgtq (__m128i a, __m128i b)\n #error \"-msse4a should not be set for this test\"\n #endif\n \n-__m128i sse4_2_insertq (__m128i a, __m128i b) __attribute__((__option__(\"sse4a\")));\n+__m128i sse4_2_insertq (__m128i a, __m128i b) __attribute__((__target__(\"sse4a\")));\n __m128i generic_insertq (__m128i ab, __m128i b);\n \n __m128i\n@@ -107,7 +107,7 @@ generic_insertq (__m128i a, __m128i b)\n #error \"-msse5 should not be set for this test\"\n #endif\n \n-__m128d sse5_fmaddpd (__m128d a, __m128d b, __m128d c) __attribute__((__option__(\"sse5\")));\n+__m128d sse5_fmaddpd (__m128d a, __m128d b, __m128d c) __attribute__((__target__(\"sse5\")));\n __m128d generic_fmaddpd (__m128d a, __m128d b, __m128d c);\n \n __m128d\n@@ -126,7 +126,7 @@ generic_fmaddpd  (__m128d a, __m128d b, __m128d c)\n #error \"-maes should not be set for this test\"\n #endif\n \n-__m128i aes_aesimc128 (__m128i a) __attribute__((__option__(\"aes\")));\n+__m128i aes_aesimc128 (__m128i a) __attribute__((__target__(\"aes\")));\n __m128i generic_aesimc128 (__m128i a);\n \n __m128i\n@@ -145,7 +145,7 @@ generic_aesimc128 (__m128i a)\n #error \"-mpclmul should not be set for this test\"\n #endif\n \n-__m128i pclmul_pclmulqdq128 (__m128i a, __m128i b) __attribute__((__option__(\"pclmul\")));\n+__m128i pclmul_pclmulqdq128 (__m128i a, __m128i b) __attribute__((__target__(\"pclmul\")));\n __m128i generic_pclmulqdq128 (__m128i a, __m128i b);\n \n __m128i"}, {"sha": "1a7fc1b5890d5544feadf1927ba0f5385b57196b", "filename": "gcc/testsuite/gcc.target/i386/funcspec-9.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -5,14 +5,14 @@\n extern void exit (int);\n \n #ifdef __SSE5__\n-#warning \"__SSE5__ should not be defined before #pragma GCC option.\"\n+#warning \"__SSE5__ should not be defined before #pragma GCC target.\"\n #endif\n \n-#pragma GCC option (push)\n-#pragma GCC option (\"sse5,fused-madd\")\n+#pragma GCC push_options\n+#pragma GCC target (\"sse5,fused-madd\")\n \n #ifndef __SSE5__\n-#warning \"__SSE5__ should have be defined after #pragma GCC option.\"\n+#warning \"__SSE5__ should have be defined after #pragma GCC target.\"\n #endif\n \n float\n@@ -21,9 +21,9 @@ flt_mul_add (float a, float b, float c)\n   return (a * b) + c;\n }\n \n-#pragma GCC option (pop)\n+#pragma GCC pop_options\n #ifdef __SSE5__\n-#warning \"__SSE5__ should not be defined after #pragma GCC pop option.\"\n+#warning \"__SSE5__ should not be defined after #pragma GCC pop target.\"\n #endif\n \n double"}, {"sha": "608f52fd6eb9c8cd6e19b5d1edc58186b34f0c5b", "filename": "gcc/testsuite/gcc.target/i386/hot-1.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0257eee5bd4700647061f61b13a2f89b2a4b4f28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0257eee5bd4700647061f61b13a2f89b2a4b4f28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhot-1.c?ref=0257eee5bd4700647061f61b13a2f89b2a4b4f28", "patch": "@@ -1,33 +0,0 @@\n-/* Test whether using attribute((hot)) really turns on -O3.  Do this test\n-   by checking whether we vectorize a simple loop.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -march=k8\" } */\n-/* { dg-final { scan-assembler \"addps\" } } */\n-/* { dg-final { scan-assembler \"subss\" } } */\n-\n-#define SIZE 1024\n-float a[SIZE] __attribute__((__aligned__(32)));\n-float b[SIZE] __attribute__((__aligned__(32)));\n-float c[SIZE] __attribute__((__aligned__(32)));\n-\n-/* This should vectorize.  */\n-void hot (void) __attribute__((__hot__));\n-\n-void\n-hot (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a[i] = b[i] + c[i];\n-}\n-\n-/* This should not vectorize.  */\n-void\n-not_hot (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a[i] = b[i] - c[i];\n-}"}, {"sha": "d2791e071c38ee9c86b992adf24cd49f91d7ff71", "filename": "gcc/testsuite/gcc.target/i386/opt-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fopt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fopt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fopt-2.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -12,7 +12,7 @@ float b[SIZE] __attribute__((__aligned__(32)));\n float c[SIZE] __attribute__((__aligned__(32)));\n \n /* This should vectorize.  */\n-#pragma GCC optimize push\n+#pragma GCC push_options\n #pragma GCC optimize (3, \"unroll-all-loops\", \"-fprefetch-loop-arrays\")\n \n void\n@@ -24,7 +24,7 @@ opt3 (void)\n     a[i] = b[i] + c[i];\n }\n \n-#pragma GCC optimize pop\n+#pragma GCC pop_options\n \n /* This should not vectorize.  */\n void"}, {"sha": "f530e54ec3040c82563af21c20dfc3645584737d", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -37,27 +37,27 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse5,aes,pclmul\")\n+#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse5,aes,pclmul\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n    are defined as macros for non-optimized compilations. */\n \n /* mmintrin.h (MMX).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"mmx\")\n+#pragma GCC target (\"mmx\")\n #endif\n #include <mmintrin.h>\n \n /* mm3dnow.h (3DNOW).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"3dnow\")\n+#pragma GCC target (\"3dnow\")\n #endif\n #include <mm3dnow.h>\n \n /* xmmintrin.h (SSE).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse\")\n+#pragma GCC target (\"sse\")\n #endif\n #include <xmmintrin.h>\n test_2 (_mm_shuffle_ps, __m128, __m128, __m128, 1)\n@@ -71,7 +71,7 @@ test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n \n /* emmintrin.h (SSE2).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse2\")\n+#pragma GCC target (\"sse2\")\n #endif\n #include <emmintrin.h>\n test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n@@ -85,21 +85,21 @@ test_1 (_mm_shuffle_epi32, __m128i, __m128i, 1)\n \n /* pmmintrin.h (SSE3).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse3\")\n+#pragma GCC target (\"sse3\")\n #endif\n #include <pmmintrin.h>\n \n /* tmmintrin.h (SSSE3).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"ssse3\")\n+#pragma GCC target (\"ssse3\")\n #endif\n #include <tmmintrin.h>\n test_2 (_mm_alignr_epi8, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n \n /* ammintrin.h (SSE4A).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse4a\")\n+#pragma GCC target (\"sse4a\")\n #endif\n #include <ammintrin.h>\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n@@ -110,7 +110,7 @@ test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n /* Note, nmmintrin.h includes smmintrin.h, and smmintrin.h checks for the\n    #ifdef.  So just set the option to SSE4.2.  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse4.2\")\n+#pragma GCC target (\"sse4.2\")\n #endif\n #include <nmmintrin.h>\n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n@@ -148,7 +148,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* bmmintrin.h (SSE5).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"sse5\")\n+#pragma GCC target (\"sse5\")\n #endif\n #include <bmmintrin.h>\n test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n@@ -158,7 +158,7 @@ test_1 (_mm_roti_epi64, __m128i, __m128i, 1)\n \n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC option (\"aes,pclmul\")\n+#pragma GCC target (\"aes,pclmul\")\n #endif\n #include <wmmintrin.h>\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)"}, {"sha": "4488568f45048ac9645cf7b58b4d6262b187d99f", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -101,7 +101,7 @@\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n \n-#pragma GCC option (\"3dnow,sse4,sse5,aes,pclmul\")\n+#pragma GCC target (\"3dnow,sse4,sse5,aes,pclmul\")\n #include <wmmintrin.h>\n #include <bmmintrin.h>\n #include <smmintrin.h>"}, {"sha": "e38ef3a8d4efe96757f67fdf988d8b3a19669169", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -4369,6 +4369,11 @@ build_duplicate_type (tree type)\n bool\n tree_can_inline_p (tree caller, tree callee)\n {\n+#if 0\n+  /* This causes a regression in SPEC in that it prevents a cold function from\n+     inlining a hot function.  Perhaps this should only apply to functions\n+     that the user declares hot/cold/optimize explicitly.  */\n+\n   /* Don't inline a function with a higher optimization level than the\n      caller, or with different space constraints (hot/cold functions).  */\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (caller);\n@@ -4390,6 +4395,7 @@ tree_can_inline_p (tree caller, tree callee)\n \t  || (caller_opt->optimize_size != callee_opt->optimize_size))\n \treturn false;\n     }\n+#endif\n \n   /* Allow the backend to decide if inlining is ok.  */\n   return targetm.target_option.can_inline_p (caller, callee);"}, {"sha": "40cd4566e1eb5e3463fa48632cd501a819b1a058", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5779e7133d84c5873249bb643d9852f314022f0b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5779e7133d84c5873249bb643d9852f314022f0b", "patch": "@@ -3591,11 +3591,9 @@ enum tree_index\n \n   TI_OPTIMIZATION_DEFAULT,\n   TI_OPTIMIZATION_CURRENT,\n-  TI_OPTIMIZATION_COLD,\n-  TI_OPTIMIZATION_HOT,\n   TI_TARGET_OPTION_DEFAULT,\n   TI_TARGET_OPTION_CURRENT,\n-  TI_CURRENT_OPTION_PRAGMA,\n+  TI_CURRENT_TARGET_PRAGMA,\n   TI_CURRENT_OPTIMIZE_PRAGMA,\n \n   TI_MAX\n@@ -3765,20 +3763,18 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define main_identifier_node\t\tglobal_trees[TI_MAIN_IDENTIFIER]\n #define MAIN_NAME_P(NODE) (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n \n-/* Optimization options (OPTIMIZATION_NODE) to use for default, current, cold,\n-   and hot functions.  */\n+/* Optimization options (OPTIMIZATION_NODE) to use for default and current\n+   functions.  */\n #define optimization_default_node\tglobal_trees[TI_OPTIMIZATION_DEFAULT]\n #define optimization_current_node\tglobal_trees[TI_OPTIMIZATION_CURRENT]\n-#define optimization_cold_node\t\tglobal_trees[TI_OPTIMIZATION_COLD]\n-#define optimization_hot_node\t\tglobal_trees[TI_OPTIMIZATION_HOT]\n \n /* Default/current target options (TARGET_OPTION_NODE).  */\n #define target_option_default_node\tglobal_trees[TI_TARGET_OPTION_DEFAULT]\n #define target_option_current_node\tglobal_trees[TI_TARGET_OPTION_CURRENT]\n \n /* Default tree list option(), optimize() pragmas to be linked into the\n    attribute list.  */\n-#define current_option_pragma\t\tglobal_trees[TI_CURRENT_OPTION_PRAGMA]\n+#define current_target_pragma\t\tglobal_trees[TI_CURRENT_TARGET_PRAGMA]\n #define current_optimize_pragma\t\tglobal_trees[TI_CURRENT_OPTIMIZE_PRAGMA]\n \n /* An enumeration of the standard C integer types.  These must be"}]}