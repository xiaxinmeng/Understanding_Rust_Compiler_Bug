{"sha": "aac12084fc07319d5c8232c51dafa4e297bd5415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjMTIwODRmYzA3MzE5ZDVjODIzMmM1MWRhZmE0ZTI5N2JkNTQxNQ==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2021-03-25T15:29:41Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2021-03-25T15:29:41Z"}, "message": "tree-optimization/96974 - avoid ICE by replacing assert with standard failure\n\nMinor patch to add a graceful exit in the rare case where an invalid\ncombination of TYPE_VECTOR_SUBPARTS for nunits_vectype and\n*stmt_vectype_out is reached in vect_get_vector_types_for_stmt.\n\nThis resolves the ICE seen in PR tree-optimization/96974, however the issue\nof correctly handling this rare vectorization combination is left for a\nlater patch.\n\nBootstrapped and reg-tested on aarch64-linux-gnu.\n\n2021-03-25  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/96974\n\t* tree-vect-stmts.c (vect_get_vector_types_for_stmt): Replace assert\n\twith graceful exit.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/96974\n\t* g++.target/aarch64/sve/pr96974.C: New test.", "tree": {"sha": "a709624d347cab7e194f12effc05a0865bbc5b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a709624d347cab7e194f12effc05a0865bbc5b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac12084fc07319d5c8232c51dafa4e297bd5415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac12084fc07319d5c8232c51dafa4e297bd5415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac12084fc07319d5c8232c51dafa4e297bd5415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac12084fc07319d5c8232c51dafa4e297bd5415/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de00a7bda94910835012bc7150be53b460a5c8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de00a7bda94910835012bc7150be53b460a5c8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de00a7bda94910835012bc7150be53b460a5c8b6"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "363241d18df410c1a7dca4d9d5d4abbd8e57a558", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr96974.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac12084fc07319d5c8232c51dafa4e297bd5415/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac12084fc07319d5c8232c51dafa4e297bd5415/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr96974.C?ref=aac12084fc07319d5c8232c51dafa4e297bd5415", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=armv8.2-a+sve -fdisable-tree-fre4 -fdump-tree-slp-details\" } */\n+\n+float a;\n+int\n+b ()\n+{ return __builtin_lrintf(a); }\n+\n+struct c {\n+  float d;\n+    c() {\n+      for (int e = 0; e < 9; e++)\n+\tcoeffs[e] = d ? b() : 0;\n+    }\n+    int coeffs[10];\n+} f;\n+\n+/* { dg-final { scan-tree-dump \"Not vectorized: Incompatible number of vector subparts between\" \"slp1\" } } */"}, {"sha": "4c01e82ff394f911153b7bfe1dcec36d41853ded", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac12084fc07319d5c8232c51dafa4e297bd5415/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac12084fc07319d5c8232c51dafa4e297bd5415/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=aac12084fc07319d5c8232c51dafa4e297bd5415", "patch": "@@ -12148,8 +12148,12 @@ vect_get_vector_types_for_stmt (vec_info *vinfo, stmt_vec_info stmt_info,\n \t}\n     }\n \n-  gcc_assert (multiple_p (TYPE_VECTOR_SUBPARTS (nunits_vectype),\n-\t\t\t  TYPE_VECTOR_SUBPARTS (*stmt_vectype_out)));\n+  if (!multiple_p (TYPE_VECTOR_SUBPARTS (nunits_vectype),\n+\t\t   TYPE_VECTOR_SUBPARTS (*stmt_vectype_out)))\n+    return opt_result::failure_at (stmt,\n+\t\t\t\t   \"Not vectorized: Incompatible number \"\n+\t\t\t\t   \"of vector subparts between %T and %T\\n\",\n+\t\t\t\t   nunits_vectype, *stmt_vectype_out);\n \n   if (dump_enabled_p ())\n     {"}]}