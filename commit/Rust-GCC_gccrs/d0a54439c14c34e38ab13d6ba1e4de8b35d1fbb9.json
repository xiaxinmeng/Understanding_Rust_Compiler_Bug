{"sha": "d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhNTQ0MzljMTRjMzRlMzhhYjEzZDZiYTFlNGRlOGIzNWQxZmJiOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2012-10-31T04:22:48Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2012-10-31T04:22:48Z"}, "message": "rs6000.c (legitimize_reload_address): Remove code handling non-aligned ld/std.\n\ngcc/\n\t* config/rs6000/rs6000.c (legitimize_reload_address): Remove code\n\thandling non-aligned ld/std.\n\t* config/rs6000/paired.md (movv2sf_paired): Use 'Y' instead of 'o'.\n\t* config/rs6000/vsx.md (vsx_mov, vsx_movti): Likewise.\n\t* config/rs6000/altivec.md (altivec_mov, altivec_movti): Likewise.\n\t* config/rs6000/dfp.md (movtd_internal): Use 'm' instead of 'o'.\ngcc/testsuite/\n\t* gcc.target/powerpc/dimode_off.c: New.\n\t* gcc.target/powerpc/timode_off.c: New.\n\t* gcc.target/powerpc/dfmode_off.c: New.\n\t* gcc.target/powerpc/tfmode_off.c: New.\n\nFrom-SVN: r193016", "tree": {"sha": "79b1dd225f3c8eda48972875461e3b8a1d313103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b1dd225f3c8eda48972875461e3b8a1d313103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7054d980c12f92448a4e19047303eea3a0c95c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7054d980c12f92448a4e19047303eea3a0c95c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7054d980c12f92448a4e19047303eea3a0c95c3e"}], "stats": {"total": 264, "additions": 228, "deletions": 36}, "files": [{"sha": "78cc546c517c3817079a94495880d15c9e79cb11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -1,3 +1,12 @@\n+2012-10-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (legitimize_reload_address): Remove code\n+\thandling non-aligned ld/std.\n+\t* config/rs6000/paired.md (movv2sf_paired): Use 'Y' instead of 'o'.\n+\t* config/rs6000/vsx.md (vsx_mov, vsx_movti): Likewise.\n+\t* config/rs6000/altivec.md (altivec_mov, altivec_movti): Likewise.\n+\t* config/rs6000/dfp.md (movtd_internal): Use 'm' instead of 'o'.\n+\n 2012-10-31  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/linux64.h (TARGET_OS_CPP_BUILTINS): Define _CALL_LINUX."}, {"sha": "5384d0297dc76869eea650755798c6852ccb6517", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -165,8 +165,8 @@\n \n ;; Vector move instructions.\n (define_insn \"*altivec_mov<mode>\"\n-  [(set (match_operand:VM2 0 \"nonimmediate_operand\" \"=Z,v,v,*o,*r,*r,v,v\")\n-\t(match_operand:VM2 1 \"input_operand\" \"v,Z,v,r,o,r,j,W\"))]\n+  [(set (match_operand:VM2 0 \"nonimmediate_operand\" \"=Z,v,v,*Y,*r,*r,v,v\")\n+\t(match_operand:VM2 1 \"input_operand\" \"v,Z,v,r,Y,r,j,W\"))]\n   \"VECTOR_MEM_ALTIVEC_P (<MODE>mode)\n    && (register_operand (operands[0], <MODE>mode) \n        || register_operand (operands[1], <MODE>mode))\"\n@@ -190,8 +190,8 @@\n ;; is for unions.  However for plain data movement, slightly favor the vector\n ;; loads\n (define_insn \"*altivec_movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,v,v,?o,?r,?r,v,v\")\n-\t(match_operand:TI 1 \"input_operand\" \"v,Z,v,r,o,r,j,W\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,v,v,?Y,?r,?r,v,v\")\n+\t(match_operand:TI 1 \"input_operand\" \"v,Z,v,r,Y,r,j,W\"))]\n   \"VECTOR_MEM_ALTIVEC_P (TImode)\n    && (register_operand (operands[0], TImode) \n        || register_operand (operands[1], TImode))\""}, {"sha": "7dd62b7173685891e8b99b8ffd98e473bb4657d7", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -426,12 +426,12 @@\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{ rs6000_emit_move (operands[0], operands[1], TDmode); DONE; }\")\n \n-; It's important to list the o->f and f->o moves before f->f because\n-; otherwise reload, given m->f, will try to pick f->f and reload it,\n-; which doesn't make progress.  Likewise r->Y must be before r->r.\n+; It's important to list the Y->r and r->Y moves before r->r because\n+; otherwise reload, given m->r, will try to pick r->r and reload it,\n+; which doesn't make progress.\n (define_insn_and_split \"*movtd_internal\"\n-  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=o,d,d,r,Y,r\")\n-\t(match_operand:TD 1 \"input_operand\"         \"d,o,d,YGHF,r,r\"))]\n+  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n+\t(match_operand:TD 1 \"input_operand\"         \"d,m,d,r,YGHF,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], TDmode)\n        || gpc_reg_operand (operands[1], TDmode))\""}, {"sha": "cfce1992b4ecd74e740da5de44a6b4a7963f75c5", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -201,8 +201,8 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*movv2sf_paired\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,o,r,r,f\")\n-\t\t (match_operand:V2SF 1 \"input_operand\" \"f,Z,f,r,o,r,W\"))]\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,Y,r,r,f\")\n+\t\t (match_operand:V2SF 1 \"input_operand\" \"f,Z,f,r,Y,r,W\"))]\n   \"TARGET_PAIRED_FLOAT\n    && (register_operand (operands[0], V2SFmode) \n        || register_operand (operands[1], V2SFmode))\""}, {"sha": "3fa7b5166a9d503a464d4435bebc89c5aecd7eb4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -6197,27 +6197,6 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n       return x;\n     }\n \n-  /* Force ld/std non-word aligned offset into base register by wrapping\n-     in offset 0.  */\n-  if (GET_CODE (x) == PLUS\n-      && GET_CODE (XEXP (x, 0)) == REG\n-      && REGNO (XEXP (x, 0)) < 32\n-      && INT_REG_OK_FOR_BASE_P (XEXP (x, 0), 1)\n-      && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && reg_offset_p\n-      && (INTVAL (XEXP (x, 1)) & 3) != 0\n-      && VECTOR_MEM_NONE_P (mode)\n-      && GET_MODE_SIZE (mode) >= UNITS_PER_WORD\n-      && TARGET_POWERPC64)\n-    {\n-      x = gen_rtx_PLUS (GET_MODE (x), x, GEN_INT (0));\n-      push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n-\t\t   BASE_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n-\t\t   opnum, (enum reload_type) type);\n-      *win = 1;\n-      return x;\n-    }\n-\n   if (GET_CODE (x) == PLUS\n       && GET_CODE (XEXP (x, 0)) == REG\n       && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER"}, {"sha": "39374b2c2ba01ed1c43099c737102e904f83678b", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -209,8 +209,8 @@\n \n ;; VSX moves\n (define_insn \"*vsx_mov<mode>\"\n-  [(set (match_operand:VSX_M 0 \"nonimmediate_operand\" \"=Z,<VSr>,<VSr>,?Z,?wa,?wa,*o,*r,*r,<VSr>,?wa,v,wZ,v\")\n-\t(match_operand:VSX_M 1 \"input_operand\" \"<VSr>,Z,<VSr>,wa,Z,wa,r,o,r,j,j,W,v,wZ\"))]\n+  [(set (match_operand:VSX_M 0 \"nonimmediate_operand\" \"=Z,<VSr>,<VSr>,?Z,?wa,?wa,*Y,*r,*r,<VSr>,?wa,v,wZ,v\")\n+\t(match_operand:VSX_M 1 \"input_operand\" \"<VSr>,Z,<VSr>,wa,Z,wa,r,Y,r,j,j,W,v,wZ\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\n    && (register_operand (operands[0], <MODE>mode) \n        || register_operand (operands[1], <MODE>mode))\"\n@@ -272,8 +272,8 @@\n ;; Unlike other VSX moves, allow the GPRs, since a normal use of TImode is for\n ;; unions.  However for plain data movement, slightly favor the vector loads\n (define_insn \"*vsx_movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,wa,wa,?o,?r,?r,wa,v,v,wZ\")\n-\t(match_operand:TI 1 \"input_operand\" \"wa,Z,wa,r,o,r,j,W,wZ,v\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,wa,wa,?Y,?r,?r,wa,v,v,wZ\")\n+\t(match_operand:TI 1 \"input_operand\" \"wa,Z,wa,r,Y,r,j,W,wZ,v\"))]\n   \"VECTOR_MEM_VSX_P (TImode)\n    && (register_operand (operands[0], TImode) \n        || register_operand (operands[1], TImode))\""}, {"sha": "7bfaadc2ff450a517ecd04c33fb2d24db6b6ecc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -1,3 +1,10 @@\n+2012-10-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/dimode_off.c: New.\n+\t* gcc.target/powerpc/timode_off.c: New.\n+\t* gcc.target/powerpc/dfmode_off.c: New.\n+\t* gcc.target/powerpc/tfmode_off.c: New.\n+\n 2012-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/55093"}, {"sha": "ab711195fac47403bc7debbca25f8a47f6873039", "filename": "gcc/testsuite/gcc.target/powerpc/dfmode_off.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+\n+void w1 (void *x, double y) { *(double *) (x + 32767) = y; }\n+void w2 (void *x, double y) { *(double *) (x + 32766) = y; }\n+void w3 (void *x, double y) { *(double *) (x + 32765) = y; }\n+void w4 (void *x, double y) { *(double *) (x + 32764) = y; }\n+void w5 (void *x, double y) { *(double *) (x + 32763) = y; }\n+void w6 (void *x, double y) { *(double *) (x + 32762) = y; }\n+void w7 (void *x, double y) { *(double *) (x + 32761) = y; }\n+void w8 (void *x, double y) { *(double *) (x + 32760) = y; }\n+void w9 (void *x, double y) { *(double *) (x + 32759) = y; }\n+void w10 (void *x, double y) { *(double *) (x + 32758) = y; }\n+void w11 (void *x, double y) { *(double *) (x + 32757) = y; }\n+void w12 (void *x, double y) { *(double *) (x + 32756) = y; }\n+void w13 (void *x, double y) { *(double *) (x + 32755) = y; }\n+void w14 (void *x, double y) { *(double *) (x + 32754) = y; }\n+void w15 (void *x, double y) { *(double *) (x + 32753) = y; }\n+void w16 (void *x, double y) { *(double *) (x + 32752) = y; }\n+void w17 (void *x, double y) { *(double *) (x + 32751) = y; }\n+void w18 (void *x, double y) { *(double *) (x + 32750) = y; }\n+void w19 (void *x, double y) { *(double *) (x + 32749) = y; }\n+void w20 (void *x, double y) { *(double *) (x + 32748) = y; }\n+\n+double r1 (void *x) { return *(double *) (x + 32767); }\n+double r2 (void *x) { return *(double *) (x + 32766); }\n+double r3 (void *x) { return *(double *) (x + 32765); }\n+double r4 (void *x) { return *(double *) (x + 32764); }\n+double r5 (void *x) { return *(double *) (x + 32763); }\n+double r6 (void *x) { return *(double *) (x + 32762); }\n+double r7 (void *x) { return *(double *) (x + 32761); }\n+double r8 (void *x) { return *(double *) (x + 32760); }\n+double r9 (void *x) { return *(double *) (x + 32759); }\n+double r10 (void *x) { return *(double *) (x + 32758); }\n+double r11 (void *x) { return *(double *) (x + 32757); }\n+double r12 (void *x) { return *(double *) (x + 32756); }\n+double r13 (void *x) { return *(double *) (x + 32755); }\n+double r14 (void *x) { return *(double *) (x + 32754); }\n+double r15 (void *x) { return *(double *) (x + 32753); }\n+double r16 (void *x) { return *(double *) (x + 32752); }\n+double r17 (void *x) { return *(double *) (x + 32751); }\n+double r18 (void *x) { return *(double *) (x + 32750); }\n+double r19 (void *x) { return *(double *) (x + 32749); }\n+double r20 (void *x) { return *(double *) (x + 32748); }\n+\n+/* { dg-final { object-size text == 320 } } */\n+/* { dg-final { cleanup-saved-temps \"dfmode_off\" } } */"}, {"sha": "3d7489b59bcd3c1e31a2023ac36ee081cfc2e98a", "filename": "gcc/testsuite/gcc.target/powerpc/dimode_off.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+\n+void w1 (void *x, long long y) { *(long long *) (x + 32767) = y; }\n+void w2 (void *x, long long y) { *(long long *) (x + 32766) = y; }\n+void w3 (void *x, long long y) { *(long long *) (x + 32765) = y; }\n+void w4 (void *x, long long y) { *(long long *) (x + 32764) = y; }\n+void w5 (void *x, long long y) { *(long long *) (x + 32763) = y; }\n+void w6 (void *x, long long y) { *(long long *) (x + 32762) = y; }\n+void w7 (void *x, long long y) { *(long long *) (x + 32761) = y; }\n+void w8 (void *x, long long y) { *(long long *) (x + 32760) = y; }\n+void w9 (void *x, long long y) { *(long long *) (x + 32759) = y; }\n+void w10 (void *x, long long y) { *(long long *) (x + 32758) = y; }\n+void w11 (void *x, long long y) { *(long long *) (x + 32757) = y; }\n+void w12 (void *x, long long y) { *(long long *) (x + 32756) = y; }\n+void w13 (void *x, long long y) { *(long long *) (x + 32755) = y; }\n+void w14 (void *x, long long y) { *(long long *) (x + 32754) = y; }\n+void w15 (void *x, long long y) { *(long long *) (x + 32753) = y; }\n+void w16 (void *x, long long y) { *(long long *) (x + 32752) = y; }\n+void w17 (void *x, long long y) { *(long long *) (x + 32751) = y; }\n+void w18 (void *x, long long y) { *(long long *) (x + 32750) = y; }\n+void w19 (void *x, long long y) { *(long long *) (x + 32749) = y; }\n+void w20 (void *x, long long y) { *(long long *) (x + 32748) = y; }\n+\n+long long r1 (void *x) { return *(long long *) (x + 32767); }\n+long long r2 (void *x) { return *(long long *) (x + 32766); }\n+long long r3 (void *x) { return *(long long *) (x + 32765); }\n+long long r4 (void *x) { return *(long long *) (x + 32764); }\n+long long r5 (void *x) { return *(long long *) (x + 32763); }\n+long long r6 (void *x) { return *(long long *) (x + 32762); }\n+long long r7 (void *x) { return *(long long *) (x + 32761); }\n+long long r8 (void *x) { return *(long long *) (x + 32760); }\n+long long r9 (void *x) { return *(long long *) (x + 32759); }\n+long long r10 (void *x) { return *(long long *) (x + 32758); }\n+long long r11 (void *x) { return *(long long *) (x + 32757); }\n+long long r12 (void *x) { return *(long long *) (x + 32756); }\n+long long r13 (void *x) { return *(long long *) (x + 32755); }\n+long long r14 (void *x) { return *(long long *) (x + 32754); }\n+long long r15 (void *x) { return *(long long *) (x + 32753); }\n+long long r16 (void *x) { return *(long long *) (x + 32752); }\n+long long r17 (void *x) { return *(long long *) (x + 32751); }\n+long long r18 (void *x) { return *(long long *) (x + 32750); }\n+long long r19 (void *x) { return *(long long *) (x + 32749); }\n+long long r20 (void *x) { return *(long long *) (x + 32748); }\n+\n+/* { dg-final { object-size text == 440 { target { lp64 } } } } */\n+/* 32-bit test should really be == 512 bytes, see pr54110 */\n+/* { dg-final { object-size text <= 640 { target { ilp32 } } } } */\n+/* { dg-final { scan-assembler-not \"(st|l)fd\" } } */\n+/* { dg-final { cleanup-saved-temps \"dimode_off\" } } */"}, {"sha": "17d31413f15c7c6af95f369f0678fdce1d90270d", "filename": "gcc/testsuite/gcc.target/powerpc/tfmode_off.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+\n+typedef float TFmode __attribute__ ((mode (TF)));\n+\n+void w1 (void *x, TFmode y) { *(TFmode *) (x + 32767) = y; }\n+void w2 (void *x, TFmode y) { *(TFmode *) (x + 32766) = y; }\n+void w3 (void *x, TFmode y) { *(TFmode *) (x + 32765) = y; }\n+void w4 (void *x, TFmode y) { *(TFmode *) (x + 32764) = y; }\n+void w5 (void *x, TFmode y) { *(TFmode *) (x + 32763) = y; }\n+void w6 (void *x, TFmode y) { *(TFmode *) (x + 32762) = y; }\n+void w7 (void *x, TFmode y) { *(TFmode *) (x + 32761) = y; }\n+void w8 (void *x, TFmode y) { *(TFmode *) (x + 32760) = y; }\n+void w9 (void *x, TFmode y) { *(TFmode *) (x + 32759) = y; }\n+void w10 (void *x, TFmode y) { *(TFmode *) (x + 32758) = y; }\n+void w11 (void *x, TFmode y) { *(TFmode *) (x + 32757) = y; }\n+void w12 (void *x, TFmode y) { *(TFmode *) (x + 32756) = y; }\n+void w13 (void *x, TFmode y) { *(TFmode *) (x + 32755) = y; }\n+void w14 (void *x, TFmode y) { *(TFmode *) (x + 32754) = y; }\n+void w15 (void *x, TFmode y) { *(TFmode *) (x + 32753) = y; }\n+void w16 (void *x, TFmode y) { *(TFmode *) (x + 32752) = y; }\n+void w17 (void *x, TFmode y) { *(TFmode *) (x + 32751) = y; }\n+void w18 (void *x, TFmode y) { *(TFmode *) (x + 32750) = y; }\n+void w19 (void *x, TFmode y) { *(TFmode *) (x + 32749) = y; }\n+void w20 (void *x, TFmode y) { *(TFmode *) (x + 32748) = y; }\n+\n+TFmode r1 (void *x) { return *(TFmode *) (x + 32767); }\n+TFmode r2 (void *x) { return *(TFmode *) (x + 32766); }\n+TFmode r3 (void *x) { return *(TFmode *) (x + 32765); }\n+TFmode r4 (void *x) { return *(TFmode *) (x + 32764); }\n+TFmode r5 (void *x) { return *(TFmode *) (x + 32763); }\n+TFmode r6 (void *x) { return *(TFmode *) (x + 32762); }\n+TFmode r7 (void *x) { return *(TFmode *) (x + 32761); }\n+TFmode r8 (void *x) { return *(TFmode *) (x + 32760); }\n+TFmode r9 (void *x) { return *(TFmode *) (x + 32759); }\n+TFmode r10 (void *x) { return *(TFmode *) (x + 32758); }\n+TFmode r11 (void *x) { return *(TFmode *) (x + 32757); }\n+TFmode r12 (void *x) { return *(TFmode *) (x + 32756); }\n+TFmode r13 (void *x) { return *(TFmode *) (x + 32755); }\n+TFmode r14 (void *x) { return *(TFmode *) (x + 32754); }\n+TFmode r15 (void *x) { return *(TFmode *) (x + 32753); }\n+TFmode r16 (void *x) { return *(TFmode *) (x + 32752); }\n+TFmode r17 (void *x) { return *(TFmode *) (x + 32751); }\n+TFmode r18 (void *x) { return *(TFmode *) (x + 32750); }\n+TFmode r19 (void *x) { return *(TFmode *) (x + 32749); }\n+TFmode r20 (void *x) { return *(TFmode *) (x + 32748); }\n+\n+/* { dg-final { object-size text == 544 } } */\n+/* { dg-final { cleanup-saved-temps \"tfmode_off\" } } */"}, {"sha": "a8ca68e8e35d5efbb3a6e7f6447d1980a8eb97a1", "filename": "gcc/testsuite/gcc.target/powerpc/timode_off.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c?ref=d0a54439c14c34e38ab13d6ba1e4de8b35d1fbb9", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do assemble { target { lp64 } } } */\n+/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+\n+typedef int TImode __attribute__ ((mode (TI)));\n+\n+void w1 (void *x, TImode y) { *(TImode *) (x + 32767) = y; }\n+void w2 (void *x, TImode y) { *(TImode *) (x + 32766) = y; }\n+void w3 (void *x, TImode y) { *(TImode *) (x + 32765) = y; }\n+void w4 (void *x, TImode y) { *(TImode *) (x + 32764) = y; }\n+void w5 (void *x, TImode y) { *(TImode *) (x + 32763) = y; }\n+void w6 (void *x, TImode y) { *(TImode *) (x + 32762) = y; }\n+void w7 (void *x, TImode y) { *(TImode *) (x + 32761) = y; }\n+void w8 (void *x, TImode y) { *(TImode *) (x + 32760) = y; }\n+void w9 (void *x, TImode y) { *(TImode *) (x + 32759) = y; }\n+void w10 (void *x, TImode y) { *(TImode *) (x + 32758) = y; }\n+void w11 (void *x, TImode y) { *(TImode *) (x + 32757) = y; }\n+void w12 (void *x, TImode y) { *(TImode *) (x + 32756) = y; }\n+void w13 (void *x, TImode y) { *(TImode *) (x + 32755) = y; }\n+void w14 (void *x, TImode y) { *(TImode *) (x + 32754) = y; }\n+void w15 (void *x, TImode y) { *(TImode *) (x + 32753) = y; }\n+void w16 (void *x, TImode y) { *(TImode *) (x + 32752) = y; }\n+void w17 (void *x, TImode y) { *(TImode *) (x + 32751) = y; }\n+void w18 (void *x, TImode y) { *(TImode *) (x + 32750) = y; }\n+void w19 (void *x, TImode y) { *(TImode *) (x + 32749) = y; }\n+void w20 (void *x, TImode y) { *(TImode *) (x + 32748) = y; }\n+\n+TImode r1 (void *x) { return *(TImode *) (x + 32767); }\n+TImode r2 (void *x) { return *(TImode *) (x + 32766); }\n+TImode r3 (void *x) { return *(TImode *) (x + 32765); }\n+TImode r4 (void *x) { return *(TImode *) (x + 32764); }\n+TImode r5 (void *x) { return *(TImode *) (x + 32763); }\n+TImode r6 (void *x) { return *(TImode *) (x + 32762); }\n+TImode r7 (void *x) { return *(TImode *) (x + 32761); }\n+TImode r8 (void *x) { return *(TImode *) (x + 32760); }\n+TImode r9 (void *x) { return *(TImode *) (x + 32759); }\n+TImode r10 (void *x) { return *(TImode *) (x + 32758); }\n+TImode r11 (void *x) { return *(TImode *) (x + 32757); }\n+TImode r12 (void *x) { return *(TImode *) (x + 32756); }\n+TImode r13 (void *x) { return *(TImode *) (x + 32755); }\n+TImode r14 (void *x) { return *(TImode *) (x + 32754); }\n+TImode r15 (void *x) { return *(TImode *) (x + 32753); }\n+TImode r16 (void *x) { return *(TImode *) (x + 32752); }\n+TImode r17 (void *x) { return *(TImode *) (x + 32751); }\n+TImode r18 (void *x) { return *(TImode *) (x + 32750); }\n+TImode r19 (void *x) { return *(TImode *) (x + 32749); }\n+TImode r20 (void *x) { return *(TImode *) (x + 32748); }\n+\n+/* test should really be == 616, see pr54110 */\n+/* { dg-final { object-size text <= 700 } } */\n+/* { dg-final { scan-assembler-not \"(st|l)fd\" } } */\n+/* { dg-final { cleanup-saved-temps \"timode_off\" } } */"}]}