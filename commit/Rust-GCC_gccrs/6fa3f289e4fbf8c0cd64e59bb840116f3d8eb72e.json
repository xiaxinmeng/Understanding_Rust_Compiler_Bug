{"sha": "6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZhM2YyODllNGZiZjhjMGNkNjRlNTliYjg0MDExNmYzZDhlYjcyZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-12-03T00:49:41Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-12-03T00:49:41Z"}, "message": "rs6000.h (MASK_ALTIVEC_ABI, [...]): Delete.\n\n\t* config/rs6000/rs6000.h (MASK_ALTIVEC_ABI,\n\tMASK_LONG_DOUBLE_128): Delete.\n\t(MASK_AIX_STRUCT_RET, MASK_AIX_STRUCT_RET_SET,\n\tTARGET_AIX_STRUCT_RET): New flags.\n\t(TARGET_SWITCHES): Remove entries for -mlong-double-128 and\n\t-mlong-double-64.  Add entries for -m(no-)aix-struct-return\n\tand -m(no-)svr4-struct-return.\n\t(TARGET_OPTIONS): Add entry for -mlong-double-.\n\t(rs6000_long_double_size_string, rs6000_long_double_type_size,\n\trs6000_altivec_abi): Declare.\n\t(TARGET_LONG_DOUBLE_128, TARGET_ALTIVEC_ABI,\n\tLONG_DOUBLE_TYPE_SIZE): Change definitions to match.\n\t(RETURN_IN_MEMORY): If !TARGET_AIX_STRUCT_RET, return\n\tstructures of size <= 8 bytes in registers.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Take out '$' and '*'.\n\n\t* config/rs6000/rs6000.c (rs6000_long_double_size_string,\n\trs6000_long_double_type_size, rs6000_altivec_abi): New\n\tglobals.\n\t(rs6000_override_options): Set rs6000_long_double_type_size\n\tfrom rs6000_long_double_size_string, if nonzero.  Set the\n\tMASK_AIX_STRUCT_RET bit in target_flags from DEFAULT_ABI, if\n\tnot already set.\n\t(rs6000_parse_abi_options): Set rs6000_altivec_abi, not a\n\ttarget_flags bit.\n\t(rs6000_init_builtins): This hook now takes no arguments.\n\n\t* config/rs6000/netbsd.h, config/rs6000/linux.h: Define\n\tDRAFT_V4_STRUCT_RET to 1.\n\nFrom-SVN: r47541", "tree": {"sha": "a6b5eacfcbbd55df2170596e9295d550b3485a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6b5eacfcbbd55df2170596e9295d550b3485a70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/comments", "author": null, "committer": null, "parents": [{"sha": "50b30e0bf36e4a77dd92a2f47735e7af20c9bf33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b30e0bf36e4a77dd92a2f47735e7af20c9bf33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b30e0bf36e4a77dd92a2f47735e7af20c9bf33"}], "stats": {"total": 168, "additions": 134, "deletions": 34}, "files": [{"sha": "21af483a26d74b2ed7df5b171afc1f07a71e1990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "patch": "@@ -1,3 +1,35 @@\n+2001-12-02  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.h (MASK_ALTIVEC_ABI,\n+\tMASK_LONG_DOUBLE_128): Delete.\n+\t(MASK_AIX_STRUCT_RET, MASK_AIX_STRUCT_RET_SET,\n+\tTARGET_AIX_STRUCT_RET): New flags.\n+\t(TARGET_SWITCHES): Remove entries for -mlong-double-128 and\n+\t-mlong-double-64.  Add entries for -m(no-)aix-struct-return\n+\tand -m(no-)svr4-struct-return.\n+\t(TARGET_OPTIONS): Add entry for -mlong-double-.\n+\t(rs6000_long_double_size_string, rs6000_long_double_type_size,\n+\trs6000_altivec_abi): Declare.\n+\t(TARGET_LONG_DOUBLE_128, TARGET_ALTIVEC_ABI,\n+\tLONG_DOUBLE_TYPE_SIZE): Change definitions to match.\n+\t(RETURN_IN_MEMORY): If !TARGET_AIX_STRUCT_RET, return\n+\tstructures of size <= 8 bytes in registers.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Take out '$' and '*'.\n+\n+\t* config/rs6000/rs6000.c (rs6000_long_double_size_string,\n+\trs6000_long_double_type_size, rs6000_altivec_abi): New\n+\tglobals.\n+\t(rs6000_override_options): Set rs6000_long_double_type_size\n+\tfrom rs6000_long_double_size_string, if nonzero.  Set the\n+\tMASK_AIX_STRUCT_RET bit in target_flags from DEFAULT_ABI, if\n+\tnot already set.\n+\t(rs6000_parse_abi_options): Set rs6000_altivec_abi, not a\n+\ttarget_flags bit.\n+\t(rs6000_init_builtins): This hook now takes no arguments.\n+\n+\t* config/rs6000/netbsd.h, config/rs6000/linux.h: Define\n+\tDRAFT_V4_STRUCT_RET to 1.\n+\n 2001-12-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-typeck.c (really_start_incremental_init, push_init_level):\n@@ -27,7 +59,7 @@\n \t* emit-rtl.c (component_ref_for_mem_expr): New.\n \t(set_mem_attributes): Use it.\n \t(set_mem_offset): New.\n-\t* expr.c (expand_assignment): Call set_mem_attributes for \n+\t* expr.c (expand_assignment): Call set_mem_attributes for\n \tinner references; adjust the memory offset as needed.\n \t* print-rtl.c (print_mem_expr): New.\n \t(print_rtx): Use it.\n@@ -217,27 +249,27 @@ objc:\n \n 2001-11-30  Daniel Berlin  <dan@cgsoftware.com>\n \n-\t* config/rs6000/rs6000.c (altivec_expand_builtin): add \n-\tALTIVEC_BUILTIN_LD_INTERNAL_4sf and ALTIVEC_BUILTIN_ST_INTERNAL_4sf, \n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): add\n+\tALTIVEC_BUILTIN_LD_INTERNAL_4sf and ALTIVEC_BUILTIN_ST_INTERNAL_4sf,\n \t*_16qi,_8hi, rename existing V4SI ones to *_4si.\n \t(altivec_init_builtins): Ditto.\n \t(bdesc_2arg): Rename CODE_FOR_* to match changes in MD file.\n-\t\n+\n \t* config/rs6000/rs6000.md: Add attribute types vecsimple,\n-\tveccomplex, vecfloat, and vecperm, for altivec instructions.  \n+\tveccomplex, vecfloat, and vecperm, for altivec instructions.\n \tModify altivec patterns to use approriate attribute type.\n \tModify altivec patterns to match RTL operations where approriate\n \t(IE no unspec where we can avoid it).\n \tAdd vector unit scheduling for ppc7450.\n-\tRename patterns to what they are where approriate \n+\tRename patterns to what they are where approriate\n \t(altivec_vaddfp->addv4sf3, etc)\n \n \t* config/rs6000/rs6000.h (enum rs6000_builtins): Change VRS->VSR.\n \tPass -mppc, and define _ARCH_PPC, if -mcpu=7450 is used.\n \n \t* config/rs6000/sysv4.h: Add -mcpu=7450.\n \n-\t* testsuite/gcc.dg/altivec-1.c: Update test to take into account renamed \n+\t* testsuite/gcc.dg/altivec-1.c: Update test to take into account renamed\n \t_builtin_altivec_ld_interal function.\n \n 2001-11-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -258,17 +290,17 @@ objc:\n 2001-11-30  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.h (STARTING_FRAME_OFFSET): Adjust for altivec.\n-        (STACK_DYNAMIC_OFFSET): Same.\n+\t(STACK_DYNAMIC_OFFSET): Same.\n \n 2001-11-30  Richard Henderson  <rth@redhat.com>\n \n \t* c-decl.c (duplicate_decls): Copy DECL_SAVED_TREE.\n \n 2001-11-30  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h (CALL_REALLY_USED_REGISTERS): New.\n-        (CONDITIONAL_REGISTER_USAGE): Set call_really_used_registers to\n-        the values in call_used_registers.\n+\t* config/rs6000/rs6000.h (CALL_REALLY_USED_REGISTERS): New.\n+\t(CONDITIONAL_REGISTER_USAGE): Set call_really_used_registers to\n+\tthe values in call_used_registers.\n \n Fri Nov 30 12:48:26 2001  Jeffrey A Law  (law@cygnus.com)\n "}, {"sha": "99c04536489395b5a79e65f30c8d6fc674eebfa6", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "patch": "@@ -69,6 +69,11 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n+/* For backward compatibility, we must continue to use the AIX\n+   structure return convention.  */\n+#undef DRAFT_V4_STRUCT_RET\n+#define DRAFT_V4_STRUCT_RET 1\n+\n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */\n "}, {"sha": "0e58a45bb358d00eade975e9ced3e3a65f24366f", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "patch": "@@ -59,3 +59,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (PowerPC NetBSD/ELF)\");\n+\n+/* For backward compatibility, we must continue to use the AIX\n+   structure return convention.  */\n+#undef DRAFT_V4_STRUCT_RET\n+#define DRAFT_V4_STRUCT_RET 1"}, {"sha": "9bbb6a2955eb251671c89fecd9ed3351beb4ee0b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "patch": "@@ -68,6 +68,13 @@ struct rs6000_cpu_select rs6000_select[3] =\n   { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n };\n \n+/* Size of long double */\n+const char *rs6000_long_double_size_string;\n+int rs6000_long_double_type_size;\n+\n+/* Whether -mabi=altivec has appeared */\n+int rs6000_altivec_abi;\n+\n /* Set to non-zero once AIX common-mode calls have been defined.  */\n static int common_mode_defined;\n \n@@ -150,7 +157,7 @@ static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n static int rs6000_issue_rate PARAMS ((void));\n \n-static void rs6000_init_builtins PARAMS ((tree));\n+static void rs6000_init_builtins PARAMS ((void));\n static void altivec_init_builtins PARAMS ((void));\n static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static rtx altivec_expand_builtin PARAMS ((tree, rtx));\n@@ -475,6 +482,19 @@ rs6000_override_options (default_cpu)\n \terror (\"Unknown -mdebug-%s switch\", rs6000_debug_name);\n     }\n \n+  /* Set size of long double */\n+  rs6000_long_double_type_size = 64;\n+  if (rs6000_long_double_size_string)\n+    {\n+      char *tail;\n+      int size = strtol (rs6000_long_double_size_string, &tail, 10);\n+      if (*tail != '\\0' || (size != 64 && size != 128))\n+\terror (\"Unknown switch -mlong-double-%s\",\n+\t       rs6000_long_double_size_string);\n+      else\n+\trs6000_long_double_type_size = size;\n+    }\n+\n   /* Handle -mabi= options.  */\n   rs6000_parse_abi_options ();\n \n@@ -489,6 +509,17 @@ rs6000_override_options (default_cpu)\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n+  /* Set TARGET_AIX_STRUCT_RET last, after the ABI is determined.\n+     If -maix-struct-return or -msvr4-struct-return was explicitly\n+     used, don't override with the ABI default.  */\n+  if (!(target_flags & MASK_AIX_STRUCT_RET_SET))\n+    {\n+      if (DEFAULT_ABI == ABI_V4 && !DRAFT_V4_STRUCT_RET)\n+\ttarget_flags = (target_flags & ~MASK_AIX_STRUCT_RET);\n+      else\n+\ttarget_flags |= MASK_AIX_STRUCT_RET;\n+    }\n+\n   /* Register global variables with the garbage collector.  */\n   rs6000_add_gc_roots ();\n \n@@ -510,7 +541,7 @@ rs6000_parse_abi_options ()\n   if (rs6000_abi_string == 0)\n     return;\n   else if (! strcmp (rs6000_abi_string, \"altivec\"))\n-    target_flags |= MASK_ALTIVEC_ABI;\n+    rs6000_altivec_abi = 1;\n   else\n     error (\"Unknown ABI specified: '%s'\", rs6000_abi_string);\n }\n@@ -3322,8 +3353,7 @@ rs6000_expand_builtin (exp, target, subtarget, mode, ignore)\n }\n \n static void\n-rs6000_init_builtins (list_node)\n-     tree list_node ATTRIBUTE_UNUSED;\n+rs6000_init_builtins ()\n {\n   if (TARGET_ALTIVEC)\n     altivec_init_builtins ();"}, {"sha": "59c0455b5f2cd44cae70f74b3d818cf4a77f192f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6fa3f289e4fbf8c0cd64e59bb840116f3d8eb72e", "patch": "@@ -213,11 +213,13 @@ extern int target_flags;\n /* Use AltiVec instructions.  */\n #define MASK_ALTIVEC\t\t0x00080000\n \n-/* Enhance the current ABI with AltiVec extensions.  */\n-#define MASK_ALTIVEC_ABI\t0x00100000\n+/* Return small structures in memory (as the AIX ABI requires).  */\n+#define MASK_AIX_STRUCT_RET\t0x00100000\n+#define MASK_AIX_STRUCT_RET_SET\t0x00200000\n \n-/* Use 128-bit long double.  */\n-#define MASK_LONG_DOUBLE_128\t0x00200000\n+/* The only remaining free bit is 0x00400000. sysv4.h uses\n+   0x00800000 -> 0x40000000, and 0x80000000 is not available\n+   because target_flags is signed.  */\n \n #define TARGET_POWER\t\t(target_flags & MASK_POWER)\n #define TARGET_POWER2\t\t(target_flags & MASK_POWER2)\n@@ -238,8 +240,7 @@ extern int target_flags;\n #define TARGET_NO_FUSED_MADD\t(target_flags & MASK_NO_FUSED_MADD)\n #define TARGET_SCHED_PROLOG\t(target_flags & MASK_SCHED_PROLOG)\n #define TARGET_ALTIVEC\t\t(target_flags & MASK_ALTIVEC)\n-#define TARGET_ALTIVEC_ABI\t(target_flags & MASK_ALTIVEC_ABI)\n-#define TARGET_LONG_DOUBLE_128\t(target_flags & MASK_LONG_DOUBLE_128)\n+#define TARGET_AIX_STRUCT_RET\t(target_flags & MASK_AIX_STRUCT_RET)\n \n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n #define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n@@ -344,10 +345,6 @@ extern int target_flags;\n \t\t\tN_(\"Generate fused multiply/add instructions\")},\\\n   {\"no-fused-madd\",\tMASK_NO_FUSED_MADD,\t\t\t\t\\\n \t\t\tN_(\"Don't generate fused multiply/add instructions\")},\\\n-  {\"long-double-64\",\t-MASK_LONG_DOUBLE_128,\t\t\t\t\\\n-\t\t\tN_(\"Use 64 bit long doubles\") },\t\t\\\n-  {\"long-double-128\",\t MASK_LONG_DOUBLE_128, \t\t\t\t\\\n-\t\t\tN_(\"Use 128 bit long doubles\") },\t\t\\\n   {\"sched-prolog\",      MASK_SCHED_PROLOG,                              \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-prolog\",   -MASK_SCHED_PROLOG,                             \\\n@@ -356,6 +353,18 @@ extern int target_flags;\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-epilog\",   -MASK_SCHED_PROLOG,                             \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n+  {\"aix-struct-return\",\tMASK_AIX_STRUCT_RET | MASK_AIX_STRUCT_RET_SET,\t\\\n+\t\t\tN_(\"Return all structures in memory (AIX default)\")},\\\n+  {\"svr4-struct-return\", - MASK_AIX_STRUCT_RET,\\\n+\t\t\tN_(\"Return small structures in registers (SVR4 default)\")},\\\n+  {\"svr4-struct-return\",MASK_AIX_STRUCT_RET_SET,\\\n+\t\t\t\"\"},\\\n+  {\"no-aix-struct-return\", - MASK_AIX_STRUCT_RET,\\\n+\t\t\t\"\"},\\\n+  {\"no-aix-struct-return\", MASK_AIX_STRUCT_RET_SET,\\\n+\t\t\t\"\"},\\\n+  {\"no-svr4-struct-return\", MASK_AIX_STRUCT_RET | MASK_AIX_STRUCT_RET_SET,\\\n+\t\t\t\"\"},\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n   {\"\",\t\t\tTARGET_DEFAULT | MASK_SCHED_PROLOG,\t\t\\\n \t\t\t\"\"}}\n@@ -431,6 +440,8 @@ extern enum processor_type rs6000_cpu;\n     N_(\"Schedule code for given CPU\") },\t\t\t\t\\\n    {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\") },\t\t\\\n    {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\") },\t\t\\\n+   {\"long-double-\", &rs6000_long_double_size_string,\t\t\t\\\n+    N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n@@ -454,6 +465,15 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define\tTARGET_DEBUG_STACK\trs6000_debug_stack\n #define\tTARGET_DEBUG_ARG\trs6000_debug_arg\n \n+/* These are separate from target_flags because we've run out of bits\n+   there.  */\n+extern const char *rs6000_long_double_size_string;\n+extern int rs6000_long_double_type_size;\n+extern int rs6000_altivec_abi;\n+\n+#define TARGET_LONG_DOUBLE_128 (rs6000_long_double_type_size == 128)\n+#define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n+\n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -583,7 +603,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* A C expression for the size in bits of the type `long double' on\n    the target machine.  If you don't define this, the default is two\n    words.  */\n-#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+#define LONG_DOUBLE_TYPE_SIZE rs6000_long_double_type_size\n \n /* Constant which presents upper bound of the above value.  */\n #define MAX_LONG_DOUBLE_TYPE_SIZE 128\n@@ -1458,14 +1478,22 @@ typedef struct rs6000_stack {\n \t\t     && TARGET_HARD_FLOAT\t\t\t\t\\\n \t\t     ? FP_ARG_RETURN : GP_ARG_RETURN)\n \n-/* The definition of this macro implies that there are cases where\n-   a scalar value cannot be returned in registers.\n-\n-   For the RS/6000, any structure or union type is returned in memory.\n-   (FIXME: Except for V.4, where those <= 8 bytes are returned in\n-   registers.  Can't change this without breaking compatibility.)  */\n+/* The AIX ABI for the RS/6000 specifies that all structures are\n+   returned in memory.  The Darwin ABI does the same.  The SVR4 ABI\n+   specifies that structures <= 8 bytes are returned in r3/r4, but a\n+   draft put them in memory, and GCC used to implement the draft\n+   instead of the final standard.  Therefore, TARGET_AIX_STRUCT_RET\n+   controls this instead of DEFAULT_ABI; V.4 targets needing backward\n+   compatibility can change DRAFT_V4_STRUCT_RET to override the\n+   default, and -m switches get the final word.  See\n+   rs6000_override_options for more details.  */\n+   \n+#define RETURN_IN_MEMORY(TYPE) \\\n+  (AGGREGATE_TYPE_P (TYPE) && \\\n+   (TARGET_AIX_STRUCT_RET || int_size_in_bytes (TYPE) > 8))\n \n-#define RETURN_IN_MEMORY(TYPE) AGGREGATE_TYPE_P (TYPE)\n+/* DRAFT_V4_STRUCT_RET defaults off.  */\n+#define DRAFT_V4_STRUCT_RET 0\n \n /* Let RETURN_IN_MEMORY control what happens.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n@@ -2773,7 +2801,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define which CODE values are valid.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)  \\\n-  ((CODE) == '.' || (CODE) == '*' || (CODE) == '$')\n+  ((CODE) == '.')\n \n /* Print a memory address as an operand to reference that memory location.  */\n "}]}