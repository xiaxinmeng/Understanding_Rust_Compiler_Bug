{"sha": "32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjOTFkZmNmZGRjNGYzYzU5NGFhMjRlODAzZWU2MDVhMjU5ZjJhOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:23:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:23:16Z"}, "message": "[17/46] Make LOOP_VINFO_REDUCTIONS an auto_vec<stmt_vec_info>\n\nThis patch changes LOOP_VINFO_REDUCTIONS from an auto_vec<gimple *>\nto an auto_vec<stmt_vec_info>.  It also changes the associated\nvect_force_simple_reduction so that it takes and returns stmt_vec_infos\ninstead of gimple stmts.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (_loop_vec_info::reductions): Change from an\n\tauto_vec<gimple *> to an auto_vec<stmt_vec_info>.\n\t(vect_force_simple_reduction): Take and return stmt_vec_infos rather\n\tthan gimple stmts.\n\t* tree-parloops.c (valid_reduction_p): Take a stmt_vec_info instead\n\tof a gimple stmt.\n\t(gather_scalar_reductions): Update after above interface changes.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n\t(vect_is_simple_reduction): Take and return stmt_vec_infos rather\n\tthan gimple stmts.\n\t(vect_force_simple_reduction): Likewise.\n\t* tree-vect-patterns.c (vect_pattern_recog_1): Update use of\n\tLOOP_VINFO_REDUCTIONS.\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Likewise.\n\nFrom-SVN: r263132", "tree": {"sha": "d926b51c0c5d09edbb6182739e7f7541adbbdc2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d926b51c0c5d09edbb6182739e7f7541adbbdc2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "542ad08cea053ac4a02729e2f37c67bb50019bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542ad08cea053ac4a02729e2f37c67bb50019bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542ad08cea053ac4a02729e2f37c67bb50019bc0"}], "stats": {"total": 151, "additions": 86, "deletions": 65}, "files": [{"sha": "e799c4c425512a9f3de02aa0fb1207e2eedd7426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -1,3 +1,20 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (_loop_vec_info::reductions): Change from an\n+\tauto_vec<gimple *> to an auto_vec<stmt_vec_info>.\n+\t(vect_force_simple_reduction): Take and return stmt_vec_infos rather\n+\tthan gimple stmts.\n+\t* tree-parloops.c (valid_reduction_p): Take a stmt_vec_info instead\n+\tof a gimple stmt.\n+\t(gather_scalar_reductions): Update after above interface changes.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n+\t(vect_is_simple_reduction): Take and return stmt_vec_infos rather\n+\tthan gimple stmts.\n+\t(vect_force_simple_reduction): Likewise.\n+\t* tree-vect-patterns.c (vect_pattern_recog_1): Update use of\n+\tLOOP_VINFO_REDUCTIONS.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Likewise.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (_stmt_vec_info::reduc_def): Change from"}, {"sha": "513305490c805abb6d283f293b2887a30bad8387", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -2570,15 +2570,14 @@ set_reduc_phi_uids (reduction_info **slot, void *data ATTRIBUTE_UNUSED)\n   return 1;\n }\n \n-/* Return true if the type of reduction performed by STMT is suitable\n+/* Return true if the type of reduction performed by STMT_INFO is suitable\n    for this pass.  */\n \n static bool\n-valid_reduction_p (gimple *stmt)\n+valid_reduction_p (stmt_vec_info stmt_info)\n {\n   /* Parallelization would reassociate the operation, which isn't\n      allowed for in-order reductions.  */\n-  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   vect_reduction_type reduc_type = STMT_VINFO_REDUC_TYPE (stmt_info);\n   return reduc_type != FOLD_LEFT_REDUCTION;\n }\n@@ -2615,10 +2614,11 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n       if (simple_iv (loop, loop, res, &iv, true))\n \tcontinue;\n \n-      gimple *reduc_stmt\n-\t= vect_force_simple_reduction (simple_loop_info, phi,\n+      stmt_vec_info reduc_stmt_info\n+\t= vect_force_simple_reduction (simple_loop_info,\n+\t\t\t\t       simple_loop_info->lookup_stmt (phi),\n \t\t\t\t       &double_reduc, true);\n-      if (!reduc_stmt || !valid_reduction_p (reduc_stmt))\n+      if (!reduc_stmt_info || !valid_reduction_p (reduc_stmt_info))\n \tcontinue;\n \n       if (double_reduc)\n@@ -2627,11 +2627,11 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \t    continue;\n \n \t  double_reduc_phis.safe_push (phi);\n-\t  double_reduc_stmts.safe_push (reduc_stmt);\n+\t  double_reduc_stmts.safe_push (reduc_stmt_info->stmt);\n \t  continue;\n \t}\n \n-      build_new_reduction (reduction_list, reduc_stmt, phi);\n+      build_new_reduction (reduction_list, reduc_stmt_info->stmt, phi);\n     }\n   delete simple_loop_info;\n \n@@ -2661,12 +2661,15 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \t\t\t     &iv, true))\n \t\tcontinue;\n \n-\t      gimple *inner_reduc_stmt\n-\t\t= vect_force_simple_reduction (simple_loop_info, inner_phi,\n+\t      stmt_vec_info inner_phi_info\n+\t\t= simple_loop_info->lookup_stmt (inner_phi);\n+\t      stmt_vec_info inner_reduc_stmt_info\n+\t\t= vect_force_simple_reduction (simple_loop_info,\n+\t\t\t\t\t       inner_phi_info,\n \t\t\t\t\t       &double_reduc, true);\n \t      gcc_assert (!double_reduc);\n-\t      if (inner_reduc_stmt == NULL\n-\t\t  || !valid_reduction_p (inner_reduc_stmt))\n+\t      if (!inner_reduc_stmt_info\n+\t\t  || !valid_reduction_p (inner_reduc_stmt_info))\n \t\tcontinue;\n \n \t      build_new_reduction (reduction_list, double_reduc_stmts[i], phi);"}, {"sha": "9142a114b17589b429c18d51e08c111da2961624", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -546,7 +546,6 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n       gimple *phi = worklist.pop ();\n       tree def = PHI_RESULT (phi);\n       stmt_vec_info stmt_vinfo = vinfo_for_stmt (phi);\n-      gimple *reduc_stmt;\n \n       if (dump_enabled_p ())\n         {\n@@ -557,9 +556,10 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n       gcc_assert (!virtual_operand_p (def)\n \t\t  && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n-      reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi,\n-\t\t\t\t\t\t&double_reduc, false);\n-      if (reduc_stmt)\n+      stmt_vec_info reduc_stmt_info\n+\t= vect_force_simple_reduction (loop_vinfo, stmt_vinfo,\n+\t\t\t\t       &double_reduc, false);\n+      if (reduc_stmt_info)\n         {\n           if (double_reduc)\n             {\n@@ -568,8 +568,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t\t\t\t \"Detected double reduction.\\n\");\n \n               STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_double_reduction_def;\n-              STMT_VINFO_DEF_TYPE (vinfo_for_stmt (reduc_stmt)) =\n-                                                    vect_double_reduction_def;\n+\t      STMT_VINFO_DEF_TYPE (reduc_stmt_info)\n+\t\t= vect_double_reduction_def;\n             }\n           else\n             {\n@@ -580,8 +580,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t\t\t\t     \"Detected vectorizable nested cycle.\\n\");\n \n                   STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_nested_cycle;\n-                  STMT_VINFO_DEF_TYPE (vinfo_for_stmt (reduc_stmt)) =\n-                                                             vect_nested_cycle;\n+\t\t  STMT_VINFO_DEF_TYPE (reduc_stmt_info) = vect_nested_cycle;\n                 }\n               else\n                 {\n@@ -590,13 +589,13 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t\t\t\t     \"Detected reduction.\\n\");\n \n                   STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_reduction_def;\n-                  STMT_VINFO_DEF_TYPE (vinfo_for_stmt (reduc_stmt)) =\n-                                                           vect_reduction_def;\n+\t\t  STMT_VINFO_DEF_TYPE (reduc_stmt_info) = vect_reduction_def;\n                   /* Store the reduction cycles for possible vectorization in\n                      loop-aware SLP if it was not detected as reduction\n \t\t     chain.  */\n-\t\t  if (! REDUC_GROUP_FIRST_ELEMENT (vinfo_for_stmt (reduc_stmt)))\n-\t\t    LOOP_VINFO_REDUCTIONS (loop_vinfo).safe_push (reduc_stmt);\n+\t\t  if (! REDUC_GROUP_FIRST_ELEMENT (reduc_stmt_info))\n+\t\t    LOOP_VINFO_REDUCTIONS (loop_vinfo).safe_push\n+\t\t      (reduc_stmt_info);\n                 }\n             }\n         }\n@@ -2530,8 +2529,8 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   enum tree_code code;\n-  gimple *current_stmt = NULL, *loop_use_stmt = NULL, *first, *next_stmt;\n-  stmt_vec_info use_stmt_info, current_stmt_info;\n+  gimple *loop_use_stmt = NULL, *first, *next_stmt;\n+  stmt_vec_info use_stmt_info, current_stmt_info = NULL;\n   tree lhs;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n@@ -2593,9 +2592,8 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \n       /* Insert USE_STMT into reduction chain.  */\n       use_stmt_info = loop_info->lookup_stmt (loop_use_stmt);\n-      if (current_stmt)\n+      if (current_stmt_info)\n         {\n-          current_stmt_info = vinfo_for_stmt (current_stmt);\n \t  REDUC_GROUP_NEXT_ELEMENT (current_stmt_info) = loop_use_stmt;\n           REDUC_GROUP_FIRST_ELEMENT (use_stmt_info)\n             = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n@@ -2604,7 +2602,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \tREDUC_GROUP_FIRST_ELEMENT (use_stmt_info) = loop_use_stmt;\n \n       lhs = gimple_assign_lhs (loop_use_stmt);\n-      current_stmt = loop_use_stmt;\n+      current_stmt_info = use_stmt_info;\n       size++;\n    }\n \n@@ -2614,7 +2612,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n   /* Swap the operands, if needed, to make the reduction operand be the second\n      operand.  */\n   lhs = PHI_RESULT (phi);\n-  next_stmt = REDUC_GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n+  next_stmt = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n   while (next_stmt)\n     {\n       if (gimple_assign_rhs2 (next_stmt) == lhs)\n@@ -2671,7 +2669,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n     }\n \n   /* Save the chain for further analysis in SLP detection.  */\n-  first = REDUC_GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n+  first = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n   LOOP_VINFO_REDUCTION_CHAINS (loop_info).safe_push (first);\n   REDUC_GROUP_SIZE (vinfo_for_stmt (first)) = size;\n \n@@ -2867,15 +2865,16 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \n */\n \n-static gimple *\n-vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n+static stmt_vec_info\n+vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t\t\t  bool *double_reduc,\n \t\t\t  bool need_wrapping_integral_overflow,\n \t\t\t  enum vect_reduction_type *v_reduc_type)\n {\n+  gphi *phi = as_a <gphi *> (phi_info->stmt);\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n-  gimple *def_stmt, *phi_use_stmt = NULL;\n+  gimple *phi_use_stmt = NULL;\n   enum tree_code orig_code, code;\n   tree op1, op2, op3 = NULL_TREE, op4 = NULL_TREE;\n   tree type;\n@@ -2937,13 +2936,16 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       return NULL;\n     }\n \n-  def_stmt = SSA_NAME_DEF_STMT (loop_arg);\n-  if (is_gimple_assign (def_stmt))\n+  stmt_vec_info def_stmt_info = loop_info->lookup_def (loop_arg);\n+  if (!def_stmt_info)\n+    return NULL;\n+\n+  if (gassign *def_stmt = dyn_cast <gassign *> (def_stmt_info->stmt))\n     {\n       name = gimple_assign_lhs (def_stmt);\n       phi_def = false;\n     }\n-  else if (gimple_code (def_stmt) == GIMPLE_PHI)\n+  else if (gphi *def_stmt = dyn_cast <gphi *> (def_stmt_info->stmt))\n     {\n       name = PHI_RESULT (def_stmt);\n       phi_def = true;\n@@ -2954,14 +2956,12 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n \t{\n \t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t   \"reduction: unhandled reduction operation: \");\n-\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, def_stmt, 0);\n+\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t    def_stmt_info->stmt, 0);\n \t}\n       return NULL;\n     }\n \n-  if (! flow_bb_inside_loop_p (loop, gimple_bb (def_stmt)))\n-    return NULL;\n-\n   nloop_uses = 0;\n   auto_vec<gphi *, 3> lcphis;\n   FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n@@ -2987,6 +2987,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n      defined in the inner loop.  */\n   if (phi_def)\n     {\n+      gphi *def_stmt = as_a <gphi *> (def_stmt_info->stmt);\n       op1 = PHI_ARG_DEF (def_stmt, 0);\n \n       if (gimple_phi_num_args (def_stmt) != 1\n@@ -3012,7 +3013,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n \t\t\t    \"detected double reduction: \");\n \n           *double_reduc = true;\n-          return def_stmt;\n+\t  return def_stmt_info;\n         }\n \n       return NULL;\n@@ -3038,6 +3039,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n \t  }\n     }\n \n+  gassign *def_stmt = as_a <gassign *> (def_stmt_info->stmt);\n   bool nested_in_vect_loop = flow_loop_nested_p (vect_loop, loop);\n   code = orig_code = gimple_assign_rhs_code (def_stmt);\n \n@@ -3178,7 +3180,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n     {\n       if (dump_enabled_p ())\n \treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n-      return def_stmt;\n+      return def_stmt_info;\n     }\n \n   if (def1_info\n@@ -3237,7 +3239,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n             report_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n         }\n \n-      return def_stmt;\n+      return def_stmt_info;\n     }\n \n   /* Try to find SLP reduction chain.  */\n@@ -3250,7 +3252,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n         report_vect_op (MSG_NOTE, def_stmt,\n \t\t\t\"reduction: detected reduction chain: \");\n \n-      return def_stmt;\n+      return def_stmt_info;\n     }\n \n   /* Dissolve group eventually half-built by vect_is_slp_reduction.  */\n@@ -3264,9 +3266,8 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n     }\n \n   /* Look for the expression computing loop_arg from loop PHI result.  */\n-  if (check_reduction_path (vect_location, loop, as_a <gphi *> (phi), loop_arg,\n-\t\t\t    code))\n-    return def_stmt;\n+  if (check_reduction_path (vect_location, loop, phi, loop_arg, code))\n+    return def_stmt_info;\n \n   if (dump_enabled_p ())\n     {\n@@ -3281,25 +3282,24 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n    in-place if it enables detection of more reductions.  Arguments\n    as there.  */\n \n-gimple *\n-vect_force_simple_reduction (loop_vec_info loop_info, gimple *phi,\n+stmt_vec_info\n+vect_force_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t\t\t     bool *double_reduc,\n \t\t\t     bool need_wrapping_integral_overflow)\n {\n   enum vect_reduction_type v_reduc_type;\n-  gimple *def = vect_is_simple_reduction (loop_info, phi, double_reduc,\n-\t\t\t\t\t  need_wrapping_integral_overflow,\n-\t\t\t\t\t  &v_reduc_type);\n-  if (def)\n+  stmt_vec_info def_info\n+    = vect_is_simple_reduction (loop_info, phi_info, double_reduc,\n+\t\t\t\tneed_wrapping_integral_overflow,\n+\t\t\t\t&v_reduc_type);\n+  if (def_info)\n     {\n-      stmt_vec_info phi_info = vinfo_for_stmt (phi);\n-      stmt_vec_info def_info = vinfo_for_stmt (def);\n       STMT_VINFO_REDUC_TYPE (phi_info) = v_reduc_type;\n       STMT_VINFO_REDUC_DEF (phi_info) = def_info;\n       STMT_VINFO_REDUC_TYPE (def_info) = v_reduc_type;\n       STMT_VINFO_REDUC_DEF (def_info) = phi_info;\n     }\n-  return def;\n+  return def_info;\n }\n \n /* Calculate cost of peeling the loop PEEL_ITERS_PROLOGUE times.  */"}, {"sha": "e24ff5f6be5b1f15683a3816ee60523f0f888d94", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -4851,9 +4851,9 @@ vect_pattern_recog_1 (vect_recog_func *recog_func, gimple_stmt_iterator si)\n   if (loop_vinfo)\n     {\n       unsigned ix, ix2;\n-      gimple **elem_ptr;\n+      stmt_vec_info *elem_ptr;\n       VEC_ORDERED_REMOVE_IF (LOOP_VINFO_REDUCTIONS (loop_vinfo), ix, ix2,\n-\t\t\t     elem_ptr, *elem_ptr == stmt);\n+\t\t\t     elem_ptr, *elem_ptr == stmt_info);\n     }\n }\n "}, {"sha": "d51fcb6b9172fd2728531737bc15b72e81d7afe9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -1931,6 +1931,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   unsigned int group_size;\n   tree vectype, scalar_type = NULL_TREE;\n   gimple *next;\n+  stmt_vec_info next_info;\n   unsigned int i;\n   vec<slp_tree> loads;\n   struct data_reference *dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt));\n@@ -2008,9 +2009,9 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   else\n     {\n       /* Collect reduction statements.  */\n-      vec<gimple *> reductions = as_a <loop_vec_info> (vinfo)->reductions;\n-      for (i = 0; reductions.iterate (i, &next); i++)\n-\tscalar_stmts.safe_push (next);\n+      vec<stmt_vec_info> reductions = as_a <loop_vec_info> (vinfo)->reductions;\n+      for (i = 0; reductions.iterate (i, &next_info); i++)\n+\tscalar_stmts.safe_push (next_info);\n     }\n \n   loads.create (group_size);"}, {"sha": "c4eb60fe354374757412107694e6a8dabcc033ad", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c91dfcfddc4f3c594aa24e803ee605a259f2a9/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=32c91dfcfddc4f3c594aa24e803ee605a259f2a9", "patch": "@@ -475,7 +475,7 @@ typedef struct _loop_vec_info : public vec_info {\n   auto_vec<gimple *> may_misalign_stmts;\n \n   /* Reduction cycles detected in the loop. Used in loop-aware SLP.  */\n-  auto_vec<gimple *> reductions;\n+  auto_vec<stmt_vec_info> reductions;\n \n   /* All reduction chains in the loop, represented by the first\n      stmt in the chain.  */\n@@ -1627,8 +1627,8 @@ extern tree vect_create_addr_base_for_vector_ref (gimple *, gimple_seq *,\n \n /* In tree-vect-loop.c.  */\n /* FORNOW: Used in tree-parloops.c.  */\n-extern gimple *vect_force_simple_reduction (loop_vec_info, gimple *,\n-\t\t\t\t\t    bool *, bool);\n+extern stmt_vec_info vect_force_simple_reduction (loop_vec_info, stmt_vec_info,\n+\t\t\t\t\t\t  bool *, bool);\n /* Used in gimple-loop-interchange.c.  */\n extern bool check_reduction_path (dump_user_location_t, loop_p, gphi *, tree,\n \t\t\t\t  enum tree_code);"}]}