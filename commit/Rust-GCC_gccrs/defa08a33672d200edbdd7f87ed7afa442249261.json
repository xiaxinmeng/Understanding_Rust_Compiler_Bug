{"sha": "defa08a33672d200edbdd7f87ed7afa442249261", "node_id": "C_kwDOANBUbNoAKGRlZmEwOGEzMzY3MmQyMDBlZGJkZDdmODdlZDdhZmE0NDIyNDkyNjE", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-08-18T08:23:11Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-08-18T08:33:21Z"}, "message": "rs6000: Add expand pattern for multiply-add (PR103109)\n\ngcc/\n\tPR target/103109\n\t* config/rs6000/rs6000.md (<u>maddditi4): New pattern for multiply-add.\n\t(<u>madddi4_highpart): New.\n\t(<u>madddi4_highpart_le): New.\n\ngcc/testsuite/\n\tPR target/103109\n\t* gcc.target/powerpc/pr103109.h: New.\n\t* gcc.target/powerpc/pr103109-1.c: New.\n\t* gcc.target/powerpc/pr103109-2.c: New.", "tree": {"sha": "35ff0127c13e38f9b89722c4e796e756ffff3727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ff0127c13e38f9b89722c4e796e756ffff3727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defa08a33672d200edbdd7f87ed7afa442249261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defa08a33672d200edbdd7f87ed7afa442249261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defa08a33672d200edbdd7f87ed7afa442249261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defa08a33672d200edbdd7f87ed7afa442249261/comments", "author": null, "committer": null, "parents": [{"sha": "4645ce0d00b8e19ea4bbfcd0cef37e91dea3c9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4645ce0d00b8e19ea4bbfcd0cef37e91dea3c9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4645ce0d00b8e19ea4bbfcd0cef37e91dea3c9f4"}], "stats": {"total": 166, "additions": 165, "deletions": 1}, "files": [{"sha": "e9e5cd1e54db1a022e118a76fc3f6af654c9c61c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=defa08a33672d200edbdd7f87ed7afa442249261", "patch": "@@ -3217,7 +3217,7 @@\n   DONE;\n })\n \n-(define_insn \"*maddld<mode>4\"\n+(define_insn \"maddld<mode>4\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:GPR (mult:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t\t    (match_operand:GPR 2 \"gpc_reg_operand\" \"r\"))\n@@ -3226,6 +3226,52 @@\n   \"maddld %0,%1,%2,%3\"\n   [(set_attr \"type\" \"mul\")])\n \n+(define_expand \"<u>maddditi4\"\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n+\t(plus:TI\n+\t  (mult:TI (any_extend:TI (match_operand:DI 1 \"gpc_reg_operand\"))\n+\t\t   (any_extend:TI (match_operand:DI 2 \"gpc_reg_operand\")))\n+\t  (any_extend:TI (match_operand:DI 3 \"gpc_reg_operand\"))))]\n+  \"TARGET_MADDLD && TARGET_POWERPC64\"\n+{\n+  rtx op0_lo = gen_rtx_SUBREG (DImode, operands[0], BYTES_BIG_ENDIAN ? 8 : 0);\n+  rtx op0_hi = gen_rtx_SUBREG (DImode, operands[0], BYTES_BIG_ENDIAN ? 0 : 8);\n+\n+  emit_insn (gen_maddlddi4 (op0_lo, operands[1], operands[2], operands[3]));\n+\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_<u>madddi4_highpart (op0_hi, operands[1], operands[2],\n+\t\t\t\t\toperands[3]));\n+  else\n+    emit_insn (gen_<u>madddi4_highpart_le (op0_hi, operands[1], operands[2],\n+\t\t\t\t\t   operands[3]));\n+  DONE;\n+})\n+\n+(define_insn \"<u>madddi4_highpart\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(subreg:DI\n+\t  (plus:TI\n+\t    (mult:TI (any_extend:TI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t     (any_extend:TI (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+\t    (any_extend:TI (match_operand:DI 3 \"gpc_reg_operand\" \"r\")))\n+\t 0))]\n+  \"TARGET_MADDLD && BYTES_BIG_ENDIAN && TARGET_POWERPC64\"\n+  \"maddhd<u> %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"mul\")])\n+\n+(define_insn \"<u>madddi4_highpart_le\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(subreg:DI\n+\t  (plus:TI\n+\t    (mult:TI (any_extend:TI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t     (any_extend:TI (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+\t    (any_extend:TI (match_operand:DI 3 \"gpc_reg_operand\" \"r\")))\n+\t 8))]\n+  \"TARGET_MADDLD && !BYTES_BIG_ENDIAN && TARGET_POWERPC64\"\n+  \"maddhd<u> %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"mul\")])\n+\n (define_insn \"udiv<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "097a44ea35d259ad7eb23bc94eacb8fefa8cc14e", "filename": "gcc/testsuite/gcc.target/powerpc/pr103109-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c?ref=defa08a33672d200edbdd7f87ed7afa442249261", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* { dg-require-effective-target has_arch_ppc64 } */\n+/* { dg-final { scan-assembler-times {\\mmaddld\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mmaddhd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mmaddhdu\\M} 1 } } */\n+\n+#include \"pr103109.h\""}, {"sha": "4b93519ec6508ef02f63860c2181fe7c2f5dd8fa", "filename": "gcc/testsuite/gcc.target/powerpc/pr103109-2.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-2.c?ref=defa08a33672d200edbdd7f87ed7afa442249261", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target p9modulo_hw } */\n+/* { dg-require-effective-target has_arch_ppc64 } */\n+\n+#include \"pr103109.h\"\n+\n+union U {\n+  __int128 i128;\n+  struct {\n+    long l1;\n+    long l2;\n+  } s;\n+};\n+\n+__int128\n+create_i128 (long most_sig, long least_sig)\n+{\n+  union U u;\n+\n+#if __LITTLE_ENDIAN__\n+  u.s.l1 = least_sig;\n+  u.s.l2 = most_sig;\n+#else\n+  u.s.l1 = most_sig;\n+  u.s.l2 = least_sig;\n+#endif\n+  return u.i128;\n+}\n+\n+#define DEBUG 0\n+\n+#if DEBUG\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+void print_i128(__int128 val, int unsignedp)\n+{\n+  if (unsignedp)\n+    printf(\" %llu \", (unsigned long long)(val >> 64));\n+  else\n+    printf(\" %lld \", (signed long long)(val >> 64));\n+\n+  printf(\"%llu (0x%llx %llx)\",\n+         (unsigned long long)(val & 0xFFFFFFFFFFFFFFFF),\n+         (unsigned long long)(val >> 64),\n+         (unsigned long long)(val & 0xFFFFFFFFFFFFFFFF));\n+}\n+#endif\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  long a = 0xFEDCBA9876543210L;\n+  long b = 0x1000000L;\n+  long c = 0x123456L;\n+  __int128 expected_result = create_i128 (0xFFFFFFFFFFFEDCBAL,\n+                                          0x9876543210123456L);\n+\n+  __int128 result = multiply_add (a, b, c);\n+\n+  if (result != expected_result)\n+    {\n+#if DEBUG\n+      printf (\"ERROR: multiply_add (%lld, %lld, %lld) = \", a, b, c);\n+      print_i128 (result, 0);\n+      printf (\"\\n does not match expected_result = \");\n+      print_i128 (expected_result, 0);\n+      printf (\"\\n\\n\");\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  unsigned long au = 0xFEDCBA9876543210UL;\n+  unsigned long bu = 0x1000000UL;\n+  unsigned long cu = 0x123456UL;\n+  unsigned __int128 expected_resultu = create_i128 (0x0000000000FEDCBAL,\n+                                                    0x9876543210123456L);\n+\n+  unsigned __int128 resultu = multiply_addu (au, bu, cu);\n+  if (resultu != expected_resultu)\n+    {\n+#if DEBUG\n+      printf (\"ERROR: multiply_addu (%llu, %llu, %llu) = \", au, bu, cu);\n+      print_i128 (resultu, 1);\n+      printf (\"\\n does not match expected_result = \");\n+      print_i128 (expected_resultu, 1);\n+      printf (\"\\n\\n\");\n+#else\n+      abort();\n+#endif\n+    }\n+}"}, {"sha": "d16a5dd565652cef364d2820ad6f4241d69fae0c", "filename": "gcc/testsuite/gcc.target/powerpc/pr103109.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defa08a33672d200edbdd7f87ed7afa442249261/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109.h?ref=defa08a33672d200edbdd7f87ed7afa442249261", "patch": "@@ -0,0 +1,12 @@\n+__attribute__((noinline))\n+__int128 multiply_add (long a, long b, long c)\n+{\n+  return (__int128) a * b + c;\n+}\n+\n+__attribute__((noinline))\n+unsigned __int128 multiply_addu (unsigned long a, unsigned long b,\n+\t\t\t\t unsigned long c)\n+{\n+  return (unsigned __int128) a * b + c;\n+}"}]}