{"sha": "829407e190ab929329b95cd68d0ece43157b65ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5NDA3ZTE5MGFiOTI5MzI5Yjk1Y2Q2OGQwZWNlNDMxNTdiNjVhYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T19:04:27Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T19:04:27Z"}, "message": "(default_compilers): Define __GNUC_MINOR__, using %v.\n\n(do_spec_1): Implement %v.\n\nFrom-SVN: r5899", "tree": {"sha": "0a1a5150176106686b357dcf37671c80d435ced5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a1a5150176106686b357dcf37671c80d435ced5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/829407e190ab929329b95cd68d0ece43157b65ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829407e190ab929329b95cd68d0ece43157b65ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829407e190ab929329b95cd68d0ece43157b65ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829407e190ab929329b95cd68d0ece43157b65ab/comments", "author": null, "committer": null, "parents": [{"sha": "37f2a146fe1ce2940491f42852d2aa293aee748b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f2a146fe1ce2940491f42852d2aa293aee748b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f2a146fe1ce2940491f42852d2aa293aee748b"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "8fa8794809adc393be533cc754e797787373620c", "filename": "gcc/gcc.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829407e190ab929329b95cd68d0ece43157b65ab/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829407e190ab929329b95cd68d0ece43157b65ab/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=829407e190ab929329b95cd68d0ece43157b65ab", "patch": "@@ -244,6 +244,8 @@ or with constant text in a single argument.\n  %x{OPTION}\tAccumulate an option for %X.\n  %X\tOutput the accumulated linker options specified by compilations.\n  %Y\tOutput the accumulated assembler options specified by compilations.\n+ %v\tSubstitute the minor version number of GCC.\n+\t(For version 2.5.n, this is 5.)\n  %a     process ASM_SPEC as a spec.\n         This allows config.h to specify part of the spec for running as.\n  %A\tprocess ASM_FINAL_SPEC as a spec.  A capital A is actually\n@@ -444,7 +446,8 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n-        -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+        -undef -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+\t%{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -476,7 +479,8 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n-        -undef -D__OBJC__ -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+        -undef -D__OBJC__ -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+\t %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -499,7 +503,8 @@ static struct compiler default_compilers[] =\n     cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n-        -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+        -undef -D__GNUC__=2 -D__GNUC_MINOR__=%v\\\n+\t %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -512,7 +517,7 @@ static struct compiler default_compilers[] =\n    \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n-\t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus \\\n+\t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus -D__GNUC_MINOR__=%v\\\n \t%{ansi:-trigraphs -$ -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n@@ -3345,6 +3350,22 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    }\n \t    break;\n \n+\t  case 'v':\n+\t    {\n+\t      char *p = version_string;\n+\t      char *q, *copy;\n+\t      /* Set P after the first period.  */\n+\t      while (*p != '.') p++;\n+\t      p++;\n+\t      /* Set Q at the second period or at the end.  */\n+\t      q = p;\n+\t      while (*q != '.' && *q != 0) q++;\n+\t      /* Put that part into the command.  */\n+\t      obstack_grow (&obstack, p, q - p);\n+\t      arg_going = 1;\n+\t    }\n+\t    break;\n+\n \t  case '|':\n \t    if (input_from_pipe)\n \t      do_spec_1 (\"-\", 0, NULL_PTR);"}]}