{"sha": "7a87758dfbca714549ef95a92ed7657622949dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4Nzc1OGRmYmNhNzE0NTQ5ZWY5NWE5MmVkNzY1NzYyMjk0OWRlYw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-05-23T23:14:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-23T23:14:57Z"}, "message": "m68k.h: Declare more functions used in macros.\n\n        * m68k.h: Declare more functions used in macros.\n        (REG_CLASS_CONTENTS): Completely embrace initializer.\n        * m68k.md (adddi3, subdi3): Add abort call to avoid warning\n        about returning no value.\n        * cse.c (find_best_addr): Declare p and found_better only if\n        needed.\n        * dbxout.c (dbxout_continue): Define only if DBX_CONTIN_LENGTH > 0.\n        * dwarfout.c (string_length_attribute): #if 0 away.\n        * function.c (expand_function_end): Define varible blktramp only\n        if needed.\n        * jump.c (find_insert_position): Define only if !HAVE_cc0.\n        * loop.c (combine_givs_p): Define variable tem only if needed.\n        * real.c: Comment out unused functions eabs, eround,\n        e{24,53,64,113}toasc and eiinfin.\n\nFrom-SVN: r19998", "tree": {"sha": "2486de3a2e21e97b2f61dbd1f3989688d1e5700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2486de3a2e21e97b2f61dbd1f3989688d1e5700f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a87758dfbca714549ef95a92ed7657622949dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a87758dfbca714549ef95a92ed7657622949dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a87758dfbca714549ef95a92ed7657622949dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a87758dfbca714549ef95a92ed7657622949dec/comments", "author": null, "committer": null, "parents": [{"sha": "10ad38cac074de11205eb7c9981135780a53df07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ad38cac074de11205eb7c9981135780a53df07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ad38cac074de11205eb7c9981135780a53df07"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "4cff9d243eafd46fec0fc03dfd30fa6711d684d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -1,3 +1,21 @@\n+1998-05-24  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* m68k.h: Declare more functions used in macros.\n+\t(REG_CLASS_CONTENTS): Completely embrace initializer.\n+\t* m68k.md (adddi3, subdi3): Add abort call to avoid warning\n+\tabout returning no value.\n+\t* cse.c (find_best_addr): Declare p and found_better only if\n+\tneeded.\n+\t* dbxout.c (dbxout_continue): Define only if DBX_CONTIN_LENGTH > 0.\n+\t* dwarfout.c (string_length_attribute): #if 0 away.\n+\t* function.c (expand_function_end): Define varible blktramp only\n+\tif needed.\n+\t* jump.c (find_insert_position): Define only if !HAVE_cc0.\n+\t* loop.c (combine_givs_p): Define variable tem only if needed.\n+\t* real.c: Comment out unused functions eabs, eround,\n+\te{24,53,64,113}toasc and eiinfin.\n+\n+\n Sat May 23 23:44:53 1998  Alexandre Oliva <oliva@dcc.unicamp.br>\n \n \t* Makefile.in (boostrap2-lean, bootstrap3-lean,"}, {"sha": "f3563a15a8a9db1f1288f97cfc445ef469a7d021", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -586,14 +586,14 @@ enum reg_class {\n \n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t\t\\\n- 0x00000000,   \t/* NO_REGS */\t\t\\\n- 0x000000ff,\t/* DATA_REGS */\t\t\\\n- 0x0000ff00,\t/* ADDR_REGS */\t\t\\\n- 0x00ff0000,\t/* FP_REGS */\t\t\\\n- 0x0000ffff,\t/* GENERAL_REGS */\t\\\n- 0x00ff00ff,\t/* DATA_OR_FP_REGS */\t\\\n- 0x00ffff00,    /* ADDR_OR_FP_REGS */   \\\n- 0x00ffffff,\t/* ALL_REGS */\t\t\\\n+  {0x00000000},  /* NO_REGS */\t\t\\\n+  {0x000000ff},  /* DATA_REGS */\t\\\n+  {0x0000ff00},  /* ADDR_REGS */\t\\\n+  {0x00ff0000},  /* FP_REGS */\t\t\\\n+  {0x0000ffff},  /* GENERAL_REGS */\t\\\n+  {0x00ff00ff},  /* DATA_OR_FP_REGS */\t\\\n+  {0x00ffff00},  /* ADDR_OR_FP_REGS */\t\\\n+  {0x00ffffff},  /* ALL_REGS */\t\t\\\n }\n \n /* The same information, inverted:\n@@ -2121,6 +2121,8 @@ extern int use_return_insn ();\n extern void print_operand_address ();\n extern void print_operand ();\n extern void notice_update_cc ();\n+extern void finalize_pic ();\n+extern void override_options ();\n \n \f\n /*"}, {"sha": "f583dc5e1cd841ca0fd7c5dd9496d08426b68ea5", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -2220,6 +2220,8 @@\n \t  return \\\"add%.l %R2,%1\\;move%.l %0,%3\\;addx%.l %2,%3\\;move%.l %3,%0\\\";\n \t}\n     }\n+  else\n+    abort ();\n } \")\n \n (define_insn \"addsi_lshrsi_31\"\n@@ -2777,6 +2779,8 @@\n \t  return \\\"sub%.l %R2,%1\\;move%.l %0,%3\\;subx%.l %2,%3\\;move%.l %3,%0\\\";\n \t}\n     }\n+  else\n+    abort ();\n } \")\n \n (define_insn \"subsi3\""}, {"sha": "d494b04466a249da1ea6f95af87101e6ca3ff9cd", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -2564,9 +2564,12 @@ find_best_addr (insn, loc)\n      rtx insn;\n      rtx *loc;\n {\n-  struct table_elt *elt, *p;\n+  struct table_elt *elt;\n   rtx addr = *loc;\n+#ifdef ADDRESS_COST\n+  struct table_elt *p;\n   int found_better = 1;\n+#endif\n   int save_do_not_record = do_not_record;\n   int save_hash_arg_in_memory = hash_arg_in_memory;\n   int save_hash_arg_in_struct = hash_arg_in_struct;"}, {"sha": "a2abc7fc94413c5a5344bac2f103726099a933d0", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -326,7 +326,9 @@ static void dbxout_function_end\t\tPROTO((void));\n #endif\n static void dbxout_typedefs\t\tPROTO((tree));\n static void dbxout_type_index\t\tPROTO((tree));\n+#if DBX_CONTIN_LENGTH > 0\n static void dbxout_continue\t\tPROTO((void));\n+#endif\n static void dbxout_type_fields\t\tPROTO((tree));\n static void dbxout_type_method_1\tPROTO((tree, char *));\n static void dbxout_type_methods\t\tPROTO((tree));\n@@ -602,6 +604,7 @@ dbxout_type_index (type)\n #endif\n }\n \n+#if DBX_CONTIN_LENGTH > 0\n /* Continue a symbol-description that gets too big.\n    End one symbol table entry with a double-backslash\n    and start a new one, eventually producing something like\n@@ -620,6 +623,7 @@ dbxout_continue ()\n   fprintf (asmfile, \"%s \\\"\", ASM_STABS_OP);\n   current_sym_nchars = 0;\n }\n+#endif /* DBX_CONTIN_LENGTH > 0 */\n \f\n /* Subroutine of `dbxout_type'.  Output the type fields of TYPE.\n    This must be a separate function because anonymous unions require"}, {"sha": "c4bfc6321f84fdda930d996c387b4c32e6a8501a", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -362,7 +362,9 @@ static inline void body_begin_attribute\tPROTO((char *));\n static inline void body_end_attribute\tPROTO((char *));\n static inline void language_attribute\tPROTO((unsigned));\n static inline void member_attribute\tPROTO((tree));\n+#if 0\n static inline void string_length_attribute PROTO((tree));\n+#endif\n static inline void comp_dir_attribute\tPROTO((char *));\n static inline void sf_names_attribute\tPROTO((char *));\n static inline void src_info_attribute\tPROTO((char *));\n@@ -2875,6 +2877,7 @@ member_attribute (context)\n     }\n }\n \n+#if 0\n static inline void\n string_length_attribute (upper_bound)\n      register tree upper_bound;\n@@ -2890,6 +2893,7 @@ string_length_attribute (upper_bound)\n   output_bound_representation (upper_bound, 0, 'u');\n   ASM_OUTPUT_LABEL (asm_out_file, end_label);\n }\n+#endif\n \n static inline void\n comp_dir_attribute (dirname)"}, {"sha": "00e7546b26882160d6654c97a03a4a297ac4643f", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -5695,7 +5695,9 @@ expand_function_end (filename, line, end_bindings)\n       tree function = TREE_PURPOSE (link);\n       rtx context = lookup_static_chain (function);\n       rtx tramp = RTL_EXPR_RTL (TREE_VALUE (link));\n+#ifdef TRAMPOLINE_TEMPLATE\n       rtx blktramp;\n+#endif\n       rtx seq;\n \n #ifdef TRAMPOLINE_TEMPLATE"}, {"sha": "301381c40d9bf16442784f9d855b31925a02f266", "filename": "gcc/jump.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -118,7 +118,9 @@ static void delete_from_jump_chain\tPROTO((rtx));\n static int delete_labelref_insn\t\tPROTO((rtx, rtx, int));\n static void mark_modified_reg\t\tPROTO((rtx, rtx));\n static void redirect_tablejump\t\tPROTO((rtx, rtx));\n+#ifndef HAVE_cc0\n static rtx find_insert_position         PROTO((rtx, rtx));\n+#endif\n \f\n /* Delete no-op jumps and optimize jumps to jumps\n    and jumps around jumps.\n@@ -4739,6 +4741,7 @@ rtx_equal_for_thread_p (x, y, yinsn)\n }\n \f\n \n+#ifndef HAVE_cc0\n /* Return the insn that NEW can be safely inserted in front of starting at\n    the jump insn INSN.  Return 0 if it is not safe to do this jump\n    optimization.  Note that NEW must contain a single set. */\n@@ -4779,3 +4782,4 @@ find_insert_position (insn, new)\n \n   return reg_mentioned_p (SET_DEST (single_set (new)), prev) ? 0 : prev;\n }\n+#endif /* !HAVE_cc0 */"}, {"sha": "45678def1dcd71a7928ea285a1042569c40bd05c", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -5845,7 +5845,9 @@ static int\n combine_givs_p (g1, g2)\n      struct induction *g1, *g2;\n {\n+#ifdef ADDRESS_COST\n   rtx tem;\n+#endif\n \n   /* If these givs are identical, they can be combined.  */\n   if (rtx_equal_p (g1->mult_val, g2->mult_val)"}, {"sha": "37b0a883867e90ae8f43535fb8700030cffcb69b", "filename": "gcc/real.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a87758dfbca714549ef95a92ed7657622949dec/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=7a87758dfbca714549ef95a92ed7657622949dec", "patch": "@@ -325,7 +325,9 @@ static void endian\tPROTO((unsigned EMUSHORT *, long *,\n \t\t\t       enum machine_mode));\n static void eclear\tPROTO((unsigned EMUSHORT *));\n static void emov\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#if 0\n static void eabs\tPROTO((unsigned EMUSHORT *));\n+#endif\n static void eneg\tPROTO((unsigned EMUSHORT *));\n static int eisneg\tPROTO((unsigned EMUSHORT *));\n static int eisinf\tPROTO((unsigned EMUSHORT *));\n@@ -340,7 +342,9 @@ static void emovz\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void einan\tPROTO((unsigned EMUSHORT *));\n static int eiisnan\tPROTO((unsigned EMUSHORT *));\n static int eiisneg\tPROTO((unsigned EMUSHORT *));\n+#if 0\n static void eiinfin\tPROTO((unsigned EMUSHORT *));\n+#endif\n static int eiisinf\tPROTO((unsigned EMUSHORT *));\n static int ecmpm\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void eshdn1\tPROTO((unsigned EMUSHORT *));\n@@ -379,7 +383,9 @@ static void toe53\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void etoe24\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void toe24\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static int ecmp\t\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#if 0\n static void eround\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#endif\n static void ltoe\tPROTO((HOST_WIDE_INT *, unsigned EMUSHORT *));\n static void ultoe\tPROTO((unsigned HOST_WIDE_INT *, unsigned EMUSHORT *));\n static void eifrac\tPROTO((unsigned EMUSHORT *, HOST_WIDE_INT *,\n@@ -388,10 +394,12 @@ static void euifrac\tPROTO((unsigned EMUSHORT *, unsigned HOST_WIDE_INT *,\n \t\t\t       unsigned EMUSHORT *));\n static int eshift\tPROTO((unsigned EMUSHORT *, int));\n static int enormlz\tPROTO((unsigned EMUSHORT *));\n+#if 0\n static void e24toasc\tPROTO((unsigned EMUSHORT *, char *, int));\n static void e53toasc\tPROTO((unsigned EMUSHORT *, char *, int));\n static void e64toasc\tPROTO((unsigned EMUSHORT *, char *, int));\n static void e113toasc\tPROTO((unsigned EMUSHORT *, char *, int));\n+#endif /* 0 */\n static void etoasc\tPROTO((unsigned EMUSHORT *, char *, int));\n static void asctoe24\tPROTO((char *, unsigned EMUSHORT *));\n static void asctoe53\tPROTO((char *, unsigned EMUSHORT *));\n@@ -1292,7 +1300,9 @@ ereal_isneg (x)\n  \te53toe (&d, e)\t\tIEEE double precision to e type\n  \te64toe (&d, e)\t\tIEEE long double precision to e type\n  \te113toe (&d, e)\t\t128-bit long double precision to e type\n+#if 0\n  \teabs (e)\t\t\tabsolute value\n+#endif\n  \teadd (a, b, c)\t\tc = b + a\n  \teclear (e)\t\te = 0\n  \tecmp (a, b)\t\tReturns 1 if a > b, 0 if a == b,\n@@ -1307,12 +1317,16 @@ ereal_isneg (x)\n  \temov (a, b)\t\tb = a\n  \temul (a, b, c)\t\tc = b * a\n  \teneg (e)\t\t\te = -e\n+#if 0\n  \teround (a, b)\t\tb = nearest integer value to a\n+#endif\n  \tesub (a, b, c)\t\tc = b - a\n+#if 0\n  \te24toasc (&f, str, n)\tsingle to ASCII string, n digits after decimal\n  \te53toasc (&d, str, n)\tdouble to ASCII string, n digits after decimal\n  \te64toasc (&d, str, n)\t80-bit long double to ASCII string\n  \te113toasc (&d, str, n)\t128-bit long double to ASCII string\n+#endif\n  \tetoasc (e, str, n)\te to ASCII string, n digits after decimal\n  \tetoe24 (e, &f)\t\tconvert e type to IEEE single precision\n  \tetoe53 (e, &d)\t\tconvert e type to IEEE double precision\n@@ -1350,7 +1364,9 @@ ereal_isneg (x)\n         eiisnan (ai)            1 if a NaN\n  \teiisneg (ai)\t\t1 if sign bit of ai != 0, else 0\n         einan (ai)              set ai = NaN\n+#if 0\n         eiinfin (ai)            set ai = infinity\n+#endif\n \n   The result is always normalized and rounded to NI-4 word precision\n   after each arithmetic operation.\n@@ -1520,6 +1536,7 @@ emov (a, b)\n }\n \n \n+#if 0\n /* Absolute value of e-type X.  */\n \n static void \n@@ -1529,6 +1546,7 @@ eabs (x)\n   /* sign is top bit of last word of external format */\n   x[NE - 1] &= 0x7fff;\t\t\n }\n+#endif /* 0 */\n \n /* Negate the e-type number X.  */\n \n@@ -1821,6 +1839,7 @@ eiisneg (x)\n   return x[0] != 0;\n }\n \n+#if 0\n /* Fill exploded e-type X with infinity pattern.\n    This has maximum exponent and significand all zeros.  */\n \n@@ -1832,6 +1851,7 @@ eiinfin (x)\n   ecleaz (x);\n   x[E] = 0x7fff;\n }\n+#endif /* 0 */\n \n /* Return nonzero if exploded e-type X is infinite.  */\n \n@@ -4083,6 +4103,7 @@ ecmp (a, b)\n     return (-msign);\t\t/* p is littler */\n }\n \n+#if 0\n /* Find e-type nearest integer to X, as floor (X + 0.5).  */\n \n static void \n@@ -4092,6 +4113,7 @@ eround (x, y)\n   eadd (ehalf, x, y);\n   efloor (y, y);\n }\n+#endif /* 0 */\n \n /* Convert HOST_WIDE_INT LP to e type Y.  */\n \n@@ -4563,6 +4585,7 @@ static unsigned EMUSHORT emtens[NTEN + 1][NE] =\n };\n #endif\n \n+#if 0\n /* Convert float value X to ASCII string STRING with NDIG digits after\n    the decimal point.  */\n \n@@ -4622,6 +4645,7 @@ e113toasc (x, string, ndigs)\n   e113toe (x, w);\n   etoasc (w, string, ndigs);\n }\n+#endif /* 0 */\n \n /* Convert e-type X to ASCII string STRING with NDIGS digits after\n    the decimal point.  */"}]}