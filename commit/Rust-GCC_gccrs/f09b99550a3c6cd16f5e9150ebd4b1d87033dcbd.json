{"sha": "f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "node_id": "C_kwDOANBUbNoAKGYwOWI5OTU1MGEzYzZjZDE2ZjVlOTE1MGViZDRiMWQ4NzAzM2RjYmQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-07T16:41:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-07T16:41:59Z"}, "message": "analyzer: extract bits from integer constants [PR105783]\n\nFix a false positive from -Wanalyzer-null-dereference due to -fanalyzer\nfailing to grok the value of a particular boolean field initialized to a\nconstant.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105783\n\t* region-model.cc (selftest::get_bit): New function.\n\t(selftest::test_bits_within_svalue_folding): New.\n\t(selfftest::analyzer_region_model_cc_tests): Call it.\n\t* svalue.cc (constant_svalue::maybe_fold_bits_within): Handle the\n\tcase of extracting a single bit.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105783\n\t* gcc.dg/analyzer/pr105783.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5dfa5182f6242910eb9770406e78020e5cdd534b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dfa5182f6242910eb9770406e78020e5cdd534b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb491ea5c10955c667ceeda76dede393c93a377b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb491ea5c10955c667ceeda76dede393c93a377b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb491ea5c10955c667ceeda76dede393c93a377b"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "81ef41edee4b330766c1aab846883f41979a1a83", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "patch": "@@ -7132,6 +7132,57 @@ test_sub_svalue_folding ()\n   ASSERT_EQ (sub->get_type (), TREE_TYPE (ct.m_x_field));\n }\n \n+/* Get BIT within VAL as a symbolic value within MGR.  */\n+\n+static const svalue *\n+get_bit (region_model_manager *mgr,\n+\t bit_offset_t bit,\n+\t unsigned HOST_WIDE_INT val)\n+{\n+  const svalue *inner_svalue\n+    = mgr->get_or_create_int_cst (unsigned_type_node, val);\n+  return mgr->get_or_create_bits_within (boolean_type_node,\n+\t\t\t\t\t bit_range (bit, 1),\n+\t\t\t\t\t inner_svalue);\n+}\n+\n+/* Verify that bits_within_svalues are folded as expected.  */\n+\n+static void\n+test_bits_within_svalue_folding ()\n+{\n+  region_model_manager mgr;\n+\n+  const svalue *zero = mgr.get_or_create_int_cst (boolean_type_node, 0);\n+  const svalue *one = mgr.get_or_create_int_cst (boolean_type_node, 1);\n+\n+  {\n+    const unsigned val = 0x0000;\n+    for (unsigned bit = 0; bit < 16; bit++)\n+      ASSERT_EQ (get_bit (&mgr, bit, val), zero);\n+  }\n+\n+  {\n+    const unsigned val = 0x0001;\n+    ASSERT_EQ (get_bit (&mgr, 0, val), one);\n+    for (unsigned bit = 1; bit < 16; bit++)\n+      ASSERT_EQ (get_bit (&mgr, bit, val), zero);\n+  }\n+\n+  {\n+    const unsigned val = 0x8000;\n+    for (unsigned bit = 0; bit < 15; bit++)\n+      ASSERT_EQ (get_bit (&mgr, bit, val), zero);\n+    ASSERT_EQ (get_bit (&mgr, 15, val), one);\n+  }\n+\n+  {\n+    const unsigned val = 0xFFFF;\n+    for (unsigned bit = 0; bit < 16; bit++)\n+      ASSERT_EQ (get_bit (&mgr, bit, val), one);\n+  }\n+}\n+\n /* Test that region::descendent_of_p works as expected.  */\n \n static void\n@@ -8488,6 +8539,7 @@ analyzer_region_model_cc_tests ()\n   test_unaryop_svalue_folding ();\n   test_binop_svalue_folding ();\n   test_sub_svalue_folding ();\n+  test_bits_within_svalue_folding ();\n   test_descendent_of_p ();\n   test_bit_range_regions ();\n   test_assignment ();"}, {"sha": "a0838c0f5885c23e6ad1a921ded83ab0328b0705", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "patch": "@@ -868,7 +868,7 @@ constant_svalue::eval_condition (const constant_svalue *lhs,\n \n const svalue *\n constant_svalue::maybe_fold_bits_within (tree type,\n-\t\t\t\t\t const bit_range &,\n+\t\t\t\t\t const bit_range &bits,\n \t\t\t\t\t region_model_manager *mgr) const\n {\n   /* Bits within an all-zero value are also all zero.  */\n@@ -879,6 +879,21 @@ constant_svalue::maybe_fold_bits_within (tree type,\n       else\n \treturn this;\n     }\n+\n+  /* Handle the case of extracting a single bit. */\n+  if (bits.m_size_in_bits == 1\n+      && TREE_CODE (m_cst_expr) == INTEGER_CST\n+      && type\n+      && INTEGRAL_TYPE_P (type))\n+    {\n+      unsigned HOST_WIDE_INT bit = bits.m_start_bit_offset.to_uhwi ();\n+      unsigned HOST_WIDE_INT mask = (1 << bit);\n+      unsigned HOST_WIDE_INT val_as_hwi = tree_to_uhwi (m_cst_expr);\n+      unsigned HOST_WIDE_INT masked_val = val_as_hwi & mask;\n+      int result = masked_val ? 1 : 0;\n+      return mgr->get_or_create_int_cst (type, result);\n+    }\n+\n   /* Otherwise, don't fold.  */\n   return NULL;\n }"}, {"sha": "00f44d04b64a4e4fd8bca5dd28e388433428e01f", "filename": "gcc/testsuite/gcc.dg/analyzer/pr105783.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105783.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105783.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105783.c?ref=f09b99550a3c6cd16f5e9150ebd4b1d87033dcbd", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-additional-options \"-O\" } */\n+\n+struct ss_s {\n+    union out_or_counting_u {\n+    \tchar *newstr;\n+    \tunsigned long long cnt;\n+    } uu;\n+    _Bool counting;\n+};\n+\n+struct ss_s ss_init(void) {\n+   struct ss_s rr = { .counting = 1 };\n+   return rr;\n+}\n+\n+void ss_out(struct ss_s *t, char cc) {\n+   if (!t->counting) {\n+       *t->uu.newstr++ = cc;\n+   }\n+}\n+\n+int main() {\n+    struct ss_s ss = ss_init();\n+    ss_out(&ss, 'a');\n+}\n+"}]}