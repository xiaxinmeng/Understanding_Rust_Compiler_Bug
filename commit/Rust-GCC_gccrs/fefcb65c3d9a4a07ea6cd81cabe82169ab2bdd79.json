{"sha": "fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmY2I2NWMzZDlhNGEwN2VhNmNkODFjYWJlODIxNjlhYjJiZGQ3OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-08T02:13:29Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-08T02:13:29Z"}, "message": "default.h (PROMOTE_PROTOTYPES): Remove.\n\n\t* default.h (PROMOTE_PROTOTYPES): Remove.\n\t* system.h (PROMOTE_FUNCTION_RETURN, PROMOTE_PROTOTYPES,\n\tSTRUCT_VALUE_REGNUM, SETUP_INCOMING_VARARGS,\n\tEXPAND_BUILTIN_SAVEREGS): Poison.\n\t* target-def.h (TARGET_PROMOTE_FUNCTION_RETURN): Define as\n\thook_bool_tree_false.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t* target.h: Replace SETUP_INCOMING_VARARGS with\n\ttargetm.calls.setup_incoming_varargs().\n\t* targhooks.c (default_promote_function_return): Remove.\n\t(default_promote_prototypes): Likewise.\n\t(default_struct_value_rtx): Always abort().\n\t(default_expand_builtin_saveregs): Always print an error\n\tmessage.\n\t(default_setup_incoming_varargs): Do nothing.\n\t(default_pretend_outgoing_varargs_named): Don't depend on\n\tSETUP_INCOMING_VARARGS.\n\t* targhooks.h: Remove the prototype for\n\tdefault_promote_function_return and\n\tdefault_promote_prototypes.\n\nFrom-SVN: r77477", "tree": {"sha": "000273995d5b400db2cc3a450340bd3813c569cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000273995d5b400db2cc3a450340bd3813c569cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/comments", "author": null, "committer": null, "parents": [{"sha": "dc79b3b841bb884421e179367fd13619c515c328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc79b3b841bb884421e179367fd13619c515c328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc79b3b841bb884421e179367fd13619c515c328"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "f16ed133a31a7897c222cf0f2959ee7027e7e311", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -1,3 +1,26 @@\n+2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* default.h (PROMOTE_PROTOTYPES): Remove.\n+\t* system.h (PROMOTE_FUNCTION_RETURN, PROMOTE_PROTOTYPES,\n+\tSTRUCT_VALUE_REGNUM, SETUP_INCOMING_VARARGS,\n+\tEXPAND_BUILTIN_SAVEREGS): Poison.\n+\t* target-def.h (TARGET_PROMOTE_FUNCTION_RETURN): Define as\n+\thook_bool_tree_false.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t* target.h: Replace SETUP_INCOMING_VARARGS with\n+\ttargetm.calls.setup_incoming_varargs().\n+\t* targhooks.c (default_promote_function_return): Remove.\n+\t(default_promote_prototypes): Likewise.\n+\t(default_struct_value_rtx): Always abort().\n+\t(default_expand_builtin_saveregs): Always print an error\n+\tmessage.\n+\t(default_setup_incoming_varargs): Do nothing.\n+\t(default_pretend_outgoing_varargs_named): Don't depend on\n+\tSETUP_INCOMING_VARARGS.\n+\t* targhooks.h: Remove the prototype for\n+\tdefault_promote_function_return and\n+\tdefault_promote_prototypes.\n+\n 2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* system.h (SHARED_SECTION_ASM_OP): Poison."}, {"sha": "57e53f4e6cad92c0b0e66e823e0a89c7737e9c50", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -305,11 +305,6 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define DWARF2_GENERATE_TEXT_SECTION_LABEL 1\n #endif\n \n-/* Supply a default definition for PROMOTE_PROTOTYPES.  */\n-#ifndef PROMOTE_PROTOTYPES\n-#define PROMOTE_PROTOTYPES\t0\n-#endif\n-\n /* Number of hardware registers that go into the DWARF-2 unwind info.\n    If not defined, equals FIRST_PSEUDO_REGISTER  */\n "}, {"sha": "31a1b92357f4ce343038ca2ed7159720b3413740", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -603,7 +603,9 @@ typedef char _Bool;\n \tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE \\\n \tPRETEND_OUTGOING_VARARGS_NAMED STRUCT_VALUE_INCOMING_REGNUM\t\\\n \tASM_OUTPUT_SECTION_NAME PROMOTE_FUNCTION_ARGS\t\t\t\\\n-\tSTRUCT_VALUE_INCOMING STRICT_ARGUMENT_NAMING\n+\tSTRUCT_VALUE_INCOMING STRICT_ARGUMENT_NAMING\t\t\t\\\n+\tPROMOTE_FUNCTION_RETURN PROMOTE_PROTOTYPES STRUCT_VALUE_REGNUM\t\\\n+\tSETUP_INCOMING_VARARGS EXPAND_BUILTIN_SAVEREGS\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "54a47721c9db6b5f304b1cc375bdb59c0825522d", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -326,8 +326,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_PCH_VALID_P default_pch_valid_p\n \n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n-#define TARGET_PROMOTE_FUNCTION_RETURN default_promote_function_return\n-#define TARGET_PROMOTE_PROTOTYPES default_promote_prototypes\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_false\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n \n #define TARGET_STRUCT_VALUE_RTX default_struct_value_rtx\n #define TARGET_RETURN_IN_MEMORY default_return_in_memory"}, {"sha": "aa56d64f5720998f14e7b200975631de2b80f456", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -449,7 +449,8 @@ struct gcc_target\n     void (*setup_incoming_varargs) (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n \t\t\t\t    tree type, int *pretend_arg_size, int second_time);\n     bool (*strict_argument_naming) (CUMULATIVE_ARGS *ca);\n-    /* Returns true if we should use SETUP_INCOMING_VARARGS and/or\n+    /* Returns true if we should use\n+       targetm.calls.setup_incoming_varargs() and/or\n        targetm.calls.strict_argument_naming().  */\n     bool (*pretend_outgoing_varargs_named) (CUMULATIVE_ARGS *ca);\n   } calls;"}, {"sha": "ce491b283396828c69823c732d64a5e19ef43003", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -78,38 +78,11 @@ default_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n   return VOIDmode;\n }\n \n-bool\n-default_promote_function_return (tree fntype ATTRIBUTE_UNUSED)\n-{\n-#ifdef PROMOTE_FUNCTION_RETURN\n-  return true;\n-#else\n-  return false;\n-#endif\n-}\n-\n-bool\n-default_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n-{\n-  if (PROMOTE_PROTOTYPES)\n-    return true;\n-  else\n-    return false;\n-}\n-\n rtx\n default_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \t\t\t  int incoming ATTRIBUTE_UNUSED)\n {\n-#ifdef STRUCT_VALUE\n-  return STRUCT_VALUE;\n-#else\n-#ifdef STRUCT_VALUE_REGNUM\n-  return gen_rtx_REG (Pmode, STRUCT_VALUE_REGNUM);\n-#else\n   abort ();\n-#endif\n-#endif\n }\n \n bool\n@@ -126,12 +99,8 @@ default_return_in_memory (tree type,\n rtx\n default_expand_builtin_saveregs (void)\n {\n-#ifdef EXPAND_BUILTIN_SAVEREGS\n-  return EXPAND_BUILTIN_SAVEREGS ();\n-#else\n   error (\"__builtin_saveregs not supported by this target\");\n   return const0_rtx;\n-#endif\n }\n \n void\n@@ -141,9 +110,6 @@ default_setup_incoming_varargs (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \t\t\t\tint *pretend_arg_size ATTRIBUTE_UNUSED,\n \t\t\t\tint second_time ATTRIBUTE_UNUSED)\n {\n-#ifdef SETUP_INCOMING_VARARGS\n-  SETUP_INCOMING_VARARGS ((*ca), mode, type, (*pretend_arg_size), second_time);\n-#endif\n }\n \n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */\n@@ -157,11 +123,7 @@ hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n bool\n default_pretend_outgoing_varargs_named(CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n {\n-#ifdef SETUP_INCOMING_VARARGS\n-  return 1;\n-#else\n   return (targetm.calls.setup_incoming_varargs != default_setup_incoming_varargs);\n-#endif\n }\n \n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */"}, {"sha": "2de18e75bb61a48e2c1108621bd5111dd9c2b9f2", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=fefcb65c3d9a4a07ea6cd81cabe82169ab2bdd79", "patch": "@@ -23,9 +23,6 @@ extern void default_external_libcall (rtx);\n extern enum machine_mode default_cc_modes_compatible (enum machine_mode,\n \t\t\t\t\t\t      enum machine_mode);\n \n-extern bool default_promote_function_return (tree);\n-extern bool default_promote_prototypes (tree);\n-\n extern rtx default_struct_value_rtx (tree, int);\n extern bool default_return_in_memory (tree, tree);\n "}]}