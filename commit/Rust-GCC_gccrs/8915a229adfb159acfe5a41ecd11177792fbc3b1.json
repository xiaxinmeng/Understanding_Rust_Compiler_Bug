{"sha": "8915a229adfb159acfe5a41ecd11177792fbc3b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxNWEyMjlhZGZiMTU5YWNmZTVhNDFlY2QxMTE3Nzc5MmZiYzNiMQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-30T20:16:03Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-30T20:16:03Z"}, "message": "re PR libstdc++/58191 (Can't use boost transform_iterator with _GLIBCXX_DEBUG)\n\n2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/58191\n\t* include/debug/macros.h (__glibcxx_check_partitioned_lower): Add\n\t__gnu_debug::__base calls on iterators passed to internal debug\n\tcheck.\n\t(__glibcxx_check_partitioned_lower_pred): Likewise.\n\t(__glibcxx_check_partitioned_upper): Likewise.\n\t(__glibcxx_check_partitioned_upper_pred): Likewise.\n\t(__glibcxx_check_sorted): Likewise.\n\t(__glibcxx_check_sorted_pred): Likewise.\n\t(__glibcxx_check_sorted_set): Likewise.\n\t(__glibcxx_check_sorted_set_pred): Likewise.\n\t* include/debug/functions.h (__check_partitioned_lower):\n\tRemove code to detect safe iterators.\n\t(__check_partitioned_upper): Likewise.\n\t(__check_sorted): Likewise.\n\nFrom-SVN: r202119", "tree": {"sha": "5f352cf1c345dd1d31f67fe146035717398b99f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f352cf1c345dd1d31f67fe146035717398b99f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8915a229adfb159acfe5a41ecd11177792fbc3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8915a229adfb159acfe5a41ecd11177792fbc3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8915a229adfb159acfe5a41ecd11177792fbc3b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8915a229adfb159acfe5a41ecd11177792fbc3b1/comments", "author": null, "committer": null, "parents": [{"sha": "3ecee8f77b6aef4f4a9197184f348364dda02b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ecee8f77b6aef4f4a9197184f348364dda02b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ecee8f77b6aef4f4a9197184f348364dda02b97"}], "stats": {"total": 195, "additions": 52, "deletions": 143}, "files": [{"sha": "c288313f10a036cc4b848ac0347c31d4556cba2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8915a229adfb159acfe5a41ecd11177792fbc3b1", "patch": "@@ -1,3 +1,21 @@\n+2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/58191\n+\t* include/debug/macros.h (__glibcxx_check_partitioned_lower): Add\n+\t__gnu_debug::__base calls on iterators passed to internal debug\n+\tcheck.\n+\t(__glibcxx_check_partitioned_lower_pred): Likewise.\n+\t(__glibcxx_check_partitioned_upper): Likewise.\n+\t(__glibcxx_check_partitioned_upper_pred): Likewise.\n+\t(__glibcxx_check_sorted): Likewise.\n+\t(__glibcxx_check_sorted_pred): Likewise.\n+\t(__glibcxx_check_sorted_set): Likewise.\n+\t(__glibcxx_check_sorted_set_pred): Likewise.\n+\t* include/debug/functions.h (__check_partitioned_lower):\n+\tRemove code to detect safe iterators.\n+\t(__check_partitioned_upper): Likewise.\n+\t(__check_sorted): Likewise.\n+\n 2013-08-29  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex.h (basic_regex<>::assign): Don't lose _M_traits."}, {"sha": "650793065c3fd1a20d8ba4b4d49d595efeca567b", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 11, "deletions": 131, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=8915a229adfb159acfe5a41ecd11177792fbc3b1", "patch": "@@ -336,15 +336,6 @@ namespace __gnu_debug\n       return true;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_sorted_aux(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t       const _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t       std::random_access_iterator_tag __tag)\n-  { return __check_sorted_aux(__first.base(), __last.base(), __tag); }\n-\n   // Can't check if an input iterator sequence is sorted, because we can't step\n   // through the sequence.\n   template<typename _InputIterator, typename _Predicate>\n@@ -371,17 +362,6 @@ namespace __gnu_debug\n       return true;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _Predicate>\n-    inline bool\n-    __check_sorted_aux(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t       const _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t       _Predicate __pred,\n-\t\t       std::random_access_iterator_tag __tag)\n-  { return __check_sorted_aux(__first.base(), __last.base(), __pred, __tag); }\n-\n   // Determine if a sequence is sorted.\n   template<typename _InputIterator>\n     inline bool\n@@ -470,11 +450,13 @@ namespace __gnu_debug\n       return __check_sorted_set_aux(__first, __last, __pred, _SameType());\n    }\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 270. Binary search requirements overly strict\n+  // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n-  __check_partitioned_lower_aux(_ForwardIterator __first,\n-\t\t\t\t_ForwardIterator __last, const _Tp& __value,\n-\t\t\t\tstd::forward_iterator_tag)\n+    __check_partitioned_lower(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value)\n     {\n       while (__first != __last && *__first < __value)\n \t++__first;\n@@ -487,37 +469,10 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence, typename _Tp>\n-    inline bool\n-    __check_partitioned_lower_aux(\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t\tconst _Tp& __value,\n-\t\t\tstd::random_access_iterator_tag __tag)\n-    {\n-      return __check_partitioned_lower_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __tag);\n-    }\n-\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 270. Binary search requirements overly strict\n-  // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n-    __check_partitioned_lower(_ForwardIterator __first,\n+    __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value)\n-    {\n-      return __check_partitioned_lower_aux(__first, __last, __value,\n-\t\t\t\t\t   std::__iterator_category(__first));\n-    }\n-\n-  template<typename _ForwardIterator, typename _Tp>\n-    inline bool\n-    __check_partitioned_upper_aux(_ForwardIterator __first,\n-\t\t\t\t  _ForwardIterator __last, const _Tp& __value,\n-\t\t\t\t  std::forward_iterator_tag)\n     {\n       while (__first != __last && !(__value < *__first))\n \t++__first;\n@@ -530,35 +485,12 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence, typename _Tp>\n-    inline bool\n-    __check_partitioned_upper_aux(\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t\tconst _Tp& __value,\n-\t\t\tstd::random_access_iterator_tag __tag)\n-    {\n-      return __check_partitioned_upper_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __tag);\n-    }\n-\n-  template<typename _ForwardIterator, typename _Tp>\n-    inline bool\n-    __check_partitioned_upper(_ForwardIterator __first,\n-\t\t\t      _ForwardIterator __last, const _Tp& __value)\n-    {\n-      return __check_partitioned_upper_aux(__first, __last, __value,\n-\t\t\t\t\t   std::__iterator_category(__first));\n-    }\n-\n+  // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n-    __check_partitioned_lower_aux(_ForwardIterator __first,\n-\t\t\t\t  _ForwardIterator __last, const _Tp& __value,\n-\t\t\t\t  _Pred __pred,\n-\t\t\t\t  std::forward_iterator_tag)\n+    __check_partitioned_lower(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value,\n+\t\t\t      _Pred __pred)\n     {\n       while (__first != __last && bool(__pred(*__first, __value)))\n \t++__first;\n@@ -571,38 +503,11 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _Tp, typename _Pred>\n-    inline bool\n-    __check_partitioned_lower_aux(\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t\tconst _Tp& __value, _Pred __pred,\n-\t\t\tstd::random_access_iterator_tag __tag)\n-    {\n-      return __check_partitioned_lower_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __pred, __tag);\n-    }\n-\n-  // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n-    __check_partitioned_lower(_ForwardIterator __first,\n+    __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value,\n \t\t\t      _Pred __pred)\n-    {\n-      return __check_partitioned_lower_aux(__first, __last, __value, __pred,\n-\t\t\t\t\t   std::__iterator_category(__first));\n-    }\n-\n-  template<typename _ForwardIterator, typename _Tp, typename _Pred>\n-    inline bool\n-    __check_partitioned_upper_aux(_ForwardIterator __first,\n-\t\t\t\t  _ForwardIterator __last, const _Tp& __value,\n-\t\t\t\t  _Pred __pred,\n-\t\t\t\t  std::forward_iterator_tag)\n     {\n       while (__first != __last && !bool(__pred(__value, *__first)))\n \t++__first;\n@@ -615,31 +520,6 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-  // For performance reason, as the iterator range has been validated, check on\n-  // random access safe iterators is done using the base iterator.\n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _Tp, typename _Pred>\n-    inline bool\n-    __check_partitioned_upper_aux(\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t\tconst _Tp& __value, _Pred __pred,\n-\t\t\tstd::random_access_iterator_tag __tag)\n-    {\n-      return __check_partitioned_upper_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __pred, __tag);\n-    }\n-\n-  template<typename _ForwardIterator, typename _Tp, typename _Pred>\n-    inline bool\n-    __check_partitioned_upper(_ForwardIterator __first,\n-\t\t\t      _ForwardIterator __last, const _Tp& __value,\n-\t\t\t      _Pred __pred)\n-    {\n-      return __check_partitioned_upper_aux(__first, __last, __value, __pred,\n-\t\t\t\t\t   std::__iterator_category(__first));\n-    }\n-\n   // Helper struct to detect random access safe iterators.\n   template<typename _Iterator>\n     struct __is_safe_random_iterator"}, {"sha": "1e160c26c0f18ed96a27aaa773fc0ec65a61c436", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915a229adfb159acfe5a41ecd11177792fbc3b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=8915a229adfb159acfe5a41ecd11177792fbc3b1", "patch": "@@ -229,7 +229,9 @@ _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n // Verify that the iterator range [_First, _Last) is sorted\n #define __glibcxx_check_sorted(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last),\t\\\n+ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last)),\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_unsorted)\t        \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n@@ -238,7 +240,9 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last),\t\\\n     predicate _Pred. */\n #define __glibcxx_check_sorted_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last), _Pred),\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_unsorted_pred)      \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n@@ -248,7 +252,8 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n #define __glibcxx_check_sorted_set(_First1,_Last1,_First2)\t\t\\\n __glibcxx_check_valid_range(_First1,_Last1);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(                                                  \\\n-  __gnu_debug::__check_sorted_set(_First1, _Last1, _First2),\t\t\\\n+  __gnu_debug::__check_sorted_set(__gnu_debug::__base(_First1),\t\t\\\n+\t\t\t\t  __gnu_debug::__base(_Last1), _First2),\\\n   _M_message(__gnu_debug::__msg_unsorted)\t\t\t\t\\\n   ._M_iterator(_First1, #_First1)\t\t\t\t\t\\\n   ._M_iterator(_Last1, #_Last1))\n@@ -257,7 +262,9 @@ _GLIBCXX_DEBUG_VERIFY(                                                  \\\n #define __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\t\\\n __glibcxx_check_valid_range(_First1,_Last1);        \t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(\t\t\t\t\t\t\t\\\n-  __gnu_debug::__check_sorted_set(_First1, _Last1, _First2, _Pred),\t\\\n+  __gnu_debug::__check_sorted_set(__gnu_debug::__base(_First1),\t\t\\\n+\t\t\t\t  __gnu_debug::__base(_Last1),\t\t\\\n+\t\t\t\t  _First2, _Pred),\t\t\t\\\n   _M_message(__gnu_debug::__msg_unsorted_pred)\t\t\t\t\\\n   ._M_iterator(_First1, #_First1)\t\t\t\t\t\\\n   ._M_iterator(_Last1, #_Last1)\t\t\t\t\t\t\\\n@@ -267,17 +274,19 @@ _GLIBCXX_DEBUG_VERIFY(\t\t\t\t\t\t\t\\\n     w.r.t. the value _Value. */\n #define __glibcxx_check_partitioned_lower(_First,_Last,_Value)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(_First, _Last, \\\n-\t\t\t\t\t\t\t    _Value),\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last), _Value),\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned)      \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Value))\n \n #define __glibcxx_check_partitioned_upper(_First,_Last,_Value)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(_First, _Last, \\\n-\t\t\t\t\t\t\t    _Value),\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last), _Value),\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned)      \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n@@ -287,8 +296,9 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(_First, _Last, \\\n     w.r.t. the value _Value and predicate _Pred. */\n #define __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred) \\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(_First, _Last, \\\n-\t\t\t\t\t\t\t _Value, _Pred), \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last), _Value, _Pred),\t\\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n@@ -299,8 +309,9 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(_First, _Last, \\\n     w.r.t. the value _Value and predicate _Pred. */\n #define __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred) \\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(_First, _Last, \\\n-\t\t\t\t\t\t\t _Value, _Pred), \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(\t\t\\\n+\t\t\t__gnu_debug::__base(_First),\t\t\t\\\n+\t\t\t__gnu_debug::__base(_Last), _Value, _Pred),\t\\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\"}]}