{"sha": "c2bf339e6b769c71653b255148ae8386b19c229c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiZjMzOWU2Yjc2OWM3MTY1M2IyNTUxNDhhZTgzODZiMTljMjI5Yw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2005-07-04T13:29:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:29:58Z"}, "message": "sem_eval.adb (Subtypes_Statically_Match): Use the discriminant constraint of full view of a private view T1 if present...\n\n2005-07-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_eval.adb (Subtypes_Statically_Match): Use the discriminant\n\tconstraint of full view of a private view T1 if present, when T2 is a\n\tdiscriminated full view.\n\nFrom-SVN: r101589", "tree": {"sha": "502c62296b3bdfd81a7e5b4fcec232f330d3f6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/502c62296b3bdfd81a7e5b4fcec232f330d3f6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2bf339e6b769c71653b255148ae8386b19c229c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bf339e6b769c71653b255148ae8386b19c229c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2bf339e6b769c71653b255148ae8386b19c229c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bf339e6b769c71653b255148ae8386b19c229c/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dcb52e145b7b6eb52c71d14f797e82fae9c32cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcb52e145b7b6eb52c71d14f797e82fae9c32cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcb52e145b7b6eb52c71d14f797e82fae9c32cd"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "396027d39b4a0d2241e4af7d12f45f6b42bb02ab", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bf339e6b769c71653b255148ae8386b19c229c/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bf339e6b769c71653b255148ae8386b19c229c/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=c2bf339e6b769c71653b255148ae8386b19c229c", "patch": "@@ -3927,15 +3927,30 @@ package body Sem_Eval is\n \n       elsif Has_Discriminants (T1) or else Has_Discriminants (T2) then\n \n-         --  We really need comments here ???\n+         --  Because of view exchanges in multiple instantiations, conformance\n+         --  checking might try to match a partial view of a type with no\n+         --  discriminants with a full view that has defaulted discriminants.\n+         --  In such a case, use the discriminant constraint of the full view,\n+         --  which must exist because we know that the two subtypes have the\n+         --  same base type.\n \n          if Has_Discriminants (T1) /= Has_Discriminants (T2) then\n-            if In_Instance\n-              and then Is_Private_Type (T2)\n-              and then Present (Full_View (T2))\n-              and then Has_Discriminants (Full_View (T2))\n-            then\n-               return Subtypes_Statically_Match (T1, Full_View (T2));\n+            if In_Instance then\n+               if Is_Private_Type (T2)\n+                 and then Present (Full_View (T2))\n+                 and then Has_Discriminants (Full_View (T2))\n+               then\n+                  return Subtypes_Statically_Match (T1, Full_View (T2));\n+\n+               elsif Is_Private_Type (T1)\n+                 and then Present (Full_View (T1))\n+                 and then Has_Discriminants (Full_View (T1))\n+               then\n+                  return Subtypes_Statically_Match (Full_View (T1), T2);\n+\n+               else\n+                  return False;\n+               end if;\n             else\n                return False;\n             end if;"}]}