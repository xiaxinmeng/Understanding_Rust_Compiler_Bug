{"sha": "4c533da21d6298cdf9eb11df7353b8c8684c7756", "node_id": "C_kwDOANBUbNoAKDRjNTMzZGEyMWQ2Mjk4Y2RmOWViMTFkZjczNTNiOGM4Njg0Yzc3NTY", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-02-02T11:52:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-11T08:53:20Z"}, "message": "[Ada] Adapt proof of System.Arith_Double after update of Z3\n\nUpdate to version 4.8.14 of prover Z3 requires minor adjustments of the\nghost code to add necessary intermediate assertions that drive the\nautomatic proof.\n\ngcc/ada/\n\n\t* libgnat/s-aridou.adb (Double_Divide, Scaled_Divide): Add\n\tintermediate assertions.", "tree": {"sha": "0cba4d9c9160c50c696a2fdd16edc525479e8bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cba4d9c9160c50c696a2fdd16edc525479e8bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c533da21d6298cdf9eb11df7353b8c8684c7756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c533da21d6298cdf9eb11df7353b8c8684c7756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c533da21d6298cdf9eb11df7353b8c8684c7756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c533da21d6298cdf9eb11df7353b8c8684c7756/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58f70c30c4900bb9024681e0b86e85d96cac2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58f70c30c4900bb9024681e0b86e85d96cac2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58f70c30c4900bb9024681e0b86e85d96cac2e7"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "ffb6f4ca269484505f2ef119aeda60277c13772c", "filename": "gcc/ada/libgnat/s-aridou.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c533da21d6298cdf9eb11df7353b8c8684c7756/gcc%2Fada%2Flibgnat%2Fs-aridou.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c533da21d6298cdf9eb11df7353b8c8684c7756/gcc%2Fada%2Flibgnat%2Fs-aridou.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aridou.adb?ref=4c533da21d6298cdf9eb11df7353b8c8684c7756", "patch": "@@ -924,6 +924,8 @@ is\n             else\n                Q := 0;\n \n+               pragma Assert (Double_Uns'(Yhi * Zhi) >= Double_Uns (Yhi));\n+               pragma Assert (Double_Uns'(Yhi * Zhi) >= Double_Uns (Zhi));\n                pragma Assert (Big (Double_Uns'(Yhi * Zhi)) >= 1);\n                if Yhi > 1 or else Zhi > 1 then\n                   pragma Assert (Big (Double_Uns'(Yhi * Zhi)) > 1);\n@@ -938,10 +940,12 @@ is\n             return;\n          else\n             T2 := Yhi * Zlo;\n+            pragma Assert (Big (T2) = Big (Double_Uns'(Yhi * Zlo)));\n          end if;\n \n       else\n          T2 := Ylo * Zhi;\n+         pragma Assert (Big (T2) = Big (Double_Uns'(Ylo * Zhi)));\n       end if;\n \n       T1 := Ylo * Zlo;\n@@ -1527,10 +1531,14 @@ is\n             Raise_Error;\n          else\n             T2 := Xhi * Ylo;\n+            pragma Assert (Big (T2) = Big (Double_Uns'(Xhi * Ylo))\n+                                    + Big (Double_Uns'(Xlo * Yhi)));\n          end if;\n \n       elsif Yhi /= 0 then\n          T2 := Xlo * Yhi;\n+         pragma Assert (Big (T2) = Big (Double_Uns'(Xhi * Ylo))\n+                                 + Big (Double_Uns'(Xlo * Yhi)));\n \n       else -- Yhi = Xhi = 0\n          T2 := 0;\n@@ -1544,7 +1552,7 @@ is\n       pragma Assert (Big (T2) = Big (Double_Uns'(Xhi * Ylo))\n                               + Big (Double_Uns'(Xlo * Yhi)));\n       Lemma_Mult_Distribution (Big_2xxSingle, Big (Double_Uns'(Xhi * Ylo)),\n-                                          Big (Double_Uns'(Xlo * Yhi)));\n+                                              Big (Double_Uns'(Xlo * Yhi)));\n       pragma Assert (Mult = Big_2xxSingle * Big (T2) + Big (T1));\n       Lemma_Add_Commutation (T2, Hi (T1));\n       pragma Assert\n@@ -2575,7 +2583,13 @@ is\n                                       Big (Double_Uns (Qd (J))) - 1,\n                                       Big (Double_Uns (Qd (J) - 1)), 0);\n \n-                  Qd (J) := Qd (J) - 1;\n+                  declare\n+                     Prev : constant Single_Uns := Qd (J) - 1 with Ghost;\n+                  begin\n+                     Qd (J) := Qd (J) - 1;\n+\n+                     pragma Assert (Qd (J) = Prev);\n+                  end;\n \n                   pragma Assert\n                     (Big3 (S1, S2, S3) = Big (Double_Uns (Qd (J))) * Big (Zu));"}]}