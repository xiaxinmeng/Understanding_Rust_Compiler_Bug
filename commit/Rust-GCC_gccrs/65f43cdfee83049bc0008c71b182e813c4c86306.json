{"sha": "65f43cdfee83049bc0008c71b182e813c4c86306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmNDNjZGZlZTgzMDQ5YmMwMDA4YzcxYjE4MmU4MTNjNGM4NjMwNg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-07-18T22:52:05Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-07-18T22:52:05Z"}, "message": "Makefile.in (ifcvt.o): Add cfgloop.h.\n\n\t* Makefile.in (ifcvt.o): Add cfgloop.h.\n\t* basic-block.h (EDGE_LOOP_EXIT): New flag.\n\t* cfgrtl.c (rtl_verify_flow_info_1): Handle it correctly.\n\t* ifcvt.c: Include cfgloop.h.\n\t(mark_loop_exit_edges): New static function.\n\t(if_convert): Call it.\n\t(find_if_header): Ignore branches out of loops.\n\nFrom-SVN: r69572", "tree": {"sha": "97345dfea977f820d999cfa91b9565f89057e6f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97345dfea977f820d999cfa91b9565f89057e6f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f43cdfee83049bc0008c71b182e813c4c86306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f43cdfee83049bc0008c71b182e813c4c86306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f43cdfee83049bc0008c71b182e813c4c86306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f43cdfee83049bc0008c71b182e813c4c86306/comments", "author": null, "committer": null, "parents": [{"sha": "e5686da761327b52e4dbad5b6d1fcb2debded878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5686da761327b52e4dbad5b6d1fcb2debded878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5686da761327b52e4dbad5b6d1fcb2debded878"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "2148c51da185ff774c94044e9ef927e19d25799d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f43cdfee83049bc0008c71b182e813c4c86306", "patch": "@@ -1,3 +1,13 @@\n+2003-07-19  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (ifcvt.o): Add cfgloop.h.\n+\t* basic-block.h (EDGE_LOOP_EXIT): New flag.\n+\t* cfgrtl.c (rtl_verify_flow_info_1): Handle it correctly.\n+\t* ifcvt.c: Include cfgloop.h.\n+\t(mark_loop_exit_edges): New static function.\n+\t(if_convert): Call it.\n+\t(find_if_header): Ignore branches out of loops.\n+\n 2003-07-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* combine.c (simplify_comparison): Don't share rtx when converting "}, {"sha": "dcffe35f11c010d75c9eb50e14abda7cf16e4e83", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=65f43cdfee83049bc0008c71b182e813c4c86306", "patch": "@@ -1790,7 +1790,8 @@ regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) toplev.h flags.h insn-config.h function.h $(RECOG_H) \\\n-   $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) real.h $(OPTABS_H)\n+   $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) real.h $(OPTABS_H) \\\n+   cfgloop.h\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n "}, {"sha": "221b2466985c43c33ba296aa9431038cf7df7597", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=65f43cdfee83049bc0008c71b182e813c4c86306", "patch": "@@ -152,7 +152,8 @@ typedef struct edge_def {\n \t\t\t\t\t   flow.  */\n #define EDGE_IRREDUCIBLE_LOOP\t128\t/* Part of irreducible loop.  */\n #define EDGE_SIBCALL\t\t256\t/* Edge from sibcall to exit.  */\n-#define EDGE_ALL_FLAGS\t\t511\n+#define EDGE_LOOP_EXIT\t\t512\t/* Exit of a loop.  */\n+#define EDGE_ALL_FLAGS\t\t1023\n \n #define EDGE_COMPLEX\t(EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_EH)\n "}, {"sha": "da629cb4e46c3f164073f3463a9535bde6048b54", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=65f43cdfee83049bc0008c71b182e813c4c86306", "patch": "@@ -1907,7 +1907,10 @@ rtl_verify_flow_info_1 (void)\n \t  if (e->flags & EDGE_FALLTHRU)\n \t    n_fallthru++, fallthru = e;\n \n-\t  if ((e->flags & ~(EDGE_DFS_BACK | EDGE_CAN_FALLTHRU | EDGE_IRREDUCIBLE_LOOP)) == 0)\n+\t  if ((e->flags & ~(EDGE_DFS_BACK\n+\t\t\t    | EDGE_CAN_FALLTHRU\n+\t\t\t    | EDGE_IRREDUCIBLE_LOOP\n+\t\t\t    | EDGE_LOOP_EXIT)) == 0)\n \t    n_branch++;\n \n \t  if (e->flags & EDGE_ABNORMAL_CALL)"}, {"sha": "bb783fbf57f175eef00e8cb25fe432b18b8c99d5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f43cdfee83049bc0008c71b182e813c4c86306/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=65f43cdfee83049bc0008c71b182e813c4c86306", "patch": "@@ -38,6 +38,7 @@\n #include \"optabs.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"cfgloop.h\"\n \n \n #ifndef HAVE_conditional_execution\n@@ -110,7 +111,36 @@ static int dead_or_predicable (basic_block, basic_block, basic_block,\n \t\t\t       basic_block, int);\n static void noce_emit_move_insn (rtx, rtx);\n static rtx block_has_only_trap (basic_block);\n+static void mark_loop_exit_edges (void);\n \f\n+/* Sets EDGE_LOOP_EXIT flag for all loop exits.  */\n+static void\n+mark_loop_exit_edges ()\n+{\n+  struct loops loops;\n+  basic_block bb;\n+  edge e;\n+  \n+  flow_loops_find (&loops, LOOP_TREE);\n+  \n+  if (loops.num > 1)\n+    {\n+      FOR_EACH_BB (bb)\n+\t{\n+\t  for (e = bb->succ; e; e = e->succ_next)\n+\t    {\n+\t      if (find_common_loop (bb->loop_father, e->dest->loop_father)\n+\t\t  != bb->loop_father)\n+\t\te->flags |= EDGE_LOOP_EXIT;\n+\t      else\n+\t\te->flags &= ~EDGE_LOOP_EXIT;\n+\t    }\n+\t}\n+    }\n+\n+  flow_loops_free (&loops);\n+}\n+\n /* Count the number of non-jump active insns in BB.  */\n \n static int\n@@ -2111,6 +2141,11 @@ find_if_header (basic_block test_bb, int pass)\n       || (else_edge->flags & EDGE_COMPLEX))\n     return NULL;\n \n+  /* Nor exit the loop.  */\n+  if ((then_edge->flags & EDGE_LOOP_EXIT)\n+      || (else_edge->flags & EDGE_LOOP_EXIT))\n+    return NULL;\n+\n   /* The THEN edge is canonically the one that falls through.  */\n   if (then_edge->flags & EDGE_FALLTHRU)\n     ;\n@@ -3077,6 +3112,8 @@ if_convert (int x_life_data_ok)\n   num_removed_blocks = 0;\n   life_data_ok = (x_life_data_ok != 0);\n \n+  mark_loop_exit_edges ();\n+\n   /* Free up basic_block_for_insn so that we don't have to keep it\n      up to date, either here or in merge_blocks.  */\n   free_basic_block_vars (1);"}]}