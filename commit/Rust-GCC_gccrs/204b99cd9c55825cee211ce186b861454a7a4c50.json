{"sha": "204b99cd9c55825cee211ce186b861454a7a4c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0Yjk5Y2Q5YzU1ODI1Y2VlMjExY2UxODZiODYxNDU0YTdhNGM1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-15T11:26:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-15T11:26:32Z"}, "message": "re PR tree-optimization/81790 (ICE in vn_nary_build_or_lookup_1, at tree-ssa-sccvn.c:1738)\n\n2017-08-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81790\n\t* tree-ssa-sccvn.c (vn_lookup_simplify_result): Handle both\n\tCONSTRUCTORs from simplifying and VN.\n\n\t* gcc.dg/torture/pr81790.c: New testcase.\n\nFrom-SVN: r251103", "tree": {"sha": "56252a64a82451901656d11d70af8d6232d07528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56252a64a82451901656d11d70af8d6232d07528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/204b99cd9c55825cee211ce186b861454a7a4c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204b99cd9c55825cee211ce186b861454a7a4c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204b99cd9c55825cee211ce186b861454a7a4c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204b99cd9c55825cee211ce186b861454a7a4c50/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0ff19d57c5fb7c10ca29cd34a8834c4af2ec4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ff19d57c5fb7c10ca29cd34a8834c4af2ec4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ff19d57c5fb7c10ca29cd34a8834c4af2ec4fb"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "d899430111640f1c763a4c641de14f891d333682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=204b99cd9c55825cee211ce186b861454a7a4c50", "patch": "@@ -1,3 +1,9 @@\n+2017-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81790\n+\t* tree-ssa-sccvn.c (vn_lookup_simplify_result): Handle both\n+\tCONSTRUCTORs from simplifying and VN.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \t* builtin-attrs.def: Add comments."}, {"sha": "f13f9b05003343d5fb24b9d5f326eeb19a6ce308", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=204b99cd9c55825cee211ce186b861454a7a4c50", "patch": "@@ -1,3 +1,8 @@\n+2017-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81790\n+\t* gcc.dg/torture/pr81790.c: New testcase.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "b5e02f6c1dde38c4d5609aff386f4e6e3485122c", "filename": "gcc/testsuite/gcc.dg/torture/pr81790.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81790.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81790.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81790.c?ref=204b99cd9c55825cee211ce186b861454a7a4c50", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param sccvn-max-scc-size=10\" } */\n+\n+typedef int a __attribute__ ((__vector_size__ (16)));\n+typedef struct\n+{\n+  a b;\n+} c;\n+\n+int d, e;\n+\n+void foo (c *ptr);\n+\n+void bar ()\n+{\n+  double b = 1842.9028;\n+  c g, h;\n+  if (d)\n+    b = 77.7998;\n+  for (; e;)\n+    {\n+      g.b = g.b = g.b + g.b;\n+      h.b = (a){b};\n+      h.b = h.b + h.b;\n+    }\n+  foo (&g);\n+  foo (&h);\n+}"}, {"sha": "19db44a3d4c52fcb011505ac8b70f49a12b9ef5c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204b99cd9c55825cee211ce186b861454a7a4c50/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=204b99cd9c55825cee211ce186b861454a7a4c50", "patch": "@@ -1646,13 +1646,25 @@ static unsigned mprts_hook_cnt;\n /* Hook for maybe_push_res_to_seq, lookup the expression in the VN tables.  */\n \n static tree\n-vn_lookup_simplify_result (code_helper rcode, tree type, tree *ops)\n+vn_lookup_simplify_result (code_helper rcode, tree type, tree *ops_)\n {\n   if (!rcode.is_tree_code ())\n     return NULL_TREE;\n+  tree *ops = ops_;\n+  unsigned int length = TREE_CODE_LENGTH ((tree_code) rcode);\n+  if (rcode == CONSTRUCTOR\n+      /* ???  We're arriving here with SCCVNs view, decomposed CONSTRUCTOR\n+         and GIMPLEs / match-and-simplifies, CONSTRUCTOR as GENERIC tree.  */\n+      && TREE_CODE (ops_[0]) == CONSTRUCTOR)\n+    {\n+      length = CONSTRUCTOR_NELTS (ops_[0]);\n+      ops = XALLOCAVEC (tree, length);\n+      for (unsigned i = 0; i < length; ++i)\n+\tops[i] = CONSTRUCTOR_ELT (ops_[0], i)->value;\n+    }\n   vn_nary_op_t vnresult = NULL;\n-  tree res = vn_nary_op_lookup_pieces (TREE_CODE_LENGTH ((tree_code) rcode),\n-\t\t\t\t       (tree_code) rcode, type, ops, &vnresult);\n+  tree res = vn_nary_op_lookup_pieces (length, (tree_code) rcode,\n+\t\t\t\t       type, ops, &vnresult);\n   /* We can end up endlessly recursing simplifications if the lookup above\n      presents us with a def-use chain that mirrors the original simplification.\n      See PR80887 for an example.  Limit successful lookup artificially"}]}