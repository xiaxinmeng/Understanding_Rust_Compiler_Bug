{"sha": "4cc48683f65e236df8d246207c8958d42d3c069a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjNDg2ODNmNjVlMjM2ZGY4ZDI0NjIwN2M4OTU4ZDQyZDNjMDY5YQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-03-30T16:12:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-03-30T16:12:25Z"}, "message": "cplus-dem.c (consume_count): If `count' wraps, return 0 and don't advance input pointer.\n\n\t* cplus-dem.c (consume_count): If `count' wraps, return 0 and\n\tdon't advance input pointer.\n\t(demangle_class_name): If consume_count didn't find a count, do\n\tnothing.  Don't bother with `strlen' sanity check; consume_count\n\tdoes it for us.\n\nFrom-SVN: r26068", "tree": {"sha": "fa04c5473f236523e039d0d8d90c7adbb9397355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa04c5473f236523e039d0d8d90c7adbb9397355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc48683f65e236df8d246207c8958d42d3c069a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc48683f65e236df8d246207c8958d42d3c069a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc48683f65e236df8d246207c8958d42d3c069a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc48683f65e236df8d246207c8958d42d3c069a/comments", "author": null, "committer": null, "parents": [{"sha": "85a0b07565f2c95a403df910f5d1ff7b2f9a462f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a0b07565f2c95a403df910f5d1ff7b2f9a462f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a0b07565f2c95a403df910f5d1ff7b2f9a462f"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "8a1965b8ac39dfd08448034586e5c8f7e00e463f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc48683f65e236df8d246207c8958d42d3c069a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc48683f65e236df8d246207c8958d42d3c069a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=4cc48683f65e236df8d246207c8958d42d3c069a", "patch": "@@ -1,3 +1,11 @@\n+1999-03-30  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* cplus-dem.c (consume_count): If `count' wraps, return 0 and\n+\tdon't advance input pointer.\n+\t(demangle_class_name): If consume_count didn't find a count, do\n+\tnothing.  Don't bother with `strlen' sanity check; consume_count\n+\tdoes it for us.\n+\n Thu Mar 11 01:22:58 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* pexecute.c (__CYGWIN32__): Rename to"}, {"sha": "ec05edf40fc792118343218b79fbe46f11aa4187", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc48683f65e236df8d246207c8958d42d3c069a/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc48683f65e236df8d246207c8958d42d3c069a/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=4cc48683f65e236df8d246207c8958d42d3c069a", "patch": "@@ -428,12 +428,22 @@ static int\n consume_count (type)\n      const char **type;\n {\n-  int count = 0;\n+  unsigned int count = 0;\n+  char *save = *type;\n \n   while (isdigit ((unsigned char)**type))\n     {\n       count *= 10;\n       count += **type - '0';\n+      /* A sanity check.  Otherwise a symbol like\n+\t `_Utf390_1__1_9223372036854775807__9223372036854775'\n+\t can cause this function to return a negative value.\n+\t In this case we just consume until the end of the string.  */\n+      if (count > strlen (*type))\n+\t{\n+\t  *type = save;\n+\t  return 0;\n+\t}\n       (*type)++;\n     }\n   return (count);\n@@ -1946,7 +1956,7 @@ demangle_class_name (work, mangled, declp)\n   int success = 0;\n \n   n = consume_count (mangled);\n-  if ((int) strlen (*mangled) >= n)\n+  if (n > 0)\n     {\n       demangle_arm_hp_template (work, mangled, n, declp);\n       success = 1;"}]}