{"sha": "3670b0ef05041b8a1defb755804ef36e029d20db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3MGIwZWYwNTA0MWI4YTFkZWZiNzU1ODA0ZWYzNmUwMjlkMjBkYg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-06T09:26:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-06T09:26:19Z"}, "message": "Merge #548\n\n548: Fix bad naming of primitive types such as u64 which ended up as usize r=philberty a=philberty\n\nIn #547 it was found that u64's ended up as usize in gimple which confuses\r\ndebugging sessions. This take the original implementation of named type\r\nfrom gccgo showing it was the TYPE_NAME tree getting confused.\r\n\r\nAddresses #547\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "8b14fea7a5b5b7b69aa7572bcc59e155303ae17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b14fea7a5b5b7b69aa7572bcc59e155303ae17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3670b0ef05041b8a1defb755804ef36e029d20db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5CG7CRBK7hj4Ov3rIwAA2sUIABcRlPU8JHYSOx24mAc7MKwQ\nBm9Bf7nUCc9vghlakIKj845VL9tW6P88p3rLzyZt084yr9clZBdUtON/nP9X79II\naaCBmZmPJ4H6pDceDkf/gXVDHcHlo7Q53P177LqZaxhhzQnidsmQtswStatxkIJN\nCXa5KhxrQtkzEqV6tL5b75a11YtT8Nf9a+JM+ecq3PPfsGl0NUYv/A4u5RbPOUII\n/5Y7pDzsDVHoDrZa/o0AOFMQv+dDg+o8VlseTpKb5eEUePlIOZUf0TSiAkJSw31Q\nW4DRHA6zfbJp6mklSdVbxASa0q6LONLPCJZfOw+ghm7yCMWBguLlW/6udtmkqhY=\n=WeIr\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b14fea7a5b5b7b69aa7572bcc59e155303ae17b\nparent 32c9b09fdb5470dda05375878032c9c7d1fd91f1\nparent dc5e01832772304e2a988406e78d3d83fe83f278\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625563579 +0000\ncommitter GitHub <noreply@github.com> 1625563579 +0000\n\nMerge #548\n\n548: Fix bad naming of primitive types such as u64 which ended up as usize r=philberty a=philberty\n\nIn #547 it was found that u64's ended up as usize in gimple which confuses\r\ndebugging sessions. This take the original implementation of named type\r\nfrom gccgo showing it was the TYPE_NAME tree getting confused.\r\n\r\nAddresses #547\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3670b0ef05041b8a1defb755804ef36e029d20db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3670b0ef05041b8a1defb755804ef36e029d20db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3670b0ef05041b8a1defb755804ef36e029d20db/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c9b09fdb5470dda05375878032c9c7d1fd91f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c9b09fdb5470dda05375878032c9c7d1fd91f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c9b09fdb5470dda05375878032c9c7d1fd91f1"}, {"sha": "dc5e01832772304e2a988406e78d3d83fe83f278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5e01832772304e2a988406e78d3d83fe83f278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5e01832772304e2a988406e78d3d83fe83f278"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "5d19099c2f07d5bc8cfdc6d7f5dfcf7d3ad796ba", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3670b0ef05041b8a1defb755804ef36e029d20db/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3670b0ef05041b8a1defb755804ef36e029d20db/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=3670b0ef05041b8a1defb755804ef36e029d20db", "patch": "@@ -58,8 +58,9 @@ class Context\n \tTyTy::BaseType *lookup;\n \trust_assert (tyctx->lookup_type (ref, &lookup));\n \n-\tauto compiled = TyTyCompile::compile (backend, lookup);\n-\tcompiled_type_map[ref] = compiled;\n+\tBtype *compiled = TyTyCompile::compile (backend, lookup);\n+\tcompiled_type_map.insert (std::pair<HirId, Btype *> (ref, compiled));\n+\tbuiltin_range.insert (ref);\n       }\n   }\n \n@@ -94,7 +95,8 @@ class Context\n   void insert_compiled_type (HirId id, ::Btype *type,\n \t\t\t     const TyTy::BaseType *ref = nullptr)\n   {\n-    compiled_type_map[id] = type;\n+    rust_assert (builtin_range.find (id) == builtin_range.end ());\n+    compiled_type_map.insert (std::pair<HirId, Btype *> (id, type));\n     if (ref != nullptr)\n       {\n \tstd::pair<HirId, ::Btype *> elem (id, type);\n@@ -297,6 +299,7 @@ class Context\n   Resolver::TypeCheckContext *tyctx;\n   Analysis::Mappings *mappings;\n   ConstFold::Context *const_ctx;\n+  std::set<HirId> builtin_range;\n \n   // state\n   std::vector<fncontext> fn_stack;"}, {"sha": "74a8b5221f191c44951843a21cfbe21a2742baef", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3670b0ef05041b8a1defb755804ef36e029d20db/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3670b0ef05041b8a1defb755804ef36e029d20db/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=3670b0ef05041b8a1defb755804ef36e029d20db", "patch": "@@ -1306,11 +1306,27 @@ Gcc_backend::named_type (const std::string &name, Btype *btype,\n   if (type == error_mark_node)\n     return this->error_type ();\n \n+  // The middle-end expects a basic type to have a name.  In Rust every\n+  // basic type will have a name.  The first time we see a basic type,\n+  // give it whatever Rust name we have at this point.\n+  if (TYPE_NAME (type) == NULL_TREE\n+      && location.gcc_location () == BUILTINS_LOCATION\n+      && (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == REAL_TYPE\n+\t  || TREE_CODE (type) == COMPLEX_TYPE\n+\t  || TREE_CODE (type) == BOOLEAN_TYPE))\n+    {\n+      tree decl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+\t\t\t      get_identifier_from_string (name), type);\n+      TYPE_NAME (type) = decl;\n+      return this->make_type (type);\n+    }\n+\n+  tree copy = build_variant_type_copy (type);\n   tree decl = build_decl (location.gcc_location (), TYPE_DECL,\n-\t\t\t  get_identifier_from_string (name), type);\n-\n-  TYPE_NAME (type) = decl;\n-  return this->make_type (type);\n+\t\t\t  get_identifier_from_string (name), copy);\n+  DECL_ORIGINAL_TYPE (decl) = type;\n+  TYPE_NAME (copy) = decl;\n+  return this->make_type (copy);\n }\n \n // Return a pointer type used as a marker for a circular type."}]}