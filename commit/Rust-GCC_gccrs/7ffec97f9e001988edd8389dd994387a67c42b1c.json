{"sha": "7ffec97f9e001988edd8389dd994387a67c42b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmZWM5N2Y5ZTAwMTk4OGVkZDgzODlkZDk5NDM4N2E2N2M0MmIxYw==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2007-11-12T16:01:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-12T16:01:09Z"}, "message": "stl_deque.h (deque<>::push_back<>(_Args...), [...]): Add.\n\n2007-11-12  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_deque.h (deque<>::push_back<>(_Args...),\n\tdeque<>::push_front<>(_Args...), emplace<>(iterator, _Args...),\n\tinsert(iterator, _Tp&&), _M_push_back_aux<>(_Args&&...),\n\t_M_push_front_aux<>(_Args&&...), _M_insert_aux<>(iterator,\n\t_Args&&...)): Add.\n\t* include/deque/deque.tcc (insert(iterator, value_type&&),\n\templace<>(iterator, _Args...), _M_push_back_aux<>(_Args&&...),\n\t_M_push_front_aux<>(_Args&&...), _M_insert_aux<>(iterator,\n\t_Args&&...)): Define.\n\t(_M_insert_aux(iterator, size_type, const value_type&),\n\t_M_insert_aux<>(iterator, _ForwardIterator, _ForwardIterator,\n\tsize_type)): Use _GLIBCXX_MOVE3, _GLIBCXX_MOVE_BACKWARD3,\n\t__uninitialized_move*, __uninitialized_fill_move,\n\t__uninitialized_copy_move, when possible.\n\t* include/bits/stl_uninitialized.h (__uninitialized_copy_copy,\n\t__uninitialized_fill_copy, __uninitialized_copy_fill): Remove.\n\t(__uninitialized_copy_move, __uninitialized_move_copy,\n\t__uninitialized_move_fill, __uninitialized_fill_move): Add.\n\t* include/debug/deque (deque<>::push_back<>(_Args...),\n\tdeque<>::push_front<>(_Args...), emplace<>(iterator, _Args...),\n\tinsert(iterator, _Tp&&)): Add.\n\t* testsuite/23_containers/deque/modifiers/moveable.cc: Enable.\n\t* testsuite/23_containers/deque/capacity/moveable.cc: Likewise.\n\t* testsuite/23_containers/deque/cons/moveable.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\n\t* include/debug/vector (vector<>::insert(iterator, _Tp&&)): Minor\n\ttweak, prefer std::move.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r130102", "tree": {"sha": "68402191bb02932173ce84016692ee59daf683e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68402191bb02932173ce84016692ee59daf683e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffec97f9e001988edd8389dd994387a67c42b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffec97f9e001988edd8389dd994387a67c42b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffec97f9e001988edd8389dd994387a67c42b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffec97f9e001988edd8389dd994387a67c42b1c/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "916c75b4739db757d1e820be5ba3699848505179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916c75b4739db757d1e820be5ba3699848505179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916c75b4739db757d1e820be5ba3699848505179"}], "stats": {"total": 475, "additions": 365, "deletions": 110}, "files": [{"sha": "826b602321149604752d6badc12e223a4a8a82d0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -1,3 +1,42 @@\n+2007-11-12  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_deque.h (deque<>::push_back<>(_Args...),\n+\tdeque<>::push_front<>(_Args...), emplace<>(iterator, _Args...),\n+\tinsert(iterator, _Tp&&), _M_push_back_aux<>(_Args&&...),\n+\t_M_push_front_aux<>(_Args&&...), _M_insert_aux<>(iterator,\n+\t_Args&&...)): Add.\n+\t* include/deque/deque.tcc (insert(iterator, value_type&&),\n+\templace<>(iterator, _Args...), _M_push_back_aux<>(_Args&&...),\n+\t_M_push_front_aux<>(_Args&&...), _M_insert_aux<>(iterator,\n+\t_Args&&...)): Define.\n+\t(_M_insert_aux(iterator, size_type, const value_type&),\n+\t_M_insert_aux<>(iterator, _ForwardIterator, _ForwardIterator,\n+\tsize_type)): Use _GLIBCXX_MOVE3, _GLIBCXX_MOVE_BACKWARD3,\n+\t__uninitialized_move*, __uninitialized_fill_move,\n+\t__uninitialized_copy_move, when possible.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy_copy,\n+\t__uninitialized_fill_copy, __uninitialized_copy_fill): Remove.\n+\t(__uninitialized_copy_move, __uninitialized_move_copy,\n+\t__uninitialized_move_fill, __uninitialized_fill_move): Add.\n+\t* include/debug/deque (deque<>::push_back<>(_Args...),\n+\tdeque<>::push_front<>(_Args...), emplace<>(iterator, _Args...),\n+\tinsert(iterator, _Tp&&)): Add.\n+\t* testsuite/23_containers/deque/modifiers/moveable.cc: Enable.\n+\t* testsuite/23_containers/deque/capacity/moveable.cc: Likewise.\n+\t* testsuite/23_containers/deque/cons/moveable.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n+\t* include/debug/vector (vector<>::insert(iterator, _Tp&&)): Minor\n+\ttweak, prefer std::move.\n+\n 2007-11-11  Howard Hinnant  <hhinnant@apple.com>\n \n \t* include/bits/stl_pair.h (pair<>::pair<>(_U1&&, _Arg0&&,"}, {"sha": "25544e94f2cdecd82fbdb1229d13b94d859468bb", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 160, "deletions": 86, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -106,6 +106,51 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         return _M_insert_aux(__position, __x);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    typename deque<_Tp, _Alloc>::iterator\n+    deque<_Tp, _Alloc>::\n+    insert(iterator __position, value_type&& __x)\n+    {\n+      if (__position._M_cur == this->_M_impl._M_start._M_cur)\n+\t{\n+\t  push_front(std::move(__x));\n+\t  return this->_M_impl._M_start;\n+\t}\n+      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)\n+\t{\n+\t  push_back(std::move(__x));\n+\t  iterator __tmp = this->_M_impl._M_finish;\n+\t  --__tmp;\n+\t  return __tmp;\n+\t}\n+      else\n+        return _M_insert_aux(__position, std::move(__x));\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      typename deque<_Tp, _Alloc>::iterator\n+      deque<_Tp, _Alloc>::\n+      emplace(iterator __position, _Args&&... __args)\n+      {\n+\tif (__position._M_cur == this->_M_impl._M_start._M_cur)\n+\t  {\n+\t    push_front(std::forward<_Args>(__args)...);\n+\t    return this->_M_impl._M_start;\n+\t  }\n+\telse if (__position._M_cur == this->_M_impl._M_finish._M_cur)\n+\t  {\n+\t    push_back(std::forward<_Args>(__args)...);\n+\t    iterator __tmp = this->_M_impl._M_finish;\n+\t    --__tmp;\n+\t    return __tmp;\n+\t  }\n+\telse\n+\t  return _M_insert_aux(__position, std::forward<_Args>(__args)...);\n+      }\n+#endif\n+\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::\n@@ -299,51 +344,71 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       }\n \n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.\n-  template <typename _Tp, typename _Alloc>\n-    void\n-    deque<_Tp, _Alloc>::\n-    _M_push_back_aux(const value_type& __t)\n-    {\n-      value_type __t_copy = __t;\n-      _M_reserve_map_at_back();\n-      *(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();\n-      try\n-        {\n-          this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t_copy);\n-          this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node\n-\t\t\t\t\t      + 1);\n-          this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;\n-        }\n-      catch(...)\n-        {\n-          _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));\n-          __throw_exception_again;\n-        }\n-    }\n+  template<typename _Tp, typename _Alloc>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename... _Args>\n+      void\n+      deque<_Tp, _Alloc>::\n+      _M_push_back_aux(_Args&&... __args)\n+      {\n+\tvalue_type __t_copy(std::forward<_Args>(__args)...);\n+#else\n+      void\n+      deque<_Tp, _Alloc>::\n+      _M_push_back_aux(const value_type& __t)\n+      {\n+\tvalue_type __t_copy = __t;\n+#endif\n+\t_M_reserve_map_at_back();\n+\t*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();\n+\ttry\n+\t  {\n+\t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n+\t\t\t\t    _GLIBCXX_MOVE(__t_copy));\n+\t    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node\n+\t\t\t\t\t\t+ 1);\n+\t    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;\n+\t  }\n+\tcatch(...)\n+\t  {\n+\t    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));\n+\t    __throw_exception_again;\n+\t  }\n+      }\n \n   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.\n-  template <typename _Tp, typename _Alloc>\n-    void\n-    deque<_Tp, _Alloc>::\n-    _M_push_front_aux(const value_type& __t)\n-    {\n-      value_type __t_copy = __t;\n-      _M_reserve_map_at_front();\n-      *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();\n-      try\n-        {\n-          this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node\n-\t\t\t\t\t     - 1);\n-          this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;\n-          this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t_copy);\n-        }\n-      catch(...)\n-        {\n-          ++this->_M_impl._M_start;\n-          _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));\n-          __throw_exception_again;\n-        }\n-    }\n+  template<typename _Tp, typename _Alloc>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename... _Args>\n+      void\n+      deque<_Tp, _Alloc>::\n+      _M_push_front_aux(_Args&&... __args)\n+      {\n+\tvalue_type __t_copy(std::forward<_Args>(__args)...);\n+#else\n+      void\n+      deque<_Tp, _Alloc>::\n+      _M_push_front_aux(const value_type& __t)\n+      {\n+\tvalue_type __t_copy = __t;\n+#endif\n+\t_M_reserve_map_at_front();\n+\t*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();\n+\ttry\n+\t  {\n+\t    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node\n+\t\t\t\t\t       - 1);\n+\t    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;\n+\t    this->_M_impl.construct(this->_M_impl._M_start._M_cur,\n+\t\t\t\t    _GLIBCXX_MOVE(__t_copy));\n+\t  }\n+\tcatch(...)\n+\t  {\n+\t    ++this->_M_impl._M_start;\n+\t    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));\n+\t    __throw_exception_again;\n+\t  }\n+      }\n \n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.\n   template <typename _Tp, typename _Alloc>\n@@ -426,38 +491,47 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n           _M_insert_aux(__pos, __first, __last, __n);\n       }\n \n-  template <typename _Tp, typename _Alloc>\n+  template<typename _Tp, typename _Alloc>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename... _Args>\n+      typename deque<_Tp, _Alloc>::iterator\n+      deque<_Tp, _Alloc>::\n+      _M_insert_aux(iterator __pos, _Args&&... __args)\n+      {\n+\tvalue_type __x_copy(std::forward<_Args>(__args)...); // XXX copy\n+#else\n     typename deque<_Tp, _Alloc>::iterator\n-    deque<_Tp, _Alloc>::\n-    _M_insert_aux(iterator __pos, const value_type& __x)\n-    {\n-      difference_type __index = __pos - this->_M_impl._M_start;\n-      value_type __x_copy = __x; // XXX copy\n-      if (static_cast<size_type>(__index) < size() / 2)\n-\t{\n-\t  push_front(front());\n-\t  iterator __front1 = this->_M_impl._M_start;\n-\t  ++__front1;\n-\t  iterator __front2 = __front1;\n-\t  ++__front2;\n-\t  __pos = this->_M_impl._M_start + __index;\n-\t  iterator __pos1 = __pos;\n-\t  ++__pos1;\n-\t  std::copy(__front2, __pos1, __front1);\n-\t}\n-      else\n-\t{\n-\t  push_back(back());\n-\t  iterator __back1 = this->_M_impl._M_finish;\n-\t  --__back1;\n-\t  iterator __back2 = __back1;\n-\t  --__back2;\n-\t  __pos = this->_M_impl._M_start + __index;\n-\t  std::copy_backward(__pos, __back2, __back1);\n-\t}\n-      *__pos = __x_copy;\n-      return __pos;\n-    }\n+      deque<_Tp, _Alloc>::\n+      _M_insert_aux(iterator __pos, const value_type& __x)\n+      {\n+\tvalue_type __x_copy = __x; // XXX copy\n+#endif\n+\tdifference_type __index = __pos - this->_M_impl._M_start;\n+\tif (static_cast<size_type>(__index) < size() / 2)\n+\t  {\n+\t    push_front(_GLIBCXX_MOVE(front()));\n+\t    iterator __front1 = this->_M_impl._M_start;\n+\t    ++__front1;\n+\t    iterator __front2 = __front1;\n+\t    ++__front2;\n+\t    __pos = this->_M_impl._M_start + __index;\n+\t    iterator __pos1 = __pos;\n+\t    ++__pos1;\n+\t    _GLIBCXX_MOVE3(__front2, __pos1, __front1);\n+\t  }\n+\telse\n+\t  {\n+\t    push_back(_GLIBCXX_MOVE(back()));\n+\t    iterator __back1 = this->_M_impl._M_finish;\n+\t    --__back1;\n+\t    iterator __back2 = __back1;\n+\t    --__back2;\n+\t    __pos = this->_M_impl._M_start + __index;\n+\t    _GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);\n+\t  }\n+\t*__pos = _GLIBCXX_MOVE(__x_copy);\n+\treturn __pos;\n+      }\n \n   template <typename _Tp, typename _Alloc>\n     void\n@@ -478,16 +552,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t{\n \t\t  iterator __start_n = (this->_M_impl._M_start\n \t\t\t\t\t+ difference_type(__n));\n-\t\t  std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t  std::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t      __start_n, __new_start,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_start = __new_start;\n-\t\t  std::copy(__start_n, __pos, __old_start);\n+\t\t  _GLIBCXX_MOVE3(__start_n, __pos, __old_start);\n \t\t  std::fill(__pos - difference_type(__n), __pos, __x_copy);\n \t\t}\n \t      else\n \t\t{\n-\t\t  std::__uninitialized_copy_fill(this->_M_impl._M_start,\n+\t\t  std::__uninitialized_move_fill(this->_M_impl._M_start,\n \t\t\t\t\t\t __pos, __new_start,\n \t\t\t\t\t\t this->_M_impl._M_start,\n \t\t\t\t\t\t __x_copy,\n@@ -516,17 +590,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t{\n \t\t  iterator __finish_n = (this->_M_impl._M_finish\n \t\t\t\t\t - difference_type(__n));\n-\t\t  std::__uninitialized_copy_a(__finish_n,\n+\t\t  std::__uninitialized_move_a(__finish_n,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish = __new_finish;\n-\t\t  std::copy_backward(__pos, __finish_n, __old_finish);\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);\n \t\t  std::fill(__pos, __pos + difference_type(__n), __x_copy);\n \t\t}\n \t      else\n \t\t{\n-\t\t  std::__uninitialized_fill_copy(this->_M_impl._M_finish,\n+\t\t  std::__uninitialized_fill_move(this->_M_impl._M_finish,\n \t\t\t\t\t\t __pos + difference_type(__n),\n \t\t\t\t\t\t __x_copy, __pos,\n \t\t\t\t\t\t this->_M_impl._M_finish,\n@@ -565,18 +639,18 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  {\n \t\t    iterator __start_n = (this->_M_impl._M_start\n \t\t\t\t\t  + difference_type(__n));\n-\t\t    std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t\t__start_n, __new_start,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_start = __new_start;\n-\t\t    std::copy(__start_n, __pos, __old_start);\n+\t\t    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);\n \t\t    std::copy(__first, __last, __pos - difference_type(__n));\n \t\t  }\n \t\telse\n \t\t  {\n \t\t    _ForwardIterator __mid = __first;\n \t\t    std::advance(__mid, difference_type(__n) - __elemsbefore);\n-\t\t    std::__uninitialized_copy_copy(this->_M_impl._M_start,\n+\t\t    std::__uninitialized_move_copy(this->_M_impl._M_start,\n \t\t\t\t\t\t   __pos, __first, __mid,\n \t\t\t\t\t\t   __new_start,\n \t\t\t\t\t\t   _M_get_Tp_allocator());\n@@ -604,19 +678,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t{\n \t\t  iterator __finish_n = (this->_M_impl._M_finish\n \t\t\t\t\t - difference_type(__n));\n-\t\t  std::__uninitialized_copy_a(__finish_n,\n+\t\t  std::__uninitialized_move_a(__finish_n,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish = __new_finish;\n-\t\t  std::copy_backward(__pos, __finish_n, __old_finish);\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);\n \t\t  std::copy(__first, __last, __pos);\n \t\t}\n               else\n \t\t{\n \t\t  _ForwardIterator __mid = __first;\n \t\t  std::advance(__mid, __elemsafter);\n-\t\t  std::__uninitialized_copy_copy(__mid, __last, __pos,\n+\t\t  std::__uninitialized_copy_move(__mid, __last, __pos,\n \t\t\t\t\t\t this->_M_impl._M_finish,\n \t\t\t\t\t\t this->_M_impl._M_finish,\n \t\t\t\t\t\t _M_get_Tp_allocator());"}, {"sha": "a9c6abaf134c4bdd07ab6d98bf26ee8a3c6c8adb", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -1129,6 +1129,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  data to it.  Due to the nature of a %deque this operation\n        *  can be done in constant time.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const value_type& __x)\n       {\n@@ -1140,6 +1141,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_push_front_aux(__x);\n       }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_front(_Args&&... __args)\n+\t{\n+\t  if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)\n+\t    {\n+\t      this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,\n+\t\t\t\t      std::forward<_Args>(__args)...);\n+\t      --this->_M_impl._M_start._M_cur;\n+\t    }\n+\t  else\n+\t    _M_push_front_aux(std::forward<_Args>(__args)...);\n+\t}\n+#endif\n \n       /**\n        *  @brief  Add data to the end of the %deque.\n@@ -1150,6 +1166,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  to it.  Due to the nature of a %deque this operation can be\n        *  done in constant time.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       {\n@@ -1162,6 +1179,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_push_back_aux(__x);\n       }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_back(_Args&&... __args)\n+\t{\n+\t  if (this->_M_impl._M_finish._M_cur\n+\t      != this->_M_impl._M_finish._M_last - 1)\n+\t    {\n+\t      this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n+\t\t\t\t      std::forward<_Args>(__args)...);\n+\t      ++this->_M_impl._M_finish._M_cur;\n+\t    }\n+\t  else\n+\t    _M_push_back_aux(std::forward<_Args>(__args)...);\n+\t}\n+#endif\n \n       /**\n        *  @brief  Removes first element.\n@@ -1205,6 +1238,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  _M_pop_back_aux();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Inserts an object in %deque before specified iterator.\n+       *  @param  position  An iterator into the %deque.\n+       *  @param  args  Arguments.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert an object of type T constructed\n+       *  with T(std::forward<Args>(args)...) before the specified location.\n+       */\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args&&... __args);\n+#endif\n+\n       /**\n        *  @brief  Inserts given value into %deque before specified iterator.\n        *  @param  position  An iterator into the %deque.\n@@ -1217,6 +1265,20 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Inserts given rvalue into %deque before specified iterator.\n+       *  @param  position  An iterator into the %deque.\n+       *  @param  x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given rvalue before the\n+       *  specified location.\n+       */\n+      iterator\n+      insert(iterator __position, value_type&& __x);\n+#endif\n+\n       /**\n        *  @brief  Inserts a number of copies of given data into the %deque.\n        *  @param  position  An iterator into the %deque.\n@@ -1459,9 +1521,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  @brief Helper functions for push_* and pop_*.\n        *  @endif\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void _M_push_back_aux(const value_type&);\n \n       void _M_push_front_aux(const value_type&);\n+#else\n+      template<typename... _Args>\n+        void _M_push_back_aux(_Args&&... __args);\n+\n+      template<typename... _Args>\n+        void _M_push_front_aux(_Args&&... __args);\n+#endif\n \n       void _M_pop_back_aux();\n \n@@ -1512,8 +1582,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);\n \n       // called by insert(p,x)\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n       _M_insert_aux(iterator __pos, const value_type& __x);\n+#else\n+      template<typename... _Args>\n+        iterator\n+        _M_insert_aux(iterator __pos, _Args&&... __args);\n+#endif\n \n       // called by insert(p,n,x) via fill_insert\n       void"}, {"sha": "88dac3adcb0cbd22f26ba6b15e61c0b0e312eed6", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -323,19 +323,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { std::uninitialized_fill_n(__first, __n, __x); }\n \n \n-  // Extensions: __uninitialized_copy_copy, __uninitialized_copy_fill,\n-  // __uninitialized_fill_copy.  All of these algorithms take a user-\n-  // supplied allocator, which is used for construction and destruction.\n+  // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,\n+  // __uninitialized_fill_move, __uninitialized_move_fill.\n+  // All of these algorithms take a user-supplied allocator, which is used\n+  // for construction and destruction.\n \n-  // __uninitialized_copy_copy\n+  // __uninitialized_copy_move\n   // Copies [first1, last1) into [result, result + (last1 - first1)), and\n-  //  copies [first2, last2) into\n+  //  move [first2, last2) into\n   //  [result, result + (last1 - first1) + (last2 - first2)).\n-\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _ForwardIterator, typename _Allocator>\n     inline _ForwardIterator\n-    __uninitialized_copy_copy(_InputIterator1 __first1,\n+    __uninitialized_copy_move(_InputIterator1 __first1,\n \t\t\t      _InputIterator1 __last1,\n \t\t\t      _InputIterator2 __first2,\n \t\t\t      _InputIterator2 __last2,\n@@ -347,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t   __alloc);\n       try\n \t{\n-\t  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);\n+\t  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);\n \t}\n       catch(...)\n \t{\n@@ -356,20 +356,48 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-  // __uninitialized_fill_copy\n-  // Fills [result, mid) with x, and copies [first, last) into\n+  // __uninitialized_move_copy\n+  // Moves [first1, last1) into [result, result + (last1 - first1)), and\n+  //  copies [first2, last2) into\n+  //  [result, result + (last1 - first1) + (last2 - first2)).\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _ForwardIterator, typename _Allocator>\n+    inline _ForwardIterator\n+    __uninitialized_move_copy(_InputIterator1 __first1,\n+\t\t\t      _InputIterator1 __last1,\n+\t\t\t      _InputIterator2 __first2,\n+\t\t\t      _InputIterator2 __last2,\n+\t\t\t      _ForwardIterator __result,\n+\t\t\t      _Allocator& __alloc)\n+    {\n+      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,\n+\t\t\t\t\t\t\t   __result,\n+\t\t\t\t\t\t\t   __alloc);\n+      try\n+\t{\n+\t  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);\n+\t}\n+      catch(...)\n+\t{\n+\t  std::_Destroy(__result, __mid, __alloc);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+  \n+  // __uninitialized_fill_move\n+  // Fills [result, mid) with x, and moves [first, last) into\n   //  [mid, mid + (last - first)).\n   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,\n \t   typename _Allocator>\n     inline _ForwardIterator\n-    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,\n+    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,\n \t\t\t      const _Tp& __x, _InputIterator __first,\n \t\t\t      _InputIterator __last, _Allocator& __alloc)\n     {\n       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);\n       try\n \t{\n-\t  return std::__uninitialized_copy_a(__first, __last, __mid, __alloc);\n+\t  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);\n \t}\n       catch(...)\n \t{\n@@ -378,18 +406,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-  // __uninitialized_copy_fill\n-  // Copies [first1, last1) into [first2, first2 + (last1 - first1)), and\n+  // __uninitialized_move_fill\n+  // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and\n   //  fills [first2 + (last1 - first1), last2) with x.\n   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,\n \t   typename _Allocator>\n     inline void\n-    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,\n+    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,\n \t\t\t      _ForwardIterator __first2,\n \t\t\t      _ForwardIterator __last2, const _Tp& __x,\n \t\t\t      _Allocator& __alloc)\n     {\n-      _ForwardIterator __mid2 = std::__uninitialized_copy_a(__first1, __last1,\n+      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,\n \t\t\t\t\t\t\t    __first2,\n \t\t\t\t\t\t\t    __alloc);\n       try"}, {"sha": "c5358f05f35cce4af9076e69bde49748f82bc8c3", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -254,6 +254,7 @@ namespace __debug\n       }\n \n       // 23.2.1.3 modifiers:\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const _Tp& __x)\n       {\n@@ -267,6 +268,34 @@ namespace __debug\n \t_Base::push_back(__x);\n \tthis->_M_invalidate_all();\n       }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_front(_Args&&... __args)\n+\t{\n+\t  _Base::push_front(std::forward<_Args>(__args)...);\n+\t  this->_M_invalidate_all();\n+\t}\n+\n+      template<typename... _Args>\n+        void\n+        push_back(_Args&&... __args)\n+\t{\n+\t  _Base::push_back(std::forward<_Args>(__args)...);\n+\t  this->_M_invalidate_all();\n+\t}\n+\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args&&... __args)\n+\t{\n+\t  __glibcxx_check_insert(__position);\n+\t  typename _Base::iterator __res = _Base::emplace(__position.base(),\n+\t\t\t\t\t    std::forward<_Args>(__args)...);\n+\t  this->_M_invalidate_all();\n+\t  return iterator(__res, this);\n+\t}\n+#endif\n \n       iterator\n       insert(iterator __position, const _Tp& __x)\n@@ -277,6 +306,18 @@ namespace __debug\n \treturn iterator(__res, this);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      insert(iterator __position, _Tp&& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\ttypename _Base::iterator __res = _Base::insert(__position.base(),\n+\t\t\t\t\t\t       std::move(__x));\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n+#endif\n+\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {"}, {"sha": "62cba68c784a6033453d84759cb87f0f5326573a", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -354,7 +354,7 @@ namespace __debug\n \tbool __realloc = _M_requires_reallocation(this->size() + 1);\n \tdifference_type __offset = __position - begin();\n \ttypename _Base::iterator __res = _Base::insert(__position.base(),\n-\t\t\t\t\t\t       std::forward<_Tp>(__x));\n+\t\t\t\t\t\t       std::move(__x));\n \tif (__realloc)\n \t  this->_M_invalidate_all();\n \telse"}, {"sha": "812e0214c898355e05834f56a1e28ff2713131b4", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc."}, {"sha": "6ec082d3d816a7426cdf3239222d9896a32a81a9", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile }\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}, {"sha": "c965a9d2449a680402fc3595bce5df12ac142ac2", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}, {"sha": "dfc43638087543dcc2ebf1237624b311d9a6079f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1402 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1464 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "0790b5a17f4ae62e3e63430ded6582e7545db161", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1337 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1399 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "2614ba06bb87c2a83c664977b03a9f6afa93e1a0", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1337 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1399 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "a64f1242b2039ca9bdaa7a8c1ad0bd7068d741ca", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffec97f9e001988edd8389dd994387a67c42b1c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=7ffec97f9e001988edd8389dd994387a67c42b1c", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1482 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1552 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}]}