{"sha": "6461f211e09415edd95315f4f9ff843f4f1d8eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MWYyMTFlMDk0MTVlZGQ5NTMxNWY0ZjlmZjg0M2Y0ZjFkOGVmZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-03-27T09:31:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-27T09:31:53Z"}, "message": "re PR debug/89463 (debug information for iterator of an empty loop is gone (at -O3))\n\n2019-03-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/89463\n\t* tree-ssa-dce.c (remove_dead_stmt): Take output vector to\n\tqueue edges to remove.\n\t(eliminate_unnecessary_stmts): Remove dead PHIs alongside\n\tdead stmts.  Delay edge removal until PHIs are removed to\n\tmake debug-stmt creation not confused by seemingly degenerate\n\tPHIs.\n\n\t* gcc.dg/guality/pr89463.c: New testcase.\n\nFrom-SVN: r269961", "tree": {"sha": "2edaf47454e9e2ec61d481e1111a7e475e9bbded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edaf47454e9e2ec61d481e1111a7e475e9bbded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6461f211e09415edd95315f4f9ff843f4f1d8eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461f211e09415edd95315f4f9ff843f4f1d8eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6461f211e09415edd95315f4f9ff843f4f1d8eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461f211e09415edd95315f4f9ff843f4f1d8eff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c686fcbc776ab4783860959b6cdfd6ffc72a4c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c686fcbc776ab4783860959b6cdfd6ffc72a4c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c686fcbc776ab4783860959b6cdfd6ffc72a4c97"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "07a1333cee03369bd24bedcf490f601d57d88431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6461f211e09415edd95315f4f9ff843f4f1d8eff", "patch": "@@ -1,3 +1,13 @@\n+2019-03-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89463\n+\t* tree-ssa-dce.c (remove_dead_stmt): Take output vector to\n+\tqueue edges to remove.\n+\t(eliminate_unnecessary_stmts): Remove dead PHIs alongside\n+\tdead stmts.  Delay edge removal until PHIs are removed to\n+\tmake debug-stmt creation not confused by seemingly degenerate\n+\tPHIs.\n+\n 2019-03-27  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.h: Rename NON_SPECIAL_REGS to GEN_OR_FLOAT_REGS"}, {"sha": "ef4a55b0c3c6892a933a15a91f163e6d50c9fa57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6461f211e09415edd95315f4f9ff843f4f1d8eff", "patch": "@@ -1,3 +1,8 @@\n+2019-03-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89463\n+\t* gcc.dg/guality/pr89463.c: New testcase.\n+\n 2019-03-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89827"}, {"sha": "3abd6cd78f9666f9ad62ee905d0fa6e2402e746f", "filename": "gcc/testsuite/gcc.dg/guality/pr89463.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89463.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89463.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr89463.c?ref=6461f211e09415edd95315f4f9ff843f4f1d8eff", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+void __attribute__((noinline))\n+optimize_me_not ()\n+{\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+int a;\n+int main()\n+{\n+  int i;\n+  for (; a < 10; a++)\n+    i = 0;\n+  for (; i < 6; i++)\n+    ;\n+  /* i may very well be optimized out, so we cannot test for i == 6.\n+     Instead test i + 1 which will make the test UNSUPPORTED if i\n+     is optimized out.  Since the test previously had wrong debug\n+     with i == 0 this is acceptable.  Optimally we'd produce a\n+     debug stmt for the final value of the loop which would fix\n+     the UNSUPPORTED cases.  */\n+  optimize_me_not(); /* { dg-final { gdb-test . \"i + 1\" \"7\" } } */\n+  return 0;\n+}"}, {"sha": "c0e122722c0dcfa70b455edaef97779f760c4494", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461f211e09415edd95315f4f9ff843f4f1d8eff/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=6461f211e09415edd95315f4f9ff843f4f1d8eff", "patch": "@@ -985,7 +985,8 @@ remove_dead_phis (basic_block bb)\n    containing I so that we don't have to look it up.  */\n \n static void\n-remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb)\n+remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb,\n+\t\t  vec<edge> &to_remove_edges)\n {\n   gimple *stmt = gsi_stmt (*i);\n \n@@ -1045,20 +1046,17 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb)\n       e->flags |= EDGE_FALLTHRU;\n \n       /* Remove the remaining outgoing edges.  */\n-      for (ei = ei_start (bb->succs); (e2 = ei_safe_edge (ei)); )\n+      FOR_EACH_EDGE (e2, ei, bb->succs)\n \tif (e != e2)\n \t  {\n-\t    cfg_altered = true;\n \t    /* If we made a BB unconditionally exit a loop or removed\n \t       an entry into an irreducible region, then this transform\n \t       alters the set of BBs in the loop.  Schedule a fixup.  */\n \t    if (loop_exit_edge_p (bb->loop_father, e)\n \t\t|| (e2->dest->flags & BB_IRREDUCIBLE_LOOP))\n \t      loops_state_set (LOOPS_NEED_FIXUP);\n-\t    remove_edge (e2);\n+\t    to_remove_edges.safe_push (e2);\n \t  }\n-\telse\n-\t  ei_next (&ei);\n     }\n \n   /* If this is a store into a variable that is being optimized away,\n@@ -1201,6 +1199,7 @@ eliminate_unnecessary_stmts (void)\n   gimple *stmt;\n   tree call;\n   vec<basic_block> h;\n+  auto_vec<edge> to_remove_edges;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nEliminating unnecessary statements:\\n\");\n@@ -1287,7 +1286,7 @@ eliminate_unnecessary_stmts (void)\n \t\t}\n \t      if (!is_gimple_debug (stmt))\n \t\tsomething_changed = true;\n-\t      remove_dead_stmt (&gsi, bb);\n+\t      remove_dead_stmt (&gsi, bb, to_remove_edges);\n \t    }\n \t  else if (is_gimple_call (stmt))\n \t    {\n@@ -1331,7 +1330,7 @@ eliminate_unnecessary_stmts (void)\n \t\t      {\n \t\t      case IFN_GOMP_SIMD_LANE:\n \t\t      case IFN_ASAN_POISON:\n-\t\t\tremove_dead_stmt (&gsi, bb);\n+\t\t\tremove_dead_stmt (&gsi, bb, to_remove_edges);\n \t\t\tbreak;\n \t\t      default:\n \t\t\tbreak;\n@@ -1354,17 +1353,26 @@ eliminate_unnecessary_stmts (void)\n \t\t  }\n \t    }\n \t}\n+\n+      /* Remove dead PHI nodes.  */\n+      something_changed |= remove_dead_phis (bb);\n     }\n \n   h.release ();\n \n   /* Since we don't track liveness of virtual PHI nodes, it is possible that we\n      rendered some PHI nodes unreachable while they are still in use.\n      Mark them for renaming.  */\n-  if (cfg_altered)\n+  if (!to_remove_edges.is_empty ())\n     {\n       basic_block prev_bb;\n \n+      /* Remove edges.  We've delayed this to not get bogus debug stmts\n+         during PHI node removal.  */\n+      for (unsigned i = 0; i < to_remove_edges.length (); ++i)\n+\tremove_edge (to_remove_edges[i]);\n+      cfg_altered = true;\n+\n       find_unreachable_blocks ();\n \n       /* Delete all unreachable basic blocks in reverse dominator order.  */\n@@ -1430,11 +1438,6 @@ eliminate_unnecessary_stmts (void)\n \t    }\n \t}\n     }\n-  FOR_EACH_BB_FN (bb, cfun)\n-    {\n-      /* Remove dead PHI nodes.  */\n-      something_changed |= remove_dead_phis (bb);\n-    }\n \n   if (bb_postorder)\n     free (bb_postorder);"}]}