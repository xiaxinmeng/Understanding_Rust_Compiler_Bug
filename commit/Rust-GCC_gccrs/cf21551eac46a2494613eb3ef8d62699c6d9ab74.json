{"sha": "cf21551eac46a2494613eb3ef8d62699c6d9ab74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyMTU1MWVhYzQ2YTI0OTQ2MTNlYjNlZjhkNjI2OTljNmQ5YWI3NA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-08-19T15:05:41Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-08-19T15:05:41Z"}, "message": "re PR fortran/54298 (Add warning when doing equal/nonequal floating-point comparisons)\n\n2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/54298\n\t* gfortran.h (struct gfc_option_t): Add warn_compare_reals.\n\t* lang.opt:  Add Wcompare-reals.\n\t* invoke.texi:  Document -Wcompare-reals.\n\t* resolve.c (resolve_operator):  If -Wcompare-reals is in effect,\n\twarn about equality/inequality comparisions for REAL and COMPLEX.\n\t* options.c (gfc_init_options):  Set warn_compare_reals.\n\t(set_Wall):  Include warn_compare_reals in Wall.\n\t(gfc_handle_option):  Handle Wcompare_reals.\n\n2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/54298\n\t* gfortran.dg/real_compare_1.f90:  New test case.\n\t* gfortran.dg/bessel_5.f90  Add -Wno-compare-reals to options.\n\nFrom-SVN: r190516", "tree": {"sha": "84b40c19d9c7f98d00864d2e148356bbea76b7b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b40c19d9c7f98d00864d2e148356bbea76b7b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf21551eac46a2494613eb3ef8d62699c6d9ab74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf21551eac46a2494613eb3ef8d62699c6d9ab74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf21551eac46a2494613eb3ef8d62699c6d9ab74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf21551eac46a2494613eb3ef8d62699c6d9ab74/comments", "author": null, "committer": null, "parents": [{"sha": "5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da8c011067c5514c5e891fd8b4d854eb4fc2e71"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "e91f947cd6f54a94a5400ab0f62322d95403d4af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -1,3 +1,15 @@\n+2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54298\n+\t* gfortran.h (struct gfc_option_t): Add warn_compare_reals.\n+\t* lang.opt:  Add Wcompare-reals.\n+\t* invoke.texi:  Document -Wcompare-reals.\n+\t* resolve.c (resolve_operator):  If -Wcompare-reals is in effect,\n+\twarn about equality/inequality comparisions for REAL and COMPLEX.\n+\t* options.c (gfc_init_options):  Set warn_compare_reals.\n+\t(set_Wall):  Include warn_compare_reals in Wall.\n+\t(gfc_handle_option):  Handle Wcompare_reals.\n+\n 2012-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* array.c (gfc_match_array_ref): Fix up memset arguments."}, {"sha": "c005151d0dcd5926ef914132f1fcbb864e0fa85b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -2225,6 +2225,7 @@ typedef struct\n   int warn_unused_dummy_argument;\n   int warn_realloc_lhs;\n   int warn_realloc_lhs_all;\n+  int warn_compare_reals;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "d962ca04da0609723a95376062ff9981b84184b7", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -726,10 +726,11 @@ warnings.\n @cindex warnings, all\n Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n-This currently includes @option{-Waliasing}, @option{-Wampersand}, \n-@option{-Wconversion}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n-@option{-Wno-tabs}, @option{-Wintrinsic-shadow}, @option{-Wline-truncation},\n-@option{-Wreal-q-constant} and @option{-Wunused}.\n+This currently includes @option{-Waliasing}, @option{-Wampersand},\n+@option{-Wconversion}, @option{-Wcompare-reals}, @option{-Wsurprising},\n+@option{-Wintrinsics-std}, @option{-Wno-tabs}, @option{-Wintrinsic-shadow},\n+@option{-Wline-truncation}, @option{-Wreal-q-constant} and\n+@option{-Wunused}.\n \n @item -Waliasing\n @opindex @code{Waliasing}\n@@ -935,6 +936,11 @@ a scalar.  See also @option{-frealloc-lhs}.\n Warn when the compiler inserts code to for allocation or reallocation of an\n allocatable variable; this includes scalars and derived types.\n \n+@item -Wcompare-reals\n+@opindex @code{Wcompare-reals}\n+Warn when comparing real or complex types for equality or inequality.\n+Enabled by @option{-Wall}.\n+\n @item -Werror\n @opindex @code{Werror}\n @cindex warnings, to errors"}, {"sha": "e0c7cf77ea46c17178b85545207d586e78797f39", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -218,6 +218,10 @@ Wcharacter-truncation\n Fortran Warning\n Warn about truncated character expressions\n \n+Wcompare-reals\n+Fortran Warning\n+Warn about equality comparisons involving REAL or COMPLEX expressions\n+\n Wconversion\n Fortran Warning\n ; Documented in C"}, {"sha": "3e4444dfcf1d4d6754f513b611dfcd97b0626e0b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -113,6 +113,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_unused_dummy_argument = 0;\n   gfc_option.warn_realloc_lhs = 0;\n   gfc_option.warn_realloc_lhs_all = 0;\n+  gfc_option.warn_compare_reals = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -473,6 +474,7 @@ set_Wall (int setting)\n   gfc_option.warn_character_truncation = setting;\n   gfc_option.warn_real_q_constant = setting;\n   gfc_option.warn_unused_dummy_argument = setting;\n+  gfc_option.warn_compare_reals = setting;\n \n   warn_return_type = setting;\n   warn_switch = setting;\n@@ -638,6 +640,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_character_truncation = value;\n       break;\n \n+    case OPT_Wcompare_reals:\n+      gfc_option.warn_compare_reals = value;\n+      break;\n+\n     case OPT_Wconversion:\n       gfc_option.gfc_warn_conversion = value;\n       break;"}, {"sha": "c9be70e020646460f7ea8179f7d2858e266192bb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -4034,6 +4034,28 @@ resolve_operator (gfc_expr *e)\n \n \t  e->ts.type = BT_LOGICAL;\n \t  e->ts.kind = gfc_default_logical_kind;\n+\n+\t  if (gfc_option.warn_compare_reals)\n+\t    {\n+\t      gfc_intrinsic_op op = e->value.op.op;\n+\n+\t      /* Type conversion has made sure that the types of op1 and op2\n+\t\t agree, so it is only necessary to check the first one.   */\n+\t      if ((op1->ts.type == BT_REAL || op1->ts.type == BT_COMPLEX)\n+\t\t  && (op == INTRINSIC_EQ || op == INTRINSIC_EQ_OS\n+\t\t      || op == INTRINSIC_NE || op == INTRINSIC_NE_OS))\n+\t\t{\n+\t\t  const char *msg;\n+\n+\t\t  if (op == INTRINSIC_EQ || op == INTRINSIC_EQ_OS)\n+\t\t    msg = \"Equality comparison for %s at %L\";\n+\t\t  else\n+\t\t    msg = \"Inequality comparison for %s at %L\";\n+\t\t  \n+\t\t  gfc_warning (msg, gfc_typename (&op1->ts), &op1->where);\n+\t\t}\n+\t    }\n+\n \t  break;\n \t}\n "}, {"sha": "1e294339f2a4eea142d5817eb337d6d97e8de639", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -1,3 +1,9 @@\n+2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54298\n+\t* gfortran.dg/real_compare_1.f90:  New test case.\n+\t* gfortran.dg/bessel_5.f90  Add -Wno-compare-reals to options.\n+\n 2012-08-18  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/iinline-1.c: Update testcase to test inline hints."}, {"sha": "0027280e5089ead978f9a0595903a48e16d3146b", "filename": "gcc/testsuite/gfortran.dg/bessel_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-Wall -fno-range-check\" }\n+! { dg-options \"-Wall -fno-range-check -Wno-compare-reals\" }\n !\n ! PR fortran/36158 - Transformational BESSEL_JN/YN\n ! PR fortran/33197 - F2008 math functions"}, {"sha": "fd8417706c5557dc9eecb9f34f9e65ecc797f1e1", "filename": "gcc/testsuite/gfortran.dg/real_compare_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_compare_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf21551eac46a2494613eb3ef8d62699c6d9ab74/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_compare_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_compare_1.f90?ref=cf21551eac46a2494613eb3ef8d62699c6d9ab74", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-Wcompare-reals\" }\n+program main\n+  real :: a\n+  complex :: c\n+  read (*,*) a\n+  read (*,*) c\n+  if (a .eq. 3.14) print *,\"foo\" ! { dg-warning \"Equality comparison for REAL\" }\n+  if (3.14 == a) print *,\"foo\" ! { dg-warning \"Equality comparison for REAL\" }\n+  if (a .eq. 3) print *,\"foo\" ! { dg-warning \"Equality comparison for REAL\" }\n+  if (3. == a) print *,\"foo\" ! { dg-warning \"Equality comparison for REAL\" }\n+  if (a .ne. 4.14) print *,\"foo\" ! { dg-warning \"Inequality comparison for REAL\" }\n+  if (4.14 /= a) print *,\"foo\" ! { dg-warning \"Inequality comparison for REAL\" }\n+  if (a .ne. 4) print *,\"foo\" ! { dg-warning \"Inequality comparison for REAL\" }\n+  if (4 /= a) print *,\"foo\" ! { dg-warning \"Inequality comparison for REAL\" }\n+\n+  if (c .eq. (3.14, 2.11)) print *,\"foo\" ! { dg-warning \"Equality comparison for COMPLEX\" }\n+  if ((3.14, 2.11) == a) print *,\"foo\" ! { dg-warning \"Equality comparison for COMPLEX\" }\n+  if (c .ne. (3.14, 2.11)) print *,\"foo\" ! { dg-warning \"Inequality comparison for COMPLEX\" }\n+  if ((3.14, 2.11) /= a) print *,\"foo\" ! { dg-warning \"Inequality comparison for COMPLEX\" }\n+end program main"}]}