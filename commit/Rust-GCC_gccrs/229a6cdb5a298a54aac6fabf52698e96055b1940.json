{"sha": "229a6cdb5a298a54aac6fabf52698e96055b1940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5YTZjZGI1YTI5OGE1NGFhYzZmYWJmNTI2OThlOTYwNTViMTk0MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-11-14T21:08:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-11-14T21:08:52Z"}, "message": "tree.c (set_call_expr_flags): New function.\n\n\n\t* tree.c (set_call_expr_flags): New function.\n\t(local_define_builtin): Use it.\n\t* tree.h (set_call_expr_flags): Declare.\n\nFrom-SVN: r193506", "tree": {"sha": "5fb8b989add99f1d1897d54cb4463dcbfc40b2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb8b989add99f1d1897d54cb4463dcbfc40b2ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229a6cdb5a298a54aac6fabf52698e96055b1940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229a6cdb5a298a54aac6fabf52698e96055b1940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229a6cdb5a298a54aac6fabf52698e96055b1940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229a6cdb5a298a54aac6fabf52698e96055b1940/comments", "author": null, "committer": null, "parents": [{"sha": "3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "3930faf4f1051d8a1728c089549dde8635bd69f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=229a6cdb5a298a54aac6fabf52698e96055b1940", "patch": "@@ -1,3 +1,9 @@\n+2012-11-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (set_call_expr_flags): New function.\n+\t(local_define_builtin): Use it.\n+\t* tree.h (set_call_expr_flags): Declare.\n+\n 2012-11-14  Uros Bizjak  <ubizjak@gmail.com>\n \t    Vladimir Yakovlev  <vladimir.b.yakovlev@intel.com>\n "}, {"sha": "cb8b81c659cd6ebe029369f4b3c80252d9b6aa69", "filename": "gcc/tree.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=229a6cdb5a298a54aac6fabf52698e96055b1940", "patch": "@@ -9541,6 +9541,39 @@ build_common_tree_nodes (bool signed_char, bool short_double)\n   }\n }\n \n+/* Modify DECL for given flags.  */\n+void\n+set_call_expr_flags (tree decl, int flags)\n+{\n+  if (flags & ECF_NOTHROW)\n+    TREE_NOTHROW (decl) = 1;\n+  if (flags & ECF_CONST)\n+    TREE_READONLY (decl) = 1;\n+  if (flags & ECF_PURE)\n+    DECL_PURE_P (decl) = 1;\n+  if (flags & ECF_LOOPING_CONST_OR_PURE)\n+    DECL_LOOPING_CONST_OR_PURE_P (decl) = 1;\n+  if (flags & ECF_NOVOPS)\n+    DECL_IS_NOVOPS (decl) = 1;\n+  if (flags & ECF_NORETURN)\n+    TREE_THIS_VOLATILE (decl) = 1;\n+  if (flags & ECF_MALLOC)\n+    DECL_IS_MALLOC (decl) = 1;\n+  if (flags & ECF_RETURNS_TWICE)\n+    DECL_IS_RETURNS_TWICE (decl) = 1;\n+  if (flags & ECF_LEAF)\n+    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"leaf\"),\n+\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n+  if ((flags & ECF_TM_PURE) && flag_tm)\n+    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"transaction_pure\"),\n+\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n+  /* Looping const or pure is implied by noreturn.\n+     There is currently no way to declare looping const or looping pure alone.  */\n+  gcc_assert (!(flags & ECF_LOOPING_CONST_OR_PURE)\n+\t      || ((flags & ECF_NORETURN) && (flags & (ECF_CONST | ECF_PURE))));\n+}\n+\n+\n /* A subroutine of build_common_builtin_nodes.  Define a builtin function.  */\n \n static void\n@@ -9551,23 +9584,7 @@ local_define_builtin (const char *name, tree type, enum built_in_function code,\n \n   decl = add_builtin_function (name, type, code, BUILT_IN_NORMAL,\n \t\t\t       library_name, NULL_TREE);\n-  if (ecf_flags & ECF_CONST)\n-    TREE_READONLY (decl) = 1;\n-  if (ecf_flags & ECF_PURE)\n-    DECL_PURE_P (decl) = 1;\n-  if (ecf_flags & ECF_LOOPING_CONST_OR_PURE)\n-    DECL_LOOPING_CONST_OR_PURE_P (decl) = 1;\n-  if (ecf_flags & ECF_NORETURN)\n-    TREE_THIS_VOLATILE (decl) = 1;\n-  if (ecf_flags & ECF_NOTHROW)\n-    TREE_NOTHROW (decl) = 1;\n-  if (ecf_flags & ECF_MALLOC)\n-    DECL_IS_MALLOC (decl) = 1;\n-  if (ecf_flags & ECF_LEAF)\n-    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"leaf\"),\n-\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n-  if ((ecf_flags & ECF_TM_PURE) && flag_tm)\n-    apply_tm_attr (decl, get_identifier (\"transaction_pure\"));\n+  set_call_expr_flags (decl, ecf_flags);\n \n   set_builtin_decl (code, decl, true);\n }"}, {"sha": "cb577f0ecce57f48c091034008e95eb18b16a27c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a6cdb5a298a54aac6fabf52698e96055b1940/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=229a6cdb5a298a54aac6fabf52698e96055b1940", "patch": "@@ -6039,6 +6039,7 @@ extern tree build_duplicate_type (tree);\n \n extern int flags_from_decl_or_type (const_tree);\n extern int call_expr_flags (const_tree);\n+extern void set_call_expr_flags (tree, int);\n \n /* Call argument flags.  */\n "}]}