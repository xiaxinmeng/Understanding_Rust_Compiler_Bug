{"sha": "8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1MDUyMWJlM2Y0MzE0N2NiZTlmYTJhYzVmMWQ5ZTE2YWM3MDJhYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-10T08:55:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-10T08:55:50Z"}, "message": "libstdc++.exp: Use libgloss.exp.\n\n\n2001-05-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/lib/libstdc++.exp: Use libgloss.exp. Call\n\tlibgloss_link_flags to find crt0.o for targets that use libgloss\n\tinstead of newlib.\n\tChange LDFLAGS to LIBS.\n\tConsistently name procedures libstdc++-XXX.\n\t* testsuite/libstdc++.tests/tests.exp: Use new procedure names.\n\nFrom-SVN: r41938", "tree": {"sha": "19b64dfc6f326820b35faba8937a225507ca5e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19b64dfc6f326820b35faba8937a225507ca5e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/comments", "author": null, "committer": null, "parents": [{"sha": "1be6bcf20cd493c93d2ae104eb72c00dd8176521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be6bcf20cd493c93d2ae104eb72c00dd8176521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be6bcf20cd493c93d2ae104eb72c00dd8176521"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "dc07d0cd93165eaaf5e3d7ddf23af94b556d251f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "patch": "@@ -1,3 +1,13 @@\n+2001-05-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Use libgloss.exp. Call\n+\tlibgloss_link_flags to find crt0.o for targets that use libgloss\n+\tinstead of newlib.\n+\tChange LDFLAGS to LIBS.\n+\tConsistently name procedures libstdc++-XXX.\n+\t* testsuite/libstdc++.tests/tests.exp: Use new procedure names.\n+\t* testsuite/config/default.exp: Kill spaces.\n+\t\n 2001-05-08  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n \n \t* include/c_std/bits/std_cstring.h (memchr): Correct definitions."}, {"sha": "a2dd89a3dd887acf97f810254d324356d902bc72", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "patch": "@@ -27,8 +27,9 @@\n ## as follows:\n ##    lib_env(CXX)       \tThe compiler used to run testcases.\n ##    lib_env(CXXFLAGS)  \tSpecial flags passed to the compiler.\n+##    lib_env(LIBGLOSSFLAGS)  \tFlags for finding libgloss-using xcompilers.\n ##    lib_env(INCLUDES)  \tIncludes options to pass to the compiler.\n-##    lib_env(LDFLAGS)   \tAdditional library flags.\n+##    lib_env(LIBS)   \t\tLibraries to link, and dditional library flags.\n ##    lib_env(LIBTOOL)   \tPath to the `libtool' script.\n ##    lib_env(SRC_DIR)   \tWhere V3 master source lives.\n ##    lib_env(BUILD_DIR) \tWhere V3 is built.\n@@ -41,6 +42,7 @@\n \n \n load_lib dg.exp\n+load_lib libgloss.exp\n \n ## Initialization routine.\n proc libstdc++-dg-init { args } {\n@@ -59,7 +61,7 @@ proc libstdc++-dg-init { args } {\n     # Set proper environment variables for the framework.\n     libstdc++-setup-flags ${src-dir} ${build-dir}\n     \n-    # mkcheck.in used to output these information.\n+    # mkcheck.in used to output this information.\n     set output [remote_exec host $lib_env(CXX) -v]\n # XXX don't try clever formatting hacks at the moment\n #    if { [lindex $output 0] == 0 } {\n@@ -77,10 +79,10 @@ proc libstdc++-dg-init { args } {\n ##\n ## This is the heart of the framework.  For the time being, it is\n ## pretty much baroque, but it will improve as time goes.\n-proc libstdc++_load { prog } {\n+proc libstdc++-load { prog } {\n     global lib_env\n     set opts $lib_env(testcase_options)\n-    set results [remote_load target $lib_env(LIBTOOL) \"--mode=execute $prog\"]\n+    set results [remote_load target $prog]\n \n     if { [lindex $results 0] == \"pass\" && [info exists opts(diff)] } {\n \t# FIXME: We should first test for any mentioned @output@ file here\n@@ -102,11 +104,11 @@ proc libstdc++_load { prog } {\n }\n \n ## Nothing particular to do.\n-proc libstdc++_exit { } {\n+proc libstdc++-exit { } {\n }\n \n ## Output the version of the libs tested.\n-proc libstdc++_version { } {\n+proc libstdc++-version { } {\n     global lib_env\n     set version \"undeterminated\" \n \n@@ -124,7 +126,7 @@ proc libstdc++_version { } {\n \n ## Main loop.  Loop over TEST-DIRECTORIES and run each testcase\n ## found therein.\n-proc libstdc++_runtest { testdirs } {\n+proc libstdc++-runtest { testdirs } {\n     global runtests\n     global srcdir\n     global outdir\n@@ -150,8 +152,8 @@ proc libstdc++_runtest { testdirs } {\n \t    }\n \t    \n #\t    verbose \"Testing [dg-trim-dirname $srcdir $testfile]\"\n-\t    libstdc++_do_test $testfile static\n-\t    libstdc++_do_test $testfile shared\n+\t    libstdc++-do-test $testfile static\n+\t    libstdc++-do-test $testfile shared\n \t}\n \tcd ${top-tests-dir}\n     }\n@@ -195,15 +197,15 @@ proc libstdc++-dg-test { testfile compile_type additional-options } {\n \t\"link\" {\n \t    # If we're asked to run a testcase, then just do a `link'.\n \t    # Later, the framework will load the program image through\n-\t    # libstdc++_load callback.\n+\t    # libstdc++-load callback.\n \t    if { $which_library == \"static\" } {\n \t\tappend output_file \".st-exe\"\n \t    } else {\n \t\tappend output_file \".sh-exe\"\n \t    }\n \t    append lt_args \" --mode=link $lib_env(FLAGS) \\\n-\t\t    $lib_env($which_library) $testfile \\\n-\t\t    -o $output_file $lib_env(LDFLAGS)\"\n+\t\t    $lib_env(LIBGLOSSFLAGS) $lib_env($which_library) \\\n+\t\t    $testfile -o $output_file $lib_env(LIBS)\"\n \t}\n \tdefault {\n \t    perror \"$compile_type: option not recognized\"\n@@ -235,8 +237,9 @@ proc libstdc++-setup-flags {src-dir build-dir} {\n \tset lib_env(CXX) [lindex $flags 3]\n \tset lib_env(CXXFLAGS) [lindex $flags 4]\n \tset lib_env(INCLUDES) [lindex $flags 5]\n-\tset lib_env(LDFLAGS) [lindex $flags 6]\n-\t\n+\tset lib_env(LIBS) [lindex $flags 6]\n+\tset lib_env(LIBGLOSSFLAGS) [libgloss_link_flags]\n+\n \t# This is really really fragile.  We should find a better away to\n \t# tell the framework which flags to use for static/shared libraries.\n \tset lib_env(static) \"-static\"\n@@ -256,7 +259,7 @@ proc maybe-make-directory {dir} {\n     }\n }\n \n-proc libstdc++_do_test { testfile lib } {\n+proc libstdc++-do-test { testfile lib } {\n     global which_library; set which_library $lib\n     ## Is it planed to handle -keep-output throught @xxx@-option\n     dg-test -keep-output $testfile \"\" \"\"\n@@ -402,7 +405,7 @@ proc dg-test { args } {\n \t\tperror \"$name: $errmsg for \\\"$op\\\"\\n\"\n \t    }\n \t    # ??? The call to unresolved here is necessary to clear `errcnt'.\n-\t    # What we really need is a proc like perror that doesn't set errcnt.\n+\t    # What is needed is a proc like perror that doesn't set errcnt.\n \t    # It should also set exit_status to 1.\n \t    unresolved \"$name: $errmsg for \\\"$op\\\"\"\n \t    return\n@@ -546,7 +549,7 @@ proc dg-test { args } {\n \t    warning \"$name compilation failed to produce executable\"\n \t} else {\n \t    set status -1\n-\t    set result [${tool}_load $output_file]\n+\t    set result [libstdc++-load $output_file]\n \t    set status [lindex $result 0];\n \t    set output [lindex $result 1];\n \t    #send_user \"After exec, status: $status\\n\"\n@@ -589,7 +592,6 @@ proc dg-test { args } {\n     # Note that if the program has special run-time requirements, running\n     # of the program can be delayed until here.  Ditto for other situations.\n     # It would be a bit cumbersome though.\n-\n     if ![string match ${dg-final-code} \"\"] {\n \tregsub -all \"\\\\\\\\(\\[{}\\])\" ${dg-final-code} \"\\\\1\" dg-final-code\n \t# Note that the use of `args' here makes this a varargs proc.\n@@ -599,7 +601,7 @@ proc dg-test { args } {\n \tif [catch \"dg-final-proc $prog\" errmsg] {\n \t    perror \"$name: error executing dg-final: $errmsg\"\n \t    # ??? The call to unresolved here is necessary to clear `errcnt'.\n-\t    # What we really need is a proc like perror that doesn't set errcnt.\n+\t    # What is needed is a proc like perror that doesn't set errcnt.\n \t    # It should also set exit_status to 1.\n \t    unresolved \"$name: error executing dg-final: $errmsg\"\n \t}"}, {"sha": "e730eb7c63201c6886894c07082f1f20d35c3744", "filename": "libstdc++-v3/testsuite/libstdc++.tests/tests.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8850521be3f43147cbe9fa2ac5f1d9e16ac702ab/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp?ref=8850521be3f43147cbe9fa2ac5f1d9e16ac702ab", "patch": "@@ -34,7 +34,7 @@ remote_exec host ${shell-ulimit-command} \"-d ${maximum-memory-usage}\"\n remote_exec host ${shell-ulimit-command} \"-v ${maximum-memory-usage}\"\n \n ## Now, do the work directory by directory\n-libstdc++_runtest [glob -nocomplain $srcdir/*]\n+libstdc++-runtest [glob -nocomplain $srcdir/*]\n dg-finish\n \n "}]}