{"sha": "52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlN2YwOTY5OGVjYjViYTZkOWU5MjFmZmU5MTJkMWY2NjE1OGU5ZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-13T07:35:29Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-22T03:37:11Z"}, "message": "Simplify vec_select of a subreg of X to just a vec_select of X.\n\ngcc/ChangeLog\n\tPR rtl-optimization/97249\n\t* simplify-rtx.c (simplify_binary_operation_1): Simplify\n\tvec_select of a subreg of X to a vec_select of X.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/pr97249-1.c: New test.", "tree": {"sha": "1f682123f809947c1532f53932348d86f593dca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f682123f809947c1532f53932348d86f593dca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7026bb9504eb0f95e114f832cd6dd14302376861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7026bb9504eb0f95e114f832cd6dd14302376861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7026bb9504eb0f95e114f832cd6dd14302376861"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "47e7aebda8ab37ae6abe1ad5178b7377be8bef31", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "patch": "@@ -4170,6 +4170,47 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t    return subop1;\n \t\t}\n \t    }\n+\n+\t  /* Simplify vec_select of a subreg of X to just a vec_select of X\n+\t     when X has same component mode as vec_select.  */\n+\t  unsigned HOST_WIDE_INT subreg_offset = 0;\n+\t  if (GET_CODE (trueop0) == SUBREG\n+\t      && GET_MODE_INNER (mode)\n+\t\t == GET_MODE_INNER (GET_MODE (SUBREG_REG (trueop0)))\n+\t      && GET_MODE_NUNITS (mode).is_constant (&l1)\n+\t      && constant_multiple_p (subreg_memory_offset (trueop0),\n+\t\t\t\t      GET_MODE_UNIT_BITSIZE (mode),\n+\t\t\t\t      &subreg_offset))\n+\t    {\n+\t      poly_uint64 nunits\n+\t\t= GET_MODE_NUNITS (GET_MODE (SUBREG_REG (trueop0)));\n+\t      bool success = true;\n+\t      for (int i = 0; i != l1; i++)\n+\t\t{\n+\t\t  rtx idx = XVECEXP (trueop1, 0, i);\n+\t\t  if (!CONST_INT_P (idx)\n+\t\t      || maybe_ge (UINTVAL (idx) + subreg_offset, nunits))\n+\t\t    {\n+\t\t      success = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\n+\t      if (success)\n+\t\t{\n+\t\t  rtx par = trueop1;\n+\t\t  if (subreg_offset)\n+\t\t    {\n+\t\t      rtvec vec = rtvec_alloc (l1);\n+\t\t      for (int i = 0; i < l1; i++)\n+\t\t\tRTVEC_ELT (vec, i)\n+\t\t\t  = GEN_INT (INTVAL (XVECEXP (trueop1, 0, i))\n+\t\t\t\t     + subreg_offset);\n+\t\t      par = gen_rtx_PARALLEL (VOIDmode, vec);\n+\t\t    }\n+\t\t  return gen_rtx_VEC_SELECT (mode, SUBREG_REG (trueop0), par);\n+\t\t}\n+\t    }\n \t}\n \n       if (XVECLEN (trueop1, 0) == 1"}, {"sha": "4478a34a9f8d262b24e12109e9e53420908e8d89", "filename": "gcc/testsuite/gcc.target/i386/pr97249-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e7f09698ecb5ba6d9e921ffe912d1f66158e9e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c?ref=52e7f09698ecb5ba6d9e921ffe912d1f66158e9e", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/97249  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O3 -masm=att\" } */\n+/* { dg-final { scan-assembler-times {(?n)vpmovzxbw[ \\t]+\\(.*%xmm[0-9]} 2 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpmovzxwd[ \\t]+\\(.*%xmm[0-9]} 2 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpmovzxdq[ \\t]+\\(.*%xmm[0-9]} 2 } } */\n+\n+void\n+foo (unsigned char* p1, unsigned char* p2, short* __restrict p3)\n+{\n+    for (int i = 0 ; i != 8; i++)\n+     p3[i] = p1[i] + p2[i];\n+     return;\n+}\n+\n+void\n+foo1 (unsigned short* p1, unsigned short* p2, int* __restrict p3)\n+{\n+    for (int i = 0 ; i != 4; i++)\n+     p3[i] = p1[i] + p2[i];\n+     return;\n+}\n+\n+void\n+foo2 (unsigned int* p1, unsigned int* p2, long long* __restrict p3)\n+{\n+    for (int i = 0 ; i != 2; i++)\n+      p3[i] = (long long)p1[i] + (long long)p2[i];\n+     return;\n+}"}]}