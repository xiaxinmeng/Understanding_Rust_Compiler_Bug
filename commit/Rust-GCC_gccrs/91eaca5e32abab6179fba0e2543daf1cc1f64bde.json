{"sha": "91eaca5e32abab6179fba0e2543daf1cc1f64bde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlYWNhNWUzMmFiYWI2MTc5ZmJhMGUyNTQzZGFmMWNjMWY2NGJkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-28T21:52:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-28T21:52:53Z"}, "message": "gimple-ssa-sprintf.c (pass_sprintf_length::gate): Use x > 0 instead of 0 < x.\n\n\t* gimple-ssa-sprintf.c (pass_sprintf_length::gate): Use x > 0 instead\n\tof 0 < x.\n\t(format_floating, format_string, format_directive,\n\tget_destination_size, pass_sprintf_length::handle_gimple_call):\n\tLikewise.\n\nFrom-SVN: r240600", "tree": {"sha": "90ca6df79b98c301595a345593a784b4e6a72645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90ca6df79b98c301595a345593a784b4e6a72645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91eaca5e32abab6179fba0e2543daf1cc1f64bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eaca5e32abab6179fba0e2543daf1cc1f64bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91eaca5e32abab6179fba0e2543daf1cc1f64bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eaca5e32abab6179fba0e2543daf1cc1f64bde/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12a813c16f5c7c5a10d8d5080b315463c4c584f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a813c16f5c7c5a10d8d5080b315463c4c584f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a813c16f5c7c5a10d8d5080b315463c4c584f8"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "588f2d1f45e15b11d5fe9fe72772840d2feef504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eaca5e32abab6179fba0e2543daf1cc1f64bde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eaca5e32abab6179fba0e2543daf1cc1f64bde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91eaca5e32abab6179fba0e2543daf1cc1f64bde", "patch": "@@ -1,3 +1,11 @@\n+2016-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-ssa-sprintf.c (pass_sprintf_length::gate): Use x > 0 instead\n+\tof 0 < x.\n+\t(format_floating, format_string, format_directive,\n+\tget_destination_size, pass_sprintf_length::handle_gimple_call):\n+\tLikewise.\n+\n 2016-09-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77756"}, {"sha": "92f939ebe2142ca4f4c0fff3997f707381d0ff3c", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eaca5e32abab6179fba0e2543daf1cc1f64bde/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eaca5e32abab6179fba0e2543daf1cc1f64bde/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=91eaca5e32abab6179fba0e2543daf1cc1f64bde", "patch": "@@ -130,8 +130,8 @@ pass_sprintf_length::gate (function *)\n      not optimizing and the pass is being invoked early, or when\n      optimizing and the pass is being invoked during optimization\n      (i.e., \"late\").  */\n-  return ((0 < warn_format_length || flag_printf_return_value)\n-\t  && (0 < optimize) == fold_return_value);\n+  return ((warn_format_length > 0 || flag_printf_return_value)\n+\t  && (optimize > 0) == fold_return_value);\n }\n \n /* The result of a call to a formatted function.  */\n@@ -1205,7 +1205,7 @@ format_floating (const conversion_spec &spec, int width, int prec)\n     case 'a':\n       {\n \t/* The minimum output is \"0x.p+0\".  */\n-\tres.range.min = 6 + (0 < prec ? prec : 0);\n+\tres.range.min = 6 + (prec > 0 ? prec : 0);\n \n \t/* Compute the maximum just once.  */\n \tstatic const int a_max[] = {\n@@ -1273,7 +1273,7 @@ format_floating (const conversion_spec &spec, int width, int prec)\n       }\n     }\n \n-  if (0 < width)\n+  if (width > 0)\n     {\n       if (res.range.min < (unsigned)width)\n \tres.range.min = width;\n@@ -1464,7 +1464,7 @@ get_string_length (tree str)\n static fmtresult\n format_string (const conversion_spec &spec, tree arg)\n {\n-  unsigned width = spec.have_width && 0 < spec.width ? spec.width : 0;\n+  unsigned width = spec.have_width && spec.width > 0 ? spec.width : 0;\n   int prec = spec.have_precision ? spec.precision : -1;\n \n   if (spec.star_width)\n@@ -1786,7 +1786,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n     }\n   else\n     {\n-      if (!res->warned && 0 < fmtres.range.min && navail < fmtres.range.min)\n+      if (!res->warned && fmtres.range.min > 0 && navail < fmtres.range.min)\n \t{\n \t  const char* fmtstr\n \t    = (info.bounded\n@@ -2362,7 +2362,7 @@ get_destination_size (tree dest)\n      a member array as opposed to the whole enclosing object), otherwise\n      use type-zero object size to determine the size of the enclosing\n      object (the function fails without optimization in this type).  */\n-  int ost = 0 < optimize;\n+  int ost = optimize > 0;\n   unsigned HOST_WIDE_INT size;\n   if (compute_builtin_object_size (dest, ost, &size))\n     return size;\n@@ -2671,7 +2671,8 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n      attempt to substitute the computed result for the return value of\n      the call.  Avoid this optimization when -frounding-math is in effect\n      and the format string contains a floating point directive.  */\n-  if (0 < optimize && flag_printf_return_value\n+  if (optimize > 0\n+      && flag_printf_return_value\n       && (!flag_rounding_math || !res.floating))\n     try_substitute_return_value (gsi, info, res);\n }"}]}