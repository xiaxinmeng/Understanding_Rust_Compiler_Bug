{"sha": "821503dbd65d1165364328c4568ea457eea06a1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxNTAzZGJkNjVkMTE2NTM2NDMyOGM0NTY4ZWE0NTdlZWEwNmExZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-04-15T02:06:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-04-15T02:06:26Z"}, "message": "pod_char_traits.h (__gnu_cxx::character): Add char_type.\n\n\n2005-04-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t*  include/ext/pod_char_traits.h (__gnu_cxx::character): Add char_type.\n\t(character::to): New.\n\t(character::from): New.\n\t(operator==): Add state parameter.\n\t(operator<): Same.\n\t(char_traits::copy): Use std::copy.\n\t(char_traits::assign): Use std::fill_n.\n\t(char_traits::to_char_type): Use character::from.\n\t(char_traits::to_int_type): Use character::to.\n\t*  testsuite/testsuite_character.h (__gnu_test::character): Remove.\n\t(__gnu_test::conversion_state): Remove.\n\t(__gnu_test::pod_char): Remove.\n\t(pod_char): New typedef.\n\t(pod_uchar): New typedef.\n\t(pod_ushort): New typedef.\n\t*  testsuite/testsuite_character.cc: Fixups.\n\t*  testsuite/21_strings/basic_string/inserters_extractors/pod/\n\t10081-in.cc: Same.\n\t*  testsuite/21_strings/basic_string/inserters_extractors/pod/\n\t10081-out.cc: Same.\n\t*  testsuite/22_locale/numpunct/members/pod/1.cc: Same.\n\t*  testsuite/22_locale/numpunct/members/pod/2.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/close/12790-1.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/open/12790-1.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekoff/12790-1.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekoff/12790-2.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekoff/12790-3.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekoff/12790-4.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekpos/12790-1.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekpos/12790-2.cc: Same.\n\t*  testsuite/27_io/basic_filebuf/seekpos/12790-3.cc: Same.\n\t*  testsuite/27_io/basic_ios/imbue/14072.cc: Same.\n\t*  testsuite/27_io/basic_istream/extractors_arithmetic/pod/\n\t3983-1.cc: Same.\n\t*  testsuite/27_io/basic_istream/extractors_character/pod/\n\t3983-2.cc: Same.\n\t*  testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc: Same.\n\t*  testsuite/27_io/basic_istream/sentry/pod/1.cc: Same.\n\t*  testsuite/27_io/basic_ostream/sentry/pod/1.cc: Same.\n\nFrom-SVN: r98165", "tree": {"sha": "d277bbc9b90693315d38e9618610929caedcdec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d277bbc9b90693315d38e9618610929caedcdec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821503dbd65d1165364328c4568ea457eea06a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821503dbd65d1165364328c4568ea457eea06a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821503dbd65d1165364328c4568ea457eea06a1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821503dbd65d1165364328c4568ea457eea06a1d/comments", "author": null, "committer": null, "parents": [{"sha": "a68bdb0b8d55eada5a23b2dde0b77d4c6667d999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68bdb0b8d55eada5a23b2dde0b77d4c6667d999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68bdb0b8d55eada5a23b2dde0b77d4c6667d999"}], "stats": {"total": 1106, "additions": 444, "deletions": 662}, "files": [{"sha": "535faf5cc692fe40130c1eefe83e327a2b73dd43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,3 +1,45 @@\n+2005-04-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t*  include/ext/pod_char_traits.h (__gnu_cxx::character): Add char_type.\n+\t(character::to): New.\n+\t(character::from): New.\n+\t(operator==): Add state parameter.\n+\t(operator<): Same.\n+\t(char_traits::copy): Use std::copy.\n+\t(char_traits::assign): Use std::fill_n.\n+\t(char_traits::to_char_type): Use character::from.\n+\t(char_traits::to_int_type): Use character::to.\n+\t*  testsuite/testsuite_character.h (__gnu_test::character): Remove.\n+\t(__gnu_test::conversion_state): Remove.\n+\t(__gnu_test::pod_char): Remove.\n+\t(pod_char): New typedef.\n+\t(pod_uchar): New typedef.\n+\t(pod_ushort): New typedef.\n+\t*  testsuite/testsuite_character.cc: Fixups.\n+\t*  testsuite/21_strings/basic_string/inserters_extractors/pod/\n+\t10081-in.cc: Same.\n+\t*  testsuite/21_strings/basic_string/inserters_extractors/pod/\n+\t10081-out.cc: Same.\n+\t*  testsuite/22_locale/numpunct/members/pod/1.cc: Same.\n+\t*  testsuite/22_locale/numpunct/members/pod/2.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/close/12790-1.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/open/12790-1.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekoff/12790-1.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekoff/12790-2.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekoff/12790-3.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekoff/12790-4.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekpos/12790-1.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekpos/12790-2.cc: Same.\n+\t*  testsuite/27_io/basic_filebuf/seekpos/12790-3.cc: Same.\n+\t*  testsuite/27_io/basic_ios/imbue/14072.cc: Same.\n+\t*  testsuite/27_io/basic_istream/extractors_arithmetic/pod/\n+\t3983-1.cc: Same.\n+\t*  testsuite/27_io/basic_istream/extractors_character/pod/\n+\t3983-2.cc: Same.\n+\t*  testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc: Same.\n+\t*  testsuite/27_io/basic_istream/sentry/pod/1.cc: Same.\n+\t*  testsuite/27_io/basic_ostream/sentry/pod/1.cc: Same.\n+\n 2005-04-12  Mike Stump  <mrs@apple.com>\n \n \t* configure: Regenerate."}, {"sha": "a27b4cb2372a2b280521d63187f31f124ef7de28", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,6 +1,6 @@\n // POD character, std::char_traits specialization -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,24 +41,47 @@\n \n namespace __gnu_cxx\n {\n+  // POD character abstraction.\n+  // NB: The char_type parameter is a subset of int_type, as to allow\n+  // int_type to properly hold the full range of char_type values as\n+  // well as EOF.\n   /// @brief A POD class that serves as a character abstraction class.\n   template<typename V, typename I, typename S = mbstate_t>\n     struct character\n     {\n-      typedef V\t\tvalue_type;\n-      typedef I\t\tint_type;\n-      typedef S\t\tstate_type;\n+      typedef V\t\t\t\tvalue_type;\n+      typedef I\t\t\t\tint_type;\n+      typedef S\t\t\t\tstate_type;\n+      typedef character<V, I, S>\tchar_type;\n+\n       value_type\tvalue;\n+\n+      template<typename V2>\n+        static char_type\n+        from(const V2& v)\n+        {\n+\t  char_type ret = { static_cast<value_type>(v) };\n+\t  return ret;\n+\t}\n+\n+      template<typename V2>\n+        static V2\n+        to(const char_type& c)\n+        {\n+\t  V2 ret = { static_cast<V2>(c.value) };\n+\t  return ret;\n+\t}\n+\n     };\n \n-  template<typename V, typename I>\n+  template<typename V, typename I, typename S>\n     inline bool\n-    operator==(const character<V, I>& lhs, const character<V, I>& rhs)\n+    operator==(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n     { return lhs.value == rhs.value; }\n \n-  template<typename V, typename I>\n+  template<typename V, typename I, typename S>\n     inline bool\n-    operator<(const character<V, I>& lhs, const character<V, I>& rhs)\n+    operator<(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n     { return lhs.value < rhs.value; }\n } // namespace __gnu_cxx\n \n@@ -69,13 +92,6 @@ namespace std\n     struct char_traits<__gnu_cxx::character<V, I, S> >\n     {\n       typedef __gnu_cxx::character<V, I, S>\tchar_type;\n-\n-      // NB: This type should be bigger than char_type, so as to\n-      // properly hold EOF values in addition to the full range of\n-      // char_type values.\n-      // Also, assumes\n-      // int_type(value_type) is valid.\n-      // int_type(-1) is possible.\n       typedef typename char_type::int_type\tint_type;\n       typedef typename char_type::state_type\tstate_type;\n       typedef fpos<state_type>\t\t\tpos_type;\n@@ -122,41 +138,47 @@ namespace std\n \n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+      { \n+\treturn static_cast<char_type*>(std::memmove(__s1, __s2, \n+\t\t\t\t\t\t    __n * sizeof(char_type))); \n+      }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+      {\n+\tstd::copy(__s2, __s2 + __n, __s1);\n+\treturn __s1;\n+      }\n \n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n-\tfor (char_type* __p = __s; __p < __s + __n; ++__p)\n-\t  assign(*__p, __a);\n+\tstd::fill_n(__s, __n, __a);\n         return __s;\n       }\n \n       static char_type\n-      to_char_type(const int_type& __c)\n-      {\n-\tchar_type __r = { __c };\n-\treturn __r;\n-      }\n+      to_char_type(const int_type& __i)\n+      { return char_type::template from(__i); }\n \n       static int_type\n       to_int_type(const char_type& __c)\n-      { return int_type(__c.value); }\n+      { return char_type::template to<int_type>(__c); }\n \n       static bool\n       eq_int_type(const int_type& __c1, const int_type& __c2)\n       { return __c1 == __c2; }\n \n       static int_type\n-      eof() { return static_cast<int_type>(-1); }\n+      eof() \n+      {\n+\tint_type __r = { -1 };\n+\treturn __r;\n+      }\n \n       static int_type\n       not_eof(const int_type& __c)\n-      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+      { return eq_int_type(__c, eof()) ? int_type() : __c; }\n     };\n }\n "}, {"sha": "9555362e576de095b64e948e43f7b556d0a55a16", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/pod/10081-in.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -37,10 +37,10 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  typedef basic_string<pod_type> \tstring_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_istream<pod_type> \tistream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_string<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_istream<pod_ushort> \tistream_type;\n \n   bool test __attribute__((unused)) = true;\n \n@@ -61,7 +61,7 @@ void test01()\n       VERIFY( false );\n     }\n \n-  const std::locale loc(std::locale::classic(), new std::ctype<pod_type>);\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n   stream.imbue(loc);\n   try\n     {\n@@ -76,12 +76,12 @@ void test01()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main()"}, {"sha": "c192730362ab87d8f72097571cdc26a7e6811fe1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/pod/10081-out.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -37,10 +37,10 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  typedef basic_string<pod_type> \tstring_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_ostream<pod_type> \tostream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_string<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_ostream<pod_ushort> \tostream_type;\n \n   bool test __attribute__((unused)) = true;\n \n@@ -61,7 +61,7 @@ void test01()\n       VERIFY( false );\n     }\n \n-  const std::locale loc(std::locale::classic(), new std::ctype<pod_type>);\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n   stream.imbue(loc);\n   try\n     {\n@@ -76,12 +76,12 @@ void test01()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main()"}, {"sha": "a4d88bc0e441e82cff088e50b6b91e3d158ca48d", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/1.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -30,42 +30,42 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  using __gnu_test::value_type;\n-  typedef numpunct<pod_type>::string_type \tstring_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_ostream<pod_type> \t\tostream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef pod_ushort::value_type value_type;\n+  typedef numpunct<pod_ushort>::string_type \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_ostream<pod_ushort> \t\tostream_type;\n   \n   bool test __attribute__((unused)) = true;\n \n   // Pre-cache sanity check.\n-  const locale \tloc(locale::classic(), new numpunct<pod_type>);\n-  const numpunct<pod_type>& np = use_facet<numpunct<pod_type> >(loc);\n+  const locale \tloc(locale::classic(), new numpunct<pod_ushort>);\n+  const numpunct<pod_ushort>& np = use_facet<numpunct<pod_ushort> >(loc);\n \n-  pod_type dp = np.decimal_point();\n-  pod_type ts = np.thousands_sep();\n+  pod_ushort dp = np.decimal_point();\n+  pod_ushort ts = np.thousands_sep();\n   string g = np.grouping();\n   string_type strue = np.truename();\n   string_type sfalse = np.falsename();\n \n-  pod_type basedp = { value_type('.') };\n-  pod_type basets = { value_type(',') };\n+  pod_ushort basedp = { value_type('.') };\n+  pod_ushort basets = { value_type(',') };\n \n-  string_type basetrue(4, pod_type());\n+  string_type basetrue(4, pod_ushort());\n   basetrue[0].value = value_type('t');\n   basetrue[1].value = value_type('r');\n   basetrue[2].value = value_type('u');\n   basetrue[3].value = value_type('e');\n \n-  string_type basefalse(5, pod_type());\n+  string_type basefalse(5, pod_ushort());\n   basefalse[0].value = value_type('f');\n   basefalse[1].value = value_type('a');\n   basefalse[2].value = value_type('l');\n   basefalse[3].value = value_type('s');\n   basefalse[4].value = value_type('e');\n \n-  VERIFY( char_traits<pod_type>::eq(dp, basedp) );\n-  VERIFY( char_traits<pod_type>::eq(ts, basets) );\n+  VERIFY( char_traits<pod_ushort>::eq(dp, basedp) );\n+  VERIFY( char_traits<pod_ushort>::eq(ts, basets) );\n   VERIFY( g == \"\" );\n   VERIFY( strue == basetrue );\n   VERIFY( sfalse == basefalse );"}, {"sha": "a6c6d3fcae00924a7c3296eb514f00825550723b", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/2.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -30,10 +30,10 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n+  using __gnu_test::pod_ushort;\n \n-  typedef numpunct<pod_type>::string_type \tstring_type;\n-  typedef basic_ostringstream<pod_type> \t\tostream_type;\n+  typedef numpunct<pod_ushort>::string_type \tstring_type;\n+  typedef basic_ostringstream<pod_ushort> \t\tostream_type;\n   \n   bool \t\ttest = true;\n \n@@ -58,7 +58,7 @@ void test01()\n   VERIFY( test );\n \n   // 2: fail, no ctype\n-  const locale \tloc2(loc, new num_put<pod_type>);\n+  const locale \tloc2(loc, new num_put<pod_ushort>);\n   os.clear();\n   os.imbue(loc2);\n   try\n@@ -74,7 +74,7 @@ void test01()\n   VERIFY( test );\n \n   // 3: fail, no numpunct\n-  const locale \tloc3(loc2, new ctype<pod_type>);\n+  const locale \tloc3(loc2, new ctype<pod_ushort>);\n   os.clear();\n   os.imbue(loc3);\n   try\n@@ -90,7 +90,7 @@ void test01()\n   VERIFY( test );\n \n   // 4: works.\n-  const locale \tloc4(loc3, new numpunct<pod_type>);\n+  const locale \tloc4(loc3, new numpunct<pod_ushort>);\n   os.clear();\n   os.imbue(loc4);\n   try"}, {"sha": "e94b17ff14196f239c6cb2077320dd2bba87f76a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/12790-1.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_close_12790\";\n@@ -37,23 +37,23 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubsetbuf(0, 0);\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out | ios_base::trunc);\n-  fb.sputc(character::from_char('b'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('b'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   // Check that close() writes unshift sequence\n   fb.close();\n \n   fb.open(name, ios_base::in | ios_base::out | ios_base::ate);\n \n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   fb.close();\n \n@@ -66,7 +66,7 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "4ddd2efb02891854fc8a1c28659b9838694fb44a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/12790-1.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_open_12790\";\n@@ -37,19 +37,19 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out);\n-  fb.sputc(character::from_char('b'));\n+  fb.sputc(pod_uchar::from<char>('b'));\n   fb.close();\n \n   // Check that reopened basic_filebuf begins in the initial state.\n   fb.open(name, ios_base::in);\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('b')) );\n+\t\t\t  pod_uchar::from<char>('b')) );\n   fb.close();\n }\n "}, {"sha": "7fef808f494b1c0586649b4b5169e24e5493cd83", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-1.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekoff_12790\";\n@@ -37,17 +37,17 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out);\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n   fb.close();\n \n   fb.open(name, ios_base::in);\n@@ -62,13 +62,13 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n   fb.sbumpc();\n   fb.sbumpc();\n   c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n   c = fb.sbumpc();\n   VERIFY( c == traits_type::eof() );\n "}, {"sha": "748d3a5c84c7990a65436e67b9d33a5ccb81f8e7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-2.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekoff_12790\";\n@@ -37,17 +37,17 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out);\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char('a'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>('a'));\n   fb.close();\n \n   fb.open(name, ios_base::in);\n@@ -62,7 +62,7 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char(0xff)) );\n+\t\t\t  pod_uchar::from<char>(0xff)) );\n   fb.sbumpc();\n   fb.sbumpc();\n   fb.sbumpc();\n@@ -71,7 +71,7 @@ void test01()\n   c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n   c = fb.sbumpc();\n   VERIFY( c == traits_type::eof() );\n "}, {"sha": "5dba37cdda4439376dda9915397c1308eb613ec1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-3.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekoff_12790\";\n@@ -37,16 +37,16 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out | ios_base::trunc);\n-  fb.sputc(character::from_char('b'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0xfc));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('b'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0xfc));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   fb.close();\n   fb.open(name, ios_base::in);\n@@ -60,15 +60,15 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n   fb.sbumpc();\n \n   fb.pubseekpos(pos);\n \n   c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "5f31b58c3d3510e8401b4a4b83fa1f8c17daf92b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-4.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekoff_12790\";\n@@ -37,20 +37,20 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubsetbuf(0, 0);\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n-  fb.sputc(character::from_char('b'));\n-  fb.sputc(character::from_char(0xff));\n+  fb.sputc(pod_uchar::from<char>('b'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n \n   // Check that seekoff sets the current state during output\n   traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   fb.pubseekoff(0, ios_base::beg);\n   fb.sbumpc();\n@@ -59,7 +59,7 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "ffb22f934db0162057c7a0cf87dba6d798e8d08b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekpos_12790\";\n@@ -37,24 +37,24 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubsetbuf(0, 0);\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n   traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   // Check that seekpos restores the state correctly\n   fb.pubseekpos(pos);\n \n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "98ee1d37f2a2e074e8966ea98be7dfe84cd21d78", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-2.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekpos_12790\";\n@@ -37,16 +37,16 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::out | ios_base::trunc);\n-  fb.sputc(character::from_char('b'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0xfc));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('b'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0xfc));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n \n   fb.close();\n   fb.open(name, ios_base::in);\n@@ -62,14 +62,14 @@ void test01()\n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n   fb.sbumpc();\n \n   fb.pubseekpos(pos2);\n   c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "89ed992a9e7e242f797c1169d6f73bbd50c5eab9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-3.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::character;\n-  typedef basic_filebuf<character>::traits_type traits_type;\n+  using __gnu_test::pod_uchar;\n+  typedef basic_filebuf<pod_uchar>::traits_type traits_type;\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_seekpos_12790\";\n@@ -37,14 +37,14 @@ void test01()\n \t     new codecvt<traits_type::char_type, char,\n \t     traits_type::state_type>);\n \n-  basic_filebuf<character> fb;\n+  basic_filebuf<pod_uchar> fb;\n   fb.pubimbue(loc);\n \n   fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n-  fb.sputc(character::from_char('b'));\n-  fb.sputc(character::from_char(0xff));\n-  fb.sputc(character::from_char('c'));\n-  fb.sputc(character::from_char(0xff));\n+  fb.sputc(pod_uchar::from<char>('b'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n+  fb.sputc(pod_uchar::from<char>('c'));\n+  fb.sputc(pod_uchar::from<char>(0xff));\n \n   fb.pubseekoff(0, ios_base::beg);\n   fb.sbumpc();\n@@ -56,18 +56,18 @@ void test01()\n   // Check that seekoff sets the current state for output\n   fb.pubseekpos(pos);\n \n-  fb.sputc(character::from_char('a'));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n-  fb.sputc(character::from_char(0));\n+  fb.sputc(pod_uchar::from<char>('a'));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n+  fb.sputc(pod_uchar::from<char>(0));\n   \n   fb.pubseekpos(pos);\n \n   traits_type::int_type c = fb.sbumpc();\n   VERIFY( c != traits_type::eof() );\n   VERIFY( traits_type::eq(traits_type::to_char_type(c),\n-\t\t\t  character::from_char('a')) );\n+\t\t\t  pod_uchar::from<char>('a')) );\n \n   fb.close();\n }"}, {"sha": "4b5d5307c2cad356465a35c23b6042f3f41a95ef", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/imbue/14072.cc", "status": "modified", "additions": 4, "deletions": 132, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -35,147 +35,19 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n-namespace std\n-{\n-  template<>\n-    class ctype<__gnu_test::character>\n-    : public locale::facet, public ctype_base\n-    {\n-    public:\n-      typedef __gnu_test::character char_type;\n-      explicit ctype(size_t refs  = 0)\n-      : locale::facet(refs) { }\n-\n-      bool\n-      is(mask m, char_type c) const\n-      { return this->do_is(m, c); }\n-\n-      const char_type*\n-      is(const char_type* low, const char_type* high, mask* vec) const\n-      { return this->do_is(low, high, vec); }\n-\n-      const char_type*\n-      scan_is(mask m, const char_type* low, const char_type* high) const\n-      { return this->do_scan_is(m, low, high); }\n-\n-      const char_type*\n-      scan_not(mask m, const char_type* low, const char_type* high) const\n-      { return this->do_scan_not(m, low, high); }\n-\n-      char_type\n-      toupper(char_type c) const\n-      { return this->do_toupper(c); }\n-\n-      const char_type*\n-      toupper(char_type* low, const char_type* high) const\n-      { return this->do_toupper(low, high); }\n-\n-      char_type\n-      tolower(char_type c) const\n-      { return this->do_tolower(c); }\n-\n-      const char_type*\n-      tolower(char_type* low, const char_type* high) const\n-      { return this->do_tolower(low, high); }\n-\n-      char_type\n-      widen(char c) const\n-      { return this->do_widen(c); }\n-\n-      const char*\n-      widen(const char* low, const char* high, char_type* to) const\n-      { return this->do_widen(low, high, to); }\n-\n-      char\n-      narrow(char_type c, char dfault) const\n-      { return this->do_narrow(c, dfault); }\n-\n-      const char_type*\n-      narrow(const char_type* low, const char_type* high,\n-\t     char dfault, char* to) const\n-      { return this->do_narrow(low, high, dfault, to); }\n-\n-      static locale::id id;\n-\n-    protected:\n-      ~ctype()\n-      { }\n-\n-      virtual bool\n-      do_is(mask m, char_type c) const\n-      { return false; }\n-\n-      virtual const char_type*\n-      do_is(const char_type* low, const char_type* high, mask* vec) const\n-      {\n-\tfill_n(vec, high - low, mask());\n-\treturn high;\n-      }\n-\n-      virtual const char_type*\n-      do_scan_is(mask m, const char_type* low, const char_type* high) const\n-      { return high; }\n-\n-      virtual const char_type*\n-      do_scan_not(mask m, const char_type* low, const char_type* high) const\n-      { return low; }\n-\n-      virtual char_type\n-      do_toupper(char_type c) const\n-      { return c; }\n-\n-      virtual const char_type*\n-      do_toupper(char_type*  low, const char_type*  high) const\n-      { return high; }\n-\n-      virtual char_type\n-      do_tolower(char_type c) const\n-      { return c; }\n-\n-      virtual const char_type*\n-      do_tolower(char_type*  low, const char_type*  high) const\n-      { return high; }\n-\n-      virtual char_type\n-      do_widen(char c) const\n-      { return __gnu_test::character::from_char(c); }\n-\n-      virtual const char* \n-      do_widen(const char* low, const char* high, char_type* dest) const\n-      {\n-\ttransform(low, high, dest, &__gnu_test::character::from_char);\n-\treturn high;\n-      }\n-\n-      virtual char\n-      do_narrow(char_type, char dfault) const\n-      { return dfault; }\n-\n-      virtual const char_type*\n-      do_narrow(const char_type* low, const char_type* high,\n-\t\tchar dfault, char*  dest) const\n-      {\n-\tfill_n(dest, high - low, dfault);\n-\treturn high;\n-      }\n-    };\n-\n-  locale::id ctype<__gnu_test::character>::id;\n-} // namespace std\n-\n // libstdc++/14072\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   locale loc;\n-  loc = locale(loc, new ctype<__gnu_test::character>());\n-  loc = locale(loc, new num_get<__gnu_test::character>());\n-  loc = locale(loc, new num_put<__gnu_test::character>());\n+  loc = locale(loc, new ctype<__gnu_test::pod_uchar>());\n+  loc = locale(loc, new num_get<__gnu_test::pod_uchar>());\n+  loc = locale(loc, new num_put<__gnu_test::pod_uchar>());\n \t\n   locale::global(loc);\n-  basic_stringstream<__gnu_test::character> s;\n+  basic_stringstream<__gnu_test::pod_uchar> s;\n   s << \"10\\n\";\n   s.seekg(0, ios_base::beg);\n   s.imbue(locale::classic());"}, {"sha": "5968a9664d8d65f68a8d761eb3f4e926682dccb2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/pod/3983-1.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -39,10 +39,9 @@\n void test03()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  using __gnu_test::value_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_istream<pod_type> \tistream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_istream<pod_ushort> \tistream_type;\n \n   stringbuf_type strbuf01;\n   istream_type iss(&strbuf01);\n@@ -63,12 +62,12 @@ void test03()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main()"}, {"sha": "d3653c86d49db57725a232fae0a0a2ca3b0fe130", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/pod/3983-2.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -39,18 +39,18 @@\n void test03()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  using __gnu_test::value_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_istream<pod_type> \tistream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef pod_ushort::value_type value_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_istream<pod_ushort> \tistream_type;\n \n   stringbuf_type strbuf01;\n   istream_type iss(&strbuf01);\n \n   bool test __attribute__((unused)) = true;\n \n   // input streams\n-  pod_type arr[6] = { value_type('a'), value_type('b'), \n+  pod_ushort arr[6] = { value_type('a'), value_type('b'), \n \t\t      value_type('c'), value_type('d'), value_type('e') };\n \n   try \n@@ -66,12 +66,12 @@ void test03()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main()"}, {"sha": "ee271f4c546175effb44fd78db493a2245791e0d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -39,10 +39,9 @@\n void test03()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  using __gnu_test::value_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_istream<pod_type> \tistream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_istream<pod_ushort> \tistream_type;\n \n   stringbuf_type strbuf01;\n   istream_type iss(&strbuf01);\n@@ -62,12 +61,12 @@ void test03()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main()"}, {"sha": "71442362489fa4f3203c4da5894a0abcc94f16c5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/pod/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -38,10 +38,10 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  typedef basic_string<pod_type> \tstring_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_istream<pod_type> \tistream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_string<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_istream<pod_ushort> \tistream_type;\n \n   bool test __attribute__((unused)) = true;\n \n@@ -80,7 +80,7 @@ void test01()\n     }\n \n   // imbued.\n-  const std::locale loc(std::locale::classic(), new std::ctype<pod_type>);\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n   istr01.imbue(loc);\n   try\n     {\n@@ -158,12 +158,12 @@ void test01()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main() "}, {"sha": "555c7369d1d64b39a5bb37453b4a7cc7214b5cee", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/pod/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -38,10 +38,10 @@\n void test01()\n {\n   using namespace std;\n-  using __gnu_test::pod_type;\n-  typedef basic_string<pod_type> \tstring_type;\n-  typedef basic_stringbuf<pod_type> \tstringbuf_type;\n-  typedef basic_ostream<pod_type> \tostream_type;\n+  using __gnu_test::pod_ushort;\n+  typedef basic_string<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_ostream<pod_ushort> \tostream_type;\n \n   bool test __attribute__((unused)) = true;\n \n@@ -69,7 +69,7 @@ void test01()\n     }\n \n   // imbued.\n-  const std::locale loc(std::locale::classic(), new std::ctype<pod_type>);\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n   ostr01.imbue(loc);\n   try\n     {\n@@ -114,12 +114,12 @@ void test01()\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n-  std::basic_string<__gnu_test::pod_type>::size_type \n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_max_size;\n+  std::basic_string<__gnu_test::pod_ushort>::size_type \n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_max_size;\n \n template \n-  __gnu_test::pod_type\n-  std::basic_string<__gnu_test::pod_type>::_Rep::_S_terminal;\n+  __gnu_test::pod_ushort\n+  std::basic_string<__gnu_test::pod_ushort>::_Rep::_S_terminal;\n #endif\n \n int main() "}, {"sha": "b5bd4122e14f3cd483dd67c2793231193a0b885a", "filename": "libstdc++-v3/testsuite/testsuite_character.cc", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -34,65 +34,67 @@\n namespace std\n {\n   locale::id\n-  codecvt<__gnu_test::character, char, __gnu_test::conversion_state>::id;\n+  codecvt<__gnu_test::pod_uchar, char, __gnu_test::pod_state>::id;\n+\n+  locale::id \n+  ctype<__gnu_test::pod_uchar>::id;\n \n   // Member specializations for the existing facet classes.  \n   // NB: This isn't especially portable. Perhaps a better way would be\n   // to just specialize all of numpunct and ctype.\n-  using __gnu_test::int_type;\n-  using __gnu_test::value_type;\n-  using __gnu_test::pod_type;\n+  using __gnu_test::pod_ushort;\n+  typedef pod_ushort::value_type value_type;\n \n   template<>\n     bool \n-    ctype<pod_type>::\n+    ctype<pod_ushort>::\n     do_is(mask, char_type) const { return true; }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n+    const pod_ushort*\n+    ctype<pod_ushort>::\n     do_is(const char_type* __lo, const char_type*, mask*) const\n     { return __lo; }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n+    const pod_ushort*\n+    ctype<pod_ushort>::\n     do_scan_is(mask, const char_type* __lo, const char_type*) const\n     { return __lo; }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n+    const pod_ushort*\n+    ctype<pod_ushort>::\n     do_scan_not(mask, const char_type* __lo, const char_type*) const\n     { return __lo; }\n \n   template<>\n-    pod_type \n-    ctype<pod_type>::\n+    pod_ushort \n+    ctype<pod_ushort>::\n     do_toupper(char_type __c) const\n     { return __c; }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n+    const pod_ushort*\n+    ctype<pod_ushort>::\n     do_toupper(char_type*, const char_type* __hi) const\n     { return __hi; }\n \n   template<>\n-    pod_type \n-    ctype<pod_type>::\n+    pod_ushort \n+    ctype<pod_ushort>::\n     do_tolower(char_type __c) const\n     { return __c; }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n+    const pod_ushort*\n+    ctype<pod_ushort>::\n     do_tolower(char_type*, const char_type* __hi) const\n     { return __hi; }\n \n   template<>\n-    pod_type\n-    ctype<pod_type>::\n+    pod_ushort\n+    ctype<pod_ushort>::\n     do_widen(char __c) const\n     { \n       char_type ret = { value_type(__c) };\n@@ -101,7 +103,7 @@ namespace std\n \n   template<>\n     const char*\n-    ctype<pod_type>::\n+    ctype<pod_ushort>::\n     do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n     {\n       while (__lo < __hi)\n@@ -115,14 +117,14 @@ namespace std\n \n   template<>\n     char\n-    ctype<pod_type>::\n+    ctype<pod_ushort>::\n     do_narrow(char_type __wc, char) const\n     { return static_cast<char>(__wc.value); }\n \n   template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_narrow(const pod_type* __lo, const pod_type* __hi, \n+    const pod_ushort*\n+    ctype<pod_ushort>::\n+    do_narrow(const pod_ushort* __lo, const pod_ushort* __hi, \n \t      char, char* __dest) const\n     {\n       while (__lo < __hi)\n@@ -135,14 +137,14 @@ namespace std\n     }\n \n   template<>\n-    ctype<pod_type>::~ctype() { }\n+    ctype<pod_ushort>::~ctype() { }\n \n   template<>\n     void\n-    numpunct<pod_type>::_M_initialize_numpunct(__c_locale)\n+    numpunct<pod_ushort>::_M_initialize_numpunct(__c_locale)\n     {\n       if (!_M_data)\n-\t_M_data = new __numpunct_cache<pod_type>;\n+\t_M_data = new __numpunct_cache<pod_ushort>;\n \n       _M_data->_M_grouping = \"\";\n       _M_data->_M_use_grouping = false;\n@@ -155,33 +157,33 @@ namespace std\n \t  value_type v = __num_base::_S_atoms_out[i];\n \t  _M_data->_M_atoms_out[i].value = v;\n \t}\n-      _M_data->_M_atoms_out[__num_base::_S_oend] = pod_type();\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = pod_ushort();\n       \n       for (size_t j = 0; j < __num_base::_S_iend; ++j)\n \t_M_data->_M_atoms_in[j].value = value_type(__num_base::_S_atoms_in[j]);\n-      _M_data->_M_atoms_in[__num_base::_S_iend] = pod_type();\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = pod_ushort();\n \n       // \"true\"\n-      pod_type* __truename = new pod_type[4 + 1];\n+      pod_ushort* __truename = new pod_ushort[4 + 1];\n       __truename[0].value = value_type('t');\n       __truename[1].value = value_type('r');\n       __truename[2].value = value_type('u');\n       __truename[3].value = value_type('e');\n-      __truename[4] = pod_type();\n+      __truename[4] = pod_ushort();\n       _M_data->_M_truename = __truename;\n \n       // \"false\"\n-      pod_type* __falsename = new pod_type[5 + 1];\n+      pod_ushort* __falsename = new pod_ushort[5 + 1];\n       __falsename[0].value = value_type('f');\n       __falsename[1].value = value_type('a');\n       __falsename[2].value = value_type('l');\n       __falsename[3].value = value_type('s');\n       __falsename[4].value = value_type('e');\n-      __falsename[5] = pod_type();\n+      __falsename[5] = pod_ushort();\n       _M_data->_M_falsename = __falsename;\n     }\n \n   template<>\n-    numpunct<pod_type>::~numpunct()\n+    numpunct<pod_ushort>::~numpunct()\n     { delete _M_data; }\n } // namespace std"}, {"sha": "2e1e433d9107b31efc0e1fb2b94d7eb626c1ca46", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 131, "deletions": 285, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821503dbd65d1165364328c4568ea457eea06a1d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=821503dbd65d1165364328c4568ea457eea06a1d", "patch": "@@ -40,176 +40,78 @@\n \n namespace __gnu_test\n {  \n-  // Character type\n-  struct character\n+  struct pod_int\n   {\n-    unsigned char val;\n-\n-    static character from_char(char c)\n-    {\n-      character ret;\n-      ret.val = c;\n-      return ret;\n-    }\n+    int value;\n   };\n-\n+  \n+  inline bool\n+  operator==(const pod_int& lhs, const pod_int& rhs)\n+  { return lhs.value == rhs.value; }\n+  \n   inline bool\n-  operator==(const character& lhs, const character& rhs)\n-  { return lhs.val == rhs.val; }\n+  operator<(const pod_int& lhs, const pod_int& rhs)\n+  { return lhs.value < rhs.value; }\n \n-  // State type.\n-  struct conversion_state\n+  struct pod_state\n   {\n-    unsigned int state;\n+    unsigned long value;\n   };\n \n-  // Test data types.\n-  struct pod_char\n-  {\n-    unsigned char c;\n-  };\n+  inline bool\n+  operator==(const pod_state& lhs, const pod_state& rhs)\n+  { return lhs.value == rhs.value; }\n \n   inline bool\n-  operator==(const pod_char& lhs, const pod_char& rhs)\n-  { return lhs.c == rhs.c; }\n-  \n-  struct pod_int\n-  {\n-    int i;\n-  };\n-  \n-  struct state\n-  {\n-    unsigned long l;\n-    unsigned long l2;\n-  };\n+  operator<(const pod_state& lhs, const pod_state& rhs)\n+  { return lhs.value < rhs.value; }\n \n-  typedef unsigned short\t\t\t\tvalue_type;\n-  typedef unsigned int\t\t\t\t\tint_type;\n-  typedef __gnu_cxx::character<value_type, int_type>\tpod_type;\n-}; // namespace __gnu_test\n+  // Alternate character types.\n+  using __gnu_cxx::character;\n+  typedef character<unsigned char, pod_int, pod_state>  \tpod_char;\n+  typedef character<unsigned char, unsigned int, pod_state>  \tpod_uchar;\n+  typedef character<unsigned short, unsigned int>\t   \tpod_ushort;\n \n-namespace std\n-{\n-  // A std::char_traits specialization. Meets the additional\n-  // requirements for basic_filebuf.\n+  // Specializations.\n+  // pod_char\n   template<>\n-    struct char_traits<__gnu_test::character>\n-    {\n-      typedef __gnu_test::character char_type;\n-      typedef unsigned int int_type;\n-      typedef __gnu_test::conversion_state state_type;\n-      typedef streamoff off_type;\n-      typedef fpos<state_type> pos_type;\n-\n-      static void\n-      assign(char_type& c1, const char_type& c2)\n-      { c1 = c2; }\n-\n-      static bool\n-      eq(const char_type& c1, const char_type& c2)\n-      { return c1.val == c2.val; }\n-\n-      static bool\n-      lt(const char_type& c1, const char_type& c2)\n-      { return c1.val < c2.val; }\n-\n-      static int\n-      compare(const char_type* s1, const char_type* s2, size_t n)\n+    template<typename V2>\n+      inline pod_char::char_type\n+      pod_char::char_type::from(const V2& v)\n       {\n-\tfor (size_t i = 0; i < n; ++i)\n-\t  {\n-\t    if (lt(s1[i], s2[i]))\n-\t      return -1;\n-\t    else if (lt(s2[i], s1[i]))\n-\t      return 1;\n-\t  }\n-\treturn 0;\n-      }\n-\n-      static size_t\n-      length(const char_type* s)\n-      {\n-\tsize_t n = 0;\n-\twhile (!eq(s[n], char_type()))\n-\t  ++n;\n-\treturn n;\n-      }\n-\n-      static const char_type*\n-      find(const char_type* s, size_t n, const char_type& a)\n-      {\n-\tfor (size_t i = 0; i < n; ++i)\n-\t  {\n-\t    if (eq(s[i], a))\n-\t      return s + i;\n-\t  }\n-\treturn NULL;\n-      }\n-\n-      static char_type*\n-      move(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tif (s1 > s2)\n-\t  {\n-\t    for (size_t i = 0; i < n; ++i)\n-\t      assign(s1[n - i - 1], s2[n - i - 1]);\n-\t  }\n-\telse\n-\t  {\n-\t    for (size_t i = 0; i < n; ++i)\n-\t      assign(s1[i], s2[i]);\n-\t  }\n-\treturn s1;\n-      }\n-\n-      static char_type*\n-      copy(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tfor (size_t i = 0; i < n; ++i)\n-\t  assign(s1[i], s2[i]);\n-\treturn s1;\n-      }\n-\n-      static char_type*\n-      assign(char_type* s, size_t n, char_type a)\n-      {\n-\tfor (size_t i = 0; i < n; ++i)\n-\t  assign(s[i], a);\n-\treturn s;\n+\tchar_type ret = { static_cast<value_type>(v.value) };\n+\treturn ret;\n       }\n \n-      static int_type\n-      not_eof(const int_type& c)\n+  template<>\n+    template<typename V2>\n+      inline V2\n+      pod_char::char_type::to(const char_type& c)\n       {\n-\tif (eq_int_type(c, eof()))\n-\t  return 0;\n-\treturn c;\n+\tV2 ret = { c.value };\n+\treturn ret;\n       }\n-\n-      // Note non-trivial conversion to maximize chance of catching bugs\n-      static char_type\n-      to_char_type(const int_type& c)\n+  \n+  // pod_uchar\n+  template<>\n+    template<typename V2>\n+      inline pod_uchar::char_type\n+      pod_uchar::char_type::from(const V2& v)\n       {\n \tchar_type ret;\n-\tret.val = (c >> 5);\n+\tret.value = (v >> 5);\n \treturn ret;\n       }\n \n-      static int_type\n-      to_int_type(const char_type& c)\n-      {\n-\treturn c.val << 5;\n-      }\n-\n-      static bool\n-      eq_int_type(const int_type& c1, const int_type& c2)\n-      { return c1 == c2; }\n-\n-      static int_type eof()\n-      { return 0xf; }\n-    };\n+  template<>\n+    template<typename V2>\n+      inline V2\n+      pod_uchar::char_type::to(const char_type& c)\n+      { return static_cast<V2>(c.value << 5); }\n+}; // namespace __gnu_test\n \n+namespace std\n+{\n   // codecvt specialization\n   //\n   // The conversion performed by the specialization is not supposed to\n@@ -227,58 +129,21 @@ namespace std\n   //    state. Output those bytes.\n   // 3. tmp becomes the new value of state.\n   template<>\n-    class codecvt<__gnu_test::character, char, __gnu_test::conversion_state>\n-      : public locale::facet, public codecvt_base\n+    class codecvt<__gnu_test::pod_uchar, char, __gnu_test::pod_state>\n+    : public __codecvt_abstract_base<__gnu_test::pod_uchar, char, \n+\t\t\t\t     __gnu_test::pod_state>\n     {\n     public:\n-      typedef __gnu_test::character intern_type;\n-      typedef char extern_type;\n-      typedef __gnu_test::conversion_state state_type;\n-\n-      explicit codecvt(size_t refs = 0)\n-      : locale::facet(refs)\n+      typedef codecvt_base::result\tresult;\n+      typedef __gnu_test::pod_uchar \tintern_type;\n+      typedef char \t\t\textern_type;\n+      typedef __gnu_test::pod_state \tstate_type;\n+      typedef __codecvt_abstract_base<intern_type, extern_type, state_type>\n+      base_type;\n+\n+      explicit codecvt(size_t refs = 0) : base_type(refs)\n       { }\n \n-      result\n-      out(state_type& state, const intern_type* from,\n-\t  const intern_type* from_end, const intern_type*& from_next,\n-\t  extern_type* to, extern_type* to_limit, extern_type*& to_next) const\n-      {\n-\treturn do_out(state, from, from_end, from_next,\n-\t\t      to, to_limit, to_next);\n-      }\n-\n-      result\n-      unshift(state_type& state, extern_type* to, extern_type* to_limit,\n-\t      extern_type*& to_next) const\n-      { return do_unshift(state, to, to_limit, to_next); }\n-\n-      result\n-      in(state_type& state, const extern_type* from,\n-\t const extern_type* from_end, const extern_type*& from_next,\n-\t intern_type* to, intern_type* to_limit, intern_type*& to_next) const\n-      {\n-\treturn do_in(state, from, from_end, from_next,\n-\t\t     to, to_limit, to_next);\n-      }\n-\n-      int\n-      encoding() const throw()\n-      { return do_encoding(); }\n-\n-      bool\n-      always_noconv() const throw()\n-      { return do_always_noconv(); }\n-      \n-      int\n-      length(state_type& state, const extern_type* from,\n-\t     const extern_type* end, size_t max) const\n-      { return do_length(state, from, end, max); }\n-      \n-      int\n-      max_length() const throw()\n-      { return do_max_length(); }\n-\n       static locale::id id;\n \n     protected:\n@@ -293,8 +158,8 @@ namespace std\n       {\n \twhile (from < from_end && to < to_limit)\n \t  {\n-\t    unsigned char tmp = (state.state ^ from->val);\n-\t    if (state.state & 0x8)\n+\t    unsigned char tmp = (state.value ^ from->value);\n+\t    if (state.value & 0x8)\n \t      {\n \t\tif (to >= to_limit - 2)\n \t\t  break;\n@@ -309,7 +174,7 @@ namespace std\n \t\t*to++ = (tmp & 0xf);\n \t\t*to++ = ((tmp >> 4) & 0xf);\n \t      }\n-\t    state.state = tmp;\n+\t    state.value = tmp;\n \t    ++from;\n \t  }\n \n@@ -330,13 +195,13 @@ namespace std\n \t    if (c & 0xc0)\n \t      {\n \t\t// Unshift sequence\n-\t\tstate.state &= c;\n+\t\tstate.value &= c;\n \t\t++from;\n \t\tcontinue;\n \t      }\n \n \t    unsigned char tmp;\n-\t    if (state.state & 0x8)\n+\t    if (state.value & 0x8)\n \t      {\n \t\tif (from >= from_end - 2)\n \t\t  break;\n@@ -351,8 +216,8 @@ namespace std\n \t\ttmp = (*from++ & 0xf);\n \t\ttmp |= ((*from++ << 4) & 0xf0);\n \t      }\n-\t    to->val = (tmp ^ state.state);\n-\t    state.state = tmp;\n+\t    to->value = (tmp ^ state.value);\n+\t    state.value = tmp;\n \t    ++to;\n \t  }\n \n@@ -368,21 +233,21 @@ namespace std\n \tfor (unsigned int i = 0; i < CHAR_BIT; ++i)\n \t  {\n \t    unsigned int mask = (1 << i);\n-\t    if (state.state & mask)\n+\t    if (state.value & mask)\n \t      {\n \t\tif (to == to_limit)\n \t\t  {\n \t\t    to_next = to;\n \t\t    return partial;\n \t\t  }\n \n-\t\tstate.state &= ~mask;\n+\t\tstate.value &= ~mask;\n \t\t*to++ = static_cast<unsigned char>(~mask);\n \t      }\n \t  }\n \n \tto_next = to;\n-\treturn state.state == 0 ? ok : error;\n+\treturn state.value == 0 ? ok : error;\n       }\n \n       virtual int\n@@ -404,13 +269,13 @@ namespace std\n \t    if (c & 0xc0)\n \t      {\n \t\t// Unshift sequence\n-\t\tstate.state &= c;\n+\t\tstate.value &= c;\n \t\t++from;\n \t\tcontinue;\n \t      }\n \n \t    unsigned char tmp;\n-\t    if (state.state & 0x8)\n+\t    if (state.value & 0x8)\n \t      {\n \t\tif (from >= end - 2)\n \t\t  break;\n@@ -425,7 +290,7 @@ namespace std\n \t\ttmp = (*from++ & 0xf);\n \t\ttmp |= ((*from++ << 4) & 0xf0);\n \t      }\n-\t    state.state = tmp;\n+\t    state.value = tmp;\n \t    --max;\n \t  }\n \treturn from - beg;\n@@ -438,97 +303,78 @@ namespace std\n       { return 11; }\n     };\n \n-\n-  // A std::char_traits specialization with POD types for char_type,\n-  // int_type, and state_type.\n   template<>\n-    struct char_traits<__gnu_test::pod_char>\n+    class ctype<__gnu_test::pod_uchar>\n+    : public __ctype_abstract_base<__gnu_test::pod_uchar>\n     {\n-      typedef __gnu_test::pod_char\tchar_type;\n-      typedef __gnu_test::pod_int  \tint_type;\n-      typedef __gnu_test::state   \tstate_type;\n-      typedef fpos<state_type> \t\tpos_type;\n-      typedef streamoff \t\toff_type;\n-      \n-      static void \n-      assign(char_type& c1, const char_type& c2)\n-      { c1.c = c2.c; }\n-\n-      static bool \n-      eq(const char_type& c1, const char_type& c2)\n-      { return c1.c == c2.c; }\n-\n-      static bool \n-      lt(const char_type& c1, const char_type& c2)\n-      { return c1.c < c2.c; }\n-\n-      static int \n-      compare(const char_type* s1, const char_type* s2, size_t n)\n-      { return memcmp(s1, s2, n); }\n-\n-      static size_t\n-      length(const char_type* s)\n-      { return strlen(reinterpret_cast<const char*>(s)); }\n-\n-      static const char_type* \n-      find(const char_type* s, size_t n, const char_type& a)\n-      { return static_cast<const char_type*>(memchr(s, a.c, n)); }\n-\n-      static char_type* \n-      move(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tmemmove(s1, s2, n);\n-\treturn s1;\n-      }\n+    public:\n+      typedef __gnu_test::pod_uchar char_type;\n \n-      static char_type* \n-      copy(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tmemcpy(s1, s2, n);\n-\treturn s1;\n-      }\n+      explicit ctype(size_t refs  = 0)\n+      : __ctype_abstract_base<__gnu_test::pod_uchar>(refs) { }\n \n-      static char_type* \n-      assign(char_type* s, size_t n, char_type a)\n-      {\n-\tmemset(s, a.c, n);\n-\treturn s;\n-      }\n+      static locale::id id;\n \n-      static char_type \n-      to_char_type(const int_type& c)\n-      {\n-\tchar_type ret;\n-\tret.c = static_cast<unsigned char>(c.i);\n-\treturn ret;\n-      }\n+    protected:\n+      ~ctype()\n+      { }\n \n-      static int_type \n-      to_int_type(const char_type& c)\n+      virtual bool\n+      do_is(mask m, char_type c) const\n+      { return false; }\n+\n+      virtual const char_type*\n+      do_is(const char_type* low, const char_type* high, mask* vec) const\n       {\n-\tint_type ret;\n-\tret.i = c.c;\n-\treturn ret;\n+\tfill_n(vec, high - low, mask());\n+\treturn high;\n       }\n \n-      static bool \n-      eq_int_type(const int_type& c1, const int_type& c2)\n-      { return c1.i == c2.i; }\n+      virtual const char_type*\n+      do_scan_is(mask m, const char_type* low, const char_type* high) const\n+      { return high; }\n+\n+      virtual const char_type*\n+      do_scan_not(mask m, const char_type* low, const char_type* high) const\n+      { return low; }\n+\n+      virtual char_type\n+      do_toupper(char_type c) const\n+      { return c; }\n \n-      static int_type \n-      eof()\n+      virtual const char_type*\n+      do_toupper(char_type*  low, const char_type*  high) const\n+      { return high; }\n+\n+      virtual char_type\n+      do_tolower(char_type c) const\n+      { return c; }\n+\n+      virtual const char_type*\n+      do_tolower(char_type*  low, const char_type*  high) const\n+      { return high; }\n+\n+      virtual char_type\n+      do_widen(char c) const\n+      { return __gnu_test::pod_uchar::from<char>(c); }\n+\n+      virtual const char* \n+      do_widen(const char* low, const char* high, char_type* dest) const\n       {\n-\tint_type n;\n-\tn.i = -10;\n-\treturn n;\n+\ttransform(low, high, dest, &__gnu_test::pod_uchar::from<char>);\n+\treturn high;\n       }\n \n-      static int_type \n-      not_eof(const int_type& c)\n+      virtual char\n+      do_narrow(char_type, char dfault) const\n+      { return dfault; }\n+\n+      virtual const char_type*\n+      do_narrow(const char_type* low, const char_type* high,\n+\t\tchar dfault, char*  dest) const\n       {\n-\tif (eq_int_type(c, eof()))\n-\t  return int_type();\n-\treturn c;\n+\tfill_n(dest, high - low, dfault);\n+\treturn high;\n       }\n     };\n } // namespace std"}]}