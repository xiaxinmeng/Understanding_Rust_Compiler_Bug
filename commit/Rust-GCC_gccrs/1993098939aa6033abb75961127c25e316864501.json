{"sha": "1993098939aa6033abb75961127c25e316864501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5MzA5ODkzOWFhNjAzM2FiYjc1OTYxMTI3YzI1ZTMxNjg2NDUwMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-07-24T20:02:33Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-07-24T20:02:33Z"}, "message": "rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Delete upper-regs options.\n\n[gcc]\n2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Delete\n\tupper-regs options.\n\t(ISA_2_7_MASKS_SERVER): Likewise.\n\t(ISA_3_0_MASKS_IEEE): Likewise.\n\t(OTHER_P8_VECTOR_MASKS): Likewise.\n\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n\t(POWERPC_MASKS): Likewise.\n\t(power7 cpu): Use ISA_2_6_MASKS_SERVER instead of using a\n\tduplicate list of options.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Remove\n\texplicit -mupper-regs options.\n\t* config/rs6000/rs6000.opt (-mvsx-scalar-memory): Delete\n\t-mupper-regs* options.  Delete -mvsx-scalar-memory, which was an\n\talias for -mupper-regs-df.\n\t* config/rs6000/rs6000.c (rs6000_setup_reg_addr_masks): Likewise.\n\t(rs6000_init_hard_regno_mode_ok): Likewise.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_opt_masks): Likewise.\n\t* config/rs6000/rs6000.h (TARGET_UPPER_REGS_DF): Define upper regs\n\toptions in terms of whether -mvsx or -mpower8-vector was used.\n\t(TARGET_UPPER_REGS_DI): Likewise.\n\t(TARGET_UPPER_REGS_SF): Likewise.\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Delete the\n\t-mupper-regs-* options.\n\n[gcc/testsuite]\n2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/pr65849-1.c: Delete, test no longer valid\n\tsince the upper-regs options have been deleted.\n\t* gcc.target/powerpc/pr65849-2.c: Likewise.\n\t* gcc.target/powerpc/pr80099-1.c: Likewise.\n\t* gcc.target/powerpc/pr80099-2.c: Likewise.\n\t* gcc.target/powerpc/pr80099-3.c: Likewise.\n\t* gcc.target/powerpc/pr80099-4.c: Likewise.\n\t* gcc.target/powerpc/pr80099-5.c: Likewise.\n\t* gcc.target/powerpc/builtins-2-p9-runnable.c: Update test to\n\tsupport removal of the upper-regs options.\n\t* gcc.target/powerpc/p8vector-fp.c: Likewise.\n\t* gcc.target/powerpc/p8vector-ldst.c: Likewise.\n\t* gcc.target/powerpc/p9-dimode1.c: Likewise.\n\t* gcc.target/powerpc/p9-dimode2.c: Likewise.\n\t* gcc.target/powerpc/ppc-fpconv-1.c: Likewise.\n\t* gcc.target/powerpc/ppc-fpconv-10.c: Likewise.\n\t* gcc.target/powerpc/ppc-fpconv-5.c: Likewise.\n\t* gcc.target/powerpc/ppc-fpconv-9.c: Likewise.\n\t* gcc.target/powerpc/ppc-round.c: Likewise.\n\t* gcc.target/powerpc/pr71720.c: Likewise.\n\t* gcc.target/powerpc/pr72853.c: Likewise.\n\t* gcc.target/powerpc/pr79907.c: Likewise.\n\t* gcc.target/powerpc/pr78953.c: Likewise.\n\t* gcc.target/powerpc/upper-regs-df.c: Likewise.\n\t* gcc.target/powerpc/upper-regs-sf.c: Likewise.\n\t* gcc.target/powerpc/vec-extract-1.c: Likewise.\n\t* gcc.target/powerpc/vec-init-3.c: Likewise.\n\t* gcc.target/powerpc/vec-init-6.c: Likewise.\n\t* gcc.target/powerpc/vec-init-7.c: Likewise.\n\t* gcc.target/powerpc/vec-set-char.c: Likewise.\n\t* gcc.target/powerpc/vec-set-int.c: Likewise.\n\t* gcc.target/powerpc/vec-set-short.c: Likewise.\n\nFrom-SVN: r250482", "tree": {"sha": "db97d4a0d558a0da8a87271348dde0a32414be59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db97d4a0d558a0da8a87271348dde0a32414be59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1993098939aa6033abb75961127c25e316864501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1993098939aa6033abb75961127c25e316864501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1993098939aa6033abb75961127c25e316864501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1993098939aa6033abb75961127c25e316864501/comments", "author": null, "committer": null, "parents": [{"sha": "0281547a1d9637f60f93b361bce0b548df120962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0281547a1d9637f60f93b361bce0b548df120962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0281547a1d9637f60f93b361bce0b548df120962"}], "stats": {"total": 2419, "additions": 145, "deletions": 2274}, "files": [{"sha": "f7b6e895dde7058ece1867008438ecf53291d6c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,3 +1,30 @@\n+2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Delete\n+\tupper-regs options.\n+\t(ISA_2_7_MASKS_SERVER): Likewise.\n+\t(ISA_3_0_MASKS_IEEE): Likewise.\n+\t(OTHER_P8_VECTOR_MASKS): Likewise.\n+\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n+\t(POWERPC_MASKS): Likewise.\n+\t(power7 cpu): Use ISA_2_6_MASKS_SERVER instead of using a\n+\tduplicate list of options.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Remove\n+\texplicit -mupper-regs options.\n+\t* config/rs6000/rs6000.opt (-mvsx-scalar-memory): Delete\n+\t-mupper-regs* options.  Delete -mvsx-scalar-memory, which was an\n+\talias for -mupper-regs-df.\n+\t* config/rs6000/rs6000.c (rs6000_setup_reg_addr_masks): Likewise.\n+\t(rs6000_init_hard_regno_mode_ok): Likewise.\n+\t(rs6000_option_override_internal): Likewise.\n+\t(rs6000_opt_masks): Likewise.\n+\t* config/rs6000/rs6000.h (TARGET_UPPER_REGS_DF): Define upper regs\n+\toptions in terms of whether -mvsx or -mpower8-vector was used.\n+\t(TARGET_UPPER_REGS_DI): Likewise.\n+\t(TARGET_UPPER_REGS_SF): Likewise.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Delete the\n+\t-mupper-regs-* options.\n+\n 2017-07-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* passes.c (emergency_dump_function): Print some empty lines and a"}, {"sha": "1359099366d07428c8ff1c1f774ee64f02278257", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -575,40 +575,6 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n      2. If TARGET_ALTIVEC is turned off.  */\n   if ((flags & OPTION_MASK_CRYPTO) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__CRYPTO__\");\n-  /* Note that the OPTION_MASK_UPPER_REGS_DF flag is automatically\n-     turned on in the following conditions:\n-     1. If TARGET_UPPER_REGS is explicitly turned on and\n-\tTARGET_VSX is turned on and OPTION_MASK_UPPER_REGS_DF is not\n-\texplicitly turned off.  Hereafter, the\n-\tOPTION_MASK_UPPER_REGS_DF flag is considered to have been\n-\texplicitly set.\n-     Note that the OPTION_MASK_UPPER_REGS_DF flag is automatically\n-     turned off in the following conditions:\n-     1. If TARGET_UPPER_REGS is explicitly turned off and TARGET_VSX\n-\tis turned on and OPTION_MASK_UPPER_REGS_DF is not explicitly\n-\tturned on.  Hereafter, the OPTION_MASK_UPPER_REGS_DF flag is\n-\tconsidered to have been explicitly cleared.\n-     2. If TARGET_UPPER_REGS_DF is turned on but TARGET_VSX is turned\n-\toff.  */\n-  if ((flags & OPTION_MASK_UPPER_REGS_DF) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"__UPPER_REGS_DF__\");\n-  /* Note that the OPTION_MASK_UPPER_REGS_SF flag is automatically\n-     turned on in the following conditions:\n-     1. If TARGET_UPPER_REGS is explicitly turned on and\n-\tTARGET_P8_VECTOR is on and OPTION_MASK_UPPER_REGS_SF is not\n-\tturned off explicitly.  Hereafter, the\n-\tOPTION_MASK_UPPER_REGS_SF flag is considered to have been\n-\texplicitly set.\n-     Note that the OPTION_MASK_UPPER_REGS_SF flag is automatically\n-     turned off in the following conditions:\n-     1. If TARGET_UPPER_REGS is explicitly turned off and\n-\tTARGET_P8_VECTOR is on and OPTION_MASK_UPPER_REGS_SF is not\n-\tturned off explicitly.  Hereafter, the\n-\tOPTION_MASK_UPPER_REGS_SF flag is considered to have been\n-\texplicitly cleared.\n-     2. If TARGET_P8_VECTOR is off.  */\n-  if ((flags & OPTION_MASK_UPPER_REGS_SF) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"__UPPER_REGS_SF__\");\n \n   /* options from the builtin masks.  */\n   /* Note that RS6000_BTM_PAIRED is enabled only if"}, {"sha": "062a91b27343b8f7c0845f605be4b5f5ae1b3e76", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -44,9 +44,7 @@\n #define ISA_2_6_MASKS_SERVER\t(ISA_2_5_MASKS_SERVER\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n \t\t\t\t | OPTION_MASK_ALTIVEC\t\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DF)\n+\t\t\t\t | OPTION_MASK_VSX)\n \n /* For now, don't provide an embedded version of ISA 2.07.  */\n #define ISA_2_7_MASKS_SERVER\t(ISA_2_6_MASKS_SERVER\t\t\t\\\n@@ -57,8 +55,7 @@\n \t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_QUAD_MEMORY\t\t\\\n-  \t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n+\t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n \t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n \n /* Add ISEL back into ISA 3.0, since it is supposed to be a win.  Do not add\n@@ -79,9 +76,6 @@\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n \t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n@@ -94,17 +88,14 @@\n #define OTHER_P8_VECTOR_MASKS\t(OTHER_P9_VECTOR_MASKS\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n-\t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\t\t\\\n+\t\t\t\t | OPTION_MASK_CRYPTO)\n \n /* Flags that need to be turned off if -mno-vsx.  */\n #define OTHER_VSX_VECTOR_MASKS\t(OTHER_P8_VECTOR_MASKS\t\t\t\\\n \t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n \t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n \t\t\t\t | OPTION_MASK_VSX_TIMODE)\n \n@@ -160,9 +151,6 @@\n \t\t\t\t | OPTION_MASK_SOFT_FLOAT\t\t\\\n \t\t\t\t | OPTION_MASK_STRICT_ALIGN_OPTIONAL\t\\\n \t\t\t\t | OPTION_MASK_TOC_FUSION\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n \t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n \t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n \t\t\t\t | OPTION_MASK_VSX_TIMODE)\n@@ -251,11 +239,7 @@ RS6000_CPU (\"power6\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n RS6000_CPU (\"power6x\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n \t    | MASK_CMPB | MASK_DFP | MASK_MFPGPR | MASK_RECIP_PRECISION)\n-RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n-\t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n-\t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n-\t    | MASK_VSX | MASK_RECIP_PRECISION | OPTION_MASK_UPPER_REGS_DF\n-\t    | OPTION_MASK_UPPER_REGS_DI)\n+RS6000_CPU (\"power7\", PROCESSOR_POWER7, MASK_POWERPC64 | ISA_2_6_MASKS_SERVER)\n RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"power9\", PROCESSOR_POWER9, MASK_POWERPC64 | ISA_3_0_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)"}, {"sha": "7d8bf63e9733a18d898f1f060e50586916be52ed", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 108, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2907,9 +2907,7 @@ rs6000_setup_reg_addr_masks (void)\n \t\t  && !VECTOR_MODE_P (m2)\n \t\t  && !FLOAT128_VECTOR_P (m2)\n \t\t  && !complex_p\n-\t\t  && !small_int_vsx_p\n-\t\t  && (m2 != DFmode || !TARGET_UPPER_REGS_DF)\n-\t\t  && (m2 != SFmode || !TARGET_UPPER_REGS_SF))\n+\t\t  && !small_int_vsx_p)\n \t\t{\n \t\t  addr_mask |= RELOAD_REG_PRE_INCDEC;\n \n@@ -3263,7 +3261,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wA] = BASE_REGS;\n     }\n \n-  if (TARGET_P8_VECTOR && TARGET_UPPER_REGS_SF)\t\t\t/* SFmode  */\n+  if (TARGET_P8_VECTOR)\t\t\t\t\t\t/* SFmode  */\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wu] = ALTIVEC_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wy] = VSX_REGS;\n@@ -3458,13 +3456,13 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t    }\n \t}\n \n-      if (TARGET_UPPER_REGS_DF)\n-\treg_addr[DFmode].scalar_in_vmx_p = true;\n-\n-      if (TARGET_UPPER_REGS_DI)\n-\treg_addr[DImode].scalar_in_vmx_p = true;\n+      if (TARGET_VSX)\n+\t{\n+\t  reg_addr[DFmode].scalar_in_vmx_p = true;\n+\t  reg_addr[DImode].scalar_in_vmx_p = true;\n+\t}\n \n-      if (TARGET_UPPER_REGS_SF)\n+      if (TARGET_P8_VECTOR)\n \treg_addr[SFmode].scalar_in_vmx_p = true;\n \n       if (TARGET_VSX_SMALL_INTEGER)\n@@ -4277,18 +4275,10 @@ rs6000_option_override_internal (bool global_init_p)\n \t{\n \t  if (cpu_index == PROCESSOR_POWER9)\n \t    {\n-\t      /* legacy behavior: allow -mcpu-power9 with certain\n+\t      /* legacy behavior: allow -mcpu=power9 with certain\n \t\t capabilities explicitly disabled.  */\n \t      rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~ignore_masks);\n-\t      /* However, reject this automatic fix if certain\n-\t\t capabilities required for TARGET_P9_MINMAX support\n-\t\t have been explicitly disabled.  */\n-\t      if (((OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n-\t\t    | OPTION_MASK_UPPER_REGS_DF) & rs6000_isa_flags)\n-\t\t  != (OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n-\t\t      | OPTION_MASK_UPPER_REGS_DF))\n-\t\terror (\"-mpower9-minmax incompatible with explicitly disabled options\");\n-\t\t}\n+\t    }\n \t  else\n \t    error (\"Power9 target option is incompatible with -mcpu=<xxx> for \"\n \t\t   \"<xxx> less than power9\");\n@@ -4374,73 +4364,6 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_DFP;\n     }\n \n-  /* Allow an explicit -mupper-regs to set -mupper-regs-df, -mupper-regs-di,\n-     and -mupper-regs-sf, depending on the cpu, unless the user explicitly also\n-     set the individual option.  */\n-  if (TARGET_UPPER_REGS > 0)\n-    {\n-      if (TARGET_VSX\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF))\n-\t{\n-\t  rs6000_isa_flags |= OPTION_MASK_UPPER_REGS_DF;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_DF;\n-\t}\n-      if (TARGET_VSX\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DI))\n-\t{\n-\t  rs6000_isa_flags |= OPTION_MASK_UPPER_REGS_DI;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_DI;\n-\t}\n-      if (TARGET_P8_VECTOR\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_SF))\n-\t{\n-\t  rs6000_isa_flags |= OPTION_MASK_UPPER_REGS_SF;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_SF;\n-\t}\n-    }\n-  else if (TARGET_UPPER_REGS == 0)\n-    {\n-      if (TARGET_VSX\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF))\n-\t{\n-\t  rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_DF;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_DF;\n-\t}\n-      if (TARGET_VSX\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DI))\n-\t{\n-\t  rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_DI;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_DI;\n-\t}\n-      if (TARGET_P8_VECTOR\n-\t  && !(rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_SF))\n-\t{\n-\t  rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_SF;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_UPPER_REGS_SF;\n-\t}\n-    }\n-\n-  if (TARGET_UPPER_REGS_DF && !TARGET_VSX)\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF)\n-\terror (\"-mupper-regs-df requires -mvsx\");\n-      rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_DF;\n-    }\n-\n-  if (TARGET_UPPER_REGS_DI && !TARGET_VSX)\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DI)\n-\terror (\"-mupper-regs-di requires -mvsx\");\n-      rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_DI;\n-    }\n-\n-  if (TARGET_UPPER_REGS_SF && !TARGET_P8_VECTOR)\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_SF)\n-\terror (\"-mupper-regs-sf requires -mpower8-vector\");\n-      rs6000_isa_flags &= ~OPTION_MASK_UPPER_REGS_SF;\n-    }\n-\n   /* The quad memory instructions only works in 64-bit mode. In 32-bit mode,\n      silently turn off quad memory mode.  */\n   if ((TARGET_QUAD_MEMORY || TARGET_QUAD_MEMORY_ATOMIC) && !TARGET_POWERPC64)\n@@ -4649,24 +4572,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  if (TARGET_P9_DFORM_SCALAR && !TARGET_UPPER_REGS_DF)\n-    {\n-      /* We prefer to not mention undocumented options in\n-\t error messages.  However, if users have managed to select\n-\t power9-dform without selecting upper-regs-df, they\n-\t already know about undocumented flags.  */\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF)\n-\terror (\"-mpower9-dform requires -mupper-regs-df\");\n-      rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM_SCALAR;\n-    }\n-\n-  if (TARGET_P9_DFORM_SCALAR && !TARGET_UPPER_REGS_SF)\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_SF)\n-\terror (\"-mpower9-dform requires -mupper-regs-sf\");\n-      rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM_SCALAR;\n-    }\n-\n   /* Enable LRA by default.  */\n   if ((rs6000_isa_flags_explicit & OPTION_MASK_LRA) == 0)\n     rs6000_isa_flags |= OPTION_MASK_LRA;\n@@ -36360,9 +36265,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"string\",\t\t\tOPTION_MASK_STRING,\t\tfalse, true  },\n   { \"toc-fusion\",\t\tOPTION_MASK_TOC_FUSION,\t\tfalse, true  },\n   { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n-  { \"upper-regs-di\",\t\tOPTION_MASK_UPPER_REGS_DI,\tfalse, true  },\n-  { \"upper-regs-df\",\t\tOPTION_MASK_UPPER_REGS_DF,\tfalse, true  },\n-  { \"upper-regs-sf\",\t\tOPTION_MASK_UPPER_REGS_SF,\tfalse, true  },\n   { \"vsx\",\t\t\tOPTION_MASK_VSX,\t\tfalse, true  },\n   { \"vsx-small-integer\",\tOPTION_MASK_VSX_SMALL_INTEGER,\tfalse, true  },\n   { \"vsx-timode\",\t\tOPTION_MASK_VSX_TIMODE,\t\tfalse, true  },"}, {"sha": "ac8a44884aa7854d7d28fef5255396a58be5af24", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -571,6 +571,14 @@ extern int rs6000_vector_align[];\n \n #define TARGET_ISEL64 (TARGET_ISEL && TARGET_POWERPC64)\n \n+/* We previously had -mupper-regs-{df,di,sf} to control whether DFmode, DImode,\n+   and/or SFmode could go in the traditional Altivec registers.  GCC 8.x deleted\n+   these options.  In order to simplify the code, define the options in terms\n+   of the base option (vsx, power8-vector).  */\n+#define TARGET_UPPER_REGS_DF\tTARGET_VSX\n+#define TARGET_UPPER_REGS_DI\tTARGET_VSX\n+#define TARGET_UPPER_REGS_SF\tTARGET_P8_VECTOR\n+\n /* ISA 2.01 allowed FCFID to be done in 32-bit, previously it was 64-bit only.\n    Enable 32-bit fcfid's on any of the switches for newer ISA machines or\n    XILINX.  */\n@@ -602,7 +610,6 @@ extern int rs6000_vector_align[];\n #define TARGET_VEXTRACTUB\t(TARGET_P9_VECTOR && TARGET_DIRECT_MOVE \\\n \t\t\t\t && TARGET_UPPER_REGS_DI && TARGET_POWERPC64)\n \n-\n /* Whether we should avoid (SUBREG:SI (REG:SF) and (SUBREG:SF (REG:SI).  */\n #define TARGET_NO_SF_SUBREG\tTARGET_DIRECT_MOVE_64BIT\n #define TARGET_ALLOW_SF_SUBREG\t(!TARGET_DIRECT_MOVE_64BIT)"}, {"sha": "9a36844ee8b6213259df29706adb42095a40dc83", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -200,9 +200,6 @@ mvsx-scalar-double\n Target Undocumented Report Var(TARGET_VSX_SCALAR_DOUBLE) Init(1)\n ; If -mvsx, use VSX arithmetic instructions for DFmode (on by default)\n \n-mvsx-scalar-memory\n-Target Undocumented Report Alias(mupper-regs-df)\n-\n mvsx-align-128\n Target Undocumented Report Var(TARGET_VSX_ALIGN_128) Save\n ; If -mvsx, set alignment to 128 bits instead of 32/64\n@@ -549,22 +546,6 @@ mcompat-align-parm\n Target Report Var(rs6000_compat_align_parm) Init(0) Save\n Generate aggregate parameter passing code with at most 64-bit alignment.\n \n-mupper-regs-df\n-Target Report Mask(UPPER_REGS_DF) Var(rs6000_isa_flags)\n-Allow double variables in upper registers with -mcpu=power7 or -mvsx.\n-\n-mupper-regs-sf\n-Target Report Mask(UPPER_REGS_SF) Var(rs6000_isa_flags)\n-Allow float variables in upper registers with -mcpu=power8 or -mpower8-vector.\n-\n-mupper-regs\n-Target Report Var(TARGET_UPPER_REGS) Init(-1) Save\n-Allow float/double variables in upper registers if cpu allows it.\n-\n-mupper-regs-di\n-Target Report Mask(UPPER_REGS_DI) Var(rs6000_isa_flags)\n-Allow 64-bit integer variables in upper registers with -mcpu=power7 or -mvsx.\n-\n moptimize-swaps\n Target Undocumented Var(rs6000_optimize_swaps) Init(1) Save\n Analyze and remove doubleword swaps from VSX computations."}, {"sha": "4926c90e7724dfcb3be04619f1c9a2998026371f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1045,9 +1045,6 @@ See RS/6000 and PowerPC Options.\n -mquad-memory  -mno-quad-memory @gol\n -mquad-memory-atomic  -mno-quad-memory-atomic @gol\n -mcompat-align-parm  -mno-compat-align-parm @gol\n--mupper-regs-df  -mno-upper-regs-df  -mupper-regs-sf  -mno-upper-regs-sf @gol\n--mupper-regs-di  -mno-upper-regs-di @gol\n--mupper-regs  -mno-upper-regs @gol\n -mfloat128  -mno-float128  -mfloat128-hardware  -mno-float128-hardware @gol\n -mgnu-attribute  -mno-gnu-attribute @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{reg} @gol\n@@ -21904,50 +21901,6 @@ Generate code that uses (does not use) the atomic quad word memory\n instructions.  The @option{-mquad-memory-atomic} option requires use of\n 64-bit mode.\n \n-@item -mupper-regs-di\n-@itemx -mno-upper-regs-di\n-@opindex mupper-regs-di\n-@opindex mno-upper-regs-di\n-Generate code that uses (does not use) the scalar instructions that\n-target all 64 registers in the vector/scalar floating point register\n-set that were added in version 2.06 of the PowerPC ISA when processing\n-integers.  @option{-mupper-regs-di} is turned on by default if you use\n-any of the @option{-mcpu=power7}, @option{-mcpu=power8},\n-@option{-mcpu=power9}, or @option{-mvsx} options.\n-\n-@item -mupper-regs-df\n-@itemx -mno-upper-regs-df\n-@opindex mupper-regs-df\n-@opindex mno-upper-regs-df\n-Generate code that uses (does not use) the scalar double precision\n-instructions that target all 64 registers in the vector/scalar\n-floating point register set that were added in version 2.06 of the\n-PowerPC ISA.  @option{-mupper-regs-df} is turned on by default if you\n-use any of the @option{-mcpu=power7}, @option{-mcpu=power8},\n-@option{-mcpu=power9}, or @option{-mvsx} options.\n-\n-@item -mupper-regs-sf\n-@itemx -mno-upper-regs-sf\n-@opindex mupper-regs-sf\n-@opindex mno-upper-regs-sf\n-Generate code that uses (does not use) the scalar single precision\n-instructions that target all 64 registers in the vector/scalar\n-floating point register set that were added in version 2.07 of the\n-PowerPC ISA.  @option{-mupper-regs-sf} is turned on by default if you\n-use either of the @option{-mcpu=power8}, @option{-mpower8-vector}, or\n-@option{-mcpu=power9} options.\n-\n-@item -mupper-regs\n-@itemx -mno-upper-regs\n-@opindex mupper-regs\n-@opindex mno-upper-regs\n-Generate code that uses (does not use) the scalar\n-instructions that target all 64 registers in the vector/scalar\n-floating point register set, depending on the model of the machine.\n-\n-If the @option{-mno-upper-regs} option is used, it turns off both\n-@option{-mupper-regs-sf} and @option{-mupper-regs-df} options.\n-\n @item -mfloat128\n @itemx -mno-float128\n @opindex mfloat128"}, {"sha": "682c525dae9452788f4534c402a3309ade7b8b3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,3 +1,38 @@\n+2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr65849-1.c: Delete, test no longer valid\n+\tsince the upper-regs options have been deleted.\n+\t* gcc.target/powerpc/pr65849-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-1.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-4.c: Likewise.\n+\t* gcc.target/powerpc/pr80099-5.c: Likewise.\n+\t* gcc.target/powerpc/builtins-2-p9-runnable.c: Update test to\n+\tsupport removal of the upper-regs options.\n+\t* gcc.target/powerpc/p8vector-fp.c: Likewise.\n+\t* gcc.target/powerpc/p8vector-ldst.c: Likewise.\n+\t* gcc.target/powerpc/p9-dimode1.c: Likewise.\n+\t* gcc.target/powerpc/p9-dimode2.c: Likewise.\n+\t* gcc.target/powerpc/ppc-fpconv-1.c: Likewise.\n+\t* gcc.target/powerpc/ppc-fpconv-10.c: Likewise.\n+\t* gcc.target/powerpc/ppc-fpconv-5.c: Likewise.\n+\t* gcc.target/powerpc/ppc-fpconv-9.c: Likewise.\n+\t* gcc.target/powerpc/ppc-round.c: Likewise.\n+\t* gcc.target/powerpc/pr71720.c: Likewise.\n+\t* gcc.target/powerpc/pr72853.c: Likewise.\n+\t* gcc.target/powerpc/pr79907.c: Likewise.\n+\t* gcc.target/powerpc/pr78953.c: Likewise.\n+\t* gcc.target/powerpc/upper-regs-df.c: Likewise.\n+\t* gcc.target/powerpc/upper-regs-sf.c: Likewise.\n+\t* gcc.target/powerpc/vec-extract-1.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-3.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-6.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-7.c: Likewise.\n+\t* gcc.target/powerpc/vec-set-char.c: Likewise.\n+\t* gcc.target/powerpc/vec-set-int.c: Likewise.\n+\t* gcc.target/powerpc/vec-set-short.c: Likewise.\n+\n 2017-07-24  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/79041"}, {"sha": "2f317077fcb26e13abaa27945888dd4281fad27f", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2-p9-runnable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { powerpc64*-*-* && { lp64 && p9vector_hw } } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n #include <altivec.h> // vector\n "}, {"sha": "7b30e4c4e23482351977b4630b40d87b448d0cd1", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-fp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-df -mupper-regs-sf -fno-math-errno\" } */\n+/* { dg-options \"-mcpu=power8 -O2 -fno-math-errno\" } */\n \n float abs_sf (float *p)\n {"}, {"sha": "e683d614d629de7f674ec4ecd0eb0d8ff9d0fdea", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-ldst.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-df -mupper-regs-sf\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n float\n load_store_sf (unsigned long num,"}, {"sha": "64f0e31fb00d4754d00b2f5d66a7bc17cca44fb8", "filename": "gcc/testsuite/gcc.target/powerpc/p9-dimode1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode1.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n /* Verify P9 changes to allow DImode into Altivec registers, and generate\n    constants using XXSPLTIB.  */\n@@ -43,8 +43,8 @@ p9_minus_1 (void)\n   return ret;\n }\n \n-/* { dg-final { scan-assembler     \"\\[ \\t\\]xxspltib\" } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]mtvsrd\"   } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]lfd\"  } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]ld\"   } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]lxsd\" } } */\n+/* { dg-final { scan-assembler     {\\mxxspltib\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrd\\M}   } } */\n+/* { dg-final { scan-assembler-not {\\mlfd\\M}      } } */\n+/* { dg-final { scan-assembler-not {\\mld\\M}       } } */\n+/* { dg-final { scan-assembler-not {\\mlxsd\\M}     } } */"}, {"sha": "9e27936d74877d60a1881d08c36badd8c204198a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-dimode2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-dimode2.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n /* Verify that large integer constants are loaded via direct move instead of being\n    loaded from memory.  */\n@@ -21,7 +21,7 @@ p9_large (void)\n   return ret;\n }\n \n-/* { dg-final { scan-assembler     \"\\[ \\t\\]mtvsrd\" } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]ld\"     } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]lfd\"    } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]lxsd\"   } } */\n+/* { dg-final { scan-assembler     {\\mmtvsrd\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mld\\M}     } } */\n+/* { dg-final { scan-assembler-not {\\mlfd\\M}    } } */\n+/* { dg-final { scan-assembler-not {\\mlxsd\\M}   } } */"}, {"sha": "de508b784c97e3ba793cdab88b779cc29a0120f5", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-1.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,15 +2,13 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-O2 -mcpu=power7 -ffast-math -mno-upper-regs-df\" } */\n-/* { dg-final { scan-assembler-times \"lfiwax\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lfiwzx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcfids \" 3 } } */\n-/* { dg-final { scan-assembler-times \"fcfidus \" 1 } } */\n-/* { dg-final { scan-assembler-times \"fcfid \" 3 } } */\n-/* { dg-final { scan-assembler-times \"fcfidu \" 1 } } */\n-/* { dg-final { scan-assembler-not \"xscvdpsxds\" } } */\n-/* { dg-final { scan-assembler-not \"xscvdpuxds\" } } */\n+/* { dg-options \"-O2 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler-times {\\mlfiwax\\M|\\mlxsiwax\\M}    2 } } */\n+/* { dg-final { scan-assembler-times {\\mlfiwzx\\M|\\mlxsiwzx\\M}    2 } } */\n+/* { dg-final { scan-assembler-times {\\mfcfids\\M|\\mxscvsxdsp\\M}  3 } } */\n+/* { dg-final { scan-assembler-times {\\mfcfidus\\M|\\mxscvuxdsp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mfcfid\\M|\\mxscvsxddp\\M}   3 } } */\n+/* { dg-final { scan-assembler-times {\\mfcfidu\\M|\\mxscvuxddp\\M}  1 } } */\n \n void int_to_float (float *dest, int *src)\n {"}, {"sha": "cb6dea41b061b67eb39f276fd67286b9f5490048", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,8 +2,8 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-O2 -mcpu=power7 -ffast-math -mno-upper-regs-df\" } */\n-/* { dg-final { scan-assembler \"friz\" } } */\n+/* { dg-options \"-O2 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler {\\mfriz\\M|\\mxsrdpiz\\M} } } */\n \n double round_double_llong (double a)\n {"}, {"sha": "6bffa164fcd89c7f394fd296964d63a0c7661759", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-5.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-5.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,13 +2,11 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-O3 -mcpu=power7 -ffast-math -mno-upper-regs-df\" } */\n-/* { dg-final { scan-assembler-times \"fctiwz \" 2 } } */\n-/* { dg-final { scan-assembler-times \"fctiwuz \" 2 } } */\n-/* { dg-final { scan-assembler-times \"fctidz \" 2 } } */\n-/* { dg-final { scan-assembler-times \"fctiduz \" 2 } } */\n-/* { dg-final { scan-assembler-not \"xscvdpsxds\" } } */\n-/* { dg-final { scan-assembler-not \"xscvdpuxds\" } } */\n+/* { dg-options \"-O3 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler-times {\\mfctiwz\\M|\\mxscvdpsxws\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mfctiwuz\\M|\\mxscvdpuxws\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mfctidz\\M|\\mxscvdpsxds\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mfctiduz\\M|\\mxscvdpuxds\\M} 2 } } */\n \n void float_to_int  (int *dest, float  src) { *dest = (int) src; }\n void double_to_int (int *dest, double src) { *dest = (int) src; }"}, {"sha": "d376936a7500aeef2460be160d18d2220b7d952f", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-9.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-9.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,12 +2,12 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-O3 -mcpu=power7 -ffast-math -mno-upper-regs-df\" } */\n-/* { dg-final { scan-assembler-times \"fctidz\" 2 } } */\n-/* { dg-final { scan-assembler-not \"lwz\" } } */\n-/* { dg-final { scan-assembler-not \"stw\" } } */\n-/* { dg-final { scan-assembler-not \"ld \" } } */\n-/* { dg-final { scan-assembler-not \"std\" } } */\n+/* { dg-options \"-O3 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler-times {\\mfctidz\\M|\\mxscvdpsxds\\M} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\mlwz\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstw\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mld\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mstd\\M} } } */\n \n void float_to_llong  (long long *dest, float  src) { *dest = (long long) src; }\n void double_to_llong (long long *dest, double src) { *dest = (long long) src; }"}, {"sha": "50ab078f55a5bb7b83e53b34e4092628797b2f64", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-round.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,15 +2,15 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-O2 -mcpu=power7 -mno-upper-regs-df\" } */\n-/* { dg-final { scan-assembler-times \"stfiwx\" 4 } } */\n-/* { dg-final { scan-assembler-times \"lfiwax\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lfiwzx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fctiwz \" 2 } } */\n-/* { dg-final { scan-assembler-times \"fctiwuz \" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcfids \" 2 } } */\n-/* { dg-final { scan-assembler-not \"lwz\" } } */\n-/* { dg-final { scan-assembler-not \"stw\" } } */\n+/* { dg-options \"-O2 -mcpu=power7\" } */\n+/* { dg-final { scan-assembler-times {\\mstfiwx\\M|\\mstxsiwx\\M}     4 } } */\n+/* { dg-final { scan-assembler-times {\\mlfiwax\\M|\\mlxsiwax\\M}     2 } } */\n+/* { dg-final { scan-assembler-times {\\mlfiwzx\\M|\\mlxsiwzx\\M}     2 } } */\n+/* { dg-final { scan-assembler-times {\\mfctiwz\\M|\\mxscvdpsxws\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mfctiwuz\\M|\\mxscvdpuxws\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mfcfids\\M|\\mxscvsxdsp\\M}   2 } } */\n+/* { dg-final { scan-assembler-not   {\\mlwz\\M}                      } } */\n+/* { dg-final { scan-assembler-not   {\\mstw\\M}                      } } */\n \n /* Make sure we don't have loads/stores to the GPR unit.  */\n double"}, {"sha": "288fdeed2cad20b33ecf857763505466e8213d81", "filename": "gcc/testsuite/gcc.target/powerpc/pr65849-1.c", "status": "removed", "additions": 0, "deletions": 728, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-1.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,728 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -O2 -mno-upper-regs-df\" } */\n-\n-/* Test whether we can enable the -mupper-regs-df with target pragmas.  Make\n-   sure double values are allocated to the Altivec registers as well as the\n-   traditional FPR registers.  */\n-\n-#ifndef TYPE\n-#define TYPE double\n-#endif\n-\n-#ifndef MASK_TYPE\n-#define MASK_TYPE unsigned long long\n-#endif\n-\n-#define MASK_ONE\t((MASK_TYPE)1)\n-#define ZERO\t\t((TYPE) 0.0)\n-\n-#pragma GCC target (\"upper-regs-df\")\n-TYPE\n-test_add (const MASK_TYPE *add_mask, const TYPE *add_values,\n-\t  const MASK_TYPE *sub_mask, const TYPE *sub_values,\n-\t  const MASK_TYPE *mul_mask, const TYPE *mul_values,\n-\t  const MASK_TYPE *div_mask, const TYPE *div_values,\n-\t  const MASK_TYPE *eq0_mask, int *eq0_ptr)\n-{\n-  TYPE value;\n-  TYPE value00\t= ZERO;\n-  TYPE value01\t= ZERO;\n-  TYPE value02\t= ZERO;\n-  TYPE value03\t= ZERO;\n-  TYPE value04\t= ZERO;\n-  TYPE value05\t= ZERO;\n-  TYPE value06\t= ZERO;\n-  TYPE value07\t= ZERO;\n-  TYPE value08\t= ZERO;\n-  TYPE value09\t= ZERO;\n-  TYPE value10\t= ZERO;\n-  TYPE value11\t= ZERO;\n-  TYPE value12\t= ZERO;\n-  TYPE value13\t= ZERO;\n-  TYPE value14\t= ZERO;\n-  TYPE value15\t= ZERO;\n-  TYPE value16\t= ZERO;\n-  TYPE value17\t= ZERO;\n-  TYPE value18\t= ZERO;\n-  TYPE value19\t= ZERO;\n-  TYPE value20\t= ZERO;\n-  TYPE value21\t= ZERO;\n-  TYPE value22\t= ZERO;\n-  TYPE value23\t= ZERO;\n-  TYPE value24\t= ZERO;\n-  TYPE value25\t= ZERO;\n-  TYPE value26\t= ZERO;\n-  TYPE value27\t= ZERO;\n-  TYPE value28\t= ZERO;\n-  TYPE value29\t= ZERO;\n-  TYPE value30\t= ZERO;\n-  TYPE value31\t= ZERO;\n-  TYPE value32\t= ZERO;\n-  TYPE value33\t= ZERO;\n-  TYPE value34\t= ZERO;\n-  TYPE value35\t= ZERO;\n-  TYPE value36\t= ZERO;\n-  TYPE value37\t= ZERO;\n-  TYPE value38\t= ZERO;\n-  TYPE value39\t= ZERO;\n-  MASK_TYPE mask;\n-  int eq0;\n-\n-  while ((mask = *add_mask++) != 0)\n-    {\n-      value = *add_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 += value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 += value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 += value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 += value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 += value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 += value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 += value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 += value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 += value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 += value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 += value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 += value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 += value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 += value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 += value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 += value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 += value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 += value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 += value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 += value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 += value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 += value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 += value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 += value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 += value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 += value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 += value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 += value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 += value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 += value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 += value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 += value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 += value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 += value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 += value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 += value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 += value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 += value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 += value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 += value;\n-    }\n-\n-  while ((mask = *sub_mask++) != 0)\n-    {\n-      value = *sub_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 -= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 -= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 -= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 -= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 -= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 -= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 -= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 -= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 -= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 -= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 -= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 -= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 -= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 -= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 -= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 -= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 -= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 -= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 -= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 -= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 -= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 -= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 -= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 -= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 -= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 -= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 -= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 -= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 -= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 -= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 -= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 -= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 -= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 -= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 -= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 -= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 -= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 -= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 -= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 -= value;\n-    }\n-\n-  while ((mask = *mul_mask++) != 0)\n-    {\n-      value = *mul_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 *= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 *= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 *= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 *= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 *= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 *= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 *= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 *= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 *= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 *= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 *= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 *= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 *= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 *= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 *= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 *= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 *= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 *= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 *= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 *= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 *= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 *= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 *= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 *= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 *= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 *= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 *= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 *= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 *= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 *= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 *= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 *= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 *= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 *= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 *= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 *= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 *= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 *= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 *= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 *= value;\n-    }\n-\n-  while ((mask = *div_mask++) != 0)\n-    {\n-      value = *div_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 /= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 /= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 /= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 /= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 /= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 /= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 /= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 /= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 /= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 /= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 /= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 /= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 /= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 /= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 /= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 /= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 /= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 /= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 /= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 /= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 /= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 /= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 /= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 /= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 /= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 /= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 /= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 /= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 /= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 /= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 /= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 /= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 /= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 /= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 /= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 /= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 /= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 /= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 /= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 /= value;\n-    }\n-\n-  while ((mask = *eq0_mask++) != 0)\n-    {\n-      eq0 = 0;\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\teq0 |= (value00 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\teq0 |= (value01 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\teq0 |= (value02 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\teq0 |= (value03 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\teq0 |= (value04 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\teq0 |= (value05 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\teq0 |= (value06 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\teq0 |= (value07 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\teq0 |= (value08 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\teq0 |= (value09 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\teq0 |= (value10 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\teq0 |= (value11 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\teq0 |= (value12 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\teq0 |= (value13 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\teq0 |= (value14 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\teq0 |= (value15 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\teq0 |= (value16 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\teq0 |= (value17 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\teq0 |= (value18 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\teq0 |= (value19 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\teq0 |= (value20 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\teq0 |= (value21 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\teq0 |= (value22 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\teq0 |= (value23 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\teq0 |= (value24 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\teq0 |= (value25 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\teq0 |= (value26 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\teq0 |= (value27 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\teq0 |= (value28 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\teq0 |= (value29 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\teq0 |= (value30 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\teq0 |= (value31 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\teq0 |= (value32 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\teq0 |= (value33 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\teq0 |= (value34 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\teq0 |= (value35 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\teq0 |= (value36 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\teq0 |= (value37 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\teq0 |= (value38 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\teq0 |= (value39 == ZERO);\n-\n-      *eq0_ptr++ = eq0;\n-    }\n-\n-  return (  value00 + value01 + value02 + value03 + value04\n-\t  + value05 + value06 + value07 + value08 + value09\n-\t  + value10 + value11 + value12 + value13 + value14\n-\t  + value15 + value16 + value17 + value18 + value19\n-\t  + value20 + value21 + value22 + value23 + value24\n-\t  + value25 + value26 + value27 + value28 + value29\n-\t  + value30 + value31 + value32 + value33 + value34\n-\t  + value35 + value36 + value37 + value38 + value39);\n-}\n-\n-/* { dg-final { scan-assembler \"fadd\"     } } */\n-/* { dg-final { scan-assembler \"fsub\"     } } */\n-/* { dg-final { scan-assembler \"fmul\"     } } */\n-/* { dg-final { scan-assembler \"fdiv\"     } } */\n-/* { dg-final { scan-assembler \"fcmpu\"    } } */\n-/* { dg-final { scan-assembler \"xsadddp\"  } } */\n-/* { dg-final { scan-assembler \"xssubdp\"  } } */\n-/* { dg-final { scan-assembler \"xsmuldp\"  } } */\n-/* { dg-final { scan-assembler \"xsdivdp\"  } } */\n-/* { dg-final { scan-assembler \"xscmpudp\" } } */"}, {"sha": "0af6a4a51c7c7ff10d1947cdfa99218e056ba002", "filename": "gcc/testsuite/gcc.target/powerpc/pr65849-2.c", "status": "removed", "additions": 0, "deletions": 728, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65849-2.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,728 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n-\n-/* Test whether we can enable the -mupper-regs-sf with target pragmas.  Make\n-   sure float values are allocated to the Altivec registers as well as the\n-   traditional FPR registers.  */\n-\n-#ifndef TYPE\n-#define TYPE float\n-#endif\n-\n-#ifndef MASK_TYPE\n-#define MASK_TYPE unsigned long long\n-#endif\n-\n-#define MASK_ONE\t((MASK_TYPE)1)\n-#define ZERO\t\t((TYPE) 0.0)\n-\n-#pragma GCC target (\"upper-regs-sf\")\n-TYPE\n-test_add (const MASK_TYPE *add_mask, const TYPE *add_values,\n-\t  const MASK_TYPE *sub_mask, const TYPE *sub_values,\n-\t  const MASK_TYPE *mul_mask, const TYPE *mul_values,\n-\t  const MASK_TYPE *div_mask, const TYPE *div_values,\n-\t  const MASK_TYPE *eq0_mask, int *eq0_ptr)\n-{\n-  TYPE value;\n-  TYPE value00\t= ZERO;\n-  TYPE value01\t= ZERO;\n-  TYPE value02\t= ZERO;\n-  TYPE value03\t= ZERO;\n-  TYPE value04\t= ZERO;\n-  TYPE value05\t= ZERO;\n-  TYPE value06\t= ZERO;\n-  TYPE value07\t= ZERO;\n-  TYPE value08\t= ZERO;\n-  TYPE value09\t= ZERO;\n-  TYPE value10\t= ZERO;\n-  TYPE value11\t= ZERO;\n-  TYPE value12\t= ZERO;\n-  TYPE value13\t= ZERO;\n-  TYPE value14\t= ZERO;\n-  TYPE value15\t= ZERO;\n-  TYPE value16\t= ZERO;\n-  TYPE value17\t= ZERO;\n-  TYPE value18\t= ZERO;\n-  TYPE value19\t= ZERO;\n-  TYPE value20\t= ZERO;\n-  TYPE value21\t= ZERO;\n-  TYPE value22\t= ZERO;\n-  TYPE value23\t= ZERO;\n-  TYPE value24\t= ZERO;\n-  TYPE value25\t= ZERO;\n-  TYPE value26\t= ZERO;\n-  TYPE value27\t= ZERO;\n-  TYPE value28\t= ZERO;\n-  TYPE value29\t= ZERO;\n-  TYPE value30\t= ZERO;\n-  TYPE value31\t= ZERO;\n-  TYPE value32\t= ZERO;\n-  TYPE value33\t= ZERO;\n-  TYPE value34\t= ZERO;\n-  TYPE value35\t= ZERO;\n-  TYPE value36\t= ZERO;\n-  TYPE value37\t= ZERO;\n-  TYPE value38\t= ZERO;\n-  TYPE value39\t= ZERO;\n-  MASK_TYPE mask;\n-  int eq0;\n-\n-  while ((mask = *add_mask++) != 0)\n-    {\n-      value = *add_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 += value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 += value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 += value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 += value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 += value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 += value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 += value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 += value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 += value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 += value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 += value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 += value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 += value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 += value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 += value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 += value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 += value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 += value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 += value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 += value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 += value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 += value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 += value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 += value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 += value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 += value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 += value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 += value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 += value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 += value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 += value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 += value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 += value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 += value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 += value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 += value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 += value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 += value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 += value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 += value;\n-    }\n-\n-  while ((mask = *sub_mask++) != 0)\n-    {\n-      value = *sub_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 -= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 -= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 -= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 -= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 -= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 -= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 -= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 -= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 -= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 -= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 -= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 -= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 -= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 -= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 -= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 -= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 -= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 -= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 -= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 -= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 -= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 -= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 -= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 -= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 -= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 -= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 -= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 -= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 -= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 -= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 -= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 -= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 -= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 -= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 -= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 -= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 -= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 -= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 -= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 -= value;\n-    }\n-\n-  while ((mask = *mul_mask++) != 0)\n-    {\n-      value = *mul_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 *= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 *= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 *= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 *= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 *= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 *= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 *= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 *= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 *= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 *= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 *= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 *= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 *= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 *= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 *= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 *= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 *= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 *= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 *= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 *= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 *= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 *= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 *= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 *= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 *= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 *= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 *= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 *= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 *= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 *= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 *= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 *= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 *= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 *= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 *= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 *= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 *= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 *= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 *= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 *= value;\n-    }\n-\n-  while ((mask = *div_mask++) != 0)\n-    {\n-      value = *div_values++;\n-\n-      __asm__ (\" #reg %0\" : \"+d\" (value));\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\tvalue00 /= value;\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\tvalue01 /= value;\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\tvalue02 /= value;\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\tvalue03 /= value;\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\tvalue04 /= value;\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\tvalue05 /= value;\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\tvalue06 /= value;\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\tvalue07 /= value;\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\tvalue08 /= value;\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\tvalue09 /= value;\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\tvalue10 /= value;\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\tvalue11 /= value;\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\tvalue12 /= value;\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\tvalue13 /= value;\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\tvalue14 /= value;\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\tvalue15 /= value;\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\tvalue16 /= value;\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\tvalue17 /= value;\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\tvalue18 /= value;\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\tvalue19 /= value;\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\tvalue20 /= value;\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\tvalue21 /= value;\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\tvalue22 /= value;\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\tvalue23 /= value;\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\tvalue24 /= value;\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\tvalue25 /= value;\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\tvalue26 /= value;\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\tvalue27 /= value;\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\tvalue28 /= value;\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\tvalue29 /= value;\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\tvalue30 /= value;\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\tvalue31 /= value;\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\tvalue32 /= value;\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\tvalue33 /= value;\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\tvalue34 /= value;\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\tvalue35 /= value;\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\tvalue36 /= value;\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\tvalue37 /= value;\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\tvalue38 /= value;\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\tvalue39 /= value;\n-    }\n-\n-  while ((mask = *eq0_mask++) != 0)\n-    {\n-      eq0 = 0;\n-\n-      if ((mask & (MASK_ONE <<  0)) != 0)\n-\teq0 |= (value00 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  1)) != 0)\n-\teq0 |= (value01 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  2)) != 0)\n-\teq0 |= (value02 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  3)) != 0)\n-\teq0 |= (value03 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  4)) != 0)\n-\teq0 |= (value04 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  5)) != 0)\n-\teq0 |= (value05 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  6)) != 0)\n-\teq0 |= (value06 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  7)) != 0)\n-\teq0 |= (value07 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  8)) != 0)\n-\teq0 |= (value08 == ZERO);\n-\n-      if ((mask & (MASK_ONE <<  9)) != 0)\n-\teq0 |= (value09 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 10)) != 0)\n-\teq0 |= (value10 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 11)) != 0)\n-\teq0 |= (value11 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 12)) != 0)\n-\teq0 |= (value12 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 13)) != 0)\n-\teq0 |= (value13 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 14)) != 0)\n-\teq0 |= (value14 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 15)) != 0)\n-\teq0 |= (value15 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 16)) != 0)\n-\teq0 |= (value16 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 17)) != 0)\n-\teq0 |= (value17 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 18)) != 0)\n-\teq0 |= (value18 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 19)) != 0)\n-\teq0 |= (value19 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 20)) != 0)\n-\teq0 |= (value20 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 21)) != 0)\n-\teq0 |= (value21 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 22)) != 0)\n-\teq0 |= (value22 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 23)) != 0)\n-\teq0 |= (value23 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 24)) != 0)\n-\teq0 |= (value24 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 25)) != 0)\n-\teq0 |= (value25 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 26)) != 0)\n-\teq0 |= (value26 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 27)) != 0)\n-\teq0 |= (value27 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 28)) != 0)\n-\teq0 |= (value28 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 29)) != 0)\n-\teq0 |= (value29 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 30)) != 0)\n-\teq0 |= (value30 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 31)) != 0)\n-\teq0 |= (value31 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 32)) != 0)\n-\teq0 |= (value32 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 33)) != 0)\n-\teq0 |= (value33 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 34)) != 0)\n-\teq0 |= (value34 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 35)) != 0)\n-\teq0 |= (value35 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 36)) != 0)\n-\teq0 |= (value36 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 37)) != 0)\n-\teq0 |= (value37 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 38)) != 0)\n-\teq0 |= (value38 == ZERO);\n-\n-      if ((mask & (MASK_ONE << 39)) != 0)\n-\teq0 |= (value39 == ZERO);\n-\n-      *eq0_ptr++ = eq0;\n-    }\n-\n-  return (  value00 + value01 + value02 + value03 + value04\n-\t  + value05 + value06 + value07 + value08 + value09\n-\t  + value10 + value11 + value12 + value13 + value14\n-\t  + value15 + value16 + value17 + value18 + value19\n-\t  + value20 + value21 + value22 + value23 + value24\n-\t  + value25 + value26 + value27 + value28 + value29\n-\t  + value30 + value31 + value32 + value33 + value34\n-\t  + value35 + value36 + value37 + value38 + value39);\n-}\n-\n-/* { dg-final { scan-assembler \"fadds\"     } } */\n-/* { dg-final { scan-assembler \"fsubs\"     } } */\n-/* { dg-final { scan-assembler \"fmuls\"     } } */\n-/* { dg-final { scan-assembler \"fdivs\"     } } */\n-/* { dg-final { scan-assembler \"fcmpu\"    } } */\n-/* { dg-final { scan-assembler \"xsaddsp\"  } } */\n-/* { dg-final { scan-assembler \"xssubsp\"  } } */\n-/* { dg-final { scan-assembler \"xsmulsp\"  } } */\n-/* { dg-final { scan-assembler \"xsdivsp\"  } } */\n-/* { dg-final { scan-assembler \"xscmpudp\" } } */"}, {"sha": "732daf97595f3c94c78fdb06d450d6216b39e8e7", "filename": "gcc/testsuite/gcc.target/powerpc/pr71720.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71720.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71720.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71720.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n /* Verify that we generate xxspltw <reg>,<reg>,0 for V4SFmode splat.  */\n "}, {"sha": "9dc1bd2344c341fb1dc4f7a6eee6bd9a9fc8c55c", "filename": "gcc/testsuite/gcc.target/powerpc/pr72853.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O3 -mupper-regs-df -mupper-regs-sf -funroll-loops\" } */\n+/* { dg-options \"-mcpu=power9 -O3 -funroll-loops\" } */\n \n /* derived from 20021120-1.c, compiled for -mcpu=power9.  */\n "}, {"sha": "fd26f07349976ed8374876e58fed04a8b46145b5", "filename": "gcc/testsuite/gcc.target/powerpc/pr78953.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78953.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n #include <altivec.h>\n \n@@ -16,4 +16,4 @@ foo (vector int *vp, int *ip)\n   ip[4] = vec_extract (v, 0);\n }\n \n-/* { dg-final { scan-assembler \"xxextractuw\\|vextuw\\[lr\\]x\" } } */\n+/* { dg-final { scan-assembler {\\mxxextractuw\\M|\\mvextuw[lr]x\\M} } } */"}, {"sha": "240a1f467136bb7ca2ac51e8f2f3a60752ade180", "filename": "gcc/testsuite/gcc.target/powerpc/pr79907.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79907.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O3 -mno-upper-regs-df\" } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n \n int foo (short a[], int x)\n {"}, {"sha": "9f34c5fbef8a58721adcf87f177790934a501d9e", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-1.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-1.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n-\n-/* PR target/80099: compiler internal error if -mno-upper-regs-sf used.  */\n-\n-int a;\n-int int_from_mem (vector float *c)\n-{\n-  return __builtin_vec_extract (*c, a);\n-}"}, {"sha": "5800db6321208de75fe3fd40ddf1d98d067e27d0", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-2.c", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-2.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,128 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-sf\" } */\n-\n-/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n-   extract types with various -mno-upper-regs-* options.  */\n-\n-double\n-d_extract_arg_n (vector double v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-float\n-f_extract_arg_n (vector float v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sl_extract_arg_n (vector long v, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ul_extract_arg_n (vector unsigned long v, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-si_extract_arg_n (vector int v, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ui_extract_arg_n (vector unsigned int v, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-ss_extract_arg_n (vector short v, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-us_extract_arg_n (vector unsigned short v, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sc_extract_arg_n (vector signed char v, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-uc_extract_arg_n (vector unsigned char v, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (v, n);\n-}\n-\n-\f\n-double\n-d_extract_mem_n (vector double *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-float\n-f_extract_mem_n (vector float *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sl_extract_mem_n (vector long *p, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-si_extract_mem_n (vector int *p, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-ss_extract_mem_n (vector short *p, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-us_extract_mem_n (vector unsigned short *p, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sc_extract_mem_n (vector signed char *p, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (*p, n);\n-}"}, {"sha": "71c2b40b0d138cfc5f2b3418799d60bc36a2ae2d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-3.c", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-3.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,128 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-df\" } */\n-\n-/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n-   extract types with various -mno-upper-regs-* options.  */\n-\n-double\n-d_extract_arg_n (vector double v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-float\n-f_extract_arg_n (vector float v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sl_extract_arg_n (vector long v, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ul_extract_arg_n (vector unsigned long v, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-si_extract_arg_n (vector int v, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ui_extract_arg_n (vector unsigned int v, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-ss_extract_arg_n (vector short v, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-us_extract_arg_n (vector unsigned short v, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sc_extract_arg_n (vector signed char v, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-uc_extract_arg_n (vector unsigned char v, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (v, n);\n-}\n-\n-\f\n-double\n-d_extract_mem_n (vector double *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-float\n-f_extract_mem_n (vector float *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sl_extract_mem_n (vector long *p, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-si_extract_mem_n (vector int *p, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-ss_extract_mem_n (vector short *p, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-us_extract_mem_n (vector unsigned short *p, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sc_extract_mem_n (vector signed char *p, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (*p, n);\n-}"}, {"sha": "145dd1724afb09d6edafb956498f6e1923910171", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-4.c", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-4.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,128 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs-di\" } */\n-\n-/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n-   extract types with various -mno-upper-regs-* options.  */\n-\n-double\n-d_extract_arg_n (vector double v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-float\n-f_extract_arg_n (vector float v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sl_extract_arg_n (vector long v, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ul_extract_arg_n (vector unsigned long v, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-si_extract_arg_n (vector int v, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ui_extract_arg_n (vector unsigned int v, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-ss_extract_arg_n (vector short v, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-us_extract_arg_n (vector unsigned short v, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sc_extract_arg_n (vector signed char v, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-uc_extract_arg_n (vector unsigned char v, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (v, n);\n-}\n-\n-\f\n-double\n-d_extract_mem_n (vector double *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-float\n-f_extract_mem_n (vector float *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sl_extract_mem_n (vector long *p, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-si_extract_mem_n (vector int *p, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-ss_extract_mem_n (vector short *p, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-us_extract_mem_n (vector unsigned short *p, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sc_extract_mem_n (vector signed char *p, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (*p, n);\n-}"}, {"sha": "9ebc0fe466dadb2f72b5c710f3e8a5fcbed16063", "filename": "gcc/testsuite/gcc.target/powerpc/pr80099-5.c", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0281547a1d9637f60f93b361bce0b548df120962/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80099-5.c?ref=0281547a1d9637f60f93b361bce0b548df120962", "patch": "@@ -1,128 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mno-upper-regs\" } */\n-\n-/* PR target/80099 was an issue with -mno-upper-regs-sf.  Test for all variable\n-   extract types with various -mno-upper-regs-* options.  */\n-\n-double\n-d_extract_arg_n (vector double v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-float\n-f_extract_arg_n (vector float v, unsigned long n)\n-{\n-  return __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sl_extract_arg_n (vector long v, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ul_extract_arg_n (vector unsigned long v, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-si_extract_arg_n (vector int v, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-ui_extract_arg_n (vector unsigned int v, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-ss_extract_arg_n (vector short v, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-us_extract_arg_n (vector unsigned short v, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (v, n);\n-}\n-\n-long\n-sc_extract_arg_n (vector signed char v, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (v, n);\n-}\n-\n-unsigned long\n-uc_extract_arg_n (vector unsigned char v, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (v, n);\n-}\n-\n-\f\n-double\n-d_extract_mem_n (vector double *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-float\n-f_extract_mem_n (vector float *p, unsigned long n)\n-{\n-  return __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sl_extract_mem_n (vector long *p, unsigned long n)\n-{\n-  return (long) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ul_extract_mem_n (vector unsigned long *p, unsigned long n)\n-{\n-  return (unsigned long) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-si_extract_mem_n (vector int *p, unsigned long n)\n-{\n-  return (int) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-ui_extract_mem_n (vector unsigned int *p, unsigned long n)\n-{\n-  return (unsigned int) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-ss_extract_mem_n (vector short *p, unsigned long n)\n-{\n-  return (short) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-us_extract_mem_n (vector unsigned short *p, unsigned long n)\n-{\n-  return (unsigned short) __builtin_vec_extract (*p, n);\n-}\n-\n-long\n-sc_extract_mem_n (vector signed char *p, unsigned long n)\n-{\n-  return (signed char) __builtin_vec_extract (*p, n);\n-}\n-\n-unsigned long\n-uc_extract_mem_n (vector unsigned char *p, unsigned long n)\n-{\n-  return (unsigned char) __builtin_vec_extract (*p, n);\n-}"}, {"sha": "0df579797ad22e74e6d8566c117230e303590f82", "filename": "gcc/testsuite/gcc.target/powerpc/upper-regs-df.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-df.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,10 +2,10 @@\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power7 -O2 -mupper-regs-df\" } */\n+/* { dg-options \"-mcpu=power7 -O2\" } */\n \n-/* Test for the -mupper-regs-df option to make sure double values are allocated\n-   to the Altivec registers as well as the traditional FPR registers.  */\n+/* Test to make sure double values are allocated to the Altivec registers as\n+   well as the traditional FPR registers.  */\n \n #ifndef TYPE\n #define TYPE double"}, {"sha": "fd29fb5fd6ea24301d575bf522487678b2f4278e", "filename": "gcc/testsuite/gcc.target/powerpc/upper-regs-sf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fupper-regs-sf.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,10 +2,10 @@\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-df -mupper-regs-sf\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n-/* Test for the -mupper-regs-df option to make sure double values are allocated\n-   to the Altivec registers as well as the traditional FPR registers.  */\n+/* Test make sure single precision values are allocated to the Altivec\n+   registers as well as the traditional FPR registers.  */\n \n #ifndef TYPE\n #define TYPE float"}, {"sha": "9c8e6f3a6846242d427d2cf2967c84f7d620e5c7", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-1.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-df -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n #include <altivec.h>\n "}, {"sha": "f4a536a2ea99819dba6986e1be56119385a2ad62", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n vector long\n merge (long a, long b)"}, {"sha": "8d610e158cc24464a080cc10ea1f0fc2ee4e113f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n vector int\n merge (int a, int b, int c, int d)"}, {"sha": "c44fa9b2a3d2b8402145121bc2a611df2a25206c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-di\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n vector int\n splat (int a)"}, {"sha": "5df260ded29c49725c67ed5311fc4bdb9bd66d5c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-set-char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-char.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n vector char\n insert_0_0 (vector char v)"}, {"sha": "deaa6acfa6ebaebb14e6fbd5109b669f346b810e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-set-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-int.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n vector int\n insert_0_0 (vector int v)"}, {"sha": "eabcf3488de8a286dccdc8ce31449bae053b031c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-set-short.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1993098939aa6033abb75961127c25e316864501/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-set-short.c?ref=1993098939aa6033abb75961127c25e316864501", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n vector short\n insert_0_0 (vector short v)"}]}