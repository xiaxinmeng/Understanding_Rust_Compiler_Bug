{"sha": "801b4022e11b50c4124b489ccc621332b2d92946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxYjQwMjJlMTFiNTBjNDEyNGI0ODljY2M2MjEzMzJiMmQ5Mjk0Ng==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-22T13:25:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:25:22Z"}, "message": "[Ada] Ada2020: Reduction expressions\n\nThis patch dismantles the prototype implementation of the first proposal\nfor Reduction expressions, one of the important potentially parallel\nconstructs for Ada2020. The ARG is going in a different direction with\na simpler syntax.\n\n2018-05-22  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.ads, exp_ch4.adb, exp_util.adb, expander.adb: Remove mention\n\tof N_Reduction_Expression and N_Reduction_Expression_Parameter.\n\t* par-ch4.adb: Remove parsing routines for reduction expressions.\n\t* sem.adb, sinfo.ads, sinfo.adb, sem_ch4.ads, sem_ch4.adb, sem_res.adb,\n\tsem_spark.adb, sprint.adb: Remove analysis routines for reduction\n\texpressions.\n\nFrom-SVN: r260524", "tree": {"sha": "4f2c12ed748b28bddeeadaefb7cccf0baafd8660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2c12ed748b28bddeeadaefb7cccf0baafd8660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/801b4022e11b50c4124b489ccc621332b2d92946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801b4022e11b50c4124b489ccc621332b2d92946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801b4022e11b50c4124b489ccc621332b2d92946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801b4022e11b50c4124b489ccc621332b2d92946/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "208ebca928f079408cea3562a0006bc1bb8092fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208ebca928f079408cea3562a0006bc1bb8092fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208ebca928f079408cea3562a0006bc1bb8092fa"}], "stats": {"total": 527, "additions": 36, "deletions": 491}, "files": [{"sha": "aa3a1c034b771b5423f9096a8191f54a08d4fbe6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -1,3 +1,12 @@\n+2018-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.ads, exp_ch4.adb, exp_util.adb, expander.adb: Remove mention\n+\tof N_Reduction_Expression and N_Reduction_Expression_Parameter.\n+\t* par-ch4.adb: Remove parsing routines for reduction expressions.\n+\t* sem.adb, sinfo.ads, sinfo.adb, sem_ch4.ads, sem_ch4.adb, sem_res.adb,\n+\tsem_spark.adb, sprint.adb: Remove analysis routines for reduction\n+\texpressions.\n+\n 2018-05-22  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch8.adb (Check_Frozen_Renaming): Do not emit error in"}, {"sha": "b903719bcdded4c5c1a095313f467fdafec78ea0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -10077,77 +10077,6 @@ package body Exp_Ch4 is\n       Analyze_And_Resolve (N, Standard_Boolean);\n    end Expand_N_Quantified_Expression;\n \n-   -----------------------------------\n-   -- Expand_N_Reduction_Expression --\n-   -----------------------------------\n-\n-   procedure Expand_N_Reduction_Expression (N : Node_Id) is\n-      Actions   : constant List_Id    := New_List;\n-      Expr      : constant Node_Id    := Expression (N);\n-      Iter_Spec : constant Node_Id    := Iterator_Specification (N);\n-      Loc       : constant Source_Ptr := Sloc (N);\n-      Loop_Spec : constant Node_Id    := Loop_Parameter_Specification (N);\n-      Typ       : constant Entity_Id  := Etype (N);\n-\n-      Actual        : Node_Id;\n-      New_Call      : Node_Id;\n-      Reduction_Par : Node_Id;\n-      Result        : Entity_Id;\n-      Scheme        : Node_Id;\n-\n-   begin\n-      Result   := Make_Temporary (Loc, 'R', N);\n-      New_Call := New_Copy_Tree (Expr);\n-\n-      if Nkind (New_Call) = N_Function_Call then\n-         Actual := First (Parameter_Associations (New_Call));\n-\n-         if Nkind (Actual) /= N_Reduction_Expression_Parameter then\n-            Actual := Next_Actual (Actual);\n-         end if;\n-\n-      elsif Nkind (New_Call) in N_Binary_Op then\n-         Actual := Left_Opnd (New_Call);\n-\n-         if Nkind (Actual) /= N_Reduction_Expression_Parameter then\n-            Actual := Right_Opnd (New_Call);\n-         end if;\n-      end if;\n-\n-      Reduction_Par := Expression (Actual);\n-\n-      Append_To (Actions,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Result,\n-          Object_Definition   => New_Occurrence_Of (Typ, Loc),\n-          Expression          => New_Copy_Tree (Reduction_Par)));\n-\n-      if Present (Iter_Spec) then\n-         Scheme :=\n-           Make_Iteration_Scheme (Loc,\n-             Iterator_Specification => Iter_Spec);\n-      else\n-         Scheme :=\n-           Make_Iteration_Scheme (Loc,\n-             Loop_Parameter_Specification => Loop_Spec);\n-      end if;\n-\n-      Replace (Actual, New_Occurrence_Of (Result, Loc));\n-\n-      Append_To (Actions,\n-        Make_Loop_Statement (Loc,\n-          Iteration_Scheme => Scheme,\n-          Statements       => New_List (Make_Assignment_Statement (Loc,\n-            New_Occurrence_Of (Result, Loc), New_Call)),\n-          End_Label        => Empty));\n-\n-      Rewrite (N,\n-        Make_Expression_With_Actions (Loc,\n-          Expression => New_Occurrence_Of (Result, Loc),\n-          Actions    => Actions));\n-      Analyze_And_Resolve (N, Typ);\n-   end Expand_N_Reduction_Expression;\n-\n    ---------------------------------\n    -- Expand_N_Selected_Component --\n    ---------------------------------"}, {"sha": "0f2ec85cc5289df94a7bf54bb0f010a2326f7914", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -68,7 +68,6 @@ package Exp_Ch4 is\n    procedure Expand_N_Or_Else                     (N : Node_Id);\n    procedure Expand_N_Qualified_Expression        (N : Node_Id);\n    procedure Expand_N_Quantified_Expression       (N : Node_Id);\n-   procedure Expand_N_Reduction_Expression        (N : Node_Id);\n    procedure Expand_N_Selected_Component          (N : Node_Id);\n    procedure Expand_N_Slice                       (N : Node_Id);\n    procedure Expand_N_Type_Conversion             (N : Node_Id);"}, {"sha": "610ba9a517aebe84e401c7ca0100aa654306a8fc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -7349,8 +7349,6 @@ package body Exp_Util is\n                | N_Real_Literal\n                | N_Real_Range_Specification\n                | N_Record_Definition\n-               | N_Reduction_Expression\n-               | N_Reduction_Expression_Parameter\n                | N_Reference\n                | N_SCIL_Dispatch_Table_Tag_Init\n                | N_SCIL_Dispatching_Call"}, {"sha": "e26daf5b6166e8680baf1bd20fe1f796fc86bda2", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -435,9 +435,6 @@ package body Expander is\n                when N_Record_Representation_Clause =>\n                   Expand_N_Record_Representation_Clause (N);\n \n-               when N_Reduction_Expression =>\n-                  Expand_N_Reduction_Expression (N);\n-\n                when N_Requeue_Statement =>\n                   Expand_N_Requeue_Statement (N);\n "}, {"sha": "d0b46740ada8c3f0836dd2902a93633fe7949044", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 23, "deletions": 231, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -75,8 +75,7 @@ package body Ch4 is\n    function P_Aggregate_Or_Paren_Expr                 return Node_Id;\n    function P_Allocator                               return Node_Id;\n    function P_Case_Expression_Alternative             return Node_Id;\n-   function P_Iterated_Component_Assoc_Or_Reduction   return Node_Id;\n-   function P_Reduction_Expression (Lparen : Boolean) return Node_Id;\n+   function P_Iterated_Component_Association          return Node_Id;\n    function P_Record_Or_Array_Component_Association   return Node_Id;\n    function P_Factor                                  return Node_Id;\n    function P_Primary                                 return Node_Id;\n@@ -645,9 +644,6 @@ package body Ch4 is\n          --      case of a name which can be extended in the normal manner.\n          --      This case is handled by LP_State_Name or LP_State_Expr.\n \n-         --      (Ada 2020): the expression can be a reduction_expression_\n-         --      parameter, i.e. a box or < Simple_Expression >.\n-\n          --      Note: if and case expressions (without an extra level of\n          --      parentheses) are permitted in this context).\n \n@@ -656,10 +652,6 @@ package body Ch4 is\n          --      If there is at least one occurrence of identifier => (but\n          --      none of the other cases apply), then we have a call.\n \n-         --    < simple_expression >\n-         --    In Ada 2020 this is a reduction expression parameter that\n-         --    specifies the initial value of the reduction.\n-\n          --  Test for Id => case\n \n          if Token = Tok_Identifier then\n@@ -678,27 +670,9 @@ package body Ch4 is\n             end if;\n          end if;\n \n-         --  Here we have an expression after all, which may be a reduction\n-         --  expression with a binary operator.\n+         --  Here we have an expression after all\n \n-         if Token = Tok_Less then\n-            Scan; -- past <\n-\n-            Expr_Node :=\n-              New_Node (N_Reduction_Expression_Parameter, Token_Ptr);\n-            Set_Expression (Expr_Node, P_Simple_Expression);\n-\n-            if Token = Tok_Greater then\n-               Scan;\n-            else\n-               Error_Msg_N\n-                 (\"malformed reduction expression parameter\", Expr_Node);\n-               raise Error_Resync;\n-            end if;\n-\n-         else\n-            Expr_Node := P_Expression_Or_Range_Attribute_If_OK;\n-         end if;\n+         Expr_Node := P_Expression_Or_Range_Attribute_If_OK;\n \n          --  Check cases of discrete range for a slice\n \n@@ -1425,13 +1399,8 @@ package body Ch4 is\n \n          elsif Token = Tok_For then\n             Aggregate_Node := New_Node (N_Aggregate, Lparen_Sloc);\n-            Expr_Node := P_Iterated_Component_Assoc_Or_Reduction;\n-\n-            if Nkind (Expr_Node) = N_Reduction_Expression then\n-               return Expr_Node;\n-            else\n-               goto Aggregate;\n-            end if;\n+            Expr_Node := P_Iterated_Component_Association;\n+            goto Aggregate;\n          end if;\n \n          --  Scan expression, handling box appearing as positional argument\n@@ -1463,14 +1432,6 @@ package body Ch4 is\n                Set_Expression (Aggregate_Node, Expr_Node);\n                Expr_Node := Empty;\n \n-               if Nkind (Aggregate_Node) = N_Delta_Aggregate\n-                 and then (Token = Tok_Arrow or else Token = Tok_Others)\n-               then\n-                  Error_Msg_SC\n-                    (\"expect record component association in delta aggregate\");\n-                  raise Error_Resync;\n-               end if;\n-\n                goto Aggregate;\n \n             else\n@@ -1653,7 +1614,7 @@ package body Ch4 is\n             Expr_Node := Empty;\n \n          elsif Token = Tok_For then\n-            Expr_Node := P_Iterated_Component_Assoc_Or_Reduction;\n+            Expr_Node := P_Iterated_Component_Association;\n \n          else\n             Save_Scan_State (Scan_State); -- at start of expression\n@@ -1705,8 +1666,10 @@ package body Ch4 is\n       Assoc_Node : Node_Id;\n \n    begin\n+      --  A loop indicates an iterated_component_association\n+\n       if Token = Tok_For then\n-         return P_Iterated_Component_Assoc_Or_Reduction;\n+         return P_Iterated_Component_Association;\n       end if;\n \n       Assoc_Node := New_Node (N_Component_Association, Token_Ptr);\n@@ -2867,7 +2830,7 @@ package body Ch4 is\n                      end if;\n                   else\n                      Restore_Scan_State (Scan_State);  -- To FOR\n-                     Node1 := P_Iterated_Component_Assoc_Or_Reduction;\n+                     Node1 := P_Iterated_Component_Association;\n                   end if;\n \n                   return Node1;\n@@ -2894,18 +2857,6 @@ package body Ch4 is\n                Node1 := P_Name;\n                return Node1;\n \n-            --  Ada 2020: reduction expression parameter\n-\n-            when Tok_Less =>\n-               Scan; -- past <\n-\n-               Node1 :=\n-                 New_Node (N_Reduction_Expression_Parameter, Token_Ptr);\n-               Set_Expression (Node1, P_Simple_Expression);\n-\n-               Scan; -- past >\n-               return Node1;\n-\n             --  Anything else is illegal as the first token of a primary, but\n             --  we test for some common errors, to improve error messages.\n \n@@ -3350,195 +3301,36 @@ package body Ch4 is\n       return Case_Alt_Node;\n    end P_Case_Expression_Alternative;\n \n-   ---------------------------------------------\n-   -- P_Iterated_Component_Assoc_Or_Reduction --\n-   ---------------------------------------------\n+   --------------------------------------\n+   -- P_Iterated_Component_Association --\n+   --------------------------------------\n \n    --  ITERATED_COMPONENT_ASSOCIATION ::=\n    --    for DEFINING_IDENTIFIER in DISCRETE_CHOICE_LIST => EXPRESSION\n \n-   function P_Iterated_Component_Assoc_Or_Reduction return Node_Id is\n-      Expr : Node_Id;\n-\n-      function OK_Reduction_Expression_Parameter (L : List_Id) return Boolean;\n-      --  Check that if a reduction_expression_Parameter appears, it is a\n-      --  single one.\n-\n-      ---------------------------------------\n-      -- OK_Reduction_Expression_Parameter --\n-      ---------------------------------------\n-\n-      function OK_Reduction_Expression_Parameter\n-        (L : List_Id) return Boolean\n-      is\n-         Actual : Node_Id;\n-         Num    : Int := 0;\n-         Seen   : Boolean;\n-\n-      begin\n-         Seen := False;\n-         Actual := First (L);\n-         while Present (Actual) loop\n-            if Nkind (Actual) = N_Reduction_Expression_Parameter then\n-               if Seen then\n-                  Error_Msg_N (\"only one reduction parameter allowed\", Expr);\n-               else\n-                  Seen := True;\n-               end if;\n-            end if;\n-\n-            Num := Num + 1;\n-            Next (Actual);\n-         end loop;\n-\n-         if Seen and then Num > 2 then\n-            Error_Msg_N (\"too many parameters in reduction function\", Expr);\n-         end if;\n-\n-         return Seen;\n-      end OK_Reduction_Expression_Parameter;\n-\n-      --  Local variables\n-\n-      Lparen     : constant Boolean := Prev_Token = Tok_Left_Paren;\n+   function P_Iterated_Component_Association return Node_Id is\n       Assoc_Node : Node_Id;\n-      State      : Saved_Scan_State;\n \n-   --  Start of processing for P_Iterated_Component_Assoc_Or_Reduction\n+   --  Start of processing for P_Iterated_Component_Association\n \n    begin\n       Scan;  --  past FOR\n       Assoc_Node :=\n         New_Node (N_Iterated_Component_Association, Prev_Token_Ptr);\n \n-      Save_Scan_State (State);\n       Set_Defining_Identifier (Assoc_Node, P_Defining_Identifier);\n-\n-      if Token = Tok_In then\n-         Scan; --  past in\n-\n-         Set_Discrete_Choices (Assoc_Node, P_Discrete_Choice_List);\n-         TF_Arrow;\n-\n-         if Token = Tok_Less then\n-            Restore_Scan_State (State);\n-            return P_Reduction_Expression (Lparen);\n-         else\n-            Expr := P_Expression;\n-         end if;\n-\n-         if Nkind (Expr) = N_Function_Call\n-           and then OK_Reduction_Expression_Parameter\n-                      (Parameter_Associations (Expr))\n-         then\n-            Restore_Scan_State (State);\n-            return P_Reduction_Expression (Lparen);\n-\n-         elsif Nkind (Expr) in N_Op\n-           and then\n-             Nkind (Right_Opnd (Expr)) = N_Reduction_Expression_Parameter\n-         then\n-            return P_Reduction_Expression (Lparen);\n-\n-         elsif Nkind (Expr) in N_Binary_Op\n-           and then\n-             Nkind (Left_Opnd (Expr)) = N_Reduction_Expression_Parameter\n-         then\n-            return P_Reduction_Expression (Lparen);\n-\n-         elsif Nkind (Expr) = N_Indexed_Component\n-           and then OK_Reduction_Expression_Parameter (Expressions (Expr))\n-         then\n-            Restore_Scan_State (State);\n-            return P_Reduction_Expression (Lparen);\n-         end if;\n-\n-         Set_Expression (Assoc_Node, Expr);\n-         if Ada_Version < Ada_2020 then\n-            Error_Msg_SC (\"iterated component is an Ada 2020 extension\");\n-            Error_Msg_SC (\"\\compile with -gnatX\");\n-         end if;\n-\n-         return Assoc_Node;\n-\n-      elsif Token = Tok_Of then\n-         Restore_Scan_State (State);\n-         return P_Reduction_Expression (Lparen);\n-\n-      else\n-         raise Error_Resync;\n-      end if;\n-   end P_Iterated_Component_Assoc_Or_Reduction;\n-\n-   ----------------------------\n-   -- P_Reduction_Expression --\n-   ----------------------------\n-\n-   function P_Reduction_Expression (Lparen : Boolean) return Node_Id is\n-      Expr           : Node_Id;\n-      I_Spec         : Node_Id;\n-      Left_Opnd      : Node_Id;\n-      Reduction_Node : Node_Id;\n-\n-   begin\n-      Reduction_Node := New_Node (N_Reduction_Expression, Prev_Token_Ptr);\n-\n-      I_Spec := P_Loop_Parameter_Specification;\n-\n-      if Nkind (I_Spec) = N_Loop_Parameter_Specification then\n-         Set_Loop_Parameter_Specification (Reduction_Node, I_Spec);\n-      else\n-         Set_Iterator_Specification (Reduction_Node, I_Spec);\n-      end if;\n-\n-      T_Arrow;\n-      if Token = Tok_Less and then False then\n-         Scan; -- past <\n-\n-         Left_Opnd := New_Node (N_Reduction_Expression_Parameter, Token_Ptr);\n-         Set_Expression (Left_Opnd, P_Simple_Expression);\n-\n-         Scan; -- past >\n-\n-         if Token = Tok_Plus then\n-            Set_Expression\n-              (Reduction_Node, New_Op_Node (N_Op_Add, Token_Ptr));\n-         else\n-            Set_Expression\n-              (Reduction_Node, New_Op_Node (N_Op_Concat, Token_Ptr));\n-         end if;\n-\n-         Scan; -- past operstor\n-         Set_Left_Opnd (Expression (Reduction_Node), Left_Opnd);\n-         Set_Right_Opnd (Expression (Reduction_Node), P_Primary);\n-\n-      else\n-         Expr := P_Expression;\n-         Set_Expression (Reduction_Node, Expr);\n-\n-         --  if Nkind (Expr) = N_Indexed_Component\n-         --    and then List_Length (Expressions (Expr)) /= 2\n-         --  then\n-         --     Error_Msg_N\n-         --        (\"combiner function call must have two arguments\", Expr);\n-         --  end if;\n-      end if;\n+      T_In;\n+      Set_Discrete_Choices (Assoc_Node, P_Discrete_Choice_List);\n+      TF_Arrow;\n+      Set_Expression (Assoc_Node, P_Expression);\n \n       if Ada_Version < Ada_2020 then\n-         Error_Msg_SC (\"Reduction_Expression is an Ada 2020 extension\");\n+         Error_Msg_SC (\"iterated component is an Ada 2020 extension\");\n          Error_Msg_SC (\"\\compile with -gnatX\");\n       end if;\n \n-      if not (Lparen and then Token = Tok_Right_Paren) then\n-         Error_Msg\n-           (\"reduction expression must be parenthesized\",\n-            Sloc (Reduction_Node));\n-      else\n-         Scan; -- past ???\n-      end if;\n-\n-      return Reduction_Node;\n-   end P_Reduction_Expression;\n+      return Assoc_Node;\n+   end P_Iterated_Component_Association;\n \n    ---------------------\n    -- P_If_Expression --\n@@ -3773,7 +3565,7 @@ package body Ch4 is\n             --  an aggregate.\n \n             Restore_Scan_State (Scan_State);\n-            Result := P_Iterated_Component_Assoc_Or_Reduction;\n+            Result := P_Iterated_Component_Association;\n          end if;\n \n       --  No other possibility should exist (caller was supposed to check)"}, {"sha": "49878452e819d470e3ec62b12063200250daf5f7", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -515,12 +515,6 @@ package body Sem is\n          when N_Record_Representation_Clause =>\n             Analyze_Record_Representation_Clause (N);\n \n-         when N_Reduction_Expression =>\n-            Analyze_Reduction_Expression (N);\n-\n-         when N_Reduction_Expression_Parameter =>\n-            Analyze_Reduction_Expression_Parameter (N);\n-\n          when N_Reference =>\n             Analyze_Reference (N);\n "}, {"sha": "5d2e81b30560615bcc77be1756dff14b049c8175", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -4365,83 +4365,6 @@ package body Sem_Ch4 is\n       Check_Function_Writable_Actuals (N);\n    end Analyze_Range;\n \n-   -----------------------------------\n-   -- Analyze_Reduction_Expression --\n-   -----------------------------------\n-\n-   procedure Analyze_Reduction_Expression (N : Node_Id) is\n-      Expr    : constant Node_Id := Expression (N);\n-      QE_Scop : Entity_Id;\n-\n-   begin\n-      --  The processing is similar to that for quantified expressions,\n-      --  which have a similar structure and are eventually transformed\n-      --  into a loop.\n-\n-      QE_Scop := New_Internal_Entity (E_Loop, Current_Scope, Sloc (N), 'L');\n-      Set_Etype  (QE_Scop, Standard_Void_Type);\n-      Set_Scope  (QE_Scop, Current_Scope);\n-      Set_Parent (QE_Scop, N);\n-\n-      Push_Scope (QE_Scop);\n-\n-      --  All constituents are preanalyzed and resolved to avoid untimely\n-      --  generation of various temporaries and types. Full analysis and\n-      --  expansion is carried out when the reduction expression is\n-      --  transformed into an expression with actions.\n-\n-      if Present (Iterator_Specification (N)) then\n-         Preanalyze (Iterator_Specification (N));\n-\n-      else pragma Assert (Present (Loop_Parameter_Specification (N)));\n-         declare\n-            Loop_Par : constant Node_Id := Loop_Parameter_Specification (N);\n-\n-         begin\n-            Preanalyze (Loop_Par);\n-\n-            if Nkind (Discrete_Subtype_Definition (Loop_Par)) = N_Function_Call\n-              and then Parent (Loop_Par) /= N\n-            then\n-               --  The parser cannot distinguish between a loop specification\n-               --  and an iterator specification. If after preanalysis the\n-               --  proper form has been recognized, rewrite the expression to\n-               --  reflect the right kind. This is needed for proper ASIS\n-               --  navigation. If expansion is enabled, the transformation is\n-               --  performed when the expression is rewritten as a loop.\n-\n-               Set_Iterator_Specification (N,\n-                 New_Copy_Tree (Iterator_Specification (Parent (Loop_Par))));\n-\n-               Set_Defining_Identifier (Iterator_Specification (N),\n-                 Relocate_Node (Defining_Identifier (Loop_Par)));\n-               Set_Name (Iterator_Specification (N),\n-                 Relocate_Node (Discrete_Subtype_Definition (Loop_Par)));\n-               Set_Comes_From_Source (Iterator_Specification (N),\n-                 Comes_From_Source (Loop_Parameter_Specification (N)));\n-               Set_Loop_Parameter_Specification (N, Empty);\n-            end if;\n-         end;\n-      end if;\n-\n-      Preanalyze (Expr);\n-      End_Scope;\n-\n-      Set_Etype (N, Etype (Expr));\n-   end Analyze_Reduction_Expression;\n-\n-   --------------------------------------------\n-   -- Analyze_Reduction_Expression_Parameter --\n-   --------------------------------------------\n-\n-   procedure Analyze_Reduction_Expression_Parameter (N : Node_Id) is\n-      Expr : constant Node_Id := Expression (N);\n-\n-   begin\n-      Analyze (Expr);\n-      Set_Etype (N, Etype (Expr));\n-   end Analyze_Reduction_Expression_Parameter;\n-\n    -----------------------\n    -- Analyze_Reference --\n    -----------------------"}, {"sha": "e78a9f52c9596e308fc2de9b2852150341badb1c", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -45,8 +45,6 @@ package Sem_Ch4  is\n    procedure Analyze_Qualified_Expression      (N : Node_Id);\n    procedure Analyze_Quantified_Expression     (N : Node_Id);\n    procedure Analyze_Range                     (N : Node_Id);\n-   procedure Analyze_Reduction_Expression      (N : Node_Id);\n-   procedure Analyze_Reduction_Expression_Parameter (N : Node_Id);\n    procedure Analyze_Reference                 (N : Node_Id);\n    procedure Analyze_Selected_Component        (N : Node_Id);\n    procedure Analyze_Short_Circuit             (N : Node_Id);"}, {"sha": "e7ee70e6ed17542c20525a50ba709800e174d787", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -2904,13 +2904,6 @@ package body Sem_Res is\n             when N_Real_Literal =>\n                Resolve_Real_Literal              (N, Ctx_Type);\n \n-            when N_Reduction_Expression =>\n-               null;\n-               --  Resolve (Expression (N),              Ctx_Type);\n-\n-            when N_Reduction_Expression_Parameter =>\n-               null;\n-\n             when N_Reference =>\n                Resolve_Reference                 (N, Ctx_Type);\n "}, {"sha": "c44fbc61c4f83e18acb8de3c83a315df688596cf", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -1376,12 +1376,6 @@ package body Sem_SPARK is\n                Free_Env (Saved_Env);\n             end;\n \n-         when N_Reduction_Expression =>\n-            null;\n-\n-         when N_Reduction_Expression_Parameter =>\n-            null;\n-\n          --  Analyze the list of associations in the aggregate\n \n          when N_Aggregate =>"}, {"sha": "4ab5614f6db7ddcc9935be80792b591b8e4cdeeb", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -1279,8 +1279,6 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n-        or else NT (N).Nkind = N_Reduction_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression_Parameter\n         or else NT (N).Nkind = N_Simple_Return_Statement\n         or else NT (N).Nkind = N_Type_Conversion\n         or else NT (N).Nkind = N_Unchecked_Expression\n@@ -2217,8 +2215,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Iteration_Scheme\n-        or else NT (N).Nkind = N_Quantified_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression);\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       return Node2 (N);\n    end Iterator_Specification;\n \n@@ -2348,8 +2345,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Iteration_Scheme\n-        or else NT (N).Nkind = N_Quantified_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression);\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       return Node4 (N);\n    end Loop_Parameter_Specification;\n \n@@ -4746,8 +4742,6 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n-        or else NT (N).Nkind = N_Reduction_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression_Parameter\n         or else NT (N).Nkind = N_Simple_Return_Statement\n         or else NT (N).Nkind = N_Type_Conversion\n         or else NT (N).Nkind = N_Unchecked_Expression\n@@ -5684,8 +5678,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Iteration_Scheme\n-        or else NT (N).Nkind = N_Quantified_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression);\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       Set_Node2_With_Parent (N, Val);\n    end Set_Iterator_Specification;\n \n@@ -5815,8 +5808,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Iteration_Scheme\n-        or else NT (N).Nkind = N_Quantified_Expression\n-        or else NT (N).Nkind = N_Reduction_Expression);\n+        or else NT (N).Nkind = N_Quantified_Expression);\n       Set_Node4_With_Parent (N, Val);\n    end Set_Loop_Parameter_Specification;\n "}, {"sha": "c453c281f52256a9151a38a91f0d1f717ec1a684", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -4762,31 +4762,6 @@ package Sinfo is\n       --  Condition (Node1)\n       --  All_Present (Flag15)\n \n-      --------------------------------\n-      -- 4.5.9 Reduction Expression --\n-      --------------------------------\n-\n-      --  REDUCTION_EXPRESSION ::=\n-      --    for LOOP_PARAMETER_SPECIFICATION => COMBINER_FUNCTION_CALL\n-      --    for ITERATOR_SPECIFIATION => COMBINER_FUNCTION_CALL\n-\n-      --  At most one of (Iterator_Specification, Loop_Parameter_Specification)\n-      --  is present at a time, in which case the other one is empty.\n-\n-      --  N_Reduction_Expression\n-      --  Sloc points to FOR\n-      --  Iterator_Specification (Node2)\n-      --  Expression (Node3)\n-      --  Loop_Parameter_Specification (Node4)\n-      --  plus fields for expression\n-\n-      --  COMBINER_FUNCTION_CALL => FUNCTION_CALL\n-\n-      --  A Combiner_Function_Call is either a function call (including an\n-      --  operator) with one reduction expression parameter, appearing either\n-      --  as a left operand or as the first actual in the parameter list. In\n-      --  a reduction expression this is represented as an expression.\n-\n       --------------------------\n       -- 4.6  Type Conversion --\n       --------------------------\n@@ -5649,16 +5624,6 @@ package Sinfo is\n       --  EXPLICIT_ACTUAL_PARAMETER ::=\n       --    EXPRESSION | variable_NAME | REDUCTION_EXPRESSION_PARAMETER\n \n-      ------------------------------------------\n-      -- 6.4.6 Reduction_Expression_Parameter --\n-      ------------------------------------------\n-\n-      --  REDUCTION_EXPRESSION_PARAMETER ::= <> | < EXPRESSION >\n-\n-      --  N_Reduction_Expression_Parameter\n-      --  Expression (Node3) (Set to Empty if no expression present)\n-      --  plus fields for expression\n-\n       ---------------------------\n       -- 6.5  Return Statement --\n       ---------------------------\n@@ -8781,8 +8746,6 @@ package Sinfo is\n       N_Null,\n       N_Qualified_Expression,\n       N_Quantified_Expression,\n-      N_Reduction_Expression,\n-      N_Reduction_Expression_Parameter,\n       N_Aggregate,\n       N_Allocator,\n       N_Case_Expression,\n@@ -12173,20 +12136,6 @@ package Sinfo is\n         4 => True,    --  Loop_Parameter_Specification (Node4)\n         5 => False),  --  Etype (Node5-Sem)\n \n-     N_Reduction_Expression =>\n-       (1 => False,   --  unused\n-        2 => True,    --  Iterator_Specification (Node2)\n-        3 => True,    --  Expression (Node3)\n-        4 => True,    --  Loop_Parameter_Specification (Node4)\n-        5 => False),  --  Etype (Node5-Sem)\n-\n-     N_Reduction_Expression_Parameter =>\n-       (1 => False,    --  unused\n-        2 => False,    --  unused\n-        3 => True,     --  Expression (Node3)\n-        4 => False,    --  unused\n-        5 => False),   --  Etype (Node5-Sem)\n-\n      N_Allocator =>\n        (1 => False,   --  Storage_Pool (Node1-Sem)\n         2 => False,   --  Procedure_To_Call (Node2-Sem)"}, {"sha": "f19629c6f9ab1aab3cd454bf796066ea7160db29", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b4022e11b50c4124b489ccc621332b2d92946/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=801b4022e11b50c4124b489ccc621332b2d92946", "patch": "@@ -3110,28 +3110,6 @@ package body Sprint is\n             Sprint_Indented_List (Component_Clauses (Node));\n             Write_Indent_Str (\"end record;\");\n \n-         when N_Reduction_Expression =>\n-            Write_Str (\" for\");\n-\n-            if Present (Iterator_Specification (Node)) then\n-               Sprint_Node (Iterator_Specification (Node));\n-            else\n-               Sprint_Node (Loop_Parameter_Specification (Node));\n-            end if;\n-\n-            Write_Str (\" => \");\n-            Sprint_Node (Expression (Node));\n-            null;\n-\n-         when N_Reduction_Expression_Parameter =>\n-            Write_Char ('<');\n-\n-            if Present (Expression (Node)) then\n-               Sprint_Node (Expression (Node));\n-            end if;\n-\n-            Write_Char ('>');\n-\n          when N_Reference =>\n             Sprint_Node (Prefix (Node));\n             Write_Str_With_Col_Check_Sloc (\"'reference\");"}]}