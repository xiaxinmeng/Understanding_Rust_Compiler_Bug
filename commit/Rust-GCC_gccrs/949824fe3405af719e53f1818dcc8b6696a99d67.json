{"sha": "949824fe3405af719e53f1818dcc8b6696a99d67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5ODI0ZmUzNDA1YWY3MTllNTNmMTgxOGRjYzhiNjY5NmE5OWQ2Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-10T10:56:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-10T10:56:05Z"}, "message": "combine.c (combine_simplify_rtx): Simplify using (float_truncate (float x)) is (float x) (float_extend...\n\n\t* combine.c (combine_simplify_rtx): Simplify using\n\t(float_truncate (float x)) is (float x)\n\t(float_extend (float_extend x)) is (float_extend x).\n\nFrom-SVN: r62624", "tree": {"sha": "18769d1b17973ac42ede44ef24b9f4c22778e8ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18769d1b17973ac42ede44ef24b9f4c22778e8ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949824fe3405af719e53f1818dcc8b6696a99d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949824fe3405af719e53f1818dcc8b6696a99d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949824fe3405af719e53f1818dcc8b6696a99d67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949824fe3405af719e53f1818dcc8b6696a99d67/comments", "author": null, "committer": null, "parents": [{"sha": "546ff7777c7d980c60b8bacf194d37145f950aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ff7777c7d980c60b8bacf194d37145f950aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546ff7777c7d980c60b8bacf194d37145f950aeb"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "4b08a6310b1b1f441dfe1dca0502dfcdae714002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949824fe3405af719e53f1818dcc8b6696a99d67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949824fe3405af719e53f1818dcc8b6696a99d67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=949824fe3405af719e53f1818dcc8b6696a99d67", "patch": "@@ -1,3 +1,9 @@\n+Mon Feb 10 11:40:18 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (combine_simplify_rtx): Simplify using\n+\t(float_truncate (float x)) is (float x)\n+\t(float_extend (float_extend x)) is (float_extend x).\n+\n 2003-02-10  Alan Modra  <amodra@bigpond.net.au>\n \n \t* calls.c (try_to_integrate): Tidy stack_usage_map access."}, {"sha": "d33f280ba7e498b56fde00104bee110b87c75475", "filename": "gcc/combine.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949824fe3405af719e53f1818dcc8b6696a99d67/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949824fe3405af719e53f1818dcc8b6696a99d67/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=949824fe3405af719e53f1818dcc8b6696a99d67", "patch": "@@ -4167,6 +4167,36 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t  && GET_MODE (XEXP (XEXP (x, 0), 0)) == mode)\n \treturn XEXP (XEXP (x, 0), 0);\n \n+      /* (float_truncate:SF (float_truncate:DF foo:XF)) \n+         = (float_truncate:SF foo:XF). \n+\t This may elliminate double rounding, so it is unsafe.\n+\n+         (float_truncate:SF (float_extend:XF foo:DF)) \n+         = (float_truncate:SF foo:DF). \n+\n+         (float_truncate:DF (float_extend:XF foo:SF)) \n+         = (float_extend:SF foo:DF). */\n+      if ((GET_CODE (XEXP (x, 0)) == FLOAT_TRUNCATE\n+\t   && flag_unsafe_math_optimizations)\n+\t  || GET_CODE (XEXP (x, 0)) == FLOAT_EXTEND)\n+\treturn simplify_gen_unary (GET_MODE_SIZE (GET_MODE (XEXP (XEXP (x, 0),\n+\t\t  \t\t\t\t\t    0)))\n+\t    \t\t\t   > GET_MODE_SIZE (mode)\n+\t\t\t\t   ? FLOAT_TRUNCATE : FLOAT_EXTEND,\n+\t    \t\t\t   mode,\n+\t\t\t\t   XEXP (XEXP (XEXP (x, 0), 0), 0), mode);\n+\n+      /*  (float_truncate (float x)) is (float x)  */\n+      if (GET_CODE (XEXP (x, 0)) == FLOAT\n+\t  && (flag_unsafe_math_optimizations\n+\t      || ((unsigned)significand_size (GET_MODE (XEXP (x, 0)))\n+\t\t  >= (GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (x, 0), 0)))\n+\t\t      - num_sign_bit_copies (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t     GET_MODE (XEXP (XEXP (x, 0), 0)))))))\n+\treturn simplify_gen_unary (FLOAT, mode,\n+\t\t\t\t   XEXP (XEXP (x, 0), 0),\n+\t\t\t\t   GET_MODE (XEXP (XEXP (x, 0), 0)));\n+\n       /* (float_truncate:SF (OP:DF (float_extend:DF foo:sf))) is\n \t (OP:SF foo:SF) if OP is NEG or ABS.  */\n       if ((GET_CODE (XEXP (x, 0)) == ABS\n@@ -4183,7 +4213,23 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t  && GET_CODE (SUBREG_REG (XEXP (x, 0))) == FLOAT_TRUNCATE)\n \treturn SUBREG_REG (XEXP (x, 0));\n       break;\n+    case FLOAT_EXTEND:\n+      /*  (float_extend (float_extend x)) is (float_extend x)\n+        \n+\t  (float_extend (float x)) is (float x) assuming that double\n+\t  rounding can't happen. \n+          */\n+      if (GET_CODE (XEXP (x, 0)) == FLOAT_EXTEND\n+\t  || (GET_CODE (XEXP (x, 0)) == FLOAT\n+\t      && ((unsigned)significand_size (GET_MODE (XEXP (x, 0)))\n+\t\t  >= (GET_MODE_BITSIZE (GET_MODE (XEXP (XEXP (x, 0), 0)))\n+\t\t      - num_sign_bit_copies (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t     GET_MODE (XEXP (XEXP (x, 0), 0)))))))\n+\treturn simplify_gen_unary (GET_CODE (XEXP (x, 0)), mode,\n+\t\t\t\t   XEXP (XEXP (x, 0), 0),\n+\t\t\t\t   GET_MODE (XEXP (XEXP (x, 0), 0)));\n \n+      break;\n #ifdef HAVE_cc0\n     case COMPARE:\n       /* Convert (compare FOO (const_int 0)) to FOO unless we aren't"}]}