{"sha": "1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzN2I2ZDlhN2U1N2M3MWIxYmZlNDQ5ZWJkMjc1ZWI0MDgxMTdmYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-11T07:36:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-11T07:36:07Z"}, "message": "re PR c++/91987 (-fstrict-eval-order issues)\n\n\tPR c++/91987\ncp/\n\t* decl2.c (grok_array_decl): For -fstrong-eval-order, when array ref\n\toperands have been swapped and at least one operand has side-effects,\n\trevert the swapping before calling build_array_ref.\n\t* typeck.c (cp_build_array_ref): For non-ARRAY_TYPE array ref with\n\tside-effects on the index operand, if -fstrong-eval-order use\n\tsave_expr around the array operand.\n\t(cp_build_binary_op): For shifts with side-effects in the second\n\toperand, wrap first operand into SAVE_EXPR and evaluate it before\n\tthe shift.\n\t* semantics.c (handle_omp_array_sections_1): Temporarily disable\n\tflag_strong_eval_order during OMP_CLAUSE_REDUCTION array section\n\tprocessing.\n\t* cp-gimplify.c (gimplify_to_rvalue): New function.\n\t(cp_gimplify_expr): Use it.\ntestsuite/\n\t* g++.dg/cpp1z/eval-order6.C: New test.\n\t* g++.dg/cpp1z/eval-order7.C: New test.\n\t* g++.dg/cpp1z/eval-order8.C: New test.\n\t* c-c++-common/gomp/pr91987.c: New test.\n\nFrom-SVN: r276860", "tree": {"sha": "fe29653bb010efc768398510adcd8af902405b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe29653bb010efc768398510adcd8af902405b71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e99e6fe6bb61ad2011030324cfdf84d2a67e75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e99e6fe6bb61ad2011030324cfdf84d2a67e75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e99e6fe6bb61ad2011030324cfdf84d2a67e75d"}], "stats": {"total": 193, "additions": 177, "deletions": 16}, "files": [{"sha": "95f683103e07f4ad315f7fba448d0dfffcd8432e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -1,3 +1,21 @@\n+2019-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91987\n+\t* decl2.c (grok_array_decl): For -fstrong-eval-order, when array ref\n+\toperands have been swapped and at least one operand has side-effects,\n+\trevert the swapping before calling build_array_ref.\n+\t* typeck.c (cp_build_array_ref): For non-ARRAY_TYPE array ref with\n+\tside-effects on the index operand, if -fstrong-eval-order use\n+\tsave_expr around the array operand.\n+\t(cp_build_binary_op): For shifts with side-effects in the second\n+\toperand, wrap first operand into SAVE_EXPR and evaluate it before\n+\tthe shift.\n+\t* semantics.c (handle_omp_array_sections_1): Temporarily disable\n+\tflag_strong_eval_order during OMP_CLAUSE_REDUCTION array section\n+\tprocessing.\n+\t* cp-gimplify.c (gimplify_to_rvalue): New function.\n+\t(cp_gimplify_expr): Use it.\n+\n 2019-10-10  Marek Polacek  <polacek@redhat.com>\n \n \t* typeck.c (comp_ptr_ttypes_real): Change the return type to bool."}, {"sha": "154fa70ec067f78c9a09d34afec2875ac9192103", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -638,6 +638,22 @@ lvalue_has_side_effects (tree e)\n     return TREE_SIDE_EFFECTS (e);\n }\n \n+/* Gimplify *EXPR_P as rvalue into an expression that can't be modified\n+   by expressions with side-effects in other operands.  */\n+\n+static enum gimplify_status\n+gimplify_to_rvalue (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n+\t\t    bool (*gimple_test_f) (tree))\n+{\n+  enum gimplify_status t\n+    = gimplify_expr (expr_p, pre_p, post_p, gimple_test_f, fb_rvalue);\n+  if (t == GS_ERROR)\n+    return GS_ERROR;\n+  else if (is_gimple_variable (*expr_p) && TREE_CODE (*expr_p) != SSA_NAME)\n+    *expr_p = get_initialized_tmp_var (*expr_p, pre_p, NULL);\n+  return t;\n+}\n+\n /* Do C++-specific gimplification.  Args are as for gimplify_expr.  */\n \n int\n@@ -823,15 +839,10 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  && cp_get_callee_fndecl_nofold (*expr_p) == NULL_TREE)\n \t{\n \t  enum gimplify_status t\n-\t    = gimplify_expr (&CALL_EXPR_FN (*expr_p), pre_p, NULL,\n-\t\t\t     is_gimple_call_addr, fb_rvalue);\n+\t    = gimplify_to_rvalue (&CALL_EXPR_FN (*expr_p), pre_p, NULL,\n+\t\t\t\t  is_gimple_call_addr);\n \t  if (t == GS_ERROR)\n \t    ret = GS_ERROR;\n-\t  else if (is_gimple_variable (CALL_EXPR_FN (*expr_p))\n-\t\t   && TREE_CODE (CALL_EXPR_FN (*expr_p)) != SSA_NAME)\n-\t    CALL_EXPR_FN (*expr_p)\n-\t      = get_initialized_tmp_var (CALL_EXPR_FN (*expr_p), pre_p,\n-\t\t\t\t\t NULL);\n \t}\n       if (!CALL_EXPR_FN (*expr_p))\n \t/* Internal function call.  */;"}, {"sha": "ee198cdf5ce5f8c36e3856432e17187b981944f9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -405,6 +405,7 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n   else\n     {\n       tree p1, p2, i1, i2;\n+      bool swapped = false;\n \n       /* Otherwise, create an ARRAY_REF for a pointer or array type.\n \t It is a little-known fact that, if `a' is an array and `i' is\n@@ -431,7 +432,7 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n       if (p1 && i2)\n \tarray_expr = p1, index_exp = i2;\n       else if (i1 && p2)\n-\tarray_expr = p2, index_exp = i1;\n+\tswapped = true, array_expr = p2, index_exp = i1;\n       else\n \t{\n \t  error_at (loc, \"invalid types %<%T[%T]%> for array subscript\",\n@@ -447,7 +448,12 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n       else\n \tarray_expr = mark_lvalue_use_nonread (array_expr);\n       index_exp = mark_rvalue_use (index_exp);\n-      expr = build_array_ref (input_location, array_expr, index_exp);\n+      if (swapped\n+\t  && flag_strong_eval_order == 2\n+\t  && (TREE_SIDE_EFFECTS (array_expr) || TREE_SIDE_EFFECTS (index_exp)))\n+\texpr = build_array_ref (input_location, index_exp, array_expr);\n+      else\n+\texpr = build_array_ref (input_location, array_expr, index_exp);\n     }\n   if (processing_template_decl && expr != error_mark_node)\n     {"}, {"sha": "f93bb934850c99ce65f3a7d53cdc8d179ed90220", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -5060,6 +5060,15 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n       TREE_PURPOSE (t) = lb;\n       low_bound = lb;\n     }\n+  /* Temporarily disable -fstrong-eval-order for array reductions.\n+     The SAVE_EXPR and COMPOUND_EXPR added if low_bound has side-effects\n+     is something the middle-end can't cope with and more importantly,\n+     it needs to be the actual base variable that is privatized, not some\n+     temporary assigned previous value of it.  That, together with OpenMP\n+     saying how many times the side-effects are evaluated is unspecified,\n+     makes int *a, *b; ... reduction(+:a[a = b, 3:10]) really unspecified.  */\n+  warning_sentinel s (flag_strong_eval_order,\n+\t\t      OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION);\n   ret = grok_array_decl (OMP_CLAUSE_LOCATION (c), ret, low_bound, false);\n   return ret;\n }"}, {"sha": "74ff8857fabfd35f93678229d749c7e30d2a2828", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -3560,6 +3560,10 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n   {\n     tree ar = cp_default_conversion (array, complain);\n     tree ind = cp_default_conversion (idx, complain);\n+    tree first = NULL_TREE;\n+\n+    if (flag_strong_eval_order == 2 && TREE_SIDE_EFFECTS (ind))\n+      ar = first = save_expr (ar);\n \n     /* Put the integer in IND to simplify error checking.  */\n     if (TREE_CODE (TREE_TYPE (ar)) == INTEGER_TYPE)\n@@ -3583,11 +3587,10 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \n     warn_array_subscript_with_type_char (loc, idx);\n \n-    ret = cp_build_indirect_ref (cp_build_binary_op (input_location,\n-\t\t\t\t\t\t     PLUS_EXPR, ar, ind,\n-\t\t\t\t\t\t     complain),\n-                                 RO_ARRAY_INDEXING,\n-                                 complain);\n+    ret = cp_build_binary_op (input_location, PLUS_EXPR, ar, ind, complain);\n+    if (first)\n+      ret = build2_loc (loc, COMPOUND_EXPR, TREE_TYPE (ret), first, ret);\n+    ret = cp_build_indirect_ref (ret, RO_ARRAY_INDEXING, complain);\n     protected_set_expr_location (ret, loc);\n     if (non_lvalue)\n       ret = non_lvalue_loc (loc, ret);\n@@ -5574,6 +5577,17 @@ cp_build_binary_op (const op_location_t &location,\n   if (build_type == NULL_TREE)\n     build_type = result_type;\n \n+  if (doing_shift\n+      && flag_strong_eval_order == 2\n+      && TREE_SIDE_EFFECTS (op1)\n+      && !processing_template_decl)\n+    {\n+      /* In C++17, in both op0 << op1 and op0 >> op1 op0 is sequenced before\n+\t op1, so if op1 has side-effects, use SAVE_EXPR around op0.  */\n+      op0 = cp_save_expr (op0);\n+      instrument_expr = op0;\n+    }\n+\n   if (sanitize_flags_p ((SANITIZE_SHIFT\n \t\t\t | SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n       && current_function_decl != NULL_TREE\n@@ -5585,6 +5599,7 @@ cp_build_binary_op (const op_location_t &location,\n       op1 = cp_save_expr (op1);\n       op0 = fold_non_dependent_expr (op0, complain);\n       op1 = fold_non_dependent_expr (op1, complain);\n+      tree instrument_expr1 = NULL_TREE;\n       if (doing_div_or_mod\n \t  && sanitize_flags_p (SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n \t{\n@@ -5597,10 +5612,15 @@ cp_build_binary_op (const op_location_t &location,\n \t    cop0 = cp_convert (orig_type, op0, complain);\n \t  if (TREE_TYPE (cop1) != orig_type)\n \t    cop1 = cp_convert (orig_type, op1, complain);\n-\t  instrument_expr = ubsan_instrument_division (location, cop0, cop1);\n+\t  instrument_expr1 = ubsan_instrument_division (location, cop0, cop1);\n \t}\n       else if (doing_shift && sanitize_flags_p (SANITIZE_SHIFT))\n-\tinstrument_expr = ubsan_instrument_shift (location, code, op0, op1);\n+\tinstrument_expr1 = ubsan_instrument_shift (location, code, op0, op1);\n+      if (instrument_expr != NULL)\n+\tinstrument_expr = add_stmt_to_compound (instrument_expr,\n+\t\t\t\t\t\tinstrument_expr1);\n+      else\n+\tinstrument_expr = instrument_expr1;\n     }\n \n   result = build2_loc (location, resultcode, build_type, op0, op1);"}, {"sha": "0f55eecfff46c815a4447558c1b8616e7f54927b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -1,3 +1,11 @@\n+2019-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91987\n+\t* g++.dg/cpp1z/eval-order6.C: New test.\n+\t* g++.dg/cpp1z/eval-order7.C: New test.\n+\t* g++.dg/cpp1z/eval-order8.C: New test.\n+\t* c-c++-common/gomp/pr91987.c: New test.\n+\n 2019-10-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c11-float-dfp-1.c, gcc.dg/c2x-float-no-dfp-1.c,"}, {"sha": "516bb8091fdef92e8eadae4d421a982ef6e0af7a", "filename": "gcc/testsuite/c-c++-common/gomp/pr91987.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr91987.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr91987.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr91987.c?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -0,0 +1,26 @@\n+/* PR c++/91987 */\n+\n+int bar (void);\n+void baz (int *);\n+#pragma omp declare target to (baz)\n+\n+void\n+foo (int *a, int (*b)[10][10])\n+{\n+  #pragma omp target map(a[bar ()])\n+  baz (a);\n+  #pragma omp target map(a[bar ():1])\n+  baz (a);\n+  #pragma omp target map(a[10:bar ()])\n+  baz (a);\n+  #pragma omp task depend(inout:a[10:bar ()])\n+  baz (a);\n+  #pragma omp task depend(inout:a[10:bar ()])\n+  baz (a);\n+  #pragma omp parallel reduction(+:a[bar ():2])\n+  baz (a);\n+  #pragma omp parallel reduction(+:a[2:bar ()])\n+  baz (a);\n+  #pragma omp parallel reduction(+:b[bar ():2][bar ():10][bar ():10])\n+  baz (a);\n+}"}, {"sha": "c8fb0b6dc9c18269dcfea75963cd8d2ec47cd2f3", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order6.C?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/91987\n+// { dg-do run }\n+// { dg-options \"-fstrong-eval-order\" }\n+\n+int\n+foo ()\n+{\n+  int x = 5;\n+  int r = x << (x = 3, 2);\n+  if (x != 3)\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo () != (5 << 2))\n+    __builtin_abort ();\n+}"}, {"sha": "c6f3cc2502780ce097fccbacb085329816c93648", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order7.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order7.C?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91987\n+// { dg-do run }\n+// { dg-options \"-fstrong-eval-order\" }\n+\n+int a[4] = { 1, 2, 3, 4 };\n+int b[4] = { 5, 6, 7, 8 };\n+\n+int\n+foo ()\n+{\n+  int *x = a;\n+  int r = x[(x = b, 3)];\n+  if (x != b)\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo () != 4)\n+    __builtin_abort ();\n+}"}, {"sha": "a8a4240f1b35bed4bc9d0ade929cddb164ef56eb", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a37b6d9a7e57c71b1bfe449ebd275eb408117fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order8.C?ref=1a37b6d9a7e57c71b1bfe449ebd275eb408117fb", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/91987\n+// { dg-do run }\n+// { dg-options \"-fstrong-eval-order\" }\n+\n+int a[4] = { 1, 2, 3, 4 };\n+int b;\n+\n+int\n+main ()\n+{\n+  int *x = a;\n+  b = 1;\n+  int r = (b = 4, x)[(b *= 2, 3)];\n+  if (b != 8 || r != 4)\n+    __builtin_abort ();\n+  b = 1;\n+  r = (b = 3, 2)[(b *= 2, x)];\n+  if (b != 6 || r != 3)\n+    __builtin_abort ();\n+}"}]}