{"sha": "c61199f2df364330e673d35d3fe60e092c3388dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxMTk5ZjJkZjM2NDMzMGU2NzNkMzVkM2ZlNjBlMDkyYzMzODhkZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-24T16:05:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-24T16:05:19Z"}, "message": "re PR target/85503 (ICE in replace_swapped_load_constant, at config/rs6000/rs6000-p8swap.c:1853 on powerpc64le-linux-gnu)\n\n\tPR target/85503\n\t* config/rs6000/rs6000-p8swap.c (const_load_sequence_p): Punt if\n\tconst_vector is not CONST_VECTOR or SYMBOL_REF for a constant pool\n\tcontaining a CONST_VECTOR.\n\n\t* g++.dg/ext/pr85503.C: New test.\n\nFrom-SVN: r259607", "tree": {"sha": "050ceb14b31d791c4ffbdd2801fd64c20ec93270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050ceb14b31d791c4ffbdd2801fd64c20ec93270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61199f2df364330e673d35d3fe60e092c3388dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61199f2df364330e673d35d3fe60e092c3388dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61199f2df364330e673d35d3fe60e092c3388dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61199f2df364330e673d35d3fe60e092c3388dd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f3c03bfc1e4fac5c38000ec182b2f35ebcc849f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3c03bfc1e4fac5c38000ec182b2f35ebcc849f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3c03bfc1e4fac5c38000ec182b2f35ebcc849f"}], "stats": {"total": 234, "additions": 232, "deletions": 2}, "files": [{"sha": "e43a931c1922132340faea26c2cc5a66fbc77a50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c61199f2df364330e673d35d3fe60e092c3388dd", "patch": "@@ -1,3 +1,10 @@\n+2018-04-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85503\n+\t* config/rs6000/rs6000-p8swap.c (const_load_sequence_p): Punt if\n+\tconst_vector is not CONST_VECTOR or SYMBOL_REF for a constant pool\n+\tcontaining a CONST_VECTOR.\n+\n 2018-04-24  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* doc/install.texi: Update newlib dependency for nvptx."}, {"sha": "071bc0c187dbcbe5826a3dd2d14c5979f694dda6", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=c61199f2df364330e673d35d3fe60e092c3388dd", "patch": "@@ -593,8 +593,10 @@ const_load_sequence_p (swap_web_entry *insn_entry, rtx insn)\n \t         remove this special test.  */\n \t      rtx const_vector = get_pool_constant (base);\n \t      if (GET_CODE (const_vector) == SYMBOL_REF\n-\t\t  && !CONSTANT_POOL_ADDRESS_P (const_vector))\n-\t\t    return false;\n+\t\t  && CONSTANT_POOL_ADDRESS_P (const_vector))\n+\t\tconst_vector = get_pool_constant (const_vector);\n+\t      if (GET_CODE (const_vector) != CONST_VECTOR)\n+\t\treturn false;\n \t    }\n \t}\n     }"}, {"sha": "0c1c0be9e91175e051ddb3bd2b48225fa5e37f74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c61199f2df364330e673d35d3fe60e092c3388dd", "patch": "@@ -1,5 +1,8 @@\n 2018-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85503\n+\t* g++.dg/ext/pr85503.C: New test.\n+\n \tPR target/85508\n \t* gcc.target/i386/pr85508.c: New test.\n "}, {"sha": "7e17943e353f1e08f3e8559e2bfa083fb77c60a8", "filename": "gcc/testsuite/g++.dg/ext/pr85503.C", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85503.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61199f2df364330e673d35d3fe60e092c3388dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85503.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85503.C?ref=c61199f2df364330e673d35d3fe60e092c3388dd", "patch": "@@ -0,0 +1,218 @@\n+// PR target/85503\n+// { dg-do compile { target { { powerpc64le-*-* } && c++11 } } }\n+// { dg-require-effective-target powerpc_vsx_ok }\n+// { dg-options \"-O2 -mvsx\" }\n+\n+namespace b {\n+template < int c > struct d { static constexpr int e = c; };\n+typedef d< false > f;\n+template < typename g > struct h { typedef g i; };\n+template < typename > class j;\n+template < bool, bool, typename... > struct aa;\n+struct k {\n+  template < typename n, typename... q >\n+  static h< decltype(n()(q()...)) > o(int);\n+};\n+template < typename p, typename... t > struct aa< false, false, p, t... > : k {\n+  typedef decltype(o< p, t... >(0)) i;\n+};\n+template < typename p, typename... t >\n+struct ab : aa< f::e, f::e, p, t... >::i {};\n+template < typename p, typename... t > struct j< p(t...) > : ab< p, t... > {};\n+} enum { r, s };\n+typedef long x;\n+template < typename > struct ac;\n+template < typename y > struct ac< y & > { typedef y i; };\n+template < typename y > struct j { typedef typename b::j< y >::i i; };\n+template < typename > struct ad;\n+template < typename > struct ae;\n+template < typename > class af;\n+template < typename, int ag, int ah, int = 0, int = ag, int = ah > class ai;\n+template < typename > class aj;\n+template < typename, typename, typename > class ak;\n+template < typename > class al;\n+template < typename > struct am;\n+template < typename > struct an;\n+template < typename y > struct ao { typedef typename am< y >::i i; };\n+struct aq {\n+  typedef const ai< double, 2, 1 > &ar;\n+};\n+template < typename as > struct at { typedef aj< as > i; };\n+template < typename as > struct au { typedef typename at< as >::i i; };\n+template < typename av > av aw(const typename an< av >::i *);\n+template < typename av, int > av az(const typename an< av >::i *ba) {\n+  return aw< av >(ba);\n+}\n+typedef __attribute__((altivec(vector__))) double bb;\n+template <> struct am< double > { typedef bb i; };\n+template <> struct an< bb > { typedef double i; };\n+template <> bb aw(const double *ba) { return __builtin_vec_vsx_ld(0, ba); }\n+struct bc {\n+  template < typename av > int bd(av a) { bd(a); __builtin_unreachable (); }\n+};\n+struct be {\n+  double operator()(const int, const int);\n+};\n+template < typename as > class bf : public ae< as > {\n+public:\n+  typedef typename ad< as >::bg bg;\n+  using ae< as >::bh;\n+  enum { bi };\n+  bg bj() const;\n+  template < typename bk > bg bl(const bk &) const;\n+};\n+template < typename as > class aj : public bf< as > {\n+public:\n+  using bf< as >::bh;\n+  template < typename bm > ak< be, const as, const bm > operator-(bm bn) {\n+    return ak< be, const as, const bm >(bh(), bn);\n+  }\n+  int bo() const;\n+  al< as > array() { return bh(); }\n+};\n+template < typename as > struct ae {\n+  const as &bh() const { return *static_cast< const as * >(this); }\n+};\n+template < typename > struct bp;\n+template < typename > struct bq;\n+template < typename y > struct br : bq< y > {\n+  br(y bs) : bq< y >(bs) {}\n+};\n+template < typename y > struct br< const y > : br< y > {\n+  br(const y &bs) : br< y >(bs) {}\n+};\n+template < typename as > struct br< af< as > > {\n+  typedef as bt;\n+  br(const bt &m) : bu(m.bv()) {}\n+  template < int bw, typename ay > ay bx(x, x by) {\n+    return az< ay, bw >(bu + by);\n+  }\n+  const typename bt::bg *bu;\n+};\n+template < typename bg, int u, int bz, int ca, int cb, int cc >\n+struct br< ai< bg, u, bz, ca, cb, cc > > : br< af< ai< bg, u, bz > > > {\n+  typedef ai< bg, u, bz > cd;\n+  br(const cd &m) : br< af< cd > >(m) {}\n+};\n+template < typename bk, typename ce, typename cf >\n+struct br< ak< bk, ce, cf > > : bp< ak< bk, ce, cf > > {\n+  br(ak< bk, ce, cf > bs) : bp< ak< bk, ce, cf > >(bs) {}\n+};\n+template < typename bk, typename ce, typename cf >\n+struct bp< ak< bk, ce, cf > > {\n+  bp(ak< bk, ce, cf > bs) : cg(), ch(bs.ci()) {}\n+  template < int bw, typename ay > ay bx(x cj, x by) {\n+    return ch.template bx< bw, ay >(cj, by);\n+  }\n+  ce cg;\n+  br< cf > ch;\n+};\n+template < typename cd > struct v {\n+  typedef typename ac< typename cd::ck >::i cl;\n+  v(cl &arg) : cn(arg) {}\n+  template < int bw, typename ay > ay bx(x cj, x by) {\n+    return cn.template bx< bw, ay >(cj, by);\n+  }\n+  br< cl > cn;\n+};\n+template < typename cm > struct bq< al< cm > > : v< al< cm > > {\n+  bq(al< cm > w) : v< al< cm > >(w.dd()) {}\n+};\n+template < typename as > class ap : public bf< as > {};\n+template < int ax > struct co { double array[ax]; };\n+template < int ax > class cq {\n+  co< ax > bu;\n+\n+public:\n+  const double *bv() const { return bu.array; }\n+};\n+template < typename as > class af : public at< as >::i {\n+public:\n+  typedef typename at< as >::i cp;\n+  cq< cp::bi > cs;\n+  const typename ad< as >::bg *bv() const { return cs.bv(); }\n+};\n+template < typename cr, int ag, int ah, int cu, int ct, int cw >\n+struct ad< ai< cr, ag, ah, cu, ct, cw > > {\n+  typedef cr bg;\n+};\n+template < typename, int ag, int ah, int, int, int >\n+class ai : public af< ai< double, ag, ah > > {\n+  typedef ai cv;\n+};\n+template < typename bk, typename ce, typename cf >\n+struct ad< ak< bk, ce, cf > > {\n+  typedef typename j< bk(typename ce::bg, typename cf::bg) >::i bg;\n+};\n+template < typename, typename, typename > class z;\n+template < typename bk, typename cy, typename cx >\n+class ak : public z< bk, cy, cx > {\n+public:\n+  typedef cx RhsNested;\n+  ak(cy, cx cz) : da(), db(cz) {}\n+  RhsNested ci() { return db; }\n+  cy da;\n+  RhsNested db;\n+};\n+template < typename bk, typename ce, typename cf >\n+class z : public au< ak< bk, ce, cf > >::i {};\n+template < typename as > int aj< as >::bo() const { (*this).bj(); __builtin_unreachable (); }\n+template < typename as > struct dc {\n+  typedef typename ao< typename as::bg >::i ay;\n+  enum { d, de };\n+  enum { df = de };\n+};\n+template < typename as > struct dk {\n+  enum { dh, di, dj, alignment };\n+  typedef typename dc< as >::ay PacketScalar;\n+  static PacketScalar dl(as dm, bc) {\n+    return dm.template dn< alignment, PacketScalar >(di, dj);\n+  }\n+};\n+template < typename, typename as, int = dc< as >::df > struct redux_impl;\n+template < typename Func, typename as > struct redux_impl< Func, as, s > {\n+  static int dl(as dm, Func func) { func.bd(dk< as >::dl(dm, func)); __builtin_unreachable (); }\n+};\n+template < typename _XprType > class redux_evaluator {\n+public:\n+  typedef _XprType cd;\n+  redux_evaluator(cd bs) : m_evaluator(bs), m_xpr(bs) {}\n+  typedef typename cd::bg bg;\n+  template < int bw, typename ay > ay dn(x di, x dj) {\n+    return m_evaluator.template bx< bw, ay >(dj, di);\n+  }\n+  br< cd > m_evaluator;\n+  cd m_xpr;\n+};\n+template < typename as >\n+template < typename Func >\n+typename ad< as >::bg bf< as >::bl(const Func &func) const {\n+  typedef redux_evaluator< as > ThisEvaluator;\n+  ThisEvaluator thisEval(bh());\n+  redux_impl< Func, ThisEvaluator >::dl(thisEval, func);\n+  __builtin_unreachable ();\n+}\n+template < typename as > typename ad< as >::bg bf< as >::bj() const {\n+  bl(bc());\n+  __builtin_unreachable ();\n+}\n+template < typename ExpressionType >\n+struct ad< al< ExpressionType > > : ad< typename ExpressionType::cv > {};\n+template < typename > class al : public ap< al< ai< double, 2, 1 > > > {\n+public:\n+  typedef aq::ar ck;\n+  al(const ai< double, 2, 1 > &dg) : m_expression(dg) {}\n+  const ai< double, 2, 1 > &dd() { return m_expression; }\n+  ck m_expression;\n+};\n+typedef ai< double, 2, 1 > Vector2d;\n+class OnHoverHandlerGraphicsItem {\n+public:\n+  static Vector2d corners;\n+};\n+int\n+GasGraphicsItemcreateOnHoverHandler() {\n+  Vector2d l;\n+  (l - OnHoverHandlerGraphicsItem::corners.array()).bo();\n+  __builtin_unreachable ();\n+}"}]}