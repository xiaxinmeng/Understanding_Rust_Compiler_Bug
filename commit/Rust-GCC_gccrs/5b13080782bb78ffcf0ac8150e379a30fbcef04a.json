{"sha": "5b13080782bb78ffcf0ac8150e379a30fbcef04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxMzA4MDc4MmJiNzhmZmNmMGFjODE1MGUzNzlhMzBmYmNlZjA0YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-01-04T07:30:49Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-01-04T07:30:49Z"}, "message": "re PR fortran/41872 (wrong-code: Issues with allocatable scalars)\n\n2009-01-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41872\n        * trans-expr.c (gfc_conv_procedure_call): Add indirect ref\n        for functions returning allocatable scalars.\n        * trans-stmt.c (gfc_trans_allocate): Emmit error when\n        reallocating an allocatable scalar.\n        * trans.c (gfc_allocate_with_status): Fix pseudocode syntax\n        in comment.\n        * trans-decl.c (gfc_trans_deferred_vars): Nullify local\n        allocatable scalars.\n        (gfc_generate_function_code): Nullify result variable for\n        allocatable scalars.\n        \n        PR fortran/40849\n        * module.c (gfc_use_module): Fix warning string to allow\n        for translation.\n\n        PR fortran/42517\n        * invoke.texi (-fcheck=recursion): Mention that the checking\n        is also disabled for -frecursive.\n        * trans-decl.c (gfc_generate_function_code): Disable\n        -fcheck=recursion when -frecursive is used.\n\n        * intrinsic.texi (iso_c_binding): Improve wording.\n\n2009-01-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41872\n        * gfortran.dg/allocatable_scalar_5.f90: New test.\n        * gfortran.dg/allocatable_scalar_6.f90: New test.\n\nFrom-SVN: r155606", "tree": {"sha": "8e4ad400c37fd8a181953cc2a8978ff5aaaeec7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e4ad400c37fd8a181953cc2a8978ff5aaaeec7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b13080782bb78ffcf0ac8150e379a30fbcef04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b13080782bb78ffcf0ac8150e379a30fbcef04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b13080782bb78ffcf0ac8150e379a30fbcef04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b13080782bb78ffcf0ac8150e379a30fbcef04a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f42621553669746ede1f161f110f78c7df817aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42621553669746ede1f161f110f78c7df817aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42621553669746ede1f161f110f78c7df817aa6"}], "stats": {"total": 188, "additions": 171, "deletions": 17}, "files": [{"sha": "c033b6eadadb1d2bbf32855be39b07c688deff31", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -1,3 +1,28 @@\n+2010-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* trans-expr.c (gfc_conv_procedure_call): Add indirect ref\n+\tfor functions returning allocatable scalars.\n+\t* trans-stmt.c (gfc_trans_allocate): Emmit error when\n+\treallocating an allocatable scalar.\n+\t* trans.c (gfc_allocate_with_status): Fix pseudocode syntax\n+\tin comment.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Nullify local\n+\tallocatable scalars.\n+\t(gfc_generate_function_code): Nullify result variable for\n+\tallocatable scalars.\n+\t\n+\tPR fortran/40849\n+\t* module.c (gfc_use_module): Fix warning string to allow\n+\tfor translation.\n+\n+\tPR fortran/42517\n+\t* invoke.texi (-fcheck=recursion): Mention that the checking\n+\tis also disabled for -frecursive.\n+\t* trans-decl.c (gfc_generate_function_code): Disable\n+\t-fcheck=recursion when -frecursive is used.\n+\n+\t* intrinsic.texi (iso_c_binding): Improve wording.\n \n \f\n Copyright (C) 2010 Free Software Foundation, Inc."}, {"sha": "d37c807bdbfc926d5af2557b45ed7859c873cf95", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -11350,8 +11350,8 @@ C_INT_LEAST128_T, C_INT_FAST128_T}.\n @item @code{CHARACTER}@tab @code{C_CHAR}        @tab @code{char}\n @end multitable\n \n-Additionally, the following @code{(CHARACTER(KIND=C_CHAR))} are\n-defined.\n+Additionally, the following parameters of type @code{CHARACTER(KIND=C_CHAR)}\n+are defined.\n \n @multitable @columnfractions .20 .45 .15\n @item Name                     @tab C definition    @tab Value"}, {"sha": "21db29339bcfd7d949b3e231d36173f764879989", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -1258,7 +1258,7 @@ Enable generation of run-time checks for pointers and allocatables.\n Enable generation of run-time checks for recursively called subroutines and\n functions which are not marked as recursive. See also @option{-frecursive}.\n Note: This check does not work for OpenMP programs and is disabled if used\n-together with @option{-fopenmp}.\n+together with @option{-frecursive} and @option{-fopenmp}.\n @end table\n \n "}, {"sha": "a07af9a813f9e235cc754947ed26de1e7d44ef8c", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -5491,9 +5491,9 @@ gfc_use_module (void)\n \n \t  if (strcmp (atom_string, MOD_VERSION))\n \t    {\n-\t      gfc_fatal_error (\"Wrong module version '%s' (expected '\"\n-\t\t\t       MOD_VERSION \"') for file '%s' opened\"\n-\t\t\t       \" at %C\", atom_string, filename);\n+\t      gfc_fatal_error (\"Wrong module version '%s' (expected '%s') \"\n+\t\t\t       \"for file '%s' opened at %C\", atom_string,\n+\t\t\t       MOD_VERSION, filename);\n \t    }\n \t}\n "}, {"sha": "f93cc9f2caec9e5b1d3312bd57f4f2cda29b9809", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -3188,7 +3188,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t       || (sym->ts.type == BT_CLASS\n \t\t   && sym->ts.u.derived->components->attr.allocatable))\n \t{\n-\t  /* Automatic deallocatation of allocatable scalars.  */\n+\t  /* Nullify and automatic deallocatation of allocatable scalars.  */\n \t  tree tmp;\n \t  gfc_expr *e;\n \t  gfc_se se;\n@@ -3203,10 +3203,13 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t  gfc_conv_expr (&se, e);\n \t  gfc_free_expr (e);\n \n+\t  /* Nullify when entering the scope.  */\n \t  gfc_start_block (&block);\n+\t  gfc_add_modify (&block, se.expr, fold_convert (TREE_TYPE (se.expr),\n+\t\t\t\t\t\t\t null_pointer_node));\n \t  gfc_add_expr_to_block (&block, fnbody);\n \n-\t  /* Note: Nullifying is not needed.  */\n+\t  /* Deallocate when leaving the scope. Nullifying is not needed.  */\n \t  tmp = gfc_deallocate_with_status (se.expr, NULL_TREE, true, NULL);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t  fnbody = gfc_finish_block (&block);\n@@ -4319,7 +4322,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t  || (sym->attr.entry_master\n \t\t      && sym->ns->entries->sym->attr.recursive);\n    if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive\n-       && !gfc_option.flag_openmp)\n+       && !gfc_option.flag_recursive)\n      {\n        char * msg;\n \n@@ -4384,13 +4387,18 @@ gfc_generate_function_code (gfc_namespace * ns)\n \tresult = sym->result->backend_decl;\n \n       if (result != NULL_TREE && sym->attr.function\n-\t    && sym->ts.type == BT_DERIVED\n-\t    && sym->ts.u.derived->attr.alloc_comp\n-\t    && !sym->attr.pointer)\n+\t  && !sym->attr.pointer)\n \t{\n-\t  rank = sym->as ? sym->as->rank : 0;\n-\t  tmp2 = gfc_nullify_alloc_comp (sym->ts.u.derived, result, rank);\n-\t  gfc_add_expr_to_block (&block, tmp2);\n+\t  if (sym->ts.type == BT_DERIVED\n+\t      && sym->ts.u.derived->attr.alloc_comp)\n+\t    {\n+\t      rank = sym->as ? sym->as->rank : 0;\n+\t      tmp2 = gfc_nullify_alloc_comp (sym->ts.u.derived, result, rank);\n+\t      gfc_add_expr_to_block (&block, tmp2);\n+\t    }\n+\t  else if (sym->attr.allocatable && sym->attr.dimension == 0)\n+\t    gfc_add_modify (&block, result, fold_convert (TREE_TYPE (result),\n+\t\t\t\t\t\t\t  null_pointer_node));\n \t}\n \n       gfc_add_expr_to_block (&block, tmp);"}, {"sha": "84eb585f5589e8734bbc6aebe2243c7b00a83962", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -3413,7 +3413,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n      something like\n         x = f()\n      where f is pointer valued, we have to dereference the result.  */\n-  if (!se->want_pointer && !byref && sym->attr.pointer\n+  if (!se->want_pointer && !byref\n+      && (sym->attr.pointer || sym->attr.allocatable)\n       && !gfc_is_proc_ptr_comp (expr, NULL))\n     se->expr = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\tse->expr);"}, {"sha": "5159f429d02de35a718d4610a20941d64975639f", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -4059,7 +4059,32 @@ gfc_trans_allocate (gfc_code * code)\n \t  if (expr->ts.type == BT_CHARACTER && memsz == NULL_TREE)\n \t    memsz = se.string_length;\n \n-\t  tmp = gfc_allocate_with_status (&se.pre, memsz, pstat);\n+\t  /* Allocate - for non-pointers with re-alloc checking.  */\n+\t  {\n+\t    gfc_ref *ref;\n+\t    bool allocatable;\n+\n+\t    ref = expr->ref;\n+\n+\t    /* Find the last reference in the chain.  */\n+\t    while (ref && ref->next != NULL)\n+\t      {\n+\t        gcc_assert (ref->type != REF_ARRAY || ref->u.ar.type == AR_ELEMENT);\n+\t        ref = ref->next;\n+\t      }\n+\n+\t    if (!ref)\n+\t      allocatable = expr->symtree->n.sym->attr.allocatable;\n+\t    else\n+\t      allocatable = ref->u.c.component->attr.allocatable;\n+\n+\t    if (allocatable)\n+\t      tmp = gfc_allocate_array_with_status (&se.pre, se.expr, memsz,\n+\t\t\t\t\t\t    pstat, expr);\n+\t    else\n+\t      tmp = gfc_allocate_with_status (&se.pre, memsz, pstat);\n+\t  }\n+\n \t  tmp = fold_build2 (MODIFY_EXPR, void_type_node, se.expr,\n \t\t\t     fold_convert (TREE_TYPE (se.expr), tmp));\n \t  gfc_add_expr_to_block (&se.pre, tmp);"}, {"sha": "a107392e094556fb4abdd7a5c3a1023ab010fb9e", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -711,6 +711,7 @@ gfc_allocate_with_status (stmtblock_t * block, tree size, tree status)\n \t}\n \telse\n \t  runtime_error (\"Attempting to allocate already allocated array\");\n+      }\n     }\n     \n     expr must be set to the original expression being allocated for its locus"}, {"sha": "c16e2d41985cf4eb93e863ae65ba25a4031e9361", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -1,3 +1,9 @@\n+2009-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* gfortran.dg/allocatable_scalar_5.f90: New test.\n+\t* gfortran.dg/allocatable_scalar_6.f90: New test.\n+\n 2010-01-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/42583"}, {"sha": "cee95a17ab3c6c09a44259d9520db243b83a9df7", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_5.f90", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -0,0 +1,62 @@\n+! { dg-do run }\n+! { dg-options \"-Wall -pedantic\" }\n+!\n+! PR fortran/41872\n+!\n+!  More tests for allocatable scalars\n+!\n+program test\n+  implicit none\n+  integer, allocatable :: a\n+  integer :: b\n+\n+  if (allocated (a)) call abort ()\n+  if (allocated (func (.false.))) call abort ()\n+  if (.not.allocated (func (.true.))) call abort ()\n+  b = 7\n+  b = func(.true.)\n+  if (b /= 5332) call abort () \n+  b = 7\n+  b = func(.true.) + 1\n+  if (b /= 5333) call abort () \n+   \n+  call intout (a, .false.)\n+  if (allocated (a)) call abort ()\n+  call intout (a, .true.)\n+  if (.not.allocated (a)) call abort ()\n+  if (a /= 764) call abort ()\n+  call intout2 (a)\n+  if (allocated (a)) call abort ()\n+\n+  if (allocated (func2 ())) call abort ()\n+contains\n+\n+  function func (alloc)\n+    integer, allocatable ::  func\n+    logical :: alloc\n+    if (allocated (func)) call abort ()\n+    if (alloc) then\n+      allocate(func)\n+      func = 5332\n+    end if\n+  end function func\n+\n+  function func2 ()\n+    integer, allocatable ::  func2\n+  end function func2\n+\n+  subroutine intout (dum, alloc)\n+    implicit none\n+    integer, allocatable,intent(out) :: dum\n+    logical :: alloc\n+    if (allocated (dum)) call abort()\n+    if (alloc) then\n+      allocate (dum)\n+      dum = 764\n+    end if\n+  end subroutine intout\n+\n+  subroutine intout2 (dum) ! { dg-warning \"declared INTENT.OUT. but was not set\" }\n+    integer, allocatable,intent(out) :: dum\n+  end subroutine intout2\n+end program test"}, {"sha": "33daee4b848c368852efe1ef3656f7236a8eaaf4", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_6.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b13080782bb78ffcf0ac8150e379a30fbcef04a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90?ref=5b13080782bb78ffcf0ac8150e379a30fbcef04a", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+! { dg-options \"-Wall -pedantic\" }\n+!\n+! PR fortran/41872\n+!\n+!  (De)allocate tests\n+!\n+program test\n+  implicit none\n+  integer, allocatable :: a, b, c\n+  integer :: stat\n+  stat=99\n+  allocate(a, stat=stat)\n+  if (stat /= 0) call abort ()\n+  allocate(a, stat=stat)\n+  if (stat == 0) call abort ()\n+\n+  allocate (b)\n+  deallocate (b, stat=stat)\n+  if (stat /= 0) call abort ()\n+  deallocate (b, stat=stat)\n+  if (stat == 0) call abort ()\n+\n+  deallocate (c, stat=stat)\n+  if (stat == 0) call abort ()\n+end program test"}]}