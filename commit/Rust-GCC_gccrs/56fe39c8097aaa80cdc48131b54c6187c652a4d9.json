{"sha": "56fe39c8097aaa80cdc48131b54c6187c652a4d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmZTM5YzgwOTdhYWE4MGNkYzQ4MTMxYjU0YzYxODdjNjUyYTRkOQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-04-26T19:40:34Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-26T19:40:34Z"}, "message": "Fix method search wrt scope of inner classes to match JLS2.\n\nFrom-SVN: r41604", "tree": {"sha": "c06f55dbae48157d5f980adcc95f3149baa89b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06f55dbae48157d5f980adcc95f3149baa89b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56fe39c8097aaa80cdc48131b54c6187c652a4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe39c8097aaa80cdc48131b54c6187c652a4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fe39c8097aaa80cdc48131b54c6187c652a4d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe39c8097aaa80cdc48131b54c6187c652a4d9/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52a661a6277cf517aa56b013c83d204982fab9c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a661a6277cf517aa56b013c83d204982fab9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a661a6277cf517aa56b013c83d204982fab9c8"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "d0f04cedbe575bb6c9e49402c1423edf67125ce8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=56fe39c8097aaa80cdc48131b54c6187c652a4d9", "patch": "@@ -1,3 +1,14 @@\n+2001-04-26  Per Bothner  <per@bothner.com>\n+\n+\tFix method search wrt scope of inner classes to match JLS2.\n+\t* typeck.c (build_null_signature):  New static function.\n+\t(has_method):  New function.  Uses build_null_signature and lookup_do.\n+\t* java-tree.h (has_method):  New declaration.\n+\t* parse.y (find_applicable_accessible_methods_list):  Do not search\n+\tcontext of inner classes here.\n+\t(patch_method_invocation):  Search scope, ie. current and outer clases,\n+\tfor method matching simple name, to find class.\n+\n 2001-04-26  Per Bothner  <per@bothner.com>\n \n \t* jcf-write.c (generate_bytecode_insns case SWITCH_EXPR):"}, {"sha": "914ba817967b4dc6bebc609dd8c0389178a0aa07", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=56fe39c8097aaa80cdc48131b54c6187c652a4d9", "patch": "@@ -960,6 +960,7 @@ extern tree lookup_java_constructor PARAMS ((tree, tree));\n extern tree lookup_java_method PARAMS ((tree, tree, tree));\n extern tree lookup_argument_method PARAMS ((tree, tree, tree));\n extern tree lookup_argument_method2 PARAMS ((tree, tree, tree));\n+extern int has_method PARAMS ((tree, tree));\n extern tree promote_type PARAMS ((tree));\n extern tree get_constant PARAMS ((struct JCF*, int));\n extern tree get_name_constant PARAMS ((struct JCF*, int));"}, {"sha": "a8084ee1c06f579761efcac15db5b0e2f3e90792", "filename": "gcc/java/parse.y", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=56fe39c8097aaa80cdc48131b54c6187c652a4d9", "patch": "@@ -9882,7 +9882,29 @@ patch_method_invocation (patch, primary, where, from_super,\n          alternate class is specified. */\n       else\n \t{\n-\t  class_to_search = (where ? where : current_class);\n+\t  if (where != NULL_TREE)\n+\t    class_to_search = where;\n+\t  else if (QUALIFIED_P (name))\n+\t    class_to_search = current_class;\n+\t  else\n+\t    {\n+\t      class_to_search = current_class;\n+\n+\t      for (;;)\n+\t\t{\n+\t\t  if (has_method (class_to_search, name))\n+\t\t    break;\n+\t\t  if (! INNER_CLASS_TYPE_P (class_to_search))\n+\t\t    {\n+\t\t      parse_error_context (wfl,\n+\t\t\t\t\t   \"No method named `%s' in scope\",\n+\t\t\t\t\t   IDENTIFIER_POINTER (name));\n+\t\t      PATCH_METHOD_RETURN_ERROR ();\n+\t\t    }\n+\t\t  class_to_search\n+\t\t    = TREE_TYPE (DECL_CONTEXT (TYPE_NAME (class_to_search)));\n+\t\t}\n+\t    }\n \t  lc = 0;\n \t}\n \n@@ -10488,8 +10510,6 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n   /* Search classes */\n   else\n     {\n-      tree sc = class;\n-      int seen_inner_class = 0;\n       search_applicable_methods_list (lc, TYPE_METHODS (class), \n \t\t\t\t      name, arglist, &list, &all_list);\n \n@@ -10506,7 +10526,7 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n       /* We must search all interfaces of this class */\n       if (!lc)\n       {\n-\ttree basetype_vec = TYPE_BINFO_BASETYPES (sc);\n+\ttree basetype_vec = TYPE_BINFO_BASETYPES (class);\n \tint n = TREE_VEC_LENGTH (basetype_vec), i;\n \tfor (i = 1; i < n; i++)\n \t  {\n@@ -10521,24 +10541,6 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n \t  }\n       }\n \n-      /* Search enclosing context of inner classes before looking\n-         ancestors up. */\n-      while (!lc && INNER_CLASS_TYPE_P (class))\n-\t{\n-\t  tree rlist;\n-\t  seen_inner_class = 1;\n-\t  class = TREE_TYPE (DECL_CONTEXT (TYPE_NAME (class)));\n-\t  rlist = find_applicable_accessible_methods_list (lc, class, \n-\t\t\t\t\t\t\t   name, arglist);\n-\t  list = chainon (rlist, list);\n-\t}\n-\n-      if (!lc && seen_inner_class \n-\t  && TREE_TYPE (DECL_CONTEXT (TYPE_NAME (sc))) == CLASSTYPE_SUPER (sc))\n-\tclass = CLASSTYPE_SUPER (sc);\n-      else\n-\tclass = sc;\n-\n       /* Search superclass */\n       if (!lc && CLASSTYPE_SUPER (class) != NULL_TREE)\n \t{"}, {"sha": "cc514d66d7556135e2124626272bd716e8d55042", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe39c8097aaa80cdc48131b54c6187c652a4d9/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=56fe39c8097aaa80cdc48131b54c6187c652a4d9", "patch": "@@ -579,6 +579,13 @@ get_type_from_signature (tree signature)\n   return type;\n }\n \n+tree\n+build_null_signature (type)\n+     tree type;\n+{\n+  return NULL_TREE;\n+}\n+\n /* Return the signature string for the arguments of method type TYPE. */\n \n tree\n@@ -761,9 +768,20 @@ lookup_java_method (searched_class, method_name, method_signature)\n \t\t    method_signature, build_java_signature);\n }\n \n-/* Search in class SEARCHED_CLASS (an its superclasses) for a method\n+/* Return true iff CLASS (or its ancestors) has a method METHOD_NAME. */\n+\n+int\n+has_method (class, method_name)\n+     tree class;\n+     tree method_name;\n+{\n+  return lookup_do (class, class,  method_name,\n+\t\t    NULL_TREE, build_null_signature) != NULL_TREE;\n+}\n+\n+/* Search in class SEARCHED_CLASS (and its superclasses) for a method\n    matching METHOD_NAME and signature SIGNATURE.  Also search in\n-   SEARCHED_INTERFACE (an its superinterfaces) for a similar match.\n+   SEARCHED_INTERFACE (and its superinterfaces) for a similar match.\n    Return the matched method DECL or NULL_TREE.  SIGNATURE_BUILDER is\n    used on method candidates to build their (sometimes partial)\n    signature.  */"}]}