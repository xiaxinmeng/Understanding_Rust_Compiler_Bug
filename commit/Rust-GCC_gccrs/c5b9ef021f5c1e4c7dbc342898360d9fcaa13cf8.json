{"sha": "c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViOWVmMDIxZjVjMWU0YzdkYmMzNDI4OTgzNjBkOWZjYWExM2NmOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-06-03T22:50:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-06-03T22:50:27Z"}, "message": "Warning removal.\n\n* config/sh/sh.c (print_operand_address): Cast INTVAL to int.\n(shl_and_kind): Cast wide constant.\n(gen_far_branch): Define as static, as in declaration.\n(barrier_align): Compute cache-line length as unsigned.  Add\nparentheses in initial credit computation.\n(rounded_frame_size): Add parentheses.\n(permanent_obstack): Remove declaration.  Include ggc.h for\ndeclaration of ggc_add_root_rtx().\n(get_free_reg): Removed declaration of unused variable reg.\n(legitimize_pic_address): Mark mode argument as unused.\n\nFrom-SVN: r42837", "tree": {"sha": "8c39492b0cbc05dc880964cbc64f52fd6758867b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c39492b0cbc05dc880964cbc64f52fd6758867b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8/comments", "author": null, "committer": null, "parents": [{"sha": "667c49250fe57f73728f51a828c4a6e483bd1b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c49250fe57f73728f51a828c4a6e483bd1b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667c49250fe57f73728f51a828c4a6e483bd1b5b"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "5da65ff3cdb0573b6aa80f0876b0ebba2bb2c8bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "patch": "@@ -1,3 +1,17 @@\n+2001-06-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tWarning removal.\n+\t* config/sh/sh.c (print_operand_address): Cast INTVAL to int.\n+\t(shl_and_kind): Cast wide constant.\n+\t(gen_far_branch): Define as static, as in declaration.\n+\t(barrier_align): Compute cache-line length as unsigned.  Add\n+\tparentheses in initial credit computation.\n+\t(rounded_frame_size): Add parentheses.\n+\t(permanent_obstack): Remove declaration.  Include ggc.h for\n+\tdeclaration of ggc_add_root_rtx().\n+\t(get_free_reg): Removed declaration of unused variable reg.\n+\t(legitimize_pic_address): Mark mode argument as unused.\n+\n 2001-06-03  Igor Shevlyakov  <igor@windriver.com>\n \n \t* config/sh/sh.c (output_branch): Support for insn with lenght"}, {"sha": "03c1e58367854cd1b59cc84d0f9e9c81911b94d5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c5b9ef021f5c1e4c7dbc342898360d9fcaa13cf8", "patch": "@@ -170,7 +170,7 @@ print_operand_address (stream, x)\n \tswitch (GET_CODE (index))\n \t  {\n \t  case CONST_INT:\n-\t    fprintf (stream, \"@(%d,%s)\", INTVAL (index),\n+\t    fprintf (stream, \"@(%d,%s)\", (int) INTVAL (index),\n \t\t     reg_names[true_regnum (base)]);\n \t    break;\n \n@@ -1450,7 +1450,7 @@ shl_and_kind (left_rtx, mask_rtx, attrp)\n \t}\n     }\n   /* Try to use a scratch register to hold the AND operand.  */\n-  can_ext = ((mask << left) & 0xe0000000) == 0;\n+  can_ext = ((mask << left) & ((unsigned HOST_WIDE_INT)3 << 30)) == 0;\n   for (i = 0; i <= 2; i++)\n     {\n       if (i > right)\n@@ -2735,7 +2735,7 @@ struct far_branch\n \n static void gen_far_branch PARAMS ((struct far_branch *));\n enum mdep_reorg_phase_e mdep_reorg_phase;\n-void\n+static void\n gen_far_branch (bp)\n      struct far_branch *bp;\n {\n@@ -2839,7 +2839,7 @@ barrier_align (barrier_or_label)\n \t the table to the minimum for proper code alignment.  */\n       return ((TARGET_SMALLCODE\n \t       || (XVECLEN (pat, 1) * GET_MODE_SIZE (GET_MODE (pat))\n-\t\t   <= 1 << (CACHE_LOG - 2)))\n+\t\t   <= (unsigned)1 << (CACHE_LOG - 2)))\n \t      ? 1 : CACHE_LOG);\n     }\n \n@@ -2871,7 +2871,7 @@ barrier_align (barrier_or_label)\n \t investigation.  Skip to the insn before it.  */\n       prev = prev_real_insn (prev);\n \n-      for (slot = 2, credit = 1 << (CACHE_LOG - 2) + 2;\n+      for (slot = 2, credit = (1 << (CACHE_LOG - 2)) + 2;\n \t   credit >= 0 && prev && GET_CODE (prev) == INSN;\n \t   prev = prev_real_insn (prev))\n \t{\n@@ -3951,7 +3951,7 @@ rounded_frame_size (pushed)\n   HOST_WIDE_INT size = get_frame_size ();\n   HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n \n-  return (size + pushed + align - 1 & -align) - pushed;\n+  return ((size + pushed + align - 1) & -align) - pushed;\n }\n \n void\n@@ -5047,7 +5047,7 @@ reg_unused_after (reg, insn)\n   return 1;\n }\n \f\n-extern struct obstack permanent_obstack;\n+#include \"ggc.h\"\n \n rtx\n get_fpscr_rtx ()\n@@ -5215,8 +5215,6 @@ static rtx\n get_free_reg (regs_live)\n      HARD_REG_SET regs_live;\n {\n-  rtx reg;\n-\n   if (! TEST_HARD_REG_BIT (regs_live, 1))\n     return gen_rtx_REG (Pmode, 1);\n \n@@ -5238,8 +5236,10 @@ fpscr_set_from_mem (mode, regs_live)\n   enum attr_fp_mode fp_mode = mode;\n   rtx addr_reg = get_free_reg (regs_live);\n \n-  emit_insn ((fp_mode == (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)\n-\t      ? gen_fpu_switch1 : gen_fpu_switch0) (addr_reg));\n+  if (fp_mode == (enum attr_fp_mode) NORMAL_MODE (FP_MODE))\n+    emit_insn (gen_fpu_switch1 (addr_reg));\n+  else\n+    emit_insn (gen_fpu_switch0 (addr_reg));\n }\n \n /* Is the given character a logical line separator for the assembler?  */\n@@ -5361,7 +5361,7 @@ nonpic_symbol_mentioned_p (x)\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx reg;\n {\n   if (GET_CODE (orig) == LABEL_REF"}]}