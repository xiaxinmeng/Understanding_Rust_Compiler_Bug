{"sha": "bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI0ODE3NzJmZWU4NWFkNGYzMmY1NDY4N2Q2ZTBkYWNhYTRlOGUzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T09:08:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T09:08:31Z"}, "message": "[multiple changes]\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Intrinsic_Operator): Add guards to handle\n\tproperly the rare cases where VMS operators are visible through\n\tExtend_System, but the default System is being used and Address is a\n\tprivate type.\n\t* sem_util.adb: Widen predicate Is_VMS_Operator.\n\n2010-06-23  Vincent Celier  <celier@adacore.com>\n\n\t* switch-m.adb (Normalize_Compiler_Switches): Take into account -gnatC\n\tand -gnateS.\n\nFrom-SVN: r161263", "tree": {"sha": "3ab23cac4a000697a1f18501282634000c077718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ab23cac4a000697a1f18501282634000c077718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/comments", "author": null, "committer": null, "parents": [{"sha": "e2cc5258cad87a2a82fd07fe4cffa45eaabfe0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2cc5258cad87a2a82fd07fe4cffa45eaabfe0ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2cc5258cad87a2a82fd07fe4cffa45eaabfe0ce"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "45879d571c620a2b17db1c9d261ff5357214e856", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "patch": "@@ -1,3 +1,16 @@\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Intrinsic_Operator): Add guards to handle\n+\tproperly the rare cases where VMS operators are visible through\n+\tExtend_System, but the default System is being used and Address is a\n+\tprivate type.\n+\t* sem_util.adb: Widen predicate Is_VMS_Operator.\n+\n+2010-06-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* switch-m.adb (Normalize_Compiler_Switches): Take into account -gnatC\n+\tand -gnateS.\n+\n 2010-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* einfo.adb (Has_Foreign_Convention): Consider Intrinsic with"}, {"sha": "c3e6956235cd85f9ba7f18753b8563b0111b8ee8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "patch": "@@ -3474,6 +3474,12 @@ package body Sem_Res is\n             A_Typ := Etype (A);\n             F_Typ := Etype (F);\n \n+            --  Save actual for subsequent check on order dependence,\n+            --  and indicate whether actual is modifiable. For AI05-0144\n+\n+            --  Save_Actual (A,\n+            --    Ekind (F) /= E_In_Parameter or else Is_Access_Type (F_Typ));\n+\n             --  For mode IN, if actual is an entity, and the type of the formal\n             --  has warnings suppressed, then we reset Never_Set_In_Source for\n             --  the calling entity. The reason for this is to catch cases like\n@@ -6751,10 +6757,11 @@ package body Sem_Res is\n    --------------------------------\n \n    procedure Resolve_Intrinsic_Operator  (N : Node_Id; Typ : Entity_Id) is\n-      Btyp : constant Entity_Id := Base_Type (Underlying_Type (Typ));\n-      Op   : Entity_Id;\n-      Arg1 : Node_Id;\n-      Arg2 : Node_Id;\n+      Btyp    : constant Entity_Id := Base_Type (Underlying_Type (Typ));\n+      Op      : Entity_Id;\n+      Orig_Op : constant Entity_Id := Entity (N);\n+      Arg1    : Node_Id;\n+      Arg2    : Node_Id;\n \n    begin\n       --  We must preserve the original entity in a generic setting, so that\n@@ -6786,8 +6793,13 @@ package body Sem_Res is\n             Arg2 := Unchecked_Convert_To (Btyp, Right_Opnd (N));\n          end if;\n \n-         Save_Interps (Left_Opnd (N),  Expression (Arg1));\n-         Save_Interps (Right_Opnd (N), Expression (Arg2));\n+         if Nkind (Arg1) = N_Type_Conversion then\n+            Save_Interps (Left_Opnd (N),  Expression (Arg1));\n+         end if;\n+\n+         if Nkind (Arg2) = N_Type_Conversion then\n+            Save_Interps (Right_Opnd (N), Expression (Arg2));\n+         end if;\n \n          Set_Left_Opnd  (N, Arg1);\n          Set_Right_Opnd (N, Arg2);\n@@ -6800,19 +6812,31 @@ package body Sem_Res is\n         or else Typ /= Etype (Right_Opnd (N))\n       then\n          --  Add explicit conversion where needed, and save interpretations in\n-         --  case operands are overloaded.\n+         --  case operands are overloaded. If the context is a VMS operation,\n+         --  assert that the conversion is legal (the operands have the proper\n+         --  types to select the VMS intrinsic). Note that in rare cases the\n+         --  VMS operators may be visible, but the default System is being used\n+         --  and Address is a private type.\n \n          Arg1 := Convert_To (Typ, Left_Opnd  (N));\n          Arg2 := Convert_To (Typ, Right_Opnd (N));\n \n          if Nkind (Arg1) = N_Type_Conversion then\n             Save_Interps (Left_Opnd (N), Expression (Arg1));\n+\n+            if Is_VMS_Operator (Orig_Op) then\n+               Set_Conversion_OK (Arg1);\n+            end if;\n          else\n             Save_Interps (Left_Opnd (N), Arg1);\n          end if;\n \n          if Nkind (Arg2) = N_Type_Conversion then\n             Save_Interps (Right_Opnd (N), Expression (Arg2));\n+\n+            if Is_VMS_Operator (Orig_Op) then\n+               Set_Conversion_OK (Arg2);\n+            end if;\n          else\n             Save_Interps (Right_Opnd (N), Arg2);\n          end if;\n@@ -7941,7 +7965,9 @@ package body Sem_Res is\n \n    begin\n       Resolve (L, B_Typ);\n+      --  Check_Order_Dependence;   --  For AI05-0144\n       Resolve (R, B_Typ);\n+      --  Check_Order_Dependence;   --  For AI05-0144\n \n       --  Check for issuing warning for always False assert/check, this happens\n       --  when assertions are turned off, in which case the pragma Assert/Check"}, {"sha": "47e681a428f931b95030cbbf3144958eaced65aa", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "patch": "@@ -7220,8 +7220,12 @@ package body Sem_Util is\n \n       return Ekind (Op) = E_Function\n         and then Is_Intrinsic_Subprogram (Op)\n-        and then Present_System_Aux\n-        and then Scope (Op) = System_Aux_Id;\n+        and then\n+          ((Present_System_Aux\n+            and then Scope (Op) = System_Aux_Id)\n+           or else\n+           (True_VMS_Target\n+             and then Chars (Scope (Scope (Op))) = Name_System));\n    end Is_VMS_Operator;\n \n    -----------------"}, {"sha": "b549b2cac693f4d148e00d7a7312877fcf843011", "filename": "gcc/ada/switch-m.adb", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fswitch-m.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb481772fee85ad4f32f54687d6e0dacaa4e8e3a/gcc%2Fada%2Fswitch-m.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-m.adb?ref=bb481772fee85ad4f32f54687d6e0dacaa4e8e3a", "patch": "@@ -71,7 +71,7 @@ package body Switch.M is\n       procedure Add_Switch_Component (S : String);\n       --  Add a new String_Access component in Switches. If a string equal\n       --  to S is already stored in the table Normalized_Switches, use it.\n-      --  Other wise add a new component to the table.\n+      --  Otherwise add a new component to the table.\n \n       --------------------------\n       -- Add_Switch_Component --\n@@ -215,10 +215,10 @@ package body Switch.M is\n \n                   --  One-letter switches\n \n-                  when 'a' | 'A' | 'b' | 'c' | 'D' | 'E' | 'f' | 'F' |\n-                       'g' | 'h' | 'H' | 'l' | 'L' | 'n' | 'N' | 'o' |\n-                       'O' | 'p' | 'P' | 'q' | 'Q' | 'r' | 's' | 't' |\n-                       'u' | 'U' | 'v' | 'x' | 'X' | 'Z' =>\n+                  when 'a' | 'A' | 'b' | 'c' | 'C' | 'D' | 'E' | 'f' |\n+                       'F' | 'g' | 'h' | 'H' | 'l' | 'L' | 'n' | 'N' |\n+                       'o' | 'O' | 'p' | 'P' | 'q' | 'Q' | 'r' | 's' |\n+                       't' | 'u' | 'U' | 'v' | 'x' | 'X' | 'Z' =>\n                      Storing (First_Stored) := C;\n                      Add_Switch_Component\n                        (Storing (Storing'First .. First_Stored));\n@@ -268,16 +268,18 @@ package body Switch.M is\n \n                   when 'e' =>\n \n-                     --  Store -gnateD, -gnatep= and -gnateG in the ALI file.\n-                     --  The other -gnate switches do not need to be stored.\n+                     --  Store -gnateD, -gnatep=, -gnateG and -gnateS in the\n+                     --  ALI file. The other -gnate switches do not need to be\n+                     --  stored.\n \n                      Storing (First_Stored) := 'e';\n                      Ptr := Ptr + 1;\n \n                      if Ptr > Max\n                        or else (Switch_Chars (Ptr) /= 'D'\n                                  and then Switch_Chars (Ptr) /= 'G'\n-                                 and then Switch_Chars (Ptr) /= 'p')\n+                                 and then Switch_Chars (Ptr) /= 'p'\n+                                 and then Switch_Chars (Ptr) /= 'S')\n                      then\n                         Last := 0;\n                         return;\n@@ -322,6 +324,9 @@ package body Switch.M is\n \n                      elsif Switch_Chars (Ptr) = 'G' then\n                         Add_Switch_Component (\"-gnateG\");\n+\n+                     elsif Switch_Chars (Ptr) = 'S' then\n+                        Add_Switch_Component (\"-gnateS\");\n                      end if;\n \n                      return;"}]}