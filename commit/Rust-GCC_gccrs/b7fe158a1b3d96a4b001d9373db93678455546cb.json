{"sha": "b7fe158a1b3d96a4b001d9373db93678455546cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmZTE1OGExYjNkOTZhNGIwMDFkOTM3M2RiOTM2Nzg0NTU1NDZjYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-09T12:22:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-09T12:22:10Z"}, "message": "gimple-match.h (gimple_match_op::resimplify): New.\n\n2019-07-09  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-match.h (gimple_match_op::resimplify): New.\n\t(gimple_resimplify1, gimple_resimplify2, gimple_resimplify3,\n\tgimple_resimplify4, gimple_resimplify5): Remove.\n\t* gimple-match-head.c (gimple_resimplify1, gimple_resimplify2,\n\tgimple_resimplify3, gimple_resimplify4, gimple_resimplify5):\n\tMake static.\n\t(gimple_match_op::resimplify): New.\n\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Valueize\n\taccording to availability.  Use gimple_match_op::resimplify.\n\nFrom-SVN: r273302", "tree": {"sha": "bb6835b4985dbd6127ae5130c9715b96e3e08885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb6835b4985dbd6127ae5130c9715b96e3e08885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7fe158a1b3d96a4b001d9373db93678455546cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fe158a1b3d96a4b001d9373db93678455546cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fe158a1b3d96a4b001d9373db93678455546cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fe158a1b3d96a4b001d9373db93678455546cb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "495079550e135c7ad0605e9c549202c35625cde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495079550e135c7ad0605e9c549202c35625cde7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495079550e135c7ad0605e9c549202c35625cde7"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "271a27abfc68e98c12ebd478cb18850587cb1d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7fe158a1b3d96a4b001d9373db93678455546cb", "patch": "@@ -1,3 +1,15 @@\n+2019-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-match.h (gimple_match_op::resimplify): New.\n+\t(gimple_resimplify1, gimple_resimplify2, gimple_resimplify3,\n+\tgimple_resimplify4, gimple_resimplify5): Remove.\n+\t* gimple-match-head.c (gimple_resimplify1, gimple_resimplify2,\n+\tgimple_resimplify3, gimple_resimplify4, gimple_resimplify5):\n+\tMake static.\n+\t(gimple_match_op::resimplify): New.\n+\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Valueize\n+\taccording to availability.  Use gimple_match_op::resimplify. \n+\n 2019-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ira-emit.c (emit_moves): Skip DEBUG_INSNs when setting the location."}, {"sha": "53278168a59f5ac10ce6760f04fd42589a0792e7", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=b7fe158a1b3d96a4b001d9373db93678455546cb", "patch": "@@ -57,6 +57,16 @@ static bool gimple_simplify (gimple_match_op *, gimple_seq *, tree (*)(tree),\n \t\t\t     code_helper, tree, tree, tree, tree, tree);\n static bool gimple_simplify (gimple_match_op *, gimple_seq *, tree (*)(tree),\n \t\t\t     code_helper, tree, tree, tree, tree, tree, tree);\n+static bool gimple_resimplify1 (gimple_seq *, gimple_match_op *,\n+\t\t\t\ttree (*)(tree));\n+static bool gimple_resimplify2 (gimple_seq *, gimple_match_op *,\n+\t\t\t\ttree (*)(tree));\n+static bool gimple_resimplify3 (gimple_seq *, gimple_match_op *,\n+\t\t\t\ttree (*)(tree));\n+static bool gimple_resimplify4 (gimple_seq *, gimple_match_op *,\n+\t\t\t\ttree (*)(tree));\n+static bool gimple_resimplify5 (gimple_seq *, gimple_match_op *,\n+\t\t\t\ttree (*)(tree));\n \n const unsigned int gimple_match_op::MAX_NUM_OPS;\n \n@@ -173,7 +183,7 @@ maybe_resimplify_conditional_op (gimple_seq *seq, gimple_match_op *res_op,\n    RES_OP with a simplified and/or canonicalized result and\n    returns whether any change was made.  */\n \n-bool\n+static bool\n gimple_resimplify1 (gimple_seq *seq, gimple_match_op *res_op,\n \t\t    tree (*valueize)(tree))\n {\n@@ -233,7 +243,7 @@ gimple_resimplify1 (gimple_seq *seq, gimple_match_op *res_op,\n    RES_OP with a simplified and/or canonicalized result and\n    returns whether any change was made.  */\n \n-bool\n+static bool\n gimple_resimplify2 (gimple_seq *seq, gimple_match_op *res_op,\n \t\t    tree (*valueize)(tree))\n {\n@@ -305,7 +315,7 @@ gimple_resimplify2 (gimple_seq *seq, gimple_match_op *res_op,\n    RES_OP with a simplified and/or canonicalized result and\n    returns whether any change was made.  */\n \n-bool\n+static bool\n gimple_resimplify3 (gimple_seq *seq, gimple_match_op *res_op,\n \t\t    tree (*valueize)(tree))\n {\n@@ -376,7 +386,7 @@ gimple_resimplify3 (gimple_seq *seq, gimple_match_op *res_op,\n    RES_OP with a simplified and/or canonicalized result and\n    returns whether any change was made.  */\n \n-bool\n+static bool\n gimple_resimplify4 (gimple_seq *seq, gimple_match_op *res_op,\n \t\t    tree (*valueize)(tree))\n {\n@@ -417,7 +427,7 @@ gimple_resimplify4 (gimple_seq *seq, gimple_match_op *res_op,\n    RES_OP with a simplified and/or canonicalized result and\n    returns whether any change was made.  */\n \n-bool\n+static bool\n gimple_resimplify5 (gimple_seq *seq, gimple_match_op *res_op,\n \t\t    tree (*valueize)(tree))\n {\n@@ -439,6 +449,30 @@ gimple_resimplify5 (gimple_seq *seq, gimple_match_op *res_op,\n   return false;\n }\n \n+/* Match and simplify the toplevel valueized operation THIS.\n+   Replaces THIS with a simplified and/or canonicalized result and\n+   returns whether any change was made.  */\n+\n+bool\n+gimple_match_op::resimplify (gimple_seq *seq, tree (*valueize)(tree))\n+{\n+  switch (num_ops)\n+    {\n+    case 1:\n+      return gimple_resimplify1 (seq, this, valueize);\n+    case 2:\n+      return gimple_resimplify2 (seq, this, valueize);\n+    case 3:\n+      return gimple_resimplify3 (seq, this, valueize);\n+    case 4:\n+      return gimple_resimplify4 (seq, this, valueize);\n+    case 5:\n+      return gimple_resimplify5 (seq, this, valueize);\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* If in GIMPLE the operation described by RES_OP should be single-rhs,\n    build a GENERIC tree for that expression and update RES_OP accordingly.  */\n "}, {"sha": "ad7f73040f12fc2876e98319688488cde01cba83", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=b7fe158a1b3d96a4b001d9373db93678455546cb", "patch": "@@ -105,6 +105,8 @@ struct gimple_match_op\n \n   tree op_or_null (unsigned int) const;\n \n+  bool resimplify (gimple_seq *, tree (*)(tree));\n+\n   /* The maximum value of NUM_OPS.  */\n   static const unsigned int MAX_NUM_OPS = 5;\n \n@@ -331,11 +333,6 @@ extern tree (*mprts_hook) (gimple_match_op *);\n \n bool gimple_simplify (gimple *, gimple_match_op *, gimple_seq *,\n \t\t      tree (*)(tree), tree (*)(tree));\n-bool gimple_resimplify1 (gimple_seq *, gimple_match_op *, tree (*)(tree));\n-bool gimple_resimplify2 (gimple_seq *, gimple_match_op *, tree (*)(tree));\n-bool gimple_resimplify3 (gimple_seq *, gimple_match_op *, tree (*)(tree));\n-bool gimple_resimplify4 (gimple_seq *, gimple_match_op *, tree (*)(tree));\n-bool gimple_resimplify5 (gimple_seq *, gimple_match_op *, tree (*)(tree));\n tree maybe_push_res_to_seq (gimple_match_op *, gimple_seq *,\n \t\t\t    tree res = NULL_TREE);\n void maybe_build_generic_op (gimple_match_op *);"}, {"sha": "9186f15e39b2cc7373b7c6db180d66892514826a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fe158a1b3d96a4b001d9373db93678455546cb/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b7fe158a1b3d96a4b001d9373db93678455546cb", "patch": "@@ -1968,21 +1968,25 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n        RCODE (OPS...).\n      So first simplify and lookup this expression to see if it\n      is already available.  */\n-  mprts_hook = vn_lookup_simplify_result;\n+  /* For simplification valueize.  */\n+  unsigned i;\n+  for (i = 0; i < res_op->num_ops; ++i)\n+    if (TREE_CODE (res_op->ops[i]) == SSA_NAME)\n+      {\n+\ttree tem = vn_valueize (res_op->ops[i]);\n+\tif (!tem)\n+\t  break;\n+\tres_op->ops[i] = tem;\n+      }\n+  /* If valueization of an operand fails (it is not available), skip\n+     simplification.  */\n   bool res = false;\n-  switch (TREE_CODE_LENGTH ((tree_code) res_op->code))\n+  if (i == res_op->num_ops)\n     {\n-    case 1:\n-      res = gimple_resimplify1 (NULL, res_op, vn_valueize);\n-      break;\n-    case 2:\n-      res = gimple_resimplify2 (NULL, res_op, vn_valueize);\n-      break;\n-    case 3:\n-      res = gimple_resimplify3 (NULL, res_op, vn_valueize);\n-      break;\n+      mprts_hook = vn_lookup_simplify_result;\n+      res = res_op->resimplify (NULL, vn_valueize);\n+      mprts_hook = NULL;\n     }\n-  mprts_hook = NULL;\n   gimple *new_stmt = NULL;\n   if (res\n       && gimple_simplified_result_is_gimple_val (res_op))"}]}