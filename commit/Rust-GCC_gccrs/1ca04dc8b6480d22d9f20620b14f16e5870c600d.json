{"sha": "1ca04dc8b6480d22d9f20620b14f16e5870c600d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhMDRkYzhiNjQ4MGQyMmQ5ZjIwNjIwYjE0ZjE2ZTU4NzBjNjAwZA==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2000-09-13T18:13:49Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-09-13T18:13:49Z"}, "message": "avr.h (ASSEMBLER_DIALECT): New macro declared.\n\n\t* config/avr/avr.h (ASSEMBLER_DIALECT): New macro declared.\n\t* config/avr/avr.md (*movstrqi_insn): Cleanup output template.\n\t(*clrstrqi): Likewise.\n\t(xorhi3,xorsi3,absqi2): Likewise.\n\t(one_cmplhi2,one_cmplsi2): Likewise.\n\t(addsi3): Two stupid constraint alternatives removed.\n\t(extendhisi2): Use `movw' for enhanced avr cores.\n\t(zero_extendhisi2): Likewise.\n\nFrom-SVN: r36390", "tree": {"sha": "f6206ef381a3c388a03f99db4850173c3765b9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6206ef381a3c388a03f99db4850173c3765b9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ca04dc8b6480d22d9f20620b14f16e5870c600d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca04dc8b6480d22d9f20620b14f16e5870c600d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca04dc8b6480d22d9f20620b14f16e5870c600d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca04dc8b6480d22d9f20620b14f16e5870c600d/comments", "author": null, "committer": null, "parents": [{"sha": "18a53ffedb9c36db0b505afd249b02056156448d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a53ffedb9c36db0b505afd249b02056156448d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a53ffedb9c36db0b505afd249b02056156448d"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "ef68665074b4682968342ba77acf63ad5da63c3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ca04dc8b6480d22d9f20620b14f16e5870c600d", "patch": "@@ -1,3 +1,14 @@\n+Tue Sep 12 13:51:13 2000  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.h (ASSEMBLER_DIALECT): New macro declared.\n+\t* config/avr/avr.md (*movstrqi_insn): Cleanup output template.\n+\t(*clrstrqi): Likewise.\n+\t(xorhi3,xorsi3,absqi2): Likewise.\n+\t(one_cmplhi2,one_cmplsi2): Likewise.\n+\t(addsi3): Two stupid constraint alternatives removed.\n+\t(extendhisi2): Use `movw' for enhanced avr cores.\n+\t(zero_extendhisi2): Likewise.\n+\n Wed Sep 13 02:31:23 EDT 2000  John Wehle  (john@feith.com)\n \n \t* alias.c (find_base_term): Use frame_pointer_rtx"}, {"sha": "6c34cf323b7692240d72f936b0d4d3c36355c07b", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=1ca04dc8b6480d22d9f20620b14f16e5870c600d", "patch": "@@ -42,8 +42,6 @@ extern int    mask_one_bit_p              PARAMS ((HOST_WIDE_INT mask));\n extern void   gas_output_limited_string PARAMS ((FILE *file, const char *str));\n extern void   gas_output_ascii          PARAMS ((FILE *file, const char *str,\n \t\t\t\t\t\t\t size_t length));\n-\n-\n #ifdef TREE_CODE\n extern void   asm_output_external          PARAMS ((FILE *file, tree decl,\n \t\t\t\t\t\t   char *name));"}, {"sha": "fca29f9ed53cf9a5febc36d2ff5750551c09fe81", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1ca04dc8b6480d22d9f20620b14f16e5870c600d", "patch": "@@ -4666,5 +4666,3 @@ output_reload_insisf (insn, operands, len)\n     }\n   return \"\";\n }\n-\n-"}, {"sha": "48fea8bd678c5d4225f8be572b68812419218bb4", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1ca04dc8b6480d22d9f20620b14f16e5870c600d", "patch": "@@ -2656,6 +2656,31 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n    formats.  In that case, the various `tm.h' files can define these\n    macros differently.  */\n \n+#define ASSEMBLER_DIALECT AVR_ENHANCED\n+/* If your target supports multiple dialects of assembler language\n+  (such as different opcodes), define this macro as a C expression\n+  that gives the numeric index of the assembler language dialect to\n+  use, with zero as the first variant.\n+\n+  If this macro is defined, you may use constructs of the form\n+  `{option0|option1|option2...}' in the output templates of patterns\n+  (*note Output Template::.) or in the first argument of\n+  `asm_fprintf'.  This construct outputs `option0', `option1' or\n+  `option2', etc., if the value of `ASSEMBLER_DIALECT' is zero, one\n+  or two, etc.  Any special characters within these strings retain\n+  their usual meaning.\n+\n+  If you do not define this macro, the characters `{', `|' and `}'\n+  do not have any special meaning when used in templates or operands\n+  to `asm_fprintf'.\n+\n+  Define the macros `REGISTER_PREFIX', `LOCAL_LABEL_PREFIX',\n+  `USER_LABEL_PREFIX' and `IMMEDIATE_PREFIX' if you can express the\n+  variations in assembler language syntax with that mechanism.\n+  Define `ASSEMBLER_DIALECT' and use the `{option0|option1}' syntax\n+  if the syntax variant are larger and involve such things as\n+  different opcodes or operand order.  */\n+\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n   if (REGNO > 31)\t\t\t\t\\"}, {"sha": "fbd00a56ef8d1474f8e5056863d1f6589dfab023", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca04dc8b6480d22d9f20620b14f16e5870c600d/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1ca04dc8b6480d22d9f20620b14f16e5870c600d", "patch": "@@ -340,8 +340,7 @@\n    (clobber (match_dup 0))\n    (clobber (match_dup 1))]\n   \"\"\n-  \"\n-\tld __tmp_reg__,%a1+\n+  \"ld __tmp_reg__,%a1+\n \tst %a0+,__tmp_reg__\n \tdec %2\n \tbrne _PC_-8\"\n@@ -409,8 +408,7 @@\n    (clobber (match_dup 1))\n    (clobber (match_dup 0))]\n   \"\"\n-  \"\n-\tst %a0+,__zero_reg__\n+  \"st %a0+,__zero_reg__\n         dec %1\n \tbrne _PC_-6\"\n   [(set_attr \"length\" \"3\")\n@@ -555,24 +553,21 @@\n   [(set_attr \"length\" \"2,1,1,2,3,3\")\n    (set_attr \"cc\" \"set_n,set_czn,set_czn,set_czn,set_n,set_n\")])\n \n-;; TODO: use \"movw\" if available\n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,!w,!w,d,r,r,&*!w,&*!w\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,!w,!w,d,r,r\")\n \t  (plus:SI\n-\t   (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r\")\n-\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,I,J,i,P,N,#I,#J\")))]\n+\t   (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,I,J,i,P,N\")))]\n   \"\"\n   \"@\n \tadd %A0,%A2\\;adc %B0,%B2\\;adc %C0,%C2\\;adc %D0,%D2\n \tadiw %0,%2\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\n \tsbiw %0,%n2\\;sbc %C0,__zero_reg__\\;sbc %D0,__zero_reg__\n \tsubi %0,lo8(-(%2))\\;sbci %B0,hi8(-(%2))\\;sbci %C0,hlo8(-(%2))\\;sbci %D0,hhi8(-(%2))\n \tsec\\;adc %A0,__zero_reg__\\;adc %B0,__zero_reg__\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\n-\tsec\\;sbc %A0,__zero_reg__\\;sbc %B0,__zero_reg__\\;sbc %C0,__zero_reg__\\;sbc %D0,__zero_reg__\n-\tmov %A0,%A1\\;mov %B0,%B1\\;mov %C0,%C1\\;mov %D0,%D1\\;adiw %0,%2\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\n-\tmov %A0,%A1\\;mov %B0,%B1\\;mov %C0,%C1\\;mov %D0,%D1\\;sbiw %0,%n2\\;sbc %C0,__zero_reg__\\;sbc %D0,__zero_reg__\"\n-  [(set_attr \"length\" \"4,3,3,4,5,5,7,7\")\n-   (set_attr \"cc\" \"set_n,set_n,set_czn,set_czn,set_n,set_n,set_n,set_czn\")])\n+\tsec\\;sbc %A0,__zero_reg__\\;sbc %B0,__zero_reg__\\;sbc %C0,__zero_reg__\\;sbc %D0,__zero_reg__\"\n+  [(set_attr \"length\" \"4,3,3,4,5,5\")\n+   (set_attr \"cc\" \"set_n,set_n,set_czn,set_czn,set_n,set_n\")])\n \n ;-----------------------------------------------------------------------------\n ; sub bytes\n@@ -852,7 +847,8 @@\n         (xor:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n                 (match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"eor %0,%2\\;eor %B0,%B2\"\n+  \"eor %0,%2\n+\teor %B0,%B2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_n\")])\n \n@@ -971,7 +967,8 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n         (abs:QI (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"\"\n-  \"sbrc %0,7\\;neg %0\"\n+  \"sbrc %0,7\n+\tneg %0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1043,15 +1040,19 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (not:HI (match_operand:HI 1 \"register_operand\" \"0\")))]\n   \"\"\n-  \"com %0\\;com %B0\"\n+  \"com %0\n+\tcom %B0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (not:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n-  \"com %0\\;com %B0\\;com %C0\\;com %D0\"\n+  \"com %0\n+\tcom %B0\n+\tcom %C0\n+\tcom %D0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_n\")])\n \n@@ -1078,15 +1079,22 @@\n   [(set_attr \"length\" \"5,6\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n-;; TODO: use \"movw\" if available\n (define_insn \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\"               \"=r,&r\")\n         (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"0,*r\")))]\n   \"\"\n   \"@\n \tclr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\n-\tmov %A0,%A1\\;mov %B0,%B1\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n-  [(set_attr \"length\" \"4,6\")\n+\t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%A1}\\;clr %C0\\;sbrc %B0,7\\;com %C0\\;mov %D0,%C0\"\n+  [(set (attr \"length\")\n+\t(if_then_else\n+\t (eq (symbol_ref \"AVR_ENHANCED\") (const_int 0))\n+\t (if_then_else (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t       (const_int 4)\n+\t\t       (const_int 6))\n+\t (if_then_else (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t       (const_int 4)\n+\t\t       (const_int 5))))\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n ;; xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x\n@@ -1112,15 +1120,22 @@\n   [(set_attr \"length\" \"3,4\")\n    (set_attr \"cc\" \"set_n,set_n\")])\n \n-;; TODO: use \"movw\" if available\n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n         (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0,*r\")))]\n   \"\"\n   \"@\n \tclr %C0\\;clr %D0\n-\tmov %A0,%A1\\;mov %B0,%B1\\;clr %C0\\;clr %D0\"\n-  [(set_attr \"length\" \"2,4\")\n+\t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%B0}\\;clr %C0\\;clr %D0\"\n+  [(set (attr \"length\")\n+\t(if_then_else\n+\t (eq (symbol_ref \"AVR_ENHANCED\") (const_int 0))\n+\t (if_then_else (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t       (const_int 2)\n+\t\t       (const_int 4))\n+\t (if_then_else (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t       (const_int 2)\n+\t\t       (const_int 3))))\n    (set_attr \"cc\" \"set_n,set_n\")])\n \n ;;<=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=>"}]}