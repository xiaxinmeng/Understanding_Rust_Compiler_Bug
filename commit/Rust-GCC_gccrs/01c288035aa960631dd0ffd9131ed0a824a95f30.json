{"sha": "01c288035aa960631dd0ffd9131ed0a824a95f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjMjg4MDM1YWE5NjA2MzFkZDBmZmQ5MTMxZWQwYTgyNGE5NWYzMA==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-10-02T10:16:31Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-10-02T10:17:00Z"}, "message": "aarch64: ilp32 testsuite fixes\n\nThis fixes test failures on ilp32 introduced in\nr11-3032-gd4febc75e8dfab23bd3132d5747eded918f85107.\n\nThe assembler checks in extend-syntax.c simply needed adjusting for\n32-bit pointers.\n\nIt appears the subsp.c test has never passed on ILP32 due to a missed\noptimisation there. Since this isn't a code quality regression, disable\nthat check on ILP32.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/extend-syntax.c: Fix assembler checks for\n\tilp32, disable check-function-bodies on ilp32.\n\t* gcc.target/aarch64/subsp.c: Only check second scan-assembler\n\ton lp64 since the code on ilp32 is missing the optimization\n\tneeded for this test to pass.", "tree": {"sha": "55f50f82032d5b5355dd993c95d33a7e6f5452c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f50f82032d5b5355dd993c95d33a7e6f5452c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c288035aa960631dd0ffd9131ed0a824a95f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c288035aa960631dd0ffd9131ed0a824a95f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c288035aa960631dd0ffd9131ed0a824a95f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c288035aa960631dd0ffd9131ed0a824a95f30/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8dcbea5d2fb17dca3a7de97f15fc49997222365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dcbea5d2fb17dca3a7de97f15fc49997222365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dcbea5d2fb17dca3a7de97f15fc49997222365"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "1bfcdb59dde449ff18b6f443caf3c3f990ec9208", "filename": "gcc/testsuite/gcc.target/aarch64/extend-syntax.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c288035aa960631dd0ffd9131ed0a824a95f30/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c288035aa960631dd0ffd9131ed0a824a95f30/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c?ref=01c288035aa960631dd0ffd9131ed0a824a95f30", "patch": "@@ -20,6 +20,7 @@ unsigned long long *add1(unsigned long long *p, unsigned x)\n */\n unsigned long long add2(unsigned long long x, unsigned y)\n {\n+  /* { dg-final { scan-assembler-times \"add\\tx0, x0, w1, uxtw\" 1 { target ilp32 } } } */\n   return x + y;\n }\n \n@@ -34,6 +35,9 @@ double *add3(double *p, int x)\n   return p + x;\n }\n \n+// add1 and add3 should both generate this on ILP32:\n+/* { dg-final { scan-assembler-times \"add\\tw0, w0, w1, lsl 3\" 2 { target ilp32 } } } */\n+\n // Hits *sub_zero_extendsi_di (*sub_<optab><ALLX:mode>_<GPI:mode>).\n /*\n ** sub1:\n@@ -42,6 +46,7 @@ double *add3(double *p, int x)\n */\n unsigned long long sub1(unsigned long long x, unsigned n)\n {\n+    /* { dg-final { scan-assembler-times \"sub\\tx0, x0, w1, uxtw\" 1 { target ilp32 } } } */\n     return x - n;\n }\n \n@@ -67,6 +72,9 @@ double *sub3(double *p, int n)\n   return p - n;\n }\n \n+// sub2 and sub3 should both generate this on ILP32:\n+/* { dg-final { scan-assembler-times \"sub\\tw0, w0, w1, lsl 3\" 2 { target ilp32 } } } */\n+\n // Hits *adds_zero_extendsi_di (*adds_<optab><ALLX:mode>_<GPI:mode>).\n int adds1(unsigned long long x, unsigned y)\n {\n@@ -97,7 +105,8 @@ int subs1(unsigned long long x, unsigned y)\n unsigned long long *w;\n int subs2(unsigned long long *x, int y)\n {\n-  /* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw 3\" 1 } } */\n+  /* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw 3\" 1 { target lp64 } } } */\n+  /* { dg-final { scan-assembler-times \"subs\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" 1 { target ilp32 } } } */\n   unsigned long long *t = x - y;\n   w = t;\n   return !!t;\n@@ -117,4 +126,4 @@ int cmp2(unsigned long long x, int y)\n   return x == ((unsigned long long)y << 3);\n }\n \n-/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target lp64 } } } */"}, {"sha": "e7f61e0799b3c230cc9a3e5c8365ca2f3aecca5a", "filename": "gcc/testsuite/gcc.target/aarch64/subsp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c288035aa960631dd0ffd9131ed0a824a95f30/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c288035aa960631dd0ffd9131ed0a824a95f30/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c?ref=01c288035aa960631dd0ffd9131ed0a824a95f30", "patch": "@@ -16,4 +16,4 @@ f2 (int *x, int y)\n }\n \n /* { dg-final { scan-assembler \"sub\\tsp, sp, x\\[0-9\\]*\\n\" } } */\n-/* { dg-final { scan-assembler \"sub\\tsp, sp, w\\[0-9\\]*, sxtw 4\\n\" } } */\n+/* { dg-final { scan-assembler \"sub\\tsp, sp, w\\[0-9\\]*, sxtw 4\\n\" { target lp64 } } } */"}]}