{"sha": "527cab2096ca51991db9dd06cccf0ee2bcb16b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3Y2FiMjA5NmNhNTE5OTFkYjlkZDA2Y2NjZjBlZTJiY2IxNmI5Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-01-25T03:57:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-01-25T03:57:30Z"}, "message": "builtins.c (fold_builtin_carg): New.\n\n\t* builtins.c (fold_builtin_carg): New.\n\t(fold_builtin_1): Use it.\n\ntestsuite:\n\t* gcc.dg/builtins-20.c: Test builtin carg.\n\nFrom-SVN: r121159", "tree": {"sha": "e71f14cf38a4ea58b59e83a908432bc1c7fe652e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71f14cf38a4ea58b59e83a908432bc1c7fe652e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/527cab2096ca51991db9dd06cccf0ee2bcb16b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527cab2096ca51991db9dd06cccf0ee2bcb16b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527cab2096ca51991db9dd06cccf0ee2bcb16b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527cab2096ca51991db9dd06cccf0ee2bcb16b96/comments", "author": null, "committer": null, "parents": [{"sha": "9ea6c4a4b7e6622ab4bf6cd706476dced66f929f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea6c4a4b7e6622ab4bf6cd706476dced66f929f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea6c4a4b7e6622ab4bf6cd706476dced66f929f"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "f0167fa7df61ce05bbfbd8b8a3c4d0919b21dfa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=527cab2096ca51991db9dd06cccf0ee2bcb16b96", "patch": "@@ -1,3 +1,8 @@\n+2007-01-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_carg): New.\n+\t(fold_builtin_1): Use it.\n+\n 2007-01-24  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (cgraph_decide_inlining): Initialize initial_insns."}, {"sha": "19e7d345e53df3a310ed8bcf404c8128f4671689", "filename": "gcc/builtins.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=527cab2096ca51991db9dd06cccf0ee2bcb16b96", "patch": "@@ -9058,6 +9058,29 @@ fold_builtin_fmin_fmax (tree arglist, tree type, bool max)\n   return NULL_TREE;\n }\n \n+/* Fold a call to builtin carg(a+bi) -> atan2(b,a).  */\n+\n+static tree\n+fold_builtin_carg(tree arglist, tree type)\n+{\n+  if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n+    {\n+      tree atan2_fn = mathfn_built_in (type, BUILT_IN_ATAN2);\n+      \n+      if (atan2_fn)\n+        {\n+\t  tree arg = builtin_save_expr (TREE_VALUE (arglist));\n+\t  tree r_arg = fold_build1 (REALPART_EXPR, type, arg);\n+\t  tree i_arg = fold_build1 (IMAGPART_EXPR, type, arg);\n+\t  tree newarglist = tree_cons (NULL_TREE, i_arg,\n+\t\t\t\t       build_tree_list (NULL_TREE, r_arg));\n+\t  return build_function_call_expr (atan2_fn, newarglist);\n+\t}\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n /* Fold a call to __builtin_isnan(), __builtin_isinf, __builtin_finite.\n    EXP is the CALL_EXPR for the call.  */\n \n@@ -9339,6 +9362,9 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     CASE_FLT_FN (BUILT_IN_CABS):\n       return fold_builtin_cabs (arglist, type, fndecl);\n \n+    CASE_FLT_FN (BUILT_IN_CARG):\n+      return fold_builtin_carg (arglist, type);\n+\n     CASE_FLT_FN (BUILT_IN_SQRT):\n       return fold_builtin_sqrt (arglist, type);\n "}, {"sha": "a2e86f4ba579719cc99b765b091493b6802807df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=527cab2096ca51991db9dd06cccf0ee2bcb16b96", "patch": "@@ -1,3 +1,7 @@\n+2007-01-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-20.c: Test builtin carg.\n+\n 2007-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27416"}, {"sha": "be3c81daea31fe3e733dc5c353699635b9ae21e9", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527cab2096ca51991db9dd06cccf0ee2bcb16b96/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=527cab2096ca51991db9dd06cccf0ee2bcb16b96", "patch": "@@ -16,29 +16,35 @@ extern double cos (double);\n extern double sin (double);\n extern double tan (double);\n extern double fabs (double);\n+extern double atan2 (double, double);\n extern double copysign (double, double);\n extern double fmin (double, double);\n extern double fmax (double, double);\n extern double hypot (double, double);\n extern double pure (double) __attribute__ ((__pure__));\n+extern double carg (__complex__ double);\n extern float cosf (float);\n extern float sinf (float);\n extern float tanf (float);\n extern float fabsf (float);\n+extern float atan2f (float, float);\n extern float copysignf (float, float);\n extern float fminf (float, float);\n extern float fmaxf (float, float);\n extern float hypotf (float, float);\n extern float puref (float) __attribute__ ((__pure__));\n+extern float cargf (__complex__ float);\n extern long double cosl (long double);\n extern long double sinl (long double);\n extern long double tanl (long double);\n extern long double fabsl (long double);\n+extern long double atan2l (long double, long double);\n extern long double copysignl (long double, long double);\n extern long double fminl (long double, long double);\n extern long double fmaxl (long double, long double);\n extern long double hypotl (long double, long double);\n extern long double purel (long double) __attribute__ ((__pure__));\n+extern long double cargl (__complex__ long double);\n \n extern void link_error(void);\n \n@@ -187,6 +193,12 @@ void test2(double x, double y)\n     link_error ();\n }\n \n+void test3(__complex__ double z)\n+{\n+  if (carg(z) != atan2(__imag__ z, __real__ z))\n+    link_error ();\n+}\n+\n void test1f(float x)\n {\n   if (cosf(x) != cosf(-x))\n@@ -334,6 +346,11 @@ void test2f(float x, float y)\n     link_error ();\n }\n \n+void test3f(__complex__ float z)\n+{\n+  if (cargf(z) != atan2f(__imag__ z, __real__ z))\n+    link_error ();\n+}\n \n void test1l(long double x)\n {\n@@ -482,6 +499,12 @@ void test2l(long double x, long double y)\n     link_error ();\n }\n \n+void test3l(__complex__ long double z)\n+{\n+  if (cargl(z) != atan2l(__imag__ z, __real__ z))\n+    link_error ();\n+}\n+\n int main()\n {\n   test1 (1.0);"}]}