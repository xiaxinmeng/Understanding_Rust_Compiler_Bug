{"sha": "4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "node_id": "C_kwDOANBUbNoAKDRjNmFmYmJkNDhmMGM0MGRkZjk0OWJjNDAzZDliZDVmNWUxNDIwNGY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-05T16:18:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:25:42Z"}, "message": "c++: clean up ref-extended temp on throwing dtor [PR53868]\n\nWe have wrap_temporary_cleanups to handle the EH region nesting problems\nbetween cleanups for complete variables and cleanups for temporaries used in\ntheir construction, but we weren't calling it for temporaries extended from\nbinding to a reference.\n\nWe still don't want this for array cleanups (since my PR94041 fix), so I\nmove that exception from initialize_local_var to wrap_temporary_cleanups.\n\n\tPR c++/53868\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (cp_finish_decl): Use wrap_temporary_cleanups for\n\tcleanups from set_up_extended_ref_temp.\n\t(wrap_temporary_cleanups): Ignore array cleanups.\n\t(initialize_local_var): Don't check for array here.\n\t* cp-tree.h (BIND_EXPR_VEC_DTOR): New.\n\t* init.c (build_vec_delete_1): Set it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/eh/ref-temp1.C: New test.\n\t* g++.dg/eh/ref-temp2.C: New test.", "tree": {"sha": "68738365efc46a2ecbaf807eeebd45f39e1d9778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68738365efc46a2ecbaf807eeebd45f39e1d9778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c"}], "stats": {"total": 97, "additions": 93, "deletions": 4}, "files": [{"sha": "e204182da97a6f1bec9f4cb59f592d80b8710297", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "patch": "@@ -465,6 +465,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       OVL_USING_P (in OVERLOAD)\n       IMPLICIT_CONV_EXPR_NONTYPE_ARG (in IMPLICIT_CONV_EXPR)\n       BASELINK_FUNCTIONS_MAYBE_INCOMPLETE_P (in BASELINK)\n+      BIND_EXPR_VEC_DTOR (in BIND_EXPR)\n    2: IDENTIFIER_KIND_BIT_2 (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n@@ -712,6 +713,10 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define BIND_EXPR_TRY_BLOCK(NODE) \\\n   TREE_LANG_FLAG_0 (BIND_EXPR_CHECK (NODE))\n \n+/* This BIND_EXPR is from build_vec_delete_1.  */\n+#define BIND_EXPR_VEC_DTOR(NODE) \\\n+  TREE_LANG_FLAG_1 (BIND_EXPR_CHECK (NODE))\n+\n /* Used to mark the block around the member initializers and cleanups.  */\n #define BIND_EXPR_BODY_BLOCK(NODE) \\\n   TREE_LANG_FLAG_3 (BIND_EXPR_CHECK (NODE))"}, {"sha": "5fe341e0b75e37835057e556760d2faa3c325b9d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "patch": "@@ -7451,11 +7451,24 @@ wrap_cleanups_r (tree *stmt_p, int *walk_subtrees, void *data)\n    they are run on the normal path, but not if they are run on the\n    exceptional path.  We implement this by telling\n    honor_protect_cleanup_actions to strip the variable cleanup from the\n-   exceptional path.  */\n+   exceptional path.\n+\n+   Another approach could be to make the variable cleanup region enclose\n+   initialization, but depend on a flag to indicate that the variable is\n+   initialized; that's effectively what we do for arrays.  But the current\n+   approach works fine for non-arrays, and has no code overhead in the usual\n+   case where the temporary destructors are noexcept.  */\n \n static void\n wrap_temporary_cleanups (tree init, tree guard)\n {\n+  if (TREE_CODE (guard) == BIND_EXPR)\n+    {\n+      /* An array cleanup region already encloses any temporary cleanups,\n+\t don't wrap it around them again.  */\n+      gcc_checking_assert (BIND_EXPR_VEC_DTOR (guard));\n+      return;\n+    }\n   cp_walk_tree_without_duplicates (&init, wrap_cleanups_r, (void *)guard);\n }\n \n@@ -7518,8 +7531,8 @@ initialize_local_var (tree decl, tree init)\n \n \t  /* If we're only initializing a single object, guard the\n \t     destructors of any temporaries used in its initializer with\n-\t     its destructor.  But arrays are handled in build_vec_init.  */\n-\t  if (cleanup && TREE_CODE (type) != ARRAY_TYPE)\n+\t     its destructor.  */\n+\t  if (cleanup)\n \t    wrap_temporary_cleanups (init, cleanup);\n \n \t  gcc_assert (building_stmt_list_p ());\n@@ -8367,7 +8380,11 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (cleanups)\n     {\n       for (tree t : *cleanups)\n-\tpush_cleanup (decl, t, false);\n+\t{\n+\t  push_cleanup (decl, t, false);\n+\t  /* As in initialize_local_var.  */\n+\t  wrap_temporary_cleanups (init, t);\n+\t}\n       release_tree_vector (cleanups);\n     }\n "}, {"sha": "bfe4ad464bf9b10a97c20d9205118acbfc24b63a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "patch": "@@ -4092,6 +4092,7 @@ build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n   tbase_init = build_stmt (loc, DECL_EXPR, tbase);\n   controller = build3 (BIND_EXPR, void_type_node, tbase, NULL_TREE, NULL_TREE);\n   TREE_SIDE_EFFECTS (controller) = 1;\n+  BIND_EXPR_VEC_DTOR (controller) = true;\n \n   body = build1 (EXIT_EXPR, void_type_node,\n \t\t build2 (EQ_EXPR, boolean_type_node, tbase,"}, {"sha": "2df1a4937b7c86a2de1ab9d7dbae04c7ec4e8197", "filename": "gcc/testsuite/g++.dg/eh/ref-temp1.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp1.C?ref=4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "patch": "@@ -0,0 +1,51 @@\n+// PR c++/53868\n+// { dg-do run { target c++11 } }\n+\n+#if __cplusplus > 201100L\n+#define THROWING noexcept(false)\n+#else\n+#define THROWING\n+#endif\n+\n+extern \"C\" int printf(const char *, ...);\n+extern \"C\" void abort();\n+\n+struct SubobjectInA {\n+   SubobjectInA();\n+   ~SubobjectInA();\n+};\n+\n+int a;\n+struct A : SubobjectInA {\n+   A() = delete;\n+   A(const A &) = delete;\n+  A(A &&) = delete;\n+   A(int);\n+   ~A();\n+};\n+\n+#ifdef DEBUG\n+#define TRACE_FUNC( ... ) \\\n+{   printf(\"%s\\n\", __PRETTY_FUNCTION__); __VA_ARGS__   }\n+#else\n+#define TRACE_FUNC( ... ) \\\n+{   __VA_ARGS__   }\n+#endif\n+\n+struct Q {\n+   Q() : q(0)  TRACE_FUNC()\n+   ~Q() THROWING;\n+   int q;\n+};\n+\n+int main() {\n+   try { const A &a = Q().q; }\n+   catch (...) { if (!a) return 0; }\n+   abort();\n+}\n+\n+SubobjectInA::SubobjectInA()  TRACE_FUNC()\n+SubobjectInA::~SubobjectInA()  TRACE_FUNC()\n+A::A(int)  TRACE_FUNC(++a;)\n+A::~A()  TRACE_FUNC(--a;)\n+Q::~Q() THROWING TRACE_FUNC( throw 0; )"}, {"sha": "0c718962d4982d2cefcb261dffc0e23ee8d5777a", "filename": "gcc/testsuite/g++.dg/eh/ref-temp2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fref-temp2.C?ref=4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run { target c++11 } }\n+\n+struct B { B() {} ~B() noexcept(false) { throw 42; } };\n+int a;\n+struct A { A() { ++a; }; A(B) { ++a; } ~A() { --a; } };\n+\n+using Arr = A[3];\n+\n+int main()\n+{\n+  try {\n+    auto&& ref = Arr{B()};\n+  } catch (...) { }\n+  return a;\n+}"}]}