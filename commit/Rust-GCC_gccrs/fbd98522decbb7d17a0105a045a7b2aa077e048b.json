{"sha": "fbd98522decbb7d17a0105a045a7b2aa077e048b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkOTg1MjJkZWNiYjdkMTdhMDEwNWEwNDVhN2IyYWEwNzdlMDQ4Yg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-10T17:15:19Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-10T17:15:19Z"}, "message": "PrintStream.java: Merged version from classpath.\n\n2003-06-10  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/PrintStream.java:\n\tMerged version from classpath.\n\t(close): Removed sychronized keyword. This class is not garantied to\n\tbe thread-safe.\n\t(write): Likewise.\n\nFrom-SVN: r67717", "tree": {"sha": "2460609a8cf92bb3af05ebe8627620174cd52592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2460609a8cf92bb3af05ebe8627620174cd52592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd98522decbb7d17a0105a045a7b2aa077e048b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd98522decbb7d17a0105a045a7b2aa077e048b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd98522decbb7d17a0105a045a7b2aa077e048b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd98522decbb7d17a0105a045a7b2aa077e048b/comments", "author": null, "committer": null, "parents": [{"sha": "f80f73e192d1711711fd834072744396bf7754e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80f73e192d1711711fd834072744396bf7754e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80f73e192d1711711fd834072744396bf7754e7"}], "stats": {"total": 237, "additions": 93, "deletions": 144}, "files": [{"sha": "997cf1ecffc77a33878c8245e1aaf05abcb5e0b7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd98522decbb7d17a0105a045a7b2aa077e048b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd98522decbb7d17a0105a045a7b2aa077e048b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fbd98522decbb7d17a0105a045a7b2aa077e048b", "patch": "@@ -1,3 +1,11 @@\n+2003-06-10  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/PrintStream.java:\n+\tMerged version from classpath.\n+\t(close): Removed sychronized keyword. This class is not garantied to\n+\tbe thread-safe.\n+\t(write): Likewise.\n+\n 2003-06-09  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/gcj/xlib/natFont.cc (getAscent): Correctly access \"ascent\""}, {"sha": "af926de41db36669f3e1c0e454112e6442aecc3b", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 85, "deletions": 144, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd98522decbb7d17a0105a045a7b2aa077e048b/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd98522decbb7d17a0105a045a7b2aa077e048b/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=fbd98522decbb7d17a0105a045a7b2aa077e048b", "patch": "@@ -38,8 +38,6 @@\n \n package java.io;\n \n-import gnu.gcj.convert.UnicodeToBytes;\n-\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Believed complete and correct to 1.3\n@@ -66,20 +64,15 @@\n  */\n public class PrintStream extends FilterOutputStream\n {\n-  /* Notice the implementation is quite similar to OutputStreamWriter.\n-   * This leads to some minor duplication, because neither inherits\n-   * from the other, and we want to maximize performance. */\n-\n-  // Line separator string.\n-  private static final char[] line_separator\n-    = System.getProperty(\"line.separator\").toCharArray();\n-  \n-  UnicodeToBytes converter;\n-\n-  // Work buffer of characters for converter.\n-  char[] work = new char[100];\n-  // Work buffer of bytes where we temporarily keep converter output.\n-  byte[] work_bytes = new byte[100];\n+  /*\n+   * Ok, why is this class deprecated?  It could easily have been extended\n+   * to support character encodings.  In fact, PrintWriter is basically a\n+   * superset of this except for the write() methods.  So let's do something\n+   * tricky here and just redirect calls in this class to a hidden PrintWriter\n+   * instance.  All the functionality goes there since that is the 'real'\n+   * class.  The big win of doing this way is that the default character \n+   * encoding is done automagicially by the PrintWriter tree!\n+   */\n \n   /**\n    * This boolean indicates whether or not an error has ever occurred\n@@ -93,6 +86,16 @@ public class PrintStream extends FilterOutputStream\n    */\n   private boolean auto_flush;\n \n+  /**\n+   * The PrintWriter instance this object writes to\n+   */\n+  private PrintWriter pw;\n+\n+  /**\n+   * Lets us know if the stream is closed\n+   */\n+  private boolean closed;\n+\n   /**\n    * This method intializes a new <code>PrintStream</code> object to write\n    * to the specified output sink.  Note that this class is deprecated in\n@@ -125,7 +128,7 @@ public PrintStream (OutputStream out, boolean auto_flush)\n   {\n     super (out);\n \n-    converter = UnicodeToBytes.getDefaultEncoder();\n+    pw = new PrintWriter (out, auto_flush);\n     this.auto_flush = auto_flush;\n   }\n \n@@ -150,7 +153,7 @@ public PrintStream (OutputStream out, boolean auto_flush, String encoding)\n   {\n     super (out);\n \n-    converter = UnicodeToBytes.getEncoder (encoding);\n+    pw = new PrintWriter (new OutputStreamWriter (out, encoding), auto_flush);\n     this.auto_flush = auto_flush;\n   }\n \n@@ -165,8 +168,10 @@ public PrintStream (OutputStream out, boolean auto_flush, String encoding)\n    */\n   public boolean checkError ()\n   {\n-    flush();\n-    return error_occurred;\n+    if (!closed)\n+      pw.flush ();\n+\n+    return error_occurred | pw.checkError ();\n   }\n \n   /**\n@@ -183,19 +188,8 @@ protected void setError ()\n    */\n   public void close ()\n   {\n-    try\n-      {\n-\tflush();\n-\tout.close();\n-      }\n-    catch (InterruptedIOException iioe)\n-      {\n-\tThread.currentThread().interrupt();\n-      }\n-    catch (IOException e)\n-      {\n-\tsetError ();\n-      }\n+    pw.close ();\n+    closed = true;\n   }\n \n   /**\n@@ -204,85 +198,7 @@ public void close ()\n    */\n   public void flush ()\n   {\n-    try\n-      {\n-\tout.flush();\n-      }\n-    catch (InterruptedIOException iioe)\n-      {\n-\tThread.currentThread().interrupt();\n-      }\n-    catch (IOException e)\n-      {\n-\tsetError ();\n-      }\n-  }\n-\n-  private synchronized void print (String str, boolean println)\n-  {\n-    try\n-      {\n-        writeChars(str, 0, str.length());\n-\tif (println)\n-\t  writeChars(line_separator, 0, line_separator.length);\n-\tif (auto_flush)\n-\t  flush();\n-      }\n-    catch (InterruptedIOException iioe)\n-      {\n-\tThread.currentThread().interrupt();\n-      }\n-    catch (IOException e)\n-      {\n-\tsetError ();\n-      }\n-  }\n-\n-  private synchronized void print (char[] chars, int pos, int len,\n-\t\t\t\t   boolean println)\n-  {\n-    try\n-      {\n-        writeChars(chars, pos, len);\n-\tif (println)\n-\t  writeChars(line_separator, 0, line_separator.length);\n-\tif (auto_flush)\n-\t  flush();\n-      }\n-    catch (InterruptedIOException iioe)\n-      {\n-\tThread.currentThread().interrupt();\n-      }\n-    catch (IOException e)\n-      {\n-\tsetError ();\n-      }\n-  }\n-\n-  private void writeChars(char[] buf, int offset, int count)\n-    throws IOException\n-  {\n-    while (count > 0 || converter.havePendingBytes())\n-      {\n-\tconverter.setOutput(work_bytes, 0);\n-\tint converted = converter.write(buf, offset, count);\n-\toffset += converted;\n-\tcount -= converted;\n-\tout.write(work_bytes, 0, converter.count);\n-      }\n-  }\n-\n-  private void writeChars(String str, int offset, int count)\n-    throws IOException\n-  {\n-    while (count > 0 || converter.havePendingBytes())\n-      {\n-\tconverter.setOutput(work_bytes, 0);\n-\tint converted = converter.write(str, offset, count, work);\n-\toffset += converted;\n-\tcount -= converted;\n-\tout.write(work_bytes, 0, converter.count);\n-      }\n+    pw.flush();\n   }\n \n   /**\n@@ -294,7 +210,7 @@ private void writeChars(String str, int offset, int count)\n    */\n   public void print (boolean bool)\n   {\n-    print(String.valueOf(bool), false);\n+    pw.print (bool);\n   }\n \n   /**\n@@ -305,7 +221,7 @@ public void print (boolean bool)\n    */\n   public void print (int inum)\n   {\n-    print(String.valueOf(inum), false);\n+    pw.print (inum);\n   }\n \n   /**\n@@ -316,7 +232,7 @@ public void print (int inum)\n    */\n   public void print (long lnum)\n   {\n-    print(String.valueOf(lnum), false);\n+    pw.print (lnum);\n   }\n \n   /**\n@@ -327,7 +243,7 @@ public void print (long lnum)\n    */\n   public void print (float fnum)\n   {\n-    print(String.valueOf(fnum), false);\n+    pw.print (fnum);\n   }\n \n   /**\n@@ -338,7 +254,7 @@ public void print (float fnum)\n    */\n   public void print (double dnum)\n   {\n-    print(String.valueOf(dnum), false);\n+    pw.print (dnum);\n   }\n \n   /**\n@@ -350,7 +266,9 @@ public void print (double dnum)\n    */\n   public void print (Object obj)\n   {\n-    print(obj == null ? \"null\" : obj.toString(), false);\n+    // Don't call pw directly.  Convert to String so we scan for newline\n+    // characters on auto-flush;\n+    print (String.valueOf (obj));\n   }\n \n   /**\n@@ -361,7 +279,12 @@ public void print (Object obj)\n    */\n   public void print (String str)\n   {\n-    print(str == null ? \"null\" : str, false);\n+    pw.print (str);\n+\n+    if (auto_flush)\n+      if ((str.indexOf ('\\r') != -1)\n+          || (str.indexOf ('\\n') != -1))\n+        flush ();\n   }\n \n   /**\n@@ -370,10 +293,14 @@ public void print (String str)\n    *\n    * @param ch The <code>char</code> value to be printed\n    */\n-  public synchronized void print (char ch)\n+  public void print (char ch)\n   {\n-    work[0] = ch;\n-    print(work, 0, 1, false);\n+    pw.print (ch);\n+\n+    if (auto_flush)\n+      if ((ch == '\\r')\n+          || (ch == '\\n'))\n+        flush ();    \n   }\n \n   /**\n@@ -384,7 +311,16 @@ public synchronized void print (char ch)\n    */\n   public void print (char[] charArray)\n   {\n-    print(charArray, 0, charArray.length, false);\n+    pw.print (charArray);\n+\n+    if (auto_flush)\n+      for (int i = 0; i < charArray.length; i++)\n+        if ((charArray [i] == '\\r')\n+            || (charArray [i] == '\\n'))\n+          {\n+            flush ();\n+            break;\n+          }\n   }\n \n   /**\n@@ -394,7 +330,7 @@ public void print (char[] charArray)\n    */\n   public void println ()\n   {\n-    print(line_separator, 0, line_separator.length, false);\n+    pw.println ();\n   }\n \n   /**\n@@ -408,7 +344,7 @@ public void println ()\n    */\n   public void println (boolean bool)\n   {\n-    print(String.valueOf(bool), true);\n+    pw.println (bool);\n   }\n \n   /**\n@@ -421,7 +357,7 @@ public void println (boolean bool)\n    */\n   public void println (int inum)\n   {\n-    print(String.valueOf(inum), true);\n+    pw.println (inum);\n   }\n \n   /**\n@@ -434,7 +370,7 @@ public void println (int inum)\n    */\n   public void println (long lnum)\n   {\n-    print(String.valueOf(lnum), true);\n+    pw.println (lnum);\n   }\n \n   /**\n@@ -447,7 +383,7 @@ public void println (long lnum)\n    */\n   public void println (float fnum)\n   {\n-    print(String.valueOf(fnum), true);\n+    pw.println (fnum);\n   }\n \n   /**\n@@ -460,7 +396,7 @@ public void println (float fnum)\n    */\n   public void println (double dnum)\n   {\n-    print(String.valueOf(dnum), true);\n+    pw.println (dnum);\n   }\n \n   /**\n@@ -474,7 +410,7 @@ public void println (double dnum)\n    */\n   public void println (Object obj)\n   {\n-    print(obj == null ? \"null\" : obj.toString(), true);\n+    pw.println (obj);\n   }\n \n   /**\n@@ -487,7 +423,7 @@ public void println (Object obj)\n    */\n   public void println (String str)\n   {\n-    print (str == null ? \"null\" : str, true);\n+    pw.println (str);\n   }\n \n   /**\n@@ -498,10 +434,9 @@ public void println (String str)\n    *\n    * @param ch The <code>char</code> value to be printed\n    */\n-  public synchronized void println (char ch)\n+  public void println (char ch)\n   {\n-    work[0] = ch;\n-    print(work, 0, 1, true);\n+    pw.println (ch);\n   }\n \n   /**\n@@ -514,7 +449,7 @@ public synchronized void println (char ch)\n    */\n   public void println (char[] charArray)\n   {\n-    print(charArray, 0, charArray.length, true);\n+    pw.println (charArray);\n   }\n \n   /**\n@@ -526,17 +461,17 @@ public void println (char[] charArray)\n    */\n   public void write (int oneByte)\n   {\n+    // Sigh, we actually have to implement this method. Flush first so that\n+    // things get written in the right order.\n+    flush ();\n+\n     try\n       {\n         out.write (oneByte);\n \n         if (auto_flush && oneByte == '\\n')\n           flush ();\n       }\n-    catch (InterruptedIOException iioe)\n-      {\n-        Thread.currentThread ().interrupt ();\n-      }\n     catch (IOException e)\n       {\n         setError ();\n@@ -553,16 +488,22 @@ public void write (int oneByte)\n    */\n   public void write (byte[] buffer, int offset, int len)\n   {\n+    // We actually have to implement this method too. Flush first so that\n+    // things get written in the right order.\n+    flush();\n+\n     try\n       {\n         out.write (buffer, offset, len);\n         \n         if (auto_flush)\n-          flush ();\n-      }\n-    catch (InterruptedIOException iioe)\n-      {\n-        Thread.currentThread ().interrupt ();\n+          for (int i = offset; i < len; i++)\n+            if ((buffer [i] == '\\r')\n+                || (buffer [i] == '\\n'))\n+              {\n+                flush ();\n+                break;\n+              }\n       }\n     catch (IOException e)\n       {"}]}