{"sha": "ecdb93224c56189a129e97c556fe6b78e1b15a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkYjkzMjI0YzU2MTg5YTEyOWU5N2M1NTZmZTZiNzhlMWIxNWE2Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-27T22:20:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T20:06:50Z"}, "message": "analyzer: fix ICE on casting float to pointer [PR96764]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96764\n\t* region-model-manager.cc\n\t(region_model_manager::maybe_fold_unaryop): Handle VIEW_CONVERT_EXPR.\n\t(region_model_manager::get_or_create_cast): Move logic for\n\treal->integer casting to...\n\t(get_code_for_cast): ...this new function, and add logic for\n\treal->non-integer casts.\n\t(region_model_manager::maybe_fold_sub_svalue): Handle\n\tVIEW_CONVERT_EXPR.\n\t* region-model.cc\n\t(region_model::add_any_constraints_from_gassign): Likewise.\n\t* svalue.cc (svalue::maybe_undo_cast): Likewise.\n\t(unaryop_svalue::dump_to_pp): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96764\n\t* gcc.dg/analyzer/pr96764.c: New test.", "tree": {"sha": "6a4585b076cd707a9f943b7487fa129abe089cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a4585b076cd707a9f943b7487fa129abe089cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecdb93224c56189a129e97c556fe6b78e1b15a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdb93224c56189a129e97c556fe6b78e1b15a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdb93224c56189a129e97c556fe6b78e1b15a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdb93224c56189a129e97c556fe6b78e1b15a63/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d503cd98713a41aad34ade2b9b0d9973efb21e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d503cd98713a41aad34ade2b9b0d9973efb21e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d503cd98713a41aad34ade2b9b0d9973efb21e11"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "da8fa01077bcef75223daa9b5ddcd20f0ad1af15", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=ecdb93224c56189a129e97c556fe6b78e1b15a63", "patch": "@@ -324,6 +324,7 @@ region_model_manager::maybe_fold_unaryop (tree type, enum tree_code op,\n   switch (op)\n     {\n     default: break;\n+    case VIEW_CONVERT_EXPR:\n     case NOP_EXPR:\n       {\n \t/* Handle redundant casts.  */\n@@ -390,18 +391,39 @@ region_model_manager::get_or_create_unaryop (tree type, enum tree_code op,\n   return unaryop_sval;\n }\n \n+/* Get a tree code for a cast to DST_TYPE from SRC_TYPE.\n+   Use NOP_EXPR if possible (e.g. to help fold_unary convert casts\n+   of 0 to (T*) to simple pointer constants), but use FIX_TRUNC_EXPR\n+   and VIEW_CONVERT_EXPR for cases that fold_unary would otherwise crash\n+   on.  */\n+\n+static enum tree_code\n+get_code_for_cast (tree dst_type, tree src_type)\n+{\n+  gcc_assert (dst_type);\n+  if (!src_type)\n+    return NOP_EXPR;\n+\n+  if (TREE_CODE (src_type) == REAL_TYPE)\n+    {\n+      if (TREE_CODE (dst_type) == INTEGER_TYPE)\n+\treturn FIX_TRUNC_EXPR;\n+      else\n+\treturn VIEW_CONVERT_EXPR;\n+    }\n+\n+  return NOP_EXPR;\n+}\n+\n /* Return the svalue * for a cast of ARG to type TYPE, creating it\n    if necessary.  */\n \n const svalue *\n region_model_manager::get_or_create_cast (tree type, const svalue *arg)\n {\n   gcc_assert (type);\n-  if (arg->get_type ())\n-    if (TREE_CODE (type) == INTEGER_TYPE\n-\t&& TREE_CODE (arg->get_type ()) == REAL_TYPE)\n-      return get_or_create_unaryop (type, FIX_TRUNC_EXPR, arg);\n-  return get_or_create_unaryop (type, NOP_EXPR, arg);\n+  enum tree_code op = get_code_for_cast (type, arg->get_type ());\n+  return get_or_create_unaryop (type, op, arg);\n }\n \n /* Subroutine of region_model_manager::get_or_create_binop.\n@@ -561,7 +583,8 @@ region_model_manager::maybe_fold_sub_svalue (tree type,\n   if (const unaryop_svalue *unary\n       = parent_svalue->dyn_cast_unaryop_svalue ())\n     {\n-      if (unary->get_op () == NOP_EXPR)\n+      if (unary->get_op () == NOP_EXPR\n+\t  || unary->get_op () == VIEW_CONVERT_EXPR)\n \tif (tree cst = unary->get_arg ()->maybe_get_constant ())\n \t  if (zerop (cst))\n \t    {"}, {"sha": "1f794dacc133924935b64080e2fb4e317dff3dd5", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=ecdb93224c56189a129e97c556fe6b78e1b15a63", "patch": "@@ -1764,6 +1764,7 @@ region_model::add_any_constraints_from_gassign (enum tree_code op,\n       break;\n \n     case NOP_EXPR:\n+    case VIEW_CONVERT_EXPR:\n       {\n \tadd_constraint (gimple_assign_rhs1 (assign), op, rhs, ctxt);\n       }"}, {"sha": "fcab578674e32f8ac44f3cb0a5b3501bd7fe5ac5", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=ecdb93224c56189a129e97c556fe6b78e1b15a63", "patch": "@@ -128,16 +128,19 @@ svalue::maybe_get_constant () const\n     return NULL_TREE;\n }\n \n-/* If this svalue is a cast (i.e a unaryop NOP_EXPR), return the underlying\n-   svalue.\n+/* If this svalue is a cast (i.e a unaryop NOP_EXPR or VIEW_CONVERT_EXPR),\n+   return the underlying svalue.\n    Otherwise return NULL.  */\n \n const svalue *\n svalue::maybe_undo_cast () const\n {\n   if (const unaryop_svalue *unaryop_sval = dyn_cast_unaryop_svalue ())\n-    if (unaryop_sval->get_op () == NOP_EXPR)\n-      return unaryop_sval->get_arg ();\n+    {\n+      enum tree_code op = unaryop_sval->get_op ();\n+      if (op == NOP_EXPR || op == VIEW_CONVERT_EXPR)\n+\treturn unaryop_sval->get_arg ();\n+    }\n   return NULL;\n }\n \n@@ -566,7 +569,7 @@ unaryop_svalue::dump_to_pp (pretty_printer *pp, bool simple) const\n {\n   if (simple)\n     {\n-      if (m_op == NOP_EXPR)\n+      if (m_op == VIEW_CONVERT_EXPR || m_op == NOP_EXPR)\n \t{\n \t  pp_string (pp, \"CAST(\");\n \t  dump_tree (pp, get_type ());"}, {"sha": "70b25d3ab81a337ab613861a5ca94523143cb934", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96764.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96764.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdb93224c56189a129e97c556fe6b78e1b15a63/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96764.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96764.c?ref=ecdb93224c56189a129e97c556fe6b78e1b15a63", "patch": "@@ -0,0 +1,6 @@\n+void\n+ar (int *hd)\n+{\n+  int **zv = &hd;\n+  *(double *) zv = 0.0;\n+}"}]}