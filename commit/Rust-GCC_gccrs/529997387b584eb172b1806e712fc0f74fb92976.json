{"sha": "529997387b584eb172b1806e712fc0f74fb92976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5OTk3Mzg3YjU4NGViMTcyYjE4MDZlNzEyZmMwZjc0ZmI5Mjk3Ng==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-10T20:02:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-10T20:02:27Z"}, "message": "c-opts.c (add_prefixed_path): Don't use concat.\n\n\t* c-opts.c (add_prefixed_path): Don't use concat.  When\n\tprefixing with cpp_GCC_INCLUDE_DIR, copy only the first\n\tcpp_GCC_INCLUDE_DIR_len characters.\n\nFrom-SVN: r64114", "tree": {"sha": "7e60f07d5aac90eff7cdefd4f1e1e918caafe81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e60f07d5aac90eff7cdefd4f1e1e918caafe81e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/529997387b584eb172b1806e712fc0f74fb92976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529997387b584eb172b1806e712fc0f74fb92976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529997387b584eb172b1806e712fc0f74fb92976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529997387b584eb172b1806e712fc0f74fb92976/comments", "author": null, "committer": null, "parents": [{"sha": "a489d8b0846d82e25947100033fc336fd8c2085a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a489d8b0846d82e25947100033fc336fd8c2085a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a489d8b0846d82e25947100033fc336fd8c2085a"}], "stats": {"total": 208, "additions": 112, "deletions": 96}, "files": [{"sha": "703a28075041a1949c3dd268dfff976f52d83148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 100, "deletions": 94, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529997387b584eb172b1806e712fc0f74fb92976/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529997387b584eb172b1806e712fc0f74fb92976/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=529997387b584eb172b1806e712fc0f74fb92976", "patch": "@@ -1,31 +1,37 @@\n+2003-03-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-opts.c (add_prefixed_path): Don't use concat.  When\n+\tprefixing with cpp_GCC_INCLUDE_DIR, copy only the first\n+\tcpp_GCC_INCLUDE_DIR_len characters.\n+\n 2003-03-10  Segher Boessenkool  <segher@koffie.nl>\n \n-        * testsuite/gcc.dg/altivec-9.c: New file.\n+\t* testsuite/gcc.dg/altivec-9.c: New file.\n \n-        * config/rs6000/rs6000.c (altivec_frame_fixup): Remove.\n-        (rs6000_emit_prologue): Use rs6000_frame_related instead.\n+\t* config/rs6000/rs6000.c (altivec_frame_fixup): Remove.\n+\t(rs6000_emit_prologue): Use rs6000_frame_related instead.\n \n 2003-03-10  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/spe.h: Define __ev64_*64__ to use single element\n-        vectors.\n-        (__ev_convert_u64): Remove macro.  Define as inline.\n-        (__ev_convert_s64): Same.\n+\t* config/rs6000/spe.h: Define __ev64_*64__ to use single element\n+\tvectors.\n+\t(__ev_convert_u64): Remove macro.  Define as inline.\n+\t(__ev_convert_s64): Same.\n \n 2003-03-10  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h (DWARF_FRAME_REGISTERS): Define.\n-        (rs6000_stack_t): Add spe_64bit_regs_used.\n+\t* config/rs6000/rs6000.h (DWARF_FRAME_REGISTERS): Define.\n+\t(rs6000_stack_t): Add spe_64bit_regs_used.\n \n-        * config/rs6000/rs6000.c (rs6000_stack_info): Calculate\n-        spe_64bit_regs_used, and use it to determine the size of the\n-        frame.\n-        (spe_func_has_64bit_regs_p): New.\n-        (spe_synthesize_frame_save): New.\n-        (rs6000_frame_related): Handle SPE synthetic registers.\n-        (rs6000_emit_prologue): Only save in 64-bits if the function used\n-        any registers in 64-bit mode.\n-        (rs6000_emit_epilogue): Same, but for restore.\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): Calculate\n+\tspe_64bit_regs_used, and use it to determine the size of the\n+\tframe.\n+\t(spe_func_has_64bit_regs_p): New.\n+\t(spe_synthesize_frame_save): New.\n+\t(rs6000_frame_related): Handle SPE synthetic registers.\n+\t(rs6000_emit_prologue): Only save in 64-bits if the function used\n+\tany registers in 64-bit mode.\n+\t(rs6000_emit_epilogue): Same, but for restore.\n \n 2003-03-10  Richard Earnshaw  <rearnsha@arm.com>\n \n@@ -41,17 +47,17 @@\n \n 2003-03-10  Josef Zlomek  <zlomekj@suse.cz>\n \n-\t* cfgcleanup.c (outgoing_edges_match): Compare the jump tables. \n+\t* cfgcleanup.c (outgoing_edges_match): Compare the jump tables.\n \t(try_crossjump_to_edge): Replace refereces to one jump table by\n \treferences to identical jump table.\n \t* loop.c (load_mems): Moved setting the JUMP_LABEL to replace_label.\n \t(replace_label): Moved to rtlanal.c.\n \t(struct rtx_pair): Moved to rtl.h.\n-\t* rtl.h (struct rtx_pair): Moved from loop.c.  \n+\t* rtl.h (struct rtx_pair): Moved from loop.c.\n \t(replace_label): New extern function.\n \t(subrtx_p): New extern function.\n \t(tablejump_p): New extern function.\n-\t* rtlanal.c (replace_label): Moved from loop.c.  \n+\t* rtlanal.c (replace_label): Moved from loop.c.\n \t(subrtx_p_1): New static function.\n \t(subrtx_p): New function.\n \t(tablejump_p): New function.\n@@ -282,7 +288,7 @@ Sat Mar  8 14:13:35 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t(cgraph_finalize_compilation_unit):  Actually remove the reclaimed nodes.\n \t(cgraph_mark_functions_to_output):  Use new inlining heuristics flags.\n \t(cgraph_expand_function): Likewise.\n-\t* cgraph.c \n+\t* cgraph.c\n \t(cgraph_node): Put nodes into doubly linked chain.\n \t(cgraph_remove_node): New function.\n \t* flags.h (flag_inline_functions_called_once): Declare.\n@@ -451,15 +457,15 @@ Sat Mar  8 14:13:35 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t* config/stormy16/stormy16.c (xs_hi_general_operand):\n \tadded predicate to detect and error-out on out-of-range\n \tconst_ints for movhi.\n-\t* config/stormy16/stormy16.md (movhi): use \n+\t* config/stormy16/stormy16.md (movhi): use\n \txs_hi_general_operand.\n \n \t* config/stormy16/stormy16.c (xstormy16_expand_prologue):\n \tadded a check for local vbl size overflow.\n \t* config/stormy16/stormy16.c (xs_hi_nonmemory_operand):\n \tadded predicate to detect and error-out on out-of-range\n \tconst_ints for addhi and subhi.\n-\t* config/stormy16/stormy16.md (addhi3, addchi4, addchi5, \n+\t* config/stormy16/stormy16.md (addhi3, addchi4, addchi5,\n \tsubhi3, subchi4, subchi5): used xs_hi_nonmemory_operand.\n \n \t* config/stormy16/stormy16.c (xstormy16_legitimate_address_p):\n@@ -525,23 +531,23 @@ Wed Mar  5 18:55:02 2003  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2003-03-05  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/tm.texi: Document TARGET_DWARF_REGISTER_SPAN.\n+\t* doc/tm.texi: Document TARGET_DWARF_REGISTER_SPAN.\n \n-        * config/rs6000/rs6000.c (rs6000_dwarf_register_span): New.\n+\t* config/rs6000/rs6000.c (rs6000_dwarf_register_span): New.\n \n-        * hooks.c (hook_rtx_rtx_null): New.\n+\t* hooks.c (hook_rtx_rtx_null): New.\n \n-        * hooks.h (hook_rtx_rtx_null): Protoize.\n+\t* hooks.h (hook_rtx_rtx_null): Protoize.\n \n-        * target-def.h (TARGET_DWARF_REGISTER_SPAN): New macro.\n-        (TARGET_INITIALIZER): Add TARGET_DWARF_REGISTER_SPAN.\n+\t* target-def.h (TARGET_DWARF_REGISTER_SPAN): New macro.\n+\t(TARGET_INITIALIZER): Add TARGET_DWARF_REGISTER_SPAN.\n \n-        * target.h (struct gcc_target): Add dwarf_register_span.\n+\t* target.h (struct gcc_target): Add dwarf_register_span.\n \n-        * dwarf2out.c (multiple_reg_loc_descriptor): New.\n-        (one_reg_loc_descriptor): New.\n-        (reg_loc_descriptor): Add support for values that span more than\n-        one register.\n+\t* dwarf2out.c (multiple_reg_loc_descriptor): New.\n+\t(one_reg_loc_descriptor): New.\n+\t(reg_loc_descriptor): Add support for values that span more than\n+\tone register.\n \n Wed Mar  5 23:16:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -700,7 +706,7 @@ Wed Mar  5 02:04:04 CET 2003  Jan Hubicka  <jh@suse.cz>\n 2003-03-04  Andreas Jaeger  <aj@suse.de>\n \n \t* configure.in: Check for <memcheck.h>.\n-        * configure: Regenerated.\n+\t* configure: Regenerated.\n \n \t* config.in: Define HAVE_MEMCHECK_H.\n \n@@ -1158,7 +1164,7 @@ Mon Mar  3 19:07:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-02-28  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * floatlib.c: Remove.\n+\t* floatlib.c: Remove.\n \n 2003-02-28  Jason Merrill  <jason@redhat.com>\n \n@@ -1177,9 +1183,9 @@ Mon Mar  3 19:07:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-02-28  Dale Johannesen <dalej@apple.com>\n \n-        * loop.c (struct movable): Add insert_temp, shrink savemode.\n+\t* loop.c (struct movable): Add insert_temp, shrink savemode.\n \t(scan_loop): Accept invariants that require copying; mark as\n-        insert_temp.\n+\tinsert_temp.\n \t(combine_movables): Don't combine insert_temp movables.\n \t(move_movables): Insert copies for insert_temp movables.\n \tDon't record the info based on regno for insert_temp's.\n@@ -1349,27 +1355,27 @@ Wed Feb 26 19:46:25 CET 2003  Jan Hubicka  <jh@suse.cz>\n 2003-02-26  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.c (is_load_address): Rename to...\n-        (arm_memory_load_p) ... this and make it check for SUBREGs and\n-        constant loads that will be converted into loads from the\n-        minipool.\n-        (is_cirrus_insn): Rename to ...\n-        (arm_cirrus_insn_p): ... this, for consistency.  Replace test\n-        of CIRRUS_NO with CIRRUS_NOT.\n-        (cirrus_reorg): Use renamed functions.\n-        (note_invalid_constants): Change from a void function to bool.\n-        Add an extra parameter, saying whether the fixups should be\n-        pushed.  Return true if fixups are needed.\n-        (arm_reorg): Use renamed functions.  Use INSN_P.  Replace test\n-        of CIRRUS_NO with CIRRUS_NOT.\n-        * config/arm/arm.h (FLOAT_WORDS_BIG_ENDIAN): Mention that\n-        other floating point co-processors can also affect this.\n-        * config/arm/arm.md (\"type\" attribute): Add mav_farith and\n-        mav_dmult.  Replace references to \"cirrus_type\" attribute with\n-        \"type\".\n-        * config/arm/cirrus.md (\"cirrus_fpu\" attribute): Delete.\n-        (\"cirrus_type\" attribute): Delete - use \"type\" instead.\n-        (\"cirrus\" attribute): Replace 'no' with 'not' and 'yes' with\n-        'normal'.\n+\t(arm_memory_load_p) ... this and make it check for SUBREGs and\n+\tconstant loads that will be converted into loads from the\n+\tminipool.\n+\t(is_cirrus_insn): Rename to ...\n+\t(arm_cirrus_insn_p): ... this, for consistency.  Replace test\n+\tof CIRRUS_NO with CIRRUS_NOT.\n+\t(cirrus_reorg): Use renamed functions.\n+\t(note_invalid_constants): Change from a void function to bool.\n+\tAdd an extra parameter, saying whether the fixups should be\n+\tpushed.  Return true if fixups are needed.\n+\t(arm_reorg): Use renamed functions.  Use INSN_P.  Replace test\n+\tof CIRRUS_NO with CIRRUS_NOT.\n+\t* config/arm/arm.h (FLOAT_WORDS_BIG_ENDIAN): Mention that\n+\tother floating point co-processors can also affect this.\n+\t* config/arm/arm.md (\"type\" attribute): Add mav_farith and\n+\tmav_dmult.  Replace references to \"cirrus_type\" attribute with\n+\t\"type\".\n+\t* config/arm/cirrus.md (\"cirrus_fpu\" attribute): Delete.\n+\t(\"cirrus_type\" attribute): Delete - use \"type\" instead.\n+\t(\"cirrus\" attribute): Replace 'no' with 'not' and 'yes' with\n+\t'normal'.\n \n Tue Feb 25 22:46:27 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -1491,13 +1497,13 @@ Tue Feb 25 22:46:27 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t* gcse.c (cprop_jump): Revert the 2003-02-23 change.\n \n 2003-02-25  Vladimir Makarov  <vmakarov@toke.toronto.redhat.com>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \t* sched-ebb.c (add_deps_for_risky_insns): Add the dependence when\n \tthere is no similar load.\n \n 2003-02-25  Vladimir Makarov  <vmakarov@redhat.com>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \t* sched-int.h (INSN_TRAP_CLASS, WORST_CLASS): Move them from\n \tsched-rgn.c.\n@@ -1522,37 +1528,37 @@ Tue Feb 25 22:46:27 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-02-20  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/tm.texi: Document Rename TARGET_VECTOR_TYPES_COMPATIBLE to\n-        TARGET_VECTOR_OPAQUE_P.  Document accordingly.\n+\t* doc/tm.texi: Document Rename TARGET_VECTOR_TYPES_COMPATIBLE to\n+\tTARGET_VECTOR_OPAQUE_P.  Document accordingly.\n \n-        * testsuite/gcc.dg/20030218-1.c: Check that initialization of\n-        opaque types fail.\n+\t* testsuite/gcc.dg/20030218-1.c: Check that initialization of\n+\topaque types fail.\n \n-        * c-typeck.c (comptypes): Change call to vector_types_compatible\n-        to vector_opaque_p.\n-        (convert_for_assignment): Call vector_opaque_p instead of\n-        vector_types_compatible.\n-        (really_start_incremental_init): Disallow initialization of opaque\n-        types.\n+\t* c-typeck.c (comptypes): Change call to vector_types_compatible\n+\tto vector_opaque_p.\n+\t(convert_for_assignment): Call vector_opaque_p instead of\n+\tvector_types_compatible.\n+\t(really_start_incremental_init): Disallow initialization of opaque\n+\ttypes.\n \n-        * target-def.h: Remove TARGET_VECTOR_TYPES_COMPATIBLE.\n-        Define TARGET_VECTOR_OPAQUE_P.\n-        (TARGET_INITIALIZER): Same.\n+\t* target-def.h: Remove TARGET_VECTOR_TYPES_COMPATIBLE.\n+\tDefine TARGET_VECTOR_OPAQUE_P.\n+\t(TARGET_INITIALIZER): Same.\n \n-        * target.h (struct gcc_target): Remove vector_types_compatible.\n-        Add vector_opaque_p.\n+\t* target.h (struct gcc_target): Remove vector_types_compatible.\n+\tAdd vector_opaque_p.\n \n-        * config/rs6000/rs6000.c (rs6000_spe_vector_types_compatible):\n-        Remove.\n-        (is_ev64_opaque_type): Check for TARGET_SPE and make sure type is\n-        a vector type.  Change return type to bool.\n-        (TARGET_VECTOR_TYPES_COMPATIBLE): Remove.\n-        (TARGET_VECTOR_OPAQUE_P): Define.\n+\t* config/rs6000/rs6000.c (rs6000_spe_vector_types_compatible):\n+\tRemove.\n+\t(is_ev64_opaque_type): Check for TARGET_SPE and make sure type is\n+\ta vector type.  Change return type to bool.\n+\t(TARGET_VECTOR_TYPES_COMPATIBLE): Remove.\n+\t(TARGET_VECTOR_OPAQUE_P): Define.\n \n-        * cp/parser.c (cp_parser_init_declarator): Call vector_opaque_p\n-        target hook.\n-        Include target.h.\n-        (cp_parser_init_declarator): Fix typo in function comments.\n+\t* cp/parser.c (cp_parser_init_declarator): Call vector_opaque_p\n+\ttarget hook.\n+\tInclude target.h.\n+\t(cp_parser_init_declarator): Fix typo in function comments.\n \n Tue Feb 25 12:35:34 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -1623,7 +1629,7 @@ Mon Feb 24 22:08:22 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t(\"load_gbr\"): New insn.\n \n \t* configure.in (HAVE_AS_TLS): Add sh-*-* and sh[34]*-*-* cases.\n-        * configure: Regenerate.\n+\t* configure: Regenerate.\n \n 2003-02-24  Alan Modra  <amodra@bigpond.net.au>\n \n@@ -1658,16 +1664,16 @@ Mon Feb 24 22:08:22 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-02-22  Kelley Cook <kelley@dwhoops.info>\n \n-        * i386.h, i386.c, i386.md (ix86_tune): Rename from ix86_cpu.\n+\t* i386.h, i386.c, i386.md (ix86_tune): Rename from ix86_cpu.\n \t(ix86_tune_string): Rename from ix86_cpu_string.\n \n 2003-02-22  Kelley Cook <kelleycook@comcast.net>\n \n-        * config/i386/i386.c: Replace \"mcpu\" with \"mtune\".\n-        * config/i386/i386.h (TARGET_OPTIONS): Likewise.\n-        (CC1_CPU_SPEC): Likewise. New warning for \"-mcpu\".\n-        * doc/invoke.texi (i386 and x86-64 Options): Replace \"mcpu\"\n-        with \"mtune\".  Note that \"mcpu\" is a deprecated synonym for \"mtune\".\n+\t* config/i386/i386.c: Replace \"mcpu\" with \"mtune\".\n+\t* config/i386/i386.h (TARGET_OPTIONS): Likewise.\n+\t(CC1_CPU_SPEC): Likewise. New warning for \"-mcpu\".\n+\t* doc/invoke.texi (i386 and x86-64 Options): Replace \"mcpu\"\n+\twith \"mtune\".  Note that \"mcpu\" is a deprecated synonym for \"mtune\".\n \n 2003-02-23  Andreas Schwab  <schwab@suse.de>\n "}, {"sha": "a06f0fe88d94906008f744cde230feedc5c68f77", "filename": "gcc/c-opts.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529997387b584eb172b1806e712fc0f74fb92976/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529997387b584eb172b1806e712fc0f74fb92976/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=529997387b584eb172b1806e712fc0f74fb92976", "patch": "@@ -1701,10 +1701,20 @@ add_prefixed_path (suffix, chain)\n      const char *suffix;\n      size_t chain;\n {\n+  char *path;\n   const char *prefix;\n+  size_t prefix_len, suffix_len;\n \n-  prefix = iprefix ? iprefix: cpp_GCC_INCLUDE_DIR;\n-  add_path (concat (prefix, suffix), chain, 0);\n+  suffix_len = strlen (suffix);\n+  prefix     = iprefix ? iprefix : cpp_GCC_INCLUDE_DIR;\n+  prefix_len = iprefix ? strlen (iprefix) : cpp_GCC_INCLUDE_DIR_len;\n+\n+  path = xmalloc (prefix_len + suffix_len + 1);\n+  memcpy (path, prefix, prefix_len);\n+  memcpy (path + prefix_len, suffix, suffix_len);\n+  path[prefix_len + suffix_len] = '\\0';\n+\n+  add_path (path, chain, 0);\n }\n \n /* Set the C 89 standard (with 1994 amendments if C94, without GNU"}]}