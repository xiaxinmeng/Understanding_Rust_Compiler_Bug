{"sha": "591996bad79b7b109bb01fba69b1c7acc054e287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxOTk2YmFkNzliN2IxMDliYjAxZmJhNjliMWM3YWNjMDU0ZTI4Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-11-29T22:07:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-11-29T22:07:32Z"}, "message": "C++: improve location of static_assert errors\n\ngcc/cp/ChangeLog:\n\t* parser.c (cp_parser_unary_expression): Generate a location for\n\t\"noexcept\".\n\t(cp_parser_trait_expr): Generate and return a location_t,\n\tconverting the return type from tree to cp_expr.\n\t(cp_parser_static_assert): Pass location of the condition to\n\tfinish_static_assert, rather than that of the \"static_assert\"\n\ttoken, where available.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/cpp1y/static_assert3.C: New test case.\n\nlibstdc++-v3/ChangeLog:\n\t* testsuite/20_util/duration/literals/range.cc: Update expected\n\tline of a static_assert failure.\n\nFrom-SVN: r255255", "tree": {"sha": "403022637b8440b706dd47ce33c9f34f8c21a943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403022637b8440b706dd47ce33c9f34f8c21a943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591996bad79b7b109bb01fba69b1c7acc054e287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591996bad79b7b109bb01fba69b1c7acc054e287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591996bad79b7b109bb01fba69b1c7acc054e287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591996bad79b7b109bb01fba69b1c7acc054e287/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc6fe784486b77d96bd4cb9cb1d6556c1d5480fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6fe784486b77d96bd4cb9cb1d6556c1d5480fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6fe784486b77d96bd4cb9cb1d6556c1d5480fb"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "e6851d3431895919b7c3f0ada7873264372238e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -1,3 +1,13 @@\n+2017-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (cp_parser_unary_expression): Generate a location for\n+\t\"noexcept\".\n+\t(cp_parser_trait_expr): Generate and return a location_t,\n+\tconverting the return type from tree to cp_expr.\n+\t(cp_parser_static_assert): Pass location of the condition to\n+\tfinish_static_assert, rather than that of the \"static_assert\"\n+\ttoken, where available.\n+\n 2017-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/82293"}, {"sha": "03aeaea7597ff06d4d58c3746c609224b3bc5b90", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -2530,7 +2530,7 @@ static void cp_parser_late_parsing_default_args\n   (cp_parser *, tree);\n static tree cp_parser_sizeof_operand\n   (cp_parser *, enum rid);\n-static tree cp_parser_trait_expr\n+static cp_expr cp_parser_trait_expr\n   (cp_parser *, enum rid);\n static bool cp_parser_declares_only_class_p\n   (cp_parser *);\n@@ -7981,6 +7981,8 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t    bool saved_non_integral_constant_expression_p;\n \t    bool saved_greater_than_is_operator_p;\n \n+\t    location_t start_loc = token->location;\n+\n \t    cp_lexer_consume_token (parser->lexer);\n \t    matching_parens parens;\n \t    parens.require_open (parser);\n@@ -8017,8 +8019,19 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \n \t    parser->type_definition_forbidden_message = saved_message;\n \n+\t    location_t finish_loc\n+\t      = cp_lexer_peek_token (parser->lexer)->location;\n \t    parens.require_close (parser);\n-\t    return finish_noexcept_expr (expr, tf_warning_or_error);\n+\n+\t    /* Construct a location of the form:\n+\t       noexcept (expr)\n+\t       ^~~~~~~~~~~~~~~\n+\t       with start == caret, finishing at the close-paren.  */\n+\t    location_t noexcept_loc\n+\t      = make_location (start_loc, start_loc, finish_loc);\n+\n+\t    return cp_expr (finish_noexcept_expr (expr, tf_warning_or_error),\n+\t\t\t    noexcept_loc);\n \t  }\n \n \tdefault:\n@@ -9760,7 +9773,7 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n    Returns a representation of the expression, the underlying type\n    of the type at issue when KEYWORD is RID_UNDERLYING_TYPE.  */\n \n-static tree\n+static cp_expr\n cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n {\n   cp_trait_kind kind;\n@@ -9873,6 +9886,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n       gcc_unreachable ();\n     }\n \n+  /* Get location of initial token.  */\n+  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;\n+\n   /* Consume the token.  */\n   cp_lexer_consume_token (parser->lexer);\n \n@@ -9916,20 +9932,27 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \t}\n     }\n \n+  location_t finish_loc = cp_lexer_peek_token (parser->lexer)->location;\n   parens.require_close (parser);\n \n+  /* Construct a location of the form:\n+       __is_trivially_copyable(_Tp)\n+       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     with start == caret, finishing at the close-paren.  */\n+  location_t trait_loc = make_location (start_loc, start_loc, finish_loc);\n+\n   /* Complete the trait expression, which may mean either processing\n      the trait expr now or saving it for template instantiation.  */\n   switch (kind)\n     {\n     case CPTK_UNDERLYING_TYPE:\n-      return finish_underlying_type (type1);\n+      return cp_expr (finish_underlying_type (type1), trait_loc);\n     case CPTK_BASES:\n-      return finish_bases (type1, false);\n+      return cp_expr (finish_bases (type1, false), trait_loc);\n     case CPTK_DIRECT_BASES:\n-      return finish_bases (type1, true);\n+      return cp_expr (finish_bases (type1, true), trait_loc);\n     default:\n-      return finish_trait_expr (kind, type1, type2);\n+      return cp_expr (finish_trait_expr (kind, type1, type2), trait_loc);\n     }\n }\n \n@@ -13725,16 +13748,14 @@ cp_parser_linkage_specification (cp_parser* parser)\n static void \n cp_parser_static_assert(cp_parser *parser, bool member_p)\n {\n-  tree condition;\n+  cp_expr condition;\n+  location_t token_loc;\n   tree message;\n-  cp_token *token;\n-  location_t saved_loc;\n   bool dummy;\n \n   /* Peek at the `static_assert' token so we can keep track of exactly\n      where the static assertion started.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n-  saved_loc = token->location;\n+  token_loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   /* Look for the `static_assert' keyword.  */\n   if (!cp_parser_require_keyword (parser, RID_STATIC_ASSERT, \n@@ -13790,9 +13811,16 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n   /* A semicolon terminates the declaration.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n \n+  /* Get the location for the static assertion.  Use that of the\n+     condition if available, otherwise, use that of the \"static_assert\"\n+     token.  */\n+  location_t assert_loc = condition.get_location ();\n+  if (assert_loc == UNKNOWN_LOCATION)\n+    assert_loc = token_loc;\n+\n   /* Complete the static assertion, which may mean either processing \n      the static assert now or saving it for template instantiation.  */\n-  finish_static_assert (condition, message, saved_loc, member_p);\n+  finish_static_assert (condition, message, assert_loc, member_p);\n }\n \n /* Parse the expression in decltype ( expression ).  */"}, {"sha": "1b6e93a798647a9d0206ef4ab6f464aa899f1528", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -1,3 +1,7 @@\n+2017-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/cpp1y/static_assert3.C: New test case.\n+\n 2017-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/82293"}, {"sha": "7bdc919b4d686bc6f6a172a93fe07cd20f2a42b5", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert3.C?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+class is_not_empty\n+{\n+  int i;\n+};\n+\n+/* Verify location of static_assert failure (and of traits).  */\n+\n+static_assert(__is_empty(is_not_empty), \"message\"); // { dg-error \"static assertion failed: message\" }\n+/* { dg-begin-multiline-output \"\" }\n+ static_assert(__is_empty(is_not_empty), \"message\");\n+               ^~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* Again, this time verifying location of \"noexcept\".  */\n+\n+extern void might_throw ();\n+\n+static_assert(noexcept(might_throw ()), \"message\"); // { dg-error \"static assertion failed: message\" }\n+/* { dg-begin-multiline-output \"\" }\n+ static_assert(noexcept(might_throw ()), \"message\");\n+               ^~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "a82f464c1b836210ac43bef8f91d536958a00db8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -1,3 +1,8 @@\n+2017-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/20_util/duration/literals/range.cc: Update expected\n+\tline of a static_assert failure.\n+\n 2017-11-28  Glen Joseph Fernandes  <glenjofe@gmail.com>\n \n \t* include/bits/ptr_traits.h (to_address): Implement to_address."}, {"sha": "c0d1a6e588560b849d768d8df77363fa720c9bbd", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591996bad79b7b109bb01fba69b1c7acc054e287/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591996bad79b7b109bb01fba69b1c7acc054e287/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=591996bad79b7b109bb01fba69b1c7acc054e287", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 891 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 892 }\n }\n // { dg-prune-output \"in constexpr expansion\" } // needed for -O0"}]}