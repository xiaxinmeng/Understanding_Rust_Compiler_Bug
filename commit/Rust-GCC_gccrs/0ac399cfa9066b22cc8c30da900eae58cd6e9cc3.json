{"sha": "0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjMzk5Y2ZhOTA2NmIyMmNjOGMzMGRhOTAwZWFlNThjZDZlOWNjMw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-01-25T20:30:53Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-01-25T20:30:53Z"}, "message": "re PR fortran/62044 (ICE in USE statement with RENAME for extended derived type)\n\nfortran/\n\tPR fortran/62044\n\t* decl.c (gfc_match_derived_decl): Don't insert a new symtree element.\n\t* module.c (MOD_VERSION): Bump.\n\t(write_module): Don't write list of extensions.\n\t(read_module): Don't jump over list of extensions;\n\tdon't load list of extensions.\n\t(load_derived_extensions, write_dt_extensions,\n\t write_derived_extensions): Remove.\n\ntestsuite/\n\tPR fortran/62044\n\t* gfortran.dg/use_rename_7.f90: New.\n\nFrom-SVN: r220097", "tree": {"sha": "f70144d1e6f43d702f695d7cc65a4ee53378befe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70144d1e6f43d702f695d7cc65a4ee53378befe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/comments", "author": null, "committer": null, "parents": [{"sha": "ca2826dacf1a28d9d3243d53368b2781544f479c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2826dacf1a28d9d3243d53368b2781544f479c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2826dacf1a28d9d3243d53368b2781544f479c"}], "stats": {"total": 176, "additions": 46, "deletions": 130}, "files": [{"sha": "15c3ba01f9f552bedcabd6020dfb5bcbc52d6709", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "patch": "@@ -1,3 +1,14 @@\n+2015-01-25  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/62044\n+\t* decl.c (gfc_match_derived_decl): Don't insert a new symtree element.\n+\t* module.c (MOD_VERSION): Bump.\n+\t(write_module): Don't write list of extensions.\n+\t(read_module): Don't jump over list of extensions;\n+\tdon't load list of extensions.\n+\t(load_derived_extensions, write_dt_extensions,\n+\t write_derived_extensions): Remove.\n+\n 2015-01-24  Tobias Burnus  <burnus@net-b.de>\n \n \t* parse.c (gfc_parse_file): Fix two-location gfc_error call.\n@@ -160,7 +171,6 @@\n \t* decl.c (match_pointer_init): Error out if resolution of init expr\n \tfailed.\n \n->>>>>>> .r219925\n 2015-01-15  Tobias Burnus  <burnus@net-b.de>\n \n \t* openmp.c (check_symbol_not_pointer, resolve_oacc_data_clauses,"}, {"sha": "c26ffebf27d8a0f8491d2f91c27bedad6bfdf507", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "patch": "@@ -7790,7 +7790,6 @@ gfc_match_derived_decl (void)\n   if (extended && !sym->components)\n     {\n       gfc_component *p;\n-      gfc_symtree *st;\n \n       /* Add the extended derived type as the first component.  */\n       gfc_add_component (sym, parent, &p);\n@@ -7815,8 +7814,6 @@ gfc_match_derived_decl (void)\n       /* Provide the links between the extended type and its extension.  */\n       if (!extended->f2k_derived)\n \textended->f2k_derived = gfc_get_namespace (NULL, 0);\n-      st = gfc_new_symtree (&extended->f2k_derived->sym_root, sym->name);\n-      st->n.sym = sym;\n     }\n \n   if (!sym->hash_value)"}, {"sha": "69dc182d52bc527fe36055e422e6baf5bcee18a8", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 126, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "patch": "@@ -92,7 +92,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Don't put any single quote (') in MOD_VERSION, if you want it to be\n    recognized.  */\n-#define MOD_VERSION \"13\"\n+#define MOD_VERSION \"14\"\n \n \n /* Structure that describes a position within a module file.  */\n@@ -4542,71 +4542,6 @@ load_equiv (void)\n }\n \n \n-/* This function loads the sym_root of f2k_derived with the extensions to\n-   the derived type.  */\n-static void\n-load_derived_extensions (void)\n-{\n-  int symbol, j;\n-  gfc_symbol *derived;\n-  gfc_symbol *dt;\n-  gfc_symtree *st;\n-  pointer_info *info;\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n-  char module[GFC_MAX_SYMBOL_LEN + 1];\n-  const char *p;\n-\n-  mio_lparen ();\n-  while (peek_atom () != ATOM_RPAREN)\n-    {\n-      mio_lparen ();\n-      mio_integer (&symbol);\n-      info = get_integer (symbol);\n-      derived = info->u.rsym.sym;\n-\n-      /* This one is not being loaded.  */\n-      if (!info || !derived)\n-\t{\n-\t  while (peek_atom () != ATOM_RPAREN)\n-\t    skip_list ();\n-\t  continue;\n-\t}\n-\n-      gcc_assert (derived->attr.flavor == FL_DERIVED);\n-      if (derived->f2k_derived == NULL)\n-\tderived->f2k_derived = gfc_get_namespace (NULL, 0);\n-\n-      while (peek_atom () != ATOM_RPAREN)\n-\t{\n-\t  mio_lparen ();\n-\t  mio_internal_string (name);\n-\t  mio_internal_string (module);\n-\n-          /* Only use one use name to find the symbol.  */\n-\t  j = 1;\n-\t  p = find_use_name_n (name, &j, false);\n-\t  if (p)\n-\t    {\n-\t      st = gfc_find_symtree (gfc_current_ns->sym_root, p);\n-\t      dt = st->n.sym;\n-\t      st = gfc_find_symtree (derived->f2k_derived->sym_root, name);\n-\t      if (st == NULL)\n-\t\t{\n-\t\t  /* Only use the real name in f2k_derived to ensure a single\n-\t\t    symtree.  */\n-\t\t  st = gfc_new_symtree (&derived->f2k_derived->sym_root, name);\n-\t\t  st->n.sym = dt;\n-\t\t  st->n.sym->refs++;\n-\t\t}\n-\t    }\n-\t  mio_rparen ();\n-\t}\n-      mio_rparen ();\n-    }\n-  mio_rparen ();\n-}\n-\n-\n /* This function loads OpenMP user defined reductions.  */\n static void\n load_omp_udrs (void)\n@@ -4907,7 +4842,7 @@ check_for_ambiguous (gfc_symbol *st_sym, pointer_info *info)\n static void\n read_module (void)\n {\n-  module_locus operator_interfaces, user_operators, extensions, omp_udrs;\n+  module_locus operator_interfaces, user_operators, omp_udrs;\n   const char *p;\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   int i;\n@@ -4926,13 +4861,10 @@ read_module (void)\n   skip_list ();\n   skip_list ();\n \n-  /* Skip commons, equivalences and derived type extensions for now.  */\n+  /* Skip commons and equivalences for now.  */\n   skip_list ();\n   skip_list ();\n \n-  get_module_locus (&extensions);\n-  skip_list ();\n-\n   /* Skip OpenMP UDRs.  */\n   get_module_locus (&omp_udrs);\n   skip_list ();\n@@ -5238,11 +5170,6 @@ read_module (void)\n \t\t module_name);\n     }\n \n-  /* Now we should be in a position to fill f2k_derived with derived type\n-     extensions, since everything has been loaded.  */\n-  set_module_locus (&extensions);\n-  load_derived_extensions ();\n-\n   /* Clean up symbol nodes that were never loaded, create references\n      to hidden symbols.  */\n \n@@ -5460,49 +5387,6 @@ write_equiv (void)\n }\n \n \n-/* Write derived type extensions to the module.  */\n-\n-static void\n-write_dt_extensions (gfc_symtree *st)\n-{\n-  if (!gfc_check_symbol_access (st->n.sym))\n-    return;\n-  if (!(st->n.sym->ns && st->n.sym->ns->proc_name\n-\t&& st->n.sym->ns->proc_name->attr.flavor == FL_MODULE))\n-    return;\n-\n-  mio_lparen ();\n-  mio_pool_string (&st->name);\n-  if (st->n.sym->module != NULL)\n-    mio_pool_string (&st->n.sym->module);\n-  else\n-    {\n-      char name[GFC_MAX_SYMBOL_LEN + 1];\n-      if (iomode == IO_OUTPUT)\n-\tstrcpy (name, module_name);\n-      mio_internal_string (name);\n-      if (iomode == IO_INPUT)\n-\tmodule_name = gfc_get_string (name);\n-    }\n-  mio_rparen ();\n-}\n-\n-static void\n-write_derived_extensions (gfc_symtree *st)\n-{\n-  if (!((st->n.sym->attr.flavor == FL_DERIVED)\n-\t  && (st->n.sym->f2k_derived != NULL)\n-\t  && (st->n.sym->f2k_derived->sym_root != NULL)))\n-    return;\n-\n-  mio_lparen ();\n-  mio_symbol_ref (&(st->n.sym));\n-  gfc_traverse_symtree (st->n.sym->f2k_derived->sym_root,\n-\t\t\twrite_dt_extensions);\n-  mio_rparen ();\n-}\n-\n-\n /* Write a symbol to the module.  */\n \n static void\n@@ -5899,13 +5783,6 @@ write_module (void)\n   write_char ('\\n');\n   write_char ('\\n');\n \n-  mio_lparen ();\n-  gfc_traverse_symtree (gfc_current_ns->sym_root,\n-\t\t\twrite_derived_extensions);\n-  mio_rparen ();\n-  write_char ('\\n');\n-  write_char ('\\n');\n-\n   mio_lparen ();\n   write_omp_udrs (gfc_current_ns->omp_udr_root);\n   mio_rparen ();"}, {"sha": "861508782f5984cee213c7edba1410e97477fa1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "patch": "@@ -1,3 +1,8 @@\n+2015-01-25  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/62044\n+\t* gfortran.dg/use_rename_7.f90: New.\n+\n 2015-01-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n \n \t* gcc.target/i386/funcspec-5.c: Test new multiversion targets."}, {"sha": "d74d4a0ba988ad84765e3d157fd62c6eabf135ba", "filename": "gcc/testsuite/gfortran.dg/use_rename_7.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac399cfa9066b22cc8c30da900eae58cd6e9cc3/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_7.f90?ref=0ac399cfa9066b22cc8c30da900eae58cd6e9cc3", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! PR fortran/62044\n+! ICE when loading module UnstructuredGridImages\n+! because the type UnstructuredGridImageSiloForm\n+! is not accessible there under its name.\n+!\n+! Contributed by Reuben Budiardja <reubendb@gmail.com>\n+\n+module UnstructuredGridImageSilo_Form\n+  implicit none\n+  private\n+  type, public, abstract :: GridImageSiloTemplate\n+  end type GridImageSiloTemplate\n+  type, public, extends ( GridImageSiloTemplate ) :: &\n+    UnstructuredGridImageSiloForm\n+  end type UnstructuredGridImageSiloForm\n+end module UnstructuredGridImageSilo_Form\n+\n+module UnstructuredGridImages\n+  use UnstructuredGridImageSilo_Form, &\n+        UnstructuredGridImageForm => UnstructuredGridImageSiloForm\n+end module UnstructuredGridImages\n+\n+module FileSystem\n+  use UnstructuredGridImages\n+end module FileSystem"}]}