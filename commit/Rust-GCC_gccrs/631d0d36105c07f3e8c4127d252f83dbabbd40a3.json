{"sha": "631d0d36105c07f3e8c4127d252f83dbabbd40a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxZDBkMzYxMDVjMDdmM2U4YzQxMjdkMjUyZjgzZGJhYmJkNDBhMw==", "commit": {"author": {"name": "Matthew Gingell", "email": "gingell@adacore.com", "date": "2008-10-05T12:35:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-10-05T12:35:36Z"}, "message": "cpplib.h (cpp_comments, [...]): New structs.\n\n2008-10-05  Matthew Gingell  <gingell@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* include/cpplib.h (cpp_comments, cpp_comment_table): New structs.\n\t(cpp_get_comments): New function.\n\t* internal.h (struct cpp_reader): Add comments field.\n\t* init.c (cpp_destroy): Free comments.\n\t* lex.c (store_comment, cpp_get_comments): New functions.\n\t(comments): New struct.\n\t(save_comment): Store comments in comments struct.\n\nCo-Authored-By: Arnaud Charlet <charlet@adacore.com>\n\nFrom-SVN: r140883", "tree": {"sha": "4d3817d3b652d403b257af245aaef0fa4682d210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d3817d3b652d403b257af245aaef0fa4682d210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/631d0d36105c07f3e8c4127d252f83dbabbd40a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631d0d36105c07f3e8c4127d252f83dbabbd40a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631d0d36105c07f3e8c4127d252f83dbabbd40a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631d0d36105c07f3e8c4127d252f83dbabbd40a3/comments", "author": null, "committer": null, "parents": [{"sha": "7a90b0ca0cbfa54ad48717911badcb1632f4b3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a90b0ca0cbfa54ad48717911badcb1632f4b3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a90b0ca0cbfa54ad48717911badcb1632f4b3fa"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "278bb06d6b85b2dd989d14bed66ed988137110fc", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=631d0d36105c07f3e8c4127d252f83dbabbd40a3", "patch": "@@ -1,3 +1,14 @@\n+2008-10-05  Matthew Gingell  <gingell@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* include/cpplib.h (cpp_comments, cpp_comment_table): New structs.\n+\t(cpp_get_comments): New function.\n+\t* internal.h (struct cpp_reader): Add comments field.\n+\t* init.c (cpp_destroy): Free comments.\n+\t* lex.c (store_comment, cpp_get_comments): New functions.\n+\t(comments): New struct.\n+\t(save_comment): Store comments in comments struct.\n+\n 2008-09-18  Simon Baldwin  <simonb@google.com>\n \n \t* include/cpplib.h (struct cpp_options): Add new boolean flag"}, {"sha": "5720c6fc8ea9a4efd8a89270cf69f1ce2e0a4b28", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=631d0d36105c07f3e8c4127d252f83dbabbd40a3", "patch": "@@ -870,6 +870,36 @@ extern const char *cpp_type2name (enum cpp_ttype);\n extern cppchar_t cpp_parse_escape (cpp_reader *, const unsigned char ** pstr,\n \t\t\t\t   const unsigned char *limit, int wide);\n \n+/* Structure used to hold a comment block at a given location in the\n+   source code.  */\n+\n+typedef struct\n+{\n+  /* Text of the comment including the terminators.  */\n+  char *comment;\n+\n+  /* source location for the given comment.  */\n+  source_location sloc;\n+} cpp_comment;\n+\n+/* Structure holding all comments for a given cpp_reader.  */\n+\n+typedef struct\n+{\n+  /* table of comment entries.  */\n+  cpp_comment *entries;\n+\n+  /* number of actual entries entered in the table.  */\n+  int count;\n+\n+  /* number of entries allocated currently.  */\n+  int allocated;\n+} cpp_comment_table;\n+\n+/* Returns the table of comments encountered by the preprocessor. This\n+   table is only populated when pfile->state.save_comments is true. */\n+extern cpp_comment_table *cpp_get_comments (cpp_reader *);\n+\n /* In hash.c */\n \n /* Lookup an identifier in the hashtable.  Puts the identifier in the"}, {"sha": "cc7a09ed8c27fbc6db12c0cf9af8f326532374c8", "filename": "libcpp/init.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=631d0d36105c07f3e8c4127d252f83dbabbd40a3", "patch": "@@ -245,6 +245,7 @@ cpp_destroy (cpp_reader *pfile)\n {\n   cpp_context *context, *contextn;\n   tokenrun *run, *runn;\n+  int i;\n \n   free (pfile->op_stack);\n \n@@ -287,6 +288,14 @@ cpp_destroy (cpp_reader *pfile)\n       free (context);\n     }\n \n+  if (pfile->comments.entries)\n+    {\n+      for (i = 0; i < pfile->comments.count; i++)\n+\tfree (pfile->comments.entries[i].comment);\n+\n+      free (pfile->comments.entries);\n+    }\n+\n   free (pfile);\n }\n "}, {"sha": "af075b4b1c94cc06d8352854b1f8599e8591817f", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=631d0d36105c07f3e8c4127d252f83dbabbd40a3", "patch": "@@ -471,6 +471,9 @@ struct cpp_reader\n \n   /* Next value of __COUNTER__ macro. */\n   unsigned int counter;\n+\n+  /* Table of comments, when state.save_comments is true.  */\n+  cpp_comment_table comments;\n };\n \n /* Character classes.  Based on the more primitive macros in safe-ctype.h."}, {"sha": "57364f00bb98da1f3fa3085973450dc536d12699", "filename": "libcpp/lex.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631d0d36105c07f3e8c4127d252f83dbabbd40a3/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=631d0d36105c07f3e8c4127d252f83dbabbd40a3", "patch": "@@ -55,6 +55,7 @@ static int skip_line_comment (cpp_reader *);\n static void skip_whitespace (cpp_reader *, cppchar_t);\n static void lex_string (cpp_reader *, cpp_token *, const uchar *);\n static void save_comment (cpp_reader *, cpp_token *, const uchar *, cppchar_t);\n+static void store_comment (cpp_reader *, cpp_token *);\n static void create_literal (cpp_reader *, cpp_token *, const uchar *,\n \t\t\t    unsigned int, enum cpp_ttype);\n static bool warn_in_comment (cpp_reader *, _cpp_line_note *);\n@@ -670,6 +671,51 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n   create_literal (pfile, token, base, cur - base, type);\n }\n \n+/* Return the comment table. The client may not make any assumption\n+   about the ordering of the table.  */\n+cpp_comment_table *\n+cpp_get_comments (cpp_reader *pfile)\n+{\n+  return &pfile->comments;\n+}\n+\n+/* Append a comment to the end of the comment table. */\n+static void \n+store_comment (cpp_reader *pfile, cpp_token *token) \n+{\n+  int len;\n+\n+  if (pfile->comments.allocated == 0)\n+    {\n+      pfile->comments.allocated = 256; \n+      pfile->comments.entries = (cpp_comment *) xmalloc\n+\t(pfile->comments.allocated * sizeof (cpp_comment));\n+    }\n+\n+  if (pfile->comments.count == pfile->comments.allocated)\n+    {\n+      pfile->comments.allocated *= 2;\n+      pfile->comments.entries = (cpp_comment *) xrealloc\n+\t(pfile->comments.entries,\n+\t pfile->comments.allocated * sizeof (cpp_comment));\n+    }\n+\n+  len = token->val.str.len;\n+\n+  /* Copy comment. Note, token may not be NULL terminated. */\n+  pfile->comments.entries[pfile->comments.count].comment = \n+    (char *) xmalloc (sizeof (char) * (len + 1));\n+  memcpy (pfile->comments.entries[pfile->comments.count].comment,\n+\t  token->val.str.text, len);\n+  pfile->comments.entries[pfile->comments.count].comment[len] = '\\0';\n+\n+  /* Set source location. */\n+  pfile->comments.entries[pfile->comments.count].sloc = token->src_loc;\n+\n+  /* Increment the count of entries in the comment table. */\n+  pfile->comments.count++;\n+}\n+\n /* The stored comment includes the comment start and any terminator.  */\n static void\n save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n@@ -709,6 +755,9 @@ save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n       buffer[clen - 2] = '*';\n       buffer[clen - 1] = '/';\n     }\n+\n+  /* Finally store this comment for use by clients of libcpp. */\n+  store_comment (pfile, token);\n }\n \n /* Allocate COUNT tokens for RUN.  */"}]}