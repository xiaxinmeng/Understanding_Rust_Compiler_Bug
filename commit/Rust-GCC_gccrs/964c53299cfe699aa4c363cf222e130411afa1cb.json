{"sha": "964c53299cfe699aa4c363cf222e130411afa1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0YzUzMjk5Y2ZlNjk5YWE0YzM2M2NmMjIyZTEzMDQxMWFmYTFjYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-12T23:24:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-12T23:24:22Z"}, "message": "re PR libstdc++/26970 (-O3 -Wformat=2 complains about floats written to ostream)\n\n2006-06-12  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/26970\n\t* config/locale/gnu/c_locale.h (__convert_from_v<>): Change to\n\tvariadic function, instead of template function.\n\t* config/locale/generic/c_locale.h (__convert_from_v<>): Likewise.\n\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n\tAdjust.\n\t(money_put<>::do_put(long double)): Likewise.\n\t* src/locale-misc-inst.cc: Remove.\n\t* src/Makefile.am: Adjust.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r114591", "tree": {"sha": "425803261bfa01dea32ec1fe7aaf9b62551f4d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/425803261bfa01dea32ec1fe7aaf9b62551f4d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964c53299cfe699aa4c363cf222e130411afa1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964c53299cfe699aa4c363cf222e130411afa1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964c53299cfe699aa4c363cf222e130411afa1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964c53299cfe699aa4c363cf222e130411afa1cb/comments", "author": null, "committer": null, "parents": [{"sha": "4c65a5340dac8330c4ded126bc6a8a8b717399b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c65a5340dac8330c4ded126bc6a8a8b717399b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c65a5340dac8330c4ded126bc6a8a8b717399b3"}], "stats": {"total": 244, "additions": 99, "deletions": 145}, "files": [{"sha": "f1c463207ae51e3bb500328e2a2439396d8117c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -1,3 +1,16 @@\n+2006-06-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/26970\n+\t* config/locale/gnu/c_locale.h (__convert_from_v<>): Change to\n+\tvariadic function, instead of template function.\n+\t* config/locale/generic/c_locale.h (__convert_from_v<>): Likewise.\n+\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n+\tAdjust.\n+\t(money_put<>::do_put(long double)): Likewise.\n+\t* src/locale-misc-inst.cc: Remove.\n+\t* src/Makefile.am: Adjust.\n+\t* src/Makefile.in: Regenerate.\n+\n 2006-06-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (random_device::random_device(const"}, {"sha": "d71af1d0a16883909d8860cca391ddf4d8f365bb", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -1,6 +1,7 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,47 +41,51 @@\n \n #include <clocale>\n #include <cstring>   // get std::strlen\n-#include <cstdio>    // get std::snprintf or std::sprintf\n+#include <cstdio>    // get std::vsnprintf or std::vsprintf\n+#include <cstdarg>\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   typedef int*\t\t\t__c_locale;\n \n-  // Convert numeric value of type _Tv to string and return length of\n-  // string.  If snprintf is available use it, otherwise fall back to\n-  // the unsafe sprintf which, in general, can be dangerous and should\n-  // be avoided.\n-  template<typename _Tv>\n-    int\n-    __convert_from_v(char* __out, \n-\t\t     const int __size __attribute__((__unused__)),\n-\t\t     const char* __fmt,\n-\t\t     _Tv __v, const __c_locale&, int __prec)\n-    {\n-      char* __old = std::setlocale(LC_NUMERIC, NULL);\n-      char* __sav = NULL;\n-      if (std::strcmp(__old, \"C\"))\n-\t{\n-\t  __sav = new char[std::strlen(__old) + 1];\n-\t  std::strcpy(__sav, __old);\n-\t  std::setlocale(LC_NUMERIC, \"C\");\n-\t}\n+  // Convert numeric value of type double and long double to string and\n+  // return length of string.  If vsnprintf is available use it, otherwise\n+  // fall back to the unsafe vsprintf which, in general, can be dangerous\n+  // and should be avoided.\n+  inline int\n+  __convert_from_v(const __c_locale&, char* __out, \n+\t\t   const int __size __attribute__((__unused__)),\n+\t\t   const char* __fmt, ...)\n+  {\n+    char* __old = std::setlocale(LC_NUMERIC, NULL);\n+    char* __sav = NULL;\n+    if (std::strcmp(__old, \"C\"))\n+      {\n+\t__sav = new char[std::strlen(__old) + 1];\n+\tstd::strcpy(__sav, __old);\n+\tstd::setlocale(LC_NUMERIC, \"C\");\n+      }\n+\n+    va_list __args;\n+    va_start(__args, __fmt);\n \n #ifdef _GLIBCXX_USE_C99\n-      const int __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n+    const int __ret = std::vsnprintf(__out, __size, __fmt, __args);\n #else\n-      const int __ret = std::sprintf(__out, __fmt, __prec, __v);\n+    const int __ret = std::vsprintf(__out, __fmt, __args);\n #endif\n+\n+    va_end(__args);\n       \n-      if (__sav)\n-\t{\n-\t  std::setlocale(LC_NUMERIC, __sav);\n-\t  delete [] __sav;\n-\t}\n-      return __ret;\n-    }\n+    if (__sav)\n+      {\n+\tstd::setlocale(LC_NUMERIC, __sav);\n+\tdelete [] __sav;\n+      }\n+    return __ret;\n+  }\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "c5a301f9aaa3666560728e093b3120d40124991c", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -1,6 +1,7 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,11 +40,12 @@\n #pragma GCC system_header\n \n #include <cstring>              // get std::strlen\n-#include <cstdio>               // get std::snprintf or std::sprintf\n+#include <cstdio>               // get std::vsnprintf or std::vsprintf\n #include <clocale>\n #include <langinfo.h>\t\t// For codecvt\n #include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #include <libintl.h> \t\t// For messages\n+#include <cstdarg>\n \n #define _GLIBCXX_C_LOCALE_GNU 1\n \n@@ -61,42 +63,44 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   typedef __locale_t\t\t__c_locale;\n \n-  // Convert numeric value of type _Tv to string and return length of\n-  // string.  If snprintf is available use it, otherwise fall back to\n-  // the unsafe sprintf which, in general, can be dangerous and should\n-  // be avoided.\n-  template<typename _Tv>\n-    int\n-    __convert_from_v(char* __out, \n-\t\t     const int __size __attribute__ ((__unused__)),\n-\t\t     const char* __fmt,\n+  // Convert numeric value of type double and long double to string and\n+  // return length of string.  If vsnprintf is available use it, otherwise\n+  // fall back to the unsafe vsprintf which, in general, can be dangerous\n+  // and should be avoided.\n+  inline int\n+  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),\n+\t\t   char* __out,\n+\t\t   const int __size __attribute__ ((__unused__)),\n+\t\t   const char* __fmt, ...)\n+  {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-\t\t     _Tv __v, const __c_locale& __cloc, int __prec)\n-    {\n-      __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n+    __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n #else\n-\t\t     _Tv __v, const __c_locale&, int __prec)\n-    {\n-      char* __old = std::setlocale(LC_ALL, NULL);\n-      char* __sav = new char[std::strlen(__old) + 1];\n-      std::strcpy(__sav, __old);\n-      std::setlocale(LC_ALL, \"C\");\n+    char* __old = std::setlocale(LC_ALL, NULL);\n+    char* __sav = new char[std::strlen(__old) + 1];\n+    std::strcpy(__sav, __old);\n+    std::setlocale(LC_ALL, \"C\");\n #endif\n \n+    va_list __args;\n+    va_start(__args, __fmt);\n+\n #ifdef _GLIBCXX_USE_C99\n-      const int __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n+    const int __ret = std::vsnprintf(__out, __size, __fmt, __args);\n #else\n-      const int __ret = std::sprintf(__out, __fmt, __prec, __v);\n+    const int __ret = std::vsprintf(__out, __fmt, __args);\n #endif\n \n+    va_end(__args);\n+\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-      __gnu_cxx::__uselocale(__old);\n+    __gnu_cxx::__uselocale(__old);\n #else\n-      std::setlocale(LC_ALL, __sav);\n-      delete [] __sav;\n+    std::setlocale(LC_ALL, __sav);\n+    delete [] __sav;\n #endif\n-      return __ret;\n-    }\n+    return __ret;\n+  }\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "485851ecb4da5051c1f0e296d48477f13ca1ca58", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -1135,7 +1135,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __len = __newlen;\n     }\n \n-  // The following code uses snprintf (or sprintf(), when\n+  // The following code uses vsnprintf (or vsprintf(), when\n   // _GLIBCXX_USE_C99 is not defined) to convert floating point values\n   // for insertion into a stream.  An optimization would be to replace\n   // them with code that works directly on a wide buffer and then use\n@@ -1176,16 +1176,16 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n \t__num_base::_S_format_float(__io, __fbuf, __mod);\n-\t__len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t      _S_get_c_locale(), __prec);\n+\t__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t      __fbuf, __prec, __v);\n \n \t// If the buffer was not large enough, try again with the correct size.\n \tif (__len >= __cs_size)\n \t  {\n \t    __cs_size = __len + 1;\n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t    __len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t\t  _S_get_c_locale(), __prec);\n+\t    __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t\t  __fbuf, __prec, __v);\n \t  }\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n@@ -1203,8 +1203,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n \t__num_base::_S_format_float(__io, __fbuf, __mod);\n-\t__len = std::__convert_from_v(__cs, 0, __fbuf, __v,\n-\t\t\t\t      _S_get_c_locale(), __prec);\n+\t__len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, __fbuf, \n+\t\t\t\t      __prec, __v);\n #endif\n \n \t// [22.2.2.2.2] Stage 2, convert to char_type, using correct\n@@ -1834,22 +1834,22 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 328. Bad sprintf format modifier in money_put<>::do_put()\n-      int __len = std::__convert_from_v(__cs, __cs_size, \"%.*Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale(), 0);\n+      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t\t\"%.*Lf\", 0, __units);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.*Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale(), 0);\n+\t  __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t\t\"%.*Lf\", 0, __units);\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n       const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, 0, \"%.*Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale(), 0);\n+      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, \"%.*Lf\", \n+\t\t\t\t\t0, __units);\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n \t\t\t\t\t\t\t   * __cs_size));"}, {"sha": "d54b71ecdac62ae0842e577f43cdd481ba277699", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -162,7 +162,6 @@ sources = \\\n \tistream-inst.cc \\\n \tistream.cc \\\n \tlocale-inst.cc \\\n-\tlocale-misc-inst.cc \\\n \tmisc-inst.cc \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\"}, {"sha": "053ebc602ac398de782ee9d113c26570b07b326f", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964c53299cfe699aa4c363cf222e130411afa1cb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=964c53299cfe699aa4c363cf222e130411afa1cb", "patch": "@@ -67,9 +67,9 @@ am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n \tlocale_init.cc locale_facets.cc localename.cc stdexcept.cc \\\n \tstrstream.cc tree.cc allocator-inst.cc concept-inst.cc \\\n \tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n-\tistream-inst.cc istream.cc locale-inst.cc locale-misc-inst.cc \\\n-\tmisc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \\\n-\tstreambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \\\n+\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n+\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n+\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n \twstring-inst.cc atomicity.cc codecvt_members.cc \\\n \tcollate_members.cc ctype_members.cc messages_members.cc \\\n \tmonetary_members.cc numeric_members.cc time_members.cc \\\n@@ -87,11 +87,10 @@ am__objects_4 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tlocalename.lo stdexcept.lo strstream.lo tree.lo \\\n \tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n \tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n-\tlocale-inst.lo locale-misc-inst.lo misc-inst.lo \\\n-\tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo $(am__objects_1) $(am__objects_2) \\\n-\t$(am__objects_3)\n+\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n+\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo $(am__objects_1) \\\n+\t$(am__objects_2) $(am__objects_3)\n am_libstdc___la_OBJECTS = $(am__objects_4)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -366,7 +365,6 @@ sources = \\\n \tistream-inst.cc \\\n \tistream.cc \\\n \tlocale-inst.cc \\\n-\tlocale-misc-inst.cc \\\n \tmisc-inst.cc \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\"}, {"sha": "8af73596a6bdfb1dbadfc766c015a680c9256bc9", "filename": "libstdc++-v3/src/locale-misc-inst.cc", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c65a5340dac8330c4ded126bc6a8a8b717399b3/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c65a5340dac8330c4ded126bc6a8a8b717399b3/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc?ref=4c65a5340dac8330c4ded126bc6a8a8b717399b3", "patch": "@@ -1,65 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005, 2006\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-#include <locale>\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  template\n-    int\n-    __convert_from_v(char*, const int, const char*, double, \n-\t\t     const __c_locale&, int);\n-\n-  template\n-    int\n-    __convert_from_v(char*, const int, const char*, long double, \n-\t\t     const __c_locale&, int);\n-\n-_GLIBCXX_END_NAMESPACE\n-\n-// XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT\n-\n-#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n-  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n-\n-# if _GLIBCXX_C_LOCALE_GNU\n-_GLIBCXX_LDBL_COMPAT(_ZSt16__convert_from_vIdEiPciPKcT_RKP15__locale_structi,\n-\t\t     _ZSt16__convert_from_vIeEiPciPKcT_RKP15__locale_structi);\n-# else\n-_GLIBCXX_LDBL_COMPAT(_ZSt16__convert_from_vIdEiPciPKcT_RKPii,\n-\t\t     _ZSt16__convert_from_vIeEiPciPKcT_RKPii);\n-# endif\n-\n-#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}]}