{"sha": "b56b07639b1bd36383a0763ba80260c4858160ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2YjA3NjM5YjFiZDM2MzgzYTA3NjNiYTgwMjYwYzQ4NTgxNjBlZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-08-22T16:42:56Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-08-22T16:42:56Z"}, "message": "PR middle-end/87052 - STRING_CST printing incomplete in Gimple dumps\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/87052\n\t* gcc.dg/pr87052.c: New test.\n\t* gcc.dg/tree-ssa/dump-3.c: Adjust.\n\ngcc/ChangeLog:\n\n\tPR middle-end/87052\n\t* tree-pretty-print.c (pretty_print_string): Add argument.\n\t(dump_generic_node): Call to pretty_print_string with string size.\n\nFrom-SVN: r263781", "tree": {"sha": "e9e49026149911c53095b13a18db88691d0aaa24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e49026149911c53095b13a18db88691d0aaa24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56b07639b1bd36383a0763ba80260c4858160ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56b07639b1bd36383a0763ba80260c4858160ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56b07639b1bd36383a0763ba80260c4858160ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56b07639b1bd36383a0763ba80260c4858160ed/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecc643a81e7f7571970b196c237e524a7d99b9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc643a81e7f7571970b196c237e524a7d99b9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc643a81e7f7571970b196c237e524a7d99b9b4"}], "stats": {"total": 125, "additions": 77, "deletions": 48}, "files": [{"sha": "606fb5f6db5aa9519dd6dc42904d68d9ac9a80ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b56b07639b1bd36383a0763ba80260c4858160ed", "patch": "@@ -1,3 +1,9 @@\n+2018-08-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/87052\n+\t* tree-pretty-print.c (pretty_print_string): Add argument.\n+\t(dump_generic_node): Call to pretty_print_string with string size.\n+\n 2018-08-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/86771"}, {"sha": "42f10aef56285a8fa7518c28096ad4a42be603a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b56b07639b1bd36383a0763ba80260c4858160ed", "patch": "@@ -1,3 +1,9 @@\n+2018-08-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/87052\n+\t* gcc.dg/pr87052.c: New test.\n+\t* gcc.dg/tree-ssa/dump-3.c: Adjust.\n+\n 2018-08-22  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* gfortran.dg/max_fmax_aarch64.f90: Rename to..."}, {"sha": "2affc480f4e3778b1098b4ad0dd9270a007f14b6", "filename": "gcc/testsuite/gcc.dg/pr87052.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c?ref=b56b07639b1bd36383a0763ba80260c4858160ed", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/87052 - STRING_CST printing incomplete in Gimple dumps\n+   { dg-do compile }\n+   { dg-options \"-fdump-tree-gimple\" } */\n+\n+void sink (const void*, ...);\n+\n+void test (void)\n+{\n+  const char a[3] = \"\\000ab\";\n+\n+  /* Expect the following in the dump:\n+     a = \"\\x00ab\"; */\n+\n+  const char b[] = { 'a', 0, 'b', 'c' };\n+\n+  /* Expect the following:\n+     b = \"a\\x00bc\"; */\n+\n+  const char c[] = \"\";\n+\n+  /* Expect the following:\n+     c = \"\"; */\n+\n+  const char d[0] = { };\n+\n+  /* Expect the following:\n+     d = \"\"; */\n+\n+  const char e[0] = \"\";\n+\n+  /* Expect nothing.  */\n+\n+  sink (a, b, c, d, e);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a = \\\"\\\\\\\\x00ab\\\";\" 1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"b = \\\"a\\\\\\\\x00bc\\\";\"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"c = \\\"\\\";\"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"d = { *};\"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"e = \"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"e = {CLOBBER}\"  1 \"gimple\" } }  */"}, {"sha": "6623e708b781ad826172973ffcd796deb1ccece1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/dump-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-3.c?ref=b56b07639b1bd36383a0763ba80260c4858160ed", "patch": "@@ -263,8 +263,8 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"string_0 = \\\"\\\";\" \"optimized\" } } */\n-/* { dg-final { scan-tree-dump \"string_4 = \\\"\\\\\\\\4\\\";\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"string_0 = \\\"\\\\\\\\x00\\\";\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"string_4 = \\\"\\\\\\\\x04\\\";\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump \"string_28 = \\\"\\\\\\\\x1c\\\";\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump \"string_51 = \\\"3\\\";\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump \"string_255 = \\\"\\\\\\\\xff\\\";\" \"optimized\" } } */"}, {"sha": "622142719ee1d7208910ec85612332a73ddbbacf", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 22, "deletions": 46, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56b07639b1bd36383a0763ba80260c4858160ed/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=b56b07639b1bd36383a0763ba80260c4858160ed", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Local functions, macros and variables.  */\n static const char *op_symbol (const_tree);\n-static void pretty_print_string (pretty_printer *, const char*);\n+static void pretty_print_string (pretty_printer *, const char*, unsigned);\n static void newline_and_indent (pretty_printer *, int);\n static void maybe_init_pretty_print (FILE *);\n static void print_struct_decl (pretty_printer *, const_tree, int, dump_flags_t);\n@@ -1800,10 +1800,13 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       break;\n \n     case STRING_CST:\n-      pp_string (pp, \"\\\"\");\n-      pretty_print_string (pp, TREE_STRING_POINTER (node));\n-      pp_string (pp, \"\\\"\");\n-      break;\n+      {\n+\tpp_string (pp, \"\\\"\");\n+\tif (unsigned nbytes = TREE_STRING_LENGTH (node))\n+\t  pretty_print_string (pp, TREE_STRING_POINTER (node), nbytes);\n+\tpp_string (pp, \"\\\"\");\n+\tbreak;\n+      }\n \n     case VECTOR_CST:\n       {\n@@ -3865,15 +3868,16 @@ print_call_name (pretty_printer *pp, tree node, dump_flags_t flags)\n     }\n }\n \n-/* Parses the string STR and replaces new-lines by '\\n', tabs by '\\t', ...  */\n+/* Print the first N characters in the array STR, replacing non-printable\n+   characters (including embedded nuls) with unambiguous escape sequences.  */\n \n static void\n-pretty_print_string (pretty_printer *pp, const char *str)\n+pretty_print_string (pretty_printer *pp, const char *str, unsigned n)\n {\n   if (str == NULL)\n     return;\n \n-  while (*str)\n+  for ( ; n; --n, ++str)\n     {\n       switch (str[0])\n \t{\n@@ -3913,48 +3917,20 @@ pretty_print_string (pretty_printer *pp, const char *str)\n \t  pp_string (pp, \"\\\\'\");\n \t  break;\n \n-\t  /* No need to handle \\0; the loop terminates on \\0.  */\n-\n-\tcase '\\1':\n-\t  pp_string (pp, \"\\\\1\");\n-\t  break;\n-\n-\tcase '\\2':\n-\t  pp_string (pp, \"\\\\2\");\n-\t  break;\n-\n-\tcase '\\3':\n-\t  pp_string (pp, \"\\\\3\");\n-\t  break;\n-\n-\tcase '\\4':\n-\t  pp_string (pp, \"\\\\4\");\n-\t  break;\n-\n-\tcase '\\5':\n-\t  pp_string (pp, \"\\\\5\");\n-\t  break;\n-\n-\tcase '\\6':\n-\t  pp_string (pp, \"\\\\6\");\n-\t  break;\n-\n-\tcase '\\7':\n-\t  pp_string (pp, \"\\\\7\");\n-\t  break;\n-\n \tdefault:\n-\t  if (!ISPRINT (str[0]))\n+\t  if (str[0] || n > 1)\n \t    {\n-\t      char buf[5];\n-\t      sprintf (buf, \"\\\\x%x\", (unsigned char)str[0]);\n-\t      pp_string (pp, buf);\n+\t      if (!ISPRINT (str[0]))\n+\t\t{\n+\t\t  char buf[5];\n+\t\t  sprintf (buf, \"\\\\x%02x\", (unsigned char)str[0]);\n+\t\t  pp_string (pp, buf);\n+\t\t}\n+\t      else\n+\t\tpp_character (pp, str[0]);\n+\t      break;\n \t    }\n-\t  else\n-\t    pp_character (pp, str[0]);\n-\t  break;\n \t}\n-      str++;\n     }\n }\n "}]}