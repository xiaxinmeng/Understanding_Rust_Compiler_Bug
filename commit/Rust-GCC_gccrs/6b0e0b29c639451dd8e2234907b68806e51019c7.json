{"sha": "6b0e0b29c639451dd8e2234907b68806e51019c7", "node_id": "C_kwDOANBUbNoAKDZiMGUwYjI5YzYzOTQ1MWRkOGUyMjM0OTA3YjY4ODA2ZTUxMDE5Yzc", "commit": {"author": {"name": "dianhong xu", "email": "dianhong.xu@intel.com", "date": "2021-06-22T12:33:24Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T10:27:29Z"}, "message": "AVX512FP16: Add permutation and mask blend intrinsics.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h:\n\t(_mm512_mask_blend_ph): New intrinsic.\n\t(_mm512_permutex2var_ph): Ditto.\n\t(_mm512_permutexvar_ph): Ditto.\n\t* config/i386/avx512fp16vlintrin.h:\n\t(_mm256_mask_blend_ph): New intrinsic.\n\t(_mm256_permutex2var_ph): Ditto.\n\t(_mm256_permutexvar_ph): Ditto.\n\t(_mm_mask_blend_ph): Ditto.\n\t(_mm_permutex2var_ph): Ditto.\n\t(_mm_permutexvar_ph): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-14.c: New test.", "tree": {"sha": "875091a508fffbc42b20bdfecf63758f74ae8ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875091a508fffbc42b20bdfecf63758f74ae8ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b0e0b29c639451dd8e2234907b68806e51019c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e0b29c639451dd8e2234907b68806e51019c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0e0b29c639451dd8e2234907b68806e51019c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e0b29c639451dd8e2234907b68806e51019c7/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69dc9c59e911dcf1e5212a15c54bc8f20943190b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dc9c59e911dcf1e5212a15c54bc8f20943190b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69dc9c59e911dcf1e5212a15c54bc8f20943190b"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "29cf67923359eb6aa022d40509ebf22f7c5a396f", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=6b0e0b29c639451dd8e2234907b68806e51019c7", "patch": "@@ -7211,6 +7211,37 @@ _mm512_reduce_max_ph (__m512h __A)\n \n #undef _MM512_REDUCE_OP\n \n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_blend_ph (__mmask32 __U, __m512h __A, __m512h __W)\n+{\n+  return (__m512h) __builtin_ia32_movdquhi512_mask ((__v32hi) __W,\n+\t\t\t\t\t\t    (__v32hi) __A,\n+\t\t\t\t\t\t    (__mmask32) __U);\n+\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_permutex2var_ph (__m512h __A, __m512i __I, __m512h __B)\n+{\n+  return (__m512h) __builtin_ia32_vpermi2varhi512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t       (__v32hi) __I,\n+\t\t\t\t\t\t       (__v32hi) __B,\n+\t\t\t\t\t\t       (__mmask32)-1);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_permutexvar_ph (__m512i __A, __m512h __B)\n+{\n+  return (__m512h) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,\n+\t\t\t\t\t\t     (__v32hi) __A,\n+\t\t\t\t\t\t     (__v32hi)\n+\t\t\t\t\t\t     (_mm512_setzero_ph ()),\n+\t\t\t\t\t\t     (__mmask32)-1);\n+}\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "3d3de964224e13974ac7cdc67c0805018bf3f6c5", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=6b0e0b29c639451dd8e2234907b68806e51019c7", "patch": "@@ -3253,6 +3253,68 @@ _mm_reduce_max_ph (__m128h __A)\n #undef _MM256_REDUCE_OP\n #undef _MM_REDUCE_OP\n \n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_blend_ph (__mmask16 __U, __m256h __A, __m256h __W)\n+{\n+  return (__m256h) __builtin_ia32_movdquhi256_mask ((__v16hi) __W,\n+\t\t\t\t\t\t    (__v16hi) __A,\n+\t\t\t\t\t\t    (__mmask16) __U);\n+\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_permutex2var_ph (__m256h __A, __m256i __I, __m256h __B)\n+{\n+  return (__m256h) __builtin_ia32_vpermi2varhi256_mask ((__v16hi) __A,\n+\t\t\t\t\t\t       (__v16hi) __I,\n+\t\t\t\t\t\t       (__v16hi) __B,\n+\t\t\t\t\t\t       (__mmask16)-1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_permutexvar_ph (__m256i __A, __m256h __B)\n+{\n+  return (__m256h) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,\n+\t\t\t\t\t\t     (__v16hi) __A,\n+\t\t\t\t\t\t     (__v16hi)\n+\t\t\t\t\t\t     (_mm256_setzero_ph ()),\n+\t\t\t\t\t\t     (__mmask16)-1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_blend_ph (__mmask8 __U, __m128h __A, __m128h __W)\n+{\n+  return (__m128h) __builtin_ia32_movdquhi128_mask ((__v8hi) __W,\n+\t\t\t\t\t\t    (__v8hi) __A,\n+\t\t\t\t\t\t    (__mmask8) __U);\n+\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_permutex2var_ph (__m128h __A, __m128i __I, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vpermi2varhi128_mask ((__v8hi) __A,\n+\t\t\t\t\t\t       (__v8hi) __I,\n+\t\t\t\t\t\t       (__v8hi) __B,\n+\t\t\t\t\t\t       (__mmask8)-1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_permutexvar_ph (__m128i __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,\n+\t\t\t\t\t\t     (__v8hi) __A,\n+\t\t\t\t\t\t     (__v8hi)\n+\t\t\t\t\t\t     (_mm_setzero_ph ()),\n+\t\t\t\t\t\t     (__mmask8)-1);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "5c670aea6404209df228d61297437e71c4638f59", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-14.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e0b29c639451dd8e2234907b68806e51019c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-14.c?ref=6b0e0b29c639451dd8e2234907b68806e51019c7", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512bw\" } */\n+\n+#include <immintrin.h>\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_mask_blend_ph (__mmask32 U, __m512h A, __m512h B )\n+{\n+  return _mm512_mask_blend_ph (U, A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_permutex2var_ph (__m512h A, __m512i I, __m512h B)\n+{\n+  return _mm512_permutex2var_ph (A, I, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\[ti\\]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_permutexvar_ph (__m512i A, __m512h B)\n+{\n+  return _mm512_permutexvar_ph (A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_mask_blend_ph (__mmask16 U, __m256h A, __m256h B )\n+{\n+  return _mm256_mask_blend_ph (U, A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_permutex2var_ph (__m256h A, __m256i I, __m256h B)\n+{\n+  return _mm256_permutex2var_ph (A, I, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\[ti\\]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_permutexvar_ph (__m256i A, __m256h B)\n+{\n+  return _mm256_permutexvar_ph (A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_mask_blend_ph (__mmask8 U, __m128h A, __m128h B )\n+{\n+  return _mm_mask_blend_ph (U, A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_permutex2var_ph (__m128h A, __m128i I, __m128h B)\n+{\n+  return _mm_permutex2var_ph (A, I, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\\[it\\]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_permutexvar_ph (__m128i A, __m128h B)\n+{\n+  return _mm_permutexvar_ph (A, B);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\" 1 } } */"}]}