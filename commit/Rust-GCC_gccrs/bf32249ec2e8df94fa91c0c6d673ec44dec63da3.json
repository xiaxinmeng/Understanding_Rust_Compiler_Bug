{"sha": "bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzMjI0OWVjMmU4ZGY5NGZhOTFjMGM2ZDY3M2VjNDRkZWM2M2RhMw==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-06-25T18:43:50Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-06-25T18:43:50Z"}, "message": "m68k.h (DATA_REGNO_P, [...]): Use IN_RANGE.\n\n\t* config/m68k/m68k.h (DATA_REGNO_P, ADDRESS_REGNO_P, INT_REGNO_P,\n\tFP_REGNO_P): Use IN_RANGE.\n\t(REGNO_OK_FOR_DATA_P, REGNO_OK_FOR_FP_P): Remove.\n\t(REGNO_OK_FOR_INDEX_NONSTRICT_P, REGNO_OK_FOR_BASE_NONSTRICT_P): New.\n\t(DATA_REG_P): Use DATA_REGNO_P.\n\t(FP_REG_P): Use FP_REGNO_P.\n\t(ADDRESS_REG_P): Use ADDRESS_REGNO_P.\n\t* config/m68k/m68k.c (m68k_legitimate_base_reg_p): Use\n\tREGNO_OK_FOR_INDEX_NONSTRICT_P, REGNO_OK_FOR_BASE_NONSTRICT_P.\n\nFrom-SVN: r126001", "tree": {"sha": "f532b1beb2543eae48436638100f0fabc01aba92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f532b1beb2543eae48436638100f0fabc01aba92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/comments", "author": null, "committer": null, "parents": [{"sha": "8de10a622a1311281ab59cee7d56ade678afbfb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de10a622a1311281ab59cee7d56ade678afbfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de10a622a1311281ab59cee7d56ade678afbfb1"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "e57e05783de480c0ad76589e6829ac6764ea7ffd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "patch": "@@ -1,3 +1,15 @@\n+2007-06-25  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* config/m68k/m68k.h (DATA_REGNO_P, ADDRESS_REGNO_P, INT_REGNO_P,\n+\tFP_REGNO_P): Use IN_RANGE.\n+\t(REGNO_OK_FOR_DATA_P, REGNO_OK_FOR_FP_P): Remove.\n+\t(REGNO_OK_FOR_INDEX_NONSTRICT_P, REGNO_OK_FOR_BASE_NONSTRICT_P): New.\n+\t(DATA_REG_P): Use DATA_REGNO_P.\n+\t(FP_REG_P): Use FP_REGNO_P.\n+\t(ADDRESS_REG_P): Use ADDRESS_REGNO_P.\n+\t* config/m68k/m68k.c (m68k_legitimate_base_reg_p): Use\n+\tREGNO_OK_FOR_INDEX_NONSTRICT_P, REGNO_OK_FOR_BASE_NONSTRICT_P.\n+\n 2007-06-24  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/30563"}, {"sha": "ec65a8892332611d79049fcb467032f03f4865c5", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "patch": "@@ -1609,7 +1609,7 @@ m68k_legitimate_base_reg_p (rtx x, bool strict_p)\n   return (REG_P (x)\n \t  && (strict_p\n \t      ? REGNO_OK_FOR_BASE_P (REGNO (x))\n-\t      : !DATA_REGNO_P (REGNO (x)) && !FP_REGNO_P (REGNO (x))));\n+\t      : REGNO_OK_FOR_BASE_NONSTRICT_P (REGNO (x))));\n }\n \n /* Return true if X is a legitimate index register.  STRICT_P says\n@@ -1624,7 +1624,7 @@ m68k_legitimate_index_reg_p (rtx x, bool strict_p)\n   return (REG_P (x)\n \t  && (strict_p\n \t      ? REGNO_OK_FOR_INDEX_P (REGNO (x))\n-\t      : !FP_REGNO_P (REGNO (x))));\n+\t      : REGNO_OK_FOR_INDEX_NONSTRICT_P (REGNO (x))));\n }\n \n /* Return true if X is a legitimate index expression for a (d8,An,Xn) or"}, {"sha": "3ff24842343abe48f6145f54c4c28cb9b0fd62b7", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf32249ec2e8df94fa91c0c6d673ec44dec63da3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=bf32249ec2e8df94fa91c0c6d673ec44dec63da3", "patch": "@@ -662,16 +662,16 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Macros to check register numbers against specific register classes.  */\n \n /* True for data registers, D0 through D7.  */\n-#define DATA_REGNO_P(REGNO) ((unsigned int) (REGNO) < 8)\n+#define DATA_REGNO_P(REGNO)\tIN_RANGE (REGNO, 0, 7)\n \n /* True for address registers, A0 through A7.  */\n-#define ADDRESS_REGNO_P(REGNO) (((unsigned int) (REGNO) - 8) < 8)\n+#define ADDRESS_REGNO_P(REGNO)\tIN_RANGE (REGNO, 8, 15)\n \n /* True for integer registers, D0 through D7 and A0 through A7.  */\n-#define INT_REGNO_P(REGNO) ((unsigned int) (REGNO) < 16)\n+#define INT_REGNO_P(REGNO)\tIN_RANGE (REGNO, 0, 15)\n \n /* True for floating point registers, FP0 through FP7.  */\n-#define FP_REGNO_P(REGNO) (((unsigned int) (REGNO) - 16) < 8)\n+#define FP_REGNO_P(REGNO)\tIN_RANGE (REGNO, 16, 23)\n \n #define REGNO_OK_FOR_INDEX_P(REGNO)\t\t\t\\\n   (INT_REGNO_P (REGNO)\t\t\t\t\t\\\n@@ -681,13 +681,15 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n   (ADDRESS_REGNO_P (REGNO)\t\t\t\t\\\n    || ADDRESS_REGNO_P (reg_renumber[REGNO]))\n \n-#define REGNO_OK_FOR_DATA_P(REGNO)\t\t\t\\\n-  (DATA_REGNO_P (REGNO)\t\t\t\t\t\\\n-   || DATA_REGNO_P (reg_renumber[REGNO]))\n+#define REGNO_OK_FOR_INDEX_NONSTRICT_P(REGNO)\t\t\\\n+  (INT_REGNO_P (REGNO)\t\t\t\t\t\\\n+   || REGNO == ARG_POINTER_REGNUM\t\t\t\\\n+   || REGNO >= FIRST_PSEUDO_REGISTER)\n \n-#define REGNO_OK_FOR_FP_P(REGNO)\t\t\t\\\n-  (FP_REGNO_P (REGNO)\t\t\t\t\t\\\n-   || FP_REGNO_P (reg_renumber[REGNO]))\n+#define REGNO_OK_FOR_BASE_NONSTRICT_P(REGNO)\t\t\\\n+  (ADDRESS_REGNO_P (REGNO)\t\t\t\t\\\n+   || REGNO == ARG_POINTER_REGNUM\t\t\t\\\n+   || REGNO >= FIRST_PSEUDO_REGISTER)\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n@@ -697,13 +699,13 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    define_optimization.  */\n \n /* 1 if X is a data register.  */\n-#define DATA_REG_P(X) (REG_P (X) && REGNO_OK_FOR_DATA_P (REGNO (X)))\n+#define DATA_REG_P(X)\t(REG_P (X) && DATA_REGNO_P (REGNO (X)))\n \n /* 1 if X is an fp register.  */\n-#define FP_REG_P(X) (REG_P (X) && REGNO_OK_FOR_FP_P (REGNO (X)))\n+#define FP_REG_P(X)\t(REG_P (X) && FP_REGNO_P (REGNO (X)))\n \n /* 1 if X is an address register  */\n-#define ADDRESS_REG_P(X) (REG_P (X) && REGNO_OK_FOR_BASE_P (REGNO (X)))\n+#define ADDRESS_REG_P(X) (REG_P (X) && ADDRESS_REGNO_P (REGNO (X)))\n \f\n /* True if SYMBOL + OFFSET constants must refer to something within\n    SYMBOL's section.  */"}]}