{"sha": "013fca64fc17ba646c3564eab52fac50f0751188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzZmNhNjRmYzE3YmE2NDZjMzU2NGVhYjUyZmFjNTBmMDc1MTE4OA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-18T07:50:56Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-31T22:12:47Z"}, "message": "d: Merge UDAs between function prototype and definitions (PR90136)\n\nThis change fixes the symbol merging in get_symbol_decl to also consider\nprototypes.  This allows the ability to set user defined attributes on\nthe prototype of a function, which then get applied to the definition,\nif found later in the compilation.\n\nThe lowering of UDAs to GCC attributes has been commonized into a single\nfunction called apply_user_attributes.\n\ngcc/d/ChangeLog:\n\n\tPR d/90136\n\t* d-attribs.cc: Include dmd/attrib.h.\n\t(build_attributes): Redeclare as static.\n\t(apply_user_attributes): New function.\n\t* d-tree.h (class UserAttributeDeclaration): Remove.\n\t(build_attributes): Remove.\n\t(apply_user_attributes): Declare.\n\t(finish_aggregate_type): Remove attrs argument.\n\t* decl.cc (get_symbol_decl): Merge declaration prototypes with\n\tdefinitions.  Use apply_user_attributes.\n\t* modules.cc (layout_moduleinfo_fields): Remove last argument to\n\tfinish_aggregate_type.\n\t* typeinfo.cc (layout_classinfo_interfaces): Likewise.\n\t* types.cc (layout_aggregate_members): Likewise.\n\t(finish_aggregate_type): Remove attrs argument.\n\t(TypeVisitor::visit (TypeEnum *)): Use apply_user_attributes.\n\t(TypeVisitor::visit (TypeStruct *)): Remove last argument to\n\tfinish_aggregate_type.  Use apply_user_attributes.\n\t(TypeVisitor::visit (TypeClass *)): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/90136\n\t* gdc.dg/pr90136a.d: New test.\n\t* gdc.dg/pr90136b.d: New test.\n\t* gdc.dg/pr90136c.d: New test.", "tree": {"sha": "c75868fd2d0b82c3e4ba548430629646ea5fb681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75868fd2d0b82c3e4ba548430629646ea5fb681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/013fca64fc17ba646c3564eab52fac50f0751188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013fca64fc17ba646c3564eab52fac50f0751188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013fca64fc17ba646c3564eab52fac50f0751188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013fca64fc17ba646c3564eab52fac50f0751188/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c16f7fc903c1c1c912faf7889b69d83429b7b2e"}], "stats": {"total": 197, "additions": 146, "deletions": 51}, "files": [{"sha": "d27f83e77d474db756635d740656769ae1c11b5c", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -1,3 +1,25 @@\n+2020-04-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90136\n+\t* d-attribs.cc: Include dmd/attrib.h.\n+\t(build_attributes): Redeclare as static.\n+\t(apply_user_attributes): New function.\n+\t* d-tree.h (class UserAttributeDeclaration): Remove.\n+\t(build_attributes): Remove.\n+\t(apply_user_attributes): Declare.\n+\t(finish_aggregate_type): Remove attrs argument.\n+\t* decl.cc (get_symbol_decl): Merge declaration prototypes with\n+\tdefinitions.  Use apply_user_attributes.\n+\t* modules.cc (layout_moduleinfo_fields): Remove last argument to\n+\tfinish_aggregate_type.\n+\t* typeinfo.cc (layout_classinfo_interfaces): Likewise.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\t(finish_aggregate_type): Remove attrs argument.\n+\t(TypeVisitor::visit (TypeEnum *)): Use apply_user_attributes.\n+\t(TypeVisitor::visit (TypeStruct *)): Remove last argument to\n+\tfinish_aggregate_type.  Use apply_user_attributes.\n+\t(TypeVisitor::visit (TypeClass *)): Likewise.\n+\n 2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-attribs.cc (d_langhook_common_attribute_table): Add always_inline."}, {"sha": "69434c639e7b4f6d73100ea33f95aeb90d26fc27", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n \n+#include \"dmd/attrib.h\"\n #include \"dmd/declaration.h\"\n #include \"dmd/mtype.h\"\n \n@@ -234,7 +235,7 @@ uda_attribute_p (const char *name)\n    `gcc.attribute.Attribute'.  This symbol is internally recognized by the\n    compiler and maps them to their equivalent GCC attribute.  */\n \n-tree\n+static tree\n build_attributes (Expressions *eattrs)\n {\n   if (!eattrs)\n@@ -319,6 +320,30 @@ build_attributes (Expressions *eattrs)\n   return attribs;\n }\n \n+/* If any GCC attributes are found in the declaration SYM, apply them to the\n+   type or decl NODE.  */\n+\n+void\n+apply_user_attributes (Dsymbol *sym, tree node)\n+{\n+  if (!sym->userAttribDecl)\n+    {\n+      if (DECL_P (node) && DECL_ATTRIBUTES (node) != NULL)\n+\tdecl_attributes (&node, DECL_ATTRIBUTES (node), 0);\n+\n+      return;\n+    }\n+\n+  location_t saved_location = input_location;\n+  input_location = make_location_t (sym->loc);\n+\n+  Expressions *attrs = sym->userAttribDecl->getAttributes ();\n+  decl_attributes (&node, build_attributes (attrs),\n+\t\t   TYPE_P (node) ? ATTR_FLAG_TYPE_IN_PLACE : 0);\n+\n+  input_location = saved_location;\n+}\n+\n /* Built-in attribute handlers.  */\n \n /* Handle a \"noreturn\" attribute; arguments as in"}, {"sha": "89feb9e7010e8d4d4c6fac2da72b46e0a994f8a5", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -29,7 +29,6 @@ class FuncDeclaration;\n class StructDeclaration;\n class TypeInfoDeclaration;\n class VarDeclaration;\n-class UserAttributeDeclaration;\n class Expression;\n class ClassReferenceExp;\n class Module;\n@@ -485,7 +484,7 @@ extern bool doing_semantic_analysis_p;\n /* In d-attribs.c.  */\n extern tree insert_type_attribute (tree, const char *, tree = NULL_TREE);\n extern tree insert_decl_attribute (tree, const char *, tree = NULL_TREE);\n-extern tree build_attributes (Expressions *);\n+extern void apply_user_attributes (Dsymbol *, tree);\n \n /* In d-builtins.cc.  */\n extern const attribute_spec d_langhook_attribute_table[];\n@@ -681,8 +680,7 @@ extern tree make_array_type (Type *, unsigned HOST_WIDE_INT);\n extern tree make_struct_type (const char *, int n, ...);\n extern tree insert_type_modifiers (tree, unsigned);\n extern void insert_aggregate_field (tree, tree, size_t);\n-extern void finish_aggregate_type (unsigned, unsigned, tree,\n-\t\t\t\t   UserAttributeDeclaration *);\n+extern void finish_aggregate_type (unsigned, unsigned, tree);\n extern tree build_ctype (Type *);\n \n #endif  /* GCC_D_TREE_H  */"}, {"sha": "042c10c2943128e3f9f6e854350692a7b123618f", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -1110,7 +1110,10 @@ get_symbol_decl (Declaration *decl)\n       /* Set function type afterwards as there could be self references.  */\n       TREE_TYPE (decl->csym) = build_ctype (fd->type);\n \n-      if (!fd->fbody)\n+      /* Set DECL_INITIAL now if the function has a definition.  */\n+      if (fd->fbody)\n+\tDECL_INITIAL (decl->csym) = error_mark_node;\n+      else\n \tDECL_EXTERNAL (decl->csym) = 1;\n     }\n   else\n@@ -1151,26 +1154,38 @@ get_symbol_decl (Declaration *decl)\n \t\t\t\t\t\t\t mangled_name);\n       /* The frontend doesn't handle duplicate definitions of unused symbols\n \t with the same mangle.  So a check is done here instead.  */\n-      if (!DECL_EXTERNAL (decl->csym))\n+      if (IDENTIFIER_DSYMBOL (mangled_name))\n \t{\n-\t  if (IDENTIFIER_DSYMBOL (mangled_name))\n-\t    {\n-\t      Declaration *other = IDENTIFIER_DSYMBOL (mangled_name);\n+\t  Declaration *other = IDENTIFIER_DSYMBOL (mangled_name);\n+\t  tree olddecl = decl->csym;\n+\t  decl->csym = get_symbol_decl (other);\n \n-\t      /* Non-templated variables shouldn't be defined twice.  */\n-\t      if (!decl->isInstantiated ())\n-\t\tScopeDsymbol::multiplyDefined (decl->loc, decl, other);\n-\n-\t      decl->csym = get_symbol_decl (other);\n+\t  /* The current declaration is a prototype or marked extern, merge\n+\t     applied user attributes and return.  */\n+\t  if (DECL_EXTERNAL (olddecl) && !DECL_INITIAL (olddecl))\n+\t    {\n+\t      apply_user_attributes (decl, decl->csym);\n \t      return decl->csym;\n \t    }\n-\n+\t  /* The previous declaration is a prototype or marked extern, set the\n+\t     current declaration as the main reference of the symbol.  */\n+\t  else if (DECL_EXTERNAL (decl->csym) && !DECL_INITIAL (decl->csym))\n+\t    {\n+\t      IDENTIFIER_DSYMBOL (mangled_name) = decl;\n+\t      DECL_EXTERNAL (decl->csym) = 0;\n+\t    }\n+\t  /* Non-extern, non-templated decls shouldn't be defined twice.  */\n+\t  else if (!decl->isInstantiated ())\n+\t    ScopeDsymbol::multiplyDefined (decl->loc, decl, other);\n+\t}\n+      else\n+\t{\n \t  IDENTIFIER_PRETTY_NAME (mangled_name)\n \t    = get_identifier (decl->toPrettyChars (true));\n \t  IDENTIFIER_DSYMBOL (mangled_name) = decl;\n-\t}\n \n-      SET_DECL_ASSEMBLER_NAME (decl->csym, mangled_name);\n+\t  SET_DECL_ASSEMBLER_NAME (decl->csym, mangled_name);\n+\t}\n     }\n \n   DECL_LANG_SPECIFIC (decl->csym) = build_lang_decl (decl);\n@@ -1358,13 +1373,7 @@ get_symbol_decl (Declaration *decl)\n     }\n \n   /* Apply any user attributes that may affect semantic meaning.  */\n-  if (decl->userAttribDecl)\n-    {\n-      Expressions *attrs = decl->userAttribDecl->getAttributes ();\n-      decl_attributes (&decl->csym, build_attributes (attrs), 0);\n-    }\n-  else if (DECL_ATTRIBUTES (decl->csym) != NULL)\n-    decl_attributes (&decl->csym, DECL_ATTRIBUTES (decl->csym), 0);\n+  apply_user_attributes (decl, decl->csym);\n \n   /* %% Probably should be a little more intelligent about setting this.  */\n   TREE_USED (decl->csym) = 1;"}, {"sha": "4f541905a94a99d5753252154cf2a7c7515e16e3", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -543,7 +543,7 @@ layout_moduleinfo_fields (Module *decl, tree type)\n \n   size_t alignsize = MAX (TYPE_ALIGN_UNIT (type),\n \t\t\t  TYPE_ALIGN_UNIT (ptr_type_node));\n-  finish_aggregate_type (offset, alignsize, type, NULL);\n+  finish_aggregate_type (offset, alignsize, type);\n \n   return type;\n }"}, {"sha": "6aa4f64a7131559f0a4aac8376753eac506a76a3", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -1254,7 +1254,7 @@ layout_classinfo_interfaces (ClassDeclaration *decl)\n \n   /* Update the type size and record mode for the classinfo type.  */\n   if (type != tinfo_types[TK_CLASSINFO_TYPE])\n-    finish_aggregate_type (structsize, TYPE_ALIGN_UNIT (type), type, NULL);\n+    finish_aggregate_type (structsize, TYPE_ALIGN_UNIT (type), type);\n \n   return type;\n }"}, {"sha": "e0e770af325d914c503b81f43fcdf03149810b33", "filename": "gcc/d/types.cc", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -352,8 +352,7 @@ layout_aggregate_members (Dsymbols *members, tree context, bool inherited_p)\n \t  tree offset = size_int (ad->anonoffset);\n \t  fixup_anonymous_offset (TYPE_FIELDS (type), offset);\n \n-\t  finish_aggregate_type (ad->anonstructsize, ad->anonalignsize,\n-\t\t\t\t type, NULL);\n+\t  finish_aggregate_type (ad->anonstructsize, ad->anonalignsize, type);\n \n \t  /* And make the corresponding data member.  */\n \t  tree field = create_field_decl (type, NULL, 0, 0);\n@@ -462,19 +461,8 @@ layout_aggregate_type (AggregateDeclaration *decl, tree type,\n    the finalized record mode.  */\n \n void\n-finish_aggregate_type (unsigned structsize, unsigned alignsize,\n-\t\t       tree type, UserAttributeDeclaration *attrs)\n+finish_aggregate_type (unsigned structsize, unsigned alignsize, tree type)\n {\n-  TYPE_SIZE (type) = NULL_TREE;\n-\n-  /* Write out any GCC attributes that were applied to the type declaration.  */\n-  if (attrs)\n-    {\n-      Expressions *eattrs = attrs->getAttributes ();\n-      decl_attributes (&type, build_attributes (eattrs),\n-\t\t       ATTR_FLAG_TYPE_IN_PLACE);\n-    }\n-\n   /* Set size and alignment as requested by frontend.  */\n   TYPE_SIZE (type) = bitsize_int (structsize * BITS_PER_UNIT);\n   TYPE_SIZE_UNIT (type) = size_int (structsize);\n@@ -878,12 +866,7 @@ class TypeVisitor : public Visitor\n \tbuild_type_decl (t->ctype, t->sym);\n       }\n \n-    if (t->sym->userAttribDecl)\n-      {\n-\tExpressions *eattrs = t->sym->userAttribDecl->getAttributes ();\n-\tdecl_attributes (&t->ctype, build_attributes (eattrs),\n-\t\t\t ATTR_FLAG_TYPE_IN_PLACE);\n-      }\n+    apply_user_attributes (t->sym, t->ctype);\n   }\n \n   /* Build a struct or union type.  Layout should be exactly represented\n@@ -922,8 +905,8 @@ class TypeVisitor : public Visitor\n \n \t/* Put out all fields.  */\n \tlayout_aggregate_type (t->sym, t->ctype, t->sym);\n-\tfinish_aggregate_type (structsize, alignsize, t->ctype,\n-\t\t\t       t->sym->userAttribDecl);\n+\tapply_user_attributes (t->sym, t->ctype);\n+\tfinish_aggregate_type (structsize, alignsize, t->ctype);\n       }\n \n     TYPE_CONTEXT (t->ctype) = d_decl_context (t->sym);\n@@ -965,8 +948,8 @@ class TypeVisitor : public Visitor\n \n     /* Put out all fields, including from each base class.  */\n     layout_aggregate_type (t->sym, basetype, t->sym);\n-    finish_aggregate_type (t->sym->structsize, t->sym->alignsize,\n-\t\t\t   basetype, t->sym->userAttribDecl);\n+    apply_user_attributes (t->sym, basetype);\n+    finish_aggregate_type (t->sym->structsize, t->sym->alignsize, basetype);\n \n     /* Classes only live in memory, so always set the TREE_ADDRESSABLE bit.  */\n     for (tree tv = basetype; tv != NULL_TREE; tv = TYPE_NEXT_VARIANT (tv))"}, {"sha": "adfbdb01af77f955a18f96ac628a32e79002b18e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -1,3 +1,10 @@\n+2020-04-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90136\n+\t* gdc.dg/pr90136a.d: New test.\n+\t* gdc.dg/pr90136b.d: New test.\n+\t* gdc.dg/pr90136c.d: New test.\n+\n 2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* jit.dg/test-version.c: New testcase."}, {"sha": "e623b230f2858b84f0fae18b56c9a470f5b8f59f", "filename": "gcc/testsuite/gdc.dg/pr90136a.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136a.d?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -0,0 +1,21 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93038\n+// { dg-do compile }\n+// { dg-options \"-fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"sum_array \\\\(array\\\\)\" 0 \"optimized\"} }\n+\n+import gcc.attribute;\n+\n+@attribute(\"forceinline\") int sum_array(int[] input);\n+\n+int sum_array(int[] input)\n+{\n+    int sum = 0;\n+    foreach (elem; input)\n+        sum += elem;\n+    return sum;\n+}\n+\n+int test(int[] array)\n+{\n+    return sum_array(array);\n+}"}, {"sha": "f1f9b0a8e6e83842fa4c6871d036f3aec16d8ffe", "filename": "gcc/testsuite/gdc.dg/pr90136b.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136b.d?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -0,0 +1,21 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93038\n+// { dg-do compile }\n+// { dg-options \"-fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"sum_array \\\\(array\\\\)\" 1 \"optimized\"} }\n+\n+import gcc.attribute;\n+\n+@attribute(\"noinline\") int sum_array(int[] input);\n+\n+int sum_array(int[] input)\n+{\n+    int sum = 0;\n+    foreach (elem; input)\n+        sum += elem;\n+    return sum;\n+}\n+\n+int test(int[] array)\n+{\n+    return sum_array(array);\n+}"}, {"sha": "cf1c5de645e0f3ec7b363f0eac8aa933d9211970", "filename": "gcc/testsuite/gdc.dg/pr90136c.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013fca64fc17ba646c3564eab52fac50f0751188/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr90136c.d?ref=013fca64fc17ba646c3564eab52fac50f0751188", "patch": "@@ -0,0 +1,9 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93038\n+// { dg-do compile }\n+// { dg-options \"-Wattributes\" }\n+\n+import gcc.attribute;\n+\n+@attribute(\"forceinline\") int sum_array(int[] input);\n+@attribute(\"noinline\") int sum_array(int[] input);\n+// { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .forceinline.\" \"\" { target *-*-* } .-1 }"}]}