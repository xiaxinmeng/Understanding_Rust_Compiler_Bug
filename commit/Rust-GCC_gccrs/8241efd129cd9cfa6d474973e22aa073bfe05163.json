{"sha": "8241efd129cd9cfa6d474973e22aa073bfe05163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0MWVmZDEyOWNkOWNmYTZkNDc0OTczZTIyYWEwNzNiZmUwNTE2Mw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2014-06-13T18:42:53Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2014-06-13T18:42:53Z"}, "message": "re PR testsuite/61415 (PowerPC test gcc.target/powerpc/tfmode_off.c fails if -mlong-double-64)\n\ngcc/\n\tPR target/61415\n\t* config/rs6000/rs6000-builtin.def (BU_MISC_1): Delete.\n\t(BU_MISC_2): Rename to ...\n\t(BU_LDBL128_2): ... this.\n\t* config/rs6000/rs6000.h (RS6000_BTM_LDBL128): New define.\n\t(RS6000_BTM_COMMON): Add RS6000_BTM_LDBL128.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Handle\n\tRS6000_BTM_LDBL128.\n\t(rs6000_invalid_builtin): Add long double 128-bit builtin support.\n\t(rs6000_builtin_mask_names): Add RS6000_BTM_LDBL128.\n\t* config/rs6000/rs6000.md (unpacktf_0): Remove define)expand.\n\t(unpacktf_1): Likewise.\n\t* doc/extend.texi (__builtin_longdouble_dw0): Remove documentation.\n\t(__builtin_longdouble_dw1): Likewise.\n\t* doc/sourcebuild.texi (longdouble128): Document.\n\ngcc/testsuite/\n\tPR target/61415\n\t* lib/target-supports.exp (check_effective_target_longdouble128): New.\n\t* gcc.target/powerpc/pack02.c: Use it.\n\t* gcc.target/powerpc/tfmode_off.c: Likewise.\n\nFrom-SVN: r211653", "tree": {"sha": "f86eac0176b6a21780459afe94240f51dba7e867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86eac0176b6a21780459afe94240f51dba7e867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8241efd129cd9cfa6d474973e22aa073bfe05163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8241efd129cd9cfa6d474973e22aa073bfe05163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8241efd129cd9cfa6d474973e22aa073bfe05163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8241efd129cd9cfa6d474973e22aa073bfe05163/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7ece684cada075bf1d46669794217ccd4bf8b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ece684cada075bf1d46669794217ccd4bf8b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ece684cada075bf1d46669794217ccd4bf8b3d"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "64046d4b1a80e630124eea1b46ff8a579e895ab4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -1,3 +1,21 @@\n+2014-06-13  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/61415\n+\t* config/rs6000/rs6000-builtin.def (BU_MISC_1): Delete.\n+\t(BU_MISC_2): Rename to ...\n+\t(BU_LDBL128_2): ... this.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_LDBL128): New define.\n+\t(RS6000_BTM_COMMON): Add RS6000_BTM_LDBL128.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Handle\n+\tRS6000_BTM_LDBL128.\n+\t(rs6000_invalid_builtin): Add long double 128-bit builtin support.\n+\t(rs6000_builtin_mask_names): Add RS6000_BTM_LDBL128.\n+\t* config/rs6000/rs6000.md (unpacktf_0): Remove define)expand.\n+\t(unpacktf_1): Likewise.\n+\t* doc/extend.texi (__builtin_longdouble_dw0): Remove documentation.\n+\t(__builtin_longdouble_dw1): Likewise.\n+\t* doc/sourcebuild.texi (longdouble128): Document.\n+\n 2014-06-13  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/61094"}, {"sha": "220d1e9706541a209fe3b5f3e73b576641ebea22", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -622,19 +622,12 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-/* Miscellaneous builtins.  */\n-#define BU_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_HARD_FLOAT,\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+/* 128-bit long double floating point builtins.  */\n+#define BU_LDBL128_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_HARD_FLOAT,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTM_HARD_FLOAT\t\t/* MASK */\t\\\n+\t\t     | RS6000_BTM_LDBL128),\t\t\t\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n@@ -1593,10 +1586,8 @@ BU_P8V_MISC_3 (BCDSUB_OV,\t\"bcdsub_ov\",\tCONST,\tbcdsub_unordered)\n BU_DFP_MISC_2 (PACK_TD,\t\t\"pack_dec128\",\t\tCONST,\tpacktd)\n BU_DFP_MISC_2 (UNPACK_TD,\t\"unpack_dec128\",\tCONST,\tunpacktd)\n \n-BU_MISC_2 (PACK_TF,\t\t\"pack_longdouble\",\tCONST,\tpacktf)\n-BU_MISC_2 (UNPACK_TF,\t\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n-BU_MISC_1 (UNPACK_TF_0,\t\t\"longdouble_dw0\",\tCONST,\tunpacktf_0)\n-BU_MISC_1 (UNPACK_TF_1,\t\t\"longdouble_dw1\",\tCONST,\tunpacktf_1)\n+BU_LDBL128_2 (PACK_TF,\t\t\"pack_longdouble\",\tCONST,\tpacktf)\n+BU_LDBL128_2 (UNPACK_TF,\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n \n BU_P7_MISC_2 (PACK_V1TI,\t\"pack_vector_int128\",\tCONST,\tpackv1ti)\n BU_P7_MISC_2 (UNPACK_V1TI,\t\"unpack_vector_int128\",\tCONST,\tunpackv1ti)"}, {"sha": "5711a03d0977ff49a181eb60b5b16d636112f3ef", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -3041,7 +3041,8 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n-\t  | ((TARGET_HARD_FLOAT)\t    ? RS6000_BTM_HARD_FLOAT : 0));\n+\t  | ((TARGET_HARD_FLOAT)\t    ? RS6000_BTM_HARD_FLOAT : 0)\n+\t  | ((TARGET_LONG_DOUBLE_128)\t    ? RS6000_BTM_LDBL128 : 0));\n }\n \n /* Override command line options.  Mostly we process the processor type and\n@@ -13589,11 +13590,15 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n   else if ((fnmask & (RS6000_BTM_DFP | RS6000_BTM_P8_VECTOR))\n \t   == (RS6000_BTM_DFP | RS6000_BTM_P8_VECTOR))\n     error (\"Builtin function %s requires the -mhard-dfp and\"\n-\t   \"-mpower8-vector options\", name);\n+\t   \" -mpower8-vector options\", name);\n   else if ((fnmask & RS6000_BTM_DFP) != 0)\n     error (\"Builtin function %s requires the -mhard-dfp option\", name);\n   else if ((fnmask & RS6000_BTM_P8_VECTOR) != 0)\n     error (\"Builtin function %s requires the -mpower8-vector option\", name);\n+  else if ((fnmask & (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n+\t   == (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n+    error (\"Builtin function %s requires the -mhard-float and\"\n+\t   \" -mlong-double-128 options\", name);\n   else if ((fnmask & RS6000_BTM_HARD_FLOAT) != 0)\n     error (\"Builtin function %s requires the -mhard-float option\", name);\n   else\n@@ -31413,6 +31418,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"htm\",\t\t RS6000_BTM_HTM,\tfalse, false },\n   { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },\n   { \"hard-float\",\t RS6000_BTM_HARD_FLOAT,\tfalse, false },\n+  { \"long-double-128\",\t RS6000_BTM_LDBL128,\tfalse, false },\n };\n \n /* Option variables that we want to support inside attribute((target)) and"}, {"sha": "3bd010476886999140f82da2d0560e3a5fe64fdf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -2508,8 +2508,8 @@ extern int frame_pointer_needed;\n #define RS6000_BTC_SAT\t\tRS6000_BTC_MISC\t/* saturate sets VSCR.  */\n \n /* Builtin targets.  For now, we reuse the masks for those options that are in\n-   target flags, and pick two random bits for SPE and paired which aren't in\n-   target_flags.  */\n+   target flags, and pick three random bits for SPE, paired and ldbl128 which\n+   aren't in target_flags.  */\n #define RS6000_BTM_ALWAYS\t0\t\t/* Always enabled.  */\n #define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n #define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n@@ -2526,6 +2526,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_CELL\t\tMASK_FPRND\t/* Target is cell powerpc.  */\n #define RS6000_BTM_DFP\t\tMASK_DFP\t/* Decimal floating point.  */\n #define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n+#define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n@@ -2539,7 +2540,8 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_POPCNTD\t\t\t\\\n \t\t\t\t | RS6000_BTM_CELL\t\t\t\\\n \t\t\t\t | RS6000_BTM_DFP\t\t\t\\\n-\t\t\t\t | RS6000_BTM_HARD_FLOAT)\n+\t\t\t\t | RS6000_BTM_HARD_FLOAT\t\t\\\n+\t\t\t\t | RS6000_BTM_LDBL128)\n \n /* Define builtin enum index.  */\n "}, {"sha": "c6e85b3cd49407bf559166ffb89c41e22ff3531c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -15704,26 +15704,6 @@\n   \"\"\n   \"\")\n \n-;; The Advance Toolchain 7.0-3 added private builtins: __builtin_longdouble_dw0\n-;; and __builtin_longdouble_dw1 to optimize glibc.  Add support for these\n-;; builtins here.\n-\n-(define_expand \"unpacktf_0\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:DF [(match_operand:TF 1 \"register_operand\" \"\")\n-\t\t    (const_int 0)]\n-\t UNSPEC_UNPACK_128BIT))]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"unpacktf_1\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:DF [(match_operand:TF 1 \"register_operand\" \"\")\n-\t\t    (const_int 1)]\n-\t UNSPEC_UNPACK_128BIT))]\n-  \"\"\n-  \"\")\n-\n (define_insn_and_split \"unpack<mode>_dm\"\n   [(set (match_operand:<FP128_64> 0 \"nonimmediate_operand\" \"=d,m,d,r,m\")\n \t(unspec:<FP128_64>"}, {"sha": "f83a8d70b0512ed5821ddf4e4cff766eecb5ad55", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -13416,8 +13416,6 @@ double __builtin_rsqrt (double);\n uint64_t __builtin_ppc_get_timebase ();\n unsigned long __builtin_ppc_mftb ();\n double __builtin_unpack_longdouble (long double, int);\n-double __builtin_longdouble_dw0 (long double);\n-double __builtin_longdouble_dw1 (long double);\n long double __builtin_pack_longdouble (double, double);\n @end smallexample\n "}, {"sha": "39152df272a08a6c805511ca65b06ac87957b44e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -1295,6 +1295,9 @@ Target has 64-bit @code{double}.\n @item double64plus\n Target has @code{double} that is 64 bits or longer.\n \n+@item longdouble128\n+Target has 128-bit @code{long double}.\n+\n @item int32plus\n Target has @code{int} that is at 32 bits or longer.\n "}, {"sha": "919185df93ffb4beb41dc234f08692fd424a21f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -1,3 +1,10 @@\n+2014-06-13  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/61415\n+\t* lib/target-supports.exp (check_effective_target_longdouble128): New.\n+\t* gcc.target/powerpc/pack02.c: Use it.\n+\t* gcc.target/powerpc/tfmode_off.c: Likewise.\n+\n 2014-06-13  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR rtl-optimization/61094"}, {"sha": "f85d3ff00b015c0b90a9391181436290051868d3", "filename": "gcc/testsuite/gcc.target/powerpc/pack02.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpack02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpack02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpack02.c?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -2,6 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { powerpc*-*-*spe* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_fprs } */\n+/* { dg-require-effective-target longdouble128 } */\n /* { dg-options \"-O2 -mhard-float\" } */\n \n #include <stddef.h>"}, {"sha": "ea703f0ee0a8da8fe8573e03a1b14d7b33b74c61", "filename": "gcc/testsuite/gcc.target/powerpc/tfmode_off.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do assemble } */\n /* { dg-skip-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"no TFmode\" { powerpc-*-eabi* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target longdouble128 } */\n /* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n \n typedef float TFmode __attribute__ ((mode (TF)));"}, {"sha": "03ddab425f2c7cf2d8aa0898d986f30bac2e6731", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241efd129cd9cfa6d474973e22aa073bfe05163/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8241efd129cd9cfa6d474973e22aa073bfe05163", "patch": "@@ -1862,6 +1862,15 @@ proc check_effective_target_large_double { } {\n     }]\n }\n \n+# Return 1 if the target supports long double of 128 bits,\n+# 0 otherwise.\n+\n+proc check_effective_target_longdouble128 { } {\n+    return [check_no_compiler_messages longdouble128 object {\n+\tint dummy[sizeof(long double) == 16 ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if the target supports double of 64 bits,\n # 0 otherwise.\n "}]}