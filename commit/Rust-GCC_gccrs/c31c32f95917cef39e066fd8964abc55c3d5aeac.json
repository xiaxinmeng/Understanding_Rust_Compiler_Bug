{"sha": "c31c32f95917cef39e066fd8964abc55c3d5aeac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxYzMyZjk1OTE3Y2VmMzllMDY2ZmQ4OTY0YWJjNTVjM2Q1YWVhYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2010-07-13T21:55:57Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-07-13T21:55:57Z"}, "message": "re PR other/44874 (TDF_NOUID dumps miss information about DECL_UID ordering)\n\ngcc:\n\tPR other/44874\n\t* tree-dump.c (dump_options): Add enumerate_locals entry.\n\tAdd TDF_NOID exclusion to all entry.\n\t* tree-dump.h (dump_enumerated_decls): Declare.\n\t* tree-pretty-print.c (dump_generic_node): For TDF_NOID,\n\tDon't display type uid.\n\t(print_declaration): Don't crash on TREE_TYPE (t) == 0.\n\t* tree-pass.h (TDF_ENUMERATE_LOCALS): Define.\n\t* tree-ssa-live.c: Include gimple.h.\n\t(numbered_tree_d): New struct.\n\t(numbered_tree): New typedef.\n\t(DEF_VEC_O (numbered_tree): New.\n\t(DEF_VEC_ALLOC_O (numbered_tree, heap)): Likewise.\n\t(compare_decls_by_uid, dump_enumerated_decls_push): New functions.\n\t(dump_enumerated_decls): Likewise.\n\t* tree-optimize.c (execute_cleanup_cfg_post_optimizing): If comparing\n\tdebug info and flag_dump_final_insns, call dump_enumerated_decls.\n\t* tree-cfg.c (dump_function_to_file): Call dump_enumerated_decls.\n\t* Makefile.in (tree-ssa-live.o): Depend on $(GIMPLE_H).\ngcc/testsuite:\n\tPR other/44874\n\tPR debug/44832\n\t* c-c++-common/pr44832.c: New test.\n\nFrom-SVN: r162156", "tree": {"sha": "78e64b469ad027c41fccce9021395470fd154b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78e64b469ad027c41fccce9021395470fd154b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c31c32f95917cef39e066fd8964abc55c3d5aeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31c32f95917cef39e066fd8964abc55c3d5aeac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31c32f95917cef39e066fd8964abc55c3d5aeac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31c32f95917cef39e066fd8964abc55c3d5aeac/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bca11c4efc6271558e920c5a2395bc27ea18e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bca11c4efc6271558e920c5a2395bc27ea18e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bca11c4efc6271558e920c5a2395bc27ea18e74"}], "stats": {"total": 323, "additions": 320, "deletions": 3}, "files": [{"sha": "cf771a7a2b5f30087b441ef3b629b273178179d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -1,3 +1,25 @@\n+2010-07-13  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR other/44874\n+\t* tree-dump.c (dump_options): Add enumerate_locals entry.\n+\tAdd TDF_NOID exclusion to all entry.\n+\t* tree-dump.h (dump_enumerated_decls): Declare.\n+\t* tree-pretty-print.c (dump_generic_node): For TDF_NOID,\n+\tDon't display type uid.\n+\t(print_declaration): Don't crash on TREE_TYPE (t) == 0.\n+\t* tree-pass.h (TDF_ENUMERATE_LOCALS): Define.\n+\t* tree-ssa-live.c: Include gimple.h.\n+\t(numbered_tree_d): New struct.\n+\t(numbered_tree): New typedef.\n+\t(DEF_VEC_O (numbered_tree): New.\n+\t(DEF_VEC_ALLOC_O (numbered_tree, heap)): Likewise.\n+\t(compare_decls_by_uid, dump_enumerated_decls_push): New functions.\n+\t(dump_enumerated_decls): Likewise.\n+\t* tree-optimize.c (execute_cleanup_cfg_post_optimizing): If comparing\n+\tdebug info and flag_dump_final_insns, call dump_enumerated_decls.\n+\t* tree-cfg.c (dump_function_to_file): Call dump_enumerated_decls.\n+\t* Makefile.in (tree-ssa-live.o): Depend on $(GIMPLE_H).\n+\n 2010-07-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expmed.h (MAX_BITS_PER_WORD): Move to..."}, {"sha": "5a45701b71fa878f8f7330d3e55b1fa06413cb41", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -2452,7 +2452,7 @@ domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(TOPLEV_H) debug.h $(FLAGS_H) \\\n-   tree-pretty-print.h gimple-pretty-print.h\n+   tree-pretty-print.h gimple-pretty-print.h $(GIMPLE_H)\n tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) \\\n    $(TREE_PASS_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H) \\"}, {"sha": "8eafd743484d1038191a43d6fcc79766132edfbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -1,3 +1,9 @@\n+2010-07-10  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR other/44874\n+\tPR debug/44832\n+\t* c-c++-common/pr44832.c: New test.\n+\n 2010-07-13  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR objc/44488"}, {"sha": "4138e37f01de77151fad60f572515a4d2fc3f0f3", "filename": "gcc/testsuite/c-c++-common/pr44832.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44832.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44832.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44832.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -0,0 +1,160 @@\n+/* PR debug/44832 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+struct rtx_def;\n+typedef struct rtx_def *rtx;\n+typedef const struct rtx_def *const_rtx;\n+struct rtvec_def;\n+typedef struct rtvec_def *rtvec;\n+extern int ix86_isa_flags;\n+\n+enum machine_mode\n+{\n+  VOIDmode,\n+  V8HImode,\n+  V16QImode,\n+  V4SImode,\n+  V2DImode,\n+  V32QImode,\n+  MAX_MACHINE_MODE,\n+\n+  NUM_MACHINE_MODES = MAX_MACHINE_MODE\n+};\n+extern unsigned char mode_size[NUM_MACHINE_MODES];\n+extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n+extern const unsigned char mode_nunits[NUM_MACHINE_MODES];\n+enum rtx_code {\n+\n+CONST_INT ,\n+\n+CONST_FIXED ,\n+\n+CONST_DOUBLE\n+\n+  };\n+union rtunion_def\n+{\n+  rtvec rt_rtvec;\n+};\n+typedef union rtunion_def rtunion;\n+struct rtx_def {\n+\n+  __extension__ enum rtx_code code: 16;\n+\n+  __extension__ enum machine_mode mode : 8;\n+\n+  union u {\n+    rtunion fld[1];\n+  } u;\n+};\n+struct rtvec_def {\n+  rtx elem[1];\n+};\n+extern int rtx_equal_p (const_rtx, const_rtx);\n+extern rtx gen_reg_rtx (enum machine_mode);\n+\n+extern void\n+ix86_expand_vector_init_concat (enum machine_mode mode,\n+\t\t\t\trtx target, rtx *ops, int n);\n+\n+static void\n+ix86_expand_vector_init_general (unsigned char mmx_ok, enum machine_mode mode,\n+     rtx target, rtx vals)\n+{\n+  rtx ops[32], op0, op1;\n+  enum machine_mode half_mode = VOIDmode;\n+  int n, i;\n+\n+  switch (mode)\n+    {\n+    case V4SImode:\n+    case V2DImode:\n+      n = mode_nunits[mode];\n+      ix86_expand_vector_init_concat (mode, target, ops, n);\n+      return;\n+\n+    case V32QImode:\n+      goto half;\n+half:\n+{\n+  typedef int eger;\n+  if (mode != V4SImode)\n+ ops[0] = 0;\n+}\n+      n = mode_nunits[mode];\n+      for (i = 0; i < n; i++)\n+ ops[i] = (((((vals)->u.fld[0]).rt_rtvec))->elem[i]);\n+      op0 = gen_reg_rtx (VOIDmode);\n+      return;\n+\n+    case V16QImode:\n+      if (!((ix86_isa_flags & (1 << 19)) != 0))\n+ break;\n+\n+    case V8HImode:\n+      if (!((ix86_isa_flags & (1 << 17)) != 0))\n+ break;\n+\n+      n = mode_nunits[mode];\n+      for (i = 0; i < n; i++)\n+ ops[i] = (((((vals)->u.fld[0]).rt_rtvec))->elem[i]);\n+      return;\n+\n+    default:\n+      ;\n+    }\n+\n+    {\n+      int n_words;\n+\n+      n_words = ((unsigned short) mode_size[mode]) / 4;\n+\n+      if (n_words == 4)\n+   ix86_expand_vector_init_general (0, V4SImode, 0, 0);\n+    }\n+}\n+\n+\n+void\n+ix86_expand_vector_init (unsigned char mmx_ok, rtx target, rtx vals)\n+{\n+  enum machine_mode mode = ((enum machine_mode) (target)->mode);\n+  enum machine_mode inner_mode = ((enum machine_mode) mode_inner[mode]);\n+  int n_elts = mode_nunits[mode];\n+  int n_var = 0, one_var = -1;\n+  unsigned char all_same = 1, all_const_zero = 1;\n+  int i;\n+  rtx x;\n+\n+  for (i = 0; i < n_elts; ++i)\n+    {\n+      x = (((((vals)->u.fld[0]).rt_rtvec))->elem[i]);\n+      if (!((((enum rtx_code) (x)->code) == CONST_INT)\n+     || ((enum rtx_code) (x)->code) == CONST_DOUBLE\n+     || ((enum rtx_code) (x)->code) == CONST_FIXED))\n+ n_var++, one_var = i;\n+      else \n+ all_const_zero = 0;\n+      if (i > 0 && !rtx_equal_p (x, (((((vals)->u.fld[0]).rt_rtvec))->elem[0])))\n+ all_same = 0;\n+    }\n+\n+\n+  if (n_var == 0)\n+    {\n+      return;\n+    }\n+\n+  if (all_same)\n+    return;\n+\n+  if (n_var == 1)\n+    {\n+      if (all_const_zero)\n+ return;\n+\n+    }\n+\n+  ix86_expand_vector_init_general (mmx_ok, mode, target, vals);\n+}"}, {"sha": "b4923c1b49478b2b187ceeaa0d1a6b9c07217cc5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -6449,6 +6449,8 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \tfprintf (file, \"}\\n\");\n     }\n \n+  if (flags & TDF_ENUMERATE_LOCALS)\n+    dump_enumerated_decls (file, flags);\n   fprintf (file, \"\\n\\n\");\n \n   /* Restore CFUN.  */"}, {"sha": "fcbace23683ce7ca4e99d2a39a64006752088912", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -821,9 +821,10 @@ static const struct dump_option_value_info dump_options[] =\n   {\"eh\", TDF_EH},\n   {\"alias\", TDF_ALIAS},\n   {\"nouid\", TDF_NOUID},\n+  {\"enumerate_locals\", TDF_ENUMERATE_LOCALS},\n   {\"all\", ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_TREE | TDF_RTL | TDF_IPA\n \t    | TDF_STMTADDR | TDF_GRAPH | TDF_DIAGNOSTIC | TDF_VERBOSE\n-\t    | TDF_RHS_ONLY | TDF_NOUID)},\n+\t    | TDF_RHS_ONLY | TDF_NOUID | TDF_ENUMERATE_LOCALS)},\n   {NULL, 0}\n };\n "}, {"sha": "f5b04ff67ea42743f8b351c17fe82d9c786e453d", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -91,6 +91,7 @@ extern void queue_and_dump_index (dump_info_p, const char *, const_tree, int);\n extern void queue_and_dump_type (dump_info_p, const_tree);\n extern void dump_function (int, tree);\n extern void dump_function_to_file (tree, FILE *, int);\n+extern void dump_enumerated_decls (FILE *, int);\n extern void debug_function (tree, int);\n extern int dump_flag (dump_info_p, int, const_tree);\n "}, {"sha": "e736b4fab81caa6dea0ecb7dee0969d79237c7c1", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -191,6 +191,35 @@ execute_cleanup_cfg_post_optimizing (void)\n   cleanup_tree_cfg ();\n   cleanup_dead_labels ();\n   group_case_labels ();\n+  if ((flag_compare_debug_opt || flag_compare_debug)\n+      && flag_dump_final_insns)\n+    {\n+      FILE *final_output = fopen (flag_dump_final_insns, \"a\");\n+\n+      if (!final_output)\n+\t{\n+\t  error (\"could not open final insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n+\t  flag_dump_final_insns = NULL;\n+\t}\n+      else\n+\t{\n+\t  int save_unnumbered = flag_dump_unnumbered;\n+\t  int save_noaddr = flag_dump_noaddr;\n+\n+\t  flag_dump_noaddr = flag_dump_unnumbered = 1;\n+\t  fprintf (final_output, \"\\n\");\n+\t  dump_enumerated_decls (final_output, dump_flags | TDF_NOUID);\n+\t  flag_dump_noaddr = save_noaddr;\n+\t  flag_dump_unnumbered = save_unnumbered;\n+\t  if (fclose (final_output))\n+\t    {\n+\t      error (\"could not close final insn dump file %qs: %m\",\n+\t\t     flag_dump_final_insns);\n+\t      flag_dump_final_insns = NULL;\n+\t    }\n+\t}\n+    }\n   return 0;\n }\n "}, {"sha": "c72d7cfa6da019bf248a0f50d9560e77d0a3f766", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -81,6 +81,7 @@ enum tree_dump_index\n \t\t\t\t\t   holding this gimple statement.  */\n #define TDF_NOUID\t(1 << 20)\t/* omit UIDs from dumps.  */\n #define TDF_ALIAS\t(1 << 21)\t/* display alias information  */\n+#define TDF_ENUMERATE_LOCALS (1 << 22)\t/* Enumerate locals by uid.  */\n \n \n /* In tree-dump.c */"}, {"sha": "fde91844ec7123df225fc7c212067160ce4daa24", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -757,6 +757,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  pp_string (buffer, str);\n \t  if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n \t    dump_decl_name (buffer, TYPE_NAME (node), flags);\n+\t  else if (flags & TDF_NOUID)\n+\t    pp_printf (buffer, \"<Txxxx>\");\n \t  else\n \t    pp_printf (buffer, \"<T%x>\", TYPE_UID (node));\n \n@@ -1081,6 +1083,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t}\n       if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n \tdump_decl_name (buffer, TYPE_NAME (node), flags);\n+      else if (flags & TDF_NOUID)\n+\tpp_printf (buffer, \"<Txxxx>\");\n       else\n \tpp_printf (buffer, \"<T%x>\", TYPE_UID (node));\n       dump_function_declaration (buffer, node, spc, flags);\n@@ -2312,7 +2316,7 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n     pp_string (buffer, \"static \");\n \n   /* Print the type and name.  */\n-  if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n+  if (TREE_TYPE (t) && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n     {\n       tree tmp;\n "}, {"sha": "fcd277951fb6889cc8dee79cf7e15d53e9ead987", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31c32f95917cef39e066fd8964abc55c3d5aeac/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=c31c32f95917cef39e066fd8964abc55c3d5aeac", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"debug.h\"\n #include \"flags.h\"\n+#include \"gimple.h\"\n \n #ifdef ENABLE_CHECKING\n static void  verify_live_on_entry (tree_live_info_p);\n@@ -1196,6 +1197,96 @@ dump_live_info (FILE *f, tree_live_info_p live, int flag)\n     }\n }\n \n+struct GTY(()) numbered_tree_d\n+{\n+  tree t;\n+  int num;\n+};\n+typedef struct numbered_tree_d numbered_tree;\n+\n+DEF_VEC_O (numbered_tree);\n+DEF_VEC_ALLOC_O (numbered_tree, heap);\n+\n+/* Compare two declarations references by their DECL_UID / sequence number.\n+   Called via qsort.  */\n+\n+static int\n+compare_decls_by_uid (const void *pa, const void *pb)\n+{\n+  const numbered_tree *nt_a = ((const numbered_tree *)pa);\n+  const numbered_tree *nt_b = ((const numbered_tree *)pb);\n+\n+  if (DECL_UID (nt_a->t) != DECL_UID (nt_b->t))\n+    return  DECL_UID (nt_a->t) - DECL_UID (nt_b->t);\n+  return nt_a->num - nt_b->num;\n+}\n+\n+/* Called via walk_gimple_stmt / walk_gimple_op by dump_enumerated_decls.  */\n+static tree\n+dump_enumerated_decls_push (tree *tp, int *walk_subtrees, void *data)\n+{\n+  struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n+  VEC (numbered_tree, heap) **list = (VEC (numbered_tree, heap) **) &wi->info;\n+  numbered_tree nt;\n+\n+  if (!DECL_P (*tp))\n+    return NULL_TREE;\n+  nt.t = *tp;\n+  nt.num = VEC_length (numbered_tree, *list);\n+  VEC_safe_push (numbered_tree, heap, *list, &nt);\n+  *walk_subtrees = 0;\n+  return NULL_TREE;\n+}\n+\n+/* Find all the declarations used by the current function, sort them by uid,\n+   and emit the sorted list.  Each declaration is tagged with a sequence\n+   number indicating when it was found during statement / tree walking,\n+   so that TDF_NOUID comparisons of anonymous declarations are still\n+   meaningful.  Where a declaration was encountered more than once, we\n+   emit only the sequence number of the first encounter.\n+   FILE is the dump file where to output the list and FLAGS is as in\n+   print_generic_expr.  */\n+void\n+dump_enumerated_decls (FILE *file, int flags)\n+{\n+  basic_block bb;\n+  struct walk_stmt_info wi;\n+  VEC (numbered_tree, heap) *decl_list = VEC_alloc (numbered_tree, heap, 40);\n+\n+  wi.info = (void*) decl_list;\n+  wi.pset = NULL;\n+  FOR_EACH_BB (bb)\n+    {\n+      gimple_stmt_iterator gsi;\n+\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\tif (!is_gimple_debug (gsi_stmt (gsi)))\n+\t  walk_gimple_stmt (&gsi, NULL, dump_enumerated_decls_push, &wi);\n+    }\n+  decl_list = (VEC (numbered_tree, heap) *) wi.info;\n+  qsort (VEC_address (numbered_tree, decl_list),\n+\t VEC_length (numbered_tree, decl_list),\n+\t sizeof (numbered_tree), compare_decls_by_uid);\n+  if (VEC_length (numbered_tree, decl_list))\n+    {\n+      unsigned ix;\n+      numbered_tree *ntp;\n+      tree last = NULL_TREE;\n+\n+      fprintf (file, \"Declarations used by %s, sorted by DECL_UID:\\n\",\n+\t       current_function_name ());\n+      for (ix = 0; VEC_iterate (numbered_tree, decl_list, ix, ntp); ix++)\n+\t{\n+\t  if (ntp->t == last)\n+\t    continue;\n+\t  fprintf (file, \"%d: \", ntp->num);\n+\t  print_generic_decl (file, ntp->t, flags);\n+\t  fprintf (file, \"\\n\");\n+\t  last = ntp->t;\n+\t}\n+    }\n+  VEC_free (numbered_tree, heap, decl_list);\n+}\n \n #ifdef ENABLE_CHECKING\n /* Verify that SSA_VAR is a non-virtual SSA_NAME.  */"}]}