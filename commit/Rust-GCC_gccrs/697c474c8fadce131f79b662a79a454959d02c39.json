{"sha": "697c474c8fadce131f79b662a79a454959d02c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3YzQ3NGM4ZmFkY2UxMzFmNzliNjYyYTc5YTQ1NDk1OWQwMmMzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-17T21:34:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-17T21:34:06Z"}, "message": "re PR c++/53989 (Internal compiler error in strip_typedefs, at cp/tree.c:1187)\n\n\tPR c++/53989\n\t* tree.c (build_cplus_array_type): Also add TYPE_CANONICAL\n\tto the list of variants.\n\nFrom-SVN: r189587", "tree": {"sha": "54c48a3bdc7020c28e9b84caca3583760736ed5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c48a3bdc7020c28e9b84caca3583760736ed5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697c474c8fadce131f79b662a79a454959d02c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697c474c8fadce131f79b662a79a454959d02c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697c474c8fadce131f79b662a79a454959d02c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697c474c8fadce131f79b662a79a454959d02c39/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fe3aa081150a5d140a8a6276b659aa906ad0cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe3aa081150a5d140a8a6276b659aa906ad0cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe3aa081150a5d140a8a6276b659aa906ad0cd5"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "c1465ccc385d4d2c704e061ef19ba1ef002b9376", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=697c474c8fadce131f79b662a79a454959d02c39", "patch": "@@ -1,5 +1,9 @@\n 2012-07-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53989\n+\t* tree.c (build_cplus_array_type): Also add TYPE_CANONICAL\n+\tto the list of variants.\n+\n \t* decl.c (xref_basetypes): Complain about incomplete template base.\n \t* class.c (finish_struct): Adjust variants in templates, too.\n "}, {"sha": "3c7bbb132f31674c155bc33d76b13f7ce8622d13", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=697c474c8fadce131f79b662a79a454959d02c39", "patch": "@@ -803,12 +803,23 @@ build_cplus_array_type (tree elt_type, tree index_type)\n     {\n       tree m = build_cplus_array_type (TYPE_MAIN_VARIANT (elt_type),\n \t\t\t\t       index_type);\n+      tree c = TYPE_CANONICAL (t);\n+\n       if (TYPE_MAIN_VARIANT (t) != m)\n \t{\n \t  TYPE_MAIN_VARIANT (t) = m;\n \t  TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n \t  TYPE_NEXT_VARIANT (m) = t;\n \t}\n+\n+      /* If we built a new array type for TYPE_CANONICAL, add\n+\t that to the list of variants as well.  */\n+      if (c && c != t && TYPE_MAIN_VARIANT (c) != m)\n+\t{\n+\t  TYPE_MAIN_VARIANT (c) = m;\n+\t  TYPE_NEXT_VARIANT (c) = t;\n+\t  TYPE_NEXT_VARIANT (m) = c;\n+\t}\n     }\n \n   /* Push these needs up so that initialization takes place"}, {"sha": "5784918c8d1ba20e641cfb5e7fcd5b7b91d11e96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=697c474c8fadce131f79b662a79a454959d02c39", "patch": "@@ -1,3 +1,8 @@\n+2012-07-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53989\n+\t* g++.dg/template/array23.C: New.\n+\n 2012-07-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53985"}, {"sha": "6ede8b0777351e3da0223a97f1d98d7434fe157c", "filename": "gcc/testsuite/g++.dg/template/array23.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697c474c8fadce131f79b662a79a454959d02c39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray23.C?ref=697c474c8fadce131f79b662a79a454959d02c39", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/53989\n+\n+struct Foo {\n+  int value;\n+  typedef Foo Foo2;\n+  static Foo2 const foos[2];\n+};\n+\n+template <class T> void g (T);\n+void bar() {\n+  g(&Foo::foos);\n+}"}]}