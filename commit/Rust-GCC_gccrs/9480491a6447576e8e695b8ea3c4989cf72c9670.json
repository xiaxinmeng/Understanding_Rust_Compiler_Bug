{"sha": "9480491a6447576e8e695b8ea3c4989cf72c9670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MDQ5MWE2NDQ3NTc2ZThlNjk1YjhlYTNjNDk4OWNmNzJjOTY3MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-20T19:15:58Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-20T19:15:58Z"}, "message": "PR middle-end/100684 - spurious -Wnonnull with -O1 on a C++ lambda\n\ngcc/ChangeLog:\n\n\tPR middle-end/100684\n\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Handle C++ lambda.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/100684\n\t* g++.dg/warn/Wnonnull13.C: New test.\n\t* g++.dg/warn/Wnonnull14.C: New test.\n\t* g++.dg/warn/Wnonnull15.C: New test.", "tree": {"sha": "4aa6059ccc5ee54808ce0f11b5c9036dfd0c75e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa6059ccc5ee54808ce0f11b5c9036dfd0c75e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9480491a6447576e8e695b8ea3c4989cf72c9670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9480491a6447576e8e695b8ea3c4989cf72c9670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9480491a6447576e8e695b8ea3c4989cf72c9670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9480491a6447576e8e695b8ea3c4989cf72c9670/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4a2f199baf46d35492edadc16f30f32920c4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4a2f199baf46d35492edadc16f30f32920c4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4a2f199baf46d35492edadc16f30f32920c4df"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "e3279764ac0445bb45bfbabb62f5c123db2901fd", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull13.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull13.C?ref=9480491a6447576e8e695b8ea3c4989cf72c9670", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/100684 - spurious -Wnonnull with -O1 on a C++ lambda\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-O0 -Wall -fsanitize=undefined\" } */\n+\n+#define NONNULL  __attribute__ ((nonnull))\n+\n+typedef int F (const char *);\n+\n+NONNULL int f (const char *);\n+\n+int nowarn_O0 ()\n+{\n+  return static_cast<F*>([](const char *s){ return f (s); })(\"O0\");\n+  // { dg-bogus \"\\\\\\[-Wnonnull\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_O0 ()\n+{\n+  return static_cast<F*>([] NONNULL (const char *){ return 0; })(0);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_O0_inline ()\n+{\n+  return static_cast<F*>([](const char *s){ return f (s); })(0);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"lambda not inlined\" { xfail *-*-* } .-1 }\n+}\n+"}, {"sha": "16d7ec3f573425b7d5bc9af1884dca76ba0c40df", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull14.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull14.C?ref=9480491a6447576e8e695b8ea3c4989cf72c9670", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/100684 - spurious -Wnonnull with -O1 on a C++ lambda\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-Og -Wall -fsanitize=undefined\" } */\n+\n+#define NONNULL  __attribute__ ((nonnull))\n+\n+typedef int F (const char *);\n+\n+__attribute__ ((nonnull)) int f (const char *);\n+\n+int nowarn_Og ()\n+{\n+  return static_cast<F*>([](const char *s){ return f (s); })(\"Og\");\n+  // { dg-bogus \"'this' pointer is null\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_Og ()\n+{\n+  return static_cast<F*>([] NONNULL (const char *){ return 0; })(0);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_Og_inline ()\n+{\n+  const char *p = 0;\n+  return static_cast<F*>([](const char *s){ return f (s); })(p);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"lambda not inlined\" { xfail *-*-* } .-1 }\n+}"}, {"sha": "36a2ab4878917f18daafc2e9c0d3876b529d7e4e", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull15.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull15.C?ref=9480491a6447576e8e695b8ea3c4989cf72c9670", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/100684 - spurious -Wnonnull with -O1 on a C++ lambda\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-O1 -Wall -fsanitize=undefined\" } */\n+\n+#define NONNULL  __attribute__ ((nonnull))\n+\n+typedef int F (const char *);\n+\n+NONNULL int f (const char *);\n+\n+int nowarn_O1 ()\n+{\n+  return static_cast<F*>([](const char *s){ return f (s); })(\"O1\");\n+  // { dg-bogus \"\\\\\\[-Wnonnull\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_O1 ()\n+{\n+  return static_cast<F*>([] NONNULL (const char *){ return 0; })(0);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int warn_O1_inline ()\n+{\n+  const char *p = 0;\n+  return static_cast<F*>([](const char *s){ return f (s); })(p);\n+  // { dg-warning \"\\\\\\[-Wnonnull\" \"lambda not inlined\" { xfail *-*-* } .-1 }\n+}"}, {"sha": "3834212b867fe76831ff8ec97ae8cb34c813a046", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480491a6447576e8e695b8ea3c4989cf72c9670/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9480491a6447576e8e695b8ea3c4989cf72c9670", "patch": "@@ -3536,6 +3536,7 @@ pass_post_ipa_warn::execute (function *fun)\n \t    continue;\n \n \t  tree fndecl = gimple_call_fndecl (stmt);\n+\t  const bool closure = fndecl && DECL_LAMBDA_FUNCTION_P (fndecl);\n \n \t  for (unsigned i = 0; i < gimple_call_num_args (stmt); i++)\n \t    {\n@@ -3544,6 +3545,9 @@ pass_post_ipa_warn::execute (function *fun)\n \t\tcontinue;\n \t      if (!integer_zerop (arg))\n \t\tcontinue;\n+\t      if (i == 0 && closure)\n+\t\t/* Avoid warning for the first argument to lambda functions.  */\n+\t\tcontinue;\n \t      if (!bitmap_empty_p (nonnullargs)\n \t\t  && !bitmap_bit_p (nonnullargs, i))\n \t\tcontinue;"}]}