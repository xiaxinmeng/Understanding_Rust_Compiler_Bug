{"sha": "220ffae474db36ba20487427be699f0987a00b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwZmZhZTQ3NGRiMzZiYTIwNDg3NDI3YmU2OTlmMDk4N2EwMGIwYw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-08-12T06:02:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-08-12T06:11:37Z"}, "message": "IBM Z: Fix PR96308\n\nFor the testcase a symbol with a TLS reloc and an unary minus is being\ngenerated.  The backend didn't handle this correctly.\n\nIn s390_cannot_force_const_mem an unary minus on a symbolic constant\nis rejected now since gas would not allow this.\n\nlegitimize_tls_address now makes the NEG rtx the outermost operation\nby pulling it out of the CONST rtx.\n\ngcc/ChangeLog:\n\n\tPR target/96308\n\t* config/s390/s390.c (s390_cannot_force_const_mem): Reject an\n\tunary minus for everything not being a numeric constant.\n\t(legitimize_tls_address): Move a NEG out of the CONST rtx.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96308\n\t* g++.dg/pr96308.C: New test.", "tree": {"sha": "11453d3b3153b6c1ed6b153881d8443bfd13be5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11453d3b3153b6c1ed6b153881d8443bfd13be5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/220ffae474db36ba20487427be699f0987a00b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220ffae474db36ba20487427be699f0987a00b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220ffae474db36ba20487427be699f0987a00b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220ffae474db36ba20487427be699f0987a00b0c/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d17c38ac1d1d916abbce14e6b2e0d61517c6e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d17c38ac1d1d916abbce14e6b2e0d61517c6e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d17c38ac1d1d916abbce14e6b2e0d61517c6e9b"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "5488a5dc5e8ae07735b6b8dbb173432423a85613", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220ffae474db36ba20487427be699f0987a00b0c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220ffae474db36ba20487427be699f0987a00b0c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=220ffae474db36ba20487427be699f0987a00b0c", "patch": "@@ -4106,6 +4106,18 @@ s390_cannot_force_const_mem (machine_mode mode, rtx x)\n       /* Accept all non-symbolic constants.  */\n       return false;\n \n+    case NEG:\n+      /* Accept an unary '-' only on scalar numeric constants.  */\n+      switch (GET_CODE (XEXP (x, 0)))\n+\t{\n+\tcase CONST_INT:\n+\tcase CONST_DOUBLE:\n+\tcase CONST_WIDE_INT:\n+\t  return false;\n+\tdefault:\n+\t  return true;\n+\t}\n+\n     case LABEL_REF:\n       /* Labels are OK iff we are non-PIC.  */\n       return flag_pic != 0;\n@@ -5268,6 +5280,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n     {\n       switch (XINT (XEXP (addr, 0), 1))\n \t{\n+\tcase UNSPEC_NTPOFF:\n \tcase UNSPEC_INDNTPOFF:\n \t  new_rtx = addr;\n \t  break;\n@@ -5290,6 +5303,18 @@ legitimize_tls_address (rtx addr, rtx reg)\n       new_rtx = force_operand (new_rtx, 0);\n     }\n \n+  /* (const (neg (unspec (symbol_ref)))) -> (neg (const (unspec (symbol_ref)))) */\n+  else if (GET_CODE (addr) == CONST && GET_CODE (XEXP (addr, 0)) == NEG)\n+    {\n+      new_rtx = XEXP (XEXP (addr, 0), 0);\n+      if (GET_CODE (new_rtx) != SYMBOL_REF)\n+\tnew_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+\n+      new_rtx = legitimize_tls_address (new_rtx, reg);\n+      new_rtx = gen_rtx_NEG (Pmode, new_rtx);\n+      new_rtx = force_operand (new_rtx, 0);\n+    }\n+\n   else\n     gcc_unreachable ();  /* for now ... */\n "}, {"sha": "9009bba5e8296f255d03a925f92bcda1d1ff6f9f", "filename": "gcc/testsuite/g++.dg/pr96308.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220ffae474db36ba20487427be699f0987a00b0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96308.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220ffae474db36ba20487427be699f0987a00b0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96308.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96308.C?ref=220ffae474db36ba20487427be699f0987a00b0c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-Os -fno-move-loop-invariants -std=c++11\" }\n+\n+struct NonTrivial3 {\n+  ~NonTrivial3();\n+};\n+void i() { thread_local NonTrivial3 tlarr[10]; }"}]}