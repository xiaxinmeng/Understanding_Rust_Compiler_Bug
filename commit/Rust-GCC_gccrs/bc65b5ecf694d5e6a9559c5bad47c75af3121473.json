{"sha": "bc65b5ecf694d5e6a9559c5bad47c75af3121473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM2NWI1ZWNmNjk0ZDVlNmE5NTU5YzViYWQ0N2M3NWFmMzEyMTQ3Mw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-01-17T23:14:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-01-17T23:14:11Z"}, "message": "gcj.texi: New file.\n\n\t* gcj.texi: New file.\n\t* Make-lang.in ($(srcdir)/java/gcj.info): New target.\n\t(java.info): Depend on gcj.info.\n\t(java/gcj.dvi): New target.\n\t(java.dvi): Depend on gcj.dvi.\n\t(java.install-info): Wrote.\n\nFrom-SVN: r39101", "tree": {"sha": "bbb6c7c85cc73e1f63e31cee7236de6be5010bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbb6c7c85cc73e1f63e31cee7236de6be5010bc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc65b5ecf694d5e6a9559c5bad47c75af3121473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc65b5ecf694d5e6a9559c5bad47c75af3121473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc65b5ecf694d5e6a9559c5bad47c75af3121473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc65b5ecf694d5e6a9559c5bad47c75af3121473/comments", "author": null, "committer": null, "parents": [{"sha": "988144ce9968dc79b2836e854e83243d5d9c463e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988144ce9968dc79b2836e854e83243d5d9c463e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988144ce9968dc79b2836e854e83243d5d9c463e"}], "stats": {"total": 523, "additions": 521, "deletions": 2}, "files": [{"sha": "82f4237915d546321b302200c3de667ebfbbbeb4", "filename": "gcc/java/.cvsignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2F.cvsignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2F.cvsignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2F.cvsignore?ref=bc65b5ecf694d5e6a9559c5bad47c75af3121473", "patch": "@@ -1,2 +1,3 @@\n parse.c\n parse-scan.c\n+gcj.info*"}, {"sha": "313a11223893f3092487db983aa8127a6be5346d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=bc65b5ecf694d5e6a9559c5bad47c75af3121473", "patch": "@@ -1,3 +1,12 @@\n+2001-01-17  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gcj.texi: New file.\n+\t* Make-lang.in ($(srcdir)/java/gcj.info): New target.\n+\t(java.info): Depend on gcj.info.\n+\t(java/gcj.dvi): New target.\n+\t(java.dvi): Depend on gcj.dvi.\n+\t(java.install-info): Wrote.\n+\n 2001-01-16  Jeff Sturm  <jeff.sturm@appnet.com>\n \n \t* expr.c (java_lang_expand_expr): Use TREE_SYMBOL_REFERENCED after"}, {"sha": "c16fc84c28e352d7a9d67a120b81971ddd83b8d4", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=bc65b5ecf694d5e6a9559c5bad47c75af3121473", "patch": "@@ -145,8 +145,8 @@ java.all.cross: $(GCJ)-cross$(exeext)\n java.start.encap: $(GCJ)$(exeext)\n java.rest.encap:\n \n-java.info:\n-java.dvi:\n+java.info: $(srcdir)/java/gcj.info\n+java.dvi: java/gcj.dvi\n \n # Install hooks:\n # jc1, gcj, jvgenmain, and gcjh are installed elsewhere as part\n@@ -182,6 +182,21 @@ java.uninstall:\n \t-rm -rf $(bindir)/$(JAVA_CROSS_NAME)$(exeext)\n \n java.install-info:\n+\tif [ -f jc1$(exeext) ] ; then \\\n+\t  if [ -f $(srcdir)/java/gcj.info ]; then \\\n+\t    rm -f $(infodir)/gcj.info*; \\\n+\t    for f in $(srcdir)/java/gcj.info*; do \\\n+\t      realfile=`echo $$f | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n+\t      $(INSTALL_DATA) $$f $(infodir)/$$realfile; \\\n+\t    done; \\\n+\t    chmod a-x $(infodir)/gcj.info*; \\\n+\t  else true; fi; \\\n+\telse true; fi\n+\t-if [ -f jc1$(exeext) ] && [ -f $(infodir)/gcj.info ]; then \\\n+\t  if $(SHELL) -c 'install-info --version' >/dev/null 2>&1; then \\\n+\t    install-info --dir-file=$(infodir)/dir $(infodir)/gcj.info; \\\n+\t  else true; fi; \\\n+\telse true; fi\n \n #\f\n # Clean hooks:\n@@ -274,3 +289,14 @@ java/jcf-path.o: java/jcf-path.c $(CONFIG_H) system.h java/jcf.h\n \t  -DLIBGCJ_ZIP_FILE='\"$(prefix)/share/libgcj.jar\"' \\\n \t  $(srcdir)/java/jcf-path.c $(OUTPUT_OPTION)\n \n+# Documentation\n+$(srcdir)/java/gcj.info: $(srcdir)/java/gcj.texi\n+\tif test \"x$(BUILD_INFO)\" = xinfo; then \\\n+\t  rm -f $(srcdir)/java/gcc.info*; \\\n+\t  cd $(srcdir)/java && $(MAKEINFO) -o gcj.info gcj.texi; \\\n+\telse true; fi\n+\n+java/gcj.dvi: $(srcdir)/java/gcj.texi\n+\tTEXINPUTS=${texidir}:$(srcdir)/java:$$TEXINPUTS tex gcj.texi\n+\ttexindex gcj.??\n+\tTEXINPUTS=${texidir}:$(srcdir)/java:$$TEXINPUTS tex gcj.texi"}, {"sha": "1c66509765702e4ed6be2190a645f8bf2f7b24e7", "filename": "gcc/java/gcj.texi", "status": "added", "additions": 483, "deletions": 0, "changes": 483, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65b5ecf694d5e6a9559c5bad47c75af3121473/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=bc65b5ecf694d5e6a9559c5bad47c75af3121473", "patch": "@@ -0,0 +1,483 @@\n+@\\input texinfo @c -*-texinfo-*-\n+@setfilename gcj.info\n+@settitle Guide to GNU gcj\n+\n+@c Note: When reading this manual you'll find lots of strange\n+@c circumlocutions like ``compiler for the Java language''.\n+@c This is necessary due to Sun's restrictions on the use of\n+@c the word ``Java'.\n+\n+\n+@ifinfo\n+@format\n+@dircategory Programming\n+@direntry\n+* Gcj: (gcj).               Ahead-of-time compiler for the Java language\n+@end direntry\n+\n+@dircategory Individual utilities\n+@direntry\n+* gcjh: (gcj)Invoking gcjh.\n+                            Generate header files from Java class files\n+* jv-scan: (gcj)Invoking jv-scan.\n+                            Print information about Java source files\n+* jcf-dump: (gcj)Invoking jcf-dump.\n+                            Print information about Java class files\n+* gij: (gcj)Invoking gij.   GNU interpreter for Java bytecode\n+@end direntry\n+@end format\n+@end ifinfo\n+\n+@titlepage\n+@title GNU gcj\n+@author Tom Tromey\n+@end titlepage\n+\n+@node Top\n+@top Introduction\n+\n+This manual describes how to use @code{gcj}, the GNU compiler for the\n+Java programming language.  @code{gcj} can generate both @file{.class}\n+files and object files, and it can read both Java source code and\n+@file{.class} files.\n+\n+@menu\n+* Invoking gcj::\tCompiler options supported by @code{gcj}\n+* Compatibility::\tCompatibility between gcj and other tools for Java\n+* Invoking gcjh::       Generate header files from class files\n+* Invoking jv-scan::    Print information about source files\n+* Invoking jcf-dump::   Print information about class files\n+* Invoking gij::\tInterpreting Java bytecodes\n+* Resources::\t\tWhere to look for more information\n+@end menu\n+\n+\n+@node Invoking gcj\n+@chapter Invoking gcj\n+\n+As @code{gcj} is just another front end to @code{gcc}, it supports many\n+of the same options as gcc.  @xref{Option Summary, , Option Summary,\n+gcc, Using the GNU Compiler Collection}.  This manual only documents the\n+options specific to @code{gcj}.\n+\n+@menu\n+* Input Options::\t\tHow to find input files\n+* Encodings::                   Options controlling source file encoding\n+* Warnings::\t\t\tOptions controlling warnings specific to gcj\n+* Code Generation::\t\tOptions controlling the output of gcj\n+* Configure-time Options::\tOptions you won't use\n+@end menu\n+\n+\n+@node Input Options\n+@section Input Options\n+\n+@cindex class path\n+\n+@code{gcj} has options to control where it looks to find input files.\n+Like other compilers for the Java language, @code{gcj} has a notion of a\n+@dfn{class path}.  There are several options and environment variables\n+which can be used to manipulate the class path.  When @code{gcj} looks\n+for a given class, it searches the class path looking for the\n+corresponding @file{.class} file.  @code{gcj} comes with a built-in\n+class path which points at the installed @file{libgcj.jar}, a file which\n+contains all the standard classes.\n+\n+In the below, a directory or path component can refer either to an\n+actual directory on the filesystem, or to a @file{.zip} or @file{.jar}\n+file, which @code{gcj} will search as if it is a directory.\n+\n+@table @code\n+@item -I@var{dir}\n+All directories specified by @code{-I} are kept in order and prepended\n+to the class path constructed from all the other options.  Unless\n+compatibility with tools like @code{javac} is imported, we recommend\n+always using @code{-I} instead of the other options for manipulating the\n+class path.\n+\n+@item --classpath=@var{path}\n+This sets the class path to @var{path}, a colon-separated list of paths\n+(on Windows-based systems, a semicolon-separate list of paths).\n+\n+@item --CLASSPATH=@var{path}\n+This sets the class path to @var{path}, a colon-separated list of paths\n+(on Windows-based systems, a semicolon-separate list of paths).  This\n+differs from the @code{--classpath} option in that it also suppresses\n+the built-in system path.\n+\n+@item CLASSPATH\n+This is an environment variable which holds a list of paths.\n+@end table\n+\n+The final class path is constructed like so:\n+\n+@itemize @bullet\n+@item\n+First come all directories specified via @code{-I}.\n+\n+@item\n+If @code{--classpath} is specified, its value is appended and processing\n+stops.  That is, @code{--classpath} suppresses all the options mentioned\n+later in this list.\n+\n+@item\n+If @code{--CLASSPATH} is specified, its value is appended and the\n+@code{CLASSPATH} environment variable is suppressed.\n+\n+@item\n+If the @code{CLASSPATH} environment variable is specified (and was not\n+suppressed by @code{--CLASSPATH}), then its value is appended.\n+\n+@item\n+Finally, the built-in system directory, @file{libgcj.jar}, is appended.\n+@end itemize\n+\n+\n+@node Encodings\n+@section Encodings\n+\n+The Java programming language uses Unicode throughout.  In an effort to\n+integrate well with other locales, @code{gcj} allows @file{.java} files\n+to be written using almost any encoding.  @code{gcj} knows how to\n+convert these encodings into its internal encoding at compile time.\n+\n+You can use the @code{--encoding=@var{NAME}} option to specify an\n+encoding (of a particular character set) to use for source files.  If\n+this is not specified, the default encoding comes from your current\n+locale.  If your host system has insufficient locale support, then\n+@code{gcj} assumes the default encoding to be the @samp{UTF-8} encoding\n+of Unicode.\n+\n+To implement @code{--encoding}, @code{gcj} simply uses the host\n+platform's @code{iconv} conversion routine.  This means that in practice\n+@code{gcj} is limited by the capabilities of the host platform.\n+\n+The names allowed for the argument @code{--encoding} vary from platform\n+to platform (since they are not standardized anywhere).  However,\n+@code{gcj} implements the encoding named @samp{UTF-8} internally, so if\n+you choose to use this for your source files you can be assured that it\n+will work on every host.\n+\n+\n+@node Warnings\n+@section Warnings\n+\n+@code{gcj} implements several warnings.  As with other generic\n+@code{gcc} warnings, if an option of the form @code{-Wfoo} enables a\n+warning, then @code{-Wno-foo} will disable it.  Here we've chosen to\n+document the form of the warning which will have an effect -- the\n+default being the opposite of what is listed.\n+\n+@table @code\n+@item -Wunsupported-jdk11\n+This will cause @code{gcj} to warn that @code{final} local variables are\n+being treated as non-final.\n+@c FIXME: why do we want this?  Is it just not implemented yet?\n+\n+@item -Wredundant-modifiers\n+With this flag, @code{gcj} will warn about redundant modifiers.  For\n+instance, it will warn if an interface method is declared @code{public}.\n+\n+@item -Wextraneous-semicolon\n+This causes @code{gcj} to warn about empty statements.  Empty statements\n+have been deprecated.\n+\n+@item -Wno-out-of-date\n+This option will cause @code{gcj} not to warn when a source file is\n+newer than its matching class file.  By default @code{gcj} will warn\n+about this.\n+\n+@item -Wunused\n+This is the same as @code{gcc}'s @code{-Wunused}.\n+\n+@item -Wall\n+This is the same as @code{-Wredundant-modifiers -Wextraneous-semicolon\n+-Wunused}.\n+@end table\n+\n+\n+@node Code Generation\n+@section Code Generation\n+\n+In addition to the many @code{gcc} options controlling code generation,\n+@code{gcj} has several options specific to itself.\n+\n+@table @code\n+@item --main=@var{CLASSNAME}\n+This option is used when linking.  Since the linker expects to find a\n+method simply named @code{main}, and since Java programs won't have such\n+a method (due to name mangling), at link time @code{gcj} will generate a\n+stub @code{main} function which will initialize the runtime and then\n+invoke the @code{main} method of the appropriate class.  This option is\n+used to specify the name of the class whose @code{main} method should be\n+invoked when the resulting executable is run.\n+\n+@item -D@var{name}[=@var{value}]\n+This option can only be used with @code{--main}.  It defines a system\n+property named @var{name} with value @var{value}.  If @var{value} is not\n+specified then it defaults to the empty string.  These system properties\n+are initialized at the program's startup and can be retrieved at runtime\n+using the @code{java.lang.System.getProperty} method.\n+\n+@item -C\n+This option is used to tell @code{gcj} to generate bytecode\n+(@file{.class} files) rather than object code.\n+\n+@item -d @var{directory}\n+When used with @code{-C}, this causes all generated @file{.class} files\n+to be put in the appropriate subdirectory of @var{directory}.  By\n+default they will be put in subdirectories of the current working\n+directory.\n+\n+@c @item -fassume-compiled\n+@c Nobody is sure what this does and anyway it doesn't work.\n+\n+@item -fno-bounds-check\n+By default, @code{gcj} generates code which checks the bounds of all\n+array indexing operations.  With this option, these checks are omitted.\n+Note that this can result in unpredictable behavior if the code in\n+question actually does violate array bounds constraints.\n+\n+@item -fjni\n+With @code{gcj} there are two options for writing native methods: CNI\n+and JNI.  By default @code{gcj} assumes you are using CNI.  If you are\n+compiling a class with native methods, and these methods are implemented\n+using JNI, then you must use @code{-fjni}.  This option causes\n+@code{gcj} to generate stubs which will invoke the underlying JNI\n+methods.\n+@end table\n+\n+\n+@node Configure-time Options\n+@section Configure-time Options\n+\n+Some @code{gcj} code generations options affect the resulting ABI, and\n+so can only be meaningfully given when @code{libgcj}, the runtime\n+package, is configured.  @code{libgcj} puts the appropriate options from\n+this group into a @samp{spec} file which is read by @code{gcj}.  These\n+options are listed here for completeness; if you are using @code{libgcj}\n+then you won't want to touch these options.\n+\n+@table @code\n+@item -fuse-boehm-gc\n+This enables the use of the Boehm GC bitmap marking code.  In particular\n+this causes @code{gcj} to put an object marking descriptor into each\n+vtable.\n+\n+@item -fhash-synchronization\n+By default, synchronization data (the data used for @code{synchronize},\n+@code{wait}, and @code{notify}) is pointed to by a word in each object.\n+With this option @code{gcj} assumes that this information is stored in a\n+hash table and not in the object itself.\n+\n+@item -fuse-divide-subroutine\n+On some systems, a library routine is called to perform integer\n+division.  This is required to get exception handling correct when\n+dividing by zero.\n+@end table\n+\n+\n+@node Compatibility\n+@chapter Compatibility\n+\n+As we believe it is important that the Java platform not be fragmented,\n+@code{gcj} and @code{libgcj} try to conform to the relevant Java\n+specifications.  However, limited manpower and incomplete and unclear\n+documentation work against us.  So, there are caveats to using\n+@code{gcj}.\n+\n+This list of compatibility issues is by no means complete.\n+\n+@itemize @bullet\n+@item\n+@code{gcj} implements the JDK 1.1 language.  It supports inner classes,\n+though these are known to still be buggy.  It does not yet support the\n+Java 2 @code{strictfp} keyword (it recognizes the keyword but ignores\n+it).\n+\n+@item\n+@code{libgcj} is missing many packages, most notably @code{java.awt}.\n+\n+@item\n+Sometimes the @code{libgcj} implementation of a method or class differs\n+from the JDK implementation.  This is not always a bug.  Still, if it\n+affects you, it probably makes sense to report it so that we can discuss\n+the appropriate response.\n+@end itemize\n+\n+\n+@node Invoking gcjh\n+@chapter Invoking gcjh\n+\n+The @code{gcjh} program is used to generate header files from class\n+files.  It can generate both CNI and JNI header files, as well as stub\n+implementation files which can be used as a basis for implementing the\n+required native methods.\n+\n+@table @code\n+@item -stubs\n+This causes @code{gcjh} to generate stub files instead of header files.\n+By default the stub file will be named after the class, with a suffix of\n+@samp{.cc}.  In JNI mode, the default output file will have the suffix\n+@samp{.c}.\n+\n+@item -jni\n+This tells @code{gcjh} to generate a JNI header or stub.  By default,\n+CNI headers are generated.\n+\n+@item -add @var{text}\n+Inserts @var{text} into the class body.  This is ignored in JNI mode.\n+\n+@item -append @var{text}\n+Inserts @var{text} into the header file after the class declaration.\n+This is ignored in JNI mode.\n+\n+@item -friend @var{text}\n+Inserts @var{text} into the class as a @code{friend} declaration.\n+This is ignored in JNI mode.\n+\n+@item -prepend @var{text}\n+Inserts @var{text} into the header file before the class declaration.\n+This is ignored in JNI mode.\n+\n+@item --classpath=@var{path}\n+@itemx --CLASSPATH=@var{path}\n+@itemx -I@var{directory}\n+@itemx -d @var{directory}\n+@itemx -o @var{file}\n+These options are all identical to the corresponding @code{gcj} options.\n+\n+@item -o @var{file}\n+Sets the output file name.  This cannot be used if there is more than\n+one class on the command line.\n+\n+@item -td @var{directory}\n+Sets the name of the directory to use for temporary files.\n+\n+@item --help\n+Print help about @code{gcjh} and exit.  No further processing is done.\n+\n+@item --version\n+Print version information for @code{gcjh} and exit.  No further\n+processing is done.\n+@end table\n+\n+All remaining options are considered to be names of classes.\n+\n+\n+@node Invoking jv-scan\n+@chapter Invoking jv-scan\n+\n+The @code{jv-scan} program can be used to print information about a Java\n+source file (@file{.java} file).\n+\n+@table @code\n+@item --complexity\n+This prints a complexity measure, related to cyclomatic complexity, for\n+each input file.\n+\n+@item --encoding=@var{name}\n+This works like the corresponding @code{gcj} option.\n+\n+@item --print-main\n+This prints the name of the class in this file containing a @code{main}\n+method.\n+\n+@item --list-class\n+This lists the names of all classes defined in the input files.\n+\n+@item --list-filename\n+If @code{--list-class} is given, this option causes @code{jv-scan} to\n+also print the name of the file in which each class was found.\n+\n+@item -o @var{file}\n+Print output to the named file.\n+@end table\n+\n+\n+@node Invoking jcf-dump\n+@chapter Invoking jcf-dump\n+\n+This is a class file examiner, similar to @code{javap}.  It will print\n+information about a number of classes, which are specifed by class name\n+or file name.\n+\n+@table @code\n+@item -c\n+Disassemble method bodies.  By default method bodies are not printed.\n+\n+@item --javap\n+Generate output in @code{javap} format.\n+\n+@item --classpath=@var{path}\n+@itemx --CLASSPATH=@var{path}\n+@itemx -I@var{directory}\n+@itemx -o @var{file}\n+These options as the same as the corresponding @code{gcj} options.\n+@end table\n+\n+\n+@node Invoking gij\n+@chapter Invoking gij\n+\n+@code{gij} is a Java bytecode interpreter included with @code{libgcj}.\n+@code{gij} is not available on every platform; porting it requires a\n+small amount of assembly programming which has not been done for all the\n+targets supported by @code{gcj}.\n+\n+The primary argument to @code{gij} is the name of a class or, with\n+@code{-jar}, a jar file.  Options before this argument are interpreted\n+by @code{gij}; remaining options are passed to the interpreted program.\n+\n+If a class name is specified and this class does not have a @code{main}\n+method with the appropriate signature (a @code{static void} method with\n+a @code{String[]} as its sole argument), then @code{gij} will print an\n+error and exit.\n+\n+If a jar file is specified then @code{gij} will use information in it to\n+determine which class' @code{main} method will be invoked.\n+\n+@code{gij} will invoke the @code{main} method with all the remaining\n+command-line options.\n+\n+Note that @code{gij} is not limited to interpreting code.  Because\n+@code{libgcj} includes a class loader which can dynamically load shared\n+objects, it is possible to give @code{gij} the name of a class which has\n+been compiled and put into a shared library on the class path.\n+\n+@table @code\n+@item -D@var{name}[=@var{value}]\n+This defines a system property named @var{name} with value @var{value}.\n+If @var{value} is not specified then it defaults to the empty string.\n+These system properties are initialized at the program's startup and can\n+be retrieved at runtime using the @code{java.lang.System.getProperty}\n+method.\n+\n+@item -ms=@var{number}\n+This sets the initial heap size \n+\n+@item -mx=@var{number}\n+This sets the maximum heap size.\n+\n+@item -jar\n+This indicates that the name passed to @code{gij} should be interpreted\n+as the name of a jar file, not a class.\n+@end table\n+\n+\n+@node Resources\n+@chapter Resources\n+\n+The current @code{gcj} home page is\n+@uref{http://sources.redhat.com/java/}.  This is likely to change in the\n+near future.\n+\n+For more information on gcc, see @uref{http://gcc.gnu.org/}.\n+\n+Some @code{libgcj} testing is done using the Mauve test suite.  This is\n+a free software Java class library test suite which is being written\n+because the JCK is not free.  See\n+@uref{http://sources.redhat.com/mauve/} for more information.\n+\n+@contents\n+@bye"}]}