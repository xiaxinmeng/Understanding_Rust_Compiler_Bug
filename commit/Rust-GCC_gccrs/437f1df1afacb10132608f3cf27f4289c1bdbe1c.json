{"sha": "437f1df1afacb10132608f3cf27f4289c1bdbe1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3ZjFkZjFhZmFjYjEwMTMyNjA4ZjNjZjI3ZjQyODljMWJkYmUxYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-06-07T23:42:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-06-07T23:42:53Z"}, "message": "fold-const.c (fold): Place both integer and real constants last in comparisons.\n\n\n\t* fold-const.c (fold) [EQ_EXPR]:  Place both integer and real\n\tconstants last in comparisons.  Optimize (x+1.0)>0.0 into the\n\tequivalent x > -1.0 when -ffast-math.\n\n\t* gcc.dg/20020607-2.c: New test case.\n\nFrom-SVN: r54356", "tree": {"sha": "bfcf15db0019b5665c4cb88b677704f02c0b89ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfcf15db0019b5665c4cb88b677704f02c0b89ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437f1df1afacb10132608f3cf27f4289c1bdbe1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437f1df1afacb10132608f3cf27f4289c1bdbe1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437f1df1afacb10132608f3cf27f4289c1bdbe1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437f1df1afacb10132608f3cf27f4289c1bdbe1c/comments", "author": null, "committer": null, "parents": [{"sha": "cd24b8a4033454aaac4cf053291fbc9bd0743016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd24b8a4033454aaac4cf053291fbc9bd0743016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd24b8a4033454aaac4cf053291fbc9bd0743016"}], "stats": {"total": 123, "additions": 112, "deletions": 11}, "files": [{"sha": "afff77b7841dfce82dd6913222b3d21b5a3d4808", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=437f1df1afacb10132608f3cf27f4289c1bdbe1c", "patch": "@@ -1,3 +1,9 @@\n+2002-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold) [EQ_EXPR]:  Place both integer and real\n+\tconstants last in comparisons.  Optimize (x+1.0)>0.0 into the\n+\tequivalent x > -1.0 when -ffast-math.\n+\n 2002-06-07  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (mips*-*-netbsd*): Add mips/t-netbsd to ${tmake_file}."}, {"sha": "db415649f0f3a562bed066649220d150f0ed961f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=437f1df1afacb10132608f3cf27f4289c1bdbe1c", "patch": "@@ -5814,6 +5814,20 @@ fold (expr)\n     case GT_EXPR:\n     case LE_EXPR:\n     case GE_EXPR:\n+      /* If one arg is a real or integer constant, put it last.  */\n+      if ((TREE_CODE (arg0) == INTEGER_CST\n+\t   && TREE_CODE (arg1) != INTEGER_CST)\n+\t  || (TREE_CODE (arg0) == REAL_CST\n+\t      && TREE_CODE (arg0) != REAL_CST))\n+\t{\n+\t  TREE_OPERAND (t, 0) = arg1;\n+\t  TREE_OPERAND (t, 1) = arg0;\n+\t  arg0 = TREE_OPERAND (t, 0);\n+\t  arg1 = TREE_OPERAND (t, 1);\n+\t  code = swap_tree_comparison (code);\n+\t  TREE_SET_CODE (t, code);\n+\t}\n+\n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t{\n \t  /* (-a) CMP (-b) -> b CMP a  */\n@@ -5835,18 +5849,21 @@ fold (expr)\n \t      && REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (arg1)))\n \t    return fold (build (code, type, arg0,\n \t\t\t\tbuild_real (TREE_TYPE (arg1), dconst0)));\n-\t}\n \n-      /* If one arg is a constant integer, put it last.  */\n-      if (TREE_CODE (arg0) == INTEGER_CST\n-\t  && TREE_CODE (arg1) != INTEGER_CST)\n-\t{\n-\t  TREE_OPERAND (t, 0) = arg1;\n-\t  TREE_OPERAND (t, 1) = arg0;\n-\t  arg0 = TREE_OPERAND (t, 0);\n-\t  arg1 = TREE_OPERAND (t, 1);\n-\t  code = swap_tree_comparison (code);\n-\t  TREE_SET_CODE (t, code);\n+\t  /* If this is a comparison of a real constant with a PLUS_EXPR\n+\t     or a MINUS_EXPR of a real constant, we can convert it into a\n+\t     comparison with a revised real constant as long as no overflow\n+\t     occurs when unsafe_math_optimizations are enabled.  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && TREE_CODE (arg1) == REAL_CST\n+\t      && (TREE_CODE (arg0) == PLUS_EXPR\n+\t\t  || TREE_CODE (arg0) == MINUS_EXPR)\n+\t      && TREE_CODE (TREE_OPERAND (arg0, 1)) == REAL_CST\n+\t      && 0 != (tem = const_binop (TREE_CODE (arg0) == PLUS_EXPR\n+\t\t\t\t\t  ? MINUS_EXPR : PLUS_EXPR,\n+\t\t\t\t\t  arg1, TREE_OPERAND (arg0, 1), 0))\n+\t      && ! TREE_CONSTANT_OVERFLOW (tem))\n+\t    return fold (build (code, type, TREE_OPERAND (arg0, 0), tem));\n \t}\n \n       /* Convert foo++ == CONST into ++foo == CONST + INCR."}, {"sha": "ea104cf5335d48bd8b91917cb1241c3e7723b86f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=437f1df1afacb10132608f3cf27f4289c1bdbe1c", "patch": "@@ -1,3 +1,7 @@\n+2002-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/20020607-2.c: New test case.\n+\n 2002-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20020604-1.c: New test."}, {"sha": "239aa9b388055d64529958d5baf192c8e64d6437", "filename": "gcc/testsuite/gcc.dg/20020607-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ftestsuite%2Fgcc.dg%2F20020607-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f1df1afacb10132608f3cf27f4289c1bdbe1c/gcc%2Ftestsuite%2Fgcc.dg%2F20020607-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020607-2.c?ref=437f1df1afacb10132608f3cf27f4289c1bdbe1c", "patch": "@@ -0,0 +1,74 @@\n+/* Copyright (C) 2002 Free Software Foundation.\n+\n+   Test for correctness of floating point comparisons.\n+\n+   Written by Roger Sayle, 3rd June 2002.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void abort (void);\n+\n+int test1 (double x, int ok)\n+{\n+  if ((x - 1.0) > 0.0)\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+int test1f (float x, int ok)\n+{\n+  if ((x - 1.0f) > 0.0f)\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+int test2 (double x, int ok)\n+{\n+  if ((x + 1.0) < 0.0)\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+int test2f (float x, int ok)\n+{\n+  if ((x + 1.0f) < 0.0f)\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+\n+int\n+main ()\n+{\n+  test1 (-2.0, 0);\n+  test1 ( 0.0, 0);\n+  test1 ( 2.0, 1);\n+\n+  test1f (-2.0f, 0);\n+  test1f ( 0.0f, 0);\n+  test1f ( 2.0f, 1);\n+\n+  test2 (-2.0, 1);\n+  test2 ( 0.0, 0);\n+  test2 ( 2.0, 0);\n+\n+  test2f (-2.0f, 1);\n+  test2f ( 0.0f, 0);\n+  test2f ( 2.0f, 0);\n+\n+  return 0;\n+}\n+"}]}