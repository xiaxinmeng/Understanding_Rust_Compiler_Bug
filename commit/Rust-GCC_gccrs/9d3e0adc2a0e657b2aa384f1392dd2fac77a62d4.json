{"sha": "9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzZTBhZGMyYTBlNjU3YjJhYTM4NGYxMzkyZGQyZmFjNzdhNjJkNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-08T12:22:58Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-08T12:22:58Z"}, "message": "Convert IPA CP to symbol_summary.\n\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-cp.c (ipcp_store_bits_results): Use\n\tipcp_transformation_sum.\n\t(ipcp_store_vr_results): Likewise.\n\t* ipa-prop.c (ipcp_grow_transformations_if_necessary): Renamed\n\tto ...\n\t(ipcp_transformation_initialize): ... this.\n\t(ipa_set_node_agg_value_chain):\n\t(ipa_node_params_t::duplicate): Use ipcp_transformation_sum.\n\t(write_ipcp_transformation_info): Likewise.\n\t(read_ipcp_transformation_info): Likewise.\n\t(ipcp_update_bits): Likewise.\n\t(ipcp_update_vr): Likewise.\n\t(ipcp_transform_function): Likewise.\n\t* ipa-prop.h: Rename ipcp_transformation_summary to\n\tipcp_transformation.\n\t(class ipcp_transformation_t): New function summary.\n\t(ipcp_get_transformation_summary): Use ipcp_transformation_sum.\n\t(ipa_get_agg_replacements_for_node): Likewise.\n\nFrom-SVN: r261314", "tree": {"sha": "1a46184e2d16f7de6dd7036ef288451962d349bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a46184e2d16f7de6dd7036ef288451962d349bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36330f8203fc19bf11d1e6a21fd0637be1a792d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36330f8203fc19bf11d1e6a21fd0637be1a792d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36330f8203fc19bf11d1e6a21fd0637be1a792d0"}], "stats": {"total": 123, "additions": 82, "deletions": 41}, "files": [{"sha": "c13f24667e1de20305c0e9b27886cbcd196ab3fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "patch": "@@ -1,3 +1,24 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_store_bits_results): Use\n+\tipcp_transformation_sum.\n+\t(ipcp_store_vr_results): Likewise.\n+\t* ipa-prop.c (ipcp_grow_transformations_if_necessary): Renamed\n+\tto ...\n+\t(ipcp_transformation_initialize): ... this.\n+\t(ipa_set_node_agg_value_chain):\n+\t(ipa_node_params_t::duplicate): Use ipcp_transformation_sum.\n+\t(write_ipcp_transformation_info): Likewise.\n+\t(read_ipcp_transformation_info): Likewise.\n+\t(ipcp_update_bits): Likewise.\n+\t(ipcp_update_vr): Likewise.\n+\t(ipcp_transform_function): Likewise.\n+\t* ipa-prop.h: Rename ipcp_transformation_summary to\n+\tipcp_transformation.\n+\t(class ipcp_transformation_t): New function summary.\n+\t(ipcp_get_transformation_summary): Use ipcp_transformation_sum.\n+\t(ipa_get_agg_replacements_for_node): Likewise.\n+\n 2018-06-08  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-pure-const.c (struct funct_state_d): Do it class instead"}, {"sha": "4030bc30669237dfb1ba1c60759e3a97cd078e9c", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "patch": "@@ -4949,8 +4949,8 @@ ipcp_store_bits_results (void)\n       if (!found_useful_result)\n \tcontinue;\n \n-      ipcp_grow_transformations_if_necessary ();\n-      ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+      ipcp_transformation_initialize ();\n+      ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n       vec_safe_reserve_exact (ts->bits, count);\n \n       for (unsigned i = 0; i < count; i++)\n@@ -5022,8 +5022,8 @@ ipcp_store_vr_results (void)\n       if (!found_useful_result)\n \tcontinue;\n \n-      ipcp_grow_transformations_if_necessary ();\n-      ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+      ipcp_transformation_initialize ();\n+      ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n       vec_safe_reserve_exact (ts->m_vr, count);\n \n       for (unsigned i = 0; i < count; i++)"}, {"sha": "daada4d55a58f5e296b3eb1ab3458b7ed2ea331d", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "patch": "@@ -55,8 +55,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Function summary where the parameter infos are actually stored. */\n ipa_node_params_t *ipa_node_params_sum = NULL;\n-/* Vector of IPA-CP transformation data for each clone.  */\n-vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n+\n+function_summary <ipcp_transformation *> *ipcp_transformation_sum = NULL;\n+\n /* Edge summary for IPA-CP edge information.  */\n ipa_edge_args_sum_t *ipa_edge_args_sum;\n \n@@ -3729,19 +3730,18 @@ ipa_free_all_node_params (void)\n   ipa_node_params_sum = NULL;\n }\n \n-/* Grow ipcp_transformations if necessary.  Also allocate any necessary hash\n+/* Initialize IPA CP transformation summary and also allocate any necessary hash\n    tables if they do not already exist.  */\n \n void\n-ipcp_grow_transformations_if_necessary (void)\n+ipcp_transformation_initialize (void)\n {\n-  if (vec_safe_length (ipcp_transformations)\n-      <= (unsigned) symtab->cgraph_max_uid)\n-    vec_safe_grow_cleared (ipcp_transformations, symtab->cgraph_max_uid + 1);\n   if (!ipa_bits_hash_table)\n     ipa_bits_hash_table = hash_table<ipa_bit_ggc_hash_traits>::create_ggc (37);\n   if (!ipa_vr_hash_table)\n     ipa_vr_hash_table = hash_table<ipa_vr_ggc_hash_traits>::create_ggc (37);\n+  if (ipcp_transformation_sum == NULL)\n+    ipcp_transformation_sum = ipcp_transformation_t::create_ggc (symtab);\n }\n \n /* Set the aggregate replacements of NODE to be AGGVALS.  */\n@@ -3750,8 +3750,9 @@ void\n ipa_set_node_agg_value_chain (struct cgraph_node *node,\n \t\t\t      struct ipa_agg_replacement_value *aggvals)\n {\n-  ipcp_grow_transformations_if_necessary ();\n-  (*ipcp_transformations)[node->uid].agg_values = aggvals;\n+  ipcp_transformation_initialize ();\n+  ipcp_transformation *s = ipcp_transformation_sum->get_create (node);\n+  s->agg_values = aggvals;\n }\n \n /* Hook that is called by cgraph.c when an edge is removed.  Adjust reference\n@@ -3915,15 +3916,14 @@ ipa_node_params_t::duplicate(cgraph_node *src, cgraph_node *dst,\n       ipa_set_node_agg_value_chain (dst, new_av);\n     }\n \n-  ipcp_transformation_summary *src_trans\n-    = ipcp_get_transformation_summary (src);\n+  ipcp_transformation *src_trans = ipcp_get_transformation_summary (src);\n \n   if (src_trans)\n     {\n-      ipcp_grow_transformations_if_necessary ();\n-      src_trans = ipcp_get_transformation_summary (src);\n-      ipcp_transformation_summary *dst_trans\n-\t= ipcp_get_transformation_summary (dst);\n+      ipcp_transformation_initialize ();\n+      src_trans = ipcp_transformation_sum->get_create (src);\n+      ipcp_transformation *dst_trans\n+\t= ipcp_transformation_sum->get_create (dst);\n \n       dst_trans->bits = vec_safe_copy (src_trans->bits);\n \n@@ -4565,7 +4565,7 @@ write_ipcp_transformation_info (output_block *ob, cgraph_node *node)\n       streamer_write_bitpack (&bp);\n     }\n \n-  ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+  ipcp_transformation *ts = ipcp_get_transformation_summary (node);\n   if (ts && vec_safe_length (ts->m_vr) > 0)\n     {\n       count = ts->m_vr->length ();\n@@ -4640,9 +4640,8 @@ read_ipcp_transformation_info (lto_input_block *ib, cgraph_node *node,\n   count = streamer_read_uhwi (ib);\n   if (count > 0)\n     {\n-      ipcp_grow_transformations_if_necessary ();\n-\n-      ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+      ipcp_transformation_initialize ();\n+      ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n       vec_safe_grow_cleared (ts->m_vr, count);\n       for (i = 0; i < count; i++)\n \t{\n@@ -4663,9 +4662,8 @@ read_ipcp_transformation_info (lto_input_block *ib, cgraph_node *node,\n   count = streamer_read_uhwi (ib);\n   if (count > 0)\n     {\n-      ipcp_grow_transformations_if_necessary ();\n-\n-      ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+      ipcp_transformation_initialize ();\n+      ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n       vec_safe_grow_cleared (ts->bits, count);\n \n       for (i = 0; i < count; i++)\n@@ -4932,14 +4930,14 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n }\n \n /* Update bits info of formal parameters as described in\n-   ipcp_transformation_summary.  */\n+   ipcp_transformation.  */\n \n static void\n ipcp_update_bits (struct cgraph_node *node)\n {\n   tree parm = DECL_ARGUMENTS (node->decl);\n   tree next_parm = parm;\n-  ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+  ipcp_transformation *ts = ipcp_get_transformation_summary (node);\n \n   if (!ts || vec_safe_length (ts->bits) == 0)\n     return;\n@@ -5024,15 +5022,15 @@ ipcp_update_bits (struct cgraph_node *node)\n }\n \n /* Update value range of formal parameters as described in\n-   ipcp_transformation_summary.  */\n+   ipcp_transformation.  */\n \n static void\n ipcp_update_vr (struct cgraph_node *node)\n {\n   tree fndecl = node->decl;\n   tree parm = DECL_ARGUMENTS (fndecl);\n   tree next_parm = parm;\n-  ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+  ipcp_transformation *ts = ipcp_get_transformation_summary (node);\n   if (!ts || vec_safe_length (ts->m_vr) == 0)\n     return;\n   const vec<ipa_vr, va_gc> &vr = *ts->m_vr;\n@@ -5135,9 +5133,11 @@ ipcp_transform_function (struct cgraph_node *node)\n     free_ipa_bb_info (bi);\n   fbi.bb_infos.release ();\n   free_dominance_info (CDI_DOMINATORS);\n-  (*ipcp_transformations)[node->uid].agg_values = NULL;\n-  (*ipcp_transformations)[node->uid].bits = NULL;\n-  (*ipcp_transformations)[node->uid].m_vr = NULL;\n+\n+  ipcp_transformation *s = ipcp_transformation_sum->get (node);\n+  s->agg_values = NULL;\n+  s->bits = NULL;\n+  s->m_vr = NULL;\n \n   vec_free (descriptors);\n "}, {"sha": "55e10cf0f27a14bf772da2aa2ad90dc16576e3c3", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=9d3e0adc2a0e657b2aa384f1392dd2fac77a62d4", "patch": "@@ -544,7 +544,7 @@ struct GTY(()) ipa_agg_replacement_value\n \n /* Structure holding information for the transformation phase of IPA-CP.  */\n \n-struct GTY(()) ipcp_transformation_summary\n+struct GTY(()) ipcp_transformation\n {\n   /* Linked list of known aggregate values.  */\n   ipa_agg_replacement_value *agg_values;\n@@ -556,7 +556,7 @@ struct GTY(()) ipcp_transformation_summary\n \n void ipa_set_node_agg_value_chain (struct cgraph_node *node,\n \t\t\t\t   struct ipa_agg_replacement_value *aggvals);\n-void ipcp_grow_transformations_if_necessary (void);\n+void ipcp_transformation_initialize (void);\n \n /* ipa_edge_args stores information related to a callsite and particularly its\n    arguments.  It can be accessed by the IPA_EDGE_REF macro.  */\n@@ -649,8 +649,27 @@ extern GTY(()) ipa_node_params_t * ipa_node_params_sum;\n /* Call summary to store information about edges such as jump functions.  */\n extern GTY(()) ipa_edge_args_sum_t *ipa_edge_args_sum;\n \n-/* Vector of IPA-CP transformation data for each clone.  */\n-extern GTY(()) vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n+/* Function summary for IPA-CP transformation.  */\n+class ipcp_transformation_t\n+: public function_summary<ipcp_transformation *>\n+{\n+public:\n+  ipcp_transformation_t (symbol_table *table, bool ggc):\n+    function_summary<ipcp_transformation *> (table, ggc) {}\n+\n+  ~ipcp_transformation_t () {}\n+\n+  static ipcp_transformation_t *create_ggc (symbol_table *symtab)\n+  {\n+    ipcp_transformation_t *summary\n+      = new (ggc_cleared_alloc <ipcp_transformation_t> ())\n+      ipcp_transformation_t (symtab, true);\n+    return summary;\n+  }\n+};\n+\n+/* Function summary where the IPA CP transformations are actually stored.  */\n+extern GTY(()) function_summary <ipcp_transformation *> *ipcp_transformation_sum;\n \n /* Return the associated parameter/argument info corresponding to the given\n    node/edge.  */\n@@ -694,20 +713,21 @@ ipa_edge_args_info_available_for_edge_p (struct cgraph_edge *edge)\n   return ipa_edge_args_sum->exists (edge);\n }\n \n-static inline ipcp_transformation_summary *\n+static inline ipcp_transformation *\n ipcp_get_transformation_summary (cgraph_node *node)\n {\n-  if ((unsigned) node->uid >= vec_safe_length (ipcp_transformations))\n+  if (ipcp_transformation_sum == NULL)\n     return NULL;\n-  return &(*ipcp_transformations)[node->uid];\n+\n+  return ipcp_transformation_sum->get (node);\n }\n \n /* Return the aggregate replacements for NODE, if there are any.  */\n \n static inline struct ipa_agg_replacement_value *\n ipa_get_agg_replacements_for_node (cgraph_node *node)\n {\n-  ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+  ipcp_transformation *ts = ipcp_get_transformation_summary (node);\n   return ts ? ts->agg_values : NULL;\n }\n "}]}