{"sha": "3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmNzRkYTI5ZjFmMWQ0Yjk3MjE4OTk0NzIwZDNmY2ViZjFkMWVlYQ==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@debian.org", "date": "2003-03-07T08:01:24Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2003-03-07T08:01:24Z"}, "message": "Makefile.am (AM_MAKEFLAGS): Also pass gxx_include_dir.\n\n2003-03-07  Matthias Klose  <doko@debian.org>\n\n        * Makefile.am (AM_MAKEFLAGS): Also pass gxx_include_dir.\n        FLAGS_TO_PASS: Set to AM_MAKEFLAGS\n        * Makefile.in: Regenerate.\n        * libsupc++/Makefile.am: Express glibcppinstalldir in terms\n        of gxx_include_dir.\n        AM_MAKEFLAGS: Pass gxx_include_dir.\n        * libsupc++/Makefile.in: Regenerate.\n\nFrom-SVN: r63939", "tree": {"sha": "277e5564c24952fee3e93222bb1c101a311683f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277e5564c24952fee3e93222bb1c101a311683f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/comments", "author": null, "committer": null, "parents": [{"sha": "5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1"}], "stats": {"total": 147, "additions": 42, "deletions": 105}, "files": [{"sha": "2f9b0ff6085eed74f48bd640441ecb7f84b13208", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "patch": "@@ -1,3 +1,13 @@\n+2003-03-07  Matthias Klose  <doko@debian.org>\n+\n+\t* Makefile.am (AM_MAKEFLAGS): Also pass gxx_include_dir.\n+\tFLAGS_TO_PASS: Set to AM_MAKEFLAGS\n+\t* Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Express glibcppinstalldir in terms\n+\tof gxx_include_dir.\n+\tAM_MAKEFLAGS: Pass gxx_include_dir.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\n 2003-03-06  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* testsuite/27_io/ios_base_storage.cc (test02): Set exception"}, {"sha": "97fcfa8549977bccbabea2053f87252cbeb27377", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "patch": "@@ -156,6 +156,7 @@ AM_MAKEFLAGS = \\\n \t\"includedir=$(includedir)\" \\\n \t\"prefix=$(prefix)\" \\\n \t\"tooldir=$(tooldir)\" \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\" \\\n \t\"AR=$(AR)\" \\\n \t\"AS=$(AS)\" \\\n \t\"LD=$(LD)\" \\"}, {"sha": "7ab94c68d54dd9d660d42399058453aa4c155744", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p4 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -170,44 +170,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"gxx_include_dir=$(gxx_include_dir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n@@ -222,7 +185,7 @@ mkcheck.in testsuite_flags.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -236,7 +199,7 @@ Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n $(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ configure.in  acinclude.m4\n \tcd $(srcdir) && $(ACLOCAL)\n \n-config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n+config.status: $(srcdir)/configure.in $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n@@ -309,7 +272,7 @@ maintainer-clean-recursive:\n \tdot_seen=no; \\\n \trev=''; list='$(SUBDIRS)'; for subdir in $$list; do \\\n \t  rev=\"$$subdir $$rev\"; \\\n-\t  test \"$$subdir\" != \".\" || dot_seen=yes; \\\n+\t  test \"$$subdir\" = \".\" && dot_seen=yes; \\\n \tdone; \\\n \ttest \"$$dot_seen\" = \"no\" && rev=\". $$rev\"; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\"}, {"sha": "8367ba8097f69936224a74f344bf182c74248414", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "patch": "@@ -99,7 +99,7 @@ sources = \\\n libsupc___la_SOURCES = $(sources) \n libsupc__convenience_la_SOURCES = $(sources) \n \n-glibcppinstalldir = @gxx_include_dir@\n+glibcppinstalldir = $(gxx_include_dir)\n glibcppinstall_HEADERS = $(headers)\n \n # Use special rules for pulling things out of libiberty.  These\n@@ -126,6 +126,9 @@ AM_CXXFLAGS = \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n \t$(CONFIG_CXXFLAGS) \n \n+AM_MAKEFLAGS = \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\"\n+\n # libstdc++ libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is"}, {"sha": "92964565d7ff854b1327b13c61994aa624c72e64", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 21, "deletions": 61, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf74da29f1f1d4b97218994720d3fcebf1d1eea/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=3bf74da29f1f1d4b97218994720d3fcebf1d1eea", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p4 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -164,13 +164,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n+CONFIG_CXXFLAGS =  \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n LIBSUPCXX_CXXFLAGS = @LIBSUPCXX_PICFLAGS@\n@@ -180,74 +178,40 @@ GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n-INCLUDES = \\\n-\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_term_handler.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\teh_type.cc \\\n-\teh_unex_handler.cc \\\n-\tguard.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc \\\n-\tvterminate.cc\n+INCLUDES =  \t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_term_handler.cc \teh_terminate.cc \teh_throw.cc \teh_type.cc \teh_unex_handler.cc \tguard.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc \tvterminate.cc\n \n \n libsupc___la_SOURCES = $(sources) \n libsupc__convenience_la_SOURCES = $(sources) \n \n-glibcppinstalldir = @gxx_include_dir@\n+glibcppinstalldir = $(gxx_include_dir)\n glibcppinstall_HEADERS = $(headers)\n \n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n-C_COMPILE = \\\n-\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n-\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+C_COMPILE =  \t$(CC) $(DEFS) $(GCC_INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n-\t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n-            $(AM_CPPFLAGS) $(CPPFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS)             $(AM_CPPFLAGS) $(CPPFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. \n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+\n+\n+AM_MAKEFLAGS =  \t\"gxx_include_dir=$(gxx_include_dir)\"\n \n \n # libstdc++ libtool notes\n@@ -271,9 +235,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -282,9 +244,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -321,7 +281,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libsupc__convenience_la_SOURCES) $(libsupc___la_SOURCES)\n OBJECTS = $(libsupc__convenience_la_OBJECTS) $(libsupc___la_OBJECTS)"}]}