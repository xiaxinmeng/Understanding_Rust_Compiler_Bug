{"sha": "8971094d72ac03277fefdcd65e9bb449ecb3dae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3MTA5NGQ3MmFjMDMyNzdmZWZkY2Q2NWU5YmI0NDllY2IzZGFlMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-08-14T19:23:56Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-08-14T19:23:56Z"}, "message": "re PR tree-optimization/22615 (ICE in first_vi_for_offset, at tree-ssa-structalias.c:2858)\n\n2005-08-14  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/22615\n\n\t* tree-ssa-structalias.c (solution_set_add): Handle\n\tfirst_vi_for_offset returning NULL.\n\t(do_da_constraint): Ditto.\n\t(do_sd_constraint): Ditto.\n\t(do_ds_constraint): Ditto\n\t(find_func_aliases): Ditto.\n\t(build_constraint_graph): RHS is allowed be ANYTHING.\n\t(first_vi_for_offset): Return NULL if we couldn't find anything at\n\tthe offset.\n\nFrom-SVN: r103083", "tree": {"sha": "e55e265577b39245ffd869604a9f3bdfdc0923fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55e265577b39245ffd869604a9f3bdfdc0923fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8971094d72ac03277fefdcd65e9bb449ecb3dae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8971094d72ac03277fefdcd65e9bb449ecb3dae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8971094d72ac03277fefdcd65e9bb449ecb3dae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8971094d72ac03277fefdcd65e9bb449ecb3dae0/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5b2a111dcea3bd2e618676d2761a1570c145dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b2a111dcea3bd2e618676d2761a1570c145dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b2a111dcea3bd2e618676d2761a1570c145dcd"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "9b8f86cc5a58a2497d9f1e39d09ce262d6873bb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8971094d72ac03277fefdcd65e9bb449ecb3dae0", "patch": "@@ -1,3 +1,17 @@\n+2005-08-14  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/22615\n+\t\n+\t* tree-ssa-structalias.c (solution_set_add): Handle\n+\tfirst_vi_for_offset returning NULL. \n+\t(do_da_constraint): Ditto.\n+\t(do_sd_constraint): Ditto.\n+\t(do_ds_constraint): Ditto\n+\t(find_func_aliases): Ditto.\n+\t(build_constraint_graph): RHS is allowed be ANYTHING.\n+\t(first_vi_for_offset): Return NULL if we couldn't find anything at\n+\tthe offset.\n+\t\n 2005-08-14  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_canonicalize_comparison): Prefer register"}, {"sha": "a8936c4cb6507108c6727b830ca8d3eeb549cac8", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr22615.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22615.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22615.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22615.C?ref=8971094d72ac03277fefdcd65e9bb449ecb3dae0", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Ensure that we don't crash when people decide to return the address of padding.  */\n+\n+struct A\n+{\n+    char c;\n+      int i;\n+};\n+\n+A a;\n+\n+struct B\n+{\n+    char c, d;\n+};\n+\n+union C\n+{\n+    A *p;\n+      B *q;\n+\n+        C() : p(&a) {}\n+\t  char& foo() { return q->d; }\n+};\n+void bar() { C().foo() = 0; }\n+"}, {"sha": "cad485abd77dc21d31ac950b6370b04ec090d71e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8971094d72ac03277fefdcd65e9bb449ecb3dae0/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8971094d72ac03277fefdcd65e9bb449ecb3dae0", "patch": "@@ -612,6 +612,8 @@ solution_set_add (bitmap set, unsigned HOST_WIDE_INT offset)\n \t{\n \t  unsigned HOST_WIDE_INT fieldoffset = get_varinfo (i)->offset + offset;\n \t  varinfo_t v = first_vi_for_offset (get_varinfo (i), fieldoffset);\n+\t  if (!v)\n+\t    continue;\n \t  bitmap_set_bit (result, v->id);\n \t}\n       else if (get_varinfo (i)->is_artificial_var \n@@ -997,7 +999,7 @@ build_constraint_graph (void)\n \t  /* x = &y */\n \t  bitmap_set_bit (get_varinfo (lhs.var)->solution, rhs.var);\n \t}\n-      else if (rhs.var > anything_id && lhs.var > anything_id)\n+      else if (lhs.var > anything_id)\n \t{\n \t  /* Ignore 0 weighted self edges, as they can't possibly contribute\n \t     anything */\n@@ -1332,6 +1334,8 @@ do_da_constraint (constraint_graph_t graph ATTRIBUTE_UNUSED,\n \t  unsigned HOST_WIDE_INT fieldoffset = get_varinfo (j)->offset + offset;\n \n \t  v = first_vi_for_offset (get_varinfo (j), fieldoffset);\n+\t  if (!v)\n+\t    continue;\n \t  t = v->node;\n \t  sol = get_varinfo (t)->solution;\n \t  if (!bitmap_bit_p (sol, rhs))\n@@ -1375,6 +1379,8 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n \t  unsigned int t;\n \n \t  v = first_vi_for_offset (get_varinfo (j), fieldoffset);\t  \n+\t  if (!v)\n+\t    continue;\n \t  t = v->node;\n \t  if (int_add_graph_edge (graph, lhs, t, 0))\n \t    flag |= bitmap_ior_into (sol, get_varinfo (t)->solution);\t  \n@@ -1419,6 +1425,8 @@ do_ds_constraint (constraint_graph_t graph, constraint_t c, bitmap delta)\n \t  unsigned HOST_WIDE_INT fieldoffset = get_varinfo (j)->offset + loff;\n \n \t  v = first_vi_for_offset (get_varinfo (j), fieldoffset);\n+\t  if (!v)\n+\t    continue;\n \t  t = v->node;\n \t  if (int_add_graph_edge (graph, t, rhs, roff))\n \t    {\n@@ -2878,7 +2886,7 @@ find_func_aliases (tree t, struct alias_info *ai)\n    OFFSET.\n    Effectively, walk the chain of fields for the variable START to find the\n    first field that overlaps with OFFSET.\n-   Abort if we can't find one.  */\n+   Return NULL if we can't find one.  */\n \n static varinfo_t \n first_vi_for_offset (varinfo_t start, unsigned HOST_WIDE_INT offset)\n@@ -2894,8 +2902,7 @@ first_vi_for_offset (varinfo_t start, unsigned HOST_WIDE_INT offset)\n \treturn curr;\n       curr = curr->next;\n     }\n-\n-  gcc_unreachable ();\n+  return NULL;\n }\n \n "}]}