{"sha": "987db028252a8536ef5d5ba1f8c7cea44f170cea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3ZGIwMjgyNTJhODUzNmVmNWQ1YmExZjhjN2NlYTQ0ZjE3MGNlYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T06:11:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T06:11:40Z"}, "message": "Michael Matz <matzmich@cs.tu-berlin.de>\n\n\tMichael Matz  <matzmich@cs.tu-berlin.de>\n        * flow.c (compute_flow_dominators): Process blocks FIFO not LIFO.\n\nFrom-SVN: r32982", "tree": {"sha": "e3bb58e78dedbc88ef5fbb4b86102c949db568ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3bb58e78dedbc88ef5fbb4b86102c949db568ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987db028252a8536ef5d5ba1f8c7cea44f170cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987db028252a8536ef5d5ba1f8c7cea44f170cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987db028252a8536ef5d5ba1f8c7cea44f170cea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987db028252a8536ef5d5ba1f8c7cea44f170cea/comments", "author": null, "committer": null, "parents": [{"sha": "4669b5ae7e28a41346f816219f44c748a81d6696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4669b5ae7e28a41346f816219f44c748a81d6696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4669b5ae7e28a41346f816219f44c748a81d6696"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "09ff60b6838c7ca06fc88e8c7f8dce205d73c231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987db028252a8536ef5d5ba1f8c7cea44f170cea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987db028252a8536ef5d5ba1f8c7cea44f170cea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=987db028252a8536ef5d5ba1f8c7cea44f170cea", "patch": "@@ -1,4 +1,8 @@\n-2000-04-05  Alex Samuel  <samuel@codesourcery.com>\n+2000-04-06  Michael Matz  <matzmich@cs.tu-berlin.de>\n+\n+\t* flow.c (compute_flow_dominators): Process blocks FIFO not LIFO.\n+\n+2000-04-06  Alex Samuel  <samuel@codesourcery.com>\n \n \t* rtl.h (INSN_P): New macro.\n \t(successor_phi_fn): New typedef."}, {"sha": "1f32fe154cfed8e7f807807095d12ae760f6ec3b", "filename": "gcc/flow.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987db028252a8536ef5d5ba1f8c7cea44f170cea/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987db028252a8536ef5d5ba1f8c7cea44f170cea/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=987db028252a8536ef5d5ba1f8c7cea44f170cea", "patch": "@@ -5252,13 +5252,14 @@ compute_flow_dominators (dominators, post_dominators)\n   int bb;\n   sbitmap *temp_bitmap;\n   edge e;\n-  basic_block *worklist, *tos;\n+  basic_block *worklist, *workend, *qin, *qout;\n+  int qlen;\n \n   /* Allocate a worklist array/queue.  Entries are only added to the\n      list if they were not already on the list.  So the size is\n      bounded by the number of basic blocks.  */\n-  tos = worklist = (basic_block *) xmalloc (sizeof (basic_block)\n-\t\t    * n_basic_blocks);\n+  worklist = (basic_block *) xmalloc (sizeof (basic_block) * n_basic_blocks);\n+  workend = &worklist[n_basic_blocks];\n \n   temp_bitmap = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n   sbitmap_vector_zero (temp_bitmap, n_basic_blocks);\n@@ -5267,11 +5268,14 @@ compute_flow_dominators (dominators, post_dominators)\n     {\n       /* The optimistic setting of dominators requires us to put every\n \t block on the work list initially.  */\n+      qin = qout = worklist;\n       for (bb = 0; bb < n_basic_blocks; bb++)\n \t{\n-\t  *tos++ = BASIC_BLOCK (bb);\n+\t  *qin++ = BASIC_BLOCK (bb);\n \t  BASIC_BLOCK (bb)->aux = BASIC_BLOCK (bb);\n \t}\n+      qlen = n_basic_blocks;\n+      qin = worklist;\n \n       /* We want a maximal solution, so initially assume everything dominates\n \t everything else.  */\n@@ -5282,10 +5286,14 @@ compute_flow_dominators (dominators, post_dominators)\n \te->dest->aux = ENTRY_BLOCK_PTR;\n \n       /* Iterate until the worklist is empty.  */\n-      while (tos != worklist)\n+      while (qlen)\n \t{\n \t  /* Take the first entry off the worklist.  */\n-\t  basic_block b = *--tos;\n+\t  basic_block b = *qout++;\n+\t  if (qout >= workend)\n+\t    qout = worklist;\n+\t  qlen--;\n+\n \t  bb = b->index;\n \n \t  /* Compute the intersection of the dominators of all the\n@@ -5325,7 +5333,11 @@ compute_flow_dominators (dominators, post_dominators)\n \t\t{\n \t\t  if (!e->dest->aux && e->dest != EXIT_BLOCK_PTR)\n \t\t    {\n-\t\t      *tos++ = e->dest;\n+\t\t      *qin++ = e->dest;\n+\t\t      if (qin >= workend)\n+\t\t\tqin = worklist;\n+\t\t      qlen++;\n+\n \t\t      e->dest->aux = e;\n \t\t    }\n \t\t}\n@@ -5337,11 +5349,14 @@ compute_flow_dominators (dominators, post_dominators)\n     {\n       /* The optimistic setting of dominators requires us to put every\n \t block on the work list initially.  */\n+      qin = qout = worklist;\n       for (bb = 0; bb < n_basic_blocks; bb++)\n \t{\n-\t  *tos++ = BASIC_BLOCK (bb);\n+\t  *qin++ = BASIC_BLOCK (bb);\n \t  BASIC_BLOCK (bb)->aux = BASIC_BLOCK (bb);\n \t}\n+      qlen = n_basic_blocks;\n+      qin = worklist;\n \n       /* We want a maximal solution, so initially assume everything post\n \t dominates everything else.  */\n@@ -5352,10 +5367,14 @@ compute_flow_dominators (dominators, post_dominators)\n \te->src->aux = EXIT_BLOCK_PTR;\n \n       /* Iterate until the worklist is empty.  */\n-      while (tos != worklist)\n+      while (qlen)\n \t{\n \t  /* Take the first entry off the worklist.  */\n-\t  basic_block b = *--tos;\n+\t  basic_block b = *qout++;\n+\t  if (qout >= workend)\n+\t    qout = worklist;\n+\t  qlen--;\n+\n \t  bb = b->index;\n \n \t  /* Compute the intersection of the post dominators of all the\n@@ -5398,13 +5417,18 @@ compute_flow_dominators (dominators, post_dominators)\n \t\t{\n \t\t  if (!e->src->aux && e->src != ENTRY_BLOCK_PTR)\n \t\t    {\n-\t\t      *tos++ = e->src;\n+\t\t      *qin++ = e->src;\n+\t\t      if (qin >= workend)\n+\t\t\tqin = worklist;\n+\t\t      qlen++;\n+\n \t\t      e->src->aux = e;\n \t\t    }\n \t\t}\n \t    }\n \t}\n     }\n+\n   free (temp_bitmap);\n }\n "}]}