{"sha": "630ecd8d109104ecc207dd6c4fb96b02ba477239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwZWNkOGQxMDkxMDRlY2MyMDdkZDZjNGZiOTZiMDJiYTQ3NzIzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-09-11T11:38:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-09-11T11:38:05Z"}, "message": "i386.h (ix86_tune_indices): Add X86_TUNE_INTER_UNIT_CONVERSIONS.\n\n\n\t* i386.h (ix86_tune_indices): Add X86_TUNE_INTER_UNIT_CONVERSIONS.\n\t(TARGET_INTER_UNIT_CONVERSIONS): New.\n\t* i386.md (floatsi expanders): Remove redundant check for SImode\n\tsource; offload to memory when asked for.\n\t(floatsisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse\n\tfloatdisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse):\n\tUpdate conditions;\n\t(floatsisf2_mixed_memory, floatsisf2_sse_memory,\n\tfloatsidf2_mixed_memory, floatsidf2_sse_memory\n\tfloatdisf2_mixed_memory, floatsisf2_sse_memory,\n\tfloatsidf2_mixed_memory, floatsidf2_sse_memory): New.\n\nFrom-SVN: r128369", "tree": {"sha": "2968bb9daec1e127c158652543d8a6952d1fab0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2968bb9daec1e127c158652543d8a6952d1fab0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630ecd8d109104ecc207dd6c4fb96b02ba477239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ecd8d109104ecc207dd6c4fb96b02ba477239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630ecd8d109104ecc207dd6c4fb96b02ba477239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ecd8d109104ecc207dd6c4fb96b02ba477239/comments", "author": null, "committer": null, "parents": [{"sha": "7986e000a93bd150c589470b8cb81ad3489fa250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7986e000a93bd150c589470b8cb81ad3489fa250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7986e000a93bd150c589470b8cb81ad3489fa250"}], "stats": {"total": 195, "additions": 180, "deletions": 15}, "files": [{"sha": "cc9624210ab99ff593d0ada084aca463b0eb7829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=630ecd8d109104ecc207dd6c4fb96b02ba477239", "patch": "@@ -1,3 +1,17 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* i386.h (ix86_tune_indices): Add X86_TUNE_INTER_UNIT_CONVERSIONS.\n+\t(TARGET_INTER_UNIT_CONVERSIONS): New.\n+\t* i386.md (floatsi expanders): Remove redundant check for SImode\n+\tsource; offload to memory when asked for.\n+\t(floatsisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse\n+\tfloatdisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse):\n+\tUpdate conditions;\n+\t(floatsisf2_mixed_memory, floatsisf2_sse_memory,\n+\tfloatsidf2_mixed_memory, floatsidf2_sse_memory\n+\tfloatdisf2_mixed_memory, floatsisf2_sse_memory,\n+\tfloatsidf2_mixed_memory, floatsidf2_sse_memory): New.\n+\n 2007-09-11  Jan Hubicka <jh@suse.cz>\n \n \t* toplev.c (process_options): all frontends now do unit-at-a-time."}, {"sha": "ecec205b5003df5c0fc512e7b75e4e46f280dec9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=630ecd8d109104ecc207dd6c4fb96b02ba477239", "patch": "@@ -1376,6 +1376,9 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_INTER_UNIT_MOVES */\n   ~(m_ATHLON_K8_AMDFAM10 | m_GENERIC),\n \n+  /* X86_TUNE_INTER_UNIT_CONVERSIONS */\n+  ~(m_AMDFAM10),\n+\n   /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n      than 4 branch instructions in the 16 byte window.  */\n   m_PPRO | m_ATHLON_K8_AMDFAM10 | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,"}, {"sha": "451df2e10ca22ebfac0cf3feb49d2bc5bbd44815", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=630ecd8d109104ecc207dd6c4fb96b02ba477239", "patch": "@@ -259,6 +259,7 @@ enum ix86_tune_indices {\n   X86_TUNE_SHIFT1,\n   X86_TUNE_USE_FFREEP,\n   X86_TUNE_INTER_UNIT_MOVES,\n+  X86_TUNE_INTER_UNIT_CONVERSIONS,\n   X86_TUNE_FOUR_JUMP_LIMIT,\n   X86_TUNE_SCHEDULE,\n   X86_TUNE_USE_BT,\n@@ -336,6 +337,8 @@ extern unsigned int ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_SHIFT1\t\tix86_tune_features[X86_TUNE_SHIFT1]\n #define TARGET_USE_FFREEP\tix86_tune_features[X86_TUNE_USE_FFREEP]\n #define TARGET_INTER_UNIT_MOVES\tix86_tune_features[X86_TUNE_INTER_UNIT_MOVES]\n+#define TARGET_INTER_UNIT_CONVERSIONS\\\n+\tix86_tune_features[X86_TUNE_INTER_UNIT_CONVERSIONS]\n #define TARGET_FOUR_JUMP_LIMIT\tix86_tune_features[X86_TUNE_FOUR_JUMP_LIMIT]\n #define TARGET_SCHEDULE\t\tix86_tune_features[X86_TUNE_SCHEDULE]\n #define TARGET_USE_BT\t\tix86_tune_features[X86_TUNE_USE_BT]"}, {"sha": "0c625da6b72934d2aafa55c6b7d7be09734fd58c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 160, "deletions": 15, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ecd8d109104ecc207dd6c4fb96b02ba477239/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=630ecd8d109104ecc207dd6c4fb96b02ba477239", "patch": "@@ -4775,14 +4775,13 @@\n   \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"\n    /* When we use vector converts, we can't have input in memory.  */\n-   if (GET_MODE (operands[0]) == DFmode && GET_MODE (operands[1]) == SImode\n+   if (GET_MODE (operands[0]) == DFmode\n        && TARGET_USE_VECTOR_CONVERTS && !optimize_size && TARGET_SSE_MATH\n        && SSE_FLOAT_MODE_P (DFmode))\n      operands[1] = force_reg (SImode, operands[1]);\n-   \n-   if (GET_MODE (operands[0]) == SFmode && GET_MODE (operands[1]) == SImode\n-       && !optimize_size && TARGET_USE_VECTOR_CONVERTS && TARGET_SSE_MATH\n-       && SSE_FLOAT_MODE_P (SFmode))\n+   else if (GET_MODE (operands[0]) == SFmode\n+            && !optimize_size && TARGET_USE_VECTOR_CONVERTS && TARGET_SSE_MATH\n+            && SSE_FLOAT_MODE_P (SFmode))\n      {\n        /* When !flag_trapping_math, we handle SImode->SFmode vector\n \t  conversions same way as SImode->DFmode.\n@@ -4811,6 +4810,19 @@\n \t   operands[1] = tmp;\n \t }\n      }\n+   /* Offload operand of cvtsi2ss and cvtsi2sd into memory for\n+      !TARGET_INTER_UNIT_CONVERSIONS\n+      It is neccesary for the patterns to not accept nonemmory operands\n+      as we would optimize out later.  */\n+   else if (!TARGET_INTER_UNIT_CONVERSIONS\n+\t    && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n+\t    && !optimize_size\n+\t    && !MEM_P (operands[1]))\n+     {\n+\trtx tmp = assign_386_stack_local (GET_MODE (operands[1]), SLOT_VIRTUAL);\n+\temit_move_insn (tmp, operands[1]);\n+\toperands[1] = tmp;\n+     }\n   \")\n \n (define_insn \"*floatsisf2_mixed_vector\"\n@@ -4833,7 +4845,8 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x,x\")\n \t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n   \"TARGET_MIX_SSE_I387\n-   && (!TARGET_USE_VECTOR_CONVERTS || optimize_size)\"\n+   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n+       || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -4846,6 +4859,20 @@\n    (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatsisf2_mixed_memory\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,x\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n+  \"TARGET_MIX_SSE_I387\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"@\n+   fild%z1\\t%1\n+   cvtsi2ss\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"*,double\")\n+   (set_attr \"amdfam10_decode\" \"*,double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatsisf2_sse_vector_nointernunit\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n \t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n@@ -4907,14 +4934,27 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n \t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_SSE_MATH\n-   && (!TARGET_USE_VECTOR_CONVERTS || optimize_size)\"\n+   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n+       || optimize_size)\"\n   \"cvtsi2ss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatsisf2_sse_memory\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_SSE_MATH\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"cvtsi2ss\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"double\")\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatsidf2_mixed_vector\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=x,f,f\")\n \t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"x,m,r\")))]\n@@ -4935,7 +4975,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,x,x,!x\")\n \t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,m,x\")))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-    && (!TARGET_USE_VECTOR_CONVERTS || !optimize_size)\"\n+   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n+       || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -4949,6 +4990,20 @@\n    (set_attr \"amdfam10_decode\" \"*,*,vector,double,double\")\n    (set_attr \"fp_int_src\" \"true,true,true,true,false\")])\n \n+(define_insn \"*floatsidf2_mixed_memory\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,x\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n+  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"@\n+   fild%z1\\t%1\n+   cvtsi2sd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"*,direct\")\n+   (set_attr \"amdfam10_decode\" \"*,double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatsidf2_sse_vector\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"x\")))]\n@@ -4981,7 +5036,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=x,x,!x\")\n \t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,x\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && (!TARGET_USE_VECTOR_CONVERTS || optimize_size)\"\n+   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n+       || optimize_size)\"\n   \"@\n    cvtsi2sd\\t{%1, %0|%0, %1}\n    cvtsi2sd\\t{%1, %0|%0, %1}\n@@ -4992,6 +5048,19 @@\n    (set_attr \"amdfam10_decode\" \"vector,double,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatsidf2_memory\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"x\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n+       || optimize_size)\"\n+  \"cvtsi2sd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"direct\")\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatsi<mode>2_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n \t(float:MODEF\n@@ -5010,12 +5079,23 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387 || (TARGET_64BIT && TARGET_SSE_MATH)\"\n-  \"\")\n+{\n+  if (!TARGET_INTER_UNIT_CONVERSIONS && TARGET_64BIT\n+      && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (SFmode)\n+      && !optimize_size\n+      && !MEM_P (operands[1]))\n+    {\n+\trtx tmp = assign_386_stack_local (GET_MODE (operands[1]), SLOT_VIRTUAL);\n+\temit_move_insn (tmp, operands[1]);\n+\toperands[1] = tmp;\n+    }\n+})\n \n (define_insn \"*floatdisf2_mixed\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x,x\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n-  \"TARGET_64BIT && TARGET_MIX_SSE_I387\"\n+  \"TARGET_64BIT && TARGET_MIX_SSE_I387\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -5028,17 +5108,44 @@\n    (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatdisf2_mixed\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,x\")\n+\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m,m\")))]\n+  \"TARGET_64BIT && TARGET_MIX_SSE_I387\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"@\n+   fild%z1\\t%1\n+   cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"*,double\")\n+   (set_attr \"amdfam10_decode\" \"*,double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatdisf2_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE_MATH\"\n+  \"TARGET_64BIT && TARGET_SSE_MATH\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatdisf2_memory\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_64BIT && TARGET_SSE_MATH\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"double\")\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_expand \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n@@ -5049,12 +5156,22 @@\n       ix86_expand_convert_sign_didf_sse (operands[0], operands[1]);\n       DONE;\n     }\n+  if (!TARGET_INTER_UNIT_CONVERSIONS && TARGET_64BIT\n+      && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (DFmode)\n+      && !optimize_size\n+      && !MEM_P (operands[1]))\n+    {\n+\trtx tmp = assign_386_stack_local (GET_MODE (operands[1]), SLOT_VIRTUAL);\n+\temit_move_insn (tmp, operands[1]);\n+\toperands[1] = tmp;\n+    }\n })\n \n (define_insn \"*floatdidf2_mixed\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,x,x\")\n \t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_MIX_SSE_I387\"\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_MIX_SSE_I387\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -5067,22 +5184,50 @@\n    (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatdidf2_mixed_memory\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,x\")\n+\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m,m\")))]\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_MIX_SSE_I387\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"@\n+   fild%z1\\t%1\n+   cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"*,direct\")\n+   (set_attr \"amdfam10_decode\" \"*,double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatdidf2_sse\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=x,x\")\n \t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\"\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n+(define_insn \"*floatdidf2_sse_memory\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n+\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n+   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+  \"cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"direct\")\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n (define_insn \"*floatdi<mode>2_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n \t(float:MODEF\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"m,?r\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (!TARGET_SSE_MATH || !SSE_FLOAT_MODE_P (GET_MODE (operands[0])))\"\n   \"@\n    fild%z1\\t%1\n    #\""}]}