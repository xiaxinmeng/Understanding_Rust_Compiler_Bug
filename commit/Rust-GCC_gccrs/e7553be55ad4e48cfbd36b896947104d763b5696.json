{"sha": "e7553be55ad4e48cfbd36b896947104d763b5696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1NTNiZTU1YWQ0ZTQ4Y2ZiZDM2Yjg5Njk0NzEwNGQ3NjNiNTY5Ng==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1999-06-07T10:35:27Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1999-06-07T10:35:27Z"}, "message": "cpplib.c (do_define): Cast `alloca' return value.\n\nMon Jun  7 13:33:39 1999  Dave Brolley  <brolley@cygnus.com>\n\t* cpplib.c (do_define): Cast `alloca' return value.\n\t(do_include, do_undef, do_pragma): Likewise.\n\t* cpphash.c (dump_definition): Cast `xstrdup' and `alloca' return\n \tvalues.\n\t* cppfiles.c (initialize_input_buffer): Cast `xmalloc' return values.\n\t* gcc/cppspec.c (lang_specific_driver): Cast xmalloc return value.\n\nFrom-SVN: r27391", "tree": {"sha": "23b92bd39b6485ed2d1cf4e011752164ac81fb8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b92bd39b6485ed2d1cf4e011752164ac81fb8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7553be55ad4e48cfbd36b896947104d763b5696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7553be55ad4e48cfbd36b896947104d763b5696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7553be55ad4e48cfbd36b896947104d763b5696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7553be55ad4e48cfbd36b896947104d763b5696/comments", "author": null, "committer": null, "parents": [{"sha": "683a10613f9e9a252effdccd7a1c3c003d2c5f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683a10613f9e9a252effdccd7a1c3c003d2c5f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683a10613f9e9a252effdccd7a1c3c003d2c5f91"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "cba11f2ab2e0200c7d36d1b7cb02fa0613fd2996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7553be55ad4e48cfbd36b896947104d763b5696", "patch": "@@ -1,3 +1,12 @@\n+Mon Jun  7 13:33:39 1999  Dave Brolley  <brolley@cygnus.com>\n+\n+\t* cpplib.c (do_define): Cast `alloca' return value.\n+\t(do_include, do_undef, do_pragma): Likewise.\n+\t* cpphash.c (dump_definition): Cast `xstrdup' and `alloca' return\n+ \tvalues.\n+\t* cppfiles.c (initialize_input_buffer): Cast `xmalloc' return values.\n+\t* gcc/cppspec.c (lang_specific_driver): Cast xmalloc return value.\n+\n Sun Jun  6 11:58:34 1999  Jakub Jelinek  <jj@ultra.linux.cz>\n \n \t* sparc.md (abstf2): This should be an expand."}, {"sha": "1e70d3e6c529bb91ef295c9f104b450d3030fe3b", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=e7553be55ad4e48cfbd36b896947104d763b5696", "patch": "@@ -1100,7 +1100,7 @@ initialize_input_buffer (pfile, fd, st)\n      read_and_prescan inner loop.  The number of non-EMPTY entries\n      should be as small as humanly possible.  */\n \n-  tmp = xmalloc (1 << CHAR_BIT);\n+  tmp = (U_CHAR *) xmalloc (1 << CHAR_BIT);\n   memset (tmp, SPECCASE_EMPTY, 1 << CHAR_BIT);\n   tmp['\\0'] = SPECCASE_NUL;\n   tmp['\\r'] = SPECCASE_CR;\n@@ -1138,7 +1138,7 @@ initialize_input_buffer (pfile, fd, st)\n      the case there's a potential trigraph or end-of-line digraph at\n      the end of a block. */\n \n-  tmp = xmalloc (pipe_buf + 2 + 2);\n+  tmp = (U_CHAR *) xmalloc (pipe_buf + 2 + 2);\n   pfile->input_buffer = tmp;\n   pfile->input_buffer_len = pipe_buf;\n }"}, {"sha": "552cf2ef4262146f62c1c44aa10daa7ce2ca4c2b", "filename": "gcc/cpphash.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=e7553be55ad4e48cfbd36b896947104d763b5696", "patch": "@@ -1665,9 +1665,10 @@ dump_definition (pfile, macro)\n   else\n     {\n       struct reflist *r;\n-      unsigned char *argnames = xstrdup (defn->args.argnames);\n-      unsigned char **argv = alloca (defn->nargs * sizeof(char *));\n-      int *argl = alloca (defn->nargs * sizeof(int));\n+      unsigned char *argnames = (unsigned char *) xstrdup (defn->args.argnames);\n+      unsigned char **argv = (unsigned char **) alloca (defn->nargs *\n+\t\t\t\t\t\t\tsizeof(char *));\n+      int *argl = (int *) alloca (defn->nargs * sizeof(int));\n       unsigned char *x;\n       int i;\n "}, {"sha": "25b57c6c3c58a73ce74d0d4607ba09e414130390", "filename": "gcc/cpplib.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=e7553be55ad4e48cfbd36b896947104d763b5696", "patch": "@@ -624,7 +624,7 @@ do_define (pfile, keyword)\n   /* Copy out the line so we can pop the token buffer. */\n   buf = pfile->token_buffer + here;\n   end = CPP_PWRITTEN (pfile);\n-  macro = alloca (end - buf + 1);\n+  macro = (U_CHAR *) alloca (end - buf + 1);\n   bcopy (buf, macro, end - buf + 1);\n   end = macro + (end - buf);\n \n@@ -1015,7 +1015,7 @@ do_include (pfile, keyword)\n     }\n \n   flen = CPP_WRITTEN (pfile) - old_written;\n-  ftok = alloca (flen + 1);\n+  ftok = (unsigned char *) alloca (flen + 1);\n   memcpy (ftok, pfile->token_buffer + old_written, flen);\n   ftok[flen] = '\\0';\n \n@@ -1342,7 +1342,7 @@ do_undef (pfile, keyword)\n   limit = CPP_PWRITTEN(pfile);\n \n   /* Copy out the token so we can pop the token buffer. */\n-  name = alloca (limit - buf + 1);\n+  name = (U_CHAR *) alloca (limit - buf + 1);\n   bcopy(buf, name, limit - buf);\n   name[limit - buf] = '\\0';\n \n@@ -1507,7 +1507,7 @@ do_pragma (pfile, keyword)\n       fname = p + 1;\n       p = (U_CHAR *) index (fname, '\\\"');\n \n-      fcopy = alloca (p - fname + 1);\n+      fcopy = (U_CHAR *) alloca (p - fname + 1);\n       bcopy (fname, fcopy, p - fname);\n       fcopy[p-fname] = '\\0';\n "}, {"sha": "4ab043d21582b7cf8bf20dff51497047f2afafd4", "filename": "gcc/cppspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7553be55ad4e48cfbd36b896947104d763b5696/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=e7553be55ad4e48cfbd36b896947104d763b5696", "patch": "@@ -194,7 +194,7 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n   if (new_argc == argc)\n     return;\n \n-  new_argv = xmalloc (new_argc * sizeof(char *));\n+  new_argv = (char **) xmalloc (new_argc * sizeof(char *));\n \n   new_argv[0] = argv[0];\n   j = 1;"}]}