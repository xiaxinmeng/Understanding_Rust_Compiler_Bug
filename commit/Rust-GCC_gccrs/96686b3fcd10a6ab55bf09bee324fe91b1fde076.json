{"sha": "96686b3fcd10a6ab55bf09bee324fe91b1fde076", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2ODZiM2ZjZDEwYTZhYjU1YmYwOWJlZTMyNGZlOTFiMWZkZTA3Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-17T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-17T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "7d808567e65d7093f246dea7967827c3b9a40daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d808567e65d7093f246dea7967827c3b9a40daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96686b3fcd10a6ab55bf09bee324fe91b1fde076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96686b3fcd10a6ab55bf09bee324fe91b1fde076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96686b3fcd10a6ab55bf09bee324fe91b1fde076", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96686b3fcd10a6ab55bf09bee324fe91b1fde076/comments", "author": null, "committer": null, "parents": [{"sha": "84c5396d4bdbf9f1d628c77db4421808f9a9dcb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c5396d4bdbf9f1d628c77db4421808f9a9dcb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c5396d4bdbf9f1d628c77db4421808f9a9dcb6"}], "stats": {"total": 441, "additions": 440, "deletions": 1}, "files": [{"sha": "518fc7cebd2ad93307dfe0ccb5d627a94bb66761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,82 @@\n+2020-07-16  Hans-Peter Nilsson  <hp@axis.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/93372\n+\t* combine.c (is_just_move): Take an rtx_insn* as argument.  Use\n+\tsingle_set on it.\n+\n+2020-07-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/96189\n+\t* config/i386/sync.md\n+\t(peephole2 to remove unneded compare after CMPXCHG):\n+\tNew pattern, also handle XOR zeroing and load of -1 by OR.\n+\n+2020-07-16  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* config/i386/i386.c (ix86_compute_frame_layout): Minor tweak.\n+\t(ix86_adjust_stack_and_probe): Delete.\n+\t(ix86_adjust_stack_and_probe_stack_clash): Rename to above and add\n+\tPROTECTION_AREA parameter.  If it is true, probe PROBE_INTERVAL plus\n+\ta small dope beyond SIZE bytes.\n+\t(ix86_emit_probe_stack_range): Use local variable.\n+\t(ix86_expand_prologue): Adjust calls to ix86_adjust_stack_and_probe\n+\tand tidy up the stack checking code.\n+\t* explow.c (get_stack_check_protect): Fix head comment.\n+\t(anti_adjust_stack_and_probe_stack_clash): Likewise.\n+\t(allocate_dynamic_stack_space): Add comment.\n+\t* tree-nested.c (lookup_field_for_decl): Set the DECL_IGNORED_P and\n+\tTREE_NO_WARNING but not TREE_ADDRESSABLE flags on the field.\n+\n+2020-07-16  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.c: Include simple-object.h and elf.h.\n+\t(EM_AMDGPU): New macro.\n+\t(ELFOSABI_AMDGPU_HSA): New macro.\n+\t(ELFABIVERSION_AMDGPU_HSA): New macro.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX803): New macro.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX900): New macro.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX906): New macro.\n+\t(R_AMDGPU_NONE): New macro.\n+\t(R_AMDGPU_ABS32_LO): New macro.\n+\t(R_AMDGPU_ABS32_HI): New macro.\n+\t(R_AMDGPU_ABS64): New macro.\n+\t(R_AMDGPU_REL32): New macro.\n+\t(R_AMDGPU_REL64): New macro.\n+\t(R_AMDGPU_ABS32): New macro.\n+\t(R_AMDGPU_GOTPCREL): New macro.\n+\t(R_AMDGPU_GOTPCREL32_LO): New macro.\n+\t(R_AMDGPU_GOTPCREL32_HI): New macro.\n+\t(R_AMDGPU_REL32_LO): New macro.\n+\t(R_AMDGPU_REL32_HI): New macro.\n+\t(reserved): New macro.\n+\t(R_AMDGPU_RELATIVE64): New macro.\n+\t(gcn_s1_name): Delete global variable.\n+\t(gcn_s2_name): Delete global variable.\n+\t(gcn_o_name): Delete global variable.\n+\t(gcn_cfile_name): Delete global variable.\n+\t(files_to_cleanup): New global variable.\n+\t(offload_abi): New global variable.\n+\t(tool_cleanup): Use files_to_cleanup, not explicit list.\n+\t(copy_early_debug_info): New function.\n+\t(main): New local variables gcn_s1_name, gcn_s2_name, gcn_o_name,\n+\tgcn_cfile_name.\n+\tCreate files_to_cleanup obstack.\n+\tRecognize -march options.\n+\tCopy early debug info from input .o files.\n+\n+2020-07-16  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* Makefile.in (TAGS): Remove 'params.def'.\n+\n+2020-07-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* target.def (TARGET_TRULY_NOOP_TRUNCATION): Clarify that\n+\ttargets that return false, indicating SUBREGs shouldn't be\n+\tused, also need to provide a trunc?i?i2 optab that performs this\n+\ttruncation.\n+\t* doc/tm.texi: Regenerate.\n+\n 2020-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/96189"}, {"sha": "9e40331a3cc4f71e73cddea6104353cf9391d281", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1 +1 @@\n-20200716\n+20200717"}, {"sha": "e690700bfb54a1d647c0e99ab605c95395095666", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,254 @@\n+2020-07-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Full_Type_Declaration): Ensure a _master\n+\tdeclaration on limited types that might have tasks.\n+\t* exp_ch9.adb (Build_Master_Renaming): For private types, if we\n+\tare processing declarations in the private part, ensure that\n+\tmaster is inserted before its full declaration; otherwise the\n+\tmaster renaming may be inserted in the public part of the\n+\tpackage (and hence before the declaration of its _master\n+\tvariable).\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): A renames-as-body\n+\tfreezes the expression of any expression function that it\n+\trenames.\n+\n+2020-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Container_Aggregate): Add semantic\n+\tchecks for indexed aggregates, including component associations\n+\tand iterated component associations.\n+\t* exp_aggr.adb (Expand_Iterated_Component): New subprogram,\n+\tsubsidiary of Expand_Container_Aggreggate, used for positional,\n+\tnamed, and indexed aggregates.\n+\t(Aggregate_Size): New subprogram to precompute the size of an\n+\tindexed aggregate prior to call to allocate it.\n+\t(Expand_Range_Component): New subprogram so generate loop for a\n+\tcomponent association given by a range or a subtype name in an\n+\tindexed aggregate.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-diagnostics.adb (Output_Invocation_Related_Suggestions):\n+\tUse Cumulative_Restrictions.Set, because Restriction_Active only\n+\tworks at compile time.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* gnatbind.adb (Gnatbind): For No_Tasks_Unassigned_To_CPU, check\n+\tthat CPU has been set on the main subprogram.\n+\t(Restriction_Could_Be_Set): Don't print\n+\tNo_Tasks_Unassigned_To_CPU if it would violate the\n+\tabove-mentioned rule. Up to now, all restrictions were checked\n+\tby the compiler, with the binder just checking for consistency.\n+\tBut the compiler can't know which subprogram is the main, so\n+\tit's impossible to check this one at compile time.\n+\t* restrict.ads, restrict.adb: Misc refactoring. Change Warning\n+\tto Warn, for consistency, since most already use Warn.\n+\t(Set_Restriction): New convenience routine.\n+\t* sem_ch13.adb (Attribute_CPU): Check\n+\tNo_Tasks_Unassigned_To_CPU.\n+\t* sem_prag.adb (Pragma_CPU): Check No_Tasks_Unassigned_To_CPU.\n+\tMisc refactoring.\n+\t* tbuild.ads, tbuild.adb (Sel_Comp): New functions for building\n+\tselected components.\n+\n+2020-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* impunit.adb (Non_Imp_File_Names_95): Remove duplicate entry.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: replace a-numaux__x86.ads by\n+\ta-numaux__libc-x86.ads and a-numaux__x86.adb by\n+\ta-numaux__dummy.adb.\n+\t* libgnat/a-numaux__x86.ads, libgnat/a-numaux__x86.adb: Removed.\n+\t* libgnat/a-numaux__dummy.adb: New.\n+\n+2020-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Load_Parent_Of_Generic): If an ancestor is an\n+\tinstance whose source appears within a formal package of the\n+\tcurrent unit, there is no body of the ancestor needed to\n+\tcomplete the current generic compilation.\n+\n+2020-07-16  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-thread__ae653.adb (taskVarAdd): Defunct, so remove.\n+\t(Current_ATSD):  Make it a TLS variable.\n+\t(OK): Move to package scope.\n+\t(System.Storage_Elements): Import and Use.\n+\n+2020-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Accept_Statement): Set Parent of the\n+\tcreated block entity to the created block statement.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* scng.adb (Scan): Detect wide characters not in NFKC.\n+\t* libgnat/a-chahan.adb, libgnat/a-chahan.ads,\n+\tlibgnat/a-wichha.adb, libgnat/a-wichha.ads,\n+\tlibgnat/a-wichun.adb, libgnat/a-wichun.ads,\n+\tlibgnat/a-zchhan.adb, libgnat/a-zchhan.ads,\n+\tlibgnat/a-zchuni.adb, libgnat/a-zchuni.ads (Is_NFKC): New.\n+\t* libgnat/s-utf_32.ads, libgnat/s-utf_32.adb (Is_UTF_32_NFKC):\n+\tNew.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-rident.ads (Restriction_Id): Add\n+\tNo_Tasks_Unassigned_To_CPU.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_aggr.adb (Max_Aggregate_Size): Use the small size of 64\n+\twhen copying is needed (for example, for the initialization of a\n+\tlocal variable, and for assignment statements). Use the larger\n+\tsize when static allocation can be done without copying.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-rident.ads (No_Dynamic_CPU_Assignment): New\n+\trestriction. Add it to all relevant profiles.\n+\t* sem_ch13.adb (Attribute_CPU): Check No_Dynamic_CPU_Assignment\n+\trestriction.\n+\t(Attribute_CPU, Attribute_Dispatching_Domain,\n+\tAttribute_Interrupt_Priority): Remove error checks -- these are\n+\tchecked in the parser.\n+\t* sem_prag.adb (Pragma_CPU): Check No_Dynamic_CPU_Assignment\n+\trestriction.  We've got a little violation of DRY here.\n+\t* sem.ads, sem_ch3.ads: Minor comment fix.\n+\n+2020-07-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): When the prefix type is\n+\tan access type, change it to the designated type, change the\n+\tprefix to an explicit dereference, and emit a ?d? warning for\n+\tthe implicit dereference. Include a ??? comment questioning\n+\twhether this is the right context in which to perform the\n+\timplicit dereferencing.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Literal_Aspect): Ensure that the\n+\tparameter is not aliased. Minor reformatting.\n+\t* sem_util.adb (Statically_Names_Object): Update comment.\n+\n+2020-07-16  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_case.adb (Build_Choice): Set Is_Static_Expression flag.\n+\t(Lit_Of): Update specification to mention Is_Static_Expression\n+\tflag.\n+\t* sem_ch13.adb (Membership_Entry): Check for N_Others_Choice.\n+\n+2020-07-16  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Null_Exclusions_Match): New function to check\n+\tthat the null exclusions match, including in the case addressed\n+\tby this AI.\n+\t(Check_Conformance): Remove calls to Comes_From_Source\n+\twhen calling Null_Exclusions_Match. These are not\n+\tneeded, as indicated by an ancient \"???\" comment.\n+\n+2020-07-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Remove flawed test for\n+\twhether \"statically deeper\" accessibility rules apply to a given\n+\ttarget type and instead use the new routine\n+\tStatically_Deeper_Relation_Applies.\n+\t(Statically_Deeper_Relation_Applies): Created to centralize the\n+\tcalculation of whether a target type within a conversion must\n+\thave static accessibility checks.\n+\t* sem_ch13.adb (Check_One_Function): Minor comment revision.\n+\n+2020-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Is_OK_Static_Expression): Delete.\n+\t* sem_eval.ads (Is_OK_Static_Expression): Remove WARNING note.\n+\n+2020-07-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* einfo.adb, einfo.ads (Is_Named_Access_Type): Created for\n+\treadability.\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Add\n+\tspecial cases for formals.\n+\t* sem_util.adb (Object_Access_Level): Add handling of access\n+\tattributes and named access types in the general case.\n+\n+2020-07-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_case.adb (Build_Choice): Simplify.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* frontend.adb: Disable Initialize_Scalars on runtime files.\n+\n+2020-07-16  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Add\n+\tComes_From_Source call.\n+\n+2020-07-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Access_To_Protected_Op): Initialize\n+\tvariable Sub to Empty to avoid false positive reported by\n+\tCodepeer.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Note_Redundant_Use): Add missing warning tag.\n+\tDo not check for redundant use clauses in predefined units to avoid\n+\tmisleading warnings that may occur as part of a rtsfind load.\n+\n+2020-07-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Has_By_Protected_Procedure_Prefixed_View): New\n+\tsubprogram.\n+\t(Expand_Access_To_Protected_Op): Adding support for prefixed\n+\tclass-wide view with By_Protected_Procedure convention.\n+\t* sem_attr.adb (Get_Convention): New subprogram.\n+\t(Get_Kind): Adapted to use Get_Convention.\n+\t* sem_ch4.adb (Try_By_Protected_Procedure_Prefixed_View): New\n+\tsubprogram.\n+\t(Analyze_Selected_Component): Invoke\n+\tTry_By_Protected_Procedure_Prefixed_View.\n+\t* sem_util.ads (Is_By_Protected_Procedure): New subprogram.\n+\t* sem_util.adb (Is_By_Protected_Procedure): New subprogram.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-ststop.ads: Fix typo.\n+\t* libgnat/s-ststop.adb (Read, Write): Fix block number\n+\tcomputation to avoid overflows in case of large strings.\n+\n+2020-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-genbig.adb (\"**\"): Remove capacity limit check.\n+\tImprove code by using an extended return.\n+\t(Normalize): Perform capacity limit check here instead which is\n+\tthe centralized place where (potentially large) big integers are\n+\tallocated.\n+\n+2020-07-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Handle the case of\n+\tapplying an invariant check for a conversion to a class-wide\n+\ttype whose root type has a type invariant, when the conversion\n+\tappears within the immediate scope of the type and the\n+\texpression is of a specific tagged type.\n+\t* sem_ch3.adb (Is_Private_Primitive): New function to determine\n+\twhether a primitive subprogram is a private operation.\n+\t(Check_Abstract_Overriding): Enforce the restriction imposed by\n+\tAI12-0042 of requiring overriding of an inherited nonabstract\n+\tprivate operation when the ancestor has a class-wide type\n+\tinvariant and the ancestor's private operation is visible.\n+\t(Derive_Subprogram): Set Requires_Overriding on a subprogram\n+\tinherited from a visible private operation of an ancestor to\n+\twhich a Type_Invariant'Class expression applies.\n+\n 2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_util.adb (Find_Overlaid_Entity): Fix style in comment."}, {"sha": "03ff6f206f1ea7b392444546f16dda7d9d940cbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,62 @@\n+2020-07-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95591\n+\tPR c++/95599\n+\tPR c++/95823\n+\tPR c++/95824\n+\tPR c++/95895\n+\t* coroutines.cc (struct coro_ret_data): Delete.\n+\t(coro_maybe_expand_co_return): Delete.\n+\t(co_return_expander): Delete.\n+\t(expand_co_returns): Delete.\n+\t(co_await_find_in_subtree): Remove unused name.\n+\t(build_actor_fn): Remove unused parm, remove handling\n+\tfor co_return expansion.\n+\t(register_await_info): Demote duplicate info message to a\n+\twarning.\n+\t(coro_make_frame_entry): Move closer to use site.\n+\t(struct susp_frame_data): Add fields for final suspend label\n+\tand a flag to indicate await expressions with initializers.\n+\t(captures_temporary): Delete.\n+\t(register_awaits): Remove unused code, update comments.\n+\t(find_any_await): New.\n+\t(tmp_target_expr_p): New.\n+\t(struct interesting): New.\n+\t(find_interesting_subtree): New.\n+\t(struct var_nest_node): New.\n+\t(flatten_await_stmt): New.\n+\t(handle_nested_conditionals): New.\n+\t(process_conditional): New.\n+\t(replace_statement_captures): Rename to...\n+\t(maybe_promote_temps): ... this.\n+\t(maybe_promote_captured_temps): Delete.\n+\t(analyze_expression_awaits): Check for await expressions with\n+\tinitializers.  Simplify handling for truth-and/or-if.\n+\t(expand_one_truth_if): Simplify (map cases that need expansion\n+\tto COND_EXPR).\n+\t(await_statement_walker): Handle CO_RETURN_EXPR. Simplify the\n+\thandling for truth-and/or-if expressions.\n+\t(register_local_var_uses): Ensure that we create names in the\n+\timplementation namespace.\n+\t(morph_fn_to_coro): Add final suspend label to suspend frame\n+\tcallback data and remove it from the build_actor_fn call.\n+\n+2020-07-16  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.c (convert_like): Remove macro and introduce a new\n+\twrapper instead.\n+\t(convert_like_with_context): Likewise.\n+\t(convert_like_real): Rename to convert_like.\n+\t(convert_like_real_1): Rename to convert_like_internal.  Call\n+\tconvert_like instead of convert_like_real therein.\n+\t(perform_direct_initialization_if_possible): Call convert_like\n+\tinstead of convert_like_real.\n+\n+2020-07-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc: Correct some spelling errors\n+\tin comments.\n+\n 2020-07-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* parser.c (cp_parser_declaration): Avoid copying tokens."}, {"sha": "1063b6bd723c7ded7068f94b3aea7a820430ae24", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,9 @@\n+2020-07-16  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Rework OpenACC\n+\tattach/detach handling for arrays with descriptors.\n+\n 2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n "}, {"sha": "1f5d762330cf699a5cc3bfbf4ebca5e57d800f27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,36 @@\n+2020-07-16  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/attach-descriptor.f90: New test.\n+\n+2020-07-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95591\n+\tPR c++/95599\n+\tPR c++/95823\n+\tPR c++/95824\n+\tPR c++/95895\n+\t* g++.dg/coroutines/pr95591.C: New test.\n+\t* g++.dg/coroutines/pr95599.C: New test.\n+\t* g++.dg/coroutines/pr95823.C: New test.\n+\t* g++.dg/coroutines/pr95824.C: New test.\n+\n+2020-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR testsuite/96014\n+\t* g++.dg/analyzer/pr94028.C: Replace dynamic exception\n+\tspecification with noexcept-specifier for C++11 and later.\n+\n+2020-07-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/96189\n+\t* gcc.target/i386/pr96189-1.c: New test.\n+\n+2020-07-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 188\n+\t* g++.dg/DRs/dr188.C: New test.\n+\n 2020-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/96189"}, {"sha": "50c16a140cad3f1a21f4300520f0c5ac518665fa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,9 @@\n+2020-07-16  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/attach-descriptor-2.f90: New test.\n+\n 2020-07-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/alloc-1.F90: Use c_size_t to"}, {"sha": "145cc687ce1c0dc765ee05a1962311af6bb17337", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96686b3fcd10a6ab55bf09bee324fe91b1fde076/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96686b3fcd10a6ab55bf09bee324fe91b1fde076/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=96686b3fcd10a6ab55bf09bee324fe91b1fde076", "patch": "@@ -1,3 +1,8 @@\n+2020-07-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* sanitizer_common/sanitizer_linux.cpp: Cherry-pick llvm-project\n+\trevision f0e9b76c3500496f8f3ea7abe6f4bf801e3b41e7.\n+\n 2020-06-09  Martin Liska  <mliska@suse.cz>\n \n \t* asan/Makefile.am: Replace gnu++11 with gnu++14."}]}