{"sha": "fd43603414a9b7bdbac5a822af144dcd559733eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0MzYwMzQxNGE5YjdiZGJhYzVhODIyYWYxNDRkY2Q1NTk3MzNlYg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-02T12:20:02Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-14T10:47:29Z"}, "message": "arm: Auto-vectorization for MVE: vmvn\n\nThis patch enables MVE vmvnq instructions for auto-vectorization.  MVE\nvmvnq insns in mve.md are modified to use 'not' instead of unspec\nexpression to support one_cmpl<mode>2.  The one_cmpl<mode>2 expander\nis added to vec-common.md.\n\n2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (VDQNOTM2): New mode iterator.\n\t(supf): Remove VMVNQ_S and VMVNQ_U.\n\t(VMVNQ): Remove.\n\t* config/arm/mve.md (mve_vmvnq_u<mode>): New entry for vmvn\n\tinstruction using expression not.\n\t(mve_vmvnq_s<mode>): New expander.\n\t* config/arm/neon.md (one_cmpl<mode>2): Renamed into\n\tone_cmpl<mode>2_neon.\n\t* config/arm/unspecs.md (VMVNQ_S, VMVNQ_U): Remove.\n\t* config/arm/vec-common.md (one_cmpl<mode>2): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vmvn.c: Add tests for vmvn.", "tree": {"sha": "edf2a306554388a1828200197fa8606e7f58faa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf2a306554388a1828200197fa8606e7f58faa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd43603414a9b7bdbac5a822af144dcd559733eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd43603414a9b7bdbac5a822af144dcd559733eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd43603414a9b7bdbac5a822af144dcd559733eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd43603414a9b7bdbac5a822af144dcd559733eb/comments", "author": null, "committer": null, "parents": [{"sha": "5391cf07be7117c2df605acbfad31a4f9c6b7a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391cf07be7117c2df605acbfad31a4f9c6b7a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5391cf07be7117c2df605acbfad31a4f9c6b7a65"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "036a939e2ee758abede76485cdd4946894993111", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -1216,7 +1216,7 @@\n (define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\") (VREV16Q_S \"s\")\n \t\t       (VREV16Q_U \"u\") (VMVNQ_N_S \"s\") (VMVNQ_N_U \"u\")\n \t\t       (VCVTAQ_U \"u\") (VCVTAQ_S \"s\") (VREV64Q_S \"s\")\n-\t\t       (VREV64Q_U \"u\") (VMVNQ_S \"s\") (VMVNQ_U \"u\")\n+\t\t       (VREV64Q_U \"u\")\n \t\t       (VDUPQ_N_U \"u\") (VDUPQ_N_S\"s\") (VADDVQ_S \"s\")\n \t\t       (VADDVQ_U \"u\") (VADDVQ_S \"s\") (VADDVQ_U \"u\")\n \t\t       (VMOVLTQ_U \"u\") (VMOVLTQ_S \"s\") (VMOVLBQ_S \"s\")\n@@ -1476,7 +1476,6 @@\n (define_int_iterator VCVTQ_FROM_F [VCVTQ_FROM_F_S VCVTQ_FROM_F_U])\n (define_int_iterator VREV16Q [VREV16Q_U VREV16Q_S])\n (define_int_iterator VCVTAQ [VCVTAQ_U VCVTAQ_S])\n-(define_int_iterator VMVNQ [VMVNQ_U VMVNQ_S])\n (define_int_iterator VDUPQ_N [VDUPQ_N_U VDUPQ_N_S])\n (define_int_iterator VCLZQ [VCLZQ_U VCLZQ_S])\n (define_int_iterator VADDVQ [VADDVQ_U VADDVQ_S])"}, {"sha": "86d7fc64763a6089e8ccdcc7afdd7a5801b588f8", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -433,16 +433,22 @@\n ;;\n ;; [vmvnq_u, vmvnq_s])\n ;;\n-(define_insn \"mve_vmvnq_<supf><mode>\"\n+(define_insn \"mve_vmvnq_u<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n-\t VMVNQ))\n+\t(not:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vmvn %q0, %q1\"\n+  \"vmvn\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+(define_expand \"mve_vmvnq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(not:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n \n ;;\n ;; [vdupq_n_u, vdupq_n_s])"}, {"sha": "f58d4f5479c3472a33c86962a21a8e1ad0f42df5", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -756,7 +756,7 @@\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n-(define_insn \"one_cmpl<mode>2\"\n+(define_insn \"one_cmpl<mode>2_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (not:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\"\n@@ -3240,7 +3240,7 @@\n    (match_operand:VDQIW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  emit_insn (gen_one_cmpl<mode>2 (operands[0], operands[1]));\n+  emit_insn (gen_one_cmpl<mode>2_neon (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "e5816459f12e82123a59b8a571c290e2c750c2ec", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -550,8 +550,6 @@\n   VREV64Q_U\n   VQABSQ_S\n   VNEGQ_S\n-  VMVNQ_S\n-  VMVNQ_U\n   VDUPQ_N_U\n   VDUPQ_N_S\n   VCLZQ_U"}, {"sha": "37ff518fc4e72379415d11f8741303da91b0aedb", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -193,3 +193,9 @@\n \t\t (match_operand:VDQ 2 \"s_register_operand\" \"\")))]\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n+\n+(define_expand \"one_cmpl<mode>2\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\")\n+\t(not:VDQ (match_operand:VDQ 1 \"s_register_operand\")))]\n+  \"ARM_HAVE_<MODE>_ARITH\"\n+)"}, {"sha": "73e897a62452c4b0d8a940c70cfe445f961d51b7", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vmvn.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd43603414a9b7bdbac5a822af144dcd559733eb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmvn.c?ref=fd43603414a9b7bdbac5a822af144dcd559733eb", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = OP a[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* vmnvq supports only 16-bit and 32-bit elements.  */\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, ~, vmvn)\n+FUNC(u, uint, 32, 2, ~, vmvn)\n+FUNC(s, int, 16, 4, ~, vmvn)\n+FUNC(u, uint, 16, 4, ~, vmvn)\n+FUNC(s, int, 8, 8, ~, vmvn)\n+FUNC(u, uint, 8, 8, ~, vmvn)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, ~, vmvn)\n+FUNC(u, uint, 32, 4, ~, vmvn)\n+FUNC(s, int, 16, 8, ~, vmvn)\n+FUNC(u, uint, 16, 8, ~, vmvn)\n+FUNC(s, int, 8, 16, ~, vmvn)\n+FUNC(u, uint, 8, 16, ~, vmvn)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* { dg-final { scan-assembler-times {vmvn\\tq[0-9]+, q[0-9]+} 6 } } */"}]}