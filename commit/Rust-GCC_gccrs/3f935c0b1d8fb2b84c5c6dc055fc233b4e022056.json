{"sha": "3f935c0b1d8fb2b84c5c6dc055fc233b4e022056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y5MzVjMGIxZDhmYjJiODRjNWM2ZGMwNTVmYzIzM2I0ZTAyMjA1Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-01-10T03:30:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-01-10T03:30:24Z"}, "message": "* pa.md (special indexed fpstores): Fix assorted typos.\n\nFrom-SVN: r6363", "tree": {"sha": "b44b0ec5c934d6854741ed0edc2fff9f56065b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44b0ec5c934d6854741ed0edc2fff9f56065b9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056/comments", "author": null, "committer": null, "parents": [{"sha": "609f7031f2bfc6dd3ffbb37e75c72305fdfb2200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609f7031f2bfc6dd3ffbb37e75c72305fdfb2200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609f7031f2bfc6dd3ffbb37e75c72305fdfb2200"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "c3d7f11bed231654f6d2d21d821b6f6dc91173ef", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f935c0b1d8fb2b84c5c6dc055fc233b4e022056/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3f935c0b1d8fb2b84c5c6dc055fc233b4e022056", "patch": "@@ -1027,6 +1027,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"&=r\")\n \t(mem:SI (plus:SI (plus:SI\n@@ -1258,6 +1263,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n \t(mem:HI (plus:SI (plus:SI\n@@ -1473,6 +1483,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n ;; Ugh. Output is a FP register; so we need to earlyclobber something\n ;; else as a temporary.\n (define_insn \"\"\n@@ -1507,6 +1522,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n ;; Ugh. Output is a FP register; so we need to earlyclobber something\n ;; else as a temporary.\n (define_insn \"\"\n@@ -1516,14 +1536,14 @@\n \t\t\t      (const_int 8))\n \t\t     (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t  (match_operand:SI 3 \"const_int_operand\" \"rL\")))\n-\t(match_operand:DF 0 \"register_operand\" \"=fx\"))]\n+\t(match_operand:DF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && reload_in_progress\"\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh3add %1,%2,%1\\;fstds %3(0,%1),%0\\\";\n+    return \\\"sh3add %1,%2,%1\\;fstds %0,%3(0,%1)\\\";\n   else\n-    return \\\"sh3add %1,%2,%1\\;fstdx %3(0,%1),%0\\\";\n+    return \\\"sh3add %1,%2,%1\\;fstdx %0,%3(0,%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"8\")])\n@@ -1703,6 +1723,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n ;; Ugh. Output is a FP register; so we need to earlyclobber something\n ;; else as a temporary.\n (define_insn \"\"\n@@ -1737,6 +1762,11 @@\n ;; This variant of the above insn can occur if the second operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n ;; Ugh. Output is a FP register; so we need to earlyclobber something\n ;; else as a temporary.\n (define_insn \"\"\n@@ -1746,14 +1776,14 @@\n \t\t\t      (const_int 4))\n \t\t     (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t  (match_operand:SI 3 \"const_int_operand\" \"rL\")))\n-\t(match_operand:SF 0 \"register_operand\" \"=fx\"))]\n+\t(match_operand:SF 0 \"register_operand\" \"fx\"))]\n   \"! TARGET_DISABLE_INDEXING && reload_in_progress\"\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"sh2add %1,%2,%1\\;fstds %3(0,%1),%0\\\";\n+    return \\\"sh2add %1,%2,%1\\;fstws %0,%3(0,%1)\\\";\n   else\n-    return \\\"sh2add %1,%2,%1\\;fstdx %3(0,%1),%0\\\";\n+    return \\\"sh2add %1,%2,%1\\;fstwx %0,%3(0,%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"8\")])\n@@ -2589,6 +2619,11 @@\n ;; This variant of the above insn can occur if the first operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")"}]}