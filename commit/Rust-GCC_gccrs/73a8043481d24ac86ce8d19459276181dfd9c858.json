{"sha": "73a8043481d24ac86ce8d19459276181dfd9c858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhODA0MzQ4MWQyNGFjODZjZThkMTk0NTkyNzYxODFkZmQ5Yzg1OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T08:57:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T08:57:46Z"}, "message": "match.pd: Move (X & C) eqne (Y & C) -> -> (X ^ Y) & C eqne 0 opt to match.pd [PR94718]\n\nThis patch moves this optimization from fold-const.c to match.pd where it\nis actually much shorter to do and lets optimize even code not seen together\nin a single expression in the source, as the first step towards fixing the\nPR.\n\n2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94718\n\t* fold-const.c (fold_binary_loc): Move (X & C) eqne (Y & C)\n\t-> (X ^ Y) & C eqne 0 optimization to ...\n\t* match.pd ((X & C) op (Y & C) into (X ^ Y) & C op 0): ... here.\n\n\t* gcc.dg/tree-ssa/pr94718-1.c: New test.\n\t* gcc.dg/tree-ssa/pr94718-2.c: New test.", "tree": {"sha": "7a8030878e93027d910a55ad8a1025996e207b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a8030878e93027d910a55ad8a1025996e207b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a8043481d24ac86ce8d19459276181dfd9c858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a8043481d24ac86ce8d19459276181dfd9c858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a8043481d24ac86ce8d19459276181dfd9c858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a8043481d24ac86ce8d19459276181dfd9c858/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efaffc6997f33f663f887f63c72e589d4318f902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efaffc6997f33f663f887f63c72e589d4318f902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efaffc6997f33f663f887f63c72e589d4318f902"}], "stats": {"total": 160, "additions": 115, "deletions": 45}, "files": [{"sha": "47eef982a59f27bb7e76de9ed0e319f76c77ad89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -1,5 +1,10 @@\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94718\n+\t* fold-const.c (fold_binary_loc): Move (X & C) eqne (Y & C)\n+\t-> (X ^ Y) & C eqne 0 optimization to ...\n+\t* match.pd ((X & C) op (Y & C) into (X ^ Y) & C op 0): ... here.\n+\n \t* opts.c (get_option_html_page): Instead of hardcoding a list of\n \toptions common between C/C++ and Fortran only use gfortran/\n \tdocumentation for warnings that have CL_Fortran set but not"}, {"sha": "f054871746cd79c97a56b99cf36fe988a0738ba0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -11631,50 +11631,6 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t  return omit_one_operand_loc (loc, type, res, arg0);\n \t}\n \n-      /* Fold (X & C) op (Y & C) as (X ^ Y) & C op 0\", and symmetries.  */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && TREE_CODE (arg1) == BIT_AND_EXPR)\n-\t{\n-\t  tree arg00 = TREE_OPERAND (arg0, 0);\n-\t  tree arg01 = TREE_OPERAND (arg0, 1);\n-\t  tree arg10 = TREE_OPERAND (arg1, 0);\n-\t  tree arg11 = TREE_OPERAND (arg1, 1);\n-\t  tree itype = TREE_TYPE (arg0);\n-\n-\t  if (operand_equal_p (arg01, arg11, 0))\n-\t    {\n-\t      tem = fold_convert_loc (loc, itype, arg10);\n-\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg00, tem);\n-\t      tem = fold_build2_loc (loc, BIT_AND_EXPR, itype, tem, arg01);\n-\t      return fold_build2_loc (loc, code, type, tem,\n-\t\t\t\t      build_zero_cst (itype));\n-\t    }\n-\t  if (operand_equal_p (arg01, arg10, 0))\n-\t    {\n-\t      tem = fold_convert_loc (loc, itype, arg11);\n-\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg00, tem);\n-\t      tem = fold_build2_loc (loc, BIT_AND_EXPR, itype, tem, arg01);\n-\t      return fold_build2_loc (loc, code, type, tem,\n-\t\t\t\t      build_zero_cst (itype));\n-\t    }\n-\t  if (operand_equal_p (arg00, arg11, 0))\n-\t    {\n-\t      tem = fold_convert_loc (loc, itype, arg10);\n-\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg01, tem);\n-\t      tem = fold_build2_loc (loc, BIT_AND_EXPR, itype, tem, arg00);\n-\t      return fold_build2_loc (loc, code, type, tem,\n-\t\t\t\t      build_zero_cst (itype));\n-\t    }\n-\t  if (operand_equal_p (arg00, arg10, 0))\n-\t    {\n-\t      tem = fold_convert_loc (loc, itype, arg11);\n-\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg01, tem);\n-\t      tem = fold_build2_loc (loc, BIT_AND_EXPR, itype, tem, arg00);\n-\t      return fold_build2_loc (loc, code, type, tem,\n-\t\t\t\t      build_zero_cst (itype));\n-\t    }\n-\t}\n-\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && TREE_CODE (arg1) == BIT_XOR_EXPR)\n \t{"}, {"sha": "123e670f9eeac781e13e9b93b6c8789e84a5aa43", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -4335,7 +4335,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (cmp (convert? addr@0) integer_zerop)\n   (if (tree_single_nonzero_warnv_p (@0, NULL))\n-   { constant_boolean_node (cmp == NE_EXPR, type); })))\n+   { constant_boolean_node (cmp == NE_EXPR, type); }))\n+\n+ /* (X & C) op (Y & C) into (X ^ Y) & C op 0.  */\n+ (simplify\n+  (cmp (bit_and:cs @0 @2) (bit_and:cs @1 @2))\n+  (cmp (bit_and (bit_xor @0 @1) @2) { build_zero_cst (TREE_TYPE (@2)); })))\n \n /* If we have (A & C) == C where C is a power of 2, convert this into\n    (A & C) != 0.  Similarly for NE_EXPR.  */"}, {"sha": "100870acedb458a2ff9a4430b2ae43544af36dbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -1,3 +1,9 @@\n+2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94718\n+\t* gcc.dg/tree-ssa/pr94718-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr94718-2.c: New test.\n+\n 2020-05-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/limited1_inner.adb (Finalize): Use 'Unrestricted_Access."}, {"sha": "510eec815ebf9d3772342be55737caa1986d8439", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94718-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-1.c?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -0,0 +1,49 @@\n+/* PR tree-optimization/94718 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\[xy]_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ \\[xy]_\\[0-9]+\\\\\\(D\\\\\\);\" 6 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[0-9]+ < 0;\" 6 \"optimized\" } } */\n+\n+#define I (-__INT_MAX__ - 1)\n+\n+int\n+f1 (int x, int y)\n+{\n+  return (x & I) != (y & I);\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  return (~x & I) != (~y & I);\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  return ((x & I) ^ I) != ((y & I) ^ I);\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  int s = (x & I);\n+  int t = (y & I);\n+  return s != t;\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  int s = (~x & I);\n+  int t = (~y & I);\n+  return s != t;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  int s = ((x & I) ^ I);\n+  int t = ((y & I) ^ I);\n+  return s != t;\n+}"}, {"sha": "15a3d7453342fa4af190060c3217f387bc330be4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94718-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8043481d24ac86ce8d19459276181dfd9c858/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-2.c?ref=73a8043481d24ac86ce8d19459276181dfd9c858", "patch": "@@ -0,0 +1,49 @@\n+/* PR tree-optimization/94718 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\[xy]_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ \\[xy]_\\[0-9]+\\\\\\(D\\\\\\);\" 6 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[0-9]+ >= 0;\" 6 \"optimized\" } } */\n+\n+#define I (-__INT_MAX__ - 1)\n+\n+int\n+f1 (int x, int y)\n+{\n+  return (x & I) == (y & I);\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  return (~x & I) == (~y & I);\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  return ((x & I) ^ I) == ((y & I) ^ I);\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  int s = (x & I);\n+  int t = (y & I);\n+  return s == t;\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  int s = (~x & I);\n+  int t = (~y & I);\n+  return s == t;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  int s = ((x & I) ^ I);\n+  int t = ((y & I) ^ I);\n+  return s == t;\n+}"}]}