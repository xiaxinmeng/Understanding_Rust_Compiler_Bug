{"sha": "b2aa75ded65f8c0293d73371e1660e7aeebb1eb6", "node_id": "C_kwDOANBUbNoAKGIyYWE3NWRlZDY1ZjhjMDI5M2Q3MzM3MWUxNjYwZTdhZWViYjFlYjY", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2022-11-30T18:40:10Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2022-11-30T18:40:10Z"}, "message": "Fix addvdi3 and subvdi3 patterns\n\nWhile most PA 2.0 instructions support both 32 and 64-bit traps\nand conditions, the addi and subi instructions only support 32-bit\ntraps and conditions. Thus, we need to force immediate operands\nto register operands on the 64-bit target and use the add/sub\ninstructions which can trap on 64-bit signed overflow.\n\n2022-11-30  John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog:\n\n\t* config/pa/pa.md (addvdi3): Force operand 2 to a register.\n\tRemove \"addi,tsv,*\" instruction from unamed pattern.\n\t(subvdi3): Force operand 1 to a register.\n\tRemove \"subi,tsv\" instruction from from unamed pattern.", "tree": {"sha": "80d9d6948e20adf6ddfc16dc89a216eb0bb54475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d9d6948e20adf6ddfc16dc89a216eb0bb54475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6/comments", "author": null, "committer": null, "parents": [{"sha": "cbdffae5745327b0e5eb887afc512daf34b049b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdffae5745327b0e5eb887afc512daf34b049b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdffae5745327b0e5eb887afc512daf34b049b1"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "41382271e54a61b5e6d02bfc6943741d656924d9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2aa75ded65f8c0293d73371e1660e7aeebb1eb6/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=b2aa75ded65f8c0293d73371e1660e7aeebb1eb6", "patch": "@@ -5071,23 +5071,25 @@\n \t\t\t\t\t\t    (match_dup 2))))\n \t\t       (const_int 0))])]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if (TARGET_64BIT)\n+    operands[2] = force_reg (DImode, operands[2]);\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rM,rM\")\n-\t\t (match_operand:DI 2 \"arith11_operand\" \"r,I\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rM\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"r\")))\n    (trap_if (ne (plus:TI (sign_extend:TI (match_dup 1))\n \t\t\t (sign_extend:TI (match_dup 2)))\n \t\t(sign_extend:TI (plus:DI (match_dup 1)\n \t\t\t\t\t (match_dup 2))))\n \t    (const_int 0))]\n   \"TARGET_64BIT\"\n-  \"@\n-  add,tsv,* %2,%1,%0\n-  addi,tsv,* %2,%1,%0\"\n-  [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"4,4\")])\n+  \"add,tsv,* %2,%1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5262,23 +5264,25 @@\n \t\t\t\t\t\t     (match_dup 2))))\n \t\t       (const_int 0))])]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if (TARGET_64BIT)\n+    operands[1] = force_reg (DImode, operands[1]);\n+}\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I\")\n-\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM,rM\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM\")))\n    (trap_if (ne (minus:TI (sign_extend:TI (match_dup 1))\n \t\t\t  (sign_extend:TI (match_dup 2)))\n \t\t(sign_extend:TI (minus:DI (match_dup 1)\n \t\t\t\t\t  (match_dup 2))))\n \t    (const_int 0))]\n   \"TARGET_64BIT\"\n-  \"@\n-  {subo|sub,tsv} %1,%2,%0\n-  {subio|subi,tsv} %1,%2,%0\"\n-  [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"4,4\")])\n+  \"sub,tsv,* %1,%2,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,&r\")"}]}