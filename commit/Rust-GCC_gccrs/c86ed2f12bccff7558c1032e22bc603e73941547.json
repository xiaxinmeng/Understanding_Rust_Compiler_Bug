{"sha": "c86ed2f12bccff7558c1032e22bc603e73941547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2ZWQyZjEyYmNjZmY3NTU4YzEwMzJlMjJiYzYwM2U3Mzk0MTU0Nw==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2018-05-14T08:51:51Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2018-05-14T08:51:51Z"}, "message": "gcc_qsort: avoid oversized memcpy temporaries\n\n\t* sort.cc (REORDER_23): Pass the type for the temporaries instead of\n\tintended memcpy size.\n\t(REORDER_45): Likewise.\n\nFrom-SVN: r260222", "tree": {"sha": "1996c15cb9d81b639c81a6cea57abe08c1eca27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1996c15cb9d81b639c81a6cea57abe08c1eca27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c86ed2f12bccff7558c1032e22bc603e73941547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86ed2f12bccff7558c1032e22bc603e73941547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86ed2f12bccff7558c1032e22bc603e73941547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86ed2f12bccff7558c1032e22bc603e73941547/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfbd17d53edf1b8a84bdabdaef30a5833123d056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbd17d53edf1b8a84bdabdaef30a5833123d056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbd17d53edf1b8a84bdabdaef30a5833123d056"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "edf2e41e2349340b20040775e444e707908a4b72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ed2f12bccff7558c1032e22bc603e73941547/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ed2f12bccff7558c1032e22bc603e73941547/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c86ed2f12bccff7558c1032e22bc603e73941547", "patch": "@@ -1,3 +1,9 @@\n+2018-05-14  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* sort.cc (REORDER_23): Pass the type for the temporaries instead of\n+\tintended memcpy size.\n+\t(REORDER_45): Likewise.\n+\n 2018-05-13  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* sort.cc: New file."}, {"sha": "a48a477d4e8c17e42599e8c77c594bbeef5352cf", "filename": "gcc/sort.cc", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ed2f12bccff7558c1032e22bc603e73941547/gcc%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ed2f12bccff7558c1032e22bc603e73941547/gcc%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsort.cc?ref=c86ed2f12bccff7558c1032e22bc603e73941547", "patch": "@@ -62,63 +62,63 @@ struct sort_ctx\n static void\n reorder23 (sort_ctx *c, char *e0, char *e1, char *e2)\n {\n-#define REORDER_23(SIZE, STRIDE, OFFSET)        \\\n-do {                                            \\\n-  size_t t0, t1;                                \\\n-  memcpy (&t0, e0 + OFFSET, SIZE);              \\\n-  memcpy (&t1, e1 + OFFSET, SIZE);              \\\n-  char *out = c->out + OFFSET;                  \\\n-  if (likely (c->n == 3))                       \\\n-    memcpy (out + 2*STRIDE, e2 + OFFSET, SIZE); \\\n-  memcpy (out, &t0, SIZE); out += STRIDE;       \\\n-  memcpy (out, &t1, SIZE);                      \\\n+#define REORDER_23(TYPE, STRIDE, OFFSET)                 \\\n+do {                                                     \\\n+  TYPE t0, t1;                                           \\\n+  memcpy (&t0, e0 + OFFSET, sizeof (TYPE));              \\\n+  memcpy (&t1, e1 + OFFSET, sizeof (TYPE));              \\\n+  char *out = c->out + OFFSET;                           \\\n+  if (likely (c->n == 3))                                \\\n+    memcpy (out + 2*STRIDE, e2 + OFFSET, sizeof (TYPE)); \\\n+  memcpy (out, &t0, sizeof (TYPE)); out += STRIDE;       \\\n+  memcpy (out, &t1, sizeof (TYPE));                      \\\n } while (0)\n \n-  if (sizeof (size_t) == 8 && likely (c->size == 8))\n-    REORDER_23 (8, 8, 0);\n-  else if (likely (c->size == 4))\n-    REORDER_23 (4, 4, 0);\n+  if (likely (c->size == sizeof (size_t)))\n+    REORDER_23 (size_t, sizeof (size_t), 0);\n+  else if (likely (c->size == sizeof (int)))\n+    REORDER_23 (int, sizeof (int), 0);\n   else\n     {\n       size_t offset = 0, step = sizeof (size_t);\n       for (; offset + step <= c->size; offset += step)\n-\tREORDER_23 (step, c->size, offset);\n+\tREORDER_23 (size_t, c->size, offset);\n       for (; offset < c->size; offset++)\n-\tREORDER_23 (1, c->size, offset);\n+\tREORDER_23 (char, c->size, offset);\n     }\n }\n \n /* Like reorder23, but permute 4 or 5 elements.  */\n static void\n reorder45 (sort_ctx *c, char *e0, char *e1, char *e2, char *e3, char *e4)\n {\n-#define REORDER_45(SIZE, STRIDE, OFFSET)        \\\n-do {                                            \\\n-  size_t t0, t1, t2, t3;                        \\\n-  memcpy (&t0, e0 + OFFSET, SIZE);              \\\n-  memcpy (&t1, e1 + OFFSET, SIZE);              \\\n-  memcpy (&t2, e2 + OFFSET, SIZE);              \\\n-  memcpy (&t3, e3 + OFFSET, SIZE);              \\\n-  char *out = c->out + OFFSET;                  \\\n-  if (likely (c->n == 5))                       \\\n-    memcpy (out + 4*STRIDE, e4 + OFFSET, SIZE); \\\n-  memcpy (out, &t0, SIZE); out += STRIDE;       \\\n-  memcpy (out, &t1, SIZE); out += STRIDE;       \\\n-  memcpy (out, &t2, SIZE); out += STRIDE;       \\\n-  memcpy (out, &t3, SIZE);                      \\\n+#define REORDER_45(TYPE, STRIDE, OFFSET)                 \\\n+do {                                                     \\\n+  TYPE t0, t1, t2, t3;                                   \\\n+  memcpy (&t0, e0 + OFFSET, sizeof (TYPE));              \\\n+  memcpy (&t1, e1 + OFFSET, sizeof (TYPE));              \\\n+  memcpy (&t2, e2 + OFFSET, sizeof (TYPE));              \\\n+  memcpy (&t3, e3 + OFFSET, sizeof (TYPE));              \\\n+  char *out = c->out + OFFSET;                           \\\n+  if (likely (c->n == 5))                                \\\n+    memcpy (out + 4*STRIDE, e4 + OFFSET, sizeof (TYPE)); \\\n+  memcpy (out, &t0, sizeof (TYPE)); out += STRIDE;       \\\n+  memcpy (out, &t1, sizeof (TYPE)); out += STRIDE;       \\\n+  memcpy (out, &t2, sizeof (TYPE)); out += STRIDE;       \\\n+  memcpy (out, &t3, sizeof (TYPE));                      \\\n } while (0)\n \n-  if (sizeof (size_t) == 8 && likely (c->size == 8))\n-    REORDER_45 (8, 8, 0);\n-  else if (likely(c->size == 4))\n-    REORDER_45 (4, 4, 0);\n+  if (likely (c->size == sizeof (size_t)))\n+    REORDER_45 (size_t, sizeof (size_t), 0);\n+  else if (likely(c->size == sizeof (int)))\n+    REORDER_45 (int,  sizeof (int), 0);\n   else\n     {\n       size_t offset = 0, step = sizeof (size_t);\n       for (; offset + step <= c->size; offset += step)\n-\tREORDER_45 (step, c->size, offset);\n+\tREORDER_45 (size_t, c->size, offset);\n       for (; offset < c->size; offset++)\n-\tREORDER_45 (1, c->size, offset);\n+\tREORDER_45 (char, c->size, offset);\n     }\n }\n "}]}