{"sha": "b6bfa8766be24c7e4064a386aa61caca54446f40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiZmE4NzY2YmUyNGM3ZTQwNjRhMzg2YWE2MWNhY2E1NDQ0NmY0MA==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2001-12-14T12:55:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-14T12:55:07Z"}, "message": "config.gcc (alpha64-dec-*vms*): New case.\n\n\t* config.gcc (alpha64-dec-*vms*): New case.\n\t* config/alpha/t-vms64, config/alpha/vms-crt0-64.c: New files.\n\t* config/alpha/vms-psxcrt0-64.c, config/alpha/vms64.h: Likewise.\n\t* config/alpha/xm-vms64.h: Likewise.\n\nFrom-SVN: r48001", "tree": {"sha": "9c69dd730f4104dcb7fbbe0d130fbd8e0a117dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c69dd730f4104dcb7fbbe0d130fbd8e0a117dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6bfa8766be24c7e4064a386aa61caca54446f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bfa8766be24c7e4064a386aa61caca54446f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bfa8766be24c7e4064a386aa61caca54446f40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bfa8766be24c7e4064a386aa61caca54446f40/comments", "author": null, "committer": null, "parents": [{"sha": "c1bd46a8d430b61e107263387190f1677a59f526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1bd46a8d430b61e107263387190f1677a59f526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1bd46a8d430b61e107263387190f1677a59f526"}], "stats": {"total": 318, "additions": 318, "deletions": 0}, "files": [{"sha": "be8e7b46f14fde60284289dfa2bbc3a0a7d8b81d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -1,5 +1,10 @@\n Fri Dec 14 07:29:52 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n+\t* config.gcc (alpha64-dec-*vms*): New case.\n+\t* config/alpha/t-vms64, config/alpha/vms-crt0-64.c: New files.\n+\t* config/alpha/vms-psxcrt0-64.c, config/alpha/vms64.h: Likewise.\n+\t* config/alpha/xm-vms64.h: Likewise.\n+\n \t* config/alpha/alpha.c (vms_attribute_table): Add new attributes.\n \t(alpha_write_linkage): Test for null alpha_links.\n \t(SECTION_VMS_GLOBAL, SECTION_VMS_INITIALIZE): New section attributes."}, {"sha": "a98b7d51f8a6997da0653ae1cebcb08508beddb8", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -519,6 +519,23 @@ alpha*-*-vxworks*)\n \tuse_collect2=yes\n \tthread_file='vxworks'\n \t;;\n+alpha64-dec-*vms*)\n+\txm_defines=POSIX\n+\ttm_file=\"alpha/vms.h alpha/vms64.h\"\n+\txm_file=\"alpha/xm-vms.h alpha/xm-vms64.h\"\n+\ttmake_file=\"alpha/t-alpha alpha/t-vms alpha/t-vms64 alpha/t-ieee\"\n+\txmake_file=alpha/x-vms\n+\texeext=.exe\n+\t# This removes the cpu type and manufacturer components and\n+\t#  replaces \".\" with \"_\" in the operating system version.\n+\tcase $host in *-*-*vms*)\n+\t\ttarget_alias=`echo $host \\\n+\t\t  | sed 's/.*-.*-\\(.*\\)$/\\1/' | sed 's/\\./_/g'`\n+\t\t;;\n+\tesac\n+\tprefix=/gnu\n+\tlocal_prefix=/gnu\n+\t;;\n alpha*-dec-*vms*)\n \txm_defines=POSIX\n \ttm_file=alpha/vms.h"}, {"sha": "e3fc3be64359309ab93e575510a90ec7819997f8", "filename": "gcc/config/alpha/t-vms64", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Ft-vms64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Ft-vms64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms64?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -0,0 +1,8 @@\n+# Assemble startup files.\n+vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\tdecc -c /names=as_is /pointer_size=64  \\\n+\t     $(srcdir)/config/alpha/vms-crt0-64.c -o vcrt0.o\n+\n+pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\tdecc -c /names=as_is /pointer_size=64 \\\n+\t     $(srcdir)/config/alpha/vms-psxcrt0-64.c -o pcrt0.o"}, {"sha": "4120a6b4c0ff078804c63903eb3651ab2a35b53f", "filename": "gcc/config/alpha/vms-crt0-64.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -0,0 +1,99 @@\n+/* VMS 64bit crt0 returning VMS style condition codes .\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#if !defined(__DECC)\n+You Lose! This file can only be compiled with DEC C.\n+#else\n+\n+/* This file can only be compiled with DEC C, due the the call to\n+   lib$establish and the pragmas pointer_size.  */\n+\n+#pragma __pointer_size short\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <ssdef.h>\n+\n+extern void decc$main ();\n+\n+extern int main ();\n+\n+static int\n+handler (sigargs, mechargs)\n+     void *sigargs;\n+     void *mechargs;\n+{\n+  return SS$_RESIGNAL;\n+}\n+\n+int\n+__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n+     void *arg1, *arg2, *arg3;\n+     void *image_file_desc;\n+     void *arg5, *arg6;\n+{\n+  int argc;\n+  char **argv;\n+  char **envp;\n+\n+#pragma __pointer_size long\n+\n+  int i;\n+  char **long_argv;\n+  char **long_envp;\n+\n+#pragma __pointer_size short\n+\n+  lib$establish (handler);\n+  decc$main (arg1, arg2, arg3, image_file_desc,\n+\t     arg5, arg6, &argc, &argv, &envp);\n+\n+#pragma __pointer_size long\n+\n+  /* Reallocate argv with 64 bit pointers. */\n+  long_argv = (char **) malloc (sizeof (char *) * (argc + 1));\n+\n+  for (i = 0; i < argc; i++)\n+    long_argv[i] = strdup (argv[i]);\n+\n+  long_argv[argc] = (char *) 0;\n+\n+  long_envp = (char **) malloc (sizeof (char *) * 5);\n+\n+  for (i = 0; envp[i]; i++)\n+    long_envp[i] = strdup (envp[i]);\n+\n+  long_envp[i] = (char *) 0;\n+\n+#pragma __pointer_size short\n+\n+  return main (argc, long_argv, long_envp);\n+}\n+#endif"}, {"sha": "be3e70d6414fe200b234880955063436f980c631", "filename": "gcc/config/alpha/vms-psxcrt0-64.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -0,0 +1,128 @@\n+/* VMS 64bit crt0 returning Unix style condition codes .\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#if !defined(__DECC)\n+You Lose! This file can only be compiled with DEC C.\n+#else\n+\n+/* This file can only be compiled with DEC C, due the the call to\n+   lib$establish and the pragmas pointer_size.  */\n+\n+#pragma __pointer_size short\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <ssdef.h>\n+#include <stsdef.h>\n+#include <errnodef.h>\n+\n+extern void decc$main ();\n+extern int main ();\n+\n+static int\n+handler (sigargs, mechargs)\n+     void *sigargs;\n+     void *mechargs;\n+{\n+  return SS$_RESIGNAL;\n+}\n+\n+int\n+__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n+     void *arg1, *arg2, *arg3;\n+     void *image_file_desc;\n+     void *arg5, *arg6)\n+{\n+  int argc;\n+  char **argv;\n+  char **envp;\n+\n+#pragma __pointer_size long\n+\n+  int i;\n+  char **long_argv;\n+  char **long_envp;\n+  int status;\n+\n+#pragma __pointer_size short\n+\n+  lib$establish (handler);\n+  decc$main (arg1, arg2, arg3, image_file_desc,\n+\t     arg5, arg6, &argc, &argv, &envp);\n+\n+#pragma __pointer_size long\n+\n+  /* Reallocate argv with 64 bit pointers. */\n+  long_argv = (char **) malloc (sizeof (char *) * (argc + 1));\n+\n+  for (i = 0; i < argc; i++)\n+    long_argv[i] = strdup (argv[i]);\n+\n+  long_argv[argc] = (char *) 0;\n+\n+  long_envp = (char **) malloc (sizeof (char *) * 5);\n+\n+  for (i = 0; envp[i]; i++)\n+    long_envp[i] = strdup (envp[i]);\n+\n+  long_envp[i] = (char *) 0;\n+\n+#pragma __pointer_size short\n+\n+  status = main (argc, long_argv, long_envp);\n+\n+  /* Map into a range of 0 - 255.  */\n+  status = status & 255;\n+\n+  if (status > 0)\n+    {\n+      int save_status = status;\n+\n+      status = C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n+\n+      /* An exit failure status requires a \"severe\" error.  All status values\n+\t are defined in errno with a successful (1) severity but can be\n+\t changed to an error (2) severity by adding 1.  In addition for\n+\t compatibility with UNIX exit() routines we inhibit a run-time error\n+\t message from being generated on exit(1).  */\n+\n+      if (save_status == 1)\n+\t{\n+\t  status++;\n+\t  status |= STS$M_INHIB_MSG;\n+\t}\n+    }\n+\n+  if (status == 0)\n+    status = SS$_NORMAL;\n+\n+  return status;\n+}\n+#endif"}, {"sha": "3b4f5874669cbda2a6e53f47cf5594080916845a", "filename": "gcc/config/alpha/vms64.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms64.h?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -0,0 +1,32 @@\n+/* Output variables, constants and external declarations, for GNU compiler.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Defaults to BITS_PER_WORD, e.g. 64 which is what is wanted.\n+  This is incompatible with DEC C, but matches DEC Ada */\n+#undef LONG_TYPE_SIZE\n+\n+/* Defaults to \"long int\" */\n+#undef SIZE_TYPE\n+#undef PTRDIFF_TYPE\n+\n+#undef POINTERS_EXTEND_UNSIGNED\n+#undef POINTER_SIZE\n+#define POINTER_SIZE 64"}, {"sha": "26fd82923a473f8d88b0c6608637c01ad56585d9", "filename": "gcc/config/alpha/xm-vms64.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fxm-vms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bfa8766be24c7e4064a386aa61caca54446f40/gcc%2Fconfig%2Falpha%2Fxm-vms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-vms64.h?ref=b6bfa8766be24c7e4064a386aa61caca54446f40", "patch": "@@ -0,0 +1,29 @@\n+/* Configuration for GNU C-compiler for openVMS/Alpha.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef HOST_WIDE_INT\n+\n+/* Since DEC C long != Gnu C long */\n+#define HOST_PTR_PRINTF \"%llx\"\n+#define HOST_WIDE_INT_PRINT_DEC \"%lld\"\n+#define HOST_WIDE_INT_PRINT_UNSIGNED \"%llu\"\n+#define HOST_WIDE_INT_PRINT_HEX \"0x%llx\"\n+#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%016llx\""}]}