{"sha": "205c6f170960eebb23a90a2acc165b129a7b304d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1YzZmMTcwOTYwZWViYjIzYTkwYTJhY2MxNjViMTI5YTdiMzA0ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-19T22:55:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-19T22:55:07Z"}, "message": "[multiple changes]\n\n\n2000-12-19  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n\n\t* configure.in: Don't turn on long long by default.\n\t* configure: Regenerate.\n\t* include/c/bits/std_cstdio.h: Remove c++config.h include.\n\t* src/locale.cc: Formatting tweaks.\n\t* testsuite/22_locale/ctype.cc (char<unsigned char>): Provide\n\tmember functions.\n\n2000-12-19  Loren J. Rittle  <ljrittle@acm.org>\n\n        * testsuite/22_locale/ctype.cc (test01): Correct ~ operator usage.\n\nFrom-SVN: r38388", "tree": {"sha": "cd64abf5f5b813d563c8b82658103a5022fc517e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd64abf5f5b813d563c8b82658103a5022fc517e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205c6f170960eebb23a90a2acc165b129a7b304d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205c6f170960eebb23a90a2acc165b129a7b304d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205c6f170960eebb23a90a2acc165b129a7b304d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205c6f170960eebb23a90a2acc165b129a7b304d/comments", "author": null, "committer": null, "parents": [{"sha": "f9ecb28c179bf19c1bf6f76c423eb527b63afc99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ecb28c179bf19c1bf6f76c423eb527b63afc99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ecb28c179bf19c1bf6f76c423eb527b63afc99"}], "stats": {"total": 129, "additions": 121, "deletions": 8}, "files": [{"sha": "31c4a10bfc8d38aef66854dde9031c01479d0bad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -1,3 +1,16 @@\n+2000-12-19  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n+\n+\t* configure.in: Don't turn on long long by default.\n+\t* configure: Regenerate.\n+\t* include/c/bits/std_cstdio.h: Remove c++config.h include.\n+\t* src/locale.cc: Formatting tweaks.\n+\t* testsuite/22_locale/ctype.cc (char<unsigned char>): Provide\n+\tmember functions.\n+\n+2000-12-19  Loren J. Rittle  <ljrittle@acm.org>\n+\n+        * testsuite/22_locale/ctype.cc (test01): Correct ~ operator usage.\n+\n 2000-12-19  Mark Kettenis  <kettenis@gnu.org>\n \n         * configure.target: Support the Hurd."}, {"sha": "4dd963cfc5a97575254a199d774ed6fbb36dd763", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -41,7 +41,7 @@ ac_help=\"$ac_help\n ac_help=\"$ac_help\n   --enable-c-mbchar       enable multibyte (wide) characters [default=yes]\"\n ac_help=\"$ac_help\n-  --enable-long-long      turns on 'long long' [default=yes]\"\n+  --enable-long-long      turns on 'long long' [default=no]\"\n ac_help=\"$ac_help\n   --enable-cshadow-headers construct \"shadowed\" C header files for\n                            g++ [default=no]\"\n@@ -2881,7 +2881,7 @@ if test \"${enable_long_long+set}\" = set; then\n    *)   { echo \"configure: error: Unknown argument to enable/disable long long\" 1>&2; exit 1; } ;;\n    esac\n else\n-  enable_long_long=yes\n+  enable_long_long=no\n fi\n  \n   # Allow use of os-dependent settings, so that macros that turn on"}, {"sha": "2823853b8444d6172fa6650a79738df80a953848", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -36,7 +36,7 @@ GLIBCPP_CHECK_COMPILER_VERSION\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n-GLIBCPP_ENABLE_LONG_LONG([yes])\n+GLIBCPP_ENABLE_LONG_LONG([no])\n GLIBCPP_ENABLE_SHADOW([no])\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY"}, {"sha": "62a19aabf2b9d38a803d8a06a9a2da8acba860da", "filename": "libstdc++-v3/include/c/bits/std_cstdio.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -36,7 +36,6 @@\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n-#include <bits/c++config.h>\n #include <bits/std_cstdarg.h>\n \n #pragma GCC system_header"}, {"sha": "29dcc378f7643b10c793c5e928563ef94a46a10a", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -950,8 +950,7 @@ namespace std {\n     return __ret;\n   };\n   \n-  ctype<wchar_t>::\n-  ~ctype() { }\n+  ctype<wchar_t>::~ctype() { }\n \n   // NB: These ctype<wchar_t> methods are not configuration-specific,\n   // unlike the ctype<char> bits."}, {"sha": "b51ee70932bcae185dd76ac6e414cd6219671fef", "filename": "libstdc++-v3/testsuite/22_locale/ctype.cc", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205c6f170960eebb23a90a2acc165b129a7b304d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc?ref=205c6f170960eebb23a90a2acc165b129a7b304d", "patch": "@@ -27,7 +27,109 @@ int mask ();\n #include <locale>\n \n // 2: Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_ctype: public std::ctype<unsigned char> { };\n+typedef std::ctype<char> cctype;\n+\n+class gnu_ctype: public std::ctype<unsigned char> \n+{ \n+private:\n+  const cctype& _M_cctype;\n+\n+public:\n+  explicit \n+  gnu_ctype(size_t __refs = 0) \n+  : std::ctype<unsigned char>(__refs), \n+    _M_cctype(std::use_facet<cctype>(std::locale::classic())) \n+  { }\n+\n+  ~gnu_ctype();\n+\n+protected:\n+  virtual bool \n+  do_is(mask __m, char_type __c) const\n+  { return _M_cctype.is(__m, __c); }\n+\n+  virtual const char_type*\n+  do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n+  { \n+    const char* __c = _M_cctype.is(reinterpret_cast<const char*>(__lo), \n+\t\t\t\t   reinterpret_cast<const char*>(__hi), __vec);\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+  \n+  virtual const char_type*\n+  do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    const char* __c = _M_cctype.scan_is(__m, \n+\t\t\t\t\treinterpret_cast<const char*>(__lo), \n+\t\t\t\t\treinterpret_cast<const char*>(__hi));\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+\n+  virtual const char_type*\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    const char* __c = _M_cctype.scan_is(__m, \n+\t\t\t\t\treinterpret_cast<const char*>(__lo), \n+\t\t\t\t\treinterpret_cast<const char*>(__hi));\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+\n+  virtual char_type \n+  do_toupper(char_type __c) const\n+  { return _M_cctype.toupper(__c); }\n+\n+  virtual const char_type*\n+  do_toupper(char_type* __lo, const char_type* __hi) const\n+  {\n+    const char* __c = _M_cctype.toupper(reinterpret_cast<char*>(__lo), \n+\t\t\t\t\treinterpret_cast<const char*>(__hi));\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+\n+  virtual char_type \n+  do_tolower(char_type __c) const\n+  { return _M_cctype.tolower(__c); }\n+\n+  virtual const char_type*\n+  do_tolower(char_type* __lo, const char_type* __hi) const\n+  {\n+    const char* __c = _M_cctype.toupper(reinterpret_cast<char*>(__lo), \n+\t\t\t\t\treinterpret_cast<const char*>(__hi));\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+\n+  virtual char_type \n+  do_widen(char __c) const\n+  { return _M_cctype.widen(__c); }\n+\n+  virtual const char*\n+  do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n+  {\n+    const char* __c = _M_cctype.widen(reinterpret_cast<const char*>(__lo), \n+\t\t\t\t      reinterpret_cast<const char*>(__hi),\n+\t\t\t\t      reinterpret_cast<char*>(__dest));\n+    return __c;\n+  }\n+\n+  virtual char \n+  do_narrow(char_type __c, char __dfault) const\n+  { return _M_cctype.narrow(__c, __dfault); }\n+\n+  virtual const char_type*\n+  do_narrow(const char_type* __lo, const char_type* __hi, char __dfault, \n+\t    char* __dest) const\n+  {\n+    const char* __c = _M_cctype.narrow(reinterpret_cast<const char*>(__lo), \n+\t\t\t\t       reinterpret_cast<const char*>(__hi),\n+\t\t\t\t       __dfault,\n+\t\t\t\t       reinterpret_cast<char*>(__dest));\n+    return reinterpret_cast<const char_type*>(__c);\n+  }\n+\n+};\n+\n+gnu_ctype::~gnu_ctype() { }\n+\n gnu_ctype facet01;\n \n // 3: Sanity check ctype_base::mask bitmask requirements\n@@ -45,7 +147,7 @@ test01()\n   m01 & m02;\n   m01 | m02;\n   m01 ^ m02;\n-  m01 ~ m02;\n+  ~m01;\n   m01 &= m02;\n   m01 |= m02;\n   m01 ^= m02;"}]}