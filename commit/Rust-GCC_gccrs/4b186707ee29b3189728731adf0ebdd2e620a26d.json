{"sha": "4b186707ee29b3189728731adf0ebdd2e620a26d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxODY3MDdlZTI5YjMxODk3Mjg3MzFhZGYwZWJkZDJlNjIwYTI2ZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-15T05:24:51Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-15T05:24:51Z"}, "message": "vector (vector<>::cbegin()): Use C++11 direct initialization.\n\n2018-10-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/vector (vector<>::cbegin()): Use C++11 direct\n\tinitialization.\n\t(vector<>::cend()): Likewise.\n\t(vector<>::emplace(const_iterator, _Args&&...)): Likewise and use\n\tconsistent iterator comparison.\n\t(vector<>::insert(const_iterator, size_type, const _Tp&)): Likewise.\n\t(vector<>::insert(const_iterator, _InputIterator, _InputIterator)):\n\tLikewise.\n\t(vector<>::erase(const_iterator)): Likewise.\n\t(vector<>::erase(const_iterator, const_iterator)): Likewise.\n\nFrom-SVN: r265156", "tree": {"sha": "5b0bd9c7af106547682e46f7a6e191bdaea54b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0bd9c7af106547682e46f7a6e191bdaea54b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b186707ee29b3189728731adf0ebdd2e620a26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b186707ee29b3189728731adf0ebdd2e620a26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b186707ee29b3189728731adf0ebdd2e620a26d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b186707ee29b3189728731adf0ebdd2e620a26d/comments", "author": null, "committer": null, "parents": [{"sha": "524af591fd548e466380e3d54abd5f501be28a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524af591fd548e466380e3d54abd5f501be28a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524af591fd548e466380e3d54abd5f501be28a94"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "1c2e0ff9c0f7a46ec42b919bd0601d2986a899a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b186707ee29b3189728731adf0ebdd2e620a26d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b186707ee29b3189728731adf0ebdd2e620a26d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b186707ee29b3189728731adf0ebdd2e620a26d", "patch": "@@ -1,3 +1,16 @@\n+2018-10-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/vector (vector<>::cbegin()): Use C++11 direct\n+\tinitialization.\n+\t(vector<>::cend()): Likewise.\n+\t(vector<>::emplace(const_iterator, _Args&&...)): Likewise and use\n+\tconsistent iterator comparison.\n+\t(vector<>::insert(const_iterator, size_type, const _Tp&)): Likewise.\n+\t(vector<>::insert(const_iterator, _InputIterator, _InputIterator)):\n+\tLikewise.\n+\t(vector<>::erase(const_iterator)): Likewise.\n+\t(vector<>::erase(const_iterator, const_iterator)): Likewise.\n+\n 2018-10-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tInitial commit of Networking TS implementation."}, {"sha": "c11ddbb7048c3d131ac315c422c55eba4b5e73a0", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b186707ee29b3189728731adf0ebdd2e620a26d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b186707ee29b3189728731adf0ebdd2e620a26d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=4b186707ee29b3189728731adf0ebdd2e620a26d", "patch": "@@ -328,11 +328,11 @@ namespace __debug\n #if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n-      { return const_iterator(_Base::begin(), this); }\n+      { return { _Base::begin(), this }; }\n \n       const_iterator\n       cend() const noexcept\n-      { return const_iterator(_Base::end(), this); }\n+      { return { _Base::end(), this }; }\n \n       const_reverse_iterator\n       crbegin() const noexcept\n@@ -521,15 +521,15 @@ namespace __debug\n \t{\n \t  __glibcxx_check_insert(__position);\n \t  bool __realloc = this->_M_requires_reallocation(this->size() + 1);\n-\t  difference_type __offset = __position.base() - _Base::begin();\n+\t  difference_type __offset = __position.base() - _Base::cbegin();\n \t  _Base_iterator __res = _Base::emplace(__position.base(),\n \t\t\t\t\t\tstd::forward<_Args>(__args)...);\n \t  if (__realloc)\n \t    this->_M_invalidate_all();\n \t  else\n \t    this->_M_invalidate_after_nth(__offset);\n \t  this->_M_update_guaranteed_capacity();\n-\t  return iterator(__res, this);\n+\t  return { __res, this };\n \t}\n #endif\n \n@@ -542,7 +542,8 @@ namespace __debug\n       {\n \t__glibcxx_check_insert(__position);\n \tbool __realloc = this->_M_requires_reallocation(this->size() + 1);\n-\tdifference_type __offset = __position.base() - _Base::begin();\n+\tdifference_type __offset\n+\t  = __position.base() - __position._M_get_sequence()->_M_base().begin();\n \t_Base_iterator __res = _Base::insert(__position.base(), __x);\n \tif (__realloc)\n \t  this->_M_invalidate_all();\n@@ -577,7 +578,7 @@ namespace __debug\n \telse\n \t  this->_M_invalidate_after_nth(__offset);\n \tthis->_M_update_guaranteed_capacity();\n-\treturn iterator(__res, this);\n+\treturn { __res, this };\n       }\n #else\n       void\n@@ -623,7 +624,7 @@ namespace __debug\n \t  else\n \t    this->_M_invalidate_after_nth(__offset);\n \t  this->_M_update_guaranteed_capacity();\n-\t  return iterator(__res, this);\n+\t  return { __res, this };\n \t}\n #else\n       template<class _InputIterator>\n@@ -661,7 +662,8 @@ namespace __debug\n #endif\n       {\n \t__glibcxx_check_erase(__position);\n-\tdifference_type __offset = __position.base() - _Base::begin();\n+\tdifference_type __offset\n+\t  = __position.base() - __position._M_get_sequence()->_M_base().begin();\n \t_Base_iterator __res = _Base::erase(__position.base());\n \tthis->_M_invalidate_after_nth(__offset);\n \treturn iterator(__res, this);\n@@ -680,15 +682,16 @@ namespace __debug\n \n \tif (__first.base() != __last.base())\n \t  {\n-\t    difference_type __offset = __first.base() - _Base::begin();\n+\t    difference_type __offset =\n+\t      __first.base() - __first._M_get_sequence()->_M_base().begin();\n \t    _Base_iterator __res = _Base::erase(__first.base(),\n \t\t\t\t\t\t__last.base());\n \t    this->_M_invalidate_after_nth(__offset);\n \t    return iterator(__res, this);\n \t  }\n \telse\n #if __cplusplus >= 201103L\n-\t  return begin() + (__first.base() - cbegin().base());\n+\t  return { _Base::begin() + (__first.base() - _Base::cbegin()), this };\n #else\n \t  return __first;\n #endif"}]}