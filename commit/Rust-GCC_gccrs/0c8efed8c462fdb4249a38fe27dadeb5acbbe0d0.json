{"sha": "0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ZWZlZDhjNDYyZmRiNDI0OWEzOGZlMjdkYWRlYjVhY2JiZTBkMA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2007-12-15T18:35:23Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-12-15T18:35:23Z"}, "message": "tree-scalar-evolution.c (number_of_iterations_for_all_loops): Replace print_loop_ir with print_loops.\n\n2007-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (number_of_iterations_for_all_loops): Replace\n\tprint_loop_ir with print_loops.\n\t* tree-flow.h (dot_cfg, debug_loops, debug_loop, debug_loop_num,\n\tprint_loops, print_loops_bb): Declare.\n\t* tree-cfg.c (print_loops_bb): New.\n\t(print_loop): Print header, latch, bounds, estimation of iterations.\n\t(print_loop_and_siblings): New.\n\t(print_loop_ir): Renamed print_loops.\n\t(debug_loop_ir): Renamed debug_loops.\n\t(debug_loop, debug_loop_num): New.\n\nFrom-SVN: r130957", "tree": {"sha": "b8bbfadbc47a89fd0c0d2df7f1e97dd8331d1387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8bbfadbc47a89fd0c0d2df7f1e97dd8331d1387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0"}], "stats": {"total": 153, "additions": 115, "deletions": 38}, "files": [{"sha": "3921ab3601f9e1e2c65acd62fbe926e5b633e56c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "patch": "@@ -1,3 +1,16 @@\n+2007-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (number_of_iterations_for_all_loops): Replace\n+\tprint_loop_ir with print_loops.\n+\t* tree-flow.h (dot_cfg, debug_loops, debug_loop, debug_loop_num,\n+\tprint_loops, print_loops_bb): Declare.\n+\t* tree-cfg.c (print_loops_bb): New.\n+\t(print_loop): Print header, latch, bounds, estimation of iterations.\n+\t(print_loop_and_siblings): New.\n+\t(print_loop_ir): Renamed print_loops.\n+\t(debug_loop_ir): Renamed debug_loops.\n+\t(debug_loop, debug_loop_num): New.\n+\n 2007-12-15  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* tree-flow-inline.h.c (next_readonly_imm_use): Fix typo in comment."}, {"sha": "1606497ec6d5fb606edad5a1a449d06a2a2fffa2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 95, "deletions": 35, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "patch": "@@ -6188,12 +6188,6 @@ debug_function (tree fn, int flags)\n }\n \n \n-/* Pretty print of the loops intermediate representation.  */\n-static void print_loop (FILE *, struct loop *, int);\n-static void print_pred_bbs (FILE *, basic_block bb);\n-static void print_succ_bbs (FILE *, basic_block bb);\n-\n-\n /* Print on FILE the indexes for the predecessors of basic_block BB.  */\n \n static void\n@@ -6219,11 +6213,42 @@ print_succ_bbs (FILE *file, basic_block bb)\n     fprintf (file, \"bb_%d \", e->dest->index);\n }\n \n+/* Print to FILE the basic block BB following the VERBOSITY level.  */\n+\n+void \n+print_loops_bb (FILE *file, basic_block bb, int indent, int verbosity)\n+{\n+  char *s_indent = (char *) alloca ((size_t) indent + 1);\n+  memset ((void *) s_indent, ' ', (size_t) indent);\n+  s_indent[indent] = '\\0';\n+\n+  /* Print basic_block's header.  */\n+  if (verbosity >= 2)\n+    {\n+      fprintf (file, \"%s  bb_%d (preds = {\", s_indent, bb->index);\n+      print_pred_bbs (file, bb);\n+      fprintf (file, \"}, succs = {\");\n+      print_succ_bbs (file, bb);\n+      fprintf (file, \"})\\n\");\n+    }\n+\n+  /* Print basic_block's body.  */\n+  if (verbosity >= 3)\n+    {\n+      fprintf (file, \"%s  {\\n\", s_indent);\n+      tree_dump_bb (bb, file, indent + 4);\n+      fprintf (file, \"%s  }\\n\", s_indent);\n+    }\n+}\n+\n+static void print_loop_and_siblings (FILE *, struct loop *, int, int);\n \n-/* Pretty print LOOP on FILE, indented INDENT spaces.  */\n+/* Pretty print LOOP on FILE, indented INDENT spaces.  Following\n+   VERBOSITY level this outputs the contents of the loop, or just its\n+   structure.  */\n \n static void\n-print_loop (FILE *file, struct loop *loop, int indent)\n+print_loop (FILE *file, struct loop *loop, int indent, int verbosity)\n {\n   char *s_indent;\n   basic_block bb;\n@@ -6235,55 +6260,90 @@ print_loop (FILE *file, struct loop *loop, int indent)\n   memset ((void *) s_indent, ' ', (size_t) indent);\n   s_indent[indent] = '\\0';\n \n-  /* Print the loop's header.  */\n-  fprintf (file, \"%sloop_%d\\n\", s_indent, loop->num);\n+  /* Print loop's header.  */\n+  fprintf (file, \"%sloop_%d (header = %d, latch = %d\", s_indent, \n+\t   loop->num, loop->header->index, loop->latch->index);\n+  fprintf (file, \", niter = \");\n+  print_generic_expr (file, loop->nb_iterations, 0);\n \n-  /* Print the loop's body.  */\n-  fprintf (file, \"%s{\\n\", s_indent);\n-  FOR_EACH_BB (bb)\n-    if (bb->loop_father == loop)\n-      {\n-\t/* Print the basic_block's header.  */\n-\tfprintf (file, \"%s  bb_%d (preds = {\", s_indent, bb->index);\n-\tprint_pred_bbs (file, bb);\n-\tfprintf (file, \"}, succs = {\");\n-\tprint_succ_bbs (file, bb);\n-\tfprintf (file, \"})\\n\");\n-\n-\t/* Print the basic_block's body.  */\n-\tfprintf (file, \"%s  {\\n\", s_indent);\n-\ttree_dump_bb (bb, file, indent + 4);\n-\tfprintf (file, \"%s  }\\n\", s_indent);\n-      }\n+  if (loop->any_upper_bound)\n+    {\n+      fprintf (file, \", upper_bound = \");\n+      dump_double_int (file, loop->nb_iterations_upper_bound, true);\n+    }\n \n-  print_loop (file, loop->inner, indent + 2);\n-  fprintf (file, \"%s}\\n\", s_indent);\n-  print_loop (file, loop->next, indent);\n+  if (loop->any_estimate)\n+    {\n+      fprintf (file, \", estimate = \");\n+      dump_double_int (file, loop->nb_iterations_estimate, true);\n+    }\n+  fprintf (file, \")\\n\");\n+\n+  /* Print loop's body.  */\n+  if (verbosity >= 1)\n+    {\n+      fprintf (file, \"%s{\\n\", s_indent);\n+      FOR_EACH_BB (bb)\n+\tif (bb->loop_father == loop)\n+\t  print_loops_bb (file, bb, indent, verbosity);\n+\n+      print_loop_and_siblings (file, loop->inner, indent + 2, verbosity);\n+      fprintf (file, \"%s}\\n\", s_indent);\n+    }\n }\n \n+/* Print the LOOP and its sibling loops on FILE, indented INDENT\n+   spaces.  Following VERBOSITY level this outputs the contents of the\n+   loop, or just its structure.  */\n+\n+static void\n+print_loop_and_siblings (FILE *file, struct loop *loop, int indent, int verbosity)\n+{\n+  if (loop == NULL)\n+    return;\n+\n+  print_loop (file, loop, indent, verbosity);\n+  print_loop_and_siblings (file, loop->next, indent, verbosity);\n+}\n \n /* Follow a CFG edge from the entry point of the program, and on entry\n    of a loop, pretty print the loop structure on FILE.  */\n \n void\n-print_loop_ir (FILE *file)\n+print_loops (FILE *file, int verbosity)\n {\n   basic_block bb;\n \n   bb = BASIC_BLOCK (NUM_FIXED_BLOCKS);\n   if (bb && bb->loop_father)\n-    print_loop (file, bb->loop_father, 0);\n+    print_loop_and_siblings (file, bb->loop_father, 0, verbosity);\n }\n \n \n-/* Debugging loops structure at tree level.  */\n+/* Debugging loops structure at tree level, at some VERBOSITY level.  */\n+\n+void\n+debug_loops (int verbosity)\n+{\n+  print_loops (stderr, verbosity);\n+}\n+\n+/* Print on stderr the code of LOOP, at some VERBOSITY level.  */\n \n void\n-debug_loop_ir (void)\n+debug_loop (struct loop *loop, int verbosity)\n {\n-  print_loop_ir (stderr);\n+  print_loop (stderr, loop, 0, verbosity);\n }\n \n+/* Print on stderr the code of loop number NUM, at some VERBOSITY\n+   level.  */\n+\n+void\n+debug_loop_num (unsigned num, int verbosity)\n+{\n+  debug_loop (get_loop (num), verbosity);\n+}\n \n /* Return true if BB ends with a call, possibly followed by some\n    instructions that must stay with the call.  Return false,"}, {"sha": "fae04041151af03035032c9c75a03c7807028a26", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "patch": "@@ -741,9 +741,13 @@ extern basic_block debug_tree_bb_n (int);\n extern void dump_tree_cfg (FILE *, int);\n extern void debug_tree_cfg (int);\n extern void dump_cfg_stats (FILE *);\n+extern void dot_cfg (void);\n extern void debug_cfg_stats (void);\n-extern void debug_loop_ir (void);\n-extern void print_loop_ir (FILE *);\n+extern void debug_loops (int);\n+extern void debug_loop (struct loop *, int);\n+extern void debug_loop_num (unsigned, int);\n+extern void print_loops (FILE *, int);\n+extern void print_loops_bb (FILE *, basic_block, int, int);\n extern void cleanup_dead_labels (void);\n extern void group_case_labels (void);\n extern tree first_stmt (basic_block);"}, {"sha": "ad8f2f0f190b2b3f65bcea2f535a3637c4d61515", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=0c8efed8c462fdb4249a38fe27dadeb5acbbe0d0", "patch": "@@ -2376,7 +2376,7 @@ number_of_iterations_for_all_loops (VEC(tree,heap) **exit_conditions)\n       fprintf (dump_file, \"-----------------------------------------\\n\");\n       fprintf (dump_file, \")\\n\\n\");\n       \n-      print_loop_ir (dump_file);\n+      print_loops (dump_file, 3);\n     }\n }\n "}]}