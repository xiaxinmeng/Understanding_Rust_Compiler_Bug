{"sha": "ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwY2Y3ZjdmNWI4OWZlNDFiN2ZhNTM1MzRlNThiZjYzYzA1NjNlNQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-07-18T11:54:03Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-07-18T11:54:03Z"}, "message": "Save a function call on mutex locking/unlocking\n\nFrom-SVN: r44106", "tree": {"sha": "43d510abfae2728d727a938f66560296f651ee9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d510abfae2728d727a938f66560296f651ee9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5/comments", "author": null, "committer": null, "parents": [{"sha": "8b52df456f7ac8f4c8a053b146722c59abd39519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b52df456f7ac8f4c8a053b146722c59abd39519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b52df456f7ac8f4c8a053b146722c59abd39519"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "13a22a5685f2c18bba33480985ce974542eb61e3", "filename": "libobjc/thr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5/libobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5/libobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr.c?ref=ba0cf7f7f5b89fe41b7fa53534e58bf63c0563e5", "patch": "@@ -318,7 +318,7 @@ objc_mutex_lock(objc_mutex_t mutex)\n     return -1;\n \n   /* If we already own the lock then increment depth */\n-  thread_id = objc_thread_id();\n+  thread_id = __objc_thread_id();\n   if (mutex->owner == thread_id)\n     return ++mutex->depth;\n \n@@ -350,7 +350,7 @@ objc_mutex_trylock(objc_mutex_t mutex)\n     return -1;\n \n   /* If we already own the lock then increment depth */ \n-  thread_id = objc_thread_id();\n+  thread_id = __objc_thread_id();\n   if (mutex->owner == thread_id)\n     return ++mutex->depth;\n     \n@@ -385,7 +385,7 @@ objc_mutex_unlock(objc_mutex_t mutex)\n     return -1;\n \n   /* If another thread owns the lock then abort */\n-  thread_id = objc_thread_id();\n+  thread_id = __objc_thread_id();\n   if (mutex->owner != thread_id)\n     return -1;\n \n@@ -477,7 +477,7 @@ objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n     return -1;\n \n   /* Make sure we are owner of mutex */\n-  thread_id = objc_thread_id();\n+  thread_id = __objc_thread_id();\n   if (mutex->owner != thread_id)\n     return -1;\n "}]}