{"sha": "a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjNDUzMWNjZjA2ZTkzODEwODM0MjFlOWU3YzJiZGY4OWFhN2YxMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-14T13:23:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-14T13:23:14Z"}, "message": "re PR libstdc++/66011 (call to '__open_missing_mode' declared with attribute error)\n\n\tPR libstdc++/66011\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for fchmod and\n\tsendfile.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* src/filesystem/ops.cc (do_copy_file): Fix arguments to open(). Do\n\tnot return after copying contents. Use fchmod, fchmodat, and sendfile\n\twhen available.\n\t(current_path, permissions, space): Use errno not return value.\n\nFrom-SVN: r223196", "tree": {"sha": "94fd318f3f4f43eec83cd1a869249e3a989e1762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fd318f3f4f43eec83cd1a869249e3a989e1762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9fc9fee84ec9de6de8d95ee670bc121b298331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9fc9fee84ec9de6de8d95ee670bc121b298331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9fc9fee84ec9de6de8d95ee670bc121b298331"}], "stats": {"total": 218, "additions": 197, "deletions": 21}, "files": [{"sha": "4e38fbfe93f1a9af01ce2a614d6b8aad8188a300", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "patch": "@@ -1,5 +1,15 @@\n 2015-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/66011\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for fchmod and\n+\tsendfile.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/filesystem/ops.cc (do_copy_file): Fix arguments to open(). Do\n+\tnot return after copying contents. Use fchmod, fchmodat, and sendfile\n+\twhen available.\n+\t(current_path, permissions, space): Use errno not return value.\n+\n \tPR libstdc++/66018\n \t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for struct\n \tdirent.d_type."}, {"sha": "8340572984daf8b2afb016539cf4950da05ffe43", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "patch": "@@ -3938,6 +3938,19 @@ dnl\n     AC_DEFINE(_GLIBCXX_USE_ST_MTIM, 1, [Define if struct stat has timespec members.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_st_mtim)\n+dnl\n+  AC_MSG_CHECKING([for fchmod])\n+  AC_CACHE_VAL(glibcxx_cv_fchmod, [dnl\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <sys/stat.h>],\n+      [fchmod(1, S_IWUSR);],\n+      [glibcxx_cv_fchmod=yes],\n+      [glibcxx_cv_fchmod=no])\n+  ])\n+  if test $glibcxx_cv_fchmod = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_FCHMOD, 1, [Define if fchmod is available in <sys/stat.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_fchmod)\n dnl\n   AC_MSG_CHECKING([for fchmodat])\n   AC_CACHE_VAL(glibcxx_cv_fchmodat, [dnl\n@@ -3954,6 +3967,26 @@ dnl\n     AC_DEFINE(_GLIBCXX_USE_FCHMODAT, 1, [Define if fchmodat is available in <sys/stat.h>.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_fchmodat)\n+dnl\n+  AC_MSG_CHECKING([for sendfile that can copy files])\n+  AC_CACHE_VAL(glibcxx_cv_sendfile, [dnl\n+    case \"${target_os}\" in\n+      gnu* | linux* | solaris*)\n+        GCC_TRY_COMPILE_OR_LINK(\n+          [#include <sys/sendfile.h>],\n+          [sendfile(1, 2, (off_t*)NULL, sizeof 1);],\n+          [glibcxx_cv_sendfile=yes],\n+          [glibcxx_cv_sendfile=no])\n+        ;;\n+      *)\n+        glibcxx_cv_sendfile=no\n+        ;;\n+    esac\n+  ])\n+  if test $glibcxx_cv_sendfile = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_SENDFILE, 1, [Define if sendfile is available in <sys/stat.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_sendfile)\n dnl\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE"}, {"sha": "337f61440a9d72af1c519d8d4fa1cee593e97801", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "patch": "@@ -836,6 +836,9 @@\n    this host. */\n #undef _GLIBCXX_USE_DECIMAL_FLOAT\n \n+/* Define if fchmod is available in <sys/stat.h>. */\n+#undef _GLIBCXX_USE_FCHMOD\n+\n /* Define if fchmodat is available in <sys/stat.h>. */\n #undef _GLIBCXX_USE_FCHMODAT\n \n@@ -885,6 +888,9 @@\n /* Define if _SC_NPROC_ONLN is available in <unistd.h>. */\n #undef _GLIBCXX_USE_SC_NPROC_ONLN\n \n+/* Define if sendfile is available in <sys/stat.h>. */\n+#undef _GLIBCXX_USE_SENDFILE\n+\n /* Define if struct stat has timespec members. */\n #undef _GLIBCXX_USE_ST_MTIM\n "}, {"sha": "3654b68f281022cf6e7997f4e3716647aa785736", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "patch": "@@ -79092,6 +79092,62 @@ $as_echo \"#define _GLIBCXX_USE_ST_MTIM 1\" >>confdefs.h\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_st_mtim\" >&5\n $as_echo \"$glibcxx_cv_st_mtim\" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fchmod\" >&5\n+$as_echo_n \"checking for fchmod... \" >&6; }\n+  if test \"${glibcxx_cv_fchmod+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/stat.h>\n+int\n+main ()\n+{\n+fchmod(1, S_IWUSR);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_fchmod=yes\n+else\n+  glibcxx_cv_fchmod=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/stat.h>\n+int\n+main ()\n+{\n+fchmod(1, S_IWUSR);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_fchmod=yes\n+else\n+  glibcxx_cv_fchmod=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_fchmod = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_FCHMOD 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_fchmod\" >&5\n+$as_echo \"$glibcxx_cv_fchmod\" >&6; }\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fchmodat\" >&5\n $as_echo_n \"checking for fchmodat... \" >&6; }\n   if test \"${glibcxx_cv_fchmodat+set}\" = set; then :\n@@ -79154,6 +79210,69 @@ $as_echo \"#define _GLIBCXX_USE_FCHMODAT 1\" >>confdefs.h\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_fchmodat\" >&5\n $as_echo \"$glibcxx_cv_fchmodat\" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sendfile that can copy files\" >&5\n+$as_echo_n \"checking for sendfile that can copy files... \" >&6; }\n+  if test \"${glibcxx_cv_sendfile+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+      case \"${target_os}\" in\n+      gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu | solaris*)\n+        if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/sendfile.h>\n+int\n+main ()\n+{\n+sendfile(1, 2, (off_t*)NULL, sizeof 1);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_sendfile=yes\n+else\n+  glibcxx_cv_sendfile=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/sendfile.h>\n+int\n+main ()\n+{\n+sendfile(1, 2, (off_t*)NULL, sizeof 1);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_sendfile=yes\n+else\n+  glibcxx_cv_sendfile=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+        ;;\n+      *)\n+        glibcxx_cv_sendfile=no\n+        ;;\n+    esac\n+\n+fi\n+\n+  if test $glibcxx_cv_sendfile = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_SENDFILE 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_sendfile\" >&5\n+$as_echo \"$glibcxx_cv_sendfile\" >&6; }\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'"}, {"sha": "f24cc19f1efddd4f519676bd3c78bf8f9d526919", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c4531ccf06e9381083421e9e7c2bdf89aa7f13/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=a0c4531ccf06e9381083421e9e7c2bdf89aa7f13", "patch": "@@ -41,7 +41,7 @@\n #ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n # include <sys/statvfs.h>\n #endif\n-#ifdef _GLIBCXX_HAVE_GNU_SENDFILE\n+#ifdef _GLIBCXX_USE_SENDFILE\n # include <sys/sendfile.h>\n #else\n # include <ext/stdio_filebuf.h>\n@@ -241,6 +241,8 @@ namespace\n       }\n     f = make_file_status(*from_st);\n \n+    using opts = fs::copy_options;\n+\n     if (exists(t))\n       {\n \tif (!is_other(t) && !is_other(f)\n@@ -251,20 +253,20 @@ namespace\n \t    return false;\n \t  }\n \n-\tif (is_set(option, fs::copy_options::skip_existing))\n+\tif (is_set(option, opts::skip_existing))\n \t  {\n \t    ec.clear();\n \t    return false;\n \t  }\n-\telse if (is_set(option, fs::copy_options::update_existing))\n+\telse if (is_set(option, opts::update_existing))\n \t  {\n \t    if (file_time(*from_st) <= file_time(*to_st))\n \t      {\n \t\tec.clear();\n \t\treturn false;\n \t      }\n \t  }\n-\telse if (!is_set(option, fs::copy_options::overwrite_existing))\n+\telse if (!is_set(option, opts::overwrite_existing))\n \t  {\n \t    ec = std::make_error_code(std::errc::file_exists);\n \t    return false;\n@@ -282,14 +284,22 @@ namespace\n \tec.assign(errno, std::generic_category());\n \treturn false;\n       }\n-    CloseFD out = { ::open(to.c_str(), O_WRONLY|O_CREAT) };\n+    int oflag = O_WRONLY|O_CREAT;\n+    if (is_set(option, opts::overwrite_existing|opts::update_existing))\n+      oflag |= O_TRUNC;\n+    else\n+      oflag |= O_EXCL;\n+    CloseFD out = { ::open(to.c_str(), oflag, S_IWUSR) };\n     if (out.fd == -1)\n       {\n-\tec.assign(errno, std::generic_category());\n+\tif (errno == EEXIST && is_set(option, opts::skip_existing))\n+\t  ec.clear();\n+\telse\n+\t  ec.assign(errno, std::generic_category());\n \treturn false;\n       }\n \n-#ifdef _GLIBCXX_HAVE_GNU_SENDFILE\n+#ifdef _GLIBCXX_USE_SENDFILE\n     auto n = ::sendfile(out.fd, in.fd, nullptr, from_st->st_size);\n     if (n != from_st->st_size)\n       {\n@@ -299,27 +309,25 @@ namespace\n #else\n     __gnu_cxx::stdio_filebuf<char> sbin(in.fd, std::ios::in);\n     __gnu_cxx::stdio_filebuf<char> sbout(out.fd, std::ios::out);\n-    if (std::ostream(&sbout) << &sbin)\n-      {\n-\tec.clear();\n-\treturn true;\n-      }\n-    else\n+    if ( !(std::ostream(&sbout) << &sbin) )\n       {\n \tec = std::make_error_code(std::errc::io_error);\n \treturn false;\n       }\n #endif\n \n-#ifdef _GLIBCXX_HAVE_FCHMOD\n+#ifdef _GLIBCXX_USE_FCHMOD\n     if (::fchmod(out.fd, from_st->st_mode))\n+#elif _GLIBCXX_USE_FCHMODAT\n+    if (::fchmodat(AT_FDCWD, to.c_str(), from_st->st_mode, 0))\n #else\n     if (::chmod(to.c_str(), from_st->st_mode))\n #endif\n       {\n \tec.assign(errno, std::generic_category());\n \treturn false;\n       }\n+    ec.clear();\n     return true;\n   }\n }\n@@ -715,8 +723,8 @@ void\n fs::current_path(const path& p, error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-  if (int err = ::chdir(p.c_str()))\n-    ec.assign(err, std::generic_category());\n+  if (::chdir(p.c_str()))\n+    ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n #else\n@@ -908,11 +916,11 @@ fs::permissions(const path& p, perms prms)\n void fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n {\n #if _GLIBCXX_USE_FCHMODAT\n-  if (int err = ::fchmodat(AT_FDCWD, p.c_str(), static_cast<mode_t>(prms), 0))\n+  if (::fchmodat(AT_FDCWD, p.c_str(), static_cast<mode_t>(prms), 0))\n #else\n-  if (int err = ::chmod(p.c_str(), static_cast<mode_t>(prms)))\n+  if (::chmod(p.c_str(), static_cast<mode_t>(prms)))\n #endif\n-    ec.assign(err, std::generic_category());\n+    ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n }\n@@ -1064,8 +1072,8 @@ fs::space(const path& p, error_code& ec) noexcept\n   };\n #ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n   struct ::statvfs f;\n-  if (int err = ::statvfs(p.c_str(), &f))\n-      ec.assign(err, std::generic_category());\n+  if (::statvfs(p.c_str(), &f))\n+      ec.assign(errno, std::generic_category());\n   else\n     {\n       info = space_info{"}]}