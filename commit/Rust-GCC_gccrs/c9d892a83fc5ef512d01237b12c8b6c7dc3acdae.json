{"sha": "c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkODkyYTgzZmM1ZWY1MTJkMDEyMzdiMTJjOGI2YzdkYzNhY2RhZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-27T18:28:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-27T18:28:06Z"}, "message": "c-common.c (c_expand_expr): Fix prototype.\n\n\t* c-common.c (c_expand_expr): Fix prototype.\n\t* c-common.h (c_expand_expr): Always declare, update.\n\t* c-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n\t* c-objc-common.c (c_objc_common_init): No global hook.\n\t* expr.c (expand_expr): Use langhook.\n\t* expr.h (enum expand_modifier): Conditionally declare.\n\t* langhooks-def.h (lhd_expand_expr, LANG_HOOKS_EXPAND_EXPR): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.c (lhd_expand_expr): New.\n\t* langhooks.h (struct lang_hooks): New hook.\n\t* toplev.c (lang_expand_expr_t, lang_expand_expr): Delete.\n\t(lang_independent_init): Don't default hook.\nada:\n\t* misc.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n\t(gnat_init): Don't set hook.\n\t(gnat_expand_expr): Fix prototype.\ncp:\n\t* cp-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n\t* cp-tree.h (init_cplus_expand): Remove.\n\t(cxx_expand_expr): New.\n\t* expr.c (cplus_expand_expr): Rename cxx_expand_expr,\n\tfix prototype.\n\t(init_cplus_expand): Remove.\n\t* lex.c (cxx_init): Don't call init_cplus_expand.\njava:\n\t* expr.c (java_lang_expand_expr): Rename java_expand_expr,\n\tfix prototype.\n\t* java-tree.h (java_lang_expand_expr): Similarly.\n\t* lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n\t(java_init): Don't set hook.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n\nFrom-SVN: r51462", "tree": {"sha": "72f13b65f2c0461b4421653d0e3da90013de7c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72f13b65f2c0461b4421653d0e3da90013de7c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/comments", "author": null, "committer": null, "parents": [{"sha": "2b613c6ac38578cf2a5ec48fac7d1250403d0742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b613c6ac38578cf2a5ec48fac7d1250403d0742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b613c6ac38578cf2a5ec48fac7d1250403d0742"}], "stats": {"total": 140, "additions": 93, "deletions": 47}, "files": [{"sha": "f6a7aef5cfc7f695e4974ad30400953ca5ddc6cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -1,3 +1,20 @@\n+2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (c_expand_expr): Fix prototype.\n+\t* c-common.h (c_expand_expr): Always declare, update.\n+\t* c-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n+\t* c-objc-common.c (c_objc_common_init): No global hook.\n+\t* expr.c (expand_expr): Use langhook.\n+\t* expr.h (enum expand_modifier): Conditionally declare.\n+\t* langhooks-def.h (lhd_expand_expr, LANG_HOOKS_EXPAND_EXPR): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.c (lhd_expand_expr): New.\n+\t* langhooks.h (struct lang_hooks): New hook.\n+\t* toplev.c (lang_expand_expr_t, lang_expand_expr): Delete.\n+\t(lang_independent_init): Don't default hook.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n+\n 2002-03-27  Richard Henderson  <rth@redhat.com>\n \n \tPR target/6054"}, {"sha": "03f747711e92e58572b4465448be6eec7f8f8a95", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -1,3 +1,9 @@\n+2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* misc.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n+\t(gnat_init): Don't set hook.\n+\t(gnat_expand_expr): Fix prototype.\n+\n 2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* misc.c (ggc_p): Remove."}, {"sha": "5a2c68ae4709e3d87c07b8c8f8ba82f7b08f1bb9", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -108,6 +108,8 @@ static void gnat_mark_tree\t\tPARAMS ((tree));\n #define LANG_HOOKS_HONOR_READONLY\t1\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR\t\tgnat_expand_expr\n #undef LANG_HOOKS_PRINT_DECL\n #define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n #undef LANG_HOOKS_PRINT_TYPE\n@@ -163,7 +165,7 @@ extern char **gnat_argv;\n \n static void internal_error_function\tPARAMS ((const char *, va_list *));\n static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t\t enum expand_modifier));\n+\t\t\t\t\t\t int));\n static void gnat_adjust_rli\t\tPARAMS ((record_layout_info));\n \f\n /* Declare functions we use as part of startup.  */\n@@ -358,8 +360,6 @@ gnat_init (filename)\n      Define the additional tree codes here.  This isn't the best place to put\n      it, but it's where g++ does it.  */\n \n-  lang_expand_expr = gnat_expand_expr;\n-\n   gnat_init_decl_processing ();\n \n   /* Add the input filename as the last argument.  */\n@@ -503,7 +503,7 @@ gnat_expand_expr (exp, target, tmode, modifier)\n      tree exp;\n      rtx target;\n      enum machine_mode tmode;\n-     enum expand_modifier modifier;\n+     int modifier;  /* Actually an enum expand_modifier.  */\n {\n   tree type = TREE_TYPE (exp);\n   tree new;"}, {"sha": "f699c86ca390996cac435970aa5207c75a5c158b", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -3588,7 +3588,7 @@ c_expand_expr (exp, target, tmode, modifier)\n      tree exp;\n      rtx target;\n      enum machine_mode tmode;\n-     enum expand_modifier modifier;\n+     int modifier;  /* Actually enum_modifier.  */\n {\n   switch (TREE_CODE (exp))\n     {"}, {"sha": "7b11f70779ac671071e24f5ea8d25d3f87d5dbde", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -842,12 +842,9 @@ extern tree finish_label_address_expr\t\tPARAMS ((tree));\n    different implementations.  Used in c-common.c.  */\n extern tree lookup_label\t\t\tPARAMS ((tree));\n \n-/* enum expand_modified is in expr.h, as is the macro below.  */\n-\n-#ifdef QUEUED_VAR\n-extern rtx c_expand_expr            PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t     enum expand_modifier));\n-#endif\n+extern rtx c_expand_expr\t\t\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t\t int));\n \n extern int c_safe_from_p                        PARAMS ((rtx, tree));\n "}, {"sha": "a41730cff7bbf207660a8f93e57d4ca6a19894fd", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -52,6 +52,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE c_mark_tree\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_STATICP"}, {"sha": "416a31042f377721d24c4a2e7f39c5019cefc506", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -225,7 +225,6 @@ c_objc_common_init (filename)\n   save_lang_status = &push_c_function_context;\n   restore_lang_status = &pop_c_function_context;\n   mark_lang_status = &mark_c_function_context;\n-  lang_expand_expr = c_expand_expr;\n   lang_expand_decl_stmt = c_expand_decl_stmt;\n \n   /* These were not defined in the Objective-C front end, but I'm"}, {"sha": "a9b75a9a83e6c2b87ff9eef1353af8645e931d32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -1,3 +1,13 @@\n+2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n+\t* cp-tree.h (init_cplus_expand): Remove.\n+\t(cxx_expand_expr): New.\n+\t* expr.c (cplus_expand_expr): Rename cxx_expand_expr,\n+\tfix prototype.\n+\t(init_cplus_expand): Remove.\n+\t* lex.c (cxx_init): Don't call init_cplus_expand.\n+\n 2002-03-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/4884."}, {"sha": "fd6c29f02dcca4abb8b10142f5fb00ea99971af5", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -49,6 +49,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n #undef LANG_HOOKS_EXPAND_CONSTANT\n #define LANG_HOOKS_EXPAND_CONSTANT cplus_expand_constant\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR cxx_expand_expr\n #undef LANG_HOOKS_SAFE_FROM_P\n #define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_PARSE_FILE"}, {"sha": "99cde0f8f3e93bf84721d491dbb497c70c475fbe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -3907,8 +3907,10 @@ extern void check_handlers\t\t\tPARAMS ((tree));\n extern void choose_personality_routine\t\tPARAMS ((enum languages));\n \n /* in expr.c */\n-extern void init_cplus_expand\t\t\tPARAMS ((void));\n extern int extract_init\t\t\t\tPARAMS ((tree, tree));\n+extern rtx cxx_expand_expr\t\t\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t\t int));\n extern tree cplus_expand_constant               PARAMS ((tree));\n \n /* friend.c */"}, {"sha": "1bb3869ecb497bd2e0873183c51297ebf13bab6b", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -32,9 +32,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"tm_p.h\"\n \n-static rtx cplus_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t    enum expand_modifier));\n-\n /* Hook used by output_constant to expand language-specific\n    constants.  */\n \n@@ -79,12 +76,12 @@ cplus_expand_constant (cst)\n \n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n-static rtx\n-cplus_expand_expr (exp, target, tmode, modifier)\n+rtx\n+cxx_expand_expr (exp, target, tmode, modifier)\n      tree exp;\n      rtx target;\n      enum machine_mode tmode;\n-     enum expand_modifier modifier;\n+     int modifier;  /* Actually an enum expand_modifier.  */\n {\n   tree type = TREE_TYPE (exp);\n   register enum machine_mode mode = TYPE_MODE (type);\n@@ -131,12 +128,6 @@ cplus_expand_expr (exp, target, tmode, modifier)\n   return NULL;\n }\n \n-void\n-init_cplus_expand ()\n-{\n-  lang_expand_expr = cplus_expand_expr;\n-}\n-\n int\n extract_init (decl, init)\n      tree decl ATTRIBUTE_UNUSED, init ATTRIBUTE_UNUSED;"}, {"sha": "f67ea2985688b666d0c3cd22f4b390c1782ad4f2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -647,7 +647,6 @@ cxx_init (filename)\n   init_reswords ();\n   init_spew ();\n   init_tree ();\n-  init_cplus_expand ();\n   init_cp_semantics ();\n \n   lang_unsafe_for_reeval = c_unsafe_for_reeval;"}, {"sha": "e83e1078bc463706de1367dc4c033843c4ec682c", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -7240,7 +7240,8 @@ expand_expr (exp, target, tmode, modifier)\n         {\n \t  if (DECL_BUILT_IN_CLASS (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n \t      == BUILT_IN_FRONTEND)\n-\t    return (*lang_expand_expr) (exp, original_target, tmode, modifier);\n+\t    return (*lang_hooks.expand_expr)\n+\t      (exp, original_target, tmode, modifier);\n \t  else\n \t    return expand_builtin (exp, target, subtarget, tmode, ignore);\n \t}\n@@ -8800,7 +8801,7 @@ expand_expr (exp, target, tmode, modifier)\n       abort ();\n \n     default:\n-      return (*lang_expand_expr) (exp, original_target, tmode, modifier);\n+      return (*lang_hooks.expand_expr) (exp, original_target, tmode, modifier);\n     }\n \n   /* Here to do an ordinary binary operator, generating an instruction"}, {"sha": "58cf198e3da238cd90bf5444cd97fe1155922032", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -1,3 +1,11 @@\n+2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c (java_lang_expand_expr): Rename java_expand_expr,\n+\tfix prototype.\n+\t* java-tree.h (java_lang_expand_expr): Similarly.\n+\t* lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n+\t(java_init): Don't set hook.\n+\n 2002-03-27  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tFix for PR java/5850:"}, {"sha": "a25140463f3b07196515734d88dc5d383dc7fdc1", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -2480,11 +2480,11 @@ get_primitive_array_vtable (tree elt)\n }\n \n struct rtx_def *\n-java_lang_expand_expr (exp, target, tmode, modifier)\n+java_expand_expr (exp, target, tmode, modifier)\n      register tree exp;\n      rtx target;\n      enum machine_mode tmode;\n-     enum expand_modifier modifier;\n+     int modifier; /* Actually an enum expand_modifier.  */\n {\n   tree current;\n "}, {"sha": "cf272fd6320f3e6b412416f1ae3e19ec93600905", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -1247,12 +1247,10 @@ extern void append_gpp_mangled_name PARAMS ((const char *, int));\n extern void add_predefined_file PARAMS ((tree));\n extern int predefined_filename_p PARAMS ((tree));\n \n-/* We use ARGS_SIZE_RTX to indicate that gcc/expr.h has been included\n-   to declare `enum expand_modifier'. */\n-#if defined (TREE_CODE) && defined(RTX_CODE) && defined (HAVE_MACHINE_MODES) && defined (ARGS_SIZE_RTX)\n-struct rtx_def * java_lang_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t       enum expand_modifier)); \n-#endif /* TREE_CODE && RTX_CODE && HAVE_MACHINE_MODES && ARGS_SIZE_RTX */\n+#if defined(RTX_CODE) && defined (HAVE_MACHINE_MODES)\n+struct rtx_def * java_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n+\t\t\t\t\t   int)); \n+#endif\n \n #define DECL_FINAL(DECL) DECL_LANG_FLAG_3 (DECL)\n "}, {"sha": "56f16195a0dbe8e29120edc14cfed3c5e14803c9", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -225,6 +225,8 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_PARSE_FILE java_parse_file\n #undef LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE java_mark_tree\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR java_expand_expr\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL java_dup_lang_specific_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n@@ -511,7 +513,6 @@ java_init (filename)\n   jcf_path_seal (version_flag);\n \n   print_error_function = lang_print_error;\n-  lang_expand_expr = java_lang_expand_expr;\n \n   java_init_decl_processing ();\n "}, {"sha": "974f86253607283a1d37f6c479e826aa5f7bc29c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -49,6 +49,7 @@ extern void lhd_clear_binding_stack PARAMS ((void));\n extern void lhd_print_tree_nothing PARAMS ((FILE *, tree, int));\n extern const char *lhd_decl_printable_name PARAMS ((tree, int));\n extern void lhd_set_yydebug PARAMS ((int));\n+extern rtx lhd_expand_expr PARAMS ((tree, rtx, enum machine_mode, int));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -78,6 +79,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_do_nothing\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n+#define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr\n #define LANG_HOOKS_SAFE_FROM_P\t\tlhd_safe_from_p\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n@@ -174,6 +176,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_CLEAR_BINDING_STACK, \\\n   LANG_HOOKS_GET_ALIAS_SET, \\\n   LANG_HOOKS_EXPAND_CONSTANT, \\\n+  LANG_HOOKS_EXPAND_EXPR, \\\n   LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_STATICP, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\"}, {"sha": "ec538b8c14d3173923a82840707f7a69a7a663e7", "filename": "gcc/langhooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -143,6 +143,18 @@ hook_get_alias_set_0 (t)\n   return 0;\n }\n \n+/* This is the default expand_expr function.  */\n+\n+rtx\n+lhd_expand_expr (t, r, mm, em)\n+     tree t ATTRIBUTE_UNUSED;\n+     rtx r ATTRIBUTE_UNUSED;\n+     enum machine_mode mm ATTRIBUTE_UNUSED;\n+     int em ATTRIBUTE_UNUSED;\n+{\n+  abort ();\n+}\n+\n /* This is the default decl_printable_name function.  */\n \n const char *"}, {"sha": "332ede8d32fa5d373ea9f67874de9f984305e03a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -21,6 +21,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_LANG_HOOKS_H\n #define GCC_LANG_HOOKS_H\n \n+/* This file should be #include-d after tree.h.  */\n+\n /* A print hook for print_tree ().  */\n typedef void (*lang_print_tree_hook) PARAMS ((FILE *, tree, int indent));\n \n@@ -159,6 +161,10 @@ struct lang_hooks\n      constant equivalent to its input.  */\n   tree (*expand_constant) PARAMS ((tree));\n \n+  /* Called by expand_expr for language-specific tree codes.\n+     Fourth argument is actually an enum expand_modifier.  */\n+  rtx (*expand_expr) PARAMS ((tree, rtx, enum machine_mode, int));\n+\n   /* Hook called by safe_from_p for language-specific tree codes.  It is\n      up to the language front-end to install a hook if it has any such\n      codes that safe_from_p needs to know about.  Since same_from_p will"}, {"sha": "702bbad632a550e302f98f8ae7a113f6620302f7", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -48,6 +48,8 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE c_mark_tree\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL"}, {"sha": "86d4d60762334b1a6c44d31c98d5175d080b52ce", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d892a83fc5ef512d01237b12c8b6c7dc3acdae/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c9d892a83fc5ef512d01237b12c8b6c7dc3acdae", "patch": "@@ -349,14 +349,6 @@ tree current_function_decl;\n    if none.  */\n tree current_function_func_begin_label;\n \n-/* Pointer to function to compute rtl for a language-specific tree code.  */\n-\n-typedef rtx (*lang_expand_expr_t)\n-  PARAMS ((union tree_node *, rtx, enum machine_mode,\n-\t  enum expand_modifier modifier));\n-\n-lang_expand_expr_t lang_expand_expr = 0;\n-\n /* Pointer to function to finish handling an incomplete decl at the\n    end of compilation.  */\n \n@@ -4945,8 +4937,6 @@ process_options ()\n static void\n lang_independent_init ()\n {\n-  lang_expand_expr = (lang_expand_expr_t) do_abort;\n-\n   /* Initialize the garbage-collector, and string pools.  */\n   init_ggc ();\n   ggc_add_rtx_root (&stack_limit_rtx, 1);"}]}