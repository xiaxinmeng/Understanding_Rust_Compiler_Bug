{"sha": "70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkOGQ5YmQ5M2Y3OTEyZTU2YTI3ZTY0YWJjOWUxZTg5NWZlMTQzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-04T09:53:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-04T09:53:28Z"}, "message": "lto: Ensure we force a change for file/line/column after clear_line_info\n\nAs discussed yesterday:\nOn the streamer out side, we call clear_line_info\nin multiple spots which resets the current_* values to something, but on the\nreader side, we don't have corresponding resets in the same location, just have\nthe stream_* static variables that keep the current values through the\nentire stream in (so across all the clear_line_info spots in a single LTO\nobject but also across jumping from one LTO object to another one).\nNow, in an earlier version of my patch it actually broke LTO bootstrap\n(and a lot of LTO testcases), so for the BLOCK case I've solved it by\nclear_line_info setting current_block to something that should never appear,\nwhich means that in the LTO stream after the clear_line_info spots including\nthe start of the LTO stream we force the block change bit to be set and thus\nBLOCK to be streamed and therefore stream_block from earlier to be\nignored.  But for the rest I think that is not the case, so I wonder if we\ndon't sometimes end up with wrong line/column info because of that, or\nplease tell me what prevents that.\nclear_line_info does:\n  ob->current_file = NULL;\n  ob->current_line = 0;\n  ob->current_col = 0;\n  ob->current_sysp = false;\nwhile I think NULL current_file is something that should likely be different\nfrom expanded_location (...).file (UNKNOWN_LOCATION/BUILTINS_LOCATION are\nhandled separately and not go through the caching), I think line number 0\ncan sometimes occur and especially column 0 occurs frequently if we ran out\nof location_t with columns info.  But then we do:\n      bp_pack_value (bp, ob->current_file != xloc.file, 1);\n      bp_pack_value (bp, ob->current_line != xloc.line, 1);\n      bp_pack_value (bp, ob->current_col != xloc.column, 1);\nand stream the details only if the != is true.  If that happens immediately\nafter clear_line_info and e.g. xloc.column is 0, we would stream 0 bit and\nnot stream the actual value, so on read-in it would reuse whatever\nstream_col etc. were before.  Shouldn't we set some ob->current_* new bit\nthat would signal we are immediately past clear_line_info which would force\nall these != checks to non-zero?  Either by oring something into those\ntests, or perhaps:\n  if (ob->current_reset)\n    {\n      if (xloc.file == NULL)\n        ob->current_file = \"\";\n      if (xloc.line == 0)\n        ob->current_line = 1;\n      if (xloc.column == 0)\n        ob->current_column = 1;\n      ob->current_reset = false;\n    }\nbefore doing those bp_pack_value calls with a comment, effectively forcing\nall 6 != comparisons to be true?\n\n2020-09-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* lto-streamer.h (struct output_block): Add reset_locus member.\n\t* lto-streamer-out.c (clear_line_info): Set reset_locus to true.\n\t(lto_output_location_1): If reset_locus, clear it and ensure\n\tcurrent_{file,line,col} is different from xloc members.", "tree": {"sha": "96f32c96dcbdcd412a1085f10351b26e1ad40f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f32c96dcbdcd412a1085f10351b26e1ad40f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d8d9bd93f7912e56a27e64abc9e1e895fe143a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a0f5373919deff68819de1db88c04261d61a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a0f5373919deff68819de1db88c04261d61a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a0f5373919deff68819de1db88c04261d61a87"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "b2d58106c49fed81f9366ca453d466c48f8bcff2", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d8d9bd93f7912e56a27e64abc9e1e895fe143a/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d8d9bd93f7912e56a27e64abc9e1e895fe143a/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "patch": "@@ -60,6 +60,7 @@ clear_line_info (struct output_block *ob)\n   ob->current_line = 0;\n   ob->current_col = 0;\n   ob->current_sysp = false;\n+  ob->reset_locus = true;\n   /* Initialize to something that will never appear as block,\n      so that the first location with block in a function etc.\n      always streams a change_block bit and the first block.  */\n@@ -195,6 +196,17 @@ lto_output_location_1 (struct output_block *ob, struct bitpack_d *bp,\n     {\n       expanded_location xloc = expand_location (loc);\n \n+      if (ob->reset_locus)\n+\t{\n+\t  if (xloc.file == NULL)\n+\t    ob->current_file = \"\";\n+\t  if (xloc.line == 0)\n+\t    ob->current_line = 1;\n+\t  if (xloc.column == 0)\n+\t    ob->current_col = 1;\n+\t  ob->reset_locus = false;\n+\t}\n+\n       bp_pack_value (bp, ob->current_file != xloc.file, 1);\n       bp_pack_value (bp, ob->current_line != xloc.line, 1);\n       bp_pack_value (bp, ob->current_col != xloc.column, 1);"}, {"sha": "470f6fbe0b7bb71e43f04c5245763b7c8113597f", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d8d9bd93f7912e56a27e64abc9e1e895fe143a/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d8d9bd93f7912e56a27e64abc9e1e895fe143a/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "patch": "@@ -717,6 +717,7 @@ struct output_block\n   int current_line;\n   int current_col;\n   bool current_sysp;\n+  bool reset_locus;\n   tree current_block;\n \n   /* Cache of nodes written in this section.  */"}]}