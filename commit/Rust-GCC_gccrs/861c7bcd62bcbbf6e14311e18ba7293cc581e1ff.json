{"sha": "861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxYzdiY2Q2MmJjYmJmNmUxNDMxMWUxOGJhNzI5M2NjNTgxZTFmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-05T21:13:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-05T21:13:43Z"}, "message": "re PR rtl-optimization/69691 (wrong code at -O2 on x86_64-linux-gnu)\n\n\tPR rtl-optimization/69691\n\t* lra-eliminations.c (move_plus_up): Don't add the addend twice.\n\n\t* gcc.c-torture/execute/pr69691.c: New test.\n\nFrom-SVN: r233187", "tree": {"sha": "84543eae7a1c294a2636eed0bf90ff081233edf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84543eae7a1c294a2636eed0bf90ff081233edf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5c1c988528a8761d802e923fe0a94160810c732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c1c988528a8761d802e923fe0a94160810c732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c1c988528a8761d802e923fe0a94160810c732"}], "stats": {"total": 138, "additions": 137, "deletions": 1}, "files": [{"sha": "5ad69839f8892f7050c78914480ed22f1ea84600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "patch": "@@ -1,3 +1,8 @@\n+2016-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/69691\n+\t* lra-eliminations.c (move_plus_up): Don't add the addend twice.\n+\n 2016-02-05  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/crypto.md (crypto_vpermxor_<mode>): Correct insn type."}, {"sha": "9ae5cfea5ab8d3faa0f9517bb59bd4d4836a0010", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "patch": "@@ -303,7 +303,8 @@ move_plus_up (rtx x)\n \t\t\t\t subreg_lowpart_offset (x_mode,\n \t\t\t\t\t\t\tsubreg_reg_mode));\n       if (cst && CONSTANT_P (cst))\n-\treturn gen_rtx_PLUS (x_mode, lowpart_subreg (x_mode, subreg_reg,\n+\treturn gen_rtx_PLUS (x_mode, lowpart_subreg (x_mode,\n+\t\t\t\t\t\t     XEXP (subreg_reg, 0),\n \t\t\t\t\t\t     subreg_reg_mode), cst);\n     }\n   return x;"}, {"sha": "abd315653795b6271b14daa0dcd94bc27d4b66a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "patch": "@@ -1,5 +1,8 @@\n 2016-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/69691\n+\t* gcc.c-torture/execute/pr69691.c: New test.\n+\n \tPR c++/69628\n \t* g++.dg/parse/pr69628.C: New test.\n "}, {"sha": "16b5556f2643cc56f7ed6c609818633f1610d85b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69691.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69691.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69691.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69691.c?ref=861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "patch": "@@ -0,0 +1,127 @@\n+/* PR rtl-optimization/69691 */\n+\n+char u[] = { 46, 97, 99, 104, 52, 0 };\n+char *v[] = { u, 0 };\n+struct S { char a[10]; struct S *b[31]; };\n+struct S r[7], *r2 = r;\n+static struct S *w = 0;\n+\n+__attribute__((noinline, noclone)) int\n+fn (int x)\n+{\n+  if (__builtin_strchr (u, x) || x == 96)\n+    return x;\n+  __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) int\n+foo (char x)\n+{\n+  if (x == 0)\n+    __builtin_abort ();\n+  if (fn (x) >= 96 && fn (x) <= 122)\n+    return (fn (x) - 96);\n+  else if (x == 46)\n+    return 0;\n+  else\n+    {\n+      __builtin_printf (\"foo %d\\n\", x);\n+      return -1;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (char **x)\n+{\n+  char **b, c, *d, e[500], *f, g[10];\n+  int z, l, h, i;\n+  struct S *s;\n+\n+  w = r2++;\n+  for (b = x; *b; b++)\n+    {\n+      __builtin_strcpy (e, *b);\n+      f = e;\n+      do\n+\t{\n+\t  d = __builtin_strchr (f, 32);\n+\t  if (d)\n+\t    *d = 0;\n+\t  l = __builtin_strlen (f);\n+\t  h = 0;\n+\t  s = w;\n+\t  __builtin_memset (g, 0, sizeof (g));\n+\t  for (z = 0; z < l; z++)\n+\t    {\n+\t      c = f[z];\n+\t      if (c >= 48 && c <= 57)\n+\t\tg[h] = c - 48;\n+\t      else\n+\t\t{\n+\t\t  i = foo (c);\n+\t\t  if (!s->b[i])\n+\t\t    {\n+\t\t      s->b[i] = r2++;\n+\t\t      if (r2 == &r[7])\n+\t\t\t__builtin_abort ();\n+\t\t    }\n+\t\t  s = s->b[i];\n+\t\t  h++;\n+\t\t}\n+\t    }\n+\t  __builtin_memcpy (s->a, g, 10);\n+\t  if (d)\n+\t    f = d + 1;\n+\t}\n+      while (d);\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+baz (char *x)\n+{\n+  char a[300], b[300];\n+  int z, y, t, l;\n+  struct S *s;\n+\n+  l = __builtin_strlen (x);\n+  *a = 96;\n+  for (z = 0; z < l; z++)\n+    {\n+      a[z + 1] = fn ((unsigned int) x[z]);\n+      if (foo (a[z + 1]) <= 0)\n+\treturn;\n+    }\n+  a[l + 1] = 96;\n+  l += 2;\n+  __builtin_memset (b, 0, l + 2);\n+\n+  if (!w)\n+    return;\n+\n+  for (z = 0; z < l; z++)\n+    {\n+      s = w;\n+      for (y = z; y < l; y++)\n+\t{\n+\t  s = s->b[foo (a[y])];\n+\t  if (!s)\n+\t    break;\n+\t  for (t = 0; t <= y - z + 2; t++)\n+\t    if (s->a[t] > b[z + t])\n+\t      b[z + t] = s->a[t];\n+\t}\n+    }\n+  for (z = 3; z < l - 2; z++)\n+    if ((b[z] & 1) == 1)\n+     asm (\"\");\n+}\n+\n+int\n+main ()\n+{\n+  bar (v);\n+  char c[] = { 97, 97, 97, 97, 97, 0 };\n+  baz (c);\n+  return 0;\n+}"}]}