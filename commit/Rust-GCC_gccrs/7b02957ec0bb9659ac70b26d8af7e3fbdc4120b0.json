{"sha": "7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwMjk1N2VjMGJiOTY1OWFjNzBiMjZkOGFmN2UzZmJkYzQxMjBiMA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-08-27T14:46:57Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-08-27T14:46:57Z"}, "message": "parse.y (check_deprecation): Handle TYPE_DECL in a special case...\n\n2001-08-24  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (check_deprecation): Handle TYPE_DECL in a special case,\n\tdon't report anything but deprecated class when marked so. Handle\n\tVAR_DECL.\n\t(patch_method_invocation): Check deprecation on methods and types.\n\t(patch_binop): code becomes an enum tree_code, added default: to\n\tswitch to handle that. Detect division by zero, try to fold and\n\treturn before using a subroutine.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-08/msg01495.html)\n\nFrom-SVN: r45187", "tree": {"sha": "152fb4a4d6d6ad312e62373637163f94729dcb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152fb4a4d6d6ad312e62373637163f94729dcb6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0/comments", "author": null, "committer": null, "parents": [{"sha": "763bb30cbef3217ab6b36688ff8c15ae765c9666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763bb30cbef3217ab6b36688ff8c15ae765c9666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763bb30cbef3217ab6b36688ff8c15ae765c9666"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "a54af0d14149df47b25c2bca39613280f5294409", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "patch": "@@ -1,3 +1,13 @@\n+2001-08-24  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (check_deprecation): Handle TYPE_DECL in a special case,\n+\tdon't report anything but deprecated class when marked so. Handle\n+\tVAR_DECL.\n+\t(patch_method_invocation): Check deprecation on methods and types.\n+\t(patch_binop): code becomes an enum tree_code, added default: to\n+\tswitch to handle that. Detect division by zero, try to fold and\n+\treturn before using a subroutine.\n+\n 2001-08-23  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* jcf-parse.c (yyparse): Set magic to 0, don't issue error for a"}, {"sha": "8a514837b3fa751f719df4267df1d8c8bb317665", "filename": "gcc/java/parse.y", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7b02957ec0bb9659ac70b26d8af7e3fbdc4120b0", "patch": "@@ -9938,18 +9938,23 @@ check_deprecation (wfl, decl)\n \t  strcpy (the, \"method\");\n \t  break;\n \tcase FIELD_DECL:\n+\tcase VAR_DECL:\n \t  strcpy (the, \"field\");\n \t  break;\n \tcase TYPE_DECL:\n-\t  strcpy (the, \"class\");\n-\t  break;\n+\t  parse_warning_context (wfl, \"The class `%s' has been deprecated\",\n+\t\t\t\t IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t  return;\n \tdefault:\n \t  abort ();\n \t}\n-      parse_warning_context \n-\t(wfl, \"The %s `%s' in class `%s' has been deprecated\", \n-\t the, lang_printable_name (decl, 0),\n-\t IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (decl)))));\n+      /* Don't issue a message if the context as been deprecated as a\n+         whole. */\n+      if (! CLASS_DEPRECATED (TYPE_NAME (DECL_CONTEXT (decl))))\n+\tparse_warning_context \n+\t  (wfl, \"The %s `%s' in class `%s' has been deprecated\", \n+\t   the, lang_printable_name (decl, 0),\n+\t   IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (decl)))));\n     }\n }\n \n@@ -10308,7 +10313,13 @@ patch_method_invocation (patch, primary, where, from_super,\n \t\t\t   access, what, klass, fct_name, refklass);\n       PATCH_METHOD_RETURN_ERROR ();\n     }\n-  check_deprecation (wfl, list);\n+\n+  /* Deprecation check: check whether the method being invoked or the\n+     instance-being-created's type are deprecated. */\n+  if (TREE_CODE (patch) == NEW_CLASS_EXPR)\n+    check_deprecation (wfl, TYPE_NAME (DECL_CONTEXT (list)));\n+  else\n+    check_deprecation (wfl, list);\n \n   /* If invoking a innerclass constructor, there are hidden parameters\n      to pass */\n@@ -13416,7 +13427,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n   tree op1_type = TREE_TYPE (op1);\n   tree op2_type = TREE_TYPE (op2);\n   tree prom_type = NULL_TREE, cn;\n-  int code = TREE_CODE (node);\n+  enum tree_code code = TREE_CODE (node);\n \n   /* If 1, tell the routine that we have to return error_mark_node\n      after checking for the initialization of the RHS */\n@@ -13462,10 +13473,33 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t  break;\n \t}\n       prom_type = binary_numeric_promotion (op1_type, op2_type, &op1, &op2);\n+\n+      /* Detect integral division by zero */\n+      if ((code == RDIV_EXPR || code == TRUNC_MOD_EXPR)\n+\t  && TREE_CODE (prom_type) == INTEGER_TYPE\n+\t  && (op2 == integer_zero_node || op2 == long_zero_node ||\n+\t      (TREE_CODE (op2) == INTEGER_CST &&\n+\t       ! TREE_INT_CST_LOW (op2)  && ! TREE_INT_CST_HIGH (op2))))\n+\t{\n+\t  parse_error_context (wfl_operator, \"Arithmetic exception\");\n+\t  error_found = 1;\n+\t}\n+\t  \n       /* Change the division operator if necessary */\n       if (code == RDIV_EXPR && TREE_CODE (prom_type) == INTEGER_TYPE)\n \tTREE_SET_CODE (node, TRUNC_DIV_EXPR);\n \n+      /* Before divisions as is disapear, try to simplify and bail if\n+         applicable, otherwise we won't perform even simple simplifications\n+\t like (1-1)/3. */\n+      if (code == RDIV_EXPR && TREE_CONSTANT (op1) && TREE_CONSTANT (op2))\n+\t{\n+\t  TREE_TYPE (node) = prom_type;\n+\t  node = fold (node);\n+\t  if (TREE_CODE (node) != code)\n+\t    return node;\n+\t}\n+\n       if (TREE_CODE (prom_type) == INTEGER_TYPE\n \t  && flag_use_divide_subroutine\n \t  && ! flag_emit_class_files\n@@ -13753,6 +13787,8 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t}\n       prom_type = boolean_type_node;\n       break;\n+    default:\n+      abort ();\n     }\n \n   if (error_found)"}]}