{"sha": "17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiNjQyNmNkYTYzZGZkNWY3OWU5OGRhNGQwZTgwYjVlMmJhYTc0Mg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-02-09T08:52:26Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-02-09T08:52:26Z"}, "message": "Fix GOMP/GOACC_parallel optimization in ipa-pta\n\n2016-02-09  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/69599\n\t* tree-ssa-structalias.c (fndecl_maybe_in_other_partition): New\n\tfunction.\n\t(find_func_aliases_for_builtin_call, find_func_clobbers)\n\t(ipa_pta_execute):  Handle case that foo and foo._0 are not in same lto\n\tpartition.\n\n\t* testsuite/libgomp.c/omp-nested-3.c: New test.\n\t* testsuite/libgomp.c/pr46032-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-2.c: New test.\n\nFrom-SVN: r233240", "tree": {"sha": "a53640e73561f39233aab57200e2532f657e2423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53640e73561f39233aab57200e2532f657e2423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/comments", "author": null, "committer": null, "parents": [{"sha": "7e1e8a0ae14583dced3eff91e9fc2a6c783e27de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1e8a0ae14583dced3eff91e9fc2a6c783e27de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1e8a0ae14583dced3eff91e9fc2a6c783e27de"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "c4ee0a04f9d8b16808d326f3572d75e2dbb42eaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -1,3 +1,12 @@\n+2016-02-09  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69599\n+\t* tree-ssa-structalias.c (fndecl_maybe_in_other_partition): New\n+\tfunction.\n+\t(find_func_aliases_for_builtin_call, find_func_clobbers)\n+\t(ipa_pta_execute):  Handle case that foo and foo._0 are not in same lto\n+\tpartition.\n+\n 2016-02-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69715"}, {"sha": "d7a7dc554e4d70862f384651ee4b1da3cc8c279f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -4162,6 +4162,18 @@ find_func_aliases_for_call_arg (varinfo_t fi, unsigned index, tree arg)\n     process_constraint (new_constraint (lhs, *rhsp));\n }\n \n+/* Return true if FNDECL may be part of another lto partition.  */\n+\n+static bool\n+fndecl_maybe_in_other_partition (tree fndecl)\n+{\n+  cgraph_node *fn_node = cgraph_node::get (fndecl);\n+  if (fn_node == NULL)\n+    return true;\n+\n+  return fn_node->in_other_partition;\n+}\n+\n /* Create constraints for the builtin call T.  Return true if the call\n    was handled, otherwise false.  */\n \n@@ -4537,6 +4549,10 @@ find_func_aliases_for_builtin_call (struct function *fn, gcall *t)\n \t      tree fnarg = gimple_call_arg (t, fnpos);\n \t      gcc_assert (TREE_CODE (fnarg) == ADDR_EXPR);\n \t      tree fndecl = TREE_OPERAND (fnarg, 0);\n+\t      if (fndecl_maybe_in_other_partition (fndecl))\n+\t\t/* Fallthru to general call handling.  */\n+\t\tbreak;\n+\n \t      tree arg = gimple_call_arg (t, argpos);\n \n \t      varinfo_t fi = get_vi_for_tree (fndecl);\n@@ -5113,6 +5129,10 @@ find_func_clobbers (struct function *fn, gimple *origt)\n \t      tree fnarg = gimple_call_arg (t, fnpos);\n \t      gcc_assert (TREE_CODE (fnarg) == ADDR_EXPR);\n \t      tree fndecl = TREE_OPERAND (fnarg, 0);\n+\t      if (fndecl_maybe_in_other_partition (fndecl))\n+\t\t/* Fallthru to general call handling.  */\n+\t\tbreak;\n+\n \t      varinfo_t cfi = get_vi_for_tree (fndecl);\n \n \t      tree arg = gimple_call_arg (t, argpos);\n@@ -7505,9 +7525,13 @@ ipa_pta_execute (void)\n \t address_taken bit for function foo._0, which would make it non-local.\n \t But for the purpose of ipa-pta, we can regard the run_on_threads call\n \t as a local call foo._0 (data),  so we ignore address_taken on nodes\n-\t with parallelized_function set.  */\n-      bool node_address_taken = (node->address_taken\n-\t\t\t\t && !node->parallelized_function);\n+\t with parallelized_function set.\n+\t Note: this is only safe, if foo and foo._0 are in the same lto\n+\t partition.  */\n+      bool node_address_taken = ((node->parallelized_function\n+\t\t\t\t  && !node->used_from_other_partition)\n+\t\t\t\t ? false\n+\t\t\t\t : node->address_taken);\n \n       /* For externally visible or attribute used annotated functions use\n \t local constraints for their arguments.\n@@ -7676,12 +7700,19 @@ ipa_pta_execute (void)\n \t\tcontinue;\n \n \t      /* Handle direct calls to functions with body.  */\n-\t      if (gimple_call_builtin_p (stmt, BUILT_IN_GOMP_PARALLEL))\n-\t\tdecl = TREE_OPERAND (gimple_call_arg (stmt, 0), 0);\n-\t      else if (gimple_call_builtin_p (stmt, BUILT_IN_GOACC_PARALLEL))\n-\t\tdecl = TREE_OPERAND (gimple_call_arg (stmt, 1), 0);\n-\t      else\n-\t\tdecl = gimple_call_fndecl (stmt);\n+\t      decl = gimple_call_fndecl (stmt);\n+\n+\t      {\n+\t\ttree called_decl = NULL_TREE;\n+\t\tif (gimple_call_builtin_p (stmt, BUILT_IN_GOMP_PARALLEL))\n+\t\t  called_decl = TREE_OPERAND (gimple_call_arg (stmt, 0), 0);\n+\t\telse if (gimple_call_builtin_p (stmt, BUILT_IN_GOACC_PARALLEL))\n+\t\t  called_decl = TREE_OPERAND (gimple_call_arg (stmt, 1), 0);\n+\n+\t\tif (called_decl != NULL_TREE\n+\t\t    && !fndecl_maybe_in_other_partition (called_decl))\n+\t\t  decl = called_decl;\n+\t      }\n \n \t      if (decl\n \t\t  && (fi = lookup_vi_for_tree (decl))"}, {"sha": "8f2018d1c615539ebfdf75fa79ec2285d0590bb2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -1,3 +1,11 @@\n+2016-02-09  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69599\n+\t* testsuite/libgomp.c/omp-nested-3.c: New test.\n+\t* testsuite/libgomp.c/pr46032-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-2.c: New test.\n+\n 2016-02-09  Tom de Vries  <tom@codesourcery.com>\n \n \tPR lto/69707"}, {"sha": "7790c58d5156ec5c084e3ed796101361948e829b", "filename": "libgomp/testsuite/libgomp.c/omp-nested-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.c%2Fomp-nested-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.c%2Fomp-nested-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fomp-nested-3.c?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do run { target lto } }\n+// { dg-additional-options \"-fipa-pta -flto -flto-partition=max\" }\n+\n+#include \"omp-nested-1.c\""}, {"sha": "1125f6ec2b2a26609e7f1369fe09bb2cf3f57256", "filename": "libgomp/testsuite/libgomp.c/pr46032-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr46032-2.c?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target lto } } */\n+/* { dg-options \"-O2 -ftree-vectorize -std=c99 -fipa-pta -flto -flto-partition=max\" } */\n+\n+#include \"pr46032.c\""}, {"sha": "f76c926a68f6d426be37fb09334562682f242057", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-2.c?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target lto } } */\n+/* { dg-additional-options \"-fipa-pta -flto -flto-partition=max\" } */\n+\n+#include \"kernels-1.c\""}, {"sha": "d9fff6ff39b9d088ca745cc59d2cf21534905ab1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b6426cda63dfd5f79e98da4d0e80b5e2baa742/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-2.c?ref=17b6426cda63dfd5f79e98da4d0e80b5e2baa742", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target lto } } */\n+/* { dg-additional-options \"-fipa-pta -flto -flto-partition=max\" } */\n+\n+#include \"parallel-1.c\""}]}