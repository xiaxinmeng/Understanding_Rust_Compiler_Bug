{"sha": "7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1MjI1N2NmYTU1NTgxMmM2NzU1ZGQ2OWYyMWVlOTJlN2QyYmQ1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-25T15:16:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-25T15:16:44Z"}, "message": "[multiple changes]\n\n2015-11-25  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_util.adb (Remove_Side_Effects): Minimize extra temporaries\n\tand use of 'Reference when needed.\n\n2015-11-25  Doug Rupp  <rupp@adacore.com>\n\n\t* sigtramp-vxworks-target.inc (__x86_64__): Restore context for the\n\tsake of uniformity.\n\t* init.c (__gnat_inum_to_ivec): Add some casting to avoid\n\twarnings when sizeof(long) != sizeof(int)\n\n2015-11-25  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-spark_specific.adb (SPARK_Entities): Add entries for\n\tconsideration.\n\t(Add_SPARK_Scope): Take tasks into account.\n\t(Detect_And_Add_SPARK_Scope): Take tasks into account.\n\t(Enclosing_Subprogram_Or_Library_Package): Take tasks into account.\n\nFrom-SVN: r230878", "tree": {"sha": "8d535f154978a199ca451ad1d97e0e1958f471f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d535f154978a199ca451ad1d97e0e1958f471f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/comments", "author": null, "committer": null, "parents": [{"sha": "e9c12b91f480ce15810dc0be2afc174899f4eea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c12b91f480ce15810dc0be2afc174899f4eea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c12b91f480ce15810dc0be2afc174899f4eea7"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "db50698b443891b62bffe30006fbf838515a8b14", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "patch": "@@ -1,3 +1,23 @@\n+2015-11-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Minimize extra temporaries\n+\tand use of 'Reference when needed.\n+\n+2015-11-25  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sigtramp-vxworks-target.inc (__x86_64__): Restore context for the\n+\tsake of uniformity.\n+\t* init.c (__gnat_inum_to_ivec): Add some casting to avoid\n+\twarnings when sizeof(long) != sizeof(int)\n+\n+2015-11-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb (SPARK_Entities): Add entries for\n+\tconsideration.\n+\t(Add_SPARK_Scope): Take tasks into account.\n+\t(Detect_And_Add_SPARK_Scope): Take tasks into account.\n+\t(Enclosing_Subprogram_Or_Library_Package): Take tasks into account.\n+\n 2015-11-25  Bob Duff  <duff@adacore.com>\n \n \t* sem_elab.adb (Check_Internal_Call_Continue): Code clean ups."}, {"sha": "55836e102efc00269064776131216825280ef482", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "patch": "@@ -7816,9 +7816,10 @@ package body Exp_Util is\n       else\n          --  An expression which is in SPARK mode is considered side effect\n          --  free if the resulting value is captured by a variable or a\n-         --  constant.\n+         --  constant. Same reasoning when generating C code.\n+         --  Why can't we apply this test in general???\n \n-         if GNATprove_Mode\n+         if (GNATprove_Mode or Generate_C_Code)\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n          then\n             goto Leave;\n@@ -7862,8 +7863,10 @@ package body Exp_Util is\n          --  the secondary stack. Since SPARK (and why) cannot process access\n          --  types, use a different approach which ignores the secondary stack\n          --  and \"copies\" the returned object.\n+         --  When generating C code, no need for a 'reference since the\n+         --  secondary stack is not supported.\n \n-         if GNATprove_Mode then\n+         if GNATprove_Mode or Generate_C_Code then\n             Res := New_Occurrence_Of (Def_Id, Loc);\n             Ref_Type := Exp_Type;\n \n@@ -7898,10 +7901,10 @@ package body Exp_Util is\n          else\n             E := Relocate_Node (E);\n \n-            --  Do not generate a 'reference in SPARK mode since the access\n-            --  type is not created in the first place.\n+            --  Do not generate a 'reference in SPARK mode or C generation\n+            --  since the access type is not created in the first place.\n \n-            if GNATprove_Mode then\n+            if GNATprove_Mode or Generate_C_Code then\n                New_Exp := E;\n \n             --  Otherwise generate reference, marking the value as non-null"}, {"sha": "2f01c8dce7cc5e293bea951f950d02d9255abd4a", "filename": "gcc/ada/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "patch": "@@ -1732,7 +1732,7 @@ extern int __gnat_inum_to_ivec (int);\n int\n __gnat_inum_to_ivec (int num)\n {\n-  return (int) INUM_TO_IVEC (num);\n+  return (int) ((long) INUM_TO_IVEC ((long) num));\n }\n #endif\n \n@@ -1985,14 +1985,14 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n #ifdef HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n   /* We need to sometimes to adjust the PC in case of signals so that it\n      doesn't reference the exception that actually raised the signal but the\n-     instruction before it. */\n+     instruction before it.  */\n   __gnat_adjust_context_for_raise (sig, sc);\n #endif\n \n #if defined (__i386__) && !defined (VTHREADS) && (__WRS_VXWORKS_MAJOR < 7)\n    /* On x86, the vxsim signal context is subtly different and is processeed\n       by a handler compiled especially for vxsim.\n-      Vxsim is not supported anymore on our vxworks-7 port. */\n+      Vxsim is not supported anymore on our vxworks-7 port.  */\n \n   if (is_vxsim)\n     __gnat_vxsim_error_handler (sig, si, sc);\n@@ -2115,9 +2115,9 @@ __gnat_init_float (void)\n #endif\n #endif\n \n-#if defined (__i386__) && !defined (VTHREADS)\n+#if (defined (__i386__) && !defined (VTHREADS))\n   /* This is used to properly initialize the FPU on an x86 for each\n-     process thread.  */\n+     process thread. Is this needed for x86_64 ???  */\n   asm (\"finit\");\n #endif\n "}, {"sha": "b570725369ce7224eb1c5c308c7db9ec5fae60c5", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "patch": "@@ -40,6 +40,7 @@ package body SPARK_Specific is\n \n    SPARK_Entities : constant array (Entity_Kind) of Boolean :=\n      (E_Constant         => True,\n+      E_Entry            => True,\n       E_Function         => True,\n       E_In_Out_Parameter => True,\n       E_In_Parameter     => True,\n@@ -268,7 +269,7 @@ package body SPARK_Specific is\n          =>\n             Typ := Xref_Entity_Letters (Ekind (E));\n \n-         when E_Package_Body | E_Subprogram_Body =>\n+         when E_Package_Body | E_Subprogram_Body | E_Task_Body =>\n             Typ := Xref_Entity_Letters (Ekind (Unique_Entity (E)));\n \n          when E_Void =>\n@@ -1006,14 +1007,19 @@ package body SPARK_Specific is\n \n    procedure Detect_And_Add_SPARK_Scope (N : Node_Id) is\n    begin\n-      if Nkind_In (N, N_Entry_Body,\n-                      N_Entry_Declaration,\n-                      N_Package_Body,\n+      if Nkind_In (N, N_Entry_Body,             --  entries\n+                      N_Entry_Declaration)\n+           or else\n+         Nkind_In (N, N_Package_Body,           --  packages\n                       N_Package_Body_Stub,\n-                      N_Package_Declaration,\n-                      N_Subprogram_Body,\n+                      N_Package_Declaration)\n+           or else\n+         Nkind_In (N, N_Subprogram_Body,        --  subprograms\n                       N_Subprogram_Body_Stub,\n                       N_Subprogram_Declaration)\n+           or else\n+         Nkind_In (N, N_Task_Body,              --  tasks\n+                      N_Task_Body_Stub)\n       then\n          Add_SPARK_Scope (N);\n       end if;\n@@ -1105,6 +1111,10 @@ package body SPARK_Specific is\n                Result := Defining_Identifier (Result);\n                exit;\n \n+            when N_Task_Body =>\n+               Result := Defining_Identifier (Result);\n+               exit;\n+\n             when others =>\n                Result := Parent (Result);\n          end case;"}, {"sha": "a031360cd21852ec5995fb41f55f39b7337816d2", "filename": "gcc/ada/sigtramp-vxworks-target.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b52257cfa555812c6755dd69f21ee92e7d2bd5b/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-target.inc?ref=7b52257cfa555812c6755dd69f21ee92e7d2bd5b", "patch": "@@ -441,6 +441,7 @@ TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\\n TCR(\"# arguments are the same as those we received\") \\\n TCR(\"call\t*%rcx\") \\\n TCR(\"# This part should never be executed\") \\\n+TCR(\"addq\t$8, %rsp\") \\\n TCR(\"ret\")\n \n #else"}]}