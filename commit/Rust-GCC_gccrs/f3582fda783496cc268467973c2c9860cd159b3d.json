{"sha": "f3582fda783496cc268467973c2c9860cd159b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1ODJmZGE3ODM0OTZjYzI2ODQ2Nzk3M2MyYzk4NjBjZDE1OWIzZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T16:26:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T16:26:47Z"}, "message": "[AArch64] Pass a mode to some SVE immediate queries\n\nIt helps the SVE2 ACLE support if aarch64_sve_arith_immediate_p and\naarch64_sve_sqadd_sqsub_immediate_p accept scalars as well as vectors.\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_sve_arith_immediate_p)\n\t(aarch64_sve_sqadd_sqsub_immediate_p): Add a machine_mode argument.\n\t* config/aarch64/aarch64.c (aarch64_sve_arith_immediate_p)\n\t(aarch64_sve_sqadd_sqsub_immediate_p): Likewise.  Handle scalar\n\timmediates as well as vector ones.\n\t* config/aarch64/predicates.md (aarch64_sve_arith_immediate)\n\t(aarch64_sve_sub_arith_immediate, aarch64_sve_qadd_immediate)\n\t(aarch64_sve_qsub_immediate): Update calls accordingly.\n\nFrom-SVN: r280059", "tree": {"sha": "fe38d67353be9f645aed09379e1ca6a25d349136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe38d67353be9f645aed09379e1ca6a25d349136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3582fda783496cc268467973c2c9860cd159b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582fda783496cc268467973c2c9860cd159b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3582fda783496cc268467973c2c9860cd159b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582fda783496cc268467973c2c9860cd159b3d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df0f21028edd919421080f52a99a9b400ba8ba08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0f21028edd919421080f52a99a9b400ba8ba08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0f21028edd919421080f52a99a9b400ba8ba08"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "de59d4c098528ab305153e8a783717ed6a8f56be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3582fda783496cc268467973c2c9860cd159b3d", "patch": "@@ -1,3 +1,14 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_sve_arith_immediate_p)\n+\t(aarch64_sve_sqadd_sqsub_immediate_p): Add a machine_mode argument.\n+\t* config/aarch64/aarch64.c (aarch64_sve_arith_immediate_p)\n+\t(aarch64_sve_sqadd_sqsub_immediate_p): Likewise.  Handle scalar\n+\timmediates as well as vector ones.\n+\t* config/aarch64/predicates.md (aarch64_sve_arith_immediate)\n+\t(aarch64_sve_sub_arith_immediate, aarch64_sve_qadd_immediate)\n+\t(aarch64_sve_qsub_immediate): Update calls accordingly.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve2.md: Add banner comments."}, {"sha": "3c9e5da6e15820a25a3012a4dad66c31959f4997", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f3582fda783496cc268467973c2c9860cd159b3d", "patch": "@@ -550,8 +550,8 @@ bool aarch64_simd_valid_immediate (rtx, struct simd_immediate_info *,\n \t\t\tenum simd_immediate_check w = AARCH64_CHECK_MOV);\n rtx aarch64_check_zero_based_sve_index_immediate (rtx);\n bool aarch64_sve_index_immediate_p (rtx);\n-bool aarch64_sve_arith_immediate_p (rtx, bool);\n-bool aarch64_sve_sqadd_sqsub_immediate_p (rtx, bool);\n+bool aarch64_sve_arith_immediate_p (machine_mode, rtx, bool);\n+bool aarch64_sve_sqadd_sqsub_immediate_p (machine_mode, rtx, bool);\n bool aarch64_sve_bitmask_immediate_p (rtx);\n bool aarch64_sve_dup_immediate_p (rtx);\n bool aarch64_sve_cmp_immediate_p (rtx, bool);"}, {"sha": "f83764fc420f799bc3fca556cd03168739985e61", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f3582fda783496cc268467973c2c9860cd159b3d", "patch": "@@ -16407,46 +16407,40 @@ aarch64_sve_index_immediate_p (rtx base_or_step)\n \t  && IN_RANGE (INTVAL (base_or_step), -16, 15));\n }\n \n-/* Return true if X is a valid immediate for the SVE ADD and SUB\n-   instructions.  Negate X first if NEGATE_P is true.  */\n+/* Return true if X is a valid immediate for the SVE ADD and SUB instructions\n+   when applied to mode MODE.  Negate X first if NEGATE_P is true.  */\n \n bool\n-aarch64_sve_arith_immediate_p (rtx x, bool negate_p)\n+aarch64_sve_arith_immediate_p (machine_mode mode, rtx x, bool negate_p)\n {\n-  rtx elt;\n-\n-  if (!const_vec_duplicate_p (x, &elt)\n-      || !CONST_INT_P (elt))\n+  rtx elt = unwrap_const_vec_duplicate (x);\n+  if (!CONST_INT_P (elt))\n     return false;\n \n   HOST_WIDE_INT val = INTVAL (elt);\n   if (negate_p)\n     val = -val;\n-  val &= GET_MODE_MASK (GET_MODE_INNER (GET_MODE (x)));\n+  val &= GET_MODE_MASK (GET_MODE_INNER (mode));\n \n   if (val & 0xff)\n     return IN_RANGE (val, 0, 0xff);\n   return IN_RANGE (val, 0, 0xff00);\n }\n \n /* Return true if X is a valid immediate for the SVE SQADD and SQSUB\n-   instructions.  Negate X first if NEGATE_P is true.  */\n+   instructions when applied to mode MODE.  Negate X first if NEGATE_P\n+   is true.  */\n \n bool\n-aarch64_sve_sqadd_sqsub_immediate_p (rtx x, bool negate_p)\n+aarch64_sve_sqadd_sqsub_immediate_p (machine_mode mode, rtx x, bool negate_p)\n {\n-  rtx elt;\n-\n-  if (!const_vec_duplicate_p (x, &elt)\n-      || !CONST_INT_P (elt))\n-    return false;\n-\n-  if (!aarch64_sve_arith_immediate_p (x, negate_p))\n+  if (!aarch64_sve_arith_immediate_p (mode, x, negate_p))\n     return false;\n \n   /* After the optional negation, the immediate must be nonnegative.\n      E.g. a saturating add of -127 must be done via SQSUB Zn.B, Zn.B, #127\n      instead of SQADD Zn.B, Zn.B, #129.  */\n+  rtx elt = unwrap_const_vec_duplicate (x);\n   return negate_p == (INTVAL (elt) < 0);\n }\n "}, {"sha": "8e8c5ee5cd8e0daa932db437edf8af0cafa148a8", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582fda783496cc268467973c2c9860cd159b3d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=f3582fda783496cc268467973c2c9860cd159b3d", "patch": "@@ -636,19 +636,19 @@\n \n (define_predicate \"aarch64_sve_arith_immediate\"\n   (and (match_code \"const,const_vector\")\n-       (match_test \"aarch64_sve_arith_immediate_p (op, false)\")))\n+       (match_test \"aarch64_sve_arith_immediate_p (mode, op, false)\")))\n \n (define_predicate \"aarch64_sve_sub_arith_immediate\"\n   (and (match_code \"const,const_vector\")\n-       (match_test \"aarch64_sve_arith_immediate_p (op, true)\")))\n+       (match_test \"aarch64_sve_arith_immediate_p (mode, op, true)\")))\n \n (define_predicate \"aarch64_sve_qadd_immediate\"\n   (and (match_code \"const,const_vector\")\n-       (match_test \"aarch64_sve_sqadd_sqsub_immediate_p (op, false)\")))\n+       (match_test \"aarch64_sve_sqadd_sqsub_immediate_p (mode, op, false)\")))\n \n (define_predicate \"aarch64_sve_qsub_immediate\"\n   (and (match_code \"const,const_vector\")\n-       (match_test \"aarch64_sve_sqadd_sqsub_immediate_p (op, true)\")))\n+       (match_test \"aarch64_sve_sqadd_sqsub_immediate_p (mode, op, true)\")))\n \n (define_predicate \"aarch64_sve_vector_inc_dec_immediate\"\n   (and (match_code \"const,const_vector\")"}]}