{"sha": "fbfe8c9e5ab2168a5776947525909c485afe39f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmZThjOWU1YWIyMTY4YTU3NzY5NDc1MjU5MDljNDg1YWZlMzlmMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-03-01T14:01:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-03-01T14:01:39Z"}, "message": "Implement using decls inside template functions.\n\ncp:\n\tImplement using decls inside template functions.\n\t* decl2.c (validate_nonmember_using_decl): Don't special case\n\tfake_std_node in the global namespace. Don't reject early when\n\tprocessing a template.\n\t(do_local_using_decl): Add to statement tree. Don't do further\n\tprocessing when building a template.\n\t* pt.c (tsubst_expr, DECL_STMT case): Deal with USING_DECLs.\ntestsuite:\n\t* g++.old-deja/g++.pt/using1.C: New test.\n\nFrom-SVN: r40151", "tree": {"sha": "a3ac89d597d4b0217d02828d183a010e6bea8ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ac89d597d4b0217d02828d183a010e6bea8ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbfe8c9e5ab2168a5776947525909c485afe39f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfe8c9e5ab2168a5776947525909c485afe39f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfe8c9e5ab2168a5776947525909c485afe39f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfe8c9e5ab2168a5776947525909c485afe39f3/comments", "author": null, "committer": null, "parents": [{"sha": "4d24a8896575dfb50d733d1213dbe00bb6df3ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d24a8896575dfb50d733d1213dbe00bb6df3ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d24a8896575dfb50d733d1213dbe00bb6df3ab3"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "053c227cf6240db85674f60d3f629fa9d5a15817", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbfe8c9e5ab2168a5776947525909c485afe39f3", "patch": "@@ -1,3 +1,13 @@\n+2001-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tImplement using decls inside template functions.\n+\t* decl2.c (validate_nonmember_using_decl): Don't special case\n+\tfake_std_node in the global namespace. Don't reject early when\n+\tprocessing a template.\n+\t(do_local_using_decl): Add to statement tree. Don't do further\n+\tprocessing when building a template.\n+\t* pt.c (tsubst_expr, DECL_STMT case): Deal with USING_DECLs.\n+\n 2001-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl2.c (do_nonmember_using_decl): Don't complain if we find"}, {"sha": "000eb78ee6a097845d92e5946a6ada9d0b917100", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fbfe8c9e5ab2168a5776947525909c485afe39f3", "patch": "@@ -5032,16 +5032,6 @@ validate_nonmember_using_decl (decl, scope, name)\n   if (TREE_CODE (decl) == SCOPE_REF\n       && TREE_OPERAND (decl, 0) == fake_std_node)\n     {\n-      if (namespace_bindings_p ()\n-\t  && current_namespace == global_namespace)\n-\t/* There's no need for a using declaration at all, here,\n-\t   since `std' is the same as `::'.  We can't just pass this\n-\t   on because we'll complain later about declaring something\n-\t   in the same scope as a using declaration with the same\n-\t   name.  We return NULL_TREE which indicates to the caller\n-\t   that there's no need to do any further processing.  */\n-\treturn NULL_TREE;\n-\n       *scope = global_namespace;\n       *name = TREE_OPERAND (decl, 1);\n     }\n@@ -5054,7 +5044,8 @@ validate_nonmember_using_decl (decl, scope, name)\n \n \t A using-declaration for a class member shall be a\n \t member-declaration.  */\n-      if (TREE_CODE (*scope) != NAMESPACE_DECL)\n+      if (!processing_template_decl\n+          && TREE_CODE (*scope) != NAMESPACE_DECL)\n \t{\n \t  if (TYPE_P (*scope))\n \t    cp_error (\"`%T' is not a namespace\", *scope);\n@@ -5212,6 +5203,12 @@ do_local_using_decl (decl)\n   if (decl == NULL_TREE)\n     return;\n \n+  if (building_stmt_tree ()\n+      && at_function_scope_p ())\n+    add_decl_stmt (decl);\n+  if (processing_template_decl)\n+    return;\n+\n   oldval = lookup_name_current_level (name);\n   oldtype = lookup_type_current_level (name);\n "}, {"sha": "0994d670cc88a55da0af5b94e55f8b0f33238ccd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fbfe8c9e5ab2168a5776947525909c485afe39f3", "patch": "@@ -7299,6 +7299,14 @@ tsubst_expr (t, args, complain, in_decl)\n \tdecl = DECL_STMT_DECL (t);\n \tif (TREE_CODE (decl) == LABEL_DECL)\n \t  finish_label_decl (DECL_NAME (decl));\n+\telse if (TREE_CODE (decl) == USING_DECL)\n+\t  {\n+\t    tree scope = DECL_INITIAL (decl);\n+\t    tree name = DECL_NAME (decl);\n+\t    \n+\t    scope = tsubst_expr (scope, args, complain, in_decl);\n+\t    do_local_using_decl (build_nt (SCOPE_REF, scope, name));\n+\t  }\n \telse\n \t  {\n \t    init = DECL_INITIAL (decl);"}, {"sha": "0a1a3ecaf408f27a76e352cb23ee01507c52408c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbfe8c9e5ab2168a5776947525909c485afe39f3", "patch": "@@ -1,3 +1,7 @@\n+2001-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/using1.C: New test.\n+\n 2001-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/using9.C: New test."}, {"sha": "eca6c5012144f0c5f3337b91be09f59d4ba5158f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/using1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fusing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfe8c9e5ab2168a5776947525909c485afe39f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fusing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fusing1.C?ref=fbfe8c9e5ab2168a5776947525909c485afe39f3", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Feb 2001 <nathan@codesourcery.com>\n+\n+// Bug 1981. using declarations in namespace scope were not remembered.\n+\n+namespace A\n+{\n+  void swap () {}\n+};\n+\n+template <class T> void f()\n+{\n+  using A::swap;\n+}\n+\n+template void f<float> ();\n+\n+namespace B\n+{\n+  int foo (int) { return 1;}\n+  \n+  template <class T> int baz ()\n+  {\n+    using ::foo;\n+    \n+    return foo (1);\n+  }\n+  template int baz<float> ();\n+};\n+\n+int foo (int) { return 0;}\n+\n+int main ()\n+{\n+  return B::baz<float> ();\n+}"}]}