{"sha": "726540aa29ba5d46a4028852d937ab889be941d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2NTQwYWEyOWJhNWQ0NmE0MDI4ODUyZDkzN2FiODg5YmU5NDFkOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-08-09T22:07:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-08-09T22:07:55Z"}, "message": "devirt-35.C: Fix template.\n\n\n\t* g++.dg/ipa/devirt-35.C: Fix template.\n\t* g++.dg/ipa/devirt-36.C: Likewise.\n\t* g++.dg/ipa/devirt-37.C: New testcase.\n\t* ipa-devirt.c (get_dynamic_type): Handle case when instance is in\n\tDECL correctly; do not give up on types in static storage.\n\nFrom-SVN: r213781", "tree": {"sha": "f766c9e6c63fdc2649a1496d7e34bbb9a9a0a8d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f766c9e6c63fdc2649a1496d7e34bbb9a9a0a8d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/726540aa29ba5d46a4028852d937ab889be941d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726540aa29ba5d46a4028852d937ab889be941d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726540aa29ba5d46a4028852d937ab889be941d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726540aa29ba5d46a4028852d937ab889be941d8/comments", "author": null, "committer": null, "parents": [{"sha": "83a4216dd29316ed9a95931b306ea415664acf51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4216dd29316ed9a95931b306ea415664acf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a4216dd29316ed9a95931b306ea415664acf51"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "36619f1b1a13e38015c697ea98650cadcfe5db69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -1,3 +1,8 @@\n+2014-08-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (get_dynamic_type): Handle case when instance is in\n+\tDECL correctly; do not give up on types in static storage.\n+\n 2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* doc/invoke.texi ([Wnarrowing]): Update for non-constants in C++11."}, {"sha": "3650b43e8a123211d9e41961110add708c4b7eae", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -2799,10 +2799,12 @@ get_dynamic_type (tree instance,\n \t\t  /* Finally verify that what we found looks like read from OTR_OBJECT\n \t\t     or from INSTANCE with offset OFFSET.  */\n \t\t  if (base_ref\n-\t\t      && TREE_CODE (base_ref) == MEM_REF\n-\t\t      && ((offset2 == context->offset\n-\t\t           && TREE_OPERAND (base_ref, 0) == instance)\n-\t\t\t  || (!offset2 && TREE_OPERAND (base_ref, 0) == otr_object)))\n+\t\t      && ((TREE_CODE (base_ref) == MEM_REF\n+\t\t           && ((offset2 == context->offset\n+\t\t                && TREE_OPERAND (base_ref, 0) == instance)\n+\t\t\t       || (!offset2 && TREE_OPERAND (base_ref, 0) == otr_object)))\n+\t\t\t  || (DECL_P (instance) && base_ref == instance\n+\t\t\t      && offset2 == context->offset)))\n \t\t    {\n \t\t      stmt = SSA_NAME_DEF_STMT (ref);\n \t\t      instance_ref = ref_exp;\n@@ -2923,7 +2925,14 @@ get_dynamic_type (tree instance,\n       && !function_entry_reached\n       && !tci.multiple_types_encountered)\n     {\n-      if (!tci.speculative)\n+      if (!tci.speculative\n+\t  /* Again in instances located in static storage we are interested only\n+\t     in constructor stores.  */\n+\t  || (context->outer_type\n+\t      && !tci.seen_unanalyzed_store\n+\t      && context->offset == tci.offset\n+\t      && types_same_for_odr (tci.known_current_type,\n+\t\t\t\t     context->outer_type)))\n \t{\n \t  context->outer_type = tci.known_current_type;\n \t  context->offset = tci.known_current_offset;"}, {"sha": "9fe57147ca5f8987e992a7b1ad91c26a784864be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -1,3 +1,9 @@\n+2014-08-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/devirt-35.C: Fix template.\n+\t* g++.dg/ipa/devirt-36.C: Likewise.\n+\t* g++.dg/ipa/devirt-37.C: New testcase.\n+\n 2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/Wnarrowing1.C: Adjust for errors."}, {"sha": "07383ed795bf6e15bc71bbd9f7728770e41c97ea", "filename": "gcc/testsuite/g++.dg/ipa/devirt-35.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-35.C?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -15,9 +15,9 @@ m(struct B *b)\n                   //  test2 may change the type of A by placement new.\n                   // C++ standard is bit imprecise about this.\n }\n-/* { dg-final { scan-ipa-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n /* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\"  } } */\n /* { dg-final { scan-ipa-dump \"1 speculatively devirtualized\"  \"devirt\"  } } */\n /* { dg-final { cleanup-ipa-dump \"devirt\" } } */\n-/* { dg-final { cleanup-tree-dump \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */\n "}, {"sha": "6d7206c11603ea5e468fd2efc9c7ec58a7ef3e40", "filename": "gcc/testsuite/g++.dg/ipa/devirt-36.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-36.C?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -17,9 +17,9 @@ m(struct B *b)\n                   //  test2 may change the type of A by placement new.\n                   // C++ standard is bit imprecise about this.\n }\n-/* { dg-final { scan-ipa-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual int B::t\"  \"fre1\"  } } */\n /* { dg-final { scan-ipa-dump \"to virtual int B::t\"  \"devirt\"  } } */\n /* { dg-final { scan-ipa-dump \"1 speculatively devirtualized\"  \"devirt\"  } } */\n /* { dg-final { cleanup-ipa-dump \"devirt\" } } */\n-/* { dg-final { cleanup-tree-dump \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */\n "}, {"sha": "15766feb970a6eb1b001acc8d9546de6d2eff25e", "filename": "gcc/testsuite/g++.dg/ipa/devirt-37.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726540aa29ba5d46a4028852d937ab889be941d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C?ref=726540aa29ba5d46a4028852d937ab889be941d8", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-options \"-fpermissive -fno-indirect-inlining -fno-devirtualize-speculatively -fdump-tree-fre2-details\"  } */\n+#include <stdlib.h>\n+struct A {virtual void test() {abort ();}};\n+struct B:A\n+   {virtual void test() {}\n+    B();\n+    B(void (*test)(struct A *));};\n+\n+void extcall(void);\n+\n+inline void tt(struct A *a)\n+{\n+  a->test();\n+}\n+\n+B::B (void (*test)(struct A *))\n+{\n+  struct B c;\n+  struct A *a=this;\n+  extcall();\n+  test(a);\n+}\n+void\n+t()\n+{\n+  struct B b(tt);\n+}\n+/* After inlining the call within constructor needs to be checked to not go into a basetype.\n+   We should see the vtbl store and we should notice extcall as possibly clobbering the\n+   type but ignore it because b is in static storage.  */\n+/* { dg-final { scan-tree-dump \"Determined dynamic type.\"  \"fre2\"  } } */\n+/* { dg-final { scan-tree-dump \"Checking vtbl store:\"  \"fre2\"  } } */\n+/* { dg-final { scan-tree-dump \"Function call may change dynamic type:extcall\"  \"fre2\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual void\"  \"fre2\"  } } */\n+/* { dg-final { cleanup-tree-dump \"fre2\" } } */"}]}