{"sha": "1c8b8efa5becb70e04216a60021b835387ffea4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4YjhlZmE1YmVjYjcwZTA0MjE2YTYwMDIxYjgzNTM4N2ZmZWE0ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T16:39:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T16:49:26Z"}, "message": "c++: A couple of template instantiation cleanups\n\nI noticed that we were handling lambda extra scope during template\ninstantiation in a different order to how we handle the non-template\ncase.  Reordered that for consistency.  Also some more RAII during\ntemplate instantiation.\n\n\tgcc/cp/\n\t* pt.c (tsubst_lambda_expr): Reorder extra-scope handling to match\n\tthe non-template case.\n\t(instantiate_body): Move a couple of declarations to their\n\tinitializers.", "tree": {"sha": "9db051ab6852eeebb12c5271cfea6b2ab63e3b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db051ab6852eeebb12c5271cfea6b2ab63e3b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8b8efa5becb70e04216a60021b835387ffea4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8b8efa5becb70e04216a60021b835387ffea4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8b8efa5becb70e04216a60021b835387ffea4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8b8efa5becb70e04216a60021b835387ffea4e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770ec066b8b5d70921dfab9fcd1bbb87abeb0dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770ec066b8b5d70921dfab9fcd1bbb87abeb0dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770ec066b8b5d70921dfab9fcd1bbb87abeb0dc5"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "f1c8c0913ecf638861c12641056dbffa9dacc686", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8b8efa5becb70e04216a60021b835387ffea4e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8b8efa5becb70e04216a60021b835387ffea4e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1c8b8efa5becb70e04216a60021b835387ffea4e", "patch": "@@ -19081,15 +19081,6 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   LAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n   LAMBDA_EXPR_INSTANTIATED (r) = true;\n \n-  if (LAMBDA_EXPR_EXTRA_SCOPE (t) == NULL_TREE)\n-    /* A lambda in a default argument outside a class gets no\n-       LAMBDA_EXPR_EXTRA_SCOPE, as specified by the ABI.  But\n-       tsubst_default_argument calls start_lambda_scope, so we need to\n-       specifically ignore it here, and use the global scope.  */\n-    record_null_lambda_scope (r);\n-  else\n-    record_lambda_scope (r);\n-\n   gcc_assert (LAMBDA_EXPR_THIS_CAPTURE (t) == NULL_TREE\n \t      && LAMBDA_EXPR_PENDING_PROXIES (t) == NULL);\n \n@@ -19168,6 +19159,15 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n+  if (LAMBDA_EXPR_EXTRA_SCOPE (t) == NULL_TREE)\n+    /* A lambda in a default argument outside a class gets no\n+       LAMBDA_EXPR_EXTRA_SCOPE, as specified by the ABI.  But\n+       tsubst_default_argument calls start_lambda_scope, so we need to\n+       specifically ignore it here, and use the global scope.  */\n+    record_null_lambda_scope (r);\n+  else\n+    record_lambda_scope (r);\n+\n   /* Do this again now that LAMBDA_EXPR_EXTRA_SCOPE is set.  */\n   determine_visibility (TYPE_NAME (type));\n \n@@ -25571,9 +25571,6 @@ instantiate_body (tree pattern, tree args, tree d, bool nested_p)\n \n   if (VAR_P (d))\n     {\n-      tree init;\n-      bool const_init = false;\n-\n       /* Clear out DECL_RTL; whatever was there before may not be right\n \t since we've reset the type of the declaration.  */\n       SET_DECL_RTL (d, NULL);\n@@ -25583,7 +25580,8 @@ instantiate_body (tree pattern, tree args, tree d, bool nested_p)\n \t regenerate_decl_from_template so we don't need to\n \t push/pop_access_scope again here.  Pull it out so that\n \t cp_finish_decl can process it.  */\n-      init = DECL_INITIAL (d);\n+      bool const_init = false;\n+      tree init = DECL_INITIAL (d);\n       DECL_INITIAL (d) = NULL_TREE;\n       DECL_INITIALIZED_P (d) = 0;\n "}]}