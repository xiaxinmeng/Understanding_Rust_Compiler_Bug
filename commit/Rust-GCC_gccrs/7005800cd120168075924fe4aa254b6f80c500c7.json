{"sha": "7005800cd120168075924fe4aa254b6f80c500c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwNTgwMGNkMTIwMTY4MDc1OTI0ZmU0YWEyNTRiNmY4MGM1MDBjNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-02-16T18:01:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-02-16T18:01:04Z"}, "message": "gigi.h (maybe_debug_type): New inline function.\n\n\t* gcc-interface/gigi.h (maybe_debug_type): New inline function.\n\t* gcc-interface/misc.c (gnat_get_array_descr_info): Use it.\n\tCall maybe_character_value on the array bounds.  Get to the base type\n\tof the index type and call maybe_debug_type on it.\n\t* gcc-interface/utils.c (finish_character_type): Add special treatment\n\nFrom-SVN: r233469", "tree": {"sha": "93b6a383eac0e03e24cd25a24772e2cd7d38691d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93b6a383eac0e03e24cd25a24772e2cd7d38691d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7005800cd120168075924fe4aa254b6f80c500c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7005800cd120168075924fe4aa254b6f80c500c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7005800cd120168075924fe4aa254b6f80c500c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7005800cd120168075924fe4aa254b6f80c500c7/comments", "author": null, "committer": null, "parents": [{"sha": "8c7eac6260ac801715a45c8c8ffad2dd96d77bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7eac6260ac801715a45c8c8ffad2dd96d77bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7eac6260ac801715a45c8c8ffad2dd96d77bac"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "b2e9726a05f8c32ea93025b074cb8c47c27bf059", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7005800cd120168075924fe4aa254b6f80c500c7", "patch": "@@ -1,3 +1,12 @@\n+2016-02-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (maybe_debug_type): New inline function.\n+\t* gcc-interface/misc.c (gnat_get_array_descr_info): Use it.\n+\tCall maybe_character_value on the array bounds.  Get to the base type\n+\tof the index type and call maybe_debug_type on it.\n+\t* gcc-interface/utils.c (finish_character_type): Add special treatment\n+\tfor char_type_node.\n+\n 2016-02-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_enum_underlying_base_type): New function."}, {"sha": "00b7c6a66bef3860b5fc814fd70515844ed7f1e6", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=7005800cd120168075924fe4aa254b6f80c500c7", "patch": "@@ -1164,3 +1164,14 @@ maybe_character_value (tree expr)\n \n   return expr;\n }\n+\n+/* Return the debug type of TYPE if it exists, otherwise TYPE itself.  */\n+\n+static inline tree\n+maybe_debug_type (tree type)\n+{\n+  if (TYPE_CAN_HAVE_DEBUG_TYPE_P (type) && TYPE_DEBUG_TYPE (type))\n+    type = TYPE_DEBUG_TYPE (type);\n+\n+  return type;\n+}"}, {"sha": "61a61fad40fc06ce96fb12ca5562c283243938a9", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7005800cd120168075924fe4aa254b6f80c500c7", "patch": "@@ -786,8 +786,7 @@ gnat_get_array_descr_info (const_tree const_type,\n   tree thinptr_bound_field = NULL_TREE;\n \n   /* ??? See gnat_get_debug_type.  */\n-  if (TYPE_CAN_HAVE_DEBUG_TYPE_P (type) && TYPE_DEBUG_TYPE (type))\n-    type = TYPE_DEBUG_TYPE (type);\n+  type = maybe_debug_type (type);\n \n   /* If we have an implementation type for a packed array, get the orignial\n      array type.  */\n@@ -944,8 +943,10 @@ gnat_get_array_descr_info (const_tree const_type,\n \t    }\n \t  else\n \t    {\n-\t      info->dimen[i].lower_bound = TYPE_MIN_VALUE (index_type);\n-\t      info->dimen[i].upper_bound = TYPE_MAX_VALUE (index_type);\n+\t      info->dimen[i].lower_bound\n+\t\t= maybe_character_value (TYPE_MIN_VALUE (index_type));\n+\t      info->dimen[i].upper_bound\n+\t\t= maybe_character_value (TYPE_MAX_VALUE (index_type));\n \t    }\n \t}\n \n@@ -963,13 +964,12 @@ gnat_get_array_descr_info (const_tree const_type,\n \t  thinptr_bound_field = DECL_CHAIN (thinptr_bound_field);\n \t}\n \n-      /* The DWARF back-end will output exactly INDEX_TYPE as the array index'\n-\t \"root\" type, so pell subtypes when possible.  */\n-      while (TREE_TYPE (index_type)\n-\t     && !subrange_type_for_debug_p (index_type, NULL, NULL))\n+      /* The DWARF back-end will output BOUNDS_TYPE as the base type of\n+\t the array index, so get to the base type of INDEX_TYPE.  */\n+      while (TREE_TYPE (index_type))\n \tindex_type = TREE_TYPE (index_type);\n \n-      info->dimen[i].bounds_type = index_type;\n+      info->dimen[i].bounds_type = maybe_debug_type (index_type);\n       info->dimen[i].stride = NULL_TREE;\n     }\n "}, {"sha": "ff21e7b5ff05f2cae41251b151603b0d222baed5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005800cd120168075924fe4aa254b6f80c500c7/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=7005800cd120168075924fe4aa254b6f80c500c7", "patch": "@@ -1625,8 +1625,11 @@ finish_character_type (tree char_type)\n   if (TYPE_UNSIGNED (char_type))\n     return;\n \n-  /* Make a copy of the unsigned version since we'll modify it below.  */\n-  tree unsigned_char_type = copy_type (gnat_unsigned_type_for (char_type));\n+  /* Make a copy of a generic unsigned version since we'll modify it.  */\n+  tree unsigned_char_type\n+    = (char_type == char_type_node\n+       ? unsigned_char_type_node\n+       : copy_type (gnat_unsigned_type_for (char_type)));\n \n   TYPE_NAME (unsigned_char_type) = TYPE_NAME (char_type);\n   TYPE_STRING_FLAG (unsigned_char_type) = TYPE_STRING_FLAG (char_type);"}]}