{"sha": "58d745ec901a3707c1e6487ce8c0eca387ec5f42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkNzQ1ZWM5MDFhMzcwN2MxZTY0ODdjZThjMGVjYTM4N2VjNWY0Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-24T17:59:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-24T17:59:51Z"}, "message": "genflags.c (gen_macro): Delete.\n\ngcc/\n\t* genflags.c (gen_macro): Delete.\n\t(gen_proto): Don't create GEN.*CALL.* macros.\n\t* gensupport.h (get_file_location): Declare.\n\t* gensupport.c (rtx_locs): New variable.\n\t(read_md_rtx): Record rtx locations.\n\t(get_file_location): New function.\n\t* target-insns.def (call, call_pop, call_value, call_value_pop)\n\t(sibcall, sibcall_value): New patterns.\n\t* gentarget-def.c (parse_argument): New function.\n\t(def_target_insn): Use it.  Handle optional operands.  Raise an\n\terror if an .md pattern has the wrong number of operands for the\n\tpattern name.  Remove the names of unused operands from the prototype.\n\t* builtins.c (expand_builtin_apply): Use targetm functions\n\tinstead of HAVE_call_value and GEN_CALL_VALUE.\n\t* calls.c (emit_call_1): Likewise.  Remove support for sibcall_pop\n\tand sibcall_value_pop.\n\t* config/aarch64/aarch64.md (untyped_call): Use gen_call instead\n\tof GEN_CALL.\n\t* config/alpha/alpha.md (untyped_call): Likewise.\n\t* config/iq2000/iq2000.md (untyped_call): Likewise.\n\t* config/m68k/m68k.md (untyped_call): Likewise.\n\t* config/mips/mips.md (untyped_call): Likewise.\n\t* config/pa/pa.md (untyped_call): Likewise.\n\t* config/rs6000/rs6000.md (untyped_call): Likewise.\n\t* config/sparc/sparc.md (untyped_call): Likewise.\n\t* config/tilegx/tilegx.md (untyped_call): Likewise.\n\t* config/tilepro/tilepro.md (untyped_call): Likewise.\n\t* config/visium/visium.md (untyped_call): Likewise.\n\t* config/alpha/alpha.c (alpha_emit_xfloating_libcall): Use\n\tgen_call_value instead of GEN_CALL_VALUE.\n\t* config/arm/arm.md (untyped_call): Likewise.\n\t* config/cr16/cr16.c (cr16_function_arg): Remove reference to\n\tGEN_CALL.\n\nFrom-SVN: r227143", "tree": {"sha": "c3042a200d6b63e1964f926ac1b634a9c69f950d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3042a200d6b63e1964f926ac1b634a9c69f950d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58d745ec901a3707c1e6487ce8c0eca387ec5f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d745ec901a3707c1e6487ce8c0eca387ec5f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d745ec901a3707c1e6487ce8c0eca387ec5f42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d745ec901a3707c1e6487ce8c0eca387ec5f42/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "651159e5d652ae1dcc48f8107fa5e5b272767d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651159e5d652ae1dcc48f8107fa5e5b272767d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651159e5d652ae1dcc48f8107fa5e5b272767d5b"}], "stats": {"total": 346, "additions": 192, "deletions": 154}, "files": [{"sha": "8c8352347f08cab7c2e3a97a13b9dfc1a31faf34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -1,3 +1,39 @@\n+2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* genflags.c (gen_macro): Delete.\n+\t(gen_proto): Don't create GEN.*CALL.* macros.\n+\t* gensupport.h (get_file_location): Declare.\n+\t* gensupport.c (rtx_locs): New variable.\n+\t(read_md_rtx): Record rtx locations.\n+\t(get_file_location): New function.\n+\t* target-insns.def (call, call_pop, call_value, call_value_pop)\n+\t(sibcall, sibcall_value): New patterns.\n+\t* gentarget-def.c (parse_argument): New function.\n+\t(def_target_insn): Use it.  Handle optional operands.  Raise an\n+\terror if an .md pattern has the wrong number of operands for the\n+\tpattern name.  Remove the names of unused operands from the prototype.\n+\t* builtins.c (expand_builtin_apply): Use targetm functions\n+\tinstead of HAVE_call_value and GEN_CALL_VALUE.\n+\t* calls.c (emit_call_1): Likewise.  Remove support for sibcall_pop\n+\tand sibcall_value_pop.\n+\t* config/aarch64/aarch64.md (untyped_call): Use gen_call instead\n+\tof GEN_CALL.\n+\t* config/alpha/alpha.md (untyped_call): Likewise.\n+\t* config/iq2000/iq2000.md (untyped_call): Likewise.\n+\t* config/m68k/m68k.md (untyped_call): Likewise.\n+\t* config/mips/mips.md (untyped_call): Likewise.\n+\t* config/pa/pa.md (untyped_call): Likewise.\n+\t* config/rs6000/rs6000.md (untyped_call): Likewise.\n+\t* config/sparc/sparc.md (untyped_call): Likewise.\n+\t* config/tilegx/tilegx.md (untyped_call): Likewise.\n+\t* config/tilepro/tilepro.md (untyped_call): Likewise.\n+\t* config/visium/visium.md (untyped_call): Likewise.\n+\t* config/alpha/alpha.c (alpha_emit_xfloating_libcall): Use\n+\tgen_call_value instead of GEN_CALL_VALUE.\n+\t* config/arm/arm.md (untyped_call): Likewise.\n+\t* config/cr16/cr16.c (cr16_function_arg): Remove reference to\n+\tGEN_CALL.\n+\n 2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* ifcvt.c (HAVE_incscc, HAVE_decscc, HAVE_cbranchcc4): Delete."}, {"sha": "d79372cf2684294b1c2effb0ff05180993fab55f", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -1686,9 +1686,7 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n       emit_call_insn (targetm.gen_untyped_call (mem, result,\n \t\t\t\t\t\tresult_vector (1, result)));\n     }\n-  else\n-#ifdef HAVE_call_value\n-  if (HAVE_call_value)\n+  else if (targetm.have_call_value ())\n     {\n       rtx valreg = 0;\n \n@@ -1699,19 +1697,18 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif ((mode = apply_result_mode[regno]) != VOIDmode)\n \t  {\n-\t    gcc_assert (!valreg); /* HAVE_untyped_call required.  */\n+\t    gcc_assert (!valreg); /* have_untyped_call required.  */\n \n \t    valreg = gen_rtx_REG (mode, regno);\n \t  }\n \n-      emit_call_insn (GEN_CALL_VALUE (valreg,\n-\t\t\t\t      gen_rtx_MEM (FUNCTION_MODE, function),\n-\t\t\t\t      const0_rtx, NULL_RTX, const0_rtx));\n+      emit_insn (targetm.gen_call_value (valreg,\n+\t\t\t\t\t gen_rtx_MEM (FUNCTION_MODE, function),\n+\t\t\t\t\t const0_rtx, NULL_RTX, const0_rtx));\n \n       emit_move_insn (adjust_address (result, GET_MODE (valreg), 0), valreg);\n     }\n   else\n-#endif\n     gcc_unreachable ();\n \n   /* Find the CALL insn we just emitted, and attach the register usage"}, {"sha": "026cb53eed96508fee5a3634d26b9067b38a69fa", "filename": "gcc/calls.c", "status": "modified", "additions": 21, "deletions": 61, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -291,7 +291,7 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \t     cumulative_args_t args_so_far ATTRIBUTE_UNUSED)\n {\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n-  rtx call, funmem;\n+  rtx call, funmem, pat;\n   int already_popped = 0;\n   HOST_WIDE_INT n_popped\n     = targetm.calls.return_pops_args (fndecl, funtype, stack_size);\n@@ -330,90 +330,50 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n   else if (fntree)\n     set_mem_expr (funmem, build_simple_mem_ref (CALL_EXPR_FN (fntree)));\n \n-#if defined (HAVE_sibcall_pop) && defined (HAVE_sibcall_value_pop)\n-  if ((ecf_flags & ECF_SIBCALL)\n-      && HAVE_sibcall_pop && HAVE_sibcall_value_pop\n-      && (n_popped > 0 || stack_size == 0))\n+  if (ecf_flags & ECF_SIBCALL)\n     {\n-      rtx n_pop = GEN_INT (n_popped);\n-      rtx pat;\n-\n-      /* If this subroutine pops its own args, record that in the call insn\n-\t if possible, for the sake of frame pointer elimination.  */\n-\n       if (valreg)\n-\tpat = GEN_SIBCALL_VALUE_POP (valreg, funmem, rounded_stack_size_rtx,\n-\t\t\t\t     next_arg_reg, n_pop);\n+\tpat = targetm.gen_sibcall_value (valreg, funmem,\n+\t\t\t\t\t rounded_stack_size_rtx,\n+\t\t\t\t\t next_arg_reg, NULL_RTX);\n       else\n-\tpat = GEN_SIBCALL_POP (funmem, rounded_stack_size_rtx, next_arg_reg,\n-\t\t\t       n_pop);\n-\n-      emit_call_insn (pat);\n-      already_popped = 1;\n+\tpat = targetm.gen_sibcall (funmem, rounded_stack_size_rtx,\n+\t\t\t\t   next_arg_reg, GEN_INT (struct_value_size));\n     }\n-  else\n-#endif\n-\n-#if defined (HAVE_call_pop) && defined (HAVE_call_value_pop)\n   /* If the target has \"call\" or \"call_value\" insns, then prefer them\n      if no arguments are actually popped.  If the target does not have\n      \"call\" or \"call_value\" insns, then we must use the popping versions\n      even if the call has no arguments to pop.  */\n-#if defined (HAVE_call) && defined (HAVE_call_value)\n-  if (HAVE_call && HAVE_call_value && HAVE_call_pop && HAVE_call_value_pop\n-      && n_popped > 0)\n-#else\n-  if (HAVE_call_pop && HAVE_call_value_pop)\n-#endif\n+  else if (n_popped > 0\n+\t   || !(valreg\n+\t\t? targetm.have_call_value ()\n+\t\t: targetm.have_call ()))\n     {\n       rtx n_pop = GEN_INT (n_popped);\n-      rtx pat;\n \n       /* If this subroutine pops its own args, record that in the call insn\n \t if possible, for the sake of frame pointer elimination.  */\n \n       if (valreg)\n-\tpat = GEN_CALL_VALUE_POP (valreg, funmem, rounded_stack_size_rtx,\n-\t\t\t\t  next_arg_reg, n_pop);\n+\tpat = targetm.gen_call_value_pop (valreg, funmem,\n+\t\t\t\t\t  rounded_stack_size_rtx,\n+\t\t\t\t\t  next_arg_reg, n_pop);\n       else\n-\tpat = GEN_CALL_POP (funmem, rounded_stack_size_rtx, next_arg_reg,\n-\t\t\t    n_pop);\n+\tpat = targetm.gen_call_pop (funmem, rounded_stack_size_rtx,\n+\t\t\t\t    next_arg_reg, n_pop);\n \n-      emit_call_insn (pat);\n       already_popped = 1;\n     }\n   else\n-#endif\n-\n-#if defined (HAVE_sibcall) && defined (HAVE_sibcall_value)\n-  if ((ecf_flags & ECF_SIBCALL)\n-      && HAVE_sibcall && HAVE_sibcall_value)\n-    {\n-      if (valreg)\n-\temit_call_insn (GEN_SIBCALL_VALUE (valreg, funmem,\n-\t\t\t\t\t   rounded_stack_size_rtx,\n-\t\t\t\t\t   next_arg_reg, NULL_RTX));\n-      else\n-\temit_call_insn (GEN_SIBCALL (funmem, rounded_stack_size_rtx,\n-\t\t\t\t     next_arg_reg,\n-\t\t\t\t     GEN_INT (struct_value_size)));\n-    }\n-  else\n-#endif\n-\n-#if defined (HAVE_call) && defined (HAVE_call_value)\n-  if (HAVE_call && HAVE_call_value)\n     {\n       if (valreg)\n-\temit_call_insn (GEN_CALL_VALUE (valreg, funmem, rounded_stack_size_rtx,\n-\t\t\t\t\tnext_arg_reg, NULL_RTX));\n+\tpat = targetm.gen_call_value (valreg, funmem, rounded_stack_size_rtx,\n+\t\t\t\t      next_arg_reg, NULL_RTX);\n       else\n-\temit_call_insn (GEN_CALL (funmem, rounded_stack_size_rtx, next_arg_reg,\n-\t\t\t\t  GEN_INT (struct_value_size)));\n+\tpat = targetm.gen_call (funmem, rounded_stack_size_rtx, next_arg_reg,\n+\t\t\t\tGEN_INT (struct_value_size));\n     }\n-  else\n-#endif\n-    gcc_unreachable ();\n+  emit_insn (pat);\n \n   /* Find the call we just emitted.  */\n   rtx_call_insn *call_insn = last_call_insn ();"}, {"sha": "f8c44683752130d8557dc160f7bb2b62147fb2c2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -768,7 +768,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "32bb36eec33d374bdad498295688d3f739e969ac", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -3110,7 +3110,7 @@ alpha_emit_xfloating_libcall (rtx func, rtx target, rtx operands[],\n     }\n \n   tmp = gen_rtx_MEM (QImode, func);\n-  tmp = emit_call_insn (GEN_CALL_VALUE (reg, tmp, const0_rtx,\n+  tmp = emit_call_insn (gen_call_value (reg, tmp, const0_rtx,\n \t\t\t\t\tconst0_rtx, const0_rtx));\n   CALL_INSN_FUNCTION_USAGE (tmp) = usage;\n   RTL_CONST_CALL_P (tmp) = 1;"}, {"sha": "5068f60ad6c87acc479e524f1b12d10cc5b404fd", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -3646,7 +3646,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "b6c20478f9c06e0c692c99643b79cde5a49933e7", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -8162,8 +8162,7 @@\n         size += GET_MODE_SIZE (GET_MODE (src));\n       }\n \n-    emit_call_insn (GEN_CALL_VALUE (par, operands[0], const0_rtx, NULL,\n-\t\t\t\t    const0_rtx));\n+    emit_call_insn (gen_call_value (par, operands[0], const0_rtx, NULL));\n \n     size = 0;\n "}, {"sha": "7b3b6efd3db206fb16a0f4f54e31768ed0188cb8", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -583,7 +583,7 @@ cr16_function_arg (cumulative_args_t cum_v, machine_mode mode,\n   /* function_arg () is called with this type just after all the args have \n      had their registers assigned. The rtx that function_arg returns from \n      this type is supposed to pass to 'gen_call' but currently it is not \n-     implemented (see macro GEN_CALL).  */\n+     implemented.  */\n   if (type == void_type_node)\n     return NULL_RTX;\n "}, {"sha": "bba67600d9650a5c93786190ce009434f67f6130", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -1708,7 +1708,7 @@\n     {\n       int i;\n \n-      emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+      emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n \n       for (i = 0; i < XVECLEN (operands[2], 0); i++)\n \t{"}, {"sha": "463c8277b43ed404f7434a58862f5f90448dfcf6", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -6908,7 +6908,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "f4ffd682415399352d19d322b11fedd2b539e40a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -7055,7 +7055,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "46fc0f5719c68e7f1e5a45c4b154975466ed5fe9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -8248,7 +8248,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "e7d97df89a122402c853e3f8ed518b0b9645d43f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -9516,7 +9516,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, const0_rtx, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "5b9f0517b90831490d3a8473cf1331bb5d061c6f", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -6403,7 +6403,7 @@\n \n   /* Pass constm1 to indicate that it may expect a structure value, but\n      we don't know what size it is.  */\n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, constm1_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, constm1_rtx));\n \n   /* Save the function value registers.  */\n   emit_move_insn (adjust_address (result, DImode, 0), valreg1);"}, {"sha": "944953c34b2da0ef64bb72e4252f7a02cfae70c8", "filename": "gcc/config/tilegx/tilegx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -2670,7 +2670,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "b1e6b81e71f7ed5b9819e6fe30a208b688240c03", "filename": "gcc/config/tilepro/tilepro.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -1516,7 +1516,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "370b6a4b5b298bd07f060ec9c85db4dcf4675505", "filename": "gcc/config/visium/visium.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fvisium%2Fvisium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fconfig%2Fvisium%2Fvisium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.md?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -2375,7 +2375,7 @@\n {\n   int i;\n \n-  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "0dedc8dc2aa421d994306d2582c4997013e7a4d9", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -42,7 +42,6 @@ static int max_opno;\n static void max_operand_1 (rtx);\n static int num_operands (rtx);\n static void gen_proto (rtx);\n-static void gen_macro (const char *, int, int);\n \n /* Count the number of match_operand's found.  */\n \n@@ -92,32 +91,6 @@ num_operands (rtx insn)\n   return max_opno + 1;\n }\n \n-/* Print out a wrapper macro for a function which corrects the number\n-   of arguments it takes.  Any missing arguments are assumed to be at\n-   the end.  */\n-static void\n-gen_macro (const char *name, int real, int expect)\n-{\n-  int i;\n-\n-  gcc_assert (real <= expect);\n-  gcc_assert (real);\n-\n-  /* #define GEN_CALL(A, B, C, D) gen_call((A), (B)) */\n-  fputs (\"#define GEN_\", stdout);\n-  for (i = 0; name[i]; i++)\n-    putchar (TOUPPER (name[i]));\n-\n-  putchar ('(');\n-  for (i = 0; i < expect - 1; i++)\n-    printf (\"%c, \", i + 'A');\n-  printf (\"%c) gen_%s (\", i + 'A', name);\n-\n-  for (i = 0; i < real - 1; i++)\n-    printf (\"(%c), \", i + 'A');\n-  printf (\"(%c))\\n\", i + 'A');\n-}\n-\n /* Print out prototype information for a generator function.  If the\n    insn pattern has been elided, print out a dummy generator that\n    does nothing.  */\n@@ -130,25 +103,6 @@ gen_proto (rtx insn)\n   const char *name = XSTR (insn, 0);\n   int truth = maybe_eval_c_test (XSTR (insn, 2));\n \n-  /* Many md files don't refer to the last two operands passed to the\n-     call patterns.  This means their generator functions will be two\n-     arguments too short.  Instead of changing every md file to touch\n-     those operands, we wrap the prototypes in macros that take the\n-     correct number of arguments.  */\n-  if (name[0] == 'c' || name[0] == 's')\n-    {\n-      if (!strcmp (name, \"call\")\n-\t  || !strcmp (name, \"call_pop\")\n-\t  || !strcmp (name, \"sibcall\")\n-\t  || !strcmp (name, \"sibcall_pop\"))\n-\tgen_macro (name, num, 4);\n-      else if (!strcmp (name, \"call_value\")\n-\t       || !strcmp (name, \"call_value_pop\")\n-\t       || !strcmp (name, \"sibcall_value\")\n-\t       || !strcmp (name, \"sibcall_value_pop\"))\n-\tgen_macro (name, num, 5);\n-    }\n-\n   if (truth != 0)\n     printf (\"extern rtx        gen_%-*s (\", max_id_len, name);\n   else"}, {"sha": "0480e17fac36ae4d4233eb52ee528d27c9ebb671", "filename": "gcc/gensupport.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -93,6 +93,9 @@ static struct queue_elem **other_tail = &other_queue;\n static struct queue_elem *define_subst_attr_queue;\n static struct queue_elem **define_subst_attr_tail = &define_subst_attr_queue;\n \n+/* Mapping from DEFINE_* rtxes to their location in the source file.  */\n+static hash_map <rtx, file_location> *rtx_locs;\n+\n static void remove_constraints (rtx);\n \n static int is_predicable (struct queue_elem *);\n@@ -2619,9 +2622,24 @@ read_md_rtx (md_rtx_info *info)\n   else\n     info->index = -1;\n \n+  if (!rtx_locs)\n+    rtx_locs = new hash_map <rtx, file_location>;\n+  rtx_locs->put (info->def, info->loc);\n+\n   return true;\n }\n \n+/* Return the file location of DEFINE_* rtx X, which was previously\n+   returned by read_md_rtx.  */\n+file_location\n+get_file_location (rtx x)\n+{\n+  gcc_assert (rtx_locs);\n+  file_location *entry = rtx_locs->get (x);\n+  gcc_assert (entry);\n+  return *entry;\n+}\n+\n /* Return the number of possible INSN_CODEs.  Only meaningful once the\n    whole file has been processed.  */\n unsigned int"}, {"sha": "0199e398034460aaf71bcab17cb2045ec2f89298", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -132,6 +132,7 @@ struct pattern_stats\n \n extern void get_pattern_stats (struct pattern_stats *ranges, rtvec vec);\n extern void compute_test_codes (rtx, file_location, char *);\n+extern file_location get_file_location (rtx);\n extern const char *get_emit_function (rtx);\n extern bool needs_barrier_p (rtx);\n "}, {"sha": "9c8a2503ee2f2f47efdb037552c72ae542fc0440", "filename": "gcc/gentarget-def.c", "status": "modified", "additions": 84, "deletions": 22, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgentarget-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Fgentarget-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgentarget-def.c?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -60,6 +60,43 @@ static hash_table <nofree_string_hash> *stubs;\n    from the C condition to the function name.  */\n static hash_map <nofree_string_hash, const char *> *have_funcs;\n \n+/* Return true if the part of the prototype at P is for an argument\n+   name.  If so, point *END_OUT to the first character after the name.\n+   If OPNO_OUT is nonnull, set *OPNO_OUT to the number of the associated\n+   operand.  If REQUIRED_OUT is nonnull, set *REQUIRED_OUT to whether the\n+   .md pattern is required to match the operand.  */\n+\n+static bool\n+parse_argument (const char *p, const char **end_out,\n+\t\tunsigned int *opno_out = 0,\n+\t\tbool *required_out = 0)\n+{\n+  while (ISSPACE (*p))\n+    p++;\n+  if (p[0] == 'x' && ISDIGIT (p[1]))\n+    {\n+      p += 1;\n+      if (required_out)\n+\t*required_out = true;\n+    }\n+  else if (p[0] == 'o' && p[1] == 'p' && p[2] == 't' && ISDIGIT (p[3]))\n+    {\n+      p += 3;\n+      if (required_out)\n+\t*required_out = false;\n+    }\n+  else\n+    return false;\n+\n+  char *endptr;\n+  unsigned int opno = strtol (p, &endptr, 10);\n+  if (opno_out)\n+    *opno_out = opno;\n+  *end_out = endptr;\n+  return true;\n+}\n+\n+\n /* Output hook definitions for pattern NAME, which has target-insns.def\n    prototype PROTOTYPE.  */\n \n@@ -78,21 +115,27 @@ def_target_insn (const char *name, const char *prototype)\n   char *suffix = XALLOCAVEC (char, strlen (prototype) + 1);\n   i = 0;\n   unsigned int opno = 0;\n+  unsigned int required_ops = 0;\n+  unsigned int this_opno;\n+  bool required_p;\n   for (const char *p = prototype; *p; ++p)\n-    if (*p == 'x' && ISDIGIT (p[1]))\n+    if (parse_argument (p, &p, &this_opno, &required_p))\n       {\n-\t/* This should be a parameter name of the form \"x<OPNO>\".\n-\t   That doesn't contribute to the suffix, so skip ahead and\n-\t   process the following character.  */\n-\tchar *endptr;\n-\tif ((unsigned int) strtol (p + 1, &endptr, 10) != opno\n-\t    || (*endptr != ',' && *endptr != ')'))\n+\tif (this_opno != opno || (*p != ',' && *p != ')'))\n \t  {\n \t    error (\"invalid prototype for '%s'\", name);\n \t    exit (FATAL_EXIT_CODE);\n \t  }\n+\tif (required_p && required_ops < opno)\n+\t  {\n+\t    error (\"prototype for '%s' has required operands after\"\n+\t\t   \" optional operands\", name);\n+\t    exit (FATAL_EXIT_CODE);\n+\t  }\n \topno += 1;\n-\tp = endptr;\n+\tif (required_p)\n+\t  required_ops = opno;\n+\t/* Skip over ')'s.  */\n \tif (*p == ',')\n \t  suffix[i++] = '_';\n       }\n@@ -117,6 +160,22 @@ def_target_insn (const char *name, const char *prototype)\n   const char *have_name = name;\n   if (rtx insn = insns->find_with_hash (name, hash))\n     {\n+      pattern_stats stats;\n+      get_pattern_stats (&stats, XVEC (insn, 1));\n+      unsigned int actual_ops = stats.num_generator_args;\n+      if (opno == required_ops && opno != actual_ops)\n+\terror_at (get_file_location (insn),\n+\t\t  \"'%s' must have %d operands (excluding match_dups)\",\n+\t\t  name, required_ops);\n+      else if (actual_ops < required_ops)\n+\terror_at (get_file_location (insn),\n+\t\t  \"'%s' must have at least %d operands (excluding match_dups)\",\n+\t\t  name, required_ops);\n+      else if (actual_ops > opno)\n+\terror_at (get_file_location (insn),\n+\t\t  \"'%s' must have no more than %d operands\"\n+\t\t  \" (excluding match_dups)\", name, opno);\n+\n       const char *test = XSTR (insn, 2);\n       truth = maybe_eval_c_test (test);\n       gcc_assert (truth != 0);\n@@ -139,13 +198,23 @@ def_target_insn (const char *name, const char *prototype)\n \t  have_name = entry;\n \t}\n       printf (\"\\nstatic rtx_insn *\\n\");\n-      printf (\"target_gen_%s %s\\n\", name, prototype);\n-      printf (\"{\\n\");\n+      printf (\"target_gen_%s \", name);\n+      /* Print the prototype with the argument names after ACTUAL_OPS\n+\t removed.  */\n+      const char *p = prototype, *end;\n+      while (*p)\n+\tif (parse_argument (p, &end, &this_opno) && this_opno >= actual_ops)\n+\t  p = end;\n+\telse\n+\t  fputc (*p++, stdout);\n+\n+      printf (\"\\n{\\n\");\n       if (truth < 0)\n \tprintf (\"  gcc_checking_assert (targetm.have_%s ());\\n\", name);\n       printf (\"  return insnify (gen_%s (\", name);\n-      for (i = 0; i < opno; ++i)\n-\tprintf (\"%sx%d\", i == 0 ? \"\" : \", \", i);\n+      for (i = 0; i < actual_ops; ++i)\n+\tprintf (\"%s%s%d\", i == 0 ? \"\" : \", \",\n+\t\ti < required_ops ? \"x\" : \"opt\", i);\n       printf (\"));\\n\");\n       printf (\"}\\n\");\n     }\n@@ -157,18 +226,11 @@ def_target_insn (const char *name, const char *prototype)\n \t  *slot = xstrdup (suffix);\n \t  printf (\"\\nstatic rtx_insn *\\n\");\n \t  printf (\"invalid_%s \", suffix);\n+\t  /* Print the prototype with the argument names removed.  */\n \t  const char *p = prototype;\n \t  while (*p)\n-\t    {\n-\t      if (p[0] == 'x' && ISDIGIT (p[1]))\n-\t\t{\n-\t\t  char *endptr;\n-\t\t  strtol (p + 1, &endptr, 10);\n-\t\t  p = endptr;\n-\t\t}\n-\t      else\n-\t\tfputc (*p++, stdout);\n-\t    }\n+\t    if (!parse_argument (p, &p))\n+\t      fputc (*p++, stdout);\n \t  printf (\"\\n{\\n\");\n \t  printf (\"  gcc_unreachable ();\\n\");\n \t  printf (\"}\\n\");"}, {"sha": "00e00273cd0132263df76c62421bc091fec604d7", "filename": "gcc/target-insns.def", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d745ec901a3707c1e6487ce8c0eca387ec5f42/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=58d745ec901a3707c1e6487ce8c0eca387ec5f42", "patch": "@@ -27,15 +27,23 @@\n \n    where NAME is the name of the pattern and PROTOTYPE is its C prototype.\n    The prototype should use parameter names of the form \"x0\", \"x1\", etc.\n-   Patterns that take no operands should have a prototype \"(void)\".\n+   for the operands that the .md pattern is required to have, followed by\n+   parameter names of the form \"optN\" for operands that the .md pattern\n+   may choose to ignore.  Patterns that never take operands should have\n+   a prototype \"(void)\".\n \n-   Instructions should be documented in md.texi rather than here.  */\n+   Pattern names should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (allocate_stack, (rtx x0, rtx x1))\n DEF_TARGET_INSN (atomic_test_and_set, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (builtin_longjmp, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_receiver, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_setup, (rtx x0))\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (call, (rtx x0, rtx opt1, rtx opt2, rtx opt3))\n+DEF_TARGET_INSN (call_pop, (rtx x0, rtx opt1, rtx opt2, rtx opt3))\n+DEF_TARGET_INSN (call_value, (rtx x0, rtx x1, rtx opt2, rtx opt3, rtx opt4))\n+DEF_TARGET_INSN (call_value_pop, (rtx x0, rtx x1, rtx opt2, rtx opt3,\n+\t\t\t\t  rtx opt4))\n DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (check_stack, (rtx x0))\n DEF_TARGET_INSN (clear_cache, (rtx x0, rtx x1))\n@@ -69,7 +77,10 @@ DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (save_stack_block, (rtx x0, rtx x1))\n DEF_TARGET_INSN (save_stack_function, (rtx x0, rtx x1))\n DEF_TARGET_INSN (save_stack_nonlocal, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (sibcall, (rtx x0, rtx opt1, rtx opt2, rtx opt3))\n DEF_TARGET_INSN (sibcall_epilogue, (void))\n+DEF_TARGET_INSN (sibcall_value, (rtx x0, rtx x1, rtx opt2, rtx opt3,\n+\t\t\t\t rtx opt4))\n DEF_TARGET_INSN (simple_return, (void))\n DEF_TARGET_INSN (split_stack_prologue, (void))\n DEF_TARGET_INSN (split_stack_space_check, (rtx x0, rtx x1))"}]}