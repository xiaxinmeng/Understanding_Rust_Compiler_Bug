{"sha": "8c4cf085d9afeada0e6c79c29904ee597c51bd25", "node_id": "C_kwDOANBUbNoAKDhjNGNmMDg1ZDlhZmVhZGEwZTZjNzljMjk5MDRlZTU5N2M1MWJkMjU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T16:51:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-19T18:32:47Z"}, "message": "Add name resolution for closures\n\nThis is the first pass at name resolution, it simply creates a new rib for\nthe closure. We eventually need more checks here to enforce what things\ncan be included within the closure.", "tree": {"sha": "323ff05d3a99d2122705fe174992afc84f3acdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/323ff05d3a99d2122705fe174992afc84f3acdb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c4cf085d9afeada0e6c79c29904ee597c51bd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4cf085d9afeada0e6c79c29904ee597c51bd25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4cf085d9afeada0e6c79c29904ee597c51bd25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4cf085d9afeada0e6c79c29904ee597c51bd25/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2d13922fb4af8d00bdabd7af964e4f11b84259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2d13922fb4af8d00bdabd7af964e4f11b84259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2d13922fb4af8d00bdabd7af964e4f11b84259"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "60b3ebacc2c4fbbb6141af05dd142accb2686a31", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4cf085d9afeada0e6c79c29904ee597c51bd25/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4cf085d9afeada0e6c79c29904ee597c51bd25/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=8c4cf085d9afeada0e6c79c29904ee597c51bd25", "patch": "@@ -565,6 +565,64 @@ ResolveExpr::visit (AST::RangeFromToInclExpr &expr)\n   ResolveExpr::go (expr.get_to_expr ().get (), prefix, canonical_prefix);\n }\n \n+void\n+ResolveExpr::visit (AST::ClosureExprInner &expr)\n+{\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+  for (auto &p : expr.get_params ())\n+    {\n+      resolve_closure_param (p);\n+    }\n+\n+  ResolveExpr::go (expr.get_definition_expr ().get (), prefix,\n+\t\t   canonical_prefix);\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n+}\n+\n+void\n+ResolveExpr::visit (AST::ClosureExprInnerTyped &expr)\n+{\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+  for (auto &p : expr.get_params ())\n+    {\n+      resolve_closure_param (p);\n+    }\n+\n+  ResolveType::go (expr.get_return_type ().get ());\n+  ResolveExpr::go (expr.get_definition_block ().get (), prefix,\n+\t\t   canonical_prefix);\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n+}\n+\n+void\n+ResolveExpr::resolve_closure_param (AST::ClosureParam &param)\n+{\n+  PatternDeclaration::go (param.get_pattern ().get ());\n+\n+  if (param.has_type_given ())\n+    ResolveType::go (param.get_type ().get ());\n+}\n+\n ResolveExpr::ResolveExpr (const CanonicalPath &prefix,\n \t\t\t  const CanonicalPath &canonical_prefix)\n   : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)"}, {"sha": "c11718efd374dd58018aa3882afb5e1e51f17232", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4cf085d9afeada0e6c79c29904ee597c51bd25/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4cf085d9afeada0e6c79c29904ee597c51bd25/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=8c4cf085d9afeada0e6c79c29904ee597c51bd25", "patch": "@@ -75,6 +75,11 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::RangeToExpr &expr) override;\n   void visit (AST::RangeFullExpr &expr) override;\n   void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n+\n+protected:\n+  void resolve_closure_param (AST::ClosureParam &param);\n \n private:\n   ResolveExpr (const CanonicalPath &prefix,"}]}