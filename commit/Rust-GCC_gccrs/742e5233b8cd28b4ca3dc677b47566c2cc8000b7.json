{"sha": "742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyZTUyMzNiOGNkMjhiNGNhM2RjNjc3YjQ3NTY2YzJjYzgwMDBiNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-11-02T18:01:18Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-11-02T18:01:18Z"}, "message": "re PR tree-optimization/50763 (ICE: verify_gimple failed: missing PHI def with -ftree-tail-merge)\n\n2011-11-02  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/50763\n\t* g++.dg/pr50763-3.C: New test.\n\nFrom-SVN: r180785", "tree": {"sha": "c7f23780097a72c8fe06e1111aca3303aa8bc18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f23780097a72c8fe06e1111aca3303aa8bc18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742e5233b8cd28b4ca3dc677b47566c2cc8000b7/comments", "author": null, "committer": null, "parents": [{"sha": "f58abe3caaff23b174e857e013243afa573aac4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58abe3caaff23b174e857e013243afa573aac4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58abe3caaff23b174e857e013243afa573aac4d"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "057fd7c5973855b6fcd7ca89df9360fbc32a2b5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742e5233b8cd28b4ca3dc677b47566c2cc8000b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742e5233b8cd28b4ca3dc677b47566c2cc8000b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/50763\n+\t* g++.dg/pr50763-3.C: New test.\n+\n 2011-11-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/50672"}, {"sha": "b66be87b1b8821087a9e10436ac19baac448c711", "filename": "gcc/testsuite/g++.dg/pr50763-3.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742e5233b8cd28b4ca3dc677b47566c2cc8000b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50763-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742e5233b8cd28b4ca3dc677b47566c2cc8000b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50763-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50763-3.C?ref=742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -ftree-tail-merge\" } */\n+\n+class v2d {\n+public:\n+   double x;\n+   double y;\n+};\n+\n+class v3d {\n+public:\n+   double x;\n+   v3d() {}\n+   v3d(const v2d & cr2Dv) {}\n+};\n+\n+class e2d {\n+protected:\n+   v2d _Min;\n+   v2d _Max;\n+public:\n+   int cop2d(const v2d & rPnt) const;\n+   v2d clp2d(const v2d & rPnt) const;\n+};\n+\n+inline int e2d::cop2d(const v2d & rPnt) const {\n+   int bRet = 1;\n+   if (rPnt.x < _Min.x) bRet = 0;\n+   else if (rPnt.x > _Max.x) bRet = 0;\n+   else if (rPnt.y > _Max.y) bRet = 0;\n+   return bRet;\n+}\n+\n+inline v2d e2d::clp2d(const v2d & rPnt) const {\n+   v2d sRet = rPnt;\n+   if (rPnt.x < _Min.x) sRet.x = _Min.x;\n+   if (rPnt.y < _Min.y) sRet.y = _Min.y;\n+   if (rPnt.x > _Max.x) sRet.x = _Max.x;\n+   if (rPnt.y > _Max.y) sRet.y = _Max.y;\n+   return sRet;\n+}\n+\n+class sExt {\n+protected:\n+   e2d _Dom;\n+   long eval() const;\n+   long evalPoint(const v2d & crUV, v3d & rPnt) const;\n+};\n+\n+long sExt::evalPoint(const v2d & crUV, v3d & rPnt) const {\n+   v3d sUV = crUV;\n+   if (!_Dom.cop2d(crUV)) {\n+      sUV = _Dom.clp2d(crUV);\n+   }\n+   eval();\n+}   "}]}