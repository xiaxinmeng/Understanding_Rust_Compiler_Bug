{"sha": "8c0d18659be4271377c1114c0cb7e225811ac914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwZDE4NjU5YmU0MjcxMzc3YzExMTRjMGNiN2UyMjU4MTFhYzkxNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-23T00:04:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-23T00:04:44Z"}, "message": "Define go_unreachable to replace gcc_unreachable.\n\nFrom Evan Shaw.\n\nFrom-SVN: r172882", "tree": {"sha": "13b0a0e73206179dcaddcf97d209e13da1d114ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b0a0e73206179dcaddcf97d209e13da1d114ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c0d18659be4271377c1114c0cb7e225811ac914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0d18659be4271377c1114c0cb7e225811ac914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0d18659be4271377c1114c0cb7e225811ac914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0d18659be4271377c1114c0cb7e225811ac914/comments", "author": null, "committer": null, "parents": [{"sha": "632b4f8e8bf2de1177605fe274e11dc411d8be7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b4f8e8bf2de1177605fe274e11dc411d8be7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632b4f8e8bf2de1177605fe274e11dc411d8be7b"}], "stats": {"total": 308, "additions": 153, "deletions": 155}, "files": [{"sha": "6d4d0b0a8477ecbfddbd65305cfcd2687456aab3", "filename": "gcc/go/gofrontend/README", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FREADME?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -24,8 +24,6 @@ Issues to be faced in this transition:\n     features such as %<%> for appropriate quoting.\n   + Localization may be an issue.\n \n-* Use of gcc_unreachable.\n-\n This compiler works, but the code is a work in progress.  Notably, the\n support for garbage collection is ineffective and needs a complete\n rethinking.  The frontend pays little attention to its memory usage"}, {"sha": "a4661b73cbc8a325ba28cf6934d8f3e680e0bb51", "filename": "gcc/go/gofrontend/dataflow.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fdataflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fdataflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fdataflow.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -201,7 +201,7 @@ Dataflow::Compare_vars::operator()(const Named_object* no1,\n \n   // We can't have two variables with the same name in the same\n   // location.\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Class Dataflow."}, {"sha": "2c330ef2e4622c4e631a31e1c640750d61b7f6c9", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -148,7 +148,7 @@ Expression::do_discarding_value()\n void\n Expression::do_export(Export*) const\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Warn that the value of the expression is not used.\n@@ -665,7 +665,7 @@ Expression::integer_constant_tree(mpz_t val, tree type)\n       return build_complex(type, real, imag);\n     }\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Return a tree for VAL in TYPE.\n@@ -703,7 +703,7 @@ Expression::float_constant_tree(mpfr_t val, tree type)\n       return build_complex(type, build_real(TREE_TYPE(type), r2), imag);\n     }\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Return a tree for REAL/IMAG in TYPE.\n@@ -731,7 +731,7 @@ Expression::complex_constant_tree(mpfr_t real, mpfr_t imag, tree type)\n \t\t\t   build_real(TREE_TYPE(type), r4));\n     }\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Return a tree which evaluates to true if VAL, of arbitrary integer\n@@ -880,7 +880,7 @@ Type_expression : public Expression\n \n   tree\n   do_get_tree(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The type which we are representing as an expression.\n@@ -939,7 +939,7 @@ Var_expression::do_type()\n   else if (this->variable_->is_result_variable())\n     return this->variable_->result_var_value()->type();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Determine the type of a reference to a variable.\n@@ -964,7 +964,7 @@ Var_expression::do_address_taken(bool escapes)\n   else if (this->variable_->is_result_variable())\n     this->variable_->result_var_value()->set_address_taken();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Get the tree for a reference to a variable.\n@@ -983,7 +983,7 @@ Var_expression::do_get_tree(Translate_context* context)\n   else if (this->variable_->is_result_variable())\n     is_in_heap = this->variable_->result_var_value()->is_in_heap();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n   if (is_in_heap)\n     {\n       ret = build_fold_indirect_ref_loc(this->location(), ret);\n@@ -1160,7 +1160,7 @@ Func_expression::do_type()\n   else if (this->function_->is_function_declaration())\n     return this->function_->func_declaration_value()->type();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Get the tree for a function expression without evaluating the\n@@ -1175,7 +1175,7 @@ Func_expression::get_tree_without_closure(Gogo* gogo)\n   else if (this->function_->is_function_declaration())\n     fntype = this->function_->func_declaration_value()->type();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   // Builtin functions are handled specially by Call_expression.  We\n   // can't take their address.\n@@ -1198,7 +1198,7 @@ Func_expression::get_tree_without_closure(Gogo* gogo)\n   else if (no->is_function_declaration())\n     fndecl = no->func_declaration_value()->get_or_make_decl(gogo, no, id);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   if (fndecl == error_mark_node)\n     return error_mark_node;\n@@ -1321,7 +1321,7 @@ Unknown_expression::do_lower(Gogo*, Named_object*, int)\n       error_at(location, \"unexpected reference to package\");\n       return Expression::make_error(location);\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -1980,7 +1980,7 @@ Float_expression::check_constant(mpfr_t val, Type* type,\n       max_exp = 1024;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n   if (exp > max_exp)\n     {\n@@ -2220,7 +2220,7 @@ Complex_expression::check_constant(mpfr_t real, mpfr_t imag, Type* type,\n       max_exp = 1024;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   // A NaN or Infinity always fits in the range of the type.\n@@ -2780,7 +2780,7 @@ Const_expression::do_get_tree(Translate_context* context)\n   else if (TREE_CODE(type_tree) == COMPLEX_TYPE)\n     ret = fold(convert_to_complex(type_tree, const_tree));\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n   return ret;\n }\n \n@@ -2899,12 +2899,12 @@ class Iota_expression : public Parser_expression\n  protected:\n   Expression*\n   do_lower(Gogo*, Named_object*, int)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   // There should only ever be one of these.\n   Expression*\n   do_copy()\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n };\n \n // Make an iota expression.  This is only called for one case: the\n@@ -3368,22 +3368,22 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t  || expr_type->is_unsafe_pointer_type())\n \tret = fold(convert_to_integer(type_tree, expr_tree));\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n     }\n   else if (type->float_type() != NULL)\n     {\n       if (expr_type->integer_type() != NULL\n \t  || expr_type->float_type() != NULL)\n \tret = fold(convert_to_real(type_tree, expr_tree));\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n     }\n   else if (type->complex_type() != NULL)\n     {\n       if (expr_type->complex_type() != NULL)\n \tret = fold(convert_to_complex(type_tree, expr_tree));\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n     }\n   else if (type->is_string_type()\n \t   && expr_type->integer_type() != NULL)\n@@ -3649,7 +3649,7 @@ Unsafe_type_conversion_expression::do_get_tree(Translate_context* context)\n       return convert_to_integer(type_tree, expr_tree);\n     }\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   if (use_view_convert)\n     return fold_build1_loc(loc, VIEW_CONVERT_EXPR, type_tree, expr_tree);\n@@ -3977,7 +3977,7 @@ Unary_expression::eval_integer(Operator op, Type* utype, mpz_t uval, mpz_t val,\n     case OPERATOR_MULT:\n       return false;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4001,7 +4001,7 @@ Unary_expression::eval_float(Operator op, mpfr_t uval, mpfr_t val)\n     case OPERATOR_MULT:\n       return false;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4028,7 +4028,7 @@ Unary_expression::eval_complex(Operator op, mpfr_t rval, mpfr_t ival,\n     case OPERATOR_MULT:\n       return false;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4114,7 +4114,7 @@ Unary_expression::do_type()\n       }\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4155,7 +4155,7 @@ Unary_expression::do_determine_type(const Type_context* context)\n       break;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4202,7 +4202,7 @@ Unary_expression::do_check_types(Gogo*)\n       break;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4312,7 +4312,7 @@ Unary_expression::do_get_tree(Translate_context* context)\n       }\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4338,7 +4338,7 @@ Unary_expression::do_export(Export* exp) const\n     case OPERATOR_AND:\n     case OPERATOR_MULT:\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n   this->expr_->export_expression(exp);\n }\n@@ -4364,7 +4364,7 @@ Unary_expression::do_import(Import* imp)\n       op = OPERATOR_XOR;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n   imp->require_c_string(\" \");\n   Expression* expr = Expression::import_expression(imp);\n@@ -4429,7 +4429,7 @@ Binary_expression::compare_integer(Operator op, mpz_t left_val,\n     case OPERATOR_GE:\n       return i >= 0;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4469,7 +4469,7 @@ Binary_expression::compare_float(Operator op, Type* type, mpfr_t left_val,\n     case OPERATOR_GE:\n       return i >= 0;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4510,7 +4510,7 @@ Binary_expression::compare_complex(Operator op, Type* type,\n     case OPERATOR_NOTEQ:\n       return !is_equal;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -4617,7 +4617,7 @@ Binary_expression::eval_integer(Operator op, Type* left_type, mpz_t left_val,\n       }\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   Type* type = left_type;\n@@ -4702,7 +4702,7 @@ Binary_expression::eval_float(Operator op, Type* left_type, mpfr_t left_val,\n     case OPERATOR_RSHIFT:\n       return false;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   Type* type = left_type;\n@@ -5061,7 +5061,7 @@ Binary_expression::eval_complex(Operator op, Type* left_type,\n     case OPERATOR_RSHIFT:\n       return false;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   Type* type = left_type;\n@@ -5619,7 +5619,7 @@ Binary_expression::do_type()\n       return this->left_->type();\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -5810,7 +5810,7 @@ Binary_expression::check_operator_type(Operator op, Type* type,\n       break;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   return true;\n@@ -5976,7 +5976,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n       code = BIT_AND_EXPR;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   tree type = use_left_type ? TREE_TYPE(left) : TREE_TYPE(right);\n@@ -6145,7 +6145,7 @@ Binary_expression::do_export(Export* exp) const\n       exp->write_c_string(\" &^ \");\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n   this->right_->export_expression(exp);\n   exp->write_c_string(\")\");\n@@ -6308,7 +6308,7 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n       code = GE_EXPR;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   if (left_type->is_string_type() && right_type->is_string_type())\n@@ -6760,7 +6760,7 @@ Builtin_call_expression::Builtin_call_expression(Gogo* gogo,\n   else if (name == \"Sizeof\")\n     this->code_ = BUILTIN_SIZEOF;\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Return whether this is a call to recover.  This is a virtual\n@@ -7178,7 +7178,7 @@ Builtin_call_expression::do_integer_constant_value(bool iota_is_constant,\n \t    }\n \t}\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n       mpz_set_ui(val, val_long);\n       *ptype = NULL;\n       return true;\n@@ -7307,7 +7307,7 @@ Builtin_call_expression::do_type()\n     {\n     case BUILTIN_INVALID:\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case BUILTIN_NEW:\n     case BUILTIN_MAKE:\n@@ -7470,7 +7470,7 @@ Builtin_call_expression::do_determine_type(const Type_context* context)\n \t\t  else if (atype->is_abstract_boolean_type())\n \t\t    want_type = Type::lookup_bool_type();\n \t\t  else\n-\t\t    gcc_unreachable();\n+\t\t    go_unreachable();\n \t\t  subcontext.type = want_type;\n \t\t}\n \t    }\n@@ -7725,7 +7725,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n       break;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -7741,7 +7741,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n     case BUILTIN_INVALID:\n     case BUILTIN_NEW:\n     case BUILTIN_MAKE:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case BUILTIN_LEN:\n     case BUILTIN_CAP:\n@@ -7813,7 +7813,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      arg_tree);\n \t      }\n \t    else\n-\t      gcc_unreachable();\n+\t      go_unreachable();\n \t  }\n \telse\n \t  {\n@@ -7841,7 +7841,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      arg_tree);\n \t      }\n \t    else\n-\t      gcc_unreachable();\n+\t      go_unreachable();\n \t  }\n \n \tif (val_tree == error_mark_node)\n@@ -7966,7 +7966,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t    fnname = \"__go_print_slice\";\n \t\t  }\n \t\telse\n-\t\t  gcc_unreachable();\n+\t\t  go_unreachable();\n \n \t\ttree call = Gogo::call_builtin(pfndecl,\n \t\t\t\t\t       location,\n@@ -8288,7 +8288,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n       }\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -8570,7 +8570,7 @@ Call_expression::do_is_recover_call() const\n void\n Call_expression::do_set_recover_arg(Expression*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Get the type.\n@@ -8927,7 +8927,7 @@ Call_expression::do_get_tree(Translate_context* context)\n   else if (interface_method != NULL)\n     fn = this->interface_method_function(context, interface_method, &args[0]);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   if (fn == error_mark_node || TREE_TYPE(fn) == error_mark_node)\n     {\n@@ -10318,7 +10318,7 @@ Interface_field_reference_expression::do_check_types(Gogo*)\n tree\n Interface_field_reference_expression::do_get_tree(Translate_context*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Make a reference to a field in an interface.\n@@ -12409,7 +12409,7 @@ class Heap_composite_expression : public Expression\n   // this in global scope.\n   void\n   do_export(Export*) const\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The composite literal which is being put on the heap.\n@@ -12604,7 +12604,7 @@ Type_info_expression::do_type()\n     case TYPE_INFO_FIELD_ALIGNMENT:\n       return Type::lookup_integer_type(\"uint8\");\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n "}, {"sha": "13f4fb419f8684980036f63aa7668594b07dc281", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -877,15 +877,15 @@ class Parser_expression : public Expression\n \n   void\n   do_determine_type(const Type_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_check_types(Gogo*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   tree\n   do_get_tree(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n };\n \n // An expression which is simply a variable."}, {"sha": "c24ff98fbd423e470bf0ac462d592d6dd8af596f", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -972,7 +972,7 @@ Named_object::get_tree(Gogo* gogo, Named_object* function)\n     case NAMED_OBJECT_VAR:\n     case NAMED_OBJECT_RESULT_VAR:\n     case NAMED_OBJECT_SINK:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case NAMED_OBJECT_FUNC:\n       {\n@@ -1005,7 +1005,7 @@ Named_object::get_tree(Gogo* gogo, Named_object* function)\n       break;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   if (TREE_TYPE(decl) == error_mark_node)\n@@ -2424,7 +2424,7 @@ Gogo::interface_method_table_for_type(const Interface_type* interface,\n \tfndecl = no->func_declaration_value()->get_or_make_decl(this, no,\n \t\t\t\t\t\t\t\tfnid);\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n       fndecl = build_fold_addr_expr(fndecl);\n \n       elt = VEC_quick_push(constructor_elt, pointers, NULL);"}, {"sha": "d9f604a5f229a89f787d158cf8680e0e1a3b4040", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -748,7 +748,7 @@ Gogo::start_function(const std::string& name, Function_type* type,\n \t\t\t\t\t\t\t\t  function);\n \t    }\n \t  else\n-\t    gcc_unreachable();\n+\t    go_unreachable();\n \t}\n       this->package_->bindings()->add_method(ret);\n     }\n@@ -849,7 +849,7 @@ Gogo::declare_function(const std::string& name, Function_type* type,\n \t  return ftype->add_method_declaration(name, type, location);\n \t}\n       else\n-\tgcc_unreachable();\n+\tgo_unreachable();\n     }\n }\n \n@@ -3211,7 +3211,7 @@ Block::traverse(Traverse* traverse)\n \t    case Named_object::NAMED_OBJECT_FUNC:\n \t    case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n \t      // FIXME: Where will nested functions be found?\n-\t      gcc_unreachable();\n+\t      go_unreachable();\n \n \t    case Named_object::NAMED_OBJECT_TYPE:\n \t      if ((traverse_mask & Traverse::traverse_types) != 0\n@@ -3229,10 +3229,10 @@ Block::traverse(Traverse* traverse)\n \n \t    case Named_object::NAMED_OBJECT_PACKAGE:\n \t    case Named_object::NAMED_OBJECT_SINK:\n-\t      gcc_unreachable();\n+\t      go_unreachable();\n \n \t    default:\n-\t      gcc_unreachable();\n+\t      go_unreachable();\n \t    }\n \t}\n     }\n@@ -4109,7 +4109,7 @@ Named_object::location() const\n     {\n     default:\n     case NAMED_OBJECT_UNINITIALIZED:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case NAMED_OBJECT_UNKNOWN:\n       return this->unknown_value()->location();\n@@ -4130,7 +4130,7 @@ Named_object::location() const\n       return this->result_var_value()->location();\n \n     case NAMED_OBJECT_SINK:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case NAMED_OBJECT_FUNC:\n       return this->func_value()->location();\n@@ -4153,7 +4153,7 @@ Named_object::export_named_object(Export* exp) const\n     default:\n     case NAMED_OBJECT_UNINITIALIZED:\n     case NAMED_OBJECT_UNKNOWN:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case NAMED_OBJECT_CONST:\n       this->const_value()->export_const(exp, this->name_);\n@@ -4179,7 +4179,7 @@ Named_object::export_named_object(Export* exp) const\n \n     case NAMED_OBJECT_RESULT_VAR:\n     case NAMED_OBJECT_SINK:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case NAMED_OBJECT_FUNC:\n       this->func_value()->export_func(exp, this->name_);\n@@ -4199,7 +4199,7 @@ Named_object::get_backend_variable(Gogo* gogo, Named_object* function)\n     return this->result_var_value()->get_backend_variable(gogo, function,\n \t\t\t\t\t\t\t  this->name_);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Class Bindings.\n@@ -4280,7 +4280,7 @@ Bindings::remove_binding(Named_object* no)\n \t  return;\n \t}\n     }\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Add a method to the list of objects.  This is not added to the\n@@ -4346,7 +4346,7 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n     {\n     default:\n     case Named_object::NAMED_OBJECT_UNINITIALIZED:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case Named_object::NAMED_OBJECT_UNKNOWN:\n       {\n@@ -4386,7 +4386,7 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n       break;\n \n     case Named_object::NAMED_OBJECT_SINK:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case Named_object::NAMED_OBJECT_FUNC:\n       if (new_object->is_function_declaration())\n@@ -4595,7 +4595,7 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n \n \tcase Named_object::NAMED_OBJECT_SINK:\n \tdefault:\n-\t  gcc_unreachable();\n+\t  go_unreachable();\n \t}\n     }\n \n@@ -4756,41 +4756,41 @@ Traverse::remember_expression(const Expression* expression)\n int\n Traverse::variable(Named_object*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::constant(Named_object*, bool)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::function(Named_object*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::block(Block*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::statement(Block*, size_t*, Statement*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::expression(Expression**)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n int\n Traverse::type(Type*)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }"}, {"sha": "9f26911a16c87e7ca5b5b560a7e17ab2d7e0f647", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -198,7 +198,7 @@ Token::Token(const Token& tok)\n       mpfr_init_set(this->u_.float_value, tok.u_.float_value, GMP_RNDN);\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -237,7 +237,7 @@ Token::operator=(const Token& tok)\n       mpfr_init_set(this->u_.float_value, tok.u_.float_value, GMP_RNDN);\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n   return *this;\n }\n@@ -422,11 +422,11 @@ Token::print(FILE* file) const\n \t  fprintf(file, \"]\");\n \t  break;\n \tdefault:\n-\t  gcc_unreachable();\n+\t  go_unreachable();\n \t}\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n "}, {"sha": "eeb4f5da34721383dde52efe712322df21a86b4d", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -35,7 +35,7 @@ Parse::Enclosing_var_comparison::operator()(const Enclosing_var& v1,\n   // If we get here it means that a single nested function refers to\n   // two different variables defined in enclosing functions, and both\n   // variables have the same name.  I think this is impossible.\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Class Parse.\n@@ -362,7 +362,7 @@ Parse::type_name(bool issue_error)\n   else if (named_object->is_unknown() || named_object->is_type_declaration())\n     return Type::make_forward_declaration(named_object);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // ArrayType = \"[\" [ ArrayLength ] \"]\" ElementType .\n@@ -2323,10 +2323,10 @@ Parse::operand(bool may_be_sink)\n \t  case Named_object::NAMED_OBJECT_UNKNOWN:\n \t    return Expression::make_unknown_reference(named_object, location);\n \t  default:\n-\t    gcc_unreachable();\n+\t    go_unreachable();\n \t  }\n       }\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case Token::TOKEN_STRING:\n       ret = Expression::make_string(token->string_value(), token->location());\n@@ -3068,7 +3068,7 @@ Parse::expression_may_start_here()\n     case Token::TOKEN_IMAGINARY:\n       return true;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -3493,7 +3493,7 @@ Parse::inc_dec_stat(Expression* exp)\n   else if (token->is_op(OPERATOR_MINUSMINUS))\n     this->gogo_->add_statement(Statement::make_dec_statement(exp));\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n   this->advance_token();\n }\n \n@@ -4858,7 +4858,7 @@ Parse::break_stat()\n   else if (enclosing->classification() == Statement::STATEMENT_SELECT)\n     label = enclosing->select_statement()->break_label();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   this->gogo_->add_statement(Statement::make_break_statement(label,\n \t\t\t\t\t\t\t     location));\n@@ -4907,7 +4907,7 @@ Parse::continue_stat()\n   else if (enclosing->classification() == Statement::STATEMENT_FOR_RANGE)\n     label = enclosing->for_range_statement()->continue_label();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   this->gogo_->add_statement(Statement::make_continue_statement(label,\n \t\t\t\t\t\t\t\tlocation));"}, {"sha": "204f14751b509e88c1e8afd43db9e1af5bb87dd3", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -86,7 +86,7 @@ runtime_function_type(Runtime_function_type bft)\n \t{\n \tdefault:\n \tcase RFT_VOID:\n-\t  gcc_unreachable();\n+\t  go_unreachable();\n \n \tcase RFT_BOOL:\n \t  t = Type::lookup_bool_type();\n@@ -193,7 +193,7 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     {\n     default:\n     case RFT_VOID:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     case RFT_BOOL:\n     case RFT_BOOLPTR:"}, {"sha": "7e422fc94b7169a2b2aa195af83d1c72f1309450", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -177,7 +177,7 @@ class Error_statement : public Statement\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n };\n \n // Make an error statement.\n@@ -595,14 +595,14 @@ class Assignment_operation_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The operator (OPERATOR_PLUSEQ, etc.).\n@@ -677,7 +677,7 @@ Assignment_operation_statement::do_lower(Gogo*, Named_object*,\n       op = OPERATOR_BITCLEAR;\n       break;\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   Expression* binop = Expression::make_binary(op, lval, this->rhs_, loc);\n@@ -722,14 +722,14 @@ class Tuple_assignment_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // Left hand side--a list of lvalues.\n@@ -849,14 +849,14 @@ class Tuple_map_assignment_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // Lvalue which receives the value from the map.\n@@ -976,14 +976,14 @@ class Map_assignment_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // A reference to the map index which should be set or deleted.\n@@ -1090,14 +1090,14 @@ class Tuple_receive_assignment_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // Lvalue which receives the value from the channel.\n@@ -1214,14 +1214,14 @@ class Tuple_type_guard_assignment_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   Call_expression*\n@@ -1510,14 +1510,14 @@ class Inc_dec_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The l-value to increment or decrement.\n@@ -1830,7 +1830,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n       vals->push_back(first_arg);\n     }\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   if (ce->args() != NULL)\n     {\n@@ -1866,7 +1866,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   else if (this->classification() == STATEMENT_DEFER)\n     s = Statement::make_defer_statement(call, location);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   // The current block should end with the go statement.\n   go_assert(block->statements()->size() >= 1);\n@@ -2750,7 +2750,7 @@ Case_clauses::Hash_integer_value::operator()(Expression* pe) const\n   mpz_t ival;\n   mpz_init(ival);\n   if (!pe->integer_constant_value(true, ival, &itype))\n-    gcc_unreachable();\n+    go_unreachable();\n   size_t ret = mpz_get_ui(ival);\n   mpz_clear(ival);\n   return ret;\n@@ -2776,7 +2776,7 @@ Case_clauses::Eq_integer_value::operator()(Expression* a, Expression* b) const\n   mpz_init(bval);\n   if (!a->integer_constant_value(true, aval, &atype)\n       || !b->integer_constant_value(true, bval, &btype))\n-    gcc_unreachable();\n+    go_unreachable();\n   bool ret = mpz_cmp(aval, bval) == 0;\n   mpz_clear(aval);\n   mpz_clear(bval);\n@@ -4597,7 +4597,7 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing)\n \t\t\t      index_temp, value_temp, &init, &cond, &iter_init,\n \t\t\t      &post);\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n \n   if (iter_init != NULL)\n     body->add_statement(Statement::make_block_statement(iter_init, loc));"}, {"sha": "5c27c11796767d5f3f7bfbbbd8c1c87b63abbd73", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -990,14 +990,14 @@ class For_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The initialization statements.  This may be NULL.\n@@ -1048,14 +1048,14 @@ class For_range_statement : public Statement\n \n   bool\n   do_traverse_assignments(Traverse_assignments*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   Expression*\n@@ -1284,7 +1284,7 @@ class Switch_statement : public Statement\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The value to switch on.  This may be NULL.\n@@ -1430,7 +1430,7 @@ class Type_switch_statement : public Statement\n \n   Bstatement*\n   do_get_backend(Translate_context*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n  private:\n   // The variable holding the value we are switching on."}, {"sha": "86d65c1a0480f72a5e4fee788d3df2d475b2dfb3", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -157,7 +157,7 @@ Type::is_basic_type() const\n       return this->base()->is_basic_type();\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -202,7 +202,7 @@ Type::make_non_abstract_type()\n     case TYPE_BOOLEAN:\n       return Type::lookup_bool_type();\n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -407,7 +407,7 @@ Type::are_identical(const Type* t1, const Type* t2, bool errors_are_identical,\n       return false;\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -774,7 +774,7 @@ Type::hash_string(const std::string& s, unsigned int h)\n bool\n Type::do_check_make_expression(Expression_list*, source_location)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Return whether an expression has an integer value.  Report an error\n@@ -929,7 +929,7 @@ tree\n Type::do_make_expression_tree(Translate_context*, Expression_list*,\n \t\t\t      source_location)\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Return a pointer to the type descriptor for this type.\n@@ -1194,10 +1194,10 @@ Type::type_functions(const char** hash_fn, const char** equal_fn) const\n \n     case Type::TYPE_NAMED:\n     case Type::TYPE_FORWARD:\n-      gcc_unreachable();\n+      go_unreachable();\n \n     default:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n }\n \n@@ -1543,7 +1543,7 @@ Type::mangled_name(Gogo* gogo) const\n void\n Type::do_export(Export*) const\n {\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Import a type.\n@@ -1627,11 +1627,11 @@ class Void_type : public Type\n \n   tree\n   do_get_init_tree(Gogo*, tree, bool)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Expression*\n   do_type_descriptor(Gogo*, Named_type*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_reflection(Gogo*, std::string*) const\n@@ -2363,23 +2363,23 @@ class Sink_type : public Type\n  protected:\n   tree\n   do_get_tree(Gogo*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   tree\n   do_get_init_tree(Gogo*, tree, bool)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   Expression*\n   do_type_descriptor(Gogo*, Named_type*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_reflection(Gogo*, std::string*) const\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_mangled_name(Gogo*, std::string*) const\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n };\n \n // Make the sink type.\n@@ -3298,11 +3298,11 @@ class Nil_type : public Type\n \n   Expression*\n   do_type_descriptor(Gogo*, Named_type*)\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_reflection(Gogo*, std::string*) const\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   void\n   do_mangled_name(Gogo*, std::string* ret) const\n@@ -3434,7 +3434,7 @@ Struct_field::field_name() const\n \t  else if (t->named_type() != NULL)\n \t    return t->named_type()->name();\n \t  else\n-\t    gcc_unreachable();\n+\t    go_unreachable();\n \t}\n     }\n }\n@@ -5837,7 +5837,7 @@ Interface_type::method_index(const std::string& name) const\n        ++p, ++ret)\n     if (p->name() == name)\n       return ret;\n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Return whether NAME is an unexported method, for better error\n@@ -6621,7 +6621,7 @@ Named_method::do_type() const\n   else if (this->named_object_->is_function_declaration())\n     return this->named_object_->func_declaration_value()->type();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n }\n \n // Return the location of the method receiver.\n@@ -7024,7 +7024,7 @@ Find_type_use::type(Type* type)\n \tcase Type::TYPE_NAMED:\n \tcase Type::TYPE_FORWARD:\n \tdefault:\n-\t  gcc_unreachable();\n+\t  go_unreachable();\n \t}\n     }\n \n@@ -7190,7 +7190,7 @@ Named_type::convert(Gogo* gogo)\n     case TYPE_CALL_MULTIPLE_RESULT:\n     case TYPE_NAMED:\n     case TYPE_FORWARD:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   this->named_tree_ = t;\n@@ -7294,7 +7294,7 @@ Named_type::create_placeholder(Gogo* gogo)\n     case TYPE_CALL_MULTIPLE_RESULT:\n     case TYPE_NAMED:\n     case TYPE_FORWARD:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n   // Create the named type.\n@@ -7424,10 +7424,10 @@ Named_type::do_get_tree(Gogo* gogo)\n     case TYPE_CALL_MULTIPLE_RESULT:\n     case TYPE_NAMED:\n     case TYPE_FORWARD:\n-      gcc_unreachable();\n+      go_unreachable();\n     }\n \n-  gcc_unreachable();\n+  go_unreachable();\n }\n \n // Build a type descriptor for a named type.\n@@ -7964,7 +7964,7 @@ Type::method_expects_pointer(const Named_object* no)\n   else if (no->is_function_declaration())\n     fntype = no->func_declaration_value()->type();\n   else\n-    gcc_unreachable();\n+    go_unreachable();\n   return fntype->receiver()->type()->points_to() != NULL;\n }\n \n@@ -8061,7 +8061,7 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \t  else if (st != NULL)\n \t    m = st->method_function(name, NULL);\n \t  else\n-\t    gcc_unreachable();\n+\t    go_unreachable();\n \t  go_assert(m != NULL);\n \t  if (!m->is_value_method() && expr->type()->points_to() == NULL)\n \t    expr = Expression::make_unary(OPERATOR_AND, expr, location);"}, {"sha": "cf8b409e923d09592849610312f904ce9929a1d3", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0d18659be4271377c1114c0cb7e225811ac914/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=8c0d18659be4271377c1114c0cb7e225811ac914", "patch": "@@ -272,7 +272,7 @@ class Interface_method : public Method\n   // called, as we always create a stub.\n   Named_object*\n   do_named_object() const\n-  { gcc_unreachable(); }\n+  { go_unreachable(); }\n \n   // The type of the method.\n   Function_type*"}]}