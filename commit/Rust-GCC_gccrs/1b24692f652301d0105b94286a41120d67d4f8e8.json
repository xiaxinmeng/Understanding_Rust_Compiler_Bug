{"sha": "1b24692f652301d0105b94286a41120d67d4f8e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyNDY5MmY2NTIzMDFkMDEwNWI5NDI4NmE0MTEyMGQ2N2Q0ZjhlOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-28T13:40:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-28T13:40:07Z"}, "message": "erase_store_hash_fn_imps.hpp: Formatting fixes.\n\n2006-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Formatting fixes.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tpolicy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tresize_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tentry_list_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tfind_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tdebug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tcond_key_dtor_entry_dealtor.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tdebug_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\titerators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tresize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tpolicy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\titerator_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinfo_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tfind_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tfind_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tdebug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\tpolicy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/traits.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tentry_metadata_base.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\titerators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/traits.hpp: Same.\n\nFrom-SVN: r117281", "tree": {"sha": "cddfeb37a2382b40bf6d02b0205a862fad221555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddfeb37a2382b40bf6d02b0205a862fad221555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b24692f652301d0105b94286a41120d67d4f8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b24692f652301d0105b94286a41120d67d4f8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b24692f652301d0105b94286a41120d67d4f8e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b24692f652301d0105b94286a41120d67d4f8e8/comments", "author": null, "committer": null, "parents": [{"sha": "4553813629f226082846477bd9e484c681d9b4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4553813629f226082846477bd9e484c681d9b4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4553813629f226082846477bd9e484c681d9b4ec"}], "stats": {"total": 3790, "additions": 1251, "deletions": 2539}, "files": [{"sha": "26c5ee042a5383d7f0fd3c2fc5ff62962e6532e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -1,3 +1,135 @@\n+2006-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Formatting fixes.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tpolicy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tresize_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tentry_list_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tfind_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tdebug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tcond_key_dtor_entry_dealtor.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tdebug_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\titerators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tresize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tpolicy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\titerator_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinfo_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tfind_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tfind_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tdebug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\tpolicy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tentry_metadata_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\titerators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/traits.hpp: Same.\n+\n 2006-09-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/boost_shared_ptr.h: Use __atomic_add_dispatch and"}, {"sha": "c6f361d936c82ac4b8f0e0c53222f73ea1cedaf6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -75,44 +75,26 @@ namespace pb_ds\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n     class binomial_heap_ : public PB_DS_BASE_C_DEC\n     {\n-\n     private:\n       typedef PB_DS_BASE_C_DEC base_type;\n-\n       typedef typename base_type::node_pointer node_pointer;\n-\n       typedef typename base_type::const_node_pointer const_node_pointer;\n \n     public:\n-\n+      typedef Value_Type value_type;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n-\n-      typedef Value_Type value_type;\n-\n       typedef typename base_type::pointer pointer;\n-\n       typedef typename base_type::const_pointer const_pointer;\n-\n       typedef typename base_type::reference reference;\n-\n       typedef typename base_type::const_reference const_reference;\n-\n       typedef typename base_type::const_point_iterator const_point_iterator;\n-\n       typedef typename base_type::point_iterator point_iterator;\n-\n       typedef typename base_type::const_iterator const_iterator;\n-\n       typedef typename base_type::iterator iterator;\n-\n       typedef typename base_type::cmp_fn cmp_fn;\n-\n       typedef typename base_type::allocator allocator;\n \n-    public:\n-\n       binomial_heap_();\n \n       binomial_heap_(const Cmp_Fn& r_cmp_fn);"}, {"sha": "9223da5d6f93dbcae97a01a1518212bfbf1f0825", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,9 +50,7 @@ template<typename Other_HT_Map_Type>\n bool\n PB_DS_CLASS_C_DEC::\n operator==(const Other_HT_Map_Type& other) const\n-{\n-  return (cmp_with_other(other));\n-}\n+{ return cmp_with_other(other); }\n \n PB_DS_CLASS_T_DEC\n template<typename Other_Map_Type>\n@@ -61,34 +59,31 @@ PB_DS_CLASS_C_DEC::\n cmp_with_other(const Other_Map_Type& other) const\n {\n   if (size() != other.size())\n-    return (false);\n+    return false;\n \n   for (typename Other_Map_Type::const_iterator it = other.begin();\n        it != other.end(); ++it)\n     {\n-      const_key_reference r_key =(const_key_reference)PB_DS_V2F(*it);\n+      const_key_reference r_key = const_key_reference(PB_DS_V2F(*it));\n \n       const_mapped_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_hash_indicator);\n \n       if (p_mapped_value == NULL)\n-\treturn (false);\n+\treturn false;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       if (p_mapped_value->second != it->second)\n-\treturn (false);\n+\treturn false;\n #endif\n     }\n-\n-  return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n template<typename Other_HT_Map_Type>\n bool\n PB_DS_CLASS_C_DEC::\n operator!=(const Other_HT_Map_Type& other) const\n-{\n-  return (!operator==(other));\n-}\n+{ return !operator==(other); }"}, {"sha": "bf5e0bd471062a26f60d1d272af73a4562c810fd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cond_key_dtor_entry_dealtor.hpp", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,12 +49,8 @@ namespace pb_ds\n   namespace detail\n   {\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename HT_Map>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    PB_DS_CKDED_CLASS_NAME<\t\t\t\t\\\n-\t\t\t\t\t\tHT_Map>\n+#define PB_DS_CLASS_T_DEC template<typename HT_Map>\n+#define PB_DS_CLASS_C_DEC PB_DS_CKDED_CLASS_NAME<HT_Map>\n \n     /**\n      * A conditional key destructor, used for exception handling.\n@@ -64,12 +60,9 @@ namespace pb_ds\n     {\n     public:\n       typedef typename HT_Map::entry entry;\n-\n       typedef typename HT_Map::entry_allocator entry_allocator;\n-\n       typedef typename HT_Map::key_type key_type;\n \n-    public:\n       inline\n       PB_DS_CKDED_CLASS_NAME(entry_allocator* p_a, entry* p_e);\n \n@@ -93,28 +86,22 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     inline\n     PB_DS_CLASS_C_DEC::\n-    PB_DS_CKDED_CLASS_NAME(entry_allocator* p_a, entry* p_e) :\n-      m_p_a(p_a),\n-      m_p_e(p_e),\n-      m_key_destruct(false),\n+    PB_DS_CKDED_CLASS_NAME(entry_allocator* p_a, entry* p_e) \n+    : m_p_a(p_a), m_p_e(p_e), m_key_destruct(false), \n       m_no_action_destructor(false)\n     { }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     set_key_destruct()\n-    {\n-      m_key_destruct = true;\n-    }\n+    { m_key_destruct = true; }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     set_no_action_destructor()\n-    {\n-      m_no_action_destructor = true;\n-    }\n+    { m_no_action_destructor = true; }\n \n     PB_DS_CLASS_T_DEC\n     inline\n@@ -123,10 +110,8 @@ namespace pb_ds\n     {\n       if (m_no_action_destructor)\n \treturn;\n-\n       if (m_key_destruct)\n \tm_p_e->m_value.first.~key_type();\n-\n       m_p_a->deallocate(m_p_e, 1);\n     }\n "}, {"sha": "4bb1e12059ea4ac93d477bbb20dfc7847c6085c8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -143,7 +143,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n       {\n         copy_from_range(other.begin(), other.end());\n       }\n-    catch (...)\n+    catch(...)\n       {\n         deallocate_all();\n         throw;"}, {"sha": "6aac3795c1ece1982aebab9f4be1a3ff0a3e4486", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,11 +51,10 @@ PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral_constant<int,false>)\n {\n   // Following lines might throw an exception.\n-  entry_pointer p_e = get_entry(r_val, traits_base::s_no_throw_copies_indicator);\n+  entry_pointer p = get_entry(r_val, traits_base::s_no_throw_copies_indicator);\n \n   // At this point no exceptions can be thrown.\n-\n-  p_e->m_p_next = m_entries[pos];\n-  m_entries[pos] = p_e;\n+  p->m_p_next = m_entries[pos];\n+  m_entries[pos] = p;\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n }"}, {"sha": "08a0b7b3fce132e26a48e5168c76fecfd9b3db53", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,13 +51,12 @@ PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_reference r_val, size_type pos, true_type)\n {\n   // Following lines might throw an exception.\n-  entry_pointer p_e = get_entry(r_val, \n-\t\t\t\ttraits_base::s_no_throw_copies_indicator);\n+  entry_pointer p = get_entry(r_val, traits_base::s_no_throw_copies_indicator);\n \n   // At this point no exceptions can be thrown.\n-  p_e->m_p_next = m_entries[pos];\n-  p_e->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p_e->m_value))).second;\n+  p->m_p_next = m_entries[pos];\n+  p->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p->m_value))).second;\n \n-  m_entries[pos] = p_e;\n+  m_entries[pos] = p;\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n }"}, {"sha": "509008b41a3556758f1febc65612bd3ae9fad434", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,8 +49,7 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_valid(const entry_pointer p_e, \n-\t\t\t   store_hash_false_type) const\n-{ map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value)); }\n+assert_entry_pointer_valid(const entry_pointer p, store_hash_false_type) const\n+{ map_debug_base::check_key_exists(PB_DS_V2F(p->m_value)); }\n \n #endif "}, {"sha": "984a7ec46d75a87ed96c80d6f92016fa5bce70f0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,11 +49,10 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_valid(const entry_pointer    p_e, store_hash_true_type) const\n+assert_entry_pointer_valid(const entry_pointer p_e, store_hash_true_type) const\n {\n   map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n-\n   _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n }\n "}, {"sha": "1dd2a16860eb89cb64a4a7d6ad215bc6bad0e60d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/entry_list_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,9 +52,7 @@ deallocate_links_in_list(entry_pointer p_e)\n   while (p_e != NULL)\n     {\n       entry_pointer p_dealloc_e = p_e;\n-\n       p_e = p_e->m_p_next;\n-\n       s_entry_allocator.deallocate(p_dealloc_e, 1);\n     }\n }\n@@ -65,14 +63,11 @@ PB_DS_CLASS_C_DEC::\n get_entry(const_reference r_val, no_throw_copies_true_type)\n {\n   // Following line might throw an exception.\n-\n   entry_pointer p_e = s_entry_allocator.allocate(1);\n \n   // Following lines* cannot* throw an exception.\n-\n   new (&p_e->m_value) value_type(r_val);\n-\n-  return (p_e);\n+  return p_e;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -81,30 +76,22 @@ PB_DS_CLASS_C_DEC::\n get_entry(const_reference r_val, no_throw_copies_false_type)\n {\n   // Following line might throw an exception.\n-\n   entry_pointer p_e = s_entry_allocator.allocate(1);\n-\n   cond_dealtor_t cond(p_e);\n \n   // Following lines might throw an exception.\n-\n   new (&p_e->m_value) value_type(r_val);\n-\n   cond.set_no_action();\n-\n-  return (p_e);\n+  return p_e;\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n rels_entry(entry_pointer p_e)\n {\n-  /* The following lines cannot throw exceptions\n-   *     (unless if key-data dtors do). */\n-\n+  // The following lines cannot throw exceptions (unless if key-data dtors do).\n   p_e->m_value.~value_type();\n-\n   s_entry_allocator.deallocate(p_e, 1);\n }\n "}, {"sha": "80e06e94b8fe692a932ff7ce047024e0e27f2226", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,15 +49,11 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase_entry_pointer(entry_pointer& r_p_e)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n-\t\t\t\t\t\tPB_DS_V2F(r_p_e->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(r_p_e->m_value)));\n \n   entry_pointer p_e = r_p_e;\n-\n   r_p_e = r_p_e->m_p_next;\n-\n   rels_entry(p_e);\n-\n   _GLIBCXX_DEBUG_ASSERT(m_num_used_e > 0);\n   resize_base::notify_erased(--m_num_used_e);\n }\n@@ -68,34 +64,24 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n+  typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_reference const_reference;\n   size_type num_ersd = 0;\n-\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n-      typedef\n-\ttypename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-\tconst_reference;\n-\n-      while (m_entries[pos] != NULL&& \n-\t     pred(m_entries[pos]->m_value))\n+      while (m_entries[pos] != NULL && pred(m_entries[pos]->m_value))\n         {\n \t  ++num_ersd;\n-\n \t  entry_pointer p_next_e = m_entries[pos]->m_p_next;\n-\n \t  erase_entry_pointer(m_entries[pos]);\n-\n \t  m_entries[pos] = p_next_e;\n         }\n \n       entry_pointer p_e = m_entries[pos];\n-\n-      while (p_e != NULL&&  p_e->m_p_next != NULL)\n+      while (p_e != NULL && p_e->m_p_next != NULL)\n         {\n \t  if (pred(p_e->m_p_next->m_value))\n             {\n \t      ++num_ersd;\n-\n \t      erase_entry_pointer(p_e->m_p_next);\n             }\n \t  else\n@@ -104,8 +90,7 @@ erase_if(Pred pred)\n     }\n \n   do_resize_if_needed_no_throw();\n-\n-  return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -116,9 +101,7 @@ clear()\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     while (m_entries[pos] != NULL)\n       erase_entry_pointer(m_entries[pos]);\n-\n   do_resize_if_needed_no_throw();\n-\n   resize_base::notify_cleared();\n }\n "}, {"sha": "13a3a6d4d34af54309f95348199e9d3a433f0e93", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 50, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file erase_no_store_hash_fn_imps.hpp\n- * Contains implementations of cc_ht_map_'s erase related functions, when the hash\n- *    value is not stored.\n+ * Contains implementations of cc_ht_map_'s erase related functions,\n+ * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -51,9 +51,7 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (erase_in_pos_imp(r_key,\n-\t\t\t     ranged_hash_fn_base::operator()(r_key)));\n+  return erase_in_pos_imp(r_key, ranged_hash_fn_base::operator()(r_key));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -62,77 +60,47 @@ PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, size_type pos)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    entry_pointer p_e = m_entries[pos];\n-\n+  entry_pointer p_e = m_entries[pos];\n   resize_base::notify_erase_search_start();\n-\n   if (p_e == NULL)\n     {\n       resize_base::notify_erase_search_end();\n-\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t      r_key);)\n-\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      return false;\n     }\n \n-  if (hash_eq_fn_base::operator()(\n-\t\t\t\t  PB_DS_V2F(p_e->m_value),\n-\t\t\t\t  r_key))\n+  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n     {\n       resize_base::notify_erase_search_end();\n-\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t     check_key_exists(r_key);)\n-\n-        erase_entry_pointer(m_entries[pos]);\n-\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base:: check_key_exists(r_key);)\n+      erase_entry_pointer(m_entries[pos]);\n       do_resize_if_needed_no_throw();\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-        return (true);\n+      return true;\n     }\n \n   while (true)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n-\n       if (p_next_e == NULL)\n         {\n \t  resize_base::notify_erase_search_end();\n-\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t check_key_does_not_exist(r_key);)\n-\n-            _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-            return (false);\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+          _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+          return false;\n         }\n \n-      if (hash_eq_fn_base::operator()(\n-\t\t\t\t      PB_DS_V2F(p_next_e->m_value),\n-\t\t\t\t      r_key))\n+      if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value), r_key))\n         {\n \t  resize_base::notify_erase_search_end();\n-\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t check_key_exists(r_key);)\n-\n-            erase_entry_pointer(p_e->m_p_next);\n-\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+          erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n-\n \t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-            return (true);\n+          return true;\n         }\n-\n       resize_base::notify_erase_search_collision();\n-\n       p_e = p_next_e;\n     }\n }"}, {"sha": "7eb821e0fe6829373f876e6ce745f4405fd77d79", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 19, "deletions": 52, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file erase_store_hash_fn_imps.hpp\n- * Contains implementations of cc_ht_map_'s erase related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of cc_ht_map_'s erase related functions,\n+ * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -51,83 +51,50 @@ PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n-\n+  entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n   resize_base::notify_erase_search_start();\n-\n   if (p_e == NULL)\n     {\n       resize_base::notify_erase_search_end();\n-\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t     check_key_does_not_exist(\n-\t\t\t\t\t      r_key);)\n-\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base:: check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      return false;\n     }\n \n-  if (hash_eq_fn_base::operator()(\n-\t\t\t\t  PB_DS_V2F(p_e->m_value),\n-\t\t\t\t  p_e->m_hash,\n-\t\t\t\t  r_key,\n-\t\t\t\t  r_pos_hash_pair.second))\n+  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), p_e->m_hash,\n+\t\t\t\t  r_key, r_pos_hash_pair.second))\n     {\n       resize_base::notify_erase_search_end();\n-\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n-\t\t\t\t\t\t      r_key);)\n-\n-        erase_entry_pointer(m_entries[r_pos_hash_pair.first]);\n-\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      erase_entry_pointer(m_entries[r_pos_hash_pair.first]);\n       do_resize_if_needed_no_throw();\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-        return (true);\n+      return true;\n     }\n \n   while (true)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n-\n       if (p_next_e == NULL)\n         {\n \t  resize_base::notify_erase_search_end();\n-\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t check_key_does_not_exist(r_key);)\n-\n-            _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-            return (false);\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+          _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+          return false;\n         }\n \n-      if (hash_eq_fn_base::operator()(\n-\t\t\t\t      PB_DS_V2F(p_next_e->m_value),\n-\t\t\t\t      p_next_e->m_hash,\n-\t\t\t\t      r_key,\n+      if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value),\n+\t\t\t\t      p_next_e->m_hash, r_key,\n \t\t\t\t      r_pos_hash_pair.second))\n         {\n \t  resize_base::notify_erase_search_end();\n-\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t check_key_exists(\n-\t\t\t\t\t  r_key);)\n-\n-            erase_entry_pointer(p_e->m_p_next);\n-\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+          erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n-\n \t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-            return (true);\n+          return true;\n         }\n-\n       resize_base::notify_erase_search_collision();\n-\n       p_e = p_next_e;\n     }\n }"}, {"sha": "1a726643d0cedaf1e4f090066d3d6becd3e546f0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,8 +50,7 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (find_key_pointer(r_key, traits_base::m_store_extra_indicator));\n+  return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -60,23 +59,19 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (const_cast<PB_DS_CLASS_C_DEC& >(*this).find_key_pointer(        r_key, traits_base::m_store_extra_indicator));\n+  return const_cast<PB_DS_CLASS_C_DEC& >(*this).find_key_pointer(r_key, \n+\t\t\t\t\ttraits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find_end()\n-{\n-  return (NULL);\n-}\n+{ return NULL; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n-{\n-  return (NULL);\n-}\n+{ return NULL; }\n "}, {"sha": "423a59a9f48e702cbaa602f7323530c9d8cb3e06", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file find_store_hash_fn_imps.hpp\n- * Contains implementations of cc_ht_map_'s find related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of cc_ht_map_'s find related functions,\n+ * when the hash value is stored.\n  */\n "}, {"sha": "519072a2e9e6492c070763439d9f9e4a16332377", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -42,41 +42,33 @@\n /**\n  * @file info_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s entire container info related\n- *    functions.\n+ * functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (m_num_used_e);\n-}\n+{ return m_num_used_e; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (m_entry_allocator.max_size());\n-}\n+{ return m_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (size() == 0);\n-}\n+{ return (size() == 0); }\n \n PB_DS_CLASS_T_DEC\n template<typename Other_HT_Map_Type>\n bool\n PB_DS_CLASS_C_DEC::\n operator==(const Other_HT_Map_Type& other) const\n-{\n-  return (cmp_with_other(other));\n-}\n+{ return cmp_with_other(other); }\n \n PB_DS_CLASS_T_DEC\n template<typename Other_Map_Type>\n@@ -85,34 +77,30 @@ PB_DS_CLASS_C_DEC::\n cmp_with_other(const Other_Map_Type& other) const\n {\n   if (size() != other.size())\n-    return (false);\n+    return false;\n \n   for (typename Other_Map_Type::const_iterator it = other.begin();\n        it != other.end(); ++it)\n     {\n       const_key_reference r_key =(const_key_reference)PB_DS_V2F(*it);\n-\n       const_mapped_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_hash_indicator);\n \n       if (p_mapped_value == NULL)\n-\treturn (false);\n+\treturn false;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       if (p_mapped_value->second != it->second)\n-\treturn (false);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn false;\n+#endif \n     }\n-\n-  return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n template<typename Other_HT_Map_Type>\n bool\n PB_DS_CLASS_C_DEC::\n operator!=(const Other_HT_Map_Type& other) const\n-{\n-  return (!operator==(other));\n-}\n+{ return !operator==(other); }"}, {"sha": "799dc3796de8b231aa8318c236dca99417f222e4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,49 +41,36 @@\n \n /**\n  * @file insert_no_store_hash_fn_imps.hpp\n- * Contains implementations of cc_ht_map_'s insert related functions, when the hash\n- *    value is not stored.\n+ * Contains implementations of cc_ht_map_'s insert related functions,\n+ * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n-inline std::pair<\n-  typename PB_DS_CLASS_C_DEC::point_iterator,\n-  bool>\n+inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_false_type)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    const_key_reference r_key = PB_DS_V2F(r_val);\n-\n+  const_key_reference r_key = PB_DS_V2F(r_val);\n   const size_type pos = ranged_hash_fn_base::operator()(r_key);\n-\n   entry_pointer p_e = m_entries[pos];\n-\n   resize_base::notify_insert_search_start();\n \n-  while (p_e != NULL&& \n-\t !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n+  while (p_e != NULL && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), \n+\t\t\t\t\t\t     r_key))\n     {\n       resize_base::notify_insert_search_collision();\n-\n       p_e = p_e->m_p_next;\n     }\n \n   resize_base::notify_insert_search_end();\n-\n   if (p_e != NULL)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-        return (\n-\t\tstd::make_pair(               & p_e->m_value,  false));\n+      return std::make_pair(&p_e->m_value, false);\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-    return (std::make_pair(\n-\t\t\t   insert_new_imp(r_val, pos),\n-\t\t\t   true));\n+  return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "b39c7644c00b8852567af0e5cdadbf3889bcd49e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,51 +41,37 @@\n \n /**\n  * @file insert_store_hash_fn_imps.hpp\n- * Contains implementations of cc_ht_map_'s insert related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of cc_ht_map_'s insert related functions,\n+ * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n-inline std::pair<\n-  typename PB_DS_CLASS_C_DEC::point_iterator,\n-  bool>\n+inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_true_type)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    const_key_reference r_key = PB_DS_V2F(r_val);\n-\n-  comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n-\n+  const_key_reference key = PB_DS_V2F(r_val);\n+  comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(key);\n   entry_pointer p_e = m_entries[pos_hash_pair.first];\n-\n   resize_base::notify_insert_search_start();\n \n-  while (p_e != NULL&& \n-\t !hash_eq_fn_base::operator()(\n-\t\t\t\t      PB_DS_V2F(p_e->m_value),\n-\t\t\t\t      p_e->m_hash,\n-\t\t\t\t      r_key, pos_hash_pair.second))\n+  while (p_e != NULL && !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n+\t\t\t\t\t\t     p_e->m_hash,\n+\t\t\t\t\t\t    key, pos_hash_pair.second))\n     {\n       resize_base::notify_insert_search_collision();\n-\n       p_e = p_e->m_p_next;\n     }\n \n   resize_base::notify_insert_search_end();\n-\n   if (p_e != NULL)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-        return (std::make_pair(           & p_e->m_value, false));\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n+      return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-    return (std::make_pair(\n-\t\t\t   insert_new_imp(r_val, pos_hash_pair),\n-\t\t\t   true));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+  return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "2c4f6ae2f69a4497a3fdf1dd5c079ab04ac0855c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -42,7 +42,7 @@\n /**\n  * @file iterators_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s iterators related functions, e.g.,\n- *    begin().\n+ * begin().\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -60,19 +60,15 @@ begin()\n {\n   pointer p_value;\n   std::pair<entry_pointer, size_type> pos;\n-\n   get_start_it_state(p_value, pos);\n-\n-  return (iterator(p_value, pos, this));\n+  return iterator(p_value, pos, this);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{\n-  return (s_end_it);\n-}\n+{ return s_end_it; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n@@ -81,17 +77,13 @@ begin() const\n {\n   pointer p_value;\n   std::pair<entry_pointer, size_type> pos;\n-\n   get_start_it_state(p_value, pos);\n-\n-  return (const_iterator(p_value, pos, this));\n+  return const_iterator(p_value, pos, this);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n-{\n-  return (s_const_end_it);\n-}\n+{ return s_const_end_it; }\n "}, {"sha": "6c03d45ad12a34062b508fc6a374a98044cc4b68", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,62 +49,46 @@ PB_DS_CLASS_T_DEC\n Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_hash_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_hash_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Eq_Fn& \n PB_DS_CLASS_C_DEC::\n get_eq_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Eq_Fn& \n PB_DS_CLASS_C_DEC::\n get_eq_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Comb_Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_comb_hash_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Comb_Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_comb_hash_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Resize_Policy& \n PB_DS_CLASS_C_DEC::\n get_resize_policy()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Resize_Policy& \n PB_DS_CLASS_C_DEC::\n get_resize_policy() const\n-{\n-  return (*this);\n-}\n+{ return *this; }"}, {"sha": "ea30fe73a972eca27578675b9b8fedf8bfaa5760", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,21 +50,16 @@ PB_DS_CLASS_C_DEC::\n do_resize_if_needed()\n {\n   if (!resize_base::is_resize_needed())\n-    return (false);\n-\n-  resize_imp(resize_base::get_new_size(        m_num_e, m_num_used_e));\n-\n-  return (true);\n+    return false;\n+  resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n do_resize(size_type size)\n-{\n-  resize_imp(resize_base::get_nearest_larger_size(\n-\t\t\t\t\t\t  size));\n-}\n+{ resize_imp(resize_base::get_nearest_larger_size(size)); }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -76,81 +71,68 @@ do_resize_if_needed_no_throw()\n \n   try\n     {\n-      resize_imp(resize_base::get_new_size(            m_num_e, m_num_used_e));\n+      resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n     }\n   catch(...)\n     { }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n resize_imp(size_type new_size)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    if (new_size == m_num_e)\n-      return;\n+  if (new_size == m_num_e)\n+    return;\n \n   const size_type old_size = m_num_e;\n-\n   entry_pointer_array a_p_entries_resized;\n \n   // Following line might throw an exception.\n-\n   ranged_hash_fn_base::notify_resized(new_size);\n \n   try\n     {\n       // Following line might throw an exception.\n-\n       a_p_entries_resized = s_entry_pointer_allocator.allocate(new_size);\n-\n       m_num_e = new_size;\n     }\n   catch(...)\n     {\n       ranged_hash_fn_base::notify_resized(old_size);\n-\n       throw;\n     }\n \n   // At this point no exceptions can be thrown.\n-\n   resize_imp_no_exceptions(new_size, a_p_entries_resized, old_size);\n-\n   Resize_Policy::notify_resized(new_size);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_resized, size_type old_size)\n {\n-  std::fill(a_p_entries_resized, a_p_entries_resized + m_num_e,(entry_pointer)NULL);\n+  std::fill(a_p_entries_resized, a_p_entries_resized + m_num_e,\n+\t    entry_pointer(NULL));\n \n   for (size_type pos = 0; pos < old_size; ++pos)\n     {\n       entry_pointer p_e = m_entries[pos];\n-\n       while (p_e != NULL)\n-\tp_e = resize_imp_no_exceptions_reassign_pointer(p_e,  a_p_entries_resized,  traits_base::m_store_extra_indicator);\n+\tp_e = resize_imp_no_exceptions_reassign_pointer(p_e, a_p_entries_resized,  traits_base::m_store_extra_indicator);\n     }\n \n   m_num_e = new_size;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized);)\n-\n-    s_entry_pointer_allocator.deallocate(m_entries, old_size);\n-\n+  s_entry_pointer_allocator.deallocate(m_entries, old_size);\n   m_entries = a_p_entries_resized;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n #include <ext/pb_ds/detail/cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp>\n #include <ext/pb_ds/detail/cc_hash_table_map_/resize_store_hash_fn_imps.hpp>"}, {"sha": "18b7a40c8aa6fd61fade80284e18aa463f106d8c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -54,10 +54,7 @@ resize_imp_no_exceptions_reassign_pointer(entry_pointer p_e, entry_pointer_array\n     ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n \n   entry_pointer const p_next_e = p_e->m_p_next;\n-\n   p_e->m_p_next = a_p_entries_resized[hash_pos];\n-\n   a_p_entries_resized[hash_pos] = p_e;\n-\n-  return (p_next_e);\n+  return p_next_e;\n }"}, {"sha": "a61088ab1108033a0abe33711459843c4ee63fc6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,15 +51,10 @@ PB_DS_CLASS_C_DEC::\n resize_imp_no_exceptions_reassign_pointer(entry_pointer p_e, entry_pointer_array a_p_entries_resized, store_hash_true_type)\n {\n   const comp_hash pos_hash_pair =\n-    ranged_hash_fn_base::operator()(\n-\t\t\t\t    PB_DS_V2F(p_e->m_value),\n-\t\t\t\t    p_e->m_hash);\n+    ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value), p_e->m_hash);\n \n   entry_pointer const p_next_e = p_e->m_p_next;\n-\n   p_e->m_p_next = a_p_entries_resized[pos_hash_pair.first];\n-\n   a_p_entries_resized[pos_hash_pair.first] = p_e;\n-\n-  return (p_next_e);\n+  return p_next_e;\n }"}, {"sha": "8fee0104d7a38993b05fa3226c574c277e0fb36a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,23 +49,17 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (m_num_used_e);\n-}\n+{ return m_num_used_e; }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (size() == 0);\n-}\n+{ return (size() == 0); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_entry_allocator.max_size());\n-}\n+{ return s_entry_allocator.max_size(); }\n "}, {"sha": "21097de07d77c34a79bede828d063f708041722a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,15 +51,13 @@ void\n PB_DS_CLASS_C_DEC::\n trace() const\n {\n-  std::cerr << static_cast<unsigned long>(m_num_e) << \" \" <<\n-    static_cast<unsigned long>(m_num_used_e) << std::endl;\n+  std::cerr << static_cast<unsigned long>(m_num_e) << \" \" \n+\t    << static_cast<unsigned long>(m_num_used_e) << std::endl;\n \n   for (size_type i = 0; i < m_num_e; ++i)\n     {\n       std::cerr << static_cast<unsigned long>(i) << \" \";\n-\n       trace_list(m_entries[i]);\n-\n       std::cerr << std::endl;\n     }\n }\n@@ -70,13 +68,11 @@ PB_DS_CLASS_C_DEC::\n trace_list(const_entry_pointer p_l) const\n {\n   size_type iterated_num_used_e = 0;\n-\n   while (p_l != NULL)\n     {\n       std::cerr << PB_DS_V2F(p_l->m_value) << \" \";\n-\n       p_l = p_l->m_p_next;\n     }\n }\n \n-#endif // #ifdef PB_DS_HT_MAP_TRACE_\n+#endif "}, {"sha": "fea41777067abf19faee280ff52ceeb03139419f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -161,7 +161,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n \t    new (m_entries + i) entry(other.m_entries[i]);\n         }\n     }\n-  catch (...)\n+  catch(...)\n     {\n       deallocate_all();\n       throw;"}, {"sha": "df4af951f1a47ca9221338ed26998c05208087e1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,16 +48,12 @@\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral_constant<int,false>)\n+constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+\t\t\t   false_type)\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n-\n+  _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status)k;\n   entry* const p_e = m_entries + pos;\n-\n   new (&p_e->m_value) mapped_value_type(r_val);\n-\n   p_e->m_stat = valid_entry_status;\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t insert_new(p_e->m_value.first);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(p_e->m_value.first);)\n+}"}, {"sha": "0e17e36efc17c6f1a50dde6dd07a5aaa2925c698", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -42,25 +42,19 @@\n /**\n  * @file constructor_destructor_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s constructors, destructor,\n- *    and related functions.\n+ * and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, true_type)\n+constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+\t\t\t   true_type)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n-\n   entry* const p_e = m_entries + pos;\n-\n   new (&p_e->m_value) mapped_value_type(r_val);\n-\n-  p_e->m_hash = ranged_probe_fn_base::operator()(\n-\t\t\t\t\t\t PB_DS_V2F(r_val)).second;\n-\n+  p_e->m_hash = ranged_probe_fn_base::operator()(PB_DS_V2F(r_val)).second;\n   p_e->m_stat = valid_entry_status;\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t insert_new(p_e->m_value.first);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(p_e->m_value.first);)\n+}"}, {"sha": "62afc1904b2c0e6cfaabc0df74ba87fcc22375a0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,32 +52,25 @@ PB_DS_CLASS_C_DEC::\n assert_entry_array_valid(const entry_array a_entries, store_hash_false_type) const\n {\n   size_type iterated_num_used_e = 0;\n-\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n-      const_entry_pointer p_e =& a_entries[pos];\n-\n+      const_entry_pointer p_e = &a_entries[pos];\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n         case erased_entry_status:\n \t  break;\n         case valid_entry_status:\n \t  {\n-\t    const_key_reference r_key =\n-\t      PB_DS_V2F(p_e->m_value);\n-\n+\t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n \t    map_debug_base::check_key_exists(r_key);\n-\n \t    ++iterated_num_used_e;\n-\n \t    break;\n \t  }\n         default:\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n-\n   _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n }\n "}, {"sha": "51acec9d4b3492b81f6e462689e74a6dcb08fc86", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file erase_no_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s erase related functions, when the hash\n- *    value is not stored.\n+ * Contains implementations of gp_ht_map_'s erase related functions,\n+ * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -51,57 +51,41 @@ PB_DS_CLASS_C_DEC::\n erase_imp(const_key_reference r_key,  false_type)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    size_type hash = ranged_probe_fn_base::operator()(r_key);\n-\n+  size_type hash = ranged_probe_fn_base::operator()(r_key);\n   size_type i;\n-\n   resize_base::notify_erase_search_start();\n \n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos =\n-\tranged_probe_fn_base::operator()(                r_key,  hash, i);\n-\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key,  hash, i);\n       entry* const p_e = m_entries + pos;\n-\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\n \t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n-\n-\t    return (false);\n+\t    return false;\n \t  }\n \t  break;\n         case valid_entry_status:\n-\t  if (hash_eq_fn_base::operator()(\n-\t\t\t\t\t  PB_DS_V2F(p_e->m_value),\n-\t\t\t\t\t  r_key))\n+\t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n             {\n \t      resize_base::notify_erase_search_end();\n-\n \t      erase_entry(p_e);\n-\n \t      do_resize_if_needed_no_throw();\n-\n-\t      return (true);\n+\t      return true;\n             }\n \t  break;\n         case erased_entry_status:\n \t  break;\n         default:\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n-\n       resize_base::notify_erase_search_collision();\n     }\n-\n   resize_base::notify_erase_search_end();\n-\n-  return (false);\n+  return false;\n }\n "}, {"sha": "71c498b469853a27c9de79e2bfa2827fee3188a5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,54 +41,41 @@\n \n /**\n  * @file erase_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s erase related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of gp_ht_map_'s erase related functions,\n+ * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase_imp(const_key_reference r_key,  true_type)\n+erase_imp(const_key_reference r_key, true_type)\n {\n-  const comp_hash pos_hash_pair =\n-    ranged_probe_fn_base::operator()(r_key);\n-\n+  const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n   size_type i;\n-\n   resize_base::notify_erase_search_start();\n-\n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos = ranged_probe_fn_base::operator()(            r_key, pos_hash_pair.second, i);\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key, pos_hash_pair.second, i);\n \n       entry* const p_e = m_entries + pos;\n-\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\n \t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n-\n-\t    return (false);\n+\t    return false;\n \t  }\n \t  break;\n         case valid_entry_status:\n-\t  if (hash_eq_fn_base::operator()(\n-\t\t\t\t\t  PB_DS_V2F(p_e->m_value),\n-\t\t\t\t\t  p_e->m_hash,\n-\t\t\t\t\t  r_key,\n-\t\t\t\t\t  pos_hash_pair.second))\n+\t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), p_e->m_hash,\n+\t\t\t\t\t  r_key, pos_hash_pair.second))\n             {\n \t      resize_base::notify_erase_search_end();\n-\n \t      erase_entry(p_e);\n-\n \t      do_resize_if_needed_no_throw();\n-\n-\t      return (true);\n+\t      return true;\n             }\n \t  break;\n         case erased_entry_status:\n@@ -99,9 +86,7 @@ erase_imp(const_key_reference r_key,  true_type)\n \n       resize_base::notify_erase_search_collision();\n     }\n-\n   resize_base::notify_erase_search_end();\n-\n-  return (false);\n+  return false;\n }\n "}, {"sha": "ec67b5f742d8807eef77945ce72b9b27f84724e5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file find_no_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s find related functions, when the hash\n- *    value is not stored.\n+ * Contains implementations of gp_ht_map_'s find related functions,\n+ * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "e43c1299c78cc94d88296f40534c076b8a0a0eeb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,6 +41,6 @@\n \n /**\n  * @file find_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s insert related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of gp_ht_map_'s insert related functions,\n+ * when the hash value is stored.\n  */"}, {"sha": "bd6c186adc0a4cf9595a9e8da03f96f4250b3062", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -457,8 +457,7 @@ namespace pb_ds\n \tconst size_type pos = find_ins_pos(key, \n \t\t\t\t\t traits_base::m_store_extra_indicator);\n \n-\tentry_pointer p_e =& m_entries[pos];\n-\n+\tentry_pointer p_e = &m_entries[pos];\n \tif (p_e->m_stat != valid_entry_status)\n \t  return insert_new_imp(value_type(key, mapped_type()), pos)->second;\n "}, {"sha": "f24fa8e40407b709ac6bd22afec8b5209b570b92", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,22 +49,16 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (m_num_used_e);\n-}\n+{ return m_num_used_e; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_entry_allocator.max_size());\n-}\n+{ return s_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (size() == 0);\n-}\n+{ return (size() == 0); }"}, {"sha": "49d71e1abcee1f120e9307086e126fd28234c8d9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file insert_no_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s insert related functions, when the hash\n- *    value is not stored.\n+ * Contains implementations of gp_ht_map_'s insert related functions,\n+ * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -51,50 +51,37 @@ PB_DS_CLASS_C_DEC::\n find_ins_pos(const_key_reference r_key, store_hash_false_type)\n {\n   size_type hash = ranged_probe_fn_base::operator()(r_key);\n-\n   size_type i;\n \n   /* The insertion position is initted to a non-legal value to indicate\n    *     that it has not been initted yet.\n    */\n   size_type ins_pos = m_num_e;\n-\n   resize_base::notify_insert_search_start();\n-\n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos =\n-\tranged_probe_fn_base::operator()(r_key, hash, i);\n-\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key, hash, i);\n       _GLIBCXX_DEBUG_ASSERT(pos < m_num_e);\n-\n       entry* const p_e = m_entries + pos;\n-\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-\n-            _GLIBCXX_DEBUG_ONLY(\n-\t\t\t   map_debug_base::check_key_does_not_exist(r_key);)\n-\n-\t      return ((ins_pos == m_num_e)? pos : ins_pos);\n+            _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\t    return (ins_pos == m_num_e) ? pos : ins_pos;\n \t  }\n \t  break;\n         case erased_entry_status:\n \t  if (ins_pos == m_num_e)\n \t    ins_pos = pos;\n \t  break;\n         case valid_entry_status:\n-\t  if (hash_eq_fn_base::operator()(\n-\t\t\t\t\t  PB_DS_V2F(p_e->m_value), r_key))\n+\t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n             {\n \t      resize_base::notify_insert_search_end();\n-\n \t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-                return (pos);\n+                return pos;\n             }\n \t  break;\n         default:\n@@ -103,13 +90,10 @@ find_ins_pos(const_key_reference r_key, store_hash_false_type)\n \n       resize_base::notify_insert_search_collision();\n     }\n-\n   resize_base::notify_insert_search_end();\n-\n   if (ins_pos == m_num_e)\n     throw insert_error();\n-\n-  return (ins_pos);\n+  return ins_pos;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -118,23 +102,16 @@ PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_false_type)\n {\n   const_key_reference r_key = PB_DS_V2F(r_val);\n-\n-  const size_type pos =\n-    find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n+  const size_type pos = find_ins_pos(r_key, \n+\t\t\t\t     traits_base::m_store_extra_indicator);\n \n   if (m_entries[pos].m_stat == valid_entry_status)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-        return (std::make_pair(\n-\t\t\t       & (m_entries + pos)->m_value,\n-\t\t\t       false));\n+      return std::make_pair(&(m_entries + pos)->m_value, false);\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n-\n-  return (std::make_pair(\n-\t\t\t insert_new_imp(r_val, pos),\n-\t\t\t true));\n+  return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "8f6861c56b19e4db0bf79a51e5af2704ae5b50e4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file insert_store_hash_fn_imps.hpp\n- * Contains implementations of gp_ht_map_'s find related functions, when the hash\n- *    value is stored.\n+ * Contains implementations of gp_ht_map_'s find related functions,\n+ * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -70,12 +70,11 @@ find_ins_pos(const_key_reference r_key, store_hash_true_type)\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-\n             _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n-\t      return ((ins_pos == m_num_e) ?\n-\t\t      std::make_pair(pos, pos_hash_pair.second) :\n-\t\t      std::make_pair(ins_pos, pos_hash_pair.second));\n+\t    return ((ins_pos == m_num_e) ?\n+\t\t     std::make_pair(pos, pos_hash_pair.second) :\n+\t\t     std::make_pair(ins_pos, pos_hash_pair.second));\n \t  }\n \t  break;\n         case erased_entry_status:"}, {"sha": "0f5e835641fd525b4363386af117ac7633c89238", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/iterator_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -60,19 +60,15 @@ begin()\n {\n   pointer_ p_value;\n   size_type pos;\n-\n   get_start_it_state(p_value, pos);\n-\n-  return (iterator(p_value, pos, this));\n+  return iterator(p_value, pos, this);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{\n-  return (s_end_it);\n-}\n+{ return s_end_it; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n@@ -81,17 +77,13 @@ begin() const\n {\n   const_pointer_ p_value;\n   size_type pos;\n-\n   get_start_it_state(p_value, pos);\n-\n-  return (const_iterator(        p_value, pos, this));\n+  return const_iterator(p_value, pos, this);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n-{\n-  return (s_const_end_it);\n-}\n+{ return s_const_end_it; }\n "}, {"sha": "903fc34711f5489d4b00ba4832e5012ade869457", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,78 +49,58 @@ PB_DS_CLASS_T_DEC\n Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_hash_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Hash_Fn& \n PB_DS_CLASS_C_DEC::\n get_hash_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Eq_Fn& \n PB_DS_CLASS_C_DEC::\n get_eq_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Eq_Fn& \n PB_DS_CLASS_C_DEC::\n get_eq_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Probe_Fn& \n PB_DS_CLASS_C_DEC::\n get_probe_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Probe_Fn& \n PB_DS_CLASS_C_DEC::\n get_probe_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Comb_Probe_Fn& \n PB_DS_CLASS_C_DEC::\n get_comb_probe_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Comb_Probe_Fn& \n PB_DS_CLASS_C_DEC::\n get_comb_probe_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Resize_Policy& \n PB_DS_CLASS_C_DEC::\n get_resize_policy()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Resize_Policy& \n PB_DS_CLASS_C_DEC::\n get_resize_policy() const\n-{\n-  return (*this);\n-}\n+{ return *this; }"}, {"sha": "05c9e8c2c5264045b31d3119b76a8cf872e90511", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -73,7 +73,7 @@ do_resize_if_needed_no_throw()\n     {\n       resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n     }\n-  catch (...)\n+  catch(...)\n     { }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -108,7 +108,7 @@ resize_imp(size_type new_size)\n     {\n       resize_imp(a_entries_resized, old_size);\n     }\n-  catch (...)\n+  catch(...)\n     {\n       erase_all_valid_entries(a_entries_resized, new_size);\n       m_num_e = old_size;"}, {"sha": "14a913d8cf5165b9b608b357a100ab2d7c536599", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,29 +48,21 @@\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash_false_type)\n+resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, \n+\t\t    store_hash_false_type)\n {\n   const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\n   size_type hash = ranged_probe_fn_base::operator()(r_key);\n-\n   size_type i;\n-\n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos =\n-\tranged_probe_fn_base::operator()(r_key, hash, i);\n-\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key, hash, i);\n       entry_pointer p_new_e = a_entries_resized + pos;\n-\n       switch(p_new_e->m_stat)\n         {\n         case empty_entry_status:\n-\n \t  new (&p_new_e->m_value) value_type(p_e->m_value);\n-\n \t  p_new_e->m_stat = valid_entry_status;\n-\n \t  return;\n         case erased_entry_status:\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n@@ -81,7 +73,6 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n-\n   throw insert_error();\n }\n "}, {"sha": "f471ed3af37983c2ce66a4d8b59eba55f54b3b34", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,32 +48,23 @@\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash_true_type)\n+resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, \n+\t\t    store_hash_true_type)\n {\n   const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\n-  size_type hash =\n-    ranged_probe_fn_base::operator()(r_key, p_e->m_hash);\n+  size_type hash = ranged_probe_fn_base::operator()(r_key, p_e->m_hash);\n \n   size_type i;\n-\n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos =\n-\tranged_probe_fn_base::operator()(r_key, hash, i);\n-\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key, hash, i);\n       entry_pointer p_new_e = a_entries_resized + pos;\n-\n       switch(p_new_e->m_stat)\n         {\n         case empty_entry_status:\n-\n \t  new (&p_new_e->m_value) value_type(p_e->m_value);\n-\n \t  p_new_e->m_hash = hash;\n-\n \t  p_new_e->m_stat = valid_entry_status;\n-\n \t  return;\n         case erased_entry_status:\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n@@ -84,7 +75,6 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n-\n   throw insert_error();\n }\n "}, {"sha": "7d711a21d71b14cd7edf7238c3128f97ecbc28bd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/entry_metadata_base.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -63,4 +63,4 @@ namespace pb_ds\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_LU_MAP_ENTRY_METADATA_BASE_HPP\n+#endif "}, {"sha": "85ac02d30122f13dbbbd3a37dc9466abda829657", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,33 +50,26 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    if (m_p_l == NULL)\n-      return false;\n+  if (m_p_l == NULL)\n+    return false;\n \n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n     {\n       entry_pointer p_next = m_p_l->m_p_next;\n-\n       actual_erase_entry(m_p_l);\n-\n       m_p_l = p_next;\n-\n       return true;\n     }\n \n   entry_pointer p_l = m_p_l;\n-\n   while (p_l->m_p_next != NULL)\n     if (s_eq_fn(r_key, PB_DS_V2F(p_l->m_p_next->m_value)))\n       {\n \terase_next(p_l);\n-\n \treturn true;\n       }\n     else\n       p_l = p_l->m_p_next;\n-\n   return false;\n }\n \n@@ -95,40 +88,32 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    size_type num_ersd = 0;\n-\n-  while (m_p_l != NULL&&  pred(m_p_l->m_value))\n+  size_type num_ersd = 0;\n+  while (m_p_l != NULL && pred(m_p_l->m_value))\n     {\n       entry_pointer p_next = m_p_l->m_p_next;\n-\n       ++num_ersd;\n-\n       actual_erase_entry(m_p_l);\n-\n       m_p_l = p_next;\n     }\n \n   if (m_p_l == NULL)\n     return num_ersd;\n \n   entry_pointer p_l = m_p_l;\n-\n   while (p_l->m_p_next != NULL)\n     {\n       if (pred(p_l->m_p_next->m_value))\n         {\n \t  ++num_ersd;\n-\n \t  erase_next(p_l);\n         }\n       else\n \tp_l = p_l->m_p_next;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -139,11 +124,8 @@ erase_next(entry_pointer p_l)\n   _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n   _GLIBCXX_DEBUG_ASSERT(p_l != m_p_l);\n   _GLIBCXX_DEBUG_ASSERT(p_l->m_p_next != NULL);\n-\n   entry_pointer p_next_l = p_l->m_p_next->m_p_next;\n-\n   actual_erase_entry(p_l->m_p_next);\n-\n   p_l->m_p_next = p_next_l;\n }\n \n@@ -152,11 +134,8 @@ void\n PB_DS_CLASS_C_DEC::\n actual_erase_entry(entry_pointer p_l)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n-\t\t\t\t\t\tPB_DS_V2F(p_l->m_value));)\n-\n-    p_l->~entry();\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(p_l->m_value));)\n+  p_l->~entry();\n   s_entry_allocator.deallocate(p_l, 1);\n }\n "}, {"sha": "37c173de1e4dba25e3cd353644c759e9ec435188", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,60 +51,46 @@ find_imp(const_key_reference r_key) const\n {\n   if (m_p_l == NULL)\n     return NULL;\n-\n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n     {\n       apply_update(m_p_l, s_metadata_type_indicator);\n-\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-        return m_p_l;\n+      return m_p_l;\n     }\n \n   entry_pointer p_l = m_p_l;\n-\n   while (p_l->m_p_next != NULL)\n     {\n       entry_pointer p_next = p_l->m_p_next;\n-\n       if (s_eq_fn(r_key, PB_DS_V2F(p_next->m_value)))\n         {\n \t  if (apply_update(p_next, s_metadata_type_indicator))\n             {\n \t      p_l->m_p_next = p_next->m_p_next;\n-\n \t      p_next->m_p_next = m_p_l;\n-\n \t      m_p_l = p_next;\n-\n \t      return m_p_l;\n             }\n-\n \t  return p_next;\n         }\n       else\n \tp_l = p_next;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-    return NULL;\n+  return NULL;\n }\n \n PB_DS_CLASS_T_DEC\n template<typename Metadata>\n inline bool\n PB_DS_CLASS_C_DEC::\n apply_update(entry_pointer p_l, type_to_type<Metadata>)\n-{\n-  return s_update_policy(p_l->m_update_metadata);\n-}\n+{ return s_update_policy(p_l->m_update_metadata); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n apply_update(entry_pointer, type_to_type<null_lu_metadata>)\n-{\n-  return s_update_policy(s_null_lu_metadata);\n-}\n+{ return s_update_policy(s_null_lu_metadata); }\n "}, {"sha": "a7fe8c45c3f5c38f145956226d0015727ff8ac67", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,22 +48,16 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (std::distance(begin(), end()));\n-}\n+{ return std::distance(begin(), end()); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_entry_allocator.max_size());\n-}\n+{ return s_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (m_p_l == NULL);\n-}\n+{ return (m_p_l == NULL); }"}, {"sha": "af60c07b5074cd73be5f177ddcd0def65026d39e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,29 +52,21 @@ PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    entry_pointer p_l = find_imp(PB_DS_V2F(r_val));\n+  entry_pointer p_l = find_imp(PB_DS_V2F(r_val));\n \n   if (p_l != NULL)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n-\t\t\t\t\t\t      PB_DS_V2F(r_val));)\n-\n-        return std::make_pair(point_iterator(&p_l->m_value), false);\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(r_val));)\n+      return std::make_pair(point_iterator(&p_l->m_value), false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t  PB_DS_V2F(r_val));)\n-\n-    p_l = allocate_new_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_val));)\n \n+  p_l = allocate_new_entry(r_val, traits_base::m_no_throw_copies_indicator);\n   p_l->m_p_next = m_p_l;\n-\n   m_p_l = p_l;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return std::make_pair(point_iterator(&p_l->m_value), true);\n+  return std::make_pair(point_iterator(&p_l->m_value), true);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -83,20 +75,13 @@ PB_DS_CLASS_C_DEC::\n allocate_new_entry(const_reference r_val, false_type)\n {\n   entry_pointer p_l = s_entry_allocator.allocate(1);\n-\n   cond_dealtor_t cond(p_l);\n-\n-  new (const_cast<void* >(\n-\t\t\t  static_cast<const void* >(&p_l->m_value)))\n+  new (const_cast<void* >(static_cast<const void* >(&p_l->m_value)))\n     value_type(r_val);\n \n   cond.set_no_action();\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t    PB_DS_V2F(r_val));)\n-\n-    init_entry_metadata(p_l, s_metadata_type_indicator);\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+  init_entry_metadata(p_l, s_metadata_type_indicator);\n   return p_l;\n }\n \n@@ -106,14 +91,9 @@ PB_DS_CLASS_C_DEC::\n allocate_new_entry(const_reference    r_val, true_type)\n {\n   entry_pointer p_l = s_entry_allocator.allocate(1);\n-\n   new (&p_l->m_value) value_type(r_val);\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t    PB_DS_V2F(r_val));)\n-\n-    init_entry_metadata(p_l, s_metadata_type_indicator);\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+  init_entry_metadata(p_l, s_metadata_type_indicator);\n   return p_l;\n }\n \n@@ -122,9 +102,7 @@ template<typename Metadata>\n inline void\n PB_DS_CLASS_C_DEC::\n init_entry_metadata(entry_pointer p_l, type_to_type<Metadata>)\n-{\n-  new (&p_l->m_update_metadata) Metadata(s_update_policy());\n-}\n+{ new (&p_l->m_update_metadata) Metadata(s_update_policy()); }\n \n PB_DS_CLASS_T_DEC\n inline void"}, {"sha": "e9620320ba749dcefd5c82f420cc2b7fff880cce", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,11 +52,9 @@ begin()\n   if (m_p_l == NULL)\n     {\n       _GLIBCXX_DEBUG_ASSERT(empty());\n-\n-      return (end());\n+      return end();\n     }\n-\n-  return (iterator(&m_p_l->m_value, m_p_l, this));\n+  return iterator(&m_p_l->m_value, m_p_l, this);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -67,28 +65,22 @@ begin() const\n   if (m_p_l == NULL)\n     {\n       _GLIBCXX_DEBUG_ASSERT(empty());\n-\n-      return (end());\n+      return end();\n     }\n-\n-  return (iterator(&m_p_l->m_value, m_p_l,\n-\t\t   const_cast<PB_DS_CLASS_C_DEC* >(this)));\n+  return iterator(&m_p_l->m_value, m_p_l, const_cast<PB_DS_CLASS_C_DEC* >(this));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{\n-  return (iterator(NULL, NULL, this));\n-}\n+{ return iterator(NULL, NULL, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n {\n-  return (const_iterator(NULL, NULL,\n-\t\t\t const_cast<PB_DS_CLASS_C_DEC* const>(this)));\n+  return const_iterator(NULL, NULL, const_cast<PB_DS_CLASS_C_DEC* const>(this));\n }\n "}, {"sha": "9014fd89e52b06cb040c955c72e618682c61d748", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 61, "deletions": 129, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -113,47 +113,30 @@ namespace pb_ds\n #endif \n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n-\n     private:\n+      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n \n-      struct entry : public lu_map_entry_metadata_base<typename Update_Policy::metadata_type>\n+      struct entry \n+     : public lu_map_entry_metadata_base<typename Update_Policy::metadata_type>\n       {\n-\ttypename PB_DS_TYPES_TRAITS_C_DEC::value_type m_value;\n-\n+\ttypename traits_base::value_type m_value;\n \ttypename Allocator::template rebind<entry>::other::pointer m_p_next;\n       };\n \n-      typedef\n-      typename Allocator::template rebind<entry>::other\n-      entry_allocator;\n-\n+      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n       typedef typename entry_allocator::pointer entry_pointer;\n-\n       typedef typename entry_allocator::const_pointer const_entry_pointer;\n-\n       typedef typename entry_allocator::reference entry_reference;\n-\n       typedef typename entry_allocator::const_reference const_entry_reference;\n \n-      typedef\n-      typename Allocator::template rebind<entry_pointer>::other\n-      entry_pointer_allocator;\n-\n+      typedef typename Allocator::template rebind<entry_pointer>::other entry_pointer_allocator;\n       typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type_;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer_;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer\n-      const_pointer_;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference_;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference_;\n+      typedef typename traits_base::value_type value_type_;\n+      typedef typename traits_base::pointer pointer_;\n+      typedef typename traits_base::const_pointer const_pointer_;\n+      typedef typename traits_base::reference reference_;\n+      typedef typename traits_base::const_reference const_reference_;\n \n #define PB_DS_GEN_POS entry_pointer\n \n@@ -164,63 +147,39 @@ namespace pb_ds\n \n #undef PB_DS_GEN_POS\n \n-    public:\n \n-      typedef typename Allocator::size_type size_type;\n+#ifdef _GLIBCXX_DEBUG\n+      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+#endif \n \n-      typedef typename Allocator::difference_type difference_type;\n+      typedef typename traits_base:: no_throw_copies_false_type no_throw_copies_false_type;\n \n-      typedef Eq_Fn eq_fn;\n+      typedef typename traits_base:: no_throw_copies_true_type no_throw_copies_true_type;\n \n-      typedef Allocator allocator;\n+      typedef cond_dealtor<entry, Allocator> cond_dealtor_t;\n \n+    public:\n+      typedef Allocator allocator;\n+      typedef typename Allocator::size_type size_type;\n+      typedef typename Allocator::difference_type difference_type;\n+      typedef Eq_Fn eq_fn;\n       typedef Update_Policy update_policy;\n-\n       typedef typename Update_Policy::metadata_type update_metadata;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n+      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_pointer key_pointer;\n+      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_reference key_reference;\n+      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::mapped_type mapped_type;\n+      typedef typename traits_base::mapped_pointer mapped_pointer;\n+      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_reference mapped_reference;\n+      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::value_type value_type;\n+      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::const_pointer const_pointer;\n+      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef point_iterator_ point_iterator;\n@@ -243,10 +202,9 @@ namespace pb_ds\n       typedef const_iterator_ const_iterator;\n \n     public:\n-\n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       virtual\n       ~PB_DS_CLASS_NAME();\n@@ -255,7 +213,7 @@ namespace pb_ds\n       PB_DS_CLASS_NAME(It first_it, It last_it);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       inline size_type\n       size() const;\n@@ -279,7 +237,7 @@ namespace pb_ds\n       }\n \n       inline std::pair<point_iterator, bool>\n-      insert(const_reference r_val);\n+      insert(const_reference);\n \n       inline point_iterator\n       find(const_key_reference r_key)\n@@ -298,11 +256,11 @@ namespace pb_ds\n       }\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       void\n       clear();\n@@ -329,90 +287,65 @@ namespace pb_ds\n       trace() const;\n #endif\n \n-    private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif \n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::\n-      no_throw_copies_false_type\n-      no_throw_copies_false_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::\n-      no_throw_copies_true_type\n-      no_throw_copies_true_type;\n-\n     protected:\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n     private:\n+#ifdef PB_DS_DATA_TRUE_INDICATOR\n+      friend class iterator_;\n+#endif \n+\n+      friend class const_iterator_;\n \n       inline entry_pointer\n-      allocate_new_entry(const_reference r_val, false_type);\n+      allocate_new_entry(const_reference, false_type);\n \n       inline entry_pointer\n-      allocate_new_entry(const_reference r_val, true_type);\n+      allocate_new_entry(const_reference, true_type);\n \n       template<typename Metadata>\n       inline static void\n-      init_entry_metadata(entry_pointer p_l, type_to_type<Metadata>);\n+      init_entry_metadata(entry_pointer, type_to_type<Metadata>);\n \n       inline static void\n-      init_entry_metadata(entry_pointer p_l, type_to_type<null_lu_metadata>);\n+      init_entry_metadata(entry_pointer, type_to_type<null_lu_metadata>);\n \n       void\n       deallocate_all();\n \n       void\n-      erase_next(entry_pointer p_l);\n+      erase_next(entry_pointer);\n \n       void\n-      actual_erase_entry(entry_pointer p_l);\n+      actual_erase_entry(entry_pointer);\n \n       void\n       inc_it_state(const_pointer& r_p_value, entry_pointer& r_pos) const\n       {\n \tr_pos = r_pos->m_p_next;\n-\tr_p_value = (r_pos == NULL)? NULL :& r_pos->m_value;\n+\tr_p_value = (r_pos == NULL) ? NULL : &r_pos->m_value;\n       }\n \n       template<typename Metadata>\n       inline static bool\n-      apply_update(entry_pointer p_l, type_to_type<Metadata>);\n+      apply_update(entry_pointer, type_to_type<Metadata>);\n \n       inline static bool\n-      apply_update(entry_pointer p_l, type_to_type<null_lu_metadata>);\n+      apply_update(entry_pointer, type_to_type<null_lu_metadata>);\n \n       inline entry_pointer\n-      find_imp(const_key_reference r_key) const;\n-\n-    private:\n-      mutable entry_pointer m_p_l;\n-\n-      typedef cond_dealtor< entry, Allocator> cond_dealtor_t;\n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-      friend class iterator_;\n-#endif \n-\n-      friend class const_iterator_;\n+      find_imp(const_key_reference) const;\n \n       static entry_allocator s_entry_allocator;\n-\n       static Eq_Fn s_eq_fn;\n-\n       static Update_Policy s_update_policy;\n-\n       static type_to_type<update_metadata> s_metadata_type_indicator;\n-\n       static null_lu_metadata s_null_lu_metadata;\n+\n+      mutable entry_pointer m_p_l;\n     };\n \n #include <ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp>\n@@ -426,10 +359,9 @@ namespace pb_ds\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef  PB_DS_TYPES_TRAITS_C_DEC\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S"}, {"sha": "28bd7c4f6e75331747f29f5b52af17f32b6b9eef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,18 +52,14 @@ PB_DS_CLASS_C_DEC::\n trace() const\n {\n   std::cerr << m_p_l << std::endl << std::endl;\n-\n   const_entry_pointer p_l = m_p_l;\n-\n   while (p_l != NULL)\n     {\n       std::cerr << PB_DS_V2F(p_l->m_value) << std::endl;\n-\n       p_l = p_l->m_p_next;\n     }\n-\n   std::cerr << std::endl;\n }\n \n-#endif // #ifdef PB_DS_LU_MAP_TRACE_\n+#endif \n "}, {"sha": "b1a36555ce337bcb3926fbbb3de7533f2d393e0e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -54,7 +54,7 @@ assert_valid() const\n   std::cout << \"av1\" << std::endl;\n \n   if (m_a_values == NULL || m_end_it == NULL || m_size == 0)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_values == NULL&&  m_end_it == NULL && m_size == 0);\n+    _GLIBCXX_DEBUG_ASSERT(m_a_values == NULL &&  m_end_it == NULL && m_size == 0);\n \n   std::cout << \"av2\" << std::endl;\n   assert_iterators();"}, {"sha": "936d5492e8d1556b7fb3faeccf653276b131a307", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 41, "deletions": 84, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,30 +50,23 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    if (m_size == 0)\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-\t  return;\n-      }\n-    else\n-      {\n-        reallocate_metadata((node_update* )this, 0);\n-\n-        cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n-      }\n+  if (m_size == 0)\n+    {\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      return;\n+    }\n+  else\n+    {\n+      reallocate_metadata((node_update* )this, 0);\n+      cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n+    }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n-\n-    m_a_values = NULL;\n-\n+  m_a_values = NULL;\n   m_size = 0;\n-\n   m_end_it = m_a_values;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n template<typename Pred>\n@@ -85,14 +78,11 @@ erase_if(Pred pred)\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_throw_prob_adjustor adjust(m_size);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n   size_type new_size = 0;\n-\n   size_type num_val_ersd = 0;\n-\n   iterator source_it = m_a_values;\n-\n   for (source_it = begin(); source_it != m_end_it; ++source_it)\n     if (!pred(*source_it))\n       ++new_size;\n@@ -102,52 +92,38 @@ erase_if(Pred pred)\n   if (new_size == 0)\n     {\n       clear();\n-\n-      return (num_val_ersd);\n+      return num_val_ersd;\n     }\n \n   value_vector a_new_values = s_value_alloc.allocate(new_size);\n-\n   iterator target_it = a_new_values;\n-\n   cond_dtor<size_type> cd(a_new_values, target_it, new_size);\n-\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::clear());\n-\n   for (source_it = begin(); source_it != m_end_it; ++source_it)\n     {\n       if (!pred(*source_it))\n         {\n-\t  new (const_cast<void* >(\n-\t\t\t\t  static_cast<const void* >(target_it)))\n+\t  new (const_cast<void*>(static_cast<const void* >(target_it)))\n \t    value_type(*source_it);\n \n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t\t    PB_DS_V2F(*source_it)));\n-\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(*source_it)));\n \t  ++target_it;\n         }\n     }\n \n   reallocate_metadata((node_update* )this, new_size);\n-\n   cd.set_no_action();\n \n   {\n     cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n   }\n \n   m_a_values = a_new_values;\n-\n   m_size = new_size;\n-\n   m_end_it = target_it;\n-\n   update(node_begin(), (node_update* )this);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (num_val_ersd);\n+  return num_val_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -157,21 +133,17 @@ PB_DS_CLASS_C_DEC::\n erase_imp(It it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  if (it == end())\n+    return end();\n \n-    if (it == end())\n-      return end();\n-\n-  _GLIBCXX_DEBUG_ONLY(\n-\t\t PB_DS_CLASS_C_DEC::check_key_exists(PB_DS_V2F(*it));)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::check_key_exists(PB_DS_V2F(*it));)\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_throw_prob_adjustor adjust(m_size);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n-\n   value_vector a_values = s_value_alloc.allocate(m_size - 1);\n-\n   iterator source_it = begin();\n   iterator source_end_it = end();\n   iterator target_it = a_values;\n@@ -181,48 +153,36 @@ erase_imp(It it)\n \n   _GLIBCXX_DEBUG_ONLY(size_type cnt = 0;)\n \n-    while (source_it != source_end_it)\n-      {\n-        if (source_it != it)\n-\t  {\n-            _GLIBCXX_DEBUG_ONLY(++cnt;)\n-\t      _GLIBCXX_DEBUG_ASSERT(cnt != m_size);\n-\n-            new (const_cast<void* >(\n-\t\t\t\t    static_cast<const void* >(target_it)))\n+  while (source_it != source_end_it)\n+    {\n+      if (source_it != it)\n+\t{\n+          _GLIBCXX_DEBUG_ONLY(++cnt;)\n+\t  _GLIBCXX_DEBUG_ASSERT(cnt != m_size);\n+          new (const_cast<void* >(static_cast<const void* >(target_it)))\n \t      value_type(*source_it);\n \n-            ++target_it;\n-\t  }\n-        else\n-\t  ret_it = target_it;\n-\n-        ++source_it;\n-      }\n+          ++target_it;\n+\t}\n+      else\n+\tret_it = target_it;\n+    ++source_it;\n+    }\n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n-\n   reallocate_metadata((node_update* )this, m_size - 1);\n-\n   cd.set_no_action();\n-\n-  _GLIBCXX_DEBUG_ONLY(\n-\t\t PB_DS_CLASS_C_DEC::erase_existing(PB_DS_V2F(*it));)\n-    {\n-      cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::erase_existing(PB_DS_V2F(*it));)\n+  {\n+    cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n+  }\n \n   m_a_values = a_values;\n-\n   --m_size;\n-\n   m_end_it = m_a_values + m_size;\n-\n   update(node_begin(), (node_update* )this);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (It(ret_it));\n+  return It(ret_it);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -231,12 +191,9 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   point_iterator it = find(r_key);\n-\n   if (it == end())\n-    return (false);\n-\n+    return false;\n   erase(it);\n-\n-  return (true);\n+  return true;\n }\n "}, {"sha": "05161cb97499c458182de47898b54c301c553a73", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,22 +50,17 @@ PB_DS_CLASS_C_DEC::\n size() const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (m_size);\n+  return m_size;\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_value_alloc.max_size());\n-}\n+{ return s_value_alloc.max_size(); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (size() == 0);\n-}\n+{ return size() == 0; }"}, {"sha": "16d6f04e683cedcb1d4f1c1a3fcad6a4ccaa3fe5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -56,16 +56,14 @@ void\n PB_DS_CLASS_C_DEC::\n reallocate_metadata(Node_Update_* , size_type new_size)\n {\n-  metadata_pointer a_new_metadata_vec =(new_size == 0)? NULL : s_metadata_alloc.allocate(new_size);\n+  metadata_pointer a_new_metadata_vec =(new_size == 0) ? NULL : s_metadata_alloc.allocate(new_size);\n \n   if (m_a_metadata != NULL)\n     {\n       for (size_type i = 0; i < m_size; ++i)\n \tm_a_metadata[i].~metadata_type();\n-\n       s_metadata_alloc.deallocate(m_a_metadata, m_size);\n     }\n-\n   std::swap(m_a_metadata, a_new_metadata_vec);\n }\n "}, {"sha": "38d4cee5d41c5029a91e4216525221113abefc19", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,83 +48,62 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_begin() const\n-{\n-  return (PB_DS_node_begin_imp());\n-}\n+{ return PB_DS_node_begin_imp(); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n-{\n-  return (PB_DS_node_end_imp());\n-}\n+{ return PB_DS_node_end_imp(); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_begin()\n-{\n-  return (PB_DS_node_begin_imp());\n-}\n+{ return PB_DS_node_begin_imp(); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_end()\n-{\n-  return (PB_DS_node_end_imp());\n-}\n+{ return PB_DS_node_end_imp(); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_begin_imp() const\n {\n-  return (const_node_iterator(\n-\t\t\t      const_cast<pointer>(mid_pointer(begin(), end())),\n+  return const_node_iterator(const_cast<pointer>(mid_pointer(begin(), end())),\n \t\t\t      const_cast<pointer>(begin()),\n \t\t\t      const_cast<pointer>(end()),(m_a_metadata == NULL)?\n \t\t\t      NULL :\n-\t\t\t      mid_pointer(m_a_metadata, m_a_metadata + m_size)));\n+\t\t\t      mid_pointer(m_a_metadata, m_a_metadata + m_size));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_end_imp() const\n {\n-  return (const_node_iterator(\n-\t\t\t      end(),\n-\t\t\t      end(),\n-\t\t\t      end(),(m_a_metadata == NULL)?\n-\t\t\t      NULL :\n-\t\t\t      m_a_metadata + m_size));\n+  return const_node_iterator(end(), end(), end(),\n+\t\t     (m_a_metadata == NULL) ? NULL : m_a_metadata + m_size);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_begin_imp()\n {\n-  return (node_iterator(\n-\t\t\tmid_pointer(begin(), end()),\n-\t\t\tbegin(),\n-\t\t\tend(),(m_a_metadata == NULL)?\n-\t\t\tNULL :\n-\t\t\tmid_pointer(m_a_metadata, m_a_metadata + m_size)));\n+  return node_iterator(mid_pointer(begin(), end()), begin(), end(),\n+\t\t       (m_a_metadata == NULL) ? NULL : mid_pointer(m_a_metadata, m_a_metadata + m_size));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_end_imp()\n {\n-  return (node_iterator(\n-\t\t\tend(),\n-\t\t\tend(),\n-\t\t\tend(),(m_a_metadata == NULL)?\n-\t\t\tNULL :\n-\t\t\tm_a_metadata + m_size));\n+  return node_iterator(end(), end(),\n+\t\t  end(),(m_a_metadata == NULL) ? NULL : m_a_metadata + m_size);\n }\n "}, {"sha": "d64ad20233968d2f1d0470ccda2d6570b2cb34a7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -55,7 +55,6 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n #define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n     typedef\t\t\t\t\t\t\t\t\\\n     static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> \\"}, {"sha": "f9e2714431259ea82111872aa08aba50402a1932", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 40, "deletions": 96, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -64,7 +64,6 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n #define PB_DS_CLASS_T_DEC \\\n     template<typename Key, typename Mapped, class Cmp_Fn, \\\n \t     class Node_And_It_Traits, class Allocator>\n@@ -128,47 +127,29 @@ namespace pb_ds\n       public Node_And_It_Traits::node_update,\n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n-\n     private:\n-      typedef\n-      typename remove_const<\n-      typename PB_DS_TYPES_TRAITS_C_DEC::value_type>::type\n-      non_const_value_type;\n+      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tnon_const_value_type>::other\n-      value_allocator;\n+      typedef typename remove_const<typename traits_base::value_type>::type non_const_value_type;\n \n+      typedef typename Allocator::template rebind<non_const_value_type>::other value_allocator;\n       typedef typename value_allocator::pointer value_vector;\n \n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n \n       typedef Cmp_Fn cmp_fn_base;\n \n #ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n #endif \n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer mapped_pointer_;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer\n-      const_mapped_pointer_;\n+      typedef typename traits_base::pointer mapped_pointer_;\n+      typedef typename traits_base::const_pointer const_mapped_pointer_;\n \n       typedef typename Node_And_It_Traits::metadata_type metadata_type;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tmetadata_type>::other\n-      metadata_allocator;\n-\n+      typedef typename Allocator::template rebind<metadata_type>::other metadata_allocator;\n       typedef typename metadata_allocator::pointer metadata_pointer;\n-\n-      typedef\n-      typename metadata_allocator::const_reference\n-      const_metadata_reference;\n-\n+      typedef typename metadata_allocator::const_reference const_metadata_reference;\n       typedef typename metadata_allocator::reference metadata_reference;\n \n       typedef\n@@ -177,59 +158,29 @@ namespace pb_ds\n \n     public:\n \n+      typedef Allocator allocator;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n \n       typedef Cmp_Fn cmp_fn;\n \n       typedef typename Node_And_It_Traits::node_update node_update;\n \n-      typedef Allocator allocator;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n+      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_pointer key_pointer;\n+      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_reference key_reference;\n+      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::mapped_type mapped_type;\n+      typedef typename traits_base::mapped_pointer mapped_pointer;\n+      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_reference mapped_reference;\n+      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::value_type value_type;\n+      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::const_pointer const_pointer;\n+      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::const_reference const_reference;\n \n       typedef const_pointer const_point_iterator;\n \n@@ -255,20 +206,20 @@ namespace pb_ds\n \n       PB_DS_OV_TREE_CLASS_NAME();\n \n-      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn);\n+      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn&);\n \n-      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update);\n+      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn&, const node_update&);\n \n-      PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       ~PB_DS_OV_TREE_CLASS_NAME();\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       inline size_type\n       max_size() const;\n@@ -342,9 +293,7 @@ namespace pb_ds\n \n       inline const_point_iterator\n       lower_bound(const_key_reference r_key) const\n-      {\n-\treturn (const_cast<PB_DS_CLASS_C_DEC& >(*this).lower_bound(r_key));\n-      }\n+      { return const_cast<PB_DS_CLASS_C_DEC& >(*this).lower_bound(r_key); }\n \n       inline point_iterator\n       upper_bound(const_key_reference r_key)\n@@ -384,11 +333,11 @@ namespace pb_ds\n       { return (const_cast<PB_DS_CLASS_C_DEC& >(*this).find(r_key)); }\n \n       bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       inline iterator\n       erase(iterator it)\n@@ -398,10 +347,10 @@ namespace pb_ds\n       clear();\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other);\n+      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n \n       inline iterator\n       begin()\n@@ -438,25 +387,25 @@ namespace pb_ds\n \n       template<typename Node_Update>\n       void\n-      update(node_iterator it, Node_Update* p_update);\n+      update(node_iterator, Node_Update*);\n \n       void\n       reallocate_metadata(null_node_update_pointer, size_type);\n \n       template<typename Node_Update_>\n       void\n-      reallocate_metadata(Node_Update_* p_update, size_type new_size);\n+      reallocate_metadata(Node_Update_*, size_type);\n \n       template<typename It>\n       void\n-      copy_from_ordered_range(It first_it, It last_it);\n+      copy_from_ordered_range(It, It);\n \n       void\n-      value_swap(PB_DS_CLASS_C_DEC& other);\n+      value_swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename It>\n       void\n-      copy_from_ordered_range(It first_it, It last_it, It other_first_it, It other_last_it);\n+      copy_from_ordered_range(It, It, It, It);\n \n       template<typename Ptr>\n       inline static Ptr\n@@ -543,16 +492,12 @@ namespace pb_ds\n       PB_DS_node_end_imp();\n \n     private:\n-      value_vector m_a_values;\n-\n       static value_allocator s_value_alloc;\n-\n-      metadata_pointer m_a_metadata;\n-\n       static metadata_allocator s_metadata_alloc;\n \n+      value_vector m_a_values;\n+      metadata_pointer m_a_metadata;\n       iterator m_end_it;\n-\n       size_type m_size;\n     };\n \n@@ -577,7 +522,6 @@ namespace pb_ds\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n-\n #undef PB_DS_CONST_NODE_ITERATOR_NAME\n \n   } // namespace detail"}, {"sha": "8ed19f1ef20e6e6e7aee0974c9e6dffa9c1b9d4a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,14 +48,10 @@ PB_DS_CLASS_T_DEC\n Cmp_Fn& \n PB_DS_CLASS_C_DEC::\n get_cmp_fn()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Cmp_Fn& \n PB_DS_CLASS_C_DEC::\n get_cmp_fn() const\n-{\n-  return (*this);\n-}\n+{ return *this; }"}, {"sha": "7f6e5d48f7cb0638dcd55db41825d0fdb969ed1e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 33, "deletions": 69, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,130 +50,94 @@ PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n-    if (m_size == 0)\n-      {\n-        other.clear();\n-\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-\t  return;\n-      }\n+  if (m_size == 0)\n+    {\n+      other.clear();\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n+    }\n \n   if (Cmp_Fn::operator()(r_key, PB_DS_V2F(*begin())))\n     {\n       value_swap(other);\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n     }\n \n-  if (!Cmp_Fn::operator()(\n-\t\t\t  r_key,\n-\t\t\t  PB_DS_V2F(*(end() - 1))))\n+  if (!Cmp_Fn::operator()(r_key, PB_DS_V2F(*(end() - 1))))\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n     }\n \n   if (m_size == 1)\n     {\n       value_swap(other);\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n-\n-    iterator it = upper_bound(r_key);\n-\n+  iterator it = upper_bound(r_key);\n   PB_DS_CLASS_C_DEC new_other(other, other);\n-\n   new_other.copy_from_ordered_range(it, end());\n-\n   PB_DS_CLASS_C_DEC new_this(*this, * this);\n-\n   new_this.copy_from_ordered_range(begin(), it);\n \n   // No exceptions from this point.\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(\n-\t\t\t\t       r_key,(Cmp_Fn& )(*this),\n-\t\t\t\t       other);)\n-\n-    other.update(other.node_begin(), (node_update* )(&other));\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n+  other.update(other.node_begin(), (node_update* )(&other));\n   update(node_begin(), (node_update* )this);\n-\n   other.value_swap(new_other);\n-\n   value_swap(new_this);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    if (other.m_size == 0)\n-      return;\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  if (other.m_size == 0)\n+    return;\n \n   if (m_size == 0)\n     {\n       value_swap(other);\n-\n       return;\n     }\n \n-  const bool greater = Cmp_Fn::operator()(\n-\t\t\t\t\t  PB_DS_V2F(*(end() - 1)),\n+  const bool greater = Cmp_Fn::operator()(PB_DS_V2F(*(end() - 1)),\n \t\t\t\t\t  PB_DS_V2F(*other.begin()));\n \n-  const bool lesser = Cmp_Fn::operator()(\n-\t\t\t\t\t PB_DS_V2F(*(other.end() - 1)),\n+  const bool lesser = Cmp_Fn::operator()(PB_DS_V2F(*(other.end() - 1)),\n \t\t\t\t\t PB_DS_V2F(*begin()));\n \n   if (!greater&&  !lesser)\n     throw join_error();\n \n-  PB_DS_CLASS_C_DEC new_this(*this, * this);\n+  PB_DS_CLASS_C_DEC new_this(*this, *this);\n \n   if (greater)\n-    new_this.copy_from_ordered_range(\n-\t\t\t\t     begin(),\n-\t\t\t\t     end(),\n-\t\t\t\t     other.begin(),\n-\t\t\t\t     other.end());\n+    new_this.copy_from_ordered_range(begin(), end(), \n+\t\t\t\t     other.begin(), other.end());\n   else\n-    new_this.copy_from_ordered_range(\n-\t\t\t\t     other.begin(),\n-\t\t\t\t     other.end(),\n-\t\t\t\t     begin(),\n-\t\t\t\t     end());\n+    new_this.copy_from_ordered_range(other.begin(), other.end(),\n+\t\t\t\t     begin(), end());\n \n   // No exceptions from this point.\n-\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n-\n-    value_swap(new_this);\n-\n+  value_swap(new_this);\n   other.clear();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}"}, {"sha": "82c3fbd3aa67244179f4b86187c323e0ef4d75ea", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,64 +48,52 @@ struct iterator : public const_iterator\n {\n public:\n   typedef std::forward_iterator_tag iterator_category;\n-\n   typedef typename Allocator::difference_type difference_type;\n-\n   typedef node_pointer value_type;\n-\n   typedef node_pointer_pointer pointer;\n-\n   typedef node_pointer_reference reference;\n \n-public:\n   inline\n-  iterator(node_pointer_pointer p_p_cur = NULL,  node_pointer_pointer p_p_end = NULL) : const_iterator(p_p_cur, p_p_end)\n+  iterator(node_pointer_pointer p_p_cur = NULL,  \n+\t   node_pointer_pointer p_p_end = NULL) \n+  : const_iterator(p_p_cur, p_p_end)\n   { }\n \n   inline bool\n   operator==(const iterator& other) const\n-  {\n-    return (const_iterator::m_p_p_cur == other.m_p_p_cur);\n-  }\n+  { return const_iterator::m_p_p_cur == other.m_p_p_cur; }\n \n   inline bool\n   operator!=(const iterator& other) const\n-  {\n-    return (const_iterator::m_p_p_cur != other.m_p_p_cur);\n-  }\n+  { return const_iterator::m_p_p_cur != other.m_p_p_cur; }\n \n   inline iterator& \n   operator++()\n   {\n     const_iterator::operator++();\n-\n-    return (*this);\n+    return *this;\n   }\n \n   inline iterator\n   operator++(int)\n   {\n     iterator ret_it(*this);\n-\n     operator++();\n-\n-    return (ret_it);\n+    return ret_it;\n   }\n \n   node_pointer_pointer\n   operator->()\n   {\n     _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n-\n-      return (const_iterator::m_p_p_cur);\n+    return const_iterator::m_p_p_cur;\n   }\n \n   node_pointer\n   operator*()\n   {\n     _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n-\n-      return (*const_iterator::m_p_p_cur);\n+    return *const_iterator::m_p_p_cur;\n   }\n };\n "}, {"sha": "64c16b1d2aa2be5c10c36b3a045da58cef8766be", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -79,9 +79,7 @@ class cond_dealtor\n \n protected:\n   leaf_pointer m_p_nd;\n-\n   bool m_no_action_dtor;\n-\n   bool m_call_destructor;\n };\n "}, {"sha": "0fba3a4e2859d512773c258abc22308ad4e68280", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 24, "deletions": 100, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,34 +50,23 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   node_pointer p_nd = find_imp(r_key);\n-\n   if (p_nd == NULL || p_nd->m_type == pat_trie_internal_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t      r_key));\n-\n-      return (false);\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+      return false;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n-\n-  if (!synth_e_access_traits::equal_keys(\n-\t\t\t\t\t PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()),\n-\t\t\t\t\t r_key))\n+  if (!synth_e_access_traits::equal_keys(PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t      r_key));\n-\n-      return (false);\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+      return false;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n   erase_leaf(static_cast<leaf_pointer>(p_nd));\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -86,51 +75,40 @@ PB_DS_CLASS_C_DEC::\n erase_fixup(internal_node_pointer p_nd)\n {\n   _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) >= 1);\n-\n   if (std::distance(p_nd->begin(), p_nd->end()) == 1)\n     {\n       node_pointer p_parent = p_nd->m_p_parent;\n-\n       if (p_parent == m_p_head)\n \tm_p_head->m_p_parent =* p_nd->begin();\n       else\n         {\n \t  _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n-\n \t  node_pointer p_new_child =* p_nd->begin();\n-\n \t  static_cast<internal_node_pointer>(p_parent)->replace_child(\n \t\t\t\t\t\t\t\t      p_new_child,\n \t\t\t\t\t\t\t\t      pref_begin(p_new_child),\n \t\t\t\t\t\t\t\t      pref_end(p_new_child),\n \t\t\t\t\t\t\t\t      this);\n         }\n       (*p_nd->begin())->m_p_parent = p_nd->m_p_parent;\n-\n       p_nd->~internal_node();\n-\n       s_internal_node_allocator.deallocate(p_nd, 1);\n \n       if (p_parent == m_p_head)\n \treturn;\n \n       _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n-\n       p_nd = static_cast<internal_node_pointer>(p_parent);\n     }\n \n   while (true)\n     {\n       _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) > 1);\n-\n       p_nd->update_prefixes(this);\n-\n       apply_update(p_nd, (node_update* )this);\n-\n       _GLIBCXX_DEBUG_ONLY(p_nd->assert_valid(this);)\n-\n-        if (p_nd->m_p_parent->m_type == pat_trie_head_node_type)\n-\t  return;\n+      if (p_nd->m_p_parent->m_type == pat_trie_head_node_type)\n+        return;\n \n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent->m_type ==\n \t\t       pat_trie_internal_node_type);\n@@ -146,11 +124,8 @@ actual_erase_leaf(leaf_pointer p_l)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n   _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_l->value())));\n-\n   p_l->~leaf();\n-\n   s_leaf_allocator.deallocate(p_l, 1);\n }\n \n@@ -160,20 +135,15 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    if (empty())\n-      return;\n+  if (empty())\n+    return;\n \n   clear_imp(m_p_head->m_p_parent);\n-\n   m_size = 0;\n-\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n-\n-    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n@@ -183,29 +153,21 @@ clear_imp(node_pointer p_nd)\n   if (p_nd->m_type == pat_trie_internal_node_type)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n       for (typename internal_node::iterator it =\n \t     static_cast<internal_node_pointer>(p_nd)->begin();\n \t   it != static_cast<internal_node_pointer>(p_nd)->end();\n \t   ++it)\n         {\n \t  node_pointer p_child =* it;\n-\n \t  clear_imp(p_child);\n         }\n-\n-      s_internal_node_allocator.deallocate(\n-\t\t\t\t\t   static_cast<internal_node_pointer>(p_nd), 1);\n-\n+      s_internal_node_allocator.deallocate(static_cast<internal_node_pointer>(p_nd), 1);\n       return;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n-\n   static_cast<leaf_pointer>(p_nd)->~leaf();\n-\n-  s_leaf_allocator.deallocate(\n-\t\t\t      static_cast<leaf_pointer>(p_nd), 1);\n+  s_leaf_allocator.deallocate(static_cast<leaf_pointer>(p_nd), 1);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -216,19 +178,14 @@ erase(const_iterator it)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == end())\n-    return (it);\n+    return it;\n \n   const_iterator ret_it = it;\n-\n   ++ret_it;\n-\n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -240,19 +197,13 @@ erase(iterator it)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == end())\n-    return (it);\n-\n+    return it;\n   iterator ret_it = it;\n-\n   ++ret_it;\n-\n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n #endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n \n@@ -264,19 +215,14 @@ erase(const_reverse_iterator it)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == m_p_head)\n-    return (it);\n-\n+    return it;\n   const_reverse_iterator ret_it = it;\n-\n   ++ret_it;\n \n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -288,19 +234,14 @@ erase(reverse_iterator it)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == m_p_head)\n-    return (it);\n-\n+    return it;\n   reverse_iterator ret_it = it;\n-\n   ++ret_it;\n \n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n #endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n \n@@ -311,28 +252,23 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   size_type num_ersd = 0;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    iterator it = begin();\n-\n+  iterator it = begin();\n   while (it != end())\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n         if (pred(*it))\n \t  {\n             ++num_ersd;\n-\n             it = erase(it);\n \t  }\n         else\n \t  ++it;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -341,28 +277,22 @@ PB_DS_CLASS_C_DEC::\n erase_leaf(leaf_pointer p_l)\n {\n   update_min_max_for_erased_leaf(p_l);\n-\n   if (p_l->m_p_parent->m_type == pat_trie_head_node_type)\n     {\n       _GLIBCXX_DEBUG_ASSERT(size() == 1);\n-\n       clear();\n-\n       return;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(size() > 1);\n-\n   _GLIBCXX_DEBUG_ASSERT(p_l->m_p_parent->m_type ==\n \t\t   pat_trie_internal_node_type);\n \n   internal_node_pointer p_parent =\n     static_cast<internal_node_pointer>(p_l->m_p_parent);\n \n   p_parent->remove_child(p_l);\n-\n   erase_fixup(p_parent);\n-\n   actual_erase_leaf(p_l);\n }\n \n@@ -375,27 +305,21 @@ update_min_max_for_erased_leaf(leaf_pointer p_l)\n     {\n       m_p_head->m_p_min = m_p_head;\n       m_p_head->m_p_max = m_p_head;\n-\n       return;\n     }\n \n   if (p_l == static_cast<const_leaf_pointer>(m_p_head->m_p_min))\n     {\n       iterator it(p_l);\n-\n       ++it;\n-\n       m_p_head->m_p_min = it.m_p_nd;\n-\n       return;\n     }\n \n   if (p_l == static_cast<const_leaf_pointer>(m_p_head->m_p_max))\n     {\n       iterator it(p_l);\n-\n       --it;\n-\n       m_p_head->m_p_max = it.m_p_nd;\n     }\n }"}, {"sha": "d9b3c4a941873b742e2fb6a90f79b8ca1415f611", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 39, "deletions": 82, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,28 +50,22 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    node_pointer p_nd = find_imp(r_key);\n+  node_pointer p_nd = find_imp(r_key);\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-        return (end());\n+      return end();\n     }\n \n-  if (synth_e_access_traits::equal_keys(\n-\t\t\t\t\tPB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()),\n-\t\t\t\t\tr_key))\n+  if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n-      return (iterator(p_nd));\n+      return iterator(p_nd);\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-    return (end());\n+  return end();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -81,29 +75,22 @@ find(const_key_reference r_key) const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    const_node_pointer p_nd =\n-    const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n+  const_node_pointer p_nd = const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-        return (end());\n+      return end();\n     }\n \n-  if (synth_e_access_traits::equal_keys(\n-\t\t\t\t\tPB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()),\n-\t\t\t\t\tr_key))\n+  if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n-\t\t\t\t\t\t      r_key));\n-\n-      return (const_iterator(const_cast<node_pointer>(p_nd)));\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+      return const_iterator(const_cast<node_pointer>(p_nd));\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-    return (end());\n+  return end();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -125,17 +112,13 @@ find_imp(const_key_reference r_key)\n   while (p_nd->m_type != pat_trie_leaf_node_type)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n-      node_pointer p_next_nd =\n-\tstatic_cast<internal_node_pointer>(p_nd)->get_child_node(                b_it,  e_it,  this);\n+      node_pointer p_next_nd = static_cast<internal_node_pointer>(p_nd)->get_child_node(b_it,  e_it,  this);\n \n       if (p_next_nd == NULL)\n-\treturn (p_nd);\n-\n+\treturn p_nd;\n       p_nd = p_next_nd;\n     }\n-\n-  return (p_nd);\n+  return p_nd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -156,31 +139,23 @@ lower_bound_imp(const_key_reference r_key)\n     synth_e_access_traits::end(r_key);\n \n   size_type checked_ind = 0;\n-\n   while (true)\n     {\n       if (p_nd->m_type == pat_trie_leaf_node_type)\n         {\n-\t  if (!synth_e_access_traits::cmp_keys(\n-\t\t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()),\n-\t\t\t\t\t       r_key))\n-\t    return (p_nd);\n-\n+\t  if (!synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n+\t    return p_nd;\n \t  iterator it(p_nd);\n-\n \t  ++it;\n-\n-\t  return (it.m_p_nd);\n+\t  return it.m_p_nd;\n         }\n \n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n       const size_type new_checked_ind =\n \tstatic_cast<internal_node_pointer>(p_nd)->get_e_ind();\n \n       p_nd =\n \tstatic_cast<internal_node_pointer>(p_nd)->get_lower_bound_child_node(                b_it, e_it, checked_ind, this);\n-\n       checked_ind = new_checked_ind;\n     }\n }\n@@ -189,17 +164,14 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n lower_bound(const_key_reference r_key)\n-{\n-  return (point_iterator(lower_bound_imp(r_key)));\n-}\n+{ return point_iterator(lower_bound_imp(r_key)); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n lower_bound(const_key_reference r_key) const\n {\n-  return (const_point_iterator(\n-\t\t\t       const_cast<PB_DS_CLASS_C_DEC* >(this)->lower_bound_imp(r_key)));\n+  return const_point_iterator(const_cast<PB_DS_CLASS_C_DEC* >(this)->lower_bound_imp(r_key));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -210,17 +182,14 @@ upper_bound(const_key_reference r_key)\n   point_iterator l_bound_it = lower_bound(r_key);\n \n   _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n-\t\t   !synth_e_access_traits::cmp_keys(\n-\t\t\t\t\t\t    PB_DS_V2F(*l_bound_it),\n+\t\t   !synth_e_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n \n   if (l_bound_it == end() ||\n-      synth_e_access_traits::cmp_keys(\n-\t\t\t\t      r_key,\n-\t\t\t\t      PB_DS_V2F(*l_bound_it)))\n-    return (l_bound_it);\n+      synth_e_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n+    return l_bound_it;\n \n-  return (++l_bound_it);\n+  return ++l_bound_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -231,17 +200,13 @@ upper_bound(const_key_reference r_key) const\n   const_point_iterator l_bound_it = lower_bound(r_key);\n \n   _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n-\t\t   !synth_e_access_traits::cmp_keys(\n-\t\t\t\t\t\t    PB_DS_V2F(*l_bound_it),\n+\t\t   !synth_e_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n \n   if (l_bound_it == end() ||\n-      synth_e_access_traits::cmp_keys(\n-\t\t\t\t      r_key,\n-\t\t\t\t      PB_DS_V2F(*l_bound_it)))\n-    return (l_bound_it);\n-\n-  return (++l_bound_it);\n+      synth_e_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n+    return l_bound_it;\n+  return ++l_bound_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -250,12 +215,10 @@ PB_DS_CLASS_C_DEC::\n pref_begin(const_node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (synth_e_access_traits::begin(\n-\t\t\t\t\t PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n+    return (synth_e_access_traits::begin(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n-  return (static_cast<const_internal_node_pointer>(p_nd)->pref_b_it());\n+  return static_cast<const_internal_node_pointer>(p_nd)->pref_b_it();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -264,12 +227,10 @@ PB_DS_CLASS_C_DEC::\n pref_end(const_node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (synth_e_access_traits::end(\n-\t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n+    return (synth_e_access_traits::end(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n-  return (static_cast<const_internal_node_pointer>(p_nd)->pref_e_it());\n+  return static_cast<const_internal_node_pointer>(p_nd)->pref_e_it();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -278,9 +239,8 @@ PB_DS_CLASS_C_DEC::\n leftmost_descendant(const_node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (static_cast<const_leaf_pointer>(p_nd));\n-\n-  return (static_cast<const_internal_node_pointer>(p_nd)->leftmost_descendant());\n+    return static_cast<const_leaf_pointer>(p_nd);\n+  return static_cast<const_internal_node_pointer>(p_nd)->leftmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -289,9 +249,8 @@ PB_DS_CLASS_C_DEC::\n leftmost_descendant(node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (static_cast<leaf_pointer>(p_nd));\n-\n-  return (static_cast<internal_node_pointer>(p_nd)->leftmost_descendant());\n+    return static_cast<leaf_pointer>(p_nd);\n+  return static_cast<internal_node_pointer>(p_nd)->leftmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -300,9 +259,8 @@ PB_DS_CLASS_C_DEC::\n rightmost_descendant(const_node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (static_cast<const_leaf_pointer>(p_nd));\n-\n-  return (static_cast<const_internal_node_pointer>(p_nd)->rightmost_descendant());\n+    return static_cast<const_leaf_pointer>(p_nd);\n+  return static_cast<const_internal_node_pointer>(p_nd)->rightmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -311,8 +269,7 @@ PB_DS_CLASS_C_DEC::\n rightmost_descendant(node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (static_cast<leaf_pointer>(p_nd));\n-\n-  return (static_cast<internal_node_pointer>(p_nd)->rightmost_descendant());\n+    return static_cast<leaf_pointer>(p_nd);\n+  return static_cast<internal_node_pointer>(p_nd)->rightmost_descendant();\n }\n "}, {"sha": "e8bee52735083ac57eebcc52d21fdc2dfd9b34cd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/head.hpp", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -54,32 +54,20 @@ namespace pb_ds\n {\n   namespace detail\n   {\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Type_Traits, typename E_Access_Traits,\t\\\n+\t      typename Metadata, typename Allocator>\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tclass Type_Traits,\t\\\n-\t\t\t\t\t\tclass E_Access_Traits,\t\\\n-\t\t\t\t\t\tclass Metadata,\t\t\\\n-\t\t\t\t\t\tclass Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    pat_trie_head<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tType_Traits,\t\t\\\n-\t\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\t\tMetadata,\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\\\n-    pat_trie_node_base<\t\t\t\t\t\t\\\n-\t\t\t\t\tType_Traits,\t\t\\\n-\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\tMetadata,\t\t\\\n-\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    pat_trie_head<Type_Traits, E_Access_Traits,\tMetadata, Allocator>\n+\n+#define PB_DS_BASE_C_DEC \\\n+    pat_trie_node_base<Type_Traits, E_Access_Traits, Metadata, Allocator>\n \n     template<typename Type_Traits,\n-\t     class E_Access_Traits,\n-\t     class Metadata,\n-\t     class Allocator>\n+\t     typename E_Access_Traits,\n+\t     typename Metadata,\n+\t     typename Allocator>\n     struct pat_trie_head : public PB_DS_BASE_C_DEC\n     {\n     private:"}, {"sha": "7e20cd184f40c100134e82d5a3bc39ed64fd6cf0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,23 +48,17 @@ PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (m_size == 0);\n-}\n+{ return (m_size == 0); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (m_size);\n-}\n+{ return m_size; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_internal_node_allocator.max_size());\n-}\n+{ return s_internal_node_allocator.max_size(); }\n "}, {"sha": "ff117c514ab28c954c897176a49246599c2210d8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,43 +48,34 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n begin()\n-{\n-  return (iterator(m_p_head->m_p_min));\n-}\n+{ return iterator(m_p_head->m_p_min); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n begin() const\n-{\n-  return (const_iterator(m_p_head->m_p_min));\n-}\n+{ return const_iterator(m_p_head->m_p_min); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{\n-  return (iterator(m_p_head));\n-}\n+{ return iterator(m_p_head); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n-{\n-  return (const_iterator(m_p_head));\n-}\n+{ return const_iterator(m_p_head); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_reverse_iterator\n PB_DS_CLASS_C_DEC::\n rbegin() const\n {\n   if (empty())\n-    return (rend());\n-\n-  return (--end());\n+    return rend();\n+  return --end();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -93,56 +84,43 @@ PB_DS_CLASS_C_DEC::\n rbegin()\n {\n   if (empty())\n-    return (rend());\n-\n-  return (--end());\n+    return rend();\n+  return --end();\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n rend()\n-{\n-  return (reverse_iterator(m_p_head));\n-}\n+{ return reverse_iterator(m_p_head); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_reverse_iterator\n PB_DS_CLASS_C_DEC::\n rend() const\n-{\n-  return (const_reverse_iterator(m_p_head));\n-}\n+{ return const_reverse_iterator(m_p_head); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_begin() const\n-{\n-  return (const_node_iterator(m_p_head->m_p_parent, this));\n-}\n+{ return const_node_iterator(m_p_head->m_p_parent, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_begin()\n-{\n-  return (node_iterator(m_p_head->m_p_parent, this));\n-}\n+{ return node_iterator(m_p_head->m_p_parent, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n-{\n-  return (const_node_iterator(NULL, this));\n-}\n+{ return const_node_iterator(NULL, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n PB_DS_CLASS_C_DEC::\n node_end()\n-{\n-  return (node_iterator(NULL, this));\n-}\n+{ return node_iterator(NULL, this); }\n "}, {"sha": "08f3761deda1e5528867353d78d0df76b9928c80", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/leaf.hpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -127,7 +127,6 @@ namespace pb_ds\n     private:\n       pat_trie_leaf(const PB_DS_CLASS_C_DEC& other);\n \n-    private:\n       value_type m_value;\n     };\n "}, {"sha": "753e66b28a5ce4f2744e1063f37b57492cd984a7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_base.hpp", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -53,26 +53,15 @@ namespace pb_ds\n {\n   namespace detail\n   {\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Type_Traits, typename E_Access_Traits,\t\\\n+\t     typename Metadata,\ttypename Allocator>\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tclass Type_Traits,\t\\\n-\t\t\t\t\t\tclass E_Access_Traits,\t\\\n-\t\t\t\t\t\tclass Metadata,\t\t\\\n-\t\t\t\t\t\tclass Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    pat_trie_node_base<\t\t\t\t\t\t\\\n-\t\t\t\t\tType_Traits,\t\t\\\n-\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\tMetadata,\t\t\\\n-\t\t\t\t\tAllocator>\n-\n-#define PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\t\t\t\t\\\n-    pat_trie_subtree_debug_info<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tType_Traits,\t\\\n-\t\t\t\t\t\t\tE_Access_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    pat_trie_node_base<Type_Traits, E_Access_Traits, Metadata, Allocator>\n+\n+#define PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\t\\\n+    pat_trie_subtree_debug_info<Type_Traits, E_Access_Traits, Allocator>\n \n     enum pat_trie_node_type\n       {\n@@ -82,9 +71,9 @@ namespace pb_ds\n       };\n \n     template<typename Type_Traits,\n-\t     class E_Access_Traits,\n-\t     class Metadata,\n-\t     class Allocator>\n+\t     typename E_Access_Traits,\n+\t     typename Metadata,\n+\t     typename Allocator>\n     struct pat_trie_node_base : public pat_trie_node_metadata_base<\n       Metadata,\n       Allocator>\n@@ -108,7 +97,6 @@ namespace pb_ds\n       subtree_debug_info;\n #endif \n \n-    public:\n       pat_trie_node_base(pat_trie_node_type type);\n \n #ifdef _GLIBCXX_DEBUG\n@@ -119,9 +107,7 @@ namespace pb_ds\n       assert_valid_imp(const_e_access_traits_pointer p_traits) const = 0;\n #endif \n \n-    public:\n       node_pointer m_p_parent;\n-\n       const pat_trie_node_type m_type;\n     };\n "}, {"sha": "9c8a40c4fdce6bca798f57b6231f1baaaf384cfe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -87,7 +87,6 @@ namespace pb_ds\n \t     class Allocator>\n     class pat_trie_const_node_it_\n     {\n-\n     protected:\n       typedef\n       typename Allocator::template rebind<\n@@ -181,14 +180,11 @@ namespace pb_ds\n \tmetadata_type>::other::const_reference\n       const_metadata_reference;\n \n-    public:\n-\n       // Default constructor.\n       /*\n \tinline\n \tpat_trie_const_node_it_()\n       */\n-\n       inline\n       pat_trie_const_node_it_(node_pointer p_nd = NULL,  \n \t\t\t      const_e_access_traits_pointer p_traits = NULL) \n@@ -219,7 +215,7 @@ namespace pb_ds\n       num_children() const\n       {\n \tif (m_p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return (0);\n+\t  return 0;\n \t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n \treturn std::distance(static_cast<internal_node_pointer>(m_p_nd)->begin(),  static_cast<internal_node_pointer>(m_p_nd)->end());\n       }\n@@ -270,7 +266,6 @@ namespace pb_ds\n       public PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n \n     {\n-\n     private:\n       typedef\n       typename Allocator::template rebind<\n@@ -303,8 +298,6 @@ namespace pb_ds\n       // __Iterator's __const reference type.\n       typedef value_type const_reference;\n \n-    public:\n-\n       // Default constructor.\n       /*\n \tinline\n@@ -328,8 +321,7 @@ namespace pb_ds\n       PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\n       get_child(size_type i) const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type ==\n-\t\t\t pat_trie_internal_node_type);\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type == pat_trie_internal_node_type);\n \n \ttypename Internal_Node::iterator it =\n \t  static_cast<internal_node_pointer>(base_type::m_p_nd)->begin();"}, {"sha": "cb0a032cb1f5d7352e2711d94260bf525b864839", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 124, "deletions": 232, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -75,37 +75,26 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<typename Key, typename Mapped, class Node_And_It_Traits, \\\n-\t     class Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Node_And_It_Traits, \\\n+\t     typename Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    pat_trie_data_\n+#define PB_DS_CLASS_NAME pat_trie_data_\n #endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    pat_trie_no_data_\n+#define PB_DS_CLASS_NAME pat_trie_no_data_\n #endif \n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\t\\\n-\t\t\t\t\t\tNode_And_It_Traits,\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Node_And_It_Traits, Allocator>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_TYPES_TRAITS_C_DEC \\\n+    types_traits<Key, Mapped, Allocator, false>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n+#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n     map_debug_base<Key,\teq_by_less<Key, \\\n \t\t\tstd::less<Key> >, typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n@@ -122,19 +111,17 @@ namespace pb_ds\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n #endif \n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-    typedef\t\t\t\t\t\t\t\t\\\n-    static_assert_dumclass<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tsizeof(static_assert<(bool)(E)>)> \\\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\\\n+    typedef static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> \\\n     UNIQUE##static_assert_type\n \n     /**\n      * class description = PATRICIA trie implementation.\">\n      **/\n     template<typename Key,\n \t     typename Mapped,\n-\t     class Node_And_It_Traits,\n-\t     class Allocator>\n+\t     typename Node_And_It_Traits,\n+\t     typename Allocator>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n       public PB_DS_MAP_DEBUG_BASE_C_DEC,\n@@ -143,70 +130,31 @@ namespace pb_ds\n       public Node_And_It_Traits::node_update,\n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n-\n     private:\n+      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n \n-      typedef\n-      typename Node_And_It_Traits::synth_e_access_traits\n-      synth_e_access_traits;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tsynth_e_access_traits>::other::const_pointer\n-      const_e_access_traits_pointer;\n-\n-      typedef\n-      typename synth_e_access_traits::const_iterator\n-      const_e_iterator;\n+      typedef typename Node_And_It_Traits::synth_e_access_traits synth_e_access_traits;\n+      typedef typename Allocator::template rebind<synth_e_access_traits>::other::const_pointer const_e_access_traits_pointer;\n+      typedef typename synth_e_access_traits::const_iterator const_e_iterator;\n \n       typedef typename Node_And_It_Traits::node node;\n+      typedef typename Allocator::template rebind<node>::other::const_pointer const_node_pointer;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tnode>::other::const_pointer\n-      const_node_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tnode>::other::pointer\n-      node_pointer;\n+      typedef typename Allocator::template rebind<node>::other::pointer node_pointer;\n \n       typedef typename Node_And_It_Traits::head head;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\thead>::other\n-      head_allocator;\n-\n+      typedef typename Allocator::template rebind<head>::other head_allocator;\n       typedef typename head_allocator::pointer head_pointer;\n \n       typedef typename Node_And_It_Traits::leaf leaf;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tleaf>::other\n-      leaf_allocator;\n-\n+      typedef typename Allocator::template rebind<leaf>::other leaf_allocator;\n       typedef typename leaf_allocator::const_pointer const_leaf_pointer;\n-\n       typedef typename leaf_allocator::pointer leaf_pointer;\n \n       typedef typename Node_And_It_Traits::internal_node internal_node;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tinternal_node>::other\n-      internal_node_allocator;\n-\n-      typedef\n-      typename internal_node_allocator::const_pointer\n-      const_internal_node_pointer;\n-\n-      typedef\n-      typename internal_node_allocator::pointer\n-      internal_node_pointer;\n-\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef typename Allocator::template rebind<internal_node>::other internal_node_allocator;\n+      typedef typename internal_node_allocator::const_pointer const_internal_node_pointer;\n+      typedef typename internal_node_allocator::pointer internal_node_pointer;\n \n #include <ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp>\n \n@@ -216,99 +164,50 @@ namespace pb_ds\n \n #include <ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp>\n \n-      typedef\n-      typename Node_And_It_Traits::null_node_update_pointer\n-      null_node_update_pointer;\n+      typedef typename Node_And_It_Traits::null_node_update_pointer null_node_update_pointer;\n \n     public:\n       typedef pat_trie_tag container_category;\n-\n+      typedef Allocator allocator;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename Node_And_It_Traits::const_iterator\n-      const_point_iterator;\n-\n+      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_pointer key_pointer;\n+      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_reference key_reference;\n+      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::mapped_type mapped_type;\n+      typedef typename traits_base::mapped_pointer mapped_pointer;\n+      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_reference mapped_reference;\n+      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::value_type value_type;\n+      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::const_pointer const_pointer;\n+      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::const_reference const_reference;\n+\n+      typedef typename Node_And_It_Traits::const_iterator const_point_iterator;\n       typedef typename Node_And_It_Traits::iterator point_iterator;\n-\n       typedef const_point_iterator const_iterator;\n-\n       typedef point_iterator iterator;\n \n-      typedef\n-      typename Node_And_It_Traits::const_reverse_iterator\n-      const_reverse_iterator;\n-\n+      typedef typename Node_And_It_Traits::const_reverse_iterator const_reverse_iterator;\n       typedef typename Node_And_It_Traits::reverse_iterator reverse_iterator;\n-\n-      typedef\n-      typename Node_And_It_Traits::const_node_iterator\n-      const_node_iterator;\n-\n+      typedef typename Node_And_It_Traits::const_node_iterator const_node_iterator;\n       typedef typename Node_And_It_Traits::node_iterator node_iterator;\n-\n       typedef typename Node_And_It_Traits::e_access_traits e_access_traits;\n-\n       typedef typename Node_And_It_Traits::node_update node_update;\n \n-      typedef Allocator allocator;\n-\n-    public:\n-\n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const e_access_traits& r_e_access_traits);\n+      PB_DS_CLASS_NAME(const e_access_traits&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       ~PB_DS_CLASS_NAME();\n \n@@ -333,74 +232,69 @@ namespace pb_ds\n       const node_update& \n       get_node_update() const;\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n-      insert(const_reference r_val);\n+      inline std::pair<point_iterator, bool>\n+      insert(const_reference);\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\treturn (insert(std::make_pair(\n-\t\t\t\t      r_key,\n-\t\t\t\t      mapped_type())).first->second);\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn insert(std::make_pair(r_key, mapped_type())).first->second;\n+#else \n \tinsert(r_key);\n-\n-\treturn (traits_base::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE\n+\treturn traits_base::s_null_mapped;\n+#endif \n       }\n \n       inline point_iterator\n-      find(const_key_reference r_key);\n+      find(const_key_reference);\n \n       inline const_point_iterator\n-      find(const_key_reference r_key) const;\n+      find(const_key_reference) const;\n \n       inline point_iterator\n-      lower_bound(const_key_reference r_key);\n+      lower_bound(const_key_reference);\n \n       inline const_point_iterator\n-      lower_bound(const_key_reference r_key) const;\n+      lower_bound(const_key_reference) const;\n \n       inline point_iterator\n-      upper_bound(const_key_reference r_key);\n+      upper_bound(const_key_reference);\n \n       inline const_point_iterator\n-      upper_bound(const_key_reference r_key) const;\n+      upper_bound(const_key_reference) const;\n \n       void\n       clear();\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       inline const_iterator\n-      erase(const_iterator it);\n+      erase(const_iterator);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline iterator\n-      erase(iterator it);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+      erase(iterator);\n+#endif \n \n       inline const_reverse_iterator\n-      erase(const_reverse_iterator it);\n+      erase(const_reverse_iterator);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline reverse_iterator\n-      erase(reverse_iterator it);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+      erase(reverse_iterator);\n+#endif \n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other);\n+      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n \n       inline iterator\n       begin();\n@@ -439,119 +333,125 @@ namespace pb_ds\n       node_end();\n \n #ifdef PB_DS_PAT_TRIE_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_PAT_TRIE_TRACE_\n+#endif \n \n     protected:\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       void\n-      value_swap(PB_DS_CLASS_C_DEC& other);\n+      value_swap(PB_DS_CLASS_C_DEC&);\n \n       node_pointer\n-      recursive_copy_node(const_node_pointer p_other_nd);\n+      recursive_copy_node(const_node_pointer);\n \n     private:\n \n       void\n       initialize();\n \n       inline void\n-      apply_update(node_pointer p_nd, null_node_update_pointer);\n+      apply_update(node_pointer, null_node_update_pointer);\n \n       template<typename Node_Update_>\n       inline void\n-      apply_update(node_pointer p_nd, Node_Update_* p_update);\n+      apply_update(node_pointer, Node_Update_*);\n \n       bool\n-      join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag);\n+      join_prep(PB_DS_CLASS_C_DEC&, split_join_branch_bag&);\n \n       void\n-      rec_join_prep(const_node_pointer p_l, const_node_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join_prep(const_node_pointer, const_node_pointer, \n+\t\t    split_join_branch_bag&);\n \n       void\n-      rec_join_prep(const_leaf_pointer p_l, const_leaf_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join_prep(const_leaf_pointer, const_leaf_pointer, \n+\t\t    split_join_branch_bag&);\n \n       void\n-      rec_join_prep(const_leaf_pointer p_l, const_internal_node_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join_prep(const_leaf_pointer, const_internal_node_pointer, \n+\t\t    split_join_branch_bag&);\n \n       void\n-      rec_join_prep(const_internal_node_pointer p_l, const_leaf_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join_prep(const_internal_node_pointer, const_leaf_pointer, \n+\t\t    split_join_branch_bag&);\n \n       void\n-      rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join_prep(const_internal_node_pointer, const_internal_node_pointer, \n+\t\t    split_join_branch_bag&);\n \n       node_pointer\n-      rec_join(node_pointer p_l, node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag);\n+      rec_join(node_pointer, node_pointer, size_type, split_join_branch_bag&);\n \n       node_pointer\n-      rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join(leaf_pointer, leaf_pointer, split_join_branch_bag&);\n \n       node_pointer\n-      rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag);\n+      rec_join(leaf_pointer, internal_node_pointer, size_type, \n+\t       split_join_branch_bag&);\n \n       node_pointer\n-      rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag);\n+      rec_join(internal_node_pointer, leaf_pointer, size_type, \n+\t       split_join_branch_bag&);\n \n       node_pointer\n-      rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch_bag& r_bag);\n+      rec_join(internal_node_pointer, internal_node_pointer, \n+\t       split_join_branch_bag&);\n \n       size_type\n-      keys_diff_ind(typename e_access_traits::const_iterator b_l, typename e_access_traits::const_iterator e_l, typename e_access_traits::const_iterator b_r, typename e_access_traits::const_iterator e_r);\n+      keys_diff_ind(typename e_access_traits::const_iterator, typename e_access_traits::const_iterator, typename e_access_traits::const_iterator, typename e_access_traits::const_iterator);\n \n       internal_node_pointer\n-      insert_branch(node_pointer p_left_nd, node_pointer p_right_nd, split_join_branch_bag& r_bag);\n+      insert_branch(node_pointer, node_pointer, split_join_branch_bag&);\n \n       void\n-      update_min_max_for_inserted_leaf(leaf_pointer p_l);\n+      update_min_max_for_inserted_leaf(leaf_pointer);\n \n       void\n-      erase_leaf(leaf_pointer p_l);\n+      erase_leaf(leaf_pointer);\n \n       inline void\n-      actual_erase_leaf(leaf_pointer p_lf);\n+      actual_erase_leaf(leaf_pointer);\n \n       void\n-      clear_imp(node_pointer p_nd);\n+      clear_imp(node_pointer);\n \n       void\n-      erase_fixup(internal_node_pointer p_nd);\n+      erase_fixup(internal_node_pointer);\n \n       void\n-      update_min_max_for_erased_leaf(leaf_pointer p_l);\n+      update_min_max_for_erased_leaf(leaf_pointer);\n \n       static inline const_e_iterator\n-      pref_begin(const_node_pointer p_nd);\n+      pref_begin(const_node_pointer);\n \n       static inline const_e_iterator\n-      pref_end(const_node_pointer p_nd);\n+      pref_end(const_node_pointer);\n \n       inline node_pointer\n-      find_imp(const_key_reference r_key);\n+      find_imp(const_key_reference);\n \n       inline node_pointer\n-      lower_bound_imp(const_key_reference r_key);\n+      lower_bound_imp(const_key_reference);\n \n       inline node_pointer\n-      upper_bound_imp(const_key_reference r_key);\n+      upper_bound_imp(const_key_reference);\n \n       inline static const_leaf_pointer\n-      leftmost_descendant(const_node_pointer p_nd);\n+      leftmost_descendant(const_node_pointer);\n \n       inline static leaf_pointer\n-      leftmost_descendant(node_pointer p_nd);\n+      leftmost_descendant(node_pointer);\n \n       inline static const_leaf_pointer\n-      rightmost_descendant(const_node_pointer p_nd);\n+      rightmost_descendant(const_node_pointer);\n \n       inline static leaf_pointer\n-      rightmost_descendant(node_pointer p_nd);\n+      rightmost_descendant(node_pointer);\n \n #ifdef _GLIBCXX_DEBUG\n       void\n@@ -564,45 +464,39 @@ namespace pb_ds\n       assert_reverse_iterators() const;\n \n       static size_type\n-      recursive_count_leafs(const_node_pointer p_nd);\n+      recursive_count_leafs(const_node_pointer);\n #endif \n \n #ifdef PB_DS_PAT_TRIE_TRACE_\n       static void\n-      trace_node(const_node_pointer p_nd, size_type level);\n+      trace_node(const_node_pointer, size_type);\n \n       template<typename Metadata_>\n       static void\n-      trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>);\n+      trace_node_metadata(const_node_pointer, type_to_type<Metadata_>);\n \n       static void\n-      trace_node_metadata(const_node_pointer, \n-\t\t\t  type_to_type<null_node_metadata>);\n+      trace_node_metadata(const_node_pointer, type_to_type<null_node_metadata>);\n #endif \n \n       leaf_pointer\n-      split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, \n-\t\t split_join_branch_bag& r_bag);\n+      split_prep(const_key_reference, PB_DS_CLASS_C_DEC&, \n+\t\t split_join_branch_bag&);\n \n       node_pointer\n-      rec_split(node_pointer p_nd, const_e_iterator b_it, \n-\t\tconst_e_iterator e_it, PB_DS_CLASS_C_DEC& other, \n-\t\tsplit_join_branch_bag& r_bag);\n+      rec_split(node_pointer, const_e_iterator, const_e_iterator, \n+\t\tPB_DS_CLASS_C_DEC&, split_join_branch_bag&);\n \n       void\n-      split_insert_branch(size_type e_ind, const_e_iterator b_it, \n-\t\t\t  typename internal_node::iterator child_b_it, \n-\t\t\t  size_type num_children, split_join_branch_bag&);\n+      split_insert_branch(size_type, const_e_iterator, \n+\t\t\t  typename internal_node::iterator, \n+\t\t\t  size_type, split_join_branch_bag&);\n \n-    private:\n       static head_allocator s_head_allocator;\n-\n       static internal_node_allocator s_internal_node_allocator;\n-\n       static leaf_allocator s_leaf_allocator;\n \n       head_pointer m_p_head;\n-\n       size_type m_size;\n     };\n \n@@ -623,11 +517,9 @@ namespace pb_ds\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_TYPES_TRAITS_C_DEC\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n-\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "1a42dc562f2b534a69826e105325da7f0a744da8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -164,83 +164,75 @@ namespace pb_ds\n       operator=(const PB_DS_CONST_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline\n       PB_DS_CONST_IT_C_DEC& \n       operator=(const PB_DS_CONST_ODIR_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline const_pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n-\treturn (&static_cast<leaf_pointer>(m_p_nd)->value());\n+\treturn &static_cast<leaf_pointer>(m_p_nd)->value();\n       }\n \n       inline const_reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n-\treturn (static_cast<leaf_pointer>(m_p_nd)->value());\n+\treturn static_cast<leaf_pointer>(m_p_nd)->value();\n       }\n \n       inline bool\n       operator==(const PB_DS_CONST_IT_C_DEC& other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      { return (m_p_nd == other.m_p_nd); }\n \n       inline bool\n       operator==(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      { return (m_p_nd == other.m_p_nd); }\n \n       inline bool\n       operator!=(const PB_DS_CONST_IT_C_DEC& other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      { return (m_p_nd != other.m_p_nd); }\n \n       inline bool\n       operator!=(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      { return (m_p_nd != other.m_p_nd); }\n \n       inline PB_DS_CONST_IT_C_DEC& \n       operator++()\n       {\n \tinc(integral_constant<int,Is_Forward_Iterator>());\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_CONST_IT_C_DEC\n       operator++(int)\n       {\n \tPB_DS_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator++();\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n       inline PB_DS_CONST_IT_C_DEC& \n       operator--()\n       {\n \tdec(integral_constant<int,Is_Forward_Iterator>());\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_CONST_IT_C_DEC\n       operator--(int)\n       {\n \tPB_DS_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator--();\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n     protected:\n@@ -345,17 +337,16 @@ namespace pb_ds\n       leftmost_descendant(node_pointer p_nd)\n       {\n \tif (p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return (static_cast<leaf_pointer>(p_nd));\n-\n-\treturn (static_cast<internal_node_pointer>(p_nd)->leftmost_descendant());\n+\t  return static_cast<leaf_pointer>(p_nd);\n+\treturn static_cast<internal_node_pointer>(p_nd)->leftmost_descendant();\n       }\n \n       inline static leaf_pointer\n       rightmost_descendant(node_pointer p_nd)\n       {\n \tif (p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return (static_cast<leaf_pointer>(p_nd));\n-\treturn (static_cast<internal_node_pointer>(p_nd)->rightmost_descendant());\n+\t  return static_cast<leaf_pointer>(p_nd);\n+\treturn static_cast<internal_node_pointer>(p_nd)->rightmost_descendant();\n       }\n \n     public:\n@@ -374,7 +365,6 @@ namespace pb_ds\n       public PB_DS_CONST_IT_C_DEC\n \n     {\n-\n     private:\n       typedef\n       typename Allocator::template rebind<\n@@ -412,8 +402,6 @@ namespace pb_ds\n \n       typedef typename Type_Traits::reference reference;\n \n-    public:\n-\n       inline\n       pat_trie_it_(node_pointer p_nd = NULL) : PB_DS_CONST_IT_C_DEC((node_pointer)p_nd)\n       { }\n@@ -427,62 +415,61 @@ namespace pb_ds\n       operator=(const PB_DS_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline\n       PB_DS_IT_C_DEC& \n       operator=(const PB_DS_ODIR_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline pointer\n       operator->() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd->m_type ==\n-\t\t\t pat_trie_leaf_node_type);\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd->m_type == pat_trie_leaf_node_type);\n \n-\treturn (&static_cast<leaf_pointer>(base_it_type::m_p_nd)->value());\n+\treturn &static_cast<leaf_pointer>(base_it_type::m_p_nd)->value();\n       }\n \n       inline reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd->m_type == pat_trie_leaf_node_type);\n-\treturn (static_cast<leaf_pointer>(base_it_type::m_p_nd)->value());\n+\treturn static_cast<leaf_pointer>(base_it_type::m_p_nd)->value();\n       }\n \n       inline PB_DS_IT_C_DEC& \n       operator++()\n       {\n \tPB_DS_CONST_IT_C_DEC::\n \t  operator++();\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_IT_C_DEC\n       operator++(int)\n       {\n \tPB_DS_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator++();\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n       inline PB_DS_IT_C_DEC& \n       operator--()\n       {\n \tPB_DS_CONST_IT_C_DEC::operator--();\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_IT_C_DEC\n       operator--(int)\n       {\n \tPB_DS_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator--();\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n     protected:"}, {"sha": "7c6eb0f3de8ea7bfd40fa3216e28fd5f75ccaf59", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,30 +48,22 @@ PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::e_access_traits& \n PB_DS_CLASS_C_DEC::\n get_e_access_traits()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const typename PB_DS_CLASS_C_DEC::e_access_traits& \n PB_DS_CLASS_C_DEC::\n get_e_access_traits() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_update& \n PB_DS_CLASS_C_DEC::\n get_node_update()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const typename PB_DS_CLASS_C_DEC::node_update& \n PB_DS_CLASS_C_DEC::\n get_node_update() const\n-{\n-  return (*this);\n-}\n+{ return *this; }"}, {"sha": "6b20fe64680b16af9a95b2e6bcb62ffbfd1e2cf8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -60,15 +60,13 @@ class split_join_branch_bag\n   add_branch()\n   {\n     internal_node_pointer p_nd = s_internal_node_allocator.allocate(1);\n-\n     try\n       {\n \tm_bag.push_back(p_nd);\n       }\n     catch(...)\n       {\n \ts_internal_node_allocator.deallocate(p_nd, 1);\n-\n \tthrow;\n       }\n   }\n@@ -77,31 +75,24 @@ class split_join_branch_bag\n   get_branch()\n   {\n     _GLIBCXX_DEBUG_ASSERT(!m_bag.empty());\n-\n     internal_node_pointer p_nd =* m_bag.begin();\n-\n     m_bag.pop_front();\n-\n-    return (p_nd);\n+    return p_nd;\n   }\n \n   ~split_join_branch_bag()\n   {\n     while (!m_bag.empty())\n       {\n \tinternal_node_pointer p_nd =* m_bag.begin();\n-\n \ts_internal_node_allocator.deallocate(p_nd, 1);\n-\n \tm_bag.pop_front();\n       }\n   }\n \n   inline bool\n   empty() const\n-  {\n-    return (m_bag.empty());\n-  }\n+  { return m_bag.empty(); }\n \n private:\n   bag_t m_bag;"}, {"sha": "cab28ca7707b6456a53a16356fb012cd5bcaa8ac", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,12 +52,9 @@ PB_DS_CLASS_C_DEC::\n trace() const\n {\n   std::cerr << std::endl;\n-\n   if (m_p_head->m_p_parent == NULL)\n     return;\n-\n   trace_node(m_p_head->m_p_parent, 0);\n-\n   std::cerr << std::endl;\n }\n \n@@ -68,29 +65,20 @@ trace_node(const_node_pointer p_nd, size_type level)\n {\n   for (size_type i = 0; i < level; ++i)\n     std::cerr << ' ';\n-\n   std::cerr << p_nd << \" \";\n-\n-  std::cerr << ((p_nd->m_type == pat_trie_leaf_node_type)?\n-\t\t\"l \" :\n-\t\t\"i \");\n+  std::cerr << ((p_nd->m_type == pat_trie_leaf_node_type) ? \"l \" : \"i \");\n \n   trace_node_metadata(p_nd, type_to_type<typename node::metadata_type>());\n-\n-  typename e_access_traits::const_iterator el_it =\n-    pref_begin(p_nd);\n-\n+  typename e_access_traits::const_iterator el_it = pref_begin(p_nd);\n   while (el_it != pref_end(p_nd))\n     {\n       std::cerr <<* el_it;\n-\n       ++el_it;\n     }\n \n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     {\n       std::cerr << std::endl;\n-\n       return;\n     }\n \n@@ -100,16 +88,14 @@ trace_node(const_node_pointer p_nd, size_type level)\n   std::cerr << \" \" <<\n     static_cast<unsigned long>(p_internal->get_e_ind()) << std::endl;\n \n-  const size_type num_children = std::distance(\n-\t\t\t\t\t       p_internal->begin(),\n+  const size_type num_children = std::distance(p_internal->begin(),\n \t\t\t\t\t       p_internal->end());\n \n   for (size_type child_i = 0; child_i < num_children; ++child_i)\n     {\n       typename internal_node::const_iterator child_it =\n \tp_internal->begin();\n       std::advance(child_it, num_children - child_i - 1);\n-\n       trace_node(*child_it, level + 1);\n     }\n }\n@@ -120,8 +106,7 @@ void\n PB_DS_CLASS_C_DEC::\n trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>)\n {\n-  std::cerr << \"(\" <<\n-    static_cast<unsigned long>(p_nd->get_metadata()) << \") \";\n+  std::cerr << \"(\" << static_cast<unsigned long>(p_nd->get_metadata()) << \") \";\n }\n \n PB_DS_CLASS_T_DEC\n@@ -130,5 +115,5 @@ PB_DS_CLASS_C_DEC::\n trace_node_metadata(const_node_pointer, type_to_type<null_node_metadata>)\n { }\n \n-#endif // #ifdef PB_DS_PAT_TRIE_TRACE_\n+#endif \n "}, {"sha": "445376e8c40d0d458e2a68b58cfe2965711362b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -56,7 +56,6 @@ inline void\n PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_*  /*p_update*/)\n {\n-  Node_Update_::operator()(\n-\t\t\t    node_iterator(p_nd, this),\n-\t\t\t    const_node_iterator(NULL, this));\n+  Node_Update_::operator()(node_iterator(p_nd, this),\n+\t\t\t   const_node_iterator(NULL, this));\n }"}, {"sha": "c4a1bb8b77a375d2ac8d8798992aa89960d82288", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -59,56 +59,48 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME()\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn)\n+  base_type(r_cmp_fn)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn, r_node_update)\n+  base_type(r_cmp_fn, r_node_update)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-  PB_DS_BASE_C_DEC(other)\n+  base_type(other)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    PB_DS_BASE_C_DEC::swap(other);\n-\n+  base_type::swap(other);\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n initialize()\n-{\n-  PB_DS_BASE_C_DEC::m_p_head->m_red = true;\n-}\n+{ base_type::m_p_head->m_red = true; }"}, {"sha": "08107ec7755e384d39512e7f15c8558e09ce2e51", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -52,7 +52,7 @@ PB_DS_CLASS_C_DEC::\n assert_node_consistent(const node_pointer p_nd) const\n {\n   if (p_nd == NULL)\n-    return (1);\n+    return 1;\n \n   const size_type l_height = assert_node_consistent(p_nd->m_p_left);\n   const size_type r_height = assert_node_consistent(p_nd->m_p_right);\n@@ -62,16 +62,16 @@ assert_node_consistent(const node_pointer p_nd) const\n       _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_nd->m_p_right));\n     }\n   _GLIBCXX_DEBUG_ASSERT(l_height == r_height);\n-  return ((p_nd->m_red? 0 : 1) + l_height);\n+  return (p_nd->m_red ? 0 : 1) + l_height;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  PB_DS_BASE_C_DEC::assert_valid();\n-  const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n+  base_type::assert_valid();\n+  const node_pointer p_head = base_type::m_p_head;\n   _GLIBCXX_DEBUG_ASSERT(p_head->m_red);\n   if (p_head->m_p_parent != NULL)\n     {"}, {"sha": "77b49907a0ae09e270c872c9d6ca69f840363b80", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 29, "deletions": 88, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,13 +50,10 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   point_iterator it = find(r_key);\n-\n-  if (it == PB_DS_BASE_C_DEC::end())\n-    return (false);\n-\n+  if (it == base_type::end())\n+    return false;\n   erase(it);\n-\n-  return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -65,19 +62,14 @@ PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  if (it == PB_DS_BASE_C_DEC::end())\n-    return (it);\n+  if (it == base_type::end())\n+    return it;\n \n   iterator ret_it = it;\n-\n   ++ret_it;\n-\n   erase_node(it.m_p_nd);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -86,19 +78,14 @@ PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  if (it.m_p_nd == PB_DS_BASE_C_DEC::m_p_head)\n-    return (it);\n+  if (it.m_p_nd == base_type::m_p_head)\n+    return it;\n \n   reverse_iterator ret_it = it;\n-\n   ++ret_it;\n-\n   erase_node(it.m_p_nd);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -108,26 +95,21 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    size_type num_ersd = 0;\n-\n-  iterator it = PB_DS_BASE_C_DEC::begin();\n-\n-  while (it != PB_DS_BASE_C_DEC::end())\n+  size_type num_ersd = 0;\n+  iterator it = base_type::begin();\n+  while (it != base_type::end())\n     {\n       if (pred(*it))\n         {\n \t  ++num_ersd;\n-\n \t  it = erase(it);\n         }\n       else\n \t++it;\n     }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -136,9 +118,7 @@ PB_DS_CLASS_C_DEC::\n erase_node(node_pointer p_nd)\n {\n   remove_node(p_nd);\n-\n-  PB_DS_BASE_C_DEC::actual_erase_node(p_nd);\n-\n+  base_type::actual_erase_node(p_nd);\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n }\n \n@@ -148,11 +128,8 @@ PB_DS_CLASS_C_DEC::\n remove_node(node_pointer p_z)\n {\n   update_min_max_for_erased_node(p_z);\n-\n   node_pointer p_y = p_z;\n-\n   node_pointer p_x = NULL;\n-\n   node_pointer p_new_x_parent = NULL;\n \n   if (p_y->m_p_left == NULL)\n@@ -162,68 +139,55 @@ remove_node(node_pointer p_z)\n   else\n     {\n       p_y = p_y->m_p_right;\n-\n       while (p_y->m_p_left != NULL)\n \tp_y = p_y->m_p_left;\n-\n       p_x = p_y->m_p_right;\n     }\n \n   if (p_y == p_z)\n     {\n       p_new_x_parent = p_y->m_p_parent;\n-\n       if (p_x != NULL)\n \tp_x->m_p_parent = p_y->m_p_parent;\n \n-      if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == p_z)\n-\tPB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_x;\n+      if (base_type::m_p_head->m_p_parent == p_z)\n+\tbase_type::m_p_head->m_p_parent = p_x;\n       else if (p_z->m_p_parent->m_p_left == p_z)\n         {\n \t  p_y->m_p_left = p_z->m_p_parent;\n-\n \t  p_z->m_p_parent->m_p_left = p_x;\n         }\n       else\n         {\n \t  p_y->m_p_left = NULL;\n-\n \t  p_z->m_p_parent->m_p_right = p_x;\n         }\n     }\n   else\n     {\n       p_z->m_p_left->m_p_parent = p_y;\n-\n       p_y->m_p_left = p_z->m_p_left;\n-\n       if (p_y != p_z->m_p_right)\n         {\n \t  p_new_x_parent = p_y->m_p_parent;\n-\n \t  if (p_x != NULL)\n \t    p_x->m_p_parent = p_y->m_p_parent;\n-\n \t  p_y->m_p_parent->m_p_left = p_x;\n-\n \t  p_y->m_p_right = p_z->m_p_right;\n-\n \t  p_z->m_p_right->m_p_parent = p_y;\n         }\n       else\n \tp_new_x_parent = p_y;\n \n-      if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == p_z)\n-\tPB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_y;\n+      if (base_type::m_p_head->m_p_parent == p_z)\n+\tbase_type::m_p_head->m_p_parent = p_y;\n       else if (p_z->m_p_parent->m_p_left == p_z)\n \tp_z->m_p_parent->m_p_left = p_y;\n       else\n \tp_z->m_p_parent->m_p_right = p_y;\n \n       p_y->m_p_parent = p_z->m_p_parent;\n-\n       std::swap(p_y->m_red, p_z->m_red);\n-\n       p_y = p_z;\n     }\n \n@@ -242,30 +206,23 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_x == NULL || p_x->m_p_parent == p_new_x_parent);\n \n-  while (p_x != PB_DS_BASE_C_DEC::m_p_head->m_p_parent&& \n-\t is_effectively_black(p_x))\n+  while (p_x != base_type::m_p_head->m_p_parent && is_effectively_black(p_x))\n     if (p_x == p_new_x_parent->m_p_left)\n       {\n \tnode_pointer p_w = p_new_x_parent->m_p_right;\n-\n \tif (p_w->m_red)\n \t  {\n \t    p_w->m_red = false;\n-\n \t    p_new_x_parent->m_red = true;\n-\n-\t    PB_DS_BASE_C_DEC::rotate_left(p_new_x_parent);\n-\n+\t    base_type::rotate_left(p_new_x_parent);\n \t    p_w = p_new_x_parent->m_p_right;\n \t  }\n \n-\tif (is_effectively_black(p_w->m_p_left)&& \n-\t    is_effectively_black(p_w->m_p_right))\n+\tif (is_effectively_black(p_w->m_p_left) \n+\t    && is_effectively_black(p_w->m_p_right))\n \t  {\n \t    p_w->m_red = true;\n-\n \t    p_x = p_new_x_parent;\n-\n \t    p_new_x_parent = p_new_x_parent->m_p_parent;\n \t  }\n \telse\n@@ -276,48 +233,37 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t\t  p_w->m_p_left->m_red = false;\n \n \t\tp_w->m_red = true;\n-\n-\t\tPB_DS_BASE_C_DEC::rotate_right(p_w);\n-\n+\t\tbase_type::rotate_right(p_w);\n \t\tp_w = p_new_x_parent->m_p_right;\n \t      }\n \n \t    p_w->m_red = p_new_x_parent->m_red;\n-\n \t    p_new_x_parent->m_red = false;\n \n \t    if (p_w->m_p_right != NULL)\n \t      p_w->m_p_right->m_red = false;\n \n-\t    PB_DS_BASE_C_DEC::rotate_left(p_new_x_parent);\n-\n+\t    base_type::rotate_left(p_new_x_parent);\n \t    update_to_top(p_new_x_parent, (node_update* )this);\n-\n \t    break;\n \t  }\n       }\n     else\n       {\n \tnode_pointer p_w = p_new_x_parent->m_p_left;\n-\n \tif (p_w->m_red == true)\n \t  {\n \t    p_w->m_red = false;\n-\n \t    p_new_x_parent->m_red = true;\n-\n-\t    PB_DS_BASE_C_DEC::rotate_right(p_new_x_parent);\n-\n+\t    base_type::rotate_right(p_new_x_parent);\n \t    p_w = p_new_x_parent->m_p_left;\n \t  }\n \n-\tif (is_effectively_black(p_w->m_p_right)&& \n-\t    is_effectively_black(p_w->m_p_left))\n+\tif (is_effectively_black(p_w->m_p_right) \n+\t    && is_effectively_black(p_w->m_p_left))\n \t  {\n \t    p_w->m_red = true;\n-\n \t    p_x = p_new_x_parent;\n-\n \t    p_new_x_parent = p_new_x_parent->m_p_parent;\n \t  }\n \telse\n@@ -328,23 +274,18 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t\t  p_w->m_p_right->m_red = false;\n \n \t\tp_w->m_red = true;\n-\n-\t\tPB_DS_BASE_C_DEC::rotate_left(p_w);\n-\n+\t\tbase_type::rotate_left(p_w);\n \t\tp_w = p_new_x_parent->m_p_left;\n \t      }\n \n \t    p_w->m_red = p_new_x_parent->m_red;\n-\n \t    p_new_x_parent->m_red = false;\n \n \t    if (p_w->m_p_left != NULL)\n \t      p_w->m_p_left->m_red = false;\n \n-\t    PB_DS_BASE_C_DEC::rotate_right(p_new_x_parent);\n-\n+\t    base_type::rotate_right(p_new_x_parent);\n \t    update_to_top(p_new_x_parent, (node_update* )this);\n-\n \t    break;\n \t  }\n       }"}, {"sha": "7b65baac4ffe9a99a4b5df03ebe40f2a2eb7d94e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -48,7 +48,5 @@ PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_effectively_black(const node_pointer p_nd)\n-{\n-  return (p_nd == NULL || !p_nd->m_red);\n-}\n+{ return (p_nd == NULL || !p_nd->m_red); }\n "}, {"sha": "3bc7ce1f3ef2d8d5b4cedcdc4b12da81b34ab461", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,22 +50,16 @@ PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    std::pair<point_iterator, bool> ins_pair =\n-    PB_DS_BASE_C_DEC::insert_leaf(r_value);\n-\n+  std::pair<point_iterator, bool> ins_pair = base_type::insert_leaf(r_value);\n   if (ins_pair.second == true)\n     {\n       ins_pair.first.m_p_nd->m_red = true;\n-\n       _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid();)\n-\n-        insert_fixup(ins_pair.first.m_p_nd);\n+      insert_fixup(ins_pair.first.m_p_nd);\n     }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (ins_pair);\n+  return ins_pair;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -74,75 +68,54 @@ PB_DS_CLASS_C_DEC::\n insert_fixup(node_pointer p_nd)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_red == true);\n-\n-  while (p_nd != PB_DS_BASE_C_DEC::m_p_head->m_p_parent&& \n-\t p_nd->m_p_parent->m_red)\n+  while (p_nd != base_type::m_p_head->m_p_parent && p_nd->m_p_parent->m_red)\n     {\n       if (p_nd->m_p_parent == p_nd->m_p_parent->m_p_parent->m_p_left)\n         {\n \t  node_pointer p_y = p_nd->m_p_parent->m_p_parent->m_p_right;\n-\n-\t  if (p_y != NULL&&  p_y->m_red)\n+\t  if (p_y != NULL && p_y->m_red)\n             {\n \t      p_nd->m_p_parent->m_red = false;\n-\n \t      p_y->m_red = false;\n-\n \t      p_nd->m_p_parent->m_p_parent->m_red = true;\n-\n \t      p_nd = p_nd->m_p_parent->m_p_parent;\n             }\n \t  else\n             {\n \t      if (p_nd == p_nd->m_p_parent->m_p_right)\n                 {\n \t\t  p_nd = p_nd->m_p_parent;\n-\n-\t\t  PB_DS_BASE_C_DEC::rotate_left(p_nd);\n+\t\t  base_type::rotate_left(p_nd);\n                 }\n-\n \t      p_nd->m_p_parent->m_red = false;\n-\n \t      p_nd->m_p_parent->m_p_parent->m_red = true;\n-\n-\t      PB_DS_BASE_C_DEC::rotate_right(\n-\t\t\t\t\t     p_nd->m_p_parent->m_p_parent);\n+\t      base_type::rotate_right(p_nd->m_p_parent->m_p_parent);\n             }\n         }\n       else\n         {\n \t  node_pointer p_y = p_nd->m_p_parent->m_p_parent->m_p_left;\n-\n-\t  if (p_y != NULL&&  p_y->m_red)\n+\t  if (p_y != NULL && p_y->m_red)\n             {\n \t      p_nd->m_p_parent->m_red = false;\n-\n \t      p_y->m_red = false;\n-\n \t      p_nd->m_p_parent->m_p_parent->m_red = true;\n-\n \t      p_nd = p_nd->m_p_parent->m_p_parent;\n             }\n \t  else\n             {\n \t      if (p_nd == p_nd->m_p_parent->m_p_left)\n                 {\n \t\t  p_nd = p_nd->m_p_parent;\n-\n-\t\t  PB_DS_BASE_C_DEC::rotate_right(p_nd);\n+\t\t  base_type::rotate_right(p_nd);\n                 }\n-\n \t      p_nd->m_p_parent->m_red = false;\n-\n \t      p_nd->m_p_parent->m_p_parent->m_red = true;\n-\n-\t      PB_DS_BASE_C_DEC::rotate_left(\n-\t\t\t\t\t    p_nd->m_p_parent->m_p_parent);\n+\t      base_type::rotate_left(p_nd->m_p_parent->m_p_parent);\n             }\n         }\n     }\n \n-  PB_DS_BASE_C_DEC::update_to_top(p_nd, (node_update* )this);\n-\n-  PB_DS_BASE_C_DEC::m_p_head->m_p_parent->m_red = false;\n+  base_type::update_to_top(p_nd, (node_update* )this);\n+  base_type::m_p_head->m_p_parent->m_red = false;\n }"}, {"sha": "164f965a551ac9f9b4c8d15672354288d3978f70", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/node.hpp", "status": "modified", "additions": 17, "deletions": 47, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -53,11 +53,13 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n     template<typename Value_Type, class Metadata, class Allocator>\n     struct rb_tree_node_\n     {\n     public:\n+      typedef Value_Type value_type;\n+      typedef Metadata metadata_type;\n+\n       typedef\n       typename Allocator::template rebind<\n       rb_tree_node_<\n@@ -66,10 +68,6 @@ namespace pb_ds\n       Allocator> >::other::pointer\n       node_pointer;\n \n-      typedef Value_Type value_type;\n-\n-      typedef Metadata metadata_type;\n-\n       typedef\n       typename Allocator::template rebind<\n \tmetadata_type>::other::reference\n@@ -80,55 +78,42 @@ namespace pb_ds\n \tmetadata_type>::other::const_reference\n       const_metadata_reference;\n \n-    public:\n       inline bool\n       special() const\n-      {\n-\treturn (m_red);\n-      }\n+      { return m_red; }\n \n       inline const_metadata_reference\n       get_metadata() const\n-      {\n-\treturn (m_metadata);\n-      }\n+      { return m_metadata; }\n \n       inline metadata_reference\n       get_metadata()\n-      {\n-\treturn (m_metadata);\n-      }\n+      { return m_metadata; }\n \n #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n       void\n       trace() const\n       {\n-\tstd::cout << PB_DS_V2F(m_value) <<(m_red? \" <r> \" : \" <b> \") <<\n-\t  \"(\" << m_metadata << \")\";\n-\n+\tstd::cout << PB_DS_V2F(m_value) <<(m_red? \" <r> \" : \" <b> \") \n+\t\t  << \"(\" << m_metadata << \")\";\n       }\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n+#endif\n \n-    public:\n       node_pointer m_p_left;\n       node_pointer m_p_right;\n-\n       node_pointer m_p_parent;\n-\n       value_type m_value;\n-\n       bool m_red;\n-\n       metadata_type m_metadata;\n     };\n \n     template<typename Value_Type, class Allocator>\n-    struct rb_tree_node_<\n-      Value_Type,\n-      null_node_metadata,\n-      Allocator>\n+    struct rb_tree_node_<Value_Type, null_node_metadata, Allocator>\n     {\n     public:\n+      typedef Value_Type value_type;\n+      typedef null_node_metadata metadata_type;\n+\n       typedef\n       typename Allocator::template rebind<\n       rb_tree_node_<\n@@ -137,38 +122,23 @@ namespace pb_ds\n       Allocator> >::other::pointer\n       node_pointer;\n \n-      typedef Value_Type value_type;\n-\n-      typedef null_node_metadata metadata_type;\n-\n-    public:\n       inline bool\n       special() const\n-      {\n-\treturn (m_red);\n-      }\n+      { return m_red; }\n \n #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n       void\n       trace() const\n-      {\n-\tstd::cout << PB_DS_V2F(m_value) <<(m_red? \" <r> \" : \" <b> \");\n-\n-      }\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n+      { std::cout << PB_DS_V2F(m_value) <<(m_red? \" <r> \" : \" <b> \"); }\n+#endif \n \n-    public:\n       node_pointer m_p_left;\n       node_pointer m_p_right;\n-\n       node_pointer m_p_parent;\n-\n       value_type m_value;\n-\n       bool m_red;\n     };\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RB_TREE_NODE_HPP\n+#endif "}, {"sha": "d08b2db69ae83499d172248e51b826329d2d7500", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 68, "deletions": 125, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -73,50 +73,31 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\tclass Node_And_It_Traits, \\\n-\t\t\t\t\t\tclass Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Cmp_Fn, \\\n+\t     typename Node_And_It_Traits, typename Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    rb_tree_data_\n+#define PB_DS_CLASS_NAME rb_tree_data_\n #endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_BASE_CLASS_NAME\t\t\t\\\n-    bin_search_tree_data_\n+#define PB_DS_BASE_CLASS_NAME bin_search_tree_data_\n #endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    rb_tree_no_data_\n+#define PB_DS_CLASS_NAME rb_tree_no_data_\n #endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_BASE_CLASS_NAME\t\t\t\\\n-    bin_search_tree_no_data_\n+#define PB_DS_BASE_CLASS_NAME bin_search_tree_no_data_\n #endif \n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\t\\\n-\t\t\t\t\t\tNode_And_It_Traits,\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_BASE_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tNode_And_It_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n+\n+#define PB_DS_BASE_C_DEC \\\n+    PB_DS_BASE_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n@@ -132,104 +113,69 @@ namespace pb_ds\n \n     template<typename Key,\n \t     typename Mapped,\n-\t     class Cmp_Fn,\n-\t     class Node_And_It_Traits,\n-\t     class Allocator>\n+\t     typename Cmp_Fn,\n+\t     typename Node_And_It_Traits,\n+\t     typename Allocator>\n     class PB_DS_CLASS_NAME : public PB_DS_BASE_C_DEC\n     {\n-\n     private:\n-      typedef typename PB_DS_BASE_C_DEC::node_pointer node_pointer;\n+      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef typename base_type::node_pointer node_pointer;\n \n     public:\n-\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_pointer key_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_key_pointer const_key_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_type mapped_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_pointer mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_reference mapped_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::reference reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_reference const_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::point_iterator point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::iterator iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::reverse_iterator reverse_iterator;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_reverse_iterator\n-      const_reverse_iterator;\n-\n       typedef Cmp_Fn cmp_fn;\n-\n       typedef Allocator allocator;\n+      typedef typename Allocator::size_type size_type;\n+      typedef typename Allocator::difference_type difference_type;\n+      typedef typename base_type::key_type key_type;\n+      typedef typename base_type::key_pointer key_pointer;\n+      typedef typename base_type::const_key_pointer const_key_pointer;\n+      typedef typename base_type::key_reference key_reference;\n+      typedef typename base_type::const_key_reference const_key_reference;\n+      typedef typename base_type::mapped_type mapped_type;\n+      typedef typename base_type::mapped_pointer mapped_pointer;\n+      typedef typename base_type::const_mapped_pointer const_mapped_pointer;\n+      typedef typename base_type::mapped_reference mapped_reference;\n+      typedef typename base_type::const_mapped_reference const_mapped_reference;\n+      typedef typename base_type::value_type value_type;\n+      typedef typename base_type::pointer pointer;\n+      typedef typename base_type::const_pointer const_pointer;\n+      typedef typename base_type::reference reference;\n+      typedef typename base_type::const_reference const_reference;\n+      typedef typename base_type::point_iterator point_iterator;\n+      typedef typename base_type::const_iterator const_point_iterator;\n+      typedef typename base_type::iterator iterator;\n+      typedef typename base_type::const_iterator const_iterator;\n+      typedef typename base_type::reverse_iterator reverse_iterator;\n+      typedef typename base_type::const_reverse_iterator const_reverse_iterator;\n+      typedef typename base_type::node_update node_update;\n \n-      typedef typename PB_DS_BASE_C_DEC::node_update node_update;\n-\n-    public:\n \n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn);\n+      PB_DS_CLASS_NAME(const Cmp_Fn&);\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update);\n+      PB_DS_CLASS_NAME(const Cmp_Fn&, const node_update&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       inline std::pair<point_iterator, bool>\n-      insert(const_reference r_value);\n+      insert(const_reference);\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \tstd::pair<point_iterator, bool> ins_pair =\n-\tPB_DS_BASE_C_DEC::insert_leaf(value_type(r_key, mapped_type()));\n+\tbase_type::insert_leaf(value_type(r_key, mapped_type()));\n \n \tif (ins_pair.second == true)\n \t  {\n@@ -238,32 +184,31 @@ namespace pb_ds\n \t    insert_fixup(ins_pair.first.m_p_nd);\n \t  }\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-\t  return (ins_pair.first.m_p_nd->m_value.second);\n+\treturn ins_pair.first.m_p_nd->m_value.second;\n #else \n \tinsert(r_key);\n-\treturn (PB_DS_BASE_C_DEC::s_null_mapped);\n+\treturn base_type::s_null_mapped;\n #endif \n       }\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       inline iterator\n-      erase(iterator it);\n+      erase(iterator);\n \n       inline reverse_iterator\n-      erase(reverse_iterator it);\n+      erase(reverse_iterator);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other);\n+      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n \n     protected:\n \n@@ -274,29 +219,29 @@ namespace pb_ds\n       assert_valid() const;\n \n       size_type\n-      assert_node_consistent(const node_pointer p_nd) const;\n+      assert_node_consistent(const node_pointer) const;\n #endif \n \n       inline static bool\n-      is_effectively_black(const node_pointer p_nd);\n+      is_effectively_black(const node_pointer);\n \n       void\n       initialize();\n \n       void\n-      insert_fixup(node_pointer p_nd);\n+      insert_fixup(node_pointer);\n \n       void\n-      erase_node(node_pointer p_nd);\n+      erase_node(node_pointer);\n \n       void\n-      remove_node(node_pointer p_nd);\n+      remove_node(node_pointer);\n \n       void\n-      remove_fixup(node_pointer p_x, node_pointer p_new_x_parent);\n+      remove_fixup(node_pointer, node_pointer);\n \n       void\n-      split_imp(node_pointer p_nd, PB_DS_CLASS_C_DEC& other);\n+      split_imp(node_pointer, PB_DS_CLASS_C_DEC&);\n \n       inline node_pointer\n       split_min();\n@@ -305,20 +250,19 @@ namespace pb_ds\n       split_min_imp();\n \n       void\n-      join_imp(node_pointer p_x, node_pointer p_r);\n+      join_imp(node_pointer, node_pointer);\n \n       std::pair<node_pointer, node_pointer>\n-      find_join_pos_right(node_pointer p_l, size_type h_l, size_type h_r);\n+      find_join_pos_right(node_pointer, size_type, size_type);\n \n       std::pair<node_pointer, node_pointer>\n-      find_join_pos_left(node_pointer p_r, size_type h_l, size_type h_r);\n+      find_join_pos_left(node_pointer, size_type, size_type);\n \n       inline size_type\n-      black_height(node_pointer p_nd);\n+      black_height(node_pointer);\n \n       void\n-      split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other);\n-\n+      split_at_node(node_pointer, PB_DS_CLASS_C_DEC&);\n     };\n \n #include <ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp>\n@@ -333,7 +277,6 @@ namespace pb_ds\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_BASE_CLASS_NAME\n #undef PB_DS_BASE_C_DEC\n-\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S"}, {"sha": "94b5ac39ff18b4d31eb881a6ddb67b5d9fd42c44", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,8 +51,8 @@ join(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n-  if (PB_DS_BASE_C_DEC::join_prep(other) == false)\n+  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n+  if (base_type::join_prep(other) == false)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n@@ -61,11 +61,11 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   const node_pointer p_x = other.split_min();\n   join_imp(p_x, other.m_p_head->m_p_parent);\n-  PB_DS_BASE_C_DEC::join_finish(other);\n+  base_type::join_finish(other);\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n  }\n \n PB_DS_CLASS_T_DEC\n@@ -77,36 +77,36 @@ join_imp(node_pointer p_x, node_pointer p_r)\n   if (p_r != NULL)\n     p_r->m_red = false;\n \n-  const size_type h = black_height(PB_DS_BASE_C_DEC::m_p_head->m_p_parent);\n+  const size_type h = black_height(base_type::m_p_head->m_p_parent);\n   const size_type other_h = black_height(p_r);\n   node_pointer p_x_l;\n   node_pointer p_x_r;\n   std::pair<node_pointer, node_pointer> join_pos;\n   const bool right_join = h >= other_h;\n   if (right_join)\n     {\n-      join_pos = find_join_pos_right(PB_DS_BASE_C_DEC::m_p_head->m_p_parent, \n+      join_pos = find_join_pos_right(base_type::m_p_head->m_p_parent, \n \t\t\t\t     h, other_h);\n       p_x_l = join_pos.first;\n       p_x_r = p_r;\n     }\n   else\n     {\n-      p_x_l = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-      PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_r;\n+      p_x_l = base_type::m_p_head->m_p_parent;\n+      base_type::m_p_head->m_p_parent = p_r;\n       if (p_r != NULL)\n-\tp_r->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n+\tp_r->m_p_parent = base_type::m_p_head;\n \n-      join_pos = find_join_pos_left(PB_DS_BASE_C_DEC::m_p_head->m_p_parent, \n+      join_pos = find_join_pos_left(base_type::m_p_head->m_p_parent, \n \t\t\t\t    h, other_h);\n       p_x_r = join_pos.first;\n     }\n \n   node_pointer p_parent = join_pos.second;\n-  if (p_parent == PB_DS_BASE_C_DEC::m_p_head)\n+  if (p_parent == base_type::m_p_head)\n     {\n-      PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_x;\n-      p_x->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n+      base_type::m_p_head->m_p_parent = p_x;\n+      p_x->m_p_parent = base_type::m_p_head;\n     }\n   else\n     {\n@@ -127,27 +127,27 @@ join_imp(node_pointer p_x, node_pointer p_r)\n \n   p_x->m_red = true;\n \n-  PB_DS_BASE_C_DEC::initialize_min_max();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-  PB_DS_BASE_C_DEC::update_to_top(p_x, (node_update* )this);\n+  base_type::initialize_min_max();\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  base_type::update_to_top(p_x, (node_update* )this);\n   insert_fixup(p_x);\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid());\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n split_min()\n {\n-  node_pointer p_min = PB_DS_BASE_C_DEC::m_p_head->m_p_left;\n+  node_pointer p_min = base_type::m_p_head->m_p_left;\n \n #ifdef _GLIBCXX_DEBUG\n-  const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n+  const node_pointer p_head = base_type::m_p_head;\n   _GLIBCXX_DEBUG_ASSERT(p_min != p_head);\n #endif \n \n   remove_node(p_min);\n-  return (p_min);\n+  return p_min;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -159,10 +159,10 @@ find_join_pos_right(node_pointer p_l, size_type h_l, size_type h_r)\n {\n   _GLIBCXX_DEBUG_ASSERT(h_l >= h_r);\n \n-  if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == NULL)\n-    return (std::make_pair((node_pointer)NULL, PB_DS_BASE_C_DEC::m_p_head));\n+  if (base_type::m_p_head->m_p_parent == NULL)\n+    return (std::make_pair((node_pointer)NULL, base_type::m_p_head));\n \n-  node_pointer p_l_parent = PB_DS_BASE_C_DEC::m_p_head;\n+  node_pointer p_l_parent = base_type::m_p_head;\n   while (h_l > h_r)\n     {\n       if (p_l->m_red == false)\n@@ -195,10 +195,10 @@ PB_DS_CLASS_C_DEC::\n find_join_pos_left(node_pointer p_r, size_type h_l, size_type h_r)\n {\n   _GLIBCXX_DEBUG_ASSERT(h_r > h_l);\n-  if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == NULL)\n+  if (base_type::m_p_head->m_p_parent == NULL)\n     return (std::make_pair((node_pointer)NULL,\n-\t\t\t   PB_DS_BASE_C_DEC::m_p_head));\n-  node_pointer p_r_parent = PB_DS_BASE_C_DEC::m_p_head;\n+\t\t\t   base_type::m_p_head));\n+  node_pointer p_r_parent = base_type::m_p_head;\n   while (h_r > h_l)\n     {\n       if (p_r->m_red == false)\n@@ -244,34 +244,34 @@ PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_valid();)\n \n     _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n \n-    if (PB_DS_BASE_C_DEC::split_prep(r_key, other) == false)\n+    if (base_type::split_prep(r_key, other) == false)\n       {\n         _GLIBCXX_DEBUG_ONLY(assert_valid());\n         _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n         return;\n       }\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid();)\n   node_pointer p_nd = upper_bound(r_key).m_p_nd;\n   do\n     {\n       node_pointer p_next_nd = p_nd->m_p_parent;\n       if (Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n \tsplit_at_node(p_nd, other);\n \n-      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid();)\n       p_nd = p_next_nd;\n     }\n-  while (p_nd != PB_DS_BASE_C_DEC::m_p_head);\n+  while (p_nd != base_type::m_p_head);\n \n-  PB_DS_BASE_C_DEC::split_finish(other);\n+  base_type::split_finish(other);\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n@@ -286,12 +286,12 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n   node_pointer p_l = p_nd->m_p_left;\n   node_pointer p_r = p_nd->m_p_right;\n   node_pointer p_parent = p_nd->m_p_parent;\n-  if (p_parent == PB_DS_BASE_C_DEC::m_p_head)\n+  if (p_parent == base_type::m_p_head)\n     {\n-      PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_l;\n+      base_type::m_p_head->m_p_parent = p_l;\n       if (p_l != NULL)\n         {\n-\t  p_l->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n+\t  p_l->m_p_parent = base_type::m_p_head;\n \t  p_l->m_red = false;\n         }\n     }\n@@ -311,9 +311,9 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n \tremove_fixup(p_l, p_parent);\n     }\n \n-  PB_DS_BASE_C_DEC::initialize_min_max();\n+  base_type::initialize_min_max();\n   other.join_imp(p_nd, p_r);\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid());\n }\n "}, {"sha": "67570d842048ef99219bde0d0d06eaab676711d2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/traits.hpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -53,16 +53,15 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n     template<typename Key,\n \t     typename Mapped,\n-\t     class Cmp_Fn,\n+\t     typename Cmp_Fn,\n \t     template<typename Const_Node_Iterator,\n \t\t      class Node_Iterator,\n \t\t      class Cmp_Fn_,\n \t\t      class Allocator_>\n     class Node_Update,\n-\t     class Allocator>\n+\t     typename Allocator>\n     struct tree_traits<\n       Key,\n       Mapped,\n@@ -128,4 +127,4 @@ namespace pb_ds\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RB_TREE_NODE_AND_IT_TRAITS_HPP\n+#endif "}, {"sha": "b05a67219c7ec9b43e256b2da9acc5f5c7acbe30", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -59,58 +59,50 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME()\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn)\n+  base_type(r_cmp_fn)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn, r_node_update)\n+  base_type(r_cmp_fn, r_node_update)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-  PB_DS_BASE_C_DEC(other)\n+  base_type(other)\n {\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    PB_DS_BASE_C_DEC::swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  base_type::swap(other);\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n initialize()\n-{\n-  PB_DS_BASE_C_DEC::m_p_head->m_special = true;\n-}\n+{ base_type::m_p_head->m_special = true; }"}, {"sha": "cf7aaa8eda9eeecf2c30316778df584594cfbb6f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,8 +51,8 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  PB_DS_BASE_C_DEC::assert_valid();\n-  const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n+  base_type::assert_valid();\n+  const node_pointer p_head = base_type::m_p_head;\n   assert_special_imp(p_head);\n }\n \n@@ -64,7 +64,7 @@ assert_special_imp(const node_pointer p_nd) const\n   if (p_nd == NULL)\n     return;\n \n-  if (p_nd == PB_DS_BASE_C_DEC::m_p_head)\n+  if (p_nd == base_type::m_p_head)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_special);\n       assert_special_imp(p_nd->m_p_parent);"}, {"sha": "26288fb0b269e3a1c93657bfc7e13fbcc7c270b2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 23, "deletions": 62, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,13 +50,10 @@ PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n   point_iterator it = find(r_key);\n-\n-  if (it == PB_DS_BASE_C_DEC::end())\n-    return (false);\n-\n+  if (it == base_type::end())\n+    return false;\n   erase(it);\n-\n-  return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -65,19 +62,13 @@ PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  if (it == PB_DS_BASE_C_DEC::end())\n-    return (it);\n-\n+  if (it == base_type::end())\n+    return it;\n   iterator ret_it = it;\n-\n   ++ret_it;\n-\n   erase_node(it.m_p_nd);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -86,19 +77,13 @@ PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  if (it.m_p_nd == PB_DS_BASE_C_DEC::m_p_head)\n+  if (it.m_p_nd == base_type::m_p_head)\n     return (it);\n-\n   reverse_iterator ret_it = it;\n-\n   ++ret_it;\n-\n   erase_node(it.m_p_nd);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ret_it);\n+  return ret_it;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -108,26 +93,20 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    size_type num_ersd = 0;\n-\n-  iterator it = PB_DS_BASE_C_DEC::begin();\n-\n-  while (it != PB_DS_BASE_C_DEC::end())\n+  size_type num_ersd = 0;\n+  iterator it = base_type::begin();\n+  while (it != base_type::end())\n     {\n       if (pred(*it))\n         {\n \t  ++num_ersd;\n-\n \t  it = erase(it);\n         }\n       else\n \t++it;\n     }\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -136,56 +115,40 @@ PB_DS_CLASS_C_DEC::\n erase_node(node_pointer p_nd)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-\n   splay(p_nd);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n \n   node_pointer p_l = p_nd->m_p_left;\n   node_pointer p_r = p_nd->m_p_right;\n \n-  PB_DS_BASE_C_DEC::update_min_max_for_erased_node(p_nd);\n-\n-  PB_DS_BASE_C_DEC::actual_erase_node(p_nd);\n-\n+  base_type::update_min_max_for_erased_node(p_nd);\n+  base_type::actual_erase_node(p_nd);\n   if (p_r == NULL)\n     {\n-      PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_l;\n-\n+      base_type::m_p_head->m_p_parent = p_l;\n       if (p_l != NULL)\n-\tp_l->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n+\tp_l->m_p_parent = base_type::m_p_head;\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-        return;\n+      return;\n     }\n \n   node_pointer p_target_r = leftmost(p_r);\n-\n   _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n-\n-  p_r->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n-  PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_r;\n-\n+  p_r->m_p_parent = base_type::m_p_head;\n+  base_type::m_p_head->m_p_parent = p_r;\n   splay(p_target_r);\n \n   _GLIBCXX_DEBUG_ONLY(p_target_r->m_p_left = NULL);\n-\n   _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_parent == this->m_p_head);\n-\n-  _GLIBCXX_DEBUG_ASSERT(this->m_p_head->m_p_parent ==\n-\t\t   p_target_r);\n+  _GLIBCXX_DEBUG_ASSERT(this->m_p_head->m_p_parent == p_target_r);\n \n   p_target_r->m_p_left = p_l;\n-\n   if (p_l != NULL)\n     p_l->m_p_parent = p_target_r;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    apply_update(p_target_r, (node_update* )this);\n+  apply_update(p_target_r, (node_update* )this);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -194,9 +157,7 @@ PB_DS_CLASS_C_DEC::\n leftmost(node_pointer p_nd)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n-\n   while (p_nd->m_p_left != NULL)\n     p_nd = p_nd->m_p_left;\n-\n-  return (p_nd);\n+  return p_nd;\n }"}, {"sha": "6fdb8f55e866d068ce438900f429973eb6a79a12", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,11 +50,9 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n   node_pointer p_found = find_imp(r_key);\n-\n-  if (p_found != PB_DS_BASE_C_DEC::m_p_head)\n+  if (p_found != base_type::m_p_head)\n     splay(p_found);\n-\n-  return (point_iterator(p_found));\n+  return point_iterator(p_found);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -63,34 +61,28 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n   const node_pointer p_found = find_imp(r_key);\n-\n-  if (p_found != PB_DS_BASE_C_DEC::m_p_head)\n+  if (p_found != base_type::m_p_head)\n     const_cast<PB_DS_CLASS_C_DEC* >(this)->splay(p_found);\n-\n-  return (point_iterator(p_found));\n+  return point_iterator(p_found);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-    node_pointer p_nd = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  node_pointer p_nd = base_type::m_p_head->m_p_parent;\n   while (p_nd != NULL)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tif (!Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n-\t  return (p_nd);\n-\n+\t  return p_nd;\n \tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n-\n-  return PB_DS_BASE_C_DEC::m_p_head;\n+  return base_type::m_p_head;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -99,19 +91,15 @@ PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key) const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    node_pointer p_nd = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-\n+  node_pointer p_nd = base_type::m_p_head->m_p_parent;\n   while (p_nd != NULL)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tif (!Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n-\t  return (p_nd);\n-\n+\t  return p_nd;\n \tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n-\n-  return PB_DS_BASE_C_DEC::m_p_head;\n+  return base_type::m_p_head;\n }"}, {"sha": "f4b9f95177ffe76ccc4ac3d1124eb17809bca8e2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,75 +50,50 @@ PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    std::pair<point_iterator, bool> ins_pair =\n-    insert_leaf_imp(r_value);\n-\n+  std::pair<point_iterator, bool> ins_pair = insert_leaf_imp(r_value);\n   ins_pair.first.m_p_nd->m_special = false;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n   splay(ins_pair.first.m_p_nd);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n-\n-  return (ins_pair);\n+  return ins_pair;\n }\n \n PB_DS_CLASS_T_DEC\n inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_leaf_imp(const_reference r_value)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-    if (PB_DS_BASE_C_DEC::m_size == 0)\n-      return (std::make_pair(\n-\t\t\t     PB_DS_BASE_C_DEC::insert_imp_empty(r_value),\n-\t\t\t     true));\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  if (base_type::m_size == 0)\n+    return std::make_pair(base_type::insert_imp_empty(r_value), true);\n \n-  node_pointer p_nd = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-  node_pointer p_pot = PB_DS_BASE_C_DEC::m_p_head;\n+  node_pointer p_nd = base_type::m_p_head->m_p_parent;\n+  node_pointer p_pot = base_type::m_p_head;\n \n   while (p_nd != NULL)\n-    if (!Cmp_Fn::operator()(\n-\t\t\t    PB_DS_V2F(p_nd->m_value),\n-\t\t\t    PB_DS_V2F(r_value)))\n+    if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), PB_DS_V2F(r_value)))\n       {\n-\tif (!Cmp_Fn::operator()(\n-\t\t\t\tPB_DS_V2F(r_value),\n-\t\t\t\tPB_DS_V2F(p_nd->m_value)))\n+\tif (!Cmp_Fn::operator()(PB_DS_V2F(r_value), PB_DS_V2F(p_nd->m_value)))\n \t  {\n-\t    return std::make_pair(\n-\t\t\t\t  point_iterator(p_nd),\n-\t\t\t\t  false);\n+\t    return std::make_pair(point_iterator(p_nd), false);\n \t  }\n-\n \tp_pot = p_nd;\n-\n \tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n \n-  if (p_pot == PB_DS_BASE_C_DEC::m_p_head)\n-    return (std::make_pair(\n-\t\t\t   PB_DS_BASE_C_DEC::insert_leaf_new(r_value,  PB_DS_BASE_C_DEC::m_p_head->m_p_right, false),\n-\t\t\t   true));\n+  if (p_pot == base_type::m_p_head)\n+    return std::make_pair(base_type::insert_leaf_new(r_value, base_type::m_p_head->m_p_right, false), true);\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::check_key_does_not_exist(\n-\t\t\t\t\t\t\t    PB_DS_V2F(r_value)));\n+  _GLIBCXX_DEBUG_ONLY(base_type::check_key_does_not_exist(PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;\n   if (p_nd == NULL)\n-    return (std::make_pair(\n-\t\t\t   PB_DS_BASE_C_DEC::insert_leaf_new(                r_value, p_pot, true),\n-\t\t\t   true));\n+    return (std::make_pair(base_type::insert_leaf_new(r_value, p_pot, true), true));\n \n   while (p_nd->m_p_right != NULL)\n     p_nd = p_nd->m_p_right;\n \n-  return (std::make_pair(\n-\t\t\t insert_leaf_new(r_value, p_nd, false),\n-\t\t\t true));\n+  return std::make_pair(insert_leaf_new(r_value, p_nd, false), true);\n }"}, {"sha": "d23e931732357ec63f7a9dc9831d236dd4f4c166", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/node.hpp", "status": "modified", "additions": 21, "deletions": 61, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -51,121 +51,81 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n     template<typename Value_Type, class Metadata, class Allocator>\n     struct splay_tree_node_\n     {\n     public:\n+      typedef Value_Type value_type;\n+      typedef Metadata metadata_type;\n+\n       typedef\n       typename Allocator::template rebind<\n-      splay_tree_node_<\n-      Value_Type,\n-      Metadata,\n-      Allocator> >::other::pointer\n+      splay_tree_node_<Value_Type, Metadata, Allocator> >::other::pointer\n       node_pointer;\n \n-      typedef Metadata metadata_type;\n-\n       typedef\n-      typename Allocator::template rebind<\n-\tmetadata_type>::other::reference\n+      typename Allocator::template rebind<metadata_type>::other::reference\n       metadata_reference;\n \n       typedef\n-      typename Allocator::template rebind<\n-\tmetadata_type>::other::const_reference\n+      typename Allocator::template rebind<metadata_type>::other::const_reference\n       const_metadata_reference;\n \n #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n       void\n       trace() const\n-      {\n-\tstd::cout << PB_DS_V2F(m_value) <<\n-\t  \"(\" << m_metadata << \")\";\n-      }\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n+      { std::cout << PB_DS_V2F(m_value) << \"(\" << m_metadata << \")\"; }\n+#endif\n \n-    public:\n       inline bool\n       special() const\n-      {\n-\treturn (m_special);\n-      }\n+      { return m_special; }\n \n       inline const_metadata_reference\n       get_metadata() const\n-      {\n-\treturn (m_metadata);\n-      }\n+      { return m_metadata; }\n \n       inline metadata_reference\n       get_metadata()\n-      {\n-\treturn (m_metadata);\n-      }\n-\n-    public:\n-      typedef Value_Type value_type;\n+      { return m_metadata; }\n \n       value_type m_value;\n-\n       bool m_special;\n-\n       node_pointer m_p_left;\n       node_pointer m_p_right;\n-\n       node_pointer m_p_parent;\n-\n       metadata_type m_metadata;\n     };\n \n-    template<typename Value_Type, class Allocator>\n-    struct splay_tree_node_<\n-      Value_Type,\n-      null_node_metadata,\n-      Allocator>\n+    template<typename Value_Type, typename Allocator>\n+    struct splay_tree_node_<Value_Type, null_node_metadata, Allocator>\n     {\n     public:\n+      typedef Value_Type value_type;\n+      typedef null_node_metadata metadata_type;\n+\n       typedef\n       typename Allocator::template rebind<\n-      splay_tree_node_<\n-      Value_Type,\n-      null_node_metadata,\n-      Allocator> >::other::pointer\n+      splay_tree_node_<Value_Type, null_node_metadata, Allocator> >::other::pointer\n       node_pointer;\n \n-      typedef Value_Type value_type;\n-\n-      typedef null_node_metadata metadata_type;\n-\n-    public:\n       inline bool\n       special() const\n-      {\n-\treturn (m_special);\n-      }\n+      { return m_special; }\n \n #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n       void\n       trace() const\n-      {\n-\tstd::cout << PB_DS_V2F(m_value);\n-\n-      }\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_TRACE_\n+      { std::cout << PB_DS_V2F(m_value); }\n+#endif \n \n-    public:\n       node_pointer m_p_left;\n       node_pointer m_p_right;\n-\n       node_pointer m_p_parent;\n-\n       value_type m_value;\n-\n       bool m_special;\n     };\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SPLAY_TREE_NODE_HPP\n+#endif "}, {"sha": "62def3c13dac65774d10a42ccdf1dd6aff3aad9c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -49,20 +49,20 @@ void\n PB_DS_CLASS_C_DEC::\n splay(node_pointer p_nd)\n {\n-  while (p_nd->m_p_parent != PB_DS_BASE_C_DEC::m_p_head)\n+  while (p_nd->m_p_parent != base_type::m_p_head)\n     {\n #ifdef _GLIBCXX_DEBUG\n       {\n-\tnode_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n+\tnode_pointer p_head = base_type::m_p_head;\n \tassert_special_imp(p_head);\n       }\n #endif\n \n-      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n \n-        if (p_nd->m_p_parent->m_p_parent == PB_DS_BASE_C_DEC::m_p_head)\n+        if (p_nd->m_p_parent->m_p_parent == base_type::m_p_head)\n \t  {\n-            PB_DS_BASE_C_DEC::rotate_parent(p_nd);\n+            base_type::rotate_parent(p_nd);\n             _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n \t  }\n         else\n@@ -72,7 +72,7 @@ splay(node_pointer p_nd)\n \n #ifdef _GLIBCXX_DEBUG\n             const size_type total =\n-\t      PB_DS_BASE_C_DEC::recursive_count(p_grandparent);\n+\t      base_type::recursive_count(p_grandparent);\n             _GLIBCXX_DEBUG_ASSERT(total >= 3);\n #endif \n \n@@ -90,19 +90,20 @@ splay(node_pointer p_nd)\n             _GLIBCXX_DEBUG_ASSERT(total ==this->recursive_count(p_nd));\n \t  }\n \n-      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n   }\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n+splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent, \n+\t\t   node_pointer p_grandparent)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n \t\t        p_grandparent->m_p_right == p_parent);\n@@ -132,12 +133,13 @@ splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_gran\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n+splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent, \n+\t\t    node_pointer p_grandparent)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd && \n \t  \t        p_grandparent->m_p_left == p_parent);\n@@ -167,12 +169,13 @@ splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_gra\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n+splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent, \n+\t\t   node_pointer p_grandparent)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n \t\t     p_nd->m_p_parent->m_p_parent->m_p_left == p_nd->m_p_parent);\n@@ -202,15 +205,14 @@ splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_gran\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n+splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, \n+\t\t    node_pointer p_grandparent)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n-\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n-\n-  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd&& \n-\t\t     p_nd->m_p_parent->m_p_parent->m_p_right == p_nd->m_p_parent);\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd && \n+\t          p_nd->m_p_parent->m_p_parent->m_p_right == p_nd->m_p_parent);\n \n   splay_zz_start(p_nd, p_parent, p_grandparent);\n \n@@ -231,7 +233,7 @@ splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_gra\n   if (p_c != NULL)\n     p_c->m_p_parent = p_grandparent;\n \n-  PB_DS_BASE_C_DEC::update_to_top(p_grandparent, (node_update* )this);\n+  base_type::update_to_top(p_grandparent, (node_update* )this);\n   splay_zz_end(p_nd, p_parent, p_grandparent);\n }\n \n@@ -250,15 +252,12 @@ splay_zz_start(node_pointer p_nd,\n   _GLIBCXX_DEBUG_ASSERT(p_parent != NULL);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent != NULL);\n \n-  const bool grandparent_head =\n-    p_grandparent->m_p_parent == PB_DS_BASE_C_DEC::m_p_head;\n+  const bool grandparent_head = p_grandparent->m_p_parent == base_type::m_p_head;\n \n   if (grandparent_head)\n     {\n-      PB_DS_BASE_C_DEC::m_p_head->m_p_parent =\n-\tPB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-\n-      p_nd->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n+      base_type::m_p_head->m_p_parent = base_type::m_p_head->m_p_parent;\n+      p_nd->m_p_parent = base_type::m_p_head;\n       return;\n     }\n \n@@ -275,15 +274,16 @@ splay_zz_start(node_pointer p_nd,\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-splay_zz_end(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n+splay_zz_end(node_pointer p_nd, node_pointer p_parent, \n+\t     node_pointer p_grandparent)\n {\n-  if (p_nd->m_p_parent == PB_DS_BASE_C_DEC::m_p_head)\n-    PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_nd;\n+  if (p_nd->m_p_parent == base_type::m_p_head)\n+    base_type::m_p_head->m_p_parent = p_nd;\n \n   apply_update(p_grandparent, (node_update* )this);\n   apply_update(p_parent, (node_update* )this);\n   apply_update(p_nd, (node_update* )this);\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n }\n "}, {"sha": "bf905255333ed2a0d3c4aff2a31943e4271b0c6f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 67, "deletions": 130, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -97,50 +97,31 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\tclass Node_And_It_Traits, \\\n-\t\t\t\t\t\tclass Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Cmp_Fn, \\\n+\t     typename Node_And_It_Traits, typename Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    splay_tree_data_\n+#define PB_DS_CLASS_NAME splay_tree_data_\n #endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    splay_tree_no_data_\n+#define PB_DS_CLASS_NAME splay_tree_no_data_\n #endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_BASE_CLASS_NAME\t\t\t\\\n-    bin_search_tree_data_\n+#define PB_DS_BASE_CLASS_NAME bin_search_tree_data_\n #endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_BASE_CLASS_NAME\t\t\t\\\n-    bin_search_tree_no_data_\n+#define PB_DS_BASE_CLASS_NAME bin_search_tree_no_data_\n #endif \n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\t\\\n-\t\t\t\t\t\tNode_And_It_Traits,\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_BASE_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tNode_And_It_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n+\n+#define PB_DS_BASE_C_DEC \\\n+    PB_DS_BASE_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n@@ -155,102 +136,61 @@ namespace pb_ds\n #endif \n \n     // $p14y 7r33 7481.\n-    template<typename Key,\n-\t     typename Mapped,\n-\t     class Cmp_Fn,\n-\t     class Node_And_It_Traits,\n-\t     class Allocator>\n+    template<typename Key, typename Mapped, typename Cmp_Fn,\n+\t     typename Node_And_It_Traits, typename Allocator>\n     class PB_DS_CLASS_NAME : public PB_DS_BASE_C_DEC\n     {\n-\n     private:\n-      typedef typename PB_DS_BASE_C_DEC::node_pointer node_pointer;\n+      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef typename base_type::node_pointer node_pointer;\n \n     public:\n-\n+      typedef Allocator allocator;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_pointer key_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_key_pointer const_key_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_type mapped_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_pointer mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::mapped_reference mapped_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_BASE_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_BASE_C_DEC::reference reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_reference const_reference;\n-\n-      typedef typename PB_DS_BASE_C_DEC::point_iterator point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::iterator iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::reverse_iterator reverse_iterator;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_reverse_iterator\n-      const_reverse_iterator;\n-\n       typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::node_update node_update;\n-\n-    public:\n+      typedef typename base_type::key_type key_type;\n+      typedef typename base_type::key_pointer key_pointer;\n+      typedef typename base_type::const_key_pointer const_key_pointer;\n+      typedef typename base_type::key_reference key_reference;\n+      typedef typename base_type::const_key_reference const_key_reference;\n+      typedef typename base_type::mapped_type mapped_type;\n+      typedef typename base_type::mapped_pointer mapped_pointer;\n+      typedef typename base_type::const_mapped_pointer const_mapped_pointer;\n+      typedef typename base_type::mapped_reference mapped_reference;\n+      typedef typename base_type::const_mapped_reference const_mapped_reference;\n+      typedef typename base_type::value_type value_type;\n+      typedef typename base_type::pointer pointer;\n+      typedef typename base_type::const_pointer const_pointer;\n+      typedef typename base_type::reference reference;\n+      typedef typename base_type::const_reference const_reference;\n+      typedef typename base_type::point_iterator point_iterator;\n+      typedef typename base_type::const_iterator const_point_iterator;\n+      typedef typename base_type::iterator iterator;\n+      typedef typename base_type::const_iterator const_iterator;\n+      typedef typename base_type::reverse_iterator reverse_iterator;\n+      typedef typename base_type::const_reverse_iterator const_reverse_iterator;\n+      typedef typename base_type::node_update node_update;\n \n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn);\n+      PB_DS_CLASS_NAME(const Cmp_Fn&);\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update);\n+      PB_DS_CLASS_NAME(const Cmp_Fn&, const node_update&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       void\n       initialize();\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n+      inline std::pair<point_iterator, bool>\n       insert(const_reference r_value);\n \n       inline mapped_reference\n@@ -262,87 +202,85 @@ namespace pb_ds\n \t  insert_leaf_imp(value_type(r_key, mapped_type()));\n \n \tins_pair.first.m_p_nd->m_special = false;\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid());\n+\t_GLIBCXX_DEBUG_ONLY(base_type::assert_valid());\n \tsplay(ins_pair.first.m_p_nd);\n \t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \treturn ins_pair.first.m_p_nd->m_value.second;\n #else \n \tinsert(r_key);\n-\treturn PB_DS_BASE_C_DEC::s_null_mapped;\n+\treturn base_type::s_null_mapped;\n #endif\n       }\n \n       inline point_iterator\n-      find(const_key_reference r_key);\n+      find(const_key_reference);\n \n       inline const_point_iterator\n-      find(const_key_reference r_key) const;\n+      find(const_key_reference) const;\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       inline iterator\n       erase(iterator it);\n \n       inline reverse_iterator\n-      erase(reverse_iterator it);\n+      erase(reverse_iterator);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other);\n+      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n \n     private:\n-\n       inline std::pair<point_iterator, bool>\n-      insert_leaf_imp(const_reference r_mapped_value);\n+      insert_leaf_imp(const_reference);\n \n       inline node_pointer\n-      find_imp(const_key_reference r_key);\n+      find_imp(const_key_reference);\n \n       inline const node_pointer\n-      find_imp(const_key_reference r_key) const;\n+      find_imp(const_key_reference) const;\n \n #ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n       void\n-      assert_special_imp(const node_pointer p_nd) const;\n+      assert_special_imp(const node_pointer) const;\n #endif \n \n       void\n-      splay(node_pointer p_nd);\n+      splay(node_pointer);\n \n       inline void\n-      splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zig_zag_left(node_pointer, node_pointer, node_pointer);\n \n       inline void\n-      splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zig_zag_right(node_pointer, node_pointer, node_pointer);\n \n       inline void\n-      splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zig_zig_left(node_pointer, node_pointer, node_pointer);\n \n       inline void\n-      splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zig_zig_right(node_pointer, node_pointer, node_pointer);\n \n       inline void\n-      splay_zz_start(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zz_start(node_pointer, node_pointer, node_pointer);\n \n       inline void\n-      splay_zz_end(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent);\n+      splay_zz_end(node_pointer, node_pointer, node_pointer);\n \n       inline node_pointer\n-      leftmost(node_pointer p_nd);\n+      leftmost(node_pointer);\n \n       void\n-      erase_node(node_pointer p_nd);\n-\n+      erase_node(node_pointer);\n     };\n \n #include <ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp>\n@@ -358,7 +296,6 @@ namespace pb_ds\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_BASE_CLASS_NAME\n #undef PB_DS_BASE_C_DEC\n-\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S"}, {"sha": "c752f71f938d683b3132a6b6d28dda025bc431ac", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -50,40 +50,35 @@ PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    if (PB_DS_BASE_C_DEC::join_prep(other) == false)\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-\t  return;\n-      }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  if (base_type::join_prep(other) == false)\n+    {\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n+    }\n \n   node_pointer p_target_r = other.leftmost(other.m_p_head);\n-\n   _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n-\n   other.splay(p_target_r);\n \n   _GLIBCXX_DEBUG_ASSERT(p_target_r == other.m_p_head->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left == NULL);\n \n-  p_target_r->m_p_left = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n+  p_target_r->m_p_left = base_type::m_p_head->m_p_parent;\n \n   _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left != NULL);\n   p_target_r->m_p_left->m_p_parent = p_target_r;\n \n-  PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_target_r;\n-  p_target_r->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n+  base_type::m_p_head->m_p_parent = p_target_r;\n+  p_target_r->m_p_parent = base_type::m_p_head;\n   apply_update(p_target_r, (node_update* )this);\n \n-  PB_DS_BASE_C_DEC::join_finish(other);\n+  base_type::join_finish(other);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n@@ -93,11 +88,10 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n \n-  if (PB_DS_BASE_C_DEC::split_prep(r_key, other) == false)\n+  if (base_type::split_prep(r_key, other) == false)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid());\n       _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n-\n       return;\n     }\n \n@@ -110,16 +104,13 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   node_pointer p_new_root = p_upper_bound->m_p_left;\n   _GLIBCXX_DEBUG_ASSERT(p_new_root != NULL);\n \n-  PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_new_root;\n-  p_new_root->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n+  base_type::m_p_head->m_p_parent = p_new_root;\n+  p_new_root->m_p_parent = base_type::m_p_head;\n   other.m_p_head->m_p_parent = p_upper_bound;\n   p_upper_bound->m_p_parent = other.m_p_head;\n   p_upper_bound->m_p_left = NULL;\n-\n   apply_update(p_upper_bound, (node_update* )this);\n-\n-  PB_DS_BASE_C_DEC::split_finish(other);\n+  base_type::split_finish(other);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());"}, {"sha": "a758ef9ddbabaa5271dd2589c08fc4cabf525da1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/traits.hpp", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b24692f652301d0105b94286a41120d67d4f8e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp?ref=1b24692f652301d0105b94286a41120d67d4f8e8", "patch": "@@ -96,26 +96,14 @@ namespace pb_ds\n \t\t      class Node_Iterator,\n \t\t      class Cmp_Fn_,\n \t\t      class Allocator_>\n-    class Node_Update,\n+             class Node_Update,\n \t     class Allocator>\n-    struct tree_traits<\n-      Key,\n-      null_mapped_type,\n-      Cmp_Fn,\n-      Node_Update,\n-      splay_tree_tag,\n-      Allocator> : public bin_search_tree_traits<\n-      Key,\n-      null_mapped_type,\n-      Cmp_Fn,\n-      Node_Update,\n-      splay_tree_node_<\n-      typename types_traits<\n-      Key,\n-      null_mapped_type,\n-      Allocator,\n-      false>::value_type,\n-      typename tree_node_metadata_selector<\n+    struct tree_traits<Key, null_mapped_type, Cmp_Fn, Node_Update,\n+\t\t       splay_tree_tag, Allocator> \n+    : public bin_search_tree_traits<Key, null_mapped_type, Cmp_Fn,\n+\t\t\t\t    Node_Update, \n+\t   splay_tree_node_<typename types_traits<Key, null_mapped_type, Allocator, false>::value_type,\n+\t\t\t    typename tree_node_metadata_selector<\n       Key,\n       null_mapped_type,\n       Cmp_Fn,"}]}