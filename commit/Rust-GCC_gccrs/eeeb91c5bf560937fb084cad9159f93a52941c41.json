{"sha": "eeeb91c5bf560937fb084cad9159f93a52941c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlYjkxYzViZjU2MDkzN2ZiMDg0Y2FkOTE1OWY5M2E1Mjk0MWM0MQ==", "commit": {"author": {"name": "Klaus Kaempf", "email": "kkaempf@progis.de", "date": "1998-01-29T00:47:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-29T00:47:10Z"}, "message": "am-alpha.h: Don't include alloca for OPEN_VMS.\n\n        * am-alpha.h: Don't include alloca for OPEN_VMS.\n        * alpha/xm-vms.h (HAVE_CPP_STRINGIFY): Define.\n        * alpha/xm-vms.h (INCLUDE_DEFAULTS): Define.\n        (GCC_INCLUDE_DIR): Define\n        * make-cc.com, make-cccp.com, make-cc1.com: Removed.\n        * makefile.vms: New file.\n        * alpha/vms.h (CPP_PREDEFINES): Remove -Dalpha.\n        * alpha.c (output_prolog): Output '.name' directive\n        for minimal traceback information.\n        * alpha.c (output_prolog): Don't prepend entry point symbols\n        with '$' on OPEN_VMS.\n\nFrom-SVN: r17546", "tree": {"sha": "effcfc36e61e8e2a6ba95b48205af287c1e3cd1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/effcfc36e61e8e2a6ba95b48205af287c1e3cd1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeeb91c5bf560937fb084cad9159f93a52941c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeeb91c5bf560937fb084cad9159f93a52941c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeeb91c5bf560937fb084cad9159f93a52941c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeeb91c5bf560937fb084cad9159f93a52941c41/comments", "author": null, "committer": null, "parents": [{"sha": "abff8e0691a5b560c4680cac0ddf6e6f61849bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abff8e0691a5b560c4680cac0ddf6e6f61849bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abff8e0691a5b560c4680cac0ddf6e6f61849bc8"}], "stats": {"total": 1240, "additions": 488, "deletions": 752}, "files": [{"sha": "bcc83c9308601c9251936338e1a521bc073da1d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -1,3 +1,23 @@\n+Thu Jan 29 01:28:14 1998  Klaus Kaempf  <kkaempf@progis.de>\n+\n+\t* am-alpha.h: Don't include alloca for OPEN_VMS.\n+\n+\t* alpha/xm-vms.h (HAVE_CPP_STRINGIFY): Define.\n+\n+\t* alpha/xm-vms.h (INCLUDE_DEFAULTS): Define.\n+\t(GCC_INCLUDE_DIR): Define\n+\n+\t* make-cc.com, make-cccp.com, make-cc1.com: Removed.\n+\t* makefile.vms: New file.\n+\n+\t* alpha/vms.h (CPP_PREDEFINES): Remove -Dalpha.\n+\n+\t* alpha.c (output_prolog): Output '.name' directive\n+\tfor minimal traceback information.\n+\n+\t* alpha.c (output_prolog): Don't prepend entry point symbols\n+\twith '$' on OPEN_VMS.\n+\n Thu Jan 29 00:25:35 1998  David S. Miller  <davem@tanya.rutgers.edu>\n \t\t\t  Jeffrey A Law  (law@cygnus.com)\n "}, {"sha": "0484ea64e6faa1be4967ff4192d83abc47c75566", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -2776,7 +2776,7 @@ output_prolog (file, size)\n   fprintf (file, \"\\t.ent \");\n   assemble_name (file, alpha_function_name);\n   fprintf (file, \"\\n\");\n-  sprintf (entry_label, \"$%s..en\", alpha_function_name);\n+  sprintf (entry_label, \"%s..en\", alpha_function_name);\n   ASM_OUTPUT_LABEL (file, entry_label);\n   inside_function = TRUE;\n \n@@ -2910,10 +2910,20 @@ output_prolog (file, size)\n \n   fprintf (file, \"\\t.prologue\\n\");\n \n+  readonly_section ();\n+  fprintf (file, \"\\t.align 3\\n\");\n+  assemble_name (file, alpha_function_name); fputs (\"..na:\\n\", file);\n+  fputs (\"\\t.ascii \\\"\", file);\n+  assemble_name (file, alpha_function_name);\n+  fputs (\"\\\\0\\\"\\n\", file);\n+      \n   link_section ();\n   fprintf (file, \"\\t.align 3\\n\");\n+  fputs (\"\\t.name \", file);\n+  assemble_name (file, alpha_function_name);\n+  fputs (\"..na\\n\", file);\n   ASM_OUTPUT_LABEL (file, alpha_function_name);\n-  fprintf (file, \"\\t.pdesc $\");\n+  fprintf (file, \"\\t.pdesc \");\n   assemble_name (file, alpha_function_name);\n   fprintf (file, \"..en,%s\\n\", is_stack_procedure ? \"stack\" : \"reg\");\n   alpha_need_linkage (alpha_function_name, 1);\n@@ -4015,7 +4025,7 @@ alpha_write_linkage (stream)\n       if (lptr->kind == KIND_LOCAL)   \n \t{\n \t  /*  Local and used, build linkage pair.  */\n-\t  fprintf (stream, \"\\t.quad $%s..en\\n\", lptr->name);\n+\t  fprintf (stream, \"\\t.quad %s..en\\n\", lptr->name);\n \t  fprintf (stream, \"\\t.quad %s\\n\", lptr->name);\n \t}\n       else"}, {"sha": "57618907fda5005d463d728a646cf98166643a23", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -31,7 +31,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n-\"-Dalpha -D__ALPHA -Dvms -DVMS -D__alpha__ -D__alpha -D__vms__ -D__VMS__\\\n+\"-D__ALPHA -Dvms -DVMS -D__alpha__ -D__alpha -D__vms__ -D__VMS__\\\n  -Asystem(vms) -Acpu(alpha) -Amachine(alpha)\"\n \n #undef CPP_SPEC"}, {"sha": "7665127b7147ae7a6477e90f3d8f97dfd0e75890", "filename": "gcc/config/alpha/xm-alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-alpha.h?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #if defined(__GNUC__) && !defined(USE_C_ALLOCA)\n #define alloca __builtin_alloca\n #else\n-#if !defined(_WIN32) && !defined(USE_C_ALLOCA)\n+#if !defined(_WIN32) && !defined(USE_C_ALLOCA) && !defined(OPEN_VMS)\n #include <alloca.h>\n #else\n extern void *alloca ();"}, {"sha": "43ac5b62cfbffd354a060c57cb51640661e914ed", "filename": "gcc/config/alpha/xm-vms.h", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-vms.h?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for openVMS/Alpha.\n-   Copyright (C)  1996 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Klaus Kaempf (kkaempf@progis.de).\n \n This file is part of GNU CC.\n@@ -51,9 +51,23 @@ Boston, MA 02111-1307, USA.  */\n #define VMS\n #endif\n \n+#define GCC_INCLUDE_DIR \"\"\n+/* Specify the list of include file directories.  */\n+#define INCLUDE_DEFAULTS\t\t\\\n+{\t\t\t\t\t\\\n+  { \"GNU_GXX_INCLUDE:\", \"G++\", 1, 1 },\t\\\n+  { \"GNU_CC_INCLUDE:\", \"GCC\", 0, 0 },\t\\\n+  { \".\", 0, 0, 1 },\t\t\t\\\n+  { 0, 0, 0, 0 }\t\t\t\\\n+}\n+\n /* Define a local equivalent (sort of) for unlink */\n #define unlink remove\n+\n #define NEED_ATEXIT\n+#define HAVE_VPRINTF\n+#define HAVE_PUTENV\n+#define HAVE_STRERROR\n \n #define NO_SYS_PARAMS_H\t\t/* Don't have <sys/params.h> */\n #define NO_STAB_H\t\t/* Don't have <stab.h> */\n@@ -63,16 +77,11 @@ Boston, MA 02111-1307, USA.  */\n #define HAVE_STDLIB_H 1\n #define HAVE_UNISTD_H 1\n #define HAVE_STRING_H 1\n+#define HAVE_LIMITS_H 1\n+#define HAVE_STDDEF_H 1\n+#define HAVE_TIME_H 1\n #define STDC_HEADERS 1\n-\n-/* Use ANSI/SYSV style byte manipulation routines instead of BSD ones.  */\n-\n-#define bcopy(s,d,n)\tmemcpy((d),(s),(n))\n-#define bzero(d,n)\tmemset((d),0,(n))\n-#define bcmp(l,r,n)\tmemcmp((l),(r),(n))\n-\n-#define index\tstrchr\n-#define rindex\tstrrchr\n+#define HAVE_CPP_STRINGIFY 1\n \n #if __STDC__\n extern void *alloca (size_t);\n@@ -82,5 +91,3 @@ extern char *alloca (unsigned int);\n \n #define OBJECT_SUFFIX \".obj\"\n #define EXECUTABLE_SUFFIX \".exe\"\n-#define DIR_SEPARATOR ']'\n-#define PATH_SEPARATOR ','"}, {"sha": "618fc2a8d3300945fd2016f34e8d2c3c889aa855", "filename": "gcc/make-cc1.com", "status": "removed", "additions": 0, "deletions": 545, "changes": 545, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=abff8e0691a5b560c4680cac0ddf6e6f61849bc8", "patch": "@@ -1,545 +0,0 @@\n-$v='f$verify(0)\t!make-cc1.com\n-$!\n-$!\tBuild the GNU C compiler on VMS.\n-$!\n-$!\tUsage:\n-$!\t  $ @make-cc1.com [host-compiler] [various]\n-$!\n-$!\twhere [host-compiler] is one of \"GNUC\", \"VAXC\", \"DECC\";\n-$!\tdefault when none specified is \"GNUC\",\n-$!\tand where [various] is one or more of \"CC1\", \"CC1PLUS\",\n-$!\t\"CC1OBJ\", \"OBJCLIB\", \"INDEPENDENT\", \"BC\", \"ALL\", \"LINK\", \"DEBUG\".\n-$!\t\"CC1\" (C compiler) is the default; of the others, only\n-$!\t\"CC1PLUS\" (C++ compiler), \"CC1OBJ\" (Objective-C compiler),\n-$!\tand \"OBJCLIB\" (Objective-C run-time library) are of interest\n-$!\tfor normal installation.\n-$!\tIf both [host-compiler] and other option(s) are specified,\n-$!\tthe host compiler argument must come first.\n-$!\n-$ if f$type(gcc_debug).eqs.\"INTEGER\" then  if gcc_debug.and.1 then  set verify\n-$\n-$ p1 = f$edit(p1,\"UPCASE,TRIM\")\n-$ if p1.eqs.\"\" then  p1 = \"GNUC\"\n-$!\n-$!\tCompiler-specific setup (assume GNU C, then override as necessary):\n-$!\n-$ CC\t = \"gcc\"\n-$ CFLAGS = \"/Opt=2/Debug/noVerbos/CC1=\"\"-mpcc-alignment\"\"\"\n-$ LIBS\t = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n-$ if p1.eqs.\"GNUC\"\n-$ then\n-$   p1 = \"\"\n-$ else\n-$   CC\t   = \"cc\"\n-$   CFLAGS = \"/noOpt\"\t!disable optimizer when bootstrapping with native cc\n-$   if p2.eqs.\"DEBUG\" .or. p3.eqs.\"DEBUG\" then  CFLAGS = CFLAGS + \"/Debug\"\n-$   if p1.eqs.\"VAXC\"\n-$   then\n-$     p1 = \"\"\n-$     if f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/VAXC\"\n-$     LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\n-$     define/noLog SYS SYS$LIBRARY:\n-$   else\n-$     if p1.eqs.\"DECC\"\n-$     then\n-$\tp1 = \"\"\n-$\tif f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/DECC\"\n-$\tCC = CC + \"/Prefix=All/Warn=Disabl=(ImplicitFunc)\"\n-$\tLIBS = \"alloca.obj\"\t!DECC$SHR will be found implicitly by linker\n-$\tdefine/noLog SYS DECC$LIBRARY_INCLUDE:\n-$     endif !DECC\n-$   endif !VAXC\n-$ endif !GNUC\n-$\n-$!\n-$!\tOther setup:\n-$!\n-$ LDFLAGS =\t\"/noMap\"\n-$ PARSER  =\t\"bison\"\n-$ PARSER_FLAGS=\t\"/Define/Verbose\"\n-$ RENAME  =\t\"rename/New_Version\"\n-$ LINK\t  =\t\"link\"\n-$ EDIT\t  =\t\"edit\"\n-$ SEARCH  =\t\"search\"\n-$ ABORT\t  =\t\"exit %x002C\"\n-$ echo\t  =\t\"write sys$output\"\n-$!\n-$!\tStage[123] options\n-$!\n-$ CINCL1 =\t\"/Incl=[]\"\t\t\t!stage 1 -I flags\n-$ CINCL2 =\t\"/Incl=([],[.ginclude])\"\t!stage 2,3,... flags\n-$ CINCL_SUB =\t\"/Incl=([],[-],[-.ginclude])\"\t![.cp] flags\n-$\n-$!!!!!!!\n-$!\tNothing beyond this point should need any local configuration changes.\n-$!!!!!!!\n-$\n-$! Set the default directory to the same place as this command procedure.\n-$ flnm = f$enviroment(\"PROCEDURE\")\t!get current procedure name\n-$ set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n-$\n-$!\n-$!  First we figure out what needs to be done.  This is sort of like a limited\n-$! make facility - the command line options specify exactly what components\n-$! we want to build.  The following options are understood:\n-$!\n-$!\tLINK:\tAssume that the object modules for the selected compiler(s)\n-$!\t\thave already been compiled, perform link phase only.\n-$!\n-$!\tCC1:\tCompile and link \"C\" compiler.\n-$!\n-$!\tCC1PLUS:Compile and link \"C++\" compiler.\n-$!\n-$!\tCC1OBJ:\tCompile and link objective C compiler.\n-$!\n-$!\tALL:\tCompile and link all of the CC1 passes.\n-$!\n-$!\tINDEPENDENT:\n-$!\t\tCompile language independent source modules. (On by default).\n-$!\n-$!\tBC:\n-$!\t\tCompile byte compiler source modules. (On by default).\n-$!\n-$!\tOBJCLIB:\n-$!\t\tCompile Objective-C run-time library.\n-$!\n-$!\tDEBUG:\tLink images with /debug.\n-$!\n-$! If you want to list more than one option, you should use a spaces to\n-$! separate them.\n-$!\n-$!\tAny one of the above options can be prefaced with a \"NO\".  For example,\n-$! if you had already built GCC, and you wanted to build G++, you could use the\n-$! \"CC1PLUS NOINDEPENDENT\" options, which would only compile the C++ language\n-$! specific source files, and then link the C++ compiler.\n-$!\n-$! If you do not specify which compiler you want to build, it is assumed that\n-$! you want to build GNU-C (\"CC1\").\n-$!\n-$! Now figure out what we have been requested to do.\n-$p1 = p1+\" \"+p2+\" \"+p3+\" \"+p4+\" \"+p5+\" \"+p6+\" \"+p7+\" \"+p8\n-$p1 = f$edit(p1,\"COMPRESS,TRIM\")\n-$i=0\n-$DO_ALL = 0\n-$DO_LINK = 0\n-$DO_DEBUG = 0\n-$DO_CC1PLUS = 0\n-$DO_CC1OBJ = 0\n-$DO_OBJCLIB = 0\n-$if f$trnlnm(\"cfile$\").nes.\"\" then  close/noLog cfile$\n-$open cfile$ compilers.list\n-$cinit:read cfile$ compilername/end=cinit_done\n-$DO_'compilername'=0\n-$goto cinit\n-$cinit_done: close cfile$\n-$DO_INDEPENDENT = 1\n-$DO_DEFAULT = 1\n-$DO_BC = 1\n-$loop:\n-$string = f$element(i,\" \",p1)\n-$if string.eqs.\" \" then goto done\n-$flag = 1\n-$if string.eqs.\"CC1PLUS\" then DO_DEFAULT = 0\n-$if string.eqs.\"CC1OBJ\" then DO_DEFAULT = 0\n-$if string.eqs.\"OBJCLIB\"\n-$then\tDO_DEFAULT = 0\n-$\tDO_INDEPENDENT = DO_CC1OBJ\n-$\tDO_BC = DO_CC1OBJ\n-$endif\n-$if f$extract(0,2,string).nes.\"NO\" then goto parse_option\n-$  string=f$extract(2,f$length(string)-2,string)\n-$  flag = 0\n-$parse_option:\n-$DO_'string' = flag\n-$i=i+1\n-$goto loop\n-$!\n-$done:\n-$if DO_DEFAULT.eq.1 then DO_CC1 = 1\n-$echo \"This command file will now perform the following actions:\n-$if DO_LINK.eq.1 then goto link_only\n-$if DO_ALL.eq.1 then echo \"   Compile all language specific object modules.\"\n-$if DO_CC1.eq.1 then echo \"   Compile C specific object modules.\"\n-$if DO_CC1PLUS.eq.1 then echo \"   Compile C++ specific object modules.\"\n-$if DO_CC1OBJ.eq.1 then echo \"   Compile obj-C specific object modules.\"\n-$if DO_INDEPENDENT.eq.1 then echo \"   Compile language independent object modules.\"\n-$if DO_BC.eq.1 then echo \"   Compile byte compiler object modules.\"\n-$if DO_OBJCLIB.eq.1 then echo \"   Create Objective-C run-time library.\"\n-$link_only:\n-$if DO_CC1.eq.1 then\techo \"   Link C compiler (gcc-cc1.exe).\"\n-$if DO_CC1PLUS.eq.1 then echo \"   Link C++ compiler (gcc-cc1plus.exe).\"\n-$if DO_CC1OBJ.eq.1 then echo \"   Link objective-C compiler (gcc-cc1obj.exe).\"\n-$if DO_DEBUG.eq.1 then echo  \"   Link images to run under debugger.\"\n-$!\n-$! Update CFLAGS with appropriate CINCLx value.\n-$!\n-$if f$edit(f$extract(0,3,CC),\"LOWERCASE\").nes.\"gcc\" then goto stage1\n-$if f$search(\"gcc-cc1.exe\").eqs.\"\" then goto stage1\n-$if f$file_attr(\"gnu_cc:[000000]gcc-cc1.exe\",\"FID\").nes.-\n-    f$file_attr(\"gcc-cc1.exe\",\"FID\") then goto stage1\n-$ CFLAGS = CFLAGS + CINCL2\n-$ goto cinclX\n-$stage1:\n-$ CFLAGS = CFLAGS + CINCL1\n-$cinclX:\n-$!\n-$! Test and see if we need these messages or not.  The -1 switch gives it away.\n-$!\n-$gas := $gnu_cc:[000000]gcc-as.exe\n-$if f$search(gas-\"$\").eqs.\"\" then  goto gas_missing_message\t!must be VAXC\n-$define/user sys$error sys$scratch:gas_test.tmp\n-$gas -1 nla0: -o nla0:\n-$size=f$file_attributes(\"sys$scratch:gas_test.tmp\",\"ALQ\")\n-$delete/nolog sys$scratch:gas_test.tmp;*\n-$if size.eq.0 then goto skip_gas_message\n-$type sys$input:\t!an old version of gas was found\n-\n------\n-     Note:  you appear to have an old version of gas, the GNU assembler.\n-GCC 2.x treats external variables differently than GCC 1.x does.  Before\n-you use GCC 2.x, you should obtain a version of the assembler which works\n-with GCC 2.x (gas-1.38 and earlier did not have the necessary support;\n-gas-2.0 through gas-2.3 did not work reliably for vax/vms configuration).\n-The assembler in gcc-vms-1.42 contained patches to provide the proper\n-support, and more recent versions have an up to date version of gas which\n-provides the support.  gas from binutils-2.5 or later is recommended.\n-\n-     If you do not update the assembler, the compiler will still work,\n-but `extern const' variables will be treated as `extern'.  This will result\n-in linker warning messages about mismatched psect attributes, and these\n-variables will be placed in read/write storage.\n------\n-\n-$goto skip_gas_message\n-$gas_missing_message:\n-$type sys$input:\t!no version of gas was found\n-\n------\n-     Note:  you appear to be missing gas, the GNU assembler.  Since\n-GCC produces assembly code as output from compilation, you need the\n-assembler to make full use of the compiler.  It should be put in place\n-as GNU_CC:[000000]GCC-AS.EXE.\n-\n-     A prebuilt copy of gas is available from the \"gcc-vms\" distribution,\n-and the gas source code is included in the GNU \"binutils\" distribution.\n-Version 2.5.2 or later is recommended.\n------\n-\n-$skip_gas_message:\n-$!\n-$!\n-$ if DO_DEBUG.eq.1 then LDFLAGS = LDFLAGS + \"/Debug\"\n-$!\n-$if DO_LINK.eq.1 then goto no_yfiles\t!compile_cc1\n-$!\n-$! Build alloca if necessary (in 'LIBS for use with VAXC)\n-$!\n-$ if f$locate(\"alloca.obj\",f$edit(LIBS,\"lowercase\")).ge.f$length(LIBS) then -\n-\tgoto skip_alloca\n-$ if f$search(\"alloca.obj\").nes.\"\" then -  !does .obj exist? is it up to date?\n-    if f$cvtime(f$file_attributes(\"alloca.obj\",\"RDT\")).gts.-\n-       f$cvtime(f$file_attributes(\"alloca.c\",\"RDT\")) then  goto skip_alloca\n-$set verify\n-$ 'CC''CFLAGS'/Defi=(\"HAVE_CONFIG_H\",\"STACK_DIRECTION=(-1)\") alloca.c\n-$!'f$verify(0)\n-$skip_alloca:\n-$!\n-$if DO_BC.eq.1\n-$\tthen\n-$\tcall compile bi_all.opt \"\"\n-$\tif f$trnlnm(\"ifile$\").nes.\"\" then  close/noLog ifile$\n-$\topen ifile$ bc_all.list\n-$\tread ifile$ bc_line\n-$\tclose ifile$\n-$\tbc_index = 0\n-$bc_loop:\n-$\ttfile = f$element(bc_index, \",\", bc_line)\n-$\tif tfile.eqs.\",\" then goto bc_done\n-$\tcall bc_generate 'tfile' \"bi_all.opt/opt,\"\n-$\tbc_index = bc_index + 1\n-$\tgoto bc_loop\n-$bc_done:\n-$\tendif\n-$!\n-$!\n-$if DO_INDEPENDENT.eq.1\n-$\tthen\n-$!\n-$! First build a couple of header files from the machine description\n-$! These are used by many of the source modules, so we build them now.\n-$!\n-$set verify\n-$ 'CC''CFLAGS' rtl.c\n-$ 'CC''CFLAGS' obstack.c\n-$!'f$verify(0)\n-$! Generate insn-attr.h\n-$\tcall generate insn-attr.h\n-$\tcall generate insn-flags.h\n-$\tcall generate insn-codes.h\n-$\tcall generate insn-config.h\n-$!\n-$call compile independent.opt \"rtl,obstack,insn-attrtab\"\n-$!\n-$\tcall generate insn-attrtab.c \"rtlanal.obj,\"\n-$set verify\n-$ 'CC''CFLAGS' insn-attrtab.c\n-$ 'CC''CFLAGS' bc-emit.c\n-$ 'CC''CFLAGS' bc-optab.c\n-$!'f$verify(0)\n-$\tendif\n-$!\n-$compile_cc1:\n-$if (DO_CC1 + DO_CC1OBJ) .ne.0\n-$\tthen\n-$if (f$search(\"C-PARSE.Y\") .eqs. \"\") then goto yes_yfiles\n-$if (f$cvtime(f$file_attributes(\"C-PARSE.IN\",\"RDT\")).gts. -\n- \t    f$cvtime(f$file_attributes(\"C-PARSE.Y\",\"RDT\")))  -\n-\t\tthen goto yes_yfiles\n-$if f$parse(\"[.OBJC]\").eqs.\"\" then create/Directory [.objc]\n-$if (f$search(\"[.OBJC]OBJC-PARSE.Y\") .eqs. \"\") then goto yes_yfiles\n-$if (f$cvtime(f$file_attributes(\"C-PARSE.IN\",\"RDT\")).gts. -\n- \t    f$cvtime(f$file_attributes(\"[.OBJC]OBJC-PARSE.Y\",\"RDT\")))  -\n-\t\tthen goto yes_yfiles\n-$GOTO no_yfiles\n-$yes_yfiles:\n-$echo \"Now processing c-parse.in to generate c-parse.y and [.objc]objc-parse.y.\"\n-$ EDIT/Tpu/noJournal/noSection/noDisplay/Command=sys$input:\n-!\n-!     Read c-parse.in, write c-parse.y and objc/objc-parse.y, depending on\n-!     paired lines of \"ifc\" & \"end ifc\" and \"ifobjc\" & \"end ifobjc\" to\n-!     control what goes into each file.  Most lines will be common to\n-!     both (hence not bracketed by either control pair).  Mismatched\n-!     pairs aren't detected--garbage in, garbage out...\n-!\n-\n-   PROCEDURE do_output()\n-      IF NOT objc_only THEN POSITION(END_OF(c)); COPY_TEXT(input_line); ENDIF;\n-      IF NOT c_only THEN POSITION(END_OF(objc)); COPY_TEXT(input_line); ENDIF;\n-      POSITION(input_file);                     !reset\n-   ENDPROCEDURE;\n-\n-   input_file := CREATE_BUFFER(\"input\", \"c-parse.in\");  !load data\n-\t\t SET(NO_WRITE, input_file);\n-   c          := CREATE_BUFFER(\"c_output\");     !1st output file\n-   objc       := CREATE_BUFFER(\"objc_output\");  !2nd output file\n-\n-   POSITION(BEGINNING_OF(input_file));\n-   c_only     := 0;\n-   objc_only  := 0;\n-\n-   LOOP\n-      EXITIF MARK(NONE) = END_OF(input_file);   !are we done yet?\n-\n-      input_line := CURRENT_LINE;               !access current_line just once\n-      CASE EDIT(input_line, TRIM_TRAILING, OFF, NOT_IN_PLACE)\n-\t [\"ifc\"]        : c_only := 1;\n-\t [\"end ifc\"]    : c_only := 0;\n-\t [\"ifobjc\"]     : objc_only := 1;\n-\t [\"end ifobjc\"] : objc_only := 0;\n-!         default -- add non-control line to either or both output files\n-\t [INRANGE]      : do_output();          !between \"end\" and \"if\"\n-\t [OUTRANGE]     : do_output();          !before \"end\" or after \"if\"\n-      ENDCASE;\n-\n-      MOVE_VERTICAL(1);                         !go to next line\n-   ENDLOOP;\n-\n-   WRITE_FILE(c, \"c-parse.y\");\n-   WRITE_FILE(objc, \"[.objc]objc-parse.y\");\n-   QUIT\n-$\tendif\t\n-$no_yfiles:\n-$!\n-$open cfile$ compilers.list\n-$cloop:read cfile$ compilername/end=cdone\n-$! language specific modules\n-$!\n-$if (DO_ALL + DO_'compilername').eq.0 then goto cloop\n-$if DO_LINK.eq.0 then -\n- call compile 'compilername'-objs.opt \"obstack,bc-emit,bc-optab\"\n-$!\n-$! CAUTION: If you want to link gcc-cc1* to the sharable image library\n-$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n-$!\n-$set verify\n-$ 'LINK''LDFLAGS'/Exe=gcc-'compilername'.exe  version.opt/Opt,-\n-\t  'compilername'-objs.opt/Opt,independent.opt/Opt,-\n-\t  'LIBS'\n-$!'f$verify(0)\n-$goto cloop\n-$!\n-$!\n-$cdone: close cfile$\n-$!\n-$ if DO_OBJCLIB\n-$ then\tset default [.objc]\t!push\n-$\tsave_cflags = CFLAGS\n-$\tCFLAGS = CFLAGS - CINCL1 - CINCL2 + CINCL_SUB\n-$\tMFLAGS = \"/Lang=ObjC\" + CFLAGS\n-$\tlibrary/Obj [-]objclib.olb/Create\n-$\tif f$trnlnm(\"IFILE$\").nes.\"\" then  close/noLog ifile$\n-$\topen/Read ifile$ [-]objc-objs.opt\n-$ocl1:\tread/End=ocl3 ifile$ line\n-$\ti = 0\n-$ocl2:\to = f$element(i,\",\",line)\n-$\tif o.eqs.\",\" then goto ocl1\n-$\tn = o - \".o\"\n-$\tif f$search(n + \".m\").nes.\"\"\n-$\tthen\tf = n + \".m\"\n-$\t\tflags = MFLAGS\n-$\telse\tf = n + \".c\"\n-$\t\tflags = CFLAGS\n-$\tendif\n-$\tset verify\n-$ 'CC' 'flags' 'f'\n-$!'f$verify(0)'\n-$\tlibrary/Obj [-]objclib.olb 'n'.obj/Insert\n-$\tdelete/noConfirm/noLog 'n'.obj;*\n-$\ti = i + 1\n-$\tgoto ocl2\n-$ocl3:\tclose ifile$\n-$\tCFLAGS = save_cflags\n-$\tset default [-]\t!pop\n-$ endif !DO_OBJCLIB\n-$!\n-$!\tDone\n-$!\n-$! 'f$verify(v)\n-$exit\n-$!\n-$!  Various DCL subroutines follow...\n-$!\n-$!  This routine takes parameter p1 to be a linker options file with a list\n-$!  of object files that are needed.  It extracts the names, and compiles\n-$!  each source module, one by one.  File names that begin with an\n-$!  \"INSN-\" are assumed to be generated by a GEN*.C program.\n-$!\n-$!  Parameter P2 is a list of files which will appear in the options file\n-$!  that should not be compiled.  This allows us to handle special cases.\n-$!\n-$compile:\n-$subroutine\n-$on error then goto c_err\n-$on control_y then goto c_err\n-$open ifile$ 'p1'\n-$loop: read ifile$ line/end=c_done\n-$!\n-$i=0\n-$loop1:\n-$flnm=f$element(i,\",\",line)\n-$i=i+1\n-$if flnm.eqs.\"\" then goto loop\n-$if flnm.eqs.\",\" then goto loop\n-$if f$locate(flnm,p2).lt.f$length(p2) then goto loop1\n-$! check for front-end subdirectory: \"[.prfx]flnm\"\n-$prfx = \"\"\n-$k = f$locate(\"]\",flnm)\n-$if k.eq.1\t![]c-common for [.cp]\n-$then\n-$ if f$search(f$parse(\".obj\",flnm)).nes.\"\" then  goto loop1\n-$ flnm = f$extract(2,999,flnm)\n-$else if k.lt.f$length(flnm)\n-$ then\tprfx = f$extract(2,k-2,flnm)\n-$\tflnm = f$extract(k+1,99,flnm)\n-$ endif\n-$endif\n-$ if prfx.nes.\"\"\n-$ then\tset default [.'prfx']\t!push\n-$\tsave_cflags = CFLAGS\n-$\tCFLAGS = CFLAGS - CINCL1 - CINCL2 + CINCL_SUB\n-$ endif\n-$!\n-$ if f$locate(\"parse\",flnm).nes.f$length(flnm)\n-$ then\n-$   if f$search(\"''flnm'.c\").nes.\"\" then -\n-      if f$cvtime(f$file_attributes(\"''flnm'.c\",\"RDT\")).ges. -\n-\t f$cvtime(f$file_attributes(\"''flnm'.y\",\"RDT\")) then  goto skip_yacc\n-$ set verify\n-$\t'PARSER' 'PARSER_FLAGS' 'flnm'.y\n-$\t'RENAME' 'flnm'_tab.c 'flnm'.c\n-$\t'RENAME' 'flnm'_tab.h 'flnm'.h\n-$!'f$verify(0)\n-$\tif flnm.eqs.\"cp-parse\" .or. (prfx.eqs.\"cp\" .and. flnm.eqs.\"parse\")\n-$\tthen\t\t! fgrep '#define YYEMPTY' cp-parse.c >>cp-parse.h\n-$\t\tif f$trnlnm(\"JFILE$\").nes.\"\" then  close/noLog jfile$\n-$\t\topen/Append jfile$ 'flnm'.h\n-$\t\t'SEARCH'/Exact/Output=jfile$ 'flnm'.c \"#define YYEMPTY\"\n-$\t\tclose jfile$\n-$\tendif\n-$skip_yacc:\n-$\t echo \" (Ignore any warning about not finding file \"\"bison.simple\"\".)\"\n-$ endif\n-$!\n-$if f$extract(0,5,flnm).eqs.\"insn-\" then call generate 'flnm'.c\n-$!\n-$set verify\n-$ 'CC''CFLAGS' 'flnm'.c\n-$!'f$verify(0)\n-$ if prfx.nes.\"\"\n-$ then\tset default [-]\t\t!pop\n-$\tCFLAGS = save_CFLAGS\n-$ endif\n-$\n-$goto loop1\n-$!\n-$!\n-$! In case of error or abort, go here (In order to close file).\n-$!\n-$c_err: !'f$verify(0)\n-$close ifile$\n-$ABORT\n-$!\n-$c_done:\n-$close ifile$\n-$endsubroutine\n-$!\n-$! This subroutine generates the insn-* files.  The first argument is the\n-$! name of the insn-* file to generate.  The second argument contains a\n-$! list of any other object modules which must be linked to the gen*.c\n-$! program.\n-$!\n-$generate:\n-$subroutine\n-$if f$extract(0,5,p1).nes.\"INSN-\"\n-$\tthen\n-$\twrite sys$error \"Unknown file passed to generate.\"\n-$\tABORT\n-$\tendif\n-$root1=f$parse(f$extract(5,255,p1),,,\"NAME\")\n-$\tset verify\n-$ 'CC''CFLAGS' GEN'root1'.C\n-$ 'LINK''f$string(LDFLAGS - \"/Debug\")' GEN'root1'.OBJ,rtl.obj,obstack.obj,'p2' -\n-\t  'LIBS'\n-$!\t'f$verify(0)\n-$!\n-$set verify\n-$\tassign/user 'p1' sys$output:\n-$\tmcr sys$disk:[]GEN'root1' vax.md\n-$!'f$verify(0)\n-$endsubroutine\n-$!\n-$! This subroutine generates the bc-* files.  The first argument is the\n-$! name of the bc-* file to generate.  The second argument contains a\n-$! list of any other object modules which must be linked to the bi*.c\n-$! program.\n-$!\n-$bc_generate:\n-$subroutine\n-$if f$extract(0,3,p1).nes.\"BC-\"\n-$\tthen\n-$\twrite sys$error \"Unknown file passed to bc_generate.\"\n-$\tABORT\n-$\tendif\n-$root1=f$parse(f$extract(3,255,p1),,,\"NAME\")\n-$\tset verify\n-$ 'CC''CFLAGS' BI-'root1'.C\n-$ 'LINK''f$string(LDFLAGS - \"/Debug\")' BI-'root1'.OBJ,'p2' -\n-\t  'LIBS'\n-$!\t'f$verify(0)\n-$!\n-$set verify\n-$\tassign/user bytecode.def sys$input:\n-$\tassign/user 'p1' sys$output:\n-$\tmcr sys$disk:[]BI-'root1'\n-$!'f$verify(0)\n-$endsubroutine"}, {"sha": "342c71015a4ad3c47df75aff575d42ddb8eeb1dc", "filename": "gcc/make-cccp.com", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-cccp.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-cccp.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cccp.com?ref=abff8e0691a5b560c4680cac0ddf6e6f61849bc8", "patch": "@@ -1,119 +0,0 @@\n-$v='f$verify(0)\t!make-cccp.com\n-$!\n-$!\tBuild the GNU C preprocessor on VMS.\n-$!\n-$!\tUsage:\n-$!\t  $ @make-cccp.com [compiler] [link-only]\n-$!\n-$!\twhere [compiler] is one of \"GNUC\", \"VAXC\", \"DECC\";\n-$!\tdefault when none specified is \"GNUC\",\n-$!\tand where [link-only] is \"LINK\" or omitted.\n-$!\tIf both options are specified, the compiler must come first.\n-$!\n-$ if f$type(gcc_debug).eqs.\"INTEGER\" then  if gcc_debug.and.1 then  set verify\n-$\n-$ p1 = f$edit(p1,\"UPCASE,TRIM\")\n-$ if p1.eqs.\"\" then  p1 = \"GNUC\"\n-$!\n-$!\tCompiler-specific setup (assume GNU C, then override as necessary):\n-$!\n-$ CC\t = \"gcc\"\n-$ CFLAGS = \"/Opt=2/Debug/noVerbos\"\n-$ LIBS\t = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n-$ if p1.nes.\"GNUC\"\n-$ then\n-$   CC\t   = \"cc\"\n-$   CFLAGS = \"/noOpt\"\t!disable optimizer when bootstrapping with native cc\n-$   if p1.eqs.\"VAXC\"\n-$   then\n-$     if f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/VAXC\"\n-$     LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\n-$     define/noLog SYS SYS$LIBRARY:\n-$   else\n-$     if p1.eqs.\"DECC\"\n-$     then\n-$\tif f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/DECC\"\n-$\tCC = CC + \"/Prefix=All\"\n-$\tLIBS = \"alloca.obj\"\t!DECC$SHR will be found implicitly by linker\n-$\tdefine/noLog SYS DECC$LIBRARY_INCLUDE:\n-$     else\n-$\tif p1.nes.\"LINK\"\n-$\tthen\n-$\t  type sys$input: /Output=sys$error:\n-$DECK\n-[compiler] argument should be one of \"GNUC\", \"VAXC\", or \"DECC\".\n-\n-Usage:\n-$ @make-cccp.com [compiler] [link-only]\n-\n-$EOD\n-$\t  exit %x1000002C + 0*f$verify(v)\t!%SYSTEM-F-ABORT\n-$\tendif !!LINK\n-$     endif !DECC\n-$   endif !VAXC\n-$ endif !!GNUC\n-$\n-$!\n-$!\tOther setup:\n-$!\n-$ LDFLAGS =\t\"/noMap\"\n-$ PARSER  =\t\"bison\"\n-$ RENAME  =\t\"rename/New_Version\"\n-$ LINK\t  =\t\"link\"\n-$ echo\t  =\t\"write sys$output\"\n-$\n-$!!!!!!!\n-$!\tNothing beyond this point should need any local configuration changes.\n-$!!!!!!!\n-$\n-$! Set the default directory to the same place as this command procedure.\n-$ flnm = f$enviroment(\"PROCEDURE\")\t!get current procedure name\n-$ set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n-$\n-$ if p1.eqs.\"LINK\" .or. p2.eqs.\"LINK\" then  goto Link\n-$ echo \" Building the preprocessor.\"\n-$\n-$! Compile the simplest file first, to catch problem with compiler setup early.\n-$ set verify\n-$ 'CC''CFLAGS' version.c\n-$!'f$verify(0)\n-$\n-$ set verify\n-$ 'CC''CFLAGS' cccp.c\n-$!'f$verify(0)\n-$\n-$! Compile preprocessor's parser, possibly making it with yacc first.\n-$ if f$search(\"CEXP.C\").nes.\"\" then -\n-    if f$cvtime(f$file_attributes(\"CEXP.C\",\"RDT\")).ges.-\n-       f$cvtime(f$file_attributes(\"CEXP.Y\",\"RDT\")) then  goto skip_yacc\n-$ set verify\n-$ 'PARSER' cexp.y\n-$ 'RENAME' cexp_tab.c cexp.c\n-$!'f$verify(0)\n-$skip_yacc:\n-$ echo \" (Ignore any warning about not finding file \"\"bison.simple\"\".)\"\n-$ set verify\n-$ 'CC''CFLAGS' cexp.c\n-$ 'CC''CFLAGS'/Define=\"PREFIX=\"\"_dummy_\"\"\" prefix.c\n-$!'f$verify(0)\n-$\n-$! In case there's no builtin alloca support, use the C simulation.\n-$ if f$locate(\"alloca.obj\",f$edit(LIBS,\"lowercase\")).lt.f$length(LIBS)\n-$ then\n-$  set verify\n-$ 'CC''CFLAGS'/Incl=[]/Defi=(\"HAVE_CONFIG_H\",\"STACK_DIRECTION=(-1)\") alloca.c\n-$!'f$verify(0)\n-$ endif\n-$!\n-$\n-$Link:\n-$ echo \" Linking the preprocessor.\"\n-$ set verify\n-$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe -\n-\t  cccp.obj,cexp.obj,prefix.obj,version.obj,version.opt/Opt,-\n-\t  'LIBS'\n-$!'f$verify(0)\n-$!\n-$!\tDone\n-$!\n-$ exit 1+0*f$verify(v)"}, {"sha": "58632eb10c62de49f41e8f53fbc5955c3c273edd", "filename": "gcc/make-gcc.com", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-gcc.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abff8e0691a5b560c4680cac0ddf6e6f61849bc8/gcc%2Fmake-gcc.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-gcc.com?ref=abff8e0691a5b560c4680cac0ddf6e6f61849bc8", "patch": "@@ -1,71 +0,0 @@\n-$! make-gcc.com -- VMS build procedure for GNU CC.\n-$!\n-$!\tUsage:\n-$!\t  $ @make-gcc.com [host-compiler] [component list]\n-$!\n-$!\twhere [host-compiler] is one of \"GNUC\", \"VAXC\", \"DECC\";\n-$!\tdefault when none specified is \"GNUC\",\n-$!\tand where [component list] is space separated list beginning\n-$!\twith \"CC1\" and optionally followed by \"CC1PLUS\"; default if\n-$!\tnothing is specified is \"CC1\" (the C compiler); choosing\n-$!\t\"CC1PLUS\" (the C++ compiler) without also specifying \"CC1\"\n-$!\twill not work.\t(See make-cc1.com for other potential component\n-$!\tvalues; but unless you're developing or debugging the compiler\n-$!\tsuite itself, the two above are the only ones of interest.)\n-$!\n-$!\t  For a \"stage 2\" or subsequent build, always specify GNUC as\n-$!\tthe host compiler.\n-$!\n-$!\tNote:\n-$!\t  Even though it is possible to build with VAX C or DEC C,\n-$!\ta prior version of the gcc-vms binary distribution is still\n-$!\trequired to be able to use the newly built GNU CC compiler(s),\n-$!\tbecause the gcc source distribution does not supply the driver\n-$!\tprogram which the DCL command \"GCC\" implements or the C header\n-$!\tfiles and gcclib support library.\n-$!\n-$\n-$!\n-$! Change working directory to the location of this procedure.\n-$!\n-$ flnm = f$enviroment(\"PROCEDURE\")\t!get current procedure name\n-$ set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n-$\n-$!\n-$! First, we build the preprocessor.\n-$!\n-$ @make-cccp.com 'p1' 'p2'\n-$!\n-$! To install it, copy the resulting GCC-CPP.EXE to the GNU_CC:[000000]\n-$! directory.\n-$!\n-$\n-$!\n-$! Now we build the C compiler.  To build the C++ compiler too, use\n-$! $ @make-gcc GNUC cc1 cc1plus\n-$! when invoking this command procedure.  Note that you should not\n-$! do this for a \"stage 1\" build.\n-$!\n-$ @make-cc1.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'\n-$!\n-$! To install it (them), copy the resulting GCC-CC1.EXE (and GCC-CC1PLUS.EXE)\n-$! to the GNU_CC:[000000] directory.\n-$!\n-$\n-$!\n-$! Now we build the `libgcc2' support library.\tIt will need to be merged\n-$! with the existing gcclib.olb library.\n-$!\n-$ @make-l2.com 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'\n-$!\n-$! To install, save a backup copy of GNU_CC:[000000]GCCLIB.OLB somewhere,\n-$! then update the original using the newly created LIBGCC2.OLB via\n-$! $ library/Obj libgcc2.olb /Extract=*/Output=libgcc2.obj\n-$! $ library/Obj gnu_cc:[000000]gcclib.olb libgcc2.obj /Replace\n-$!\n-$! Depending upon how old your present gcclib library is, you might have\n-$! to delete some modules, such as `eprintf' and `new', to avoid conflicting\n-$! symbols from obsolete routines.  After deleting any such modules, just\n-$! repeat the `library/replace' step.\n-$!\n-$ exit"}, {"sha": "e5b4db857e1b29710679fae7bca1d88bb8d18bc1", "filename": "gcc/makefile.vms", "status": "added", "additions": 434, "deletions": 0, "changes": 434, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fmakefile.vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeeb91c5bf560937fb084cad9159f93a52941c41/gcc%2Fmakefile.vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmakefile.vms?ref=eeeb91c5bf560937fb084cad9159f93a52941c41", "patch": "@@ -0,0 +1,434 @@\n+#\n+# makefile for egcs\n+#\n+# Created by Klaus K\"ampf, kkaempf@progis.de\n+#\n+\n+# choose egcs or dec c\n+#CC = gcc\n+CC = cc\n+\n+# With or withou haifa scheduler ?\n+#HAIFA=,\"HAIFA\"\n+HAIFA=\n+\n+PWD=sys$$disk:[]\n+RM=delete/nolog\n+\n+ifeq ($(CC),gcc)\n+ifeq ($(ARCH),ALPHA)\n+CFLAGS=/define=(\"HAVE_CONFIG_H=1\",\"USE_COLLECT2\" $(HAIFA))\n+LIBS=,gnu_cc_library:libgcc.olb/lib,sys$$library:vaxcrtl.olb/lib,gnu_cc_library:crt0.obj\n+else\n+CFLAGS=/define=(\"HAVE_CONFIG_H=1\",\"USE_COLLECT2\" $(HAIFA))\n+LIBS=,gnu_cc_library:libgcc.olb/lib,sys$$library:vaxcrtl.olb/lib\n+endif\n+LFLAGS=/map/full\n+#LFLAGS=\n+else\n+ifeq ($(ARCH),ALPHA)\n+CFLAGS=/float=ieee/noopt/debug/define=(\"HAVE_CONFIG_H=1\",\"USE_COLLECT2\" $(HAIFA))\\\n+/warning=disable=(missingreturn,implicitfunc,ptrmismatch,undefescap,longextern,duptypespec)\n+else\n+CFLAGS=/noopt/debug/define=(\"HAVE_CONFIG_H=1\",\"USE_COLLECT2\" $(HAIFA))\n+endif\n+LFLAGS=/nomap\n+LIBS=,sys$$library:vaxcrtl.olb/lib\n+endif\n+\n+BISON = bison\n+BISON_FLAGS=  /Yacc/Define/Verbose\n+RENAME=\trename/New_Version\n+LINK  =\tlink\t\t#/noshare/nosysshr\n+EDIT  =\tedit\n+SEARCH=\tsearch\n+ABORT =\texit %x002C\n+echo  =\twrite sys$$output\n+\n+CINCL1\t=\t/Incl=([],[.config])\n+CINCL2\t=\t/Incl=([],[.ginclude],[.config])\n+CINCL_SUB =\t/Incl=([],[-],[-.ginclude],[-.config])\n+CINCL_CP=\t/Incl=([],[.config],[.cp],[.cp.inc])\n+\n+MDFILE = [.config.$(ARCH)]$(ARCH).md\n+\n+ifeq ($(HAIFA),)\n+SCHED=sched\n+else\n+SCHED=haifa-sched\n+endif\n+\n+BIOBJS=[]bi-parser.obj,bi-lexer.obj,bi-reverse.obj\n+GENOBJS=[]rtl.obj,obstack.obj\n+\n+INDEPOBJS= []toplev.obj,version.obj,tree.obj,print-tree.obj,stor-layout.obj,\\\n+fold-const.obj,function.obj,stmt.obj,except.obj,expr.obj,calls.obj,expmed.obj,\\\n+explow.obj,optabs.obj,varasm.obj,rtl.obj,print-rtl.obj,rtlanal.obj,\\\n+emit-rtl.obj,real.obj,regmove.obj,dbxout.obj,sdbout.obj,dwarfout.obj,\\\n+dwarf2out.obj,xcoffout.obj,bitmap.obj,alias.obj,\\\n+integrate.obj,jump.obj,cse.obj,loop.obj,unroll.obj,flow.obj,stupid.obj,\\\n+combine.obj,regclass.obj,local-alloc.obj,global.obj,reload.obj,\\\n+reload1.obj,caller-save.obj,insn-peep.obj,reorg.obj,$(SCHED).obj,\\\n+final.obj,recog.obj,reg-stack.obj,insn-opinit.obj,insn-recog.obj,\\\n+insn-extract.obj,insn-output.obj,insn-emit.obj,\\\n+profile.obj,insn-attrtab.obj,\\\n+aux-output.obj,getpwd.obj,convert.obj\n+\n+CC1OBJS=[]c-parse.obj,c-lang.obj,c-lex.obj,c-pragma.obj,c-decl.obj,\\\n+c-typeck.obj,c-convert.obj,c-aux-info.obj,c-common.obj,c-iterate.obj,\\\n+bc-emit.obj,bc-optab.obj,obstack.obj\n+\n+OBJCOBJS=\n+\n+# list copied from cc1plus-objs.opt\n+\n+CC1PLUSOBJS=[.cp]call.obj,[.cp]decl2.obj,\\\n+[.cp]except.obj,[.cp]pt.obj,\\\n+[.cp]spew.obj,[.cp]xref.obj,[.cp]class.obj,\\\n+[.cp]expr.obj,[.cp]lex.obj,\\\n+[.cp]ptree.obj,[.cp]tree.obj,[.cp]cvt.obj,\\\n+[.cp]errfn.obj,[.cp]rtti.obj,[.cp]method.obj,\\\n+[.cp]search.obj,[.cp]typeck.obj,[.cp]decl.obj,\\\n+[.cp]error.obj,[.cp]friend.obj,[.cp]init.obj,[.cp]parse.obj,\\\n+[.cp]sig.obj,[.cp]typeck2.obj,[.cp]repo.obj,\\\n+[.cp]input.obj,\\\n+[]obstack.obj,\\\n+[]bc-emit.obj,[]bc-optab.obj,\\\n+[]c-common.obj,[]c-pragma.obj\n+\n+CCCPOBJS=[]cccp.obj,cexp.obj,version.obj,prefix.obj\n+\n+ALLOCA=,[]alloca.obj,vms_abort.obj\n+\n+LIBIBERTY = [-.libiberty]libiberty.olb\n+\n+CXX_LIB2FUNCS = [.cp]tinfo.obj,[.cp]tinfo2.obj,\\\n+[.cp]new.obj,[.cp]new1.obj,[.cp]new2.obj,[.cp]exception.obj\n+\n+.c.obj:\n+\t$(CC) $(CFLAGS) $(CINCL1) $</obj=$@\n+\n+.cc.obj:\n+\t$(CC)/plus/CPP=\"-nostdinc++\" $(CFLAGS) $(CINCL_CP) $</obj=$@\n+\n+BC_INCLUDES=bc-arity.h bc-opcode.h bc-opname.h\n+INSN_INCLUDES=insn-attr.h insn-codes.h insn-config.h insn-flags.h\n+\n+#\n+#\n+#\n+\n+all: cpp.exe cc1.exe float.h limits.h libgcc2.olb\n+\n+allplus: cc1plus.exe libgccplus.olb\n+\n+libplus: libgccplus.olb\n+\n+cc1.exe: $(CC1OBJS) $(ALLOCA) $(INDEPOBJS)\n+\t$(LINK)$(LFLAGS)/exe=$@ version.opt/opt,cc1-objs.opt/Opt,independent.opt/Opt$(ALLOCA)$(LIBS)\n+\n+cpp.exe: $(CCCPOBJS) $(ALLOCA)\n+\t$(LINK)$(LFLAGS)/exe=$@ $(CCCPOBJS),version.opt/opt$(ALLOCA)$(LIBS)\n+\n+cc1plus.exe: $(CC1PLUSOBJS) $(ALLOCA) $(INDEPOBJS)\n+\t$(LINK)$(LFLAGS)/exe=$@ version.opt/opt,cc1plus-objs.opt/Opt,independent.opt/Opt$(ALLOCA)$(LIBS)\n+\n+gcc.exe: gcc.obj version.obj choose-temp.obj pexecute.obj prefix.obj obstack.obj\n+\t$(LINK)$(LFLAGS)/exe=$@ $^$(ALLOCA)$(LIBS)\n+        \n+install: cpp.exe cc1.exe gcc.exe libgcc2.olb\n+\t$(CP) $^ GNU_CC_LIBRARY\n+\n+installplus: cc1plus.exe libgccplus.olb\n+\t$(CP) $^ GNU_CC_LIBRARY\n+\n+float.h: enquire.exe\n+\tmcr $(PWD)enquire.exe -f > $@\n+\n+limits.h: enquire.exe\n+\tmcr $(PWD)enquire.exe -l > $@\n+\n+enquire.exe: enquire.obj\n+\t$(LINK)$(LFLAGS)/exe=$@ enquire.obj$(ALLOCA)$(LIBS)\n+\n+libgcc2.olb:\n+\t$$ @make-l2\n+\n+libgccplus.olb: $(CXX_LIB2FUNCS)\n+\tlib/create libgccplus $(CXX_LIB2FUNCS)\n+\n+bi-arity.exe: bi-arity.obj,$(BIOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+bc-arity.h: bi-arity.exe bytecode.def\n+\tmcr $(PWD)bi-arity.exe < bytecode.def > $@\n+\n+bi-opcode.exe: bi-opcode.obj,$(BIOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+bc-opcode.h: bi-opcode.exe bytecode.def\n+\tmcr $(PWD)bi-opcode.exe < bytecode.def > $@\n+\n+bi-opname.exe: bi-opname.obj,$(BIOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+bc-opname.h: bi-opname.exe bytecode.def\n+\tmcr $(PWD)bi-opname.exe < bytecode.def > $@\n+\n+genattr.exe: genattr.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-attr.h: genattr.exe $(MDFILE)\n+\tmcr $(PWD)genattr.exe $(MDFILE) > $@\n+\n+genflags.exe: genflags.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-flags.h: genflags.exe $(MDFILE)\n+\tmcr $(PWD)genflags.exe $(MDFILE) > $@\n+\n+gencodes.exe: gencodes.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-codes.h: gencodes.exe $(MDFILE)\n+\tmcr $(PWD)gencodes.exe $(MDFILE) > $@\n+\n+genconfig.exe: genconfig.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-config.h: genconfig.exe $(MDFILE)\n+\tmcr $(PWD)genconfig.exe $(MDFILE) > $@\n+\n+genpeep.exe: genpeep.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-peep.c: genpeep.exe $(MDFILE)\n+\tmcr $(PWD)genpeep.exe $(MDFILE) > $@\n+\n+genopinit.exe: genopinit.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-opinit.c: genopinit.exe $(MDFILE)\n+\tmcr $(PWD)genopinit.exe $(MDFILE) > $@\n+\n+genrecog.exe: genrecog.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-recog.c: genrecog.exe $(MDFILE)\n+\tmcr $(PWD)genrecog.exe $(MDFILE) > $@\n+\n+genextract.exe: genextract.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-extract.c: genextract.exe $(MDFILE)\n+\tmcr $(PWD)genextract.exe $(MDFILE) > $@\n+\n+genoutput.exe: genoutput.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-output.c: genoutput.exe $(MDFILE)\n+\tmcr $(PWD)genoutput.exe $(MDFILE) > $@\n+\n+genemit.exe: genemit.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-emit.c: genemit.exe $(MDFILE)\n+\tmcr $(PWD)genemit.exe $(MDFILE) > $@\n+\n+genattrtab.exe: genattrtab.obj,rtlanal.obj,$(GENOBJS)$(ALLOCA)\n+\t$(LINK) $(LFLAGS)/exe=$@ $^$(LIBS)\n+\n+insn-attrtab.c: genattrtab.exe $(MDFILE)\n+\tmcr $(PWD)genattrtab.exe $(MDFILE) > $@\n+\n+cccp.obj: cccp.c config.h\n+aux-output.obj: aux-output.c insn-attr.h insn-flags.h insn-config.h\n+bc-emit.obj: bc-emit.c bc-arity.h bc-opcode.h\n+bc-optab.obj: bc-optab.c bc-opcode.h\n+bi-parser.obj: bi-parser.c bi-parser.y\n+caller-save.obj: caller-save.c insn-config.h\n+calls.obj: calls.c insn-flags.h\n+combine.obj: combine.c insn-attr.h insn-flags.h insn-codes.h insn-config.h\n+cse.obj: cse.c insn-config.h\n+c-decl.obj: c-decl.c expr.h integrate.h insn-codes.h insn-config.h\n+c-typeck.obj: c-typeck.c\n+dbxout.obj: dbxout.c insn-config.h\n+dwarfout.obj: dwarfout.c insn-config.h\n+dwarf2out.obj: dwarf2out.c insn-config.h\n+emit-rtl.obj: emit-rtl.c bc-opcode.h bc-opname.h insn-config.h\n+except.obj: except.c insn-flags.h insn-codes.h insn-config.h\n+explow.obj: explow.c insn-flags.h insn-codes.h insn-config.h\n+expmed.obj: expmed.c insn-flags.h insn-codes.h insn-config.h\n+expr.obj: expr.c bc-opcode.h insn-flags.h insn-config.h\n+final.obj: final.c tm.h insn-attr.h insn-flags.h insn-codes.h insn-config.h\n+flow.obj: flow.c insn-config.h\n+function.obj: bc-opcode.h function.c insn-flags.h insn-codes.h insn-config.h insn-codes.h insn-config.h\n+genattrtab.obj: genattrtab.c insn-config.h\n+genextract.obj: genextract.c insn-config.h\n+global.obj: global.c insn-config.h\n+integrate.obj: integrate.c integrate.h insn-flags.h insn-config.h\n+jump.obj: jump.c insn-flags.h insn-config.h\n+local-alloc.obj: local-alloc.c insn-config.h\n+loop.obj: loop.c insn-flags.h insn-config.h\n+optabs.obj: optabs.c insn-flags.h insn-codes.h insn-config.h\n+print-rtl.obj: print-rtl.c\n+profile.obj: profile.c insn-flags.h insn-config.h\n+recog.obj: recog.c insn-attr.h insn-flags.h insn-codes.h insn-config.h\n+regclass.obj: regclass.c insn-config.h\n+reg-stack.obj: reg-stack.c insn-config.h\n+reload.obj: reload.c insn-codes.h insn-config.h\n+reload1.obj: reload1.c insn-flags.h insn-codes.h insn-config.h\n+reorg.obj: reorg.c insn-attr.h insn-flags.h insn-config.h\n+sched.obj: sched.c insn-attr.h insn-config.h\n+haifa-sched.obj: haifa-sched.c insn-attr.h insn-config.h\n+stmt.obj: stmt.c bc-opcode.h insn-flags.h insn-codes.h insn-config.h\n+stor-layout.obj: stor-layout.c\n+stupid.obj: stupid.c\n+toplev.obj: toplev.c bc-opcode.h insn-attr.h insn-config.h\n+unroll.obj: unroll.c insn-config.h\n+\n+insn-attrtab.obj: insn-attrtab.c insn-attr.h insn-config.h\n+insn-output.obj: insn-output.c insn-attr.h insn-flags.h insn-codes.h\n+insn-emit.obj: insn-emit.c insn-flags.h insn-codes.h insn-config.h\n+insn-opinit.obj: insn-opinit.c insn-flags.h insn-codes.h insn-config.h\n+insn-output.obj: insn-config.h\n+insn-recog.obj: insn-config.h\n+\n+varasm.obj: varasm.c tm.h\n+toplev.obj: toplev.c tm.h\n+\n+cexp.c: cexp.y\n+\t$(BISON) $(BISON_FLAGS)/output=$@ $<\n+bi-parser.c: bi-parser.y\n+\t$(BISON) $(BISON_FLAGS)/output=$@ $<\n+c-parse.c: c-parse.y\n+\t$(BISON) $(BISON_FLAGS)/output=$@ $<\n+[.cp]parse.c: [.cp]parse.y\n+\t$(BISON) $(BISON_FLAGS)/output=$@ $<\n+[.cp]parse.h: [.cp]parse.c\n+\t@$(ECHO) \"Must copy YYEMPTY from [.cp]parse.c to [.cp]parse.h\"\n+\t$$ stop\n+aux-output.c: [.config.$(ARCH)]$(ARCH).c\n+\tcopy $< $@\n+\n+expr.h: insn-codes.h\n+reload.h: insn-config.h\n+integrate.h: insn-config.h\n+\n+config.h:\n+\t$$ @vmsconfig\n+\n+cleancccp:\n+\t$$ purge\n+\t$(RM) cccp.obj;,cexp.obj;\n+\t$(RM) cpp.exe;\n+\n+cleanlib:\n+\t$$ purge\n+\t$(RM) libgcc2.olb;\n+\n+cleanlibplus:\n+\t$$ purge\n+\t$(RM) [.cp]tinfo.obj;\n+\t$(RM) [.cp]tinfo2.obj;\n+\t$(RM) [.cp]new.obj;\n+\t$(RM) [.cp]new1.obj;\n+\t$(RM) [.cp]new2.obj;\n+\t$(RM) [.cp]exception.obj;\n+\t$(RM) libgccplus.olb;\n+\n+clean:\n+\t$$ purge\n+\t$$ purge [.cp]\n+\t$(RM) *.obj;*\n+\t$(RM) [.cp]*.obj;*\n+\t$(RM) [.cp]parse.output;*\n+\t$(RM) *.cpp;*\n+\t$(RM) *.s;*\n+\t$(RM) *.rtl;*\n+\t$(RM) a.out;\n+\t$(RM) *.combine;\n+\t$(RM) *.cpp;\n+\t$(RM) *.cse;\n+\t$(RM) *.cse2;\n+\t$(RM) *.dbr;\n+\t$(RM) *.flow;\n+\t$(RM) *.greg;\n+\t$(RM) *.jump;\n+\t$(RM) *.jump2;\n+\t$(RM) *.loop;\n+\t$(RM) *.lreg;\n+\t$(RM) *.rtl;\n+\t$(RM) *.sched;\n+\t$(RM) *.sched2;\n+\t$(RM) *.map;\n+\t$(RM) bi-arity.exe;,bc-arity.h;\n+\t$(RM) bi-opcode.exe;,bc-opcode.h;\n+\t$(RM) bi-opname.exe;,bc-opname.h;\n+\t$(RM) genattr.exe;,insn-attr.h;\n+\t$(RM) genflags.exe;,insn-flags.h;\n+\t$(RM) gencodes.exe;,insn-codes.h;\n+\t$(RM) genconfig.exe;,insn-config.h;\n+\t$(RM) genpeep.exe;,insn-peep.c;\n+\t$(RM) genopinit.exe;,insn-opinit.c;\n+\t$(RM) genrecog.exe;,insn-recog.c;\n+\t$(RM) genextract.exe;,insn-extract.c;\n+\t$(RM) genoutput.exe;,insn-output.c;\n+\t$(RM) genemit.exe;,insn-emit.c;\n+\t$(RM) genattrtab.exe;,insn-attrtab.c;\n+\t$(RM) cc1.exe;\n+\t$(RM) cpp.exe;\n+\t$(RM) cc1plus.exe;\n+\t$(RM) libgcc2.olb;\n+\t$(RM) libgccplus.olb;\n+\t$(RM) enquire.exe;,float.h;,limits.h;\n+#\n+# clean everything axpconfig.com creates\n+#\n+distclean: clean cleancccp\n+\tpurge [...]\n+\t$(RM) config.h;\n+\t$(RM) tconfig.h;\n+\t$(RM) hconfig.h;\n+\t$(RM) tm.h;\n+\t$(RM) options.h;\n+\t$(RM) specs.h;\n+\t$(RM) aux-output.c;\n+\n+[.cp]call.obj: [.cp]call.c\n+[.cp]decl2.obj: [.cp]decl2.c\n+[.cp]except.obj: [.cp]except.c insn-codes.h insn-flags.h\n+[.cp]pt.obj: [.cp]pt.c\n+[.cp]spew.obj: [.cp]spew.c\n+[.cp]xref.obj: [.cp]xref.c\n+[.cp]class.obj: [.cp]class.c\n+[.cp]expr.obj: [.cp]expr.c insn-codes.h\n+[.cp]lex.obj: [.cp]lex.c [.cp]parse.h\n+[.cp]ptree.obj: [.cp]ptree.c\n+[.cp]tree.obj: [.cp]tree.c\n+[.cp]cvt.obj: [.cp]cvt.c\n+[.cp]errfn.obj: [.cp]errfn.c\n+[.cp]rtti.obj: [.cp]rtti.c\n+[.cp]method.obj: [.cp]method.c insn-codes.h\n+[.cp]search.obj: [.cp]search.c\n+[.cp]typeck.obj: [.cp]typeck.c\n+[.cp]decl.obj: [.cp]decl.c\n+[.cp]error.obj: [.cp]error.c\n+[.cp]friend.obj: [.cp]friend.c\n+[.cp]init.obj: [.cp]init.c\n+[.cp]parse.obj: [.cp]parse.c\n+\t$(CC) $(CFLAGS) $(CINCL_CP) $^/obj=$@\n+[.cp]sig.obj: [.cp]sig.c\n+[.cp]typeck2.obj: [.cp]typeck2.c\n+[.cp]repo.obj: [.cp]repo.c\n+[.cp]input.obj: [.cp]input.c\n+\t$(TOUCH) $@\n+# g++ library\n+[.cp]tinfo.obj: [.cp]tinfo.cc\n+[.cp]tinfo2.obj: [.cp]tinfo2.cc\n+[.cp]new.obj: [.cp]new.cc\n+[.cp]new1.obj: [.cp]new1.cc\n+[.cp]new2.obj: [.cp]new2.cc\n+[.cp]exception.obj: [.cp]exception.cc\n+\n+#EOF"}]}