{"sha": "b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmNWIzODA0MmY2YTg3NzIyMzdkMzdjZGYyMGZjMTM5ZWQwZjhmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-10T16:31:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-10T16:31:13Z"}, "message": "[AArch64] Fix reversed vcond_mask invocation in aarch64_evpc_sel\n\naarch64_evpc_sel (new in GCC 10) got the true and false vectors\nthe wrong way round, leading to execution failures with fixed-length\n128-bit SVE.\n\nNow that the ACLE types are in trunk, it's much easier to match\nthe exact asm sequence for a permute.\n\n2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_evpc_sel): Fix gen_vcond_mask\n\tinvocation.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/sel_1.c: Use SVE types for the arguments and\n\treturn values.  Use check-function-bodies instead of scan-assembler.\n\t* gcc.target/aarch64/sve/sel_2.c: Likewise\n\t* gcc.target/aarch64/sve/sel_3.c: Likewise.\n\nFrom-SVN: r280121", "tree": {"sha": "9f72ef29568529b357b87403c90cfd27e366edef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f72ef29568529b357b87403c90cfd27e366edef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a33f87ffb921ba469a0c25d22e6b225be38d084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a33f87ffb921ba469a0c25d22e6b225be38d084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a33f87ffb921ba469a0c25d22e6b225be38d084"}], "stats": {"total": 164, "additions": 116, "deletions": 48}, "files": [{"sha": "ab5131a73379ea83ed136b39a76329feeaa1ccaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -1,3 +1,8 @@\n+2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_evpc_sel): Fix gen_vcond_mask\n+\tinvocation.\n+\n 2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "190380b9a2eb983d0d4e06b7e9fa6e9f8e9986fb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -19449,6 +19449,7 @@ aarch64_evpc_sel (struct expand_vec_perm_d *d)\n \n   machine_mode pred_mode = aarch64_sve_pred_mode (vmode);\n \n+  /* Build a predicate that is true when op0 elements should be used.  */\n   rtx_vector_builder builder (pred_mode, n_patterns, 2);\n   for (int i = 0; i < n_patterns * 2; i++)\n     {\n@@ -19459,7 +19460,8 @@ aarch64_evpc_sel (struct expand_vec_perm_d *d)\n \n   rtx const_vec = builder.build ();\n   rtx pred = force_reg (pred_mode, const_vec);\n-  emit_insn (gen_vcond_mask (vmode, vmode, d->target, d->op1, d->op0, pred));\n+  /* TARGET = PRED ? OP0 : OP1.  */\n+  emit_insn (gen_vcond_mask (vmode, vmode, d->target, d->op0, d->op1, pred));\n   return true;\n }\n "}, {"sha": "8dc47ea6c93fb4fc6b4b988da987a8e52e46aa77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/sel_1.c: Use SVE types for the arguments and\n+\treturn values.  Use check-function-bodies instead of scan-assembler.\n+\t* gcc.target/aarch64/sve/sel_2.c: Likewise\n+\t* gcc.target/aarch64/sve/sel_3.c: Likewise.\n+\n 2020-01-10  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.dg/ipa/ipa-clone-3.c: Replace struct initializer with"}, {"sha": "9c581c52fde77efb5365a6bec25e1a5e02ad9770", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_1.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_1.c?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include <stdint.h>\n \n@@ -13,15 +14,14 @@ typedef int8_t vnx16qi __attribute__((vector_size (32)));\n \n #define INDEX_32 vnx16qi\n \n-#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n-type permute_##type (type x, type y)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+/*\n+** permute:\n+**\tptrue\t(p[0-7])\\.h, vl16\n+**\tsel\tz0\\.b, \\1, z0\\.b, z1\\.b\n+**\tret\n+*/\n+__SVInt8_t\n+permute (__SVInt8_t x, __SVInt8_t y)\n+{\n+  return __builtin_shuffle ((vnx16qi) x, (vnx16qi) y, (vnx16qi) MASK_32);\n }\n-\n-PERMUTE(vnx16qi, 32)\n-\n-/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n-\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.h, vl16\\n} 1 } } */"}, {"sha": "60aaa878534b2d6fbbdfe67f24bf34707e8da38f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_2.c", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_2.c?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include <stdint.h>\n \n typedef int8_t vnx16qi __attribute__((vector_size (32)));\n typedef int16_t vnx8hi __attribute__((vector_size (32)));\n-typedef int32_t vnx4si __attribute__((vector_size (32)));\n \n typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n-typedef float vnx4sf __attribute__((vector_size (32)));\n \n /* Predicate vector: 1 0 0 0 ... */\n \n@@ -20,22 +19,39 @@ typedef float vnx4sf __attribute__((vector_size (32)));\n \n #define MASK_16\t\t{0, 17, 2, 19, 4, 21, 6, 23, 8, 25, 10, 27, 12, 29, 14, 31}\n \n-#define INDEX_32 vnx16qi\n-#define INDEX_16 vnx8hi\n-\n-#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n-type permute_##type (type x, type y)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+/*\n+** permute_vnx16qi:\n+**\tptrue\t(p[0-7])\\.s, vl8\n+**\tsel\tz0\\.b, \\1, z0\\.b, z1\\.b\n+**\tret\n+*/\n+__SVInt8_t\n+permute_vnx16qi (__SVInt8_t x, __SVInt8_t y)\n+{\n+  return __builtin_shuffle ((vnx16qi) x, (vnx16qi) y, (vnx16qi) MASK_32);\n }\n \n-PERMUTE(vnx16qi, 32)\n-PERMUTE(vnx8hi, 16)\n-PERMUTE(vnx8hf, 16)\n-\n-/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n-\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/*\n+** permute_vnx8hi:\n+**\tptrue\t(p[0-7])\\.s, vl8\n+**\tsel\tz0\\.h, \\1, z0\\.h, z1\\.h\n+**\tret\n+*/\n+__SVInt16_t\n+permute_vnx8hi (__SVInt16_t x, __SVInt16_t y)\n+{\n+  return __builtin_shuffle ((vnx8hi) x, (vnx8hi) y, (vnx8hi) MASK_16);\n+}\n \n-/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.s, vl8\\n} 3 } } */\n+/*\n+** permute_vnx8hf:\n+**\tptrue\t(p[0-7])\\.s, vl8\n+**\tsel\tz0\\.h, \\1, z0\\.h, z1\\.h\n+**\tret\n+*/\n+__SVFloat16_t\n+permute_vnx8hf (__SVFloat16_t x, __SVFloat16_t y)\n+{\n+  return (__SVFloat16_t) __builtin_shuffle ((vnx8hf) x, (vnx8hf) y,\n+\t\t\t\t\t    (vnx8hi) MASK_16);\n+}"}, {"sha": "0de1fae6d038f8939cadb40f4828e2f58bc5265d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sel_3.c", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f5b38042f6a8772237d37cdf20fc139ed0f8fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsel_3.c?ref=b2f5b38042f6a8772237d37cdf20fc139ed0f8fe", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include <stdint.h>\n \n@@ -25,26 +26,63 @@ typedef float vnx4sf __attribute__((vector_size (32)));\n \n #define MASK_8\t\t{ 0, 9, 2, 11, 4, 13, 6, 15 }\n \n-#define INDEX_32 vnx16qi\n-#define INDEX_16 vnx8hi\n-#define INDEX_8 vnx4si\n-\n-#define PERMUTE(type, nunits)\t\t\t\t\t\t\\\n-type permute_##type (type x, type y)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  return __builtin_shuffle (x, y, (INDEX_##nunits) MASK_##nunits);\t\\\n+/*\n+** permute_vnx16qi:\n+**\tptrue\t(p[0-7])\\.d, vl4\n+**\tsel\tz0\\.b, \\1, z0\\.b, z1\\.b\n+**\tret\n+*/\n+__SVInt8_t\n+permute_vnx16qi (__SVInt8_t x, __SVInt8_t y)\n+{\n+  return __builtin_shuffle ((vnx16qi) x, (vnx16qi) y, (vnx16qi) MASK_32);\n }\n \n-PERMUTE(vnx16qi, 32)\n-PERMUTE(vnx8hi, 16)\n-PERMUTE(vnx4si, 8)\n-PERMUTE(vnx8hf, 16)\n-PERMUTE(vnx4sf, 8)\n+/*\n+** permute_vnx8hi:\n+**\tptrue\t(p[0-7])\\.d, vl4\n+**\tsel\tz0\\.h, \\1, z0\\.h, z1\\.h\n+**\tret\n+*/\n+__SVInt16_t\n+permute_vnx8hi (__SVInt16_t x, __SVInt16_t y)\n+{\n+  return __builtin_shuffle ((vnx8hi) x, (vnx8hi) y, (vnx8hi) MASK_16);\n+}\n \n-/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+/*\n+** permute_vnx4si:\n+**\tptrue\t(p[0-7])\\.d, vl4\n+**\tsel\tz0\\.s, \\1, z0\\.s, z1\\.s\n+**\tret\n+*/\n+__SVInt32_t\n+permute_vnx4si (__SVInt32_t x, __SVInt32_t y)\n+{\n+  return __builtin_shuffle ((vnx4si) x, (vnx4si) y, (vnx4si) MASK_8);\n+}\n \n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-9]+, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-9]+, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-9]+, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/*\n+** permute_vnx8hf:\n+**\tptrue\t(p[0-7])\\.d, vl4\n+**\tsel\tz0\\.h, \\1, z0\\.h, z1\\.h\n+**\tret\n+*/\n+__SVFloat16_t\n+permute_vnx8hf (__SVFloat16_t x, __SVFloat16_t y)\n+{\n+  return (__SVFloat16_t) __builtin_shuffle ((vnx8hf) x, (vnx8hf) y,\n+\t\t\t\t\t    (vnx8hi) MASK_16);\n+}\n \n-/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-9]+\\.d, vl4\\n} 5 } } */\n+/*\n+** permute_vnx4sf:\n+**\tptrue\t(p[0-7])\\.d, vl4\n+**\tsel\tz0\\.s, \\1, z0\\.s, z1\\.s\n+**\tret\n+*/\n+__SVFloat32_t\n+permute_vnx4sf (__SVFloat16_t x, __SVFloat16_t y)\n+{\n+  return __builtin_shuffle ((vnx4sf) x, (vnx4sf) y, (vnx4si) MASK_8);\n+}"}]}