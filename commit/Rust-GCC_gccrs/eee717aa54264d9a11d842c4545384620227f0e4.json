{"sha": "eee717aa54264d9a11d842c4545384620227f0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlNzE3YWE1NDI2NGQ5YTExZDg0MmM0NTQ1Mzg0NjIwMjI3ZjBlNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-28T16:14:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-28T16:14:44Z"}, "message": "tree-flow.h (subvar_t): Make it a VEC.\n\n2007-10-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (subvar_t): Make it a VEC.\n\t(struct subvar): Remove.\n\t(struct var_ann_d): Use VEC(tree,gc) to store subvars.\n\t* tree-flow-inline.h (get_subvar_at): Adjust iterators over\n\tvariable subvars.\n\t* tree-into-ssa.c (mark_sym_for_renaming): Likewise.\n\t* tree-nrv.c (dest_safe_for_nrv_p): Likewise.\n\t* tree-ssa-alias.c (mark_aliases_call_clobbered): Likewise.\n\t(set_initial_properties): Likewise.\n\t(setup_pointers_and_addressables): Likewise.\n\t(new_type_alias): Likewise.\n\t(create_overlap_variables_for): Likewise.\n\t* tree-dfa.c (dump_subvars_for): Likewise.\n\t* tree-ssa-operands.c (add_vars_for_offset): Likewise.\n\t(get_expr_operands): Likewise.\n\t(add_to_addressable_set): Likewise.\n\t* tree-ssa-structalias.c (set_uids_in_ptset): Likewise.\n\n\t* gcc.dg/tree-ssa/alias-15.c: Adjust pattern.\n\nFrom-SVN: r129699", "tree": {"sha": "ad9578908d462a27a5795ed5dbda0412a831ec1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad9578908d462a27a5795ed5dbda0412a831ec1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eee717aa54264d9a11d842c4545384620227f0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee717aa54264d9a11d842c4545384620227f0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee717aa54264d9a11d842c4545384620227f0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee717aa54264d9a11d842c4545384620227f0e4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e85b4fa7b56003e26a98c54247d79365b740bb6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85b4fa7b56003e26a98c54247d79365b740bb6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85b4fa7b56003e26a98c54247d79365b740bb6d"}], "stats": {"total": 203, "additions": 120, "deletions": 83}, "files": [{"sha": "3064b8bd80bbcb0e567ad033c2a527441365efdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -1,3 +1,23 @@\n+2007-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (subvar_t): Make it a VEC.\n+\t(struct subvar): Remove.\n+\t(struct var_ann_d): Use VEC(tree,gc) to store subvars.\n+\t* tree-flow-inline.h (get_subvar_at): Adjust iterators over\n+\tvariable subvars.\n+\t* tree-into-ssa.c (mark_sym_for_renaming): Likewise.\n+\t* tree-nrv.c (dest_safe_for_nrv_p): Likewise.\n+\t* tree-ssa-alias.c (mark_aliases_call_clobbered): Likewise.\n+\t(set_initial_properties): Likewise.\n+\t(setup_pointers_and_addressables): Likewise.\n+\t(new_type_alias): Likewise.\n+\t(create_overlap_variables_for): Likewise.\n+\t* tree-dfa.c (dump_subvars_for): Likewise.\n+\t* tree-ssa-operands.c (add_vars_for_offset): Likewise.\n+\t(get_expr_operands): Likewise.\n+\t(add_to_addressable_set): Likewise.\n+\t* tree-ssa-structalias.c (set_uids_in_ptset): Likewise.\n+\n 2007-10-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/33920"}, {"sha": "d3305b8c7d578d44c088e2f085a268252679e189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -1,3 +1,7 @@\n+2007-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/alias-15.c: Adjust pattern.\n+\n 2007-10-28  Martin Michlmayr  <tbm@cyrius.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "4155b030c88084a8f6d882c4e592da0a34004230", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-15.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -15,6 +15,6 @@ int test2(void)\n   return p->b[3] - m.b.b[3];\n }\n \n-/* { dg-final { scan-tree-dump \"SFT.1 created for var m offset 128\" \"salias\" } } */\n-/* { dg-final { scan-tree-dump-times \"VUSE <SFT.1_\" 2 \"salias\" } } */\n+/* { dg-final { scan-tree-dump \"SFT.5 created for var m offset 128\" \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VUSE <SFT.5_\" 2 \"salias\" } } */\n /* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "1ec0264a5fa0d11f8fb8050f29d53b7556fcaf81", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -276,15 +276,17 @@ void\n dump_subvars_for (FILE *file, tree var)\n {\n   subvar_t sv = get_subvars_for_var (var);\n+  tree subvar;\n+  unsigned int i;\n \n   if (!sv)\n     return;\n \n   fprintf (file, \"{ \");\n \n-  for (; sv; sv = sv->next)\n+  for (i = 0; VEC_iterate (tree, sv, i, subvar); ++i)\n     {\n-      print_generic_expr (file, sv->var, dump_flags);\n+      print_generic_expr (file, subvar, dump_flags);\n       fprintf (file, \" \");\n     }\n "}, {"sha": "b87f3d2fc843f9257b76974474d4546d65712772", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -1609,11 +1609,14 @@ get_subvars_for_var (tree var)\n static inline tree\n get_subvar_at (tree var, unsigned HOST_WIDE_INT offset)\n {\n-  subvar_t sv;\n-\n-  for (sv = get_subvars_for_var (var); sv; sv = sv->next)\n-    if (SFT_OFFSET (sv->var) == offset)\n-      return sv->var;\n+  subvar_t sv = get_subvars_for_var (var);\n+  unsigned int i;\n+  tree subvar;\n+\n+  /* ???  Binary search would be possible here.  */\n+  for (i = 0; VEC_iterate (tree, sv, i, subvar); ++i)\n+    if (SFT_OFFSET (subvar) == offset)\n+      return subvar;\n \n   return NULL_TREE;\n }"}, {"sha": "6e7b88b672bee2dcff39b9c6ecc45b74f1b59b15", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -308,18 +308,7 @@ enum noalias_state {\n };\n \n \n-struct subvar;\n-typedef struct subvar *subvar_t;\n-\n-/* This structure represents a fake sub-variable for a structure field.  */\n-struct subvar GTY(())\n-{\n-  /* Fake variable.  */\n-  tree var;\n-\n-  /* Next subvar for this structure.  */\n-  subvar_t next;\n-};\n+typedef VEC(tree,gc) *subvar_t;\n \n struct var_ann_d GTY(())\n {\n@@ -384,9 +373,9 @@ struct var_ann_d GTY(())\n      current version of this variable (an SSA_NAME).  */\n   tree current_def;\n \n-  /* If this variable is a structure, this fields holds a list of\n-     symbols representing each of the fields of the structure.  */\n-  subvar_t subvars;\n+  /* If this variable is a structure, this fields holds an array\n+     of symbols representing each of the fields of the structure.  */\n+  VEC(tree,gc) *subvars;\n \n   /* Mask of values saying the reasons why this variable has escaped\n      the function.  */"}, {"sha": "c55f7363697b65edf14e25a769c5a7349e2ee471", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -2793,9 +2793,11 @@ mark_sym_for_renaming (tree sym)\n     subvar_t svars;\n     if (var_can_have_subvars (sym) && (svars = get_subvars_for_var (sym)))\n       {\n-\tsubvar_t sv;\n-\tfor (sv = svars; sv; sv = sv->next)\n-\t  mark_sym_for_renaming (sv->var);\n+        unsigned int i;\n+\ttree subvar;\n+\n+\tfor (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n+\t  mark_sym_for_renaming (subvar);\n       }\n   }\n "}, {"sha": "ef5ee67a2f3119c419c20833dabc631bcd793e34", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -249,7 +249,9 @@ struct tree_opt_pass pass_nrv =\n static bool\n dest_safe_for_nrv_p (tree dest)\n {\n-  subvar_t subvar;\n+  subvar_t sv;\n+  unsigned int i;\n+  tree subvar;\n \n   while (handled_component_p (dest))\n     dest = TREE_OPERAND (dest, 0);\n@@ -262,9 +264,12 @@ dest_safe_for_nrv_p (tree dest)\n \n   if (is_call_clobbered (dest))\n     return false;\n-  for (subvar = get_subvars_for_var (dest); subvar; subvar = subvar->next)\n-    if (is_call_clobbered (subvar->var))\n+\n+  sv = get_subvars_for_var (dest);\n+  for (i = 0; VEC_iterate (tree, sv, i, subvar); ++i)\n+    if (is_call_clobbered (subvar))\n       return false;\n+\n   return true;\n }\n "}, {"sha": "dc40c2ef398fa37ce5930a9fe64bc506a65d0942", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -422,11 +422,13 @@ mark_aliases_call_clobbered (tree tag, VEC (tree, heap) **worklist,\n     {\n       EXECUTE_IF_SET_IN_BITMAP (queued, 0, i, bi)\n \t{\n-\t  subvar_t svars;\n-\t  svars = get_subvars_for_var (referenced_var (i));\n-\t  for (; svars; svars = svars->next)\n-\t    if (!unmodifiable_var_p (svars->var))\n-\t       mark_call_clobbered (svars->var, ta->escape_mask);\n+\t  subvar_t svars = get_subvars_for_var (referenced_var (i));\n+\t  unsigned int i;\n+\t  tree subvar;\n+\n+\t  for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n+\t    if (!unmodifiable_var_p (subvar))\n+\t       mark_call_clobbered (subvar, ta->escape_mask);\n \t}\n       bitmap_clear (queued);\n     }\n@@ -600,11 +602,13 @@ set_initial_properties (struct alias_info *ai)\n \t\t{\n \t\t  EXECUTE_IF_SET_IN_BITMAP (queued, 0, j, bi)\n \t\t    {\n-\t\t      subvar_t svars;\n-\t\t      svars = get_subvars_for_var (referenced_var (j));\n-\t\t      for (; svars; svars = svars->next)\n-\t\t\tif (!unmodifiable_var_p (svars->var))\n-\t\t\t  mark_call_clobbered (svars->var, pi->escape_mask);\n+\t\t      subvar_t svars = get_subvars_for_var (referenced_var (j));\n+\t\t      unsigned int i;\n+\t\t      tree subvar;\n+\n+\t\t      for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n+\t\t\tif (!unmodifiable_var_p (subvar))\n+\t\t\t  mark_call_clobbered (subvar, pi->escape_mask);\n \t\t    }\n \t\t  bitmap_clear (queued);\n \t\t}\n@@ -2644,14 +2648,15 @@ setup_pointers_and_addressables (struct alias_info *ai)\n \t      if (var_can_have_subvars (var)\n \t\t  && (svars = get_subvars_for_var (var)))\n \t\t{\n-\t\t  subvar_t sv;\n+\t\t  unsigned int i;\n+\t\t  tree subvar;\n \n-\t\t  for (sv = svars; sv; sv = sv->next)\n+\t\t  for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n \t\t    {\t      \n \t\t      if (bitmap_bit_p (gimple_addressable_vars (cfun),\n-\t\t\t\t\tDECL_UID (sv->var)))\n+\t\t\t\t\tDECL_UID (subvar)))\n \t\t\tokay_to_mark = false;\n-\t\t      mark_sym_for_renaming (sv->var);\n+\t\t      mark_sym_for_renaming (subvar);\n \t\t    }\n \t\t}\n \n@@ -3574,8 +3579,9 @@ new_type_alias (tree ptr, tree var, tree expr)\n   HOST_WIDE_INT offset, size, maxsize;\n   tree ref;\n   VEC (tree, heap) *overlaps = NULL;\n-  subvar_t sv;\n-  unsigned int len;\n+  unsigned int len, i;\n+  tree subvar;\n+\n \n   gcc_assert (symbol_mem_tag (ptr) == NULL_TREE);\n   gcc_assert (!MTAG_P (var));\n@@ -3591,12 +3597,12 @@ new_type_alias (tree ptr, tree var, tree expr)\n   if (var_can_have_subvars (ref)\n       && (svars = get_subvars_for_var (ref)))\n     {\n-      for (sv = svars; sv; sv = sv->next)\n+      for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n \t{\n           bool exact;\n \n-          if (overlap_subvar (offset, maxsize, sv->var, &exact))\n-            VEC_safe_push (tree, heap, overlaps, sv->var);\n+          if (overlap_subvar (offset, maxsize, subvar, &exact))\n+            VEC_safe_push (tree, heap, overlaps, subvar);\n         }\n       gcc_assert (overlaps != NULL);\n     }\n@@ -3610,8 +3616,8 @@ new_type_alias (tree ptr, tree var, tree expr)\n \t On mem-ssa branch, the scanning for virtual operands have been\n \t split from the rest of tree-ssa-operands, so it should be much\n \t easier to fix this problem correctly once mem-ssa is merged.  */\n-      for (sv = svars; sv; sv = sv->next)\n-\tVEC_safe_push (tree, heap, overlaps, sv->var);\n+      for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n+\tVEC_safe_push (tree, heap, overlaps, subvar);\n \n       gcc_assert (overlaps != NULL);\n     }\n@@ -3873,15 +3879,14 @@ create_overlap_variables_for (tree var)\n       \n       /* Otherwise, create the variables.  */\n       subvars = lookup_subvars_for_var (var);\n-      \n+      *subvars = VEC_alloc (tree, gc, VEC_length (fieldoff_s, fieldstack));\n+ \n       sort_fieldstack (fieldstack);\n \n-      for (i = VEC_length (fieldoff_s, fieldstack);\n-\t   VEC_iterate (fieldoff_s, fieldstack, --i, fo);)\n+      for (i = 0; VEC_iterate (fieldoff_s, fieldstack, i, fo); ++i)\n \t{\n-\t  subvar_t sv;\n \t  HOST_WIDE_INT fosize;\n-\t  tree currfotype;\n+\t  tree currfotype, subvar;\n \n \t  fosize = TREE_INT_CST_LOW (fo->size);\n \t  currfotype = fo->type;\n@@ -3900,26 +3905,24 @@ create_overlap_variables_for (tree var)\n \t\t  && fosize == lastfosize\n \t\t  && currfotype == lastfotype))\n \t    continue;\n-\t  sv = GGC_NEW (struct subvar);\n-\t  sv->next = *subvars;\n-\t  sv->var =\n-\t    create_sft (var, fo->type, fo->offset, fosize, fo->alias_set);\n+\t  subvar = create_sft (var, fo->type, fo->offset,\n+\t\t\t       fosize, fo->alias_set);\n+\t  VEC_quick_push (tree, *subvars, subvar);\n \n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"structure field tag %s created for var %s\",\n-\t\t       get_name (sv->var), get_name (var));\n+\t\t       get_name (subvar), get_name (var));\n \t      fprintf (dump_file, \" offset \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t       SFT_OFFSET (sv->var));\n+\t\t       SFT_OFFSET (subvar));\n \t      fprintf (dump_file, \" size \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t       SFT_SIZE (sv->var));\n+\t\t       SFT_SIZE (subvar));\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  \n \t  lastfotype = currfotype;\n \t  lastfooffset = fo->offset;\n \t  lastfosize = fosize;\n-\t  *subvars = sv;\n \t}\n \n       /* Once we have created subvars, the original is no longer call"}, {"sha": "1c4299fffc0fcb4c49e61ae3b2f67f07f78658f3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -1421,20 +1421,23 @@ add_vars_for_offset (tree full_ref, tree var, HOST_WIDE_INT offset,\n     {      \n       bool added = false;\n       subvar_t sv = get_subvars_for_var (SFT_PARENT_VAR (var));\n-      for (; sv; sv = sv->next)\n+      unsigned int i;\n+      tree subvar;\n+\n+      for (i = 0; VEC_iterate (tree, sv, i, subvar); ++i)\n \t{\n \t  /* Once we hit the end of the parts that could touch,\n \t     stop looking.  */\n \t  if (size != -1\n-\t      && SFT_OFFSET (var) + offset + size <= SFT_OFFSET (sv->var))\n+\t      && SFT_OFFSET (var) + offset + size <= SFT_OFFSET (subvar))\n \t    break;\n-\t  if (overlap_subvar (SFT_OFFSET (var) + offset, size, sv->var, NULL))\n+\t  if (overlap_subvar (SFT_OFFSET (var) + offset, size, subvar, NULL))\n \t    {\n \t      added = true;\n \t      if (is_def)\n-\t\tappend_vdef (sv->var);\n+\t\tappend_vdef (subvar);\n \t      else\n-\t\tappend_vuse (sv->var);\n+\t\tappend_vuse (subvar);\n \t    }\n \t}\n       return added;\n@@ -2092,9 +2095,10 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \tif (var_can_have_subvars (expr)\n \t    && (svars = get_subvars_for_var (expr)))\n \t  {\n-\t    subvar_t sv;\n-\t    for (sv = svars; sv; sv = sv->next)\n-\t      add_stmt_operand (&sv->var, s_ann, flags);\n+\t    unsigned int i;\n+\t    tree subvar;\n+\t    for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n+\t      add_stmt_operand (&subvar, s_ann, flags);\n \t  }\n \telse\n \t  add_stmt_operand (expr_p, s_ann, flags);\n@@ -2137,18 +2141,19 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \tref = get_ref_base_and_extent (expr, &offset, &size, &maxsize);\n \tif (SSA_VAR_P (ref) && get_subvars_for_var (ref))\n \t  {\n-\t    subvar_t sv;\n \t    subvar_t svars = get_subvars_for_var (ref);\n+\t    unsigned int i;\n+\t    tree subvar;\n \n-\t    for (sv = svars; sv; sv = sv->next)\n+\t    for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n \t      {\n \t\tbool exact;\t\t\n \n-\t\tif (overlap_subvar (offset, maxsize, sv->var, &exact))\n+\t\tif (overlap_subvar (offset, maxsize, subvar, &exact))\n \t\t  {\n \t            int subvar_flags = flags;\n \t\t    none = false;\n-\t\t    add_stmt_operand (&sv->var, s_ann, subvar_flags);\n+\t\t    add_stmt_operand (&subvar, s_ann, subvar_flags);\n \t\t  }\n \t      }\n \n@@ -2710,11 +2715,12 @@ add_to_addressable_set (tree ref, bitmap *addresses_taken)\n       if (var_can_have_subvars (var)\n \t  && (svars = get_subvars_for_var (var)))\n \t{\n-\t  subvar_t sv;\n-\t  for (sv = svars; sv; sv = sv->next)\n+\t  unsigned int i;\n+\t  tree subvar;\n+\t  for (i = 0; VEC_iterate (tree, svars, i, subvar); ++i)\n \t    {\n-\t      bitmap_set_bit (*addresses_taken, DECL_UID (sv->var));\n-\t      TREE_ADDRESSABLE (sv->var) = 1;\n+\t      bitmap_set_bit (*addresses_taken, DECL_UID (subvar));\n+\t      TREE_ADDRESSABLE (subvar) = 1;\n \t    }\n \t}\n       else"}, {"sha": "02124992b5b94090a4004690187bed332919cb44", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee717aa54264d9a11d842c4545384620227f0e4/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=eee717aa54264d9a11d842c4545384620227f0e4", "patch": "@@ -4702,7 +4702,6 @@ set_uids_in_ptset (tree ptr, bitmap into, bitmap from, bool is_derefed,\n {\n   unsigned int i;\n   bitmap_iterator bi;\n-  subvar_t sv;\n   alias_set_type ptr_alias_set = get_alias_set (TREE_TYPE (ptr));\n \n   EXECUTE_IF_SET_IN_BITMAP (from, 0, i, bi)\n@@ -4717,10 +4716,14 @@ set_uids_in_ptset (tree ptr, bitmap into, bitmap from, bool is_derefed,\n \n       if (vi->has_union && get_subvars_for_var (vi->decl) != NULL)\n \t{\n+\t  unsigned int i;\n+\t  tree subvar;\n+\t  subvar_t sv = get_subvars_for_var (vi->decl);\n+\n \t  /* Variables containing unions may need to be converted to\n \t     their SFT's, because SFT's can have unions and we cannot.  */\n-\t  for (sv = get_subvars_for_var (vi->decl); sv; sv = sv->next)\n-\t    bitmap_set_bit (into, DECL_UID (sv->var));\n+\t  for (i = 0; VEC_iterate (tree, sv, i, subvar); ++i)\n+\t    bitmap_set_bit (into, DECL_UID (subvar));\n \t}\n       else if (TREE_CODE (vi->decl) == VAR_DECL\n \t       || TREE_CODE (vi->decl) == PARM_DECL"}]}