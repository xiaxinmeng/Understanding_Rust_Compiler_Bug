{"sha": "d7a160a45ea7ed09247788c708721c2813cf0007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhMTYwYTQ1ZWE3ZWQwOTI0Nzc4OGM3MDg3MjFjMjgxM2NmMDAwNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-23T09:05:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-23T09:05:11Z"}, "message": "re PR tree-optimization/23094 (store ccp, or store copy prop misses an optimization)\n\n2017-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/23094\n\t* tree-ssa-sccvn.c (vuse_ssa_val): Handle VN_TOP when we\n\tcome here from walking over backedges in the first iteration.\n\t(vn_reference_lookup_3): Skip clobbers that store the same value.\n\n\t* gcc.dg/tree-ssa/ssa-fre-61.c: New testcase.\n\nFrom-SVN: r255093", "tree": {"sha": "d8b5404eccbb222d1e6e5d2a067adec60e607835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b5404eccbb222d1e6e5d2a067adec60e607835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a160a45ea7ed09247788c708721c2813cf0007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a160a45ea7ed09247788c708721c2813cf0007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a160a45ea7ed09247788c708721c2813cf0007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a160a45ea7ed09247788c708721c2813cf0007/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9ec14d414a51c3461510f3cddfcafe11b35ee1"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "837fa3942184d99dc500e90ae7aa9ea6692810a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7a160a45ea7ed09247788c708721c2813cf0007", "patch": "@@ -1,3 +1,10 @@\n+2017-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/23094\n+\t* tree-ssa-sccvn.c (vuse_ssa_val): Handle VN_TOP when we\n+\tcome here from walking over backedges in the first iteration.\n+\t(vn_reference_lookup_3): Skip clobbers that store the same value.\n+\n 2017-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81403"}, {"sha": "ff35bcaf32f77224746e6e134f24267a36c5bcc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7a160a45ea7ed09247788c708721c2813cf0007", "patch": "@@ -1,3 +1,8 @@\n+2017-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/23094\n+\t* gcc.dg/tree-ssa/ssa-fre-61.c: New testcase.\n+\n 2017-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83089"}, {"sha": "a4d9a7194bf8a05b37b3612a5570b59de3b16a20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-61.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c?ref=d7a160a45ea7ed09247788c708721c2813cf0007", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+void link_error (void);\n+\n+void test1 (int *p, int *q)\n+{\n+  *p = 1;\n+  *q = 1;\n+  if (*p != 1)\n+    link_error ();\n+}\n+\n+void test2 (int *p, int *q, int t)\n+{\n+  *p = t;\n+  *q = t;\n+  if (*p != t)\n+    link_error ();\n+}\n+\n+void test3 (int *q, int *p)\n+{\n+  int tem = *p;\n+  *q = tem;\n+  if (*p != tem)\n+    link_error ();\n+}\n+\n+char a[4];\n+struct A { char a[4]; };\n+void test4 (struct A *p)\n+{\n+  a[0] = p->a[0];\n+  a[0] = p->a[0];\n+  a[0] = p->a[0];\n+}\n+\n+int main() { return 0; }\n+\n+/* { dg-final { scan-tree-dump-times \"Replaced \\\\\\*p\" 3 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced p_.\\\\(D\\\\)->\" 2 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Deleted redundant store a\\\\\\[0\\\\\\]\" 2 \"fre1\" } } */"}, {"sha": "d0ff30199e617b6967776dd4780b2a9851531001", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a160a45ea7ed09247788c708721c2813cf0007/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d7a160a45ea7ed09247788c708721c2813cf0007", "patch": "@@ -345,7 +345,12 @@ vuse_ssa_val (tree x)\n \n   do\n     {\n-      x = SSA_VAL (x);\n+      tree tem = SSA_VAL (x);\n+      /* stmt walking can walk over a backedge and reach code we didn't\n+\t value-number yet.  */\n+      if (tem == VN_TOP)\n+\treturn x;\n+      x = tem;\n     }\n   while (SSA_NAME_IN_FREE_LIST (x));\n \n@@ -1868,6 +1873,39 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t  ao_ref_init (&lhs_ref, lhs);\n \t  lhs_ref_ok = true;\n \t}\n+\n+      /* If we reach a clobbering statement try to skip it and see if\n+         we find a VN result with exactly the same value as the\n+\t possible clobber.  In this case we can ignore the clobber\n+\t and return the found value.\n+\t Note that we don't need to worry about partial overlapping\n+\t accesses as we then can use TBAA to disambiguate against the\n+\t clobbering statement when looking up a load (thus the\n+\t VN_WALKREWRITE guard).  */\n+      if (vn_walk_kind == VN_WALKREWRITE\n+\t  && is_gimple_reg_type (TREE_TYPE (lhs))\n+\t  && types_compatible_p (TREE_TYPE (lhs), vr->type))\n+\t{\n+\t  tree *saved_last_vuse_ptr = last_vuse_ptr;\n+\t  /* Do not update last_vuse_ptr in vn_reference_lookup_2.  */\n+\t  last_vuse_ptr = NULL;\n+\t  tree saved_vuse = vr->vuse;\n+\t  hashval_t saved_hashcode = vr->hashcode;\n+\t  void *res = vn_reference_lookup_2 (ref,\n+\t\t\t\t\t     gimple_vuse (def_stmt), 0, vr);\n+\t  /* Need to restore vr->vuse and vr->hashcode.  */\n+\t  vr->vuse = saved_vuse;\n+\t  vr->hashcode = saved_hashcode;\n+\t  last_vuse_ptr = saved_last_vuse_ptr;\n+\t  if (res && res != (void *)-1)\n+\t    {\n+\t      vn_reference_t vnresult = (vn_reference_t) res;\n+\t      if (vnresult->result\n+\t\t  && operand_equal_p (vnresult->result,\n+\t\t\t\t      gimple_assign_rhs1 (def_stmt), 0))\n+\t\treturn res;\n+\t    }\n+\t}\n     }\n   else if (gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL)\n \t   && gimple_call_num_args (def_stmt) <= 4)"}]}