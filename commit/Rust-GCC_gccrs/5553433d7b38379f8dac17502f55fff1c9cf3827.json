{"sha": "5553433d7b38379f8dac17502f55fff1c9cf3827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1MzQzM2Q3YjM4Mzc5ZjhkYWMxNzUwMmY1NWZmZjFjOWNmMzgyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-18T09:02:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-18T10:11:44Z"}, "message": "avoid early asm output\n\nThis avoids early assembler output via the gimplifier creating\nnew static CTORs.  The output machinery seems to be prepared to\noutput constants recursively and it's just a matter of\nappropriately defering or not defering output.\n\nThis also has the advantage of not outputting .string for\noptimized away local aggregate initializers containing string\nreferences.\n\n2020-06-18  Richard Biener  <rguenther@suse.de>\n\n\t* varasm.c (assemble_variable): Make sure to not\n\tdefer output when outputting addressed constants.\n\t(output_constant_def_contents): Likewise.\n\t(add_constant_to_table): Take and pass on whether to\n\tdefer output.\n\t(output_addressed_constants): Likewise.\n\t(output_constant_def): Pass on whether to defer output\n\tto add_constant_to_table.\n\t(tree_output_constant_def): Defer output of constants.", "tree": {"sha": "291a9404b08b99f9d8c386f1322e9546f2db979f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/291a9404b08b99f9d8c386f1322e9546f2db979f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5553433d7b38379f8dac17502f55fff1c9cf3827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5553433d7b38379f8dac17502f55fff1c9cf3827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5553433d7b38379f8dac17502f55fff1c9cf3827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5553433d7b38379f8dac17502f55fff1c9cf3827/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2b7c7f0a136b4d00520a08d4c443fc2e3a467d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2b7c7f0a136b4d00520a08d4c443fc2e3a467d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2b7c7f0a136b4d00520a08d4c443fc2e3a467d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "84df52013d7096253da5cfe206f51b1fd07c63a5", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5553433d7b38379f8dac17502f55fff1c9cf3827/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5553433d7b38379f8dac17502f55fff1c9cf3827/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5553433d7b38379f8dac17502f55fff1c9cf3827", "patch": "@@ -110,7 +110,7 @@ static void decode_addr_const (tree, class addr_const *);\n static hashval_t const_hash_1 (const tree);\n static int compare_constant (const tree, const tree);\n static void output_constant_def_contents (rtx);\n-static void output_addressed_constants (tree);\n+static void output_addressed_constants (tree, int);\n static unsigned HOST_WIDE_INT output_constant (tree, unsigned HOST_WIDE_INT,\n \t\t\t\t\t       unsigned int, bool, bool);\n static void globalize_decl (tree);\n@@ -2272,7 +2272,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \n   /* Output any data that we will need to use the address of.  */\n   if (DECL_INITIAL (decl) && DECL_INITIAL (decl) != error_mark_node)\n-    output_addressed_constants (DECL_INITIAL (decl));\n+    output_addressed_constants (DECL_INITIAL (decl), 0);\n \n   /* dbxout.c needs to know this.  */\n   if (sect && (sect->common.flags & SECTION_CODE) != 0)\n@@ -3426,11 +3426,11 @@ build_constant_desc (tree exp)\n    already have labels.  */\n \n static constant_descriptor_tree *\n-add_constant_to_table (tree exp)\n+add_constant_to_table (tree exp, int defer)\n {\n   /* The hash table methods may call output_constant_def for addressed\n      constants, so handle them first.  */\n-  output_addressed_constants (exp);\n+  output_addressed_constants (exp, defer);\n \n   /* Sanity check to catch recursive insertion.  */\n   static bool inserting;\n@@ -3474,7 +3474,7 @@ add_constant_to_table (tree exp)\n rtx\n output_constant_def (tree exp, int defer)\n {\n-  struct constant_descriptor_tree *desc = add_constant_to_table (exp);\n+  struct constant_descriptor_tree *desc = add_constant_to_table (exp, defer);\n   maybe_output_constant_def_contents (desc, defer);\n   return desc->rtl;\n }\n@@ -3544,7 +3544,7 @@ output_constant_def_contents (rtx symbol)\n \n   /* Make sure any other constants whose addresses appear in EXP\n      are assigned label numbers.  */\n-  output_addressed_constants (exp);\n+  output_addressed_constants (exp, 0);\n \n   /* We are no longer deferring this constant.  */\n   TREE_ASM_WRITTEN (decl) = TREE_ASM_WRITTEN (exp) = 1;\n@@ -3608,7 +3608,7 @@ lookup_constant_def (tree exp)\n tree\n tree_output_constant_def (tree exp)\n {\n-  struct constant_descriptor_tree *desc = add_constant_to_table (exp);\n+  struct constant_descriptor_tree *desc = add_constant_to_table (exp, 1);\n   tree decl = SYMBOL_REF_DECL (XEXP (desc->rtl, 0));\n   varpool_node::finalize_decl (decl);\n   return decl;\n@@ -4327,7 +4327,7 @@ compute_reloc_for_constant (tree exp)\n    Indicate whether an ADDR_EXPR has been encountered.  */\n \n static void\n-output_addressed_constants (tree exp)\n+output_addressed_constants (tree exp, int defer)\n {\n   tree tem;\n \n@@ -4347,29 +4347,29 @@ output_addressed_constants (tree exp)\n \ttem = DECL_INITIAL (tem);\n \n       if (CONSTANT_CLASS_P (tem) || TREE_CODE (tem) == CONSTRUCTOR)\n-\toutput_constant_def (tem, 0);\n+\toutput_constant_def (tem, defer);\n \n       if (TREE_CODE (tem) == MEM_REF)\n-\toutput_addressed_constants (TREE_OPERAND (tem, 0));\n+\toutput_addressed_constants (TREE_OPERAND (tem, 0), defer);\n       break;\n \n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n     case MINUS_EXPR:\n-      output_addressed_constants (TREE_OPERAND (exp, 1));\n+      output_addressed_constants (TREE_OPERAND (exp, 1), defer);\n       gcc_fallthrough ();\n \n     CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n-      output_addressed_constants (TREE_OPERAND (exp, 0));\n+      output_addressed_constants (TREE_OPERAND (exp, 0), defer);\n       break;\n \n     case CONSTRUCTOR:\n       {\n \tunsigned HOST_WIDE_INT idx;\n \tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (exp), idx, tem)\n \t  if (tem != 0)\n-\t    output_addressed_constants (tem);\n+\t    output_addressed_constants (tem, defer);\n       }\n       break;\n "}]}