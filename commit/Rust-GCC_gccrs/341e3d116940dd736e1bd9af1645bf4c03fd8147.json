{"sha": "341e3d116940dd736e1bd9af1645bf4c03fd8147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxZTNkMTE2OTQwZGQ3MzZlMWJkOWFmMTY0NWJmNGMwM2ZkODE0Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-05T18:24:08Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-05T18:24:08Z"}, "message": "builtins.def (BUILT_IN_CONJ, [...]): Define.\n\n\t* builtins.def (BUILT_IN_CONJ, BUILT_IN_CREAL, BUILT_IN_CIMAG):\n\tDefine.\n\t* builtins.c (expand_builtin): Abort on BUILT_IN_CONJ,\n\tBUILT_IN_CREAL and BUILT_IN_CIMAG.\n\t* c-common.c (c_common_nodes_and_builtins): Create builtin conjf,\n\tconj, conjl, crealf, creal, creall, cimagf, cimag and cimagl.\n\t(expand_tree_builtin): Handle BUILT_IN_CONJ, BUILT_IN_CREAL and\n\tBUILT_IN_CIMAG.\n\t* extend.texi: Document these builtins.\n\ntestsuite:\n\t* gcc.c-torture/execute/builtin-complex-1.c: New test.\n\nFrom-SVN: r38716", "tree": {"sha": "cae858fa1cc9c29db5a7d0166db607c208716c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae858fa1cc9c29db5a7d0166db607c208716c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341e3d116940dd736e1bd9af1645bf4c03fd8147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341e3d116940dd736e1bd9af1645bf4c03fd8147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341e3d116940dd736e1bd9af1645bf4c03fd8147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341e3d116940dd736e1bd9af1645bf4c03fd8147/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604bb87de90164862b561526770dd9c265114971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604bb87de90164862b561526770dd9c265114971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604bb87de90164862b561526770dd9c265114971"}], "stats": {"total": 292, "additions": 288, "deletions": 4}, "files": [{"sha": "43c35e114a19937f86e233dc2e692be8f1e0d08f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -1,3 +1,15 @@\n+2001-01-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* builtins.def (BUILT_IN_CONJ, BUILT_IN_CREAL, BUILT_IN_CIMAG):\n+\tDefine.\n+\t* builtins.c (expand_builtin): Abort on BUILT_IN_CONJ,\n+\tBUILT_IN_CREAL and BUILT_IN_CIMAG.\n+\t* c-common.c (c_common_nodes_and_builtins): Create builtin conjf,\n+\tconj, conjl, crealf, creal, creall, cimagf, cimag and cimagl.\n+\t(expand_tree_builtin): Handle BUILT_IN_CONJ, BUILT_IN_CREAL and\n+\tBUILT_IN_CIMAG.\n+\t* extend.texi: Document these builtins.\n+\n 2001-01-05  Daniel Berlin  <dberlin@redhat.com>\n \n \t* c-common.c (lang_get_alias_set): Say we know nothing of"}, {"sha": "1ad33f24826974b627fffd39ae37f68e98e207bd", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -3299,6 +3299,13 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       /* build_function_call changes these into ABS_EXPR.  */\n       abort ();\n \n+    case BUILT_IN_CONJ:\n+    case BUILT_IN_CREAL:\n+    case BUILT_IN_CIMAG:\n+      /* expand_tree_builtin changes these into CONJ_EXPR, REALPART_EXPR\n+\t and IMAGPART_EXPR.  */\n+      abort ();\n+\n     case BUILT_IN_SIN:\n     case BUILT_IN_COS:\n       /* Treat these like sqrt, but only if the user asks for them.  */"}, {"sha": "ecb1991b4b1f30dc1debccbb43e0f4813fc2c2a4", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -1,6 +1,6 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -22,6 +22,9 @@ Boston, MA 02111-1307, USA.  */\n DEF_BUILTIN(BUILT_IN_ALLOCA)\n DEF_BUILTIN(BUILT_IN_ABS)\n DEF_BUILTIN(BUILT_IN_FABS)\n+DEF_BUILTIN(BUILT_IN_CONJ)\n+DEF_BUILTIN(BUILT_IN_CREAL)\n+DEF_BUILTIN(BUILT_IN_CIMAG)\n DEF_BUILTIN(BUILT_IN_FFS)\n DEF_BUILTIN(BUILT_IN_DIV)\n DEF_BUILTIN(BUILT_IN_LDIV)"}, {"sha": "1e36874190cbd6a96bcede7cd76f934055511873", "filename": "gcc/c-common.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -5134,6 +5134,8 @@ c_common_nodes_and_builtins ()\n   tree void_ftype_any, void_ftype_int, int_ftype_any;\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float, ldouble_ftype_ldouble;\n+  tree cfloat_ftype_cfloat, cdouble_ftype_cdouble, cldouble_ftype_cldouble;\n+  tree float_ftype_cfloat, double_ftype_cdouble, ldouble_ftype_cldouble;\n   tree int_ftype_cptr_cptr_sizet, sizet_ftype_cstring_cstring;\n   tree int_ftype_cstring_cstring, string_ftype_string_cstring;\n   tree string_ftype_cstring_int, string_ftype_cstring_cstring;\n@@ -5358,6 +5360,32 @@ c_common_nodes_and_builtins ()\n \t\t\t   tree_cons (NULL_TREE, double_type_node,\n \t\t\t\t      double_endlink));\n \n+  cfloat_ftype_cfloat\n+    = build_function_type (complex_float_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_float_type_node,\n+\t\t\t\t      endlink));\n+  cdouble_ftype_cdouble\n+    = build_function_type (complex_double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_double_type_node,\n+\t\t\t\t      endlink));\n+  cldouble_ftype_cldouble\n+    = build_function_type (complex_long_double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_long_double_type_node,\n+\t\t\t\t      endlink));\n+\n+  float_ftype_cfloat\n+    = build_function_type (float_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_float_type_node,\n+\t\t\t\t      endlink));\n+  double_ftype_cdouble\n+    = build_function_type (double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_double_type_node,\n+\t\t\t\t      endlink));\n+  ldouble_ftype_cldouble\n+    = build_function_type (long_double_type_node,\n+\t\t\t   tree_cons (NULL_TREE, complex_long_double_type_node,\n+\t\t\t\t      endlink));\n+\n   int_ftype_int\n     = build_function_type (integer_type_node, int_endlink);\n \n@@ -5748,6 +5776,36 @@ c_common_nodes_and_builtins ()\n   builtin_function_2 (\"__builtin_cosl\", \"cosl\",\n \t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n \t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n+\n+  /* ISO C99 complex arithmetic functions.  */\n+  builtin_function_2 (\"__builtin_conjf\", \"conjf\",\n+\t\t      cfloat_ftype_cfloat, cfloat_ftype_cfloat,\n+\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_conj\", \"conj\",\n+\t\t      cdouble_ftype_cdouble, cdouble_ftype_cdouble,\n+\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_conjl\", \"conjl\",\n+\t\t      cldouble_ftype_cldouble, cldouble_ftype_cldouble,\n+\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_crealf\", \"crealf\",\n+\t\t      float_ftype_cfloat, float_ftype_cfloat,\n+\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_creal\", \"creal\",\n+\t\t      double_ftype_cdouble, double_ftype_cdouble,\n+\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_creall\", \"creall\",\n+\t\t      ldouble_ftype_cldouble, ldouble_ftype_cldouble,\n+\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_cimagf\", \"cimagf\",\n+\t\t      float_ftype_cfloat, float_ftype_cfloat,\n+\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_cimag\", \"cimag\",\n+\t\t      double_ftype_cdouble, double_ftype_cdouble,\n+\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_cimagl\", \"cimagl\",\n+\t\t      ldouble_ftype_cldouble, ldouble_ftype_cldouble,\n+\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+\n   built_in_decls[BUILT_IN_PUTCHAR] =\n     builtin_function (\"__builtin_putchar\", int_ftype_int,\n \t\t      BUILT_IN_PUTCHAR, BUILT_IN_NORMAL, \"putchar\");\n@@ -5967,6 +6025,21 @@ expand_tree_builtin (function, params, coerced_params)\n \treturn integer_zero_node;\n       return build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n \n+    case BUILT_IN_CONJ:\n+      if (coerced_params == 0)\n+\treturn integer_zero_node;\n+      return build_unary_op (CONJ_EXPR, TREE_VALUE (coerced_params), 0);\n+\n+    case BUILT_IN_CREAL:\n+      if (coerced_params == 0)\n+\treturn integer_zero_node;\n+      return build_unary_op (REALPART_EXPR, TREE_VALUE (coerced_params), 0);\n+\n+    case BUILT_IN_CIMAG:\n+      if (coerced_params == 0)\n+\treturn integer_zero_node;\n+      return build_unary_op (IMAGPART_EXPR, TREE_VALUE (coerced_params), 0);\n+\n     case BUILT_IN_ISGREATER:\n       if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n \tcode = UNLE_EXPR;"}, {"sha": "5778a9bde1b46ff92fd48d090dbea6a33e60af66", "filename": "gcc/extend.texi", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -3357,9 +3357,18 @@ function as well.\n @findex alloca\n @findex bcmp\n @findex bzero\n+@findex cimag\n+@findex cimagf\n+@findex cimagl\n+@findex conj\n+@findex conjf\n+@findex conjl\n @findex cos\n @findex cosf\n @findex cosl\n+@findex creal\n+@findex crealf\n+@findex creall\n @findex exit\n @findex _exit\n @findex fabs\n@@ -3424,9 +3433,10 @@ as builtins.  Corresponding versions @code{__builtin_alloca},\n @code{__builtin_rindex} and @code{__builtin_ffs} are also recognized in\n strict ISO C mode.\n \n-The ISO C99 functions @code{llabs} and @code{imaxabs}\n-are handled as builtins except in\n-strict ISO C89 mode.  There are also builtin versions of the ISO C99\n+The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl},\n+@code{creal}, @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf},\n+@code{cimagl}, @code{llabs} and @code{imaxabs} are handled as builtins\n+except in strict ISO C89 mode.  There are also builtin versions of the ISO C99\n functions @code{cosf}, @code{cosl}, @code{fabsf}, @code{fabsl},\n @code{sinf}, @code{sinl}, @code{sqrtf}, and @code{sqrtl}, that are\n recognized in any mode since ISO C89 reserves these names for the"}, {"sha": "e30ed6002e2576ad2607c05109b2bd1337ecb844", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -1,3 +1,7 @@\n+2001-01-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/execute/builtin-complex-1.c: New test.\n+\n 2001-01-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/crash62.C: New test."}, {"sha": "46ab7c51c0fab6582bf257297c541a57fc019c92", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-complex-1.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341e3d116940dd736e1bd9af1645bf4c03fd8147/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-complex-1.c?ref=341e3d116940dd736e1bd9af1645bf4c03fd8147", "patch": "@@ -0,0 +1,175 @@\n+/* Test for builtin conj, creal, cimag.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+\n+extern float _Complex conjf (float _Complex);\n+extern double _Complex conj (double _Complex);\n+extern long double _Complex conjl (long double _Complex);\n+\n+extern float crealf (float _Complex);\n+extern double creal (double _Complex);\n+extern long double creall (long double _Complex);\n+\n+extern float cimagf (float _Complex);\n+extern double cimag (double _Complex);\n+extern long double cimagl (long double _Complex);\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+extern void link_failure (void);\n+\n+int\n+main (void)\n+{\n+  /* For each type, test both runtime and compile time (constant folding)\n+     optimization.  */\n+  volatile float _Complex fc = 1.0F + 2.0iF;\n+  volatile double _Complex dc = 1.0 + 2.0i;\n+  volatile long double _Complex ldc = 1.0L + 2.0iL;\n+  /* Test floats.  */\n+  if (conjf (fc) != 1.0F - 2.0iF)\n+    abort ();\n+  if (__builtin_conjf (fc) != 1.0F - 2.0iF)\n+    abort ();\n+  if (conjf (1.0F + 2.0iF) != 1.0F - 2.0iF)\n+    link_failure ();\n+  if (__builtin_conjf (1.0F + 2.0iF) != 1.0F - 2.0iF)\n+    link_failure ();\n+  if (crealf (fc) != 1.0F)\n+    abort ();\n+  if (__builtin_crealf (fc) != 1.0F)\n+    abort ();\n+  if (crealf (1.0F + 2.0iF) != 1.0F)\n+    link_failure ();\n+  if (__builtin_crealf (1.0F + 2.0iF) != 1.0F)\n+    link_failure ();\n+  if (cimagf (fc) != 2.0F)\n+    abort ();\n+  if (__builtin_cimagf (fc) != 2.0F)\n+    abort ();\n+  if (cimagf (1.0F + 2.0iF) != 2.0F)\n+    link_failure ();\n+  if (__builtin_cimagf (1.0F + 2.0iF) != 2.0F)\n+    link_failure ();\n+  /* Test doubles.  */\n+  if (conj (dc) != 1.0 - 2.0i)\n+    abort ();\n+  if (__builtin_conj (dc) != 1.0 - 2.0i)\n+    abort ();\n+  if (conj (1.0 + 2.0i) != 1.0 - 2.0i)\n+    link_failure ();\n+  if (__builtin_conj (1.0 + 2.0i) != 1.0 - 2.0i)\n+    link_failure ();\n+  if (creal (dc) != 1.0)\n+    abort ();\n+  if (__builtin_creal (dc) != 1.0)\n+    abort ();\n+  if (creal (1.0 + 2.0i) != 1.0)\n+    link_failure ();\n+  if (__builtin_creal (1.0 + 2.0i) != 1.0)\n+    link_failure ();\n+  if (cimag (dc) != 2.0)\n+    abort ();\n+  if (__builtin_cimag (dc) != 2.0)\n+    abort ();\n+  if (cimag (1.0 + 2.0i) != 2.0)\n+    link_failure ();\n+  if (__builtin_cimag (1.0 + 2.0i) != 2.0)\n+    link_failure ();\n+  /* Test long doubles.  */\n+  if (conjl (ldc) != 1.0L - 2.0iL)\n+    abort ();\n+  if (__builtin_conjl (ldc) != 1.0L - 2.0iL)\n+    abort ();\n+  if (conjl (1.0L + 2.0iL) != 1.0L - 2.0iL)\n+    link_failure ();\n+  if (__builtin_conjl (1.0L + 2.0iL) != 1.0L - 2.0iL)\n+    link_failure ();\n+  if (creall (ldc) != 1.0L)\n+    abort ();\n+  if (__builtin_creall (ldc) != 1.0L)\n+    abort ();\n+  if (creall (1.0L + 2.0iL) != 1.0L)\n+    link_failure ();\n+  if (__builtin_creall (1.0L + 2.0iL) != 1.0L)\n+    link_failure ();\n+  if (cimagl (ldc) != 2.0L)\n+    abort ();\n+  if (__builtin_cimagl (ldc) != 2.0L)\n+    abort ();\n+  if (cimagl (1.0L + 2.0iL) != 2.0L)\n+    link_failure ();\n+  if (__builtin_cimagl (1.0L + 2.0iL) != 2.0L)\n+    link_failure ();\n+  exit (0);\n+}\n+\n+/* All the above cases should have been optimized to something else,\n+   even if not optimizing (unless -fno-builtin was specified).  So any\n+   remaining calls to the original functions should abort.  */\n+\n+static float _Complex\n+conjf (float _Complex z)\n+{\n+  abort ();\n+}\n+\n+static double _Complex\n+conj (double _Complex z)\n+{\n+  abort ();\n+}\n+\n+static long double _Complex\n+conjl (long double _Complex z)\n+{\n+  abort ();\n+}\n+\n+static float\n+crealf (float _Complex z)\n+{\n+  abort ();\n+}\n+\n+static double\n+creal (double _Complex z)\n+{\n+  abort ();\n+}\n+\n+static long double\n+creall (long double _Complex z)\n+{\n+  abort ();\n+}\n+\n+static float\n+cimagf (float _Complex z)\n+{\n+  abort ();\n+}\n+\n+static double\n+cimag (double _Complex z)\n+{\n+  abort ();\n+}\n+\n+static long double\n+cimagl (long double _Complex z)\n+{\n+  abort ();\n+}\n+\n+/* When optimizing, all the constant cases should have been\n+   constant folded, so no calls to link_failure should remain.  In any case,\n+   link_failure should not be called.  */\n+\n+#ifndef __OPTIMIZE__\n+void\n+link_failure (void)\n+{\n+  abort ();\n+}\n+#endif"}]}