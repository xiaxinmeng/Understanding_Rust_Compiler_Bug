{"sha": "aef1522ba5b465184e64793ae6bdb312d3fa603e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmMTUyMmJhNWI0NjUxODRlNjQ3OTNhZTZiZGIzMTJkM2ZhNjAzZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-08T21:34:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-08T21:34:06Z"}, "message": "(mulsidi3, umulsidi3): Delete the conditions added last time.\n\n(their matchers): Use const_int_operand as predicate, and `n' as constraint.\nFix the extra conditions.\n\nFrom-SVN: r4389", "tree": {"sha": "22643d8a6b0fe2448ca2091a3af86ce93b1a3376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22643d8a6b0fe2448ca2091a3af86ce93b1a3376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aef1522ba5b465184e64793ae6bdb312d3fa603e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef1522ba5b465184e64793ae6bdb312d3fa603e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef1522ba5b465184e64793ae6bdb312d3fa603e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef1522ba5b465184e64793ae6bdb312d3fa603e/comments", "author": null, "committer": null, "parents": [{"sha": "e2c0a9245afb286ee6829762e1fdb53ee1024b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c0a9245afb286ee6829762e1fdb53ee1024b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c0a9245afb286ee6829762e1fdb53ee1024b06"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "419eae4735e93c7396c84a6e88fce97ebffffb32", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef1522ba5b465184e64793ae6bdb312d3fa603e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef1522ba5b465184e64793ae6bdb312d3fa603e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=aef1522ba5b465184e64793ae6bdb312d3fa603e", "patch": "@@ -2463,14 +2463,7 @@\n \t  (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t     (zero_extend:DI (match_dup 2)))\n \t\t\t\t    (const_int 32))))])]\n-  ;; Prevent generating an insn that the immediate pattern below\n-  ;; would refuse to match.\n-  ;; Testing INTVAL in this way is a no-op, both there and here;\n-  ;; but in case on some host is not a no-op,\n-  ;; this test must go with the other.\n-  \"TARGET_68020\n-   && !(GET_CODE (operands[2]) == CONST_INT\n-\t&& INTVAL (operands[2]) > 0x7fffffff)\"\n+  \"TARGET_68020\"\n   \"\")\n \n (define_insn \"\"\n@@ -2484,18 +2477,20 @@\n   \"TARGET_68020\"\n   \"mulu%.l %2,%3:%0\")\n \n-; Match immediate case.  For 2.4 only match things < 2^31. For 2.5 we\n-; can enhance this and the similar pattern below for signed multiply.\n+; Match immediate case.  For 2.4 only match things < 2^31.\n+; It's tricky with larger values in these patterns since we need to match\n+; values between the two parallel multiplies, between a CONST_DOUBLE and\n+; a CONST_INT.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"\" \"K\")))\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=d\")\n \t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n \t\t\t\t  (const_int 32))))]\n   \"TARGET_68020\n-   && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) <= 0x7fffffff\"\n+   && (unsigned) INTVAL (operands[2]) <= 0x7fffffff\"\n   \"mulu%.l %2,%3:%0\")\n \n (define_expand \"mulsidi3\"\n@@ -2507,14 +2502,7 @@\n \t  (truncate:SI (ashift:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (sign_extend:DI (match_dup 2)))\n \t\t\t\t  (const_int 32))))])]\n-  ;; Prevent generating an insn that the immediate pattern below\n-  ;; would refuse to match.\n-  ;; Testing INTVAL in this way is a no-op, both there and here;\n-  ;; but in case on some host is not a no-op,\n-  ;; this test must go with the other.\n-  \"TARGET_68020\n-   && !(GET_CODE (operands[2]) == CONST_INT\n-\t&& INTVAL (operands[2]) > 0x7fffffff)\"\n+  \"TARGET_68020\"\n   \"\")\n \n (define_insn \"\"\n@@ -2531,13 +2519,16 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"\" \"K\")))\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=d\")\n \t(truncate:SI (ashift:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t (match_dup 2))\n \t\t\t\t(const_int 32))))]\n   \"TARGET_68020\n-   && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) <= 0x7fffffff\"\n+   /* This test is a noop on 32 bit machines,\n+      but important for a cross-compiler hosted on 64-bit machines.  */\n+   && INTVAL (operands[2]) <= 0x7fffffff\n+   && INTVAL (operands[2]) >= -0x80000000\"\n   \"muls%.l %2,%3:%0\")\n \n (define_expand \"muldf3\""}]}