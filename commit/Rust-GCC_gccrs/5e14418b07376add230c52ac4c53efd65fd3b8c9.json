{"sha": "5e14418b07376add230c52ac4c53efd65fd3b8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxNDQxOGIwNzM3NmFkZDIzMGM1MmFjNGM1M2VmZDY1ZmQzYjhjOQ==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2018-09-26T09:13:18Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2018-09-26T09:13:18Z"}, "message": "A few places in the arm and aarch64 backends check whether an atomic operation needs acquire or release semantics.\n\nA few places in the arm and aarch64 backends check whether an atomic\noperation needs acquire or release semantics.\nThis is generally done with a check like\n\n(is_mm_relaxed (model)\n  || is_mm_consume (model)\n  || is_mm_release (model))\n\nIn this patch we introduce two helper functions to make things a little\ntidier.\n\nThere are a few places in the arm/ backend that check whether an\noperation needs memory model semantics with an idiom that can now be\nreplaced with the new aarch_mm_needs_* functions, so we make that\nreplacement.\n\nThere is also some backslash removal to make things a little tidier.\n\nFull bootstrap and regression test plus cross-compilation regression tests done\non arm-none-linux-gnueabihf.\nOk for trunk?\n\ngcc/ChangeLog:\n\n2018-09-20  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/arm/arm.c (arm_split_compare_and_swap, arm_split_atomic_op):\n\tUse new helper functions.\n\t* config/arm/sync.md (atomic_load<mode>, atomic_store<mode>):\n\tUse new helper functions.\n\t* config/arm/aarch-common-protos.h (aarch_mm_needs_acquire,\n\taarch_mm_needs_release): New declarations.\n\t* config/arm/aarch-common.c (aarch_mm_needs_acquire,\n\taarch_mm_needs_release): New.\n\nFrom-SVN: r264598", "tree": {"sha": "5aee864fecc30e58c335c1ed93ad335c982d8301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aee864fecc30e58c335c1ed93ad335c982d8301"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e14418b07376add230c52ac4c53efd65fd3b8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e14418b07376add230c52ac4c53efd65fd3b8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e14418b07376add230c52ac4c53efd65fd3b8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e14418b07376add230c52ac4c53efd65fd3b8c9/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "539866048e546c696afbb49d4366fe6477f50130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539866048e546c696afbb49d4366fe6477f50130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539866048e546c696afbb49d4366fe6477f50130"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "2eeacefe612cf7cbc8e6b4c568233492b5d8a865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e14418b07376add230c52ac4c53efd65fd3b8c9", "patch": "@@ -1,3 +1,14 @@\n+2018-09-26  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/arm/arm.c (arm_split_compare_and_swap, arm_split_atomic_op):\n+\tUse new helper functions.\n+\t* config/arm/sync.md (atomic_load<mode>, atomic_store<mode>):\n+\tUse new helper functions.\n+\t* config/arm/aarch-common-protos.h (aarch_mm_needs_acquire,\n+\taarch_mm_needs_release): New declarations.\n+\t* config/arm/aarch-common.c (aarch_mm_needs_acquire,\n+\taarch_mm_needs_release): New.\n+\n 2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_reorg): Skip Thumb reorg pass for thunks."}, {"sha": "b9a9b0438f6dddb7468e2b3581dcd3202b85b898", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=5e14418b07376add230c52ac4c53efd65fd3b8c9", "patch": "@@ -28,6 +28,8 @@ extern int aarch_crypto_can_dual_issue (rtx_insn *, rtx_insn *);\n extern bool aarch_rev16_p (rtx);\n extern bool aarch_rev16_shleft_mask_imm_p (rtx, machine_mode);\n extern bool aarch_rev16_shright_mask_imm_p (rtx, machine_mode);\n+extern bool aarch_mm_needs_acquire (rtx);\n+extern bool aarch_mm_needs_release (rtx);\n extern int arm_early_load_addr_dep (rtx, rtx);\n extern int arm_early_load_addr_dep_ptr (rtx, rtx);\n extern int arm_early_store_addr_dep (rtx, rtx);"}, {"sha": "14eb49575480c392a4d872da9ea92633f6f8ca8f", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=5e14418b07376add230c52ac4c53efd65fd3b8c9", "patch": "@@ -29,6 +29,7 @@\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"rtl-iter.h\"\n+#include \"memmodel.h\"\n \n /* In ARMv8-A there's a general expectation that AESE/AESMC\n    and AESD/AESIMC sequences of the form:\n@@ -230,6 +231,28 @@ aarch_rev16_p (rtx x)\n   return is_rev;\n }\n \n+/* Return non-zero if the RTX representing a memory model is a memory model\n+   that needs acquire semantics.  */\n+bool\n+aarch_mm_needs_acquire (rtx const_int)\n+{\n+  enum memmodel model = memmodel_from_int (INTVAL (const_int));\n+  return !(is_mm_relaxed (model)\n+\t   || is_mm_consume (model)\n+\t   || is_mm_release (model));\n+}\n+\n+/* Return non-zero if the RTX representing a memory model is a memory model\n+   that needs release semantics.  */\n+bool\n+aarch_mm_needs_release (rtx const_int)\n+{\n+  enum memmodel model = memmodel_from_int (INTVAL (const_int));\n+  return !(is_mm_relaxed (model)\n+\t   || is_mm_consume (model)\n+\t   || is_mm_acquire (model));\n+}\n+\n /* Return nonzero if the CONSUMER instruction (a load) does need\n    PRODUCER's value to calculate the address.  */\n int"}, {"sha": "8810df53aa34798b5e3e1eb3a870101d530702e4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5e14418b07376add230c52ac4c53efd65fd3b8c9", "patch": "@@ -28645,7 +28645,7 @@ arm_expand_compare_and_swap (rtx operands[])\n void\n arm_split_compare_and_swap (rtx operands[])\n {\n-  rtx rval, mem, oldval, newval, neg_bval;\n+  rtx rval, mem, oldval, newval, neg_bval, mod_s_rtx;\n   machine_mode mode;\n   enum memmodel mod_s, mod_f;\n   bool is_weak;\n@@ -28657,20 +28657,16 @@ arm_split_compare_and_swap (rtx operands[])\n   oldval = operands[3];\n   newval = operands[4];\n   is_weak = (operands[5] != const0_rtx);\n-  mod_s = memmodel_from_int (INTVAL (operands[6]));\n+  mod_s_rtx = operands[6];\n+  mod_s = memmodel_from_int (INTVAL (mod_s_rtx));\n   mod_f = memmodel_from_int (INTVAL (operands[7]));\n   neg_bval = TARGET_THUMB1 ? operands[0] : operands[8];\n   mode = GET_MODE (mem);\n \n   bool is_armv8_sync = arm_arch8 && is_mm_sync (mod_s);\n \n-  bool use_acquire = TARGET_HAVE_LDACQ\n-                     && !(is_mm_relaxed (mod_s) || is_mm_consume (mod_s)\n-\t\t\t  || is_mm_release (mod_s));\n-\t\t\n-  bool use_release = TARGET_HAVE_LDACQ\n-                     && !(is_mm_relaxed (mod_s) || is_mm_consume (mod_s)\n-\t\t\t  || is_mm_acquire (mod_s));\n+  bool use_acquire = TARGET_HAVE_LDACQ && aarch_mm_needs_acquire (mod_s_rtx);\n+  bool use_release = TARGET_HAVE_LDACQ && aarch_mm_needs_release (mod_s_rtx);\n \n   /* For ARMv8, the load-acquire is too weak for __sync memory orders.  Instead,\n      a full barrier is emitted after the store-release.  */\n@@ -28765,13 +28761,8 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \n   bool is_armv8_sync = arm_arch8 && is_mm_sync (model);\n \n-  bool use_acquire = TARGET_HAVE_LDACQ\n-                     && !(is_mm_relaxed (model) || is_mm_consume (model)\n-\t\t\t  || is_mm_release (model));\n-\n-  bool use_release = TARGET_HAVE_LDACQ\n-                     && !(is_mm_relaxed (model) || is_mm_consume (model)\n-\t\t\t  || is_mm_acquire (model));\n+  bool use_acquire = TARGET_HAVE_LDACQ && aarch_mm_needs_acquire (model_rtx);\n+  bool use_release = TARGET_HAVE_LDACQ && aarch_mm_needs_release (model_rtx);\n \n   /* For ARMv8, a load-acquire is too weak for __sync memory orders.  Instead,\n      a full barrier is emitted after the store-release.  */"}, {"sha": "08fc5d1a8ab4a07cd8aa2f3c9826af8e3326f9b1", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e14418b07376add230c52ac4c53efd65fd3b8c9/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=5e14418b07376add230c52ac4c53efd65fd3b8c9", "patch": "@@ -70,20 +70,19 @@\n       VUNSPEC_LDA))]\n   \"TARGET_HAVE_LDACQ\"\n   {\n-    enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n-    if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_release (model))\n+    if (aarch_mm_needs_acquire (operands[2]))\n       {\n \tif (TARGET_THUMB1)\n-\t  return \\\"ldr<sync_sfx>\\\\t%0, %1\\\";\n+\t  return \"lda<sync_sfx>\\t%0, %1\";\n \telse\n-\t  return \\\"ldr<sync_sfx>%?\\\\t%0, %1\\\";\n+\t  return \"lda<sync_sfx>%?\\t%0, %1\";\n       }\n     else\n       {\n \tif (TARGET_THUMB1)\n-\t  return \\\"lda<sync_sfx>\\\\t%0, %1\\\";\n+\t  return \"ldr<sync_sfx>\\t%0, %1\";\n \telse\n-\t  return \\\"lda<sync_sfx>%?\\\\t%0, %1\\\";\n+\t  return \"ldr<sync_sfx>%?\\t%0, %1\";\n       }\n   }\n   [(set_attr \"arch\" \"32,v8mb,any\")\n@@ -97,20 +96,19 @@\n       VUNSPEC_STL))]\n   \"TARGET_HAVE_LDACQ\"\n   {\n-    enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n-    if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_acquire (model))\n+    if (aarch_mm_needs_release (operands[2]))\n       {\n \tif (TARGET_THUMB1)\n-\t  return \\\"str<sync_sfx>\\t%1, %0\\\";\n+\t  return \"stl<sync_sfx>\\t%1, %0\";\n \telse\n-\t  return \\\"str<sync_sfx>%?\\t%1, %0\\\";\n+\t  return \"stl<sync_sfx>%?\\t%1, %0\";\n       }\n     else\n       {\n \tif (TARGET_THUMB1)\n-\t  return \\\"stl<sync_sfx>\\t%1, %0\\\";\n+\t  return \"str<sync_sfx>\\t%1, %0\";\n \telse\n-\t  return \\\"stl<sync_sfx>%?\\t%1, %0\\\";\n+\t  return \"str<sync_sfx>%?\\t%1, %0\";\n       }\n   }\n   [(set_attr \"arch\" \"32,v8mb,any\")"}]}