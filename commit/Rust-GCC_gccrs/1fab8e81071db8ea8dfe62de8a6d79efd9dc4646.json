{"sha": "1fab8e81071db8ea8dfe62de8a6d79efd9dc4646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhYjhlODEwNzFkYjhlYThkZmU2MmRlOGE2ZDc5ZWZkOWRjNDY0Ng==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-01T05:06:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-01T05:06:34Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r656", "tree": {"sha": "719074ae53efa769c3661c9bbffec27647c61cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/719074ae53efa769c3661c9bbffec27647c61cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646/comments", "author": null, "committer": null, "parents": [{"sha": "ef137e0a6b1d69197de2c658d0a66fb5adcadfaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef137e0a6b1d69197de2c658d0a66fb5adcadfaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef137e0a6b1d69197de2c658d0a66fb5adcadfaa"}], "stats": {"total": 138, "additions": 35, "deletions": 103}, "files": [{"sha": "292ee3690d80fba9edd33c946e22d3a310cf60d9", "filename": "gcc/collect2.c", "status": "modified", "additions": 35, "deletions": 103, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fab8e81071db8ea8dfe62de8a6d79efd9dc4646/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=1fab8e81071db8ea8dfe62de8a6d79efd9dc4646", "patch": "@@ -45,12 +45,10 @@ extern int errno;\n #include \"config.h\"\n \n #ifndef __STDC__\n-#include \"gvarargs.h\"\n #define generic char\n #define const\n \n #else\n-#include \"gstdarg.h\"\n #define generic void\n #endif\n \n@@ -198,11 +196,8 @@ static void  choose_temp_base ();\n generic *xcalloc ();\n generic *xmalloc ();\n \f\n-\n-#if !defined(HAVE_STRERROR) && !defined(_OSF_SOURCE)\n-\n char *\n-strerror (e)\n+my_strerror (e)\n      int e;\n {\n   extern char *sys_errlist[];\n@@ -218,9 +213,6 @@ strerror (e)\n   sprintf (buffer, \"Unknown error %d\", e);\n   return buffer;\n }\n-\n-#endif\n-\n \f\n /* Delete tempfiles and exit function.  */\n \n@@ -238,109 +230,43 @@ my_exit (status)\n }\n \n \f\n-#ifndef __STDC__\n-\n /* Die when sys call fails. */\n \n-/*VARARGS*/\n static void\n-fatal_perror (va_alist)\n+fatal_perror (string, arg1, arg2, arg3)\n+     char *string;\n {\n-  char *string;\n-  va_list vptr;\n   int e = errno;\n \n-  va_start (vptr);\n-  string = va_arg (vptr, char *);\n   fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n-  fprintf (stderr, \": %s\\n\", strerror (e));\n-  va_end (vptr);\n+  fprintf (stderr, string, arg1, arg2, arg3);\n+  fprintf (stderr, \": %s\\n\", my_strerror (e));\n   my_exit (1);\n }\n \n /* Just die. */\n \n-/*VARARGS*/\n static void\n-fatal (va_alist)\n+fatal (string, arg1, arg2, arg3)\n+     char *string;\n {\n-  char *string;\n-  va_list vptr;\n-\n-  va_start (vptr);\n-  string = va_arg (vptr, char *);\n   fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n+  fprintf (stderr, string, arg1, arg2, arg3);\n   fprintf (stderr, \"\\n\");\n-  va_end (vptr);\n   my_exit (1);\n }\n \n /* Write error message.  */\n \n-/*VARARGS*/\n static void\n-error (va_alist)\n+error (string, arg1, arg2, arg3, arg4)\n+     char *string;\n {\n-  char *string;\n-  va_list vptr;\n-\n-  va_start (vptr);\n-  string = va_arg (vptr, char *);\n   fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n+  fprintf (stderr, string, arg1, arg2, arg3, arg4);\n   fprintf (stderr, \"\\n\");\n-  va_end (vptr);\n }\n \n-#else\n-\n-static void\n-fatal_perror (char *string, ...)\n-{\n-  va_list vptr;\n-  int e = errno;\n-\n-  va_start (vptr, string);\n-  fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n-  fprintf (stderr, \": %s\\n\", strerror (e));\n-  va_end (vptr);\n-  my_exit (1);\n-}\n-\n-/* Just die. */\n-\n-static void\n-fatal (char *string, ...)\n-{\n-  va_list vptr;\n-\n-  va_start (vptr, string);\n-  fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n-  fprintf (stderr, \"\\n\");\n-  va_end (vptr);\n-  my_exit (1);\n-}\n-\n-/* Write error message.  */\n-\n-static void\n-error (char *string, ...)\n-{\n-  va_list vptr;\n-\n-  va_start (vptr, string);\n-  fprintf (stderr, \"collect: \");\n-  vfprintf (stderr, string, vptr);\n-  fprintf (stderr, \"\\n\");\n-  va_end (vptr);\n-}\n-#endif\n-\n-\f\n /* In case obstack is linked in, and abort is defined to fancy_abort,\n    provide a default entry.  */\n \n@@ -374,7 +300,7 @@ xcalloc (size1, size2)\n   if (ptr)\n     return ptr;\n \n-  fatal (\"Out of memory.\");\n+  fatal (\"out of memory\");\n   return (generic *)0;\n }\n \n@@ -386,7 +312,7 @@ xmalloc (size)\n   if (ptr)\n     return ptr;\n \n-  fatal (\"Out of memory.\");\n+  fatal (\"out of memory\");\n   return (generic *)0;\n }\n \n@@ -398,7 +324,8 @@ savestring (input, size)\n      int size;\n {\n   char *output = (char *) xmalloc (size + 1);\n-  strcpy (output, input);\n+  bcopy (input, output, size);\n+  output[size] = 0;\n   return output;\n }\n \f\n@@ -792,12 +719,12 @@ main (argc, argv)\n \n   outf = fopen (c_file, \"w\");\n   if (outf == (FILE *)0)\n-    fatal_perror (\"Can't write %s\", c_file);\n+    fatal_perror (\"%s\", c_file);\n \n   write_c_file (outf, c_file);\n \n   if (fclose (outf))\n-    fatal_perror (\"Can't close %s\", c_file);\n+    fatal_perror (\"closing %s\", c_file);\n \n   if (debug)\n     {\n@@ -897,7 +824,7 @@ fork_execute (prog, argv)\n   if (pid == 0)\t\t\t/* child context */\n     {\n       execvp (prog, argv);\n-      fatal_perror (\"Execute %s\", prog);\n+      fatal_perror (\"executing %s\", prog);\n     }\n \n   int_handler  = (void (*) ())signal (SIGINT,  SIG_IGN);\n@@ -1070,24 +997,24 @@ scan_prog_file (prog_name, which_pass)\n     {\n       /* setup stdout */\n       if (dup2 (pipe_fd[1], 1) < 0)\n-\tfatal_perror (\"Dup2 (%d, 1)\", pipe_fd[1]);\n+\tfatal_perror (\"dup2 (%d, 1)\", pipe_fd[1]);\n \n       if (close (pipe_fd[0]) < 0)\n-\tfatal_perror (\"Close (%d)\", pipe_fd[0]);\n+\tfatal_perror (\"close (%d)\", pipe_fd[0]);\n \n       if (close (pipe_fd[1]) < 0)\n-\tfatal_perror (\"Close (%d)\", pipe_fd[1]);\n+\tfatal_perror (\"close (%d)\", pipe_fd[1]);\n \n       execv (nm_file_name, nm_argv);\n-      fatal_perror (\"Execute %s\", nm_file_name);\n+      fatal_perror (\"executing %s\", nm_file_name);\n     }\n \n   /* Parent context from here on.  */\n   int_handler  = (void (*) ())signal (SIGINT,  SIG_IGN);\n   quit_handler = (void (*) ())signal (SIGQUIT, SIG_IGN);\n \n   if (close (pipe_fd[1]) < 0)\n-    fatal_perror (\"Close (%d)\", pipe_fd[1]);\n+    fatal_perror (\"close (%d)\", pipe_fd[1]);\n \n   if (debug)\n     fprintf (stderr, \"\\nnm output with constructors/destructors.\\n\");\n@@ -1351,7 +1278,7 @@ scan_prog_file (prog_name, which_pass)\n \n   prog_fd = open (prog_name, (rw) ? O_RDWR : O_RDONLY);\n   if (prog_fd < 0)\n-    fatal_perror (\"Can't read %s\", prog_name);\n+    fatal_perror (\"can't read %s\", prog_name);\n \n   obj_file = read_file (prog_name, prog_fd, rw);\n   obj = obj_file->start;\n@@ -1374,7 +1301,7 @@ scan_prog_file (prog_name, which_pass)\n       || hdr.moh_cpu_subtype != OUR_CPU_SUBTYPE\n       || hdr.moh_vendor_type != OUR_VENDOR_TYPE)\n     {\n-      fatal (\"incompatibilities exist between object file & expected values.\");\n+      fatal (\"incompatibilities between object file & expected values\");\n     }\n #endif\n \n@@ -1505,7 +1432,7 @@ scan_prog_file (prog_name, which_pass)\n     }\n \n   if (symbol_load_cmds == 0)\n-    fatal (\"no symbol table found.\");\n+    fatal (\"no symbol table found\");\n \n   /* Update the program file now, rewrite header and load commands.  At present,\n      we assume that there is enough space after the last load command to insert\n@@ -1518,10 +1445,15 @@ scan_prog_file (prog_name, which_pass)\n       size_t size;\n \n       if (cmd_strings == -1)\n-\tfatal (\"no cmd_strings found.\");\n+\tfatal (\"no cmd_strings found\");\n+\n+      /* Add __main to initializer list.\n+\t If we are building a program instead of a shared library, don't\n+\t do anything, since in the current version, you cannot do mallocs\n+\t and such in the constructors.  */\n \n-      /* Add __main to initializer list.  */\n-      if (main_sym != (symbol_info_t *)0)\n+      if (main_sym != (symbol_info_t *)0\n+\t  && ((hdr.moh_flags & MOH_EXECABLE_F) == 0))\n \tadd_func_table (&hdr, load_array, main_sym, FNTC_INITIALIZATION);\n \n       if (debug)\n@@ -1583,7 +1515,7 @@ scan_prog_file (prog_name, which_pass)\n   end_file (obj_file);\n \n   if (close (prog_fd))\n-    fatal_perror (\"Can't close %s\", prog_name);\n+    fatal_perror (\"closing %s\", prog_name);\n \n   if (debug)\n     fprintf (stderr, \"\\n\");"}]}