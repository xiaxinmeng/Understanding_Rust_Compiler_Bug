{"sha": "5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlMmNhOTZhZDM2ZDE2OGFmOWU0ZGNiMjNkNzZmYTViZTE2NjJmZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-21T06:13:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-21T06:13:14Z"}, "message": "Don't crash on invalid return statement.\n\nFrom-SVN: r168102", "tree": {"sha": "86fa2c10054e71197cdcaa139c51829167f7b92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86fa2c10054e71197cdcaa139c51829167f7b92d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe/comments", "author": null, "committer": null, "parents": [{"sha": "bc77e3e1610f6392b56a7175ac56408760ddbedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc77e3e1610f6392b56a7175ac56408760ddbedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc77e3e1610f6392b56a7175ac56408760ddbedf"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "97b89551e279f4684cd76261319a3b20dae474b9", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "patch": "@@ -2567,6 +2567,8 @@ Return_statement::do_get_tree(Translate_context* context)\n {\n   Function* function = context->function()->func_value();\n   tree fndecl = function->get_decl();\n+  if (fndecl == error_mark_node || DECL_RESULT(fndecl) == error_mark_node)\n+    return error_mark_node;\n \n   const Typed_identifier_list* results = this->results_;\n \n@@ -2580,6 +2582,8 @@ Return_statement::do_get_tree(Translate_context* context)\n       tree set;\n       if (retval == NULL_TREE)\n \tset = NULL_TREE;\n+      else if (retval == error_mark_node)\n+\treturn error_mark_node;\n       else\n \tset = fold_build2_loc(this->location(), MODIFY_EXPR, void_type_node,\n \t\t\t      DECL_RESULT(fndecl), retval);\n@@ -2591,13 +2595,13 @@ Return_statement::do_get_tree(Translate_context* context)\n     {\n       gcc_assert(!VOID_TYPE_P(TREE_TYPE(TREE_TYPE(fndecl))));\n       tree val = (*this->vals_->begin())->get_tree(context);\n-      if (val == error_mark_node)\n-\treturn error_mark_node;\n       gcc_assert(results != NULL && results->size() == 1);\n       val = Expression::convert_for_assignment(context,\n \t\t\t\t\t       results->begin()->type(),\n \t\t\t\t\t       (*this->vals_->begin())->type(),\n \t\t\t\t\t       val, this->location());\n+      if (val == error_mark_node)\n+\treturn error_mark_node;\n       tree set = build2(MODIFY_EXPR, void_type_node,\n \t\t\tDECL_RESULT(fndecl), val);\n       SET_EXPR_LOCATION(set, this->location());\n@@ -2618,11 +2622,11 @@ Return_statement::do_get_tree(Translate_context* context)\n \t{\n \t  gcc_assert(pv != this->vals_->end());\n \t  tree val = (*pv)->get_tree(context);\n-\t  if (val == error_mark_node)\n-\t    return error_mark_node;\n \t  val = Expression::convert_for_assignment(context, pr->type(),\n \t\t\t\t\t\t   (*pv)->type(), val,\n \t\t\t\t\t\t   this->location());\n+\t  if (val == error_mark_node)\n+\t    return error_mark_node;\n \t  tree set = build2(MODIFY_EXPR, void_type_node,\n \t\t\t    build3(COMPONENT_REF, TREE_TYPE(field),\n \t\t\t\t   retvar, field, NULL_TREE),"}]}