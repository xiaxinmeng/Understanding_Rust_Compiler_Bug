{"sha": "9bd0510849773836fce158f056b7d1f81d01f961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkMDUxMDg0OTc3MzgzNmZjZTE1OGYwNTZiN2QxZjgxZDAxZjk2MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-08-10T13:06:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-08-10T13:06:52Z"}, "message": "lib1funcs.asm (__aeabi_uidiv, [...]): New aliases.\n\n\t* config/arm/lib1funcs.asm (__aeabi_uidiv, __aeabi_idiv): New aliases.\n\t* config/arm/libgcc-bpabi.ver (GCC_3.5): Add __aeabi_idiv,\n\t__aeabi_uidiv, __aeabi_uread4, __aeabi_uread8, __aeabi_uwrite4\n\tand __aeabi_uwrite8.\n\t* config/arm/unaligned-funcs.c: New file.\n\t* config/arm/t-bpabi (LIB2FUNCS_EXTRA): Add unaligned-funcs.c.\n\nFrom-SVN: r102947", "tree": {"sha": "3a9f557e2583324e47fe3e9182f54c00f6e3aaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a9f557e2583324e47fe3e9182f54c00f6e3aaa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd0510849773836fce158f056b7d1f81d01f961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd0510849773836fce158f056b7d1f81d01f961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd0510849773836fce158f056b7d1f81d01f961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd0510849773836fce158f056b7d1f81d01f961/comments", "author": null, "committer": null, "parents": [{"sha": "defb77dcaa265e418d04840b4d0dc69288690b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defb77dcaa265e418d04840b4d0dc69288690b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defb77dcaa265e418d04840b4d0dc69288690b26"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "8092a46e2bb44873b3523e0b7f8d85887233d6f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -1,3 +1,12 @@\n+2005-08-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/arm/lib1funcs.asm (__aeabi_uidiv, __aeabi_idiv): New aliases.\n+\t* config/arm/libgcc-bpabi.ver (GCC_3.5): Add __aeabi_idiv,\n+\t__aeabi_uidiv, __aeabi_uread4, __aeabi_uread8, __aeabi_uwrite4\n+\tand __aeabi_uwrite8.\n+\t* config/arm/unaligned-funcs.c: New file.\n+\t* config/arm/t-bpabi (LIB2FUNCS_EXTRA): Add unaligned-funcs.c.\n+\n 2005-08-09  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* bb-reorder.c (pass_duplicate_computed_gotos, pass_partition_blocks):"}, {"sha": "3c6c1fe047f7f5eb9ddb9eaa2b348b372ac1cb28", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -702,6 +702,7 @@ LSYM(Lgot_result):\n #ifdef L_udivsi3\n \n \tFUNC_START udivsi3\n+\tFUNC_ALIAS aeabi_uidiv udivsi3\n \n #ifdef __thumb__\n \n@@ -812,6 +813,7 @@ LSYM(Lover10):\n #ifdef L_divsi3\n \n \tFUNC_START divsi3\t\n+\tFUNC_ALIAS aeabi_idiv divsi3\n \n #ifdef __thumb__\n \tcmp\tdivisor, #0"}, {"sha": "2f259eb646e0b271c1eaffcaaadaed802520c5c9", "filename": "gcc/config/arm/libgcc-bpabi.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -42,6 +42,7 @@ GCC_3.5 {\n   __aeabi_fsub\n   __aeabi_i2d\n   __aeabi_i2f\n+  __aeabi_idiv\n   __aeabi_idiv0\n   __aeabi_idivmod\n   __aeabi_l2d\n@@ -55,11 +56,16 @@ GCC_3.5 {\n   __aeabi_lmul\n   __aeabi_ui2d\n   __aeabi_ui2f\n+  __aeabi_uidiv\n   __aeabi_uidivmod\n   __aeabi_uldivmod\n   __aeabi_ulcmp\n   __aeabi_ul2d\n   __aeabi_ul2f\n+  __aeabi_uread4\n+  __aeabi_uread8\n+  __aeabi_uwrite4\n+  __aeabi_uwrite8\n \n   # Exception-Handling\n   # \\S 7.5"}, {"sha": "34981078e0eadbccc2e11cbcffb45e43a412f69d", "filename": "gcc/config/arm/t-bpabi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bpabi?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -3,7 +3,8 @@ LIB1ASMFUNCS += _aeabi_lcmp _aeabi_ulcmp _aeabi_ldivmod _aeabi_uldivmod \\\n   _unwind\n \n # Add the BPABI C functions.\n-LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c \\\n+\t\t  $(srcdir)/config/arm/unaligned-funcs.c\n \n UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n LIB2ADDEH = $(srcdir)/config/arm/unwind-arm.c \\"}, {"sha": "44aef8cad9df52df14761fcda4c059e46d4730ef", "filename": "gcc/config/arm/unaligned-funcs.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Funaligned-funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Fconfig%2Farm%2Funaligned-funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funaligned-funcs.c?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -0,0 +1,62 @@\n+/* EABI unaligned read/write functions.\n+\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+int __aeabi_uread4 (void *);\n+int __aeabi_uwrite4 (int, void *);\n+long long __aeabi_uread8 (void *);\n+long long __aeabi_uwrite8 (long long, void *);\n+\n+struct __attribute__((packed)) u4 { int data; };\n+struct __attribute__((packed)) u8 { long long data; };\n+\n+int\n+__aeabi_uread4 (void *ptr)\n+{\n+  return ((struct u4 *) ptr)->data;\n+}\n+\n+int\n+__aeabi_uwrite4 (int data, void *ptr)\n+{\n+  ((struct u4 *) ptr)->data = data;\n+  return data;\n+}\n+\n+long long\n+__aeabi_uread8 (void *ptr)\n+{\n+  return ((struct u8 *) ptr)->data;\n+}\n+\n+long long\n+__aeabi_uwrite8 (long long data, void *ptr)\n+{\n+  ((struct u8 *) ptr)->data = data;\n+  return data;\n+}"}, {"sha": "effde2ea49ef4d45ad4db2a67f338d8d435f76ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -1,3 +1,8 @@\n+2005-08-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.dg/arm-eabi1.c: Test aeabi_idiv, __aeabi_uidiv, __aeabi_uread4,\n+\t__aeabi_uread8, __aeabi_uwrite4 and __aeabi_uwrite8.\n+\n 2005-08-10  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/20646"}, {"sha": "f80f98085d311fe000fa9eb91dcade7e3c681c19", "filename": "gcc/testsuite/gcc.dg/arm-eabi1.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0510849773836fce158f056b7d1f81d01f961/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c?ref=9bd0510849773836fce158f056b7d1f81d01f961", "patch": "@@ -23,9 +23,8 @@\n    require the use of inline assembly to test.  It would be good to\n    add such tests, but they have not yet been implemented.  \n \n-   There are also no tests for the \"division by zero\", \"unaligned\n-   memory access\", \"memory copying, clearing, and setting\"\n-   functions.  */\n+   There are also no tests for the \"division by zero\", \"memory copying,\n+   clearing, and setting\" functions.  */\n \n #include <stdio.h>\n #include <stdlib.h>\n@@ -74,6 +73,12 @@ extern long long __aeabi_llsr (long long, int);\n extern long long __aeabi_lasr (long long, int);\n extern int __aeabi_lcmp (long long, long long);\n extern int __aeabi_ulcmp (unsigned long long, unsigned long long);\n+extern int __aeabi_idiv (int, int);\n+extern unsigned int __aeabi_uidiv (unsigned int, unsigned int);\n+extern int __eabi_uread4 (void *);\n+extern int __eabi_uwrite4 (int, void *);\n+extern long long __eabi_uread8 (void *);\n+extern long long __eabi_uwrite8 (long long, void *);\n \n #define eq(a, b, type, abs, epsilon, format)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n@@ -99,6 +104,9 @@ extern int __aeabi_ulcmp (unsigned long long, unsigned long long);\n #define deq(a, b) eq (a, b, double, fabs, depsilon, \"%g\")\n \n int main () {\n+  unsigned char bytes[256];\n+  int i;\n+\n   /* Table 2.  Double-precision floating-point arithmetic.  */\n   deq (__aeabi_dadd (dzero, done), done);\n   deq (__aeabi_dadd (done, done), dtwo);\n@@ -232,4 +240,30 @@ int main () {\n   ieq (__aeabi_ulcmp (0LL, 1LL), -1);\n   ieq (__aeabi_ulcmp (0LL, 0LL), 0);\n   ieq (__aeabi_ulcmp (1LL, 0LL), 1);\n+\n+  ieq (__aeabi_idiv (-550, 11), -50);\n+  ueq (__aeabi_uidiv (4000000000U, 1000000U), 4000U);\n+\n+  for (i = 0; i < 256; i++)\n+    bytes[i] = i;\n+\n+#ifdef __ARMEB__\n+  ieq (__aeabi_uread4 (bytes + 1), 0x01020304U);\n+  leq (__aeabi_uread8 (bytes + 3), 0x030405060708090aLL);\n+  ieq (__aeabi_uwrite4 (0x66778899U, bytes + 5), 0x66778899U);\n+  leq (__aeabi_uwrite8 (0x2030405060708090LL, bytes + 15),\n+       0x2030405060708090LL);\n+#else\n+  ieq (__aeabi_uread4 (bytes + 1), 0x04030201U);\n+  leq (__aeabi_uread8 (bytes + 3), 0x0a09080706050403LL);\n+  ieq (__aeabi_uwrite4 (0x99887766U, bytes + 5), 0x99887766U);\n+  leq (__aeabi_uwrite8 (0x9080706050403020LL, bytes + 15),\n+       0x9080706050403020LL);\n+#endif\n+\n+  for (i = 0; i < 4; i++)\n+    ieq (bytes[5 + i], (6 + i) * 0x11);\n+\n+  for (i = 0; i < 8; i++)\n+    ieq (bytes[15 + i], (2 + i) * 0x10);\n }"}]}