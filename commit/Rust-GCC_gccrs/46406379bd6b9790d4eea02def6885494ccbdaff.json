{"sha": "46406379bd6b9790d4eea02def6885494ccbdaff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0MDYzNzliZDZiOTc5MGQ0ZWVhMDJkZWY2ODg1NDk0Y2NiZGFmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-28T19:42:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-28T19:42:28Z"}, "message": "arm.md (return peepholes): Update to reflect the new call insn patterns.\n\n        * config/arm/arm.md (return peepholes): Update to reflect the new\n        call insn patterns.\n        * config/arm/arm.c (arm_volatile_func): Also check\n        current_function_nothrow.\n        (output_return_instruction, output_func_prologue): Use it.\n        (arm_output_epilogue, arm_expand_prologue): Likewise.\n\nFrom-SVN: r32788", "tree": {"sha": "0617cdec9d93d73187f76f60984da9a00dfec999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0617cdec9d93d73187f76f60984da9a00dfec999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46406379bd6b9790d4eea02def6885494ccbdaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46406379bd6b9790d4eea02def6885494ccbdaff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46406379bd6b9790d4eea02def6885494ccbdaff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46406379bd6b9790d4eea02def6885494ccbdaff/comments", "author": null, "committer": null, "parents": [{"sha": "da3d4dfa91a591ace5286a262e7cc817a60b5827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3d4dfa91a591ace5286a262e7cc817a60b5827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3d4dfa91a591ace5286a262e7cc817a60b5827"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "41f37415ed8832ba98037892c8b98eccb68e2641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46406379bd6b9790d4eea02def6885494ccbdaff", "patch": "@@ -1,3 +1,12 @@\n+2000-03-28  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* config/arm/arm.md (return peepholes): Update to reflect the new\n+\tcall insn patterns.\n+\t* config/arm/arm.c (arm_volatile_func): Also check\n+\tcurrent_function_nothrow.\n+\t(output_return_instruction, output_func_prologue): Use it.\n+\t(arm_output_epilogue, arm_expand_prologue): Likewise.\n+\n 2000-03-27  Tom Tromey  <tromey@cygnus.com>\n \n \t* gcc.c (handle_braces): In {x*...} case, break out of loop if"}, {"sha": "adeeae7ce95235c7ee41a5a3f84df7345a6ff555", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=46406379bd6b9790d4eea02def6885494ccbdaff", "patch": "@@ -5781,8 +5781,7 @@ output_return_instruction (operand, really_return, reverse)\n {\n   char instr[100];\n   int reg, live_regs = 0;\n-  int volatile_func = (optimize > 0 \n-\t\t       && TREE_THIS_VOLATILE (current_function_decl));\n+  int volatile_func = arm_volatile_func ();\n \n   return_used_this_function = 1;\n \n@@ -5914,7 +5913,8 @@ output_return_instruction (operand, really_return, reverse)\n int\n arm_volatile_func ()\n {\n-  return (optimize > 0 && TREE_THIS_VOLATILE (current_function_decl));\n+  return (optimize > 0 && current_function_nothrow\n+\t  && TREE_THIS_VOLATILE (current_function_decl));\n }\n \n /* Write the function name into the code section, directly preceding\n@@ -5977,8 +5977,7 @@ output_func_prologue (f, frame_size)\n      int frame_size;\n {\n   int reg, live_regs_mask = 0;\n-  int volatile_func = (optimize > 0\n-\t\t       && TREE_THIS_VOLATILE (current_function_decl));\n+  int volatile_func = arm_volatile_func ();\n \n   /* Nonzero if we must stuff some register arguments onto the stack as if\n      they were passed there.  */\n@@ -6056,8 +6055,7 @@ arm_output_epilogue ()\n   rtx operands[3];\n   int frame_size = get_frame_size ();\n   FILE *f = asm_out_file;\n-  int volatile_func = (optimize > 0\n-\t\t       && TREE_THIS_VOLATILE (current_function_decl));\n+  int volatile_func = arm_volatile_func ();\n \n   if (use_return_insn (FALSE) && return_used_this_function)\n     return \"\";\n@@ -6408,8 +6406,7 @@ arm_expand_prologue ()\n   int store_arg_regs = 0;\n   /* If this function doesn't return, then there is no need to push\n      the call-saved regs.  */\n-  int volatile_func = (optimize > 0\n-\t\t       && TREE_THIS_VOLATILE (current_function_decl));\n+  int volatile_func = arm_volatile_func ();\n   rtx insn;\n \n   /* Naked functions don't have prologues.  */"}, {"sha": "314beac05d9b8f09b562ece4efc593ebecc12858", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46406379bd6b9790d4eea02def6885494ccbdaff/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=46406379bd6b9790d4eea02def6885494ccbdaff", "patch": "@@ -6356,6 +6356,7 @@\n (define_peephole\n   [(parallel [(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n \t\t\t  (match_operand:SI 1 \"general_operand\" \"g\"))\n+\t\t    (use (match_operand:SI 2 \"\" \"\"))\n \t\t    (clobber (reg:SI 14))])\n    (return)]\n   \"(GET_CODE (operands[0]) == SYMBOL_REF && USE_RETURN_INSN (FALSE)\n@@ -6384,6 +6385,7 @@\n   [(parallel [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n \t\t   (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\")))\n+\t      (use (match_operand:SI 3 \"\" \"\"))\n \t      (clobber (reg:SI 14))])\n    (return)]\n   \"(GET_CODE (operands[1]) == SYMBOL_REF && USE_RETURN_INSN (FALSE)\n@@ -6415,6 +6417,7 @@\n   [(parallel [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n \t\t   (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\")))\n+\t      (use (match_operand:SI 3 \"\" \"\"))\n \t      (clobber (reg:SI 14))])\n    (use (match_dup 0))\n    (return)]"}]}