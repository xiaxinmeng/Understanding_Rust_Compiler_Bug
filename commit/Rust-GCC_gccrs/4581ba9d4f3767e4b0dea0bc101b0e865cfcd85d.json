{"sha": "4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4MWJhOWQ0ZjM3NjdlNGIwZGVhMGJjMTAxYjBlODY1Y2ZjZDg1ZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-05-09T11:21:01Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-05-09T11:21:01Z"}, "message": "re PR libfortran/19155 ([4.0 only] blanks not treated as zeros in 'E' format read (NIST FM110.FOR))\n\n\tPR libfortran/19155\n\t* io/read.c (read_f): Accept 'e', 'E', 'd' and 'D' as first\n\tnon-blank characters of a real number.\n\t* gfortran.dg/pr19155.f: New test.\n\nFrom-SVN: r99424", "tree": {"sha": "7986eb5beb061270c1c86ffeaa510692657c6378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7986eb5beb061270c1c86ffeaa510692657c6378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbcb8fcd4e2627b062cb46083da89f919ae799e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbcb8fcd4e2627b062cb46083da89f919ae799e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbcb8fcd4e2627b062cb46083da89f919ae799e"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "b83ef7cd512e383acf1ffc308e31077de9161de1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "patch": "@@ -1,3 +1,8 @@\n+2005-05-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/19155\n+\t* gfortran.dg/pr19155.f: New test.\n+\n 2005-05-08  Roger Sayle  <roger@eyesopen.com>\n \n \tPR inline-asm/8788"}, {"sha": "ccd391520b129677ee7160fbbfbe3e9f5fbf1148", "filename": "gcc/testsuite/gfortran.dg/pr19155.f", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f?ref=4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+!\n+! PR libfortran/19155\n+! We accept 'E+00' as a valid real number. The standard says it is not,\n+! but doesn't require us to issue an error. Since g77 accepts this as zero,\n+! we do the same.\n+      real a\n+      a = 42\n+      open (19,status='scratch')\n+      write (19,'(A15)') 'E+00'\n+      rewind (19)\n+      read (19,'(E15.8)') a\n+      if (a .ne. 0) call abort\n+      close (19)\n+      end"}, {"sha": "c91b98cb4ae84c99c5566ba220d63213ef627bae", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "patch": "@@ -1,3 +1,9 @@\n+2005-05-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/19155\n+\t* io/read.c (read_f): Accept 'e', 'E', 'd' and 'D' as first\n+\tnon-blank characters of a real number.\n+\n 2005-05-04  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21354"}, {"sha": "865eb68caf84430a258ff6e2a0e329f6ec728faf", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=4581ba9d4f3767e4b0dea0bc101b0e865cfcd85d", "patch": "@@ -892,7 +892,7 @@ open_internal (char *base, int length)\n  * around it. */\n \n static stream *\n-fd_to_stream (int fd, int prot)\n+fd_to_stream (int fd, int prot, int avoid_mmap)\n {\n   struct stat statbuf;\n   unix_stream *s;\n@@ -911,7 +911,10 @@ fd_to_stream (int fd, int prot)\n   s->file_length = S_ISREG (statbuf.st_mode) ? statbuf.st_size : -1;\n \n #if HAVE_MMAP\n-  mmap_open (s);\n+  if (avoid_mmap)\n+    fd_open (s);\n+  else\n+    mmap_open (s);\n #else\n   fd_open (s);\n #endif\n@@ -1153,7 +1156,7 @@ open_external (unit_flags *flags)\n       internal_error (\"open_external(): Bad action\");\n     }\n \n-  return fd_to_stream (fd, prot);\n+  return fd_to_stream (fd, prot, 0);\n }\n \n \n@@ -1163,7 +1166,7 @@ open_external (unit_flags *flags)\n stream *\n input_stream (void)\n {\n-  return fd_to_stream (STDIN_FILENO, PROT_READ);\n+  return fd_to_stream (STDIN_FILENO, PROT_READ, 1);\n }\n \n \n@@ -1173,7 +1176,7 @@ input_stream (void)\n stream *\n output_stream (void)\n {\n-  return fd_to_stream (STDOUT_FILENO, PROT_WRITE);\n+  return fd_to_stream (STDOUT_FILENO, PROT_WRITE, 1);\n }\n \n \n@@ -1183,7 +1186,7 @@ output_stream (void)\n stream *\n error_stream (void)\n {\n-  return fd_to_stream (STDERR_FILENO, PROT_WRITE);\n+  return fd_to_stream (STDERR_FILENO, PROT_WRITE, 1);\n }\n \n /* init_error_stream()-- Return a pointer to the error stream.  This"}]}