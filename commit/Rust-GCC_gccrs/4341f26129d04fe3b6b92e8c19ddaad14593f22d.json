{"sha": "4341f26129d04fe3b6b92e8c19ddaad14593f22d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0MWYyNjEyOWQwNGZlM2I2YjkyZThjMTlkZGFhZDE0NTkzZjIyZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-08T12:32:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-08T12:32:19Z"}, "message": "re PR lto/50747 (ICE in produce_symtab, at lto-streamer-out.c:1435)\n\n2011-12-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/50747\n\t* lto-streamer-out.c (produce_symtab): Remove asserts.\n\n\t* g++.dg/opt/pr50747-1_0.C: New testcase.\n\t* g++.dg/opt/pr50747-2_0.C: Likewise.\n\nFrom-SVN: r182108", "tree": {"sha": "1f7fb017d2dd22276b4e2f71fd3fd1a72e5b5a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7fb017d2dd22276b4e2f71fd3fd1a72e5b5a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4341f26129d04fe3b6b92e8c19ddaad14593f22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4341f26129d04fe3b6b92e8c19ddaad14593f22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4341f26129d04fe3b6b92e8c19ddaad14593f22d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4341f26129d04fe3b6b92e8c19ddaad14593f22d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "befa62e74e117f401f2520a985e820fc1fff4399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/befa62e74e117f401f2520a985e820fc1fff4399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/befa62e74e117f401f2520a985e820fc1fff4399"}], "stats": {"total": 147, "additions": 142, "deletions": 5}, "files": [{"sha": "5b4eab59f5b4f6e5e47e59cb1571827d3cd44f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4341f26129d04fe3b6b92e8c19ddaad14593f22d", "patch": "@@ -1,3 +1,8 @@\n+2011-12-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/50747\n+\t* lto-streamer-out.c (produce_symtab): Remove asserts.\n+\n 2011-12-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/49945"}, {"sha": "80bf9e9fd4f80e671b02b43549b005ac70231be1", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=4341f26129d04fe3b6b92e8c19ddaad14593f22d", "patch": "@@ -1450,11 +1450,7 @@ produce_symtab (struct output_block *ob,\n \t them indirectly or via vtables.  Do not output them to symbol\n \t table: they end up being undefined and just consume space.  */\n       if (!node->address_taken && !node->callers)\n-\t{\n-\t  gcc_assert (node->analyzed);\n-\t  gcc_assert (DECL_DECLARED_INLINE_P (node->decl));\n-\t  continue;\n-\t}\n+\tcontinue;\n       if (DECL_COMDAT (node->decl)\n \t  && cgraph_comdat_can_be_unshared_p (node))\n \tcontinue;"}, {"sha": "7cc35007745be4b47145712d7d49f899feea2a42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4341f26129d04fe3b6b92e8c19ddaad14593f22d", "patch": "@@ -1,3 +1,9 @@\n+2011-12-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/50747\n+\t* g++.dg/opt/pr50747-1_0.C: New testcase.\n+\t* g++.dg/opt/pr50747-2_0.C: Likewise.\n+\n 2011-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20111208-1.c: New test."}, {"sha": "4a5546c638e22e25fac175d8c4e74d4e75c0e87a", "filename": "gcc/testsuite/g++.dg/opt/pr50747-1_0.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-1_0.C?ref=4341f26129d04fe3b6b92e8c19ddaad14593f22d", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-require-effective-target lto }\n+// { dg-options \"-flto\" }\n+\n+void foo();\n+\n+static void bar() __attribute__((weakref(\"foo\")));\n+\n+struct A\n+{\n+    A();\n+};\n+\n+int i;\n+\n+template <typename T, int&> struct B : T {};\n+\n+B<A, i> b;"}, {"sha": "26f423af631b86eca96b32fb25d2aa86f844d1a5", "filename": "gcc/testsuite/g++.dg/opt/pr50747-2_0.C", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341f26129d04fe3b6b92e8c19ddaad14593f22d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr50747-2_0.C?ref=4341f26129d04fe3b6b92e8c19ddaad14593f22d", "patch": "@@ -0,0 +1,112 @@\n+// { dg-do compile }\n+// { dg-require-effective-target lto }\n+// { dg-options \"-w -fpermissive -fno-implicit-templates -flto\" }\n+\n+namespace std {\n+    typedef long unsigned int size_t;\n+    template<typename _Alloc>     class allocator;\n+    template<class _CharT>     struct char_traits;\n+    template<typename _CharT, typename _Traits = char_traits<_CharT> >     class basic_ostream;\n+    template<typename _CharT, typename _Traits = char_traits<_CharT>,     typename _Alloc = allocator<_CharT> >     class basic_ostringstream;\n+}\n+extern \"C++\" {\n+    namespace std {\n+\tclass exception   {\n+\t};\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class new_allocator     {\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class allocator: public __gnu_cxx::new_allocator<_Tp>     {\n+    public:       typedef size_t size_type;\n+\t\t  template<typename _Tp1>         struct rebind         {\n+\t\t      typedef allocator<_Tp1> other;\n+\t\t  };\n+    };\n+    template<typename _CharT, typename _Traits, typename _Alloc>     class basic_string     {\n+\ttypedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;\n+\ttypedef typename _CharT_alloc_type::size_type size_type;\n+    private:       struct _Rep_base       {\n+\t\t   };\n+\t\t   struct _Rep : _Rep_base       {\n+\t\t       _CharT*  _M_refdata() throw()  {\n+\t\t       }\n+\t\t   };\n+\t\t   struct _Alloc_hider : _Alloc       {\n+\t\t       _Alloc_hider(_CharT* __dat, const _Alloc& __a)  : _Alloc(__a), _M_p(__dat) {\n+\t\t       }\n+\t\t       _CharT* _M_p;\n+\t\t   };\n+    private:       mutable _Alloc_hider _M_dataplus;\n+\t\t   static _Rep&       _S_empty_rep()       {\n+\t\t   }\n+    public:       basic_string()       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) {\n+\t\t  }\n+\t\t  template<class _InputIterator>         basic_string(_InputIterator __beg, _InputIterator __end,        const _Alloc& __a = _Alloc());\n+\t\t  static _CharT*       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);\n+    };\n+    template<typename _CharT, typename _Traits, typename _Alloc>     inline basic_ostream<_CharT, _Traits>&     operator<<(basic_ostream<_CharT, _Traits>& __os,         const basic_string<_CharT, _Traits, _Alloc>& __str)     {\n+    }\n+    template<typename _CharT, typename _Traits, typename _Alloc>     template<typename _InputIterator>     basic_string<_CharT, _Traits, _Alloc>::     basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)     : _M_dataplus(_S_construct(__beg, __end, __a), __a)     {\n+    };\n+    enum _Ios_Openmode     {\n+\t_S_app = 1L << 0,       _S_ate = 1L << 1,       _S_bin = 1L << 2,       _S_in = 1L << 3,       _S_out = 1L << 4,       _S_trunc = 1L << 5,       _S_ios_openmode_end = 1L << 16     };\n+    class ios_base   {\n+    public:     class failure : public exception     {\n+\t\t};\n+\t\ttypedef _Ios_Openmode openmode;\n+\t\tstatic const openmode in = _S_in;\n+\t\tstatic const openmode out = _S_out;\n+    };\n+    template<typename _CharT, typename _Traits>     class basic_streambuf     {\n+    public:       typedef _CharT char_type;\n+\t\t  char_type*       egptr() const {\n+\t\t  }\n+\t\t  char_type*       pbase() const {\n+\t\t  }\n+\t\t  char_type*       pptr() const {\n+\t\t  }\n+    };\n+    template<typename _CharT, typename _Traits>     class basic_ios : public ios_base     {\n+    };\n+    template<typename _CharT, typename _Traits>     class basic_ostream : virtual public basic_ios<_CharT, _Traits>     {\n+    };\n+    template<typename _CharT, typename _Traits, typename _Alloc>     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>     {\n+    public:       typedef _CharT char_type;\n+\t\t  typedef _Traits traits_type;\n+\t\t  typedef basic_streambuf<char_type, traits_type> __streambuf_type;\n+\t\t  typedef basic_string<char_type, _Traits, _Alloc> __string_type;\n+    protected:       ios_base::openmode _M_mode;\n+\t\t     __string_type _M_string;\n+    public:       explicit       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)       : __streambuf_type(), _M_mode(__mode), _M_string()       {\n+\t\t  }\n+\t\t  __string_type       str() const       {\n+\t\t      __string_type __ret;\n+\t\t      if (this->pptr())    {\n+\t\t\t  if (this->pptr() > this->egptr())        __ret = __string_type(this->pbase(), this->pptr());\n+\t\t      }\n+\t\t  }\n+    };\n+    template <typename _CharT, typename _Traits, typename _Alloc>     class basic_ostringstream : public basic_ostream<_CharT, _Traits>     {\n+    public:       typedef _CharT char_type;\n+\t\t  typedef _Traits traits_type;\n+\t\t  typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n+\t\t  typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;\n+\t\t  typedef basic_ostream<char_type, traits_type> __ostream_type;\n+    private:       __stringbuf_type _M_stringbuf;\n+    public:       explicit       basic_ostringstream(ios_base::openmode __mode = ios_base::out)       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)       {\n+\t\t  }\n+\t\t   __string_type       str() const       {\n+\t\t       return _M_stringbuf.str();\n+\t\t   }\n+    };\n+    template<typename _Tp> class complex;\n+    template<typename _Tp, typename _CharT, class _Traits>     basic_ostream<_CharT, _Traits>&     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)     {\n+\tbasic_ostringstream<_CharT, _Traits> __s;\n+\treturn __os << __s.str();\n+    };\n+    template     basic_ostream<wchar_t, char_traits<wchar_t> >&     operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,                const complex<long double>&);\n+}"}]}