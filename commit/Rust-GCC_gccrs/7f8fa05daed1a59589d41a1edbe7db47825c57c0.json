{"sha": "7f8fa05daed1a59589d41a1edbe7db47825c57c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4ZmEwNWRhZWQxYTU5NTg5ZDQxYTFlZGJlN2RiNDc4MjVjNTdjMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-07T21:53:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-07T21:53:31Z"}, "message": "alloca.c, [...]: Improve manual formatting.\n\n\t* alloca.c, clock.c, getcwd.c, getpagesize.c, getpwd.c, index.c,\n\tlibiberty.texi, memchr.c, putenv.c, rindex.c, strchr.c, strdup.c,\n\tstrerror.c, strrchr.c, strstr.c, strtod.c, tmpnam.c, vfork.c,\n\txatexit.c, xmalloc.c, xstrerror.c: Improve manual formatting.  Fix\n\tspelling.  Give names to function arguments in documentation.  Use\n\t(void) prototypes in documentation.\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r46068", "tree": {"sha": "12540ed2bdf09e822d8d7262f4f4319edd0771c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12540ed2bdf09e822d8d7262f4f4319edd0771c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8fa05daed1a59589d41a1edbe7db47825c57c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8fa05daed1a59589d41a1edbe7db47825c57c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8fa05daed1a59589d41a1edbe7db47825c57c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8fa05daed1a59589d41a1edbe7db47825c57c0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc712abf045f954314de6c463816ecfbde58ba71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc712abf045f954314de6c463816ecfbde58ba71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc712abf045f954314de6c463816ecfbde58ba71"}], "stats": {"total": 130, "additions": 70, "deletions": 60}, "files": [{"sha": "93408dc3b973671c32f70f698d4670e543b33555", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -1,3 +1,13 @@\n+2001-10-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* alloca.c, clock.c, getcwd.c, getpagesize.c, getpwd.c, index.c,\n+\tlibiberty.texi, memchr.c, putenv.c, rindex.c, strchr.c, strdup.c,\n+\tstrerror.c, strrchr.c, strstr.c, strtod.c, tmpnam.c, vfork.c,\n+\txatexit.c, xmalloc.c, xstrerror.c: Improve manual formatting.  Fix\n+\tspelling.  Give names to function arguments in documentation.  Use\n+\t(void) prototypes in documentation.\n+\t* functions.texi: Regenerate.\n+\n 2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* argv.c (buildargv, tests, main): Const-ify."}, {"sha": "e98a053fbee5651f91af963b87d5109a90c749bd", "filename": "libiberty/alloca.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -23,7 +23,7 @@\n \n /*\n \n-@deftypefn Replacement void* alloca (size_t)\n+@deftypefn Replacement void* alloca (size_t @var{size})\n \n This function allocates memory which will be automatically reclaimed\n after the procedure exits.  The @libib{} implementation does not free\n@@ -36,7 +36,7 @@ GNU Autoconf test @code{AC_FUNC_ALLOCA} to test for and properly make\n available this function.  The @code{AC_FUNC_ALLOCA} test requires that\n client code use a block of preprocessor code to be safe (see the Autoconf\n manual for more); this header incorporates that logic and more, including\n-the possibility of a GCC builtin function.\n+the possibility of a GCC built-in function.\n \n @end deftypefn\n "}, {"sha": "3ea70c31c603a10851fde24b6bd0968ec5b932e6", "filename": "libiberty/clock.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fclock.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -24,7 +24,7 @@ the executable file might be covered by the GNU General Public License. */\n \n /*\n \n-@deftypefn Supplemental long clock ()\n+@deftypefn Supplemental long clock (void)\n \n Returns an approximation of the CPU time used by the process as a\n @code{clock_t}; divide this number by @samp{CLOCKS_PER_SEC} to get the"}, {"sha": "4ce7e9caa9d169a6be96554363fafc5f6959825f", "filename": "libiberty/functions.texi", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -4,7 +4,7 @@\n @c and let gather-docs build you a new copy.\n \n @c alloca.c:26\n-@deftypefn Replacement void* alloca (size_t)\n+@deftypefn Replacement void* alloca (size_t @var{size})\n \n This function allocates memory which will be automatically reclaimed\n after the procedure exits.  The @libib{} implementation does not free\n@@ -17,7 +17,7 @@ GNU Autoconf test @code{AC_FUNC_ALLOCA} to test for and properly make\n available this function.  The @code{AC_FUNC_ALLOCA} test requires that\n client code use a block of preprocessor code to be safe (see the Autoconf\n manual for more); this header incorporates that logic and more, including\n-the possibility of a GCC builtin function.\n+the possibility of a GCC built-in function.\n \n @end deftypefn\n \n@@ -86,7 +86,7 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n @end deftypefn\n \n @c clock.c:27\n-@deftypefn Supplemental long clock ()\n+@deftypefn Supplemental long clock (void)\n \n Returns an approximation of the CPU time used by the process as a\n @code{clock_t}; divide this number by @samp{CLOCKS_PER_SEC} to get the\n@@ -105,28 +105,28 @@ fact, the manual page for @code{perror(3C)} explicitly warns that one\n should check the size of the table (@code{sys_nerr}) before indexing\n it, since new error codes may be added to the system before they are\n added to the table.  Thus @code{sys_nerr} might be smaller than value\n-implied by the largest @code{errno} value defined in @file{errno.h}.\n+implied by the largest @code{errno} value defined in @code{<errno.h>}.\n \n We return the maximum value that can be used to obtain a meaningful\n symbolic name or message.\n \n @end deftypefn\n \n @c getcwd.c:6\n-@deftypefn Supplemental char* getcwd (char *@var{pathname}, @var{len})\n+@deftypefn Supplemental char* getcwd (char *@var{pathname}, int @var{len})\n \n Copy the absolute pathname for the current working directory into\n @var{pathname}, which is assumed to point to a buffer of at least\n @var{len} bytes, and return a pointer to the buffer.  If the current\n directory's path doesn't fit in @var{len} characters, the result is\n-NULL and @var{errno} is set.  If @var{pathname} is a null pointer,\n+@code{NULL} and @code{errno} is set.  If @var{pathname} is a null pointer,\n @code{getcwd} will obtain @var{len} bytes of space using\n @code{malloc}.\n \n @end deftypefn\n \n @c getpagesize.c:5\n-@deftypefn Supplemental int getpagesize ()\n+@deftypefn Supplemental int getpagesize (void)\n \n Returns the number of bytes in a page of memory.  This is the\n granularity of many of the system memory management routines.  No\n@@ -136,7 +136,7 @@ memory management hardware page size.\n @end deftypefn\n \n @c getpwd.c:5\n-@deftypefn Supplemental char* getpwd ()\n+@deftypefn Supplemental char* getpwd (void)\n \n Returns the current working directory.  This implementation caches the\n result on the assumption that the process will not call @code{chdir}\n@@ -148,20 +148,20 @@ between calls to @code{getpwd}.\n @deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n \n Returns a pointer to the first occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  The use of @code{index} is\n+the string @var{s}, or @code{NULL} if not found.  The use of @code{index} is\n deprecated in new programs in favor of @code{strchr}.\n \n @end deftypefn\n \n @c memchr.c:3\n @deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n \n-This function searches memory starting at @code{*}@var{src} for the\n+This function searches memory starting at @code{*@var{s}} for the\n character @var{c}.  The search only ends with the first occurrence of\n @var{c}, or after @var{length} characters; in particular, a null\n character does not terminate the search.  If the character @var{c} is\n-found within @var{length} characters of @code{*}@var{src}, a pointer\n-to the character is returned. If @var{c} is not found, then NULL is\n+found within @var{length} characters of @code{*@var{s}}, a pointer\n+to the character is returned.  If @var{c} is not found, then @code{NULL} is\n returned.\n \n @end deftypefn\n@@ -206,7 +206,7 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n \n Uses @code{setenv} or @code{unsetenv} to put @var{string} into\n the environment or remove it.  If @var{string} is of the form\n-@samp{name=value} the string is added; if no `=' is present the\n+@samp{name=value} the string is added; if no @samp{=} is present the\n name is unset/removed.\n \n @end deftypefn\n@@ -223,7 +223,7 @@ exists, it is removed.\n @deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n \n Returns a pointer to the last occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n+the string @var{s}, or @code{NULL} if not found.  The use of @code{rindex} is\n deprecated in new programs in favor of @code{strrchr}.\n \n @end deftypefn\n@@ -260,7 +260,7 @@ A case-insensitive @code{strcmp}.\n @deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n \n Returns a pointer to the first occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+the string @var{s}, or @code{NULL} if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n @end deftypefn\n@@ -269,7 +269,7 @@ null character, the results are undefined.\n @deftypefn Supplemental char* strdup (const char *@var{s})\n \n Returns a pointer to a copy of @var{s} in memory obtained from\n-@code{malloc}, or NULL if insufficient memory was available.\n+@code{malloc}, or @code{NULL} if insufficient memory was available.\n \n @end deftypefn\n \n@@ -278,15 +278,15 @@ Returns a pointer to a copy of @var{s} in memory obtained from\n \n Given an error number returned from a system call (typically returned\n in @code{errno}), returns a pointer to a string containing the\n-symbolic name of that error number, as found in @file{errno.h}.\n+symbolic name of that error number, as found in @code{<errno.h>}.\n \n If the supplied error number is within the valid range of indices for\n symbolic names, but no name is available for the particular error\n number, then returns the string @samp{\"Error @var{num}\"}, where @var{num}\n is the error number.\n \n If the supplied error number is not within the range of valid\n-indices, then returns NULL.\n+indices, then returns @code{NULL}.\n \n The contents of the location pointed to are only guaranteed to be\n valid until the next call to @code{strerrno}.\n@@ -307,7 +307,7 @@ error number, then returns the string @samp{\"Error @var{num}\"}, where\n @var{num} is the error number.\n \n If the supplied error number is not a valid index into\n-@code{sys_errlist}, returns NULL.\n+@code{sys_errlist}, returns @code{NULL}.\n \n The returned string is only guaranteed to be valid only until the\n next call to @code{strerror}.\n@@ -333,7 +333,7 @@ Compares the first @var{n} bytes of two strings, returning a value as\n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n Returns a pointer to the last occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+the string @var{s}, or @code{NULL} if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n @end deftypefn\n@@ -343,7 +343,7 @@ null character, the results are undefined.\n \n This function searches for the substring @var{sub} in the string\n @var{string}, not including the terminating null characters.  A pointer\n-to the first occurrence of @var{sub} is returned, or NULL if the\n+to the first occurrence of @var{sub} is returned, or @code{NULL} if the\n substring is absent.  If @var{sub} points to a string with zero\n length, the function returns @var{string}.\n \n@@ -353,7 +353,7 @@ length, the function returns @var{string}.\n @deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n \n This ANSI C function converts the initial portion of @var{string} to a\n-@code{double}.  If @var{endptr} is not NULL, a pointer to the\n+@code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the\n character after the last character used in the conversion is stored in\n the location referenced by @var{endptr}.  If no conversion is\n performed, zero is returned and the value of @var{string} is stored in\n@@ -364,7 +364,7 @@ the location referenced by @var{endptr}.\n @c strerror.c:730\n @deftypefn Replacement int strtoerrno (const char *@var{name})\n \n-Given the symbolic name of a error number (e.g., @code{EACCESS}), map it\n+Given the symbolic name of a error number (e.g., @code{EACCES}), map it\n to an errno value.  If no translation is found, returns 0.\n \n @end deftypefn\n@@ -389,13 +389,13 @@ When the base is 16 (either explicitly or implicitly), a prefix of\n This function attempts to create a name for a temporary file, which\n will be a valid file name yet not exist when @code{tmpnam} checks for\n it.  @var{s} must point to a buffer of at least @code{L_tmpnam} bytes,\n-or be NULL.  Use of this function creates a security risk, and it must\n+or be @code{NULL}.  Use of this function creates a security risk, and it must\n not be used in new projects.  Use @code{mkstemp} instead.\n \n @end deftypefn\n \n @c vfork.c:6\n-@deftypefn Supplemental int vfork ()\n+@deftypefn Supplemental int vfork (void)\n \n Emulates @code{vfork} by calling @code{fork} and returning its value.\n \n@@ -428,14 +428,14 @@ does the return value.  The third argument is unused in @libib{}.\n @deftypefun int xatexit (void (*@var{fn}) (void))\n \n Behaves as the standard @code{atexit} function, but with no limit on\n-the number of registered functions.  Returns 0 on success, or -1 on\n+the number of registered functions.  Returns 0 on success, or @minus{}1 on\n failure.  If you use @code{xatexit} to register functions, you must use\n @code{xexit} to terminate your program.\n \n @end deftypefun\n \n @c xmalloc.c:38\n-@deftypefn Replacement void* xcalloc (size_t, size_t)\n+@deftypefn Replacement void* xcalloc (size_t @var{nelem}, size_t @var{elsize})\n \n Allocate memory without fail, and set it to zero.  This routine functions\n like @code{calloc}, but will behave the same as @code{xmalloc} if memory\n@@ -491,7 +491,7 @@ allocated, the remaining memory is zeroed.\n @end deftypefn\n \n @c xmalloc.c:32\n-@deftypefn Replacement void* xrealloc (void*, size_t)\n+@deftypefn Replacement void* xrealloc (void *@var{ptr}, size_t @var{size})\n Reallocate memory without fail.  This routine functions like @code{realloc},\n but will behave the same as @code{xmalloc} if memory cannot be found.\n \n@@ -509,7 +509,7 @@ obtain memory.\n @deftypefn Replacement char* xstrerror (int @var{errnum})\n \n Behaves exactly like the standard @code{strerror} function, but\n-will never return a NULL pointer.\n+will never return a @code{NULL} pointer.\n \n @end deftypefn\n "}, {"sha": "465b4e0b2aa430ff80b48f6a2ce57e1d416f9cba", "filename": "libiberty/getcwd.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetcwd.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -3,13 +3,13 @@\n \n /*\n \n-@deftypefn Supplemental char* getcwd (char *@var{pathname}, @var{len})\n+@deftypefn Supplemental char* getcwd (char *@var{pathname}, int @var{len})\n \n Copy the absolute pathname for the current working directory into\n @var{pathname}, which is assumed to point to a buffer of at least\n @var{len} bytes, and return a pointer to the buffer.  If the current\n directory's path doesn't fit in @var{len} characters, the result is\n-NULL and @var{errno} is set.  If @var{pathname} is a null pointer,\n+@code{NULL} and @code{errno} is set.  If @var{pathname} is a null pointer,\n @code{getcwd} will obtain @var{len} bytes of space using\n @code{malloc}.\n "}, {"sha": "eed9680378a7813a2f94c1877f8d1af12ede4352", "filename": "libiberty/getpagesize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetpagesize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetpagesize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpagesize.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -2,7 +2,7 @@\n \n /*\n \n-@deftypefn Supplemental int getpagesize ()\n+@deftypefn Supplemental int getpagesize (void)\n \n Returns the number of bytes in a page of memory.  This is the\n granularity of many of the system memory management routines.  No"}, {"sha": "f508b1e21e520a2e4343d5a53241e860a6056932", "filename": "libiberty/getpwd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpwd.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -2,7 +2,7 @@\n \n /*\n \n-@deftypefn Supplemental char* getpwd ()\n+@deftypefn Supplemental char* getpwd (void)\n \n Returns the current working directory.  This implementation caches the\n result on the assumption that the process will not call @code{chdir}"}, {"sha": "a2e272783b908824d6903fd8ddaf9ecdb90d2c5e", "filename": "libiberty/index.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Findex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Findex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Findex.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -5,7 +5,7 @@\n @deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n \n Returns a pointer to the first occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  The use of @code{index} is\n+the string @var{s}, or @code{NULL} if not found.  The use of @code{index} is\n deprecated in new programs in favor of @code{strchr}.\n \n @end deftypefn"}, {"sha": "4b60d6a07fb9d10f77d13e73450cc2ef57653581", "filename": "libiberty/libiberty.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -65,7 +65,8 @@ Copyright @copyright{} 2001 Free Software Foundation, Inc.\n       section entitled ``GNU Free Documentation License''.\n \n @end titlepage\n-\n+@contents\n+@page\n \n @ifnottex\n @node    Top,Using,,\n@@ -319,6 +320,5 @@ SUCH DAMAGE.\n \n @printindex cp\n \n-@contents\n @bye\n "}, {"sha": "f94bea018f53e351bebcccb8f8e80331426d6672", "filename": "libiberty/memchr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemchr.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -2,12 +2,12 @@\n \n @deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n \n-This function searches memory starting at @code{*}@var{src} for the\n+This function searches memory starting at @code{*@var{s}} for the\n character @var{c}.  The search only ends with the first occurrence of\n @var{c}, or after @var{length} characters; in particular, a null\n character does not terminate the search.  If the character @var{c} is\n-found within @var{length} characters of @code{*}@var{src}, a pointer\n-to the character is returned. If @var{c} is not found, then NULL is\n+found within @var{length} characters of @code{*@var{s}}, a pointer\n+to the character is returned.  If @var{c} is not found, then @code{NULL} is\n returned.\n \n @end deftypefn"}, {"sha": "58012fc83ad27828f692fcb280e8b7afa9b0b4c2", "filename": "libiberty/putenv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fputenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fputenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fputenv.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -22,7 +22,7 @@\n \n Uses @code{setenv} or @code{unsetenv} to put @var{string} into\n the environment or remove it.  If @var{string} is of the form\n-@samp{name=value} the string is added; if no `=' is present the\n+@samp{name=value} the string is added; if no @samp{=} is present the\n name is unset/removed.\n \n @end deftypefn"}, {"sha": "ef9cdc59877dc1a83ce479786c88ca913579dfaa", "filename": "libiberty/rindex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Frindex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Frindex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frindex.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -5,7 +5,7 @@\n @deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n \n Returns a pointer to the last occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n+the string @var{s}, or @code{NULL} if not found.  The use of @code{rindex} is\n deprecated in new programs in favor of @code{strrchr}.\n \n @end deftypefn"}, {"sha": "1f71c5143d08814b675d80e01a886e6741a4276c", "filename": "libiberty/strchr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrchr.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -6,7 +6,7 @@\n @deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n \n Returns a pointer to the first occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+the string @var{s}, or @code{NULL} if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n @end deftypefn"}, {"sha": "49233ba7aac99603030a43264b5e7ea8b08149d3", "filename": "libiberty/strdup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrdup.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -3,7 +3,7 @@\n @deftypefn Supplemental char* strdup (const char *@var{s})\n \n Returns a pointer to a copy of @var{s} in memory obtained from\n-@code{malloc}, or NULL if insufficient memory was available.\n+@code{malloc}, or @code{NULL} if insufficient memory was available.\n \n @end deftypefn\n "}, {"sha": "37fbf4d0a8bc7aea20c48d59c976f3408a24d06e", "filename": "libiberty/strerror.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -573,7 +573,7 @@ fact, the manual page for @code{perror(3C)} explicitly warns that one\n should check the size of the table (@code{sys_nerr}) before indexing\n it, since new error codes may be added to the system before they are\n added to the table.  Thus @code{sys_nerr} might be smaller than value\n-implied by the largest @code{errno} value defined in @file{errno.h}.\n+implied by the largest @code{errno} value defined in @code{<errno.h>}.\n \n We return the maximum value that can be used to obtain a meaningful\n symbolic name or message.\n@@ -612,7 +612,7 @@ error number, then returns the string @samp{\"Error @var{num}\"}, where\n @var{num} is the error number.\n \n If the supplied error number is not a valid index into\n-@code{sys_errlist}, returns NULL.\n+@code{sys_errlist}, returns @code{NULL}.\n \n The returned string is only guaranteed to be valid only until the\n next call to @code{strerror}.\n@@ -671,15 +671,15 @@ strerror (errnoval)\n \n Given an error number returned from a system call (typically returned\n in @code{errno}), returns a pointer to a string containing the\n-symbolic name of that error number, as found in @file{errno.h}.\n+symbolic name of that error number, as found in @code{<errno.h>}.\n \n If the supplied error number is within the valid range of indices for\n symbolic names, but no name is available for the particular error\n number, then returns the string @samp{\"Error @var{num}\"}, where @var{num}\n is the error number.\n \n If the supplied error number is not within the range of valid\n-indices, then returns NULL.\n+indices, then returns @code{NULL}.\n \n The contents of the location pointed to are only guaranteed to be\n valid until the next call to @code{strerrno}.\n@@ -729,7 +729,7 @@ strerrno (errnoval)\n \n @deftypefn Replacement int strtoerrno (const char *@var{name})\n \n-Given the symbolic name of a error number (e.g., @code{EACCESS}), map it\n+Given the symbolic name of a error number (e.g., @code{EACCES}), map it\n to an errno value.  If no translation is found, returns 0.\n \n @end deftypefn"}, {"sha": "bc380c4c5d30946700c33fea0563381f23fe3cdd", "filename": "libiberty/strrchr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrrchr.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -6,7 +6,7 @@\n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n Returns a pointer to the last occurrence of the character @var{c} in\n-the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+the string @var{s}, or @code{NULL} if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n @end deftypefn"}, {"sha": "470e04b1a7613c0e848aa39d6775a2a34912cf44", "filename": "libiberty/strstr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -7,7 +7,7 @@\n \n This function searches for the substring @var{sub} in the string\n @var{string}, not including the terminating null characters.  A pointer\n-to the first occurrence of @var{sub} is returned, or NULL if the\n+to the first occurrence of @var{sub} is returned, or @code{NULL} if the\n substring is absent.  If @var{sub} points to a string with zero\n length, the function returns @var{string}.\n "}, {"sha": "874e5e5241626dc3819a1c84fefac50c8dbe7bea", "filename": "libiberty/strtod.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrtod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fstrtod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtod.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -27,7 +27,7 @@ the executable file might be covered by the GNU General Public License. */\n @deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n \n This ANSI C function converts the initial portion of @var{string} to a\n-@code{double}.  If @var{endptr} is not NULL, a pointer to the\n+@code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the\n character after the last character used in the conversion is stored in\n the location referenced by @var{endptr}.  If no conversion is\n performed, zero is returned and the value of @var{string} is stored in"}, {"sha": "406878c49a3eadcac4772f55a4c7bb4bffcbef53", "filename": "libiberty/tmpnam.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Ftmpnam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Ftmpnam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftmpnam.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -5,7 +5,7 @@\n This function attempts to create a name for a temporary file, which\n will be a valid file name yet not exist when @code{tmpnam} checks for\n it.  @var{s} must point to a buffer of at least @code{L_tmpnam} bytes,\n-or be NULL.  Use of this function creates a security risk, and it must\n+or be @code{NULL}.  Use of this function creates a security risk, and it must\n not be used in new projects.  Use @code{mkstemp} instead.\n \n @end deftypefn"}, {"sha": "4aa5c21d42714793fab1de8a42180f66a7f03af9", "filename": "libiberty/vfork.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fvfork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fvfork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfork.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -3,7 +3,7 @@\n \n /*\n \n-@deftypefn Supplemental int vfork ()\n+@deftypefn Supplemental int vfork (void)\n \n Emulates @code{vfork} by calling @code{fork} and returning its value.\n "}, {"sha": "728254b2c0d818bf54e6ae172ccf162d291716b8", "filename": "libiberty/xatexit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxatexit.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -11,7 +11,7 @@\n @deftypefun int xatexit (void (*@var{fn}) (void))\n \n Behaves as the standard @code{atexit} function, but with no limit on\n-the number of registered functions.  Returns 0 on success, or -1 on\n+the number of registered functions.  Returns 0 on success, or @minus{}1 on\n failure.  If you use @code{xatexit} to register functions, you must use\n @code{xexit} to terminate your program.\n "}, {"sha": "bf0cf2d6ed4d546349e5ab480143ebaaf4113cca", "filename": "libiberty/xmalloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmalloc.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -29,13 +29,13 @@ a program to contain @code{#define malloc xmalloc} in its source.\n \n @end deftypefn\n \n-@deftypefn Replacement void* xrealloc (void*, size_t)\n+@deftypefn Replacement void* xrealloc (void *@var{ptr}, size_t @var{size})\n Reallocate memory without fail.  This routine functions like @code{realloc},\n but will behave the same as @code{xmalloc} if memory cannot be found.\n \n @end deftypefn\n \n-@deftypefn Replacement void* xcalloc (size_t, size_t)\n+@deftypefn Replacement void* xcalloc (size_t @var{nelem}, size_t @var{elsize})\n \n Allocate memory without fail, and set it to zero.  This routine functions\n like @code{calloc}, but will behave the same as @code{xmalloc} if memory"}, {"sha": "9000d178f9c286d683cda570c5ee3bc4309f1ab7", "filename": "libiberty/xstrerror.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fa05daed1a59589d41a1edbe7db47825c57c0/libiberty%2Fxstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrerror.c?ref=7f8fa05daed1a59589d41a1edbe7db47825c57c0", "patch": "@@ -7,7 +7,7 @@\n @deftypefn Replacement char* xstrerror (int @var{errnum})\n \n Behaves exactly like the standard @code{strerror} function, but\n-will never return a NULL pointer.\n+will never return a @code{NULL} pointer.\n \n @end deftypefn\n "}]}