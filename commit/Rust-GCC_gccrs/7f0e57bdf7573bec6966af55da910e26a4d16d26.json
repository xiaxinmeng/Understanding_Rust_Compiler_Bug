{"sha": "7f0e57bdf7573bec6966af55da910e26a4d16d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwZTU3YmRmNzU3M2JlYzY5NjZhZjU1ZGE5MTBlMjZhNGQxNmQyNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-03T20:20:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-03T20:20:36Z"}, "message": "i386.c (ix86_expand_store_builtin): Always force op1 to register.\n\n\t* i386.c (ix86_expand_store_builtin):  Always force op1 to register.\n\t(mov*_internal): Fix predicates; require one of operands to not be\n\tmemory.\n\t(SSE?MMX move expanders):  Fix predicates; force one of operands to\n\tregister.\n\t(SSE/MMX push patterns): Reorganize; fix x86-64 code generation.\n\t(movups/movupd/movdqu patterns): Force one of operands to not be\n\tmemory.\n\nFrom-SVN: r62339", "tree": {"sha": "d2ca5aa44ce0daa11bfa711e542c94abc5536fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ca5aa44ce0daa11bfa711e542c94abc5536fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0e57bdf7573bec6966af55da910e26a4d16d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0e57bdf7573bec6966af55da910e26a4d16d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0e57bdf7573bec6966af55da910e26a4d16d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0e57bdf7573bec6966af55da910e26a4d16d26/comments", "author": null, "committer": null, "parents": [{"sha": "7daebb7ae4a90b9463a5b6940977690e2da07ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daebb7ae4a90b9463a5b6940977690e2da07ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daebb7ae4a90b9463a5b6940977690e2da07ff9"}], "stats": {"total": 281, "additions": 130, "deletions": 151}, "files": [{"sha": "8deaf03973b057238b3484efa53185801e83f47b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f0e57bdf7573bec6966af55da910e26a4d16d26", "patch": "@@ -1,3 +1,14 @@\n+Mon Feb  3 21:19:11 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_expand_store_builtin):  Always force op1 to register.\n+\t(mov*_internal): Fix predicates; require one of operands to not be\n+\tmemory.\n+\t(SSE?MMX move expanders):  Fix predicates; force one of operands to\n+\tregister.\n+\t(SSE/MMX push patterns): Reorganize; fix x86-64 code generation.\n+\t(movups/movupd/movdqu patterns): Force one of operands to not be\n+\tmemory.\n+\n 2002-02-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* hooks.c (hook_rtx_rtx_identity): Generic hook function that"}, {"sha": "2d799bb653ce5c36745479a619c3bdef7baafcd6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7f0e57bdf7573bec6966af55da910e26a4d16d26", "patch": "@@ -13469,9 +13469,7 @@ ix86_expand_store_builtin (icode, arglist)\n     op1 = safe_vector_operand (op1, mode1);\n \n   op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n+  op1 = copy_to_mode_reg (mode1, op1);\n \n   pat = GEN_FCN (icode) (op0, op1);\n   if (pat)"}, {"sha": "292ddf371baabd3ae33af9db02d70661f0a2cc84", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 118, "deletions": 148, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0e57bdf7573bec6966af55da910e26a4d16d26/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7f0e57bdf7573bec6966af55da910e26a4d16d26", "patch": "@@ -18566,38 +18566,42 @@\n (define_insn \"movv8qi_internal\"\n   [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"=y,m\")\n \t(match_operand:V8QI 1 \"nonimmediate_operand\" \"ym,y\"))]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"movq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxmov\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"movv4hi_internal\"\n   [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=y,m\")\n \t(match_operand:V4HI 1 \"nonimmediate_operand\" \"ym,y\"))]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"movq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxmov\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"movv2si_internal\"\n   [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=y,m\")\n \t(match_operand:V2SI 1 \"nonimmediate_operand\" \"ym,y\"))]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"movq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=y,m\")\n         (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym,y\"))]\n-  \"TARGET_3DNOW\"\n+  \"TARGET_3DNOW\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"movq\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"movti\"\n-  [(set (match_operand:TI 0 \"general_operand\" \"\")\n-\t(match_operand:TI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE || TARGET_64BIT\"\n {\n   if (TARGET_64BIT)\n@@ -18610,7 +18614,8 @@\n (define_insn \"movv2df_internal\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n \t(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm,x\"))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   if (get_attr_mode (insn) == MODE_V4SF)\n     return \"movaps\\t{%1, %0|%0, %1}\";\n@@ -18638,7 +18643,8 @@\n (define_insn \"movv8hi_internal\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(match_operand:V8HI 1 \"nonimmediate_operand\" \"xm,x\"))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   if (get_attr_mode (insn) == MODE_V4SF)\n     return \"movaps\\t{%1, %0|%0, %1}\";\n@@ -18666,7 +18672,8 @@\n (define_insn \"movv16qi_internal\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(match_operand:V16QI 1 \"nonimmediate_operand\" \"xm,x\"))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   if (get_attr_mode (insn) == MODE_V4SF)\n     return \"movaps\\t{%1, %0|%0, %1}\";\n@@ -18692,220 +18699,189 @@\n \t       (const_string \"TI\")))])\n \n (define_expand \"movv2df\"\n-  [(set (match_operand:V2DF 0 \"general_operand\" \"\")\n-\t(match_operand:V2DF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2DF 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_vector_move (V2DFmode, operands);\n   DONE;\n })\n \n (define_expand \"movv8hi\"\n-  [(set (match_operand:V8HI 0 \"general_operand\" \"\")\n-\t(match_operand:V8HI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_vector_move (V8HImode, operands);\n   DONE;\n })\n \n (define_expand \"movv16qi\"\n-  [(set (match_operand:V16QI 0 \"general_operand\" \"\")\n-\t(match_operand:V16QI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V16QI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_vector_move (V16QImode, operands);\n   DONE;\n })\n \n (define_expand \"movv4sf\"\n-  [(set (match_operand:V4SF 0 \"general_operand\" \"\")\n-\t(match_operand:V4SF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4SF 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_move (V4SFmode, operands);\n   DONE;\n })\n \n (define_expand \"movv4si\"\n-  [(set (match_operand:V4SI 0 \"general_operand\" \"\")\n-\t(match_operand:V4SI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4SI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_move (V4SImode, operands);\n   DONE;\n })\n \n (define_expand \"movv2di\"\n-  [(set (match_operand:V2DI 0 \"general_operand\" \"\")\n-\t(match_operand:V2DI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V2DI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2DI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_move (V2DImode, operands);\n   DONE;\n })\n \n (define_expand \"movv2si\"\n-  [(set (match_operand:V2SI 0 \"general_operand\" \"\")\n-\t(match_operand:V2SI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (V2SImode, operands);\n   DONE;\n })\n \n (define_expand \"movv4hi\"\n-  [(set (match_operand:V4HI 0 \"general_operand\" \"\")\n-\t(match_operand:V4HI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (V4HImode, operands);\n   DONE;\n })\n \n (define_expand \"movv8qi\"\n-  [(set (match_operand:V8QI 0 \"general_operand\" \"\")\n-\t(match_operand:V8QI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V8QI 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (V8QImode, operands);\n   DONE;\n })\n \n (define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"general_operand\" \"\")\n-\t(match_operand:V2SF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n    \"TARGET_3DNOW\"\n {\n   ix86_expand_vector_move (V2SFmode, operands);\n   DONE;\n })\n \n-(define_insn_and_split \"*pushti\"\n+(define_insn \"*pushti\"\n   [(set (match_operand:TI 0 \"push_operand\" \"=<\")\n-\t(match_operand:TI 1 \"nonmemory_operand\" \"x\"))]\n+\t(match_operand:TI 1 \"register_operand\" \"x\"))]\n   \"TARGET_SSE\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:TI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv2df\"\n+(define_insn \"*pushv2df\"\n   [(set (match_operand:V2DF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2DF 1 \"nonmemory_operand\" \"x\"))]\n-  \"TARGET_SSE2\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V2DF (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+\t(match_operand:V2DF 1 \"register_operand\" \"x\"))]\n+  \"TARGET_SSE\"\n+  \"#\")\n \n-(define_insn_and_split \"*pushv2di\"\n+(define_insn \"*pushv2di\"\n   [(set (match_operand:V2DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2DI 1 \"nonmemory_operand\" \"x\"))]\n+\t(match_operand:V2DI 1 \"register_operand\" \"x\"))]\n   \"TARGET_SSE2\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V2DI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv8hi\"\n+(define_insn \"*pushv8hi\"\n   [(set (match_operand:V8HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V8HI 1 \"nonmemory_operand\" \"x\"))]\n+\t(match_operand:V8HI 1 \"register_operand\" \"x\"))]\n   \"TARGET_SSE2\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V8HI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv16qi\"\n+(define_insn \"*pushv16qi\"\n   [(set (match_operand:V16QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V16QI 1 \"nonmemory_operand\" \"x\"))]\n+\t(match_operand:V16QI 1 \"register_operand\" \"x\"))]\n   \"TARGET_SSE2\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V16QI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv4sf\"\n+(define_insn \"*pushv4sf\"\n   [(set (match_operand:V4SF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4SF 1 \"nonmemory_operand\" \"x\"))]\n+\t(match_operand:V4SF 1 \"register_operand\" \"x\"))]\n   \"TARGET_SSE\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V4SF (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv4si\"\n+(define_insn \"*pushv4si\"\n   [(set (match_operand:V4SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4SI 1 \"nonmemory_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:V4SI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")])\n+\t(match_operand:V4SI 1 \"register_operand\" \"x\"))]\n+  \"TARGET_SSE2\"\n+  \"#\")\n \n-(define_insn_and_split \"*pushv2si\"\n+(define_insn \"*pushv2si\"\n   [(set (match_operand:V2SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2SI 1 \"nonmemory_operand\" \"y\"))]\n+\t(match_operand:V2SI 1 \"register_operand\" \"y\"))]\n   \"TARGET_MMX\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n-   (set (mem:V2SI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"mmx\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv4hi\"\n+(define_insn \"*pushv4hi\"\n   [(set (match_operand:V4HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4HI 1 \"nonmemory_operand\" \"y\"))]\n+\t(match_operand:V4HI 1 \"register_operand\" \"y\"))]\n   \"TARGET_MMX\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n-   (set (mem:V4HI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"mmx\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv8qi\"\n+(define_insn \"*pushv8qi\"\n   [(set (match_operand:V8QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V8QI 1 \"nonmemory_operand\" \"y\"))]\n+\t(match_operand:V8QI 1 \"register_operand\" \"y\"))]\n   \"TARGET_MMX\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n-   (set (mem:V8QI (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"mmx\")])\n+  \"#\")\n \n-(define_insn_and_split \"*pushv2sf\"\n+(define_insn \"*pushv2sf\"\n   [(set (match_operand:V2SF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2SF 1 \"nonmemory_operand\" \"y\"))]\n+\t(match_operand:V2SF 1 \"register_operand\" \"y\"))]\n   \"TARGET_3DNOW\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n-   (set (mem:V2SF (reg:SI 7)) (match_dup 1))]\n-  \"\"\n-  [(set_attr \"type\" \"mmx\")])\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand 0 \"push_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"\"))]\n+  \"!TARGET_64BIT && reload_completed\n+   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (match_dup 3)))\n+   (set (match_dup 2) (match_dup 1))]\n+  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n+\t\t\t\t stack_pointer_rtx);\n+   operands[3] = GEN_INT (GET_MODE_SIZE (GET_MODE (operands[0])));\")\n+\n+(define_split\n+  [(set (match_operand 0 \"push_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"\"))]\n+  \"TARGET_64BIT && reload_completed\n+   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (match_dup 3)))\n+   (set (match_dup 2) (match_dup 1))]\n+  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n+\t\t\t\t stack_pointer_rtx);\n+   operands[3] = GEN_INT (GET_MODE_SIZE (GET_MODE (operands[0])));\")\n+\n \n (define_insn \"movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:TI 1 \"general_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE && !TARGET_64BIT\"\n+  \"TARGET_SSE && !TARGET_64BIT\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n     {\n@@ -18998,21 +18974,19 @@\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t     UNSPEC_MOVA))]\n-  \"TARGET_SSE\"\n-  \"@\n-   movaps\\t{%1, %0|%0, %1}\n-   movaps\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movaps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov,ssemov\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse_movups\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t     UNSPEC_MOVU))]\n-  \"TARGET_SSE\"\n-  \"@\n-   movups\\t{%1, %0|%0, %1}\n-   movups\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movups\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt,ssecvt\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -22451,45 +22425,41 @@\n \n (define_insn \"sse2_movapd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"general_operand\" \"xm,x\")]\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t     UNSPEC_MOVA))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   movapd\\t{%1, %0|%0, %1}\n-   movapd\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movapd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse2_movupd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"general_operand\" \"xm,x\")]\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t     UNSPEC_MOVU))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   movupd\\t{%1, %0|%0, %1}\n-   movupd\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movupd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse2_movdqa\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"general_operand\" \"xm,x\")]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t       UNSPEC_MOVA))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   movdqa\\t{%1, %0|%0, %1}\n-   movdqa\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movdqa\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_movdqu\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"general_operand\" \"xm,x\")]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t       UNSPEC_MOVU))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   movdqu\\t{%1, %0|%0, %1}\n-   movdqu\\t{%1, %0|%0, %1}\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"movdqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n "}]}