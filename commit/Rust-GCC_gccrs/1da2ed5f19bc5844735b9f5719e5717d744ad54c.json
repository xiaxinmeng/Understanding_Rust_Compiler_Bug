{"sha": "1da2ed5f19bc5844735b9f5719e5717d744ad54c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhMmVkNWYxOWJjNTg0NDczNWI5ZjU3MTllNTcxN2Q3NDRhZDU0Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-27T20:16:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-27T20:16:07Z"}, "message": "diagnostic-core.h: New.\n\n\t* diagnostic-core.h: New.  Contents moved from diagnostic.h and\n\ttoplev.h.\n\t* diagnostic.c: Don't include toplev.h.\n\t(progname): Define.  Moved from toplev.c.\n\t(seen_error): New function.\n\t* diagnostic.h: Include diagnostic-core.h.\n\t(diagnostic_t, emit_diagnostic): Don't declare here.\n\t* toplev.c (progname): Move to toplev.c.\n\t(emit_debug_global_declarations, compile_file, finalize,\n\tdo_compile, toplev_main): Use seen_error.\n\t* toplev.h: Include diagnostic-core.h.\n\t(trim_filename, GCC_DIAG_STYLE, ATTRIBUTE_GCC_DIAG,\n\tinternal_error, warning, warning_at, error, error_n, error_at,\n\tfatal_error, pedwarn, permerror, sorry, inform, inform_n,\n\tverbatim, fnotice, progname): Move to diagnostic-core.h.\n\t* builtins.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(expand_builtin_expect): Use seen_error.\n\t* c-decl.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(c_make_fname_decl, c_write_global_declarations): Use seen_error.\n\t* c-format.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* c-gimplify.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* c-lang.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* c-lex.c (c_lex_with_flags, interpret_float): Don't increment\n\terrorcount for errors.\n\t* c-opts.c (c_common_finish): Use seen_error.\n\t* cgraph.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* cgraphunit.c (verify_cgraph_node, verify_cgraph,\n\tcgraph_output_pending_asms, cgraph_optimize): Use seen_error.\n\t* coverage.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(get_coverage_counts): Use seen_error.\n\t* dwarf2out.c (dwarf2out_finish): Use seen_error.\n\t* gimplify.c (gimplify_var_or_parm_decl, gimple_push_cleanup,\n\tgimplify_body): Use seen_error.\n\t* ipa-inline.c (cgraph_early_inlining): Use seen_error.\n\t* ipa-pure-const.c (gate_pure_const): Use seen_error.\n\t* ipa-reference.c (gate_reference): Use seen_error.\n\t* jump.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* lambda-code.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t* lto-cgraph.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* lto-compress.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t* lto-section-in.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t* lto-streamer-out.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t* lto-streamer.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t(gate_lto_out): Use seen_error.\n\t* matrix-reorg.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t* omega.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* omp-low.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(gate_expand_omp, lower_omp_1): Use seen_error.\n\t* passes.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(rest_of_decl_compilation, rest_of_type_compilation,\n\tgate_rest_of_compilation, ipa_write_summaries): Use seen_error.\n\t* tree-cfg.c (label_to_block_fn): Use seen_error.\n\t* tree-inline.c (optimize_inline_calls): Use seen_error.\n\t* tree-mudflap.c (mudflap_finish_file): Use\n\tseen_error.\n\t* tree-optimize.c (gate_all_optimizations,\n\tgate_all_early_local_passes, gate_all_early_optimizations): Use\n\tseen_error.\n\t* tree-ssa-structalias.c (gate_ipa_pta): Use seen_error.\n\t* varpool.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(varpool_remove_unreferenced_decls,\n\tvarpool_assemble_pending_decls): Use seen_error.\n\t* Makefile.in (DIAGNOSTIC_CORE_H): Define.\n\t(TOPLEV_H, DIAGNOSTIC_H): Update.\n\t(c-decl.o, c-lang.o, c-format.o, lto-compress.o, lto-cgraph.o,\n\tlto-streamer-out.o, lto-section-in.o, lto-streamer.o,\n\tc-gimplify.o, omp-low.o, omega.o, diagnostic.o, passes.o,\n\tbuiltins.o, jump.o, cgraph.o, varpool.o, matrix-reorg.o,\n\tcoverage.o, lambda-code.o): Update dependencies.\n\ncp:\n\t* call.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* cp-lang.c: Don't include diagnostic.h\n\t* name-lookup.c: Include diagnostic-core.h instead of\n\tdiagnostic.h.\n\t(cp_emit_debug_info_for_using): Use seen_error.\n\t* optimize.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* parser.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* pt.c (iterative_hash_template_arg): Use seen_error.\n\t* repo.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* typeck2.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* Make-lang.in (cp/cp-lang.o, cp/typeck2.o, cp/call.o, cp/repo.o,\n\tcp/optimize.o, cp/parser.o, cp/name-lookup.o): Update\n\tdependencies.\n\nlto:\n\t* lto.c: Include diagnostic-core.h instead of diagnostic.h.\n\t(read_cgraph_and_symbols, lto_main): Use seen_error.\n\t* Make-lang.in (lto/lto.o): Update dependencies.\n\nobjc:\n\t* objc-act.c: Include diagnostic-core.h instead of diagnostic.h.\n\t* Make-lang.in (objc/objc-act.o): Update dependencies.\n\nFrom-SVN: r159947", "tree": {"sha": "7e6bdfc2594989da541ce8acef151a526222f9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6bdfc2594989da541ce8acef151a526222f9a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1da2ed5f19bc5844735b9f5719e5717d744ad54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da2ed5f19bc5844735b9f5719e5717d744ad54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da2ed5f19bc5844735b9f5719e5717d744ad54c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da2ed5f19bc5844735b9f5719e5717d744ad54c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe08ec120475d4da4837d0cb5b13d2e6d38fa56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe08ec120475d4da4837d0cb5b13d2e6d38fa56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe08ec120475d4da4837d0cb5b13d2e6d38fa56f"}], "stats": {"total": 533, "additions": 340, "deletions": 193}, "files": [{"sha": "3576b0f1aaf65ab1a4a01295d2f4cced39602cd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,3 +1,81 @@\n+2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* diagnostic-core.h: New.  Contents moved from diagnostic.h and\n+\ttoplev.h.\n+\t* diagnostic.c: Don't include toplev.h.\n+\t(progname): Define.  Moved from toplev.c.\n+\t(seen_error): New function.\n+\t* diagnostic.h: Include diagnostic-core.h.\n+\t(diagnostic_t, emit_diagnostic): Don't declare here.\n+\t* toplev.c (progname): Move to toplev.c.\n+\t(emit_debug_global_declarations, compile_file, finalize,\n+\tdo_compile, toplev_main): Use seen_error.\n+\t* toplev.h: Include diagnostic-core.h.\n+\t(trim_filename, GCC_DIAG_STYLE, ATTRIBUTE_GCC_DIAG,\n+\tinternal_error, warning, warning_at, error, error_n, error_at,\n+\tfatal_error, pedwarn, permerror, sorry, inform, inform_n,\n+\tverbatim, fnotice, progname): Move to diagnostic-core.h.\n+\t* builtins.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(expand_builtin_expect): Use seen_error.\n+\t* c-decl.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(c_make_fname_decl, c_write_global_declarations): Use seen_error.\n+\t* c-format.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* c-gimplify.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* c-lang.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* c-lex.c (c_lex_with_flags, interpret_float): Don't increment\n+\terrorcount for errors.\n+\t* c-opts.c (c_common_finish): Use seen_error.\n+\t* cgraph.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* cgraphunit.c (verify_cgraph_node, verify_cgraph,\n+\tcgraph_output_pending_asms, cgraph_optimize): Use seen_error.\n+\t* coverage.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(get_coverage_counts): Use seen_error.\n+\t* dwarf2out.c (dwarf2out_finish): Use seen_error.\n+\t* gimplify.c (gimplify_var_or_parm_decl, gimple_push_cleanup,\n+\tgimplify_body): Use seen_error.\n+\t* ipa-inline.c (cgraph_early_inlining): Use seen_error.\n+\t* ipa-pure-const.c (gate_pure_const): Use seen_error.\n+\t* ipa-reference.c (gate_reference): Use seen_error.\n+\t* jump.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* lambda-code.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t* lto-cgraph.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* lto-compress.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t* lto-section-in.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t* lto-streamer-out.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t* lto-streamer.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t(gate_lto_out): Use seen_error.\n+\t* matrix-reorg.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t* omega.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* omp-low.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(gate_expand_omp, lower_omp_1): Use seen_error.\n+\t* passes.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(rest_of_decl_compilation, rest_of_type_compilation,\n+\tgate_rest_of_compilation, ipa_write_summaries): Use seen_error.\n+\t* tree-cfg.c (label_to_block_fn): Use seen_error.\n+\t* tree-inline.c (optimize_inline_calls): Use seen_error.\n+\t* tree-mudflap.c (mudflap_finish_file): Use\n+\tseen_error.\n+\t* tree-optimize.c (gate_all_optimizations,\n+\tgate_all_early_local_passes, gate_all_early_optimizations): Use\n+\tseen_error.\n+\t* tree-ssa-structalias.c (gate_ipa_pta): Use seen_error.\n+\t* varpool.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(varpool_remove_unreferenced_decls,\n+\tvarpool_assemble_pending_decls): Use seen_error.\n+\t* Makefile.in (DIAGNOSTIC_CORE_H): Define.\n+\t(TOPLEV_H, DIAGNOSTIC_H): Update.\n+\t(c-decl.o, c-lang.o, c-format.o, lto-compress.o, lto-cgraph.o,\n+\tlto-streamer-out.o, lto-section-in.o, lto-streamer.o,\n+\tc-gimplify.o, omp-low.o, omega.o, diagnostic.o, passes.o,\n+\tbuiltins.o, jump.o, cgraph.o, varpool.o, matrix-reorg.o,\n+\tcoverage.o, lambda-code.o): Update dependencies.\n+\n 2010-05-25  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/44188"}, {"sha": "209395722872a00e41117ac0a47d0d1d96bab66a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -859,7 +859,7 @@ endif\n \n # Shorthand variables for dependency lists.\n EXCEPT_H = except.h $(HASHTAB_H) vecprim.h vecir.h\n-TOPLEV_H = toplev.h $(INPUT_H) bversion.h\n+TOPLEV_H = toplev.h $(INPUT_H) bversion.h $(DIAGNOSTIC_CORE_H)\n TARGET_H = $(TM_H) target.h insn-modes.h\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n HOOKS_H = hooks.h $(MACHMODE_H)\n@@ -942,7 +942,8 @@ TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H) vecprim.h\n TREE_VECTORIZER_H = tree-vectorizer.h $(TREE_DATA_REF_H)\n SSAEXPAND_H = ssaexpand.h $(TREE_SSA_LIVE_H)\n PRETTY_PRINT_H = pretty-print.h $(INPUT_H) $(OBSTACK_H)\n-DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H)\n+DIAGNOSTIC_CORE_H = diagnostic-core.h input.h diagnostic.def\n+DIAGNOSTIC_H = diagnostic.h $(DIAGNOSTIC_CORE_H) $(PRETTY_PRINT_H)\n C_PRETTY_PRINT_H = c-pretty-print.h $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n SCEV_H = tree-scalar-evolution.h $(GGC_H) tree-chrec.h $(PARAMS_H)\n LAMBDA_H = lambda.h $(TREE_H) vec.h $(GGC_H)\n@@ -1991,13 +1992,13 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n     opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) $(HASHTAB_H) libfuncs.h \\\n     $(EXCEPT_H) $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n-    $(DIAGNOSTIC_H) $(INPUT_H) langhooks.h tree-mudflap.h  \\\n+    $(DIAGNOSTIC_CORE_H) $(INPUT_H) langhooks.h tree-mudflap.h \\\n     pointer-set.h tree-iterator.h c-lang.h $(PLUGIN_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) \\\n     $(TOPLEV_H) langhooks.h $(TREE_FLOW_H) tree-iterator.h c-lang.h\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(C_TREE_H) $(DIAGNOSTIC_H) \\\n+    $(C_TREE_H) $(DIAGNOSTIC_CORE_H) \\\n     langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-c.h \\\n     c-objc-common.h $(C_PRAGMA_H) c-common.def $(TREE_INLINE_H)\n stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n@@ -2091,7 +2092,7 @@ attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(TARGET_H) langhooks.h $(CPPLIB_H) $(PLUGIN_H)\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n-\t$(C_COMMON_H) $(FLAGS_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) alloc-pool.h \\\n+\t$(C_COMMON_H) $(FLAGS_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_CORE_H) alloc-pool.h \\\n \tc-format.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2227,13 +2228,13 @@ double-int.o: double-int.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n # lto-compress.o needs $(ZLIBINC) added to the include flags.\n lto-compress.o: lto-compress.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TREE_H) langhooks.h $(LTO_HEADER_H) $(LTO_SECTION_H) \\\n-\tlto-compress.h $(DIAGNOSTIC_H) $(TOPLEV_H)\n+\tlto-compress.h $(DIAGNOSTIC_CORE_H) $(TOPLEV_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(ZLIBINC) $< $(OUTPUT_OPTION)\n \n lto-cgraph.o: lto-cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) langhooks.h $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n+   $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_CORE_H) \\\n    except.h $(TIMEVAR_H) output.h pointer-set.h $(LTO_STREAMER_H) $(GCOV_IO_H)\n lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n@@ -2244,11 +2245,11 @@ lto-streamer-out.o : lto-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(TREE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) tree-iterator.h \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) \\\n-   $(DIAGNOSTIC_H) except.h $(LTO_STREAMER_H) $(TOPLEV_H)\n+   $(DIAGNOSTIC_CORE_H) except.h $(LTO_STREAMER_H) $(TOPLEV_H)\n lto-section-in.o: lto-section-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) \\\n-   $(GGC_H) $(DIAGNOSTIC_H) except.h $(TIMEVAR_H) output.h \\\n+   $(GGC_H) $(DIAGNOSTIC_CORE_H) except.h $(TIMEVAR_H) output.h \\\n    $(LTO_STREAMER_H) lto-compress.h\n lto-section-out.o : lto-section-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(TREE_H) $(EXPR_H) $(PARAMS_H) input.h \\\n@@ -2263,7 +2264,7 @@ lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(TARGET_H) $(TOPLEV_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n-   $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(LTO_SYMTAB_H) $(TOPLEV_H)\n+   $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(LTO_SYMTAB_H) $(TOPLEV_H)\n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(TOPLEV_H) $(TREE_INLINE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) \\\n    langhooks.h $(TARGET_H) $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n@@ -2558,7 +2559,7 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_PASS_H) $(CFGLOOP_H) $(EXCEPT_H) $(REGSET_H)\n \n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n-   $(C_TREE_H) $(C_COMMON_H) $(DIAGNOSTIC_H) $(GIMPLE_H) \\\n+   $(C_TREE_H) $(C_COMMON_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) \\\n    $(FLAGS_H) langhooks.h $(TOPLEV_H) $(RTL_H) $(TREE_FLOW_H) $(LANGHOOKS_DEF_H) \\\n    $(TM_H) coretypes.h $(C_PRETTY_PRINT_H) $(CGRAPH_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h $(TREE_DUMP_H) $(TREE_INLINE_H)\n@@ -2581,15 +2582,15 @@ gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) $(TREE_PASS_H) \\\n    $(HASHTAB_H) $(TOPLEV_H) tree-iterator.h\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_H) \\\n+   $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(TIMEVAR_H) $(FLAGS_H) $(EXPR_H) $(TOPLEV_H) \\\n    $(TREE_PASS_H) $(GGC_H) $(EXCEPT_H) $(SPLAY_TREE_H) $(OPTABS_H) \\\n    $(CFGLOOP_H) tree-iterator.h gt-omp-low.h\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    $(TM_H) coretypes.h tree-pretty-print.h\n omega.o : omega.c omega.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) $(TREE_PASS_H) $(PARAMS_H)\n+   $(GGC_H) $(TREE_H) $(DIAGNOSTIC_CORE_H) $(TREE_PASS_H) $(PARAMS_H)\n tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TREE_H) $(SCEV_H) $(TREE_PASS_H) $(PARAMS_H) \\\n    $(DIAGNOSTIC_H) $(CFGLOOP_H) $(TREE_FLOW_H) $(FLAGS_H) tree-pretty-print.h\n@@ -2746,8 +2747,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\\n    $(GIMPLE_H) realmpfr.h\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   version.h $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n-   diagnostic.def\n+   version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c opts.h options.h $(TOPLEV_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n@@ -2787,7 +2787,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \n passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) $(INSN_ATTR_H) output.h \\\n-   $(DIAGNOSTIC_H) debug.h insn-config.h intl.h $(RECOG_H) $(TOPLEV_H) \\\n+   $(DIAGNOSTIC_CORE_H) debug.h insn-config.h intl.h $(RECOG_H) $(TOPLEV_H) \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(EXCEPT_H) $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n@@ -2861,7 +2861,8 @@ builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(EXPR_H) $(OPTABS_H) insn-config.h $(RECOG_H) output.h typeclass.h \\\n    hard-reg-set.h $(TOPLEV_H) hard-reg-set.h $(EXCEPT_H) $(TM_P_H) $(PREDICT_H) \\\n    libfuncs.h langhooks.h $(BASIC_BLOCK_H) tree-mudflap.h realmpfr.h \\\n-   $(BUILTINS_DEF) $(MACHMODE_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) value-prof.h\n+   $(BUILTINS_DEF) $(MACHMODE_H) $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) \\\n+   value-prof.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n    libfuncs.h $(REGS_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_P_H) \\\n@@ -2920,9 +2921,9 @@ integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    gt-integrate.h $(GGC_H) $(TREE_PASS_H) $(DF_H)\n jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) \\\n-   $(EXCEPT_H) $(FUNCTION_H) $(BASIC_BLOCK_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n-   $(TOPLEV_H) $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) \\\n-   $(TIMEVAR_H) $(TARGET_H)\n+   $(EXCEPT_H) $(FUNCTION_H) $(BASIC_BLOCK_H) $(TREE_PASS_H) \\\n+   $(DIAGNOSTIC_CORE_H) $(TOPLEV_H) $(INSN_ATTR_H) $(TM_P_H) reload.h \\\n+   $(PREDICT_H) $(TIMEVAR_H) $(TARGET_H)\n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(GGC_H) $(TM_P_H) \\\n@@ -2931,7 +2932,7 @@ cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h $(TOPLEV_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n    $(TREE_INLINE_H) $(TREE_DUMP_H) $(TREE_FLOW_H) cif-code.def \\\n-   value-prof.h $(EXCEPT_H) $(IPA_UTILS_H)\n+   value-prof.h $(EXCEPT_H) $(IPA_UTILS_H) $(DIAGNOSTIC_CORE_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(TOPLEV_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n@@ -2943,7 +2944,7 @@ cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H)\n varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(CGRAPH_H) langhooks.h $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n+   $(TREE_H) $(CGRAPH_H) langhooks.h $(DIAGNOSTIC_CORE_H) $(HASHTAB_H) \\\n    $(GGC_H) $(TIMEVAR_H) debug.h $(TARGET_H) output.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) gt-varpool.h\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \\\n@@ -2963,9 +2964,10 @@ ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n matrix-reorg.o : matrix-reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(TM_H) $(TREE_H) $(RTL_H) $(TREE_INLINE_H) $(TREE_FLOW_H) \\\n    tree-flow-inline.h langhooks.h $(HASHTAB_H) $(TOPLEV_H) $(FLAGS_H) $(GGC_H) \\\n-   debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(PARAMS_H) \\\n-   $(FIBHEAP_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n-   tree-iterator.h $(TREE_PASS_H) opts.h $(TREE_DATA_REF_H) tree-ssa-sccvn.h\n+   debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_CORE_H) $(TIMEVAR_H) \\\n+   $(PARAMS_H) $(FIBHEAP_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) \\\n+   $(CFGLOOP_H) tree-iterator.h $(TREE_PASS_H) opts.h $(TREE_DATA_REF_H) \\\n+   tree-ssa-sccvn.h\n ipa-inline.o : ipa-inline.c gt-ipa-inline.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(FIBHEAP_H) $(PARAMS_H) $(TIMEVAR_H) $(TREE_PASS_H) \\\n@@ -3003,7 +3005,7 @@ coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(GGC_H) langhooks.h $(COVERAGE_H) \\\n    $(HASHTAB_H) tree-iterator.h $(CGRAPH_H) $(TREE_PASS_H) gcov-io.c $(TM_P_H) \\\n-   $(DIAGNOSTIC_H) intl.h gt-coverage.h\n+   $(DIAGNOSTIC_CORE_H) intl.h gt-coverage.h\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) \\\n    $(EMIT_RTL_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TREE_PASS_H) \\\n@@ -3405,8 +3407,8 @@ lambda-trans.o: lambda-trans.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TM_H) coretypes.h $(TARGET_H) $(TREE_H) $(TREE_FLOW_H)\n lambda-code.o: lambda-code.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TM_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n-   $(TREE_DATA_REF_H) $(EXPR_H) coretypes.h $(TARGET_H) \\\n+   $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) \\\n+   $(CFGLOOP_H) $(TREE_DATA_REF_H) $(EXPR_H) coretypes.h $(TARGET_H) \\\n    $(TREE_PASS_H) vec.h vecprim.h $(OBSTACK_H) pointer-set.h\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) \\\n    $(TOPLEV_H)"}, {"sha": "e16240b579a96743c6bee6ed3984ac7c616a6c8f", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -49,7 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-mudflap.h\"\n #include \"tree-flow.h\"\n #include \"value-prof.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n \n #ifndef SLOW_UNALIGNED_ACCESS\n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n@@ -5003,7 +5003,7 @@ expand_builtin_expect (tree exp, rtx target)\n   target = expand_expr (arg, target, VOIDmode, EXPAND_NORMAL);\n   /* When guessing was done, the hints should be already stripped away.  */\n   gcc_assert (!flag_guess_branch_prob\n-\t      || optimize == 0 || errorcount || sorrycount);\n+\t      || optimize == 0 || seen_error ());\n   return target;\n }\n "}, {"sha": "a49694007d248415f9598e00b224d16f6c335a2a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -51,7 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"tree-mudflap.h\"\n #include \"tree-iterator.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"tree-dump.h\"\n #include \"cgraph.h\"\n #include \"hashtab.h\"\n@@ -3535,7 +3535,7 @@ c_make_fname_decl (location_t loc, tree id, int type_dep)\n \t the __FUNCTION__ is believed to appear in K&R style function\n \t parameter declarator.  In that case we still don't have\n \t function_scope.  */\n-      && (!errorcount || current_function_scope))\n+      && (!seen_error () || current_function_scope))\n     {\n       DECL_CONTEXT (decl) = current_function_decl;\n       bind (id, decl, current_function_scope,\n@@ -9660,7 +9660,7 @@ c_write_global_declarations (void)\n \n   /* After cgraph has had a chance to emit everything that's going to\n      be emitted, output debug information for globals.  */\n-  if (errorcount == 0 && sorrycount == 0)\n+  if (!seen_error ())\n     {\n       timevar_push (TV_SYMOUT);\n       for (t = all_translation_units; t; t = TREE_CHAIN (t))"}, {"sha": "0522d2925c26623c3565931206c1ee4f0a06cf05", "filename": "gcc/c-format.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,7 @@\n /* Check calls to formatted I/O functions (-Wformat).\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-common.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"langhooks.h\"\n #include \"c-format.h\"\n #include \"alloc-pool.h\""}, {"sha": "2ef81c6c439f7031dfbabbf918e519ca40a7e7b1", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -2,7 +2,7 @@\n    by the C-based front ends.  The structure of gimplified, or\n    language-independent, trees is dictated by the grammar described in this\n    file.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Lowering of expressions contributed by Sebastian Pop <s.pop@laposte.net>\n    Re-written to support lowering of whole function trees, documentation\n@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-flow.h\"\n #include \"tree-inline.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"flags.h\""}, {"sha": "14d4eacf366d0b412dd254b15089268978f44874", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Language-specific hook definitions for C front end.\n    Copyright (C) 1991, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008\n+   1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"tree-inline.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"c-objc-common.h\"\n #include \"c-pragma.h\"\n "}, {"sha": "5d77e093fb80e334e63c0cf5771d7dbbea535b09", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Mainly the interface between cpplib and the C front ends.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -322,7 +322,6 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t  case CPP_N_INVALID:\n \t    /* cpplib has issued an error.  */\n \t    *value = error_mark_node;\n-\t    errorcount++;\n \t    break;\n \n \t  case CPP_N_INTEGER:\n@@ -668,7 +667,6 @@ interpret_float (const cpp_token *token, unsigned int flags)\n \tif (mode == VOIDmode)\n \t  {\n \t    error (\"unsupported non-standard suffix on floating constant\");\n-\t    errorcount++;\n \n \t    return error_mark_node;\n \t  }"}, {"sha": "d1cb317c47a0d2dff082f2dc753fa00c835ab4b4", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1416,7 +1416,7 @@ c_common_finish (void)\n   FILE *deps_stream = NULL;\n \n   /* Don't write the deps file if there are errors.  */\n-  if (cpp_opts->deps.style != DEPS_NONE && errorcount == 0)\n+  if (cpp_opts->deps.style != DEPS_NONE && !seen_error ())\n     {\n       /* If -M or -MM was seen without -MF, default output to the\n \t output stream.  */"}, {"sha": "7bfb9bc3d8117b2ad10c203e31d4cea73c78f212", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -94,7 +94,7 @@ The callgraph:\n #include \"tree-flow.h\"\n #include \"value-prof.h\"\n #include \"except.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"rtl.h\"\n #include \"ipa-utils.h\"\n "}, {"sha": "d4a142b2bd7a4cefea02b5572e737c06f0ee878f", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -579,7 +579,7 @@ verify_cgraph_node (struct cgraph_node *node)\n   gimple_stmt_iterator gsi;\n   bool error_found = false;\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   timevar_push (TV_CGRAPH_VERIFY);\n@@ -883,7 +883,7 @@ verify_cgraph (void)\n {\n   struct cgraph_node *node;\n \n-  if (sorrycount || errorcount)\n+  if (seen_error ())\n     return;\n \n   for (node = cgraph_nodes; node; node = node->next)\n@@ -897,7 +897,7 @@ cgraph_output_pending_asms (void)\n {\n   struct cgraph_asm_node *can;\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   for (can = cgraph_asm_nodes; can; can = can->next)\n@@ -1895,7 +1895,7 @@ ipa_passes (void)\n void\n cgraph_optimize (void)\n {\n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n #ifdef ENABLE_CHECKING\n@@ -1917,11 +1917,11 @@ cgraph_optimize (void)\n   cgraph_state = CGRAPH_STATE_IPA;\n \n   /* Don't run the IPA passes if there was any error or sorry messages.  */\n-  if (errorcount == 0 && sorrycount == 0)\n+  if (!seen_error ())\n     ipa_passes ();\n \n   /* Do nothing else if any IPA pass found errors.  */\n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     {\n       timevar_pop (TV_CGRAPHOPT);\n       return;\n@@ -1979,7 +1979,7 @@ cgraph_optimize (void)\n   verify_cgraph ();\n   /* Double check that all inline clones are gone and that all\n      function bodies have been released from memory.  */\n-  if (!(sorrycount || errorcount))\n+  if (!seen_error ())\n     {\n       struct cgraph_node *node;\n       bool error_found = false;"}, {"sha": "9b8a6900e6bb762f7acd6f23442fc34e0a623545", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,7 +1,7 @@\n /* Read and write coverage files, and associated functionality.\n    Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2003, 2004, 2005, 2007, 2008 Free Software Foundation,\n-   Inc.\n+   2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by James E. Wilson, UC Berkeley/Cygnus Support;\n    based on some ideas from Dain Samples of UC Berkeley.\n    Further mangling by Bob Manson, Cygnus Support.\n@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"intl.h\"\n \n #include \"gcov-io.c\"\n@@ -376,7 +376,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n \t    inform (input_location, \"number of counters is %d instead of %d\",\n \t\t    entry->summary.num, expected);\n \t  \n-\t  if (!(errorcount || sorrycount)\n+\t  if (!seen_error ()\n \t      && !warned++)\n \t    {\n \t      inform (input_location, \"coverage mismatch ignored\");"}, {"sha": "80d86c8e13930802d12efe84debdbc41fe4dbce8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,3 +1,19 @@\n+2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* call.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* cp-lang.c: Don't include diagnostic.h\n+\t* name-lookup.c: Include diagnostic-core.h instead of\n+\tdiagnostic.h.\n+\t(cp_emit_debug_info_for_using): Use seen_error.\n+\t* optimize.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* parser.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* pt.c (iterative_hash_template_arg): Use seen_error.\n+\t* repo.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* typeck2.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* Make-lang.in (cp/cp-lang.o, cp/typeck2.o, cp/call.o, cp/repo.o,\n+\tcp/optimize.o, cp/parser.o, cp/name-lookup.o): Update\n+\tdependencies.\n+\n 2010-05-25  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/44188"}, {"sha": "222988dff362b6cfc34aadc464cb917fdcb5570f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -251,7 +251,7 @@ cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   $(C_PRAGMA_H) toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h gt-cp-cp-lang.h \\\n-  $(DIAGNOSTIC_H) cp/cp-objcp-common.h $(EXPR_H) $(EXCEPT_H)\n+  cp/cp-objcp-common.h $(EXPR_H) $(EXCEPT_H)\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   output.h $(EXCEPT_H) toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\\n@@ -266,15 +266,15 @@ cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n   langhooks.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h \\\n   $(CXX_PRETTY_PRINT_H) cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h output.h \\\n-  $(TM_P_H) $(DIAGNOSTIC_H) gt-cp-typeck2.h $(REAL_H) intl.h\n+  $(TM_P_H) $(DIAGNOSTIC_CORE_H) gt-cp-typeck2.h $(REAL_H) intl.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   toplev.h $(DIAGNOSTIC_H) convert.h $(C_COMMON_H) $(TARGET_H) \\\n   output.h toplev.h\n cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n   $(TARGET_H) convert.h $(CGRAPH_H) $(TREE_DUMP_H) gt-cp-class.h \\\n   $(SPLAY_TREE_H)\n cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n-  $(DIAGNOSTIC_H) intl.h gt-cp-call.h convert.h $(TARGET_H) langhooks.h\n+  $(DIAGNOSTIC_CORE_H) intl.h gt-cp-call.h convert.h $(TARGET_H) langhooks.h\n cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   toplev.h $(EXCEPT_H) $(TARGET_H)\n@@ -300,7 +300,7 @@ cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n   $(FLAGS_H) $(REAL_H) $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H) \\\n   tree-diagnostic.h tree-pretty-print.h\n-cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n+cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n   gt-cp-repo.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) $(EXCEPT_H) toplev.h \\\n   $(FLAGS_H) output.h $(RTL_H) $(TIMEVAR_H) \\\n@@ -309,17 +309,17 @@ cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) $(EXCEPT_H) toplev.h \\\n cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) $(TREE_DUMP_H)\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) \\\n   input.h $(PARAMS_H) debug.h $(TREE_INLINE_H) $(GIMPLE_H) \\\n-  $(TARGET_H) tree-iterator.h $(CGRAPH_H)\n+  $(TARGET_H) tree-iterator.h $(CGRAPH_H) $(DIAGNOSTIC_CORE_H)\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h $(REAL_H) \\\n   gt-cp-mangle.h $(TARGET_H) $(TM_P_H) $(CGRAPH_H)\n-cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_H) gt-cp-parser.h \\\n-  output.h $(TARGET_H) $(PLUGIN_H) intl.h\n+cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_CORE_H) \\\n+  gt-cp-parser.h output.h $(TARGET_H) $(PLUGIN_H) intl.h\n cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) toplev.h $(C_COMMON_H) \\\n \t$(TM_H) coretypes.h pointer-set.h tree-iterator.h\n \n cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(CXX_TREE_H) $(TIMEVAR_H) gt-cp-name-lookup.h toplev.h \\\n-\t$(DIAGNOSTIC_H) $(FLAGS_H) debug.h\n+\t$(DIAGNOSTIC_CORE_H) $(FLAGS_H) debug.h\n \n cp/cxx-pretty-print.o: cp/cxx-pretty-print.c $(CXX_PRETTY_PRINT_H) \\\n   $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h $(CXX_TREE_H) tree-pretty-print.h"}, {"sha": "64e2e50278762cb75f9e55fdd0d1dd09185e799e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Functions related to invoking methods and overloaded functions.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) and\n    modified by Brendan Kehoe (brendan@cygnus.com).\n@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"intl.h\"\n #include \"target.h\"\n #include \"convert.h\""}, {"sha": "a08f0dd71d06c9c50808f2aa424e52a4a2c5bc92", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,5 +1,6 @@\n /* Language-dependent hooks for C++.\n-   Copyright 2001, 2002, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2004, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GCC.\n@@ -28,7 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n-#include \"diagnostic.h\"\n #include \"debug.h\"\n #include \"cp-objcp-common.h\"\n #include \"hashtab.h\""}, {"sha": "051d3c5416adf6de5df798aafeb50ae8b56a1696", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"name-lookup.h\"\n #include \"timevar.h\"\n #include \"toplev.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"debug.h\"\n #include \"c-pragma.h\"\n \n@@ -5505,7 +5505,7 @@ void\n cp_emit_debug_info_for_using (tree t, tree context)\n {\n   /* Don't try to emit any debug information if we have errors.  */\n-  if (sorrycount || errorcount)\n+  if (seen_error ())\n     return;\n \n   /* Ignore this FUNCTION_DECL if it refers to a builtin declaration"}, {"sha": "0196eaeb8b18e43c131aa8695538813e42c59d6d", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Perform optimizations on tree structure.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n    Written by Mark Michell (mark@codesourcery.com).\n \n This file is part of GCC.\n@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"flags.h\"\n #include \"langhooks.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"tree-dump.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\""}, {"sha": "4a50b556f4619e76429f7aca6ae21ca1817d6331", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"decl.h\"\n #include \"flags.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"target.h\""}, {"sha": "9eeba8a141593787b3168f304b73fc3e717a5c60", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1564,7 +1564,7 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n     case LAMBDA_EXPR:\n       /* A lambda can't appear in a template arg, but don't crash on\n \t erroneous input.  */\n-      gcc_assert (errorcount > 0);\n+      gcc_assert (seen_error ());\n       return val;\n \n     default:"}, {"sha": "08a4d623d40366fe25da9d8b7f45aef401d5eb67", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Code to maintain a C++ template repository.\n    Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008  Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n    Contributed by Jason Merrill (jason@cygnus.com)\n \n This file is part of GCC.\n@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"flags.h\"\n \n static const char *extract_string (const char **);\n@@ -243,7 +243,7 @@ finish_repo (void)\n   if (!flag_use_repository || flag_compare_debug)\n     return;\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   repo_file = reopen_repo_file_for_write ();"}, {"sha": "e512272abb70c60d669697bab56f9ca13382da50", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,7 +1,7 @@\n /* Report error messages, build initializers, and perform\n    some front-end optimizations for C++ compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n \n static tree\n process_init_constructor (tree type, tree init);"}, {"sha": "b504716400278e99e7e776029ab9253494b629bf", "filename": "gcc/diagnostic-core.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -0,0 +1,87 @@\n+/* Declarations of core diagnostic functionality for code that does\n+   not need to deal with diagnostic contexts or diagnostic info\n+   structures.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007,\n+   2008, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_DIAGNOSTIC_CORE_H\n+#define GCC_DIAGNOSTIC_CORE_H\n+\n+#include \"input.h\"\n+\n+/* Constants used to discriminate diagnostics.  */\n+typedef enum\n+{\n+#define DEFINE_DIAGNOSTIC_KIND(K, msgid) K,\n+#include \"diagnostic.def\"\n+#undef DEFINE_DIAGNOSTIC_KIND\n+  DK_LAST_DIAGNOSTIC_KIND\n+} diagnostic_t;\n+\n+extern const char *progname;\n+\n+extern const char *trim_filename (const char *);\n+\n+/* If we haven't already defined a front-end-specific diagnostics\n+   style, use the generic one.  */\n+#ifndef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_tdiag__\n+#endif\n+/* None of these functions are suitable for ATTRIBUTE_PRINTF, because\n+   each language front end can extend them with its own set of format\n+   specifiers.  We must use custom format checks.  */\n+#if (ENABLE_CHECKING && GCC_VERSION >= 4001) || GCC_VERSION == BUILDING_GCC_VERSION\n+#define ATTRIBUTE_GCC_DIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n+#else\n+#define ATTRIBUTE_GCC_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n+#endif\n+extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n+     ATTRIBUTE_NORETURN;\n+/* Pass one of the OPT_W* from options.h as the first parameter.  */\n+extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern bool warning_at (location_t, int, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n+extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void error_n (location_t, int, const char *, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n+extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n+     ATTRIBUTE_NORETURN;\n+/* Pass one of the OPT_W* from options.h as the second parameter.  */\n+extern bool pedwarn (location_t, int, const char *, ...)\n+     ATTRIBUTE_GCC_DIAG(3,4);\n+extern bool permerror (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void inform_n (location_t, int, const char *, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n+extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern bool emit_diagnostic (diagnostic_t, location_t, int,\n+\t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n+extern bool seen_error (void);\n+\n+#ifdef BUFSIZ\n+  /* N.B. Unlike all the others, fnotice is just gettext+fprintf, and\n+     therefore it can have ATTRIBUTE_PRINTF.  */\n+extern void fnotice\t\t\t(FILE *, const char *, ...)\n+     ATTRIBUTE_PRINTF_2;\n+#endif\n+\n+#endif /* ! GCC_DIAGNOSTIC_CORE_H */"}, {"sha": "61401e62a80561470198e0660a5b786abe680421", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"version.h\"\n #include \"input.h\"\n-#include \"toplev.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n \n@@ -46,6 +45,10 @@ static void diagnostic_action_after_output (diagnostic_context *,\n \t\t\t\t\t    diagnostic_info *);\n static void real_abort (void) ATTRIBUTE_NORETURN;\n \n+/* Name of program invoked, sans directories.  */\n+\n+const char *progname;\n+\n /* A diagnostic_context surrogate for stderr.  */\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n@@ -697,6 +700,14 @@ sorry (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* Return true if an error or a \"sorry\" has been seen.  Various\n+   processing is disabled after errors.  */\n+bool\n+seen_error (void)\n+{\n+  return errorcount || sorrycount;\n+}\n+\n /* An error which is severe enough that we make no attempt to\n    continue.  Do not use this for internal consistency checks; that's\n    internal_error.  Use of this function should be rare.  */"}, {"sha": "062402fa3f91cb54fb763d3f274fbe889dc4d240", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -23,15 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_DIAGNOSTIC_H\n \n #include \"pretty-print.h\"\n-\n-/* Constants used to discriminate diagnostics.  */\n-typedef enum\n-{\n-#define DEFINE_DIAGNOSTIC_KIND(K, msgid) K,\n-#include \"diagnostic.def\"\n-#undef DEFINE_DIAGNOSTIC_KIND\n-  DK_LAST_DIAGNOSTIC_KIND\n-} diagnostic_t;\n+#include \"diagnostic-core.h\"\n \n /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of\n    its context and its KIND (ice, error, warning, note, ...)  See complete\n@@ -246,8 +238,6 @@ extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n \t\t\t\t\t    va_list *, location_t,\n \t\t\t\t\t    diagnostic_t)\n      ATTRIBUTE_GCC_DIAG(2,0);\n-extern bool emit_diagnostic (diagnostic_t, location_t, int,\n-\t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n #endif\n extern char *diagnostic_build_prefix (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);"}, {"sha": "8cdb7aaaff61f44e4bf2fd5b84c5045d99ff7232", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -21887,7 +21887,7 @@ dwarf2out_finish (const char *filename)\n \t    add_child_die (origin->die_parent, die);\n \t  else if (die == comp_unit_die)\n \t    ;\n-\t  else if (errorcount > 0 || sorrycount > 0)\n+\t  else if (seen_error ())\n \t    /* It's OK to be confused by errors in the input.  */\n \t    add_child_die (comp_unit_die, die);\n \t  else"}, {"sha": "855098f5af53e763cae29b4a85a2565189480fc4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1876,7 +1876,7 @@ gimplify_var_or_parm_decl (tree *expr_p)\n       && !TREE_STATIC (decl) && !DECL_EXTERNAL (decl)\n       && decl_function_context (decl) == current_function_decl)\n     {\n-      gcc_assert (errorcount || sorrycount);\n+      gcc_assert (seen_error ());\n       return GS_ERROR;\n     }\n \n@@ -5197,7 +5197,7 @@ gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p)\n \n   /* Errors can result in improperly nested cleanups.  Which results in\n      confusion when trying to resolve the GIMPLE_WITH_CLEANUP_EXPR.  */\n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   if (gimple_conditional_context ())\n@@ -7673,7 +7673,7 @@ gimplify_body (tree *body_p, tree fndecl, bool do_parms)\n   gcc_assert (gimplify_ctxp == NULL);\n \n #ifdef ENABLE_TYPES_CHECKING\n-  if (!errorcount && !sorrycount)\n+  if (!seen_error ())\n     verify_types_in_gimple_seq (gimple_bind_body (outer_bind));\n #endif\n "}, {"sha": "46bce87b16f81901c3cfa5ae78057b006ca6d129", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1701,7 +1701,7 @@ cgraph_early_inlining (void)\n   unsigned int todo = 0;\n   int iterations = 0;\n \n-  if (sorrycount || errorcount)\n+  if (seen_error ())\n     return 0;\n \n   if (!optimize"}, {"sha": "02a1e0386ab20acb555ec10a0bb6a525a775c0b4", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1163,7 +1163,7 @@ gate_pure_const (void)\n {\n   return (flag_ipa_pure_const\n \t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  && !seen_error ());\n }\n \n struct ipa_opt_pass_d pass_ipa_pure_const ="}, {"sha": "bee05651de04d2e736a19a0583b7da8e6a85468e", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1096,7 +1096,7 @@ gate_reference (void)\n {\n   return (flag_ipa_reference\n \t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  && !seen_error ());\n }\n \n struct ipa_opt_pass_d pass_ipa_reference ="}, {"sha": "23cd0cf121520f005fec6c86b4695c50cd7d5433", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"expr.h\"\n #include \"except.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"toplev.h\"\n #include \"reload.h\"\n #include \"predict.h\""}, {"sha": "2b287a184d783eb9e722ad761c9c999131b3a805", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -28,7 +28,7 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"basic-block.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"obstack.h\"\n #include \"tree-flow.h\"\n #include \"tree-dump.h\""}, {"sha": "67a847e63dc798882778eeab5fd0485d96f0f54c", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,7 +1,7 @@\n /* Write and read the cgraph to the memory mapped representation of a\n    .o file.\n \n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Kenneth Zadeck <zadeck@naturalbridge.com>\n \n This file is part of GCC.\n@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"except.h\"\n #include \"vec.h\"\n #include \"timevar.h\""}, {"sha": "c87c42c2b34edf4202a2e1edf9c894b4250d470a", "filename": "gcc/lto-compress.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-compress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-compress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-compress.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* LTO IL compression streams.\n \n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Simon Baldwin <simonb@google.com>\n \n This file is part of GCC.\n@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <zlib.h>\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"lto-streamer.h\""}, {"sha": "9d6d8a360298302248356eeed7dea36b1092c759", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,6 +1,6 @@\n /* Input functions for reading LTO sections.\n \n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Kenneth Zadeck <zadeck@naturalbridge.com>\n \n This file is part of GCC.\n@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"except.h\"\n #include \"vec.h\"\n #include \"timevar.h\""}, {"sha": "58fe70e3018b3df9083c532cbb58d32540c05977", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"except.h\"\n #include \"vec.h\"\n #include \"lto-symtab.h\""}, {"sha": "561ecbc1a7edf7d085cb42912f68f9edf75fc229", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"tree-flow.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"bitmap.h\"\n #include \"vec.h\"\n #include \"lto-streamer.h\"\n@@ -848,7 +848,7 @@ gate_lto_out (void)\n {\n   return ((flag_generate_lto || in_lto_p)\n \t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  && !seen_error ());\n }\n \n "}, {"sha": "b11097f9c822bfb5658a9c4589e7fb42a6f3880a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,3 +1,9 @@\n+2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t(read_cgraph_and_symbols, lto_main): Use seen_error.\n+\t* Make-lang.in (lto/lto.o): Update dependencies.\n+\n 2010-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/44230"}, {"sha": "637d07caec155320add9c85696d17c40011546c4", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -81,7 +81,7 @@ lto/lto-lang.o: lto/lto-lang.c $(CONFIG_H) coretypes.h debug.h \\\n \t$(TARGET_H) $(LTO_H) $(GIMPLE_H) gtype-lto.h gt-lto-lto-lang.h \\\n \t$(EXPR_H)\n lto/lto.o: lto/lto.c $(CONFIG_H) $(SYSTEM_H) coretypes.h opts.h \\\n-\ttoplev.h $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) $(LIBIBERTY_H) \\\n+\ttoplev.h $(TREE_H) $(DIAGNOSTIC_CORE_H) $(TM_H) $(LIBIBERTY_H) \\\n \t$(CGRAPH_H) $(GGC_H) tree-ssa-operands.h $(TREE_PASS_H) \\\n \tlanghooks.h vec.h $(BITMAP_H) pointer-set.h $(IPA_PROP_H) \\\n \t$(COMMON_H) debug.h $(TIMEVAR_H) $(GIMPLE_H) $(LTO_H) $(LTO_TREE_H) \\"}, {"sha": "d69fba3f00082daf5836331a3ba1e4dc5020efdb", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"toplev.h\"\n #include \"tree.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"tm.h\"\n #include \"libiberty.h\"\n #include \"cgraph.h\"\n@@ -1710,7 +1710,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n \n   /* FIXME lto. This loop needs to be changed to use the pass manager to\n      call the ipa passes directly.  */\n-  if (!errorcount)\n+  if (!seen_error ())\n     for (i = 0; i < last_file_ix; i++)\n       {\n \tstruct lto_file_decl_data *file_data = all_file_decl_data [i];\n@@ -1901,7 +1901,7 @@ lto_main (int debug_p ATTRIBUTE_UNUSED)\n      command line.  */\n   read_cgraph_and_symbols (num_in_fnames, in_fnames);\n \n-  if (!errorcount)\n+  if (!seen_error ())\n     {\n       /* If WPA is enabled analyze the whole call graph and create an\n \t optimization plan.  Otherwise, read in all the function"}, {"sha": "4958762169f2822deb3bd4dd4919a7e90ceb1628", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,5 +1,5 @@\n /* Matrix layout transformations.\n-   Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Razya Ladelsky <razya@il.ibm.com>\n    Originally written by Revital Eres and Mustafa Hagog.\n \n@@ -126,7 +126,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"target.h\"\n #include \"cgraph.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"timevar.h\"\n #include \"params.h\"\n #include \"fibheap.h\""}, {"sha": "6bb319af8c1eae52ed77a00417d8083f002051a6", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,3 +1,8 @@\n+2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c: Include diagnostic-core.h instead of diagnostic.h.\n+\t* Make-lang.in (objc/objc-act.o): Update dependencies.\n+\n 2010-05-25  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* objc-act.h: Do not include gimple.h."}, {"sha": "67644bbb08af1c97ac426a7973d37294112a829e", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -75,7 +75,7 @@ objc/objc-lang.o : objc/objc-lang.c \\\n \n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(TARGET_H) $(C_TREE_H) $(DIAGNOSTIC_H) toplev.h $(FLAGS_H) \\\n+   $(TARGET_H) $(C_TREE_H) $(DIAGNOSTIC_CORE_H) toplev.h $(FLAGS_H) \\\n    objc/objc-act.h input.h $(FUNCTION_H) output.h debug.h langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(HASHTAB_H) $(C_PRAGMA_H) gt-objc-objc-act.h \\\n    $(GIMPLE_H) c-lang.h"}, {"sha": "32e71b1afa3cd2275cf07aab2b8da1152f66d977", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -66,7 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"debug.h\"\n #include \"target.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"intl.h\"\n #include \"cgraph.h\"\n #include \"tree-iterator.h\""}, {"sha": "e1c1adfbc48e090ce90911e762e1178491655b93", "filename": "gcc/omega.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -5,8 +5,8 @@\n    This code has no license restrictions, and is considered public\n    domain.\n \n-   Changes copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation,\n-   Inc.\n+   Changes copyright (C) 2005, 2006, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n    Contributed by Sebastian Pop <sebastian.pop@inria.fr>\n \n This file is part of GCC.\n@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"ggc.h\"\n #include \"tree.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"tree-pass.h\"\n #include \"omega.h\"\n "}, {"sha": "74797b8aa0cea3494fe5c21a2404c8c3648ff108", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"tree-flow.h\"\n #include \"timevar.h\"\n #include \"flags.h\"\n@@ -5512,7 +5512,7 @@ execute_expand_omp (void)\n static bool\n gate_expand_omp (void)\n {\n-  return (flag_openmp != 0 && errorcount == 0);\n+  return (flag_openmp != 0 && !seen_error ());\n }\n \n struct gimple_opt_pass pass_expand_omp =\n@@ -6561,7 +6561,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   /* If we have issued syntax errors, avoid doing any heavy lifting.\n      Just replace the OpenMP directives with a NOP to avoid\n      confusing RTL expansion.  */\n-  if (errorcount && is_gimple_omp (stmt))\n+  if (seen_error () && is_gimple_omp (stmt))\n     {\n       gsi_replace (gsi_p, gimple_build_nop (), true);\n       return;"}, {"sha": "7ae4787d21183da8d4eca4a52f1f8042bbd6c7a2", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -60,7 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graph.h\"\n #include \"regs.h\"\n #include \"timevar.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"params.h\"\n #include \"reload.h\"\n #include \"dwarf2asm.h\"\n@@ -211,7 +211,7 @@ rest_of_decl_compilation (tree decl,\n   else if (TREE_CODE (decl) == TYPE_DECL\n \t   /* Like in rest_of_type_compilation, avoid confusing the debug\n \t      information machinery when there are errors.  */\n-\t   && !(sorrycount || errorcount))\n+\t   && !seen_error ())\n     {\n       timevar_push (TV_SYMOUT);\n       debug_hooks->type_decl (decl, !top_level);\n@@ -232,7 +232,7 @@ rest_of_type_compilation (tree type, int toplev)\n {\n   /* Avoid confusing the debug information machinery when there are\n      errors.  */\n-  if (errorcount != 0 || sorrycount != 0)\n+  if (seen_error ())\n     return;\n \n   timevar_push (TV_SYMOUT);\n@@ -287,7 +287,7 @@ gate_rest_of_compilation (void)\n {\n   /* Early return if there were errors.  We can run afoul of our\n      consistency checks, and there's not really much point in fixing them.  */\n-  return !(rtl_dump_and_exit || flag_syntax_only || errorcount || sorrycount);\n+  return !(rtl_dump_and_exit || flag_syntax_only || seen_error ());\n }\n \n struct gimple_opt_pass pass_rest_of_compilation =\n@@ -1716,7 +1716,7 @@ ipa_write_summaries (void)\n   struct varpool_node *vnode;\n   int i, order_pos;\n \n-  if (!flag_generate_lto || errorcount || sorrycount)\n+  if (!flag_generate_lto || seen_error ())\n     return;\n \n   set = cgraph_node_set_new ();"}, {"sha": "6c20b3ca642232a9a165e17ce4074e2aaa298b54", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -126,10 +126,6 @@ static bool no_backend;\n /* Length of line when printing switch values.  */\n #define MAX_LINE 75\n \n-/* Name of program invoked, sans directories.  */\n-\n-const char *progname;\n-\n /* Copy of argument vector to toplev_main.  */\n static const char **save_argv;\n \n@@ -907,7 +903,7 @@ emit_debug_global_declarations (tree *vec, int len)\n   int i;\n \n   /* Avoid confusing the debug information machinery when there are errors.  */\n-  if (errorcount != 0 || sorrycount != 0)\n+  if (seen_error ())\n     return;\n \n   timevar_push (TV_SYMOUT);\n@@ -1055,7 +1051,7 @@ compile_file (void)\n   /* This must also call cgraph_finalize_compilation_unit.  */\n   lang_hooks.decls.final_write_globals ();\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   /* Ensure that emulated TLS control vars are finalized and build \n@@ -2350,7 +2346,7 @@ finalize (void)\n   if (flag_gen_aux_info)\n     {\n       fclose (aux_info_file);\n-      if (errorcount)\n+      if (seen_error ())\n \tunlink (aux_info_file_name);\n     }\n \n@@ -2393,7 +2389,7 @@ do_compile (void)\n   process_options ();\n \n   /* Don't do any more if an error has already occurred.  */\n-  if (!errorcount)\n+  if (!seen_error ())\n     {\n       /* This must be run always, because it is needed to compute the FP\n \t predefined macros, such as __LDBL_MAX__, for targets using non\n@@ -2458,7 +2454,7 @@ toplev_main (int argc, char **argv)\n   invoke_plugin_callbacks (PLUGIN_FINISH, NULL);\n \n   finalize_plugins ();\n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return (FATAL_EXIT_CODE);\n \n   return (SUCCESS_EXIT_CODE);"}, {"sha": "b7152f7b9e18fc56f66959300a38ac20ea6be00b", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TOPLEV_H\n #include \"input.h\"\n #include \"bversion.h\"\n+#include \"diagnostic-core.h\"\n \n /* If non-NULL, return one past-the-end of the matching SUBPART of\n    the WHOLE string.  */\n@@ -32,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n extern int toplev_main (int, char **);\n extern int read_integral_parameter (const char *, const char *, const int);\n extern void strip_off_ending (char *, int);\n-extern const char *trim_filename (const char *);\n extern void _fatal_insn_not_found (const_rtx, const char *, int, const char *)\n      ATTRIBUTE_NORETURN;\n extern void _fatal_insn (const char *, const_rtx, const char *, int, const char *)\n@@ -43,41 +43,6 @@ extern void _fatal_insn (const char *, const_rtx, const char *, int, const char\n #define fatal_insn_not_found(insn) \\\n \t_fatal_insn_not_found (insn, __FILE__, __LINE__, __FUNCTION__)\n \n-/* If we haven't already defined a frontend specific diagnostics\n-   style, use the generic one.  */\n-#ifndef GCC_DIAG_STYLE\n-#define GCC_DIAG_STYLE __gcc_tdiag__\n-#endif\n-/* None of these functions are suitable for ATTRIBUTE_PRINTF, because\n-   each language front end can extend them with its own set of format\n-   specifiers.  We must use custom format checks.  */\n-#if (ENABLE_CHECKING && GCC_VERSION >= 4001) || GCC_VERSION == BUILDING_GCC_VERSION\n-#define ATTRIBUTE_GCC_DIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n-#else\n-#define ATTRIBUTE_GCC_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#endif\n-extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n-     ATTRIBUTE_NORETURN;\n-/* Pass one of the OPT_W* from options.h as the first parameter.  */\n-extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern bool warning_at (location_t, int, const char *, ...)\n-    ATTRIBUTE_GCC_DIAG(3,4);\n-extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void error_n (location_t, int, const char *, const char *, ...)\n-    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n-extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n-     ATTRIBUTE_NORETURN;\n-/* Pass one of the OPT_W* from options.h as the second parameter.  */\n-extern bool pedwarn (location_t, int, const char *, ...)\n-     ATTRIBUTE_GCC_DIAG(3,4);\n-extern bool permerror (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void inform_n (location_t, int, const char *, const char *, ...)\n-    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n-extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-\n extern void rest_of_decl_compilation (tree, int, int);\n extern void rest_of_type_compilation (tree, int);\n extern void tree_rest_of_compilation (tree);\n@@ -97,13 +62,6 @@ extern void output_quoted_string\t(FILE *, const char *);\n extern void output_file_directive\t(FILE *, const char *);\n #endif\n \n-#ifdef BUFSIZ\n-  /* N.B. Unlike all the others, fnotice is just gettext+fprintf, and\n-     therefore it can have ATTRIBUTE_PRINTF.  */\n-extern void fnotice\t\t\t(FILE *, const char *, ...)\n-     ATTRIBUTE_PRINTF_2;\n-#endif\n-\n extern void wrapup_global_declaration_1 (tree);\n extern bool wrapup_global_declaration_2 (tree);\n extern bool wrapup_global_declarations (tree *, int);\n@@ -122,7 +80,6 @@ extern unsigned local_tick;\n /* Top-level source file.  */\n extern const char *main_input_filename;\n \n-extern const char *progname;\n extern const char *dump_base_name;\n extern const char *dump_dir_name;\n extern const char *aux_base_name;"}, {"sha": "43c30e008c1af9cf70a6cee6d349a9d2a1dda2e9", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -964,7 +964,7 @@ label_to_block_fn (struct function *ifun, tree dest)\n   /* We would die hard when faced by an undefined label.  Emit a label to\n      the very first basic block.  This will hopefully make even the dataflow\n      and undefined variable warnings quite right.  */\n-  if ((errorcount || sorrycount) && uid < 0)\n+  if (seen_error () && uid < 0)\n     {\n       gimple_stmt_iterator gsi = gsi_start_bb (BASIC_BLOCK (NUM_FIXED_BLOCKS));\n       gimple stmt;"}, {"sha": "a70c09fb3f57a36db72a7943f3f036bca1b37e9c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -4060,7 +4060,7 @@ optimize_inline_calls (tree fn)\n   /* There is no point in performing inlining if errors have already\n      occurred -- and we might crash if we try to inline invalid\n      code.  */\n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return 0;\n \n   /* Clear out ID.  */"}, {"sha": "2437bc48470d15cda728b082dcd12cf0b8ad143d", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,5 +1,5 @@\n /* Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n@@ -1292,7 +1292,7 @@ mudflap_finish_file (void)\n   tree ctor_statements = NULL_TREE;\n \n   /* No need to continue when there were errors.  */\n-  if (errorcount != 0 || sorrycount != 0)\n+  if (seen_error ())\n     return;\n \n   /* Insert a call to __mf_init.  */"}, {"sha": "ed4676996dd55ff9b6be77067dbe64a1909818ea", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -1,5 +1,5 @@\n /* Top-level control of tree optimizations.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -57,7 +57,7 @@ gate_all_optimizations (void)\n   return (optimize >= 1\n \t  /* Don't bother doing anything if the program has errors.\n \t     We have to pass down the queue if we already went into SSA */\n-\t  && (!(errorcount || sorrycount) || gimple_in_ssa_p (cfun)));\n+\t  && (!seen_error () || gimple_in_ssa_p (cfun)));\n }\n \n struct gimple_opt_pass pass_all_optimizations =\n@@ -85,7 +85,7 @@ static bool\n gate_all_early_local_passes (void)\n {\n \t  /* Don't bother doing anything if the program has errors.  */\n-  return (!errorcount && !sorrycount && !in_lto_p);\n+  return (!seen_error () && !in_lto_p);\n }\n \n struct simple_ipa_opt_pass pass_early_local_passes =\n@@ -126,7 +126,7 @@ gate_all_early_optimizations (void)\n {\n   return (optimize >= 1\n \t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  && !seen_error ());\n }\n \n struct gimple_opt_pass pass_all_early_optimizations ="}, {"sha": "23e52d65950cf309e44834f3cae4267dba9cf95e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -6626,7 +6626,7 @@ gate_ipa_pta (void)\n   return (optimize\n \t  && flag_ipa_pta\n \t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  && !seen_error ());\n }\n \n /* IPA PTA solutions for ESCAPED.  */"}, {"sha": "180e21e86ec7f554df02e998417e7eec5cc23de1", "filename": "gcc/varpool.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da2ed5f19bc5844735b9f5719e5717d744ad54c/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=1da2ed5f19bc5844735b9f5719e5717d744ad54c", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"cgraph.h\"\n #include \"langhooks.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic-core.h\"\n #include \"hashtab.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n@@ -517,7 +517,7 @@ varpool_remove_unreferenced_decls (void)\n \n   varpool_reset_queue ();\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return;\n \n   while (node)\n@@ -549,7 +549,7 @@ varpool_assemble_pending_decls (void)\n {\n   bool changed = false;\n \n-  if (errorcount || sorrycount)\n+  if (seen_error ())\n     return false;\n \n   timevar_push (TV_VAROUT);"}]}