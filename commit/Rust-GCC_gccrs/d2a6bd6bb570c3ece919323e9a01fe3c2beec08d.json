{"sha": "d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhNmJkNmJiNTcwYzNlY2U5MTkzMjNlOWEwMWZlM2MyYmVlYzA4ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-02-06T10:13:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-02-06T10:13:51Z"}, "message": "[multiple changes]\n\n2013-02-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Apply_Discriminant_Check): Look for discriminant\n\tconstraint in full view of private type when needed.\n\t* sem_ch12.adb (Validate_Array_Type_Instance): Specialize\n\tprevious patch to components types that are private and without\n\tdiscriminants.\n\n2013-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Find_Enclosing_Context): Recognize\n\ta simple return statement as one of the cases that require special\n\tprocessing with respect to temporary controlled function results.\n\t(Process_Transient_Object): Do attempt to finalize a temporary\n\tcontrolled function result when the associated context is\n\ta simple return statement.  Instead, leave this task to the\n\tgeneral finalization mechanism.\n\n2013-02-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads: Minor reformatting.\n\t(Status_Flag_Or_Transient_Decl): Add ??? comment.\n\nFrom-SVN: r195791", "tree": {"sha": "0a39ca01b439decf89f4eef569e3dd4cf7ff86f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a39ca01b439decf89f4eef569e3dd4cf7ff86f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/comments", "author": null, "committer": null, "parents": [{"sha": "4c7e09908b732b93b74b49ad3eafda0198c1d1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7e09908b732b93b74b49ad3eafda0198c1d1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7e09908b732b93b74b49ad3eafda0198c1d1df"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "e7b259a0afc4549c00a6e8ed5e34daf7be798f1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "patch": "@@ -1,3 +1,26 @@\n+2013-02-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Discriminant_Check): Look for discriminant\n+\tconstraint in full view of private type when needed.\n+\t* sem_ch12.adb (Validate_Array_Type_Instance): Specialize\n+\tprevious patch to components types that are private and without\n+\tdiscriminants.\n+\n+2013-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Find_Enclosing_Context): Recognize\n+\ta simple return statement as one of the cases that require special\n+\tprocessing with respect to temporary controlled function results.\n+\t(Process_Transient_Object): Do attempt to finalize a temporary\n+\tcontrolled function result when the associated context is\n+\ta simple return statement.  Instead, leave this task to the\n+\tgeneral finalization mechanism.\n+\n+2013-02-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting.\n+\t(Status_Flag_Or_Transient_Decl): Add ??? comment.\n+\n 2013-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Expression_With_Actions): Rewritten. This"}, {"sha": "37c6dd1e8caf987564a5c636ed18d008ddb04459", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1536,8 +1536,8 @@ package body Checks is\n       --  the constraints are constants. In this case, we can do the check\n       --  successfully at compile time.\n \n-      --  We skip this check for the case where the node is a rewritten`\n-      --  allocator, because it already carries the context subtype, and\n+      --  We skip this check for the case where the node is a rewritten`as\n+      --  an allocator, because it already carries the context subtype, and\n       --  extracting the discriminants from the aggregate is messy.\n \n       if Is_Constrained (S_Typ)\n@@ -1591,7 +1591,17 @@ package body Checks is\n                end if;\n             end if;\n \n-            DconT  := First_Elmt (Discriminant_Constraint (T_Typ));\n+            --  Constraint may appear in full view of type\n+\n+            if Ekind (T_Typ) = E_Private_Subtype\n+              and then Present (Full_View (T_Typ))\n+            then\n+               DconT  :=\n+                 First_Elmt (Discriminant_Constraint (Full_View (T_Typ)));\n+\n+            else\n+               DconT  := First_Elmt (Discriminant_Constraint (T_Typ));\n+            end if;\n \n             while Present (Discr) loop\n                ItemS := Node (DconS);"}, {"sha": "0f33b7f375c41d4d1493da084da63fafaef12cec", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3725,11 +3725,12 @@ package Einfo is\n \n --    Status_Flag_Or_Transient_Decl (Node15)\n --       Defined in variables and constants. Applies to objects that require\n---       special treatment by the finalization machinery. Such examples are\n---       extended return results, if and case expression results and objects\n---       inside N_Expression_With_Actions nodes. The attribute contains the\n---       entity of a flag which specifies particular behavior over a region\n---       of code or the declaration of a \"hook\" object.\n+--       special treatment by the finalization machinery, such as extended\n+--       return results, IF and CASE expression results, and objects inside\n+--       N_Expression_With_Actions nodes. The attribute contains the entity\n+--       of a flag which specifies particular behavior over a region of code\n+--       or the declaration of a \"hook\" object.\n+--       In which case is it a flag, or a hook object???\n \n --    Storage_Size_Variable (Node15) [implementation base type only]\n --       Defined in access types and task type entities. This flag is set"}, {"sha": "f8d37a5530f0dac233c57f2459dc6634145c5ac6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "patch": "@@ -5038,7 +5038,7 @@ package body Exp_Ch4 is\n             --  Start of processing for Find_Enclosing_Context\n \n             begin\n-               --  The expression_with_action is in a case or if expression and\n+               --  The expression_with_actions is in a case/if expression and\n                --  the lifetime of any temporary controlled object is therefore\n                --  extended. Find a suitable insertion node by locating the top\n                --  most case or if expressions.\n@@ -5088,12 +5088,12 @@ package body Exp_Ch4 is\n \n                   return Par;\n \n-               --  Shor circuit operators in complex expressions are converted\n+               --  Short circuit operators in complex expressions are converted\n                --  into expression_with_actions.\n \n                else\n                   --  Take care of the case where the expression_with_actions\n-                  --  is burried deep inside an if statement. The temporary\n+                  --  is buried deep inside an IF statement. The temporary\n                   --  function result must be finalized before the then, elsif\n                   --  or else statements are evaluated.\n \n@@ -5123,7 +5123,7 @@ package body Exp_Ch4 is\n \n                   Top := Par;\n \n-                  --  The expression_with_action might be located in a pragm\n+                  --  The expression_with_actions might be located in a pragma\n                   --  in which case locate the pragma itself:\n \n                   --    pragma Precondition (... and then Ctrl_Func_Call ...);\n@@ -5133,10 +5133,16 @@ package body Exp_Ch4 is\n \n                   --    Obj [: Some_Typ] := ... and then Ctrl_Func_Call ...;\n \n+                  --  Another case to consider is an expression_with_actions as\n+                  --  part of a return statement:\n+\n+                  --    return ... and then Ctrl_Func_Call ...;\n+\n                   while Present (Par) loop\n                      if Nkind_In (Par, N_Assignment_Statement,\n                                        N_Object_Declaration,\n-                                       N_Pragma)\n+                                       N_Pragma,\n+                                       N_Simple_Return_Statement)\n                      then\n                         return Par;\n \n@@ -5238,23 +5244,32 @@ package body Exp_Ch4 is\n             --       Temp := null;\n             --    end if;\n \n-            Insert_Action_After (Context,\n-              Make_If_Statement (Loc,\n-                Condition =>\n-                  Make_Op_Ne (Loc,\n-                    Left_Opnd  => New_Reference_To (Temp_Id, Loc),\n-                    Right_Opnd => Make_Null (Loc)),\n-\n-                Then_Statements => New_List (\n-                  Make_Final_Call\n-                    (Obj_Ref =>\n-                       Make_Explicit_Dereference (Loc,\n-                         Prefix => New_Reference_To (Temp_Id, Loc)),\n-                     Typ     => Desig_Typ),\n+            --  When the expression_with_actions is part of a return statement,\n+            --  there is no need to insert a finalization call, as the general\n+            --  finalization mechanism (see Build_Finalizer) would take care of\n+            --  the temporary function result on subprogram exit. Note that it\n+            --  would also be impossible to insert the finalization code after\n+            --  the return statement as this would make it unreachable.\n+\n+            if Nkind (Context) /= N_Simple_Return_Statement then\n+               Insert_Action_After (Context,\n+                 Make_If_Statement (Loc,\n+                   Condition =>\n+                     Make_Op_Ne (Loc,\n+                       Left_Opnd  => New_Reference_To (Temp_Id, Loc),\n+                       Right_Opnd => Make_Null (Loc)),\n+\n+                   Then_Statements => New_List (\n+                     Make_Final_Call\n+                       (Obj_Ref =>\n+                          Make_Explicit_Dereference (Loc,\n+                            Prefix => New_Reference_To (Temp_Id, Loc)),\n+                        Typ     => Desig_Typ),\n \n-                  Make_Assignment_Statement (Loc,\n-                    Name       => New_Reference_To (Temp_Id, Loc),\n-                    Expression => Make_Null (Loc)))));\n+                     Make_Assignment_Statement (Loc,\n+                       Name       => New_Reference_To (Temp_Id, Loc),\n+                       Expression => Make_Null (Loc)))));\n+            end if;\n          end Process_Transient_Object;\n \n       --  Start of processing for Process_Action"}, {"sha": "fad6ae0b0041e5b284c315390ead6ac0e2fa9b41", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a6bd6bb570c3ece919323e9a01fe3c2beec08d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d2a6bd6bb570c3ece919323e9a01fe3c2beec08d", "patch": "@@ -10708,10 +10708,14 @@ package body Sem_Ch12 is\n              or else Subtypes_Match\n                (Find_Actual_Type (Component_Type (A_Gen_T), A_Gen_T),\n                Component_Type (Act_T))\n-             or else Subtypes_Match\n-               (Base_Type\n-                 (Find_Actual_Type (Component_Type (A_Gen_T), A_Gen_T)),\n-               Component_Type (Act_T))\n+             or else\n+               (Is_Private_Type (Component_Type (A_Gen_T))\n+                 and then not Has_Discriminants (Component_Type (A_Gen_T))\n+                 and then\n+                  Subtypes_Match\n+                    (Base_Type\n+                      (Find_Actual_Type (Component_Type (A_Gen_T), A_Gen_T)),\n+                    Component_Type (Act_T)))\n          then\n             null;\n          else"}]}