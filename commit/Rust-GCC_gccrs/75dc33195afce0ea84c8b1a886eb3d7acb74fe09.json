{"sha": "75dc33195afce0ea84c8b1a886eb3d7acb74fe09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkYzMzMTk1YWZjZTBlYTg0YzhiMWE4ODZlYjNkN2FjYjc0ZmUwOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-09T23:44:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-09T23:44:25Z"}, "message": "(promoted_input_arg): New function.\n\nFrom-SVN: r3449", "tree": {"sha": "9f560dfcca32b93ef920d9e2d7a6f7200ad460a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f560dfcca32b93ef920d9e2d7a6f7200ad460a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75dc33195afce0ea84c8b1a886eb3d7acb74fe09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75dc33195afce0ea84c8b1a886eb3d7acb74fe09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75dc33195afce0ea84c8b1a886eb3d7acb74fe09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75dc33195afce0ea84c8b1a886eb3d7acb74fe09/comments", "author": null, "committer": null, "parents": [{"sha": "638fa106c8103421e7011a24943dc3c8ffbc5f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638fa106c8103421e7011a24943dc3c8ffbc5f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638fa106c8103421e7011a24943dc3c8ffbc5f6b"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "5e159a69cbab2c4c89af0e9cf95224aefe1ea0f3", "filename": "gcc/function.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75dc33195afce0ea84c8b1a886eb3d7acb74fe09/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75dc33195afce0ea84c8b1a886eb3d7acb74fe09/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=75dc33195afce0ea84c8b1a886eb3d7acb74fe09", "patch": "@@ -3289,6 +3289,52 @@ assign_parms (fndecl, second_time)\n   current_function_return_rtx = DECL_RTL (DECL_RESULT (fndecl));\n }\n \f\n+/* Indicate whether REGNO is an incoming argument to the current function\n+   that was promoted to a wider mode.  If so, return the RTX for the\n+   register (to get its mode).  PMODE and PUNSIGNEDP are set to the mode\n+   that REGNO is promoted from and whether the promotion was signed or\n+   unsigned.  */\n+\n+#ifdef PROMOTE_FUNCTION_ARGS\n+\n+rtx\n+promoted_input_arg (regno, pmode, punsignedp)\n+     int regno;\n+     enum machine_mode *pmode;\n+     int *punsignedp;\n+{\n+  tree arg;\n+\n+  for (arg = DECL_ARGUMENTS (current_function_decl); arg;\n+       arg = TREE_CHAIN (arg))\n+    if (GET_CODE (DECL_INCOMING_RTL (arg)) == REG\n+\t&& REGNO (DECL_INCOMING_RTL (arg)) == regno\n+\t&& (TREE_CODE (TREE_TYPE (arg)) == INTEGER_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == ENUMERAL_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == CHAR_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == REAL_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == POINTER_TYPE\n+\t    || TREE_CODE (TREE_TYPE (arg)) == OFFSET_TYPE))\n+      {\n+\tenum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n+\tint unsignedp = TREE_UNSIGNED (TREE_TYPE (arg));\n+\n+\tPROMOTE_MODE (mode, unsignedp, TREE_TYPE (arg));\n+\tif (mode == GET_MODE (DECL_INCOMING_RTL (arg))\n+\t    && mode != DECL_MODE (arg))\n+\t  {\n+\t    *pmode = DECL_MODE (arg);\n+\t    *punsignedp = unsignedp;\n+\t    return DECL_INCOMING_RTL (arg);\n+\t  }\n+      }\n+\n+  return 0;\n+}\n+\n+#endif\n+\f\n /* Compute the size and offset from the start of the stacked arguments for a\n    parm passed in mode PASSED_MODE and with type TYPE.\n "}]}