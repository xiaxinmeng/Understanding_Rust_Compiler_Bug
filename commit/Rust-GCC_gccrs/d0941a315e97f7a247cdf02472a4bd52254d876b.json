{"sha": "d0941a315e97f7a247cdf02472a4bd52254d876b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5NDFhMzE1ZTk3ZjdhMjQ3Y2RmMDI0NzJhNGJkNTIyNTRkODc2Yg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-11-13T23:49:41Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-11-13T23:49:41Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_TARGET): New macro...\n\n2000-11-13  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_TARGET):  New macro, replacing\n\t  GLIBCPP_CHECK_CPU and GLIBCPP_CHECK_OS, sourcing configure.target.\n\t  (GLIBCPP_CONFIGURE):  Call new macro here.\n\t* configure.host:  Cleanup.\n\t* configure.in:  Remove those two macros.\n\t* configure.target:  New file.\n\t* aclocal.m4:  Regenerated.\n\t* configure:  Ditto.\n\t* Makefile.in:  Ditto.\n\t* libio/Makefile.in:  Ditto.\n\t* libmath/Makefile.in:  Ditto.\n\t* libsupc++/Makefile.in:  Ditto.\n\t* src/Makefile.in:  Ditto.\n\n\t* mkcheck.in:  Use libtool.  Split things out into functions.\n\nFrom-SVN: r37443", "tree": {"sha": "d6888bdef318cbe5fa19ef65eb739bc0160af22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6888bdef318cbe5fa19ef65eb739bc0160af22a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0941a315e97f7a247cdf02472a4bd52254d876b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0941a315e97f7a247cdf02472a4bd52254d876b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0941a315e97f7a247cdf02472a4bd52254d876b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0941a315e97f7a247cdf02472a4bd52254d876b/comments", "author": null, "committer": null, "parents": [{"sha": "b72554f1df2c06c2bd5b9d3d12b28897c91d51b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72554f1df2c06c2bd5b9d3d12b28897c91d51b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72554f1df2c06c2bd5b9d3d12b28897c91d51b5"}], "stats": {"total": 3213, "additions": 1723, "deletions": 1490}, "files": [{"sha": "2ca71b08091d31f4b810c573e7730c2b8224e144", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -1,3 +1,21 @@\n+2000-11-13  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_TARGET):  New macro, replacing\n+\t  GLIBCPP_CHECK_CPU and GLIBCPP_CHECK_OS, sourcing configure.target.\n+\t  (GLIBCPP_CONFIGURE):  Call new macro here.\n+\t* configure.host:  Cleanup.\n+\t* configure.in:  Remove those two macros.\n+\t* configure.target:  New file.\n+\t* aclocal.m4:  Regenerated.\n+\t* configure:  Ditto.\n+\t* Makefile.in:  Ditto.\n+\t* libio/Makefile.in:  Ditto.\n+\t* libmath/Makefile.in:  Ditto.\n+\t* libsupc++/Makefile.in:  Ditto.\n+\t* src/Makefile.in:  Ditto.\n+\n+\t* mkcheck.in:  Use libtool.  Split things out into functions.\n+\n 2000-11-12  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n         * Makefile.am (tmp-libstdsc++.INC:): Do not use -I$(top_builddir)."}, {"sha": "106d6ef402e3991074c8859295777202102820d3", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -134,7 +134,48 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "80a534e5d4c9d235222ac542ef83fe5fb52a92b9", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 14, "deletions": 88, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -156,6 +156,10 @@ LIB_AC_PROG_CXX\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n+  # This does for the target what configure.host does for the host.  In\n+  # addition to modifying the same flags, it also sets up symlinks.\n+  GLIBCPP_CHECK_TARGET\n+\n   GLIBCPP_CFLAGS=\"[$]{glibcpp_cflags}\"\n   GLIBCPP_CXXFLAGS=\"[$]{glibcpp_cxxflags}\"\n   AC_SUBST(GLIBCPP_CFLAGS)\n@@ -754,93 +758,15 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n ])\n \n \n-dnl Check to see what architecture we are compiling for. Also, if \n-dnl architecture-specific flags are required for compilation, add them here.\n-dnl \n-dnl GLIBCPP_CHECK_CPU\n-AC_DEFUN(GLIBCPP_CHECK_CPU, [\n-    AC_MSG_CHECKING([for cpu config directory])\n-# Currently unused, but could be useful.\n-#    CPU_FLAGS=                        \n-    case \"${target_cpu}\" in\n-      alpha*)\n-        cpu_include_dir=\"config/cpu/alpha\"\n-        ;;\n-      arm*)\n-        cpu_include_dir=\"config/cpu/arm\"\n-        ;;\n-      ia64)\n-        cpu_include_dir=\"config/cpu/ia64\"\n-        ;;\n-      i386)\n-        cpu_include_dir=\"config/cpu/i386\"\n-        ;;\n-      i486 | i586 | i686 | i786)\n-        cpu_include_dir=\"config/cpu/i486\"\n-        ;;\n-      powerpc | rs6000)\n-        cpu_include_dir=\"config/cpu/powerpc\"\n-        ;;\n-      sparc64 | ultrasparc)\n-        cpu_include_dir=\"config/cpu/sparc/sparc64\"\n-        ;;\n-      sparc*)\n-        cpu_include_dir=\"config/cpu/sparc/sparc32\"\n-        ;;\n-      *)\n-        cpu_include_dir=\"config/cpu/generic\"\n-        ;;\n-    esac\n-    AC_MSG_RESULT($cpu_include_dir)\n-])\n-\n- \n-dnl Check to see what OS we are compiling for. Also, if os-specific flags \n-dnl are required for compilation, add them here.\n+dnl Check to see what architecture and operating system we are compiling\n+dnl for.  Also, if architecture- or OS-specific flags are required for\n+dnl compilation, pick them up here.\n dnl \n-dnl GLIBCPP_CHECK_OS\n-AC_DEFUN(GLIBCPP_CHECK_OS, [\n-    AC_MSG_CHECKING([for OS config directory])\n-# Currently unused, but could be useful.\n-#    OS_FLAGS=\n-    case \"${target_os}\" in\n-      aix4.[[3456789]]* | aix[[56789]]*)\n-        os_include_dir=\"config/os/aix\"\n-        case \"$CXX\" in\n-          *pthread*)\n-            enable_threads='posix'\n-            ;;\n-          *)\n-            enable_threads='no'\n-            ;;\n-        esac\n-        ;;\n-      aix*)\n-        os_include_dir=\"config/os/aix\"\n-        ;;\n-      bsd* | freebsd*)\n-        os_include_dir=\"config/os/bsd\"\n-        ;;\n-      linux*)\n-        os_include_dir=\"config/os/gnu-linux\"\n-        ;;\n-      irix*)\n-        os_include_dir=\"config/os/irix\"\n-        ;;\n-      solaris2.5*)\n-        os_include_dir=\"config/os/solaris/solaris2.5\"\n-        ;;\n-      solaris2.6*)\n-        os_include_dir=\"config/os/solaris/solaris2.6\"\n-        ;;\n-      solaris2.7* | solaris2.8*)\n-        os_include_dir=\"config/os/solaris/solaris2.7\"\n-        ;;\n-      *)\n-        os_include_dir=\"config/os/generic\"\n-        ;;\n-    esac\n-    AC_MSG_RESULT($os_include_dir)\n+dnl GLIBCPP_CHECK_TARGET\n+AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n+    . [$]{glibcpp_basedir}/configure.target\n+    AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n+    AC_MSG_RESULT(OS config directory is $os_include_dir)\n     AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n@@ -1422,7 +1348,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n                 ;;\n         xyes)\n                 # default\n-                target_thread_file=''\n+                target_thread_file='posix'\n                 ;;\n         xdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n         xsolaris | xwin32 | xdce | xvxworks)\n@@ -1447,7 +1373,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n       AC_MSG_ERROR(thread package $THREADS not yet supported)\n       ;;\n     *)\n-      AC_MSG_ERROR($THREADS is an unknown thread package)\n+      AC_MSG_ERROR($THREADS is an unsupported/unknown thread package)\n       ;;\n   esac\n   AC_MSG_RESULT($THREADH)"}, {"sha": "6b3b1e665d247ad81ced38a6879baae75870d759", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 14, "deletions": 88, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -168,6 +168,10 @@ LIB_AC_PROG_CXX\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n+  # This does for the target what configure.host does for the host.  In\n+  # addition to modifying the same flags, it also sets up symlinks.\n+  GLIBCPP_CHECK_TARGET\n+\n   GLIBCPP_CFLAGS=\"[$]{glibcpp_cflags}\"\n   GLIBCPP_CXXFLAGS=\"[$]{glibcpp_cxxflags}\"\n   AC_SUBST(GLIBCPP_CFLAGS)\n@@ -766,93 +770,15 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n ])\n \n \n-dnl Check to see what architecture we are compiling for. Also, if \n-dnl architecture-specific flags are required for compilation, add them here.\n-dnl \n-dnl GLIBCPP_CHECK_CPU\n-AC_DEFUN(GLIBCPP_CHECK_CPU, [\n-    AC_MSG_CHECKING([for cpu config directory])\n-# Currently unused, but could be useful.\n-#    CPU_FLAGS=                        \n-    case \"${target_cpu}\" in\n-      alpha*)\n-        cpu_include_dir=\"config/cpu/alpha\"\n-        ;;\n-      arm*)\n-        cpu_include_dir=\"config/cpu/arm\"\n-        ;;\n-      ia64)\n-        cpu_include_dir=\"config/cpu/ia64\"\n-        ;;\n-      i386)\n-        cpu_include_dir=\"config/cpu/i386\"\n-        ;;\n-      i486 | i586 | i686 | i786)\n-        cpu_include_dir=\"config/cpu/i486\"\n-        ;;\n-      powerpc | rs6000)\n-        cpu_include_dir=\"config/cpu/powerpc\"\n-        ;;\n-      sparc64 | ultrasparc)\n-        cpu_include_dir=\"config/cpu/sparc/sparc64\"\n-        ;;\n-      sparc*)\n-        cpu_include_dir=\"config/cpu/sparc/sparc32\"\n-        ;;\n-      *)\n-        cpu_include_dir=\"config/cpu/generic\"\n-        ;;\n-    esac\n-    AC_MSG_RESULT($cpu_include_dir)\n-])\n-\n- \n-dnl Check to see what OS we are compiling for. Also, if os-specific flags \n-dnl are required for compilation, add them here.\n+dnl Check to see what architecture and operating system we are compiling\n+dnl for.  Also, if architecture- or OS-specific flags are required for\n+dnl compilation, pick them up here.\n dnl \n-dnl GLIBCPP_CHECK_OS\n-AC_DEFUN(GLIBCPP_CHECK_OS, [\n-    AC_MSG_CHECKING([for OS config directory])\n-# Currently unused, but could be useful.\n-#    OS_FLAGS=\n-    case \"${target_os}\" in\n-      aix4.[[3456789]]* | aix[[56789]]*)\n-        os_include_dir=\"config/os/aix\"\n-        case \"$CXX\" in\n-          *pthread*)\n-            enable_threads='posix'\n-            ;;\n-          *)\n-            enable_threads='no'\n-            ;;\n-        esac\n-        ;;\n-      aix*)\n-        os_include_dir=\"config/os/aix\"\n-        ;;\n-      bsd* | freebsd*)\n-        os_include_dir=\"config/os/bsd\"\n-        ;;\n-      linux*)\n-        os_include_dir=\"config/os/gnu-linux\"\n-        ;;\n-      irix*)\n-        os_include_dir=\"config/os/irix\"\n-        ;;\n-      solaris2.5*)\n-        os_include_dir=\"config/os/solaris/solaris2.5\"\n-        ;;\n-      solaris2.6*)\n-        os_include_dir=\"config/os/solaris/solaris2.6\"\n-        ;;\n-      solaris2.7* | solaris2.8*)\n-        os_include_dir=\"config/os/solaris/solaris2.7\"\n-        ;;\n-      *)\n-        os_include_dir=\"config/os/generic\"\n-        ;;\n-    esac\n-    AC_MSG_RESULT($os_include_dir)\n+dnl GLIBCPP_CHECK_TARGET\n+AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n+    . [$]{glibcpp_basedir}/configure.target\n+    AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n+    AC_MSG_RESULT(OS config directory is $os_include_dir)\n     AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n@@ -1434,7 +1360,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n                 ;;\n         xyes)\n                 # default\n-                target_thread_file=''\n+                target_thread_file='posix'\n                 ;;\n         xdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n         xsolaris | xwin32 | xdce | xvxworks)\n@@ -1459,7 +1385,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n       AC_MSG_ERROR(thread package $THREADS not yet supported)\n       ;;\n     *)\n-      AC_MSG_ERROR($THREADS is an unknown thread package)\n+      AC_MSG_ERROR($THREADS is an unsupported/unknown thread package)\n       ;;\n   esac\n   AC_MSG_RESULT($THREADH)"}, {"sha": "242eda5d6dcce58eb466e2a14da1338349f68fb7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1036, "deletions": 1097, "changes": 2133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d0941a315e97f7a247cdf02472a4bd52254d876b"}, {"sha": "65d256fae74f20c453c5ff84abe0224c17ff6ee9", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -10,34 +10,32 @@\n # If it encounters an error, it will exit with a message.\n \n # It uses the following shell variables:\n-#   host\t\tThe configuration host\n-#   host_cpu\t\tThe configuration host CPU\n-#   target_optspace\t--enable-target-optspace (\"yes\", \"no\", \"\")\n+#   host                  The configuration host\n+#   host_cpu              The configuration host CPU\n+#   target_optspace       --enable-target-optspace (\"yes\", \"no\", \"\")\n \n # It sets the following shell variables:\n-#   glibcpp_cflags\tSpecial CFLAGS to use when building\n-#   glibcpp_cxxflags\tSpecial CXXFLAGS to use when building\n+#   glibcpp_cflags         Special CFLAGS to use when building\n+#   glibcpp_cxxflags       Special CXXFLAGS to use when building\n \n-glibcpp_cflags=\n-glibcpp_cxxflags=\n \n AM_RUNTESTFLAGS= \n \n # Set any host dependent compiler flags.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n \n-echo \"$target\"\n \n DIVIDESPEC=-fuse-divide-subroutine\n \n case \"${host}\" in\n   i686-*|i586-*)\n-\t;;\n+       ;;\n   sparc-*)\n         ;;\n   *)\n-\t;;\n+       ;;\n esac\n \n glibcpp_cflags=\"${glibcpp_cflags} ${libgcj_flags}\"\n glibcpp_cxxflags=\"${glibcpp_cxxflags} ${libgcj_flags}\"\n+"}, {"sha": "780861ef088a0cad90bd6860b0c88409fa9cdbf0", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -28,8 +28,6 @@ AM_CONFIG_HEADER(config.h)\n \n # Check for c++ or library specific bits that don't require linking.\n GLIBCPP_CHECK_COMPILER_VERSION\n-GLIBCPP_CHECK_CPU\n-GLIBCPP_CHECK_OS\n \n # Enable all the crazy c++ stuff.  C_MBCHAR must come early.\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)"}, {"sha": "ffa3b164fb4563ed5d5bbb8a23f3412076737101", "filename": "libstdc++-v3/configure.target", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -0,0 +1,125 @@\n+# configure.target\n+\n+# This shell script handles all target based configuration for libstdc++.\n+# It sets various shell variables based on the the target and the\n+# configuration options.  You can modify this shell script without\n+# needing to rerun autoconf.\n+\n+# This shell script should be invoked as\n+#   . configure.target\n+# If it encounters an error, it will exit with a message.\n+\n+# It uses the following shell variables:\n+#   target                The configuration target\n+#   target_cpu            The configuration target CPU\n+#   target_os             The configuration target OS\n+#   target_optspace       --enable-target-optspace (\"yes\", \"no\", \"\")\n+\n+# It possibly modifies the following shell variables:\n+#   glibcpp_cflags         Special CFLAGS to use when building\n+#   glibcpp_cxxflags       Special CXXFLAGS to use when building\n+#   cpu_include_dir        CPU-specific include directory, relative to srcdir\n+#   os_include_dir         OS-specific include directory, relative to srcdir\n+# The first two are set in configure.host and modified here.\n+\n+\n+# These are \"local\" and should be set in the switch statements below.  They\n+# will be appended to their real conterparts once the dust settles.\n+l_glibcpp_cflags=\n+l_glibcpp_cxxflags=\n+\n+\n+# Set any CPU dependent compiler flags.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+\n+case \"${target_cpu}\" in\n+  alpha*)\n+    cpu_include_dir=\"config/cpu/alpha\"\n+    ;;\n+  arm*)\n+    cpu_include_dir=\"config/cpu/arm\"\n+    ;;\n+  ia64)\n+    cpu_include_dir=\"config/cpu/ia64\"\n+    ;;\n+  i386)\n+    cpu_include_dir=\"config/cpu/i386\"\n+    ;;\n+  i486 | i586 | i686 | i786)\n+    cpu_include_dir=\"config/cpu/i486\"\n+    ;;\n+  powerpc | rs6000)\n+    cpu_include_dir=\"config/cpu/powerpc\"\n+    ;;\n+  sparc64 | ultrasparc)\n+    cpu_include_dir=\"config/cpu/sparc/sparc64\"\n+    ;;\n+  sparc*)\n+    cpu_include_dir=\"config/cpu/sparc/sparc32\"\n+    ;;\n+  *)\n+    cpu_include_dir=\"config/cpu/generic\"\n+    ;;\n+esac\n+\n+\n+# Set any OS dependent compiler flags.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+\n+case \"${target_os}\" in\n+  aix4.[[3456789]]* | aix[[56789]]*)\n+    os_include_dir=\"config/os/aix\"\n+    case \"$CXX\" in\n+      *pthread*)\n+        enable_threads='posix'\n+        ;;\n+      *)\n+        enable_threads='no'\n+        ;;\n+    esac\n+    ;;\n+  aix*)\n+    os_include_dir=\"config/os/aix\"\n+    ;;\n+  bsd* | freebsd*)\n+    os_include_dir=\"config/os/bsd\"\n+    ;;\n+  linux*)\n+    os_include_dir=\"config/os/gnu-linux\"\n+    ;;\n+  irix*)\n+    os_include_dir=\"config/os/irix\"\n+    ;;\n+  solaris2.5*)\n+    os_include_dir=\"config/os/solaris/solaris2.5\"\n+    ;;\n+  solaris2.6*)\n+    os_include_dir=\"config/os/solaris/solaris2.6\"\n+    ;;\n+  solaris2.7* | solaris2.8*)\n+    os_include_dir=\"config/os/solaris/solaris2.7\"\n+    ;;\n+  *)\n+    os_include_dir=\"config/os/generic\"\n+    ;;\n+esac\n+\n+\n+# Set any flags dependant on the full target triplet.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+\n+#case \"${target}\" in\n+#  *-*-telepathic)\n+#    # On the MindReader 10000 platform, you really *can* tell the\n+#    # compiler to \"do what I mean\".\n+#    l_glibcpp_cxxflags='-fDWIM'\n+#    ;;\n+#esac\n+\n+\n+# Okay, folks, show's over.  Move along, move along.\n+\n+glibcpp_cflags=\"${glibcpp_cflags} ${libgcj_flags} ${l_glibcpp_cflags}\"\n+glibcpp_cxxflags=\"${glibcpp_cxxflags} ${libgcj_flags} ${l_glibcpp_cxxflags}\"\n+\n+"}, {"sha": "051962216aa6d2f82bd2a4e4b4d706b558600ba0", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -121,14 +121,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c     iofopen.c stdio.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@    iofopen.c stdio.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "3a09ce21145c325100f4c1ed46d58d9543e1ce79", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -112,18 +112,31 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \tsignbitl.c cabsl.c \n+EXTRA_LONG_DOUBLE_yes = \\\n+\tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n+\tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n+\tsignbitl.c cabsl.c \n \n \n-EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c  carg.c cargf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n+\tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n+\tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\\n+\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n+\tctanhf.c  carg.c cargf.c hypot.c hypotf.c\\\n+\tatan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -137,7 +150,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "95d85f1691007b43d027c1e12aa8c72b2f35ba71", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -110,12 +110,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -131,11 +131,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -147,20 +149,38 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES = \\\n+\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n+\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n-headers =  \tcxxabi.h exception new new.h typeinfo\n+headers = \\\n+\tcxxabi.h exception new new.h typeinfo\n \n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\texception_support.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n-@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n \n glibcppinstall_HEADERS = $(headers)\n \n@@ -173,7 +193,12 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -194,14 +219,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "ff435184fa6b1ecfb96bfe5593ce0667592729b7", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 258, "deletions": 142, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -1,15 +1,31 @@\n #!/usr/bin/env bash\n \n-# Script to do automated testing and data collection\n-# for various test files, so that we don't have to do this by hand on\n-# every test file.  It attempts to collect some diagnostic info about\n-# size and speed that should be useful in the future as the library\n-# gets tuned for size and speed. In addition, it tests static and\n-# shared linkage.\n+\n+# Script to do automated testing and data collection for various test\n+# files, so that we don't have to do this by hand on every test file.\n+# It attempts to collect some diagnostic info about size and speed that\n+# should be useful in the future as the library gets tuned for size\n+# and speed.  In addition, it tests static and shared linkage, iff each\n+# has been enabled.\n \n # Invocation \n # mkcheck [012] (path to build) (path to src) (path to install)\n \n+### XXX There are a lot of tests in here for OS-specific stuff.  If we\n+###     move to a 'configure.target' method of determining those extra\n+###     flags and whatnot, we can take out all those things and source\n+###     that file from here.  (Write that file with this in mind...)\n+\n+### XXX Note that breaking out of this with ^C will not work.  Dunno why.\n+\n+\n+# This has been true all along.  Found out about it the hard way...\n+case $BASH_VERSION in\n+    1*)  echo 'You need bash 2.x to run mkcheck.  Exiting.'; exit 1 ;;\n+    *)   ;;   # ??\n+esac\n+\n+\n #\n # 1: variables\n #\n@@ -53,6 +69,11 @@ if [ $WHICH -eq 1 ]; then\n     fi\n fi\n \n+# This is LIBTOOL=@LIBTOOL@ piped through a bit of sanity that we can\n+# assume for this script (by the time we run this).\n+LIBTOOL=\"$BUILD_DIR/libtool\"\n+chmod u+x $LIBTOOL\n+\n # INC_PATH == include path to new headers for use on gcc command-line\n top_srcdir=@top_srcdir@\n C_DIR=\"`basename @C_INCLUDE_DIR@`\"\n@@ -62,41 +83,67 @@ if [ $WHICH != \"1\" ]; then\n     -I$SRC_DIR/include -I$SRC_DIR/libsupc++ -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then\n-  INC_PATH=\"-nostdinc++ -I$SRC_DIR/testsuite\"\n+  INC_PATH=\"-I$SRC_DIR/testsuite\"\n fi\n \n if [ $WHICH -eq 2 ]; then\n   echo $INC_PATH -I$SRC_DIR/include/backward -I$SRC_DIR/include/ext\n   exit 0;\n fi\n \n-#LIB_PATH == where to find the build library binaries.\n-if [ $WHICH != \"1\" ]; then\n-  LIB_PATH=\"$BUILD_DIR/src/.libs\"\n+# It's not dejagnu; we need to do things ourselves.  Pick up any extra\n+# settings for this target.\n+. ${top_srcdir}/configure.target\n+\n+# LIB_PATH == where to find the build libraries for libtool's use\n+# CXX == how to call the compiler\n+if [ $WHICH -eq 0 ]; then\n+  LIB_PATH=\"$BUILD_DIR/src\"\n   CXX=\"$BUILD_DIR/../../gcc/g++ -B$BUILD_DIR/../../gcc/\"\n elif [ $WHICH -eq 1 ]; then\n   LIB_PATH=\"$PREFIX_DIR/lib\"\n   CXX=\"$PREFIX_DIR/bin/g++\"\n fi\n \n-# gcc compiler flags\n-#CXX_FLAG=\"-fsquangle -fhonor-std -fnew-exceptions -g -O2 -DDEBUG_ASSERT \"\n-#CXX_FLAG=\"-g -O2 -DDEBUG_ASSERT \"\n-CXX_FLAG=\"-g -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n+# gcc compiler flags (maybe use glibcpp_cxxflags from configure.target,\n+# but thst's really meant for building the library itself, not using it)\n+CXX_FLAG=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n \n-# a specific flag(s) to force the use of shared libraries, if any\n+# specific libtool flag(s) to force the use of shared libraries, if any\n SH_FLAG=\"\"\n \n-# a specific flag(s) to force the use of static libraries, if any\n-ST_FLAG=\"-static\"\n+# specific libtool flag(s) to force the use of static libraries, if any\n+#ST_FLAG=\"-static\"\n+ST_FLAG=\"-all-static\"\n+\n+# LTCXX == how to call libtool when creating an executable\n+# LTEXE == how to call libtool when running an executable\n+# LIBS == any extra needed -l switches, etc (may need more libs, lose lose)\n+if [ $WHICH -eq 0 ]; then\n+  LTCXX=\"$LIBTOOL --tag=CXX --mode=link \\\n+          $CXX $CXX_FLAG $INC_PATH   \\\n+          $LIB_PATH/../libsupc++/libsupc++.la  $LIB_PATH/libstdc++.la   \\\n+          -no-install\"\n+  LTEXE=\"$LIBTOOL --mode=execute\"\n+  LIBS=\"-nodefaultlibs -lc -lgcc -lc\"\n+elif [ $WHICH -eq 1 ]; then\n+  # For the installed version, we really only need to use libtool and\n+  # the .la file to get correct rpaths.\n+  LTCXX=\"$LIBTOOL --tag=CXX --mode=link \\\n+          $CXX $CXX_FLAG $INC_PATH -L$LIB_PATH   \\\n+          $LIB_PATH/libstdc++.la -no-install -rpath $LIB_PATH\"\n+  LTEXE=\"$LIBTOOL --mode=execute\"\n+  LIBS=\n+fi\n \n # Set up the testing directory, which should be in a directory called\n # \"testsuite\" in the root level of the build directory.\n TEST_DIR=\"`pwd`/testsuite\"\n if [ ! -d \"$TEST_DIR\" ]; then\n     echo \"making directory $TEST_DIR\"\n     mkdir $TEST_DIR\n-    chmod 777 $TEST_DIR\n+    mkdir $TEST_DIR/.libs    # help libtool keep quiet\n+    chmod u+w $TEST_DIR\n fi\n \n # the name of the file that will collect and hold all this useful data:\n@@ -127,9 +174,9 @@ if [ ! -f \"$TESTS_FILE\" ]; then\n     echo \"making file $TESTS_FILE\"\n     for LONG_NAME in $SRC_DIR/testsuite/*/*.cc\n     do\n-\tDIR_NAME=$(dirname $LONG_NAME)\n-\tSHORT_NAME=\"`basename $DIR_NAME`/`basename $LONG_NAME`\"\n-\techo \"$SHORT_NAME\" >> $TESTS_FILE\n+        DIR_NAME=$(dirname $LONG_NAME)\n+        SHORT_NAME=\"`basename $DIR_NAME`/`basename $LONG_NAME`\"\n+        echo \"$SHORT_NAME\" >> $TESTS_FILE\n     done\n fi\n \n@@ -144,9 +191,9 @@ fi\n rm -rf \"$TEST_DIR\"/*exe\n \n # Remove old core files (which now get left in cwd, not $TEST_DIR).\n-rm -rf ./*core\n+rm -rf ./*core*\n \n-# Copy over the data files for filebufs in read-only mode\n+# Copy over the data files for filebufs\n cp $SRC_DIR/testsuite/27_io/*.txt $TEST_DIR\n cp $SRC_DIR/testsuite/27_io/*.tst $TEST_DIR\n chmod u+w $TEST_DIR/*.txt\n@@ -155,11 +202,14 @@ chmod u+w $TEST_DIR/*.tst\n # Emit useful info about compiler and platform\n echo \"host: $(uname -mrsv)\" >> $RESULTS_FILE\n echo \"compiler: $($CXX -v 2>&1 | tail -1)\" >> $RESULTS_FILE\n+echo \"$($CXX -v 2>&1 | grep ^Configured)\" >> $RESULTS_FILE\n echo \"compiler flags: $CXX_FLAG\" >> $RESULTS_FILE\n echo \"date: $(date +%Y%m%d)\" >> $RESULTS_FILE\n echo \"\" >> $RESULTS_FILE\n \n-echo \"p == pass/fail execution test\" >> $RESULTS_FILE\n+explanation='+: pass, -b: build failure, -r: run failure, x: disabled'\n+printf \"%s\\n     %s\\n\"  'p == pass/fail execution test'  \"$explanation\"  \\\n+       >> $RESULTS_FILE\n echo \"ctime == time to compile and link\" >> $RESULTS_FILE\n echo \"etime == time for executable to run\" >> $RESULTS_FILE\n echo \"text == size of the executable text section\" >> $RESULTS_FILE\n@@ -173,6 +223,127 @@ echo \"ctime\" \"etime\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n echo \"text\" \"data\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n echo \"total\" \"name\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n echo \"\" >> $RESULTS_FILE\n+\n+\n+#\n+# 2.5:  support functions\n+#\n+\n+# Figure out how to extract size information from binaries.  We take\n+# the text of the value we want as an argument, and leave the size in\n+# the appropriate variable.\n+#\n+# We discover what kind of size(1) we are using *once* and build a shell\n+# function named 'size_command' to wrap it.  (The \"function\" keyword is\n+# redundant here, but helps me read it, so there.)  Previously we were\n+# re-discovering the size(1) arguments three times for each test; sloooow.\n+#\n+# It is VERY IMPORTANT not to compare these numbers across platforms.\n+# Different size(1)'s extract section information differently.  For\n+# example, using the native Sun size(1) and GNU size(1) built for Suns\n+# on the exact same binary will give very different numbers, due to all\n+# the variance in command-line options and arbitrary names of ELF sections.\n+#\n+# and suddenly we go to 2-space indentations...\n+setup_size_command()\n+{\n+  if size --version 2> /dev/null | grep -c GNU > /dev/null;\n+  then    # Then we're using a GNU size(1) built for this platform.\n+    # We lose .rodata and .data1 and who knows what else... kludge.\n+    function size_command()\n+    {\n+      case $1 in\n+        TEXT)  TEXT=$(size -A $EXENAME | grep ^.text | awk '{print $2}')  ;;\n+        DATA)  DATA=$(size -A $EXENAME | grep -w ^.data | awk '{print $2}')  ;;\n+        SIZE)  SIZE=$(size -A $EXENAME | grep otal | awk '{print $2}')  ;;\n+      esac\n+    }\n+  else\n+    # Not using GNU size; check for platform.  These numbers seem to match\n+    # up to text/data/total, although their meanings seem to be different.\n+    # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+    case @host_os@ in\n+      *aix*)\n+        function size_command()\n+        {\n+          case $1 in\n+            TEXT)  TEXT=$(size -X32_64 $EXENAME | awk '{print $2}')  ;;\n+            DATA)  DATA=$(size -X32_64 $EXENAME | awk '{print $4}')  ;;\n+            SIZE)  SIZE=$(size -X32_64 $EXENAME | awk '{print $12}')  ;;\n+          esac\n+        }\n+        ;;\n+      *solaris*)\n+        function size_command()\n+        {\n+          case $1 in\n+            TEXT)  TEXT=$(size $EXENAME | awk '{print $1}')  ;;\n+            DATA)  DATA=$(size $EXENAME | awk '{print $3}')  ;;\n+            SIZE)  SIZE=$(size $EXENAME | awk '{print $7}')  ;;\n+          esac\n+        }\n+        ;;\n+      *)\n+        echo ' * Warning!  Guessing how to extract section sizes!' 1>&2\n+        function size_command()\n+        {\n+        # These are GNU size's settings... hey, it's worth a shot.  Maybe.\n+        case $1 in\n+          TEXT)  TEXT=$(size -A $EXENAME | grep ^.text | awk '{print $2}') ;;\n+          DATA)  DATA=$(size -A $EXENAME | grep -w ^.data | awk '{print $2}') ;;\n+          SIZE)  SIZE=$(size -A $EXENAME | grep otal | awk '{print $2}') ;;\n+        esac\n+        }\n+        ;;\n+    esac\n+  fi\n+}\n+\n+# Test for file output\n+test_for_output()\n+{\n+    # This checks for emitted output files, which is useful when\n+    # testing file-related output.  The rules for this working are as\n+    # follows: the emitted file must have the \".txt\" extension, and be\n+    # based on the actual *.cc file's name.  For example, 27/filbuf.cc\n+    # currently outputs files named 27/filebuf-2.txt and 27/filebuf-3.txt.\n+    # Also, the first emitted file must be in the form $NAME-1.txt.\n+    # The control file must follow the same constraints, but have a\n+    # \".tst\" extension.  Thus, you have 27/filebuf-2.tst, etc.\n+\n+    # NAME contains the source name, like 27/filebuf.cc\n+    # From that NAME, we want to generate some possible names, using\n+    # ls on MATCH, a pattern description generated with sed.\n+\n+    # this is the name of the resulting diff file, if any\n+    DIFF_FILE=\"`echo $TEST_NAME | sed 's/cc$/diff/'`\"\n+    # construct wildcard names, ie for $NAME=filebuf.cc, makes \"filebuf*.tst\"\n+    DATA_FILES=\"`echo $NAME | sed 's/\\.cc/\\*\\.tst/g'`\"\n+    # make sure there is at least one, then go\n+    ST_E=\"`echo $NAME | sed 's/\\.cc/\\-1\\.tst/g'`\"\n+    if [ -f $ST_E ]; then\n+        # list of actual files that match the wildcard above, ie\n+        # \"filebuf-1.tst\"\n+        ST_MATCH_LIST=\"`ls $DATA_FILES`\"\n+        for i in $ST_MATCH_LIST; do\n+            # ST_OUT_FILE is generated in the build directory.\n+            PRE_NAME2=\"$TEST_DIR/`basename $i`\"\n+            ST_OUT_FILE=\"`echo $PRE_NAME2 | sed 's/tst$/txt/'`\"\n+            diff $ST_OUT_FILE $i > $DIFF_FILE\n+            if [ -s $DIFF_FILE ]; then\n+                RESULT=\"-r\"\n+                echo \"$ST_OUT_FILE has some problems, dude\"\n+            else\n+                RESULT=\"+\"\n+            fi\n+            rm $DIFF_FILE\n+        done\n+    else\n+        # the file does no output, and didn't abnormally\n+        # terminate, so assume passed.\n+        RESULT=\"+\"\n+    fi\n+}\n     \n \n #\n@@ -197,150 +368,96 @@ test_file()\n     # and harder as we try compiling at, say, top of the hour; we would\n     # eventually have to calculate time_t anyhow.  Or 3) just grab two\n     # time_t's (no more overhead than grabbing two date(1)'s).\n+    compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME $LIBS\"\n+    # Why the leading weird character, like a colon?  That way you can\n+    # 'grep -v ^: *mkchecklog.txt' and just see the errors.\n+    #printf \"\\n: \" >> $LOG_FILE\n+    printf \"\\n\" >> $LOG_FILE\n     COMP_TIME_START=$($TEST_DIR/printnow)\n-    $CXX $CXX_FLAG $S_FLAG $INC_PATH -L$LIB_PATH -Wl,-rpath -Wl,$LIB_PATH \\\n-         $SRC_NAME -o $EXENAME 2>> $LOG_FILE\n+    $compiler_invocation >> $LOG_FILE 2>&1\n     COMP_TIME_END=$($TEST_DIR/printnow)\n \n     if [ $COMP_TIME_START -lt $COMP_TIME_END ]; then\n-\tC_TIME=$[ $COMP_TIME_END - $COMP_TIME_START ]\n+        C_TIME=$[ $COMP_TIME_END - $COMP_TIME_START ]\n     else\n-\tC_TIME=\"0\"\n+        C_TIME=\"0\"\n     fi\n \n     if [ -f $EXENAME ]; then\n-        case @host_os@ in\n-          *solaris2.8*)\n-            # These numbers seem to match up to text/data/total,\n-            # although their meanings seem to be different.  Very\n-            # important to not compare these numbers across platforms.\n-            ## Get rid of the banner information.  I don't recall this\n-            ## happening under previous Solarises.  Maybe it's an 8 thing.\n-            TEXT=\"$(size $EXENAME | grep $EXENAME | awk '{print $1}')\"\n-            DATA=\"$(size $EXENAME | grep $EXENAME | awk '{print $3}')\"\n-            SIZE=\"$(size $EXENAME | grep $EXENAME | awk '{print $7}')\"\n-            ;;\n-          *solaris*)\n-            # These numbers seem to match up to text/data/total,\n-            # although their meanings seem to be different.  Very\n-            # important to not compare these numbers across platforms.\n-            TEXT=\"$(size $EXENAME | awk '{print $1}')\"\n-            DATA=\"$(size $EXENAME | awk '{print $3}')\"\n-            SIZE=\"$(size $EXENAME | awk '{print $7}')\"\n-            ;;\n-          *)\n-            TEXT=\"$(size -A $EXENAME | grep text | awk '{print $2}')\"\n-            DATA=\"$(size -A $EXENAME | grep data | awk '{print $2}')\"\n-            SIZE=\"$(size -A $EXENAME | grep otal | awk '{print $2}')\"\n-            ;;\n-        esac\n+        size_command TEXT\n+        size_command DATA\n+        size_command SIZE\n \n-        # Actually run the executable and time it . . .\n+        # Actually run the executable and time it.  Note that output\n+        # printed by the executable will be lost and cannot be redirected,\n+        # because we need to capture the output of 'time'.  Bummer.\n         TIMEFORMAT='timemark %R'\n-        E_TIME_TEXT=\"$(exec 2>&1; ulimit -d $MAX_MEM_USAGE; time $EXENAME)\"\n-\tE_ABNORMAL_TERMINATION=$?\n+        E_TIME_TEXT=\"$(exec 2>&1; ulimit -d $MAX_MEM_USAGE; \\\n+                     time $LTEXE $EXENAME)\"\n+        E_ABNORMAL_TERMINATION=$?\n         E_TIME=\"$(echo $E_TIME_TEXT | awk '{print $2}')\"\n         # joining those two commands does not work due to quoting problems:\n         #E_TIME=\"$(exec 2>&1; time $EXENAME | awk '{print $2}')\"\n         # this will work as a fallback on certain systems...?\n         #E_TIME=$(exec 2>&1; time $EXENAME | cut -d ' ' -f 2)\n  \n-       if [ \"$E_ABNORMAL_TERMINATION\" -ne 0 ]; then\n-            RESULT='-'\n-\t    rm -f ./*core\n-\t    # sometimes you want to save all core files for review:\n-\t    #mv ./core $EXENAME.core\n-\t    # sometimes the OS names core files as programname.core:\n-\t    #mv ./*core $EXENAME.core\n-\telse\n-\t    # XXX this should probably be a function? \n-\n-\t    # This checks for emitted output files, which is useful\n-\t    # when testing file-related output. The rules for this\n-\t    # working are as follows: the emitted file must have the\n-\t    # \".txt\" extension, and be based on the actual *.cc file's\n-\t    # name. For example, 27/filbuf.cc currently outputs files\n-\t    # named 27/filebuf-2.txt and 27/filebuf-3.txt. Also, the first\n-\t    # emitted file must be in the form $NAME-1.txt. The\n-\t    # control file must follow the same constraints, but have\n-\t    # a \".tst\" extension. Thus, you have 27/filebuf-2.tst, etc\n-\t    # etc.\n-\n-\t    # NAME contains the source name, like 27/filebuf.cc\n-\t    # From that NAME, we want to generate some possible names, using\n-\t    # ls on MATCH, a pattern description generated with sed.\n-\n-\t    # this is the name of the resulting diff file, if any\n-\t    DIFF_FILE=\"`echo $TEST_NAME | sed 's/cc$/diff/'`\"\n-\t    # construct wildcard names,ie for $NAME=filebuf.cc, makes\n-\t    # \"filebuf*.tst\"\n-\t    DATA_FILES=\"`echo $NAME | sed 's/\\.cc/\\*\\.tst/g'`\"\n-\t    # make sure there is at least one, then go\n-\t    ST_E=\"`echo $NAME | sed 's/\\.cc/\\-1\\.tst/g'`\"\n-\t    if [ -f $ST_E ]; then\n-\t\t# list of actual files that match the wildcard above, ie\n-\t\t# \"filebuf-1.tst\"\n-\t\tST_MATCH_LIST=\"`ls $DATA_FILES`\"\n-\t\tfor i in $ST_MATCH_LIST\n-\t\t    do\n-\t\t\t# ST_OUT_FILE is generated in the build directory.\n-\t\t\tPRE_NAME2=\"$TEST_DIR/`basename $i`\"\n-\t\t\tST_OUT_FILE=\"`echo $PRE_NAME2 | sed 's/tst$/txt/'`\"\n-\t\t\tdiff $ST_OUT_FILE $i > $DIFF_FILE\n-\t\t\tif [ -s $DIFF_FILE ]; then\n-\t\t\t    RESULT=\"-\"\n-\t\t\t    echo \"$ST_OUT_FILE has some problems, dude\"\n-\t\t\telse\n-\t\t\t    RESULT=\"+\"\n-\t\t\tfi\n-\t\t\trm $DIFF_FILE\n-\t\t    done\n-\t\telse\n-\t\t    # the file does no output, and didn't abnormally\n-\t\t    # terminate, so assume passed.\n-\t\t    RESULT=\"+\"\n-\t\tfi\n-\t    fi\n-\t# sometimes you want to save all failing exe files for review:\n-\tif [ \"$RESULT\" = \"+\" ]; then\n-\t    rm \"$EXENAME\"\n-\tfi\n+        if [ \"$E_ABNORMAL_TERMINATION\" -ne 0 ]; then\n+            RESULT='-r'\n+            rm -f ./*core\n+            # sometimes you want to save all core files for review:\n+            #mv ./core $EXENAME.core\n+            # sometimes the OS allows you to name core files yourself:\n+            #mv ./*core $EXENAME.core\n+            #mv ./core* $EXENAME.core\n+        else\n+            test_for_output\n+        fi\n+\n+        # sometimes you want to save all failing exe files for review:\n+        if [ \"$RESULT\" = \"+\" ]; then\n+            rm \"$EXENAME\"\n+        fi\n     else\n-        # the file did not compile. Write out compilation info to the log file.\n- echo \"$CXX $CXX_FLAG $S_FLAG $INC_PATH -L$LIB_PATH -Wl,-rpath -Wl,$LIB_PATH \\\n-         $SRC_NAME -o $EXENAME\" 2>> $LOG_FILE\n-\n-\tRESULT=\"-\"\n-\tTEXT=\"0\"\n-\tDATA=\"0\"\n-\tSIZE=\"0\"\n+        # the file did not compile/link.\n+        RESULT=\"-b\"\n+        TEXT=\"0\"\n+        DATA=\"0\"\n+        SIZE=\"0\"\n     fi\n \n-    echo $RESULT | awk '{printf(\"%s\\t\", $1)}'\n-    echo $RESULT | awk '{printf (\"%.1s \", $1)}'>>$RESULTS_FILE\n-    echo $C_TIME $E_TIME |awk '{printf(\"%d\\t%.3f\\t\", $1, $2)}'>>$RESULTS_FILE\n-    echo $TEXT $DATA | awk '{printf(\"%s\\t%s\\t\", $1, $2)}'>>$RESULTS_FILE\n-    echo $SIZE | awk '{printf(\"%s\\t\", $1)}'>>$RESULTS_FILE\n-    echo $NAME | awk '{printf(\"%s\\n\", $1)}'>>$RESULTS_FILE\n-};    \n+    printf \"%s\\t\" \"$RESULT\"\n+    printf \"%-2s %d\\t%.3f\\t%s\\t%s\\t%s\\t%s\\n\"   \\\n+        \"$RESULT\" $C_TIME $E_TIME $TEXT $DATA $SIZE $NAME >> $RESULTS_FILE\n+}\n \n-echo \"detailed test information in $RESULTS_FILE\"\n+setup_size_command\n+echo \"\"\n+echo \"Detailed test results in .${RESULTS_FILE/$BUILD_DIR}\"\n+echo $explanation\n echo \"------------------------------------------------------------------------\"\n-echo \"static\" | awk '{printf(\"%s\\t\", $1)}'\n-echo \"shared\" | awk '{printf(\"%s\\t\", $1)}'\n-echo \"test\" | awk '{printf(\"%s\\n\", $1)}'\n+printf \"static\\tshared\\ttest\\n\"\n echo \"------------------------------------------------------------------------\"\n \n TEST_TIME_START=$($TEST_DIR/printnow)\n-for NAME in `cat $TESTS_FILE`\n+for NAME in $(<$TESTS_FILE)\n do\n     PRE_NAME=\"$TEST_DIR/`basename $NAME`\"\n     ST_NAME=\"`echo $PRE_NAME | sed 's/cc$/st-exe/'`\"\n     SH_NAME=\"`echo $PRE_NAME | sed 's/cc$/sh-exe/'`\"\n \n-    test_file $NAME $ST_NAME $ST_FLAG \n-    test_file $NAME $SH_NAME $SH_FLAG \n-    echo \"$NAME\" | awk '{printf(\"%s\\n\", $1)}'\n+    if test @enable_static@ = yes; then\n+        test_file $NAME $ST_NAME $ST_FLAG \n+    else\n+        printf \"x\\t\"\n+        printf \"static skipped\\n\" >> $RESULTS_FILE\n+    fi\n+    if test @enable_shared@ = yes; then\n+        test_file $NAME $SH_NAME $SH_FLAG \n+    else\n+        printf \"x\\t\"\n+        printf \"shared skipped\\n\" >> $RESULTS_FILE\n+    fi\n+    printf \"%s\\n\" \"$NAME\"\n \n     echo \"\" >> $RESULTS_FILE\n done\n@@ -363,11 +480,10 @@ mv ${RESULTS_FILE}.tmp $RESULTS_FILE\n \n if [ $TEST_TIME_START -lt $TEST_TIME_END ]; then\n     TEST_TIME=$[ $TEST_TIME_END - $TEST_TIME_START ]\n-    echo \"testrun == $TEST_TIME\"\n-    echo \"testrun == $TEST_TIME\" >> $RESULTS_FILE\n+    echo \"testrun == $TEST_TIME seconds\"\n+    echo \"testrun == $TEST_TIME seconds\" >> $RESULTS_FILE\n fi\n \n exit 0\n \n \n-"}, {"sha": "dd831d3a460fe1dc57752998a6d9476937445a65", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 133, "deletions": 36, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0941a315e97f7a247cdf02472a4bd52254d876b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=d0941a315e97f7a247cdf02472a4bd52254d876b", "patch": "@@ -110,12 +110,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -127,11 +127,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -143,34 +145,119 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n-\n-\n-c_shadow_headers =  \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_headers = $(c_base_headers) $(c_shadow_headers)\n-@GLIBCPP_USE_CSHADOW_FALSE@c_headers = $(c_base_headers)\n-\n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+INCLUDES = \\\n+\t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \\\n+\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n+\t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/exception_support.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h bits/stl_iterator_base.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n+\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n+\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n+\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n+\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h \\\n+\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n+\tbits/concept_checks.h bits/container_concepts.h \\\n+\tbits/sequence_concepts.h bits/std_strstream.h \\\n+\text/ropeimpl.h ext/stl_rope.h \\\n+\text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \\\n+\text/stl_hashtable.h ext/stl_hash_fun.h \\\n+\text/hash_map ext/hash_set ext/rope ext/slist \\\n+\text/tree ext/bvector \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h \n+\n+\n+c_shadow_headers = \\\n+\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+\tfeatures.h langinfo.h \\\n+\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+\tsys/cdefs.h \n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_headers = @GLIBCPP_USE_CSHADOW_TRUE@$(c_base_headers) $(c_shadow_headers)\n+@GLIBCPP_USE_CSHADOW_FALSE@c_headers = @GLIBCPP_USE_CSHADOW_FALSE@$(c_base_headers)\n+\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string strstream utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n headers = $(base_headers) $(c_headers)\n \n-sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources = \\\n+\tlimitsMEMBERS.cc \\\n+\tcmath.cc \\\n+\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n+\tstdexcept.cc \\\n+\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n+\tlocale.cc localename.cc codecvt.cc \\\n+\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources =  \twstring-inst.cc\n+wstring_sources = \\\n+\twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -181,24 +268,32 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la ../libio/libio.la \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la ../libio/libio.la \\\n+\t../libsupc++/libsupc++convenience.la \\\n+\t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -219,14 +314,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}