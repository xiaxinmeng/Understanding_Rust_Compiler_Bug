{"sha": "1ef1ac768ff108a6a2c08e18eec3309e182df142", "node_id": "C_kwDOANBUbNoAKDFlZjFhYzc2OGZmMTA4YTZhMmMwOGUxOGVlYzMzMDllMTgyZGYxNDI", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-06-17T14:07:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:10Z"}, "message": "[Ada] Fix missing Overflow and Range checks\n\nWhile doing Preanalysis (as is the case during ghost code handling),\nsome range and/or overflow checks can be saved (see Saved_Checks in\nchecks.adb) and later one omitted as they would be redundant (see\nFind_Check in checks.adb). In the case of ghost code, the node being\nPreanalyzed is a temporary copy that is discarded, so its corresponding\ncheck is not expanded later. The node that gets expanded later is not\nhaving any checks expanded as it is wrongly assumed it has already been\ndone before.\n\nAs is already the case in Preanalyze_And_Resolve, this change suppresses\nall checks during Preanalyze except for GNATprove mode.\n\ngcc/ada/\n\n\t* sem.adb (Preanalyze): Suppress checks when not in GNATprove\n\tmode.\n\t* sem_res.adb (Preanalyze_And_Resolve): Add cross reference in\n\tcomment to above procedure.\n\t* sinfo.ads: Typo fix in comment.", "tree": {"sha": "6320c0b697e8e6e537e34059d30f665686e3226d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6320c0b697e8e6e537e34059d30f665686e3226d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef1ac768ff108a6a2c08e18eec3309e182df142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef1ac768ff108a6a2c08e18eec3309e182df142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef1ac768ff108a6a2c08e18eec3309e182df142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef1ac768ff108a6a2c08e18eec3309e182df142/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "829b5a6075e63e84600b0eee5daebb3fab9aa491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829b5a6075e63e84600b0eee5daebb3fab9aa491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829b5a6075e63e84600b0eee5daebb3fab9aa491"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "6c1e9d7eb01b09f2b9ee7d65be1413ca82de930f", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=1ef1ac768ff108a6a2c08e18eec3309e182df142", "patch": "@@ -1338,7 +1338,15 @@ package body Sem is\n       Full_Analysis := False;\n       Expander_Mode_Save_And_Set (False);\n \n-      Analyze (N);\n+      --  See comment in sem_res.adb for Preanalyze_And_Resolve\n+\n+      if GNATprove_Mode\n+        or else Nkind (Parent (N)) = N_Simple_Return_Statement\n+      then\n+         Analyze (N);\n+      else\n+         Analyze (N, Suppress => All_Checks);\n+      end if;\n \n       Expander_Mode_Restore;\n       Full_Analysis := Save_Full_Analysis;"}, {"sha": "1053cec6dd2a9066a741363245a56c68a0017c0b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1ef1ac768ff108a6a2c08e18eec3309e182df142", "patch": "@@ -2046,16 +2046,18 @@ package body Sem_Res is\n       Full_Analysis := False;\n       Expander_Mode_Save_And_Set (False);\n \n+      --  See also Preanalyze_And_Resolve in sem.adb for similar handling\n+\n       --  Normally, we suppress all checks for this preanalysis. There is no\n       --  point in processing them now, since they will be applied properly\n       --  and in the proper location when the default expressions reanalyzed\n       --  and reexpanded later on. We will also have more information at that\n       --  point for possible suppression of individual checks.\n \n-      --  However, in SPARK mode, most expansion is suppressed, and this\n-      --  later reanalysis and reexpansion may not occur. SPARK mode does\n+      --  However, in GNATprove mode, most expansion is suppressed, and this\n+      --  later reanalysis and reexpansion may not occur. GNATprove mode does\n       --  require the setting of checking flags for proof purposes, so we\n-      --  do the SPARK preanalysis without suppressing checks.\n+      --  do the GNATprove preanalysis without suppressing checks.\n \n       --  This special handling for SPARK mode is required for example in the\n       --  case of Ada 2012 constructs such as quantified expressions, which are"}, {"sha": "ddac1c928342bd1b0d287bdb6568a83e0ac36ed7", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef1ac768ff108a6a2c08e18eec3309e182df142/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1ef1ac768ff108a6a2c08e18eec3309e182df142", "patch": "@@ -554,9 +554,9 @@ package Sinfo is\n    --  The tree after this light expansion should be fully analyzed\n    --  semantically, which sometimes requires the insertion of semantic\n    --  preanalysis, for example for subprogram contracts and pragma\n-   --  check/assert. In particular, all expression must have their proper type,\n-   --  and semantic links should be set between tree nodes (partial to full\n-   --  view, etc.) Some kinds of nodes should be either absent, or can be\n+   --  check/assert. In particular, all expressions must have their proper\n+   --  type, and semantic links should be set between tree nodes (partial to\n+   --  full view, etc.). Some kinds of nodes should be either absent, or can be\n    --  ignored by the formal verification backend:\n \n    --      N_Object_Renaming_Declaration: can be ignored safely"}]}