{"sha": "1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyZTgxYzFhMzZhNTFmNDY2MGQzMGEwMjc4MzY2YThhMDcyN2E5ZA==", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2019-07-21T21:00:47Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gcc.gnu.org", "date": "2019-07-21T21:00:47Z"}, "message": "or1k: Add mrori option, fix option docs\n\ngcc/ChangeLog:\n\n\t* config.gcc (or1k*-*-*): Add mrori and mror to validation.\n\t* doc/invoke.texi (OpenRISC Options): Add mrori option, rewrite all\n\tdocumenation to be more clear.\n\t* config/or1k/elf.opt (mboard=, mnewlib): Rewrite documentation to be\n\tmore clear.\n\t* config/or1k/or1k.opt (mrori): New option.\n\t(mhard-div, msoft-div, mhard-mul, msoft-mul, mcmov, mror, msext,\n\tmsfimm, mshftimm): Rewrite documentation to be more clear.\n\t* config/or1k/or1k.md (insn_support): Add ror and rori.\n\t(enabled): Add conditions for ror and rori.\n\t(rotrsi3): Replace condition for shftimm with ror and rori.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/or1k/ror-4.c: New file.\n\t* gcc.target/or1k/shftimm-1.c: Update test from rotate to shift\n\tas the shftimm option no longer controls rotate.\n\nFrom-SVN: r273649", "tree": {"sha": "d7e13039d7f8f4825c12b4067c12a2c534175838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e13039d7f8f4825c12b4067c12a2c534175838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0dba7c451ddd232dc3ba8a5ebc797762c74736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0dba7c451ddd232dc3ba8a5ebc797762c74736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0dba7c451ddd232dc3ba8a5ebc797762c74736"}], "stats": {"total": 168, "additions": 107, "deletions": 61}, "files": [{"sha": "dafbb24f02839796926302e71698cd05fee49169", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -1,3 +1,17 @@\n+2019-07-22  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config.gcc (or1k*-*-*): Add mrori and mror to validation.\n+\t* doc/invoke.texi (OpenRISC Options): Add mrori option, rewrite all\n+\tdocumenation to be more clear.\n+\t* config/or1k/elf.opt (mboard=, mnewlib): Rewrite documentation to be\n+\tmore clear.\n+\t* config/or1k/or1k.opt (mrori): New option.\n+\t(mhard-div, msoft-div, mhard-mul, msoft-mul, mcmov, mror, msext,\n+\tmsfimm, mshftimm): Rewrite documentation to be more clear.\n+\t* config/or1k/or1k.md (insn_support): Add ror and rori.\n+\t(enabled): Add conditions for ror and rori.\n+\t(rotrsi3): Replace condition for shftimm with ror and rori.\n+\n 2019-07-22  Stafford Horne  <shorne@gmail.com>\n \n \tPR target/90363"}, {"sha": "6679a3a5a1d8eaffc0a2d087799322f2c4bc4b23", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -2578,6 +2578,7 @@ or1k*-*-*)\n \tfor or1k_multilib in ${or1k_multilibs}; do\n \t\tcase ${or1k_multilib} in\n \t\tmcmov | msext | msfimm | \\\n+\t\tmror | mrori | \\\n \t\tmhard-div | mhard-mul | \\\n \t\tmsoft-div | msoft-mul )\n \t\t\tTM_MULTILIB_CONFIG=\"${TM_MULTILIB_CONFIG},${or1k_multilib}\""}, {"sha": "2d4d1875d0225f90f0b93d97a40c4c8d28b8f1df", "filename": "gcc/config/or1k/elf.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Felf.opt?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -25,9 +25,9 @@\n \n mboard=\n Target RejectNegative Joined\n-Configure board specific runtime.\n+Configure the newlib board specific runtime.  The default is or1ksim.\n \n mnewlib\n Target RejectNegative\n-For compatibility, it's always newlib for elf now.\n-\n+This option is ignored; it is provided for compatibility purposes only.  This\n+used to select linker and preprocessor options for use with newlib."}, {"sha": "0faa0fa4c479bbe10385fd4277616eb8317a8181", "filename": "gcc/config/or1k/or1k.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2For1k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2For1k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.md?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -63,7 +63,7 @@\n   \"alu,st,ld,control,multi\"\n   (const_string \"alu\"))\n \n-(define_attr \"insn_support\" \"class1,sext,sfimm,shftimm\" (const_string \"class1\"))\n+(define_attr \"insn_support\" \"class1,sext,sfimm,shftimm,ror,rori\" (const_string \"class1\"))\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"insn_support\" \"class1\") (const_int 1)\n@@ -72,7 +72,11 @@\n \t (and (eq_attr \"insn_support\" \"sfimm\")\n \t      (ne (symbol_ref \"TARGET_SFIMM\") (const_int 0))) (const_int 1)\n \t (and (eq_attr \"insn_support\" \"shftimm\")\n-\t      (ne (symbol_ref \"TARGET_SHFTIMM\") (const_int 0))) (const_int 1)]\n+\t      (ne (symbol_ref \"TARGET_SHFTIMM\") (const_int 0))) (const_int 1)\n+\t (and (eq_attr \"insn_support\" \"ror\")\n+\t      (ne (symbol_ref \"TARGET_ROR\") (const_int 0))) (const_int 1)\n+\t (and (eq_attr \"insn_support\" \"rori\")\n+\t      (ne (symbol_ref \"TARGET_RORI\") (const_int 0))) (const_int 1)]\n \t(const_int 0)))\n \n ;; Describe a user's asm statement.\n@@ -178,12 +182,12 @@\n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \"r,r\")\n-\t\t  (match_operand:SI 2 \"reg_or_u6_operand\" \"r,n\")))]\n-  \"TARGET_ROR\"\n+\t\t     (match_operand:SI 2 \"ror_reg_or_u6_operand\" \"r,n\")))]\n+  \"TARGET_ROR || TARGET_RORI\"\n   \"@\n    l.ror\\t%0, %1, %2\n    l.rori\\t%0, %1, %2\"\n-  [(set_attr \"insn_support\" \"*,shftimm\")])\n+  [(set_attr \"insn_support\" \"ror,rori\")])\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")"}, {"sha": "c2f64c5dd455ed3876225b47b2f7aeecb7e91b4f", "filename": "gcc/config/or1k/or1k.opt", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2For1k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2For1k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.opt?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -21,47 +21,55 @@\n ; See the GCC internals manual (options.texi) for a description of\n ; this file's format.\n \n-; Please try to keep this file in ASCII collating order.\n-\n mhard-div\n Target RejectNegative InverseMask(SOFT_DIV)\n-Use hardware divide instructions, use -msoft-div for emulation.\n+Enable generation of hardware divide (l.div, l.divu) instructions.  This is the\n+default; use -msoft-div to override.\n+\n+msoft-div\n+Target RejectNegative Mask(SOFT_DIV)\n+Enable generation of binaries which use functions from libgcc to perform divide\n+operations.  The default is -mhard-div.\n \n mhard-mul\n Target RejectNegative InverseMask(SOFT_MUL).\n-Use hardware multiply instructions, use -msoft-mul for emulation.\n+Enable generation of hardware multiply instructions (l.mul, l.muli) instructions.\n+This is the default; use -msoft-mul to override.\n+\n+msoft-mul\n+Target RejectNegative Mask(SOFT_MUL).\n+Enable generation of binaries which use functions from libgcc to perform\n+multiply operations. The default is -mhard-mul.\n \n mcmov\n Target RejectNegative Mask(CMOV)\n-Allows generation of binaries which use the l.cmov instruction.  If your target\n-does not support this the compiler will generate the equivalent using set and\n-branch.\n+Enable generation of conditional move (l.cmov) instructions.  By default the\n+equivalent will be generated using using set and branch.\n \n mror\n Target RejectNegative Mask(ROR)\n-Allows generation of binaries which use the l.rori instructions.\n+Enable generation of rotate right (l.ror) instructions.  By default functions\n+from libgcc are used to perform rotate right operations.\n+\n+mrori\n+Target RejectNegative Mask(RORI)\n+Enable generation of rotate right with immediate (l.rori) instructions.  By\n+default functions from libgcc are used to perform rotate right with immediate\n+operations.\n \n msext\n Target RejectNegative Mask(SEXT)\n-Allows generation of binaries which use sign-extension instructions.  If your\n-target does not support this the compiler will use memory loads to perform sign\n-extension.\n+Enable generation of sign extension (l.ext*) instructions.  By default memory\n+loads are used to perform sign extension.\n \n msfimm\n Target RejectNegative Mask(SFIMM)\n-Allows generation of binaries which use l.sf*i instructions.  If your target\n-does not support this the compiler will generate instructions to store the\n-immediate to a register first.\n+Enable generation of compare and set flag with immediate (l.sf*i) instructions.\n+By default extra instructions will be generated to store the immediate to a\n+register first.\n \n mshftimm\n Target RejectNegative Mask(SHFTIMM)\n-Allows generation of binaries which support shifts and rotate instructions\n-supporting immediate arguments, for example l.rori.\n-\n-msoft-div\n-Target RejectNegative Mask(SOFT_DIV)\n-Use divide emulation.\n-\n-msoft-mul\n-Target RejectNegative Mask(SOFT_MUL).\n-Use multiply emulation.\n+Enable generation of shift with immediate (l.srai, l.srli, l.slli) instructions.\n+By default extra instructions will be generated to store the immediate to a\n+register first."}, {"sha": "5e97bf4846750b6b1e1f84dff899b8fca1a5f877", "filename": "gcc/config/or1k/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fconfig%2For1k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Fpredicates.md?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -53,6 +53,13 @@\n     (match_test \"INTVAL (op) >= -32768 && INTVAL (op) <= 32767\")\n     (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"ror_reg_or_u6_operand\"\n+  (if_then_else (match_code \"const_int\")\n+    (and (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 0x3f\")\n+\t (match_test \"TARGET_RORI\"))\n+    (and (match_operand 0 \"register_operand\")\n+\t (match_test \"TARGET_ROR\"))))\n+\n (define_predicate \"call_insn_operand\"\n   (ior (match_code \"symbol_ref\")\n        (match_operand 0 \"register_operand\")))"}, {"sha": "1703a0a68828c38280cc95c871354dbfaa394931", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -1034,7 +1034,7 @@ Objective-C and Objective-C++ Dialects}.\n @emph{OpenRISC Options}\n @gccoptlist{-mboard=@var{name}  -mnewlib  -mhard-mul  -mhard-div @gol\n -msoft-mul  -msoft-div @gol\n--mcmov  -mror  -msext  -msfimm  -mshftimm}\n+-mcmov  -mror  -mrori  -msext  -msfimm  -mshftimm}\n \n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n@@ -23649,50 +23649,56 @@ newlib board library linking.  The default is @code{or1ksim}.\n \n @item -mnewlib\n @opindex mnewlib\n-For compatibility, it's always newlib for elf now.\n+This option is ignored; it is for compatibility purposes only.  This used to\n+select linker and preprocessor options for use with newlib.\n \n-@item -mhard-div\n+@item -msoft-div\n+@itemx -mhard-div\n+@opindex msoft-div\n @opindex mhard-div\n-Generate code for hardware which supports divide instructions.  This is the\n-default.\n+Select software or hardware divide (@code{l.div}, @code{l.divu}) instructions.\n+This default is hardware divide.\n \n-@item -mhard-mul\n+@item -msoft-mul\n+@itemx -mhard-mul\n+@opindex msoft-mul\n @opindex mhard-mul\n-Generate code for hardware which supports multiply instructions.  This is the\n-default.\n+Select software or hardware multiply (@code{l.mul}, @code{l.muli}) instructions.\n+This default is hardware multiply.\n \n @item -mcmov\n @opindex mcmov\n-Generate code for hardware which supports the conditional move (@code{l.cmov})\n-instruction.\n+Enable generation of conditional move (@code{l.cmov}) instructions.  By\n+default the equivalent will be generated using using set and branch.\n \n @item -mror\n @opindex mror\n-Generate code for hardware which supports rotate right instructions.\n+Enable generation of rotate right (@code{l.ror}) instructions.  By default\n+functions from @file{libgcc} are used to perform rotate right operations.\n+\n+@item -mrori\n+@opindex mrori\n+Enable generation of rotate right with immediate (@code{l.rori}) instructions.\n+By default functions from @file{libgcc} are used to perform rotate right with\n+immediate operations.\n \n @item -msext\n @opindex msext\n-Generate code for hardware which supports sign-extension instructions.\n+Enable generation of sign extension (@code{l.ext*}) instructions.  By default\n+memory loads are used to perform sign extension.\n \n @item -msfimm\n @opindex msfimm\n-Generate code for hardware which supports set flag immediate (@code{l.sf*i})\n-instructions.\n+Enable generation of compare and set flag with immediate (@code{l.sf*i})\n+instructions.  By default extra instructions will be generated to store the\n+immediate to a register first.\n \n @item -mshftimm\n @opindex mshftimm\n-Generate code for hardware which supports shift immediate related instructions\n-(i.e. @code{l.srai}, @code{l.srli}, @code{l.slli}, @code{1.rori}).  Note, to\n-enable generation of the @code{l.rori} instruction the @option{-mror} flag must\n-also be specified.\n+Enable generation of shift with immediate (@code{l.srai}, @code{l.srli},\n+@code{l.slli}) instructions.  By default extra instructions will be generated\n+to store the immediate to a register first.\n \n-@item -msoft-div\n-@opindex msoft-div\n-Generate code for hardware which requires divide instruction emulation.\n-\n-@item -msoft-mul\n-@opindex msoft-mul\n-Generate code for hardware which requires multiply instruction emulation.\n \n @end table\n "}, {"sha": "234bc10442c306aa84371f5e8516c2cc13905a1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -1,3 +1,9 @@\n+2019-07-22  Stafford Horne  <shorne@gmail.com>\n+\n+\t* gcc.target/or1k/ror-4.c: New file.\n+\t* gcc.target/or1k/shftimm-1.c: Update test from rotate to shift\n+\tas the shftimm option no longer controls rotate.\n+\n 2019-07-22  Stafford Horne  <shorne@gmail.com>\n \n \tPR target/90362"}, {"sha": "3a8dc06df790249a813e623ed5cb0ed20499b15a", "filename": "gcc/testsuite/gcc.target/or1k/shftimm-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2e81c1a36a51f4660d30a0278366a8a0727a9d/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c?ref=1e2e81c1a36a51f4660d30a0278366a8a0727a9d", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mror -mshftimm -O2\" } */\n+/* { dg-options \"-mshftimm -O2\" } */\n \n-unsigned int rotate6 (unsigned int a) {\n-  return ( a >> 6 ) | ( a << ( 32 - 6 ) );\n+unsigned int shift6 (unsigned int a) {\n+  return a << 6;\n }\n \n-/* { dg-final { scan-assembler \"l.rori\" } } */\n+/* { dg-final { scan-assembler \"l.slli\" } } */"}]}