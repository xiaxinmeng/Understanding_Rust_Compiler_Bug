{"sha": "1e625a44f6f3001cea31e0f7c563943ecba92b68", "node_id": "C_kwDOANBUbNoAKDFlNjI1YTQ0ZjZmMzAwMWNlYTMxZTBmN2M1NjM5NDNlY2JhOTJiNjg", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-12-01T14:36:24Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-12-01T14:36:24Z"}, "message": "vect: Tighten check for SLP memory groups [PR103517]\n\nWhen checking for compatible stmts, vect_build_slp_tree_1 did:\n\n\t       && !(STMT_VINFO_GROUPED_ACCESS (stmt_info)\n\t\t    && (first_stmt_code == ARRAY_REF\n\t\t\t|| first_stmt_code == BIT_FIELD_REF\n\t\t\t|| first_stmt_code == INDIRECT_REF\n\t\t\t|| first_stmt_code == COMPONENT_REF\n\t\t\t|| first_stmt_code == MEM_REF)))\n\nThat is, it allowed any rhs_code as long as the first_stmt_code\nlooked valid.  This had the effect of allowing IFN_MASK_LOAD\nto be paired with an earlier non-call code (but didn't allow\nthe reverse).\n\nThis patch makes the check symmetrical.\n\ngcc/\n\tPR tree-optimization/103517\n\t* tree-vect-slp.c (vect_build_slp_tree_1): When allowing two\n\tdifferent component references, check the codes of both them,\n\trather than just the first.\n\ngcc/testsuite/\n\tPR tree-optimization/103517\n\t* gcc.dg/vect/pr103517.c: New test.", "tree": {"sha": "9fd6ab7ed2f867a05735a833d8668ecb4d4556ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fd6ab7ed2f867a05735a833d8668ecb4d4556ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e625a44f6f3001cea31e0f7c563943ecba92b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e625a44f6f3001cea31e0f7c563943ecba92b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e625a44f6f3001cea31e0f7c563943ecba92b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e625a44f6f3001cea31e0f7c563943ecba92b68/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb137e85720654e41db370d952df226654e576a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb137e85720654e41db370d952df226654e576a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb137e85720654e41db370d952df226654e576a6"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "de87fc48f84f0531f99427e5a85e289910570789", "filename": "gcc/testsuite/gcc.dg/vect/pr103517.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e625a44f6f3001cea31e0f7c563943ecba92b68/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103517.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e625a44f6f3001cea31e0f7c563943ecba92b68/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103517.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103517.c?ref=1e625a44f6f3001cea31e0f7c563943ecba92b68", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=skylake-avx512\" { target x86_64-*-* i?86-*-* } } */\n+\n+int a;\n+short b, c;\n+extern short d[];\n+void e() {\n+  for (short f = 1; f < (short)a; f += 2)\n+    if (d[f + 1]) {\n+      b = d[f];\n+      c = d[f + 1];\n+    }\n+}"}, {"sha": "bc22ffeed82e6f2f34ae80398847b7bb685f0f73", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e625a44f6f3001cea31e0f7c563943ecba92b68/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e625a44f6f3001cea31e0f7c563943ecba92b68/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1e625a44f6f3001cea31e0f7c563943ecba92b68", "patch": "@@ -1121,7 +1121,12 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t\t\t|| first_stmt_code == BIT_FIELD_REF\n \t\t\t|| first_stmt_code == INDIRECT_REF\n \t\t\t|| first_stmt_code == COMPONENT_REF\n-\t\t\t|| first_stmt_code == MEM_REF)))\n+\t\t\t|| first_stmt_code == MEM_REF)\n+\t\t    && (rhs_code == ARRAY_REF\n+\t\t\t|| rhs_code == BIT_FIELD_REF\n+\t\t\t|| rhs_code == INDIRECT_REF\n+\t\t\t|| rhs_code == COMPONENT_REF\n+\t\t\t|| rhs_code == MEM_REF)))\n \t      || first_stmt_load_p != load_p\n \t      || first_stmt_phi_p != phi_p)\n \t    {"}]}