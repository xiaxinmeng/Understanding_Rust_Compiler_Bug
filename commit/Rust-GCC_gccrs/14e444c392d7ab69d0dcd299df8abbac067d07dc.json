{"sha": "14e444c392d7ab69d0dcd299df8abbac067d07dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlNDQ0YzM5MmQ3YWI2OWQwZGNkMjk5ZGY4YWJiYWMwNjdkMDdkYw==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-07-02T16:34:38Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-07-02T16:34:38Z"}, "message": "Reduce the cost in miss rate computation.\n\n2010-07-02  Changpeng Fang  <changpeng.fang@amd.com>\n\n\t* tree-ssa-loop-prefetch.c (compute_miss_rate): Rename to\n\tis_miss_rate_acceptable. Pull total_positions computation\n\tout of the loops.  Early return if miss_positions exceeds\n\tthe acceptable threshold.\n\t* tree-ssa-loop-prefetch.c (prune_ref_by_group_reuse): Call\n\tis_miss_rate_acceptable after renaming of compute_miss_rate.\n\nFrom-SVN: r161728", "tree": {"sha": "4fae2c020fec2caf58422c7e0546771c17e6f8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fae2c020fec2caf58422c7e0546771c17e6f8ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e444c392d7ab69d0dcd299df8abbac067d07dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e444c392d7ab69d0dcd299df8abbac067d07dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e444c392d7ab69d0dcd299df8abbac067d07dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e444c392d7ab69d0dcd299df8abbac067d07dc/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a245c04bccad9eea35cf21def68ae812fd29a953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a245c04bccad9eea35cf21def68ae812fd29a953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a245c04bccad9eea35cf21def68ae812fd29a953"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "98f2ab09da273d330f911bf276883e805cb0ca11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e444c392d7ab69d0dcd299df8abbac067d07dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e444c392d7ab69d0dcd299df8abbac067d07dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14e444c392d7ab69d0dcd299df8abbac067d07dc", "patch": "@@ -1,3 +1,12 @@\n+2010-07-02  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\t* tree-ssa-loop-prefetch.c (compute_miss_rate): Rename to\n+\tis_miss_rate_acceptable. Pull total_positions computation\n+\tout of the loops.  Early return if miss_positions exceeds\n+\tthe acceptable threshold.\n+\t* tree-ssa-loop-prefetch.c (prune_ref_by_group_reuse): Call\n+\tis_miss_rate_acceptable after renaming of compute_miss_rate.\n+\n 2010-07-02  Changpeng Fang  <changpeng.fang@amd.com>\n \n \tPR middle-end/44576"}, {"sha": "c3e90d235baf3f5910b62ce9ed2ada6373256fad", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e444c392d7ab69d0dcd299df8abbac067d07dc/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e444c392d7ab69d0dcd299df8abbac067d07dc/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=14e444c392d7ab69d0dcd299df8abbac067d07dc", "patch": "@@ -640,27 +640,29 @@ ddown (HOST_WIDE_INT x, unsigned HOST_WIDE_INT by)\n /* Given a CACHE_LINE_SIZE and two inductive memory references\n    with a common STEP greater than CACHE_LINE_SIZE and an address\n    difference DELTA, compute the probability that they will fall\n-   in different cache lines.  DISTINCT_ITERS is the number of\n-   distinct iterations after which the pattern repeats itself.\n+   in different cache lines.  Return true if the computed miss rate\n+   is not greater than the ACCEPTABLE_MISS_RATE.  DISTINCT_ITERS is the\n+   number of distinct iterations after which the pattern repeats itself.\n    ALIGN_UNIT is the unit of alignment in bytes.  */\n \n-static int\n-compute_miss_rate (unsigned HOST_WIDE_INT cache_line_size,\n+static bool\n+is_miss_rate_acceptable (unsigned HOST_WIDE_INT cache_line_size,\n \t\t   HOST_WIDE_INT step, HOST_WIDE_INT delta,\n \t\t   unsigned HOST_WIDE_INT distinct_iters,\n \t\t   int align_unit)\n {\n   unsigned align, iter;\n-  int total_positions, miss_positions, miss_rate;\n+  int total_positions, miss_positions, max_allowed_miss_positions;\n   int address1, address2, cache_line1, cache_line2;\n \n   /* It always misses if delta is greater than or equal to the cache\n      line size.  */\n-  if (delta >= cache_line_size)\n-    return 1000;\n+  if (delta >= (HOST_WIDE_INT) cache_line_size)\n+    return false;\n \n-  total_positions = 0;\n   miss_positions = 0;\n+  total_positions = (cache_line_size / align_unit) * distinct_iters;\n+  max_allowed_miss_positions = (ACCEPTABLE_MISS_RATE * total_positions) / 1000;\n \n   /* Iterate through all possible alignments of the first\n      memory reference within its cache line.  */\n@@ -673,12 +675,14 @@ compute_miss_rate (unsigned HOST_WIDE_INT cache_line_size,\n \taddress2 = address1 + delta;\n \tcache_line1 = address1 / cache_line_size;\n \tcache_line2 = address2 / cache_line_size;\n-\ttotal_positions += 1;\n \tif (cache_line1 != cache_line2)\n-\t  miss_positions += 1;\n+\t  {\n+\t    miss_positions += 1;\n+            if (miss_positions > max_allowed_miss_positions)\n+\t      return false;\n+          }\n       }\n-  miss_rate = 1000 * miss_positions / total_positions;\n-  return miss_rate;\n+  return true;\n }\n \n /* Prune the prefetch candidate REF using the reuse with BY.\n@@ -694,7 +698,6 @@ prune_ref_by_group_reuse (struct mem_ref *ref, struct mem_ref *by,\n   HOST_WIDE_INT delta = delta_b - delta_r;\n   HOST_WIDE_INT hit_from;\n   unsigned HOST_WIDE_INT prefetch_before, prefetch_block;\n-  int miss_rate;\n   HOST_WIDE_INT reduced_step;\n   unsigned HOST_WIDE_INT reduced_prefetch_block;\n   tree ref_type;\n@@ -793,9 +796,8 @@ prune_ref_by_group_reuse (struct mem_ref *ref, struct mem_ref *by,\n   delta %= step;\n   ref_type = TREE_TYPE (ref->mem);\n   align_unit = TYPE_ALIGN (ref_type) / 8;\n-  miss_rate = compute_miss_rate(prefetch_block, step, delta,\n-\t\t\t\treduced_prefetch_block, align_unit);\n-  if (miss_rate <= ACCEPTABLE_MISS_RATE)\n+  if (is_miss_rate_acceptable (prefetch_block, step, delta,\n+\t\t\t       reduced_prefetch_block, align_unit))\n     {\n       /* Do not reduce prefetch_before if we meet beyond cache size.  */\n       if (prefetch_before > L2_CACHE_SIZE_BYTES / PREFETCH_BLOCK)\n@@ -809,9 +811,8 @@ prune_ref_by_group_reuse (struct mem_ref *ref, struct mem_ref *by,\n   /* Try also the following iteration.  */\n   prefetch_before++;\n   delta = step - delta;\n-  miss_rate = compute_miss_rate(prefetch_block, step, delta,\n-\t\t\t\treduced_prefetch_block, align_unit);\n-  if (miss_rate <= ACCEPTABLE_MISS_RATE)\n+  if (is_miss_rate_acceptable (prefetch_block, step, delta,\n+\t\t\t       reduced_prefetch_block, align_unit))\n     {\n       if (prefetch_before < ref->prefetch_before)\n \tref->prefetch_before = prefetch_before;"}]}