{"sha": "0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyMjI5YjBiMDZiODc5OWFhZjlhOTgyYzY2YTExNzVkM2VhOGEyOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-11-21T14:29:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-11-21T14:29:53Z"}, "message": "tree-vectorizer.h (NUM_PATTERNS): Increase.\n\n2006-11-21  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (NUM_PATTERNS): Increase.\n\t* tree-vect-patterns.c (vect_vect_recog_func_ptrs): Add\n\tvect_recog_pow_pattern.\n\t(vect_recog_pow_pattern): New function.\n\n\t* gcc.dg/vect/vect-pow-1.c: New testcase.\n\t* gcc.dg/vect/vect-pow-2.c: Likewise.\n\nFrom-SVN: r119056", "tree": {"sha": "780e63d411978fb8d8cb93106c7cfed5aedf45ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/780e63d411978fb8d8cb93106c7cfed5aedf45ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84e32cbb1fa266ee63c76b35436728bc5d689153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e32cbb1fa266ee63c76b35436728bc5d689153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e32cbb1fa266ee63c76b35436728bc5d689153"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "fb4844ada07e9fc9e28e54c396615afa7b4eab84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -1,3 +1,10 @@\n+2006-11-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (NUM_PATTERNS): Increase.\n+\t* tree-vect-patterns.c (vect_vect_recog_func_ptrs): Add\n+\tvect_recog_pow_pattern.\n+\t(vect_recog_pow_pattern): New function.\n+\n 2006-11-21  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.opt (mstack-check-l1): New."}, {"sha": "b6d5d4a11a1b7c8d875fa7d0310358d1b9f4ca03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -1,3 +1,8 @@\n+2006-11-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-pow-1.c: New testcase.\n+\t* gcc.dg/vect/vect-pow-2.c: Likewise.\n+\n 2006-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/29570"}, {"sha": "2c29cbaf6de754aed6733fd90820ad47fd26d7c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-pow-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-1.c?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fdump-tree-vect-details\" } */\n+\n+double x[256];\n+\n+void foo(void)\n+{\n+  int i;\n+  for (i=0; i<256; ++i)\n+    x[i] = x[i] * x[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"pattern recognized\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "dc3e7c0a486a288f473514fb56f7243819501ec9", "filename": "gcc/testsuite/gcc.dg/vect/vect-pow-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pow-2.c?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-math-errno -fdump-tree-vect-details\" } */\n+\n+double x[256];\n+\n+void foo(void)\n+{\n+  int i;\n+  for (i=0; i<256; ++i)\n+    x[i] = __builtin_pow (x[i], 0.5);\n+}\n+\n+/* { dg-final { scan-tree-dump \"pattern recognized\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3e40fc79b5a3b60af4f5b89be7ba95c9b116fa2d", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -50,10 +50,12 @@ static bool widened_name_p (tree, tree, tree *, tree *);\n static tree vect_recog_widen_sum_pattern (tree, tree *, tree *);\n static tree vect_recog_widen_mult_pattern (tree, tree *, tree *);\n static tree vect_recog_dot_prod_pattern (tree, tree *, tree *);\n+static tree vect_recog_pow_pattern (tree, tree *, tree *);\n static vect_recog_func_ptr vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n \tvect_recog_widen_mult_pattern,\n \tvect_recog_widen_sum_pattern,\n-\tvect_recog_dot_prod_pattern};\n+\tvect_recog_dot_prod_pattern,\n+\tvect_recog_pow_pattern};\n \n \n /* Function widened_name_p\n@@ -400,6 +402,93 @@ vect_recog_widen_mult_pattern (tree last_stmt,\n }\n \n \n+/* Function vect_recog_pow_pattern\n+\n+   Try to find the following pattern:\n+\n+     x = POW (y, N);\n+\n+   with POW being one of pow, powf, powi, powif and N being\n+   either 2 or 0.5.\n+\n+   Input:\n+\n+   * LAST_STMT: A stmt from which the pattern search begins.\n+\n+   Output:\n+\n+   * TYPE_IN: The type of the input arguments to the pattern.\n+\n+   * TYPE_OUT: The type of the output of this pattern.\n+\n+   * Return value: A new stmt that will be used to replace the sequence of\n+   stmts that constitute the pattern. In this case it will be:\n+        x * x\n+   or\n+\tsqrt (x)\n+*/\n+\n+static tree\n+vect_recog_pow_pattern (tree last_stmt, tree *type_in, tree *type_out)\n+{\n+  tree expr;\n+  tree type;\n+  tree fn, arglist, base, exp;\n+\n+  if (TREE_CODE (last_stmt) != MODIFY_EXPR)\n+    return NULL;\n+\n+  expr = TREE_OPERAND (last_stmt, 1);\n+  type = TREE_TYPE (expr);\n+\n+  if (TREE_CODE (expr) != CALL_EXPR)\n+    return NULL_TREE;\n+\n+  fn = get_callee_fndecl (expr);\n+  arglist = TREE_OPERAND (expr, 1);\n+  switch (DECL_FUNCTION_CODE (fn))\n+    {\n+    case BUILT_IN_POWIF:\n+    case BUILT_IN_POWI:\n+    case BUILT_IN_POWF:\n+    case BUILT_IN_POW:\n+      base = TREE_VALUE (arglist);\n+      exp = TREE_VALUE (TREE_CHAIN (arglist));\n+      if (TREE_CODE (exp) != REAL_CST\n+\t  && TREE_CODE (exp) != INTEGER_CST)\n+        return NULL_TREE;\n+      break;\n+\n+    default:;\n+      return NULL_TREE;\n+    }\n+\n+  /* We now have a pow or powi builtin function call with a constant\n+     exponent.  */\n+\n+  *type_in = get_vectype_for_scalar_type (TREE_TYPE (base));\n+  *type_out = NULL_TREE;\n+\n+  /* Catch squaring.  */\n+  if ((host_integerp (exp, 0)\n+       && tree_low_cst (exp, 0) == 2)\n+      || (TREE_CODE (exp) == REAL_CST\n+          && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst2)))\n+    return build2 (MULT_EXPR, TREE_TYPE (base), base, base);\n+\n+  /* Catch square root.  */\n+  if (TREE_CODE (exp) == REAL_CST\n+      && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconsthalf))\n+    {\n+      tree newfn = mathfn_built_in (TREE_TYPE (base), BUILT_IN_SQRT);\n+      tree newarglist = build_tree_list (NULL_TREE, base);\n+      return build_function_call_expr (newfn, newarglist);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n /* Function vect_recog_widen_sum_pattern\n \n    Try to find the following pattern:"}, {"sha": "8341ad00a07bd028e4f36c980cff92e819034913", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "patch": "@@ -357,7 +357,7 @@ extern loop_vec_info vect_analyze_loop (struct loop *);\n    Additional pattern recognition functions can (and will) be added\n    in the future.  */\n typedef tree (* vect_recog_func_ptr) (tree, tree *, tree *);\n-#define NUM_PATTERNS 3\n+#define NUM_PATTERNS 4\n void vect_pattern_recog (loop_vec_info);\n \n "}]}