{"sha": "1c72c7f64f6bc118f73aced5df31dc32e299e800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3MmM3ZjY0ZjZiYzExOGY3M2FjZWQ1ZGYzMWRjMzJlMjk5ZTgwMA==", "commit": {"author": {"name": "John F. Carr", "email": "jfc@mit.edu", "date": "1998-01-05T12:00:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-05T12:00:00Z"}, "message": "alias.c (*_dependence): Call base_alias_check before canon_rtx.\n\n        * alias.c (*_dependence): Call base_alias_check before canon_rtx.\n        (base_alias_check): If no base found for address call canon_rtx and\n        try again.\n\nFrom-SVN: r17296", "tree": {"sha": "eb239ac21e21be77b93d04d5995bbba8bcbded94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb239ac21e21be77b93d04d5995bbba8bcbded94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c72c7f64f6bc118f73aced5df31dc32e299e800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c72c7f64f6bc118f73aced5df31dc32e299e800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c72c7f64f6bc118f73aced5df31dc32e299e800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c72c7f64f6bc118f73aced5df31dc32e299e800/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "291672e58b25b3cd8ae210f60ab46338c82fe784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291672e58b25b3cd8ae210f60ab46338c82fe784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291672e58b25b3cd8ae210f60ab46338c82fe784"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "6dc60edadd0e745de0b3d60242640294407d6558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c72c7f64f6bc118f73aced5df31dc32e299e800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c72c7f64f6bc118f73aced5df31dc32e299e800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c72c7f64f6bc118f73aced5df31dc32e299e800", "patch": "@@ -1,3 +1,9 @@\n+Mon Jan  5 13:00:18 1998  John F. Carr  <jfc@mit.edu>\n+\n+\t* alias.c (*_dependence): Call base_alias_check before canon_rtx.\n+\t(base_alias_check): If no base found for address call canon_rtx and\n+\ttry again.\n+\n Mon Jan  5 11:39:49 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* mips.c (mips_expand_prologue): Handle large frame with no outgoing"}, {"sha": "4292a992d9ecce108f754bc9b71e665abe9fcdb4", "filename": "gcc/alias.c", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c72c7f64f6bc118f73aced5df31dc32e299e800/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c72c7f64f6bc118f73aced5df31dc32e299e800/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=1c72c7f64f6bc118f73aced5df31dc32e299e800", "patch": "@@ -1,5 +1,5 @@\n /* Alias analysis for GNU C\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n    Contributed by John Carr (jfc@mit.edu).\n \n This file is part of GNU CC.\n@@ -555,10 +555,31 @@ base_alias_check (x, y)\n   rtx x_base = find_base_term (x);\n   rtx y_base = find_base_term (y);\n \n-  /* If either base address is unknown or the base addresses are equal,\n-     nothing is known about aliasing.  */\n+  /* If the address itself has no known base see if a known equivalent\n+     value has one.  If either address still has no known base, nothing\n+     is known about aliasing.  */\n+  if (x_base == 0)\n+    {\n+      rtx x_c;\n+      if (! flag_expensive_optimizations || (x_c = canon_rtx (x)) == x)\n+\treturn 1;\n+      x_base = find_base_term (x_c);\n+      if (x_base == 0)\n+\treturn 1;\n+    }\n \n-  if (x_base == 0 || y_base == 0 || rtx_equal_p (x_base, y_base))\n+  if (y_base == 0)\n+    {\n+      rtx y_c;\n+      if (! flag_expensive_optimizations || (y_c = canon_rtx (y)) == y)\n+\treturn 1;\n+      y_base = find_base_term (y_c);\n+      if (y_base == 0)\n+\treturn 1;\n+    }\n+\n+  /* If the base addresses are equal nothing is known about aliasing.  */\n+  if (rtx_equal_p (x_base, y_base))\n     return 1;\n \n   /* The base addresses of the read and write are different\n@@ -721,7 +742,9 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n       }\n \n   /* Treat an access through an AND (e.g. a subword access on an Alpha)\n-     as an access with indeterminate size.  */\n+     as an access with indeterminate size.\n+     ??? Could instead convert an n byte reference at (and x y) to an\n+     n-y byte reference at (plus x y). */\n   if (GET_CODE (x) == AND && GET_CODE (XEXP (x, 1)) == CONST_INT)\n     return memrefs_conflict_p (-1, XEXP (x, 0), ysize, y, c);\n   if (GET_CODE (y) == AND && GET_CODE (XEXP (y, 1)) == CONST_INT)\n@@ -822,14 +845,12 @@ true_dependence (mem, mem_mode, x, varies)\n   if (RTX_UNCHANGING_P (x) && ! RTX_UNCHANGING_P (mem))\n     return 0;\n \n+  if (! base_alias_check (XEXP (x, 0), XEXP (mem, 0)))\n+    return 0;\n+\n   x_addr = canon_rtx (XEXP (x, 0));\n   mem_addr = canon_rtx (XEXP (mem, 0));\n \n-  /* Calling base_alias_check after canon_rtx detects more nonconflicting\n-     accesses at the cost of increased memory use. */\n-  if (! base_alias_check (x_addr, mem_addr))\n-    return 0;\n-\n   if (mem_mode == VOIDmode)\n     mem_mode = GET_MODE (mem);\n \n@@ -878,17 +899,18 @@ anti_dependence (mem, x)\n   /* If MEM is an unchanging read, then it can't possibly conflict with\n      the store to X, because there is at most one store to MEM, and it must\n      have occurred somewhere before MEM.  */\n-  x = canon_rtx (x);\n-  mem = canon_rtx (mem);\n   if (RTX_UNCHANGING_P (mem))\n     return 0;\n \n+  if (! base_alias_check (XEXP (x, 0), XEXP (mem, 0)))\n+    return 0;\n+\n+  x = canon_rtx (x);\n+  mem = canon_rtx (mem);\n+\n   x_addr = XEXP (x, 0);\n   mem_addr = XEXP (mem, 0);\n \n-  if (! base_alias_check (x_addr, mem_addr))\n-    return 0;\n-\n   return (memrefs_conflict_p (SIZE_FOR_MODE (mem), mem_addr,\n \t\t\t      SIZE_FOR_MODE (x), x_addr, 0)\n \t  && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n@@ -911,12 +933,12 @@ output_dependence (mem, x)\n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n \n-  x = canon_rtx (x);\n-  mem = canon_rtx (mem);\n-\n   if (! base_alias_check (XEXP (x, 0), XEXP (mem, 0)))\n     return 0;\n \n+  x = canon_rtx (x);\n+  mem = canon_rtx (mem);\n+\n   return (memrefs_conflict_p (SIZE_FOR_MODE (mem), XEXP (mem, 0),\n \t\t\t      SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t  && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)"}]}