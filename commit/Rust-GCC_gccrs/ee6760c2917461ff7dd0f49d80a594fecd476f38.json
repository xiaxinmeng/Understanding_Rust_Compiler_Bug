{"sha": "ee6760c2917461ff7dd0f49d80a594fecd476f38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2NzYwYzI5MTc0NjFmZjdkZDBmNDlkODBhNTk0ZmVjZDQ3NmYzOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-06-11T15:48:48Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-06-11T15:48:48Z"}, "message": "rs6000: Put constraints on the correct operand in movdi (PR85755)\n\nSome of the mov* patterns use ^ and $ constraint modifiers, which mean\ngive a penalty to this alternative if this operand needs a reload.  They\nare meant here to give a penalty if a register operand needs reloading\n(because it needs to be in a different kind of register), not when a\nmemory operand needs reloading (which is easy and cheap to do).\n\nThis patch fixes the movdi patterns.  This fixes PR85755.\n\nThe following are changed (name, old constraints, new constraints):\nFPR store   ^m := d     m := ^d\nFPR move    ^d := d     ^d := ^d\nAVX store   ^wY := wb   wY := ^wb\nAVX store   $Z := wv    Z := $wv\nVSX move    ^wi := wi   ^wi := ^wi\n\n\n\tPR target/85755\n\t* config/rs6000/rs6000.md (*movdi_internal32): Put constraint modifiers\n\ton the correct operand.\n\t(*movdi_internal64): Ditto.\n\n---\n gcc/config/rs6000/rs6000.md | 24 ++++++++++++------------\n 1 file changed, 12 insertions(+), 12 deletions(-)\n\ndiff --git a/gcc/config/rs6000/rs6000.md b/gcc/config/rs6000/rs6000.md\nindex a2605a0..f06591f 100644\n--- a/gcc/config/rs6000/rs6000.md\n+++ b/gcc/config/rs6000/rs6000.md\n@@ -8567,16 +8567,16 @@ (define_insn_and_split \"reload_gpr_from_vsxsf\"\n \n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-         \"=Y,        r,         r,         ^m,        ^d,         ^d,\n-          r,         ^wY,       $Z,        ^wb,       $wv,        ^wi,\n+         \"=Y,        r,         r,         m,         ^d,         ^d,\n+          r,         wY,        Z,         ^wb,       $wv,        ^wi,\n           *wo,       *wo,       *wv,       *wi,       *wi,        *wv,\n           *wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n-          \"r,        Y,         r,         d,         m,          d,\n-           IJKnGHF,  wb,        wv,        wY,        Z,          wi,\n-           Oj,       wM,        OjwM,      Oj,        wM,         wS,\n-           wB\"))]\n+         \"r,         Y,         r,         ^d,        m,          ^d,\n+          IJKnGHF,   ^wb,       $wv,       wY,        Z,          ^wi,\n+          Oj,        wM,        OjwM,      Oj,        wM,         wS,\n+          wB\"))]\n \n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n@@ -8643,17 +8643,17 @@ (define_split\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n-                ^m,        ^d,        ^d,        ^wY,       $Z,         $wb,\n+                m,         ^d,        ^d,        wY,        Z,          $wb,\n                 $wv,       ^wi,       *wo,       *wo,       *wv,        *wi,\n                 *wi,       *wv,       *wv,       r,         *h,         *h,\n                 ?*r,       ?*wg,      ?*r,       ?*wj\")\n \n \t(match_operand:DI 1 \"input_operand\"\n-                \"r,        YZ,        r,         I,         L,          nF,\n-                 d,        m,         d,         wb,        wv,         wY,\n-                 Z,        wi,        Oj,        wM,        OjwM,       Oj,\n-                 wM,       wS,        wB,        *h,        r,          0,\n-                 wg,       r,         wj,        r\"))]\n+               \"r,         YZ,        r,         I,         L,          nF,\n+                ^d,        m,         ^d,        ^wb,       $wv,        wY,\n+                Z,         ^wi,       Oj,        wM,        OjwM,       Oj,\n+                wM,        wS,        wB,        *h,        r,          0,\n+                wg,        r,         wj,        r\"))]\n \n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n-- \n1.8.3.1\n\nFrom-SVN: r261435", "tree": {"sha": "6cdb8665aea694bb6dc593d2af30b855205b75bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cdb8665aea694bb6dc593d2af30b855205b75bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6760c2917461ff7dd0f49d80a594fecd476f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6760c2917461ff7dd0f49d80a594fecd476f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6760c2917461ff7dd0f49d80a594fecd476f38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6760c2917461ff7dd0f49d80a594fecd476f38/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2dcab30bf737912fab9acfa560282c50c1d65c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcab30bf737912fab9acfa560282c50c1d65c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcab30bf737912fab9acfa560282c50c1d65c91"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "51b3e913d3271db65887daf8bd402fd2542028df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6760c2917461ff7dd0f49d80a594fecd476f38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6760c2917461ff7dd0f49d80a594fecd476f38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee6760c2917461ff7dd0f49d80a594fecd476f38", "patch": "@@ -1,3 +1,10 @@\n+2018-06-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/85755\n+\t* config/rs6000/rs6000.md (*movdi_internal32): Put constraint modifiers\n+\ton the correct operand.\n+\t(*movdi_internal64): Ditto.\n+\n 2018-06-11  Martin Liska  <mliska@suse.cz>\n \n         PR tree-optimization/86089"}, {"sha": "b0a88a912112a597aab2318703df807a019d874a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6760c2917461ff7dd0f49d80a594fecd476f38/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6760c2917461ff7dd0f49d80a594fecd476f38/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ee6760c2917461ff7dd0f49d80a594fecd476f38", "patch": "@@ -8517,16 +8517,16 @@\n \n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-         \"=Y,        r,         r,         ^m,        ^d,         ^d,\n-          r,         ^wY,       $Z,        ^wb,       $wv,        ^wi,\n+         \"=Y,        r,         r,         m,         ^d,         ^d,\n+          r,         wY,        Z,         ^wb,       $wv,        ^wi,\n           *wo,       *wo,       *wv,       *wi,       *wi,        *wv,\n           *wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n-          \"r,        Y,         r,         d,         m,          d,\n-           IJKnGHF,  wb,        wv,        wY,        Z,          wi,\n-           Oj,       wM,        OjwM,      Oj,        wM,         wS,\n-           wB\"))]\n+         \"r,         Y,         r,         ^d,        m,          ^d,\n+          IJKnGHF,   ^wb,       $wv,       wY,        Z,          ^wi,\n+          Oj,        wM,        OjwM,      Oj,        wM,         wS,\n+          wB\"))]\n \n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n@@ -8593,17 +8593,17 @@\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n-                ^m,        ^d,        ^d,        ^wY,       $Z,         $wb,\n+                m,         ^d,        ^d,        wY,        Z,          $wb,\n                 $wv,       ^wi,       *wo,       *wo,       *wv,        *wi,\n                 *wi,       *wv,       *wv,       r,         *h,         *h,\n                 ?*r,       ?*wg,      ?*r,       ?*wj\")\n \n \t(match_operand:DI 1 \"input_operand\"\n-                \"r,        YZ,        r,         I,         L,          nF,\n-                 d,        m,         d,         wb,        wv,         wY,\n-                 Z,        wi,        Oj,        wM,        OjwM,       Oj,\n-                 wM,       wS,        wB,        *h,        r,          0,\n-                 wg,       r,         wj,        r\"))]\n+               \"r,         YZ,        r,         I,         L,          nF,\n+                ^d,        m,         ^d,        ^wb,       $wv,        wY,\n+                Z,         ^wi,       Oj,        wM,        OjwM,       Oj,\n+                wM,        wS,        wB,        *h,        r,          0,\n+                wg,        r,         wj,        r\"))]\n \n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)"}]}