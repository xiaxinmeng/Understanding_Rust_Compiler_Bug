{"sha": "71f15f319bb8e6366ebd93023f5a5154a4722f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmMTVmMzE5YmI4ZTYzNjZlYmQ5MzAyM2Y1YTUxNTRhNDcyMmY1Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-20T10:27:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-20T10:27:37Z"}, "message": "name-lookup.c (store_binding_p): New predicate, split out from ...\n\n2012-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* name-lookup.c (store_binding_p): New predicate, split out from ...\n\t(store_binding): ... here.  Always store binding and require\n\ttarget vector with enough space.\n\t(store_bindings): Collect to store bindings and reserve space\n\tfor them, then store them.\n\t(store_class_bindings): Likewise.\n\nFrom-SVN: r190529", "tree": {"sha": "40f7faccf812181da72698bdf05f4616d5a3c3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f7faccf812181da72698bdf05f4616d5a3c3bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f15f319bb8e6366ebd93023f5a5154a4722f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f15f319bb8e6366ebd93023f5a5154a4722f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f15f319bb8e6366ebd93023f5a5154a4722f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f15f319bb8e6366ebd93023f5a5154a4722f5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "491e0b9b0cfcf89ef51ecc5fb089618a6fb3c0bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491e0b9b0cfcf89ef51ecc5fb089618a6fb3c0bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491e0b9b0cfcf89ef51ecc5fb089618a6fb3c0bd"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "b5961554d8b246589b1116672d9dad9bc95be862", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f15f319bb8e6366ebd93023f5a5154a4722f5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f15f319bb8e6366ebd93023f5a5154a4722f5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71f15f319bb8e6366ebd93023f5a5154a4722f5c", "patch": "@@ -1,3 +1,12 @@\n+2012-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* name-lookup.c (store_binding_p): New predicate, split out from ...\n+\t(store_binding): ... here.  Always store binding and require\n+\ttarget vector with enough space.\n+\t(store_bindings): Collect to store bindings and reserve space\n+\tfor them, then store them.\n+\t(store_class_bindings): Likewise.\n+\n 2012-08-19  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* Make-lang.in: Fix typo."}, {"sha": "f8dbfa1b628504973cf8d0efbee9da51c7e77b9d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f15f319bb8e6366ebd93023f5a5154a4722f5c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f15f319bb8e6366ebd93023f5a5154a4722f5c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=71f15f319bb8e6366ebd93023f5a5154a4722f5c", "patch": "@@ -5855,23 +5855,33 @@ pushtag (tree name, tree type, tag_scope scope)\n    scope isn't enough, because more binding levels may be pushed.  */\n struct saved_scope *scope_chain;\n \n-/* If ID has not already been marked, add an appropriate binding to\n-   *OLD_BINDINGS.  */\n+/* Return true if ID has not already been marked.  */\n+\n+static inline bool\n+store_binding_p (tree id)\n+{\n+  if (!id || !IDENTIFIER_BINDING (id))\n+    return false;\n+\n+  if (IDENTIFIER_MARKED (id))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Add an appropriate binding to *OLD_BINDINGS which needs to already\n+   have enough space reserved.  */\n \n static void\n store_binding (tree id, VEC(cxx_saved_binding,gc) **old_bindings)\n {\n   cxx_saved_binding *saved;\n \n-  if (!id || !IDENTIFIER_BINDING (id))\n-    return;\n-\n-  if (IDENTIFIER_MARKED (id))\n-    return;\n+  gcc_checking_assert (store_binding_p (id));\n \n   IDENTIFIER_MARKED (id) = 1;\n \n-  saved = VEC_safe_push (cxx_saved_binding, gc, *old_bindings, NULL);\n+  saved = VEC_quick_push (cxx_saved_binding, *old_bindings, NULL);\n   saved->identifier = id;\n   saved->binding = IDENTIFIER_BINDING (id);\n   saved->real_type_value = REAL_IDENTIFIER_TYPE_VALUE (id);\n@@ -5881,19 +5891,32 @@ store_binding (tree id, VEC(cxx_saved_binding,gc) **old_bindings)\n static void\n store_bindings (tree names, VEC(cxx_saved_binding,gc) **old_bindings)\n {\n-  tree t;\n+  static VEC(tree,heap) *bindings_need_stored = NULL;\n+  tree t, id;\n+  size_t i;\n \n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   for (t = names; t; t = TREE_CHAIN (t))\n     {\n-      tree id;\n-\n       if (TREE_CODE (t) == TREE_LIST)\n \tid = TREE_PURPOSE (t);\n       else\n \tid = DECL_NAME (t);\n \n-      store_binding (id, old_bindings);\n+      if (store_binding_p (id))\n+\tVEC_safe_push(tree, heap, bindings_need_stored, id);\n+    }\n+  if (!VEC_empty (tree, bindings_need_stored))\n+    {\n+      VEC_reserve_exact (cxx_saved_binding, gc, *old_bindings,\n+\t\t\t VEC_length (tree, bindings_need_stored));\n+      for (i = 0; VEC_iterate(tree, bindings_need_stored, i, id); ++i)\n+\t{\n+\t  /* We can appearantly have duplicates in NAMES.  */\n+\t  if (store_binding_p (id))\n+\t    store_binding (id, old_bindings);\n+\t}\n+      VEC_truncate (tree, bindings_need_stored, 0);\n     }\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n@@ -5905,12 +5928,23 @@ static void\n store_class_bindings (VEC(cp_class_binding,gc) *names,\n \t\t      VEC(cxx_saved_binding,gc) **old_bindings)\n {\n+  static VEC(tree,heap) *bindings_need_stored = NULL;\n   size_t i;\n   cp_class_binding *cb;\n \n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   for (i = 0; VEC_iterate(cp_class_binding, names, i, cb); ++i)\n-    store_binding (cb->identifier, old_bindings);\n+    if (store_binding_p (cb->identifier))\n+      VEC_safe_push (tree, heap, bindings_need_stored, cb->identifier);\n+  if (!VEC_empty (tree, bindings_need_stored))\n+    {\n+      tree id;\n+      VEC_reserve_exact (cxx_saved_binding, gc, *old_bindings,\n+\t\t\t VEC_length (tree, bindings_need_stored));\n+      for (i = 0; VEC_iterate(tree, bindings_need_stored, i, id); ++i)\n+\tstore_binding (id, old_bindings);\n+      VEC_truncate (tree, bindings_need_stored, 0);\n+    }\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n "}]}