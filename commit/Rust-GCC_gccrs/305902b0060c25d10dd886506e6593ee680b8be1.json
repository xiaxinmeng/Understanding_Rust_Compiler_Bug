{"sha": "305902b0060c25d10dd886506e6593ee680b8be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1OTAyYjAwNjBjMjVkMTBkZDg4NjUwNmU2NTkzZWU2ODBiOGJlMQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-04-01T16:02:07Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-04-01T16:02:07Z"}, "message": "c4x.c (c4x_emit_move_sequence): Force invalid QImode constants into memory if...\n\n\t* config/c4x/c4x.c (c4x_emit_move_sequence): Force invalid QImode\n\tconstants into memory if we get called directly from gen_move_insn\n\trather than emit_move_insn.\n\t(c4x_legitimize_address): Fix up LABEL_REF addresses.\n\nFrom-SVN: r26106", "tree": {"sha": "9cff42bad4458e75c3609f5ebc6de4728627bcd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cff42bad4458e75c3609f5ebc6de4728627bcd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305902b0060c25d10dd886506e6593ee680b8be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305902b0060c25d10dd886506e6593ee680b8be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305902b0060c25d10dd886506e6593ee680b8be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305902b0060c25d10dd886506e6593ee680b8be1/comments", "author": null, "committer": null, "parents": [{"sha": "ae9e7e16cd1b1a82cfc2367d98a54ee0ec1197db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9e7e16cd1b1a82cfc2367d98a54ee0ec1197db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9e7e16cd1b1a82cfc2367d98a54ee0ec1197db"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "7c683827024b6a93c6b69c6e0151e34feddf5ef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305902b0060c25d10dd886506e6593ee680b8be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305902b0060c25d10dd886506e6593ee680b8be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=305902b0060c25d10dd886506e6593ee680b8be1", "patch": "@@ -1,3 +1,10 @@\n+Fri Apr  2 11:58:22 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (c4x_emit_move_sequence): Force invalid QImode\n+\tconstants into memory if we get called directly from gen_move_insn\n+\trather than emit_move_insn.\n+\t(c4x_legitimize_address): Fix up LABEL_REF addresses.\n+\n Thu Apr  1 12:04:05 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* expr.c (store_field): When check direct_store, assume all complex"}, {"sha": "e8cee04cf403afa6f3076a5a4912e99967bf40f9", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305902b0060c25d10dd886506e6593ee680b8be1/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305902b0060c25d10dd886506e6593ee680b8be1/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=305902b0060c25d10dd886506e6593ee680b8be1", "patch": "@@ -1058,6 +1058,13 @@ c4x_emit_move_sequence (operands, mode)\n \t constants...  */\n       op1 = force_const_mem (mode, op1);\n     }\n+  else if (mode == QImode && CONSTANT_P (op1) && ! LEGITIMATE_CONSTANT_P (op1))\n+    {\n+      /* We shouldn't need this test if only emit_move_insn was called.\n+\t However, some routines call gen_move_insn which doesn't check that\n+\t the constants are legitimate.  */\n+      op1 = force_const_mem (mode, op1);\n+    }\n   else if (mode == HImode && CONSTANT_P (op1) && ! LEGITIMATE_CONSTANT_P (op1))\n     {\n       /* We could load all sorts of constants in two goes by pulling all\n@@ -1431,7 +1438,8 @@ c4x_legitimize_address (orig, mode)\n      rtx orig ATTRIBUTE_UNUSED;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  if (GET_CODE (orig) == SYMBOL_REF)\n+  if (GET_CODE (orig) == SYMBOL_REF\n+      || GET_CODE (orig) == LABEL_REF)\n     {\n       if (mode == HImode || mode == HFmode)\n \t{\n@@ -2183,9 +2191,9 @@ static int\n c4x_K_constant (op)\n      rtx op;\n {\n-  if (TARGET_C3X)\n+  if (TARGET_C3X || ! c4x_immed_int_constant (op))\n     return 0;\n-  return c4x_immed_int_constant (op) && IS_INT5_CONST (INTVAL (op));\n+  return IS_INT5_CONST (INTVAL (op));\n }\n \n \n@@ -2876,7 +2884,7 @@ call_address_operand (op, mode)\n }\n \n \n-/* Symbolic operand.  */\n+/* Symbolic address operand.  */\n \n int\n symbolic_address_operand (op, mode)\n@@ -4387,4 +4395,3 @@ c4x_adjust_cost (insn, link, dep_insn, cost)\n   else\n     abort ();\n }\n-"}]}