{"sha": "fdf7e809753403397d61a2a20f8af56d93bcd1ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmN2U4MDk3NTM0MDMzOTdkNjFhMmEyMGY4YWY1NmQ5M2JjZDFlYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-07-03T06:29:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-07-03T06:29:26Z"}, "message": "re PR libstdc++/6410 (Trouble with non-Ascii monetary symbols and wchar_t)\n\n\n2002-07-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/6410\n\t* include/bits/locale_facets.h (moneypunct::moneypunct): Add const\n\tchar* name parameter.\n\t* config/locale/gnu/monetary_members.cc: Use it.\n\t* config/locale/generic/monetary_members.cc: Same.\n\t* src/localename.cc (_Impl::_Impl(const char*, size_t)): Use it.\n\n\t* include/backward/strstream.h: Update date.\n\nFrom-SVN: r55203", "tree": {"sha": "8bf88f612ff7ddf50742c3ba4908877987d75384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf88f612ff7ddf50742c3ba4908877987d75384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf7e809753403397d61a2a20f8af56d93bcd1ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf7e809753403397d61a2a20f8af56d93bcd1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf7e809753403397d61a2a20f8af56d93bcd1ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf7e809753403397d61a2a20f8af56d93bcd1ec/comments", "author": null, "committer": null, "parents": [{"sha": "c3b7d169395f684a7425aaac5f4351d0aceef60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b7d169395f684a7425aaac5f4351d0aceef60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b7d169395f684a7425aaac5f4351d0aceef60a"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "4bfd86ae2779079ac0acfdacd6fc0a856b5c3baf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -1,3 +1,14 @@\n+2002-07-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/6410\n+\t* include/bits/locale_facets.h (moneypunct::moneypunct): Add const\n+\tchar* name parameter.\n+\t* config/locale/gnu/monetary_members.cc: Use it.\n+\t* config/locale/generic/monetary_members.cc: Same.\n+\t* src/localename.cc (_Impl::_Impl(const char*, size_t)): Use it.\n+\n+\t* include/backward/strstream.h: Update date.\n+\n 2002-07-02  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/6642"}, {"sha": "1921f46e98cfd09cf4fd4e644710ef51573a0c9c", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -45,7 +45,7 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale)\n+    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n       // \"C\" locale\n       _M_decimal_point = '.';\n@@ -61,7 +61,7 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale)\n+    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n       // \"C\" locale\n       _M_decimal_point = '.';\n@@ -86,7 +86,8 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale)\n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale, \n+\t\t\t\t\t\t\tconst char*)\n     {\n       // \"C\" locale\n       _M_decimal_point = L'.';\n@@ -102,7 +103,8 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale)\n+    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale, \n+\t\t\t\t\t\t\t const char*)\n     {\n       // \"C\" locale\n       _M_decimal_point = L'.';"}, {"sha": "6a797ffbc25fa82ba7e0abb7c8c5ac5beac3ee9e", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -216,7 +216,8 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc)\n+    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+\t\t\t\t\t\t     const char*)\n     {\n       if (__cloc == _S_c_locale)\n \t{\n@@ -260,7 +261,8 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc)\n+    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc, \n+\t\t\t\t\t\t      const char*)\n     {\n       if (__cloc == _S_c_locale)\n \t{\n@@ -313,7 +315,8 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc)\n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc, \n+\t\t\t\t\t\t\tconst char* __name)\n     {\n       if (__cloc == _S_c_locale)\n \t{\n@@ -331,6 +334,10 @@ namespace std\n       else\n \t{\n \t  // Named locale.\n+\t  // XXX Fix me. Switch to named locale so that mbsrtowcs will work.\n+\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n+\t  setlocale(LC_ALL, __name);\n+\n \t  _M_decimal_point = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc)}).__w);\n \n \t  _M_thousands_sep = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc)}).__w);\n@@ -391,12 +398,17 @@ namespace std\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\n+\t  // XXX\n+\t  setlocale(LC_ALL, __old);\n+\t  free(__old);\n \t}\n     }\n \n   template<> \n     void\n-    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc)\n+    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc, \n+\t\t\t\t\t\t\t const char* __name)\n     {\n       if (__cloc == _S_c_locale)\n \t{\n@@ -414,6 +426,10 @@ namespace std\n       else\n \t{\n \t  // Named locale.\n+\t  // XXX Fix me. Switch to named locale so that mbsrtowcs will work.\n+\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n+\t  setlocale(LC_ALL, __name);\n+\n \t  _M_decimal_point = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc)}).__w);\n \t  _M_thousands_sep = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc)}).__w);\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n@@ -473,6 +489,10 @@ namespace std\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\n+\t  // XXX\n+\t  setlocale(LC_ALL, __old);\n+\t  free(__old);\n \t}\n     }\n "}, {"sha": "c20812e3d5410e221e103f0c00294a7319832917", "filename": "libstdc++-v3/include/backward/strstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -1,6 +1,6 @@\n // Backward-compat support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "241c4655dc2856af73a44e1a5c614e3606eb90f0", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -1357,8 +1357,9 @@ namespace std\n       { _M_initialize_moneypunct(); }\n \n       explicit \n-      moneypunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs)\n-      { _M_initialize_moneypunct(__cloc); }\n+      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0) \n+      : locale::facet(__refs)\n+      { _M_initialize_moneypunct(__cloc, __s); }\n \n       char_type\n       decimal_point() const\n@@ -1438,7 +1439,8 @@ namespace std\n \n       // For use at construction time only.\n        void \n-       _M_initialize_moneypunct(__c_locale __cloc = _S_c_locale);\n+       _M_initialize_moneypunct(__c_locale __cloc = _S_c_locale, \n+\t\t\t\tconst char* __name = NULL);\n     };\n \n   template<typename _CharT, bool _Intl>\n@@ -1455,11 +1457,11 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc);\n+    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);\n \n   template<> \n     void\n-    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc);\n+    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n@@ -1470,11 +1472,13 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc);\n+    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale, \n+\t\t\t\t\t\t\tconst char*);\n \n   template<> \n     void\n-    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc);\n+    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale, \n+\t\t\t\t\t\t\t const char*);\n #endif\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "8fa911891705aad7dfab3ff7627c02f5731def3c", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf7e809753403397d61a2a20f8af56d93bcd1ec/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=fdf7e809753403397d61a2a20f8af56d93bcd1ec", "patch": "@@ -132,8 +132,8 @@ namespace std\n     _M_init_facet(new num_get<char>);\n     _M_init_facet(new num_put<char>);\n     _M_init_facet(new std::collate<char>(__cloc));\n-    _M_init_facet(new moneypunct<char, false>(__cloc));\n-    _M_init_facet(new moneypunct<char, true>(__cloc));\n+    _M_init_facet(new moneypunct<char, false>(__cloc, __s));\n+    _M_init_facet(new moneypunct<char, true>(__cloc, __s));\n     _M_init_facet(new money_get<char>);\n     _M_init_facet(new money_put<char>);\n     _M_init_facet(new __timepunct<char>(__cloc, __s));\n@@ -148,8 +148,8 @@ namespace std\n     _M_init_facet(new num_get<wchar_t>);\n     _M_init_facet(new num_put<wchar_t>);\n     _M_init_facet(new std::collate<wchar_t>(__cloc));\n-    _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n-    _M_init_facet(new moneypunct<wchar_t, true>(__cloc));\n+    _M_init_facet(new moneypunct<wchar_t, false>(__cloc, __s));\n+    _M_init_facet(new moneypunct<wchar_t, true>(__cloc, __s));\n     _M_init_facet(new money_get<wchar_t>);\n     _M_init_facet(new money_put<wchar_t>);\n     _M_init_facet(new __timepunct<wchar_t>(__cloc, __s));"}]}