{"sha": "5130a5cc8a10f509735333863db0ba313b1d68b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzMGE1Y2M4YTEwZjUwOTczNTMzMzg2M2RiMGJhMzEzYjFkNjhiMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-03T06:50:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-03T06:50:46Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r670", "tree": {"sha": "60f6debd631d3ffddf4a91cc233f0416585ed36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f6debd631d3ffddf4a91cc233f0416585ed36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5130a5cc8a10f509735333863db0ba313b1d68b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5130a5cc8a10f509735333863db0ba313b1d68b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5130a5cc8a10f509735333863db0ba313b1d68b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5130a5cc8a10f509735333863db0ba313b1d68b2/comments", "author": null, "committer": null, "parents": [{"sha": "3a7587e44e18f503e4781a813ac1ab16d5fd0fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7587e44e18f503e4781a813ac1ab16d5fd0fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7587e44e18f503e4781a813ac1ab16d5fd0fa3"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "e57531d1464a8478911859b5d8b49f7de40dceac", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5130a5cc8a10f509735333863db0ba313b1d68b2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5130a5cc8a10f509735333863db0ba313b1d68b2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5130a5cc8a10f509735333863db0ba313b1d68b2", "patch": "@@ -796,7 +796,8 @@ expand_call (exp, target, ignore, modifier)\n \t\t}\n \n \t      copy = gen_rtx (MEM, BLKmode,\n-\t\t\t      allocate_dynamic_stack_space (size_rtx, 0));\n+\t\t\t      allocate_dynamic_stack_space (size_rtx, 0,\n+\t\t\t\t\t\t\t    TYPE_ALIGN (type)));\n \t    }\n \t  else\n \t    copy = assign_stack_temp (TYPE_MODE (type), size, 1);"}, {"sha": "80f12c6f215b3f59f97ee881ebb5dac9edafe45a", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5130a5cc8a10f509735333863db0ba313b1d68b2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5130a5cc8a10f509735333863db0ba313b1d68b2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5130a5cc8a10f509735333863db0ba313b1d68b2", "patch": "@@ -2745,7 +2745,7 @@ expand_decl (decl)\n       free_temp_slots ();\n \n       /* Allocate space on the stack for the variable.  */\n-      address = allocate_dynamic_stack_space (size, 0);\n+      address = allocate_dynamic_stack_space (size, 0, DECL_ALIGN (decl));\n \n       if (nonlocal_goto_stack_level != 0)\n \temit_move_insn (nonlocal_goto_stack_level, stack_pointer_rtx);\n@@ -3651,7 +3651,7 @@ expand_end_case (orig_index)\n \t  if (HAVE_casesi)\n \t    {\n \t      enum machine_mode index_mode = SImode;\n-\t      tree index_type = GET_MODE_BITSIZE (index_mode);\n+\t      int index_bits = GET_MODE_BITSIZE (index_mode);\n \n \t      /* Convert the index to SImode.  */\n \t      if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (index_expr)))\n@@ -3662,7 +3662,7 @@ expand_end_case (orig_index)\n \t\t  minval = integer_zero_node;\n \t\t}\n \t      if (TYPE_MODE (TREE_TYPE (index_expr)) != index_mode)\n-\t\tindex_expr = convert (type_for_size (index_type, 0),\n+\t\tindex_expr = convert (type_for_size (index_bits, 0),\n \t\t\t\t      index_expr);\n \t      index = expand_expr (index_expr, 0, VOIDmode, 0);\n \t      emit_queue ();\n@@ -3683,9 +3683,9 @@ expand_end_case (orig_index)\n \t\t\t\t\t\t TREE_TYPE (index_expr),\n \t\t\t\t\t\t index_expr, minval)));\n \t      index = expand_expr (index_expr, 0, VOIDmode, 0);\n-\t      index = convert_to_mode (Pmode, index, 1);\n \t      emit_queue ();\n-\t      index = protect_from_queue (index, 0);\n+\t      /* convert_to_mode calls protect_from_queue.  */\n+\t      index = convert_to_mode (Pmode, index, 1);\n \t      do_pending_stack_adjust ();\n \n \t      do_tablejump (index, Pmode,"}]}