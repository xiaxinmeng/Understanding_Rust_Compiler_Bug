{"sha": "5b0d91c39237f6a45dcb229620bbf5c144b29c62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwZDkxYzM5MjM3ZjZhNDVkY2IyMjk2MjBiYmY1YzE0NGIyOWM2Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-02-13T06:39:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-02-13T06:39:45Z"}, "message": "* explow.c (trunc_int_for_mode): Sign-extend value to mode.\n\nFrom-SVN: r39615", "tree": {"sha": "7b015877b972e243b2a4efd84b3be03b3d775a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b015877b972e243b2a4efd84b3be03b3d775a5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b0d91c39237f6a45dcb229620bbf5c144b29c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0d91c39237f6a45dcb229620bbf5c144b29c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0d91c39237f6a45dcb229620bbf5c144b29c62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0d91c39237f6a45dcb229620bbf5c144b29c62/comments", "author": null, "committer": null, "parents": [{"sha": "4b01cd8fbf7e5bd516fbebaf4a86910cc88e8566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b01cd8fbf7e5bd516fbebaf4a86910cc88e8566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b01cd8fbf7e5bd516fbebaf4a86910cc88e8566"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "8761c12ec50160e03518c7734f7966e1ac0da6ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0d91c39237f6a45dcb229620bbf5c144b29c62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0d91c39237f6a45dcb229620bbf5c144b29c62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b0d91c39237f6a45dcb229620bbf5c144b29c62", "patch": "@@ -1,3 +1,7 @@\n+2001-02-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* explow.c (trunc_int_for_mode): Sign-extend value to mode.\n+\n 2001-02-12  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config/rs6000/sysv4.h (MASK_NO_BITFIELD_WORD): New macro."}, {"sha": "719421f6cd6e70a25b69e262918cb68f043f56ff", "filename": "gcc/explow.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0d91c39237f6a45dcb229620bbf5c144b29c62/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0d91c39237f6a45dcb229620bbf5c144b29c62/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5b0d91c39237f6a45dcb229620bbf5c144b29c62", "patch": "@@ -56,28 +56,16 @@ trunc_int_for_mode (c, mode)\n   if (mode == BImode)\n     return c & 1 ? STORE_FLAG_VALUE : 0;\n \n-  /* We clear out all bits that don't belong in MODE, unless they and our\n-     sign bit are all one.  So we get either a reasonable negative\n-     value or a reasonable unsigned value.  */\n-\n-  if (width < HOST_BITS_PER_WIDE_INT\n-      && ((c & ((HOST_WIDE_INT) (-1) << (width - 1)))\n-           != ((HOST_WIDE_INT) (-1) << (width - 1))))\n-    c &= ((HOST_WIDE_INT) 1 << width) - 1;\n-\n-  /* If this would be an entire word for the target, but is not for\n-     the host, then sign-extend on the host so that the number will look\n-     the same way on the host that it would on the target.\n-\n-     For example, when building a 64 bit alpha hosted 32 bit sparc\n-     targeted compiler, then we want the 32 bit unsigned value -1 to be\n-     represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n-     The later confuses the sparc backend.  */\n-\n-  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n-      && BITS_PER_WORD == width\n-      && (c & ((HOST_WIDE_INT) 1 << (width - 1))))\n-    c |= ((HOST_WIDE_INT) (-1) << width);\n+  /* Sign-extend for the requested mode.  */\n+\n+  if (width < HOST_BITS_PER_WIDE_INT)\n+    {\n+      HOST_WIDE_INT sign = 1;\n+      sign <<= width - 1;\n+      c &= (sign << 1) - 1;\n+      c ^= sign;\n+      c -= sign;\n+    }\n \n   return c;\n }"}]}