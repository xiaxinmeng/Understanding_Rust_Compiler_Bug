{"sha": "36fc59580b92ea18a02ef2e1623b96103608f774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmYzU5NTgwYjkyZWExOGEwMmVmMmUxNjIzYjk2MTAzNjA4Zjc3NA==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2008-05-16T07:10:26Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2008-05-16T07:10:26Z"}, "message": "parallel_mode.xml: Documented the new choices, factoring out common tags.\n\n2008-05-16  Johannes Singler  <singler@ira.uka.de>\n\n         * doc/xml/manual/parallel_mode.xml:\n         Documented the new choices, factoring out common tags.\n         * include/parallel/multiway_merge.h:\n         Place comparison functor at the end, to comply with\n         established convention.\n         (parallel_multiway_merge) Pass number of threads explicitly.\n         Introduce new compile-time variants, make exact splitting the\n         default.\n         * include/parallel/tags.h:\n         Extend exact_tag, introduce sampling_tag.\n         * include/parallel/merge.h:\n         (parallel_merge_advance) Adapt to changed interface.\n         * include/parallel/multiway_mergesort.h: Likewise.\n\nFrom-SVN: r135411", "tree": {"sha": "af2790592710b56f509e33edd028ffde9bd3a2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2790592710b56f509e33edd028ffde9bd3a2d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36fc59580b92ea18a02ef2e1623b96103608f774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fc59580b92ea18a02ef2e1623b96103608f774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fc59580b92ea18a02ef2e1623b96103608f774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fc59580b92ea18a02ef2e1623b96103608f774/comments", "author": null, "committer": null, "parents": [{"sha": "fa9290d3b9b4b1d981a25c06d8450b88d022f6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9290d3b9b4b1d981a25c06d8450b88d022f6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9290d3b9b4b1d981a25c06d8450b88d022f6ed"}], "stats": {"total": 579, "additions": 371, "deletions": 208}, "files": [{"sha": "faea5a9e7f68cac79774e49057841a305865904d", "filename": "libstdc++-v3/doc/xml/manual/parallel_mode.xml", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml?ref=36fc59580b92ea18a02ef2e1623b96103608f774", "patch": "@@ -575,24 +575,36 @@ This means that the actual parallelization strategy is chosen at run-time.\n (Choosing the variants at compile-time will come soon.)\n </para>\n \n+<para>\n+For the following algorithms in general, we have\n+<code>__gnu_parallel::parallel_tag</code> and\n+<code>__gnu_parallel::default_parallel_tag</code>, in addition to\n+<code>__gnu_parallel::sequential_tag</code>.\n+<code>__gnu_parallel::default_parallel_tag</code> chooses the default \n+algorithm at compiletime, as does omitting the tag.\n+<code>__gnu_parallel::parallel_tag</code> postpones the decision to runtime\n+(see next section).\n+For all tags, the number of threads desired for this call can optionally be\n+passed to the respective tag's constructor.\n+</para>\n+\n+<para>\n+The <code>multiway_merge</code> algorithm comes with the additional choices,\n+<code>__gnu_parallel::exact_tag</code> and\n+<code>__gnu_parallel::sampling_tag</code>.\n+Exact and sampling are the two available splitting strategies.\n+</para>\n+\n <para>\n For the <code>sort</code> and <code>stable_sort</code> algorithms, there are\n-several possible choices, \n-<code>__gnu_parallel::parallel_tag</code>,\n-<code>__gnu_parallel::default_parallel_tag</code>,\n+several additional choices, namely\n <code>__gnu_parallel::multiway_mergesort_tag</code>,\n <code>__gnu_parallel::multiway_mergesort_exact_tag</code>, \n <code>__gnu_parallel::multiway_mergesort_sampling_tag</code>,\n-<code>__gnu_parallel::quicksort_tag</code>,\n+<code>__gnu_parallel::quicksort_tag</code>, and\n <code>__gnu_parallel::balanced_quicksort_tag</code>.\n-Multiway mergesort comes with two splitting strategies for merging, therefore\n-the extra choice. If non is chosen, the default splitting strategy is selected.\n-<code>__gnu_parallel::default_parallel_tag</code> chooses the default parallel\n-sorting algorithm at runtime. <code>__gnu_parallel::parallel_tag</code>\n-postpones the decision to runtime (see next section).\n-The quicksort options cannot be used for <code>stable_sort</code>.\n-For all tags, the number of threads desired for this call can optionally be\n-passed to the tag's constructor.\n+Multiway mergesort comes with the two splitting strategies for multi-way\n+merging. The quicksort options cannot be used for <code>stable_sort</code>.\n </para>\n \n </sect3>"}, {"sha": "580b1479329e14fbab6808a5c2141b994c903b9a", "filename": "libstdc++-v3/include/parallel/merge.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h?ref=36fc59580b92ea18a02ef2e1623b96103608f774", "patch": "@@ -254,11 +254,11 @@ namespace __gnu_parallel\n       RandomAccessIterator3\n         target_end = parallel_multiway_merge\n           < /* stable = */ true, /* sentinels = */ false>(\n-            seqs, seqs + 2, target, comp,\n+            seqs, seqs + 2, target,\n             multiway_merge_exact_splitting\n               < /* stable = */ true, iterator_pair*,\n                 Comparator, difference_type1>,\n-            max_length);\n+            max_length, comp, omp_get_max_threads());\n \n       return target_end;\n     }"}, {"sha": "3c75c70f3c4eb60b64bd8ea2f920883fe472a79e", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 322, "deletions": 187, "changes": 509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=36fc59580b92ea18a02ef2e1623b96103608f774", "patch": "@@ -297,7 +297,7 @@ template<template<typename RAI, typename C> class iterator,\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     _GLIBCXX_CALL(length);\n \n@@ -416,7 +416,7 @@ template<template<typename RAI, typename C> class iterator,\n   multiway_merge_4_variant(RandomAccessIteratorIterator seqs_begin,\n                            RandomAccessIteratorIterator seqs_end,\n                            RandomAccessIterator3 target,\n-                           Comparator comp, _DifferenceTp length)\n+                           _DifferenceTp length, Comparator comp)\n   {\n     _GLIBCXX_CALL(length);\n     typedef _DifferenceTp difference_type;\n@@ -540,8 +540,7 @@ template<typename LT,\n   multiway_merge_loser_tree(RandomAccessIteratorIterator seqs_begin,\n                             RandomAccessIteratorIterator seqs_end,\n                             RandomAccessIterator3 target,\n-                            Comparator comp,\n-                            _DifferenceTp length)\n+                            _DifferenceTp length, Comparator comp)\n   {\n     _GLIBCXX_CALL(length)\n \n@@ -626,8 +625,8 @@ template<typename LT,\n     const typename std::iterator_traits<typename std::iterator_traits<\n       RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n         sentinel,\n-    Comparator comp,\n-    _DifferenceTp length)\n+    _DifferenceTp length,\n+    Comparator comp)\n   {\n     _GLIBCXX_CALL(length)\n     typedef _DifferenceTp difference_type;\n@@ -716,8 +715,8 @@ template<\n     const typename std::iterator_traits<typename std::iterator_traits<\n       RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n         sentinel,\n-    Comparator comp,\n-    _DifferenceTp length)\n+    _DifferenceTp length,\n+    Comparator comp)\n   {\n     _GLIBCXX_CALL(length)\n \n@@ -740,7 +739,7 @@ template<\n \n     target_end = multiway_merge_loser_tree_unguarded\n         <UnguardedLoserTree>\n-      (seqs_begin, seqs_end, target, sentinel, comp, length);\n+      (seqs_begin, seqs_end, target, sentinel, length, comp);\n \n #if _GLIBCXX_ASSERTIONS\n     _GLIBCXX_PARALLEL_ASSERT(target_end == target + length);\n@@ -808,10 +807,10 @@ struct multiway_merge_3_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     return multiway_merge_3_variant<guarded_iterator>(\n-        seqs_begin, seqs_end, target, comp, length);\n+        seqs_begin, seqs_end, target, length, comp);\n   }\n };\n \n@@ -833,10 +832,10 @@ struct multiway_merge_3_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     return multiway_merge_3_variant<unguarded_iterator>(\n-        seqs_begin, seqs_end, target, comp, length);\n+        seqs_begin, seqs_end, target, length, comp);\n   }\n };\n \n@@ -857,10 +856,10 @@ struct multiway_merge_4_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     return multiway_merge_4_variant<guarded_iterator>(\n-        seqs_begin, seqs_end, target, comp, length);\n+        seqs_begin, seqs_end, target, length, comp);\n   }\n };\n \n@@ -882,10 +881,10 @@ struct multiway_merge_4_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     return multiway_merge_4_variant<unguarded_iterator>(\n-        seqs_begin, seqs_end, target, comp, length);\n+        seqs_begin, seqs_end, target, length, comp);\n   }\n };\n \n@@ -908,7 +907,7 @@ struct multiway_merge_k_variant_sentinel_switch\n       const typename std::iterator_traits<typename std::iterator_traits<\n         RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n           sentinel,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n       ::value_type::first_type\n@@ -921,7 +920,7 @@ struct multiway_merge_k_variant_sentinel_switch\n             loser_tree_traits<value_type>::use_pointer\n           , LoserTreePointerUnguarded<stable, value_type, Comparator>\n           , LoserTreeUnguarded<stable, value_type, Comparator>\n-        >::__type>(seqs_begin, seqs_end, target, sentinel, comp, length);\n+        >::__type>(seqs_begin, seqs_end, target, sentinel, length, comp);\n   }\n };\n \n@@ -945,7 +944,7 @@ struct multiway_merge_k_variant_sentinel_switch\n       const typename std::iterator_traits<typename std::iterator_traits<\n         RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n           sentinel,\n-      Comparator comp, _DifferenceTp length)\n+      _DifferenceTp length, Comparator comp)\n   {\n     typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n       ::value_type::first_type\n@@ -958,7 +957,7 @@ struct multiway_merge_k_variant_sentinel_switch\n             loser_tree_traits<value_type>::use_pointer\n           , LoserTreePointer<stable, value_type, Comparator>\n           , LoserTree<stable, value_type, Comparator>\n-        >::__type >(seqs_begin, seqs_end, target, comp, length);\n+        >::__type >(seqs_begin, seqs_end, target, length, comp);\n   }\n };\n \n@@ -990,7 +989,7 @@ template<\n     const typename std::iterator_traits<typename std::iterator_traits<\n       RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n         sentinel,\n-    Comparator comp, _DifferenceTp length)\n+    _DifferenceTp length, Comparator comp)\n   {\n     _GLIBCXX_CALL(length)\n \n@@ -1043,15 +1042,15 @@ template<\n           , RandomAccessIteratorIterator\n           , RandomAccessIterator3\n           , _DifferenceTp\n-          , Comparator>()(seqs_begin, seqs_end, target, comp, length);\n+          , Comparator>()(seqs_begin, seqs_end, target, length, comp);\n         break;\n       case 4:\n         return_target = multiway_merge_4_variant_sentinel_switch<\n             sentinels\n           , RandomAccessIteratorIterator\n           , RandomAccessIterator3\n           , _DifferenceTp\n-          , Comparator>()(seqs_begin, seqs_end, target, comp, length);\n+          , Comparator>()(seqs_begin, seqs_end, target, length, comp);\n         break;\n       default:\n           return_target = multiway_merge_k_variant_sentinel_switch<\n@@ -1060,8 +1059,7 @@ template<\n             , RandomAccessIteratorIterator\n             , RandomAccessIterator3\n             , _DifferenceTp\n-            , Comparator>()\n-                (seqs_begin, seqs_end, target, sentinel, comp, length);\n+            , Comparator>()(seqs_begin, seqs_end, target, sentinel, length, comp);\n           break;\n       }\n #if _GLIBCXX_ASSERTIONS\n@@ -1108,8 +1106,7 @@ template<\n void multiway_merge_sampling_splitting(\n     RandomAccessIteratorIterator seqs_begin,\n     RandomAccessIteratorIterator seqs_end,\n-    Comparator comp, difference_type length,\n-    difference_type total_length,\n+    difference_type length, difference_type total_length, Comparator comp,\n     std::vector<std::pair<difference_type, difference_type> > *pieces)\n {\n   typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n@@ -1190,9 +1187,7 @@ template<\n void multiway_merge_exact_splitting(\n     RandomAccessIteratorIterator seqs_begin,\n     RandomAccessIteratorIterator seqs_end,\n-    Comparator comp,\n-    difference_type length,\n-    difference_type total_length,\n+    difference_type length, difference_type total_length, Comparator comp,\n     std::vector<std::pair<difference_type, difference_type> > *pieces)\n {\n   typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n@@ -1297,9 +1292,10 @@ template<\n   parallel_multiway_merge(RandomAccessIteratorIterator seqs_begin,\n                           RandomAccessIteratorIterator seqs_end,\n                           RandomAccessIterator3 target,\n-                          Comparator comp,\n                           Splitter splitter,\n-                          _DifferenceTp length)\n+                          _DifferenceTp length,\n+                          Comparator comp,\n+                          thread_index_t num_threads)\n     {\n #if _GLIBCXX_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(seqs_end - seqs_begin > 1);\n@@ -1347,8 +1343,8 @@ template<\n \n       std::vector<std::pair<difference_type, difference_type> >* pieces;\n \n-      thread_index_t num_threads = static_cast<thread_index_t>\n-        (std::min<difference_type>(get_max_threads(), total_length));\n+      num_threads = static_cast<thread_index_t>\n+        (std::min<difference_type>(num_threads, total_length));\n \n #     pragma omp parallel num_threads (num_threads)\n         {\n@@ -1365,8 +1361,8 @@ template<\n                   __gnu_parallel::_Settings::get().merge_oversampling *\n                     num_threads;\n \n-              splitter(ne_seqs, ne_seqs + k, comp, length, total_length,\n-                       pieces);\n+              splitter(ne_seqs, ne_seqs + k, length, total_length,\n+                       comp, pieces);\n             } //single\n \n           thread_index_t iam = omp_get_thread_num();\n@@ -1389,7 +1385,7 @@ template<\n           if(length > target_position)\n             sequential_multiway_merge<stable, sentinels>(\n               chunks, chunks + k, target + target_position,\n-              *(seqs_begin->second), comp, length - target_position);\n+               *(seqs_begin->second), length - target_position, comp);\n \n           delete[] chunks;\n         } // parallel\n@@ -1481,6 +1477,7 @@ template<\n  *\n  * @return end iterator of output sequence\n  */\n+// multiway_merge\n // public interface\n template<\n     typename RandomAccessIteratorPairIterator\n@@ -1491,49 +1488,7 @@ RandomAccessIteratorOut\n multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length)\n-{\n-  typedef _DifferenceTp difference_type;\n-  _GLIBCXX_CALL(seqs_end - seqs_begin)\n-\n-  // catch special case: no sequences\n-  if (seqs_begin == seqs_end)\n-    return target;\n-\n-  // Execute merge; maybe parallel, depending on the number of merged\n-  // elements and the number of sequences and global thresholds in\n-  // Settings.\n-  if ((seqs_end - seqs_begin > 1) &&\n-        _GLIBCXX_PARALLEL_CONDITION(\n-        ((seqs_end - seqs_begin) >=\n-        __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n-        && ((sequence_index_t)length >=\n-        __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n-    return parallel_multiway_merge\n-      </* stable = */ false, /* sentinels = */ false>\n-        (seqs_begin, seqs_end, target, comp,\n-        multiway_merge_sampling_splitting</* stable = */ false,\n-          typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-            ::value_type*, Comparator, _DifferenceTp>,\n-        static_cast<difference_type>(length));\n-  else\n-    return sequential_multiway_merge\n-      </* stable = */false, /* sentinels = */ false>(\n-        seqs_begin, seqs_end,\n-        target, *(seqs_begin->second), comp, length);\n-}\n-\n-// public interface\n-template<\n-    typename RandomAccessIteratorPairIterator\n-  , typename RandomAccessIteratorOut\n-  , typename _DifferenceTp\n-  , typename Comparator>\n-RandomAccessIteratorOut\n-multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n-    , RandomAccessIteratorPairIterator seqs_end\n-    , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n+    , _DifferenceTp length, Comparator comp\n     , __gnu_parallel::sequential_tag)\n {\n   typedef _DifferenceTp difference_type;\n@@ -1546,10 +1501,10 @@ multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n   // Execute multiway merge *sequentially*.\n   return sequential_multiway_merge\n     </* stable = */ false, /* sentinels = */ false>\n-      (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n+      (seqs_begin, seqs_end, target, *(seqs_begin->second), length, comp);\n }\n \n-//public interface\n+// public interface\n template<\n     typename RandomAccessIteratorPairIterator\n   , typename RandomAccessIteratorOut\n@@ -1559,8 +1514,8 @@ RandomAccessIteratorOut\n multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n-    , __gnu_parallel::exact_tag)\n+    , _DifferenceTp length, Comparator comp\n+    , __gnu_parallel::exact_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1580,17 +1535,15 @@ multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n             __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n       return parallel_multiway_merge\n                     </* stable = */ false, /* sentinels = */ false>(\n-          seqs_begin, seqs_end,\n-          target, comp,\n+          seqs_begin, seqs_end, target,\n           multiway_merge_exact_splitting</* stable = */ false,\n             typename std::iterator_traits<RandomAccessIteratorPairIterator>\n               ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge\n                       </* stable = */ false, /* sentinels = */ false>(\n-          seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          seqs_begin, seqs_end, target, *(seqs_begin->second), length, comp);\n }\n \n // public interface\n@@ -1600,10 +1553,11 @@ template<\n   , typename _DifferenceTp\n   , typename Comparator>\n RandomAccessIteratorOut\n-stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length)\n+    , _DifferenceTp length, Comparator comp\n+    , __gnu_parallel::sampling_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1618,24 +1572,59 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     if ((seqs_end - seqs_begin > 1) &&\n           _GLIBCXX_PARALLEL_CONDITION(\n           ((seqs_end - seqs_begin) >=\n-            __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n+             __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n           && ((sequence_index_t)length >=\n             __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n       return parallel_multiway_merge\n-        </* stable = */ true, /* sentinels = */ false>(\n+                    </* stable = */ false, /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, comp,\n-          multiway_merge_sampling_splitting</* stable = */ true,\n+          target,\n+          multiway_merge_exact_splitting</* stable = */ false,\n             typename std::iterator_traits<RandomAccessIteratorPairIterator>\n               ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge\n-        </* stable = */ true, /* sentinels = */ false>(\n+                      </* stable = */ false, /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          target, *(seqs_begin->second), length, comp);\n }\n \n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , parallel_tag tag = parallel_tag(0))\n+{\n+  return multiway_merge(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , default_parallel_tag tag)\n+{\n+  return multiway_merge(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n+}\n+\n+// stable_multiway_merge\n // public interface\n template<\n     typename RandomAccessIteratorPairIterator\n@@ -1646,7 +1635,7 @@ RandomAccessIteratorOut\n stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n+    , _DifferenceTp length, Comparator comp\n     , __gnu_parallel::sequential_tag)\n {\n     typedef _DifferenceTp difference_type;\n@@ -1659,7 +1648,7 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ true, /* sentinels = */ false>\n-        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n+        (seqs_begin, seqs_end, target, *(seqs_begin->second), length, comp);\n }\n \n // public interface\n@@ -1672,8 +1661,8 @@ RandomAccessIteratorOut\n stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n-    , __gnu_parallel::exact_tag)\n+    , _DifferenceTp length, Comparator comp\n+    , __gnu_parallel::exact_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1694,17 +1683,95 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n       return parallel_multiway_merge\n         </* stable = */ true, /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, comp, \n-          multiway_merge_exact_splitting\n-            </* stable = */ true,\n-              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-                ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+          target,\n+          multiway_merge_exact_splitting</* stable = */ true,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge</* stable = */ true,\n         /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          target, *(seqs_begin->second), length, comp);\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , sampling_tag tag)\n+{\n+    typedef _DifferenceTp difference_type;\n+    _GLIBCXX_CALL(seqs_end - seqs_begin)\n+\n+    // catch special case: no sequences\n+    if (seqs_begin == seqs_end)\n+      return target;\n+\n+    // Execute merge; maybe parallel, depending on the number of merged\n+    // elements and the number of sequences and global thresholds in\n+    // Settings.\n+    if ((seqs_end - seqs_begin > 1) &&\n+          _GLIBCXX_PARALLEL_CONDITION(\n+          ((seqs_end - seqs_begin) >=\n+            __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n+          && ((sequence_index_t)length >=\n+            __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n+      return parallel_multiway_merge\n+        </* stable = */ true, /* sentinels = */ false>(\n+          seqs_begin, seqs_end,\n+          target,\n+          multiway_merge_sampling_splitting</* stable = */ true,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n+    else\n+      return sequential_multiway_merge\n+        </* stable = */ true, /* sentinels = */ false>(\n+          seqs_begin, seqs_end,\n+          target, *(seqs_begin->second), length, comp);\n+}\n+\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , parallel_tag tag = parallel_tag(0))\n+{\n+  return stable_multiway_merge(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , default_parallel_tag tag)\n+{\n+  return stable_multiway_merge(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n }\n \n /**\n@@ -1782,6 +1849,7 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n  *\n  * @return end iterator of output sequence\n  */\n+// multiway_merge_sentinels\n // public interface\n template<\n     typename RandomAccessIteratorPairIterator\n@@ -1792,50 +1860,7 @@ RandomAccessIteratorOut\n multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length)\n-{\n-    typedef _DifferenceTp difference_type;\n-    _GLIBCXX_CALL(seqs_end - seqs_begin)\n-\n-    // catch special case: no sequences\n-    if (seqs_begin == seqs_end)\n-      return target;\n-\n-    // Execute merge; maybe parallel, depending on the number of merged\n-    // elements and the number of sequences and global thresholds in\n-    // Settings.\n-    if ((seqs_end - seqs_begin > 1) &&\n-          _GLIBCXX_PARALLEL_CONDITION(\n-          ((seqs_end - seqs_begin) >=\n-            __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n-          && ((sequence_index_t)length >=\n-            __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n-      return parallel_multiway_merge\n-        </* stable = */ false, /* sentinels = */ true>\n-          (seqs_begin, seqs_end, target, comp,\n-          multiway_merge_sampling_splitting\n-            </* stable = */ false,\n-              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-                ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n-    else\n-      return sequential_multiway_merge\n-        </* stable = */false, /* sentinels = */ true>(\n-          seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n-}\n-\n-//public interface\n-template<\n-    typename RandomAccessIteratorPairIterator\n-  , typename RandomAccessIteratorOut\n-  , typename _DifferenceTp\n-  , typename Comparator>\n-RandomAccessIteratorOut\n-multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n-    , RandomAccessIteratorPairIterator seqs_end\n-    , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n+    , _DifferenceTp length, Comparator comp\n     , __gnu_parallel::sequential_tag)\n {\n     typedef _DifferenceTp difference_type;\n@@ -1848,7 +1873,8 @@ multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ false, /* sentinels = */ true>\n-        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n+        (seqs_begin, seqs_end,\n+         target, *(seqs_begin->second), length, comp);\n }\n \n // public interface\n@@ -1861,8 +1887,8 @@ RandomAccessIteratorOut\n multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n-    , __gnu_parallel::exact_tag)\n+    , _DifferenceTp length, Comparator comp\n+    , __gnu_parallel::exact_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1883,17 +1909,16 @@ multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n       return parallel_multiway_merge\n         </* stable = */ false, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp,\n-          multiway_merge_exact_splitting\n-            </* stable = */ false,\n-              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-                ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+          target,\n+          multiway_merge_exact_splitting</* stable = */ false,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge\n         </* stable = */ false, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          target, *(seqs_begin->second), length, comp);\n }\n \n // public interface\n@@ -1903,10 +1928,11 @@ template<\n   , typename _DifferenceTp\n   , typename Comparator>\n RandomAccessIteratorOut\n-stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length)\n+    , _DifferenceTp length, Comparator comp\n+    , sampling_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1925,21 +1951,54 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n           && ((sequence_index_t)length >=\n             __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n       return parallel_multiway_merge\n-        </* stable = */ true, /* sentinels = */ true>(\n-          seqs_begin, seqs_end,\n-          target, comp,\n-          multiway_merge_sampling_splitting\n-            </* stable = */ true,\n-              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-                ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+        </* stable = */ false, /* sentinels = */ true>\n+          (seqs_begin, seqs_end, target,\n+          multiway_merge_sampling_splitting</* stable = */ false,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge\n-        </* stable = */ true, /* sentinels = */ true>(\n+        </* stable = */false, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          target, *(seqs_begin->second), length, comp);\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , parallel_tag tag = parallel_tag(0))\n+{\n+  return multiway_merge_sentinels(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , default_parallel_tag tag)\n+{\n+  return multiway_merge_sentinels(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n }\n \n+// stable_multiway_merge_sentinels\n // public interface\n template<\n     typename RandomAccessIteratorPairIterator\n@@ -1950,7 +2009,7 @@ RandomAccessIteratorOut\n stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n+    , _DifferenceTp length, Comparator comp\n     , __gnu_parallel::sequential_tag)\n {\n     typedef _DifferenceTp difference_type;\n@@ -1963,7 +2022,7 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ true, /* sentinels = */ true>\n-        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n+        (seqs_begin, seqs_end, target, *(seqs_begin->second), length, comp);\n }\n \n // public interface\n@@ -1976,8 +2035,8 @@ RandomAccessIteratorOut\n stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     , RandomAccessIteratorPairIterator seqs_end\n     , RandomAccessIteratorOut target\n-    , Comparator comp, _DifferenceTp length\n-    , __gnu_parallel::exact_tag)\n+    , _DifferenceTp length, Comparator comp\n+    , __gnu_parallel::exact_tag tag)\n {\n     typedef _DifferenceTp difference_type;\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n@@ -1998,17 +2057,93 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n       return parallel_multiway_merge\n         </* stable = */ true, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp, \n-          multiway_merge_exact_splitting\n-            </* stable = */ true,\n-              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n-                ::value_type*, Comparator, _DifferenceTp>,\n-          static_cast<difference_type>(length));\n+          target,\n+          multiway_merge_exact_splitting</* stable = */ true,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n     else\n       return sequential_multiway_merge\n+        </* stable = */ true, /* sentinels = */ true>(\n+          seqs_begin, seqs_end, target, *(seqs_begin->second), length, comp);\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , sampling_tag tag)\n+{\n+    typedef _DifferenceTp difference_type;\n+    _GLIBCXX_CALL(seqs_end - seqs_begin)\n+\n+    // catch special case: no sequences\n+    if (seqs_begin == seqs_end)\n+      return target;\n+\n+    // Execute merge; maybe parallel, depending on the number of merged\n+    // elements and the number of sequences and global thresholds in\n+    // Settings.\n+    if ((seqs_end - seqs_begin > 1) &&\n+          _GLIBCXX_PARALLEL_CONDITION(\n+          ((seqs_end - seqs_begin) >=\n+            __gnu_parallel::_Settings::get().multiway_merge_minimal_k)\n+          && ((sequence_index_t)length >=\n+            __gnu_parallel::_Settings::get().multiway_merge_minimal_n)))\n+      return parallel_multiway_merge\n         </* stable = */ true, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, *(seqs_begin->second), comp, length);\n+          target,\n+          multiway_merge_sampling_splitting</* stable = */ true,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n+          static_cast<difference_type>(length), comp, tag.get_num_threads());\n+    else\n+      return sequential_multiway_merge\n+        </* stable = */ true, /* sentinels = */ true>(\n+          seqs_begin, seqs_end,\n+          target, *(seqs_begin->second), length, comp);\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , parallel_tag tag = parallel_tag(0))\n+{\n+  return stable_multiway_merge_sentinels(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n+}\n+\n+// public interface\n+template<\n+    typename RandomAccessIteratorPairIterator\n+  , typename RandomAccessIteratorOut\n+  , typename _DifferenceTp\n+  , typename Comparator>\n+RandomAccessIteratorOut\n+stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n+    , RandomAccessIteratorPairIterator seqs_end\n+    , RandomAccessIteratorOut target\n+    , _DifferenceTp length, Comparator comp\n+    , default_parallel_tag tag)\n+{\n+  return stable_multiway_merge_sentinels(seqs_begin, seqs_end, target, length, comp,\n+                         exact_tag(tag.get_num_threads()));\n }\n \n }; // namespace __gnu_parallel"}, {"sha": "9d9733ad05f5f7c3c8bc41492ab5575f5cdadd3b", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=36fc59580b92ea18a02ef2e1623b96103608f774", "patch": "@@ -289,8 +289,8 @@ template<typename SeqRandomAccessIterator, typename RandomAccessIterator,\n                       Comparator& comp,\n                       DiffType length_am) const\n     {\n-      stable_multiway_merge(seqs_begin, seqs_end, target, comp,\n-                       length_am, sequential_tag());\n+      stable_multiway_merge(seqs_begin, seqs_end, target, length_am, comp,\n+                       sequential_tag());\n     }\n   };\n \n@@ -306,8 +306,8 @@ template<typename SeqRandomAccessIterator, typename RandomAccessIterator,\n                       Comparator& comp,\n                       DiffType length_am) const\n     {\n-      multiway_merge(seqs_begin, seqs_end, target, comp,\n-                       length_am, sequential_tag());\n+      multiway_merge(seqs_begin, seqs_end, target, length_am, comp,\n+                       sequential_tag());\n     }\n   };\n "}, {"sha": "0ca0994e3abce13fdfa30e0daaa6e029bad318a5", "filename": "libstdc++-v3/include/parallel/tags.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc59580b92ea18a02ef2e1623b96103608f774/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h?ref=36fc59580b92ea18a02ef2e1623b96103608f774", "patch": "@@ -47,9 +47,6 @@ namespace __gnu_parallel\n   /** @brief Forces sequential execution at compile time. */\n   struct sequential_tag { };\n \n-  /** @brief Forces exact splitting in multiway merge at compile time. */\n-  struct exact_tag { };\n-\n   /** @brief Recommends parallel execution at compile time,\n    *  optionally using a user-specified number of threads. */\n   struct parallel_tag\n@@ -119,6 +116,25 @@ namespace __gnu_parallel\n   struct find_tag { };\n \n \n+  /** @brief Forces parallel merging\n+   *  with exact splitting, at compile time. */\n+  struct exact_tag : public parallel_tag\n+  {\n+      exact_tag() { }\n+      exact_tag(thread_index_t num_threads)\n+          : parallel_tag(num_threads) { }\n+  };\n+\n+  /** @brief Forces parallel merging\n+   *  with exact splitting, at compile time. */\n+  struct sampling_tag : public parallel_tag\n+  {\n+      sampling_tag() { }\n+      sampling_tag(thread_index_t num_threads)\n+          : parallel_tag(num_threads) { }\n+  };\n+\n+\n   /** @brief Forces parallel sorting using multiway mergesort\n    *  at compile time. */\n   struct multiway_mergesort_tag : public parallel_tag"}]}