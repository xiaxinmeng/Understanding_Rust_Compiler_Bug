{"sha": "3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwM2ExYTk1OTdkZDZmODUzYzI1YWZmMjI5MGExNmQzYTljOWQwMA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2015-07-30T21:25:29Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2015-07-30T21:25:29Z"}, "message": "Use lowpart_subreg instead of simplify_gen_subreg\n\nFrom-SVN: r226417", "tree": {"sha": "7d30b2fde4a0cf5ac3d5774d1ff65ab67f3ba134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d30b2fde4a0cf5ac3d5774d1ff65ab67f3ba134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/comments", "author": null, "committer": null, "parents": [{"sha": "e8fa381741bd504e42221463d18d0dae9eae4832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fa381741bd504e42221463d18d0dae9eae4832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fa381741bd504e42221463d18d0dae9eae4832"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "1eca23df1e8b2c0ef2eada06f240d5ad73e5028c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -1,3 +1,16 @@\n+2015-07-30  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* rtl.h (lowpart_subreg): Move in file.\n+\t* loop-iv.c (lowpart_subreg): Move to...\n+\t* simplify-rtx.c (lowpart_subreg): ...here.\n+\t  (simplify_binary_operation_1): Use lowpart_subreg instead of\n+\t  simplify_gen_subreg.\n+\t* expr.c (expand_expr_real_2): Ditto.\n+\t* emit-rtl.c (gen_lowpart_common): Ditto.\n+\t* combine.c (gen_lowpart_for_combine): Ditto.\n+\t* cfgexpand.c (convert_debug_memory_address, expand_debug_expr,\n+\t  expand_debug_source_expr): Ditto.\n+\n 2015-07-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (HAVE_atomic_clear, gen_atomic_clear): Delete."}, {"sha": "8ff79abf6910f194356bb2900d386c2f7c93f9ed", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -3632,9 +3632,7 @@ convert_debug_memory_address (machine_mode mode, rtx x,\n     return x;\n \n   if (GET_MODE_PRECISION (mode) < GET_MODE_PRECISION (xmode))\n-    x = simplify_gen_subreg (mode, x, xmode,\n-\t\t\t     subreg_lowpart_offset\n-\t\t\t     (mode, xmode));\n+    x = lowpart_subreg (mode, x, xmode);\n   else if (POINTERS_EXTEND_UNSIGNED > 0)\n     x = gen_rtx_ZERO_EXTEND (mode, x);\n   else if (!POINTERS_EXTEND_UNSIGNED)\n@@ -3850,9 +3848,7 @@ expand_debug_expr (tree exp)\n \t      if (SCALAR_INT_MODE_P (opmode)\n \t\t  && (GET_MODE_PRECISION (opmode)\n \t\t      < GET_MODE_PRECISION (inner_mode)))\n-\t\top1 = simplify_gen_subreg (opmode, op1, inner_mode,\n-\t\t\t\t\t   subreg_lowpart_offset (opmode,\n-\t\t\t\t\t\t\t\t  inner_mode));\n+\t\top1 = lowpart_subreg (opmode, op1, inner_mode);\n \t    }\n \t  break;\n \tdefault:\n@@ -4011,9 +4007,7 @@ expand_debug_expr (tree exp)\n \t  }\n \telse if (CONSTANT_P (op0)\n \t\t || GET_MODE_PRECISION (mode) <= GET_MODE_PRECISION (inner_mode))\n-\t  op0 = simplify_gen_subreg (mode, op0, inner_mode,\n-\t\t\t\t     subreg_lowpart_offset (mode,\n-\t\t\t\t\t\t\t    inner_mode));\n+\t  op0 = lowpart_subreg (mode, op0, inner_mode);\n \telse if (UNARY_CLASS_P (exp)\n \t\t ? TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)))\n \t\t : unsignedp)\n@@ -4141,9 +4135,7 @@ expand_debug_expr (tree exp)\n \t      offmode = TYPE_MODE (TREE_TYPE (offset));\n \n \t    if (addrmode != offmode)\n-\t      op1 = simplify_gen_subreg (addrmode, op1, offmode,\n-\t\t\t\t\t subreg_lowpart_offset (addrmode,\n-\t\t\t\t\t\t\t\toffmode));\n+\t      op1 = lowpart_subreg (addrmode, op1, offmode);\n \n \t    /* Don't use offset_address here, we don't need a\n \t       recognizable address, and we don't want to generate\n@@ -4868,8 +4860,7 @@ expand_debug_source_expr (tree exp)\n     }\n   else if (CONSTANT_P (op0)\n \t   || GET_MODE_BITSIZE (mode) <= GET_MODE_BITSIZE (inner_mode))\n-    op0 = simplify_gen_subreg (mode, op0, inner_mode,\n-\t\t\t       subreg_lowpart_offset (mode, inner_mode));\n+    op0 = lowpart_subreg (mode, op0, inner_mode);\n   else if (TYPE_UNSIGNED (TREE_TYPE (exp)))\n     op0 = simplify_gen_unary (ZERO_EXTEND, mode, op0, inner_mode);\n   else"}, {"sha": "4a92f55c8a0bfb44bb735fb5e1ab73aa7d80a6fe", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -11194,18 +11194,16 @@ gen_lowpart_for_combine (machine_mode omode, rtx x)\n      include an explicit SUBREG or we may simplify it further in combine.  */\n   else\n     {\n-      int offset = 0;\n       rtx res;\n \n-      offset = subreg_lowpart_offset (omode, imode);\n       if (imode == VOIDmode)\n \t{\n \t  imode = int_mode_for_mode (omode);\n \t  x = gen_lowpart_common (imode, x);\n \t  if (x == NULL)\n \t    goto fail;\n \t}\n-      res = simplify_gen_subreg (omode, x, imode, offset);\n+      res = lowpart_subreg (omode, x, imode);\n       if (res)\n \treturn res;\n     }"}, {"sha": "d211e6b0ce56a70cbc3d7782009a5924e8dc433b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -1377,7 +1377,6 @@ gen_lowpart_common (machine_mode mode, rtx x)\n {\n   int msize = GET_MODE_SIZE (mode);\n   int xsize;\n-  int offset = 0;\n   machine_mode innermode;\n \n   /* Unfortunately, this routine doesn't take a parameter for the mode of X,\n@@ -1405,8 +1404,6 @@ gen_lowpart_common (machine_mode mode, rtx x)\n   if (SCALAR_FLOAT_MODE_P (mode) && msize > xsize)\n     return 0;\n \n-  offset = subreg_lowpart_offset (mode, innermode);\n-\n   if ((GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND)\n       && (GET_MODE_CLASS (mode) == MODE_INT\n \t  || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT))\n@@ -1429,7 +1426,7 @@ gen_lowpart_common (machine_mode mode, rtx x)\n   else if (GET_CODE (x) == SUBREG || REG_P (x)\n \t   || GET_CODE (x) == CONCAT || GET_CODE (x) == CONST_VECTOR\n \t   || CONST_DOUBLE_AS_FLOAT_P (x) || CONST_SCALAR_INT_P (x))\n-    return simplify_gen_subreg (mode, x, innermode, offset);\n+    return lowpart_subreg (mode, x, innermode);\n \n   /* Otherwise, we can't do this.  */\n   return 0;"}, {"sha": "46084c2efec0393bf589614f4dadbf241d0d3557", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -8137,9 +8137,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t    inner_mode = TYPE_MODE (inner_type);\n \n \t  if (modifier == EXPAND_INITIALIZER)\n-\t    op0 = simplify_gen_subreg (mode, op0, inner_mode,\n-\t\t\t\t       subreg_lowpart_offset (mode,\n-\t\t\t\t\t\t\t      inner_mode));\n+\t    op0 = lowpart_subreg (mode, op0, inner_mode);\n \t  else\n \t    op0=  convert_modes (mode, inner_mode, op0,\n \t\t\t\t TYPE_UNSIGNED (inner_type));"}, {"sha": "6e9cc8cf09ef09c75030d092200edea4545aa290", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -205,17 +205,6 @@ dump_iv_info (FILE *file, struct rtx_iv *iv)\n     fprintf (file, \" (first special)\");\n }\n \n-/* Generates a subreg to get the least significant part of EXPR (in mode\n-   INNER_MODE) to OUTER_MODE.  */\n-\n-rtx\n-lowpart_subreg (machine_mode outer_mode, rtx expr,\n-\t\tmachine_mode inner_mode)\n-{\n-  return simplify_gen_subreg (outer_mode, expr, inner_mode,\n-\t\t\t      subreg_lowpart_offset (outer_mode, inner_mode));\n-}\n-\n static void\n check_iv_ref_table_size (void)\n {"}, {"sha": "5e0239740a5ee207148db9a7e8b31afb95388bd9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -2731,10 +2731,6 @@ extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t       machine_mode);\n #endif\n \n-/* In loop-iv.c  */\n-\n-extern rtx lowpart_subreg (machine_mode, rtx, machine_mode);\n-\n /* In varasm.c  */\n extern rtx force_const_mem (machine_mode, rtx);\n \n@@ -2866,6 +2862,7 @@ extern rtx simplify_subreg (machine_mode, rtx, machine_mode,\n \t\t\t    unsigned int);\n extern rtx simplify_gen_subreg (machine_mode, rtx, machine_mode,\n \t\t\t\tunsigned int);\n+extern rtx lowpart_subreg (machine_mode, rtx, machine_mode);\n extern rtx simplify_replace_fn_rtx (rtx, const_rtx,\n \t\t\t\t    rtx (*fn) (rtx, const_rtx, void *), void *);\n extern rtx simplify_replace_rtx (rtx, const_rtx, rtx);"}, {"sha": "ad003d83cd5582b9c8c81231658ccdefd7ce7424", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403a1a9597dd6f853c25aff2290a16d3a9c9d00/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3403a1a9597dd6f853c25aff2290a16d3a9c9d00", "patch": "@@ -3224,9 +3224,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t\t\t     GET_MODE (SUBREG_REG (op0)),\n \t\t\t\t     XEXP (SUBREG_REG (op0), 0),\n \t\t\t\t     tmp);\n-\t  return simplify_gen_subreg (mode, tmp, inner_mode,\n-\t\t\t\t      subreg_lowpart_offset (mode,\n-\t\t\t\t\t\t\t     inner_mode));\n+\t  return lowpart_subreg (mode, tmp, inner_mode);\n \t}\n     canonicalize_shift:\n       if (SHIFT_COUNT_TRUNCATED && CONST_INT_P (op1))\n@@ -6027,6 +6025,17 @@ simplify_gen_subreg (machine_mode outermode, rtx op,\n   return NULL_RTX;\n }\n \n+/* Generates a subreg to get the least significant part of EXPR (in mode\n+   INNER_MODE) to OUTER_MODE.  */\n+\n+rtx\n+lowpart_subreg (machine_mode outer_mode, rtx expr,\n+\t\t\t     machine_mode inner_mode)\n+{\n+  return simplify_gen_subreg (outer_mode, expr, inner_mode,\n+\t\t\t      subreg_lowpart_offset (outer_mode, inner_mode));\n+}\n+\n /* Simplify X, an rtx expression.\n \n    Return the simplified expression or NULL if no simplifications"}]}