{"sha": "6a9547f3ca6c48f116478169d5fc62165dde7f43", "node_id": "C_kwDOANBUbNoAKDZhOTU0N2YzY2E2YzQ4ZjExNjQ3ODE2OWQ1ZmM2MjE2NWRkZTdmNDM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-13T15:34:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-14T10:58:39Z"}, "message": "libstdc++: Improve diagnostics for invalid std::format calls\n\nAdd a static_assert and a comment so that calling std::format for\nunformattable argument types will now show:\n\n/home/jwakely/gcc/13/include/c++/13.0.1/format:3563:22: error: static assertion failed: std::formatter must be specialized for each format arg\n 3563 |       static_assert((is_default_constructible_v<formatter<_Args, _CharT>> && ...),\n      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nand:\n\n  140 |       formatter() = delete; // No std::formatter specialization for this type.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/format (formatter): Add comment to deleted default\n\tconstructor of primary template.\n\t(_Checking_scanner): Add static_assert.", "tree": {"sha": "7b1cabf4790f70ec44103b969be04e790d8de9ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1cabf4790f70ec44103b969be04e790d8de9ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9547f3ca6c48f116478169d5fc62165dde7f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9547f3ca6c48f116478169d5fc62165dde7f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9547f3ca6c48f116478169d5fc62165dde7f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9547f3ca6c48f116478169d5fc62165dde7f43/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e85485fbf042abccee5c0a9eb499da386c8db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e85485fbf042abccee5c0a9eb499da386c8db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e85485fbf042abccee5c0a9eb499da386c8db3"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "e4ef4f9b6d93535ebcdef6e6c3a2f852ee410d49", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9547f3ca6c48f116478169d5fc62165dde7f43/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9547f3ca6c48f116478169d5fc62165dde7f43/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=6a9547f3ca6c48f116478169d5fc62165dde7f43", "patch": "@@ -137,7 +137,7 @@ namespace __format\n   template<typename _Tp, typename _CharT = char>\n     struct formatter\n     {\n-      formatter() = delete;\n+      formatter() = delete; // No std::formatter specialization for this type.\n       formatter(const formatter&) = delete;\n       formatter& operator=(const formatter&) = delete;\n     };\n@@ -3560,6 +3560,10 @@ namespace __format\n   template<typename _CharT, typename... _Args>\n     class _Checking_scanner : public _Scanner<_CharT>\n     {\n+      static_assert(\n+\t(is_default_constructible_v<formatter<_Args, _CharT>> && ...),\n+\t\"std::formatter must be specialized for each type being formatted\");\n+\n     public:\n       constexpr\n       _Checking_scanner(basic_string_view<_CharT> __str)\n@@ -3581,17 +3585,17 @@ namespace __format\n \t__builtin_unreachable();\n       }\n \n-      template<typename _Head, typename... _Tail>\n+      template<typename _Tp, typename... _OtherArgs>\n \tconstexpr void\n \t_M_parse_format_spec(size_t __id)\n \t{\n \t  if (__id == 0)\n \t    {\n-\t      formatter<_Head, _CharT> __f;\n+\t      formatter<_Tp, _CharT> __f;\n \t      this->_M_pc.advance_to(__f.parse(this->_M_pc));\n \t    }\n-\t  else if constexpr (sizeof...(_Tail) != 0)\n-\t    _M_parse_format_spec<_Tail...>(__id - 1);\n+\t  else if constexpr (sizeof...(_OtherArgs) != 0)\n+\t    _M_parse_format_spec<_OtherArgs...>(__id - 1);\n \t  else\n \t    __builtin_unreachable();\n \t}"}]}