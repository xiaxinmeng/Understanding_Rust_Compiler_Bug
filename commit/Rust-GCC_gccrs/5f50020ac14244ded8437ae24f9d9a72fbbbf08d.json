{"sha": "5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1MDAyMGFjMTQyNDRkZWQ4NDM3YWUyNGY5ZDlhNzJmYmJiZjA4ZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-02-24T15:57:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-24T15:57:59Z"}, "message": "sinfo.ads, sinfo.adb: New attribute Generalized_Indexing...\n\n2014-02-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb: New attribute Generalized_Indexing, for\n\tindexed_components that are instances of Ada 2012 container\n\tindexing operations. Analysis and resolution of such nodes\n\tis performed on the attribute, and the original source is\n\tpreserved for ASIS operations. If expansion is enabled, the\n\tindexed component is replaced by the value of this attribute,\n\twhich is in a call to an Indexing aspect, in most case wrapped\n\tin a dereference operation.\n\t* sem_ch4.adb (Analyze_Indexed_Component): Create\n\tGeneralized_Indexing attribute when appropriate.\n\t(Analyze_Call): If prefix is not overloadable and has an indexing\n\taspect, transform into an indexed component so it can be analyzed\n\tas a potential container indexing.\n\t(Analyze_Expression): If node is an indexed component with a\n\tGeneralized_ Indexing, do not re-analyze.\n\t* sem_res.adb (Resolve_Generalized_Indexing): Complete resolution\n\tof an indexed_component that has been transformed into a container\n\tindexing operation.\n\t(Resolve_Indexed_Component): Call the above when required.\n\t(Resolve): Do not insert an explicit dereference operation on\n\tan indexed_component whose type has an implicit dereference:\n\tthe operation is inserted when resolving the related\n\tGeneralized_Indexing.\n\nFrom-SVN: r208074", "tree": {"sha": "46a167c9b553903043944a624f2a6452327543cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a167c9b553903043944a624f2a6452327543cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec4e8e9a4dbe96e2599f2e2d5ba90b0f1f01e332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4e8e9a4dbe96e2599f2e2d5ba90b0f1f01e332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4e8e9a4dbe96e2599f2e2d5ba90b0f1f01e332"}], "stats": {"total": 207, "additions": 185, "deletions": 22}, "files": [{"sha": "9f4ee5e32e47df7d5c1cf38abae698bb900f44f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "patch": "@@ -1,3 +1,29 @@\n+2014-02-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb: New attribute Generalized_Indexing, for\n+\tindexed_components that are instances of Ada 2012 container\n+\tindexing operations. Analysis and resolution of such nodes\n+\tis performed on the attribute, and the original source is\n+\tpreserved for ASIS operations. If expansion is enabled, the\n+\tindexed component is replaced by the value of this attribute,\n+\twhich is in a call to an Indexing aspect, in most case wrapped\n+\tin a dereference operation.\n+\t* sem_ch4.adb (Analyze_Indexed_Component): Create\n+\tGeneralized_Indexing attribute when appropriate.\n+\t(Analyze_Call): If prefix is not overloadable and has an indexing\n+\taspect, transform into an indexed component so it can be analyzed\n+\tas a potential container indexing.\n+\t(Analyze_Expression): If node is an indexed component with a\n+\tGeneralized_ Indexing, do not re-analyze.\n+\t* sem_res.adb (Resolve_Generalized_Indexing): Complete resolution\n+\tof an indexed_component that has been transformed into a container\n+\tindexing operation.\n+\t(Resolve_Indexed_Component): Call the above when required.\n+\t(Resolve): Do not insert an explicit dereference operation on\n+\tan indexed_component whose type has an implicit dereference:\n+\tthe operation is inserted when resolving the related\n+\tGeneralized_Indexing.\n+\n 2014-02-24  Olivier Ramonat  <ramonat@adacore.com>\n \n \t* gnat_rm.texi, gnat_ugn.texi: Replace Ada Compiler by Ada Development"}, {"sha": "cab0aa3547b00137547779cd4fbc65b70617d0ac", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 69, "deletions": 20, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "patch": "@@ -1089,10 +1089,29 @@ package body Sem_Ch4 is\n          else\n             Nam_Ent := Entity (Nam);\n \n-            --  If no interpretations, give error message\n+            --  If not overloadable, this may be a generalized indexing\n+            --  operation with named associations. Rewrite again as an\n+            --  indexed component and analyze as container indexing.\n \n             if not Is_Overloadable (Nam_Ent) then\n-               No_Interpretation;\n+               if Present (\n+                 Find_Value_Of_Aspect\n+                    (Etype (Nam_Ent), Aspect_Constant_Indexing))\n+               then\n+                  Replace (N,\n+                    Make_Indexed_Component (Sloc (N),\n+                      Prefix => Nam,\n+                      Expressions => Parameter_Associations (N)));\n+\n+                  if Try_Container_Indexing (N, Nam, Expressions (N)) then\n+                     return;\n+                  else\n+                     No_Interpretation;\n+                  end if;\n+\n+               else\n+                  No_Interpretation;\n+               end if;\n                return;\n             end if;\n          end if;\n@@ -1991,8 +2010,19 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Expression (N : Node_Id) is\n    begin\n-      Analyze (N);\n-      Check_Parameterless_Call (N);\n+\n+      --  If the expression is an indexed component that will be rewritten\n+      --  as a container indexing, it has already been analyzed.\n+\n+      if Nkind (N) = N_Indexed_Component\n+        and then Present (Generalized_Indexing (N))\n+      then\n+         null;\n+\n+      else\n+         Analyze (N);\n+         Check_Parameterless_Call (N);\n+      end if;\n    end Analyze_Expression;\n \n    -------------------------------------\n@@ -6993,8 +7023,15 @@ package body Sem_Ch4 is\n \n       Assoc := New_List (Relocate_Node (Prefix));\n \n-      --  A generalized iterator may have nore than one index expression, so\n+      --  A generalized indexing may have nore than one index expression, so\n       --  transfer all of them to the argument list to be used in the call.\n+      --  Note that there may be named associations, in which case the node\n+      --  was rewritten earlier as a call, and has been transformed back into\n+      --  an indexed expression to share the following processing.\n+      --  The generalized indexing node is the one on which analysis and\n+      --  resolution take place. Before expansion the original node is replaced\n+      --  with the generalized indexing node, which is a call, possibly with\n+      --  a dereference operation.\n \n       declare\n          Arg : Node_Id;\n@@ -7012,21 +7049,31 @@ package body Sem_Ch4 is\n            Make_Function_Call (Loc,\n              Name                   => New_Occurrence_Of (Func, Loc),\n              Parameter_Associations => Assoc);\n-         Rewrite (N, Indexing);\n-         Analyze (N);\n+         Set_Parent (Indexing, Parent (N));\n+         Set_Generalized_Indexing (N, Indexing);\n+         Analyze (Indexing);\n+         Set_Etype (N, Etype (Indexing));\n \n          --  If the return type of the indexing function is a reference type,\n          --  add the dereference as a possible interpretation. Note that the\n          --  indexing aspect may be a function that returns the element type\n-         --  with no intervening implicit dereference.\n+         --  with no intervening implicit dereference, and that the reference\n+         --  discriminant is not the first discriminant.\n \n          if Has_Discriminants (Etype (Func)) then\n             Disc := First_Discriminant (Etype (Func));\n             while Present (Disc) loop\n-               if Has_Implicit_Dereference (Disc) then\n-                  Add_One_Interp (N, Disc, Designated_Type (Etype (Disc)));\n-                  exit;\n-               end if;\n+               declare\n+                  Elmt_Type : Entity_Id;\n+\n+               begin\n+                  if Has_Implicit_Dereference (Disc) then\n+                     Elmt_Type := Designated_Type (Etype (Disc));\n+                     Add_One_Interp (Indexing, Disc, Elmt_Type);\n+                     Add_One_Interp (N, Disc, Elmt_Type);\n+                     exit;\n+                  end if;\n+               end;\n \n                Next_Discriminant (Disc);\n             end loop;\n@@ -7038,7 +7085,8 @@ package body Sem_Ch4 is\n              Name => Make_Identifier (Loc, Chars (Func_Name)),\n              Parameter_Associations => Assoc);\n \n-         Rewrite (N, Indexing);\n+         Set_Parent (Indexing, Parent (N));\n+         Set_Generalized_Indexing (N, Indexing);\n \n          declare\n             I       : Interp_Index;\n@@ -7047,19 +7095,22 @@ package body Sem_Ch4 is\n \n          begin\n             Get_First_Interp (Func_Name, I, It);\n-            Set_Etype (N, Any_Type);\n+            Set_Etype (Indexing, Any_Type);\n             while Present (It.Nam) loop\n-               Analyze_One_Call (N, It.Nam, False, Success);\n+               Analyze_One_Call (Indexing, It.Nam, False, Success);\n                if Success then\n-                  Set_Etype (Name (N), It.Typ);\n-                  Set_Entity (Name (N), It.Nam);\n+                  Set_Etype (Name (Indexing), It.Typ);\n+                  Set_Entity (Name (Indexing), It.Nam);\n+                  Set_Etype (N, Etype (Indexing));\n \n                   --  Add implicit dereference interpretation\n \n                   if Has_Discriminants (Etype (It.Nam)) then\n                      Disc := First_Discriminant (Etype (It.Nam));\n                      while Present (Disc) loop\n                         if Has_Implicit_Dereference (Disc) then\n+                           Add_One_Interp\n+                             (Indexing, Disc, Designated_Type (Etype (Disc)));\n                            Add_One_Interp\n                              (N, Disc, Designated_Type (Etype (Disc)));\n                            exit;\n@@ -7076,12 +7127,10 @@ package body Sem_Ch4 is\n          end;\n       end if;\n \n-      if Etype (N) = Any_Type then\n+      if Etype (Indexing) = Any_Type then\n          Error_Msg_NE\n            (\"container cannot be indexed with&\", N, Etype (First (Exprs)));\n          Rewrite (N, New_Occurrence_Of (Any_Id, Loc));\n-      else\n-         Analyze (N);\n       end if;\n \n       return True;"}, {"sha": "fa365214ee12c0f171a06bff3f93b1650757e1f8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "patch": "@@ -174,6 +174,7 @@ package body Sem_Res is\n    procedure Resolve_Explicit_Dereference      (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Expression_With_Actions   (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_If_Expression             (N : Node_Id; Typ : Entity_Id);\n+   procedure Resolve_Generalized_Indexing      (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Indexed_Component         (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Integer_Literal           (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Logical_Op                (N : Node_Id; Typ : Entity_Id);\n@@ -2375,7 +2376,15 @@ package body Sem_Res is\n                  and then Ekind (It.Nam) = E_Discriminant\n                  and then Has_Implicit_Dereference (It.Nam)\n                then\n-                  Build_Explicit_Dereference (N, It.Nam);\n+                  --  If the node is a general indexing, the dereference is\n+                  --  is inserted when resolving the rewritten form, else\n+                  --  insert it now.\n+\n+                  if Nkind (N) /= N_Indexed_Component\n+                    or else No (Generalized_Indexing (N))\n+                  then\n+                     Build_Explicit_Dereference (N, It.Nam);\n+                  end if;\n \n                --  For an explicit dereference, attribute reference, range,\n                --  short-circuit form (which is not an operator node), or call\n@@ -7520,6 +7529,47 @@ package body Sem_Res is\n       end if;\n    end Resolve_Expression_With_Actions;\n \n+   ----------------------------------\n+   -- Resolve_Generalized_Indexing --\n+   ----------------------------------\n+\n+   procedure Resolve_Generalized_Indexing (N : Node_Id; Typ : Entity_Id) is\n+      Indexing : constant Node_Id := Generalized_Indexing (N);\n+      Call     : Node_Id;\n+      Indices  : List_Id;\n+      Pref     : Node_Id;\n+\n+   begin\n+\n+      --  In ASIS mode, propagate the information about the indices back to\n+      --  to the original indexing node. The generalized indexing is either\n+      --  a function call, or a dereference of one. The actuals include the\n+      --  prefix of the original node, which is the container expression.\n+\n+      if ASIS_Mode then\n+         Resolve (Indexing, Typ);\n+         Set_Etype  (N, Etype (Indexing));\n+         Set_Is_Overloaded (N, False);\n+         Call := Indexing;\n+         while Nkind_In (Call,\n+            N_Explicit_Dereference, N_Selected_Component)\n+         loop\n+            Call := Prefix (Call);\n+         end loop;\n+\n+         if Nkind (Call) = N_Function_Call then\n+            Indices := Parameter_Associations (Call);\n+            Pref := Remove_Head (Indices);\n+            Set_Expressions (N, Indices);\n+            Set_Prefix (N, Pref);\n+         end if;\n+\n+      else\n+         Rewrite (N, Indexing);\n+         Resolve (N, Typ);\n+      end if;\n+   end Resolve_Generalized_Indexing;\n+\n    ---------------------------\n    -- Resolve_If_Expression --\n    ---------------------------\n@@ -7591,6 +7641,11 @@ package body Sem_Res is\n       Index      : Node_Id;\n \n    begin\n+      if Present (Generalized_Indexing (N)) then\n+         Resolve_Generalized_Indexing (N, Typ);\n+         return;\n+      end if;\n+\n       if Is_Overloaded (Name) then\n \n          --  Use the context type to select the prefix that yields the correct"}, {"sha": "dbd54bbdf1edb994f422d9e1a3b22fb1cbc4874a", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "patch": "@@ -1399,6 +1399,14 @@ package body Sinfo is\n       return Flag6 (N);\n    end From_Default;\n \n+   function Generalized_Indexing\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Indexed_Component);\n+      return Node4 (N);\n+   end Generalized_Indexing;\n+\n    function Generic_Associations\n       (N : Node_Id) return List_Id is\n    begin\n@@ -4531,6 +4539,14 @@ package body Sinfo is\n       Set_Flag6 (N, Val);\n    end Set_From_Default;\n \n+   procedure Set_Generalized_Indexing\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Indexed_Component);\n+      Set_Node4 (N, Val);\n+   end Set_Generalized_Indexing;\n+\n    procedure Set_Generic_Associations\n       (N : Node_Id; Val : List_Id) is\n    begin"}, {"sha": "e115e7ad707a5baf3628ad4a28499430d5809f0a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f50020ac14244ded8437ae24f9d9a72fbbbf08d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=5f50020ac14244ded8437ae24f9d9a72fbbbf08d", "patch": "@@ -1277,6 +1277,15 @@ package Sinfo is\n    --    declaration is treated as an implicit reference to the formal in the\n    --    ali file.\n \n+   --  Generalized_Indexing (Node4-Sem)\n+   --  Generalized_Indexing is set in Indexed_Component nodes that are Ada 2012\n+   --  container indexing operations. The value of the attribute is a function\n+   --  call (possibly dereferenced) that corresponds to the proper expansion\n+   --  of the source indexing operation. Before expansion, the source node\n+   --  is rewritten as the resolved generalized indexing. In ASIS mode, the\n+   --  expansion does not take place, so that the source is preserved and\n+   --  properly annotated with types.\n+\n    --  Generic_Parent (Node5-Sem)\n    --    Generic_Parent is defined on declaration nodes that are instances. The\n    --    value of Generic_Parent is the generic entity from which the instance\n@@ -3470,6 +3479,7 @@ package Sinfo is\n       --  Sloc contains a copy of the Sloc value of the Prefix\n       --  Prefix (Node3)\n       --  Expressions (List1)\n+      --  Generalized_Indexing (Node4-Sem)\n       --  Atomic_Sync_Required (Flag14-Sem)\n       --  plus fields for expression\n \n@@ -8912,6 +8922,8 @@ package Sinfo is\n    function From_Default\n      (N : Node_Id) return Boolean;    -- Flag6\n \n+   function Generalized_Indexing\n+     (N : Node_Id) return Node_Id;    -- Node4\n    function Generic_Associations\n      (N : Node_Id) return List_Id;    -- List3\n \n@@ -9908,6 +9920,9 @@ package Sinfo is\n    procedure Set_From_Default\n      (N : Node_Id; Val : Boolean := True);    -- Flag6\n \n+   procedure Set_Generalized_Indexing\n+     (N : Node_Id; Val : Node_Id);            -- Node4\n+\n    procedure Set_Generic_Associations\n      (N : Node_Id; Val : List_Id);            -- List3\n \n@@ -10918,7 +10933,7 @@ package Sinfo is\n        (1 => True,    --  Expressions (List1)\n         2 => False,   --  unused\n         3 => True,    --  Prefix (Node3)\n-        4 => False,   --  unused\n+        4 => False,    --  Generalized_Indexing (Node4-Sem)\n         5 => False),  --  Etype (Node5-Sem)\n \n      N_Slice =>\n@@ -12372,6 +12387,7 @@ package Sinfo is\n    pragma Inline (From_At_End);\n    pragma Inline (From_At_Mod);\n    pragma Inline (From_Default);\n+   pragma Inline (Generalized_Indexing);\n    pragma Inline (Generic_Associations);\n    pragma Inline (Generic_Formal_Declarations);\n    pragma Inline (Generic_Parent);\n@@ -12701,6 +12717,7 @@ package Sinfo is\n    pragma Inline (Set_From_At_End);\n    pragma Inline (Set_From_At_Mod);\n    pragma Inline (Set_From_Default);\n+   pragma Inline (Set_Generalized_Indexing);\n    pragma Inline (Set_Generic_Associations);\n    pragma Inline (Set_Generic_Formal_Declarations);\n    pragma Inline (Set_Generic_Parent);"}]}