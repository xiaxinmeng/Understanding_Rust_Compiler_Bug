{"sha": "b0463d3db4c5dffff7c0edbbeb48a564a8476787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0NjNkM2RiNGM1ZGZmZmY3YzBlZGJiZWI0OGE1NjRhODQ3Njc4Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-09-16T10:02:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-09-16T10:02:21Z"}, "message": "tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Use offset_int for offset and size computations instead of HOST_WIDE_INT.\n\n\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Use offset_int for\n\toffset and size computations instead of HOST_WIDE_INT.\n\nFrom-SVN: r227819", "tree": {"sha": "ba44d6f800a2e7851ff58596fd8c998a10621a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba44d6f800a2e7851ff58596fd8c998a10621a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0463d3db4c5dffff7c0edbbeb48a564a8476787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0463d3db4c5dffff7c0edbbeb48a564a8476787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0463d3db4c5dffff7c0edbbeb48a564a8476787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0463d3db4c5dffff7c0edbbeb48a564a8476787/comments", "author": null, "committer": null, "parents": [{"sha": "87261d26850e695a2e68f1e7b6115001ee67299e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87261d26850e695a2e68f1e7b6115001ee67299e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87261d26850e695a2e68f1e7b6115001ee67299e"}], "stats": {"total": 115, "additions": 87, "deletions": 28}, "files": [{"sha": "085de31e554bb76892cfdb5727ce4e330b919af4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0463d3db4c5dffff7c0edbbeb48a564a8476787", "patch": "@@ -1,3 +1,8 @@\n+2015-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Use offset_int for\n+\toffset and size computations instead of HOST_WIDE_INT.\n+\n 2015-09-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67442"}, {"sha": "945db718bd04bcbd9fd73329e1927b121a947bed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0463d3db4c5dffff7c0edbbeb48a564a8476787", "patch": "@@ -1,3 +1,7 @@\n+2015-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt49.adb: New test.\n+\n 2015-09-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67442"}, {"sha": "4b91973a19d3472e2299be35af35172eedc27255", "filename": "gcc/testsuite/gnat.dg/opt49.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftestsuite%2Fgnat.dg%2Fopt49.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftestsuite%2Fgnat.dg%2Fopt49.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt49.adb?ref=b0463d3db4c5dffff7c0edbbeb48a564a8476787", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do run }\n+-- { dg-options \"-O -fstack-check\" }\n+\n+procedure Opt49 is\n+\n+   function Ident (I : Integer) return Integer;\n+   pragma No_Inline (Ident);\n+\n+   function Ident (I : Integer) return Integer is\n+   begin\n+     return I;\n+   end;\n+\n+   Int_0 : Integer := Ident (0);\n+   Int_4 : Integer := Ident (4);\n+\n+   A : array (-4 .. Int_4) of Integer;\n+\n+begin\n+   A := (-4 , -3 , -2 , -1 , 100 , 1 , 2 , 3 , 4);\n+   A (-4 .. Int_0) :=  A (Int_0 .. 4); \n+   if A /= (100 ,  1 ,  2 ,  3 ,  4  , 1 , 2 , 3 , 4) then\n+      raise Program_Error;\n+   end if;\n+\n+   A := (-4 , -3 , -2 , -1 , 100 ,  1 ,  2 ,  3 ,  4);\n+   A (Int_0 .. 4) := A (-4 .. Int_0); \n+   if A /= (-4 , -3 , -2 , -1 , -4  , -3 , -2 , -1 , 100) then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "f7904e2d3ce832d62799320d257c40e7f6ac9725", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0463d3db4c5dffff7c0edbbeb48a564a8476787/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b0463d3db4c5dffff7c0edbbeb48a564a8476787", "patch": "@@ -953,9 +953,9 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n   unsigned i;\n   tree base = NULL_TREE;\n   tree *op0_p = &base;\n-  HOST_WIDE_INT offset = 0;\n-  HOST_WIDE_INT max_size;\n-  HOST_WIDE_INT size = -1;\n+  offset_int offset = 0;\n+  offset_int max_size;\n+  offset_int size = -1;\n   tree size_tree = NULL_TREE;\n   alias_set_type base_alias_set = -1;\n \n@@ -971,15 +971,11 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n       if (mode == BLKmode)\n \tsize_tree = TYPE_SIZE (type);\n       else\n-        size = GET_MODE_BITSIZE (mode);\n-    }\n-  if (size_tree != NULL_TREE)\n-    {\n-      if (!tree_fits_uhwi_p (size_tree))\n-\tsize = -1;\n-      else\n-\tsize = tree_to_uhwi (size_tree);\n+\tsize = int (GET_MODE_BITSIZE (mode));\n     }\n+  if (size_tree != NULL_TREE\n+      && TREE_CODE (size_tree) == INTEGER_CST)\n+    size = wi::to_offset (size_tree);\n \n   /* Initially, maxsize is the same as the accessed element size.\n      In the following it will only grow (or become -1).  */\n@@ -1034,7 +1030,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \n \t/* And now the usual component-reference style ops.  */\n \tcase BIT_FIELD_REF:\n-\t  offset += tree_to_shwi (op->op1);\n+\t  offset += wi::to_offset (op->op1);\n \t  break;\n \n \tcase COMPONENT_REF:\n@@ -1043,33 +1039,35 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t    /* We do not have a complete COMPONENT_REF tree here so we\n \t       cannot use component_ref_field_offset.  Do the interesting\n \t       parts manually.  */\n+\t    tree this_offset = DECL_FIELD_OFFSET (field);\n \n-\t    if (op->op1\n-\t\t|| !tree_fits_uhwi_p (DECL_FIELD_OFFSET (field)))\n+\t    if (op->op1 || TREE_CODE (this_offset) != INTEGER_CST)\n \t      max_size = -1;\n \t    else\n \t      {\n-\t\toffset += (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n-\t\t\t   * BITS_PER_UNIT);\n-\t\toffset += TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field));\n+\t\toffset_int woffset = wi::lshift (wi::to_offset (this_offset),\n+\t\t\t\t\t\t LOG2_BITS_PER_UNIT);\n+\t\twoffset += wi::to_offset (DECL_FIELD_BIT_OFFSET (field));\n+\t\toffset += woffset;\n \t      }\n \t    break;\n \t  }\n \n \tcase ARRAY_RANGE_REF:\n \tcase ARRAY_REF:\n \t  /* We recorded the lower bound and the element size.  */\n-\t  if (!tree_fits_shwi_p (op->op0)\n-\t      || !tree_fits_shwi_p (op->op1)\n-\t      || !tree_fits_shwi_p (op->op2))\n+\t  if (TREE_CODE (op->op0) != INTEGER_CST\n+\t      || TREE_CODE (op->op1) != INTEGER_CST\n+\t      || TREE_CODE (op->op2) != INTEGER_CST)\n \t    max_size = -1;\n \t  else\n \t    {\n-\t      HOST_WIDE_INT hindex = tree_to_shwi (op->op0);\n-\t      hindex -= tree_to_shwi (op->op1);\n-\t      hindex *= tree_to_shwi (op->op2);\n-\t      hindex *= BITS_PER_UNIT;\n-\t      offset += hindex;\n+\t      offset_int woffset\n+\t\t= wi::sext (wi::to_offset (op->op0) - wi::to_offset (op->op1),\n+\t\t\t    TYPE_PRECISION (TREE_TYPE (op->op0)));\n+\t      woffset *= wi::to_offset (op->op2);\n+\t      woffset = wi::lshift (woffset, LOG2_BITS_PER_UNIT);\n+\t      offset += woffset;\n \t    }\n \t  break;\n \n@@ -1102,9 +1100,6 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \n   ref->ref = NULL_TREE;\n   ref->base = base;\n-  ref->offset = offset;\n-  ref->size = size;\n-  ref->max_size = max_size;\n   ref->ref_alias_set = set;\n   if (base_alias_set != -1)\n     ref->base_alias_set = base_alias_set;\n@@ -1113,6 +1108,30 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n   /* We discount volatiles from value-numbering elsewhere.  */\n   ref->volatile_p = false;\n \n+  if (!wi::fits_shwi_p (size) || wi::neg_p (size))\n+    {\n+      ref->offset = 0;\n+      ref->size = -1;\n+      ref->max_size = -1;\n+      return true;\n+    }\n+\n+  ref->size = size.to_shwi ();\n+\n+  if (!wi::fits_shwi_p (offset))\n+    {\n+      ref->offset = 0;\n+      ref->max_size = -1;\n+      return true;\n+    }\n+\n+  ref->offset = offset.to_shwi ();\n+\n+  if (!wi::fits_shwi_p (max_size) || wi::neg_p (max_size))\n+    ref->max_size = -1;\n+  else\n+    ref->max_size = max_size.to_shwi ();\n+\n   return true;\n }\n "}]}