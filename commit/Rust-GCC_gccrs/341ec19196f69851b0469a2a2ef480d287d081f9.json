{"sha": "341ec19196f69851b0469a2a2ef480d287d081f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxZWMxOTE5NmY2OTg1MWIwNDY5YTJhMmVmNDgwZDI4N2QwODFmOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-25T17:35:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T17:35:43Z"}, "message": "m68hc11.c (TARGET_STRUCT_VALUE_RTX): New.\n\n\t* config/m68hc11/m68hc11.c (TARGET_STRUCT_VALUE_RTX): New.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(m68hc11_struct_value_rtx): Likewise.\n\t(m68hc11_return_in_memory): Likewise.\n\t* config/m68hc11/m68hc11.h: Remove a commented-out definition\n\tof PROMOTE_PROTOTYPES.\n\t(RETURN_IN_MEMORY): Remove.\n\t(STRUCT_VALUE_REGNUM): Likewise.\n\nFrom-SVN: r76571", "tree": {"sha": "1f8b8ee7913f5369e0edaf34937e62947931e9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8b8ee7913f5369e0edaf34937e62947931e9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341ec19196f69851b0469a2a2ef480d287d081f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341ec19196f69851b0469a2a2ef480d287d081f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341ec19196f69851b0469a2a2ef480d287d081f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341ec19196f69851b0469a2a2ef480d287d081f9/comments", "author": null, "committer": null, "parents": [{"sha": "344caf1ba141bcb587e39e297d9655ce63474ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344caf1ba141bcb587e39e297d9655ce63474ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344caf1ba141bcb587e39e297d9655ce63474ac8"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "459e4d0d3a4dba0d5edcf6981d6f51b9adfc4e4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341ec19196f69851b0469a2a2ef480d287d081f9", "patch": "@@ -1,3 +1,14 @@\n+2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/m68hc11/m68hc11.c (TARGET_STRUCT_VALUE_RTX): New.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(m68hc11_struct_value_rtx): Likewise.\n+\t(m68hc11_return_in_memory): Likewise.\n+\t* config/m68hc11/m68hc11.h: Remove a commented-out definition\n+\tof PROMOTE_PROTOTYPES.\n+\t(RETURN_IN_MEMORY): Remove.\n+\t(STRUCT_VALUE_REGNUM): Likewise.\n+\n 2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/mmix/mmix-protos.h: Remove the prototype for"}, {"sha": "314697874eb351fbe58ecc63df4df81f753d6dd6", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=341ec19196f69851b0469a2a2ef480d287d081f9", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -87,6 +87,8 @@ static unsigned int m68hc11_section_type_flags (tree, const char*, int);\n static int autoinc_mode (rtx);\n static int m68hc11_make_autoinc_notes (rtx *, void *);\n static void m68hc11_init_libfuncs (void);\n+static rtx m68hc11_struct_value_rtx (tree, int);\n+static bool m68hc11_return_in_memory (tree, tree);\n \n /* Must be set to 1 to produce debug messages.  */\n int debug_m6811 = 0;\n@@ -254,6 +256,11 @@ static int nb_soft_regs;\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS m68hc11_init_libfuncs\n \n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX m68hc11_struct_value_rtx\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY m68hc11_return_in_memory\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n@@ -5520,4 +5527,23 @@ m68hc11_asm_out_destructor (rtx symbol, int priority)\n   fprintf (asm_out_file, \"\\t.globl\\t__do_global_dtors\\n\");\n }\n \n+static rtx\n+m68hc11_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t\t  int incoming ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (Pmode, HARD_D_REGNUM);\n+}\n+\n+/* Return true if type TYPE should be returned in memory.\n+   Blocks and data types largers than 4 bytes cannot be returned\n+   in the register (D + X = 4).  */\n+\n+static bool\n+m68hc11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return ((TYPE_MODE (type) == BLKmode)\n+\t  ? (int_size_in_bytes (type) > 4)\n+\t  : (GET_MODE_SIZE (TYPE_MODE (type)) > 4));\n+}\n+\n #include \"gt-m68hc11.h\""}, {"sha": "0b235b5b33d6be20c070db19d1455b66bb1b2b88", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341ec19196f69851b0469a2a2ef480d287d081f9/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=341ec19196f69851b0469a2a2ef480d287d081f9", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -1004,9 +1004,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n \f\n /* Passing Function Arguments on the Stack.  */\n \n-/* When a prototype says `char' or `short', really pass an `int'.  */\n-/* #define PROMOTE_PROTOTYPES */\n-\n /* If we generate an insn to push BYTES bytes, this says how many the\n    stack pointer really advances by. No rounding or alignment needed\n    for MC6811.  */\n@@ -1020,15 +1017,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n    The standard MC6811 call, with arg count word, includes popping the\n    args as part of the call template.  */\n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)\t0\n-\n-/* Nonzero if type TYPE should be returned in memory.\n-   Blocks and data types largers than 4 bytes cannot be returned\n-   in the register (D + X = 4).  */\n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\\\n-    ((TYPE_MODE (TYPE) == BLKmode)\t\t\t\\\n-     ? (int_size_in_bytes (TYPE) > 4)\t\t\t\\\n-     : (GET_MODE_SIZE (TYPE_MODE (TYPE)) > 4))\n-\n \f\n /* Passing Arguments in Registers.  */\n \n@@ -1148,10 +1136,6 @@ typedef struct m68hc11_args\n #define FUNCTION_VALUE_REGNO_P(N) \\\n      ((N) == HARD_D_REGNUM || (N) == HARD_X_REGNUM)\n \n-/* Register in which address to store a structure value is passed to a\n-   function.  */\n-#define STRUCT_VALUE_REGNUM\tHARD_D_REGNUM\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in functions\n    that have frame pointers. No definition is equivalent to always zero.  */"}]}