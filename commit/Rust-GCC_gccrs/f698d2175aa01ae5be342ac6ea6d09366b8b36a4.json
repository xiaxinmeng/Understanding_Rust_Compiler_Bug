{"sha": "f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5OGQyMTc1YWEwMWFlNWJlMzQyYWM2ZWE2ZDA5MzY2YjhiMzZhNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-06-04T12:31:26Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-06-04T12:31:26Z"}, "message": "except.c (for_each_eh_region): New function.\n\n\t* except.c (for_each_eh_region): New function.\n\t* except.h (for_each_eh_region): Add a prototype for it.\n\t* tree-cfg.c (update_eh_labels): New function, callback for\n\tfor_each_eh_region.\n\t(label_for_bb): Make global static, unfortunately.\n\t(cleanup_dead_labels): Also update label references for\n\texception regions.\n\nFrom-SVN: r82622", "tree": {"sha": "e04c020e220e3d0c79856e9ab76432e2e9ba87ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e04c020e220e3d0c79856e9ab76432e2e9ba87ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/comments", "author": null, "committer": null, "parents": [{"sha": "72fab006113a72f011e261cb291602195726f7d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fab006113a72f011e261cb291602195726f7d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72fab006113a72f011e261cb291602195726f7d5"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "bb08ea4b05e9181286de0808ecb08cdf18579fa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "patch": "@@ -1,3 +1,13 @@\n+2004-06-04  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* except.c (for_each_eh_region): New function.\n+\t* except.h (for_each_eh_region): Add a prototype for it.\n+\t* tree-cfg.c (update_eh_labels): New function, callback for\n+\tfor_each_eh_region.\n+\t(label_for_bb): Make global static, unfortunately.\n+\t(cleanup_dead_labels): Also update label references for\n+\texception regions.\n+\n 2004-06-03  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/mips.c (struct irix_section_align_entry): Fix\n@@ -19,7 +29,7 @@\n \tdocumentation to reflect the new macro name and to clarify its \n \tmeaning.\n \t\n-2004-06-04  Steven Bosscher  <stevenb@suse.de>\n+2004-06-03  Steven Bosscher  <stevenb@suse.de>\n \n \t* rtl.def (VAR_LOCATION): Make RTX_EXTRA.\n "}, {"sha": "65aa8b5c4cc27ec9115fad48d79d6398f843a644", "filename": "gcc/except.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "patch": "@@ -2742,6 +2742,20 @@ for_each_eh_label_1 (void **pentry, void *data)\n   (*callback) (entry->label);\n   return 1;\n }\n+\n+/* Invoke CALLBACK for every exception region in the current function.  */\n+\n+void\n+for_each_eh_region (void (*callback) (struct eh_region *))\n+{\n+  int i, n = cfun->eh->last_region_number;\n+  for (i = 1; i <= n; ++i)\n+    {\n+      struct eh_region *region = cfun->eh->region_array[i];\n+      if (region)\n+\t(*callback) (region);\n+    }\n+}\n \f\n /* This section describes CFG exception edges for flow.  */\n "}, {"sha": "4c596a9df11ee7adc0b0aeb40b6fab20431efb3b", "filename": "gcc/except.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "patch": "@@ -90,6 +90,9 @@ extern void note_current_region_may_contain_throw (void);\n    loop hackery; should not be used by new code.  */\n extern void for_each_eh_label (void (*) (rtx));\n \n+/* Invokes CALLBACK for every exception region in the current function.  */\n+extern void for_each_eh_region (void (*) (struct eh_region *));\n+\n /* Determine if the given INSN can throw an exception.  */\n extern bool can_throw_internal_1 (int);\n extern bool can_throw_internal (rtx);"}, {"sha": "d6823cb5216b0bf06496e23c7a556214f18ab9a4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698d2175aa01ae5be342ac6ea6d09366b8b36a4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f698d2175aa01ae5be342ac6ea6d09366b8b36a4", "patch": "@@ -762,13 +762,38 @@ cleanup_tree_cfg (void)\n }\n \n \n-/* Cleanup useless labels from the flow graph.  */\n+/* Cleanup useless labels in basic blocks.  This is something we wish\n+   to do early because it allows us to group case labels before creating\n+   the edges for the CFG, and it speeds up block statement iterators in\n+   all passes later on.\n+   We only run this pass once, running it more than once is probably not\n+   profitable.  */\n+\n+/* A map from basic block index to the leading label of that block.  */\n+static tree *label_for_bb;\n+\n+/* Callback for for_each_eh_region.  Helper for cleanup_dead_labels.  */\n+static void\n+update_eh_label (struct eh_region *region)\n+{\n+  tree old_label = get_eh_region_tree_label (region);\n+  if (old_label)\n+    {\n+      tree new_label = label_for_bb[label_to_block (old_label)->index];\n+      set_eh_region_tree_label (region, new_label);\n+    }\n+}\n+\n+/* Cleanup redundant labels.  This is a three-steo process:\n+     1) Find the leading label for each block.\n+     2) Redirect all references to labels to the leading labels.\n+     3) Cleanup all useless labels.  */\n \n static void\n cleanup_dead_labels (void)\n {\n   basic_block bb;\n-  tree *label_for_bb = xcalloc (last_basic_block, sizeof (tree));\n+  label_for_bb = xcalloc (last_basic_block, sizeof (tree));\n \n   /* Find a suitable label for each block.  We use the first user-defined\n      label is there is one, or otherwise just the first label we see.  */\n@@ -805,7 +830,8 @@ cleanup_dead_labels (void)\n \t}\n     }\n \n-  /* Now redirect all jumps/branches to the selected label for each block.  */\n+  /* Now redirect all jumps/branches to the selected label.\n+     First do so for each block ending in a control statement.  */\n   FOR_EACH_BB (bb)\n     {\n       tree stmt = last_stmt (bb);\n@@ -864,6 +890,8 @@ cleanup_dead_labels (void)\n       }\n     }\n \n+  for_each_eh_region (update_eh_label);\n+\n   /* Finally, purge dead labels.  All user-defined labels and labels that\n      can be the target of non-local gotos are preserved.  */\n   FOR_EACH_BB (bb)"}]}