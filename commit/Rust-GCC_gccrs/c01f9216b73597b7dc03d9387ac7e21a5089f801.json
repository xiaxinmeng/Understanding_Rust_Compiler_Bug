{"sha": "c01f9216b73597b7dc03d9387ac7e21a5089f801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxZjkyMTZiNzM1OTdiN2RjMDNkOTM4N2FjN2UyMWE1MDg5ZjgwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-19T19:12:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-19T19:12:37Z"}, "message": "Simplify the base characteristics for some type traits\n\n\t* include/std/type_traits (__is_member_object_pointer_helper): Use\n\t__not_<is_function<_Tp>>::type instead of integral_constant.\n\t(__is_member_function_pointer_helper): Likewise for\n\tis_function<_Tp>::type.\n\t(is_compund): Likewise for __not_<is_fundamental<_Tp>>::type.\n\t(__do_is_nt_destructible_impl): Use __bool_constant and reindent.\n\t(is_trivially_constructible): Remove redundant use of\n\tis_constructible.\n\t(__is_trivially_copy_assignable_impl): Remove redundant use of\n\tis_copy_assignable.\n\t(__is_trivially_move_assignable_impl): Remove redundant use of\n\tis_move_assignable.\n\t(is_trivially_destructible): Use __bool_constant.\n\t* testsuite/20_util/is_trivially_assignable/value.cc: Add some more\n\ttests for scalar types.\n\nFrom-SVN: r262889", "tree": {"sha": "0b17f34a924dc77b599a84866d689b54bc86fc97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b17f34a924dc77b599a84866d689b54bc86fc97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01f9216b73597b7dc03d9387ac7e21a5089f801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01f9216b73597b7dc03d9387ac7e21a5089f801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01f9216b73597b7dc03d9387ac7e21a5089f801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01f9216b73597b7dc03d9387ac7e21a5089f801/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20a0c4e3dc9948b3d182943c8c47d4608c0bec9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a0c4e3dc9948b3d182943c8c47d4608c0bec9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a0c4e3dc9948b3d182943c8c47d4608c0bec9d"}], "stats": {"total": 151, "additions": 93, "deletions": 58}, "files": [{"sha": "ea7db96f2226e4839d45a849e68de633f8bfe318", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c01f9216b73597b7dc03d9387ac7e21a5089f801", "patch": "@@ -1,3 +1,21 @@\n+2018-07-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_member_object_pointer_helper): Use\n+\t__not_<is_function<_Tp>>::type instead of integral_constant.\n+\t(__is_member_function_pointer_helper): Likewise for\n+\tis_function<_Tp>::type.\n+\t(is_compund): Likewise for __not_<is_fundamental<_Tp>>::type.\n+\t(__do_is_nt_destructible_impl): Use __bool_constant and reindent.\n+\t(is_trivially_constructible): Remove redundant use of\n+\tis_constructible.\n+\t(__is_trivially_copy_assignable_impl): Remove redundant use of\n+\tis_copy_assignable.\n+\t(__is_trivially_move_assignable_impl): Remove redundant use of\n+\tis_move_assignable.\n+\t(is_trivially_destructible): Use __bool_constant.\n+\t* testsuite/20_util/is_trivially_assignable/value.cc: Add some more\n+\ttests for scalar types.\n+\n 2018-07-19  Glen Joseph Fernandes  <glenjofe@gmail.com>\n \n \t* include/bits/stl_algobase.h (__copy_move_a): Used"}, {"sha": "aaa554c6200079a503cedb688ef1e24c20d4d460", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c01f9216b73597b7dc03d9387ac7e21a5089f801", "patch": "@@ -396,7 +396,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Cp>\n     struct __is_member_object_pointer_helper<_Tp _Cp::*>\n-    : public integral_constant<bool, !is_function<_Tp>::value> { };\n+    : public __not_<is_function<_Tp>>::type { };\n \n   /// is_member_object_pointer\n   template<typename _Tp>\n@@ -411,7 +411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Cp>\n     struct __is_member_function_pointer_helper<_Tp _Cp::*>\n-    : public integral_constant<bool, is_function<_Tp>::value> { };\n+    : public is_function<_Tp>::type { };\n \n   /// is_member_function_pointer\n   template<typename _Tp>\n@@ -603,7 +603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_compound\n   template<typename _Tp>\n     struct is_compound\n-    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };\n+    : public __not_<is_fundamental<_Tp>>::type { };\n \n   template<typename _Tp>\n     struct __is_member_pointer_helper\n@@ -826,8 +826,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __do_is_nt_destructible_impl\n   {\n     template<typename _Tp>\n-      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>\n-        __test(int);\n+      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>\n+      __test(int);\n \n     template<typename>\n       static false_type __test(...);\n@@ -1136,8 +1136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_trivially_constructible\n   template<typename _Tp, typename... _Args>\n     struct is_trivially_constructible\n-    : public __and_<is_constructible<_Tp, _Args...>, __bool_constant<\n-\t\t      __is_trivially_constructible(_Tp, _Args...)>>::type\n+    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>\n     { };\n \n   /// is_trivially_default_constructible\n@@ -1235,9 +1234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct __is_trivially_copy_assignable_impl<_Tp, true>\n-    : public __and_<is_copy_assignable<_Tp>,\n-\t\t    integral_constant<bool,\n-\t\t\t__is_trivially_assignable(_Tp&, const _Tp&)>>\n+    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>\n     { };\n \n   template<typename _Tp>\n@@ -1256,9 +1253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct __is_trivially_move_assignable_impl<_Tp, true>\n-    : public __and_<is_move_assignable<_Tp>,\n-\t\t    integral_constant<bool,\n-\t\t\t__is_trivially_assignable(_Tp&, _Tp&&)>>\n+    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>\n     { };\n \n   template<typename _Tp>\n@@ -1269,8 +1264,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_trivially_destructible\n   template<typename _Tp>\n     struct is_trivially_destructible\n-    : public __and_<is_destructible<_Tp>, integral_constant<bool,\n-\t\t\t      __has_trivial_destructor(_Tp)>>\n+    : public __and_<is_destructible<_Tp>,\n+\t\t    __bool_constant<__has_trivial_destructor(_Tp)>>\n     { };\n \n "}, {"sha": "f3d73cb7e980d85e7bda6b889154ec5ecaf603e3", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_assignable/value.cc", "status": "modified", "additions": 65, "deletions": 43, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01f9216b73597b7dc03d9387ac7e21a5089f801/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc?ref=c01f9216b73597b7dc03d9387ac7e21a5089f801", "patch": "@@ -44,91 +44,113 @@ void test01()\n   using std::is_trivially_assignable;\n   using namespace __gnu_test;\n \n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tint, int>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tint&, int>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tint&, int&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tint&, int&&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tint&, const int&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tint&, int*>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tint&, void*>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst int, int>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst int&, int>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst int&, const int&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst int*&, int*>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tint*&, const int*&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tint*&, const int&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst int*&, void*>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst void*&, void*>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable,\n+\t\tconst void*&, int*>(true), \"\");\n \n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tTType, TType>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tTType&, TType>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tTType&, TType&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tTType&, TType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tTType&, const TType&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tPODType, PODType>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tNType&, NType&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tSLType, SLType>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::Empty, assign::Empty>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::Abstract, assign::Abstract>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::Ellipsis, assign::Ellipsis>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::DelEllipsis, assign::DelEllipsis>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::Any, assign::Any>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::DelDef, assign::DelDef>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::DelCopy, assign::DelCopy>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::Nontrivial, assign::Nontrivial>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::AnyAssign, assign::AnyAssign>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::DelAnyAssign, assign::DelAnyAssign>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::DelCopyAssign, assign::DelCopyAssign>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::MO, assign::MO>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::MO, assign::MO&&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::MO, assign::MO&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tassign::MO, const assign::MO&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tCopyConsOnlyType, CopyConsOnlyType>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tCopyConsOnlyType, const CopyConsOnlyType&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveConsOnlyType, MoveConsOnlyType>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveConsOnlyType, MoveConsOnlyType&&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tHasTemplateCAssign, HasTemplateCAssign>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tHasTemplateCAssign, const HasTemplateCAssign&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tClassType, DerivedType>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tClassType, DerivedType&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tClassType, DerivedType&&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tClassType, const DerivedType&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveOnly, MoveOnly>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveOnly, MoveOnly&&>(true), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveOnly, MoveOnly&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveOnly, const MoveOnly&>(false), \"\");\n-  static_assert(test_property<is_trivially_assignable, \n+  static_assert(test_property<is_trivially_assignable,\n \t\tMoveOnly2, MoveOnly2>(false), \"\");\n }"}]}