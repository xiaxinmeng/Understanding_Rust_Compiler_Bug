{"sha": "187e4b0f22718012d2138b29c9536c68b088653c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3ZTRiMGYyMjcxODAxMmQyMTM4YjI5Yzk1MzZjNjhiMDg4NjUzYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-08T21:17:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-08T21:17:33Z"}, "message": "(really_start_method): Always use OBJC_GEN_METHOD_LABEL.\n\nPass method_slot as additional arg.\n(OBJC_GEN_METHOD_LABEL): Add default definition.\n\nFrom-SVN: r3677", "tree": {"sha": "baec7bec24d2354067027d50aef7e0cbb02d32f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baec7bec24d2354067027d50aef7e0cbb02d32f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187e4b0f22718012d2138b29c9536c68b088653c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187e4b0f22718012d2138b29c9536c68b088653c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187e4b0f22718012d2138b29c9536c68b088653c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187e4b0f22718012d2138b29c9536c68b088653c/comments", "author": null, "committer": null, "parents": [{"sha": "6092a4cc83dde89cabef5cd97e033364db1ff677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6092a4cc83dde89cabef5cd97e033364db1ff677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6092a4cc83dde89cabef5cd97e033364db1ff677"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "24c401f2c672da06b57891aed12ddff81a67ae5a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187e4b0f22718012d2138b29c9536c68b088653c/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187e4b0f22718012d2138b29c9536c68b088653c/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=187e4b0f22718012d2138b29c9536c68b088653c", "patch": "@@ -52,6 +52,18 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    so it can store the operation numbers in them.  */\n #ifndef NEXT_OBJC_RUNTIME\n #define OBJC_SELECTORS_WITHOUT_LABELS\n+\n+/* This is the default way of generating a method name.  */\n+#ifndef OBJC_GEN_METHOD_LABEL\n+#define OBJC_GEN_METHOD_LABEL(BUF, IS_INST, CLASS_NAME, CAT_NAME, SEL_NAME, NUM)\t\\\n+  do {\t\t\t\t\t\\\n+    char *cat_name = (CAT_NAME);\t\\\n+    if (cat_name == 0) cat_name = \"\";\t\\\n+    sprintf ((BUF), \"_%s_%s_%s_%s_%d\",\t\\\n+\t     ((IS_INST) ? \"i\" : \"c\"),\t\\\n+\t     (CLASS_NAME), cat_name,\t\\\n+\t     (SEL_NAME), (NUM));\t\\\n+  } while (0)\n #endif\n \f\n /* Define the special tree codes that we use.  */\n@@ -4160,16 +4172,12 @@ really_start_method (method, parmlist)\n       buf = (char *) alloca (50\n \t\t\t     + strlen (IDENTIFIER_POINTER (METHOD_SEL_NAME (method)))\n \t\t\t     + strlen (IDENTIFIER_POINTER (CLASS_NAME (implementation_context))));\n-#ifdef OBJC_GEN_METHOD_LABEL\n       OBJC_GEN_METHOD_LABEL (buf,\n \t\t\t     TREE_CODE (method) == INSTANCE_METHOD_DECL,\n \t\t\t     IDENTIFIER_POINTER (CLASS_NAME (implementation_context)),\n \t\t\t     NULL,\n-\t\t\t     IDENTIFIER_POINTER (METHOD_SEL_NAME (method)));\n-#else\n-      sprintf (buf, \"_%d_%s\", ++method_slot,\n-\t       IDENTIFIER_POINTER (CLASS_NAME (implementation_context)));\n-#endif\n+\t\t\t     IDENTIFIER_POINTER (METHOD_SEL_NAME (method)),\n+\t\t\t     ++method_slot);\n     }\n   else\t\t\t\t/* we have a category */\n     {\n@@ -4178,17 +4186,12 @@ really_start_method (method, parmlist)\n \t\t\t     + strlen (IDENTIFIER_POINTER (METHOD_SEL_NAME (method)))\n \t\t\t     + strlen (IDENTIFIER_POINTER (CLASS_SUPER_NAME (implementation_context)))\n \t\t\t     + strlen (IDENTIFIER_POINTER (CLASS_NAME (implementation_context))));\n-#ifdef OBJC_GEN_METHOD_LABEL\n-      OBJC_GEN_METHOD_LABEL (buf,\n+ OBJC_GEN_METHOD_LABEL (buf,\n \t\t\t     TREE_CODE (method) == INSTANCE_METHOD_DECL,\n \t\t\t     IDENTIFIER_POINTER (CLASS_NAME (implementation_context)),\n \t\t\t     IDENTIFIER_POINTER (CLASS_SUPER_NAME (implementation_context)),\n-\t\t\t     IDENTIFIER_POINTER (METHOD_SEL_NAME (method)));\n-#else\n-      sprintf (buf, \"_%d_%s_%s\", ++method_slot,\n-\t       IDENTIFIER_POINTER (CLASS_NAME (implementation_context)),\n-\t       IDENTIFIER_POINTER (CLASS_SUPER_NAME (implementation_context)));\n-#endif\n+\t\t\t     IDENTIFIER_POINTER (METHOD_SEL_NAME (method)),\n+\t\t\t     ++method_slot);\n     }\n \n   method_id = get_identifier (buf);"}]}