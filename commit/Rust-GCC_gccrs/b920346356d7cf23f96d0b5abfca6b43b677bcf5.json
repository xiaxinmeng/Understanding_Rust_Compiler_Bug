{"sha": "b920346356d7cf23f96d0b5abfca6b43b677bcf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyMDM0NjM1NmQ3Y2YyM2Y5NmQwYjVhYmZjYTZiNDNiNjc3YmNmNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-08T18:36:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-08T18:36:54Z"}, "message": "dwarf2.h (DW_OP_call_ref): Rename from DW_OP_calli.\n\n        * dwarf2.h (DW_OP_call_ref): Rename from DW_OP_calli.\n        (DW_OP_GNU_push_tls_address): New.\n        (DW_OP_lo_user): Fix.\n        * dwarf2out.c (INTERNAL_DW_OP_tls_addr): New.\n        (dwarf_stack_op_name): Handle it, plus other dwarf3 opcodes.\n        (size_of_loc_descr): Likewise.\n        (output_loc_operands): Handle INTERNAL_DW_OP_tls_addr.\n        (add_AT_location_description): Take a dw_loc_descr_ref not an rtx.\n        (loc_descriptor_from_tree): Handle TLS variables.\n        (rtl_for_decl_location): Do avoid_constant_pool_reference here ...\n        (add_location_or_const_value_attribute): ... not here.  Defer\n        to loc_descriptor_from_tree for TLS variables.\n\n        * config/i386/i386.h (ASM_OUTPUT_DWARF_DTPREL): New.\n        * config/i386/i386.c (i386_output_dwarf_dtprel): New.\n        * config/i386/i386-protos.h: Update.\n\nFrom-SVN: r56957", "tree": {"sha": "836174b555f80b032094c6faa9d7b90163ee8351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836174b555f80b032094c6faa9d7b90163ee8351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b920346356d7cf23f96d0b5abfca6b43b677bcf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b920346356d7cf23f96d0b5abfca6b43b677bcf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b920346356d7cf23f96d0b5abfca6b43b677bcf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b920346356d7cf23f96d0b5abfca6b43b677bcf5/comments", "author": null, "committer": null, "parents": [{"sha": "7df988780bd6c60725929ffea906fc2e160f94df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df988780bd6c60725929ffea906fc2e160f94df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df988780bd6c60725929ffea906fc2e160f94df"}], "stats": {"total": 188, "additions": 166, "deletions": 22}, "files": [{"sha": "9a2754e3c5e902076239eb2bf729cc5b97220733", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -1,3 +1,22 @@\n+2002-09-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2.h (DW_OP_call_ref): Rename from DW_OP_calli.\n+\t(DW_OP_GNU_push_tls_address): New.\n+\t(DW_OP_lo_user): Fix.\n+\t* dwarf2out.c (INTERNAL_DW_OP_tls_addr): New.\n+\t(dwarf_stack_op_name): Handle it, plus other dwarf3 opcodes.\n+\t(size_of_loc_descr): Likewise.\n+\t(output_loc_operands): Handle INTERNAL_DW_OP_tls_addr.\n+\t(add_AT_location_description): Take a dw_loc_descr_ref not an rtx.\n+\t(loc_descriptor_from_tree): Handle TLS variables.\n+\t(rtl_for_decl_location): Do avoid_constant_pool_reference here ...\n+\t(add_location_or_const_value_attribute): ... not here.  Defer\n+\tto loc_descriptor_from_tree for TLS variables.\n+\n+\t* config/i386/i386.h (ASM_OUTPUT_DWARF_DTPREL): New.\n+\t* config/i386/i386.c (i386_output_dwarf_dtprel): New.\n+\t* config/i386/i386-protos.h: Update.\n+\n 2002-09-08  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/6405"}, {"sha": "bec35aebeeef2986c2f112f8865911d5f694f668", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -110,6 +110,7 @@ extern const char *output_fix_trunc PARAMS ((rtx, rtx*));\n extern const char *output_fp_compare PARAMS ((rtx, rtx*, int, int));\n \n extern void i386_dwarf_output_addr_const PARAMS ((FILE*, rtx));\n+extern void i386_output_dwarf_dtprel PARAMS ((FILE*, int, rtx));\n extern rtx i386_simplify_dwarf_addr PARAMS ((rtx));\n \n extern void ix86_expand_clear PARAMS ((rtx));"}, {"sha": "1d0d1601820b3c87818e1f89b0e6fbcb018a7f5d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -5956,6 +5956,33 @@ i386_dwarf_output_addr_const (file, x)\n   fputc ('\\n', file);\n }\n \n+/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+   We need to emit DTP-relative relocations.  */\n+\n+void\n+i386_output_dwarf_dtprel (file, size, x)\n+     FILE *file;\n+     int size;\n+     rtx x;\n+{\n+  switch (size)\n+    {\n+    case 4:\n+      fputs (ASM_LONG, file);\n+      break;\n+    case 8:\n+#ifdef ASM_QUAD\n+      fputs (ASM_QUAD, file);\n+      break;\n+#endif\n+    default:\n+      abort ();\n+   }\n+  \n+  output_addr_const (file, x);\n+  fputs (\"@DTPOFF\", file);\n+}\n+\n /* In the name of slightly smaller debug output, and to cater to\n    general assembler losage, recognize PIC+GOTOFF and turn it back\n    into a direct symbol reference.  */"}, {"sha": "d04c60569a626bd43cda7660313aa25bb6f6acfd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -3021,6 +3021,13 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define ASM_SIMPLIFY_DWARF_ADDR(X) \\\n   i386_simplify_dwarf_addr (X)\n \n+/* Emit a dtp-relative reference to a TLS variable.  */\n+\n+#ifdef HAVE_AS_TLS\n+#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n+  i386_output_dwarf_dtprel (FILE, SIZE, X)\n+#endif\n+\n /* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n    and switch back.  For x86 we do this only to save a few bytes that\n    would otherwise be unused in the text section.  */"}, {"sha": "a7f5f0f8d682a334908ae45daefcfa0ff63dadff", "filename": "gcc/dwarf2.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2.h?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -399,10 +399,12 @@ enum dwarf_location_atom\n     DW_OP_push_object_address = 0x97,\n     DW_OP_call2 = 0x98,\n     DW_OP_call4 = 0x99,\n-    DW_OP_calli = 0x9a\n+    DW_OP_call_ref = 0x9a,\n+    /* GNU extensions.  */\n+    DW_OP_GNU_push_tls_address = 0xe0\n   };\n \n-#define DW_OP_lo_user\t0x80\t/* Implementation-defined range start.  */\n+#define DW_OP_lo_user\t0xe0\t/* Implementation-defined range start.  */\n #define DW_OP_hi_user\t0xff\t/* Implementation-defined range end.  */\n \n /* Type encodings.  */"}, {"sha": "5757d247d71ab5b74a4c3a7c92f715d711d6d1f0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 108, "deletions": 20, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b920346356d7cf23f96d0b5abfca6b43b677bcf5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b920346356d7cf23f96d0b5abfca6b43b677bcf5", "patch": "@@ -2182,6 +2182,11 @@ dwarf2out_frame_finish ()\n /* And now, the subset of the debugging information support code necessary\n    for emitting location expressions.  */\n \n+/* We need some way to distinguish DW_OP_addr with a direct symbol\n+   relocation from DW_OP_addr with a dtp-relative symbol relocation.  */\n+#define INTERNAL_DW_OP_tls_addr\t\t(0x100 + DW_OP_addr)\n+\n+\n typedef struct dw_val_struct *dw_val_ref;\n typedef struct die_struct *dw_die_ref;\n typedef struct dw_loc_descr_struct *dw_loc_descr_ref;\n@@ -2307,6 +2312,7 @@ dwarf_stack_op_name (op)\n   switch (op)\n     {\n     case DW_OP_addr:\n+    case INTERNAL_DW_OP_tls_addr:\n       return \"DW_OP_addr\";\n     case DW_OP_deref:\n       return \"DW_OP_deref\";\n@@ -2596,6 +2602,16 @@ dwarf_stack_op_name (op)\n       return \"DW_OP_xderef_size\";\n     case DW_OP_nop:\n       return \"DW_OP_nop\";\n+    case DW_OP_push_object_address:\n+      return \"DW_OP_push_object_address\";\n+    case DW_OP_call2:\n+      return \"DW_OP_call2\";\n+    case DW_OP_call4:\n+      return \"DW_OP_call4\";\n+    case DW_OP_call_ref:\n+      return \"DW_OP_call_ref\";\n+    case DW_OP_GNU_push_tls_address:\n+      return \"DW_OP_GNU_push_tls_address\";\n     default:\n       return \"OP_<unknown>\";\n     }\n@@ -2653,6 +2669,7 @@ size_of_loc_descr (loc)\n   switch (loc->dw_loc_opc)\n     {\n     case DW_OP_addr:\n+    case INTERNAL_DW_OP_tls_addr:\n       size += DWARF2_ADDR_SIZE;\n       break;\n     case DW_OP_const1u:\n@@ -2738,6 +2755,15 @@ size_of_loc_descr (loc)\n     case DW_OP_xderef_size:\n       size += 1;\n       break;\n+    case DW_OP_call2:\n+      size += 2;\n+      break;\n+    case DW_OP_call4:\n+      size += 4;\n+      break;\n+    case DW_OP_call_ref:\n+      size += DWARF2_ADDR_SIZE;\n+      break;\n     default:\n       break;\n     }\n@@ -2887,6 +2913,17 @@ output_loc_operands (loc)\n     case DW_OP_xderef_size:\n       dw2_asm_output_data (1, val1->v.val_int, NULL);\n       break;\n+\n+    case INTERNAL_DW_OP_tls_addr:\n+#ifdef ASM_OUTPUT_DWARF_DTPREL\n+      ASM_OUTPUT_DWARF_DTPREL (asm_out_file, DWARF2_ADDR_SIZE,\n+\t\t\t       val1->v.val_addr);\n+      fputc ('\\n', asm_out_file);\n+#else\n+      abort ();\n+#endif\n+      break;\n+\n     default:\n       /* Other codes have no operands.  */\n       break;\n@@ -3590,7 +3627,8 @@ static unsigned int simple_decl_align_in_bits PARAMS ((tree));\n static unsigned HOST_WIDE_INT simple_type_size_in_bits PARAMS ((tree));\n static HOST_WIDE_INT field_byte_offset\tPARAMS ((tree));\n static void add_AT_location_description\tPARAMS ((dw_die_ref,\n-\t\t\t\t\t\t enum dwarf_attribute, rtx));\n+\t\t\t\t\t\t enum dwarf_attribute,\n+\t\t\t\t\t\t dw_loc_descr_ref));\n static void add_data_member_location_attribute PARAMS ((dw_die_ref, tree));\n static void add_const_value_attribute\tPARAMS ((dw_die_ref, rtx));\n static rtx rtl_for_decl_location\tPARAMS ((tree));\n@@ -8015,6 +8053,42 @@ loc_descriptor_from_tree (loc, addressp)\n \t       : 0);\n \n     case VAR_DECL:\n+      if (DECL_THREAD_LOCAL (loc))\n+\t{\n+\t  rtx rtl;\n+\n+#ifndef ASM_OUTPUT_DWARF_DTPREL\n+\t  /* If this is not defined, we have no way to emit the data.  */\n+\t  return 0;\n+#endif\n+\n+\t  /* The way DW_OP_GNU_push_tls_address is specified, we can only\n+\t     look up addresses of objects in the current module.  */\n+\t  if (! (*targetm.binds_local_p) (loc))\n+\t    return 0;\n+\n+\t  rtl = rtl_for_decl_location (loc);\n+\t  if (rtl == NULL_RTX)\n+\t    return 0;\n+\n+\t  if (GET_CODE (rtl) != MEM)\n+\t    return 0;\n+\t  rtl = XEXP (rtl, 0);\n+\t  if (! CONSTANT_P (rtl))\n+\t    return 0;\n+\n+\t  ret = new_loc_descr (INTERNAL_DW_OP_tls_addr, 0, 0);\n+\t  ret->dw_loc_oprnd1.val_class = dw_val_class_addr;\n+\t  ret->dw_loc_oprnd1.v.val_addr = rtl;\n+\n+\t  ret1 = new_loc_descr (DW_OP_GNU_push_tls_address, 0, 0);\n+\t  add_loc_descr (&ret, ret1);\n+\n+\t  indirect_p = 1;\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n+\n     case PARM_DECL:\n       {\n \trtx rtl = rtl_for_decl_location (loc);\n@@ -8497,14 +8571,12 @@ field_byte_offset (decl)\n    whole parameters.  Note that the location attributes for struct fields are\n    generated by the routine `data_member_location_attribute' below.  */\n \n-static void\n-add_AT_location_description (die, attr_kind, rtl)\n+static inline void\n+add_AT_location_description (die, attr_kind, descr)\n      dw_die_ref die;\n      enum dwarf_attribute attr_kind;\n-     rtx rtl;\n+     dw_loc_descr_ref descr;\n {\n-  dw_loc_descr_ref descr = loc_descriptor (rtl);\n-\n   if (descr != 0)\n     add_AT_loc (die, attr_kind, descr);\n }\n@@ -8929,6 +9001,13 @@ rtl_for_decl_location (decl)\n   if (rtl)\n     rtl = ASM_SIMPLIFY_DWARF_ADDR (rtl);\n #endif\n+\n+  /* If we don't look past the constant pool, we risk emitting a\n+     reference to a constant pool entry that isn't referenced from\n+     code, and thus is not emitted.  */\n+  if (rtl)\n+    rtl = avoid_constant_pool_reference (rtl);\n+\n   return rtl;\n }\n \n@@ -8949,6 +9028,7 @@ add_location_or_const_value_attribute (die, decl)\n      tree decl;\n {\n   rtx rtl;\n+  dw_loc_descr_ref descr;\n \n   if (TREE_CODE (decl) == ERROR_MARK)\n     return;\n@@ -8959,16 +9039,11 @@ add_location_or_const_value_attribute (die, decl)\n   if (rtl == NULL_RTX)\n     return;\n \n-  /* If we don't look past the constant pool, we risk emitting a\n-     reference to a constant pool entry that isn't referenced from\n-     code, and thus is not emitted.  */\n-  rtl = avoid_constant_pool_reference (rtl);\n-\n   switch (GET_CODE (rtl))\n     {\n     case ADDRESSOF:\n-      /* The address of a variable that was optimized away; don't emit\n-\t anything.  */\n+      /* The address of a variable that was optimized away;\n+\t don't emit anything.  */\n       break;\n \n     case CONST_INT:\n@@ -8983,12 +9058,24 @@ add_location_or_const_value_attribute (die, decl)\n       break;\n \n     case MEM:\n-    case REG:\n-    case SUBREG:\n-    case CONCAT:\n-      add_AT_location_description (die, DW_AT_location, rtl);\n+      if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n+\t{\n+\t  /* Need loc_descriptor_from_tree since that's where we know\n+\t     how to handle TLS variables.  Want the object's address\n+\t     since the top-level DW_AT_location assumes such.  See\n+\t     the confusion in loc_descriptor for reference.  */\n+\t  descr = loc_descriptor_from_tree (decl, 1);\n+\t}\n+      else\n+\t{\n+\tcase REG:\n+\tcase SUBREG:\n+\tcase CONCAT:\n+\t  descr = loc_descriptor (rtl);\n+\t}\n+      add_AT_location_description (die, DW_AT_location, descr);\n       break;\n-\n+\t\n     default:\n       abort ();\n     }\n@@ -9120,7 +9207,8 @@ add_bound_info (subrange_die, bound_attr, bound)\n \n \t  add_AT_flag (decl_die, DW_AT_artificial, 1);\n \t  add_type_attribute (decl_die, TREE_TYPE (bound), 1, 0, ctx);\n-\t  add_AT_location_description (decl_die, DW_AT_location, loc);\n+\t  add_AT_location_description (decl_die, DW_AT_location,\n+\t\t\t\t       loc_descriptor (loc));\n \t  add_AT_die_ref (subrange_die, bound_attr, decl_die);\n \t}\n \n@@ -10325,7 +10413,7 @@ gen_subprogram_die (decl, context_die)\n \t is not part of the state saved/restored for inline functions.  */\n       if (current_function_needs_context)\n \tadd_AT_location_description (subr_die, DW_AT_static_link,\n-\t\t\t\t     lookup_static_chain (decl));\n+\t\t\t     loc_descriptor (lookup_static_chain (decl)));\n #endif\n     }\n "}]}