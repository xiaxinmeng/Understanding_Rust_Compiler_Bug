{"sha": "4be156d6bef317b8704052f11431457a577ed564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlMTU2ZDZiZWYzMTdiODcwNDA1MmYxMTQzMTQ1N2E1NzdlZDU2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T13:32:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T14:23:54Z"}, "message": "middle-end/98793 - properly handle BLKmode vectors in vector_element_bits\n\nThe previous change made AVX512 mask vectors correct but disregarded\nthe possibility of generic (BLKmode) boolean vectors which are exposed\nby the frontends already.\n\n2021-01-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/98793\n\t* tree.c (vector_element_bits): Key single-bit bool vector on\n\tinteger mode rather than not vector mode.\n\n\t* gcc.dg/pr98793.c: New testcase.", "tree": {"sha": "bc045cc2a7a8b2aebcc5d6de30a3619cb2f5324e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc045cc2a7a8b2aebcc5d6de30a3619cb2f5324e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be156d6bef317b8704052f11431457a577ed564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be156d6bef317b8704052f11431457a577ed564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be156d6bef317b8704052f11431457a577ed564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be156d6bef317b8704052f11431457a577ed564/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a8ef8ef2ac077b393687624b09db6ab31c7746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a8ef8ef2ac077b393687624b09db6ab31c7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a8ef8ef2ac077b393687624b09db6ab31c7746"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "bb1ae9cc7b1abcbf5f2ca00687961e2322cffdfa", "filename": "gcc/testsuite/gcc.dg/pr98793.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be156d6bef317b8704052f11431457a577ed564/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98793.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be156d6bef317b8704052f11431457a577ed564/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98793.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98793.c?ref=4be156d6bef317b8704052f11431457a577ed564", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-psabi\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned char __attribute__((__vector_size__ (8))) v64u8;\n+typedef unsigned char __attribute__((__vector_size__ (64))) v512u8;\n+typedef unsigned long long u64;\n+\n+u64 gx;\n+v512u8 gu;\n+v512u8 gv;\n+\n+v64u8 __attribute__((__noipa__)) foo0 (u8 ax, v512u8 au, u64 ay)\n+{\n+  u8 lx = ax && (u8) ay;\n+  v512u8 lc = 7 <= au;\n+  v512u8 ld = (u8) (ay && gx) == gu;\n+  v512u8 le = (v512u8) ld + (v512u8) gv;\n+  v512u8 lf = le + lc;\n+  return (((union\n+            {\n+            v512u8 a;\n+            v64u8 b[8];\n+            }) lf).b[3]) + lx;\n+}\n+\n+int\n+main (void)\n+{\n+  v64u8 x = foo0 (2, (v512u8) { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15\n+                  },\n+                  2);\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != (i ? 0 : 0xff))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "87862be9273c4ba78ec4158676fc327793b4a4b5", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be156d6bef317b8704052f11431457a577ed564/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be156d6bef317b8704052f11431457a577ed564/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4be156d6bef317b8704052f11431457a577ed564", "patch": "@@ -14028,11 +14028,11 @@ vector_element_bits (const_tree type)\n   gcc_checking_assert (VECTOR_TYPE_P (type));\n   if (VECTOR_BOOLEAN_TYPE_P (type))\n     {\n-      if (VECTOR_MODE_P (TYPE_MODE (type)))\n+      if (SCALAR_INT_MODE_P (TYPE_MODE (type)))\n+\treturn 1;\n+      else\n \treturn vector_element_size (tree_to_poly_uint64 (TYPE_SIZE (type)),\n \t\t\t\t    TYPE_VECTOR_SUBPARTS (type));\n-      else\n-\treturn 1;\n     }\n   return tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n }"}]}