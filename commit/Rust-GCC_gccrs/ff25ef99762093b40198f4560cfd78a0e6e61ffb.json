{"sha": "ff25ef99762093b40198f4560cfd78a0e6e61ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyNWVmOTk3NjIwOTNiNDAxOThmNDU2MGNmZDc4YTBlNmU2MWZmYg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-06-26T06:13:27Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-06-26T06:13:27Z"}, "message": "Makefile.in (cfgrtl.o): Add expr.h dependency.\n\n\t* Makefile.in (cfgrtl.o): Add expr.h dependency.\n\t* cfgrtl.c: Include expr.h.\n\t(mark_killed_regs, safe_insert_insn_on_edge): New\n\tfunctions.\n\t* config/i386/i386.h (AVOID_CCMODE_COPIES): Define.\n\t* basic-block.h (safe_insert_insn_on_edge): Declare.\n\nFrom-SVN: r68518", "tree": {"sha": "d834b58e518ec2a70864b6e17a07f3d6c6471420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d834b58e518ec2a70864b6e17a07f3d6c6471420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff25ef99762093b40198f4560cfd78a0e6e61ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff25ef99762093b40198f4560cfd78a0e6e61ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff25ef99762093b40198f4560cfd78a0e6e61ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff25ef99762093b40198f4560cfd78a0e6e61ffb/comments", "author": null, "committer": null, "parents": [{"sha": "9eee5e726de1e5d11bc77e0f2ae05c9c0c0916b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eee5e726de1e5d11bc77e0f2ae05c9c0c0916b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eee5e726de1e5d11bc77e0f2ae05c9c0c0916b6"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "07d016c072603ae9b8d963a233ef15496318e746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff25ef99762093b40198f4560cfd78a0e6e61ffb", "patch": "@@ -1,3 +1,12 @@\n+2003-06-24  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (cfgrtl.o): Add expr.h dependency.\n+\t* cfgrtl.c: Include expr.h.\n+\t(mark_killed_regs, safe_insert_insn_on_edge): New\n+\tfunctions.\n+\t* config/i386/i386.h (AVOID_CCMODE_COPIES): Define.\n+\t* basic-block.h (safe_insert_insn_on_edge): Declare.\n+\n 2003-06-26  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-opts.c (missing_arg): Make non-static."}, {"sha": "5029c52db229660339297e8649b02a3d9854b2c6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ff25ef99762093b40198f4560cfd78a0e6e61ffb", "patch": "@@ -1659,7 +1659,7 @@ cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TR\n    $(BASIC_BLOCK_H) cfglayout.h\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n-   function.h except.h $(GGC_H) $(TM_P_H) insn-config.h\n+   function.h except.h $(GGC_H) $(TM_P_H) insn-config.h $(EXPR_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(GGC_H) $(TM_P_H)\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\"}, {"sha": "b26b14399d11122158b1ce4f8c370dbb8efd63a6", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=ff25ef99762093b40198f4560cfd78a0e6e61ffb", "patch": "@@ -340,6 +340,7 @@ extern void update_bb_for_insn\t\tPARAMS ((basic_block));\n extern void free_basic_block_vars\tPARAMS ((int));\n \n extern void insert_insn_on_edge\t\tPARAMS ((rtx, edge));\n+bool safe_insert_insn_on_edge (rtx, edge);\n \n extern void commit_edge_insertions\tPARAMS ((void));\n extern void commit_edge_insertions_watch_calls\tPARAMS ((void));"}, {"sha": "a08d29f3da94da025d181a60f039e04c8c9dfa63", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=ff25ef99762093b40198f4560cfd78a0e6e61ffb", "patch": "@@ -56,6 +56,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"insn-config.h\"\n #include \"cfglayout.h\"\n+#include \"expr.h\"\n \n /* Stubs in case we don't have a return insn.  */\n #ifndef HAVE_return\n@@ -88,6 +89,7 @@ static bool rtl_redirect_edge_and_branch (edge, basic_block);\n static edge rtl_split_block (basic_block, void *);\n static void rtl_dump_bb (basic_block, FILE *);\n static int rtl_verify_flow_info_1 (void);\n+static void mark_killed_regs (rtx, rtx, void *);\n \f\n /* Return true if NOTE is not one of the ones that must be kept paired,\n    so that we may simply delete it.  */\n@@ -1305,6 +1307,101 @@ insert_insn_on_edge (rtx pattern, edge e)\n   end_sequence ();\n }\n \n+/* Called from safe_insert_insn_on_edge through note_stores, marks live\n+   registers that are killed by the store.  */\n+static void\n+mark_killed_regs (rtx reg, rtx set ATTRIBUTE_UNUSED, void *data)\n+{\n+  regset killed = data;\n+  int regno, i;\n+\n+  if (GET_CODE (reg) == SUBREG)\n+    reg = SUBREG_REG (reg);\n+  if (!REG_P (reg))\n+    return;\n+  regno = REGNO (reg);\n+  if (regno >= FIRST_PSEUDO_REGISTER)\n+    SET_REGNO_REG_SET (killed, regno);\n+  else\n+    {\n+      for (i = 0; i < HARD_REGNO_NREGS (regno, GET_MODE (reg)); i++)\n+\tSET_REGNO_REG_SET (killed, regno + i);\n+    }\n+}\n+\n+/* Similar to insert_insn_on_edge, tries to put INSN to edge E.  Additionally\n+   it checks whether this will not clobber the registers that are live on the\n+   edge (i.e. it requieres liveness information to be up-to-date) and if there\n+   are some, then it tries to save and restore them.  Returns true if\n+   succesful.  */\n+bool\n+safe_insert_insn_on_edge (rtx insn, edge e)\n+{\n+  rtx x;\n+  regset_head killed_head;\n+  regset killed = INITIALIZE_REG_SET (killed_head);\n+  rtx save_regs = NULL_RTX;\n+  int regno, noccmode;\n+  enum machine_mode mode;\n+\n+#ifdef AVOID_CCMODE_COPIES\n+  noccmode = true;\n+#else\n+  noccmode = false;\n+#endif\n+\n+  for (x = insn; x; x = NEXT_INSN (x))\n+    if (INSN_P (x))\n+      note_stores (PATTERN (x), mark_killed_regs, killed);\n+  bitmap_operation (killed, killed, e->dest->global_live_at_start,\n+\t\t    BITMAP_AND);\n+\n+  EXECUTE_IF_SET_IN_REG_SET (killed, 0, regno,\n+    {\n+      mode = regno < FIRST_PSEUDO_REGISTER\n+\t      ? reg_raw_mode[regno]\n+\t      : GET_MODE (regno_reg_rtx[regno]);\n+      if (mode == VOIDmode)\n+\treturn false;\n+\n+      if (noccmode && mode == CCmode)\n+\treturn false;\n+\t\n+      save_regs = alloc_EXPR_LIST (0,\n+\t\t\t\t   alloc_EXPR_LIST (0,\n+\t\t\t\t\t\t    gen_reg_rtx (mode),\n+\t\t\t\t\t\t    gen_raw_REG (mode, regno)),\n+\t\t\t\t   save_regs);\n+    });\n+\n+  if (save_regs)\n+    {\n+      rtx from, to;\n+\n+      start_sequence ();\n+      for (x = save_regs; x; x = XEXP (x, 1))\n+\t{\n+\t  from = XEXP (XEXP (x, 0), 1);\n+\t  to = XEXP (XEXP (x, 0), 0);\n+\t  emit_move_insn (to, from);\n+\t}\n+      emit_insn (insn);\n+      for (x = save_regs; x; x = XEXP (x, 1))\n+\t{\n+\t  from = XEXP (XEXP (x, 0), 0);\n+\t  to = XEXP (XEXP (x, 0), 1);\n+\t  emit_move_insn (to, from);\n+\t}\n+      insn = get_insns ();\n+      end_sequence ();\n+      free_EXPR_LIST_list (&save_regs);\n+    }\n+  insert_insn_on_edge (insn, e);\n+  \n+  FREE_REG_SET (killed);\n+  return true;\n+}\n+\n /* Update the CFG for the instructions queued on edge E.  */\n \n static void"}, {"sha": "c115f6a21997a959e95b05974fa962a2c4d293df", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff25ef99762093b40198f4560cfd78a0e6e61ffb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ff25ef99762093b40198f4560cfd78a0e6e61ffb", "patch": "@@ -1123,6 +1123,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t       && (TARGET_64BIT || !TARGET_PARTIAL_REG_STALL))\t\\\n \t   || ((MODE2) == DImode && TARGET_64BIT))))\n \n+/* It is possible to write patterns to move flags; but until someone\n+   does it,  */\n+#define AVOID_CCMODE_COPIES\n \n /* Specify the modes required to caller save a given hard regno.\n    We do this on i386 to prevent flags from being saved at all."}]}