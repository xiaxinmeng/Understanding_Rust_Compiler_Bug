{"sha": "42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjMDg5OTcxZTQ5ODdjMWZjMTMzOGQ3ZmY2NTlmMmJlOWM5YjdlNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-09-02T10:43:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-02T10:43:10Z"}, "message": "trans.c (gnat_gimplify_expr): Gimplify the SAVE_EXPR built for misaligned arguments.\n\n\t* gcc-interface/trans.c (gnat_gimplify_expr) <ADDR_EXPR>: Gimplify the\n\tSAVE_EXPR built for misaligned arguments.  Remove redundant stuff.\n\t(addressable_p): Return true for more rvalues.\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r151319", "tree": {"sha": "accb684d9349123374e9b23c421aa6ac706bb724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/accb684d9349123374e9b23c421aa6ac706bb724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/comments", "author": null, "committer": null, "parents": [{"sha": "c68e4eede16081c2871cb1f5543b5c2eca74ffc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68e4eede16081c2871cb1f5543b5c2eca74ffc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68e4eede16081c2871cb1f5543b5c2eca74ffc1"}], "stats": {"total": 136, "additions": 95, "deletions": 41}, "files": [{"sha": "a37d1c06ce5fc50c21b75a8ae6645864e3edef55", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -1,3 +1,9 @@\n+2009-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_gimplify_expr) <ADDR_EXPR>: Gimplify the\n+\tSAVE_EXPR built for misaligned arguments.  Remove redundant stuff.\n+\t(addressable_p): Return true for more rvalues.\n+\n 2009-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-interface/utils2.c (maybe_wrap_malloc, maybe_wrap_free): Cast"}, {"sha": "29ab72a365f46a140465a543971ba2cf57a709db", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -5794,62 +5794,46 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n     case ADDR_EXPR:\n       op = TREE_OPERAND (expr, 0);\n \n-      /* If we're taking the address of a constant CONSTRUCTOR, force it to\n+      /* If we are taking the address of a constant CONSTRUCTOR, force it to\n \t be put into static memory.  We know it's going to be readonly given\n-\t the semantics we have and it's required to be static memory in\n-\t the case when the reference is in an elaboration procedure.   */\n+\t the semantics we have and it's required to be in static memory when\n+\t the reference is in an elaboration procedure.  */\n       if (TREE_CODE (op) == CONSTRUCTOR && TREE_CONSTANT (op))\n \t{\n \t  tree new_var = create_tmp_var (TREE_TYPE (op), \"C\");\n+\t  TREE_ADDRESSABLE (new_var) = 1;\n \n \t  TREE_READONLY (new_var) = 1;\n \t  TREE_STATIC (new_var) = 1;\n-\t  TREE_ADDRESSABLE (new_var) = 1;\n \t  DECL_INITIAL (new_var) = op;\n \n \t  TREE_OPERAND (expr, 0) = new_var;\n \t  recompute_tree_invariant_for_addr_expr (expr);\n \t  return GS_ALL_DONE;\n \t}\n \n-      /* If we are taking the address of a SAVE_EXPR, we are typically\n-\t processing a misaligned argument to be passed by reference in a\n-\t procedure call.  We just mark the operand as addressable + not\n-\t readonly here and let the common gimplifier code perform the\n-\t temporary creation, initialization, and \"instantiation\" in place of\n-\t the SAVE_EXPR in further operands, in particular in the copy back\n-\t code inserted after the call.  */\n-      else if (TREE_CODE (op) == SAVE_EXPR)\n-\t{\n-\t  TREE_ADDRESSABLE (op) = 1;\n-\t  TREE_READONLY (op) = 0;\n-\t}\n-\n-      /* We let the gimplifier process &COND_EXPR and expect it to yield the\n-\t address of the selected operand when it is addressable.  Besides, we\n-\t also expect addressable_p to only let COND_EXPRs where both arms are\n-\t addressable reach here.  */\n-      else if (TREE_CODE (op) == COND_EXPR)\n-\t;\n-\n-      /* Otherwise, if we are taking the address of something that is neither\n-\t reference, declaration, or constant, make a variable for the operand\n-\t here and then take its address.  If we don't do it this way, we may\n-\t confuse the gimplifier because it needs to know the variable is\n-\t addressable at this point.  This duplicates code in\n-\t internal_get_tmp_var, which is unfortunate.  */\n-      else if (TREE_CODE_CLASS (TREE_CODE (op)) != tcc_reference\n-\t       && TREE_CODE_CLASS (TREE_CODE (op)) != tcc_declaration\n-\t       && TREE_CODE_CLASS (TREE_CODE (op)) != tcc_constant)\n+      /* If we are taking the address of a SAVE_EXPR, we are typically dealing\n+\t with a misaligned argument to be passed by reference in a subprogram\n+\t call.  We cannot let the common gimplifier code perform the creation\n+\t of the temporary and its initialization because, in order to ensure\n+\t that the final copy operation is a store and since the temporary made\n+\t for a SAVE_EXPR is not addressable, it may create another temporary,\n+\t addressable this time, which would break the back copy mechanism for\n+\t an IN OUT parameter.  */\n+      if (TREE_CODE (op) == SAVE_EXPR && !SAVE_EXPR_RESOLVED_P (op))\n \t{\n-\t  tree new_var = create_tmp_var (TREE_TYPE (op), \"A\");\n-\t  gimple stmt;\n-\n+\t  tree mod, val = TREE_OPERAND (op, 0);\n+\t  tree new_var = create_tmp_var (TREE_TYPE (op), \"S\");\n \t  TREE_ADDRESSABLE (new_var) = 1;\n \n-\t  stmt = gimplify_assign (new_var, op, pre_p);\n-\t  if (EXPR_HAS_LOCATION (op))\n-\t    gimple_set_location (stmt, EXPR_LOCATION (op));\n+\t  mod = build2 (INIT_EXPR, TREE_TYPE (new_var), new_var, val);\n+\t  if (EXPR_HAS_LOCATION (val))\n+\t    SET_EXPR_LOCATION (mod, EXPR_LOCATION (val));\n+\t  gimplify_and_add (mod, pre_p);\n+\t  ggc_free (mod);\n+\n+\t  TREE_OPERAND (op, 0) = new_var;\n+\t  SAVE_EXPR_RESOLVED_P (op) = 1;\n \n \t  TREE_OPERAND (expr, 0) = new_var;\n \t  recompute_tree_invariant_for_addr_expr (expr);\n@@ -5866,7 +5850,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n       if ((TREE_CODE (op) == TYPE_DECL || TREE_CODE (op) == VAR_DECL)\n \t  && !TYPE_SIZES_GIMPLIFIED (TREE_TYPE (op)))\n \tswitch (TREE_CODE (TREE_TYPE (op)))\n-\t{\n+\t  {\n \t  case INTEGER_TYPE:\n \t  case ENUMERAL_TYPE:\n \t  case BOOLEAN_TYPE:\n@@ -5895,7 +5879,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \n \t  default:\n \t    break;\n-\t}\n+\t  }\n \n       /* ... fall through ... */\n \n@@ -6942,12 +6926,18 @@ addressable_p (tree gnu_expr, tree gnu_type)\n \n     case UNCONSTRAINED_ARRAY_REF:\n     case INDIRECT_REF:\n+      return true;\n+\n     case CONSTRUCTOR:\n     case STRING_CST:\n     case INTEGER_CST:\n     case NULL_EXPR:\n     case SAVE_EXPR:\n     case CALL_EXPR:\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+      /* All rvalues are deemed addressable since taking their address will\n+\t force a temporary to be created by the middle-end.  */\n       return true;\n \n     case COND_EXPR:"}, {"sha": "1d1679002f74a9cd588ed8bc73ee81865ded5150", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -1,3 +1,10 @@\n+2009-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/misaligned_param.adb: New test.\n+\t* gnat.dg/misaligned_param_pkg.ad[sb]: New helper.\n+\t* gnat.dg/slice7.adb: Add 1 more related case.\n+\n 2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/guality/guality.c: Expect to fail for now."}, {"sha": "dd591d06a8348fb4cffcb75ad94afb9ad12ae597", "filename": "gcc/testsuite/gnat.dg/misaligned_param.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param.adb?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -0,0 +1,30 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+with Misaligned_Param_Pkg;\n+\n+procedure Misaligned_Param is\n+\n+   procedure Channel_Eth (Status : out Integer; Kind : out Integer);\n+\n+   pragma Import (External, Channel_Eth);\n+   pragma Import_Valued_Procedure\n+     (Channel_Eth, \"channel_eth\", (Integer, Integer), (VALUE, REFERENCE));\n+\n+   type Channel is record\n+      B : Boolean;\n+      Kind : Integer;\n+   end record;\n+   pragma Pack (Channel);\n+\n+   MyChan : Channel;\n+   Status : Integer;\n+\n+begin\n+   MyChan.Kind := 0;\n+   Channel_Eth (Status => Status, Kind => MyChan.Kind);\n+\n+   if Mychan.Kind = 0 then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "888ed18c3ae55bdac7a16d2bf27bfd3495aab22e", "filename": "gcc/testsuite/gnat.dg/misaligned_param_pkg.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.adb?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -0,0 +1,14 @@\n+package body Misaligned_Param_Pkg is\n+\n+  type IP is access all Integer;\n+\n+  function Channel_Eth (Kind : IP) return Integer;\n+  pragma Export (Ada, Channel_Eth, \"channel_eth\");\n+\n+  function Channel_Eth (Kind : IP) return Integer is\n+  begin\n+    Kind.all := 111;\n+    return 0;\n+  end;\n+\n+end Misaligned_Param_Pkg;"}, {"sha": "7934c3f343e958b8f1c436983b3056ce0a49e0b4", "filename": "gcc/testsuite/gnat.dg/misaligned_param_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_param_pkg.ads?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -0,0 +1,5 @@\n+package Misaligned_Param_Pkg is\n+\n+  pragma Elaborate_Body (Misaligned_Param_Pkg);\n+\n+end Misaligned_Param_Pkg;"}, {"sha": "bb68c1f0f1702482da78edb4ba147e7567e67b5e", "filename": "gcc/testsuite/gnat.dg/slice7.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fslice7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c089971e4987c1fc1338d7ff659f2be9c9b7e5/gcc%2Ftestsuite%2Fgnat.dg%2Fslice7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fslice7.adb?ref=42c089971e4987c1fc1338d7ff659f2be9c9b7e5", "patch": "@@ -27,6 +27,8 @@ procedure Slice7 is\n   Obj : Discrete_Type;\n \n begin\n+  Put (Convert_Put(Discrete_Type'Pos (Obj)));\n+\n   Put (Convert_Put(Discrete_Type'Pos (Obj))\n        (Buffer_Start..Buffer_End));\n "}]}