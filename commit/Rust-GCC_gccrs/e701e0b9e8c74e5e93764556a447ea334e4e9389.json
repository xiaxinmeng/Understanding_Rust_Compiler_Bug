{"sha": "e701e0b9e8c74e5e93764556a447ea334e4e9389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwMWUwYjllOGM3NGU1ZTkzNzY0NTU2YTQ0N2VhMzM0ZTRlOTM4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-06-12T16:06:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-06-12T16:06:38Z"}, "message": "Fix pessimistic DImode handling in combine.c:make_field_assignment\n\nThe make_field_assignment code:\n\n      src = force_to_mode (src, mode,\n\t\t       GET_MODE_PRECISION (mode) >= HOST_BITS_PER_WIDE_INT\n\t\t       ? HOST_WIDE_INT_M1U\n\t\t       : (HOST_WIDE_INT_1U << len) - 1,\n\t\t       0);\n\nwould ignore the field length len for DImode, even though DImode can be\nhandled using HWIs.  I think the code should be testing len instead.\n\n2017-06-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* combine.c (make_field_assignment): Check len rather than the mode\n\tprecision when calling force_to_mode.\n\nFrom-SVN: r249128", "tree": {"sha": "3ddda6c404d525cc5ed663ea3b8f6470ade31c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddda6c404d525cc5ed663ea3b8f6470ade31c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e701e0b9e8c74e5e93764556a447ea334e4e9389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e701e0b9e8c74e5e93764556a447ea334e4e9389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e701e0b9e8c74e5e93764556a447ea334e4e9389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e701e0b9e8c74e5e93764556a447ea334e4e9389/comments", "author": null, "committer": null, "parents": [{"sha": "64ff4f60d0ac97acdfd869d3655cc962923faa20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ff4f60d0ac97acdfd869d3655cc962923faa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ff4f60d0ac97acdfd869d3655cc962923faa20"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "cc5435d54a60bba6c4bb125a74c9441267c45b22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e701e0b9e8c74e5e93764556a447ea334e4e9389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e701e0b9e8c74e5e93764556a447ea334e4e9389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e701e0b9e8c74e5e93764556a447ea334e4e9389", "patch": "@@ -1,3 +1,8 @@\n+2017-06-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* combine.c (make_field_assignment): Check len rather than the mode\n+\tprecision when calling force_to_mode.\n+\n 2017-06-12  Georg-Johann Lay  <avr@gjlay.de>\n \n \tSupport multilibs and devices that see flash in RAM address range."}, {"sha": "2d49bc2233c98ac7d4f8e59d80458d7bee39269c", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e701e0b9e8c74e5e93764556a447ea334e4e9389/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e701e0b9e8c74e5e93764556a447ea334e4e9389/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e701e0b9e8c74e5e93764556a447ea334e4e9389", "patch": "@@ -9634,7 +9634,7 @@ make_field_assignment (rtx x)\n \t\t\t\t\t\t     other, pos),\n \t\t\t       dest);\n   src = force_to_mode (src, mode,\n-\t\t       GET_MODE_PRECISION (mode) >= HOST_BITS_PER_WIDE_INT\n+\t\t       len >= HOST_BITS_PER_WIDE_INT\n \t\t       ? HOST_WIDE_INT_M1U\n \t\t       : (HOST_WIDE_INT_1U << len) - 1,\n \t\t       0);"}]}