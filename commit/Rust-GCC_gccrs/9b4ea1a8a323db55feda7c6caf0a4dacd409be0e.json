{"sha": "9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0ZWExYThhMzIzZGI1NWZlZGE3YzZjYWYwYTRkYWNkNDA5YmUwZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-18T19:01:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-18T19:01:41Z"}, "message": "builtin-abs-1.c, [...]: New tests.\n\n\t* gcc.c-torture/execute/builtin-abs-1.c,\n\tgcc.c-torture/execute/builtin-abs-2.c: New tests.\n\nFrom-SVN: r38358", "tree": {"sha": "8217526fc5b0a843aa9314a0accd2c6b383687e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8217526fc5b0a843aa9314a0accd2c6b383687e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1f4d9d2804a8f244a06bff2d22d62906cccbb8"}], "stats": {"total": 321, "additions": 321, "deletions": 0}, "files": [{"sha": "89b951866eb2d982ed44b86fb883e074d7418329", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "patch": "@@ -1,3 +1,8 @@\n+2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/execute/builtin-abs-1.c,\n+\tgcc.c-torture/execute/builtin-abs-2.c: New tests.\n+\n 2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * gcc.dg/cpp/multiline.c: New test."}, {"sha": "8a34353763d4535a1cf9b58b11d5123b51f04faa", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-abs-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-1.c?ref=9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "patch": "@@ -0,0 +1,160 @@\n+/* Test for builtin abs, labs, llabs, imaxabs.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+\n+/* These next definitions are kludges.  When GCC has a <stdint.h> it\n+   should be used.\n+*/\n+#include <limits.h>\n+#if INT_MAX == __LONG_LONG_MAX__\n+typedef int intmax_t;\n+#define INTMAX_MAX INT_MAX\n+#elif LONG_MAX == __LONG_LONG_MAX__\n+typedef long intmax_t;\n+#define INTMAX_MAX LONG_MAX\n+#else\n+typedef long long intmax_t;\n+#define INTMAX_MAX __LONG_LONG_MAX__\n+#endif\n+\n+extern int abs (int);\n+extern long labs (long);\n+extern long long llabs (long long);\n+extern intmax_t imaxabs (intmax_t);\n+extern void abort (void);\n+extern void exit (int);\n+\n+extern void link_failure (void);\n+\n+int\n+main (void)\n+{\n+  /* For each type, test both runtime and compile time (constant folding)\n+     optimization.  */\n+  volatile int i0 = 0, i1 = 1, im1 = -1, imin = -INT_MAX, imax = INT_MAX;\n+  volatile long l0 = 0L, l1 = 1L, lm1 = -1L, lmin = -LONG_MAX, lmax = LONG_MAX;\n+  volatile long long ll0 = 0LL, ll1 = 1LL, llm1 = -1LL;\n+  volatile long long llmin = -__LONG_LONG_MAX__, llmax = __LONG_LONG_MAX__;\n+  volatile intmax_t imax0 = 0, imax1 = 1, imaxm1 = -1;\n+  volatile intmax_t imaxmin = -INTMAX_MAX, imaxmax = INTMAX_MAX;\n+  if (abs (i0) != 0)\n+    abort ();\n+  if (abs (0) != 0)\n+    link_failure ();\n+  if (abs (i1) != 1)\n+    abort ();\n+  if (abs (1) != 1)\n+    link_failure ();\n+  if (abs (im1) != 1)\n+    abort ();\n+  if (abs (-1) != 1)\n+    link_failure ();\n+  if (abs (imin) != INT_MAX)\n+    abort ();\n+  if (abs (-INT_MAX) != INT_MAX)\n+    link_failure ();\n+  if (abs (imax) != INT_MAX)\n+    abort ();\n+  if (abs (INT_MAX) != INT_MAX)\n+    link_failure ();\n+  if (labs (l0) != 0L)\n+    abort ();\n+  if (labs (0L) != 0L)\n+    link_failure ();\n+  if (labs (l1) != 1L)\n+    abort ();\n+  if (labs (1L) != 1L)\n+    link_failure ();\n+  if (labs (lm1) != 1L)\n+    abort ();\n+  if (labs (-1L) != 1L)\n+    link_failure ();\n+  if (labs (lmin) != LONG_MAX)\n+    abort ();\n+  if (labs (-LONG_MAX) != LONG_MAX)\n+    link_failure ();\n+  if (labs (lmax) != LONG_MAX)\n+    abort ();\n+  if (labs (LONG_MAX) != LONG_MAX)\n+    link_failure ();\n+  if (llabs (ll0) != 0LL)\n+    abort ();\n+  if (llabs (0LL) != 0LL)\n+    link_failure ();\n+  if (llabs (ll1) != 1LL)\n+    abort ();\n+  if (llabs (1LL) != 1LL)\n+    link_failure ();\n+  if (llabs (llm1) != 1LL)\n+    abort ();\n+  if (llabs (-1LL) != 1LL)\n+    link_failure ();\n+  if (llabs (llmin) != __LONG_LONG_MAX__)\n+    abort ();\n+  if (llabs (-__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n+    link_failure ();\n+  if (llabs (llmax) != __LONG_LONG_MAX__)\n+    abort ();\n+  if (llabs (__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n+    link_failure ();\n+  if (imaxabs (imax0) != 0)\n+    abort ();\n+  if (imaxabs (0) != 0)\n+    link_failure ();\n+  if (imaxabs (imax1) != 1)\n+    abort ();\n+  if (imaxabs (1) != 1)\n+    link_failure ();\n+  if (imaxabs (imaxm1) != 1)\n+    abort ();\n+  if (imaxabs (-1) != 1)\n+    link_failure ();\n+  if (imaxabs (imaxmin) != INTMAX_MAX)\n+    abort ();\n+  if (imaxabs (-INTMAX_MAX) != INTMAX_MAX)\n+    link_failure ();\n+  if (imaxabs (imaxmax) != INTMAX_MAX)\n+    abort ();\n+  if (imaxabs (INTMAX_MAX) != INTMAX_MAX)\n+    link_failure ();\n+  exit (0);\n+}\n+\n+/* All the above cases should have been optimized to something else,\n+   even if not optimizing (unless -fno-builtin was specified).  So any\n+   remaining calls to the original functions should abort.  */\n+\n+static int\n+abs (int x)\n+{\n+  abort ();\n+}\n+\n+static long\n+labs (long x)\n+{\n+  abort ();\n+}\n+\n+static long long\n+llabs (long long x)\n+{\n+  abort ();\n+}\n+\n+static intmax_t\n+imaxabs (intmax_t x)\n+{\n+  abort ();\n+}\n+\n+/* When optimizing, all the constant cases should have been\n+   constant folded, so no calls to link_failure should remain.  In any case,\n+   link_failure should not be called.  */\n+\n+#ifndef __OPTIMIZE__\n+void\n+link_failure (void)\n+{\n+  abort ();\n+}\n+#endif"}, {"sha": "b4e18796560e47de451d97a2b4c76f84f92f0a3b", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-abs-2.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4ea1a8a323db55feda7c6caf0a4dacd409be0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-abs-2.c?ref=9b4ea1a8a323db55feda7c6caf0a4dacd409be0e", "patch": "@@ -0,0 +1,156 @@\n+/* Test for builtin abs, labs, llabs, imaxabs.  Test for __builtin versions. */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+\n+/* These next definitions are kludges.  When GCC has a <stdint.h> it\n+   should be used.\n+*/\n+#include <limits.h>\n+#if INT_MAX == __LONG_LONG_MAX__\n+typedef int intmax_t;\n+#define INTMAX_MAX INT_MAX\n+#elif LONG_MAX == __LONG_LONG_MAX__\n+typedef long intmax_t;\n+#define INTMAX_MAX LONG_MAX\n+#else\n+typedef long long intmax_t;\n+#define INTMAX_MAX __LONG_LONG_MAX__\n+#endif\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+extern void link_failure (void);\n+\n+int\n+main (void)\n+{\n+  /* For each type, test both runtime and compile time (constant folding)\n+     optimization.  */\n+  volatile int i0 = 0, i1 = 1, im1 = -1, imin = -INT_MAX, imax = INT_MAX;\n+  volatile long l0 = 0L, l1 = 1L, lm1 = -1L, lmin = -LONG_MAX, lmax = LONG_MAX;\n+  volatile long long ll0 = 0LL, ll1 = 1LL, llm1 = -1LL;\n+  volatile long long llmin = -__LONG_LONG_MAX__, llmax = __LONG_LONG_MAX__;\n+  volatile intmax_t imax0 = 0, imax1 = 1, imaxm1 = -1;\n+  volatile intmax_t imaxmin = -INTMAX_MAX, imaxmax = INTMAX_MAX;\n+  if (__builtin_abs (i0) != 0)\n+    abort ();\n+  if (__builtin_abs (0) != 0)\n+    link_failure ();\n+  if (__builtin_abs (i1) != 1)\n+    abort ();\n+  if (__builtin_abs (1) != 1)\n+    link_failure ();\n+  if (__builtin_abs (im1) != 1)\n+    abort ();\n+  if (__builtin_abs (-1) != 1)\n+    link_failure ();\n+  if (__builtin_abs (imin) != INT_MAX)\n+    abort ();\n+  if (__builtin_abs (-INT_MAX) != INT_MAX)\n+    link_failure ();\n+  if (__builtin_abs (imax) != INT_MAX)\n+    abort ();\n+  if (__builtin_abs (INT_MAX) != INT_MAX)\n+    link_failure ();\n+  if (__builtin_labs (l0) != 0L)\n+    abort ();\n+  if (__builtin_labs (0L) != 0L)\n+    link_failure ();\n+  if (__builtin_labs (l1) != 1L)\n+    abort ();\n+  if (__builtin_labs (1L) != 1L)\n+    link_failure ();\n+  if (__builtin_labs (lm1) != 1L)\n+    abort ();\n+  if (__builtin_labs (-1L) != 1L)\n+    link_failure ();\n+  if (__builtin_labs (lmin) != LONG_MAX)\n+    abort ();\n+  if (__builtin_labs (-LONG_MAX) != LONG_MAX)\n+    link_failure ();\n+  if (__builtin_labs (lmax) != LONG_MAX)\n+    abort ();\n+  if (__builtin_labs (LONG_MAX) != LONG_MAX)\n+    link_failure ();\n+  if (__builtin_llabs (ll0) != 0LL)\n+    abort ();\n+  if (__builtin_llabs (0LL) != 0LL)\n+    link_failure ();\n+  if (__builtin_llabs (ll1) != 1LL)\n+    abort ();\n+  if (__builtin_llabs (1LL) != 1LL)\n+    link_failure ();\n+  if (__builtin_llabs (llm1) != 1LL)\n+    abort ();\n+  if (__builtin_llabs (-1LL) != 1LL)\n+    link_failure ();\n+  if (__builtin_llabs (llmin) != __LONG_LONG_MAX__)\n+    abort ();\n+  if (__builtin_llabs (-__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n+    link_failure ();\n+  if (__builtin_llabs (llmax) != __LONG_LONG_MAX__)\n+    abort ();\n+  if (__builtin_llabs (__LONG_LONG_MAX__) != __LONG_LONG_MAX__)\n+    link_failure ();\n+  if (__builtin_imaxabs (imax0) != 0)\n+    abort ();\n+  if (__builtin_imaxabs (0) != 0)\n+    link_failure ();\n+  if (__builtin_imaxabs (imax1) != 1)\n+    abort ();\n+  if (__builtin_imaxabs (1) != 1)\n+    link_failure ();\n+  if (__builtin_imaxabs (imaxm1) != 1)\n+    abort ();\n+  if (__builtin_imaxabs (-1) != 1)\n+    link_failure ();\n+  if (__builtin_imaxabs (imaxmin) != INTMAX_MAX)\n+    abort ();\n+  if (__builtin_imaxabs (-INTMAX_MAX) != INTMAX_MAX)\n+    link_failure ();\n+  if (__builtin_imaxabs (imaxmax) != INTMAX_MAX)\n+    abort ();\n+  if (__builtin_imaxabs (INTMAX_MAX) != INTMAX_MAX)\n+    link_failure ();\n+  exit (0);\n+}\n+\n+/* All the above cases should have been optimized to something else,\n+   not converted to function calls.  So any calls to the non-__builtin\n+   functions should abort.  */\n+\n+static int\n+abs (int x)\n+{\n+  abort ();\n+}\n+\n+static long\n+labs (long x)\n+{\n+  abort ();\n+}\n+\n+static long long\n+llabs (long long x)\n+{\n+  abort ();\n+}\n+\n+static intmax_t\n+imaxabs (intmax_t x)\n+{\n+  abort ();\n+}\n+\n+/* When optimizing, all the constant cases should have been\n+   constant folded, so no calls to link_failure should remain.  In any case,\n+   link_failure should not be called.  */\n+\n+#ifndef __OPTIMIZE__\n+void\n+link_failure (void)\n+{\n+  abort ();\n+}\n+#endif"}]}