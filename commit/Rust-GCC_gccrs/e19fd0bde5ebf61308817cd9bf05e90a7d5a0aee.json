{"sha": "e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5ZmQwYmRlNWViZjYxMzA4ODE3Y2Q5YmYwNWU5MGE3ZDVhMGFlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:54:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:54:38Z"}, "message": "[multiple changes]\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: Code and comments cleanup.\n\n2014-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb Free debug flags -gnatd.D, -gnatd.G and -gnatd.V *\n\t* errout.adb (Compilation_Errors): Remove special handling in\n\tGNATprove mode.\n\t* gnat1drv.adb (Adjust_Global_Switches): Remove handling of the\n\tremoved debug flags.\n\t* gnat_rm.texi: Initial documentation for Abstract_State, Depends,\n\tGlobal, Initial_Condition, Initializes and Refined_State pragmas and\n\taspects.\n\t* opt.ads (Frame_Condition_Mode, Formal_Extensions,\n\tSPARK_Strict_Mode): Remove global flags.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Check of no hidden state\n\talways performed now, on packages declaring a null state.\n\t(Signed_Integer_Type_Declaration): Remove ill-designed attempt\n\tat providing pedantic mode for bounds of integer types.\n\t* sem_ch4.adb (Analyze_Quantified_Expression): Warning on suspicious\n\t\"some\" quantified expression now issued under control of -gnatw.t,\n\tlike the other warning on unused bound variable.\n\t* sem_prag.adb (Check_Precondition_Postcondition): Remove useless test\n\ton removed flag.\n\t(Analyze_Pragma): Remove tests for SPARK 2014\n\tpragmas, not officially allowed by GNAT.\n\nFrom-SVN: r206837", "tree": {"sha": "9b3fc85e2ccd123d30426b95b262099887e47098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b3fc85e2ccd123d30426b95b262099887e47098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/comments", "author": null, "committer": null, "parents": [{"sha": "58827738dba7c0e8be4ca2a1d0dc2e20dc660b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58827738dba7c0e8be4ca2a1d0dc2e20dc660b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58827738dba7c0e8be4ca2a1d0dc2e20dc660b6d"}], "stats": {"total": 295, "additions": 128, "deletions": 167}, "files": [{"sha": "8aa7d605aa04831665abc6837e456c7e6737d4a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -1,3 +1,31 @@\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: Code and comments cleanup.\n+\n+2014-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb Free debug flags -gnatd.D, -gnatd.G and -gnatd.V *\n+\t* errout.adb (Compilation_Errors): Remove special handling in\n+\tGNATprove mode.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Remove handling of the\n+\tremoved debug flags.\n+\t* gnat_rm.texi: Initial documentation for Abstract_State, Depends,\n+\tGlobal, Initial_Condition, Initializes and Refined_State pragmas and\n+\taspects.\n+\t* opt.ads (Frame_Condition_Mode, Formal_Extensions,\n+\tSPARK_Strict_Mode): Remove global flags.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Check of no hidden state\n+\talways performed now, on packages declaring a null state.\n+\t(Signed_Integer_Type_Declaration): Remove ill-designed attempt\n+\tat providing pedantic mode for bounds of integer types.\n+\t* sem_ch4.adb (Analyze_Quantified_Expression): Warning on suspicious\n+\t\"some\" quantified expression now issued under control of -gnatw.t,\n+\tlike the other warning on unused bound variable.\n+\t* sem_prag.adb (Check_Precondition_Postcondition): Remove useless test\n+\ton removed flag.\n+\t(Analyze_Pragma): Remove tests for SPARK 2014\n+\tpragmas, not officially allowed by GNAT.\n+\n 2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Ensure that"}, {"sha": "4cc8febb8888ba7a638dc6e29786aef12d728c55", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -121,10 +121,10 @@ package body Debug is\n    --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n-   --  d.D  SPARK strict mode\n+   --  d.D\n    --  d.E  Turn selected errors into warnings\n-   --  d.F  SPARK mode\n-   --  d.G  Frame condition mode for gnat2why\n+   --  d.F  Debug mode for GNATprove\n+   --  d.G\n    --  d.H\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Disable parallel SCIL generation mode\n@@ -139,7 +139,7 @@ package body Debug is\n    --  d.S  Force Optimize_Alignment (Space)\n    --  d.T  Force Optimize_Alignment (Time)\n    --  d.U  Ignore indirect calls for static elaboration\n-   --  d.V  Extensions for formal verification\n+   --  d.V\n    --  d.W  Print out debugging information for Walk_Library_Items\n    --  d.X\n    --  d.Y\n@@ -594,21 +594,12 @@ package body Debug is\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n-   --  d.D  SPARK strict mode. Interpret compiler permissions as strictly as\n-   --       possible in SPARK mode.\n-\n    --  d.E  Turn selected errors into warnings. This debug switch causes a\n    --       specific set of error messages into warnings. Setting this switch\n    --       causes Opt.Error_To_Warning to be set to True.\n \n-   --  d.F  SPARK mode. Generate AST in a form suitable for formal\n-   --       verification, as well as additional cross reference information in\n-   --       ALI files to compute effects of subprograms. Note that ALI files\n-   --       are only written when option d.G is also given.\n-\n-   --  d.G  Frame condition mode for gnat2why. In this mode, gnat2why will\n-   --       generate ALI files with an extra section which contains the effects\n-   --       of subprograms.\n+   --  d.F  Sets GNATprove_Mode to True. This allows debugging the frontend in\n+   --       the special mode used by GNATprove.\n \n    --  d.I  Do not ignore enum representation clauses in CodePeer mode.\n    --       The default of ignoring representation clauses for enumeration\n@@ -657,10 +648,6 @@ package body Debug is\n    --       reverts to the behavior of earlier compilers, which ignored\n    --       indirect calls.\n \n-   --  d.V  Extensions for formal verification. New attributes/aspects/pragmas\n-   --       defined in GNAT for formal verification with the tool GNATprove are\n-   --       only accepted under this switch.\n-\n    --  d.W  Print out debugging information for Walk_Library_Items, including\n    --       the order in which units are walked. This is primarily for use in\n    --       debugging CodePeer mode."}, {"sha": "78193ff72803058c6a0bec8f476c7ab799f67688", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -233,15 +233,6 @@ package body Errout is\n    begin\n       if not Finalize_Called then\n          raise Program_Error;\n-\n-      --  In formal verification mode, errors issued when analyzing code\n-      --  are not compilation errors, and should not result in exiting with\n-      --  an error status. These errors are handled in the driver of the\n-      --  verification process instead.\n-\n-      elsif GNATprove_Mode and not Frame_Condition_Mode then\n-         return False;\n-\n       else\n          return Erroutc.Compilation_Errors;\n       end if;"}, {"sha": "fd5063268c97a3c7d94b3f599b2dd94739dbf12c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -298,12 +298,6 @@ procedure Gnat1drv is\n          Treat_Categorization_Errors_As_Warnings := True;\n       end if;\n \n-      --  Set switches for formal verification mode\n-\n-      if Debug_Flag_Dot_VV then\n-         Formal_Extensions := True;\n-      end if;\n-\n       --  Enable GNATprove_Mode when using -gnatd.F switch\n \n       if Debug_Flag_Dot_FF then\n@@ -315,24 +309,6 @@ procedure Gnat1drv is\n \n       if GNATprove_Mode then\n \n-         --  Set strict standard interpretation of compiler permissions\n-\n-         if Debug_Flag_Dot_DD then\n-            SPARK_Strict_Mode := True;\n-         end if;\n-\n-         --  Distinguish between the two modes of gnat2why: frame condition\n-         --  generation (generation of ALI files) and analysis (no ALI files\n-         --  generated). This is done with the switch -gnatd.G, which activates\n-         --  frame condition mode. The other changes in behavior depending on\n-         --  this switch are done in gnat2why directly.\n-\n-         if Debug_Flag_Dot_GG then\n-            Frame_Condition_Mode := True;\n-         else\n-            Opt.Disable_ALI_File := True;\n-         end if;\n-\n          --  Turn off inlining, which would confuse formal verification output\n          --  and gain nothing.\n "}, {"sha": "aa47b56385fc3772919c7871137629fe2f5da044", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -98,6 +98,7 @@ About This Guide\n Implementation Defined Pragmas\n \n * Pragma Abort_Defer::\n+* Pragma Abstract_State::\n * Pragma Ada_83::\n * Pragma Ada_95::\n * Pragma Ada_05::\n@@ -137,6 +138,7 @@ Implementation Defined Pragmas\n * Pragma Debug::\n * Pragma Debug_Policy::\n * Pragma Default_Storage_Pool::\n+* Pragma Depends::\n * Pragma Detect_Blocking::\n * Pragma Disable_Atomic_Synchronization::\n * Pragma Dispatching_Domain::\n@@ -157,6 +159,7 @@ Implementation Defined Pragmas\n * Pragma Favor_Top_Level::\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n+* Pragma Global::\n * Pragma Ident::\n * Pragma Implementation_Defined::\n * Pragma Implemented::\n@@ -168,7 +171,9 @@ Implementation Defined Pragmas\n * Pragma Import_Valued_Procedure::\n * Pragma Independent::\n * Pragma Independent_Components::\n+* Pragma Initial_Condition::\n * Pragma Initialize_Scalars::\n+* Pragma Initializes::\n * Pragma Inline_Always::\n * Pragma Inline_Generic::\n * Pragma Interface::\n@@ -225,6 +230,7 @@ Implementation Defined Pragmas\n * Pragma Pure_12::\n * Pragma Pure_Function::\n * Pragma Ravenscar::\n+* Pragma Refined_State::\n * Pragma Relative_Deadline::\n * Pragma Remote_Access_Type::\n * Pragma Restricted_Run_Time::\n@@ -277,14 +283,15 @@ Implementation Defined Aspects\n * Aspect Abstract_State::\n * Aspect Ada_2005::\n * Aspect Ada_2012::\n-* Pragma Allow_Integer_Address::\n * Aspect Compiler_Unit::\n * Aspect Contract_Cases::\n * Aspect Depends::\n * Aspect Dimension::\n * Aspect Dimension_System::\n * Aspect Favor_Top_Level::\n * Aspect Global::\n+* Aspect Initial_Condition::\n+* Aspect Initializes::\n * Aspect Inline_Always::\n * Aspect Invariant::\n * Aspect Object_Size::\n@@ -294,6 +301,7 @@ Implementation Defined Aspects\n * Aspect Pure_05::\n * Aspect Pure_12::\n * Aspect Pure_Function::\n+* Aspect Refined_State::\n * Aspect Remote_Access_Type::\n * Aspect Scalar_Storage_Order::\n * Aspect Shared::\n@@ -923,6 +931,7 @@ consideration, the use of these pragmas should be minimized.\n \n @menu\n * Pragma Abort_Defer::\n+* Pragma Abstract_State::\n * Pragma Ada_83::\n * Pragma Ada_95::\n * Pragma Ada_05::\n@@ -962,6 +971,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Debug::\n * Pragma Debug_Policy::\n * Pragma Default_Storage_Pool::\n+* Pragma Depends::\n * Pragma Detect_Blocking::\n * Pragma Disable_Atomic_Synchronization::\n * Pragma Dispatching_Domain::\n@@ -982,6 +992,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Favor_Top_Level::\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n+* Pragma Global::\n * Pragma Ident::\n * Pragma Implementation_Defined::\n * Pragma Implemented::\n@@ -993,7 +1004,9 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Import_Valued_Procedure::\n * Pragma Independent::\n * Pragma Independent_Components::\n+* Pragma Initial_Condition::\n * Pragma Initialize_Scalars::\n+* Pragma Initializes::\n * Pragma Inline_Always::\n * Pragma Inline_Generic::\n * Pragma Interface::\n@@ -1050,6 +1063,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Pure_12::\n * Pragma Pure_Function::\n * Pragma Ravenscar::\n+* Pragma Refined_State::\n * Pragma Relative_Deadline::\n * Pragma Remote_Access_Type::\n * Pragma Restricted_Run_Time::\n@@ -1115,6 +1129,13 @@ the effect of deferring aborts for the sequence of statements (but not\n for the declarations or handlers, if any, associated with this statement\n sequence).\n \n+@node Pragma Abstract_State\n+@unnumberedsec Pragma Abstract_State\n+@findex Abstract_State\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.1.4.\n+\n @node Pragma Ada_83\n @unnumberedsec Pragma Ada_83\n @findex Ada_83\n@@ -2411,6 +2432,13 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+@node Pragma Depends\n+@unnumberedsec Pragma Depends\n+@findex Depends\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 6.1.5.\n+\n @node Pragma Detect_Blocking\n @unnumberedsec Pragma Detect_Blocking\n @findex Detect_Blocking\n@@ -3188,6 +3216,13 @@ For digits values from 10 to 15, G float format will be used.\n Digits values above 15 are not allowed.\n @end itemize\n \n+@node Pragma Global\n+@unnumberedsec Pragma Global\n+@findex Global\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 6.1.4.\n+\n @node Pragma Ident\n @unnumberedsec Pragma Ident\n @findex Ident\n@@ -3629,6 +3664,13 @@ manipulate separate components in the composite object. This may place\n constraints on the representation of the object (for instance prohibiting\n tight packing).\n \n+@node Pragma Initial_Condition\n+@unnumberedsec Pragma Initial_Condition\n+@findex Initial_Condition\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.1.6.\n+\n @node Pragma Initialize_Scalars\n @unnumberedsec Pragma Initialize_Scalars\n @findex Initialize_Scalars\n@@ -3691,6 +3733,13 @@ of stack required, so it is probably a good idea to turn on stack\n checking (see description of stack checking in the @value{EDITION}\n User's Guide) when using this pragma.\n \n+@node Pragma Initializes\n+@unnumberedsec Pragma Initializes\n+@findex Initializes\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.1.5.\n+\n @node Pragma Inline_Always\n @unnumberedsec Pragma Inline_Always\n @findex Inline_Always\n@@ -5852,6 +5901,13 @@ pragma Profile (Ravenscar);\n @noindent\n which is the preferred method of setting the @code{Ravenscar} profile.\n \n+@node Pragma Refined_State\n+@unnumberedsec Pragma Refined_State\n+@findex Refined_State\n+@noindent\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.2.2.\n+\n @node Pragma Relative_Deadline\n @unnumberedsec Pragma Relative_Deadline\n @findex Relative_Deadline\n@@ -7508,6 +7564,8 @@ clause.\n * Aspect Dimension_System::\n * Aspect Favor_Top_Level::\n * Aspect Global::\n+* Aspect Initial_Condition::\n+* Aspect Initializes::\n * Aspect Inline_Always::\n * Aspect Invariant::\n * Aspect Lock_Free::\n@@ -7518,6 +7576,7 @@ clause.\n * Aspect Pure_05::\n * Aspect Pure_12::\n * Aspect Pure_Function::\n+* Aspect Refined_State::\n * Aspect Remote_Access_Type::\n * Aspect Scalar_Storage_Order::\n * Aspect Shared::\n@@ -7674,7 +7733,19 @@ This aspect is equivalent to pragma @code{Favor_Top_Level}.\n @unnumberedsec Aspect Global\n @findex Global\n @noindent\n-This aspect is equivalent pragma @code{Global}.\n+This aspect is equivalent to pragma @code{Global}.\n+\n+@node Aspect Initial_Condition\n+@unnumberedsec Aspect Initial_Condition\n+@findex Initial_Condition\n+@noindent\n+This aspect is equivalent to pragma @code{Initial_Condition}.\n+\n+@node Aspect Initializes\n+@unnumberedsec Aspect Initializes\n+@findex Initializes\n+@noindent\n+This aspect is equivalent to pragma @code{Initializes}.\n \n @node Aspect Inline_Always\n @unnumberedsec Aspect Inline_Always\n@@ -7744,6 +7815,12 @@ This aspect is equivalent to pragma @code{Pure_12}.\n @noindent\n This aspect is equivalent to pragma @code{Pure_Function}.\n \n+@node Aspect Refined_State\n+@unnumberedsec Aspect Refined_State\n+@findex Refined_State\n+@noindent\n+This aspect is equivalent to pragma @code{Refined_State}.\n+\n @node Aspect Remote_Access_Type\n @unnumberedsec Aspect Remote_Access_Type\n @findex Remote_Access_Type"}, {"sha": "28381bf15dff370682da19bb0b1c2f9a3debc819", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -2001,17 +2001,6 @@ package Opt is\n    -- Modes for Formal Verification --\n    -----------------------------------\n \n-   Frame_Condition_Mode : Boolean := False;\n-   --  Specific mode to be used in combination with GNATprove_Mode. If set to\n-   --  true, ALI files containing the frame conditions (global effects) are\n-   --  generated, and analysis is *not* performed. If not true, analysis is\n-   --  performed. Set by debug flag -gnatd.G.\n-\n-   Formal_Extensions : Boolean := False;\n-   --  When this flag is set, new aspects/pragmas/attributes are accepted,\n-   --  whose main purpose is to facilitate formal verification. Set by debug\n-   --  flag -gnatd.V.\n-\n    Global_SPARK_Mode : SPARK_Mode_Id := None;\n    --  The mode applicable to the whole compilation. The global mode can be set\n    --  in a configuration file such as gnat.adc.\n@@ -2023,11 +2012,6 @@ package Opt is\n    --  that this is completely separate from the SPARK restriction defined in\n    --  GNAT to detect violations of a subset of SPARK 2005 rules.\n \n-   SPARK_Strict_Mode : Boolean := False;\n-   --  Interpret compiler permissions as strictly as possible. E.g. base ranges\n-   --  for integers are limited to the strict minimum with this option. Set by\n-   --  debug flag -gnatd.D.\n-\n private\n \n    --  The following type is used to save and restore settings of switches in"}, {"sha": "e434697340a8925e7c740d6af7de864974eb9130", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -3039,12 +3039,12 @@ package body Sem_Attr is\n                return;\n \n             --  For compatibility with Declib code, treat all prefixes as\n-            --  legal, including non-discriminated types.\n+            --  legal, including non-discriminated types. This is because\n+            --  DECLIB uses the obsolescent interpretation of the attribute,\n+            --  and applies it to types as well as to objects, while the\n+            --  current definition applies to objects of a discriminated type.\n \n-            --  ??? this non-conforming language extension needs documenting\n-            --  ??? anyway it should not depend on Extend_System!\n-\n-            elsif Present (System_Extend_Unit) then\n+            elsif OpenVMS_On_Target then\n                return;\n             end if;\n          end if;"}, {"sha": "483e2be03bce9c994073f06e0c9b263926c13010", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -3911,7 +3911,7 @@ package body Sem_Ch3 is\n       --  Verify whether the object declaration introduces an illegal hidden\n       --  state within a package subject to a null abstract state.\n \n-      if Formal_Extensions and then Ekind (Id) = E_Variable then\n+      if Ekind (Id) = E_Variable then\n          Check_No_Hidden_State (Id);\n       end if;\n    end Analyze_Object_Declaration;\n@@ -20444,65 +20444,7 @@ package body Sem_Ch3 is\n       Set_Ekind          (T, E_Signed_Integer_Subtype);\n       Set_Etype          (T, Implicit_Base);\n \n-      --  In formal verification mode, restrict the base type's range to the\n-      --  minimum allowed by RM 3.5.4, namely the smallest symmetric range\n-      --  around zero with a possible extra negative value that contains the\n-      --  subtype range. Keep Size, RM_Size and First_Rep_Item info, which\n-      --  should not be relied upon in formal verification.\n-\n-      if SPARK_Strict_Mode then\n-         declare\n-            Sym_Hi_Val : Uint;\n-            Sym_Lo_Val : Uint;\n-            Dloc       : constant Source_Ptr := Sloc (Def);\n-            Lbound     : Node_Id;\n-            Ubound     : Node_Id;\n-            Bounds     : Node_Id;\n-\n-         begin\n-            --  If the subtype range is empty, the smallest base type range\n-            --  is the symmetric range around zero containing Lo_Val and\n-            --  Hi_Val.\n-\n-            if UI_Gt (Lo_Val, Hi_Val) then\n-               Sym_Hi_Val := UI_Max (UI_Abs (Lo_Val), UI_Abs (Hi_Val));\n-               Sym_Lo_Val := UI_Negate (Sym_Hi_Val);\n-\n-               --  Otherwise, if the subtype range is not empty and Hi_Val has\n-               --  the largest absolute value, Hi_Val is non negative and the\n-               --  smallest base type range is the symmetric range around zero\n-               --  containing Hi_Val.\n-\n-            elsif UI_Le (UI_Abs (Lo_Val), UI_Abs (Hi_Val)) then\n-               Sym_Hi_Val := Hi_Val;\n-               Sym_Lo_Val := UI_Negate (Hi_Val);\n-\n-               --  Otherwise, the subtype range is not empty, Lo_Val has the\n-               --  strictly largest absolute value, Lo_Val is negative and the\n-               --  smallest base type range is the symmetric range around zero\n-               --  with an extra negative value Lo_Val.\n-\n-            else\n-               Sym_Lo_Val := Lo_Val;\n-               Sym_Hi_Val := UI_Sub (UI_Negate (Lo_Val), Uint_1);\n-            end if;\n-\n-            Lbound := Make_Integer_Literal (Dloc, Sym_Lo_Val);\n-            Ubound := Make_Integer_Literal (Dloc, Sym_Hi_Val);\n-            Set_Is_Static_Expression (Lbound);\n-            Set_Is_Static_Expression (Ubound);\n-            Analyze_And_Resolve (Lbound, Any_Integer);\n-            Analyze_And_Resolve (Ubound, Any_Integer);\n-\n-            Bounds := Make_Range (Dloc, Lbound, Ubound);\n-            Set_Etype (Bounds, Base_Typ);\n-\n-            Set_Scalar_Range (Implicit_Base, Bounds);\n-         end;\n-\n-      else\n-         Set_Scalar_Range (Implicit_Base, Scalar_Range (Base_Typ));\n-      end if;\n+      Set_Scalar_Range (Implicit_Base, Scalar_Range (Base_Typ));\n \n       Set_Size_Info      (T,                (Implicit_Base));\n       Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));"}, {"sha": "1a87557ac4316832bca98ee43999db2815a6dec4", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -3690,20 +3690,21 @@ package body Sem_Ch4 is\n          Error_Msg_N (\"?T?unused variable &\", Loop_Id);\n       end if;\n \n-      --  Diagnose a possible misuse of the \"some\" existential quantifier. When\n+      --  Diagnose a possible misuse of the SOME existential quantifier. When\n       --  we have a quantified expression of the form:\n \n       --    for some X => (if P then Q [else True])\n \n-      --  the if expression will not hold and render the quantified expression\n-      --  trivially True.\n+      --  any value for X that makes P False results in the if expression being\n+      --  trivially True, and so also results in the the quantified expression\n+      --  being trivially True.\n \n-      if Formal_Extensions\n+      if Warn_On_Suspicious_Contract\n         and then not All_Present (N)\n         and then Nkind (Cond) = N_If_Expression\n         and then No_Else_Or_Trivial_True (Cond)\n       then\n-         Error_Msg_N (\"?suspicious expression\", N);\n+         Error_Msg_N (\"?T?suspicious expression\", N);\n          Error_Msg_N (\"\\\\did you mean (for all X ='> (if P then Q))\", N);\n          Error_Msg_N (\"\\\\or (for some X ='> P and then Q) instead'?\", N);\n       end if;"}, {"sha": "9055ba83bfd93fe6f31a7a6b44063d9cbf755fb6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "patch": "@@ -2998,12 +2998,6 @@ package body Sem_Prag is\n       --  Called for all GNAT defined pragmas to check the relevant restriction\n       --  (No_Implementation_Pragmas).\n \n-      procedure S14_Pragma;\n-      --  Called for all pragmas defined for formal verification to check that\n-      --  the S14_Extensions flag is set.\n-      --  This name needs fixing ??? There is no such thing as an\n-      --  \"S14_Extensions\" flag ???\n-\n       function Is_Before_First_Decl\n         (Pragma_Node : Node_Id;\n          Decls       : List_Id) return Boolean;\n@@ -4651,7 +4645,7 @@ package body Sem_Prag is\n             --  N_Contract node.\n \n             if Acts_As_Spec (PO)\n-              and then (GNATprove_Mode or Formal_Extensions)\n+              and then GNATprove_Mode\n             then\n                declare\n                   Prag : constant Node_Id := New_Copy_Tree (N);\n@@ -9302,17 +9296,6 @@ package body Sem_Prag is\n          end if;\n       end Set_Ravenscar_Profile;\n \n-      ----------------\n-      -- S14_Pragma --\n-      ----------------\n-\n-      procedure S14_Pragma is\n-      begin\n-         if not Formal_Extensions then\n-            Error_Pragma (\"pragma% requires the use of debug switch -gnatd.V\");\n-         end if;\n-      end S14_Pragma;\n-\n    --  Start of processing for Analyze_Pragma\n \n    begin\n@@ -9700,9 +9683,7 @@ package body Sem_Prag is\n                --  Verify whether the state introduces an illegal hidden state\n                --  within a package subject to a null abstract state.\n \n-               if Formal_Extensions then\n-                  Check_No_Hidden_State (Id);\n-               end if;\n+               Check_No_Hidden_State (Id);\n \n                --  Associate the state with its related package\n \n@@ -9722,7 +9703,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n             Ensure_Aggregate_Form (Arg1);\n \n@@ -11894,7 +11874,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n             Ensure_Aggregate_Form (Arg1);\n \n@@ -13165,7 +13144,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n             Ensure_Aggregate_Form (Arg1);\n \n@@ -13897,7 +13875,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n \n             --  Ensure the proper placement of the pragma. Initial_Condition\n@@ -14009,7 +13986,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n             Ensure_Aggregate_Form (Arg1);\n \n@@ -17542,7 +17518,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n \n             --  Ensure the proper placement of the pragma. Refined states must"}]}