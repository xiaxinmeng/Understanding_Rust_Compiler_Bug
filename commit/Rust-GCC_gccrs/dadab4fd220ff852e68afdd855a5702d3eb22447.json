{"sha": "dadab4fd220ff852e68afdd855a5702d3eb22447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkYWI0ZmQyMjBmZjg1MmU2OGFmZGQ4NTVhNTcwMmQzZWIyMjQ0Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-01-01T18:08:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-01-01T18:08:17Z"}, "message": "re PR preprocessor/41947 (GCC Hexadecimal Floating point constant handling)\n\nlibcpp:\n\tPR preprocessor/41947\n\t* expr.c (cpp_classify_number): Give error for hexadecimal\n\tfloating-point constant with no digits before or after point.\n\ngcc/testsuite:\n\t* gcc.dg/c99-hexfloat-3.c: New test.\n\nFrom-SVN: r155558", "tree": {"sha": "4377e3cf62ac8d551491136201deeb693025608f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4377e3cf62ac8d551491136201deeb693025608f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dadab4fd220ff852e68afdd855a5702d3eb22447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadab4fd220ff852e68afdd855a5702d3eb22447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dadab4fd220ff852e68afdd855a5702d3eb22447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadab4fd220ff852e68afdd855a5702d3eb22447/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a95933a61da64ab7b32186baa2c62312c1f623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a95933a61da64ab7b32186baa2c62312c1f623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a95933a61da64ab7b32186baa2c62312c1f623"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "b649072989ac82f7881c3fda752a7feaf0ac60b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadab4fd220ff852e68afdd855a5702d3eb22447/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadab4fd220ff852e68afdd855a5702d3eb22447/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dadab4fd220ff852e68afdd855a5702d3eb22447", "patch": "@@ -1,3 +1,8 @@\n+2010-01-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/41947\n+\t* gcc.dg/c99-hexfloat-3.c: New test.\n+\n 2010-01-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/42570"}, {"sha": "62dc4956ab95e6b8910cfa65c32d5050ad68165d", "filename": "gcc/testsuite/gcc.dg/c99-hexfloat-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadab4fd220ff852e68afdd855a5702d3eb22447/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadab4fd220ff852e68afdd855a5702d3eb22447/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-3.c?ref=dadab4fd220ff852e68afdd855a5702d3eb22447", "patch": "@@ -0,0 +1,25 @@\n+/* Test syntax of hexadecimal floating point constants: at least one\n+   digit needed before or after point.  PR 41947.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+double d0 = 0x0.0p0;\n+double d1 = 0x.0p0;\n+double d2 = 0x0.p0;\n+double d3 = 0x0.0p+0;\n+double d4 = 0x.0p+0;\n+double d5 = 0x0.p+0;\n+double d6 = 0x0.0p-0;\n+double d7 = 0x.0p-0;\n+double d8 = 0x0.p-0;\n+\n+double e0 = 0x.p0; /* { dg-error \"no digits\" } */\n+double e1 = 0x0.; /* { dg-error \"require an exponent\" } */\n+double e2 = 0x.0; /* { dg-error \"require an exponent\" } */\n+double e3 = 0x0.0; /* { dg-error \"require an exponent\" } */\n+double e4 = 0x0.0p; /* { dg-error \"exponent has no digits\" } */\n+double e5 = 0x0.0pf; /* { dg-error \"exponent has no digits\" } */\n+double e6 = 0x0.0p+; /* { dg-error \"exponent has no digits\" } */\n+double e7 = 0x0.0p+f; /* { dg-error \"exponent has no digits\" } */\n+double e8 = 0x0.0p-; /* { dg-error \"exponent has no digits\" } */\n+double e9 = 0x0.0p-f; /* { dg-error \"exponent has no digits\" } */"}, {"sha": "d35186ccff0d07b3f08a75412799bc233e8f1cee", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadab4fd220ff852e68afdd855a5702d3eb22447/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadab4fd220ff852e68afdd855a5702d3eb22447/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=dadab4fd220ff852e68afdd855a5702d3eb22447", "patch": "@@ -1,3 +1,9 @@\n+2010-01-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/41947\n+\t* expr.c (cpp_classify_number): Give error for hexadecimal\n+\tfloating-point constant with no digits before or after point.\n+\n 2009-11-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* macro.c (enter_macro_context): Call cb.used callback if defined."}, {"sha": "60cb2816a7ab9d3fed07c567362e62dea5ef24c0", "filename": "libcpp/expr.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadab4fd220ff852e68afdd855a5702d3eb22447/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadab4fd220ff852e68afdd855a5702d3eb22447/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=dadab4fd220ff852e68afdd855a5702d3eb22447", "patch": "@@ -1,6 +1,6 @@\n /* Parse C expressions for cpplib.\n    Copyright (C) 1987, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2004, 2008, 2009 Free Software Foundation.\n+   2002, 2004, 2008, 2009, 2010 Free Software Foundation.\n    Contributed by Per Bothner, 1994.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -229,6 +229,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n   const uchar *limit;\n   unsigned int max_digit, result, radix;\n   enum {NOT_FLOAT = 0, AFTER_POINT, AFTER_EXPON} float_flag;\n+  bool seen_digit;\n \n   /* If the lexer has done its job, length one can only be a single\n      digit.  Fast-path this very common case.  */\n@@ -239,6 +240,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n   float_flag = NOT_FLOAT;\n   max_digit = 0;\n   radix = 10;\n+  seen_digit = false;\n \n   /* First, interpret the radix.  */\n   if (*str == '0')\n@@ -267,6 +269,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \n       if (ISDIGIT (c) || (ISXDIGIT (c) && radix == 16))\n \t{\n+\t  seen_digit = true;\n \t  c = hex_value (c);\n \t  if (c > max_digit)\n \t    max_digit = c;\n@@ -332,6 +335,9 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t  return CPP_N_INVALID;\n \t}\n \n+      if (radix == 16 && !seen_digit)\n+\tSYNTAX_ERROR (\"no digits in hexadecimal floating constant\");\n+\n       if (radix == 16 && CPP_PEDANTIC (pfile) && !CPP_OPTION (pfile, c99))\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"use of C99 hexadecimal floating constant\");"}]}