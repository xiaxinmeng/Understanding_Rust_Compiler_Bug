{"sha": "726338f44ec906a894236b5cee6dcc7ab32fc30c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2MzM4ZjQ0ZWM5MDZhODk0MjM2YjVjZWU2ZGNjN2FiMzJmYzMwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-06T07:38:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-06T07:38:07Z"}, "message": "cfgexpand.c (expand_gimple_cond): Remove check for current_loops.\n\n2014-06-06  Richard Biener  <rguenther@suse.de>\n\n\t* cfgexpand.c (expand_gimple_cond): Remove check for current_loops.\n\t(construct_init_block): Likewise.\n\t(construct_exit_block): Likewise.\n\t(pass_expand::execute): Likewise.\n\t* graphite.c (graphite_transforms): Replace check for current_loops\n\twith a check for > 1 loops.\n\t(pass_graphite_transforms::execute): Adjust.\n\t* ipa-split.c (split_function): Remove check for current_loops.\n\t* omp-low.c (expand_parallel_call): Likewise.\n\t(expand_omp_for_init_counts): Likewise.\n\t(extract_omp_for_update_vars): Likewise.\n\t(expand_omp_for_generic): Likewise.\n\t(expand_omp_sections): Likewise.\n\t(expand_omp_target): Likewise.\n\t* tracer.c (tail_duplicate): Likewise.\n\t(pass_tracer::execute): Likewise.\n\t* trans-mem.c (expand_transaction): Likewise.\n\t* tree-complex.c (expand_complex_div_wide): Likewise.\n\t* tree-eh.c (lower_resx): Likewise.\n\t(cleanup_empty_eh_merge_phis): Likewise.\n\t* tree-predcom.c (run_tree_predictive_commoning): Replace check for\n\tcurrent_loops with a check for > 1 loops.\n\t(pass_predcom::execute): Adjust.\n\t* tree-scalar-evolution.c (scev_reset): Remove check for current_loops.\n\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Likewise.\n\t* tree-ssa-dom.c (pass_phi_only_cprop::execute): Likewise.\n\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Likewise.\n\t* tree-switch-conversion.c (process_switch): Likewise.\n\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n\t* tree-vrp.c (vrp_visit_phi_node): Likewise.\n\t(execute_vrp): Likewise.\n\t* ubsan.c (ubsan_expand_null_ifn): Likewise.\n\nFrom-SVN: r211306", "tree": {"sha": "20e556c7d8b7c03079833b61519c222ba819f783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20e556c7d8b7c03079833b61519c222ba819f783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/726338f44ec906a894236b5cee6dcc7ab32fc30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726338f44ec906a894236b5cee6dcc7ab32fc30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726338f44ec906a894236b5cee6dcc7ab32fc30c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726338f44ec906a894236b5cee6dcc7ab32fc30c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa4602f4d54c80b978b3f6c8c376fbf75b72277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa4602f4d54c80b978b3f6c8c376fbf75b72277"}], "stats": {"total": 170, "additions": 76, "deletions": 94}, "files": [{"sha": "71179f5f546c01b1d8c3f877020cbda4e44c77ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1,3 +1,39 @@\n+2014-06-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (expand_gimple_cond): Remove check for current_loops.\n+\t(construct_init_block): Likewise.\n+\t(construct_exit_block): Likewise.\n+\t(pass_expand::execute): Likewise.\n+\t* graphite.c (graphite_transforms): Replace check for current_loops\n+\twith a check for > 1 loops.\n+\t(pass_graphite_transforms::execute): Adjust.\n+\t* ipa-split.c (split_function): Remove check for current_loops.\n+\t* omp-low.c (expand_parallel_call): Likewise.\n+\t(expand_omp_for_init_counts): Likewise.\n+\t(extract_omp_for_update_vars): Likewise.\n+\t(expand_omp_for_generic): Likewise.\n+\t(expand_omp_sections): Likewise.\n+\t(expand_omp_target): Likewise.\n+\t* tracer.c (tail_duplicate): Likewise.\n+\t(pass_tracer::execute): Likewise.\n+\t* trans-mem.c (expand_transaction): Likewise.\n+\t* tree-complex.c (expand_complex_div_wide): Likewise.\n+\t* tree-eh.c (lower_resx): Likewise.\n+\t(cleanup_empty_eh_merge_phis): Likewise.\n+\t* tree-predcom.c (run_tree_predictive_commoning): Replace check for\n+\tcurrent_loops with a check for > 1 loops.\n+\t(pass_predcom::execute): Adjust.\n+\t* tree-scalar-evolution.c (scev_reset): Remove check for current_loops.\n+\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Likewise.\n+\t* tree-ssa-dom.c (pass_phi_only_cprop::execute): Likewise.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Likewise.\n+\t* tree-switch-conversion.c (process_switch): Likewise.\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n+\t* tree-vrp.c (vrp_visit_phi_node): Likewise.\n+\t(execute_vrp): Likewise.\n+\t* ubsan.c (ubsan_expand_null_ifn): Likewise.\n+\n 2014-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* rtl.h (insn_location): Declare."}, {"sha": "e8cd87f1c47eab64010621ba2a23c26bc2fa1be3", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -2170,8 +2170,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   false_edge->flags |= EDGE_FALLTHRU;\n   new_bb->count = false_edge->count;\n   new_bb->frequency = EDGE_FREQUENCY (false_edge);\n-  if (current_loops && bb->loop_father)\n-    add_bb_to_loop (new_bb, bb->loop_father);\n+  add_bb_to_loop (new_bb, bb->loop_father);\n   new_edge = make_edge (new_bb, dest, 0);\n   new_edge->probability = REG_BR_PROB_BASE;\n   new_edge->count = new_bb->count;\n@@ -5273,8 +5272,7 @@ construct_init_block (void)\n \t\t\t\t   ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   init_block->frequency = ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency;\n   init_block->count = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n-  if (current_loops && ENTRY_BLOCK_PTR_FOR_FN (cfun)->loop_father)\n-    add_bb_to_loop (init_block, ENTRY_BLOCK_PTR_FOR_FN (cfun)->loop_father);\n+  add_bb_to_loop (init_block, ENTRY_BLOCK_PTR_FOR_FN (cfun)->loop_father);\n   if (e)\n     {\n       first_block = e->dest;\n@@ -5352,8 +5350,7 @@ construct_exit_block (void)\n   exit_block = create_basic_block (NEXT_INSN (head), end, prev_bb);\n   exit_block->frequency = EXIT_BLOCK_PTR_FOR_FN (cfun)->frequency;\n   exit_block->count = EXIT_BLOCK_PTR_FOR_FN (cfun)->count;\n-  if (current_loops && EXIT_BLOCK_PTR_FOR_FN (cfun)->loop_father)\n-    add_bb_to_loop (exit_block, EXIT_BLOCK_PTR_FOR_FN (cfun)->loop_father);\n+  add_bb_to_loop (exit_block, EXIT_BLOCK_PTR_FOR_FN (cfun)->loop_father);\n \n   ix = 0;\n   while (ix < EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (cfun)->preds))\n@@ -5815,8 +5812,7 @@ pass_expand::execute (function *fun)\n   timevar_push (TV_POST_EXPAND);\n   /* We are no longer in SSA form.  */\n   fun->gimple_df->in_ssa_p = false;\n-  if (current_loops)\n-    loops_state_clear (LOOP_CLOSED_SSA);\n+  loops_state_clear (LOOP_CLOSED_SSA);\n \n   /* Expansion is used by optimization passes too, set maybe_hot_insn_p\n      conservatively to true until they are all profile aware.  */"}, {"sha": "eedda4cf1d3eab2543c785078a8d0190b0e1e33f", "filename": "gcc/graphite.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -324,9 +324,9 @@ graphite_transform_loops (void)\n \n \n static unsigned int\n-graphite_transforms (void)\n+graphite_transforms (struct function *fun)\n {\n-  if (!current_loops)\n+  if (number_of_loops (fun) <= 1)\n     return 0;\n \n   graphite_transform_loops ();\n@@ -411,7 +411,7 @@ class pass_graphite_transforms : public gimple_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return gate_graphite_transforms (); }\n-  virtual unsigned int execute (function *) { return graphite_transforms (); }\n+  virtual unsigned int execute (function *fun) { return graphite_transforms (fun); }\n \n }; // class pass_graphite_transforms\n "}, {"sha": "bfcd43e496e2564b726e729c1938d698158787ba", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1177,8 +1177,7 @@ split_function (struct split_point *split_point)\n       e = make_edge (new_return_bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n       e->probability = REG_BR_PROB_BASE;\n       e->count = new_return_bb->count;\n-      if (current_loops)\n-\tadd_bb_to_loop (new_return_bb, current_loops->tree_root);\n+      add_bb_to_loop (new_return_bb, current_loops->tree_root);\n       bitmap_set_bit (split_point->split_bbs, new_return_bb->index);\n     }\n   /* When we pass around the value, use existing return block.  */"}, {"sha": "0f400b0e3af578c5b5efb2000cc76a54b4b45218", "filename": "gcc/omp-low.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -4297,11 +4297,8 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \n \t  make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n \t  make_edge (cond_bb, else_bb, EDGE_FALSE_VALUE);\n-\t  if (current_loops)\n-\t    {\n-\t      add_bb_to_loop (then_bb, cond_bb->loop_father);\n-\t      add_bb_to_loop (else_bb, cond_bb->loop_father);\n-\t    }\n+\t  add_bb_to_loop (then_bb, cond_bb->loop_father);\n+\t  add_bb_to_loop (else_bb, cond_bb->loop_father);\n \t  e_then = make_edge (then_bb, bb, EDGE_FALLTHRU);\n \t  e_else = make_edge (else_bb, bb, EDGE_FALLTHRU);\n \n@@ -5021,8 +5018,7 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t    {\n \t      first_zero_iter = i;\n \t      zero_iter_bb = create_empty_bb (entry_bb);\n-\t      if (current_loops)\n-\t\tadd_bb_to_loop (zero_iter_bb, entry_bb->loop_father);\n+\t      add_bb_to_loop (zero_iter_bb, entry_bb->loop_father);\n \t      *gsi = gsi_after_labels (zero_iter_bb);\n \t      stmt = gimple_build_assign (fd->loop.n2,\n \t\t\t\t\t  build_zero_cst (type));\n@@ -5205,8 +5201,7 @@ extract_omp_for_update_vars (struct omp_for_data *fd, basic_block cont_bb,\n       tree vtype = TREE_TYPE (fd->loops[i].v);\n \n       bb = create_empty_bb (last_bb);\n-      if (current_loops)\n-\tadd_bb_to_loop (bb, last_bb->loop_father);\n+      add_bb_to_loop (bb, last_bb->loop_father);\n       gsi = gsi_start_bb (bb);\n \n       if (i < fd->collapse - 1)\n@@ -5693,8 +5688,7 @@ expand_omp_for_generic (struct omp_region *region,\n       remove_edge (e);\n \n       make_edge (cont_bb, l2_bb, EDGE_FALSE_VALUE);\n-      if (current_loops)\n-\tadd_bb_to_loop (l2_bb, cont_bb->loop_father);\n+      add_bb_to_loop (l2_bb, cont_bb->loop_father);\n       e = find_edge (cont_bb, l1_bb);\n       if (gimple_omp_for_combined_p (fd->for_stmt))\n \t{\n@@ -7139,8 +7133,7 @@ expand_omp_sections (struct omp_region *region)\n   t = gimple_block_label (default_bb);\n   u = build_case_label (NULL, NULL, t);\n   make_edge (l0_bb, default_bb, 0);\n-  if (current_loops)\n-    add_bb_to_loop (default_bb, current_loops->tree_root);\n+  add_bb_to_loop (default_bb, current_loops->tree_root);\n \n   stmt = gimple_build_switch (vmain, u, label_vec);\n   gsi_insert_after (&switch_si, stmt, GSI_SAME_STMT);\n@@ -8084,11 +8077,8 @@ expand_omp_target (struct omp_region *region)\n \n       make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n       make_edge (cond_bb, else_bb, EDGE_FALSE_VALUE);\n-      if (current_loops)\n-\t{\n-\t  add_bb_to_loop (then_bb, cond_bb->loop_father);\n-\t  add_bb_to_loop (else_bb, cond_bb->loop_father);\n-\t}\n+      add_bb_to_loop (then_bb, cond_bb->loop_father);\n+      add_bb_to_loop (else_bb, cond_bb->loop_father);\n       make_edge (then_bb, new_bb, EDGE_FALLTHRU);\n       make_edge (else_bb, new_bb, EDGE_FALLTHRU);\n "}, {"sha": "ae05879e9f8916f88552335b10aa1fd39488f1a0", "filename": "gcc/tracer.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -316,8 +316,7 @@ tail_duplicate (void)\n \t         of all do { } while loops.  Do not do that - it is\n \t\t not profitable and it might create a loop with multiple\n \t\t entries or at least rotate the loop.  */\n-\t      && (!current_loops\n-\t\t  || bb2->loop_father->header != bb2))\n+\t      && bb2->loop_father->header != bb2)\n \t    {\n \t      edge e;\n \t      basic_block copy;\n@@ -419,8 +418,7 @@ pass_tracer::execute (function *fun)\n     {\n       free_dominance_info (CDI_DOMINATORS);\n       /* If we changed the CFG schedule loops for fixup by cleanup_cfg.  */\n-      if (current_loops)\n-\tloops_state_set (LOOPS_NEED_FIXUP);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n     }\n \n   if (dump_file)"}, {"sha": "b728d743d6e4a2a48b277a18d38d1ba069b39952", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -2745,12 +2745,9 @@ expand_transaction (struct tm_region *region, void *data ATTRIBUTE_UNUSED)\n       basic_block test_bb = create_empty_bb (transaction_bb);\n       basic_block code_bb = create_empty_bb (test_bb);\n       basic_block join_bb = create_empty_bb (code_bb);\n-      if (current_loops && transaction_bb->loop_father)\n-\t{\n-\t  add_bb_to_loop (test_bb, transaction_bb->loop_father);\n-\t  add_bb_to_loop (code_bb, transaction_bb->loop_father);\n-\t  add_bb_to_loop (join_bb, transaction_bb->loop_father);\n-\t}\n+      add_bb_to_loop (test_bb, transaction_bb->loop_father);\n+      add_bb_to_loop (code_bb, transaction_bb->loop_father);\n+      add_bb_to_loop (join_bb, transaction_bb->loop_father);\n       if (region->restart_block == region->entry_block)\n \tregion->restart_block = test_bb;\n \n@@ -2791,8 +2788,7 @@ expand_transaction (struct tm_region *region, void *data ATTRIBUTE_UNUSED)\n   if (abort_edge)\n     {\n       basic_block test_bb = create_empty_bb (transaction_bb);\n-      if (current_loops && transaction_bb->loop_father)\n-\tadd_bb_to_loop (test_bb, transaction_bb->loop_father);\n+      add_bb_to_loop (test_bb, transaction_bb->loop_father);\n       if (region->restart_block == region->entry_block)\n \tregion->restart_block = test_bb;\n \n@@ -2834,8 +2830,7 @@ expand_transaction (struct tm_region *region, void *data ATTRIBUTE_UNUSED)\n   if (inst_edge && uninst_edge)\n     {\n       basic_block test_bb = create_empty_bb (transaction_bb);\n-      if (current_loops && transaction_bb->loop_father)\n-\tadd_bb_to_loop (test_bb, transaction_bb->loop_father);\n+      add_bb_to_loop (test_bb, transaction_bb->loop_father);\n       if (region->restart_block == region->entry_block)\n \tregion->restart_block = test_bb;\n \n@@ -2886,8 +2881,7 @@ expand_transaction (struct tm_region *region, void *data ATTRIBUTE_UNUSED)\n     {\n       basic_block empty_bb = create_empty_bb (transaction_bb);\n       region->restart_block = empty_bb;\n-      if (current_loops && transaction_bb->loop_father)\n-\tadd_bb_to_loop (empty_bb, transaction_bb->loop_father);\n+      add_bb_to_loop (empty_bb, transaction_bb->loop_father);\n \n       redirect_edge_pred (fallthru_edge, empty_bb);\n       make_edge (transaction_bb, empty_bb, EDGE_FALLTHRU);"}, {"sha": "eefb952d5bbba56efcd2411564d03927b178c40d", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1162,11 +1162,8 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n       make_edge (bb_cond, bb_false, EDGE_FALSE_VALUE);\n       make_edge (bb_true, bb_join, EDGE_FALLTHRU);\n       make_edge (bb_false, bb_join, EDGE_FALLTHRU);\n-      if (current_loops)\n-\t{\n-\t  add_bb_to_loop (bb_true, bb_cond->loop_father);\n-\t  add_bb_to_loop (bb_false, bb_cond->loop_father);\n-\t}\n+      add_bb_to_loop (bb_true, bb_cond->loop_father);\n+      add_bb_to_loop (bb_false, bb_cond->loop_father);\n \n       /* Update dominance info.  Note that bb_join's data was\n          updated by split_block.  */"}, {"sha": "9f8408d71d36e892e66400d97a8253082d583b99", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -3212,8 +3212,7 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n \t      gimple_stmt_iterator gsi2;\n \n \t      new_bb = create_empty_bb (bb);\n-\t      if (current_loops)\n-\t\tadd_bb_to_loop (new_bb, bb->loop_father);\n+\t      add_bb_to_loop (new_bb, bb->loop_father);\n \t      lab = gimple_block_label (new_bb);\n \t      gsi2 = gsi_start_bb (new_bb);\n \n@@ -4210,8 +4209,7 @@ cleanup_empty_eh_merge_phis (basic_block new_bb, basic_block old_bb,\n \t   we may have created a loop with multiple latches.\n \t   All of this isn't easily fixed thus cancel the affected loop\n \t   and mark the other loop as possibly having multiple latches.  */\n-\tif (current_loops\n-\t    && e->dest == e->dest->loop_father->header)\n+\tif (e->dest == e->dest->loop_father->header)\n \t  {\n \t    e->dest->loop_father->header = NULL;\n \t    e->dest->loop_father->latch = NULL;"}, {"sha": "a9a004e3f7ee926e4eb239df85feabb38d1343c3", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -2565,9 +2565,9 @@ tree_predictive_commoning (void)\n /* Predictive commoning Pass.  */\n \n static unsigned\n-run_tree_predictive_commoning (void)\n+run_tree_predictive_commoning (struct function *fun)\n {\n-  if (!current_loops)\n+  if (number_of_loops (fun) <= 1)\n     return 0;\n \n   return tree_predictive_commoning ();\n@@ -2598,9 +2598,9 @@ class pass_predcom : public gimple_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return flag_predictive_commoning != 0; }\n-  virtual unsigned int execute (function *)\n+  virtual unsigned int execute (function *fun)\n     {\n-      return run_tree_predictive_commoning ();\n+      return run_tree_predictive_commoning (fun);\n     }\n \n }; // class pass_predcom"}, {"sha": "3890f958aac3eb28e36c024abd4103999435727f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -3197,9 +3197,6 @@ scev_reset (void)\n \n   scev_reset_htab ();\n \n-  if (!current_loops)\n-    return;\n-\n   FOR_EACH_LOOP (loop, 0)\n     {\n       loop->nb_iterations = NULL_TREE;"}, {"sha": "e0ed63f0a44e922aa791e42c3fd0203f8ea2fb20", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -406,8 +406,7 @@ copy_prop_visit_phi_node (gimple phi)\n \t ???  The value will be always loop invariant.\n \t In loop-closed SSA form do not copy-propagate through\n \t PHI nodes in blocks with a loop exit edge predecessor.  */\n-      if (current_loops\n-\t  && TREE_CODE (arg_value) == SSA_NAME\n+      if (TREE_CODE (arg_value) == SSA_NAME\n \t  && (loop_depth_of_name (arg_value) > loop_depth_of_name (lhs)\n \t      || (loops_state_satisfies_p (LOOP_CLOSED_SSA)\n \t\t  && loop_exit_edge_p (e->src->loop_father, e))))"}, {"sha": "b7ec05b624ccf131426d97614657ad29f5cd6b24", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -3128,8 +3128,7 @@ pass_phi_only_cprop::execute (function *fun)\n     {\n       free_dominance_info (CDI_DOMINATORS);\n       /* If we changed the CFG schedule loops for fixup by cfgcleanup.  */\n-      if (current_loops)\n-\tloops_state_set (LOOPS_NEED_FIXUP);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n     }\n \n   /* Propagation of const and copies may make some EH edges dead.  Purge"}, {"sha": "20fbebf35d0be19029d0f972264074389b64a0ad", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1656,18 +1656,7 @@ tail_merge_optimize (unsigned int todo)\n   int max_iterations = PARAM_VALUE (PARAM_MAX_TAIL_MERGE_ITERATIONS);\n \n   if (!flag_tree_tail_merge\n-      || max_iterations == 0\n-      /* We try to be conservative with respect to loop structure, since:\n-\t - the cases where tail-merging could both affect loop structure and be\n-\t   beneficial are rare,\n-\t - it prevents us from having to fixup the loops using\n-\t   loops_state_set (LOOPS_NEED_FIXUP), and\n-\t - keeping loop structure may allow us to simplify the pass.\n-\t In order to be conservative, we need loop information.\t In rare cases\n-\t (about 7 test-cases in the g++ testsuite) there is none (because\n-\t loop_optimizer_finalize has been called before tail-merge, and\n-\t PROP_loops is not set), so we bail out.  */\n-      || current_loops == NULL)\n+      || max_iterations == 0)\n     return 0;\n \n   timevar_push (TV_TREE_TAIL_MERGE);"}, {"sha": "fa31613d1adae003d61fbf8c6e0a639c9f23b29a", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1707,9 +1707,6 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   bitmap threaded_blocks;\n   struct loop *loop;\n \n-  /* We must know about loops in order to preserve them.  */\n-  gcc_assert (current_loops != NULL);\n-\n   if (!paths.exists ())\n     return false;\n "}, {"sha": "9789b619ee24690718754065fb920ec40349b8bc", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1370,8 +1370,7 @@ process_switch (gimple swtch)\n \t    fputs (\"  expanding as bit test is preferable\\n\", dump_file);\n \t  emit_case_bit_tests (swtch, info.index_expr,\n \t\t\t       info.range_min, info.range_size);\n-\t  if (current_loops)\n-\t    loops_state_set (LOOPS_NEED_FIXUP);\n+\t  loops_state_set (LOOPS_NEED_FIXUP);\n \t  return NULL;\n \t}\n "}, {"sha": "6f6c758c356bdf6cbe94a125002a576b010dcb7f", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -1059,8 +1059,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n   if (changed)\n     {\n       /* We may have created new loops.  Make them magically appear.  */\n-      if (current_loops)\n-\tloops_state_set (LOOPS_NEED_FIXUP);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n       free_dominance_info (CDI_DOMINATORS);\n     }\n "}, {"sha": "428e622a21748b439fba69590464200242efa46c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -8383,7 +8383,6 @@ vrp_visit_phi_node (gimple phi)\n \t PHI node SCEV may known more about its value-range.  */\n       if ((cmp_min > 0 || cmp_min < 0\n \t   || cmp_max < 0 || cmp_max > 0)\n-\t  && current_loops\n \t  && (l = loop_containing_stmt (phi))\n \t  && l->header == gimple_bb (phi))\n \tadjust_range_with_scev (&vr_result, l, phi, lhs);\n@@ -9784,8 +9783,7 @@ execute_vrp (void)\n   if (to_remove_edges.length () > 0)\n     {\n       free_dominance_info (CDI_DOMINATORS);\n-      if (current_loops)\n-\tloops_state_set (LOOPS_NEED_FIXUP);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n     }\n \n   to_remove_edges.release ();"}, {"sha": "5a8a4479404709d7fb866d78e0b0e4298c1d3bb9", "filename": "gcc/ubsan.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726338f44ec906a894236b5cee6dcc7ab32fc30c/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=726338f44ec906a894236b5cee6dcc7ab32fc30c", "patch": "@@ -571,11 +571,8 @@ ubsan_expand_null_ifn (gimple_stmt_iterator gsi)\n   basic_block cond_bb = e->src;\n   basic_block fallthru_bb = e->dest;\n   basic_block then_bb = create_empty_bb (cond_bb);\n-  if (current_loops)\n-    {\n-      add_bb_to_loop (then_bb, cond_bb->loop_father);\n-      loops_state_set (LOOPS_NEED_FIXUP);\n-    }\n+  add_bb_to_loop (then_bb, cond_bb->loop_father);\n+  loops_state_set (LOOPS_NEED_FIXUP);\n \n   /* Make an edge coming from the 'cond block' into the 'then block';\n      this edge is unlikely taken, so set up the probability accordingly.  */"}]}