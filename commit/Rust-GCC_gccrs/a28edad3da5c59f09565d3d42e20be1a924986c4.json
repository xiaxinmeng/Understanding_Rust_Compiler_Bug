{"sha": "a28edad3da5c59f09565d3d42e20be1a924986c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4ZWRhZDNkYTVjNTlmMDk1NjVkM2Q0MmUyMGJlMWE5MjQ5ODZjNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-16T14:28:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-17T18:00:41Z"}, "message": "c++: Non-type-dependent variadic lambda init-capture [PR94483]\n\nIn this PR, we're ICEing on a use of an 'int... a' template parameter pack as\npart of the variadic lambda init-capture [...z=a].\n\nThe unexpected thing about this variadic init-capture is that it is not\ntype-dependent, and so the call to do_auto_deduction from\nlambda_capture_field_type actually resolves its type to 'int' instead of exiting\nearly like it does for a type-dependent variadic initializer.  This later\nconfuses add_capture which, according to one of its comments, assumes that\n'type' is always 'auto' for a variadic init-capture.\n\nThe simplest fix (and the approach that this patch takes) seems to be to avoid\ndoing auto deduction in lambda_capture_field_type when the initializer uses\nparameter packs, so that we always return 'auto' even in the non-type-dependent\ncase.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94483\n\t* lambda.c (lambda_capture_field_type): Avoid doing auto deduction if\n\tthe explicit initializer has parameter packs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94483\n\t* g++.dg/cpp2a/lambda-pack-init5.C: New test.", "tree": {"sha": "b0f433a9d4ef91610f1a5157f0603c3481227762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f433a9d4ef91610f1a5157f0603c3481227762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a28edad3da5c59f09565d3d42e20be1a924986c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28edad3da5c59f09565d3d42e20be1a924986c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28edad3da5c59f09565d3d42e20be1a924986c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28edad3da5c59f09565d3d42e20be1a924986c4/comments", "author": null, "committer": null, "parents": [{"sha": "3f5af3f71195b7f1ebe32bd0d695b59904fff778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5af3f71195b7f1ebe32bd0d695b59904fff778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5af3f71195b7f1ebe32bd0d695b59904fff778"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "b89b6d88fd3bda5886366d5daf489edec8232245", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a28edad3da5c59f09565d3d42e20be1a924986c4", "patch": "@@ -1,5 +1,9 @@\n 2020-04-17  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94483\n+\t* lambda.c (lambda_capture_field_type): Avoid doing auto deduction if\n+\tthe explicit initializer has parameter packs.\n+\n \tPR c++/88754\n \t* parser.c (cp_parser_check_template_parameters): Before issuing a hard\n \terror, first try simulating an error instead."}, {"sha": "b55c2f85d27eafa9b64d7db494dc847e60d4041b", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=a28edad3da5c59f09565d3d42e20be1a924986c4", "patch": "@@ -223,7 +223,10 @@ lambda_capture_field_type (tree expr, bool explicit_init_p,\n \t/* Add the reference now, so deduction doesn't lose\n \t   outermost CV qualifiers of EXPR.  */\n \ttype = build_reference_type (type);\n-      type = do_auto_deduction (type, expr, auto_node);\n+      if (uses_parameter_packs (expr))\n+\t/* Stick with 'auto' even if the type could be deduced.  */;\n+      else\n+\ttype = do_auto_deduction (type, expr, auto_node);\n     }\n   else if (!is_this && type_dependent_expression_p (expr))\n     {"}, {"sha": "030550f16619b1112df328628f2e800dde6c0cf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a28edad3da5c59f09565d3d42e20be1a924986c4", "patch": "@@ -1,5 +1,8 @@\n 2020-04-17  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94483\n+\t* g++.dg/cpp2a/lambda-pack-init5.C: New test.\n+\n \tPR c++/88754\n \t* g++.dg/parse/ambig10.C: New test.\n "}, {"sha": "492fc479e942a371e6fc685486aa9b1cf4f6e109", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init5.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28edad3da5c59f09565d3d42e20be1a924986c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C?ref=a28edad3da5c59f09565d3d42e20be1a924986c4", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/94483\n+// { dg-do compile { target c++2a } }\n+\n+template<int... a> constexpr auto x1\n+  = [...z = -a] (auto F) { return F(z...); };\n+\n+template<const int&... a> constexpr auto x2\n+  = [&...z = a] (auto F) { return F(z...); };\n+\n+template<int... a> constexpr auto x3\n+  = [z = -a] (auto F) { return F(z); }; // { dg-error \"packs not expanded\" }\n+\n+\n+constexpr auto sum = [] (auto... xs) { return (xs + ... + 0); };\n+const int y1 = 1, y2 = 2, y3 = 3;\n+\n+static_assert(x1<1,2,3>(sum) == -6);\n+static_assert(x2<y1,y2,y3>(sum) == 6);"}]}