{"sha": "8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4YTQ2YmE5MjY0YmEyZTc4YzIzYmExODcyYzhiZTVkZGUwNjcyZg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-09T14:21:47Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-09T14:21:47Z"}, "message": "vax.h (FUNCTION_ARG, [...]): Delete.\n\n\t* config/vax/vax.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/vax/vax.c (vax_function_arg): New function.\n\t(vax_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165229", "tree": {"sha": "bf7b909bb3049ca74da749ef761132b65c12c7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7b909bb3049ca74da749ef761132b65c12c7f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/comments", "author": null, "committer": null, "parents": [{"sha": "fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd29bdaffea19f0aac0be23bec5b8bb2b52054da"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "1035dccb12bdd405bdc64320273a9a4b24cd4412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "patch": "@@ -1,3 +1,10 @@\n+2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/vax/vax.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/vax/vax.c (vax_function_arg): New function.\n+\t(vax_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/pa/pa-protos.h (function_arg): Delete."}, {"sha": "9459b7f44208a1bdc4b513d14cb1060eac63d4cf", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "patch": "@@ -56,6 +56,10 @@ static void vax_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static int vax_address_cost_1 (rtx);\n static int vax_address_cost (rtx, bool);\n static bool vax_rtx_costs (rtx, int, int, int *, bool);\n+static rtx vax_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void vax_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n static rtx vax_struct_value_rtx (tree, int);\n static rtx vax_builtin_setjmp_frame_value (void);\n static void vax_asm_trampoline_template (FILE *);\n@@ -93,6 +97,11 @@ static int vax_return_pops_args (tree, tree, int);\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG vax_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE vax_function_arg_advance\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX vax_struct_value_rtx\n \n@@ -2095,3 +2104,40 @@ vax_return_pops_args (tree fundecl ATTRIBUTE_UNUSED,\n {\n   return size > 255 * 4 ? 0 : size;\n }\n+\n+/* Define where to put the arguments to a function.\n+   Value is zero to push the argument on the stack,\n+   or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.\n+   TYPE is the data type of the argument (as a tree).\n+    This is null for libcalls where that information may\n+    not be available.\n+   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n+    the preceding args and about the function being called.\n+   NAMED is nonzero if this argument is a named parameter\n+    (otherwise it is an extra parameter matching an ellipsis).  */\n+\n+/* On the VAX all args are pushed.  */\n+\n+static rtx\n+vax_function_arg (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n+\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t  const_tree type ATTRIBUTE_UNUSED,\n+\t\t  bool named ATTRIBUTE_UNUSED)\n+{\n+  return NULL_RTX;\n+}\n+\n+/* Update the data in CUM to advance over an argument of mode MODE and\n+   data type TYPE.  (TYPE is null for libcalls where that information\n+   may not be available.)  */\n+\n+static void\n+vax_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum += (mode != BLKmode\n+\t   ? (GET_MODE_SIZE (mode) + 3) & ~3\n+\t   : (int_size_in_bytes (type) + 3) & ~3);\n+}"}, {"sha": "35965dc8aa0f837d11cb4dd8ad17f02bdbc5f5a4", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8a46ba9264ba2e78c23ba1872c8be5dde0672f/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=8f8a46ba9264ba2e78c23ba1872c8be5dde0672f", "patch": "@@ -355,32 +355,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  ((CUM) += ((MODE) != BLKmode\t\t\t\t\\\n-\t     ? (GET_MODE_SIZE (MODE) + 3) & ~3\t\t\\\n-\t     : (int_size_in_bytes (TYPE) + 3) & ~3))\n-\n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-/* On the VAX all args are pushed.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) 0\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}]}