{"sha": "a80903ff487fc462b96e9ae461a107a05eaacd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwOTAzZmY0ODdmYzQ2MmI5NmU5YWU0NjFhMTA3YTA1ZWFhY2Q2NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-07-08T15:23:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-08T15:23:45Z"}, "message": "* emit-rtl.c (set_mem_attributes_minus_bitpos): Fix formatting issues.\n\nFrom-SVN: r161961", "tree": {"sha": "4e76d7f5369ba158c58a7df06202bd2362c5bd34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e76d7f5369ba158c58a7df06202bd2362c5bd34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a80903ff487fc462b96e9ae461a107a05eaacd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80903ff487fc462b96e9ae461a107a05eaacd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80903ff487fc462b96e9ae461a107a05eaacd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80903ff487fc462b96e9ae461a107a05eaacd64/comments", "author": null, "committer": null, "parents": [{"sha": "7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "085670aa35fd6cf328d38dd5bdec79563b35ea43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a80903ff487fc462b96e9ae461a107a05eaacd64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a80903ff487fc462b96e9ae461a107a05eaacd64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a80903ff487fc462b96e9ae461a107a05eaacd64", "patch": "@@ -1,3 +1,7 @@\n+2010-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Fix formatting issues.\n+\n 2010-07-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address): Fix"}, {"sha": "42bb429d5dd9c78887d6fff6e7d40de5c17899e5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a80903ff487fc462b96e9ae461a107a05eaacd64/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a80903ff487fc462b96e9ae461a107a05eaacd64/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a80903ff487fc462b96e9ae461a107a05eaacd64", "patch": "@@ -1611,47 +1611,46 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \n   /* We can set the alignment from the type if we are making an object,\n      this is an INDIRECT_REF, or if TYPE_ALIGN_OK.  */\n-  if (objectp || TREE_CODE (t) == INDIRECT_REF\n-      || TYPE_ALIGN_OK (type))\n+  if (objectp || TREE_CODE (t) == INDIRECT_REF || TYPE_ALIGN_OK (type))\n     align = MAX (align, TYPE_ALIGN (type));\n+\n   else if (TREE_CODE (t) == MEM_REF)\n     {\n+      tree op0 = TREE_OPERAND (t, 0);\n       unsigned HOST_WIDE_INT aoff = BITS_PER_UNIT;\n       if (host_integerp (TREE_OPERAND (t, 1), 1))\n \t{\n \t  unsigned HOST_WIDE_INT ioff = TREE_INT_CST_LOW (TREE_OPERAND (t, 1));\n \t  aoff = (ioff & -ioff) * BITS_PER_UNIT;\n \t}\n-      if (TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR\n-\t  && DECL_P (TREE_OPERAND (TREE_OPERAND (t, 0), 0)))\n-\talign = MAX (align,\n-\t\t     DECL_ALIGN (TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n-      else if (TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR\n-\t       && CONSTANT_CLASS_P (TREE_OPERAND (TREE_OPERAND (t, 0), 0)))\n+      if (TREE_CODE (op0) == ADDR_EXPR && DECL_P (TREE_OPERAND (op0, 0)))\n+\talign = MAX (align, DECL_ALIGN (TREE_OPERAND (op0, 0)));\n+      else if (TREE_CODE (op0) == ADDR_EXPR\n+\t       && CONSTANT_CLASS_P (TREE_OPERAND (op0, 0)))\n \t{\n-\t  align = TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n+\t  align = TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (op0, 0)));\n #ifdef CONSTANT_ALIGNMENT\n-\t  align = CONSTANT_ALIGNMENT (TREE_OPERAND (TREE_OPERAND (t, 0), 0), align);\n+\t  align = CONSTANT_ALIGNMENT (TREE_OPERAND (op0, 0), align);\n #endif\n \t}\n       else\n \t/* This technically isn't correct.  We can't really derive\n \t   alignment information from types.  */\n \talign = MAX (align,\n \t\t     TYPE_ALIGN (TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 1)))));\n-      if (!integer_zerop (TREE_OPERAND (t, 1))\n-\t  && aoff < align)\n+\n+      if (!integer_zerop (TREE_OPERAND (t, 1)) && aoff < align)\n \talign = aoff;\n     }\n-  else\n-    if (TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n-      {\n-\tif (integer_zerop (TREE_OPERAND (t, 1)))\n-\t  /* We don't know anything about the alignment.  */\n-\t  align = BITS_PER_UNIT;\n-\telse\n-\t  align = tree_low_cst (TREE_OPERAND (t, 1), 1);\n-      }\n+\n+  else if (TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n+    {\n+      if (integer_zerop (TREE_OPERAND (t, 1)))\n+\t/* We don't know anything about the alignment.  */\n+\talign = BITS_PER_UNIT;\n+      else\n+\talign = tree_low_cst (TREE_OPERAND (t, 1), 1);\n+    }\n \n   /* If the size is known, we can set that.  */\n   if (TYPE_SIZE_UNIT (type) && host_integerp (TYPE_SIZE_UNIT (type), 1))"}]}