{"sha": "58dbcf0581d6a91c9374d1087f1e9cd384319121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkYmNmMDU4MWQ2YTkxYzkzNzRkMTA4N2YxZTljZDM4NDMxOTEyMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-01-22T02:36:54Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-01-22T02:36:54Z"}, "message": "tm.texi: Remove STARTING_FRAME_PHASE.\n\n\n        * doc/tm.texi: Remove STARTING_FRAME_PHASE.\n\n        * config/rs6000/rs6000.h: Same.\n\n        * function.c (instantiate_virtual_regs): Remove\n        STARTING_FRAME_PHASE.\n        (assign_stack_local_1): Same.\n        Calculate frame phase.\n\nFrom-SVN: r49063", "tree": {"sha": "6e4bfd5059556e21fa366ff70b7cbead893ee226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e4bfd5059556e21fa366ff70b7cbead893ee226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58dbcf0581d6a91c9374d1087f1e9cd384319121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dbcf0581d6a91c9374d1087f1e9cd384319121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58dbcf0581d6a91c9374d1087f1e9cd384319121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dbcf0581d6a91c9374d1087f1e9cd384319121/comments", "author": null, "committer": null, "parents": [{"sha": "1ec968465ba6aa66b5aec9aee1b231fc3bb27278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec968465ba6aa66b5aec9aee1b231fc3bb27278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec968465ba6aa66b5aec9aee1b231fc3bb27278"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "2deaf75bf4bc176ab87af33e63b1dd9038baa82a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=58dbcf0581d6a91c9374d1087f1e9cd384319121", "patch": "@@ -1382,11 +1382,6 @@ typedef struct rs6000_stack {\n    + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n    + RS6000_SAVE_AREA)\n \n-/* How far (in bytes) is the start of the frame from the stack\n-   alignment.  For ppc 32bits, the stack is aligned to 128 bits, but\n-   the frame starts 64bits later.  */\n-#define STARTING_FRAME_PHASE (TARGET_32BIT ? 8 : 0)\n-\n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'.\n "}, {"sha": "c81461d1b5a858592c4f6bf606691052dc9cc347", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=58dbcf0581d6a91c9374d1087f1e9cd384319121", "patch": "@@ -2598,18 +2598,6 @@ value @code{STARTING_FRAME_OFFSET}.\n @c i'm not sure if the above is still correct.. had to change it to get\n @c rid of an overfull.  --mew 2feb93\n \n-@findex STARTING_FRAME_PHASE\n-@item STARTING_FRAME_PHASE\n-This option species how many bytes the frame is out of phase from the\n-stack alignment.\n-\n-For example, some ports assume a stack alignment of 128 bits, but the\n-start of the frame is 64 bits displaced from this alignment.  In this\n-case, you would define @code{STARTING_FRAME_PHASE} to be 8.\n-\n-This macro defaults to 0, so there is no need to define it if the start\n-of the frame maintains the stack alignment.\n-\n @findex STACK_POINTER_OFFSET\n @item STACK_POINTER_OFFSET\n Offset from the stack pointer register to the first location at which"}, {"sha": "bf294ea7c344f54736905f34702fb4760be2f83e", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=58dbcf0581d6a91c9374d1087f1e9cd384319121", "patch": "@@ -68,10 +68,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n #endif\n \n-#ifndef STARTING_FRAME_PHASE\n-#define STARTING_FRAME_PHASE 0\n-#endif\n-\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -528,6 +524,7 @@ assign_stack_local_1 (mode, size, align, function)\n   rtx x, addr;\n   int bigend_correction = 0;\n   int alignment;\n+  int frame_off, frame_alignment, frame_phase;\n \n   if (align == 0)\n     {\n@@ -565,15 +562,21 @@ assign_stack_local_1 (mode, size, align, function)\n   if (function->stack_alignment_needed < alignment * BITS_PER_UNIT)\n     function->stack_alignment_needed = alignment * BITS_PER_UNIT;\n \n+  /* Calculate how many bytes the start of local variables is off from\n+     stack alignment.  */\n+  frame_alignment = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n+  frame_off = STARTING_FRAME_OFFSET % frame_alignment;\n+  frame_phase = frame_off ? frame_alignment - frame_off : 0;\n+\n   /* Round frame offset to that alignment.\n      We must be careful here, since FRAME_OFFSET might be negative and\n      division with a negative dividend isn't as well defined as we might\n      like.  So we instead assume that ALIGNMENT is a power of two and\n      use logical operations which are unambiguous.  */\n #ifdef FRAME_GROWS_DOWNWARD\n-  function->x_frame_offset = FLOOR_ROUND (function->x_frame_offset - STARTING_FRAME_PHASE, alignment) + STARTING_FRAME_PHASE;\n+  function->x_frame_offset = FLOOR_ROUND (function->x_frame_offset - frame_phase, alignment) + frame_phase;\n #else\n-  function->x_frame_offset = CEIL_ROUND (function->x_frame_offset - STARTING_FRAME_PHASE, alignment) + STARTING_FRAME_PHASE;\n+  function->x_frame_offset = CEIL_ROUND (function->x_frame_offset - frame_phase, alignment) + frame_phase;\n #endif\n \n   /* On a big-endian machine, if we are allocating more space than we will use,\n@@ -3481,21 +3484,6 @@ instantiate_virtual_regs (fndecl, insns)\n   rtx insn;\n   unsigned int i;\n \n-  if (STARTING_FRAME_PHASE > 0)\n-    {\n-      /* Make sure the frame offset and phase displacement are aligned as\n-\t advertised.\n-\n-\t Only do the sanity check if we have a STARTING_FRAME_PHASE,\n-\t else we might trigger this abort on ports who claim to have\n-\t STARTING_FRAME_OFFSET aligned properly, but don't.  I suppose\n-\t we could enable this and fix those ports.  */\n-\n-      if ((STARTING_FRAME_OFFSET + STARTING_FRAME_PHASE)\n-\t  % (STACK_BOUNDARY / BITS_PER_UNIT))\n-\tabort ();\n-    }\n-\n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (fndecl);\n   var_offset = STARTING_FRAME_OFFSET;"}]}