{"sha": "6ee5892638526366fc3d8a1f4426f3cc278ea061", "node_id": "C_kwDOANBUbNoAKDZlZTU4OTI2Mzg1MjYzNjZmYzNkOGExZjQ0MjZmM2NjMjc4ZWEwNjE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-22T10:02:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-22T10:03:54Z"}, "message": "lto-plugin: Use GNU ld or Solaris ld version script in preference to -export-symbols-regex [PR102426]\n\nAs reported, libtool -export-symbols-regex doesn't work on Solaris\nwhen using GNU ld instead of Sun ld, libtool just always assumes Sun ld.\nAs I'm unsure what is the maintainance status of libtool right now,\nthis patch solves it on the lto-plugin side instead, tests at configure time\nsimilar way how libssp and other target libraries test for symbol versioning\n(except omitting the symbol version because we just want one GLOBAL symbol\nand rest of them LOCAL), and will use the current way of\n-export-symbols-regex onload as fallback when this doesn't work.\n\n2022-03-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR lto/102426\nlto-plugin/\n\t* configure.ac (LTO_PLUGIN_USE_SYMVER, LTO_PLUGIN_USE_SYMVER_GNU,\n\tLTO_PLUGIN_USE_SYMVER_SUN): New test for symbol versioning support.\n\t* Makefile.am (version_arg, version_dep): Set conditionally based\n\ton LTO_PLUGIN_USE_SYMVER*.\n\t(liblto_plugin_la_LDFLAGS): Use $(version_arg) instead of\n\t-export-symbols-regex onload.\n\t(liblto_plugin_la_DEPENDENCIES): Depend on $(version_dep).\n\t* lto-plugin.map: New file.\n\t* configure: Regenerated.\n\t* Makefile.in: Regenerated.", "tree": {"sha": "6c9ae9cdf8cb260c5167a58cc453279962ef491d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9ae9cdf8cb260c5167a58cc453279962ef491d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee5892638526366fc3d8a1f4426f3cc278ea061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee5892638526366fc3d8a1f4426f3cc278ea061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee5892638526366fc3d8a1f4426f3cc278ea061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee5892638526366fc3d8a1f4426f3cc278ea061/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919fbffef0755562cd3b686c838069c20bc7878f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919fbffef0755562cd3b686c838069c20bc7878f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919fbffef0755562cd3b686c838069c20bc7878f"}], "stats": {"total": 187, "additions": 179, "deletions": 8}, "files": [{"sha": "a96acc87ee2811969ff89ebcd15b3063655399f3", "filename": "lto-plugin/Makefile.am", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.am?ref=6ee5892638526366fc3d8a1f4426f3cc278ea061", "patch": "@@ -18,11 +18,24 @@ libexecsub_LTLIBRARIES = liblto_plugin.la\n gcc_build_dir = @gcc_build_dir@\n in_gcc_libs = $(foreach lib, $(libexecsub_LTLIBRARIES), $(gcc_build_dir)/$(lib))\n \n+if LTO_PLUGIN_USE_SYMVER\n+if LTO_PLUGIN_USE_SYMVER_GNU\n+version_arg = -Wl,--version-script=$(srcdir)/lto-plugin.map\n+endif\n+if LTO_PLUGIN_USE_SYMVER_SUN\n+version_arg = -Wl,-M,$(srcdir)/lto-plugin.map\n+endif\n+version_dep = $(srcdir)/lto-plugin.map\n+else\n+version_arg = -export-symbols-regex onload\n+version_dep =\n+endif\n+\n liblto_plugin_la_SOURCES = lto-plugin.c\n # Note that we intentionally override the bindir supplied by ACX_LT_HOST_FLAGS.\n liblto_plugin_la_LDFLAGS = $(AM_LDFLAGS) \\\n \t$(lt_host_flags) -module -avoid-version -bindir $(libexecsubdir) \\\n-\t-export-symbols-regex onload\n+\t$(version_arg)\n # Can be simplified when libiberty becomes a normal convenience library.\n libiberty = $(with_libiberty)/libiberty.a\n libiberty_noasan = $(with_libiberty)/noasan/libiberty.a\n@@ -36,7 +49,8 @@ liblto_plugin_la_LDFLAGS += \\\n \t$(if $(wildcard $(libiberty_pic)),,-Wc,$(libiberty)))\n liblto_plugin_la_DEPENDENCIES = \\\n \t$(if $(wildcard $(libiberty_noasan)),$(libiberty_noasan), \\\n-\t$(if $(wildcard $(libiberty_pic)),$(libiberty_pic),))\n+\t$(if $(wildcard $(libiberty_pic)),$(libiberty_pic),)) \\\n+\t$(version_dep)\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n liblto_plugin_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\"}, {"sha": "5debcb21b66d252e8fc5946f1e6d4688e3af0a47", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=6ee5892638526366fc3d8a1f4426f3cc278ea061", "patch": "@@ -323,7 +323,6 @@ prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n real_target_noncanonical = @real_target_noncanonical@\n-runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -349,11 +348,16 @@ AM_LDFLAGS = @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static\n libexecsub_LTLIBRARIES = liblto_plugin.la\n in_gcc_libs = $(foreach lib, $(libexecsub_LTLIBRARIES), $(gcc_build_dir)/$(lib))\n+@LTO_PLUGIN_USE_SYMVER_FALSE@version_arg = -export-symbols-regex onload\n+@LTO_PLUGIN_USE_SYMVER_GNU_TRUE@@LTO_PLUGIN_USE_SYMVER_TRUE@version_arg = -Wl,--version-script=$(srcdir)/lto-plugin.map\n+@LTO_PLUGIN_USE_SYMVER_SUN_TRUE@@LTO_PLUGIN_USE_SYMVER_TRUE@version_arg = -Wl,-M,$(srcdir)/lto-plugin.map\n+@LTO_PLUGIN_USE_SYMVER_FALSE@version_dep = \n+@LTO_PLUGIN_USE_SYMVER_TRUE@version_dep = $(srcdir)/lto-plugin.map\n liblto_plugin_la_SOURCES = lto-plugin.c\n # Note that we intentionally override the bindir supplied by ACX_LT_HOST_FLAGS.\n liblto_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(lt_host_flags) -module \\\n-\t-avoid-version -bindir $(libexecsubdir) -export-symbols-regex \\\n-\tonload $(if $(wildcard $(libiberty_noasan)),, $(if $(wildcard \\\n+\t-avoid-version -bindir $(libexecsubdir) $(version_arg) $(if \\\n+\t$(wildcard $(libiberty_noasan)),, $(if $(wildcard \\\n \t$(libiberty_pic)),,-Wc,$(libiberty)))\n # Can be simplified when libiberty becomes a normal convenience library.\n libiberty = $(with_libiberty)/libiberty.a\n@@ -366,7 +370,8 @@ liblto_plugin_la_LIBADD = \\\n \n liblto_plugin_la_DEPENDENCIES = \\\n \t$(if $(wildcard $(libiberty_noasan)),$(libiberty_noasan), \\\n-\t$(if $(wildcard $(libiberty_pic)),$(libiberty_pic),))\n+\t$(if $(wildcard $(libiberty_pic)),$(libiberty_pic),)) \\\n+\t$(version_dep)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n liblto_plugin_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\"}, {"sha": "b820accfd655c4b028a40d45e79ccf0012283824", "filename": "lto-plugin/configure", "status": "modified", "additions": 114, "deletions": 2, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=6ee5892638526366fc3d8a1f4426f3cc278ea061", "patch": "@@ -650,6 +650,12 @@ LD\n FGREP\n SED\n LIBTOOL\n+LTO_PLUGIN_USE_SYMVER_SUN_FALSE\n+LTO_PLUGIN_USE_SYMVER_SUN_TRUE\n+LTO_PLUGIN_USE_SYMVER_GNU_FALSE\n+LTO_PLUGIN_USE_SYMVER_GNU_TRUE\n+LTO_PLUGIN_USE_SYMVER_FALSE\n+LTO_PLUGIN_USE_SYMVER_TRUE\n get_gcc_base_ver\n real_target_noncanonical\n accel_dir_suffix\n@@ -5910,6 +5916,100 @@ fi\n \n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether symbol versioning is supported\" >&5\n+$as_echo_n \"checking whether symbol versioning is supported... \" >&6; }\n+lto_plugin_use_symver=no\n+if test x$gcc_no_link = xyes; then\n+  # If we cannot link, we cannot build shared libraries, so do not use\n+  # symbol versioning.\n+  lto_plugin_use_symver=no\n+else\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,--version-script,./conftest.map\"\n+  cat > conftest.map <<EOF\n+{\n+  global: *foo*; bar; local: *;\n+};\n+EOF\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int foo;\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  lto_plugin_use_symver=gnu\n+else\n+  lto_plugin_use_symver=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+  if test x$lto_plugin_use_symver = xno; then\n+    case \"$target_os\" in\n+      solaris2*)\n+\tLDFLAGS=\"$save_LDFLAGS\"\n+\tLDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,-M,./conftest.map\"\n+\t# Sun ld cannot handle wildcards and treats all entries as undefined.\n+\tcat > conftest.map <<EOF\n+{\n+  global: foo; local: *;\n+};\n+EOF\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int foo;\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  lto_plugin_use_symver=sun\n+else\n+  lto_plugin_use_symver=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\t  ;;\n+    esac\n+  fi\n+  LDFLAGS=\"$save_LDFLAGS\"\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lto_plugin_use_symver\" >&5\n+$as_echo \"$lto_plugin_use_symver\" >&6; }\n+ if test \"x$lto_plugin_use_symver\" != xno; then\n+  LTO_PLUGIN_USE_SYMVER_TRUE=\n+  LTO_PLUGIN_USE_SYMVER_FALSE='#'\n+else\n+  LTO_PLUGIN_USE_SYMVER_TRUE='#'\n+  LTO_PLUGIN_USE_SYMVER_FALSE=\n+fi\n+\n+ if test \"x$lto_plugin_use_symver\" = xgnu; then\n+  LTO_PLUGIN_USE_SYMVER_GNU_TRUE=\n+  LTO_PLUGIN_USE_SYMVER_GNU_FALSE='#'\n+else\n+  LTO_PLUGIN_USE_SYMVER_GNU_TRUE='#'\n+  LTO_PLUGIN_USE_SYMVER_GNU_FALSE=\n+fi\n+\n+ if test \"x$lto_plugin_use_symver\" = xsun; then\n+  LTO_PLUGIN_USE_SYMVER_SUN_TRUE=\n+  LTO_PLUGIN_USE_SYMVER_SUN_FALSE='#'\n+else\n+  LTO_PLUGIN_USE_SYMVER_SUN_TRUE='#'\n+  LTO_PLUGIN_USE_SYMVER_SUN_FALSE=\n+fi\n+\n+\n case `pwd` in\n   *\\ * | *\\\t*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&5\n@@ -11981,7 +12081,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11984 \"configure\"\n+#line 12084 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12087,7 +12187,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12090 \"configure\"\n+#line 12190 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12558,6 +12658,18 @@ if test -z \"${am__fastdepCC_TRUE}\" && test -z \"${am__fastdepCC_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"am__fastdepCC\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LTO_PLUGIN_USE_SYMVER_TRUE}\" && test -z \"${LTO_PLUGIN_USE_SYMVER_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"LTO_PLUGIN_USE_SYMVER\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${LTO_PLUGIN_USE_SYMVER_GNU_TRUE}\" && test -z \"${LTO_PLUGIN_USE_SYMVER_GNU_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"LTO_PLUGIN_USE_SYMVER_GNU\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${LTO_PLUGIN_USE_SYMVER_SUN_TRUE}\" && test -z \"${LTO_PLUGIN_USE_SYMVER_SUN_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"LTO_PLUGIN_USE_SYMVER_SUN\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : \"${CONFIG_STATUS=./config.status}\"\n ac_write_fail=0"}, {"sha": "bc5b618a495097052e6a2893116d8632ab1cc189", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=6ee5892638526366fc3d8a1f4426f3cc278ea061", "patch": "@@ -50,6 +50,43 @@ AC_SUBST(real_target_noncanonical)\n # Determine what GCC version number to use in filesystem paths.\n GCC_BASE_VER\n \n+AC_MSG_CHECKING([whether symbol versioning is supported])\n+lto_plugin_use_symver=no\n+if test x$gcc_no_link = xyes; then\n+  # If we cannot link, we cannot build shared libraries, so do not use\n+  # symbol versioning.\n+  lto_plugin_use_symver=no\n+else\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,--version-script,./conftest.map\"\n+  cat > conftest.map <<EOF\n+{\n+  global: *foo*; bar; local: *;\n+};\n+EOF\n+  AC_TRY_LINK([int foo;],[],[lto_plugin_use_symver=gnu],[lto_plugin_use_symver=no])\n+  if test x$lto_plugin_use_symver = xno; then\n+    case \"$target_os\" in\n+      solaris2*)\n+\tLDFLAGS=\"$save_LDFLAGS\"\n+\tLDFLAGS=\"$LDFLAGS -fPIC -shared -Wl,-M,./conftest.map\"\n+\t# Sun ld cannot handle wildcards and treats all entries as undefined.\n+\tcat > conftest.map <<EOF\n+{\n+  global: foo; local: *;\n+};\n+EOF\n+\tAC_TRY_LINK([int foo;],[],[lto_plugin_use_symver=sun],[lto_plugin_use_symver=no])\n+\t  ;;\n+    esac\n+  fi\n+  LDFLAGS=\"$save_LDFLAGS\"\n+fi\n+AC_MSG_RESULT($lto_plugin_use_symver)\n+AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER, [test \"x$lto_plugin_use_symver\" != xno])\n+AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_GNU, [test \"x$lto_plugin_use_symver\" = xgnu])\n+AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_SUN, [test \"x$lto_plugin_use_symver\" = xsun])\n+\n AM_PROG_LIBTOOL\n ACX_LT_HOST_FLAGS\n AC_SUBST(target_noncanonical)"}, {"sha": "3d60e71cc2d9a494d2af8fe533c79b5fc2bca68e", "filename": "lto-plugin/lto-plugin.map", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Flto-plugin.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee5892638526366fc3d8a1f4426f3cc278ea061/lto-plugin%2Flto-plugin.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.map?ref=6ee5892638526366fc3d8a1f4426f3cc278ea061", "patch": "@@ -0,0 +1,3 @@\n+{\n+  global: onload; local: *;\n+};"}]}