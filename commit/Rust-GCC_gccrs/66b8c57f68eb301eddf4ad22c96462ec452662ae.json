{"sha": "66b8c57f68eb301eddf4ad22c96462ec452662ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiOGM1N2Y2OGViMzAxZWRkZjRhZDIyYzk2NDYyZWM0NTI2NjJhZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-06-30T18:53:53Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-06-30T18:53:53Z"}, "message": "mmix.md (\"return\"): New pattern.\n\n\t* config/mmix/mmix.md (\"return\"): New pattern.\n\t* config/mmix/mmix.h (TARGET_MASK_USE_RETURN_INSN)\n\t(TARGET_USE_RETURN_INSN): New macros.\n\t(TARGET_DEFAULT): Include TARGET_MASK_USE_RETURN_INSN.\n\t(TARGET_SWITCHES): Add -msingle-exit and -mno-single-exit.\n\t* config/mmix/mmix.c (MMIX_OUTPUT_REGNO): Fix spacing.\n\t(MMIX_POP_ARGUMENT): New macro.\n\t(mmix_target_asm_function_prologue): When no epilogue is executed,\n\tjust emit a blank line.  Use MMIX_POP_ARGUMENT with final POP insn.\n\t(mmix_print_operand) <case '.'>: New case.\n\t(mmix_print_operand_punct_valid_p): Match '.'.\n\t(mmix_use_simple_return): New function.\n\t* config/mmix/mmix-protos.h (mmix_use_simple_return): Prototype.\n\t* doc/invoke.texi (Option Summary) <MMIX Summary>: Add\n\t-msingle-exit, -mno-single-exit.\n\t(MMIX Options): Ditto.\n\nFrom-SVN: r55121", "tree": {"sha": "e431ba1e5a4842f776e3a6b963230c4d1df3b11e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e431ba1e5a4842f776e3a6b963230c4d1df3b11e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b8c57f68eb301eddf4ad22c96462ec452662ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b8c57f68eb301eddf4ad22c96462ec452662ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b8c57f68eb301eddf4ad22c96462ec452662ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b8c57f68eb301eddf4ad22c96462ec452662ae/comments", "author": null, "committer": null, "parents": [{"sha": "e7a60f5696cd3a26ca9c77ff102d2ef456270b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a60f5696cd3a26ca9c77ff102d2ef456270b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a60f5696cd3a26ca9c77ff102d2ef456270b5c"}], "stats": {"total": 131, "additions": 117, "deletions": 14}, "files": [{"sha": "b70fa7a72e4b85c1bcf83becb3bfa3856fadd682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -1,3 +1,22 @@\n+2002-06-30  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (\"return\"): New pattern.\n+\t* config/mmix/mmix.h (TARGET_MASK_USE_RETURN_INSN)\n+\t(TARGET_USE_RETURN_INSN): New macros.\n+\t(TARGET_DEFAULT): Include TARGET_MASK_USE_RETURN_INSN.\n+\t(TARGET_SWITCHES): Add -msingle-exit and -mno-single-exit.\n+\t* config/mmix/mmix.c (MMIX_OUTPUT_REGNO): Fix spacing.\n+\t(MMIX_POP_ARGUMENT): New macro.\n+\t(mmix_target_asm_function_prologue): When no epilogue is executed,\n+\tjust emit a blank line.  Use MMIX_POP_ARGUMENT with final POP insn.\n+\t(mmix_print_operand) <case '.'>: New case.\n+\t(mmix_print_operand_punct_valid_p): Match '.'.\n+\t(mmix_use_simple_return): New function.\n+\t* config/mmix/mmix-protos.h (mmix_use_simple_return): Prototype.\n+\t* doc/invoke.texi (Option Summary) <MMIX Summary>: Add\n+\t-msingle-exit, -mno-single-exit.\n+\t(MMIX Options): Ditto.\n+\n 2002-06-30  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/i386/i386.c (ix86_init_mmx_sse_builtins): Fix typos."}, {"sha": "5cfe561d3d36ec0d2ff28d377a67a635e5a4b2e6", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -82,6 +82,7 @@ extern void mmix_asm_output_aligned_local\n extern void mmix_asm_declare_register_global\n   PARAMS ((FILE *, tree, int, const char *));\n extern void mmix_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern int mmix_use_simple_return PARAMS ((void));\n \n /* Need tree.h and rtl.h */\n # ifdef RTX_CODE"}, {"sha": "7dbfb2e879d0fea0d6b64ffb53ad8f8c3ac15e07", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 77, "deletions": 10, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -71,11 +71,20 @@ Boston, MA 02111-1307, USA.  */\n    increasing rL and clearing unused (unset) registers with lower numbers.  */\n #define MMIX_OUTPUT_REGNO(N)\t\t\t\t\t\\\n  (TARGET_ABI_GNU \t\t\t\t\t\t\\\n-  || (int) (N) < MMIX_RETURN_VALUE_REGNUM\t\t\t\t\\\n-  || (int) (N) > MMIX_LAST_STACK_REGISTER_REGNUM\t\t\t\\\n+  || (int) (N) < MMIX_RETURN_VALUE_REGNUM\t\t\t\\\n+  || (int) (N) > MMIX_LAST_STACK_REGISTER_REGNUM\t\t\\\n   ? (N) : ((N) - MMIX_RETURN_VALUE_REGNUM\t\t\t\\\n \t   + cfun->machine->highest_saved_stack_register + 1))\n \n+/* The %d in \"POP %d,0\".  */\n+#define MMIX_POP_ARGUMENT()\t\t\t\t\t\t\\\n+ ((! TARGET_ABI_GNU\t\t\t\t\t\t\t\\\n+   && current_function_return_rtx != NULL\t\t\t\t\\\n+   && ! current_function_returns_struct)\t\t\t\t\\\n+  ? (GET_CODE (current_function_return_rtx) == PARALLEL\t\t\t\\\n+     ? GET_NUM_ELEM (XVEC (current_function_return_rtx, 0)) : 1)\t\\\n+  : 0)\n+\n /* The canonical saved comparison operands for non-cc0 machines, set in\n    the compare expander.  */\n rtx mmix_compare_op0;\n@@ -1058,6 +1067,26 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n   /* The first address to access is beyond the outgoing_args area.  */\n   int offset = current_function_outgoing_args_size;\n \n+  rtx insn = get_last_insn ();\n+\n+  /* If the last insn was a BARRIER, we don't have to write any code,\n+     then all returns were covered by \"return\" insns.  */\n+  if (GET_CODE (insn) == NOTE)\n+    insn = prev_nonnote_insn (insn);\n+  if (insn\n+      && (GET_CODE (insn) == BARRIER\n+\t  /* We must make sure that the insn really is a \"return\" and\n+\t     not a conditional branch.  Try to match the return exactly,\n+\t     and if it doesn't match, assume it is a conditional branch\n+\t     (and output an epilogue).  */\n+\t  || (GET_CODE (insn) == JUMP_INSN\n+\t      && GET_CODE (PATTERN (insn)) == RETURN)))\n+    {\n+      /* Emit an extra \\n as is done with the normal epilogue.  */\n+      fputc ('\\n', stream);\n+      return;\n+    }\n+\n   /* Add the space for global non-register-stack registers.\n      It is assumed that the frame-pointer register can be one of these\n      registers, in which case it is excluded from the count when needed.  */\n@@ -1197,13 +1226,7 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n \n   /* The extra \\n is so we have a blank line between the assembly code of\n      separate functions.  */\n-  fprintf (stream, \"\\tPOP %d,0\\n\\n\",\n-\t   (! TARGET_ABI_GNU\n-\t    && current_function_return_rtx != NULL\n-\t    && ! current_function_returns_struct)\n-\t   ? (GET_CODE (current_function_return_rtx) == PARALLEL\n-\t      ? GET_NUM_ELEM (XVEC (current_function_return_rtx, 0)) : 1)\n-\t   : 0);\n+  fprintf (stream, \"\\tPOP %d,0\\n\\n\", MMIX_POP_ARGUMENT ());\n }\n \n /* ASM_OUTPUT_MI_THUNK.  */\n@@ -2098,6 +2121,11 @@ mmix_print_operand (stream, x, code)\n \t}\n       return;\n \n+    case '.':\n+      /* For the %d in POP %d,0.  */\n+      fprintf (stream, \"%d\", MMIX_POP_ARGUMENT ());\n+      return;\n+\n     case 'B':\n       if (GET_CODE (x) != CONST_INT)\n \tfatal_insn (\"MMIX Internal: Expected a CONST_INT, not this\", x);\n@@ -2303,7 +2331,9 @@ mmix_print_operand_punct_valid_p (code)\n      int code ATTRIBUTE_UNUSED;\n {\n   /* A '+' is used for branch prediction, similar to other ports.  */\n-  return code == '+';\n+  return code == '+'\n+    /* A '.' is used for the %d in the POP %d,0 return insn.  */\n+    || code == '.';\n }\n \n /* PRINT_OPERAND_ADDRESS.  */\n@@ -2453,6 +2483,43 @@ mmix_dbx_register_number (regno)\n \n    Now MMIX's own functions.  First the exported ones.  */\n \n+/* Non-zero when the function epilogue is simple enough that a single\n+   \"POP %d,0\" should be used.  */\n+\n+int\n+mmix_use_simple_return ()\n+{\n+  int regno;\n+\n+  int stack_space_to_allocate\n+    = (current_function_outgoing_args_size\n+       + current_function_pretend_args_size\n+       + get_frame_size () + 7) & ~7;\n+\n+  if (!TARGET_USE_RETURN_INSN || !reload_completed)\n+    return 0;\n+\n+  for (regno = 255;\n+       regno >= MMIX_FIRST_GLOBAL_REGNUM;\n+       regno--)\n+    /* Note that we assume that the frame-pointer-register is one of these\n+       registers, in which case we don't count it here.  */\n+    if ((((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n+\t  && regs_ever_live[regno] && !call_used_regs[regno]))\n+\t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n+      return 0;\n+\n+  if (frame_pointer_needed)\n+    stack_space_to_allocate += 8;\n+\n+  if (MMIX_CFUN_HAS_LANDING_PAD)\n+    stack_space_to_allocate += 16;\n+  else if (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS)\n+    stack_space_to_allocate += 8;\n+\n+  return stack_space_to_allocate == 0;\n+}\n+\n /* Output an optimal sequence for setting a register to a specific\n    constant.  Used in an alternative for const_ints in movdi, and when\n    using large stack-frame offsets."}, {"sha": "7280a3e290424d0e29cc244d0801b38be1a52419", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -161,6 +161,7 @@ extern int target_flags;\n #define TARGET_MASK_KNUTH_DIVISION 16\n #define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n #define TARGET_MASK_BRANCH_PREDICT 64\n+#define TARGET_MASK_USE_RETURN_INSN 128\n \n /* We use the term \"base address\" since that's what Knuth uses.  The base\n    address goes in a global register.  When addressing, it's more like\n@@ -183,9 +184,11 @@ extern int target_flags;\n #define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n #define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n #define TARGET_BASE_ADDRESSES (target_flags & TARGET_MASK_BASE_ADDRESSES)\n+#define TARGET_USE_RETURN_INSN (target_flags & TARGET_MASK_USE_RETURN_INSN)\n \n #define TARGET_DEFAULT \\\n- (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_BASE_ADDRESSES)\n+ (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_BASE_ADDRESSES \\\n+  | TARGET_MASK_USE_RETURN_INSN)\n \n /* FIXME: Provide a way to *load* the epsilon register.  */\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n@@ -220,6 +223,10 @@ extern int target_flags;\n    N_(\"Use addresses that allocate global registers\")},\t\t\t\\\n   {\"no-base-addresses\",\t-TARGET_MASK_BASE_ADDRESSES,\t\t\t\\\n    N_(\"Do not use addresses that allocate global registers\")},\t\t\\\n+  {\"single-exit\",\t-TARGET_MASK_USE_RETURN_INSN,\t\t\t\\\n+   N_(\"Generate a single exit point for each function\")},\t\t\\\n+  {\"no-single-exit\",\tTARGET_MASK_USE_RETURN_INSN,\t\t\t\\\n+   N_(\"Do not generate a single exit point for each function\")},\t\\\n   {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */"}, {"sha": "024395b7a15e0ae3f4a3341027917705b4d1a9c1", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -1067,8 +1067,10 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; I hope untyped_call and untyped_return are not needed for MMIX.\n ;; Users of Objective C will notice.\n \n-;; FIXME:  Add \"return\" pattern where the epilogue is just \"pop\n-;; 0,0\" or similar.\n+(define_insn \"return\"\n+  [(return)]\n+  \"mmix_use_simple_return ()\"\n+  \"POP %.,0\")\n \n (define_insn \"nop\"\n   [(const_int 0)]"}, {"sha": "79f184c9f3a4021bd637d35d977ad58777ef7fba", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b8c57f68eb301eddf4ad22c96462ec452662ae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=66b8c57f68eb301eddf4ad22c96462ec452662ae", "patch": "@@ -600,7 +600,7 @@ in the following sections.\n -mlibfuncs -mno-libfuncs -mepsilon -mno-epsilon -mabi=gnu @gol\n -mabi=mmixware -mzero-extend -mknuthdiv -mtoplevel-symbols @gol\n -melf -mbranch-predict -mno-branch-predict -mbase-addresses @gol\n--mno-base-addresses}\n+-mno-base-addresses -msingle-exit -mno-single-exit}\n \n @emph{IA-64 Options}\n @gccoptlist{\n@@ -9312,6 +9312,13 @@ to 255 from the value held in the register.  The generally leads to short\n and fast code, but the number of different data items that can be\n addressed is limited.  This means that a program that uses lots of static\n data may require @option{-mno-base-addresses}.\n+\n+@item -msingle-exit\n+@itemx -mno-single-exit\n+@opindex msingle-exit\n+@opindex mno-single-exit\n+Force (do not force) generated code to have a single exit point in each\n+function.\n @end table\n \n @node PDP-11 Options"}]}