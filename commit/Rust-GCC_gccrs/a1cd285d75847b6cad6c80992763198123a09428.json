{"sha": "a1cd285d75847b6cad6c80992763198123a09428", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjZDI4NWQ3NTg0N2I2Y2FkNmM4MDk5Mjc2MzE5ODEyM2EwOTQyOA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-29T12:32:17Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-29T12:32:17Z"}, "message": "2002-11-29  Michael Koch <konqueror@gmx.de>\n\n\t* java/nio/channels/DatagramChannel.java\n\t(open): Added exception documentation.\n\t(write): Added exception documentation.\n\t(connect): Added exception documentation.\n\t(disconnect): Added exception documentation.\n\t(isConnected): Added exception documentation.\n\t(read): Added exception documentation.\n\t(receive): Added exception documentation.\n\t(send): Added exception documentation.\n\t(validOps): Added exception documentation.\n\t* java/nio/channels/SocketChannel.java\n\t(open): Added exception documentation.\n\t(read): Added exception documentation.\n\t(write): Added exception documentation.\n\t(connect): Added exception documentation.\n\t(finishConnect): Added exception documentation.\n\nFrom-SVN: r59633", "tree": {"sha": "b6da5e421503ff5c05fe03d56a17a3b7d2275ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6da5e421503ff5c05fe03d56a17a3b7d2275ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1cd285d75847b6cad6c80992763198123a09428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1cd285d75847b6cad6c80992763198123a09428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1cd285d75847b6cad6c80992763198123a09428", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1cd285d75847b6cad6c80992763198123a09428/comments", "author": null, "committer": null, "parents": [{"sha": "a4536c7a944127cec1e9e20f57afb5f20c8ba068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4536c7a944127cec1e9e20f57afb5f20c8ba068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4536c7a944127cec1e9e20f57afb5f20c8ba068"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "b88803fd90791e5a9d07fc4762fea43ff622e4c1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1cd285d75847b6cad6c80992763198123a09428/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1cd285d75847b6cad6c80992763198123a09428/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a1cd285d75847b6cad6c80992763198123a09428", "patch": "@@ -1,3 +1,22 @@\n+2002-11-29  Michael Koch <konqueror@gmx.de>\n+\n+\t* java/nio/channels/DatagramChannel.java\n+\t(open): Added exception documentation.\n+\t(write): Added exception documentation.\n+\t(connect): Added exception documentation.\n+\t(disconnect): Added exception documentation.\n+\t(isConnected): Added exception documentation.\n+\t(read): Added exception documentation.\n+\t(receive): Added exception documentation.\n+\t(send): Added exception documentation.\n+\t(validOps): Added exception documentation.\n+\t* java/nio/channels/SocketChannel.java\n+\t(open): Added exception documentation.\n+\t(read): Added exception documentation.\n+\t(write): Added exception documentation.\n+\t(connect): Added exception documentation.\n+\t(finishConnect): Added exception documentation.\n+\t\n 2002-11-29  Michael Koch <konqueror@gmx.de>\n \n \t* gnu/java/nio/DatagramChannelImpl:"}, {"sha": "6c457557b95d913839b088b7f307daf353f1c40c", "filename": "libjava/java/nio/channels/DatagramChannel.java", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1cd285d75847b6cad6c80992763198123a09428/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1cd285d75847b6cad6c80992763198123a09428/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java?ref=a1cd285d75847b6cad6c80992763198123a09428", "patch": "@@ -61,6 +61,8 @@ protected DatagramChannel (SelectorProvider provider)\n \n   /**\n    * Opens a datagram channel.\n+   *\n+   * @exception IOException If an error occurs\n    */\n   public static DatagramChannel open () throws IOException\n   {\n@@ -82,6 +84,9 @@ public final long read (ByteBuffer[] dsts) throws IOException\n   \n   /**\n    * Writes data to this channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public final long write (ByteBuffer[] srcs)\n   {\n@@ -95,16 +100,31 @@ public final long write (ByteBuffer[] srcs)\n     \n   /**\n    * Connects this channel's socket.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the connect operation is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the read operation is in progress, thereby closing the\n+   * channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an error occurs.\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit datagrams to be sent to the given address.\n    */\n   public abstract DatagramChannel connect (SocketAddress remote);\n \n   /**\n    * Disonnects this channel's socket.\n+   *\n+   * @exception IOException If an error occurs\n    */\n   public abstract DatagramChannel disconnect ();\n \n   /**\n    * Tells whether or not this channel's socket is connected.\n+   *\n+   * @exception IOException If an error occurs.\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public abstract boolean isConnected ();\n   \n@@ -115,16 +135,39 @@ public final long write (ByteBuffer[] srcs)\n   \n   /**\n    * Reads data from this channel.\n+   *\n+   * @exception IOException If an error occurs.\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public abstract long read (ByteBuffer[] dsts, int offset, int length);\n  \n   /**\n    * Receives a datagram via this channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the connect operation is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the read operation is in progress, thereby closing the\n+   * channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit datagrams to be sent to the given address.\n    */\n   public abstract SocketAddress receive (ByteBuffer dst);\n  \n   /**\n    * Sends a datagram via this channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the connect operation is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the read operation is in progress, thereby closing the\n+   * channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit datagrams to be sent to the given address.\n    */\n   public abstract int send (ByteBuffer src, SocketAddress target);\n  \n@@ -135,16 +178,25 @@ public final long write (ByteBuffer[] srcs)\n   \n   /**\n    * Writes data to this channel.\n+   *\n+   * @exception IOException If an error occurs.\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public abstract int write (ByteBuffer src);\n   \n   /**\n    * Writes data to this channel.\n+   *\n+   * @exception IOException If an error occurs.\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public abstract long write (ByteBuffer[] srcs, int offset, int length);\n \n   /**\n    * Retrieves the valid operations for this channel.\n+   *\n+   * @exception IOException If an error occurs.\n+   * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n   public final int validOps ()\n   {"}, {"sha": "368a8ee468c26a9dfa29c2746af126ccc7af0e50", "filename": "libjava/java/nio/channels/SocketChannel.java", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1cd285d75847b6cad6c80992763198123a09428/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1cd285d75847b6cad6c80992763198123a09428/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java?ref=a1cd285d75847b6cad6c80992763198123a09428", "patch": "@@ -60,6 +60,8 @@ protected SocketChannel (SelectorProvider provider)\n  \n   /**\n    * Opens a socket channel.\n+   *\n+   * @exception IOException If an error occurs\n    */\n   public static SocketChannel open () throws IOException\n   {\n@@ -68,6 +70,18 @@ public static SocketChannel open () throws IOException\n   \n   /**\n    * Opens a channel and connects it to a remote address.\n+   *\n+   * @exception AsynchronousCloseException If this channel is already connected.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the connect operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status.\n+   * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit access to the given remote endpoint.\n+   * @exception UnresolvedAddressException If the given remote address is not\n+   * fully resolved.\n+   * @exception UnsupportedAddressTypeException If the type of the given remote\n+   * address is not supported.\n    */\n   public static SocketChannel open (SocketAddress remote) throws IOException\n   {\n@@ -82,6 +96,9 @@ public static SocketChannel open (SocketAddress remote) throws IOException\n     \n   /**\n    * Reads data from the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public final long read (ByteBuffer[] dsts)\n   {\n@@ -97,6 +114,9 @@ public final long read (ByteBuffer[] dsts)\n     \n   /**\n    * Writes data to the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public final long write (ByteBuffer[] dsts)\n   {\n@@ -120,16 +140,44 @@ public final int validOps ()\n \n   /**\n    * Reads data from the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public abstract int read (ByteBuffer dst);\n \n   /**\n    * Connects the channel's socket to the remote address.\n+   *\n+   * @exception AlreadyConnectedException If this channel is already connected.\n+   * @exception AsynchronousCloseException If this channel is already connected.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the connect operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception ConnectionPendingException If a non-blocking connection\n+   * operation is already in progress on this channel.\n+   * @exception IOException If an error occurs\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit access to the given remote endpoint.\n+   * @exception UnresolvedAddressException If the given remote address is not\n+   * fully resolved.\n+   * @exception UnsupportedAddressTypeException If the type of the given remote\n+   * address is not supported.\n    */\n   public abstract boolean connect (SocketAddress remote) throws IOException;\n   \n   /**\n    * Finishes the process of connecting a socket channel.\n+   *\n+   * @exception AsynchronousCloseException If this channel is already connected.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the connect operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an error occurs\n+   * @exception NoConnectionPendingException If this channel is not connected\n+   * and a connection operation has not been initiated.\n    */\n   public abstract boolean finishConnect ();\n  \n@@ -145,6 +193,9 @@ public final int validOps ()\n   \n   /**\n    * Reads data from the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public abstract long read (ByteBuffer[] dsts, int offset, int length);\n  \n@@ -155,11 +206,17 @@ public final int validOps ()\n   \n   /**\n    * Writes data to the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public abstract int write (ByteBuffer src);\n   \n   /**\n    * Writes data to the channel.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n   public abstract long write (ByteBuffer[] srcs, int offset, int length);\n }"}]}