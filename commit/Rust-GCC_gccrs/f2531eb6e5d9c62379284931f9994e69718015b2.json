{"sha": "f2531eb6e5d9c62379284931f9994e69718015b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1MzFlYjZlNWQ5YzYyMzc5Mjg0OTMxZjk5OTRlNjk3MTgwMTViMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-09-23T09:29:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-23T09:29:02Z"}, "message": "mips.c (dump_constants_1): Generalize to include fractional and accumulator modes.\n\ngcc/\n\t* config/mips/mips.c (dump_constants_1): Generalize to include\n\tfractional and accumulator modes.\n\nFrom-SVN: r128684", "tree": {"sha": "149ca91c984f87e9c3a779cadd232e24ddc4cae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149ca91c984f87e9c3a779cadd232e24ddc4cae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2531eb6e5d9c62379284931f9994e69718015b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2531eb6e5d9c62379284931f9994e69718015b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2531eb6e5d9c62379284931f9994e69718015b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2531eb6e5d9c62379284931f9994e69718015b2/comments", "author": null, "committer": null, "parents": [{"sha": "254d164615d2c3c3225626fe7ee6d70802bafe5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254d164615d2c3c3225626fe7ee6d70802bafe5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254d164615d2c3c3225626fe7ee6d70802bafe5e"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "3d7faf5b04d66c1a2eef67d3bdca67c78744d3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2531eb6e5d9c62379284931f9994e69718015b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2531eb6e5d9c62379284931f9994e69718015b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2531eb6e5d9c62379284931f9994e69718015b2", "patch": "@@ -1,3 +1,8 @@\n+2007-09-23  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.c (dump_constants_1): Generalize to include\n+\tfractional and accumulator modes.\n+\n 2007-09-23  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.h (ISA_HAS_DSP, ISA_HAS_DSPR2): New macros."}, {"sha": "5e939d1ad2f7b1cc4d25b7faadc76f183f48da5e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2531eb6e5d9c62379284931f9994e69718015b2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2531eb6e5d9c62379284931f9994e69718015b2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f2531eb6e5d9c62379284931f9994e69718015b2", "patch": "@@ -10218,30 +10218,28 @@ add_constant (struct mips16_constant_pool *pool,\n static rtx\n dump_constants_1 (enum machine_mode mode, rtx value, rtx insn)\n {\n-  switch (GET_MODE_CLASS (mode))\n+  if (SCALAR_INT_MODE_P (mode)\n+      || ALL_SCALAR_FRACT_MODE_P (mode)\n+      || ALL_SCALAR_ACCUM_MODE_P (mode))\n     {\n-    case MODE_INT:\n-      {\n-\trtx size = GEN_INT (GET_MODE_SIZE (mode));\n-\treturn emit_insn_after (gen_consttable_int (value, size), insn);\n-      }\n+      rtx size = GEN_INT (GET_MODE_SIZE (mode));\n+      return emit_insn_after (gen_consttable_int (value, size), insn);\n+    }\n \n-    case MODE_FLOAT:\n-      return emit_insn_after (gen_consttable_float (value), insn);\n+  if (SCALAR_FLOAT_MODE_P (mode))\n+    return emit_insn_after (gen_consttable_float (value), insn);\n \n-    case MODE_VECTOR_FLOAT:\n-    case MODE_VECTOR_INT:\n-      {\n-\tint i;\n-\tfor (i = 0; i < CONST_VECTOR_NUNITS (value); i++)\n-\t  insn = dump_constants_1 (GET_MODE_INNER (mode),\n-\t\t\t\t   CONST_VECTOR_ELT (value, i), insn);\n-\treturn insn;\n-      }\n+  if (VECTOR_MODE_P (mode))\n+    {\n+      int i;\n \n-    default:\n-      gcc_unreachable ();\n+      for (i = 0; i < CONST_VECTOR_NUNITS (value); i++)\n+\tinsn = dump_constants_1 (GET_MODE_INNER (mode),\n+\t\t\t\t CONST_VECTOR_ELT (value, i), insn);\n+      return insn;\n     }\n+\n+  gcc_unreachable ();\n }\n \n "}]}