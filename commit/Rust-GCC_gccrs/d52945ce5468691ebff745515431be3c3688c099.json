{"sha": "d52945ce5468691ebff745515431be3c3688c099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyOTQ1Y2U1NDY4NjkxZWJmZjc0NTUxNTQzMWJlM2MzNjg4YzA5OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-15T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-15T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "72f89e40fcb718d5377deca7e85bc36a47ffedba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72f89e40fcb718d5377deca7e85bc36a47ffedba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d52945ce5468691ebff745515431be3c3688c099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52945ce5468691ebff745515431be3c3688c099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52945ce5468691ebff745515431be3c3688c099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52945ce5468691ebff745515431be3c3688c099/comments", "author": null, "committer": null, "parents": [{"sha": "22a90217305ee8c116bbc12c8d07abe7ca0ff61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a90217305ee8c116bbc12c8d07abe7ca0ff61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a90217305ee8c116bbc12c8d07abe7ca0ff61d"}], "stats": {"total": 539, "additions": 538, "deletions": 1}, "files": [{"sha": "2ac0bd50e8cb6f6a950dc7c9402e49d227f8fecd", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,7 @@\n+2020-12-14  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* .dir-locals.el (c-mode): Set 'fill-column' to 80 columns.\n+\n 2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/97865"}, {"sha": "cc1fbe70a7665394dc55a21c06485b35b72fd6f0", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,10 @@\n+2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* fixincl.x: Rerun genfixes.\n+\t* inclhack.def(aix_physadr_t): Change test_text to something\n+\tthat needs to be replaced.\n+\t* tests/base/sys/types.h(aix_physadr_t): Add expectation.\n+\n 2020-11-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* inclhack.def (aix_physaddr_t): New."}, {"sha": "890d8913a848037cfedfdac57f710b139abb38e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,111 @@\n+2020-12-14  Piotr Kubaj  <pkubaj@FreeBSD.org>\n+\t    Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* config/rs6000/freebsd64.h (PROCESSOR_DEFAULT): Update\n+\tto PROCESSOR_PPC7450.\n+\t(PROCESSOR_DEFAULT64): Update to PROCESSOR_POWER8.\n+\n+2020-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98166\n+\tPR c++/57111\n+\tPR middle-end/98160\n+\t* builtins.c (check_access): Call tree_inlined_location\n+\tfndecl_alloc_p): Handle BUILT_IN_ALIGNED_ALLOC and\n+\tBUILT_IN_GOMP_ALLOC.\n+\tcall_dealloc_p): Remove unused function.\n+\t(new_delete_mismatch_p): Call valid_new_delete_pair_p and rework.\n+\t(matching_alloc_calls_p): Handle built-in deallocation functions.\n+\t(warn_dealloc_offset): Corrct the handling of user-defined operators\n+\tdelete.\n+\t(maybe_emit_free_warning): Avoid assuming expression is a decl.\n+\tSimplify.\n+\t* doc/extend.texi (attribute malloc): Update.\n+\t* tree-ssa-dce.c (valid_new_delete_pair_p): Factor code out into\n+\tvalid_new_delete_pair_p in tree.c.\n+\t* tree.c (tree_inlined_location): Define new function.\n+\t(valid_new_delete_pair_p): Define.\n+\t* tree.h (tree_inlined_location): Declare.\n+\t(valid_new_delete_pair_p): Declare.\n+\n+2020-12-14  Sebastian Pop  <spop@amazon.com>\n+\n+\t* config.gcc (aarch64*-*-*): Remove --with-{cpu,arch,tune}-32 flags.\n+\n+2020-12-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Add --with-tune. Support --with-cpu=native.\n+\t* config/aarch64/aarch64.h (OPTION_DEFAULT_SPECS): Add --with-tune.\n+\n+2020-12-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (output_json_intermediate_file): Update comments.\n+\n+2020-12-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR middle-end/98264\n+\t* tree-vect-slp-patterns.c (linear_loads_p): Exclude TOP permute.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vnegq_f): Use 'neg' instead of unspec.\n+\t(mve_vnegq_s): Likewise.\n+\t* config/arm/neon.md (neg<mode>2): Rename into neon_neg<mode>2.\n+\t(<absneg_str><mode>2): Rename into neon_<absneg_str><mode>2.\n+\t(neon_v<absneg_str><mode>): Call gen_neon_<absneg_str><mode>2.\n+\t(vashr<mode>3): Call gen_neon_neg<mode>2.\n+\t(vlshr<mode>3): Call gen_neon_neg<mode>2.\n+\t(neon_vneg<mode>): Call gen_neon_neg<mode>2.\n+\t* config/arm/unspecs.md (VNEGQ_F, VNEGQ_S): Remove.\n+\t* config/arm/vec-common.md (neg<mode>2): New expander.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (VDQNOTM2): New mode iterator.\n+\t(supf): Remove VMVNQ_S and VMVNQ_U.\n+\t(VMVNQ): Remove.\n+\t* config/arm/mve.md (mve_vmvnq_u<mode>): New entry for vmvn\n+\tinstruction using expression not.\n+\t(mve_vmvnq_s<mode>): New expander.\n+\t* config/arm/neon.md (one_cmpl<mode>2): Renamed into\n+\tone_cmpl<mode>2_neon.\n+\t* config/arm/unspecs.md (VMVNQ_S, VMVNQ_U): Remove.\n+\t* config/arm/vec-common.md (one_cmpl<mode>2): New expander.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (supf): Remove VBICQ_S and VBICQ_U.\n+\t(VBICQ): Remove.\n+\t* config/arm/mve.md (mve_vbicq_u<mode>): New entry for vbic\n+\tinstruction using expression and not.\n+\t(mve_vbicq_s<mode>): New expander.\n+\t(mve_vbicq_f<mode>): Replace use of unspec by 'and not'.\n+\t* config/arm/unspecs.md (VBICQ_S, VBICQ_U, VBICQ_F): Remove.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (supf): Remove VEORQ_S and VEORQ_U.\n+\t(VEORQ): Remove.\n+\t* config/arm/mve.md (mve_veorq_u<mode>): New entry for veor\n+\tinstruction using expression xor.\n+\t(mve_veorq_s<mode>): New expander.\n+\t(mve_veorq_f<mode>): Use 'xor' code instead of unspec.\n+\t* config/arm/neon.md (xor<mode>3): Renamed into xor<mode>3_neon.\n+\t* config/arm/unspecs.md (VEORQ_S, VEORQ_U, VEORQ_F): Remove.\n+\t* config/arm/vec-common.md (xor<mode>3): New expander.\n+\n+2020-12-14  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Add Cortex-A78C core.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2020-12-14  Nikhil Benesch  <nikhil.benesch@gmail.com>\n+\n+\t* godump.c (go_output_typedef): Suppress typedefs whose name\n+\tmatches the tag of the underlying struct, union, or enum.\n+\tOutput declarations for enums that do not appear in typedefs.\n+\n 2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* config/vax/vax.c (vax_output_int_move): Unify push operation"}, {"sha": "25b62f898bda4678d2c526b5226a6404c28c6e46", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1 +1 @@\n-20201214\n+20201215"}, {"sha": "d095742af3aae45031123efbf04476765672c602", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,304 @@\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Resolve second parameter of\n+\tattribute Scaling just like it is resolved for a similar\n+\tattribute Compose.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tFirst/Last, First_Bit/Last_Bit and First_Valid/Last_Valid\n+\tattributes.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge similar code for\n+\tTruncation and other floating point attributes.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Merge identical code for\n+\tCeiling, Floor, Fraction, Machine, Machine_Rounding, Model,\n+\tRounding and Unbiased_Rounding.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Adjust documentation.\n+\t(OK_Get_32): Compare the object size of the base type.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t* libgnat/a-tifiio__128.adb: Adjust documentation.\n+\t(OK_Get_32): Compare the object size of the base type.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\t* libgnat/a-wtfiio.adb (OK_Get_32): Likewise.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise\n+\t* libgnat/a-wtfiio__128.adb (OK_Get_32): Likewise.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\t* libgnat/a-ztfiio.adb (OK_Get_32): Likewise.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise\n+\t* libgnat/a-ztfiio__128.adb (OK_Get_32): Likewise.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb (Get): Replace Current_Input with Current_In.\n+\t* libgnat/a-tifiio__128.adb: (Get): Likewise.\n+\t* libgnat/a-wtcoio.adb (Get): Likewise.\n+\t(Put): Replace Current_Output with Current_Out.\n+\t* libgnat/a-wtdeio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtdeio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtenio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtfiio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtfiio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtflio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtinio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtinio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtmoio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-wtmoio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztcoio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztdeio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztdeio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztenio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztfiio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztfiio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztflio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztinio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztinio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztmoio.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\t* libgnat/a-ztmoio__128.adb (Get): Likewise.\n+\t(Put): Likewise.\n+\n+2020-12-14  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (In_Generic_Formal_Package):\n+\tCreated to identify type declarations occurring within generic\n+\tformal packages.\n+\t* sem_res.adb (Resolve_Allocator): Add condition to avoid\n+\temitting an error for allocators when the type being allocated\n+\tis class-wide and from a generic formal package.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb (Tiny80): Add alignment clause.\n+\n+2020-12-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Process_Current_Value_Condition): Add assertion.\n+\t* libgnat/s-fatgen.adb (Scaling): Add annotation.\n+\n+2020-12-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Fold_Shift): Compute values using the base type.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb: Add with clause for Interfaces and use\n+\ttype clause for Interfaces.Unsigned_64.\n+\t(Small): Comment out.\n+\t(Tiny): Likewise.\n+\t(Tiny16): New integer constant.\n+\t(Tiny32): Likewise.\n+\t(Tiny64): Likewise.\n+\t(Tiny80): New integer array constant.\n+\t(Pred): Declare a local overlay for Tiny.\n+\t(Succ): Likewise.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Bit_Packed_Element_Set): Fix again packed\n+\tarray type in complex cases where array is Volatile.\n+\t* exp_util.adb (Remove_Side_Effects): Do not force a renaming to\n+\tbe handled by the back-end.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb: Remove use clause for\n+\tSystem.Unsigned_Types.\n+\t(Scaling): Add renaming of System.Unsigned_Types and use type\n+\tclause for Long_Long_Unsigned.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.ads (Compose): Add pragma Inline.\n+\t(Copy_Sign): Likewise.\n+\t(Exponent): Likewise.\n+\t(Fraction): Likewise.\n+\t* libgnat/s-fatgen.adb: Remove with clause for System, add\n+\twith and use clauses for System.Unsigned_Types.\n+\tAdd pragma Warnings (Off) for non-static constants.\n+\tRemove precomputed tables of powers of radix and add a few\n+\tconstants describing the floating-point format.\n+\t(Gradual_Scaling): Delete.\n+\t(Copy_Sign): Reimplement directly.\n+\t(Decompose): Likewise.\n+\t(Scaling): Likewise.\n+\t(Pred): Speed up.\n+\t(Succ): Likewise.\n+\t(Truncation): Tidy up.\n+\t(Valid): Move constants to library level.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (CV_Cache): Remove initialization at elaboration.\n+\n+2020-12-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tCorrect documentation of the -gnatw.K switch to say that it\n+\tdisables rather than activates the warning.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-12-14  Doug Rupp  <rupp@adacore.com>\n+\n+\t* tracebak.c: Add a section for ARM Linux.\n+\n+2020-12-14  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* par-ch3.adb (P_Discriminant_Part_Opt): Parse aspects, update\n+\tdocumentation.\n+\t* par-ch6.adb (P_Return_Statement): Likewise.\n+\t* par-ch9.adb (P_Entry_Index_Specification): Likewise.\n+\n+2020-12-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Assign): Move\n+\tgeneration of the call for DIC check past the optional\n+\tgeneration of calls to controlled Initialize procedures.\n+\t* exp_ch3.adb\n+\t(Build_Array_Init_Proc.Init_One_Dimension.Possible_DIC_Call):\n+\tSuppress generation of a DIC call when the array component type\n+\tis controlled.  The call will now be generated later inside the\n+\tarray's DI (Deep_Initialize) procedure.\n+\t* exp_ch7.adb\n+\t(Make_Deep_Array_Body.Build_Initialize_Statements): Generate a\n+\tDIC call (when needed by the array component type) after any\n+\tcall to the component type's controlled Initialize procedure, or\n+\tgenerate the DIC call by itself if there's no Initialize to\n+\tcall.\n+\t* sem_aggr.adb (Resolve_Record_Aggregate.Add_Association):\n+\tSimplify condition to only test Is_Box_Init_By_Default (previous\n+\tcondition was overkill, as well as incorrect in some cases).\n+\t* sem_elab.adb (Active_Scenarios.Output_Call): For\n+\tDefault_Initial_Condition, suppress call to\n+\tOutput_Verification_Call when the subprogram is a partial DIC\n+\tprocedure.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Round>:\n+\tAdjust commentary and set the Rounded_Result flag on the type\n+\tconversion node when the node is needed.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Minor tweak.\n+\t(Fixup_Universal_Fixed_Operation): Look through the type conversion\n+\tonly when it is to Universal_Real.\n+\t* exp_fixd.adb: Remove with and use clauses for Snames.\n+\t(Build_Divide): Remove redundant test.\n+\t(Expand_Convert_Float_To_Fixed): Use Rounded_Result flag on the\n+\tnode to set the truncation parameter.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refinement_Clause): Simplify recently\n+\tadded code for preventing cascaded errors.\n+\n+2020-12-14  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Further narrow\n+\tthe conditions under which we enable build-in-place for\n+\tcontrolled types.\n+\n+2020-12-14  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Output_Non_Modified_In_Out_Warnings): Use right\n+\twarning control character 'k' in both comment and call to\n+\tErrout_Msg_N.\n+\n+2020-12-14  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refined_State_In_Decl_Part): Refine the\n+\terror message for missing Part_Of on constituent. Avoid\n+\tcascading error.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part): Replace early\n+\treturns with goto Leave.\n+\t(Collect_Subprogram_Inputs_Outputs): Fix style in comment.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.ads (Valid): Add again pragma Inline.\n+\t* libgnat/s-fatgen.adb (Valid): Improve commentary, tidy up left\n+\tand right, and remove superfluous trick for denormalized numbers.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Find_Role): Constant object of\n+\taccess-to-constant and access-to-subprogram types are not\n+\twritable.\n+\t(Collect_Subprogram_Inputs_Outputs): In-parameters of\n+\taccess-to-variable type can act as outputs of the Depends\n+\tcontracts.\n+\n+2020-12-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sa_messages.ads: Reference Subprogram_Variant in the comment\n+\tfor Assertion_Check.\n+\t* sem_prag.adb (Analyze_Pragma): Add Subprogram_Variant as an\n+\tID_ASSERTION_KIND; move Default_Initial_Condition as an\n+\tRM_ASSERTION_KIND.\n+\n+2020-12-14  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Cannot_Inline): Add No_Info parameter to disable\n+\tinfo message.\n+\t* inline.ads (Cannot_Inline): When No_Info is set to True, do\n+\tnot issue info message in GNATprove mode, but still mark the\n+\tsubprogram as not always inlined.\n+\t* sem_res.adb (Resolve_Call): Always call Cannot_Inline inside\n+\tan assertion expression.\n+\n+2020-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-imguti.ads (Set_Decimal_Digits): Adjust documentation.\n+\n 2020-12-10  Ed Schonberg  <schonberg@adacore.com>\n \n \tPR ada/98230"}, {"sha": "2ed7b336877eaa6df55367b0ddd8d4805a5534cb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,13 @@\n+2020-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98166\n+\tPR c++/57111\n+\tPR middle-end/98160\n+\t* c-attribs.c (maybe_add_noinline): New function.\n+\t(handle_malloc_attribute): Call it.  Use ATTR_FLAG_INTERNAL.\n+\tImplicitly add attribute noinline to functions not declared inline\n+\tand warn on those.\n+\n 2020-12-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-pragma.c (omp_pragmas): Add 'allocate'."}, {"sha": "1ed66af66938baa13be8a0133c366ccd0566c99d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,10 @@\n+2020-12-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/98204\n+\t* c-typeck.c (pointer_diff): Do not emit a top-level\n+\tsanitization.\n+\t(build_binary_op): Likewise.\n+\n 2020-12-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_allocate): New."}, {"sha": "879389a046a5853a8840d40795553f9c598a9fca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,72 @@\n+2020-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98166\n+\tPR c++/57111\n+\tPR middle-end/98160\n+\t* g++.dg/warn/Wmismatched-dealloc-2.C: Adjust test of expected warning.\n+\t* g++.dg/warn/Wmismatched-new-delete.C: Same.\n+\t* gcc.dg/Wmismatched-dealloc.c: Same.\n+\t* c-c++-common/Wfree-nonheap-object-2.c: New test.\n+\t* c-c++-common/Wfree-nonheap-object-3.c: New test.\n+\t* c-c++-common/Wfree-nonheap-object.c: New test.\n+\t* c-c++-common/Wmismatched-dealloc.c: New test.\n+\t* g++.dg/warn/Wfree-nonheap-object-3.C: New test.\n+\t* g++.dg/warn/Wfree-nonheap-object-4.C: New test.\n+\t* g++.dg/warn/Wmismatched-dealloc-2.C: New test.\n+\t* g++.dg/warn/Wmismatched-new-delete-2.C: New test.\n+\t* g++.dg/warn/Wmismatched-new-delete.C: New test.\n+\t* gcc.dg/Wmismatched-dealloc-2.c: New test.\n+\t* gcc.dg/Wmismatched-dealloc-3.c: New test.\n+\t* gcc.dg/Wmismatched-dealloc.c: New test.\n+\n+2020-12-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_tune_cortex_a76): New\n+\teffective target test.\n+\t* gcc.target/aarch64/with-tune-config.c: New test.\n+\t* gcc.target/aarch64/with-tune-march.c: Likewise.\n+\t* gcc.target/aarch64/with-tune-mcpu.c: Likewise.\n+\t* gcc.target/aarch64/with-tune-mtune.c: Likewise.\n+\n+2020-12-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR middle-end/98264\n+\t* gcc.target/i386/pr98264.c: New test.\n+\n+2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* lib/target-supports.exp(check_profiling_available): Limit\n+\tperf data buffer.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vneg.c: Add tests for vneg.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vmvn.c: Add tests for vmvn.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vbic.c: Add tests for vbic.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-veor.c: Add tests for veor.\n+\n+2020-12-14  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/vect-half-floats.c: Fix typos.\n+\n+2020-12-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/98204\n+\t* c-c++-common/asan/pr98204.c: New test.\n+\n+2020-12-14  Nikhil Benesch  <nikhil.benesch@gmail.com>\n+\n+\t* gcc.misc-tests/godump-1.c: Add test cases.\n+\n 2020-12-13  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* gcc.target/vax/push.c: New test."}, {"sha": "c0714695b20865f6d222066bccb24a3f7b6037d1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,11 @@\n+2020-12-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (struct cpp_macro): Add imported_p field.\n+\t(struct cpp_hashnode): Tweak deferred field documentation.\n+\t* macro.c (_cpp_new_macro): Clear new field.\n+\t(cpp_get_deferred_macro, get_deferred_or_lazy_macro): Assert\n+\tmore.\n+\n 2020-12-10  Jason Merrill  <jason@redhat.com>\n \n \t* init.c (cpp_init_builtins): Update __cplusplus for C++20."}, {"sha": "8df65b9513fbccb0a6599cb6ecde9addd8e9535f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52945ce5468691ebff745515431be3c3688c099/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52945ce5468691ebff745515431be3c3688c099/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d52945ce5468691ebff745515431be3c3688c099", "patch": "@@ -1,3 +1,26 @@\n+2020-12-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/23_containers/array/debug/back1_neg.cc: Target c++14 because assertion\n+\tis disabled in C++11.\n+\t* testsuite/23_containers/array/debug/front1_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc: Likewise.\n+\n+2020-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* testsuite/ext/vstring/requirements/exception/basic.cc: Suppress\n+\ta false positive warning.\n+\t* testsuite/ext/vstring/requirements/exception/propagation_consistent.cc:\n+\t  Same.\n+\n+2020-12-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/23_containers/array/debug/back2_neg.cc: target c++14 because assertion\n+\tfor constexpr is disabled in C++11.\n+\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/multithreaded_swap.cc: Include <memory>\n+\tfor shared_ptr.\n+\n 2020-12-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/macros.h (__glibcxx_check_can_increment_range): Replace"}]}