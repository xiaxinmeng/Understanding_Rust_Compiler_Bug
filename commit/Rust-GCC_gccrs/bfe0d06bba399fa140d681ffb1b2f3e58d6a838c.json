{"sha": "bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlMGQwNmJiYTM5OWZhMTQwZDY4MWZmYjFiMmYzZTU4ZDZhODM4Yw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2004-09-25T22:11:02Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2004-09-25T22:11:02Z"}, "message": "tree-gimple.c: Move GIMPLE definition...\n\n\n2004-09-25  Dale Johannesen  <dalej@apple.com>\n\n        * tree-gimple.c:  Move GIMPLE definition...\n        * doc/tree-ssa.texi:  here.\n\nFrom-SVN: r88111", "tree": {"sha": "d3b5eef730c7e666e7f24cab9c6b4406cf88b636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b5eef730c7e666e7f24cab9c6b4406cf88b636"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/comments", "author": null, "committer": null, "parents": [{"sha": "45343b92cc40d960ca6b8a53e5805c97b795542b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45343b92cc40d960ca6b8a53e5805c97b795542b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45343b92cc40d960ca6b8a53e5805c97b795542b"}], "stats": {"total": 409, "additions": 155, "deletions": 254}, "files": [{"sha": "0ba761ff869cf00e2ce077579dc31676622ebd46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "patch": "@@ -1,3 +1,8 @@\n+2004-09-25  Dale Johannesen  <dalej@apple.com>\n+\n+\t* tree-gimple.c:  Move GIMPLE definition...\n+\t* doc/tree-ssa.texi:  here.\n+\n 2004-09-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-vectorizer.c: Fix a comment typo."}, {"sha": "b5b9ad926a4596237e4dc98c7518a6450e83e60e", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 149, "deletions": 100, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "patch": "@@ -83,7 +83,8 @@ perfectly happy to take it as input and spit out GIMPLE.\n \n GIMPLE is a simplified subset of GENERIC for use in optimization.  The\n particular subset chosen (and the name) was heavily influenced by the\n-SIMPLE IL used by the McCAT compiler project at McGill University,\n+SIMPLE IL used by the McCAT compiler project at McGill University\n+(@uref{http://www-acaps.cs.mcgill.ca/info/McCAT/McCAT.html}),\n though we have made some different choices.  For one thing, SIMPLE\n doesn't support @code{goto}; a production compiler can't afford that\n kind of restriction.\n@@ -529,105 +530,153 @@ void f()\n @cindex Rough GIMPLE Grammar\n \n @smallexample\n-function:\n-  FUNCTION_DECL\n-    DECL_SAVED_TREE -> block\n-block:\n-  BIND_EXPR\n-    BIND_EXPR_VARS -> DECL chain\n-    BIND_EXPR_BLOCK -> BLOCK\n-    BIND_EXPR_BODY \n-      -> compound-stmt\n-compound-stmt:\n-  COMPOUND_EXPR\n-    op0 -> non-compound-stmt\n-    op1 -> stmt\n-stmt: compound-stmt\n-  | non-compound-stmt\n-non-compound-stmt:\n-  block\n-  | if-stmt\n-  | switch-stmt\n-  | jump-stmt\n-  | label-stmt\n-  | try-stmt\n-  | modify-stmt\n-  | call-stmt\n-if-stmt:\n-  COND_EXPR\n-    op0 -> condition\n-    op1 -> stmt\n-    op2 -> stmt\n-switch-stmt:\n-  SWITCH_EXPR\n-    op0 -> val\n-    op1 -> NULL_TREE\n-    op2 -> TREE_VEC of CASE_LABEL_EXPRs\n-jump-stmt:\n-    GOTO_EXPR\n-      op0 -> LABEL_DECL | '*' ID\n-  | RETURN_EXPR\n-      op0 -> modify-stmt\n-             | NULL_TREE\n-label-stmt:\n-  LABEL_EXPR\n-      op0 -> LABEL_DECL\n-try-stmt:\n-  TRY_CATCH_EXPR\n-    op0 -> stmt\n-    op1 -> handler\n-  | TRY_FINALLY_EXPR\n-    op0 -> stmt\n-    op1 -> stmt\n-handler:\n-  catch-seq\n-  | EH_FILTER_EXPR\n-  | stmt\n-catch-seq:\n-  CATCH_EXPR\n-  | COMPOUND_EXPR\n-      op0 -> CATCH_EXPR\n-      op1 -> catch-seq\n-modify-stmt:\n-  MODIFY_EXPR\n-    op0 -> lhs\n-    op1 -> rhs\n-call-stmt: CALL_EXPR\n-  op0 -> _DECL | '&' _DECL\n-  op1 -> arglist\n-arglist:\n-  NULL_TREE\n-  | TREE_LIST\n-      op0 -> val\n-      op1 -> arglist\n-\n-varname : compref | _DECL\n-lhs: varname | '*' _DECL\n-pseudo-lval: _DECL | '*' _DECL\n-compref :\n-  COMPONENT_REF\n-    op0 -> compref | pseudo-lval\n-  | ARRAY_REF\n-    op0 -> compref | pseudo-lval\n-    op1 -> val\n-\n-condition : val | val relop val\n-val : _DECL | CONST\n-\n-rhs: varname | CONST\n-   | '*' _DECL\n-   | '&' varname\n-   | call_expr\n-   | unop val\n-   | val binop val\n-   | '(' cast ')' val\n-\n-unop: '+' | '-' | '!' | '~'\n-\n-binop: relop | '-' | '+' | '/' | '*'\n-  | '%' | '&' | '|' | '<<' | '>>' | '^'\n-\n-relop: All tree codes of class '<'\n+   function     : FUNCTION_DECL\n+                        DECL_SAVED_TREE -> compound-stmt\n+\n+   compound-stmt: STATEMENT_LIST\n+                        members -> stmt\n+\n+   stmt         : block\n+                | if-stmt\n+                | switch-stmt\n+                | goto-stmt\n+                | return-stmt\n+                | resx-stmt\n+                | label-stmt\n+                | try-stmt\n+                | modify-stmt\n+                | call-stmt\n+\n+   block        : BIND_EXPR\n+                        BIND_EXPR_VARS -> chain of DECLs\n+                        BIND_EXPR_BLOCK -> BLOCK\n+                        BIND_EXPR_BODY -> compound-stmt\n+\n+   if-stmt      : COND_EXPR\n+                        op0 -> condition\n+                        op1 -> compound-stmt\n+                        op2 -> compound-stmt\n+\n+   switch-stmt  : SWITCH_EXPR\n+                        op0 -> val\n+                        op1 -> NULL\n+                        op2 -> TREE_VEC of CASE_LABEL_EXPRs\n+                            The CASE_LABEL_EXPRs are sorted by CASE_LOW,\n+                            and default is last.\n+\n+   goto-stmt    : GOTO_EXPR\n+                        op0 -> LABEL_DECL | val\n+\n+   return-stmt  : RETURN_EXPR\n+                        op0 -> return-value\n+\n+   return-value : NULL\n+                | RESULT_DECL\n+                | MODIFY_EXPR\n+                        op0 -> RESULT_DECL\n+                        op1 -> lhs\n+\n+   resx-stmt    : RESX_EXPR\n+\n+   label-stmt   : LABEL_EXPR\n+                        op0 -> LABEL_DECL\n+\n+   try-stmt     : TRY_CATCH_EXPR\n+                        op0 -> compound-stmt\n+                        op1 -> handler\n+                | TRY_FINALLY_EXPR\n+                        op0 -> compound-stmt\n+                        op1 -> compound-stmt\n+\n+   handler      : catch-seq\n+                | EH_FILTER_EXPR\n+                | compound-stmt\n+\n+   catch-seq    : STATEMENT_LIST\n+                        members -> CATCH_EXPR\n+\n+   modify-stmt  : MODIFY_EXPR\n+                        op0 -> lhs\n+                        op1 -> rhs\n+\n+   call-stmt    : CALL_EXPR\n+                        op0 -> val | OBJ_TYPE_REF\n+                        op1 -> call-arg-list\n+\n+   call-arg-list: TREE_LIST\n+                        members -> lhs | CONST\n+\n+   addr-expr-arg: ID\n+                | compref\n+\n+   addressable  : addr-expr-arg\n+                | indirectref\n+\n+   with-size-arg: addressable\n+                | call-stmt\n+\n+   indirectref  : INDIRECT_REF\n+                        op0 -> val\n+\n+   lhs          : addressable\n+                | bitfieldref\n+                | WITH_SIZE_EXPR\n+                        op0 -> with-size-arg\n+                        op1 -> val\n+\n+   min-lval     : ID\n+                | indirectref\n+\n+   bitfieldref  : BIT_FIELD_REF\n+                        op0 -> inner-compref\n+                        op1 -> CONST\n+                        op2 -> var\n+\n+   compref      : inner-compref\n+                | REALPART_EXPR\n+                        op0 -> inner-compref\n+                | IMAGPART_EXPR\n+                        op0 -> inner-compref\n+\n+   inner-compref: min-lval\n+                | COMPONENT_REF\n+                        op0 -> inner-compref\n+                        op1 -> FIELD_DECL\n+                        op2 -> val\n+                | ARRAY_REF\n+                        op0 -> inner-compref\n+                        op1 -> val\n+                        op2 -> val\n+                        op3 -> val\n+                | ARRAY_RANGE_REF\n+                        op0 -> inner-compref\n+                        op1 -> val\n+                        op2 -> val\n+                        op3 -> val\n+                | VIEW_CONVERT_EXPR\n+                        op0 -> inner-compref\n+\n+   condition    : val\n+                | RELOP\n+                        op0 -> val\n+                        op1 -> val\n+\n+   val          : ID\n+                | CONST\n+\n+   rhs          : lhs\n+                | CONST\n+                | call-stmt\n+                | ADDR_EXPR\n+                        op0 -> addr-expr-arg\n+                | UNOP\n+                        op0 -> val\n+                | BINOP\n+                        op0 -> val\n+                        op1 -> val\n+                | RELOP\n+                        op0 -> val\n+                        op1 -> val\n @end smallexample\n \n @node Annotations"}, {"sha": "818ec1378aa64ea1f6ced69ef20db8a6a07784b5", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 154, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe0d06bba399fa140d681ffb1b2f3e58d6a838c/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=bfe0d06bba399fa140d681ffb1b2f3e58d6a838c", "patch": "@@ -33,160 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"bitmap.h\"\n \n-/* GCC GIMPLE structure\n-\n-   Inspired by the SIMPLE C grammar at\n-\n-\thttp://www-acaps.cs.mcgill.ca/info/McCAT/McCAT.html\n-\n-   function\t: FUNCTION_DECL\n-\t\t\tDECL_SAVED_TREE -> compound-stmt\n-\n-   compound-stmt: STATEMENT_LIST\n-\t\t\tmembers -> stmt\n-\n-   stmt\t\t: block\n-\t\t| if-stmt\n-\t\t| switch-stmt\n-\t\t| goto-stmt\n-\t\t| return-stmt\n-\t\t| resx-stmt\n-\t\t| label-stmt\n-\t\t| try-stmt\n-\t\t| modify-stmt\n-\t\t| call-stmt\n-\n-   block\t: BIND_EXPR\n-\t\t\tBIND_EXPR_VARS -> chain of DECLs\n-\t\t\tBIND_EXPR_BLOCK -> BLOCK\n-\t\t\tBIND_EXPR_BODY -> compound-stmt\n-\n-   if-stmt\t: COND_EXPR\n-\t\t\top0 -> condition\n-\t\t\top1 -> compound-stmt\n-\t\t\top2 -> compound-stmt\n-\n-   switch-stmt\t: SWITCH_EXPR\n-\t\t\top0 -> val\n-\t\t\top1 -> NULL\n-\t\t\top2 -> TREE_VEC of CASE_LABEL_EXPRs\n-\t\t\t    The CASE_LABEL_EXPRs are sorted by CASE_LOW,\n-\t\t\t    and default is last.\n-\n-   goto-stmt\t: GOTO_EXPR\n-\t\t\top0 -> LABEL_DECL | val\n-\n-   return-stmt\t: RETURN_EXPR\n-\t\t\top0 -> return-value\n-\n-   return-value\t: NULL\n-\t\t| RESULT_DECL\n-\t\t| MODIFY_EXPR\n-\t\t\top0 -> RESULT_DECL\n-\t\t\top1 -> lhs\n-\n-   resx-stmt\t: RESX_EXPR\n-\n-   label-stmt\t: LABEL_EXPR\n-\t\t\top0 -> LABEL_DECL\n-\n-   try-stmt\t: TRY_CATCH_EXPR\n-\t\t\top0 -> compound-stmt\n-\t\t\top1 -> handler\n-\t\t| TRY_FINALLY_EXPR\n-\t\t\top0 -> compound-stmt\n-\t\t\top1 -> compound-stmt\n-\n-   handler\t: catch-seq\n-\t\t| EH_FILTER_EXPR\n-\t\t| compound-stmt\n-\n-   catch-seq\t: STATEMENT_LIST\n-\t\t\tmembers -> CATCH_EXPR\n-\n-   modify-stmt\t: MODIFY_EXPR\n-\t\t\top0 -> lhs\n-\t\t\top1 -> rhs\n-\n-   call-stmt\t: CALL_EXPR\n-\t\t\top0 -> val | OBJ_TYPE_REF\n-\t\t\top1 -> call-arg-list\n-\n-   call-arg-list: TREE_LIST\n-\t\t\tmembers -> lhs\n-\n-   addr-expr-arg: ID\n-\t\t| compref\n-\n-   addressable\t: addr-expr-arg\n-\t\t| indirectref\n-\n-   with-size-arg: addressable\n-\t\t| call-stmt\n-\n-   indirectref\t: INDIRECT_REF\n-\t\t\top0 -> val\n-\n-   lhs\t\t: addressable\n-\t\t| bitfieldref\n-\t\t| WITH_SIZE_EXPR\n-\t\t\top0 -> with-size-arg\n-\t\t\top1 -> val\n-\n-   min-lval\t: ID\n-\t\t| indirectref\n-\n-   bitfieldref\t: BIT_FIELD_REF\n-\t\t\top0 -> inner-compref\n-\t\t\top1 -> CONST\n-\t\t\top2 -> var\n-\n-   compref\t: inner-compref\n-\t\t| REALPART_EXPR\n-\t\t\top0 -> inner-compref\n-\t\t| IMAGPART_EXPR\n-\t\t\top0 -> inner-compref\n-\n-   inner-compref: min-lval\n-\t\t| COMPONENT_REF\n-\t\t\top0 -> inner-compref\n-\t\t\top1 -> FIELD_DECL\n-\t\t\top2 -> val\n-\t\t| ARRAY_REF\n-\t\t\top0 -> inner-compref\n-\t\t\top1 -> val\n-\t\t\top2 -> val\n-\t\t\top3 -> val\n-\t\t| ARRAY_RANGE_REF\n-\t\t\top0 -> inner-compref\n-\t\t\top1 -> val\n-\t\t\top2 -> val\n-\t\t\top3 -> val\n-\t\t| VIEW_CONVERT_EXPR\n-\t\t\top0 -> inner-compref\n-\n-   condition\t: val\n-\t\t| RELOP\n-\t\t\top0 -> val\n-\t\t\top1 -> val\n-\n-   val\t\t: ID\n-\t\t| CONST\n-\n-   rhs\t\t: lhs\n-\t\t| CONST\n-\t\t| call-stmt\n-\t\t| ADDR_EXPR\n-\t\t\top0 -> addr-expr-arg\n-\t\t| UNOP\n-\t\t\top0 -> val\n-\t\t| BINOP\n-\t\t\top0 -> val\n-\t\t\top1 -> val\n-\t\t| RELOP\n-\t\t\top0 -> val\n-\t\t\top1 -> val\n-*/\n+/* For the definitive definition of GIMPLE, see doc/tree-ssa.texi.  */\n \n static inline bool is_gimple_id (tree);\n "}]}