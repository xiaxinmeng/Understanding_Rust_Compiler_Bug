{"sha": "8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyNWQxZjVmNTdiMTFmZTA0YTk3Njc0Y2MyZmMyYjc3Mjc2MjFkMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-03T16:23:09Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-03T19:29:08Z"}, "message": "analyzer: detect zero-assignment in phis (PR 93544)\n\nPR analyzer/93544 reports an ICE when attempting to report a double-free\nwithin diagnostic_manager::prune_for_sm_diagnostic, in which the\nvariable of interest has become an INTEGER_CST.  Additionally, it picks\na nonsensical path through the function in which the pointer being\ndouble-freed is known to be NULL, which we shouldn't complain about.\n\nThe dump shows that it picks the INTEGER_CST when updating var at a phi\nnode:\n    considering event 4, with var: \u2018iftmp.0_2\u2019, state: \u2018start\u2019\n    updating from \u2018iftmp.0_2\u2019 to \u20180B\u2019 based on phi node\n      phi: iftmp.0_2 = PHI <iftmp.0_6(3), 0B(2)>\n    considering event 3, with var: \u20180B\u2019, state: \u2018start\u2019\nand that it has picked the shortest path through the exploded graph,\nand on this path the pointer has been assigned NULL.\n\nThe root cause is that the state machine's on_stmt isn't called for phi\nnodes (and wouldn't make much sense, as we wouldn't know which arg to\nchoose).  malloc state machine::on_stmt \"sees\" a GIMPLE_ASSIGN to NULL\nand handles it by transitioning the lhs to the \"null\" state, but never\n\"sees\" GIMPLE_PHI nodes.\n\nThis patch fixes the ICE by wiring up phi-handling with state machines,\nso that state machines have an on_phi vfunc.  It updates the only current\nuser of \"is_zero_assignment\" (the malloc sm) to implement equivalent\nlogic for phi nodes.  Doing so ensures that the pointer is in a separate\nsm-state for the NULL vs non-NULL cases, and so gets separate exploded\nnodes, and hence the path-finding logic chooses the correct path, and\nthe correct non-NULL phi argument.\n\nThe patch also adds some bulletproofing to prune_for_sm_diagnostic to\navoid crashing in the event of a bad path.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93544\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::prune_for_sm_diagnostic): Bulletproof\n\tagainst bad choices due to bad paths.\n\t* engine.cc (impl_region_model_context::on_phi): New.\n\t* exploded-graph.h (impl_region_model_context::on_phi): New decl.\n\t* region-model.cc (region_model::on_longjmp): Likewise.\n\t(region_model::handle_phi): Add phi param.  Call the ctxt's on_phi\n\tvfunc.\n\t(region_model::update_for_phis): Pass phi to handle_phi.\n\t* region-model.h (region_model::handle_phi): Add phi param.\n\t(region_model_context::on_phi): New vfunc.\n\t(test_region_model_context::on_phi): New.\n\t* sm-malloc.cc (malloc_state_machine::on_phi): New.\n\t(malloc_state_machine::on_zero_assignment): New.\n\t* sm.h (state_machine::on_phi): New vfunc.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93544\n\t* gcc.dg/analyzer/torture/pr93544.c: New test.", "tree": {"sha": "54e3cdd1ac7812b005b343a24924232fa26b3fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e3cdd1ac7812b005b343a24924232fa26b3fe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f386581bddc4d630b93eeb0cddd32943bf24e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f386581bddc4d630b93eeb0cddd32943bf24e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f386581bddc4d630b93eeb0cddd32943bf24e7"}], "stats": {"total": 152, "additions": 140, "deletions": 12}, "files": [{"sha": "5e444895101e25259bc26e2908f5f0db3662015d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -1,3 +1,22 @@\n+2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93544\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Bulletproof\n+\tagainst bad choices due to bad paths.\n+\t* engine.cc (impl_region_model_context::on_phi): New.\n+\t* exploded-graph.h (impl_region_model_context::on_phi): New decl.\n+\t* region-model.cc (region_model::on_longjmp): Likewise.\n+\t(region_model::handle_phi): Add phi param.  Call the ctxt's on_phi\n+\tvfunc.\n+\t(region_model::update_for_phis): Pass phi to handle_phi.\n+\t* region-model.h (region_model::handle_phi): Add phi param.\n+\t(region_model_context::on_phi): New vfunc.\n+\t(test_region_model_context::on_phi): New.\n+\t* sm-malloc.cc (malloc_state_machine::on_phi): New.\n+\t(malloc_state_machine::on_zero_assignment): New.\n+\t* sm.h (state_machine::on_phi): New vfunc.\n+\n 2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (supernode_cluster::dump_dot): Show BB index as"}, {"sha": "1a82d5f22ec0bc97d20e4b5c69601a3dd2b89d14", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -1087,6 +1087,15 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t  pp_gimple_stmt_1 (&pp, phi, 0, (dump_flags_t)0);\n \t\t\t  log (\"  phi: %s\", pp_formatted_text (&pp));\n \t\t\t}\n+\t\t      /* If we've chosen a bad exploded_path, then the\n+\t\t\t phi arg might be a constant.  Fail gracefully for\n+\t\t\t this case.  */\n+\t\t      if (CONSTANT_CLASS_P (var))\n+\t\t\t{\n+\t\t\t  log (\"new var is a constant (bad path?);\"\n+\t\t\t       \" setting var to NULL\");\n+\t\t\t  var = NULL;\n+\t\t\t}\n \t\t    }\n \t\t}\n "}, {"sha": "90f7067dec115dcc0dd9fb43ceb21720d2490cbe", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -663,6 +663,27 @@ impl_region_model_context::on_condition (tree lhs, enum tree_code op, tree rhs)\n     }\n }\n \n+/* Implementation of region_model_context::on_phi vfunc.\n+   Notify all state machines about the phi, which could lead to\n+   state transitions.  */\n+\n+void\n+impl_region_model_context::on_phi (const gphi *phi, tree rhs)\n+{\n+  int sm_idx;\n+  sm_state_map *smap;\n+  FOR_EACH_VEC_ELT (m_new_state->m_checker_states, sm_idx, smap)\n+    {\n+      const state_machine &sm = m_ext_state.get_sm (sm_idx);\n+      impl_sm_context sm_ctxt (*m_eg, sm_idx, sm, m_enode_for_diag,\n+\t\t\t       m_old_state, m_new_state,\n+\t\t\t       m_change,\n+\t\t\t       m_old_state->m_checker_states[sm_idx],\n+\t\t\t       m_new_state->m_checker_states[sm_idx]);\n+      sm.on_phi (&sm_ctxt, m_enode_for_diag->get_supernode (), phi, rhs);\n+    }\n+}\n+\n /* struct point_and_state.  */\n \n /* Assert that this object is sane.  */"}, {"sha": "6a1b9b2027744357e4317471f9257f1770a275d7", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -74,6 +74,8 @@ class impl_region_model_context : public region_model_context\n \n   void on_unknown_change (svalue_id sid ATTRIBUTE_UNUSED) FINAL OVERRIDE;\n \n+  void on_phi (const gphi *phi, tree rhs) FINAL OVERRIDE;\n+\n   exploded_graph *m_eg;\n   log_user m_logger;\n   const exploded_node *m_enode_for_diag;"}, {"sha": "2cfded836b6dff61f4d8a4e4bbef67929dacae3c", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -4568,7 +4568,8 @@ region_model::on_longjmp (const gcall *longjmp_call, const gcall *setjmp_call,\n    where RHS is for the appropriate edge.  */\n \n void\n-region_model::handle_phi (tree lhs, tree rhs, bool is_back_edge,\n+region_model::handle_phi (const gphi *phi,\n+\t\t\t  tree lhs, tree rhs, bool is_back_edge,\n \t\t\t  region_model_context *ctxt)\n {\n   /* For now, don't bother tracking the .MEM SSA names.  */\n@@ -4593,6 +4594,9 @@ region_model::handle_phi (tree lhs, tree rhs, bool is_back_edge,\n     }\n   else\n     set_value (get_lvalue (lhs, ctxt), rhs_sid, ctxt);\n+\n+  if (ctxt)\n+    ctxt->on_phi (phi, rhs);\n }\n \n /* Implementation of region_model::get_lvalue; the latter adds type-checking.\n@@ -5584,7 +5588,7 @@ region_model::update_for_phis (const supernode *snode,\n \n       /* Update next_state based on phi.  */\n       bool is_back_edge = last_cfg_superedge->back_edge_p ();\n-      handle_phi (lhs, src, is_back_edge, ctxt);\n+      handle_phi (phi, lhs, src, is_back_edge, ctxt);\n     }\n }\n "}, {"sha": "9c9a936fae2cd38e133133faf0bb437f3a4d9aa6", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -1691,7 +1691,8 @@ class region_model\n \t\t\tconst cfg_superedge *last_cfg_superedge,\n \t\t\tregion_model_context *ctxt);\n \n-  void handle_phi (tree lhs, tree rhs, bool is_back_edge,\n+  void handle_phi (const gphi *phi,\n+\t\t   tree lhs, tree rhs, bool is_back_edge,\n \t\t   region_model_context *ctxt);\n \n   bool maybe_update_for_edge (const superedge &edge,\n@@ -1932,6 +1933,10 @@ class region_model_context\n   /* Hooks for clients to be notified when an unknown change happens\n      to SID (in response to a call to an unknown function).  */\n   virtual void on_unknown_change (svalue_id sid) = 0;\n+\n+  /* Hooks for clients to be notified when a phi node is handled,\n+     where RHS is the pertinent argument.  */\n+  virtual void on_phi (const gphi *phi, tree rhs) = 0;\n };\n \n /* A bundle of data for use when attempting to merge two region_model\n@@ -2108,6 +2113,11 @@ class test_region_model_context : public region_model_context\n   {\n   }\n \n+  void on_phi (const gphi *phi ATTRIBUTE_UNUSED,\n+\t       tree rhs ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+  {\n+  }\n+\n private:\n   /* Implicitly delete any diagnostics in the dtor.  */\n   auto_delete_vec<pending_diagnostic> m_diagnostics;"}, {"sha": "bdd0731b5d1e300550d3674b2ac79df3e93497c2", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -57,6 +57,11 @@ class malloc_state_machine : public state_machine\n \t\tconst supernode *node,\n \t\tconst gimple *stmt) const FINAL OVERRIDE;\n \n+  void on_phi (sm_context *sm_ctxt,\n+\t       const supernode *node,\n+\t       const gphi *phi,\n+\t       tree rhs) const FINAL OVERRIDE;\n+\n   void on_condition (sm_context *sm_ctxt,\n \t\t     const supernode *node,\n \t\t     const gimple *stmt,\n@@ -91,6 +96,12 @@ class malloc_state_machine : public state_machine\n \n   /* Stop state, for pointers we don't want to track any more.  */\n   state_t m_stop;\n+\n+private:\n+  void on_zero_assignment (sm_context *sm_ctxt,\n+\t\t\t   const supernode *node,\n+\t\t\t   const gimple *stmt,\n+\t\t\t   tree lhs) const;\n };\n \n /* Class for diagnostics relating to malloc_state_machine.  */\n@@ -682,15 +693,8 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n       }\n \n   if (tree lhs = is_zero_assignment (stmt))\n-    {\n-      if (any_pointer_p (lhs))\n-\t{\n-\t  sm_ctxt->on_transition (node, stmt, lhs, m_start, m_null);\n-\t  sm_ctxt->on_transition (node, stmt, lhs, m_unchecked, m_null);\n-\t  sm_ctxt->on_transition (node, stmt, lhs, m_nonnull, m_null);\n-\t  sm_ctxt->on_transition (node, stmt, lhs, m_freed, m_null);\n-\t}\n-    }\n+    if (any_pointer_p (lhs))\n+      on_zero_assignment (sm_ctxt, node, stmt,lhs);\n \n   if (const gassign *assign_stmt = dyn_cast <const gassign *> (stmt))\n     {\n@@ -736,6 +740,21 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n   return false;\n }\n \n+/* Implementation of state_machine::on_phi vfunc for malloc_state_machine.  */\n+\n+void\n+malloc_state_machine::on_phi (sm_context *sm_ctxt,\n+\t\t\t      const supernode *node,\n+\t\t\t      const gphi *phi,\n+\t\t\t      tree rhs) const\n+{\n+  if (zerop (rhs))\n+    {\n+      tree lhs = gimple_phi_result (phi);\n+      on_zero_assignment (sm_ctxt, node, phi, lhs);\n+    }\n+}\n+\n /* Implementation of state_machine::on_condition vfunc for malloc_state_machine.\n    Potentially transition state 'unchecked' to 'nonnull' or to 'null'.  */\n \n@@ -789,6 +808,21 @@ malloc_state_machine::on_leak (tree var) const\n   return new malloc_leak (*this, var);\n }\n \n+/* Shared logic for handling GIMPLE_ASSIGNs and GIMPLE_PHIs that\n+   assign zero to LHS.  */\n+\n+void\n+malloc_state_machine::on_zero_assignment (sm_context *sm_ctxt,\n+\t\t\t\t\t  const supernode *node,\n+\t\t\t\t\t  const gimple *stmt,\n+\t\t\t\t\t  tree lhs) const\n+{\n+  sm_ctxt->on_transition (node, stmt, lhs, m_start, m_null);\n+  sm_ctxt->on_transition (node, stmt, lhs, m_unchecked, m_null);\n+  sm_ctxt->on_transition (node, stmt, lhs, m_nonnull, m_null);\n+  sm_ctxt->on_transition (node, stmt, lhs, m_freed, m_null);\n+}\n+\n } // anonymous namespace\n \n /* Internal interface to this file. */"}, {"sha": "2f00aaec7cc28e47baa8b356f016d9a1aec7d192", "filename": "gcc/analyzer/sm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fsm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Fanalyzer%2Fsm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm.h?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -62,6 +62,13 @@ class state_machine : public log_user\n \t\t\tconst supernode *node,\n \t\t\tconst gimple *stmt) const = 0;\n \n+  virtual void on_phi (sm_context *sm_ctxt ATTRIBUTE_UNUSED,\n+\t\t       const supernode *node ATTRIBUTE_UNUSED,\n+\t\t       const gphi *phi ATTRIBUTE_UNUSED,\n+\t\t       tree rhs ATTRIBUTE_UNUSED) const\n+  {\n+  }\n+\n   virtual void on_condition (sm_context *sm_ctxt,\n \t\t\t     const supernode *node,\n \t\t\t     const gimple *stmt,"}, {"sha": "9e2bbda7fdf8d36ff30760693d1e97935a4322d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -1,3 +1,8 @@\n+2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93544\n+\t* gcc.dg/analyzer/torture/pr93544.c: New test.\n+\n 2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93546"}, {"sha": "43edc970d36762c166c7a15a4cf5ca89826ca642", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93544.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8525d1f5f57b11fe04a97674cc2fc2b7727621d0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93544.c?ref=8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+int ja;\n+\n+int *\n+qd (void);\n+\n+void\n+lk (void)\n+{\n+  int *bs, *dx;\n+\n+  bs = dx = !!ja ? qd () : 0; /* { dg-message \"following 'true' branch\" } */\n+\n+  __builtin_free (dx);\n+  __builtin_free (bs); /* { dg-warning \"double-'free'\" } */\n+}"}]}