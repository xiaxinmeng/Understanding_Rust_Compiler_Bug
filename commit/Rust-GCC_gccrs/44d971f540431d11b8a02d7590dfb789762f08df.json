{"sha": "44d971f540431d11b8a02d7590dfb789762f08df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRkOTcxZjU0MDQzMWQxMWI4YTAyZDc1OTBkZmI3ODk3NjJmMDhkZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1993-10-03T16:33:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1993-10-03T16:33:02Z"}, "message": "Initial revision\n\nFrom-SVN: r5565", "tree": {"sha": "6fa8246e56897425f84e2bfe13abe696b00b1c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fa8246e56897425f84e2bfe13abe696b00b1c56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44d971f540431d11b8a02d7590dfb789762f08df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d971f540431d11b8a02d7590dfb789762f08df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d971f540431d11b8a02d7590dfb789762f08df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d971f540431d11b8a02d7590dfb789762f08df/comments", "author": null, "committer": null, "parents": [{"sha": "ff9940b0157fcda551e107ade4107291605fc285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9940b0157fcda551e107ade4107291605fc285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9940b0157fcda551e107ade4107291605fc285"}], "stats": {"total": 246, "additions": 246, "deletions": 0}, "files": [{"sha": "6ccb761d546f417b392ead91a62ba7a160c34ee2", "filename": "gcc/config/arm/riscix.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Friscix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Friscix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Friscix.h?ref=44d971f540431d11b8a02d7590dfb789762f08df", "patch": "@@ -0,0 +1,116 @@\n+/* Definitions of target machine for GNU compiler.  ARM RISCiX version.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Contributed by Richard Earnshaw (rwe11@cl.cam.ac.uk), based on original\n+\t      work by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n+   \t      and Martin Simmons (@harleqn.co.uk).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Translation to find startup files.  On RISCiX boxes, gcrt0.o is in\n+   /usr/lib.  */\n+#define STARTFILE_SPEC  \\\n+  \"%{pg:/usr/lib/gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\"\n+\n+#ifndef CPP_PREDEFINES\n+#define CPP_PREDEFINES  \\\n+    \"-Darm -Driscix -Dunix -Asystem(unix) -Acpu(arm) -Amachine(arm)\"\n+#endif\n+#if 0\n+#define CPP_PREDEFINES  \"-Darm -Driscos -Acpu(arm) -Amachine(arm)\"\n+#endif\n+\n+#ifndef CPP_SPEC\n+#define CPP_SPEC \"%{m6:-D__arm6__} \\\n+\t%{mbsd:%{pedantic:%e-mbsd and -pedantic incompatible} -D_BSD_C} \\\n+\t%{mxopen:%{mbsd:%e-mbsd and -mxopen incompatible} \t\t\\\n+\t  %{pedantic:%e-mxopen and -pedantic incompatible} -D_XOPEN_C}  \\\n+\t%{!mbsd:%{!mxopen:%{!ansi: -D_BSD_C}}}\"\n+#endif\n+\n+/* RISCiX has some wierd symbol name munging, that is done to the object module\n+   after assembly, which enables multiple libraries to be supported within\n+   one (possibly shared) library.  It basically changes the symbol name of\n+   certain symbols (for example _bcopy is converted to _$bcopy if using BSD)\n+   Symrename's parameters are determined as follows:\n+     -mno-symrename\tDon't run symrename\n+     -mbsd\tsymrename -BSD <file>\n+     -mxopen\tsymrename -XOPEN <file>\n+     -ansi\tsymrename - <file>\n+     <none>\tsymrename -BSD <file>\n+ */\n+\n+#ifndef ASM_FINAL_SPEC\n+#if !defined (CROSS_COMPILER)\n+#define ASM_FINAL_SPEC \"\\\n+%{!mno-symrename: \\\n+\t\\n /usr/bin/symrename \\\n+\t-%{mbsd:%{ansi:%e-mbsd and -ansi incompatible}BSD}\\\n+%{mxopen:%{mbsd:%e-mbsd and -mxopen incompatible}\\\n+%{ansi:%e-mxopen and -ansi incompatible}XOPEN}\\\n+%{!mbsd:%{!mxopen:%{!ansi:BSD}}} %{c:%{o*:%*}%{!o*:%b.o}}%{!c:%U.o}}\"\n+#endif\n+#endif\n+\n+/* None of these is actually used in cc1, so they modify bit 31 */\n+#define ARM_EXTRA_TARGET_SWITCHES \\\n+{\"bsd\", 0x80000000}, {\"xopen\", 0x80000000}, {\"no-symrename\", 0x80000000},\n+\n+    \n+\n+/* Run-time Target Specification.  */\n+#define TARGET_VERSION  \\\n+  fputs (\" (ARM/RISCiX)\", stderr);\n+\n+/* This is used in ASM_FILE_START */\n+#define ARM_OS_NAME \"RISCiX\"\n+\n+#ifdef riscos\n+#define TARGET_WHEN_DEBUGGING  3\n+#else\n+#define TARGET_WHEN_DEBUGGING  1\n+#endif\n+\n+/* 'char' is signed by default on RISCiX, unsigned on RISCOS.  */\n+#ifdef riscos\n+#define DEFAULT_SIGNED_CHAR  0\n+#else\n+#define DEFAULT_SIGNED_CHAR  1\n+#endif\n+\n+/* Define this if the target system supports the function atexit form the\n+   ANSI C standard.  If this is not defined, and INIT_SECTION_ASM_OP is not\n+   defined, a default exit function will be provided to support C++.  \n+   The man page only describes on_exit, but atexit is also there.  */\n+#define HAVE_ATEXIT 1\n+/* Some systems use __main in a way incompatible with its use in gcc, in these\n+   cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n+   give the same symbol without quotes for an alternative entry point.  You\n+   must define both, or niether. */\n+#ifndef NAME__MAIN\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain\n+#endif\n+\n+#include \"arm/arm.h\"\n+\n+/* The native RISCiX assembler does not support stabs of any kind; because\n+   the native assembler is not used by the compiler, Acorn didn't feel it was\n+   necessary to put them in!  */\n+\n+#ifdef DBX_DEBUGGING_INFO\n+#undef DBX_DEBUGGING_INFO\n+#endif"}, {"sha": "8a12c29e5ae2ca485c6b5d9f2da7338a95865dd1", "filename": "gcc/config/arm/riscix1-1.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Friscix1-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Friscix1-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Friscix1-1.h?ref=44d971f540431d11b8a02d7590dfb789762f08df", "patch": "@@ -0,0 +1,92 @@\n+/* Definitions of target machine for GNU compiler.  ARM RISCiX 1.1x version.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Contributed by Richard Earnshaw (rwe11@cl.cam.ac.uk), based on original\n+\t      work by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n+   \t      and Martin Simmons (@harleqn.co.uk).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* RISCix 1.1x is basically the same as 1.2x except that it doesn't have\n+   symrename or atexit. */\n+\n+/* Translation to find startup files.  On RISCiX boxes, gcrt0.o is in\n+   /usr/lib.  */\n+#define STARTFILE_SPEC  \\\n+  \"%{pg:/usr/lib/gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\"\n+\n+#ifndef CPP_PREDEFINES\n+#define CPP_PREDEFINES  \"-Darm -Driscix -Dunix -Asystem(unix) -Acpu(arm) -Amachine(arm)\"\n+#endif\n+\n+#ifndef CPP_SPEC\n+#define CPP_SPEC \"%{m6:-D__arm6__} %{!ansi: -D_BSD_C}\"\n+#endif\n+\n+/* Riscix 1.1 doesn't have X/OPEN support, so only accept -mbsd (but ignore\n+   it).  \n+   By not having -mxopen and -mno-symrename, we get warning messages,\n+   but everything still compiles.  */\n+/* None of these is actually used in cc1, so they modify bit 31 */\n+#define ARM_EXTRA_TARGET_SWITCHES \\\n+{\"bsd\", 0x80000000}, \n+\n+    \n+\n+/* Run-time Target Specification.  */\n+#define TARGET_VERSION  \\\n+  fputs (\" (ARM/RISCiX)\", stderr);\n+\n+/* This is used in ASM_FILE_START */\n+#define ARM_OS_NAME \"RISCiX\"\n+\n+#ifdef riscos\n+#define TARGET_WHEN_DEBUGGING  3\n+#else\n+#define TARGET_WHEN_DEBUGGING  1\n+#endif\n+\n+/* 'char' is signed by default on RISCiX, unsigned on RISCOS.  */\n+#ifdef riscos\n+#define DEFAULT_SIGNED_CHAR  0\n+#else\n+#define DEFAULT_SIGNED_CHAR  1\n+#endif\n+\n+/* Define this if the target system supports the function atexit form the\n+   ANSI C standard.  If this is not defined, and INIT_SECTION_ASM_OP is not\n+   defined, a default exit function will be provided to support C++.  \n+   The man page only describes on_exit, but atexit is also there.  \n+   This seems to be missing in early versions. */\n+/*#define HAVE_ATEXIT 1 */\n+/* Some systems use __main in a way incompatible with its use in gcc, in these\n+   cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n+   give the same symbol without quotes for an alternative entry point.  You\n+   must define both, or niether. */\n+#ifndef NAME__MAIN\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain\n+#endif\n+\n+#include \"arm/arm.h\"\n+\n+/* The native RISCiX assembler does not support stabs of any kind; because\n+   the native assembler is not used by the compiler, Acorn didn't feel it was\n+   necessary to put them in!  */\n+\n+#ifdef DBX_DEBUGGING_INFO\n+#undef DBX_DEBUGGING_INFO\n+#endif"}, {"sha": "7431e917b56a5b6d6ce4bbcc6fbd29a166885314", "filename": "gcc/config/arm/rix-gas.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Frix-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d971f540431d11b8a02d7590dfb789762f08df/gcc%2Fconfig%2Farm%2Frix-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frix-gas.h?ref=44d971f540431d11b8a02d7590dfb789762f08df", "patch": "@@ -0,0 +1,38 @@\n+/* Definitions of target machine for GNU compiler.  ARM RISCiX(stabs) version.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Contributed by Richard Earnshaw (rwe11@cl.cam.ac.uk), based on original\n+\t      work by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n+   \t      and Martin Simmons (@harleqn.co.uk).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"arm/riscix.h\"\n+\n+/* The native RISCiX assembler does not support stabs of any kind; because\n+   the native assembler is not used by the compiler, Acorn didn't feel it was\n+   necessary to put them in!  \n+   However, this file assumes that we have an assembler that does have stabs,\n+   so we put them back in.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Unfortunately dbx doesn't understand these */\n+#define DEFAULT_GDB_EXTENSIONS 0\n+/* RISCiX dbx doesn't accept xrefs */\n+#define DBX_NO_XREFS 1\n+/* dbx wants lbracs before variables */\n+/* #define DBX_LBRAC_FIRST 1*/"}]}