{"sha": "265d3e1a4e3d6c71d354f859302f023dc2d33f62", "node_id": "C_kwDOANBUbNoAKDI2NWQzZTFhNGUzZDZjNzFkMzU0Zjg1OTMwMmYwMjNkYzJkMzNmNjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-10T20:48:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-11T13:28:46Z"}, "message": "libstdc++: Install <coroutine> header for freestanding [PR103726]\n\nThe standard says that <coroutine> should be present for freestanding.\nThat was intentionally left out of the initial implementation, but can\nbe done without much trouble. The header should be moved to libsupc++ at\nsome point in stage 1.\n\nThe standard also says that <coroutine> defines a std::hash\nspecialization, which was missing from our implementation. That's a\nproblem for freestanding (see LWG 3653) so only do that for hosted.\n\nWe can use concepts to constrain the __coroutine_traits_impl base class\nwhen compiled with concepts enabled. In a pure C++20 implementation we\nwould not need that base class at all and could just use a constrained\npartial specialization of coroutine_traits. But the absence of the\n__coroutine_traits_impl<R, void> base would create an ABI difference\nbetween the non-standard C++14/C++17 support for coroutines and the same\ncode compiled as C++20. If we drop support for <coroutine> pre-C++20 we\nshould revisit this.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103726\n\t* include/Makefile.am: Install <coroutine> for freestanding.\n\t* include/Makefile.in: Regenerate.\n\t* include/std/coroutine: Adjust headers and preprocessor\n\tconditions.\n\t(__coroutine_traits_impl): Use concepts when available.\n\t[_GLIBCXX_HOSTED] (hash<coroutine_handle>): Define.", "tree": {"sha": "5b1571d3734b6991d9d70a9b400e6a345db19eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1571d3734b6991d9d70a9b400e6a345db19eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265d3e1a4e3d6c71d354f859302f023dc2d33f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265d3e1a4e3d6c71d354f859302f023dc2d33f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265d3e1a4e3d6c71d354f859302f023dc2d33f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265d3e1a4e3d6c71d354f859302f023dc2d33f62/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "8f93bf2d7b74f4dbb0933aec2e8e4021c337769f", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=265d3e1a4e3d6c71d354f859302f023dc2d33f62", "patch": "@@ -1425,7 +1425,7 @@ endif\n # This is a subset of the full install-headers rule.  We only need <ciso646>,\n # <cstddef>, <cfloat>, <limits>, <climits>, <version>, <cstdint>, <cstdlib>,\n # <new>, <typeinfo>, <exception>, <initializer_list>, <cstdalign>, <cstdarg>,\n-# <concepts>, <cstdbool>, <type_traits>, <bit>, <atomic>,\n+# <concepts>, <coroutine>, <cstdbool>, <type_traits>, <bit>, <atomic>,\n # and any files which they include (and which we provide).\n # <new>, <typeinfo>, <exception>, <initializer_list> and <compare>\n # are installed by libsupc++, so only the others and the sub-includes\n@@ -1440,7 +1440,7 @@ install-freestanding-headers:\n \t  ${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n-\tfor file in limits type_traits atomic bit concepts version; do \\\n+\tfor file in limits type_traits atomic bit concepts coroutine version; do \\\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${std_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n \tfor file in ciso646 cstddef cfloat climits cstdint cstdlib \\"}, {"sha": "4ab942ae66669120881c2505563cac9fd8c4f3c1", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=265d3e1a4e3d6c71d354f859302f023dc2d33f62", "patch": "@@ -1906,7 +1906,7 @@ ${pch3_output}: ${pch3_source} ${pch2_output}\n # This is a subset of the full install-headers rule.  We only need <ciso646>,\n # <cstddef>, <cfloat>, <limits>, <climits>, <version>, <cstdint>, <cstdlib>,\n # <new>, <typeinfo>, <exception>, <initializer_list>, <cstdalign>, <cstdarg>,\n-# <concepts>, <cstdbool>, <type_traits>, <bit>, <atomic>,\n+# <concepts>, <coroutine>, <cstdbool>, <type_traits>, <bit>, <atomic>,\n # and any files which they include (and which we provide).\n # <new>, <typeinfo>, <exception>, <initializer_list> and <compare>\n # are installed by libsupc++, so only the others and the sub-includes\n@@ -1921,7 +1921,7 @@ install-freestanding-headers:\n \t  ${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n-\tfor file in limits type_traits atomic bit concepts version; do \\\n+\tfor file in limits type_traits atomic bit concepts coroutine version; do \\\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${std_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n \tfor file in ciso646 cstddef cfloat climits cstdint cstdlib \\"}, {"sha": "f4189c7e3fcf11de326dc952d9404936561d8ea8", "filename": "libstdc++-v3/include/std/coroutine", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcoroutine", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265d3e1a4e3d6c71d354f859302f023dc2d33f62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcoroutine", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcoroutine?ref=265d3e1a4e3d6c71d354f859302f023dc2d33f62", "patch": "@@ -34,22 +34,23 @@\n // It is very likely that earlier versions would work, but they are untested.\n #if __cplusplus >= 201402L\n \n-#include <bits/c++config.h>\n+#include <type_traits>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n+\n+#if !defined __cpp_lib_three_way_comparison && _GLIBCXX_HOSTED\n+# include <bits/stl_function.h> // for std::less\n+#endif\n \n /**\n  * @defgroup coroutines Coroutines\n  *\n  * Components for supporting coroutine implementations.\n+ *\n+ * @since C++20 (and since C++14 as a libstdc++ extension)\n  */\n \n-#if __cplusplus > 201703L && __cpp_impl_three_way_comparison >= 201907L\n-#  include <compare>\n-#  define _COROUTINES_USE_SPACESHIP 1\n-#else\n-#  include <bits/stl_function.h> // for std::less\n-#  define _COROUTINES_USE_SPACESHIP 0\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY (default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -60,25 +61,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline namespace __n4861 {\n \n-  // 17.12.2 coroutine traits\n+  // C++20 17.12.2 coroutine traits\n   /// [coroutine.traits]\n   /// [coroutine.traits.primary]\n   /// If _Result::promise_type is valid and denotes a type then the traits\n   /// have a single publicly accessible member, otherwise they are empty.\n+  template <typename _Result, typename... _ArgTypes>\n+    struct coroutine_traits;\n+\n   template <typename _Result, typename = void>\n    struct __coroutine_traits_impl {};\n \n   template <typename _Result>\n+#if __cpp_concepts\n+    requires requires { typename _Result::promise_type; }\n+    struct __coroutine_traits_impl<_Result, void>\n+#else\n     struct __coroutine_traits_impl<_Result,\n-\t\t\t\t    __void_t<typename _Result::promise_type>>\n+\t\t\t\t   __void_t<typename _Result::promise_type>>\n+#endif\n     {\n       using promise_type = typename _Result::promise_type;\n     };\n \n-  template <typename _Result, typename...>\n+  template <typename _Result, typename... _ArgTypes>\n     struct coroutine_traits : __coroutine_traits_impl<_Result> {};\n \n-  // 17.12.3 Class template coroutine_handle\n+  // C++20 17.12.3 Class template coroutine_handle\n   /// [coroutine.handle]\n   template <typename _Promise = void>\n     struct coroutine_handle;\n@@ -139,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __a.address() == __b.address();\n   }\n \n-#if _COROUTINES_USE_SPACESHIP\n+#ifdef __cpp_lib_three_way_comparison\n   constexpr strong_ordering\n   operator<=>(coroutine_handle<> __a, coroutine_handle<> __b) noexcept\n   {\n@@ -156,7 +165,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr bool\n   operator<(coroutine_handle<> __a, coroutine_handle<> __b) noexcept\n   {\n+#if _GLIBCXX_HOSTED\n     return less<void*>()(__a.address(), __b.address());\n+#else\n+    return (__UINTPTR_TYPE__)__a.address() < (__UINTPTR_TYPE__)__b.address();\n+#endif\n   }\n \n   constexpr bool\n@@ -330,6 +343,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   } // namespace __n4861\n \n+#if _GLIBCXX_HOSTED\n+  template<typename _Tp> struct hash;\n+\n+  template<typename _Promise>\n+    struct hash<coroutine_handle<_Promise>>\n+    {\n+      size_t\n+      operator()(const coroutine_handle<_Promise>& __h) noexcept\n+      {\n+\treturn reinterpret_cast<size_t>(__h.address());\n+      }\n+    };\n+#endif\n+\n #else\n #error \"the coroutine header requires -fcoroutines\"\n #endif"}]}