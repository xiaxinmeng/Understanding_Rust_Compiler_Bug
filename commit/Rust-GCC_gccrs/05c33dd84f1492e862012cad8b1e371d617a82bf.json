{"sha": "05c33dd84f1492e862012cad8b1e371d617a82bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjMzNkZDg0ZjE0OTJlODYyMDEyY2FkOGIxZTM3MWQ2MTdhODJiZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-29T10:44:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-29T10:44:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1120", "tree": {"sha": "f320a242ba8d607ea025171f932da7b21f3364c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f320a242ba8d607ea025171f932da7b21f3364c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c33dd84f1492e862012cad8b1e371d617a82bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c33dd84f1492e862012cad8b1e371d617a82bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c33dd84f1492e862012cad8b1e371d617a82bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c33dd84f1492e862012cad8b1e371d617a82bf/comments", "author": null, "committer": null, "parents": [{"sha": "1b43e280f9102cc9fe5f729b2bf4099fdc87fe0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b43e280f9102cc9fe5f729b2bf4099fdc87fe0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b43e280f9102cc9fe5f729b2bf4099fdc87fe0d"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "4a51d42217934cdfa2ac6924d953fbc7208de126", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c33dd84f1492e862012cad8b1e371d617a82bf/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c33dd84f1492e862012cad8b1e371d617a82bf/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=05c33dd84f1492e862012cad8b1e371d617a82bf", "patch": "@@ -5754,7 +5754,7 @@ cse_insn (insn, in_libcall_block)\n          possibilities.  Prefer items not in the hash table to ones\n          that are when they are equal cost.  Note that we can never\n          worsen an insn as the current contents will also succeed.\n-\t If we find an equivalent identical to the source, use it as best,\n+\t If we find an equivalent identical to the destination, use it as best,\n \t since this insn will probably be eliminated in that case. */\n       if (src)\n \t{\n@@ -5829,7 +5829,7 @@ cse_insn (insn, in_libcall_block)\n \t    trial = src_related, src_related_cost = 10000;\n           else\n \t    {\n-\t      trial = canon_reg (copy_rtx (elt->exp), 0);\n+\t      trial = copy_rtx (elt->exp);\n \t      elt = elt->next_same_value;\n \t      src_elt_cost = 10000;\n \t    }\n@@ -5866,7 +5866,10 @@ cse_insn (insn, in_libcall_block)\n \t   \n \t  /* Look for a substitution that makes a valid insn.  */\n           else if (validate_change (insn, &SET_SRC (sets[i].rtl), trial, 0))\n-\t    break;\n+\t    {\n+\t      SET_SRC (sets[i].rtl) = canon_reg (SET_SRC (sets[i].rtl), insn);\n+\t      break;\n+\t    }\n \n \t  /* If we previously found constant pool entries for \n \t     constants and this is a constant, try making a"}]}