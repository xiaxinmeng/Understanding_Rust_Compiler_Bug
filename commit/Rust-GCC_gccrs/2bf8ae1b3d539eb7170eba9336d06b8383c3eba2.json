{"sha": "2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmOGFlMWIzZDUzOWViNzE3MGViYTkzMzZkMDZiODM4M2MzZWJhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-28T13:51:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-28T13:51:42Z"}, "message": "re PR tree-optimization/88223 (Wrong code for intrinsic memmove)\n\n2018-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88223\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): When skipping\n\tover a stored-same value may-alias store make sure to consider\n\tpartial overlaps which are valid when TBAA reasonings do not\n\tapply and byte-granular overlaps are possible at all.\n\n\t* gcc.dg/torture/pr88223.c: New testcase.\n\nFrom-SVN: r266560", "tree": {"sha": "2e2738cd6f383fc65c0d5abaece478217a39c370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2738cd6f383fc65c0d5abaece478217a39c370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5916922e348b0ae5bc1f308b5de9c75ffd20c339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5916922e348b0ae5bc1f308b5de9c75ffd20c339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5916922e348b0ae5bc1f308b5de9c75ffd20c339"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "695c1ff6093dda36875959c6281ccf1f6305ed58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "patch": "@@ -1,3 +1,11 @@\n+2018-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88223\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): When skipping\n+\tover a stored-same value may-alias store make sure to consider\n+\tpartial overlaps which are valid when TBAA reasonings do not\n+\tapply and byte-granular overlaps are possible at all.\n+\n 2018-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88217"}, {"sha": "52feffa476e0881f7c030efa8aa01553f6898b51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "patch": "@@ -1,3 +1,8 @@\n+2018-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88223\n+\t* gcc.dg/torture/pr88223.c: New testcase.\n+\n 2018-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88217"}, {"sha": "37df1cd6b7428ba47e3b99b22f55e1faf693f1d5", "filename": "gcc/testsuite/gcc.dg/torture/pr88223.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88223.c?ref=2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+\n+extern void *memmove(void *, const void *, __SIZE_TYPE__);\n+extern void abort(void);\n+\n+extern int\n+main(void)\n+{\n+ char s[] = \"12345\";\n+ memmove(s + 1, s, 4);\n+ memmove(s + 1, s, 4);\n+ memmove(s + 1, s, 4);\n+ if (s[0] != '1' || s[1] != '1' || s[2] != '1' || s[3] != '1' || s[4] != '2')\n+   abort ();\n+ return (0);\n+}"}, {"sha": "8f2b4608b5c5ded98fafb59eaf3853bb3c7a3489", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8ae1b3d539eb7170eba9336d06b8383c3eba2/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=2bf8ae1b3d539eb7170eba9336d06b8383c3eba2", "patch": "@@ -1927,7 +1927,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t VN_WALKREWRITE guard).  */\n       if (vn_walk_kind == VN_WALKREWRITE\n \t  && is_gimple_reg_type (TREE_TYPE (lhs))\n-\t  && types_compatible_p (TREE_TYPE (lhs), vr->type))\n+\t  && types_compatible_p (TREE_TYPE (lhs), vr->type)\n+\t  /* The overlap restriction breaks down when either access\n+\t     alias-set is zero.  Still for accesses of the size of\n+\t     an addressable unit there can be no overlaps.  Overlaps\n+\t     between different union members are not an issue since\n+\t     activation of a union member via a store makes the\n+\t     values of untouched bytes unspecified.  */\n+\t  && (known_eq (ref->size, BITS_PER_UNIT)\n+\t      || (get_alias_set (lhs) != 0\n+\t\t  && ao_ref_alias_set (ref) != 0)))\n \t{\n \t  tree *saved_last_vuse_ptr = last_vuse_ptr;\n \t  /* Do not update last_vuse_ptr in vn_reference_lookup_2.  */"}]}