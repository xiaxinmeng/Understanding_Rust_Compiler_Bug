{"sha": "8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "node_id": "C_kwDOANBUbNoAKDgyODhjZDYzNWZhMGJkNzVhOGM1ZjI1YzdhOTBkNGE3YTRhY2VjODE", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-24T17:48:55Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-24T18:49:58Z"}, "message": "d: Construct indexes of ARRAY_TYPE using ARRAY_REF.\n\nThis is a small simplification over `((T *)&array)[index]', which also\nallows eliding an unneccesary marking of TREE_ADDRESSABLE when the array\nexpression is a parameter or variable declaration.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (build_array_index): Rename to...\n\t(build_pointer_index): ...this.\n\t* d-tree.h (build_array_index): Rename declaration to...\n\t(build_pointer_index): ...this.\n\t* expr.cc (ExprVisitor::visit (IndexExp *)): Construct indexes of\n\tARRAY_TYPE using ARRAY_REF.\n\t(ExprVisitor::visit (SliceExp *)): Update.\n\t* intrinsics.cc (expand_intrinsic_bt): Update.", "tree": {"sha": "df4f53f4d7171d7691f26ecd7c49b3fe4c3bb9a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df4f53f4d7171d7691f26ecd7c49b3fe4c3bb9a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97f3bca6eec50ac4ec007d731d345db3e560c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97f3bca6eec50ac4ec007d731d345db3e560c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97f3bca6eec50ac4ec007d731d345db3e560c52"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "3a201149d7464e4f3e98c3ca069c85ca619cd2cd", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "patch": "@@ -1626,7 +1626,7 @@ build_deref (tree exp)\n /* Builds pointer offset expression PTR[INDEX].  */\n \n tree\n-build_array_index (tree ptr, tree index)\n+build_pointer_index (tree ptr, tree index)\n {\n   if (error_operand_p (ptr) || error_operand_p (index))\n     return error_mark_node;"}, {"sha": "a6c381194589e77507ad0a3ad6e578013787b067", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "patch": "@@ -578,7 +578,7 @@ extern tree imaginary_part (tree);\n extern tree complex_expr (tree, tree, tree);\n extern tree indirect_ref (tree, tree);\n extern tree build_deref (tree);\n-extern tree build_array_index (tree, tree);\n+extern tree build_pointer_index (tree, tree);\n extern tree build_offset_op (tree_code, tree, tree);\n extern tree build_offset (tree, tree);\n extern tree build_memref (tree, tree, tree);"}, {"sha": "bf750924594509b541c2002953fc027b7564c162", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "patch": "@@ -1222,9 +1222,8 @@ class ExprVisitor : public Visitor\n       }\n     else\n       {\n-\t/* Get the data pointer and length for static and dynamic arrays.  */\n+\t/* Get the array and length for static and dynamic arrays.  */\n \ttree array = d_save_expr (build_expr (e->e1));\n-\ttree ptr = convert_expr (array, tb1, tb1->nextOf ()->pointerTo ());\n \n \ttree length = NULL_TREE;\n \tif (tb1->ty != TY::Tpointer)\n@@ -1245,10 +1244,35 @@ class ExprVisitor : public Visitor\n \tif (tb1->ty != TY::Tpointer)\n \t  index = build_bounds_index_condition (e, index, length);\n \n-\t/* Index the .ptr.  */\n-\tptr = void_okay_p (ptr);\n-\tthis->result_ = indirect_ref (TREE_TYPE (TREE_TYPE (ptr)),\n-\t\t\t\t      build_array_index (ptr, index));\n+\t/* Convert vectors to their underlying array type.  */\n+\tif (VECTOR_TYPE_P (TREE_TYPE (array)))\n+\t  {\n+\t    tree array_type =\n+\t      build_array_type_nelts (TREE_TYPE (TREE_TYPE (array)),\n+\t\t\t\t      TYPE_VECTOR_SUBPARTS (TREE_TYPE (array)));\n+\t    d_mark_addressable (array);\n+\t    array = build1 (VIEW_CONVERT_EXPR, array_type, array);\n+\t  }\n+\n+\tif (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n+\t  {\n+\t    /* Generate `array[index]'.  When the index is non-constant, we must\n+\t       mark the array as addressable because we'll need to do pointer\n+\t       arithmetic on its address.  */\n+\t    if (TREE_CODE (index) != INTEGER_CST)\n+\t      d_mark_addressable (array);\n+\n+\t    this->result_ = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (array)),\n+\t\t\t\t    array, index, NULL_TREE, NULL_TREE);\n+\t  }\n+\telse\n+\t  {\n+\t    /* Generate `array.ptr[index]'.  */\n+\t    tree ptr = convert_expr (array, tb1, tb1->nextOf ()->pointerTo ());\n+\t    ptr = void_okay_p (ptr);\n+\t    this->result_ = indirect_ref (TREE_TYPE (TREE_TYPE (ptr)),\n+\t\t\t\t\t  build_pointer_index (ptr, index));\n+\t  }\n       }\n   }\n \n@@ -1347,7 +1371,7 @@ class ExprVisitor : public Visitor\n     if (!integer_zerop (lwr_tree))\n       {\n \ttree ptrtype = TREE_TYPE (ptr);\n-\tptr = build_array_index (void_okay_p (ptr), lwr_tree);\n+\tptr = build_pointer_index (void_okay_p (ptr), lwr_tree);\n \tptr = build_nop (ptrtype, ptr);\n       }\n "}, {"sha": "0f96284473fcf8a08fc6e768048b090c840acce0", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=8288cd635fa0bd75a8c5f25c7a90d4a7a4acec81", "patch": "@@ -306,8 +306,8 @@ expand_intrinsic_bt (intrinsic_code intrinsic, tree callexp)\n   tree bitsize = fold_convert (type, TYPE_SIZE (TREE_TYPE (ptr)));\n \n   /* ptr[bitnum / bitsize]  */\n-  ptr = build_array_index (ptr, fold_build2 (TRUNC_DIV_EXPR, type,\n-\t\t\t\t\t     bitnum, bitsize));\n+  ptr = build_pointer_index (ptr, fold_build2 (TRUNC_DIV_EXPR, type,\n+\t\t\t\t\t       bitnum, bitsize));\n   ptr = indirect_ref (type, ptr);\n \n   /* mask = 1 << (bitnum % bitsize);  */"}]}