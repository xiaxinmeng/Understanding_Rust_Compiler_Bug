{"sha": "1158c5b424c9c3a24a47e6cdfce923b373d9b013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1OGM1YjQyNGM5YzNhMjRhNDdlNmNkZmNlOTIzYjM3M2Q5YjAxMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-14T13:57:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-14T13:57:03Z"}, "message": "gimple-parser.c (c_parser_gimple_statement): Remove questionable auto-promotion to VIEW_CONVERT_EXPR.\n\n2019-05-14  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-parser.c (c_parser_gimple_statement): Remove\n\tquestionable auto-promotion to VIEW_CONVERT_EXPR.\n\t(c_parser_gimple_typespec): Split out from __MEM parsing.\n\t(c_parser_gimple_postfix_expression): Handle __VIEW_CONVERT.\n\t* tree-pretty-print.c (dump_generic_node): Dump VIEW_CONVERT_EXPR\n\tas __VIEW_CONVERT with -gimple.\n\n\t* gcc.dg/gimplefe-40.c: New testcase.\n\nFrom-SVN: r271170", "tree": {"sha": "f39ff5f1467e061ddac32ce6a9d1bc7b552585a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f39ff5f1467e061ddac32ce6a9d1bc7b552585a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1158c5b424c9c3a24a47e6cdfce923b373d9b013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1158c5b424c9c3a24a47e6cdfce923b373d9b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1158c5b424c9c3a24a47e6cdfce923b373d9b013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1158c5b424c9c3a24a47e6cdfce923b373d9b013/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22b6a9c1cd36af0db84954f104ff8448aa925f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b6a9c1cd36af0db84954f104ff8448aa925f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b6a9c1cd36af0db84954f104ff8448aa925f4d"}], "stats": {"total": 108, "additions": 80, "deletions": 28}, "files": [{"sha": "493d5887f26213e917d107b5f6a59da6bd9d8ca8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1158c5b424c9c3a24a47e6cdfce923b373d9b013", "patch": "@@ -1,3 +1,12 @@\n+2019-05-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_statement): Remove\n+\tquestionable auto-promotion to VIEW_CONVERT_EXPR.\n+\t(c_parser_gimple_typespec): Split out from __MEM parsing.\n+\t(c_parser_gimple_postfix_expression): Handle __VIEW_CONVERT.\n+\t* tree-pretty-print.c (dump_generic_node): Dump VIEW_CONVERT_EXPR\n+\tas __VIEW_CONVERT with -gimple.\n+\n 2019-05-09  Martin Liska  <mliska@suse.cz>\n \n \t* gimple-parser.c (c_parser_gimple_statement): Support __MIN and"}, {"sha": "7c1f1a97711b4a725a650d457badfe00820c57aa", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=1158c5b424c9c3a24a47e6cdfce923b373d9b013", "patch": "@@ -724,14 +724,8 @@ c_parser_gimple_statement (gimple_parser &parser, gimple_seq *seq)\n \t  && rhs.value != error_mark_node)\n \t{\n \t  enum tree_code code = NOP_EXPR;\n-\t  if (VECTOR_TYPE_P (TREE_TYPE (lhs.value)))\n-\t    {\n-\t      code = VIEW_CONVERT_EXPR;\n-\t      rhs.value = build1 (VIEW_CONVERT_EXPR,\n-\t\t\t\t  TREE_TYPE (lhs.value), rhs.value);\n-\t    }\n-\t  else if (FLOAT_TYPE_P (TREE_TYPE (lhs.value))\n-\t\t   && ! FLOAT_TYPE_P (TREE_TYPE (rhs.value)))\n+\t  if (FLOAT_TYPE_P (TREE_TYPE (lhs.value))\n+\t      && ! FLOAT_TYPE_P (TREE_TYPE (rhs.value)))\n \t    code = FLOAT_EXPR;\n \t  else if (! FLOAT_TYPE_P (TREE_TYPE (lhs.value))\n \t\t   && FLOAT_TYPE_P (TREE_TYPE (rhs.value)))\n@@ -1247,6 +1241,36 @@ c_parser_gimple_call_internal (gimple_parser &parser)\n   return expr;\n }\n \n+/* Parse '<' type [',' alignment] '>' and return a type on success\n+   and NULL_TREE on error.  */\n+\n+static tree\n+c_parser_gimple_typespec (gimple_parser &parser)\n+{\n+  struct c_type_name *type_name = NULL;\n+  tree alignment = NULL_TREE;\n+  if (c_parser_require (parser, CPP_LESS, \"expected %<<%>\"))\n+    {\n+      type_name = c_parser_type_name (parser);\n+      /* Optional alignment.  */\n+      if (c_parser_next_token_is (parser, CPP_COMMA))\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  alignment\n+\t      = c_parser_gimple_postfix_expression (parser).value;\n+\t}\n+      c_parser_skip_until_found (parser,\n+\t\t\t\t CPP_GREATER, \"expected %<>%>\");\n+    }\n+  if (!type_name)\n+    return NULL_TREE;\n+  tree tem;\n+  tree type = groktypename (type_name, &tem, NULL);\n+  if (alignment)\n+    type = build_aligned_type (type, tree_to_uhwi (alignment));\n+  return type;\n+}\n+\n /* Parse gimple postfix expression.\n \n    gimple-postfix-expression:\n@@ -1316,21 +1340,7 @@ c_parser_gimple_postfix_expression (gimple_parser &parser)\n \t\t           [ '+' number ] ')'  */\n \t      location_t loc = c_parser_peek_token (parser)->location;\n \t      c_parser_consume_token (parser);\n-\t      struct c_type_name *type_name = NULL;\n-\t      tree alignment = NULL_TREE;\n-\t      if (c_parser_require (parser, CPP_LESS, \"expected %<<%>\"))\n-\t        {\n-\t\t  type_name = c_parser_type_name (parser);\n-\t\t  /* Optional alignment.  */\n-\t\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n-\t\t    {\n-\t\t      c_parser_consume_token (parser);\n-\t\t      alignment\n-\t\t\t= c_parser_gimple_postfix_expression (parser).value;\n-\t\t    }\n-\t\t  c_parser_skip_until_found (parser,\n-\t\t\t\t\t     CPP_GREATER, \"expected %<>%>\");\n-\t\t}\n+\t      tree type = c_parser_gimple_typespec (parser);\n \t      struct c_expr ptr;\n \t      ptr.value = error_mark_node;\n \t      tree alias_off = NULL_TREE;\n@@ -1378,19 +1388,33 @@ c_parser_gimple_postfix_expression (gimple_parser &parser)\n \t\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t\t     \"expected %<)%>\");\n \t\t}\n-\t      if (! type_name || c_parser_error (parser))\n+\t      if (! type || c_parser_error (parser))\n \t\t{\n \t\t  c_parser_set_error (parser, false);\n \t\t  return expr;\n \t\t}\n-\t      tree tem = NULL_TREE;\n-\t      tree type = groktypename (type_name, &tem, NULL);\n-\t      if (alignment)\n-\t\ttype = build_aligned_type (type, tree_to_uhwi (alignment));\n \t      expr.value = build2_loc (loc, MEM_REF,\n \t\t\t\t       type, ptr.value, alias_off);\n \t      break;\n \t    }\n+\t  else if (strcmp (IDENTIFIER_POINTER (id), \"__VIEW_CONVERT\") == 0)\n+\t    {\n+\t      /* __VIEW_CONVERT '<' type-name [ ',' number ] '>'\n+\t                        '(' postfix-expression ')'  */\n+\t      location_t loc = c_parser_peek_token (parser)->location;\n+\t      c_parser_consume_token (parser);\n+\t      tree type = c_parser_gimple_typespec (parser);\n+\t      if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+\t\t{\n+\t\t  c_expr op = c_parser_gimple_postfix_expression (parser);\n+\t\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t\t     \"expected %<)%>\");\n+\t\t  if (type && op.value != error_mark_node)\n+\t\t    expr.value = build1_loc (loc, VIEW_CONVERT_EXPR,\n+\t\t\t\t\t     type, op.value);\n+\t\t}\n+\t      break;\n+\t    }\n \t  else if (strcmp (IDENTIFIER_POINTER (id), \"_Literal\") == 0)\n \t    {\n \t      /* _Literal '(' type-name ')' ( [ '-' ] constant | constructor ) */"}, {"sha": "57194259ae2084bcc5f769165f57ee58c0e5c63c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1158c5b424c9c3a24a47e6cdfce923b373d9b013", "patch": "@@ -1,3 +1,7 @@\n+2019-05-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-40.c: New testcase.\n+\n 2019-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR preprocessor/90382"}, {"sha": "0ad142f40dc0c285c79065732b247978daebc639", "filename": "gcc/testsuite/gcc.dg/gimplefe-40.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1158c5b424c9c3a24a47e6cdfce923b373d9b013/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-40.c?ref=1158c5b424c9c3a24a47e6cdfce923b373d9b013", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-fgimple -Wno-psabi -w\" } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+v4sf __GIMPLE (ssa)\n+load (const void * p)\n+{\n+  __int128 unsigned _3;\n+  v4sf _4;\n+\n+  __BB(2):\n+  _3 = __MEM <__int128 unsigned, 8> ((char *)p_2(D));\n+  _4 = __VIEW_CONVERT <v4sf>(_3);\n+  return _4;\n+}"}]}