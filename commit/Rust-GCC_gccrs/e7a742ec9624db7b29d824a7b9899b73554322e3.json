{"sha": "e7a742ec9624db7b29d824a7b9899b73554322e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhNzQyZWM5NjI0ZGI3YjI5ZDgyNGE3Yjk4OTliNzM1NTQzMjJlMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-07-17T21:09:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-07-17T21:09:14Z"}, "message": "libgcc2.c (__enable_execute_stack): New symbol.\n\n\t* libgcc2.c (__enable_execute_stack): New symbol.\n\t* libgcc-std.ver (GCC_3.4.2): New version.  Inherit from GCC_3.4\n\tand declare __enable_execute_stack.\n\t* mklibgcc.in (lib2funcs): Add _enable_execute_stack.\n\t* config/netbsd.h (NETBSD_ENABLE_EXECUTE_STACK): ANSIfy.\n\t* config/sol2.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n\tENABLE_EXECUTE_STACK.\n\t* config/alpha/alpha.c (alpha_initialize_trampoline): Conditionalize\n\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n\t* config/alpha/netbsd.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n\tENABLE_EXECUTE_STACK.\n\t* config/alpha/osf.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n\t* config/i386/i386.c (x86_initialize_trampoline): Conditionalize\n\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n\t* config/i386/netbsd-elf.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n\tENABLE_EXECUTE_STACK.\n\t* config/i386/netbsd.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n\t* config/i386/netbsd64.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n\t* config/sparc/freebsd.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n\t* config/sparc/netbsd-elf.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n\t* config/sparc/sparc.c (sparc_initialize_trampoline): Conditionalize\n\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n\t(sparc64_initialize_trampoline): Likewise.\n\t* doc/tm.texi (trampolines): Add ENABLE_EXECUTE_STACK macro.\n\nFrom-SVN: r84880", "tree": {"sha": "adb37612658bd4d95ab4862b248c91a39335be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb37612658bd4d95ab4862b248c91a39335be16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a742ec9624db7b29d824a7b9899b73554322e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a742ec9624db7b29d824a7b9899b73554322e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a742ec9624db7b29d824a7b9899b73554322e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a742ec9624db7b29d824a7b9899b73554322e3/comments", "author": null, "committer": null, "parents": [{"sha": "6e34d3a39f0ce48e95a2853df4be8d01eb745850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e34d3a39f0ce48e95a2853df4be8d01eb745850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e34d3a39f0ce48e95a2853df4be8d01eb745850"}], "stats": {"total": 97, "additions": 76, "deletions": 21}, "files": [{"sha": "afea2890af88ebee939e76c2043e577e9b830aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -1,3 +1,30 @@\n+2004-07-17  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* libgcc2.c (__enable_execute_stack): New symbol.\n+\t* libgcc-std.ver (GCC_3.4.2): New version.  Inherit from GCC_3.4\n+\tand declare __enable_execute_stack.\n+\t* mklibgcc.in (lib2funcs): Add _enable_execute_stack.\n+\t* config/netbsd.h (NETBSD_ENABLE_EXECUTE_STACK): ANSIfy.\n+\t* config/sol2.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n+\tENABLE_EXECUTE_STACK.\n+\t* config/alpha/alpha.c (alpha_initialize_trampoline): Conditionalize\n+\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n+\t* config/alpha/netbsd.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n+\tENABLE_EXECUTE_STACK.\n+\t* config/alpha/osf.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n+\t* config/i386/i386.c (x86_initialize_trampoline): Conditionalize\n+\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n+\t* config/i386/netbsd-elf.h (TRANSFER_FROM_TRAMPOLINE): Rename into\n+\tENABLE_EXECUTE_STACK.\n+\t* config/i386/netbsd.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n+\t* config/i386/netbsd64.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n+\t* config/sparc/freebsd.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n+\t* config/sparc/netbsd-elf.h (TRANSFER_FROM_TRAMPOLINE): Likewise.\n+\t* config/sparc/sparc.c (sparc_initialize_trampoline): Conditionalize\n+\ton ENABLE_EXECUTE_STACK instead of TRANSFER_FROM_TRAMPOLINE.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t* doc/tm.texi (trampolines): Add ENABLE_EXECUTE_STACK macro.\n+\n 2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* langhooks.h (builtin_function): New langhook."}, {"sha": "646258bf3f83e2811da8942700e08c367ca14b97", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -5782,7 +5782,7 @@ alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n       emit_move_insn (gen_rtx_MEM (SImode, addr), temp1);\n     }\n \n-#ifdef TRANSFER_FROM_TRAMPOLINE\n+#ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (init_one_libfunc (\"__enable_execute_stack\"),\n \t\t     0, VOIDmode, 1, tramp, Pmode);\n #endif"}, {"sha": "d4f833a0860e6f9c857da1d01a60e7ca5695a788", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -76,7 +76,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Attempt to enable execute permissions on the stack.  */\n \n-#define TRANSFER_FROM_TRAMPOLINE NETBSD_ENABLE_EXECUTE_STACK\n+#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n \n \n #undef TARGET_VERSION"}, {"sha": "954a4ad96002d479412b3a95179c2307ac4f82bf", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -144,7 +144,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Attempt to turn on access permissions for the stack.  */\n \n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n __enable_execute_stack (void *addr)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "bcc9104cd6ae627f451974b2ca2a20a4c8067a90", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -12659,7 +12659,7 @@ x86_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \tabort ();\n     }\n \n-#ifdef TRANSFER_FROM_TRAMPOLINE\n+#ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n \t\t     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif"}, {"sha": "bd2e9de55e771546c20603c179dfe42aeec75be8", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -120,6 +120,6 @@ Boston, MA 02111-1307, USA.  */\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n /* Attempt to enable execute permissions on the stack.  */\n-#define TRANSFER_FROM_TRAMPOLINE NETBSD_ENABLE_EXECUTE_STACK\n+#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n \n #define TARGET_VERSION fprintf (stderr, \" (NetBSD/i386 ELF)\");"}, {"sha": "dd7eae1a84788cdffd88b0c3daf69cf77738fe69", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -69,4 +69,4 @@\n #define GOT_SYMBOL_NAME \"GLOBAL_OFFSET_TABLE_\"\n \n /* Attempt to enable execute permissions on the stack.  */\n-#define TRANSFER_FROM_TRAMPOLINE NETBSD_ENABLE_EXECUTE_STACK\n+#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK"}, {"sha": "66f31e03290f2a34008e6604535750a53c585a71", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -68,6 +68,6 @@ Boston, MA 02111-1307, USA.  */\n }\n \n /* Attempt to enable execute permissions on the stack.  */\n-#define TRANSFER_FROM_TRAMPOLINE NETBSD_ENABLE_EXECUTE_STACK\n+#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n \n #define TARGET_VERSION fprintf (stderr, \" (NetBSD/x86_64 ELF)\");"}, {"sha": "aad3cac943047ef6c7f0b17411c5fd29333e096d", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -178,7 +178,7 @@ Boston, MA 02111-1307, USA.  */\n \f\n \n /* Attempt to turn on execute permission for the stack.  This may be\n-   used by TRANSFER_FROM_TRAMPOLINE of the target needs it (that is,\n+   used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n    if the target machine can change execute permissions on a page).\n \n    There is no way to query the execute permission of the stack, so\n@@ -193,8 +193,7 @@ Boston, MA 02111-1307, USA.  */\n #define NETBSD_ENABLE_EXECUTE_STACK\t\t\t\t\t\\\n extern void __enable_execute_stack (void *);\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (addr)\t\t\t\t\t\t\\\n-     void *addr;\t\t\t\t\t\t\t\\\n+__enable_execute_stack (void *addr)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   extern int mprotect (void *, size_t, int);\t\t\t\t\\\n   extern int __sysctl (int *, unsigned int, void *, size_t *,\t\t\\"}, {"sha": "aa567bc4780a9513c41283c4efebf4ad8c279449", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -162,20 +162,17 @@ Boston, MA 02111-1307, USA.  */\n /*\n  * Attempt to turn on access permissions for the stack.\n  *\n- * This code must be defined when compiling gcc but not when compiling\n- * libgcc2.a, unless we're generating code for 64-bit SPARC\n- *\n  * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n  * to run always.  2.6 can change the stack protection but has no way to\n  * query it.\n  *\n  */\n \n /* sys/mman.h is not present on some non-Solaris configurations\n-   that use sol2.h, so TRANSFER_FROM_TRAMPOLINE must use a magic\n+   that use sol2.h, so ENABLE_EXECUTE_STACK must use a magic\n    number instead of the appropriate PROT_* flags.  */\n \n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+#define ENABLE_EXECUTE_STACK\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n /* #define STACK_PROT_RWX (PROT_READ | PROT_WRITE | PROT_EXEC) */\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "389c00daca49d2786bfdab953f5b7644019d8e60", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -96,7 +96,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL\tCM_MEDLOW\n \n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n   static int need_enable_exec_stack;\t\t\t\t\t\\\n   static void check_enabling(void) __attribute__ ((constructor));\t\\\n   static void check_enabling(void)\t\t\t\t\t\\"}, {"sha": "3c2f8a9a653b665673e5f8fa21e1a295586a2219", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02111-1307, USA.  */\n #undef STDC_0_IN_SYSTEM_HEADERS\n \n /* Attempt to enable execute permissions on the stack.  */\n-#define TRANSFER_FROM_TRAMPOLINE NETBSD_ENABLE_EXECUTE_STACK\n+#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n \n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (%s)\", TARGET_NAME);"}, {"sha": "d37875766438e44edb4edc8b1db044381ab87e57", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -7575,7 +7575,7 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n-#ifdef TRANSFER_FROM_TRAMPOLINE\n+#ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n                      LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif\n@@ -7616,7 +7616,7 @@ sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n-#ifdef TRANSFER_FROM_TRAMPOLINE\n+#ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n                      LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif"}, {"sha": "c7aade3edbf23d5b563cefd3aed145308b91b565", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -4694,6 +4694,19 @@ typically be a series of @code{asm} statements.  Both @var{beg} and\n @var{end} are both pointer expressions.\n @end defmac\n \n+The operating system may also require the stack to be made executable\n+before calling the trampoline.  To implement this requirement, define\n+the following macro.\n+\n+@defmac ENABLE_EXECUTE_STACK\n+Define this macro if certain operations must be performed before executing\n+code located on the stack.  The macro should expand to a series of C\n+file-scope constructs (e.g. functions) and provide a unique entry point\n+named @code{__enable_execute_stack}.  The target is responsible for\n+emitting calls to the entry point in the code, for example from the\n+@code{INITIALIZE_TRAMPOLINE} macro.\n+@end defmac\n+\n To use a standard subroutine, define the following macro.  In addition,\n you must make sure that the instructions in a trampoline fill an entire\n cache line with identical instructions, or else ensure that the"}, {"sha": "1abe07cd45be3eb7604f9d4a801cb6982615da53", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -216,3 +216,9 @@ GCC_3.4 {\n   __paritydi2\n   __parityti2\n }\n+\n+%inherit GCC_3.4.2 GCC_3.4\n+GCC_3.4.2 {\n+  # Used to deal with trampoline initialization on some platforms\n+  __enable_execute_stack\n+}"}, {"sha": "8a3529b1da3fb39781c33aa20b7f3e6a6ed68f54", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -1487,6 +1487,19 @@ __clear_cache (char *beg __attribute__((__unused__)),\n \n #endif /* L_clear_cache */\n \f\n+#ifdef L_enable_execute_stack\n+/* Attempt to turn on execute permission for the stack.  */\n+\n+#ifdef ENABLE_EXECUTE_STACK\n+  ENABLE_EXECUTE_STACK\n+#else\n+void\n+__enable_execute_stack (void *addr __attribute__((__unused__)))\n+{}\n+#endif /* ENABLE_EXECUTE_STACK */\n+\n+#endif /* L_enable_execute_stack */\n+\f\n #ifdef L_trampoline\n \n /* Jump to a trampoline, loading the static chain address.  */"}, {"sha": "d5f7937ea7eda91bb12b6e01b147177bfb517f50", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a742ec9624db7b29d824a7b9899b73554322e3/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=e7a742ec9624db7b29d824a7b9899b73554322e3", "patch": "@@ -48,8 +48,8 @@ lib2funcs='_muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3\n \t_cmpdi2 _ucmpdi2 _floatdidf _floatdisf _fixunsdfsi _fixunssfsi\n \t_fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi _fixxfdi _fixunsxfdi\n \t_floatdixf _fixunsxfsi _fixtfdi _fixunstfdi _floatditf _clear_cache\n-\t_trampoline __main _absvsi2 _absvdi2 _addvsi3 _addvdi3\n-\t_subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors\n+\t_enable_execute_stack _trampoline __main _absvsi2 _absvdi2 _addvsi3\n+\t_addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors\n \t_ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2 _ctzsi2 _ctzdi2 _popcount_tab\n \t_popcountsi2 _popcountdi2 _paritysi2 _paritydi2'\n "}]}