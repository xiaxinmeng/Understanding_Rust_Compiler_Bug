{"sha": "c04d766942274da89b236c4cb7e954b26da397c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0ZDc2Njk0MjI3NGRhODliMjM2YzRjYjdlOTU0YjI2ZGEzOTdjNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-19T08:38:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-19T08:42:57Z"}, "message": "openmp: Fix ICE on requires clause with atomic_default_mem_order (\n\nWhen working on error directive, I've noticed the C FE ICEs on\n  #pragma omp requires atomic_default_mem_order (\nwhere it tries to peek 2nd token after the CPP_PRAGMA_EOL (or CPP_EOF)\nin there in order to improve error-recovery on say\natomic_default_mem_order (acquire)\nor\natomic_default_mem_order (seqcst)\netc.  The C++ FE didn't ICE, but it is better to follow the same thing there.\n\n2021-08-19  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c/\n\t* c-parser.c (c_parser_omp_requires): Don't call\n\tc_parser_peek_2nd_token and optionally consume token if current\n\ttoken is CPP_EOF, CPP_PRAGMA_EOL or CPP_CLOSE_PAREN.\ngcc/cp/\n\t* parser.c (cp_parser_omp_requires): Don't call cp_lexer_nth_token_is\n\tand optionally consume token if current token is CPP_EOF,\n\tCPP_PRAGMA_EOL or CPP_CLOSE_PAREN.\ngcc/testsuite/\n\t* c-c++-common/gomp/requires-3.c: Add testcase for\n\tatomic_default_mem_order ( at the end of line without corresponding ).", "tree": {"sha": "abd34947fbbcc9dcab8d534ca41f856f3af47d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abd34947fbbcc9dcab8d534ca41f856f3af47d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04d766942274da89b236c4cb7e954b26da397c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04d766942274da89b236c4cb7e954b26da397c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04d766942274da89b236c4cb7e954b26da397c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04d766942274da89b236c4cb7e954b26da397c7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb23be4fa59be26a7ba08918d6973e1d94629f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb23be4fa59be26a7ba08918d6973e1d94629f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb23be4fa59be26a7ba08918d6973e1d94629f8a"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "407f279fc0395f67b9ae61038471290678f0e1c3", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c04d766942274da89b236c4cb7e954b26da397c7", "patch": "@@ -21710,9 +21710,18 @@ c_parser_omp_requires (c_parser *parser)\n \t\t      error_at (c_parser_peek_token (parser)->location,\n \t\t\t\t\"expected %<seq_cst%>, %<relaxed%> or \"\n \t\t\t\t\"%<acq_rel%>\");\n-\t\t      if (c_parser_peek_2nd_token (parser)->type\n-\t\t\t  == CPP_CLOSE_PAREN)\n-\t\t\tc_parser_consume_token (parser);\n+\t\t      switch (c_parser_peek_token (parser)->type)\n+\t\t\t{\n+\t\t\tcase CPP_EOF:\n+\t\t\tcase CPP_PRAGMA_EOL:\n+\t\t\tcase CPP_CLOSE_PAREN:\n+\t\t\t  break;\n+\t\t\tdefault:\n+\t\t\t  if (c_parser_peek_2nd_token (parser)->type\n+\t\t\t      == CPP_CLOSE_PAREN)\n+\t\t\t    c_parser_consume_token (parser);\n+\t\t\t  break;\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    c_parser_consume_token (parser);"}, {"sha": "0af1a2ccfbce530fe54683c1bbf0f1ab2d008816", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c04d766942274da89b236c4cb7e954b26da397c7", "patch": "@@ -45479,9 +45479,18 @@ cp_parser_omp_requires (cp_parser *parser, cp_token *pragma_tok)\n \t\t      error_at (cp_lexer_peek_token (parser->lexer)->location,\n \t\t\t\t\"expected %<seq_cst%>, %<relaxed%> or \"\n \t\t\t\t\"%<acq_rel%>\");\n-\t\t      if (cp_lexer_nth_token_is (parser->lexer, 2,\n-\t\t\t\t\t\t CPP_CLOSE_PAREN))\n-\t\t\tcp_lexer_consume_token (parser->lexer);\n+\t\t      switch (cp_lexer_peek_token (parser->lexer)->type)\n+\t\t\t{\n+\t\t\tcase CPP_EOF:\n+\t\t\tcase CPP_PRAGMA_EOL:\n+\t\t\tcase CPP_CLOSE_PAREN:\n+\t\t\t  break;\n+\t\t\tdefault:\n+\t\t\t  if (cp_lexer_nth_token_is (parser->lexer, 2,\n+\t\t\t\t\t\t     CPP_CLOSE_PAREN))\n+\t\t\t    cp_lexer_consume_token (parser->lexer);\n+\t\t\t  break;\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    cp_lexer_consume_token (parser->lexer);"}, {"sha": "0e55b666ebf72ce5b2dd6e22a8a0fda645040f3f", "filename": "gcc/testsuite/c-c++-common/gomp/requires-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04d766942274da89b236c4cb7e954b26da397c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-3.c?ref=c04d766942274da89b236c4cb7e954b26da397c7", "patch": "@@ -1,3 +1,5 @@\n #pragma omp requires atomic_default_mem_order(acquire)\t/* { dg-error \"expected 'seq_cst', 'relaxed' or 'acq_rel'\" } */\n #pragma omp requires atomic_default_mem_order(release)\t/* { dg-error \"expected 'seq_cst', 'relaxed' or 'acq_rel'\" } */\n #pragma omp requires atomic_default_mem_order(foobar)\t/* { dg-error \"expected 'seq_cst', 'relaxed' or 'acq_rel'\" } */\n+#pragma omp requires atomic_default_mem_order (\t/* { dg-error \"expected 'seq_cst', 'relaxed' or 'acq_rel'\" } */\n+/* { dg-error \"expected '\\\\\\)' before end of line\" \"\" { target *-*-* } .-1 } */"}]}