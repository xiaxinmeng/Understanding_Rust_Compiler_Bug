{"sha": "bea63b0accf638e9b45b75efc2b75a746aba88a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhNjNiMGFjY2Y2MzhlOWI0NWI3NWVmYzJiNzVhNzQ2YWJhODhhNg==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2003-02-17T19:05:56Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-02-17T19:05:56Z"}, "message": "Properties.java (store): Move the code formerly in list(), into this method.\n\n2003-02-17  Ranjit Mathew  <rmathew@hotmail.com>\n\n\t* java/util/Properties.java (store): Move the code formerly in\n\tlist(), into this method.\n\t(list (PrintStream)): Just call list (PrintWriter) with a\n\tPrintWriter object constructed from the given PrintStream object.\n\t(list (PrintWriter)): Emulate the output of Properties.list()\n\tas found in JDK 1.3/1.4.\n\nFrom-SVN: r63006", "tree": {"sha": "a6dc5e410e218a64c0f824d16ba4e57464752d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6dc5e410e218a64c0f824d16ba4e57464752d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea63b0accf638e9b45b75efc2b75a746aba88a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea63b0accf638e9b45b75efc2b75a746aba88a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea63b0accf638e9b45b75efc2b75a746aba88a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea63b0accf638e9b45b75efc2b75a746aba88a6/comments", "author": null, "committer": null, "parents": [{"sha": "130cd3e1df2476eda6e01c82ace326db4f85e24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130cd3e1df2476eda6e01c82ace326db4f85e24e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130cd3e1df2476eda6e01c82ace326db4f85e24e"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "e417849ee5a23e36487f9de0132bd6dc53f95c1d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea63b0accf638e9b45b75efc2b75a746aba88a6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea63b0accf638e9b45b75efc2b75a746aba88a6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bea63b0accf638e9b45b75efc2b75a746aba88a6", "patch": "@@ -1,3 +1,12 @@\n+2003-02-17  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* java/util/Properties.java (store): Move the code formerly in\n+\tlist(), into this method.\n+\t(list (PrintStream)): Just call list (PrintWriter) with a \n+\tPrintWriter object constructed from the given PrintStream object.\n+\t(list (PrintWriter)): Emulate the output of Properties.list()\n+\tas found in JDK 1.3/1.4.\n+\n 2003-02-17  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java"}, {"sha": "279cf1e7b82ac5b0b756b8cdad4141cc96c509ac", "filename": "libjava/java/util/Properties.java", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea63b0accf638e9b45b75efc2b75a746aba88a6/libjava%2Fjava%2Futil%2FProperties.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea63b0accf638e9b45b75efc2b75a746aba88a6/libjava%2Fjava%2Futil%2FProperties.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FProperties.java?ref=bea63b0accf638e9b45b75efc2b75a746aba88a6", "patch": "@@ -377,9 +377,21 @@ public void store(OutputStream out, String header) throws IOException\n       = new PrintWriter(new OutputStreamWriter(out, \"ISO-8859-1\"));\n     if (header != null)\n       writer.println(\"#\" + header);\n-    writer.println(\"#\" + new Date());\n-    list(writer);\n-    writer.flush();\n+    writer.println (\"#\" + Calendar.getInstance ().getTime ());\n+    \n+    Iterator iter = entrySet ().iterator ();\n+    int i = size ();\n+    StringBuffer s = new StringBuffer (); // Reuse the same buffer.\n+    while (--i >= 0)\n+      {\n+        Map.Entry entry = (Map.Entry) iter.next ();\n+        formatForOutput ((String) entry.getKey (), s, true);\n+        s.append ('=');\n+        formatForOutput ((String) entry.getValue (), s, false);\n+        writer.println (s);\n+      }\n+\n+    writer.flush ();\n   }\n \n   /**\n@@ -453,54 +465,50 @@ public Enumeration propertyNames()\n   }\n \n   /**\n-   * Writes the key/value pairs to the given print stream.  They are\n-   * written in the way described in the method store. This does not visit\n-   * the keys in the default properties.\n+   * Prints the key/value pairs to the given print stream.  This is \n+   * mainly useful for debugging purposes.\n    *\n-   * @param out the stream, where the key/value pairs are written to\n-   * @throws ClassCastException if this property contains any key or\n+   * @param out the print stream, where the key/value pairs are written to\n+   * @throws ClassCastException if this property contains a key or a\n    *         value that isn't a string\n-   * @see #store(OutputStream, String)\n+   * @see #list(PrintWriter)\n    */\n   public void list(PrintStream out)\n   {\n-    Iterator iter = entrySet().iterator();\n-    int i = size();\n-    StringBuffer s = new StringBuffer(); // Reuse the same buffer.\n-    while (--i >= 0)\n-      {\n-        Map.Entry entry = (Map.Entry) iter.next();\n-        formatForOutput((String) entry.getKey(), s, true);\n-        s.append('=');\n-        formatForOutput((String) entry.getValue(), s, false);\n-        out.println(s);\n-      }\n+    PrintWriter writer = new PrintWriter (out);\n+    list (writer);\n   }\n \n   /**\n-   * Writes the key/value pairs to the given print writer.  They are\n-   * written in the way, described in the method store.\n+   * Prints the key/value pairs to the given print writer.  This is\n+   * mainly useful for debugging purposes.\n    *\n-   * @param out the writer, where the key/value pairs are written to\n-   * @throws ClassCastException if this property contains any key or\n+   * @param out the print writer where the key/value pairs are written to\n+   * @throws ClassCastException if this property contains a key or a\n    *         value that isn't a string\n-   * @see #store(OutputStream, String)\n    * @see #list(PrintStream)\n    * @since 1.1\n    */\n   public void list(PrintWriter out)\n   {\n-    Iterator iter = entrySet().iterator();\n-    int i = size();\n-    StringBuffer s = new StringBuffer(); // Reuse the same buffer.\n+    out.println (\"-- listing properties --\");\n+\n+    Iterator iter = entrySet ().iterator ();\n+    int i = size ();\n     while (--i >= 0)\n       {\n-        Map.Entry entry = (Map.Entry) iter.next();\n-        formatForOutput((String) entry.getKey(), s, true);\n-        s.append('=');\n-        formatForOutput((String) entry.getValue(), s, false);\n-        out.println(s);\n+        Map.Entry entry = (Map.Entry) iter.next ();\n+        out.print ((String) entry.getKey () + \"=\");\n+\n+        // JDK 1.3/1.4 restrict the printed value, but not the key,\n+        // to 40 characters, including the truncating ellipsis.\n+        String s = (String ) entry.getValue ();\n+        if (s != null && s.length () > 40)\n+          out.println (s.substring (0, 37) + \"...\");\n+        else\n+          out.println (s);\n       }\n+    out.flush ();\n   }\n \n   /**"}]}