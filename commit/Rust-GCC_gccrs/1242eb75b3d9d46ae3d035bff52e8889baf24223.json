{"sha": "1242eb75b3d9d46ae3d035bff52e8889baf24223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0MmViNzViM2Q5ZDQ2YWUzZDAzNWJmZjUyZTg4ODliYWYyNDIyMw==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-12-08T18:07:04Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-01-30T21:52:27Z"}, "message": "Fusion patterns for logical-logical\n\nThis patch adds a new function to genfusion.pl to generate patterns for\nlogical-logical fusion. They are enabled by default for power10 and can\nbe disabled by -mno-power10-fusion-2logical or -mno-power10-fusion.\n\ngcc/ChangeLog\n\t* config/rs6000/genfusion.pl (gen_2logical): New function to\n\tgenerate patterns for logical-logical fusion.\n\t* config/rs6000/fusion.md: Regenerated patterns.\n\t* config/rs6000/rs6000-cpus.def: Add\n\tOPTION_MASK_P10_FUSION_2LOGICAL.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tEnable logical-logical fusion for p10.\n\t* config/rs6000/rs6000.opt: Add -mpower10-fusion-2logical.", "tree": {"sha": "b1e818ab48a4fab04dc329c3fb4093256d5f478d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e818ab48a4fab04dc329c3fb4093256d5f478d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1242eb75b3d9d46ae3d035bff52e8889baf24223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1242eb75b3d9d46ae3d035bff52e8889baf24223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1242eb75b3d9d46ae3d035bff52e8889baf24223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1242eb75b3d9d46ae3d035bff52e8889baf24223/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349b909bb35eafdf4ed85782bfc6de87bc82018f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349b909bb35eafdf4ed85782bfc6de87bc82018f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349b909bb35eafdf4ed85782bfc6de87bc82018f"}], "stats": {"total": 2280, "additions": 2279, "deletions": 1}, "files": [{"sha": "1ddbe7fe3d2001ff2d08b71b85e82b38619e54d2", "filename": "gcc/config/rs6000/fusion.md", "status": "modified", "additions": 2176, "deletions": 0, "changes": 2176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Ffusion.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Ffusion.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffusion.md?ref=1242eb75b3d9d46ae3d035bff52e8889baf24223", "patch": "@@ -355,3 +355,2179 @@\n    (set_attr \"cost\" \"8\")\n    (set_attr \"length\" \"8\")])\n \n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;and %3,%3,%2\n+   and %0,%1,%0\\;and %0,%0,%2\n+   and %1,%1,%0\\;and %1,%1,%2\n+   and %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;and %3,%3,%2\n+   andc %0,%1,%0\\;and %0,%0,%2\n+   andc %1,%1,%0\\;and %1,%1,%2\n+   andc %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;and %3,%3,%2\n+   eqv %0,%1,%0\\;and %0,%0,%2\n+   eqv %1,%1,%0\\;and %1,%1,%2\n+   eqv %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;and %3,%3,%2\n+   nand %0,%1,%0\\;and %0,%0,%2\n+   nand %1,%1,%0\\;and %1,%1,%2\n+   nand %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;and %3,%3,%2\n+   nor %0,%1,%0\\;and %0,%0,%2\n+   nor %1,%1,%0\\;and %1,%1,%2\n+   nor %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;and %3,%3,%2\n+   or %0,%1,%0\\;and %0,%0,%2\n+   or %1,%1,%0\\;and %1,%1,%2\n+   or %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;and %3,%3,%2\n+   orc %0,%1,%0\\;and %0,%0,%2\n+   orc %1,%1,%0\\;and %1,%1,%2\n+   orc %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: and op and rtl and inv 0 comp 0\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_and\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;and %3,%3,%2\n+   xor %0,%1,%0\\;and %0,%0,%2\n+   xor %1,%1,%0\\;and %1,%1,%2\n+   xor %4,%1,%0\\;and %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;andc %3,%3,%2\n+   and %0,%1,%0\\;andc %0,%0,%2\n+   and %1,%1,%0\\;andc %1,%1,%2\n+   and %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;andc %3,%3,%2\n+   andc %0,%1,%0\\;andc %0,%0,%2\n+   andc %1,%1,%0\\;andc %1,%1,%2\n+   andc %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;andc %3,%3,%2\n+   eqv %0,%1,%0\\;andc %0,%0,%2\n+   eqv %1,%1,%0\\;andc %1,%1,%2\n+   eqv %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;andc %3,%3,%2\n+   nand %0,%1,%0\\;andc %0,%0,%2\n+   nand %1,%1,%0\\;andc %1,%1,%2\n+   nand %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;andc %3,%3,%2\n+   nor %0,%1,%0\\;andc %0,%0,%2\n+   nor %1,%1,%0\\;andc %1,%1,%2\n+   nor %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;andc %3,%3,%2\n+   or %0,%1,%0\\;andc %0,%0,%2\n+   or %1,%1,%0\\;andc %1,%1,%2\n+   or %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;andc %3,%3,%2\n+   orc %0,%1,%0\\;andc %0,%0,%2\n+   orc %1,%1,%0\\;andc %1,%1,%2\n+   orc %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: andc op andc rtl and inv 0 comp 1\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_andc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;andc %3,%3,%2\n+   xor %0,%1,%0\\;andc %0,%0,%2\n+   xor %1,%1,%0\\;andc %1,%1,%2\n+   xor %4,%1,%0\\;andc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;eqv %3,%3,%2\n+   and %0,%1,%0\\;eqv %0,%0,%2\n+   and %1,%1,%0\\;eqv %1,%1,%2\n+   and %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;eqv %3,%3,%2\n+   andc %0,%1,%0\\;eqv %0,%0,%2\n+   andc %1,%1,%0\\;eqv %1,%1,%2\n+   andc %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;eqv %3,%3,%2\n+   eqv %0,%1,%0\\;eqv %0,%0,%2\n+   eqv %1,%1,%0\\;eqv %1,%1,%2\n+   eqv %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;eqv %3,%3,%2\n+   nand %0,%1,%0\\;eqv %0,%0,%2\n+   nand %1,%1,%0\\;eqv %1,%1,%2\n+   nand %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;eqv %3,%3,%2\n+   nor %0,%1,%0\\;eqv %0,%0,%2\n+   nor %1,%1,%0\\;eqv %1,%1,%2\n+   nor %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;eqv %3,%3,%2\n+   or %0,%1,%0\\;eqv %0,%0,%2\n+   or %1,%1,%0\\;eqv %1,%1,%2\n+   or %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;eqv %3,%3,%2\n+   orc %0,%1,%0\\;eqv %0,%0,%2\n+   orc %1,%1,%0\\;eqv %1,%1,%2\n+   orc %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: eqv op eqv rtl xor inv 1 comp 0\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_eqv\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (not:GPR (xor:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;eqv %3,%3,%2\n+   xor %0,%1,%0\\;eqv %0,%0,%2\n+   xor %1,%1,%0\\;eqv %1,%1,%2\n+   xor %4,%1,%0\\;eqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;nand %3,%3,%2\n+   and %0,%1,%0\\;nand %0,%0,%2\n+   and %1,%1,%0\\;nand %1,%1,%2\n+   and %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;nand %3,%3,%2\n+   andc %0,%1,%0\\;nand %0,%0,%2\n+   andc %1,%1,%0\\;nand %1,%1,%2\n+   andc %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;nand %3,%3,%2\n+   eqv %0,%1,%0\\;nand %0,%0,%2\n+   eqv %1,%1,%0\\;nand %1,%1,%2\n+   eqv %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;nand %3,%3,%2\n+   nand %0,%1,%0\\;nand %0,%0,%2\n+   nand %1,%1,%0\\;nand %1,%1,%2\n+   nand %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;nand %3,%3,%2\n+   nor %0,%1,%0\\;nand %0,%0,%2\n+   nor %1,%1,%0\\;nand %1,%1,%2\n+   nor %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;nand %3,%3,%2\n+   or %0,%1,%0\\;nand %0,%0,%2\n+   or %1,%1,%0\\;nand %1,%1,%2\n+   or %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;nand %3,%3,%2\n+   orc %0,%1,%0\\;nand %0,%0,%2\n+   orc %1,%1,%0\\;nand %1,%1,%2\n+   orc %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nand op nand rtl ior inv 0 comp 3\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_nand\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;nand %3,%3,%2\n+   xor %0,%1,%0\\;nand %0,%0,%2\n+   xor %1,%1,%0\\;nand %1,%1,%2\n+   xor %4,%1,%0\\;nand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;nor %3,%3,%2\n+   and %0,%1,%0\\;nor %0,%0,%2\n+   and %1,%1,%0\\;nor %1,%1,%2\n+   and %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;nor %3,%3,%2\n+   andc %0,%1,%0\\;nor %0,%0,%2\n+   andc %1,%1,%0\\;nor %1,%1,%2\n+   andc %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;nor %3,%3,%2\n+   eqv %0,%1,%0\\;nor %0,%0,%2\n+   eqv %1,%1,%0\\;nor %1,%1,%2\n+   eqv %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;nor %3,%3,%2\n+   nand %0,%1,%0\\;nor %0,%0,%2\n+   nand %1,%1,%0\\;nor %1,%1,%2\n+   nand %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;nor %3,%3,%2\n+   nor %0,%1,%0\\;nor %0,%0,%2\n+   nor %1,%1,%0\\;nor %1,%1,%2\n+   nor %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;nor %3,%3,%2\n+   or %0,%1,%0\\;nor %0,%0,%2\n+   or %1,%1,%0\\;nor %1,%1,%2\n+   or %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;nor %3,%3,%2\n+   orc %0,%1,%0\\;nor %0,%0,%2\n+   orc %1,%1,%0\\;nor %1,%1,%2\n+   orc %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: nor op nor rtl and inv 0 comp 3\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_nor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (and:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;nor %3,%3,%2\n+   xor %0,%1,%0\\;nor %0,%0,%2\n+   xor %1,%1,%0\\;nor %1,%1,%2\n+   xor %4,%1,%0\\;nor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;or %3,%3,%2\n+   and %0,%1,%0\\;or %0,%0,%2\n+   and %1,%1,%0\\;or %1,%1,%2\n+   and %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;or %3,%3,%2\n+   andc %0,%1,%0\\;or %0,%0,%2\n+   andc %1,%1,%0\\;or %1,%1,%2\n+   andc %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;or %3,%3,%2\n+   eqv %0,%1,%0\\;or %0,%0,%2\n+   eqv %1,%1,%0\\;or %1,%1,%2\n+   eqv %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;or %3,%3,%2\n+   nand %0,%1,%0\\;or %0,%0,%2\n+   nand %1,%1,%0\\;or %1,%1,%2\n+   nand %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;or %3,%3,%2\n+   nor %0,%1,%0\\;or %0,%0,%2\n+   nor %1,%1,%0\\;or %1,%1,%2\n+   nor %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;or %3,%3,%2\n+   or %0,%1,%0\\;or %0,%0,%2\n+   or %1,%1,%0\\;or %1,%1,%2\n+   or %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;or %3,%3,%2\n+   orc %0,%1,%0\\;or %0,%0,%2\n+   orc %1,%1,%0\\;or %1,%1,%2\n+   orc %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: or op or rtl ior inv 0 comp 0\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_or\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;or %3,%3,%2\n+   xor %0,%1,%0\\;or %0,%0,%2\n+   xor %1,%1,%0\\;or %1,%1,%2\n+   xor %4,%1,%0\\;or %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;orc %3,%3,%2\n+   and %0,%1,%0\\;orc %0,%0,%2\n+   and %1,%1,%0\\;orc %1,%1,%2\n+   and %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;orc %3,%3,%2\n+   andc %0,%1,%0\\;orc %0,%0,%2\n+   andc %1,%1,%0\\;orc %1,%1,%2\n+   andc %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;orc %3,%3,%2\n+   eqv %0,%1,%0\\;orc %0,%0,%2\n+   eqv %1,%1,%0\\;orc %1,%1,%2\n+   eqv %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;orc %3,%3,%2\n+   nand %0,%1,%0\\;orc %0,%0,%2\n+   nand %1,%1,%0\\;orc %1,%1,%2\n+   nand %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;orc %3,%3,%2\n+   nor %0,%1,%0\\;orc %0,%0,%2\n+   nor %1,%1,%0\\;orc %1,%1,%2\n+   nor %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;orc %3,%3,%2\n+   or %0,%1,%0\\;orc %0,%0,%2\n+   or %1,%1,%0\\;orc %1,%1,%2\n+   or %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;orc %3,%3,%2\n+   orc %0,%1,%0\\;orc %0,%0,%2\n+   orc %1,%1,%0\\;orc %1,%1,%2\n+   orc %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: orc op orc rtl ior inv 0 comp 1\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_orc\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (ior:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\"))))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;orc %3,%3,%2\n+   xor %0,%1,%0\\;orc %0,%0,%2\n+   xor %1,%1,%0\\;orc %1,%1,%2\n+   xor %4,%1,%0\\;orc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: and op and rtl and inv 0 comp 0\n+(define_insn \"*fuse_and_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (and:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   and %3,%1,%0\\;xor %3,%3,%2\n+   and %0,%1,%0\\;xor %0,%0,%2\n+   and %1,%1,%0\\;xor %1,%1,%2\n+   and %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: andc op andc rtl and inv 0 comp 1\n+(define_insn \"*fuse_andc_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   andc %3,%1,%0\\;xor %3,%3,%2\n+   andc %0,%1,%0\\;xor %0,%0,%2\n+   andc %1,%1,%0\\;xor %1,%1,%2\n+   andc %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: eqv op eqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_eqv_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (not:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   eqv %3,%1,%0\\;xor %3,%3,%2\n+   eqv %0,%1,%0\\;xor %0,%0,%2\n+   eqv %1,%1,%0\\;xor %1,%1,%2\n+   eqv %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: nand op nand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_nand_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nand %3,%1,%0\\;xor %3,%3,%2\n+   nand %0,%1,%0\\;xor %0,%0,%2\n+   nand %1,%1,%0\\;xor %1,%1,%2\n+   nand %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: nor op nor rtl and inv 0 comp 3\n+(define_insn \"*fuse_nor_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (and:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\"))) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   nor %3,%1,%0\\;xor %3,%3,%2\n+   nor %0,%1,%0\\;xor %0,%0,%2\n+   nor %1,%1,%0\\;xor %1,%1,%2\n+   nor %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: or op or rtl ior inv 0 comp 0\n+(define_insn \"*fuse_or_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (ior:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   or %3,%1,%0\\;xor %3,%3,%2\n+   or %0,%1,%0\\;xor %0,%0,%2\n+   or %1,%1,%0\\;xor %1,%1,%2\n+   or %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: orc op orc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_orc_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (ior:GPR (not:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   orc %3,%1,%0\\;xor %3,%3,%2\n+   orc %0,%1,%0\\;xor %0,%0,%2\n+   orc %1,%1,%0\\;xor %1,%1,%2\n+   orc %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: scalar outer: xor op xor rtl xor inv 0 comp 0\n+;; inner: xor op xor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_xor_xor\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&r,0,1,r\")\n+        (xor:GPR (xor:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\") (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r,r,r\")) (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   xor %3,%1,%0\\;xor %3,%3,%2\n+   xor %0,%1,%0\\;xor %0,%0,%2\n+   xor %1,%1,%0\\;xor %1,%1,%2\n+   xor %4,%1,%0\\;xor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"%v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vand %3,%3,%2\n+   vand %0,%1,%0\\;vand %0,%0,%2\n+   vand %1,%1,%0\\;vand %1,%1,%2\n+   vand %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vand %3,%3,%2\n+   vandc %0,%1,%0\\;vand %0,%0,%2\n+   vandc %1,%1,%0\\;vand %1,%1,%2\n+   vandc %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vand %3,%3,%2\n+   veqv %0,%1,%0\\;vand %0,%0,%2\n+   veqv %1,%1,%0\\;vand %1,%1,%2\n+   veqv %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vand %3,%3,%2\n+   vnand %0,%1,%0\\;vand %0,%0,%2\n+   vnand %1,%1,%0\\;vand %1,%1,%2\n+   vnand %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vand %3,%3,%2\n+   vnor %0,%1,%0\\;vand %0,%0,%2\n+   vnor %1,%1,%0\\;vand %1,%1,%2\n+   vnor %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vand %3,%3,%2\n+   vor %0,%1,%0\\;vand %0,%0,%2\n+   vor %1,%1,%0\\;vand %1,%1,%2\n+   vor %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vand %3,%3,%2\n+   vorc %0,%1,%0\\;vand %0,%0,%2\n+   vorc %1,%1,%0\\;vand %1,%1,%2\n+   vorc %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: and op vand rtl and inv 0 comp 0\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vand %3,%3,%2\n+   vxor %0,%1,%0\\;vand %0,%0,%2\n+   vxor %1,%1,%0\\;vand %1,%1,%2\n+   vxor %4,%1,%0\\;vand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vandc %3,%3,%2\n+   vand %0,%1,%0\\;vandc %0,%0,%2\n+   vand %1,%1,%0\\;vandc %1,%1,%2\n+   vand %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vandc %3,%3,%2\n+   vandc %0,%1,%0\\;vandc %0,%0,%2\n+   vandc %1,%1,%0\\;vandc %1,%1,%2\n+   vandc %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vandc %3,%3,%2\n+   veqv %0,%1,%0\\;vandc %0,%0,%2\n+   veqv %1,%1,%0\\;vandc %1,%1,%2\n+   veqv %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vandc %3,%3,%2\n+   vnand %0,%1,%0\\;vandc %0,%0,%2\n+   vnand %1,%1,%0\\;vandc %1,%1,%2\n+   vnand %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vandc %3,%3,%2\n+   vnor %0,%1,%0\\;vandc %0,%0,%2\n+   vnor %1,%1,%0\\;vandc %1,%1,%2\n+   vnor %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vandc %3,%3,%2\n+   vor %0,%1,%0\\;vandc %0,%0,%2\n+   vor %1,%1,%0\\;vandc %1,%1,%2\n+   vor %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vandc %3,%3,%2\n+   vorc %0,%1,%0\\;vandc %0,%0,%2\n+   vorc %1,%1,%0\\;vandc %1,%1,%2\n+   vorc %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: andc op vandc rtl and inv 0 comp 1\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vandc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vandc %3,%3,%2\n+   vxor %0,%1,%0\\;vandc %0,%0,%2\n+   vxor %1,%1,%0\\;vandc %1,%1,%2\n+   vxor %4,%1,%0\\;vandc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;veqv %3,%3,%2\n+   vand %0,%1,%0\\;veqv %0,%0,%2\n+   vand %1,%1,%0\\;veqv %1,%1,%2\n+   vand %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;veqv %3,%3,%2\n+   vandc %0,%1,%0\\;veqv %0,%0,%2\n+   vandc %1,%1,%0\\;veqv %1,%1,%2\n+   vandc %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"%v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;veqv %3,%3,%2\n+   veqv %0,%1,%0\\;veqv %0,%0,%2\n+   veqv %1,%1,%0\\;veqv %1,%1,%2\n+   veqv %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;veqv %3,%3,%2\n+   vnand %0,%1,%0\\;veqv %0,%0,%2\n+   vnand %1,%1,%0\\;veqv %1,%1,%2\n+   vnand %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;veqv %3,%3,%2\n+   vnor %0,%1,%0\\;veqv %0,%0,%2\n+   vnor %1,%1,%0\\;veqv %1,%1,%2\n+   vnor %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;veqv %3,%3,%2\n+   vor %0,%1,%0\\;veqv %0,%0,%2\n+   vor %1,%1,%0\\;veqv %1,%1,%2\n+   vor %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;veqv %3,%3,%2\n+   vorc %0,%1,%0\\;veqv %0,%0,%2\n+   vorc %1,%1,%0\\;veqv %1,%1,%2\n+   vorc %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: eqv op veqv rtl xor inv 1 comp 0\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_veqv\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (not:VM (xor:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;veqv %3,%3,%2\n+   vxor %0,%1,%0\\;veqv %0,%0,%2\n+   vxor %1,%1,%0\\;veqv %1,%1,%2\n+   vxor %4,%1,%0\\;veqv %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vnand %3,%3,%2\n+   vand %0,%1,%0\\;vnand %0,%0,%2\n+   vand %1,%1,%0\\;vnand %1,%1,%2\n+   vand %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vnand %3,%3,%2\n+   vandc %0,%1,%0\\;vnand %0,%0,%2\n+   vandc %1,%1,%0\\;vnand %1,%1,%2\n+   vandc %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vnand %3,%3,%2\n+   veqv %0,%1,%0\\;vnand %0,%0,%2\n+   veqv %1,%1,%0\\;vnand %1,%1,%2\n+   veqv %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vnand %3,%3,%2\n+   vnand %0,%1,%0\\;vnand %0,%0,%2\n+   vnand %1,%1,%0\\;vnand %1,%1,%2\n+   vnand %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vnand %3,%3,%2\n+   vnor %0,%1,%0\\;vnand %0,%0,%2\n+   vnor %1,%1,%0\\;vnand %1,%1,%2\n+   vnor %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vnand %3,%3,%2\n+   vor %0,%1,%0\\;vnand %0,%0,%2\n+   vor %1,%1,%0\\;vnand %1,%1,%2\n+   vor %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vnand %3,%3,%2\n+   vorc %0,%1,%0\\;vnand %0,%0,%2\n+   vorc %1,%1,%0\\;vnand %1,%1,%2\n+   vorc %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nand op vnand rtl ior inv 0 comp 3\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vnand\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vnand %3,%3,%2\n+   vxor %0,%1,%0\\;vnand %0,%0,%2\n+   vxor %1,%1,%0\\;vnand %1,%1,%2\n+   vxor %4,%1,%0\\;vnand %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vnor %3,%3,%2\n+   vand %0,%1,%0\\;vnor %0,%0,%2\n+   vand %1,%1,%0\\;vnor %1,%1,%2\n+   vand %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vnor %3,%3,%2\n+   vandc %0,%1,%0\\;vnor %0,%0,%2\n+   vandc %1,%1,%0\\;vnor %1,%1,%2\n+   vandc %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vnor %3,%3,%2\n+   veqv %0,%1,%0\\;vnor %0,%0,%2\n+   veqv %1,%1,%0\\;vnor %1,%1,%2\n+   veqv %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vnor %3,%3,%2\n+   vnand %0,%1,%0\\;vnor %0,%0,%2\n+   vnand %1,%1,%0\\;vnor %1,%1,%2\n+   vnand %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vnor %3,%3,%2\n+   vnor %0,%1,%0\\;vnor %0,%0,%2\n+   vnor %1,%1,%0\\;vnor %1,%1,%2\n+   vnor %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vnor %3,%3,%2\n+   vor %0,%1,%0\\;vnor %0,%0,%2\n+   vor %1,%1,%0\\;vnor %1,%1,%2\n+   vor %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vnor %3,%3,%2\n+   vorc %0,%1,%0\\;vnor %0,%0,%2\n+   vorc %1,%1,%0\\;vnor %1,%1,%2\n+   vorc %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: nor op vnor rtl and inv 0 comp 3\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vnor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (and:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vnor %3,%3,%2\n+   vxor %0,%1,%0\\;vnor %0,%0,%2\n+   vxor %1,%1,%0\\;vnor %1,%1,%2\n+   vxor %4,%1,%0\\;vnor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vor %3,%3,%2\n+   vand %0,%1,%0\\;vor %0,%0,%2\n+   vand %1,%1,%0\\;vor %1,%1,%2\n+   vand %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vor %3,%3,%2\n+   vandc %0,%1,%0\\;vor %0,%0,%2\n+   vandc %1,%1,%0\\;vor %1,%1,%2\n+   vandc %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vor %3,%3,%2\n+   veqv %0,%1,%0\\;vor %0,%0,%2\n+   veqv %1,%1,%0\\;vor %1,%1,%2\n+   veqv %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vor %3,%3,%2\n+   vnand %0,%1,%0\\;vor %0,%0,%2\n+   vnand %1,%1,%0\\;vor %1,%1,%2\n+   vnand %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vor %3,%3,%2\n+   vnor %0,%1,%0\\;vor %0,%0,%2\n+   vnor %1,%1,%0\\;vor %1,%1,%2\n+   vnor %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"%v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vor %3,%3,%2\n+   vor %0,%1,%0\\;vor %0,%0,%2\n+   vor %1,%1,%0\\;vor %1,%1,%2\n+   vor %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vor %3,%3,%2\n+   vorc %0,%1,%0\\;vor %0,%0,%2\n+   vorc %1,%1,%0\\;vor %1,%1,%2\n+   vorc %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: or op vor rtl ior inv 0 comp 0\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vor %3,%3,%2\n+   vxor %0,%1,%0\\;vor %0,%0,%2\n+   vxor %1,%1,%0\\;vor %1,%1,%2\n+   vxor %4,%1,%0\\;vor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vorc %3,%3,%2\n+   vand %0,%1,%0\\;vorc %0,%0,%2\n+   vand %1,%1,%0\\;vorc %1,%1,%2\n+   vand %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vorc %3,%3,%2\n+   vandc %0,%1,%0\\;vorc %0,%0,%2\n+   vandc %1,%1,%0\\;vorc %1,%1,%2\n+   vandc %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vorc %3,%3,%2\n+   veqv %0,%1,%0\\;vorc %0,%0,%2\n+   veqv %1,%1,%0\\;vorc %1,%1,%2\n+   veqv %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vorc %3,%3,%2\n+   vnand %0,%1,%0\\;vorc %0,%0,%2\n+   vnand %1,%1,%0\\;vorc %1,%1,%2\n+   vnand %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vorc %3,%3,%2\n+   vnor %0,%1,%0\\;vorc %0,%0,%2\n+   vnor %1,%1,%0\\;vorc %1,%1,%2\n+   vnor %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vorc %3,%3,%2\n+   vor %0,%1,%0\\;vorc %0,%0,%2\n+   vor %1,%1,%0\\;vorc %1,%1,%2\n+   vor %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vorc %3,%3,%2\n+   vorc %0,%1,%0\\;vorc %0,%0,%2\n+   vorc %1,%1,%0\\;vorc %1,%1,%2\n+   vorc %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: orc op vorc rtl ior inv 0 comp 1\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vorc\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (ior:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\"))))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vorc %3,%3,%2\n+   vxor %0,%1,%0\\;vorc %0,%0,%2\n+   vxor %1,%1,%0\\;vorc %1,%1,%2\n+   vxor %4,%1,%0\\;vorc %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: and op vand rtl and inv 0 comp 0\n+(define_insn \"*fuse_vand_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (and:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vand %3,%1,%0\\;vxor %3,%3,%2\n+   vand %0,%1,%0\\;vxor %0,%0,%2\n+   vand %1,%1,%0\\;vxor %1,%1,%2\n+   vand %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: andc op vandc rtl and inv 0 comp 1\n+(define_insn \"*fuse_vandc_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vandc %3,%1,%0\\;vxor %3,%3,%2\n+   vandc %0,%1,%0\\;vxor %0,%0,%2\n+   vandc %1,%1,%0\\;vxor %1,%1,%2\n+   vandc %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: eqv op veqv rtl xor inv 1 comp 0\n+(define_insn \"*fuse_veqv_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (not:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   veqv %3,%1,%0\\;vxor %3,%3,%2\n+   veqv %0,%1,%0\\;vxor %0,%0,%2\n+   veqv %1,%1,%0\\;vxor %1,%1,%2\n+   veqv %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: nand op vnand rtl ior inv 0 comp 3\n+(define_insn \"*fuse_vnand_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnand %3,%1,%0\\;vxor %3,%3,%2\n+   vnand %0,%1,%0\\;vxor %0,%0,%2\n+   vnand %1,%1,%0\\;vxor %1,%1,%2\n+   vnand %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: nor op vnor rtl and inv 0 comp 3\n+(define_insn \"*fuse_vnor_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (and:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (not:VM (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\"))) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vnor %3,%1,%0\\;vxor %3,%3,%2\n+   vnor %0,%1,%0\\;vxor %0,%0,%2\n+   vnor %1,%1,%0\\;vxor %1,%1,%2\n+   vnor %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: or op vor rtl ior inv 0 comp 0\n+(define_insn \"*fuse_vor_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (ior:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vor %3,%1,%0\\;vxor %3,%3,%2\n+   vor %0,%1,%0\\;vxor %0,%0,%2\n+   vor %1,%1,%0\\;vxor %1,%1,%2\n+   vor %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: orc op vorc rtl ior inv 0 comp 1\n+(define_insn \"*fuse_vorc_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (ior:VM (not:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 1 \"altivec_register_operand\" \"v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vorc %3,%1,%0\\;vxor %3,%3,%2\n+   vorc %0,%1,%0\\;vxor %0,%0,%2\n+   vorc %1,%1,%0\\;vxor %1,%1,%2\n+   vorc %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: vector outer: xor op vxor rtl xor inv 0 comp 0\n+;; inner: xor op vxor rtl xor inv 0 comp 0\n+(define_insn \"*fuse_vxor_vxor\"\n+  [(set (match_operand:VM 3 \"altivec_register_operand\" \"=&v,0,1,v\")\n+        (xor:VM (xor:VM (match_operand:VM 0 \"altivec_register_operand\" \"v,v,v,v\") (match_operand:VM 1 \"altivec_register_operand\" \"%v,v,v,v\")) (match_operand:VM 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:VM 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   vxor %3,%1,%0\\;vxor %3,%3,%2\n+   vxor %0,%1,%0\\;vxor %0,%0,%2\n+   vxor %1,%1,%0\\;vxor %1,%1,%2\n+   vxor %4,%1,%0\\;vxor %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])"}, {"sha": "837af7ac123c66c210be1bcff532ba99a9dc366c", "filename": "gcc/config/rs6000/genfusion.pl", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl?ref=1242eb75b3d9d46ae3d035bff52e8889baf24223", "patch": "@@ -141,8 +141,101 @@ sub gen_ld_cmpi_p10\n   }\n }\n \n+sub gen_2logical\n+{\n+    my @logicals = ( \"and\", \"andc\", \"eqv\", \"nand\", \"nor\", \"or\", \"orc\", \"xor\" );\n+    my %complement = ( \"and\"=> 0, \"andc\"=> 1, \"eqv\"=> 0, \"nand\"=> 3,\n+\t\t       \"nor\"=> 3, \"or\"=> 0, \"orc\"=> 1, \"xor\"=> 0 );\n+    my %invert = ( \"and\"=> 0, \"andc\"=> 0, \"eqv\"=> 1, \"nand\"=> 0,\n+\t\t   \"nor\"=> 0, \"or\"=> 0, \"orc\"=> 0, \"xor\"=> 0 );\n+    my %commute2 = ( \"and\"=> 1, \"andc\"=> 0, \"eqv\"=> 1, \"nand\"=> 0,\n+\t\t     \"nor\"=> 0, \"or\"=> 1, \"orc\"=> 0, \"xor\"=> 1 );\n+    my %rtlop = ( \"and\"=>\"and\", \"andc\"=>\"and\", \"eqv\"=>\"xor\", \"nand\"=>\"ior\",\n+\t\t  \"nor\"=>\"and\", \"or\"=>\"ior\", \"orc\"=>\"ior\", \"xor\"=>\"xor\" );\n+\n+    my ($kind, $vchr, $mode, $pred, $constraint, $cr, $outer, $outer_op,\n+\t$outer_comp, $outer_inv, $outer_rtl, $inner, $inner_comp, $inner_inv,\n+\t$inner_rtl, $inner_op, $both_commute, $c4, $bc, $inner_arg0,\n+\t$inner_arg1, $inner_exp, $outer_arg2, $outer_exp, $insn);\n+  KIND: foreach $kind ('scalar','vector') {\n+      if ( $kind eq 'vector' ) {\n+\t  $vchr = \"v\";\n+\t  $mode = \"VM\";\n+\t  $pred = \"altivec_register_operand\";\n+\t  $constraint = \"v\";\n+      } else {\n+\t  $vchr = \"\";\n+\t  $mode = \"GPR\";\n+\t  $pred = \"gpc_reg_operand\";\n+\t  $constraint = \"r\";\n+      }\n+      $c4 = \"${constraint},${constraint},${constraint},${constraint}\";\n+    OUTER: foreach $outer ( @logicals ) {\n+\t$outer_op = \"${vchr}${outer}\";\n+\t$outer_comp = $complement{$outer};\n+\t$outer_inv = $invert{$outer};\n+\t$outer_rtl = $rtlop{$outer};\n+      INNER: foreach $inner ( @logicals ) {\n+\t  $inner_comp = $complement{$inner};\n+\t  $inner_inv = $invert{$inner};\n+\t  $inner_rtl = $rtlop{$inner};\n+\t  $inner_op = \"${vchr}${inner}\";\n+\t  # If both ops commute then we can specify % on operand 1\n+\t  # so the pattern will let operands 1 and 2 interchange.\n+\t  $both_commute = ($inner eq $outer) && ($commute2{$inner} == 1);\n+\t  $bc = \"\"; if ( $both_commute ) { $bc = \"%\"; }\n+\t  $inner_arg0 = \"(match_operand:${mode} 0 \\\"${pred}\\\" \\\"${c4}\\\")\";\n+\t  $inner_arg1 = \"(match_operand:${mode} 1 \\\"${pred}\\\" \\\"${bc}${c4}\\\")\";\n+\t  if ( ($inner_comp & 1) == 1 ) {\n+\t      $inner_arg0 = \"(not:${mode} $inner_arg0)\";\n+\t  }\n+\t  if ( ($inner_comp & 2) == 2 ) {\n+\t      $inner_arg1 = \"(not:${mode} $inner_arg1)\";\n+\t  }\n+\t  $inner_exp = \"(${inner_rtl}:${mode} ${inner_arg0} ${inner_arg1})\";\n+\t  if ( $inner_inv == 1 ) {\n+\t      $inner_exp = \"(not:${mode} $inner_exp)\";\n+\t  }\n+\t  $outer_arg2 = \"(match_operand:${mode} 2 \\\"${pred}\\\" \\\"${c4}\\\")\";\n+\t  if ( ($outer_comp & 1) == 1 ) {\n+\t      $outer_arg2 = \"(not:${mode} $outer_arg2)\";\n+\t  }\n+\t  if ( ($outer_comp & 2) == 2 ) {\n+\t      $inner_exp = \"(not:${mode} $inner_exp)\";\n+\t  }\n+\t  $outer_exp = \"(${outer_rtl}:${mode} ${inner_exp} ${outer_arg2})\";\n+\t  if ( $outer_inv == 1 ) {\n+\t      $outer_exp = \"(not:${mode} $outer_exp)\";\n+\t  }\n+\n+\t  $insn =  <<\"EOF\";\n+\n+;; logical-logical fusion pattern generated by gen_2logical\n+;; kind: $kind outer: $outer op $outer_op rtl $outer_rtl inv $outer_inv comp $outer_comp\n+;; inner: $inner op $inner_op rtl $inner_rtl inv $inner_inv comp $inner_comp\n+(define_insn \"*fuse_${inner_op}_${outer_op}\"\n+  [(set (match_operand:${mode} 3 \"${pred}\" \"=&${constraint},0,1,${constraint}\")\n+        ${outer_exp})\n+   (clobber (match_scratch:${mode} 4 \"=X,X,X,r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2LOGICAL)\"\n+  \"@\n+   ${inner_op} %3,%1,%0\\\\;${outer_op} %3,%3,%2\n+   ${inner_op} %0,%1,%0\\\\;${outer_op} %0,%0,%2\n+   ${inner_op} %1,%1,%0\\\\;${outer_op} %1,%1,%2\n+   ${inner_op} %4,%1,%0\\\\;${outer_op} %3,%4,%2\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+EOF\n+\n+\t  print $insn;\n+      }\n+    }\n+  }\n+}\n \n gen_ld_cmpi_p10();\n+gen_2logical();\n \n exit(0);\n "}, {"sha": "f0cf79e298213f2ea36c4e79005a5ff92d5cee8b", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=1242eb75b3d9d46ae3d035bff52e8889baf24223", "patch": "@@ -83,7 +83,8 @@\n \t\t\t\t | OPTION_MASK_POWER10\t\t\t\\\n \t\t\t\t | OTHER_POWER10_MASKS\t\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n-\t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI)\n+\t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -132,6 +133,7 @@\n \t\t\t\t | OPTION_MASK_POWER10\t\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\"}, {"sha": "ec068c58aa52444dd7f6d26227b4fee6d15ec54a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1242eb75b3d9d46ae3d035bff52e8889baf24223", "patch": "@@ -4440,6 +4440,9 @@ rs6000_option_override_internal (bool global_init_p)\n       (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_LD_CMPI) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_LD_CMPI;\n \n+  if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2LOGICAL) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2LOGICAL;\n+\n   /* Turn off vector pair/mma options on non-power10 systems.  */\n   else if (!TARGET_POWER10 && TARGET_MMA)\n     {"}, {"sha": "ae9e91e77cc383ccf0a2e9c48d73e2901a7adb9a", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1242eb75b3d9d46ae3d035bff52e8889baf24223/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=1242eb75b3d9d46ae3d035bff52e8889baf24223", "patch": "@@ -498,6 +498,10 @@ mpower10-fusion-ld-cmpi\n Target Undocumented Mask(P10_FUSION_LD_CMPI) Var(rs6000_isa_flags)\n Fuse certain integer operations together for better performance on power10.\n \n+mpower10-fusion-2logical\n+Target Undocumented Mask(P10_FUSION_2LOGICAL) Var(rs6000_isa_flags)\n+Fuse certain integer operations together for better performance on power10.\n+\n mcrypto\n Target Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions."}]}