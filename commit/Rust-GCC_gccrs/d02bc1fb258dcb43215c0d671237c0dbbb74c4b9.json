{"sha": "d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyYmMxZmIyNThkY2I0MzIxNWMwZDY3MTIzN2MwZGJiYjc0YzRiOQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-11-29T10:06:03Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-11-29T10:06:03Z"}, "message": "InflaterInputStream (read): Don't return -1 unless the infate() call didn't deliver any output.\n\n\t* java/util/zip/InflaterInputStream (read): Don't return -1 unless\n\tthe infate() call didn't deliver any output. Throw a ZipException if\n\tthe needsDictionary() call returns true.\n\t* java/io/ByteArrayInputStream (read): Remove redundant bounds checks.\n\t* java/io/InputStreamReader: Use the default buffer size for the\n\tcontained BufferedInputStream.\n\nFrom-SVN: r37846", "tree": {"sha": "2faa9e8f99525720284bd59f9288fb1d62c941dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2faa9e8f99525720284bd59f9288fb1d62c941dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/comments", "author": null, "committer": null, "parents": [{"sha": "172c38bb69afc32eae4f6f009d1c5edb506b6476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172c38bb69afc32eae4f6f009d1c5edb506b6476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172c38bb69afc32eae4f6f009d1c5edb506b6476"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "57c04e0ccf63222fc6213a35bfcc6d060dcca01e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "patch": "@@ -5,6 +5,13 @@\n \t* configure.in: Check for setlocale.\n \t* configure: Rebuilt.\n \t* include/config.h.in: Rebuilt.\n+\t\n+\t* java/util/zip/InflaterInputStream (read): Don't return -1 unless\n+\tthe infate() call didn't deliver any output. Throw a ZipException if\n+\tthe needsDictionary() call returns true.\n+\t* java/io/ByteArrayInputStream (read): Remove redundant bounds checks.\n+\t* java/io/InputStreamReader: Use the default buffer size for the\n+\tcontained BufferedInputStream.\n \n 2000-11-28  Warren Levy  <warrenl@cygnus.com>\n "}, {"sha": "30ba8d7f9da58829ad65b4fca2a4775ac860d307", "filename": "libjava/java/io/ByteArrayInputStream.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Fio%2FByteArrayInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Fio%2FByteArrayInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FByteArrayInputStream.java?ref=d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "patch": "@@ -72,20 +72,13 @@ public boolean markSupported()\n \n   public synchronized int read()\n   {\n-    if (pos < 0)\n-      throw new ArrayIndexOutOfBoundsException(pos);\n-\n     if (pos < count)\n       return ((int) buf[pos++]) & 0xFF;\n     return -1;\n   }\n \n   public synchronized int read(byte[] b, int off, int len)\n   {\n-    /* Don't need to check pos value, arraycopy will check it. */\n-    if (off < 0 || len < 0 || off + len > b.length)\n-      throw new ArrayIndexOutOfBoundsException();\n-\n     if (pos >= count)\n       return -1;\n "}, {"sha": "73876fbd69140f11ded5d2c3a08c7fa0c23e31fe", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "patch": "@@ -46,7 +46,7 @@ private InputStreamReader(InputStream in, BytesToUnicode decoder)\n   {\n     this.in = in instanceof BufferedInputStream\n               ? (BufferedInputStream) in\n-              : new BufferedInputStream(in, 250);\n+              : new BufferedInputStream(in);\n     /* Don't need to call super(in) here as long as the lock gets set. */\n     this.lock = in;\n     converter = decoder;"}, {"sha": "d7459eb100d092515c865edc91c78d49c3c0d667", "filename": "libjava/java/util/zip/InflaterInputStream.java", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02bc1fb258dcb43215c0d671237c0dbbb74c4b9/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java?ref=d02bc1fb258dcb43215c0d671237c0dbbb74c4b9", "patch": "@@ -44,8 +44,6 @@ public class InflaterInputStream extends FilterInputStream\n {\n   protected void fill () throws IOException\n   {\n-    if (inf == null)\n-      throw new IOException (\"stream closed\");\n     len = in.read(buf, 0, buf.length);\n     if (len != -1)\n       inf.setInput(buf, 0, len);\n@@ -85,18 +83,23 @@ public int read (byte[] buf, int off, int len) throws IOException\n       return -1;\n     if (inf.needsInput())\n       fill ();\n-    if (this.len == -1)\n-      return -1; // Couldn't get any more data to feed to the Inflater\n-    if (inf.needsDictionary())\n-      return -1;\n+    int count;\n     try\n       {\n-\treturn inf.inflate(buf, off, len);\n+\tcount = inf.inflate(buf, off, len);\t\n+\tif (count == 0)\n+\t  {\n+\t    if (len == -1)\n+\t      return -1; // Couldn't get any more data to feed to the Inflater\n+\t    if (inf.needsDictionary())\n+\t      throw new ZipException (\"Inflater needs Dictionary\");\n+\t  }\t      \n       }\n     catch (DataFormatException dfe)\n       {\n \tthrow new ZipException (dfe.getMessage());\n       }\n+    return count;\n   }\n \n   public void close () throws IOException"}]}