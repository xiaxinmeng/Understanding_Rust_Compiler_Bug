{"sha": "05beb8e72054de470b0dc011f65c6f27852a4e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViZWI4ZTcyMDU0ZGU0NzBiMGRjMDExZjY1YzZmMjc4NTJhNGUwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-10T15:12:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-10T15:12:54Z"}, "message": "type_traits (__is_function_helper): New, uses variadic templates.\n\n2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (__is_function_helper): New, uses\n\tvariadic templates.\n\t(is_function): Forward to the latter.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_function/is_function.cc: Add test.\n\nFrom-SVN: r123695", "tree": {"sha": "beda0edb41949bb0cc80e97d569db8ac5b50b969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beda0edb41949bb0cc80e97d569db8ac5b50b969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05beb8e72054de470b0dc011f65c6f27852a4e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05beb8e72054de470b0dc011f65c6f27852a4e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05beb8e72054de470b0dc011f65c6f27852a4e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05beb8e72054de470b0dc011f65c6f27852a4e0c/comments", "author": null, "committer": null, "parents": [{"sha": "0218c0120c16cb1e52d240737adf1ff9c45c6f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0218c0120c16cb1e52d240737adf1ff9c45c6f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0218c0120c16cb1e52d240737adf1ff9c45c6f52"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "c752c222fc2611d1997350a286bb9eee3148f322", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05beb8e72054de470b0dc011f65c6f27852a4e0c", "patch": "@@ -1,3 +1,11 @@\n+2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (__is_function_helper): New, uses\n+\tvariadic templates.\n+\t(is_function): Forward to the latter.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_function/is_function.cc: Add test.\n+\n 2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/28277 (partial: vstring bits)"}, {"sha": "8645427c63ac070fcbd0df42749606089b40f187", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=05beb8e72054de470b0dc011f65c6f27852a4e0c", "patch": "@@ -34,6 +34,8 @@\n #ifndef _TR1_TYPE_TRAITS\n #define _TR1_TYPE_TRAITS 1\n \n+#pragma GCC system_header\n+\n #include <bits/c++config.h>\n #include <tr1/type_traits_fwd.h>\n \n@@ -171,14 +173,22 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n     : public integral_constant<bool, __is_class(_Tp)>\n     { };\n \n+  template<typename>\n+    struct __is_function_helper\n+    : public false_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct __is_function_helper<_Res(_ArgTypes...)>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct __is_function_helper<_Res(_ArgTypes......)>\n+    : public true_type { };\n+\n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, !(is_void<_Tp>::value\n-\t\t\t\t       || is_scalar<_Tp>::value\n-\t\t\t\t       || is_array<_Tp>::value\t\t\t\t       \n-\t\t\t\t       || is_reference<_Tp>::value\n-\t\t\t\t       || is_union<_Tp>::value\n-\t\t\t\t       || is_class<_Tp>::value)>\n+    : public integral_constant<bool, (__is_function_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n     { };\n \n   /// @brief  composite type traits [4.5.2]."}, {"sha": "1ada9120b225788eb1f337101d2f739c8921e03d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/is_function.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05beb8e72054de470b0dc011f65c6f27852a4e0c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc?ref=05beb8e72054de470b0dc011f65c6f27852a4e0c", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +34,7 @@ void test01()\n   VERIFY( (test_category<is_function, int (int)>(true)) );\n   VERIFY( (test_category<is_function, ClassType (ClassType)>(true)) );\n   VERIFY( (test_category<is_function, float (int, float, int[], int&)>(true)) );\n+  VERIFY( (test_category<is_function, int (int, ...)>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_category<is_function, int&>(false)) );"}]}