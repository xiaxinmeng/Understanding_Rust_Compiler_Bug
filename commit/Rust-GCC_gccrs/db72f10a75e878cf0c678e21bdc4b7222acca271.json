{"sha": "db72f10a75e878cf0c678e21bdc4b7222acca271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3MmYxMGE3NWU4NzhjZjBjNjc4ZTIxYmRjNGI3MjIyYWNjYTI3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:39:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:39:08Z"}, "message": "[multiple changes]\n\n2011-08-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop): Code cleanup and refactoring.\n\tWhen a container is provided via a function call, generate a renaming\n\tof the function result. This avoids the creation of a transient scope\n\tand the premature finalization of the container.\n\t* exp_ch7.adb (Is_Container_Cursor): Removed.\n\t(Wrap_Transient_Declaration): Remove the supression of the finalization\n\tof the list controller when the declaration denotes a container cursor,\n\tit is not needed.\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* restrict.adb (Check_Formal_Restriction): only issue a warning if the\n\tnode is from source, instead of the original node being from source.\n\t* sem_aggr.adb\n\t(Resolve_Array_Aggregate): refine the check for a static expression, to\n\trecognize also static ranges\n\t* sem_ch3.adb, sem_ch3.ads (Analyze_Component_Declaration,\n\tArray_Type_Declaration): postpone the test for the type being a subtype\n\tmark after the type has been resolved, so that component-selection and\n\texpanded-name are discriminated.\n\t(Make_Index, Process_Range_Expr_In_Decl): add a parameter In_Iter_Schm\n\tto distinguish the case of an iteration scheme, so that an error is\n\tissed on a non-static range in SPARK except in an iteration scheme.\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): call Make_Index with\n\tIn_Iter_Schm = True.\n\t* sem_ch6.adb (Analyze_Subprogram_Specification): refine the check for\n\tuser-defined operators so that they are allowed in renaming\n\t* sem_ch8.adb\n\t(Find_Selected_Component): refine the check for prefixing of operators\n\tso that they are allowed in renaming. Move the checks for restrictions\n\ton selector name after analysis discriminated between\n\tcomponent-selection and expanded-name.\n\t* sem_res.adb (Resolve_Op_Concat_Arg): do not issue a warning on\n\tconcatenation argument of string type if it is static.\n\t* sem_util.adb, sem_util.ads\n\t(Check_Later_Vs_Basic_Declarations): add a new function\n\tIs_Later_Declarative_Item to decice which declarations are allowed as\n\tlater items, in the two different modes Ada 83 and SPARK. In the SPARK\n\tmode, add that renamings are considered as later items.\n\t(Enclosing_Package): new function to return the enclosing package\n\t(Enter_Name): correct the rule for homonyms in SPARK\n\t(Is_SPARK_Initialization_Expr): default to returning True on nodes not\n\tfrom source (result of expansion) to avoid issuing wrong warnings.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* errout.adb: On anything but an expression First_Node returns its\n\targument.\n\nFrom-SVN: r177152", "tree": {"sha": "bb14d06f938e48886c3a29d49cfcab4c8a831a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb14d06f938e48886c3a29d49cfcab4c8a831a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db72f10a75e878cf0c678e21bdc4b7222acca271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db72f10a75e878cf0c678e21bdc4b7222acca271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db72f10a75e878cf0c678e21bdc4b7222acca271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db72f10a75e878cf0c678e21bdc4b7222acca271/comments", "author": null, "committer": null, "parents": [{"sha": "23685ae6ecac53a9365195feaf56c986d7c2eae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23685ae6ecac53a9365195feaf56c986d7c2eae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23685ae6ecac53a9365195feaf56c986d7c2eae0"}], "stats": {"total": 668, "additions": 402, "deletions": 266}, "files": [{"sha": "854196c6398b82fe99befaef62ad5f547a29716c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -1,3 +1,54 @@\n+2011-08-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop): Code cleanup and refactoring.\n+\tWhen a container is provided via a function call, generate a renaming\n+\tof the function result. This avoids the creation of a transient scope\n+\tand the premature finalization of the container.\n+\t* exp_ch7.adb (Is_Container_Cursor): Removed.\n+\t(Wrap_Transient_Declaration): Remove the supression of the finalization\n+\tof the list controller when the declaration denotes a container cursor,\n+\tit is not needed.\n+\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* restrict.adb (Check_Formal_Restriction): only issue a warning if the\n+\tnode is from source, instead of the original node being from source.\n+\t* sem_aggr.adb\n+\t(Resolve_Array_Aggregate): refine the check for a static expression, to\n+\trecognize also static ranges\n+\t* sem_ch3.adb, sem_ch3.ads (Analyze_Component_Declaration,\n+\tArray_Type_Declaration): postpone the test for the type being a subtype\n+\tmark after the type has been resolved, so that component-selection and\n+\texpanded-name are discriminated.\n+\t(Make_Index, Process_Range_Expr_In_Decl): add a parameter In_Iter_Schm\n+\tto distinguish the case of an iteration scheme, so that an error is\n+\tissed on a non-static range in SPARK except in an iteration scheme.\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): call Make_Index with\n+\tIn_Iter_Schm = True.\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): refine the check for\n+\tuser-defined operators so that they are allowed in renaming\n+\t* sem_ch8.adb\n+\t(Find_Selected_Component): refine the check for prefixing of operators\n+\tso that they are allowed in renaming. Move the checks for restrictions\n+\ton selector name after analysis discriminated between\n+\tcomponent-selection and expanded-name.\n+\t* sem_res.adb (Resolve_Op_Concat_Arg): do not issue a warning on\n+\tconcatenation argument of string type if it is static.\n+\t* sem_util.adb, sem_util.ads\n+\t(Check_Later_Vs_Basic_Declarations): add a new function\n+\tIs_Later_Declarative_Item to decice which declarations are allowed as\n+\tlater items, in the two different modes Ada 83 and SPARK. In the SPARK\n+\tmode, add that renamings are considered as later items.\n+\t(Enclosing_Package): new function to return the enclosing package\n+\t(Enter_Name): correct the rule for homonyms in SPARK\n+\t(Is_SPARK_Initialization_Expr): default to returning True on nodes not\n+\tfrom source (result of expansion) to avoid issuing wrong warnings.\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* errout.adb: On anything but an expression First_Node returns its\n+\targument.\n+\n 2011-08-02  Pascal Obry  <obry@adacore.com>\n \n \t* prj-proc.adb, make.adb, makeutl.adb: Minor reformatting."}, {"sha": "06878e8ebb151e1e988cebff4ef32ee444720df6", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -1345,16 +1345,13 @@ package body Errout is\n    --  Start of processing for First_Node\n \n    begin\n-      if Nkind (C) in N_Unit_Body\n-        or else Nkind (C) in N_Proper_Body\n-      then\n-         return C;\n-\n-      else\n+      if Nkind (C) in N_Subexpr then\n          Earliest := Original_Node (C);\n          Eloc := Sloc (Earliest);\n          Search_Tree_First (Original_Node (C));\n          return Earliest;\n+      else\n+         return C;\n       end if;\n    end First_Node;\n "}, {"sha": "a7b73cda222b1a5722cb81e5b381f1c181b79290", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 132, "deletions": 102, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -2766,123 +2766,111 @@ package body Exp_Ch5 is\n    --------------------------\n \n    procedure Expand_Iterator_Loop (N : Node_Id) is\n-      Loc        : constant Source_Ptr := Sloc (N);\n-      Isc        : constant Node_Id    := Iteration_Scheme (N);\n-      I_Spec     : constant Node_Id    := Iterator_Specification (Isc);\n-      Id         : constant Entity_Id  := Defining_Identifier (I_Spec);\n-\n-      Container : constant Node_Id := Name (I_Spec);\n-      --  An expression whose type is an array or a predefined container\n+      Isc    : constant Node_Id    := Iteration_Scheme (N);\n+      I_Spec : constant Node_Id    := Iterator_Specification (Isc);\n+      Id     : constant Entity_Id  := Defining_Identifier (I_Spec);\n+      Loc    : constant Source_Ptr := Sloc (N);\n+      Stats  : constant List_Id    := Statements (N);\n \n-      Typ : constant Entity_Id  := Etype (Container);\n+      Container     : constant Node_Id   := Name (I_Spec);\n+      Container_Typ : constant Entity_Id := Etype (Container);\n \n       Cursor   : Entity_Id;\n       New_Loop : Node_Id;\n-      Stats    : List_Id;\n \n    begin\n-      if Is_Array_Type (Typ) then\n+      --  Processing for arrays\n+\n+      if Is_Array_Type (Container_Typ) then\n+\n+         --  for Element of Array loop\n+         --\n+         --  This case requires an internally generated cursor to iterate over\n+         --  the array.\n+\n          if Of_Present (I_Spec) then\n             Cursor := Make_Temporary (Loc, 'C');\n \n-            --  for Elem of Arr loop ...\n+            --  Generate:\n+            --    Element : Component_Type renames Container (Cursor);\n \n-            declare\n-               Decl : constant Node_Id :=\n-                        Make_Object_Renaming_Declaration (Loc,\n-                          Defining_Identifier => Id,\n-                          Subtype_Mark        =>\n-                            New_Occurrence_Of (Component_Type (Typ), Loc),\n-                          Name                =>\n-                            Make_Indexed_Component (Loc,\n-                              Prefix      => Relocate_Node (Container),\n-                              Expressions =>\n-                                New_List (New_Occurrence_Of (Cursor, Loc))));\n-            begin\n-               Stats := Statements (N);\n-               Prepend (Decl, Stats);\n+            Prepend_To (Stats,\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Id,\n+                Subtype_Mark =>\n+                  New_Reference_To (Component_Type (Container_Typ), Loc),\n+                Name =>\n+                  Make_Indexed_Component (Loc,\n+                    Prefix => Relocate_Node (Container),\n+                    Expressions => New_List (\n+                      New_Reference_To (Cursor, Loc)))));\n \n-               New_Loop :=\n-                 Make_Loop_Statement (Loc,\n-                   Iteration_Scheme =>\n-                     Make_Iteration_Scheme (Loc,\n-                       Loop_Parameter_Specification =>\n-                         Make_Loop_Parameter_Specification (Loc,\n-                           Defining_Identifier         => Cursor,\n-                           Discrete_Subtype_Definition =>\n-                              Make_Attribute_Reference (Loc,\n-                                Prefix         => Relocate_Node (Container),\n-                                Attribute_Name => Name_Range),\n-                           Reverse_Present => Reverse_Present (I_Spec))),\n-                   Statements       => Stats,\n-                   End_Label        => Empty);\n-            end;\n+         --  for Index in Array loop\n+         --\n+         --  This case utilizes the already given cursor name\n \n          else\n-            --  for Index in Array loop ...\n-\n-            --  The cursor (index into the array) is the source Id\n-\n             Cursor := Id;\n-            New_Loop :=\n-              Make_Loop_Statement (Loc,\n-                Iteration_Scheme =>\n-                  Make_Iteration_Scheme (Loc,\n-                    Loop_Parameter_Specification =>\n-                      Make_Loop_Parameter_Specification (Loc,\n-                        Defining_Identifier         => Cursor,\n-                        Discrete_Subtype_Definition =>\n-                           Make_Attribute_Reference (Loc,\n-                             Prefix         => Relocate_Node (Container),\n-                             Attribute_Name => Name_Range),\n-                        Reverse_Present => Reverse_Present (I_Spec))),\n-                Statements       => Statements (N),\n-                End_Label        => Empty);\n          end if;\n \n-      --  Iterators over containers\n+         --  Generate:\n+         --    for Cursor in [reverse] Container'Range loop\n+         --       Element : Component_Type renames Container (Cursor);\n+         --       --  for the \"of\" form\n+         --\n+         --       <original loop statements>\n+         --    end loop;\n+\n+         New_Loop :=\n+           Make_Loop_Statement (Loc,\n+             Iteration_Scheme =>\n+               Make_Iteration_Scheme (Loc,\n+                 Loop_Parameter_Specification =>\n+                   Make_Loop_Parameter_Specification (Loc,\n+                     Defining_Identifier => Cursor,\n+                       Discrete_Subtype_Definition =>\n+                         Make_Attribute_Reference (Loc,\n+                           Prefix => Relocate_Node (Container),\n+                           Attribute_Name => Name_Range),\n+                      Reverse_Present => Reverse_Present (I_Spec))),\n+              Statements => Stats,\n+              End_Label  => Empty);\n+\n+      --  Processing for containers\n \n       else\n          --  In both cases these require a cursor of the proper type\n \n-         --    Cursor : P.Cursor_Type := Container.First;\n-         --    while Cursor /= P.No_Element loop\n+         --    Cursor : Pack.Cursor := Container.First;\n+         --    while Cursor /= Pack.No_Element loop\n+         --       Obj : Pack.Element_Type renames Element (Cursor);\n+         --       --  for the \"of\" form\n \n-         --       Obj : P.Element_Type renames Element (Cursor);\n-         --       --  For the \"of\" form, the element name renames the element\n-         --       --  designated by the cursor.\n+         --       <original loop statements>\n \n-         --       Statements;\n-         --       P.Next (Cursor);\n+         --       Pack.Next (Cursor);\n          --    end loop;\n \n-         --  with the obvious replacements if \"reverse\" is specified.\n+         --  with the obvious replacements if \"reverse\" is specified. Pack is\n+         --  the name of the package which instantiates the container.\n \n          declare\n             Element_Type : constant Entity_Id := Etype (Id);\n-            Pack         : constant Entity_Id := Scope (Base_Type (Typ));\n+            Pack         : constant Entity_Id :=\n+                             Scope (Base_Type (Container_Typ));\n+            Cntr         : Node_Id;\n             Name_Init    : Name_Id;\n             Name_Step    : Name_Id;\n \n          begin\n-            Stats := Statements (N);\n+            --  The \"of\" case uses an internally generated cursor\n \n             if Of_Present (I_Spec) then\n                Cursor := Make_Temporary (Loc, 'C');\n             else\n                Cursor := Id;\n             end if;\n \n-            --  Must verify that the container has a reverse iterator ???\n-\n-            if Reverse_Present (I_Spec) then\n-               Name_Init := Name_Last;\n-               Name_Step := Name_Previous;\n-            else\n-               Name_Init := Name_First;\n-               Name_Step := Name_Next;\n-            end if;\n-\n             --  The code below only handles containers where Element is not a\n             --  primitive operation of the container. This excludes for now the\n             --  Hi-Lite formal containers. Generate:\n@@ -2893,33 +2881,52 @@ package body Exp_Ch5 is\n                Prepend_To (Stats,\n                  Make_Object_Renaming_Declaration (Loc,\n                    Defining_Identifier => Id,\n-                   Subtype_Mark        =>\n+                   Subtype_Mark =>\n                      New_Occurrence_Of (Element_Type, Loc),\n-                   Name                =>\n+                   Name =>\n                      Make_Indexed_Component (Loc,\n                        Prefix =>\n                          Make_Selected_Component (Loc,\n-                           Prefix        =>  New_Occurrence_Of (Pack, Loc),\n+                           Prefix =>\n+                             New_Occurrence_Of (Pack, Loc),\n                            Selector_Name =>\n                              Make_Identifier (Loc, Chars => Name_Element)),\n-                       Expressions =>\n-                         New_List (New_Occurrence_Of (Cursor, Loc)))));\n+                       Expressions => New_List (\n+                         New_Occurrence_Of (Cursor, Loc)))));\n+            end if;\n+\n+            --  Determine the advancement and initialization steps for the\n+            --  cursor.\n+\n+            --  Must verify that the container has a reverse iterator ???\n+\n+            if Reverse_Present (I_Spec) then\n+               Name_Init := Name_Last;\n+               Name_Step := Name_Previous;\n+            else\n+               Name_Init := Name_First;\n+               Name_Step := Name_Next;\n             end if;\n \n-            --  For both iterator forms, add call to step operation (Next or\n-            --  Previous) to advance cursor.\n+            --  For both iterator forms, add a call to the step operation to\n+            --  advance the cursor. Generate:\n+            --\n+            --    Pack.[Next | Prev] (Cursor);\n \n             Append_To (Stats,\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n                   Make_Selected_Component (Loc,\n-                    Prefix        => New_Occurrence_Of (Pack, Loc),\n-                    Selector_Name => Make_Identifier (Loc, Name_Step)),\n-                Parameter_Associations =>\n-                  New_List (New_Occurrence_Of (Cursor, Loc))));\n+                    Prefix =>\n+                      New_Occurrence_Of (Pack, Loc),\n+                    Selector_Name =>\n+                      Make_Identifier (Loc, Name_Step)),\n+\n+                Parameter_Associations => New_List (\n+                  New_Occurrence_Of (Cursor, Loc))));\n \n             --  Generate:\n-            --    while Cursor /= No_Element loop\n+            --    while Cursor /= Pack.No_Element loop\n             --       <Stats>\n             --    end loop;\n \n@@ -2940,30 +2947,53 @@ package body Exp_Ch5 is\n                 Statements => Stats,\n                 End_Label  => Empty);\n \n-            --  When the cursor is internally generated, associate it with the\n-            --  loop statement.\n+            Cntr := Relocate_Node (Container);\n \n-            if Of_Present (I_Spec) then\n-               Set_Ekind (Cursor, E_Variable);\n-               Set_Related_Expression (Cursor, New_Loop);\n+            --  When the container is provided by a function call, create an\n+            --  explicit renaming of the function result. Generate:\n+            --\n+            --    Cnn : Container_Typ renames Func_Call (...);\n+            --\n+            --  The renaming avoids the generation of a transient scope when\n+            --  initializing the cursor and the premature finalization of the\n+            --  container.\n+\n+            if Nkind (Cntr) = N_Function_Call then\n+               declare\n+                  Ren_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n+\n+               begin\n+                  Insert_Action (N,\n+                    Make_Object_Renaming_Declaration (Loc,\n+                      Defining_Identifier => Ren_Id,\n+                      Subtype_Mark =>\n+                        New_Reference_To (Container_Typ, Loc),\n+                      Name => Cntr));\n+\n+                  Cntr := New_Reference_To (Ren_Id, Loc);\n+               end;\n             end if;\n \n             --  Create the declaration of the cursor and insert it before the\n             --  source loop. Generate:\n             --\n-            --    C : Cursor_Type := Container.First;\n+            --    C : Pack.Cursor_Type := Container.[First | Last];\n \n             Insert_Action (N,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Cursor,\n-                Object_Definition   =>\n+                Object_Definition =>\n                   Make_Selected_Component (Loc,\n-                    Prefix        => New_Occurrence_Of (Pack, Loc),\n-                    Selector_Name => Make_Identifier (Loc, Name_Cursor)),\n+                    Prefix =>\n+                      New_Occurrence_Of (Pack, Loc),\n+                    Selector_Name =>\n+                      Make_Identifier (Loc, Name_Cursor)),\n+\n                 Expression =>\n                   Make_Selected_Component (Loc,\n-                    Prefix        => Relocate_Node (Container),\n-                    Selector_Name => Make_Identifier (Loc, Name_Init))));\n+                    Prefix => Cntr,\n+                    Selector_Name =>\n+                      Make_Identifier (Loc, Name_Init))));\n \n             --  If the range of iteration is given by a function call that\n             --  returns a container, the finalization actions have been saved"}, {"sha": "4d64b84b2a7314eb858dfa070f8c2b72d3342177", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -3427,36 +3427,6 @@ package body Exp_Ch7 is\n       S              : Entity_Id;\n       Uses_SS        : Boolean;\n \n-      function Is_Container_Cursor (Decl : Node_Id) return Boolean;\n-      --  Determine whether object declaration Decl is a cursor used to iterate\n-      --  over an Ada 2005/12 container.\n-\n-      -------------------------\n-      -- Is_Container_Cursor --\n-      -------------------------\n-\n-      function Is_Container_Cursor (Decl : Node_Id) return Boolean is\n-         Def_Id : constant Entity_Id := Defining_Identifier (Decl);\n-         Expr   : constant Node_Id   := Expression (Decl);\n-\n-      begin\n-         --  A cursor declaration appears in the following form:\n-         --\n-         --    Index : Pack.Cursor := First (...);\n-\n-         return\n-           Chars (Etype (Def_Id)) = Name_Cursor\n-             and then Present (Expr)\n-             and then Nkind (Expr) = N_Function_Call\n-             and then Chars (Name (Expr)) = Name_First\n-             and then\n-               (Nkind (Parent (Decl)) = N_Expression_With_Actions\n-                  or else\n-                Nkind (Related_Expression (Def_Id)) = N_Loop_Statement);\n-      end Is_Container_Cursor;\n-\n-   --  Start of processing for Wrap_Transient_Declaration\n-\n    begin\n       S := Current_Scope;\n       Enclosing_S := Scope (S);\n@@ -3534,27 +3504,6 @@ package body Exp_Ch7 is\n          then\n             null;\n \n-         --  The declaration of a container cursor is a special context where\n-         --  the finalization of the list controller needs to be supressed. In\n-         --  the following simplified example:\n-         --\n-         --    LC   : Simple_List_Controller;\n-         --    Temp : Ptr_Typ := Container_Creator_Function'Reference;\n-         --    Deep_Tag_Attach (Temp, LC);\n-         --    Obj  : Pack.Cursor := First (Temp.all);\n-         --    Finalize (LC);\n-         --    <execute the loop>\n-         --\n-         --  the finalization of the list controller destroys the contents of\n-         --  container Temp, and as a result Obj points to nothing. Note that\n-         --  Temp will be finalized by the finalization list of the enclosing\n-         --  scope.\n-\n-         elsif Ada_Version >= Ada_2012\n-           and then Is_Container_Cursor (N)\n-         then\n-            null;\n-\n          --  Finalize the list controller\n \n          else"}, {"sha": "08af7e688f91f1a3f826db119cfa6d42ce22a28b", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -117,24 +117,24 @@ package body Restrict is\n       Msg_Issued          : Boolean;\n       Save_Error_Msg_Sloc : Source_Ptr;\n    begin\n-      if Force or else Comes_From_Source (Original_Node (N)) then\n+      if Force or else Comes_From_Source (N) then\n \n          --  Since the call to Restriction_Msg from Check_Restriction may set\n          --  Error_Msg_Sloc to the location of the pragma restriction, save and\n          --  restore the previous value of the global variable around the call.\n \n          --  ??? N in call to Check_Restriction should be First_Node (N), but\n          --  this causes an exception to be raised when analyzing osint.adb.\n-         --  To be modified.\n+         --  To be modified together with the calls to Error_Msg_N.\n \n          Save_Error_Msg_Sloc := Error_Msg_Sloc;\n          Check_Restriction (Msg_Issued, SPARK, N);  --  N -> First_Node (N)\n          Error_Msg_Sloc := Save_Error_Msg_Sloc;\n \n          if Msg_Issued then\n-            Error_Msg_F (\"\\\\| \" & Msg, N);\n+            Error_Msg_N (\"\\\\| \" & Msg, N);  --  Error_Msg_N -> Error_Msg_F\n          elsif SPARK_Mode then\n-            Error_Msg_F (\"|~~\" & Msg, N);\n+            Error_Msg_N (\"|~~\" & Msg, N);  --  Error_Msg_N -> Error_Msg_F\n          end if;\n       end if;\n    end Check_Formal_Restriction;\n@@ -145,7 +145,7 @@ package body Restrict is\n    begin\n       pragma Assert (Msg2'Length /= 0 and then Msg2 (Msg2'First) = '\\');\n \n-      if Comes_From_Source (Original_Node (N)) then\n+      if Comes_From_Source (N) then\n \n          --  Since the call to Restriction_Msg from Check_Restriction may set\n          --  Error_Msg_Sloc to the location of the pragma restriction, save and"}, {"sha": "421d04c9f20788c125c4af7f7641fb6397c445de", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -1838,7 +1838,10 @@ package body Sem_Aggr is\n \n                      --  In SPARK or ALFA, the choice must be static\n \n-                     if not Is_Static_Expression (Choice) then\n+                     if not (Is_Static_Expression (Choice)\n+                              or else (Nkind (Choice) = N_Range\n+                                        and then Is_Static_Range (Choice)))\n+                     then\n                         Check_Formal_Restriction\n                           (\"choice should be static\", Choice);\n                      end if;"}, {"sha": "1884d03cb1076bdf1e74740b086957815acfe256", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -1782,13 +1782,13 @@ package body Sem_Ch3 is\n       Enter_Name (Id);\n \n       if Present (Typ) then\n+         T := Find_Type_Of_Object\n+                (Subtype_Indication (Component_Definition (N)), N);\n+\n          if not Nkind_In (Typ, N_Identifier, N_Expanded_Name) then\n             Check_Formal_Restriction (\"subtype mark required\", Typ);\n          end if;\n \n-         T := Find_Type_Of_Object\n-                (Subtype_Indication (Component_Definition (N)), N);\n-\n       --  Ada 2005 (AI-230): Access Definition case\n \n       else\n@@ -4597,12 +4597,12 @@ package body Sem_Ch3 is\n \n       Nb_Index := 1;\n       while Present (Index) loop\n+         Analyze (Index);\n+\n          if not Nkind_In (Index, N_Identifier, N_Expanded_Name) then\n             Check_Formal_Restriction (\"subtype mark required\", Index);\n          end if;\n \n-         Analyze (Index);\n-\n          --  Add a subtype declaration for each index of private array type\n          --  declaration whose etype is also private. For example:\n \n@@ -4672,12 +4672,12 @@ package body Sem_Ch3 is\n       --  Process subtype indication if one is present\n \n       if Present (Component_Typ) then\n+         Element_Type := Process_Subtype (Component_Typ, P, Related_Id, 'C');\n+\n          if not Nkind_In (Component_Typ, N_Identifier, N_Expanded_Name) then\n             Check_Formal_Restriction (\"subtype mark required\", Component_Typ);\n          end if;\n \n-         Element_Type := Process_Subtype (Component_Typ, P, Related_Id, 'C');\n-\n       --  Ada 2005 (AI-230): Access Definition case\n \n       else pragma Assert (Present (Access_Definition (Component_Def)));\n@@ -16140,7 +16140,8 @@ package body Sem_Ch3 is\n      (I            : Node_Id;\n       Related_Nod  : Node_Id;\n       Related_Id   : Entity_Id := Empty;\n-      Suffix_Index : Nat := 1)\n+      Suffix_Index : Nat := 1;\n+      In_Iter_Schm : Boolean := False)\n    is\n       R      : Node_Id;\n       T      : Entity_Id;\n@@ -16252,7 +16253,7 @@ package body Sem_Ch3 is\n          end if;\n \n          R := I;\n-         Process_Range_Expr_In_Decl (R, T);\n+         Process_Range_Expr_In_Decl (R, T, In_Iter_Schm => In_Iter_Schm);\n \n       elsif Nkind (I) = N_Subtype_Indication then\n \n@@ -16269,7 +16270,8 @@ package body Sem_Ch3 is\n          R := Range_Expression (Constraint (I));\n \n          Resolve (R, T);\n-         Process_Range_Expr_In_Decl (R, Entity (Subtype_Mark (I)));\n+         Process_Range_Expr_In_Decl\n+           (R, Entity (Subtype_Mark (I)), In_Iter_Schm => In_Iter_Schm);\n \n       elsif Nkind (I) = N_Attribute_Reference then\n \n@@ -17908,10 +17910,11 @@ package body Sem_Ch3 is\n    --------------------------------\n \n    procedure Process_Range_Expr_In_Decl\n-     (R           : Node_Id;\n-      T           : Entity_Id;\n-      Check_List  : List_Id := Empty_List;\n-      R_Check_Off : Boolean := False)\n+     (R            : Node_Id;\n+      T            : Entity_Id;\n+      Check_List   : List_Id := Empty_List;\n+      R_Check_Off  : Boolean := False;\n+      In_Iter_Schm : Boolean := False)\n    is\n       Lo, Hi      : Node_Id;\n       R_Checks    : Check_Result;\n@@ -17922,7 +17925,13 @@ package body Sem_Ch3 is\n       Analyze_And_Resolve (R, Base_Type (T));\n \n       if Nkind (R) = N_Range then\n-         if not Is_Static_Range (R) then\n+\n+         --  In SPARK/ALFA, all ranges should be static, with the exception of\n+         --  the discrete type definition of a loop parameter specification.\n+\n+         if not In_Iter_Schm\n+           and then not Is_Static_Range (R)\n+         then\n             Check_Formal_Restriction (\"range should be static\", R);\n          end if;\n "}, {"sha": "514cdf3f0f9b6fe30f1da616de714c5881e6591b", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -192,14 +192,17 @@ package Sem_Ch3 is\n      (I            : Node_Id;\n       Related_Nod  : Node_Id;\n       Related_Id   : Entity_Id := Empty;\n-      Suffix_Index : Nat := 1);\n+      Suffix_Index : Nat := 1;\n+      In_Iter_Schm : Boolean := False);\n    --  Process an index that is given in an array declaration, an entry\n    --  family declaration or a loop iteration. The index is given by an\n    --  index declaration (a 'box'), or by a discrete range. The later can\n    --  be the name of a discrete type, or a subtype indication.\n    --\n    --  Related_Nod is the node where the potential generated implicit types\n-   --  will be inserted. The 2 last parameters are used for creating the name.\n+   --  will be inserted. The next last parameters are used for creating the\n+   --  name. In_Iter_Schm is True if Make_Index is called on the discrete\n+   --  subtype definition in an iteration scheme.\n \n    procedure Make_Class_Wide_Type (T : Entity_Id);\n    --  A Class_Wide_Type is created for each tagged type definition. The\n@@ -251,10 +254,11 @@ package Sem_Ch3 is\n    --    Priv_T is the private view of the type whose full declaration is in N.\n \n    procedure Process_Range_Expr_In_Decl\n-     (R           : Node_Id;\n-      T           : Entity_Id;\n-      Check_List  : List_Id := Empty_List;\n-      R_Check_Off : Boolean := False);\n+     (R            : Node_Id;\n+      T            : Entity_Id;\n+      Check_List   : List_Id := Empty_List;\n+      R_Check_Off  : Boolean := False;\n+      In_Iter_Schm : Boolean := False);\n    --  Process a range expression that appears in a declaration context. The\n    --  range is analyzed and resolved with the base type of the given type, and\n    --  an appropriate check for expressions in non-static contexts made on the\n@@ -265,7 +269,8 @@ package Sem_Ch3 is\n    --  when the subprogram is called from Build_Record_Init_Proc and is used to\n    --  return a set of constraint checking statements generated by the Checks\n    --  package. R_Check_Off is set to True when the call to Range_Check is to\n-   --  be skipped.\n+   --  be skipped. In_Iter_Schm is True if Process_Range_Expr_In_Decl is called\n+   --  on the discrete subtype definition in an iteration scheme.\n \n    function Process_Subtype\n      (S           : Node_Id;"}, {"sha": "7dd2e89c799c995c441d1e6094da0212d5e1f2a1", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -2060,7 +2060,7 @@ package body Sem_Ch5 is\n \n                Check_Controlled_Array_Attribute (DS);\n \n-               Make_Index (DS, LP);\n+               Make_Index (DS, LP, In_Iter_Schm => True);\n \n                Set_Ekind (Id, E_Loop_Parameter);\n "}, {"sha": "186664673f295a97fcfa49c47b4ec889276f9c1c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -3073,9 +3073,12 @@ package body Sem_Ch6 is\n    --  Start of processing for Analyze_Subprogram_Specification\n \n    begin\n-      --  User-defined operator is not allowed in SPARK or ALFA\n+      --  User-defined operator is not allowed in SPARK or ALFA, except as\n+      --  a renaming.\n \n-      if Nkind (Defining_Unit_Name (N)) = N_Defining_Operator_Symbol then\n+      if Nkind (Defining_Unit_Name (N)) = N_Defining_Operator_Symbol\n+        and then Nkind (Parent (N)) /= N_Subprogram_Renaming_Declaration\n+      then\n          Check_Formal_Restriction (\"user-defined operator is not allowed\", N);\n       end if;\n "}, {"sha": "90da2a64aab161dd9087c4aa7ca28d3cd162e55f", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -5348,13 +5348,15 @@ package body Sem_Ch8 is\n       end if;\n \n       --  Selector name cannot be a character literal or an operator symbol in\n-      --  SPARK.\n+      --  SPARK, except for the operator symbol in a renaming.\n \n       if SPARK_Mode or else Restriction_Check_Required (SPARK) then\n          if Nkind (Selector_Name (N)) = N_Character_Literal then\n             Check_Formal_Restriction\n               (\"character literal cannot be prefixed\", N);\n-         elsif Nkind (Selector_Name (N)) = N_Operator_Symbol then\n+         elsif Nkind (Selector_Name (N)) = N_Operator_Symbol\n+           and then Nkind (Parent (N)) /= N_Subprogram_Renaming_Declaration\n+         then\n             Check_Formal_Restriction (\"operator symbol cannot be prefixed\", N);\n          end if;\n       end if;\n@@ -5485,18 +5487,6 @@ package body Sem_Ch8 is\n       elsif Is_Entity_Name (P) then\n          P_Name := Entity (P);\n \n-         --  Selector name is restricted in SPARK\n-\n-         if SPARK_Mode or else Restriction_Check_Required (SPARK) then\n-            if Is_Subprogram (P_Name) then\n-               Check_Formal_Restriction\n-                 (\"prefix of expanded name cannot be a subprogram\", P);\n-            elsif Ekind (P_Name) = E_Loop then\n-               Check_Formal_Restriction\n-                 (\"prefix of expanded name cannot be a loop statement\", P);\n-            end if;\n-         end if;\n-\n          --  The prefix may denote an enclosing type which is the completion\n          --  of an incomplete type declaration.\n \n@@ -5693,6 +5683,20 @@ package body Sem_Ch8 is\n             end if;\n          end if;\n \n+         --  Selector name is restricted in SPARK\n+\n+         if Nkind (N) = N_Expanded_Name\n+           and then (SPARK_Mode or else Restriction_Check_Required (SPARK))\n+         then\n+            if Is_Subprogram (P_Name) then\n+               Check_Formal_Restriction\n+                 (\"prefix of expanded name cannot be a subprogram\", P);\n+            elsif Ekind (P_Name) = E_Loop then\n+               Check_Formal_Restriction\n+                 (\"prefix of expanded name cannot be a loop statement\", P);\n+            end if;\n+         end if;\n+\n       else\n          --  If prefix is not the name of an entity, it must be an expression,\n          --  whose type is appropriate for a record. This is determined by"}, {"sha": "3f778c3a809b145d4820b293e68c0035d1adbf43", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -6786,6 +6786,8 @@ package body Sem_Res is\n          if Is_Array_Type (T)\n            and then Base_Type (T) /= Standard_String\n            and then Base_Type (Etype (L)) = Base_Type (Etype (R))\n+           and then Etype (L) /= Any_Composite  --  or else L in error\n+           and then Etype (R) /= Any_Composite  --  or else R in error\n            and then not Matching_Static_Array_Bounds (Etype (L), Etype (R))\n          then\n             Check_Formal_Restriction\n@@ -7322,17 +7324,21 @@ package body Sem_Res is\n       --  bounds. Of course the types have to match, so only check if operands\n       --  are compatible and the node itself has no errors.\n \n-      if Is_Array_Type (B_Typ)\n-        and then Nkind (N) in N_Binary_Op\n-        and then\n-          Base_Type (Etype (Left_Opnd (N)))\n-            = Base_Type (Etype (Right_Opnd (N)))\n-        and then not Matching_Static_Array_Bounds (Etype (Left_Opnd (N)),\n-                                                   Etype (Right_Opnd (N)))\n-      then\n-         Check_Formal_Restriction\n-           (\"array types should have matching static bounds\", N);\n-      end if;\n+      declare\n+         Left_Typ  : constant Node_Id := Etype (Left_Opnd (N));\n+         Right_Typ : constant Node_Id := Etype (Right_Opnd (N));\n+      begin\n+         if Is_Array_Type (B_Typ)\n+           and then Nkind (N) in N_Binary_Op\n+           and then Base_Type (Left_Typ) = Base_Type (Right_Typ)\n+           and then Left_Typ /= Any_Composite  --  or else Left_Opnd in error\n+           and then Right_Typ /= Any_Composite  --  or else Right_Opnd in error\n+           and then not Matching_Static_Array_Bounds (Left_Typ, Right_Typ)\n+         then\n+            Check_Formal_Restriction\n+              (\"array types should have matching static bounds\", N);\n+         end if;\n+      end;\n \n    end Resolve_Logical_Op;\n \n@@ -7702,9 +7708,9 @@ package body Sem_Res is\n          end if;\n \n       elsif Is_String_Type (Etype (Arg)) then\n-         if Nkind (Arg) /= N_String_Literal then\n+         if not Is_Static_Expression (Arg) then\n             Check_Formal_Restriction\n-              (\"string operand for concatenation should be a literal\", N);\n+              (\"string operand for concatenation should be static\", N);\n          end if;\n \n       --  Do not issue error on an operand that is neither a character nor a\n@@ -7984,6 +7990,7 @@ package body Sem_Res is\n \n       if Is_Array_Type (Target_Typ)\n         and then Is_Array_Type (Etype (Expr))\n+        and then Etype (Expr) /= Any_Composite  --  or else Expr in error\n         and then not Matching_Static_Array_Bounds (Target_Typ, Etype (Expr))\n       then\n          Check_Formal_Restriction\n@@ -9109,6 +9116,7 @@ package body Sem_Res is\n \n       if Is_Array_Type (Target_Typ)\n         and then Is_Array_Type (Operand_Typ)\n+        and then Operand_Typ /= Any_Composite  --  or else Operand in error\n         and then not Matching_Static_Array_Bounds (Target_Typ, Operand_Typ)\n       then\n          Check_Formal_Restriction"}, {"sha": "5239f5dd104efbef50111f5bf80cf101f6e53925", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 122, "deletions": 49, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -1111,6 +1111,45 @@ package body Sem_Util is\n    is\n       Body_Sloc : Source_Ptr;\n       Decl      : Node_Id;\n+\n+      function Is_Later_Declarative_Item (Decl : Node_Id) return Boolean;\n+      --  Return whether Decl is considered as a declarative item.\n+      --  When During_Parsing is True, the semantics of Ada 83 is followed.\n+      --  When During_Parsing is False, the semantics of SPARK is followed.\n+\n+      -------------------------------\n+      -- Is_Later_Declarative_Item --\n+      -------------------------------\n+\n+      function Is_Later_Declarative_Item (Decl : Node_Id) return Boolean is\n+      begin\n+         if Nkind (Decl) in N_Later_Decl_Item then\n+            return True;\n+\n+         elsif Nkind (Decl) = N_Pragma then\n+            return True;\n+\n+         elsif During_Parsing then\n+            return False;\n+\n+         --  In SPARK, a package declaration is not considered as a later\n+         --  declarative item.\n+\n+         elsif Nkind (Decl) = N_Package_Declaration then\n+            return False;\n+\n+         --  In SPARK, a renaming is considered as a later declarative item\n+\n+         elsif Nkind (Decl) in N_Renaming_Declaration then\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n+      end Is_Later_Declarative_Item;\n+\n+   --  Start of Check_Later_Vs_Basic_Declarations\n+\n    begin\n       Decl := First (Decls);\n \n@@ -1131,12 +1170,7 @@ package body Sem_Util is\n             Body_Sloc := Sloc (Decl);\n \n             Inner : while Present (Decl) loop\n-               if (Nkind (Decl) not in N_Later_Decl_Item\n-                    or else (not During_Parsing\n-                              and then\n-                                Nkind (Decl) = N_Package_Declaration))\n-                 and then Nkind (Decl) /= N_Pragma\n-               then\n+               if not Is_Later_Declarative_Item (Decl) then\n                   if During_Parsing then\n                      if Ada_Version = Ada_83 then\n                         Error_Msg_Sloc := Body_Sloc;\n@@ -2896,6 +2930,30 @@ package body Sem_Util is\n       return Current_Node;\n    end Enclosing_Lib_Unit_Node;\n \n+   -----------------------\n+   -- Enclosing_Package --\n+   -----------------------\n+\n+   function Enclosing_Package (E : Entity_Id) return Entity_Id is\n+      Dynamic_Scope : constant Entity_Id := Enclosing_Dynamic_Scope (E);\n+\n+   begin\n+      if Dynamic_Scope = Standard_Standard then\n+         return Standard_Standard;\n+\n+      elsif Dynamic_Scope = Empty then\n+         return Empty;\n+\n+      elsif Ekind_In (Dynamic_Scope, E_Package, E_Package_Body,\n+                      E_Generic_Package)\n+      then\n+         return Dynamic_Scope;\n+\n+      else\n+         return Enclosing_Package (Dynamic_Scope);\n+      end if;\n+   end Enclosing_Package;\n+\n    --------------------------\n    -- Enclosing_Subprogram --\n    --------------------------\n@@ -3260,38 +3318,51 @@ package body Sem_Util is\n       --  Declaring a homonym is not allowed in SPARK or ALFA ...\n \n       if Present (C)\n+        and then (Restriction_Check_Required (SPARK)\n+                   or else Formal_Verification_Mode)\n+      then\n \n-        --  ... unless the new declaration is in a subprogram, and the visible\n-        --  declaration is a variable declaration or a parameter specification\n-        --  outside that subprogram.\n+         declare\n+            Enclosing_Subp : constant Node_Id := Enclosing_Subprogram (Def_Id);\n+            Enclosing_Pack : constant Node_Id := Enclosing_Package (Def_Id);\n+            Other_Scope    : constant Node_Id := Enclosing_Dynamic_Scope (C);\n+         begin\n \n-        and then not\n-          (Nkind_In (Parent (Parent (Def_Id)), N_Subprogram_Body,\n-                                               N_Function_Specification,\n-                                               N_Procedure_Specification)\n-           and then\n-             Nkind_In (Parent (C), N_Object_Declaration,\n-                                   N_Parameter_Specification))\n+            --  ... unless the new declaration is in a subprogram, and the\n+            --  visible declaration is a variable declaration or a parameter\n+            --  specification outside that subprogram.\n \n-        --  ... or the new declaration is in a package, and the visible\n-        --  declaration occurs outside that package.\n+            if Present (Enclosing_Subp)\n+              and then Nkind_In (Parent (C), N_Object_Declaration,\n+                                 N_Parameter_Specification)\n+              and then not Scope_Within_Or_Same (Other_Scope, Enclosing_Subp)\n+            then\n+               null;\n \n-        and then not\n-          Nkind_In (Parent (Parent (Def_Id)), N_Package_Specification,\n-                                              N_Package_Body)\n+            --  ... or the new declaration is in a package, and the visible\n+            --  declaration occurs outside that package.\n \n-        --  ... or the new declaration is a component declaration in a record\n-        --  type definition.\n+            elsif Present (Enclosing_Pack)\n+              and then not Scope_Within_Or_Same (Other_Scope, Enclosing_Pack)\n+            then\n+               null;\n \n-        and then Nkind (Parent (Def_Id)) /= N_Component_Declaration\n+            --  ... or the new declaration is a component declaration in a\n+            --  record type definition.\n \n-        --  Don't issue error for non-source entities\n+            elsif Nkind (Parent (Def_Id)) = N_Component_Declaration then\n+               null;\n \n-        and then Comes_From_Source (Def_Id)\n-        and then Comes_From_Source (C)\n-      then\n-         Error_Msg_Sloc := Sloc (C);\n-         Check_Formal_Restriction (\"redeclaration of identifier &#\", Def_Id);\n+            --  Don't issue error for non-source entities\n+\n+            elsif Comes_From_Source (Def_Id)\n+              and then Comes_From_Source (C)\n+            then\n+               Error_Msg_Sloc := Sloc (C);\n+               Check_Formal_Restriction\n+                 (\"redeclaration of identifier &#\", Def_Id);\n+            end if;\n+         end;\n       end if;\n \n       --  Warn if new entity hides an old one\n@@ -7432,23 +7503,25 @@ package body Sem_Util is\n       Is_Ok     : Boolean;\n       Expr      : Node_Id;\n       Comp_Assn : Node_Id;\n-      Choice    : Node_Id;\n \n    begin\n       Is_Ok := True;\n \n+      if not Comes_From_Source (N) then\n+         goto Done;\n+      end if;\n+\n       pragma Assert (Nkind (N) in N_Subexpr);\n \n       case Nkind (N) is\n          when N_Character_Literal |\n               N_Integer_Literal   |\n               N_Real_Literal      |\n-              N_String_Literal    |\n-              N_Expanded_Name     |\n-              N_Membership_Test   =>\n+              N_String_Literal    =>\n             null;\n \n-         when N_Identifier =>\n+         when N_Identifier    |\n+              N_Expanded_Name =>\n             if Is_Entity_Name (N)\n               and then Present (Entity (N))  --  needed in some cases\n             then\n@@ -7459,7 +7532,11 @@ package body Sem_Util is\n                        E_Named_Real          =>\n                      null;\n                   when others =>\n-                     Is_Ok := False;\n+                     if Is_Type (Entity (N)) then\n+                        null;\n+                     else\n+                        Is_Ok := False;\n+                     end if;\n                end case;\n             end if;\n \n@@ -7470,7 +7547,9 @@ package body Sem_Util is\n          when N_Unary_Op =>\n             Is_Ok := Is_SPARK_Initialization_Expr (Right_Opnd (N));\n \n-         when N_Binary_Op | N_Short_Circuit =>\n+         when N_Binary_Op       |\n+              N_Short_Circuit   |\n+              N_Membership_Test =>\n             Is_Ok := Is_SPARK_Initialization_Expr (Left_Opnd (N))\n               and then Is_SPARK_Initialization_Expr (Right_Opnd (N));\n \n@@ -7492,18 +7571,6 @@ package body Sem_Util is\n \n             Comp_Assn := First (Component_Associations (N));\n             while Present (Comp_Assn) loop\n-               Choice := First (Choices (Comp_Assn));\n-               while Present (Choice) loop\n-                  if Nkind (Choice) in N_Subexpr\n-                    and then not Is_SPARK_Initialization_Expr (Choice)\n-                  then\n-                     Is_Ok := False;\n-                     goto Done;\n-                  end if;\n-\n-                  Next (Choice);\n-               end loop;\n-\n                Expr := Expression (Comp_Assn);\n                if Present (Expr)  --  needed for box association\n                  and then not Is_SPARK_Initialization_Expr (Expr)\n@@ -7530,6 +7597,12 @@ package body Sem_Util is\n                Next (Expr);\n             end loop;\n \n+         --  Selected components might be expanded named not yet resolved, so\n+         --  default on the safe side. (Eg on sparklex.ads)\n+\n+         when N_Selected_Component =>\n+            null;\n+\n          when others =>\n             Is_Ok := False;\n       end case;"}, {"sha": "aeb35571be1b4846489af1a39c08b599c884310f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72f10a75e878cf0c678e21bdc4b7222acca271/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=db72f10a75e878cf0c678e21bdc4b7222acca271", "patch": "@@ -339,6 +339,10 @@ package Sem_Util is\n    --  Returns the enclosing N_Compilation_Unit Node that is the root of a\n    --  subtree containing N.\n \n+   function Enclosing_Package (E : Entity_Id) return Entity_Id;\n+   --  Utility function to return the Ada entity of the package enclosing\n+   --  the entity E, if any. Returns Empty if no enclosing package.\n+\n    function Enclosing_Subprogram (E : Entity_Id) return Entity_Id;\n    --  Utility function to return the Ada entity of the subprogram enclosing\n    --  the entity E, if any. Returns Empty if no enclosing subprogram."}]}