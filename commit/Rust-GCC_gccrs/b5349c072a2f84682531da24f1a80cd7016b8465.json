{"sha": "b5349c072a2f84682531da24f1a80cd7016b8465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzNDljMDcyYTJmODQ2ODI1MzFkYTI0ZjFhODBjZDcwMTZiODQ2NQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-02T19:41:33Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-02T19:41:33Z"}, "message": "Locale.java (hashcode): Made transient.\n\n\t* java/util/Locale.java (hashcode): Made transient.\n\t(hashCode): No longer synchronized.\n\t(equals): Remove comment.\n\t(writeObject): No longer synchronized. Implement using writeObject\n\tcalls instead of tweaking hashCode field. Update doc.\n\t(readObject): Implement using readObject calls.\n\nFrom-SVN: r84027", "tree": {"sha": "1b7b95dcb4b0779b48561b82918429713d3eb34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7b95dcb4b0779b48561b82918429713d3eb34f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5349c072a2f84682531da24f1a80cd7016b8465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5349c072a2f84682531da24f1a80cd7016b8465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5349c072a2f84682531da24f1a80cd7016b8465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5349c072a2f84682531da24f1a80cd7016b8465/comments", "author": null, "committer": null, "parents": [{"sha": "bdee76844adbb5159029f0572d0fe0228c7b7b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdee76844adbb5159029f0572d0fe0228c7b7b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdee76844adbb5159029f0572d0fe0228c7b7b38"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "d99f402ccc0d2513fdec12fbc1e20e417ebd8edc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5349c072a2f84682531da24f1a80cd7016b8465/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5349c072a2f84682531da24f1a80cd7016b8465/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b5349c072a2f84682531da24f1a80cd7016b8465", "patch": "@@ -1,3 +1,12 @@\n+2004-07-02  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* java/util/Locale.java (hashcode): Made transient.\n+\t(hashCode): No longer synchronized.\n+\t(equals): Remove comment.\n+\t(writeObject): No longer synchronized. Implement using writeObject \n+\tcalls instead of tweaking hashCode field. Update doc.\n+\t(readObject): Implement using readObject calls.\n+\n 2004-06-26  Geoffrey Keating  <geoffk@apple.com>\n \t    Andreas Tobler  <a.tobler@schweiz.ch>\n "}, {"sha": "ca6334cb33497ffc46584544936a64e9e082bb34", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5349c072a2f84682531da24f1a80cd7016b8465/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5349c072a2f84682531da24f1a80cd7016b8465/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=b5349c072a2f84682531da24f1a80cd7016b8465", "patch": "@@ -186,7 +186,7 @@ public final class Locale implements Serializable, Cloneable\n    *\n    * @serial should be -1 in serial streams\n    */\n-  private int hashcode;\n+  private transient int hashcode;\n \n   /**\n    * The default locale. Except for during bootstrapping, this should never be\n@@ -709,10 +709,8 @@ public Object clone()\n    *\n    * @return the hashcode\n    */\n-  public synchronized int hashCode()\n+  public int hashCode()\n   {\n-    // This method is synchronized because writeObject() might reset\n-    // the hashcode.\n     return hashcode;\n   }\n \n@@ -731,10 +729,6 @@ public boolean equals(Object obj)\n       return false;\n     Locale l = (Locale) obj;\n \n-    // ??? We might also want to add:\n-    //        hashCode() == l.hashCode()\n-    // But this is a synchronized method.  Is the overhead worth it?\n-    // Measure this to make a decision.\n     return (language == l.language\n             && country == l.country\n             && variant == l.variant);\n@@ -745,17 +739,19 @@ public boolean equals(Object obj)\n    *\n    * @param output the stream to write to\n    * @throws IOException if the write fails\n-   * @serialData the hashcode should always be written as -1, and recomputed\n-   *      when reading it back\n+   * @serialData The first three fields are Strings representing language,\n+   *             country, and variant. The fourth field is a placeholder for \n+   *             the cached hashcode, but this is always written as -1, and \n+   *             recomputed when reading it back.\n    */\n-  private synchronized void writeObject(ObjectOutputStream output)\n+  private void writeObject(ObjectOutputStream s)\n     throws IOException\n   {\n-    // Synchronized so that hashCode() doesn't get wrong value.\n-    int tmpHashcode = hashcode;\n-    hashcode = -1;\n-    output.defaultWriteObject();\n-    hashcode = tmpHashcode;\n+    s.writeObject(language);\n+    s.writeObject(country);\n+    s.writeObject(variant);\n+    // Hashcode field is always written as -1.\n+    s.writeInt(-1);\n   }\n \n   /**\n@@ -766,10 +762,13 @@ private synchronized void writeObject(ObjectOutputStream output)\n    * @throws ClassNotFoundException if reading fails\n    * @serialData the hashCode is always invalid and must be recomputed\n    */\n-  private void readObject(ObjectInputStream input)\n+  private void readObject(ObjectInputStream s)\n     throws IOException, ClassNotFoundException\n   {\n-    input.defaultReadObject();\n+    language = (String) s.readObject();\n+    country = (String) s.readObject();\n+    variant = (String) s.readObject();    \n+    // Recompute hashcode.\n     hashcode = language.hashCode() ^ country.hashCode() ^ variant.hashCode();\n   }\n } // class Locale"}]}