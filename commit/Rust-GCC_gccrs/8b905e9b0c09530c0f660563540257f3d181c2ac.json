{"sha": "8b905e9b0c09530c0f660563540257f3d181c2ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5MDVlOWIwYzA5NTMwYzBmNjYwNTYzNTQwMjU3ZjNkMTgxYzJhYw==", "commit": {"author": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-12-09T04:16:24Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-12-09T04:16:24Z"}, "message": "Enable mask movement for VCOND_EXPR under avx512f for\n128/256-bit vector when integer mask is available.\n\nChangelog\ngcc/\n\tPR target/92686\n\t* config/i386/sse.md\n\t(*<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>,\n\t*<avx512>_cmp<mode>3<mask_scalar_merge_name>,\n\t*<avx512>_ucmp<mode>3<mask_scalar_merge_name>,\n\t*<avx512>_ucmp<mode>3<mask_scalar_merge_name>): New.\n\t* config/i386/i386.c (ix86_print_operand): New operand substitution.\n\t* config/i386/i386-expand.c (ix86_valid_mask_cmp_mode):\n\tNew function.\n\t(ix86_expand_sse_cmp): Relax condition for integer mask from\n\t512-bit vector to all 128/256/512-bit vector. Delete code gen\n\tfor avx512f compare patterns since we have generic pattern now.\n\t(ix86_expand_sse_movcc): Adjust condition and codegen for\n\tmaskcmp.\n\t(ix86_expand_int_sse_cmp): Don't canonicalize the comparison\n\twhen corresponding vector compare is available.\n\ngcc/testsuite/\n\t* gcc.target/i386/pr92686.inc: New file.\n\t* gcc.target/i386/avx512bw-pr92686-vpcmp-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr92686-vpcmp-intelasm-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-pr92686-vpcmp-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-vpcmp-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-pr92686-movcc-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-pr92686-movcc-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-movcc-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr92686-movcc-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr88547-1.c: Adjust testcase.\n\t* gcc.target/i386/pr88547-1.c: Ditto.\n\nFrom-SVN: r279107", "tree": {"sha": "3792b9fb246238db42a1f6451fe7302d4f35d402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3792b9fb246238db42a1f6451fe7302d4f35d402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b905e9b0c09530c0f660563540257f3d181c2ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b905e9b0c09530c0f660563540257f3d181c2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b905e9b0c09530c0f660563540257f3d181c2ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b905e9b0c09530c0f660563540257f3d181c2ac/comments", "author": null, "committer": null, "parents": [{"sha": "9135a6ffc5c878c3ee51242be919cab919e83646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9135a6ffc5c878c3ee51242be919cab919e83646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9135a6ffc5c878c3ee51242be919cab919e83646"}], "stats": {"total": 1590, "additions": 1462, "deletions": 128}, "files": [{"sha": "9155667222ad674d1af968e99a6d700c6a999122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -1,3 +1,22 @@\n+2019-12-09  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/92686\n+\t* config/i386/sse.md\n+\t(*<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>,\n+\t*<avx512>_cmp<mode>3<mask_scalar_merge_name>,\n+\t*<avx512>_ucmp<mode>3<mask_scalar_merge_name>,\n+\t*<avx512>_ucmp<mode>3<mask_scalar_merge_name>): New.\n+\t* config/i386/i386.c (ix86_print_operand): New operand substitution.\n+\t* config/i386/i386-expand.c (ix86_valid_mask_cmp_mode):\n+\tNew function.\n+\t(ix86_expand_sse_cmp): Relax condition for integer mask from\n+\t512-bit vector to all 128/256/512-bit vector. Delete code gen\n+\tfor avx512f compare patterns since we have generic pattern now.\n+\t(ix86_expand_sse_movcc): Adjust condition and codegen for\n+\tmaskcmp.\n+\t(ix86_expand_int_sse_cmp): Don't canonicalize the comparison\n+\twhen corresponding vector compare is available.\n+\n 2019-12-08  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tRevert:"}, {"sha": "ff3c24cc5b72b10d20ef53765029a679770659b3", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 55, "deletions": 110, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -3422,6 +3422,29 @@ ix86_expand_sse_fp_minmax (rtx dest, enum rtx_code code, rtx cmp_op0,\n   return true;\n }\n \n+/* Return true if MODE is valid for vector compare to mask register,\n+   Same result for conditionl vector move with mask register.  */\n+static bool\n+ix86_valid_mask_cmp_mode (machine_mode mode)\n+{\n+  /* XOP has its own vector conditional movement.  */\n+  if (TARGET_XOP)\n+    return false;\n+\n+  /* AVX512F is needed for mask operation.  */\n+  if (!(TARGET_AVX512F && VECTOR_MODE_P (mode)))\n+    return false;\n+\n+  /* AVX512BW is needed for vector QI/HImode,\n+     AVX512VL is needed for 128/256-bit vector.  */\n+  machine_mode inner_mode = GET_MODE_INNER (mode);\n+  int vector_size = GET_MODE_SIZE (mode);\n+  if ((inner_mode == QImode || inner_mode == HImode) && !TARGET_AVX512BW)\n+    return false;\n+\n+  return vector_size == 64 || TARGET_AVX512VL;\n+}\n+\n /* Expand an SSE comparison.  Return the register with the result.  */\n \n static rtx\n@@ -3438,11 +3461,11 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n   bool maskcmp = false;\n   rtx x;\n \n-  if (GET_MODE_SIZE (cmp_ops_mode) == 64)\n+  if (ix86_valid_mask_cmp_mode (cmp_ops_mode))\n     {\n       unsigned int nbits = GET_MODE_NUNITS (cmp_ops_mode);\n-      cmp_mode = int_mode_for_size (nbits, 0).require ();\n       maskcmp = true;\n+      cmp_mode = nbits > 8 ? int_mode_for_size (nbits, 0).require () : E_QImode;\n     }\n   else\n     cmp_mode = cmp_ops_mode;\n@@ -3461,37 +3484,6 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n       || (op_false && reg_overlap_mentioned_p (dest, op_false)))\n     dest = gen_reg_rtx (maskcmp ? cmp_mode : mode);\n \n-  /* Compare patterns for int modes are unspec in AVX512F only.  */\n-  if (maskcmp && (code == GT || code == EQ))\n-    {\n-      rtx (*gen)(rtx, rtx, rtx);\n-\n-      switch (cmp_ops_mode)\n-\t{\n-\tcase E_V64QImode:\n-\t  gcc_assert (TARGET_AVX512BW);\n-\t  gen = code == GT ? gen_avx512bw_gtv64qi3 : gen_avx512bw_eqv64qi3_1;\n-\t  break;\n-\tcase E_V32HImode:\n-\t  gcc_assert (TARGET_AVX512BW);\n-\t  gen = code == GT ? gen_avx512bw_gtv32hi3 : gen_avx512bw_eqv32hi3_1;\n-\t  break;\n-\tcase E_V16SImode:\n-\t  gen = code == GT ? gen_avx512f_gtv16si3 : gen_avx512f_eqv16si3_1;\n-\t  break;\n-\tcase E_V8DImode:\n-\t  gen = code == GT ? gen_avx512f_gtv8di3 : gen_avx512f_eqv8di3_1;\n-\t  break;\n-\tdefault:\n-\t  gen = NULL;\n-\t}\n-\n-      if (gen)\n-\t{\n-\t  emit_insn (gen (dest, cmp_op0, cmp_op1));\n-\t  return dest;\n-\t}\n-    }\n   x = gen_rtx_fmt_ee (code, cmp_mode, cmp_op0, cmp_op1);\n \n   if (cmp_mode != mode && !maskcmp)\n@@ -3515,7 +3507,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n   machine_mode cmpmode = GET_MODE (cmp);\n \n   /* In AVX512F the result of comparison is an integer mask.  */\n-  bool maskcmp = (mode != cmpmode && TARGET_AVX512F);\n+  bool maskcmp = mode != cmpmode && ix86_valid_mask_cmp_mode (mode);\n \n   rtx t2, t3, x;\n \n@@ -3529,85 +3521,34 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \n   if (maskcmp)\n     {\n-      rtx (*gen) (rtx, rtx) = NULL;\n-      if ((op_true == CONST0_RTX (mode)\n-\t   && vector_all_ones_operand (op_false, mode))\n-\t  || (op_false == CONST0_RTX (mode)\n-\t      && vector_all_ones_operand (op_true, mode)))\n-\tswitch (mode)\n-\t  {\n-\t  case E_V64QImode:\n-\t    if (TARGET_AVX512BW)\n-\t      gen = gen_avx512bw_cvtmask2bv64qi;\n-\t    break;\n-\t  case E_V32QImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\t      gen = gen_avx512vl_cvtmask2bv32qi;\n-\t    break;\n-\t  case E_V16QImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\t      gen = gen_avx512vl_cvtmask2bv16qi;\n-\t    break;\n-\t  case E_V32HImode:\n-\t    if (TARGET_AVX512BW)\n-\t      gen = gen_avx512bw_cvtmask2wv32hi;\n-\t    break;\n-\t  case E_V16HImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\t      gen = gen_avx512vl_cvtmask2wv16hi;\n-\t    break;\n-\t  case E_V8HImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\t      gen = gen_avx512vl_cvtmask2wv8hi;\n-\t    break;\n-\t  case E_V16SImode:\n-\t    if (TARGET_AVX512DQ)\n-\t      gen = gen_avx512f_cvtmask2dv16si;\n-\t    break;\n-\t  case E_V8SImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512DQ)\n-\t      gen = gen_avx512vl_cvtmask2dv8si;\n-\t    break;\n-\t  case E_V4SImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512DQ)\n-\t      gen = gen_avx512vl_cvtmask2dv4si;\n-\t    break;\n-\t  case E_V8DImode:\n-\t    if (TARGET_AVX512DQ)\n-\t      gen = gen_avx512f_cvtmask2qv8di;\n-\t    break;\n-\t  case E_V4DImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512DQ)\n-\t      gen = gen_avx512vl_cvtmask2qv4di;\n-\t    break;\n-\t  case E_V2DImode:\n-\t    if (TARGET_AVX512VL && TARGET_AVX512DQ)\n-\t      gen = gen_avx512vl_cvtmask2qv2di;\n-\t    break;\n-\t  default:\n-\t    break;\n-\t  }\n-      if (gen && SCALAR_INT_MODE_P (cmpmode))\n-\t{\n-\t  cmp = force_reg (cmpmode, cmp);\n-\t  if (op_true == CONST0_RTX (mode))\n+      /* Using vector move with mask register.  */\n+      cmp = force_reg (cmpmode, cmp);\n+      /* Optimize for mask zero.  */\n+      op_true = (op_true != CONST0_RTX (mode)\n+\t\t ? force_reg (mode, op_true) : op_true);\n+      op_false = (op_false != CONST0_RTX (mode)\n+\t\t  ? force_reg (mode, op_false) : op_false);\n+      if (op_true == CONST0_RTX (mode))\n+\t{\n+\t  rtx (*gen_not) (rtx, rtx);\n+\t  switch (cmpmode)\n \t    {\n-\t      rtx (*gen_not) (rtx, rtx);\n-\t      switch (cmpmode)\n-\t\t{\n-\t\tcase E_QImode: gen_not = gen_knotqi; break;\n-\t\tcase E_HImode: gen_not = gen_knothi; break;\n-\t\tcase E_SImode: gen_not = gen_knotsi; break;\n-\t\tcase E_DImode: gen_not = gen_knotdi; break;\n-\t\tdefault: gcc_unreachable ();\n-\t\t}\n-\t      rtx n = gen_reg_rtx (cmpmode);\n-\t      emit_insn (gen_not (n, cmp));\n-\t      cmp = n;\n+\t    case E_QImode: gen_not = gen_knotqi; break;\n+\t    case E_HImode: gen_not = gen_knothi; break;\n+\t    case E_SImode: gen_not = gen_knotsi; break;\n+\t    case E_DImode: gen_not = gen_knotdi; break;\n+\t    default: gcc_unreachable ();\n \t    }\n-\t  emit_insn (gen (dest, cmp));\n-\t  return;\n+\t  rtx n = gen_reg_rtx (cmpmode);\n+\t  emit_insn (gen_not (n, cmp));\n+\t  cmp = n;\n+\t  /* Reverse op_true op_false.  */\n+\t  std::swap (op_true, op_false);\n \t}\n+\n+      rtx vec_merge = gen_rtx_VEC_MERGE (mode, op_true, op_false, cmp);\n+      emit_insn (gen_rtx_SET (dest, vec_merge));\n+      return;\n     }\n   else if (vector_all_ones_operand (op_true, mode)\n \t   && op_false == CONST0_RTX (mode))\n@@ -4068,6 +4009,10 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n       && (mode == V16QImode || mode == V8HImode\n \t  || mode == V4SImode || mode == V2DImode))\n     ;\n+  /* AVX512F supports all of the comparsions\n+     on all 128/256/512-bit vector int types.  */\n+  else if (ix86_valid_mask_cmp_mode (mode))\n+    ;\n   else\n     {\n       /* Canonicalize the comparison to EQ, GT, GTU.  */"}, {"sha": "99d60bc9813dd207f6e41748670b9dcc9989ac2d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -12468,6 +12468,40 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \t  return;\n \n+\tcase 'I':\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n+\t    putc ('$', file);\n+\t  switch (GET_CODE (x))\n+\t    {\n+\t    case EQ:\n+\t      putc ('0', file);\n+\t      break;\n+\t    case NE:\n+\t      putc ('4', file);\n+\t      break;\n+\t    case GE:\n+\t    case GEU:\n+\t      putc ('5', file);\n+\t      break;\n+\t    case GT:\n+\t    case GTU:\n+\t      putc ('6', file);\n+\t      break;\n+\t    case LE:\n+\t    case LEU:\n+\t      putc ('2', file);\n+\t      break;\n+\t    case LT:\n+\t    case LTU:\n+\t      putc ('1', file);\n+\t      break;\n+\t    default:\n+\t      output_operand_lossage (\"operand is not a condition code, \"\n+\t\t\t\t      \"invalid operand code 'I'\");\n+\t      return;\n+\t    }\n+\t  return;\n+\n \tcase 'Y':\n \t  switch (GET_CODE (x))\n \t    {"}, {"sha": "bbceb8b83ad0822a28b69e4a5144daf9145b6b87", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -3050,6 +3050,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_int_operator\"\n+\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")]))]\n+  \"TARGET_AVX512F && <round_saeonly_mode512bit_condition>\"\n+  \"vpcmp<ssemodesuffix>\\t{%I3, <round_saeonly_mask_scalar_merge_op4>%2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2<round_saeonly_mask_scalar_merge_op4>, %I3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3064,6 +3076,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_int_operator\"\n+\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n+  \"TARGET_AVX512BW\"\n+  \"vpcmp<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3078,6 +3102,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_uns_operator\"\n+\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n+  \"TARGET_AVX512BW\"\n+  \"vpcmpu<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3092,6 +3128,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_uns_operator\"\n+\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n+  \"TARGET_AVX512F\"\n+  \"vpcmpu<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_vmcmp<mode>3<round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>"}, {"sha": "c6094cc3913f084c80082e14c116450316d39ed8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -1,3 +1,19 @@\n+2019-12-09  Hongtao Liu  <hongtao@intel.com>\n+\n+\t* gcc.target/i386/pr92686.inc: New file.\n+\t* gcc.target/i386/avx512bw-pr92686-vpcmp-1.c: New test.\n+\t* gcc.target/i386/avx512bw-pr92686-vpcmp-intelasm-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-pr92686-vpcmp-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-pr92686-movcc-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-pr92686-movcc-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-movcc-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-movcc-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr88547-1.c: Adjust testcase.\n+\t* gcc.target/i386/pr88547-1.c: Ditto.\n+\n 2019-12-08  Andrew Pinski  <apinski@marvell.com>\n \n \t* gcc.c-torture/execute/bswap-3.c: New test."}, {"sha": "2a89077ed03a6b1150b4c1f11a30a81577ac7390", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr92686-movcc-1.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,133 @@\n+/* PR target/92686 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512bw -mno-avx512dq -mno-avx512vl -mno-xop -mprefer-vector-width=512\" } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]8\\[^\\{\\n\\]*%zmm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]16\\[^\\{\\n\\]*%zmm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]32\\[^\\{\\n\\]*%zmm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]64\\[^\\{\\n\\]*%zmm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+\n+__attribute__((noipa)) void\n+f1 (char *__restrict dst, char *__restrict src1, char *__restrict src2)\n+{\n+  for (int i = 0; i != 64; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2 (unsigned char *__restrict dst, unsigned char *__restrict src1,\n+    unsigned char *__restrict src2)\n+{\n+  for (int i = 0; i != 64; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f3 (char *__restrict dst, char *__restrict src1, char *__restrict src2)\n+{\n+  for (int i = 0; i != 64; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f4 (unsigned char *__restrict dst, unsigned char *__restrict src1,\n+    unsigned char *__restrict src2)\n+{\n+  for (int i = 0; i != 64; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f5 (short *__restrict dst, short *__restrict src1, short *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f6 (unsigned short *__restrict dst, unsigned short *__restrict src1,\n+    unsigned short *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f7 (short *__restrict dst, short *__restrict src1, short *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f8 (unsigned short *__restrict dst, unsigned short *__restrict src1,\n+    unsigned short *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f9 (int *__restrict dst, int *__restrict src1, int *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f10 (unsigned int *__restrict dst, unsigned int *__restrict src1,\n+     unsigned int *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f11 (int *__restrict dst, int *__restrict src1, int *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f12 (unsigned int *__restrict dst, unsigned int *__restrict src1,\n+     unsigned int *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f13 (long long int *__restrict dst, long long int *__restrict src1,\n+     long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f14 (unsigned long long int *__restrict dst,\n+     unsigned long long int *__restrict src1,\n+     unsigned long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f15 (long long int *__restrict dst, long long int *__restrict src1,\n+     long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f16 (unsigned long long int *__restrict dst,\n+     unsigned long long int *__restrict src1,\n+     unsigned long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}"}, {"sha": "53a7da1232910ba4a8ffecddc5b71ccf38603400", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr92686-movcc-2.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-movcc-2.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-Ofast -mavx512bw -mavx512vl -mprefer-vector-width=256\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512bw_test\n+#endif\n+\n+#include \"avx512bw-pr92686-movcc-1.c\"\n+#include \"pr92686.inc\"\n+\n+#define NUM 512\n+\n+\n+#define TEST_SIGNED(vtype, type, N, fn, fn2, op)\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type dst[NUM], src1[NUM], src2[NUM];\t\t\t\\\n+    int i, j,  sign = 1;\t\t\t\t\t\\\n+    type res[N];\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1[i] = i * i * sign;\t\t\t\t\t\\\n+\tsrc2[i] = (i + 20) * sign;\t\t\t\t\\\n+\tdst[i] = i * i * i + 100;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  res[j] = dst[i + j];\t\t\t\t\t\\\n+\tfn (&dst[i], &src1[i], &src2[i]);\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    res[j] = fn2 (res[j], src1[i + j],\t\t\t\\\n+\t\t\t  src2[i+ j], op);\t\t\t\\\n+\t    if (res[j] != dst[i+ j])\t\t\t\t\\\n+\t      abort();\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, fn2, op)\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type dst[NUM], src1[NUM], src2[NUM];\t\t\t\\\n+    int i,j;\t\t\t\t\t\t\t\\\n+    type res[N];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1[i] = i * i;\t\t\t\t\t\\\n+\tsrc2[i] = i + 20;\t\t\t\t\t\\\n+\tdst[i] = i * i * i + 100;\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  res[j] = dst[i + j];\t\t\t\t\t\\\n+\tfn (&dst[i], &src1[i], &src2[i]);\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    res[j] = fn2 (res[j], src1[i + j],\t\t\t\\\n+\t\t\t  src2[i + j], op);\t\t\t\\\n+\t    if (res[j] != dst[i + j])\t\t\t\t\\\n+\t      abort();\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v64qi, signed char, 64, f1, cmpb, 5);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f2, cmpub, 5);\n+  TEST_SIGNED (v64qi, signed char, 64, f3, cmpb, 2);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f4, cmpub, 2);\n+  TEST_SIGNED (v32hi, short int, 32, f5, cmpw, 5);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f6, cmpuw, 5);\n+  TEST_SIGNED (v32hi, short int, 32, f7, cmpw, 2);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f8, cmpuw, 2);\n+  TEST_SIGNED (v16si, int, 16, f9, cmpd, 5);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f10, cmpud, 5);\n+  TEST_SIGNED (v16si, int, 16, f11, cmpd, 2);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f12, cmpud, 2);\n+  TEST_SIGNED (v8di, long long int, 8, f13, cmpq, 5);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f14, cmpuq, 5);\n+  TEST_SIGNED (v8di, long long int, 8, f15, cmpq, 2);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f16, cmpuq, 2);\n+}"}, {"sha": "4fd3b369d0f45a70c77abeb6670f6438e9e8dba6", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr92686-vpcmp-1.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,112 @@\n+/* PR target/92686 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mno-avx512dq -mno-avx512vl -mno-xop\" } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpmovm2\\[bw\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpternlog\\[dq\\]\\[\\t ]\" 8 } } */\n+\n+typedef char v64qi __attribute__((vector_size(64)));\n+typedef unsigned char v64uqi __attribute__((vector_size(64)));\n+typedef short v32hi __attribute__((vector_size(64)));\n+typedef unsigned short v32uhi __attribute__((vector_size(64)));\n+typedef int v16si __attribute__((vector_size(64)));\n+typedef unsigned v16usi __attribute__((vector_size(64)));\n+typedef long long v8di __attribute__((vector_size(64)));\n+typedef unsigned long long v8udi __attribute__((vector_size(64)));\n+\n+__attribute__((noipa)) v64qi\n+f1 (v64qi x, v64qi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v64uqi\n+f2 (v64uqi x, v64uqi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v64qi\n+f3 (v64qi x, v64qi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v64uqi\n+f4 (v64uqi x, v64uqi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32hi\n+f5 (v32hi x, v32hi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32uhi\n+f6 (v32uhi x, v32uhi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32hi\n+f7 (v32hi x, v32hi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32uhi\n+f8 (v32uhi x, v32uhi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16si\n+f9 (v16si x, v16si y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16usi\n+f10 (v16usi x, v16usi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16si\n+f11 (v16si x, v16si y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16usi\n+f12 (v16usi x, v16usi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8di\n+f13 (v8di x, v8di y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8udi\n+f14 (v8udi x, v8udi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8di\n+f15 (v8di x, v8di y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8udi\n+f16 (v8udi x, v8udi y)\n+{\n+  return x <= y;\n+}"}, {"sha": "0ea5b56eccf295bfc3f3c7213db367354e86955c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr92686-vpcmp-2.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-2.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512bw_test\n+#endif\n+\n+#include \"avx512bw-pr92686-vpcmp-1.c\"\n+\n+#define NUM 512\n+\n+#define TEST_SIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i, sign = 1;\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n+\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i;\t\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n+\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v64qi, signed char, 64, f1, >=);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f2, >=);\n+  TEST_SIGNED (v64qi, signed char, 64, f3, <=);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f4, <=);\n+  TEST_SIGNED (v32hi, short int, 32, f5, >=);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f6, >=);\n+  TEST_SIGNED (v32hi, short int, 32, f7, <=);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f8, <=);\n+  TEST_SIGNED (v16si, int, 16, f9, >=);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f10, >=);\n+  TEST_SIGNED (v16si, int, 16, f11, <=);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f12, <=);\n+  TEST_SIGNED (v8di, long long int, 8, f13, >=);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f14, >=);\n+  TEST_SIGNED (v8di, long long int, 8, f15, <=);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f16, <=);\n+}"}, {"sha": "23c785ce9da4272665707b88c59e81ac948c682e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr92686-vpcmp-intelasm-1.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-intelasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-intelasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr92686-vpcmp-intelasm-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,110 @@\n+/* PR target/92686 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mavx512bw -mno-avx512dq -mno-avx512vl -mno-xop -masm=intel\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+\n+typedef char v64qi __attribute__((vector_size(64)));\n+typedef unsigned char v64uqi __attribute__((vector_size(64)));\n+typedef short v32hi __attribute__((vector_size(64)));\n+typedef unsigned short v32uhi __attribute__((vector_size(64)));\n+typedef int v16si __attribute__((vector_size(64)));\n+typedef unsigned v16usi __attribute__((vector_size(64)));\n+typedef long long v8di __attribute__((vector_size(64)));\n+typedef unsigned long long v8udi __attribute__((vector_size(64)));\n+\n+__attribute__((noipa)) v64qi\n+f1 (v64qi x, v64qi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v64uqi\n+f2 (v64uqi x, v64uqi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v64qi\n+f3 (v64qi x, v64qi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v64uqi\n+f4 (v64uqi x, v64uqi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32hi\n+f5 (v32hi x, v32hi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32uhi\n+f6 (v32uhi x, v32uhi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32hi\n+f7 (v32hi x, v32hi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32uhi\n+f8 (v32uhi x, v32uhi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16si\n+f9 (v16si x, v16si y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16usi\n+f10 (v16usi x, v16usi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16si\n+f11 (v16si x, v16si y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16usi\n+f12 (v16usi x, v16usi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8di\n+f13 (v8di x, v8di y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8udi\n+f14 (v8udi x, v8udi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8di\n+f15 (v8di x, v8di y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8udi\n+f16 (v8udi x, v8udi y)\n+{\n+  return x <= y;\n+}"}, {"sha": "a3ffeca4354434b258ef662fb90b785c7c8cc959", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr88547-1.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -6,9 +6,7 @@\n /* { dg-final { scan-assembler-times \"vpminsb\\[\\t ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpminuw\\[\\t ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpminsw\\[\\t ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminud\\[\\t ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminsd\\[\\t ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminuq\\[\\t ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminsq\\[\\t ]\" 2 } } */\n-\n+/* { dg-final { scan-assembler-times \"vpcmp\\[dq\\]\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[dq\\]\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpternlog\\[qd\\]\\[\\t ]\" 8 } } */\n #include \"avx2-pr88547-1.c\""}, {"sha": "1b9644a37902dc9f6133904b9a07f463c44c513d", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-movcc-1.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,133 @@\n+/* PR target/92686 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512bw -mavx512vl -mno-xop -mprefer-vector-width=256\" } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]8\\[^\\{\\n\\]*%ymm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]16\\[^\\{\\n\\]*%ymm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]32\\[^\\{\\n\\]*%ymm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]64\\[^\\{\\n\\]*%ymm0+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\" 4 } } */\n+\n+__attribute__((noipa)) void\n+f1 (char *__restrict dst, char *__restrict src1, char *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2 (unsigned char *__restrict dst, unsigned char *__restrict src1,\n+    unsigned char *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f3 (char *__restrict dst, char *__restrict src1, char *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f4 (unsigned char *__restrict dst, unsigned char *__restrict src1,\n+    unsigned char *__restrict src2)\n+{\n+  for (int i = 0; i != 32; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f5 (short *__restrict dst, short *__restrict src1, short *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f6 (unsigned short *__restrict dst, unsigned short *__restrict src1,\n+    unsigned short *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f7 (short *__restrict dst, short *__restrict src1, short *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f8 (unsigned short *__restrict dst, unsigned short *__restrict src1,\n+    unsigned short *__restrict src2)\n+{\n+  for (int i = 0; i != 16; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f9 (int *__restrict dst, int *__restrict src1, int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f10 (unsigned int *__restrict dst, unsigned int *__restrict src1,\n+     unsigned int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f11 (int *__restrict dst, int *__restrict src1, int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f12 (unsigned int *__restrict dst, unsigned int *__restrict src1,\n+     unsigned int *__restrict src2)\n+{\n+  for (int i = 0; i != 8; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f13 (long long int *__restrict dst, long long int *__restrict src1,\n+     long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 4; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f14 (unsigned long long int *__restrict dst,\n+     unsigned long long int *__restrict src1,\n+     unsigned long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 4; i++)\n+    dst[i] = src1[i] >= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f15 (long long int *__restrict dst, long long int *__restrict src1,\n+     long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 4; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}\n+\n+__attribute__((noipa)) void\n+f16 (unsigned long long int *__restrict dst,\n+     unsigned long long int *__restrict src1,\n+     unsigned long long int *__restrict src2)\n+{\n+  for (int i = 0; i != 4; i++)\n+    dst[i] = src1[i] <= src2[i] ? src1[i] : dst[i];\n+}"}, {"sha": "5f5562b98f1f4b898b2b29a87f236b0dc5a2ef44", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-movcc-2.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-movcc-2.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-Ofast -mavx512bw -mavx512vl -mprefer-vector-width=256\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512vl_test\n+#endif\n+\n+#include \"avx512vl-pr92686-movcc-1.c\"\n+#include \"pr92686.inc\"\n+\n+#define NUM 256\n+\n+\n+#define TEST_SIGNED(vtype, type, N, fn, fn2, op)\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type dst[NUM], src1[NUM], src2[NUM];\t\t\t\\\n+    int i, j,  sign = 1;\t\t\t\t\t\\\n+    type res[N];\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1[i] = i * i * sign;\t\t\t\t\t\\\n+\tsrc2[i] = (i + 20) * sign;\t\t\t\t\\\n+\tdst[i] = i * i * i + 100;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  res[j] = dst[i + j];\t\t\t\t\t\\\n+\tfn (&dst[i], &src1[i], &src2[i]);\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    res[j] = fn2 (res[j], src1[i + j],\t\t\t\\\n+\t\t\t  src2[i+ j], op);\t\t\t\\\n+\t    if (res[j] != dst[i+ j])\t\t\t\t\\\n+\t      abort();\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, fn2, op)\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type dst[NUM], src1[NUM], src2[NUM];\t\t\t\\\n+    int i,j;\t\t\t\t\t\t\t\\\n+    type res[N];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1[i] = i * i;\t\t\t\t\t\\\n+\tsrc2[i] = i + 20;\t\t\t\t\t\\\n+\tdst[i] = i * i * i + 100;\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  res[j] = dst[i + j];\t\t\t\t\t\\\n+\tfn (&dst[i], &src1[i], &src2[i]);\t\t\t\\\n+\tfor (j = 0; j < N; j++)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    res[j] = fn2 (res[j], src1[i + j],\t\t\t\\\n+\t\t\t  src2[i + j], op);\t\t\t\\\n+\t    if (res[j] != dst[i + j])\t\t\t\t\\\n+\t      abort();\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v32qi, signed char, 32, f1, cmpb, 5);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f2, cmpub, 5);\n+  TEST_SIGNED (v32qi, signed char, 32, f3, cmpb, 2);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f4, cmpub, 2);\n+  TEST_SIGNED (v16hi, short int, 16, f5, cmpw, 5);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f6, cmpuw, 5);\n+  TEST_SIGNED (v16hi, short int, 16, f7, cmpw, 2);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f8, cmpuw, 2);\n+  TEST_SIGNED (v8si, int, 8, f9, cmpd, 5);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f10, cmpud, 5);\n+  TEST_SIGNED (v8si, int, 8, f11, cmpd, 2);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f12, cmpud, 2);\n+  TEST_SIGNED (v4di, long long int, 4, f13, cmpq, 5);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f14, cmpuq, 5);\n+  TEST_SIGNED (v4di, long long int, 4, f15, cmpq, 2);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f16, cmpuq, 2);\n+}"}, {"sha": "5b79d4d36f912927ad87a8e2e63a755b5ad11fa1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-1.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,112 @@\n+/* PR target/88547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mno-avx512dq -mno-xop\" } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpmovm2\\[bw\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpternlog\\[dq\\]\\[\\t ]\" 8 } } */\n+\n+typedef signed char v32qi __attribute__((vector_size(32)));\n+typedef unsigned char v32uqi __attribute__((vector_size(32)));\n+typedef short v16hi __attribute__((vector_size(32)));\n+typedef unsigned short v16uhi __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+typedef unsigned v8usi __attribute__((vector_size(32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+typedef unsigned long long v4udi __attribute__((vector_size(32)));\n+\n+__attribute__((noipa)) v32qi\n+f1 (v32qi x, v32qi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f2 (v32uqi x, v32uqi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32qi\n+f3 (v32qi x, v32qi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f4 (v32uqi x, v32uqi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f5 (v16hi x, v16hi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f6 (v16uhi x, v16uhi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f7 (v16hi x, v16hi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f8 (v16uhi x, v16uhi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f9 (v8si x, v8si y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f10 (v8usi x, v8usi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f11 (v8si x, v8si y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f12 (v8usi x, v8usi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f13 (v4di x, v4di y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f14 (v4udi x, v4udi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f15 (v4di x, v4di y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f16 (v4udi x, v4udi y)\n+{\n+  return x <= y;\n+}"}, {"sha": "6be24ff30f401d86b7f8e291b3c01ef7f08ba006", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-2.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-2.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512vl_test\n+#endif\n+\n+#include \"avx512vl-pr92686-vpcmp-1.c\"\n+\n+#define NUM 256\n+\n+#define TEST_SIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i, sign = 1;\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n+\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i;\t\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n+\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v32qi, signed char, 32, f1, >=);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f2, >=);\n+  TEST_SIGNED (v32qi, signed char, 32, f3, <=);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f4, <=);\n+  TEST_SIGNED (v16hi, short int, 16, f5, >=);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f6, >=);\n+  TEST_SIGNED (v16hi, short int, 16, f7, <=);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f8, <=);\n+  TEST_SIGNED (v8si, int, 8, f9, >=);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f10, >=);\n+  TEST_SIGNED (v8si, int, 8, f11, <=);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f12, <=);\n+  TEST_SIGNED (v4di, long long int, 4, f13, >=);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f14, >=);\n+  TEST_SIGNED (v4di, long long int, 4, f15, <=);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f16, <=);\n+}"}, {"sha": "c9a1b69003576ec4e8fd24ed9ecd42471417ec94", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr92686-vpcmp-intelasm-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,110 @@\n+/* PR target/88547 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mno-avx512dq -mno-xop -masm=intel\" } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+typedef signed char v32qi __attribute__((vector_size(32)));\n+typedef unsigned char v32uqi __attribute__((vector_size(32)));\n+typedef short v16hi __attribute__((vector_size(32)));\n+typedef unsigned short v16uhi __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+typedef unsigned v8usi __attribute__((vector_size(32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+typedef unsigned long long v4udi __attribute__((vector_size(32)));\n+\n+__attribute__((noipa)) v32qi\n+f1 (v32qi x, v32qi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f2 (v32uqi x, v32uqi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32qi\n+f3 (v32qi x, v32qi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f4 (v32uqi x, v32uqi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f5 (v16hi x, v16hi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f6 (v16uhi x, v16uhi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f7 (v16hi x, v16hi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f8 (v16uhi x, v16uhi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f9 (v8si x, v8si y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f10 (v8usi x, v8usi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f11 (v8si x, v8si y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f12 (v8usi x, v8usi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f13 (v4di x, v4di y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f14 (v4udi x, v4udi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f15 (v4di x, v4di y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f16 (v4udi x, v4udi y)\n+{\n+  return x <= y;\n+}"}, {"sha": "fa6832c7fab7a0210ea59724ec9a2e0fe3a383d6", "filename": "gcc/testsuite/gcc.target/i386/pr88547-1.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -1,19 +1,9 @@\n /* PR target/88547 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512dq\" } */\n-/* { dg-final { scan-assembler-not \"vpternlog\" } } */\n-/* { dg-final { scan-assembler-times \"vpmovm2b\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vpmovm2w\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vpmovm2d\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vpmovm2q\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"knotb\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"knotw\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"knotd\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"knotq\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminud\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpminuq\\[\\t  ]\" 2 } } */\n-/* { dg-final { scan-assembler-not \"vpsubd\\[\\t  ]\" } } */\n-/* { dg-final { scan-assembler-not \"vpsubq\\[\\t  ]\" } } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpmovm2\\[bwdq\\]\\[\\t ]\" 16 } } */\n \n typedef signed char v64qi __attribute__((vector_size(64)));\n typedef unsigned char v64uqi __attribute__((vector_size(64)));"}, {"sha": "260581ed63b32dbe81cdb37dc279af6618f4f64a", "filename": "gcc/testsuite/gcc.target/i386/pr92686.inc", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92686.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b905e9b0c09530c0f660563540257f3d181c2ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92686.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92686.inc?ref=8b905e9b0c09530c0f660563540257f3d181c2ac", "patch": "@@ -0,0 +1,189 @@\n+/* Include by avx512bw-pr92686-movcc-2.c, avx512vl-pr92686-movcc-2.c  */\n+__attribute__((noipa)) char\n+cmpb (char dst, char src1, char src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) unsigned char\n+cmpub (unsigned char dst, unsigned char src1,\n+\t\t       unsigned char src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) short\n+cmpw (short dst, short src1, short src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) unsigned short\n+cmpuw (unsigned short dst, unsigned short src1,\n+\t\t       unsigned short src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) int\n+cmpd (int dst, int src1, int src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) unsigned int\n+cmpud (unsigned int dst, unsigned int src1,\n+\t\t       unsigned int src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) long long int\n+cmpq (long long int dst, long long int src1,\n+\t\t       long long int src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}\n+\n+__attribute__((noipa)) unsigned long long int\n+cmpuq (unsigned long long int dst, unsigned long long int src1,\n+       unsigned long long int src2, int num)\n+{\n+  switch(num)\n+    {\n+    case 0:\n+      return src1 == src2 ? src1 : dst;\n+    case 1:\n+      return src1 < src2 ? src1 : dst;\n+    case 2:\n+      return src1 <= src2 ? src1 : dst;\n+    case 4:\n+      return src1 != src2 ? src1 : dst;\n+    case 5:\n+      return src1 >= src2 ? src1 : dst;\n+    case 6:\n+      return src1 > src2 ? src1 : dst;\n+    default:\n+      abort();\n+    }\n+  abort();\n+}"}]}