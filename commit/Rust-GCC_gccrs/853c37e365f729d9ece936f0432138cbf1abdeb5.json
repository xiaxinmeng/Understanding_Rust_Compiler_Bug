{"sha": "853c37e365f729d9ece936f0432138cbf1abdeb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzYzM3ZTM2NWY3MjlkOWVjZTkzNmYwNDMyMTM4Y2JmMWFiZGViNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-14T00:51:30Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-14T00:51:30Z"}, "message": "i386.md (SImode logical compare): Avoid outputing non-pariable testw and testl on Pentium.\n\n        * i386.md (SImode logical compare): Avoid outputing non-pariable testw\n        and testl on Pentium.\n        (register and memory bit tests): Likewise.\n        (setcc, normal and reversed conditional branches): Use shorter\n        sequence for testing flags stored in EAX.\n\nFrom-SVN: r26437", "tree": {"sha": "23e6b4d6bb9ef244bd07fa477eef1495c042f98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e6b4d6bb9ef244bd07fa477eef1495c042f98f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853c37e365f729d9ece936f0432138cbf1abdeb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853c37e365f729d9ece936f0432138cbf1abdeb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853c37e365f729d9ece936f0432138cbf1abdeb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853c37e365f729d9ece936f0432138cbf1abdeb5/comments", "author": null, "committer": null, "parents": [{"sha": "251f0fb86341a03db3eaf9e325b795c145fc7507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251f0fb86341a03db3eaf9e325b795c145fc7507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251f0fb86341a03db3eaf9e325b795c145fc7507"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "aa61163fd154aecdcf3c6881e8360681ccaf21b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853c37e365f729d9ece936f0432138cbf1abdeb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853c37e365f729d9ece936f0432138cbf1abdeb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=853c37e365f729d9ece936f0432138cbf1abdeb5", "patch": "@@ -1,5 +1,11 @@\n Wed Apr 14 00:18:22 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n+\t* i386.md (SImode logical compare): Avoid outputing non-pariable testw\n+\tand testl on Pentium.\n+\t(register and memory bit tests): Likewise.\n+\t(setcc, normal and reversed conditional branches): Use shorter\n+\tsequence for testing flags stored in EAX.\n+\n \t* i386.md (xorsi3): Do not output NOT instrctions on Pentium.\n \t(xorqi3): Likewise.\n \t(xorhi3): Likewise."}, {"sha": "b1b681d6cc304a2f496dfab7e22e5fbc0af4e296", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853c37e365f729d9ece936f0432138cbf1abdeb5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853c37e365f729d9ece936f0432138cbf1abdeb5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=853c37e365f729d9ece936f0432138cbf1abdeb5", "patch": "@@ -767,7 +767,10 @@\n   /* For small integers, we may actually use testb. */\n   if (GET_CODE (operands[1]) == CONST_INT\n       && ! (GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))\n-      && (! REG_P (operands[0]) || QI_REG_P (operands[0])))\n+      && (! REG_P (operands[0]) || QI_REG_P (operands[0]))\n+      /* A Pentium test is pairable only with eax. Not with ah or al.  */\n+      && (! REG_P (operands[0]) || REGNO (operands[0]) || !TARGET_PENTIUM\n+          || optimize_size))\n     {\n       /* We may set the sign bit spuriously.  */\n \n@@ -5723,7 +5726,10 @@ else\n   mask = ((1 << INTVAL (operands[1])) - 1) << INTVAL (operands[2]);\n   operands[1] = GEN_INT (mask);\n \n-  if (QI_REG_P (operands[0]))\n+  if (QI_REG_P (operands[0])\n+      /* A Pentium test is pairable only with eax. Not with ah or al.  */\n+      && (! REG_P (operands[0]) || REGNO (operands[0]) || !TARGET_PENTIUM\n+          || optimize_size))\n     {\n       if ((mask & ~0xff) == 0)\n         {\n@@ -5757,7 +5763,10 @@ else\n   mask = ((1 << INTVAL (operands[1])) - 1) << INTVAL (operands[2]);\n   operands[1] = GEN_INT (mask);\n \n-  if (! REG_P (operands[0]) || QI_REG_P (operands[0]))\n+  if (! REG_P (operands[0]) || QI_REG_P (operands[0])\n+      /* A Pentium test is pairable only with eax. Not with ah or al.  */\n+      && (! REG_P (operands[0]) || REGNO (operands[0]) || !TARGET_PENTIUM\n+          || optimize_size))\n     {\n       if ((mask & ~0xff) == 0)\n         {\n@@ -5936,8 +5945,16 @@ else\n \tdefault:\n \t  abort ();\n \t}\n-      operands[3] = GEN_INT (c);\n-      output_asm_insn (AS2 (testl,%3,%2), operands);\n+      if (!TARGET_PENTIUM || optimize_size)\n+        {\n+          operands[3] = GEN_INT (c >> 8);\n+          output_asm_insn (AS2 (test%B0,%3,%h2), operands);\n+        }\n+      else\n+        {\n+          operands[3] = GEN_INT (c);\n+          output_asm_insn (AS2 (test%L0,%3,%2), operands);\n+        }\n       return eq ? AS1 (sete,%0) : AS1 (setne, %0);\n     }\n \n@@ -6113,8 +6130,16 @@ else\n \tdefault:\n \t  abort ();\n \t}\n-      operands[3] = GEN_INT (c);\n-      output_asm_insn (AS2 (testl,%3,%2), operands);\n+      if (!TARGET_PENTIUM || optimize_size)\n+        {\n+          operands[3] = GEN_INT (c >> 8);\n+          output_asm_insn (AS2 (test%B0,%3,%h2), operands);\n+        }\n+      else\n+        {\n+          operands[3] = GEN_INT (c);\n+          output_asm_insn (AS2 (test%L0,%3,%2), operands);\n+        }\n       return eq ? AS1 (je,%l1) : AS1 (jne, %l1);\n     }\n   if ((cc_status.flags & CC_NO_OVERFLOW) && (code == LE || code == GT))\n@@ -6167,8 +6192,16 @@ else\n \tdefault:\n \t  abort ();\n \t}\n-      operands[3] = GEN_INT (c);\n-      output_asm_insn (AS2 (testl,%3,%2), operands);\n+      if (!TARGET_PENTIUM || optimize_size)\n+        {\n+          operands[3] = GEN_INT (c >> 8);\n+          output_asm_insn (AS2 (test%B0,%3,%h2), operands);\n+        }\n+      else\n+        {\n+          operands[3] = GEN_INT (c);\n+          output_asm_insn (AS2 (test%L0,%3,%2), operands);\n+        }\n       return eq ? AS1 (je,%l1) : AS1 (jne, %l1);\n     }\n   if ((cc_status.flags & CC_NO_OVERFLOW) && (code == LE || code == GT))"}]}