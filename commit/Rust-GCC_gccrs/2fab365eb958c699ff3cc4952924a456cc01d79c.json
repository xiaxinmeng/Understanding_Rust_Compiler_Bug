{"sha": "2fab365eb958c699ff3cc4952924a456cc01d79c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZhYjM2NWViOTU4YzY5OWZmM2NjNDk1MjkyNGE0NTZjYzAxZDc5Yw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-07-21T07:30:00Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-07-21T07:30:00Z"}, "message": "re PR target/22085 (error with -fpreprocessed)\n\ngcc:\n2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/22085\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Do not\n\tinitialize targetm.resolve_overloaded_builtin here.\n\t(altivec_expand_overloaded_builtin): Make it non-static.\n\t* config/rs6000/rs6000-protos.h\n\t(altivec_expand_overloaded_builtin): New prototype.\n\t* config/rs6000/rs6000.h (REGISTER_TARGET_PRAGMAS): Initialize\n\ttargetm.resolve_overloaded_builtin here.\n\t* config/rs6000/darwin.h (REGISTER_TARGET_PRAGMAS): Likewise.\n\ntestsuite:\n2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/22085\n\t* gcc.dg/altivec-pr22085.c: New.\n\nFrom-SVN: r102226", "tree": {"sha": "b5e2a441ba704232c2a1736b96888dfec5ff6890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e2a441ba704232c2a1736b96888dfec5ff6890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fab365eb958c699ff3cc4952924a456cc01d79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fab365eb958c699ff3cc4952924a456cc01d79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fab365eb958c699ff3cc4952924a456cc01d79c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fab365eb958c699ff3cc4952924a456cc01d79c/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9cc1a70d51e2874055417fd0153e4434f0d9d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9cc1a70d51e2874055417fd0153e4434f0d9d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9cc1a70d51e2874055417fd0153e4434f0d9d89"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "3be68a70abb25a0386fdb1f691fb459697a76e0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -1,3 +1,15 @@\n+2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR target/22085\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Do not\n+\tinitialize targetm.resolve_overloaded_builtin here.\n+\t(altivec_expand_overloaded_builtin): Make it non-static.\n+\t* config/rs6000/rs6000-protos.h\n+\t(altivec_expand_overloaded_builtin): New prototype.\n+\t* config/rs6000/rs6000.h (REGISTER_TARGET_PRAGMAS): Initialize\n+\ttargetm.resolve_overloaded_builtin here.\n+\t* config/rs6000/darwin.h (REGISTER_TARGET_PRAGMAS): Likewise.\n+\n 2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n             Zdenek Dvorak  <dvorakz@suse.cz>\n "}, {"sha": "482c6e74f9a3eac747c17b9c385d75baea78f567", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -383,7 +383,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define BOOL_TYPE_SIZE (darwin_one_byte_bool ? CHAR_TYPE_SIZE : INT_TYPE_SIZE)\n \n #undef REGISTER_TARGET_PRAGMAS\n-#define REGISTER_TARGET_PRAGMAS DARWIN_REGISTER_TARGET_PRAGMAS\n+#define REGISTER_TARGET_PRAGMAS() \\\n+  do \\\n+    { \\\n+      DARWIN_REGISTER_TARGET_PRAGMAS(); \\\n+      targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \\\n+    } \\\n+  while (0)\n \n /* Just like config/darwin.h's REAL_LIBGCC_SPEC, but use -lgcc_s_ppc64 for\n    -m64.  */"}, {"sha": "bfe542f641e6dbf004db365ce3736a7f0feb86b9", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -38,8 +38,6 @@\n \n \n \n-static tree altivec_resolve_overloaded_builtin (tree, tree);\n-\n /* Handle the machine specific pragma longcall.  Its syntax is\n \n    # pragma longcall ( TOGGLE )\n@@ -143,8 +141,6 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   /* Let the compiled code know if 'f' class registers will not be available.  */\n   if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n     builtin_define (\"__NO_FPRS__\");\n-\n-  targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin;\n }\n \n \f\n@@ -2470,7 +2466,7 @@ altivec_build_resolved_builtin (tree *args, int n,\n /* Implementation of the resolve_overloaded_builtin target hook, to\n    support Altivec's overloaded builtins.  */\n \n-static tree\n+tree\n altivec_resolve_overloaded_builtin (tree fndecl, tree arglist)\n {\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);"}, {"sha": "2103e60f83cc05e55349cd1e75098f1f68d17d58", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -115,6 +115,7 @@ extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, int, int);\n extern int function_arg_boundary (enum machine_mode, tree);\n extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n+extern tree altivec_resolve_overloaded_builtin (tree, tree);\n extern rtx rs6000_function_value (tree, tree);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern rtx rs6000_va_arg (tree, tree);"}, {"sha": "b5e1286e51b2c617e0c5e6968dab68e9548342d3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -339,6 +339,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n /* Target pragma.  */\n #define REGISTER_TARGET_PRAGMAS() do {\t\t\t\t\\\n   c_register_pragma (0, \"longcall\", rs6000_pragma_longcall);\t\\\n+  targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \\\n } while (0)\n \n /* Target #defines.  */"}, {"sha": "d9e4ab8764d1a4a309077258fa0c7fc364546ed9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -1,5 +1,11 @@\n 2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n \n+\tPR target/22085\n+\t* gcc.dg/altivec-pr22085.c: New.\n+\n+2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/19210\n         * gcc.dg/tree-ssa/pr19210-1.c: New.\n         * gcc.dg/tree-ssa/pr19210-2.c: New.\n "}, {"sha": "5f0b5df54015e9ee1d66d975f210cce80d2c0b63", "filename": "gcc/testsuite/gcc.dg/altivec-pr22085.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-pr22085.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fab365eb958c699ff3cc4952924a456cc01d79c/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-pr22085.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-pr22085.c?ref=2fab365eb958c699ff3cc4952924a456cc01d79c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec -fpreprocessed\" } */\n+\n+/* Program to test AltiVec with -fpreprocessed.  */\n+int foo(__attribute__((altivec(vector__))) float x,\n+        __attribute__((altivec(vector__))) float y)\n+{\n+  if (__builtin_vec_vcmpeq_p (2, (x), (y)))\n+    return 3245;\n+  else\n+    return 12;\n+}"}]}