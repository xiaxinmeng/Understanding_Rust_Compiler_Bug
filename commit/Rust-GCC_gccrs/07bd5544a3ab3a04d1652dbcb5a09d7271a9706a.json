{"sha": "07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiZDU1NDRhM2FiM2EwNGQxNjUyZGJjYjVhMDlkNzI3MWE5NzA2YQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-27T19:54:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-27T20:02:27Z"}, "message": "Diagnose just-past-the-end references for minor array bounds.\n\nResolves:\nPR tree-optimization/84079 - missing -Warray-bounds taking the address of past-the-end element of a multidimensional array\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/84079\n\t* gimple-array-bounds.cc (array_bounds_checker::check_addr_expr):\n\tOnly allow just-past-the-end references for the most significant\n\tarray bound.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/84079\n\t* gcc.dg/Warray-bounds-62.c: New test.", "tree": {"sha": "608a5181d87380dae4da6f9d4dea38d60ae58041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/608a5181d87380dae4da6f9d4dea38d60ae58041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d98fa74800041b39b67fa204c3ad8b527df400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d98fa74800041b39b67fa204c3ad8b527df400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d98fa74800041b39b67fa204c3ad8b527df400"}], "stats": {"total": 141, "additions": 139, "deletions": 2}, "files": [{"sha": "c2dd6663c3a24db02465a602bdf78f1d253bd5b6", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "patch": "@@ -519,14 +519,21 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n void\n array_bounds_checker::check_addr_expr (location_t location, tree t)\n {\n+  /* For the most significant subscript only, accept taking the address\n+     of the just-past-the-end element.  */\n+  bool ignore_off_by_one = true;\n+\n   /* Check each ARRAY_REF and MEM_REF in the reference chain. */\n   do\n     {\n       bool warned = false;\n       if (TREE_CODE (t) == ARRAY_REF)\n-\twarned = check_array_ref (location, t, true /*ignore_off_by_one*/);\n+\t{\n+\t  warned = check_array_ref (location, t, ignore_off_by_one);\n+\t  ignore_off_by_one = false;\n+\t}\n       else if (TREE_CODE (t) == MEM_REF)\n-\twarned = check_mem_ref (location, t, true /*ignore_off_by_one*/);\n+\twarned = check_mem_ref (location, t, ignore_off_by_one);\n \n       if (warned)\n \tTREE_NO_WARNING (t) = true;"}, {"sha": "c2421aac1b2c5709a74af7549783001036a172d9", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-62.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd5544a3ab3a04d1652dbcb5a09d7271a9706a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-62.c?ref=07bd5544a3ab3a04d1652dbcb5a09d7271a9706a", "patch": "@@ -0,0 +1,130 @@\n+/* PR tree-optimization/84079 - missing -Warray-bounds taking the address\n+   of past-the-end element of a multidimensional array\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+void sink (int, ...);\n+\n+#define T(type, dims, inxs)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    type a dims;\t\t\t\t\\\n+    sink (__LINE__, &a inxs);\t\t\t\\\n+  } while (0)\n+\n+\n+void test_char_1_1 (int i0, int i1, int i2)\n+{\n+#undef DIMS\n+#define DIMS [1][1]\n+\n+  T (char, DIMS, [0]);\n+  T (char, DIMS, [1]);\n+  T (char, DIMS, [2]);            // { dg-warning \"subscript 2 is above array bounds of 'char\\\\\\[1]\\\\\\[1]'\" }\n+\n+  T (char, DIMS, [0][0]);\n+  T (char, DIMS, [0][1]);\n+  T (char, DIMS, [0][2]);         // { dg-warning \"subscript 2 is above array bounds of 'char\\\\\\[1]'\" }\n+\n+  T (char, DIMS, [1][0]);         // { dg-warning \"subscript 1 is above array bounds of 'char\\\\\\[1]\\\\\\[1]'\" }\n+  T (char, DIMS, [1][1]);         // { dg-warning \"subscript 1 is above array bounds of 'char\\\\\\[1]\\\\\\[1]'\" }\n+  T (char, DIMS, [1][2]);         // { dg-warning \"subscript 2 is above array bounds of 'char\\\\\\[1]'\" }\n+\n+  // Exercise ranges.\n+  if (i0 < 0) i0 = 0;\n+  if (i1 < 1) i1 = 1;\n+  if (i2 < 2) i2 = 2;\n+\n+  T (char, DIMS, [i0]);\n+  T (char, DIMS, [i1]);\n+  T (char, DIMS, [i2]);           // { dg-warning \"subscript 2 is above array bounds of 'char\\\\\\[1]\\\\\\[1]\" }\n+\n+  T (char, DIMS, [i0][i0]);\n+  T (char, DIMS, [i0][i1]);\n+  T (char, DIMS, [i1][i0]);       // { dg-warning \"subscript 1 is above array bounds of 'char\\\\\\[1]\\\\\\[1]'\" }\n+  T (char, DIMS, [i1][i1]);       // { dg-warning \"subscript 1 is above array bounds of 'char\\\\\\[1]\\\\\\[1]'\" }\n+  T (char, DIMS, [i1][i2]);       // { dg-warning \"subscript 2 is above array bounds of 'char\\\\\\[1]'\" }\n+}\n+\n+\n+void test_int_3_5 (int i0, int i1, int i2, int i3, int i4, int i5, int i6)\n+{\n+#undef DIMS\n+#define DIMS [3][5]\n+\n+  T (int, DIMS, [0]);\n+  T (int, DIMS, [3]);\n+  T (int, DIMS, [4]);             // { dg-warning \"subscript 4 is above array bounds of 'int\\\\\\[3]\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0]);\n+  T (int, DIMS, [0][5]);\n+  T (int, DIMS, [0][6]);          // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [1][0]);\n+  T (int, DIMS, [1][5]);\n+  T (int, DIMS, [1][6]);          // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [3][0]);          // { dg-warning \"subscript 3 is above array bounds of 'int\\\\\\[3]\\\\\\[5]'\" }\n+  T (int, DIMS, [3][5]);          // { dg-warning \"subscript 3 is above array bounds of 'int\\\\\\[3]\\\\\\[5]'\" }\n+  T (int, DIMS, [3][6]);          // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  // Exercise ranges.\n+  if (i0 < 0) i0 = 0;\n+  if (i1 < 1) i1 = 1;\n+  if (i2 < 2) i2 = 2;\n+  if (i3 < 3) i3 = 3;\n+  if (i4 < 4) i4 = 4;\n+  if (i5 < 5) i5 = 5;\n+  if (i6 < 6) i6 = 6;\n+\n+  T (int, DIMS, [i0]);\n+  T (int, DIMS, [i3]);\n+  T (int, DIMS, [i4]);            // { dg-warning \"subscript 4 is above array bounds of 'int\\\\\\[3]\\\\\\[5]\" }\n+\n+  T (int, DIMS, [i0][i0]);\n+  T (int, DIMS, [i0][i5]);\n+  T (int, DIMS, [i0][i6]);        // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [i1][i0]);\n+  T (int, DIMS, [i1][i5]);\n+  T (int, DIMS, [i1][i6]);        // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [i3][i0]);        // { dg-warning \"subscript 3 is above array bounds of 'int\\\\\\[3]\\\\\\[5]'\" }\n+  T (int, DIMS, [i3][i5]);        // { dg-warning \"subscript 3 is above array bounds of 'int\\\\\\[3]\\\\\\[5]'\" }\n+  T (int, DIMS, [i3][i6]);        // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+}\n+\n+\n+void test_int_2_3_4_5 (void)\n+{\n+#undef DIMS\n+#define DIMS [2][3][4][5]\n+\n+  T (int, DIMS, [0]);\n+  T (int, DIMS, [2]);\n+  T (int, DIMS, [3]);             // { dg-warning \"subscript 3 is above array bounds of 'int\\\\\\[2]\\\\\\[3]\\\\\\[4]\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0]);\n+  T (int, DIMS, [0][3]);\n+  T (int, DIMS, [0][4]);          // { dg-warning \"subscript 4 is above array bounds of 'int\\\\\\[3]\\\\\\[4]\\\\\\[5]'\" }\n+  T (int, DIMS, [0][9]);          // { dg-warning \"subscript 9 is above array bounds of 'int\\\\\\[3]\\\\\\[4]\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0][0]);\n+  T (int, DIMS, [0][0][4]);\n+  T (int, DIMS, [0][0][5]);       // { dg-warning \"subscript 5 is above array bounds of 'int\\\\\\[4]\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0][0][0]);\n+  T (int, DIMS, [0][0][0][5]);\n+  T (int, DIMS, [0][0][0][6]);    // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0][1][0]);\n+  T (int, DIMS, [0][0][1][5]);\n+  T (int, DIMS, [0][0][1][6]);    // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0][3][0]);\n+  T (int, DIMS, [0][0][3][5]);\n+  T (int, DIMS, [0][0][3][6]);    // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+\n+  T (int, DIMS, [0][0][1][0]);\n+  T (int, DIMS, [0][0][1][5]);\n+  T (int, DIMS, [0][0][1][6]);    // { dg-warning \"subscript 6 is above array bounds of 'int\\\\\\[5]'\" }\n+}"}]}