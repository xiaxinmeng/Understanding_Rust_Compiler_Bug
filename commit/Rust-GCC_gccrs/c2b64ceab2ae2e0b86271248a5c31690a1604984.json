{"sha": "c2b64ceab2ae2e0b86271248a5c31690a1604984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiNjRjZWFiMmFlMmUwYjg2MjcxMjQ4YTVjMzE2OTBhMTYwNDk4NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:27:55Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:27:55Z"}, "message": "tree-ssa-address.c (struct mem_address): Move to header file.\n\n\t* tree-ssa-address.c (struct mem_address): Move to header file.\n\t(valid_mem_ref_p, move_fixed_address_to_symbol): Make it global.\n\t* tree-ssa-address.h (struct mem_address): Move from C file.\n\t(valid_mem_ref_p, move_fixed_address_to_symbol): Declare.\n\nFrom-SVN: r247884", "tree": {"sha": "f2d50aadfadee8dc2e84c4a9b1c459d29a36567f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d50aadfadee8dc2e84c4a9b1c459d29a36567f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b64ceab2ae2e0b86271248a5c31690a1604984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b64ceab2ae2e0b86271248a5c31690a1604984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b64ceab2ae2e0b86271248a5c31690a1604984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b64ceab2ae2e0b86271248a5c31690a1604984/comments", "author": null, "committer": null, "parents": [{"sha": "b7b5203d98d56d5015a13727dd807412bd1559a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b5203d98d56d5015a13727dd807412bd1559a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b5203d98d56d5015a13727dd807412bd1559a2"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "09096ece08377086c99607d09c02e8ecebcc2256", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2b64ceab2ae2e0b86271248a5c31690a1604984", "patch": "@@ -1,3 +1,10 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-address.c (struct mem_address): Move to header file.\n+\t(valid_mem_ref_p, move_fixed_address_to_symbol): Make it global.\n+\t* tree-ssa-address.h (struct mem_address): Move from C file.\n+\t(valid_mem_ref_p, move_fixed_address_to_symbol): Declare.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-affine.h (aff_combination_type): New interface."}, {"sha": "e35d3235e04d86f607b77ba23825451d62eb7953", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=c2b64ceab2ae2e0b86271248a5c31690a1604984", "patch": "@@ -178,13 +178,6 @@ gen_addr_rtx (machine_mode address_mode,\n     *addr = const0_rtx;\n }\n \n-/* Description of a memory address.  */\n-\n-struct mem_address\n-{\n-  tree symbol, base, index, step, offset;\n-};\n-\n /* Returns address for TARGET_MEM_REF with parameters given by ADDR\n    in address space AS.\n    If REALLY_EXPAND is false, just make fake registers instead\n@@ -330,7 +323,7 @@ tree_mem_ref_addr (tree type, tree mem_ref)\n /* Returns true if a memory reference in MODE and with parameters given by\n    ADDR is valid on the current target.  */\n \n-static bool\n+bool\n valid_mem_ref_p (machine_mode mode, addr_space_t as,\n \t\t struct mem_address *addr)\n {\n@@ -408,7 +401,7 @@ fixed_address_object_p (tree obj)\n /* If ADDR contains an address of object that is a link time constant,\n    move it to PARTS->symbol.  */\n \n-static void\n+void\n move_fixed_address_to_symbol (struct mem_address *parts, aff_tree *addr)\n {\n   unsigned i;"}, {"sha": "cd62ed95716ab59ec530b47c592a34f872774e39", "filename": "gcc/tree-ssa-address.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2Ftree-ssa-address.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b64ceab2ae2e0b86271248a5c31690a1604984/gcc%2Ftree-ssa-address.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.h?ref=c2b64ceab2ae2e0b86271248a5c31690a1604984", "patch": "@@ -20,10 +20,20 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_SSA_ADDRESS_H\n #define GCC_TREE_SSA_ADDRESS_H\n \n+/* Description of a memory address.  */\n+\n+struct mem_address\n+{\n+  tree symbol, base, index, step, offset;\n+};\n+\n extern rtx addr_for_mem_ref (struct mem_address *, addr_space_t, bool);\n extern rtx addr_for_mem_ref (tree exp, addr_space_t as, bool really_expand);\n extern void get_address_description (tree, struct mem_address *);\n extern tree tree_mem_ref_addr (tree, tree);\n+extern bool valid_mem_ref_p (machine_mode, addr_space_t, struct mem_address *);\n+extern void move_fixed_address_to_symbol (struct mem_address *,\n+\t\t\t\t\t  struct aff_tree *);\n tree create_mem_ref (gimple_stmt_iterator *, tree,\n \t\t     struct aff_tree *, tree, tree, tree, bool);\n extern void copy_ref_info (tree, tree);"}]}