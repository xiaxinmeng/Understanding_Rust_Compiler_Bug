{"sha": "2709337c1181510e3d4f74e86bf75aa83f7b18aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwOTMzN2MxMTgxNTEwZTNkNGY3NGU4NmJmNzVhYTgzZjdiMThhYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-09-15T16:04:54Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-09-15T16:04:54Z"}, "message": "zero-call-used-regs attr for ada\n\nMake the zero_call_used_regs attribute usable as a Machine_Attribute\npragma.\n\n\nfor  gcc/ada/ChangeLog\n\n\t* gcc-interface/utils.c: Include opts.h.\n\t(handle_zero_call_used_regs_attribute): New.\n\t(gnat_internal_attribute_table): Add zero_call_used_regs.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gnat.dg/zcur_attr.adb, gnat.dg/zcur_attr.ads: New.", "tree": {"sha": "ddd95c1625f5b3ebcc1b688776d809034569e90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd95c1625f5b3ebcc1b688776d809034569e90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2709337c1181510e3d4f74e86bf75aa83f7b18aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2709337c1181510e3d4f74e86bf75aa83f7b18aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2709337c1181510e3d4f74e86bf75aa83f7b18aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2709337c1181510e3d4f74e86bf75aa83f7b18aa/comments", "author": null, "committer": null, "parents": [{"sha": "7bdf51557d18aafdb300e1ad2b4f6fb7ef456f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdf51557d18aafdb300e1ad2b4f6fb7ef456f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdf51557d18aafdb300e1ad2b4f6fb7ef456f2b"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "be3f107926d7c812c0241b8fe83ee2cf3f3af0be", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2709337c1181510e3d4f74e86bf75aa83f7b18aa", "patch": "@@ -38,6 +38,7 @@\n #include \"attribs.h\"\n #include \"varasm.h\"\n #include \"toplev.h\"\n+#include \"opts.h\"\n #include \"output.h\"\n #include \"debug.h\"\n #include \"convert.h\"\n@@ -109,6 +110,8 @@ static tree handle_target_attribute (tree *, tree, tree, int, bool *);\n static tree handle_target_clones_attribute (tree *, tree, tree, int, bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int, bool *);\n static tree handle_vector_type_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_zero_call_used_regs_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t  bool *);\n \n static const struct attribute_spec::exclusions attr_cold_hot_exclusions[] =\n {\n@@ -191,6 +194,9 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"may_alias\",    0, 0,  false, true,  false, false,\n     NULL, NULL },\n \n+  { \"zero_call_used_regs\", 1, 1, true, false, false, false,\n+    handle_zero_call_used_regs_attribute, NULL },\n+\n   /* ??? format and format_arg are heavy and not supported, which actually\n      prevents support for stdio builtins, which we however declare as part\n      of the common builtins.def contents.  */\n@@ -6987,6 +6993,59 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"zero_call_used_regs\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_zero_call_used_regs_attribute (tree *node, tree name, tree args,\n+\t\t\t\t      int ARG_UNUSED (flags),\n+\t\t\t\t      bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+  tree id = TREE_VALUE (args);\n+\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"%qE attribute applies only to functions\", name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  /* pragma Machine_Attribute turns string arguments into identifiers.\n+     Reverse it.  */\n+  if (TREE_CODE (id) == IDENTIFIER_NODE)\n+    id = TREE_VALUE (args) = build_string\n+      (IDENTIFIER_LENGTH (id), IDENTIFIER_POINTER (id));\n+\n+  if (TREE_CODE (id) != STRING_CST)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"%qE argument not a string\", name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  bool found = false;\n+  for (unsigned int i = 0; zero_call_used_regs_opts[i].name != NULL; ++i)\n+    if (strcmp (TREE_STRING_POINTER (id),\n+\t\tzero_call_used_regs_opts[i].name) == 0)\n+      {\n+\tfound = true;\n+\tbreak;\n+      }\n+\n+  if (!found)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"unrecognized %qE attribute argument %qs\",\n+\t\tname, TREE_STRING_POINTER (id));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* ----------------------------------------------------------------------- *\n  *                              BUILTIN FUNCTIONS                          *\n  * ----------------------------------------------------------------------- */"}, {"sha": "5d15f5e9d73248d85b4f9d71fdbe3898ed6a7d5a", "filename": "gcc/testsuite/gnat.dg/zcur_attr.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.adb?ref=2709337c1181510e3d4f74e86bf75aa83f7b18aa", "patch": "@@ -0,0 +1,8 @@\n+--  { dg-do compile }\n+--  { dg-options \"-fdump-tree-optimized\" }\n+\n+package body ZCUR_Attr is\n+   function F return Integer is (0);\n+end ZCUR_Attr;\n+\n+--  { dg-final { scan-tree-dump \"zero_call_used_regs \\[(\\]\\\"all\\\"\\[)\\]\" \"optimized\" } }"}, {"sha": "b756cc838b8df4d7e64361a679dcd0d34b03e3cb", "filename": "gcc/testsuite/gnat.dg/zcur_attr.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2709337c1181510e3d4f74e86bf75aa83f7b18aa/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fzcur_attr.ads?ref=2709337c1181510e3d4f74e86bf75aa83f7b18aa", "patch": "@@ -0,0 +1,4 @@\n+package ZCUR_Attr is\n+   function F return Integer;\n+   pragma Machine_Attribute (F, \"zero_call_used_regs\", \"all\");\n+end ZCUR_Attr;"}]}