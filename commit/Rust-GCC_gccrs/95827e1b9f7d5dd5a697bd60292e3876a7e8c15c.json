{"sha": "95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "node_id": "C_kwDOANBUbNoAKDk1ODI3ZTFiOWY3ZDVkZDVhNjk3YmQ2MDI5MmUzODc2YTdlOGMxNWM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-09T18:35:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-09T18:35:04Z"}, "message": "libstdc++: Make views::single/iota/istream SFINAE-friendly [PR108362]\n\n\tPR libstdc++/108362\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__detail::__can_single_view): New concept.\n\t(_Single::operator()): Constrain it.  Move [[nodiscard]] to the\n\tend of the function declarator.\n\t(__detail::__can_iota_view): New concept.\n\t(_Iota::operator()): Constrain it.  Move [[nodiscard]] to the\n\tend of the function declarator.\n\t(__detail::__can_istream_view): New concept.\n\t(_Istream::operator()): Constrain it.  Move [[nodiscard]] to the\n\tend of the function declarator.\n\t* testsuite/std/ranges/iota/iota_view.cc (test07): New test.\n\t* testsuite/std/ranges/istream_view.cc (test08): New test.\n\t* testsuite/std/ranges/single_view.cc (test07): New test.", "tree": {"sha": "6494db69c15630fb1a1b2016e1c14dc2901e40cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6494db69c15630fb1a1b2016e1c14dc2901e40cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/comments", "author": null, "committer": null, "parents": [{"sha": "c6232ba229a4fcd453b50f11351fcbd35296809c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6232ba229a4fcd453b50f11351fcbd35296809c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6232ba229a4fcd453b50f11351fcbd35296809c"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "867844e9e122007d8d6e9d59692a552401a87733", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "patch": "@@ -675,30 +675,41 @@ namespace views\n   template<typename _Tp>\n     inline constexpr empty_view<_Tp> empty{};\n \n-  struct _Single\n+  namespace __detail\n   {\n     template<typename _Tp>\n-      [[nodiscard]]\n+      concept __can_single_view\n+\t= requires { single_view<decay_t<_Tp>>(std::declval<_Tp>()); };\n+  } // namespace __detail\n+\n+  struct _Single\n+  {\n+    template<__detail::__can_single_view _Tp>\n       constexpr auto\n-      operator()(_Tp&& __e) const\n+      operator() [[nodiscard]] (_Tp&& __e) const\n       noexcept(noexcept(single_view<decay_t<_Tp>>(std::forward<_Tp>(__e))))\n       { return single_view<decay_t<_Tp>>(std::forward<_Tp>(__e)); }\n   };\n \n   inline constexpr _Single single{};\n \n+  namespace __detail\n+  {\n+    template<typename... _Args>\n+      concept __can_iota_view = requires { iota_view(std::declval<_Args>()...); };\n+  } // namespace __detail\n+\n   struct _Iota\n   {\n-    template<typename _Tp>\n-      [[nodiscard]]\n+    template<__detail::__can_iota_view _Tp>\n       constexpr auto\n-      operator()(_Tp&& __e) const\n+      operator() [[nodiscard]] (_Tp&& __e) const\n       { return iota_view(std::forward<_Tp>(__e)); }\n \n     template<typename _Tp, typename _Up>\n-      [[nodiscard]]\n+      requires __detail::__can_iota_view<_Tp, _Up>\n       constexpr auto\n-      operator()(_Tp&& __e, _Up&& __f) const\n+      operator() [[nodiscard]] (_Tp&& __e, _Up&& __f) const\n       { return iota_view(std::forward<_Tp>(__e), std::forward<_Up>(__f)); }\n   };\n \n@@ -796,13 +807,21 @@ namespace views\n \n namespace views\n {\n+  namespace __detail\n+  {\n+    template<typename _Tp, typename _Up>\n+    concept __can_istream_view = requires (_Up __e) {\n+      basic_istream_view<_Tp, typename _Up::char_type, typename _Up::traits_type>(__e);\n+    };\n+  } // namespace __detail\n+\n   template<typename _Tp>\n     struct _Istream\n     {\n       template<typename _CharT, typename _Traits>\n-\t[[nodiscard]]\n \tconstexpr auto\n-\toperator()(basic_istream<_CharT, _Traits>& __e) const\n+\toperator() [[nodiscard]] (basic_istream<_CharT, _Traits>& __e) const\n+\trequires __detail::__can_istream_view<_Tp, remove_reference_t<decltype(__e)>>\n \t{ return basic_istream_view<_Tp, _CharT, _Traits>(__e); }\n     };\n "}, {"sha": "0d2eaf1d0c2f89f70c008a843862d3e9c5f8f62e", "filename": "libstdc++-v3/testsuite/std/ranges/iota/iota_view.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc?ref=95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "patch": "@@ -110,6 +110,15 @@ test06()\n   VERIFY( std::ranges::equal(v3, w3) );\n }\n \n+template<auto iota = std::views::iota>\n+void\n+test07()\n+{\n+  // Verify SFINAE behavior.\n+  static_assert(!requires { iota(nullptr); });\n+  static_assert(!requires { iota(nullptr, nullptr); });\n+}\n+\n int\n main()\n {\n@@ -119,4 +128,5 @@ main()\n   test04();\n   test05();\n   test06();\n+  test07();\n }"}, {"sha": "cc1c3e006b97507ae70f49713aa2e62b4c4afd7a", "filename": "libstdc++-v3/testsuite/std/ranges/istream_view.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc?ref=95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "patch": "@@ -115,6 +115,17 @@ test07()\n   VERIFY( sum == 10 );\n }\n \n+template<class T, class U>\n+concept can_istream_view = requires (U u) { views::istream<T>(u); };\n+\n+void\n+test08()\n+{\n+  // Verify SFINAE behavior.\n+  struct S { };\n+  static_assert(!can_istream_view<S, std::istringstream>);\n+}\n+\n int\n main()\n {\n@@ -125,4 +136,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  test08();\n }"}, {"sha": "38a3946ca43c9a45acd66833bad25ec7a6ddac35", "filename": "libstdc++-v3/testsuite/std/ranges/single_view.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95827e1b9f7d5dd5a697bd60292e3876a7e8c15c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc?ref=95827e1b9f7d5dd5a697bd60292e3876a7e8c15c", "patch": "@@ -111,6 +111,18 @@ test06()\n   auto y = std::views::single(std::move(obj));\n }\n \n+template<auto single = std::views::single>\n+void\n+test07()\n+{\n+  // Verify SFINAE behavior.\n+  struct uncopyable {\n+    uncopyable();\n+    uncopyable(const uncopyable&) = delete;\n+  };\n+  static_assert(!requires { single(uncopyable{}); });\n+}\n+\n int main()\n {\n   test01();\n@@ -119,4 +131,5 @@ int main()\n   test04();\n   test05();\n   test06();\n+  test07();\n }"}]}