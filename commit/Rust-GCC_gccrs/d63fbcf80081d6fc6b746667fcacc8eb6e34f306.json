{"sha": "d63fbcf80081d6fc6b746667fcacc8eb6e34f306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzZmJjZjgwMDgxZDZmYzZiNzQ2NjY3ZmNhY2M4ZWI2ZTM0ZjMwNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-06-23T16:33:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-06-23T16:35:48Z"}, "message": "Fix memory corruption with vector and variant record\n\nThe problem is that Has_Constrained_Partial_View must be tested on the\nbase type of the designated type of an allocator.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Allocator>: Minor tweaks.\n\tCall Has_Constrained_Partial_View on base type of designated type.", "tree": {"sha": "0bdd3e645ad6a2cbf1c7dce9aef254e117ff0ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bdd3e645ad6a2cbf1c7dce9aef254e117ff0ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63fbcf80081d6fc6b746667fcacc8eb6e34f306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63fbcf80081d6fc6b746667fcacc8eb6e34f306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63fbcf80081d6fc6b746667fcacc8eb6e34f306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63fbcf80081d6fc6b746667fcacc8eb6e34f306/comments", "author": null, "committer": null, "parents": [{"sha": "b523ee1f4b139532ecffb2bf707e65cfc5a837fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b523ee1f4b139532ecffb2bf707e65cfc5a837fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b523ee1f4b139532ecffb2bf707e65cfc5a837fe"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "f74e0e728c9a78aba0b9ff5e3725102417de619d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63fbcf80081d6fc6b746667fcacc8eb6e34f306/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63fbcf80081d6fc6b746667fcacc8eb6e34f306/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d63fbcf80081d6fc6b746667fcacc8eb6e34f306", "patch": "@@ -7154,9 +7154,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Allocator:\n       {\n-\ttree gnu_init = NULL_TREE;\n-\ttree gnu_type;\n-\tbool ignore_init_type = false;\n+\ttree gnu_type, gnu_init;\n+\tbool ignore_init_type;\n \n \tgnat_temp = Expression (gnat_node);\n \n@@ -7165,15 +7164,22 @@ gnat_to_gnu (Node_Id gnat_node)\n \t   contains both the type and an initial value for the object.  */\n \tif (Nkind (gnat_temp) == N_Identifier\n \t    || Nkind (gnat_temp) == N_Expanded_Name)\n-\t  gnu_type = gnat_to_gnu_type (Entity (gnat_temp));\n+\t  {\n+\t    ignore_init_type = false;\n+\t    gnu_init = NULL_TREE;\n+\t    gnu_type = gnat_to_gnu_type (Entity (gnat_temp));\n+\t  }\n+\n \telse if (Nkind (gnat_temp) == N_Qualified_Expression)\n \t  {\n \t    const Entity_Id gnat_desig_type\n \t      = Designated_Type (Underlying_Type (Etype (gnat_node)));\n \n-\t    ignore_init_type = Has_Constrained_Partial_View (gnat_desig_type);\n-\t    gnu_init = gnat_to_gnu (Expression (gnat_temp));\n+\t    /* The flag is effectively only set on the base types.  */\n+\t    ignore_init_type\n+\t      = Has_Constrained_Partial_View (Base_Type (gnat_desig_type));\n \n+\t    gnu_init = gnat_to_gnu (Expression (gnat_temp));\n \t    gnu_init = maybe_unconstrained_array (gnu_init);\n \n \t    gigi_checking_assert (!Do_Range_Check (Expression (gnat_temp)));"}]}