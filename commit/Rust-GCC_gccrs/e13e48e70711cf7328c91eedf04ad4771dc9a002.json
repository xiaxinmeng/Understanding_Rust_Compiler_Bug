{"sha": "e13e48e70711cf7328c91eedf04ad4771dc9a002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzZTQ4ZTcwNzExY2Y3MzI4YzkxZWVkZjA0YWQ0NzcxZGM5YTAwMg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-24T20:12:06Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-24T20:12:06Z"}, "message": "re PR c/13014 (if shortcut misses required diagnostics)\n\n2003-11-24  Eric Christopher  <echristo@redhat.com>\n\n\tPR C/13014\n\t* c-decl.c (c_in_iteration_stmt, c_in_case_stmt): New.\n\t(start_function): Use.\n\t(c_push_function_context): Ditto.\n\t(c-pop_function_context): Ditto.\n        (language_function): Move...\n\t* c-tree.h: ... here. Add x_in_iteration_stmt, and\n\tx_in_case_stmt.\n\t* c-parse.in (do_stmt_start, select_or_iter_stmt, stmt): Use\n\tc_in_iteration_stmt, c_in_case_stmt for parser state. Move\n\tcheck for valid break or continue statment here...\n\t* c-semantics.c (genrtl_break_stmt, genrtl_continue_stmt): From\n\there. Change original errors to abort.\n\nFrom-SVN: r73887", "tree": {"sha": "4b0dd5bf92fd53863d57bb29f006b3c57aff1bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0dd5bf92fd53863d57bb29f006b3c57aff1bf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e13e48e70711cf7328c91eedf04ad4771dc9a002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13e48e70711cf7328c91eedf04ad4771dc9a002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13e48e70711cf7328c91eedf04ad4771dc9a002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13e48e70711cf7328c91eedf04ad4771dc9a002/comments", "author": null, "committer": null, "parents": [{"sha": "8273c02d611966557eff0bedb92f841e854738b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8273c02d611966557eff0bedb92f841e854738b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8273c02d611966557eff0bedb92f841e854738b1"}], "stats": {"total": 185, "additions": 118, "deletions": 67}, "files": [{"sha": "fe2752e692e80ef8b4bbf8c494beba5930854b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e13e48e70711cf7328c91eedf04ad4771dc9a002", "patch": "@@ -1,3 +1,19 @@\n+2003-11-24  Eric Christopher  <echristo@redhat.com>\n+\n+\tPR C/13014\n+\t* c-decl.c (c_in_iteration_stmt, c_in_case_stmt): New.\n+\t(start_function): Use.\n+\t(c_push_function_context): Ditto.\n+\t(c-pop_function_context): Ditto.\n+        (language_function): Move...\n+\t* c-tree.h: ... here. Add x_in_iteration_stmt, and\n+\tx_in_case_stmt.\n+\t* c-parse.in (do_stmt_start, select_or_iter_stmt, stmt): Use\n+\tc_in_iteration_stmt, c_in_case_stmt for parser state. Move\n+\tcheck for valid break or continue statment here...\n+\t* c-semantics.c (genrtl_break_stmt, genrtl_continue_stmt): From\n+\there. Change original errors to abort.\n+\n 2003-11-24  Jan Hubicka  <jh@suse.cz>\n \n \t* fold-const.c (fold):  Do not return early when optimizing COMPONENT_REF\n@@ -204,7 +220,7 @@\n \n \t* calls.c (expand_call): Allocate new temp in pass1.\n \t(store_one_arg): If PARALLEL, calculate excess using mode size of\n-\trtvec elt. \n+\trtvec elt.\n \t* expr.c (emit_push_insn): If PARALLEL, calculate offset using\n \tmode size of rtvec elt.\n \t* function.c (assign_parms): Use parm in register, if available."}, {"sha": "16cf655b8b4f133b61f8281e582f254adfa0fdb0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e13e48e70711cf7328c91eedf04ad4771dc9a002", "patch": "@@ -126,6 +126,10 @@ static GTY(()) struct stmt_tree_s c_stmt_tree;\n \n static GTY(()) tree c_scope_stmt_stack;\n \n+/* State saving variables. */\n+int c_in_iteration_stmt;\n+int c_in_case_stmt;\n+\n /* A list of external DECLs that appeared at block scope when there was\n    some other global meaning for that identifier.  */\n static GTY(()) tree truly_local_externals;\n@@ -425,13 +429,13 @@ void\n objc_mark_locals_volatile (void *enclosing_blk)\n {\n   struct c_scope *scope;\n-  \n-  for (scope = current_scope; \n+\n+  for (scope = current_scope;\n        scope && scope != enclosing_blk;\n        scope = scope->outer)\n     {\n       tree decl;\n-      \n+\n       for (decl = scope->names; decl; decl = TREE_CHAIN (decl))\n \t{\n \t  DECL_REGISTER (decl) = 0;\n@@ -440,9 +444,9 @@ objc_mark_locals_volatile (void *enclosing_blk)\n       /* Do not climb up past the current function.  */\n       if (scope->function_body)\n \tbreak;\n-    }\t\n-}     \n-  \n+    }\n+}\n+\n /* Nonzero if we are currently in the global scope.  */\n \n int\n@@ -1677,7 +1681,7 @@ pushdecl (tree x)\n     DECL_CONTEXT (x) = current_file_decl;\n   else\n     DECL_CONTEXT (x) = current_function_decl;\n-  \n+\n   if (name)\n     {\n       tree old;\n@@ -1718,7 +1722,7 @@ pushdecl (tree x)\n  \t  tree ext = any_external_decl (name);\n \t  if (ext)\n \t    {\n-\t      if (duplicate_decls (x, ext, scope != global_scope, \n+\t      if (duplicate_decls (x, ext, scope != global_scope,\n \t\t\t\t   false))\n \t\tx = copy_node (ext);\n \t    }\n@@ -2250,7 +2254,7 @@ c_init_decl_processing (void)\n   tree endlink;\n   tree ptr_ftype_void, ptr_ftype_ptr;\n   location_t save_loc = input_location;\n-  \n+\n   /* Adds some ggc roots, and reserved words for c-parse.in.  */\n   c_parse_init ();\n \n@@ -4637,7 +4641,7 @@ get_parm_info (int void_at_end)\n \tdefault: abort ();\n \t}\n \n-      if (TREE_PURPOSE (decl)) \n+      if (TREE_PURPOSE (decl))\n \t/* The first %s will be one of 'struct', 'union', or 'enum'.  */\n \twarning (\"\\\"%s %s\\\" declared inside parameter list\",\n \t\t keyword, IDENTIFIER_POINTER (TREE_PURPOSE (decl)));\n@@ -5088,23 +5092,23 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n         tree *field_array;\n         struct lang_type *space;\n         struct sorted_fields_type *space2;\n-        \n+\n         len += list_length (x);\n-  \n+\n         /* Use the same allocation policy here that make_node uses, to\n           ensure that this lives as long as the rest of the struct decl.\n           All decls in an inline function need to be saved.  */\n-  \n+\n         space = ggc_alloc (sizeof (struct lang_type));\n         space2 = ggc_alloc (sizeof (struct sorted_fields_type) + len * sizeof (tree));\n-        \n+\n         len = 0;\n \tspace->s = space2;\n \tfield_array = &space2->elts[0];\n         for (x = fieldlist; x; x = TREE_CHAIN (x))\n           {\n             field_array[len++] = x;\n-          \n+\n             /* If there is anonymous struct or union, break out of the loop.  */\n             if (DECL_NAME (x) == NULL)\n               break;\n@@ -5119,7 +5123,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n           }\n       }\n   }\n-  \n+\n   for (x = TYPE_MAIN_VARIANT (t); x; x = TYPE_NEXT_VARIANT (x))\n     {\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);\n@@ -5438,6 +5442,8 @@ start_function (tree declspecs, tree declarator, tree attributes)\n   current_function_returns_abnormally = 0;\n   warn_about_return_type = 0;\n   current_extern_inline = 0;\n+  c_in_iteration_stmt = 0;\n+  c_in_case_stmt = 0;\n \n   /* Don't expand any sizes in the return type of the function.  */\n   immediate_size_expand = 0;\n@@ -6251,20 +6257,6 @@ check_for_loop_decls (void)\n     }\n }\n \f\n-/* Save and restore the variables in this file and elsewhere\n-   that keep track of the progress of compilation of the current function.\n-   Used for nested functions.  */\n-\n-struct language_function GTY(())\n-{\n-  struct c_language_function base;\n-  int returns_value;\n-  int returns_null;\n-  int returns_abnormally;\n-  int warn_about_return_type;\n-  int extern_inline;\n-};\n-\n /* Save and reinitialize the variables\n    used during compilation of a C function.  */\n \n@@ -6277,6 +6269,8 @@ c_push_function_context (struct function *f)\n \n   p->base.x_stmt_tree = c_stmt_tree;\n   p->base.x_scope_stmt_stack = c_scope_stmt_stack;\n+  p->x_in_iteration_stmt = c_in_iteration_stmt;\n+  p->x_in_case_stmt = c_in_case_stmt;\n   p->returns_value = current_function_returns_value;\n   p->returns_null = current_function_returns_null;\n   p->returns_abnormally = current_function_returns_abnormally;\n@@ -6303,6 +6297,8 @@ c_pop_function_context (struct function *f)\n \n   c_stmt_tree = p->base.x_stmt_tree;\n   c_scope_stmt_stack = p->base.x_scope_stmt_stack;\n+  c_in_iteration_stmt = p->x_in_iteration_stmt;\n+  c_in_case_stmt = p->x_in_case_stmt;\n   current_function_returns_value = p->returns_value;\n   current_function_returns_null = p->returns_null;\n   current_function_returns_abnormally = p->returns_abnormally;\n@@ -6510,7 +6506,7 @@ merge_translation_unit_decls (void)\n   tree decl;\n   htab_t link_hash_table;\n   tree block;\n-  \n+\n   /* Create the BLOCK that poplevel would have created, but don't\n      actually call poplevel since that's expensive.  */\n   block = make_node (BLOCK);\n@@ -6551,7 +6547,7 @@ merge_translation_unit_decls (void)\n \t\tDECL_EXTERNAL (decl) = 1;\n \t      else if (DECL_COMMON (old_decl) || DECL_ONE_ONLY (old_decl))\n \t\tDECL_EXTERNAL (old_decl) = 1;\n-\t      \n+\n \t      if (DECL_EXTERNAL (decl))\n \t\t{\n \t\t  DECL_INITIAL (decl) = NULL_TREE;\n@@ -6585,10 +6581,10 @@ merge_translation_unit_decls (void)\n \t{\n \t  tree global_decl;\n \t  global_decl = htab_find (link_hash_table, decl);\n-\t  \n+\n \t  if (! global_decl)\n \t    continue;\n-\t  \n+\n \t  /* Print any appropriate error messages, and partially merge\n \t     the decls.  */\n \t  (void) duplicate_decls (decl, global_decl, true, true);\n@@ -6603,24 +6599,24 @@ void\n c_write_global_declarations(void)\n {\n   tree link;\n-  \n+\n   for (link = current_file_decl; link; link = TREE_CHAIN (link))\n     {\n       tree globals = BLOCK_VARS (DECL_INITIAL (link));\n       int len = list_length (globals);\n       tree *vec = xmalloc (sizeof (tree) * len);\n       int i;\n       tree decl;\n-      \n+\n       /* Process the decls in the order they were written.  */\n \n       for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n \tvec[i] = decl;\n-      \n+\n       wrapup_global_declarations (vec, len);\n-      \n+\n       check_global_declarations (vec, len);\n-      \n+\n       /* Clean up.  */\n       free (vec);\n     }\n@@ -6633,7 +6629,7 @@ c_reset_state (void)\n {\n   tree link;\n   tree file_scope_decl;\n-  \n+\n   /* Pop the global scope.  */\n   if (current_scope != global_scope)\n       current_scope = global_scope;"}, {"sha": "d58b1ef6bbe20677089928a147ffb557aff97a0c", "filename": "gcc/c-parse.in", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=e13e48e70711cf7328c91eedf04ad4771dc9a002", "patch": "@@ -257,6 +257,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n static int stmt_count;\n static int compstmt_count;\n \n+extern int c_in_iteration_stmt;\n+extern int c_in_case_stmt;\n+\n /* Input location of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n static location_t if_stmt_locus;\n@@ -2053,12 +2056,12 @@ pushlevel:  /* empty */\n \t;\n \n poplevel:  /* empty */\n-                { \n+                {\n @@ifobjc\n \t\t  if (c_dialect_objc ())\n \t\t    objc_clear_super_receiver ();\n @@end_ifobjc\n-\t\t  $$ = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); \n+\t\t  $$ = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n \t\t}\n         ;\n \n@@ -2202,6 +2205,7 @@ do_stmt_start:\n \t  DO\n \t\t{ stmt_count++;\n \t\t  compstmt_count++;\n+\t\t  c_in_iteration_stmt++;\n \t\t  $<ttype>$\n \t\t    = add_stmt (build_stmt (DO_STMT, NULL_TREE,\n \t\t\t\t\t    NULL_TREE));\n@@ -2212,7 +2216,8 @@ do_stmt_start:\n \t\t  DO_COND ($<ttype>$) = error_mark_node; }\n \t  c99_block_lineno_labeled_stmt WHILE\n \t\t{ $$ = $<ttype>2;\n-\t\t  RECHAIN_STMTS ($$, DO_BODY ($$)); }\n+\t\t  RECHAIN_STMTS ($$, DO_BODY ($$));\n+\t\t  c_in_iteration_stmt--; }\n \t;\n \n /* The forced readahead in here is because we might be at the end of a\n@@ -2295,12 +2300,14 @@ select_or_iter_stmt:\n                 { stmt_count++;\n \t\t  $<ttype>$ = c_begin_while_stmt (); }\n \t  '(' expr ')'\n-                { $4 = c_common_truthvalue_conversion ($4);\n+                { c_in_iteration_stmt++;\n+\t\t  $4 = c_common_truthvalue_conversion ($4);\n \t\t  c_finish_while_stmt_cond\n \t\t    (c_common_truthvalue_conversion ($4), $<ttype>2);\n \t\t  $<ttype>$ = add_stmt ($<ttype>2); }\n \t  c99_block_lineno_labeled_stmt\n-\t\t{ RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n+                { c_in_iteration_stmt--;\n+\t\t  RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start\n \t  '(' expr ')' ';'\n                 { DO_COND ($1) = c_common_truthvalue_conversion ($3); }\n@@ -2318,14 +2325,18 @@ select_or_iter_stmt:\n \t\t    FOR_COND ($<ttype>2)\n \t\t      = c_common_truthvalue_conversion ($6); }\n \t  xexpr ')'\n-\t\t{ FOR_EXPR ($<ttype>2) = $9; }\n+                { c_in_iteration_stmt++;\n+\t\t  FOR_EXPR ($<ttype>2) = $9; }\n \t  c99_block_lineno_labeled_stmt\n-                { RECHAIN_STMTS ($<ttype>2, FOR_BODY ($<ttype>2)); }\n+                { RECHAIN_STMTS ($<ttype>2, FOR_BODY ($<ttype>2));\n+\t\t  c_in_iteration_stmt--;}\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n-\t\t  $<ttype>$ = c_start_case ($3); }\n+\t\t  $<ttype>$ = c_start_case ($3);\n+\t\t  c_in_case_stmt++; }\n \t  c99_block_lineno_labeled_stmt\n-                { c_finish_case (); }\n+                { c_finish_case ();\n+\t\t  c_in_case_stmt--; }\n \t;\n \n for_init_stmt:\n@@ -2348,9 +2359,21 @@ stmt:\n \t\t  $$ = NULL_TREE; }\n \t| BREAK ';'\n \t        { stmt_count++;\n+\t\tif (!(c_in_iteration_stmt || c_in_case_stmt))\n+\t\t  {\n+\t\t    error (\"break statement not within loop or switch\");\n+\t\t    $$ = NULL_TREE;\n+\t\t  }\n+\t\telse\n \t\t  $$ = add_stmt (build_break_stmt ()); }\n \t| CONTINUE ';'\n                 { stmt_count++;\n+\t\tif (!c_in_iteration_stmt)\n+\t\t  {\n+\t\t    error (\"continue statement not within a loop\");\n+\t\t    $$ = NULL_TREE;\n+\t\t  }\n+\t\telse\n \t\t  $$ = add_stmt (build_continue_stmt ()); }\n \t| RETURN ';'\n                 { stmt_count++;\n@@ -2397,18 +2420,18 @@ stmt:\n \t\t{ $$ = NULL_TREE; }\n @@ifobjc\n \t| AT_THROW expr ';'\n-\t\t{ stmt_count++; \n-\t\t  $$ = objc_build_throw_stmt ($2); \n+\t\t{ stmt_count++;\n+\t\t  $$ = objc_build_throw_stmt ($2);\n \t\t}\n \t| AT_THROW ';'\n-\t\t{ stmt_count++; \n-\t\t  $$ = objc_build_throw_stmt (NULL_TREE); \n+\t\t{ stmt_count++;\n+\t\t  $$ = objc_build_throw_stmt (NULL_TREE);\n \t\t}\n-\t| objc_try_catch_stmt \n+\t| objc_try_catch_stmt\n \t\t{ objc_build_finally_prologue (); }\n \t  objc_finally_block\n \t\t{ $$ = objc_build_try_catch_finally_stmt ($1, $3); }\n-\t| AT_SYNCHRONIZED '(' expr ')' \n+\t| AT_SYNCHRONIZED '(' expr ')'\n \t\t{ objc_build_synchronized_prologue ($3); }\n \t  compstmt\n \t\t{ $$ = objc_build_synchronized_epilogue (); }\n@@ -2425,18 +2448,18 @@ objc_try_catch_stmt:\n \n \n objc_try_stmt:\n-\t  AT_TRY \n+\t  AT_TRY\n \t\t{ objc_build_try_prologue (); }\n-\t  compstmt \n+\t  compstmt\n \t;\n-\t\n+\n objc_catch_list:\n \t  objc_catch_list objc_catch_block\n \t| objc_catch_block\n \t;\n \n objc_catch_block:\n-\t  AT_CATCH '(' parm ')' \n+\t  AT_CATCH '(' parm ')'\n \t\t{ objc_build_catch_stmt ($3); }\n \t  compstmt\n \t\t{ stmt_count++; }\n@@ -3689,7 +3712,7 @@ _yylex (void)\n     case CPP_STRING:\n     case CPP_WSTRING:\n       return STRING;\n-      \n+\n     case CPP_OBJC_STRING:\n       return OBJC_STRING;\n "}, {"sha": "f3c61b42c355938cac6ec91a43274ac98bc2605e", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=e13e48e70711cf7328c91eedf04ad4771dc9a002", "patch": "@@ -592,7 +592,7 @@ genrtl_break_stmt (void)\n {\n   emit_line_note (input_location);\n   if ( ! expand_exit_something ())\n-    error (\"break statement not within loop or switch\");\n+    abort ();\n }\n \n /* Build a continue statement node and return it.  */\n@@ -610,7 +610,7 @@ genrtl_continue_stmt (void)\n {\n   emit_line_note (input_location);\n   if (! expand_continue_loop (0))\n-    error (\"continue statement not within a loop\");\n+    abort ();\n }\n \n /* Generate the RTL for T, which is a SCOPE_STMT.  */"}, {"sha": "f04e7b4edfabe0b5e25a365e9e97454c186a3c57", "filename": "gcc/c-tree.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e13e48e70711cf7328c91eedf04ad4771dc9a002/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=e13e48e70711cf7328c91eedf04ad4771dc9a002", "patch": "@@ -44,12 +44,12 @@ struct lang_identifier GTY(())\n \n /* The resulting tree type.  */\n \n-union lang_tree_node \n+union lang_tree_node\n   GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n        chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *)TYPE_NEXT_VARIANT (&%h.generic) : (union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n {\n-  union tree_node GTY ((tag (\"0\"), \n-\t\t\tdesc (\"tree_node_structure (&%h)\"))) \n+  union tree_node GTY ((tag (\"0\"),\n+\t\t\tdesc (\"tree_node_structure (&%h)\")))\n     generic;\n   struct lang_identifier GTY ((tag (\"1\"))) identifier;\n };\n@@ -106,7 +106,7 @@ struct lang_decl GTY(())\n /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n struct lang_type GTY(())\n {\n-  struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s; \n+  struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s;\n };\n \n /* Record whether a type or decl was written with nonconstant size.\n@@ -152,6 +152,22 @@ struct lang_type GTY(())\n #define KEEP_YES\t1\n #define KEEP_MAYBE\t2\n \n+/* Save and restore the variables in this file and elsewhere\n+   that keep track of the progress of compilation of the current function.\n+   Used for nested functions.  */\n+\n+struct language_function GTY(())\n+{\n+  struct c_language_function base;\n+  int returns_value;\n+  int returns_null;\n+  int returns_abnormally;\n+  int warn_about_return_type;\n+  int extern_inline;\n+  int x_in_iteration_stmt;\n+  int x_in_case_stmt;\n+};\n+\n \f\n /* in c-parse.in */\n extern void c_parse_init (void);"}]}