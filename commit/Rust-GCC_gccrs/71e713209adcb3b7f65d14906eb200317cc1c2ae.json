{"sha": "71e713209adcb3b7f65d14906eb200317cc1c2ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlNzEzMjA5YWRjYjNiN2Y2NWQxNDkwNmViMjAwMzE3Y2MxYzJhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-30T08:18:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-30T08:18:36Z"}, "message": "openmp: Fix handling of allocate clause on taskloop\n\nThis patch fixes gimplification of allocate clause on taskloop - puts\nallocate on inner taskloop only if there is allocate clause, because otherwise\nthe data sharing clauses are only on the task construct in the construct sandwich.\n\n2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimplify.c (gimplify_scan_omp_clauses): Force\n\tOMP_CLAUSE_ALLOCATE_ALLOCATOR into a temporary if it is non-NULL and\n\tnon-constant.\n\t(gimplify_omp_for): Only put allocate on inner taskloop if lastprivate\n\tfor the same variable is going to be put there, and in that case\n\tif the OMP_CLAUSE_ALLOCATE_ALLOCATOR is non-NULL non-constant, make\n\tthe allocator firstprivate on task.\n\n\t* c-c++-common/gomp/allocate-3.c: New test.", "tree": {"sha": "8de62c1db565afb998d7f751f3abf12c1b6fd813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de62c1db565afb998d7f751f3abf12c1b6fd813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e713209adcb3b7f65d14906eb200317cc1c2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e713209adcb3b7f65d14906eb200317cc1c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e713209adcb3b7f65d14906eb200317cc1c2ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e713209adcb3b7f65d14906eb200317cc1c2ae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "aa3b914f6e5cdee4631ea6c7b8c68778398d49f4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e713209adcb3b7f65d14906eb200317cc1c2ae/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e713209adcb3b7f65d14906eb200317cc1c2ae/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=71e713209adcb3b7f65d14906eb200317cc1c2ae", "patch": "@@ -9721,6 +9721,13 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      remove = true;\n \t      break;\n \t    }\n+\t  else if (code == OMP_TASKLOOP\n+\t\t   && OMP_CLAUSE_ALLOCATE_ALLOCATOR (c)\n+\t\t   && (TREE_CODE (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c))\n+\t\t       != INTEGER_CST))\n+\t    OMP_CLAUSE_ALLOCATE_ALLOCATOR (c)\n+\t      = get_initialized_tmp_var (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c),\n+\t\t\t\t\t pre_p, NULL, false);\n \t  break;\n \n \tcase OMP_CLAUSE_DEFAULT:\n@@ -12120,6 +12127,20 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       tree *gtask_clauses_ptr = &task_clauses;\n       tree outer_for_clauses = NULL_TREE;\n       tree *gforo_clauses_ptr = &outer_for_clauses;\n+      bitmap lastprivate_uids = NULL;\n+      if (omp_find_clause (c, OMP_CLAUSE_ALLOCATE))\n+\t{\n+\t  c = omp_find_clause (c, OMP_CLAUSE_LASTPRIVATE);\n+\t  if (c)\n+\t    {\n+\t      lastprivate_uids = BITMAP_ALLOC (NULL);\n+\t      for (; c; c = omp_find_clause (OMP_CLAUSE_CHAIN (c),\n+\t\t\t\t\t     OMP_CLAUSE_LASTPRIVATE))\n+\t\tbitmap_set_bit (lastprivate_uids,\n+\t\t\t\tDECL_UID (OMP_CLAUSE_DECL (c)));\n+\t    }\n+\t  c = *gfor_clauses_ptr;\n+\t}\n       for (; c; c = OMP_CLAUSE_CHAIN (c))\n \tswitch (OMP_CLAUSE_CODE (c))\n \t  {\n@@ -12207,19 +12228,43 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t    gtask_clauses_ptr\n \t      = &OMP_CLAUSE_CHAIN (*gtask_clauses_ptr);\n \t    break;\n-\t  /* Allocate clause we duplicate on task and inner taskloop.  */\n+\t  /* Allocate clause we duplicate on task and inner taskloop\n+\t     if the decl is lastprivate, otherwise just put on task.  */\n \t  case OMP_CLAUSE_ALLOCATE:\n-\t    *gfor_clauses_ptr = c;\n-\t    gfor_clauses_ptr = &OMP_CLAUSE_CHAIN (c);\n-\t    *gtask_clauses_ptr = copy_node (c);\n-\t    gtask_clauses_ptr = &OMP_CLAUSE_CHAIN (*gtask_clauses_ptr);\n+\t    if (lastprivate_uids\n+\t\t&& bitmap_bit_p (lastprivate_uids,\n+\t\t\t\t DECL_UID (OMP_CLAUSE_DECL (c))))\n+\t      {\n+\t\tif (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c)\n+\t\t    && DECL_P (OMP_CLAUSE_ALLOCATE_ALLOCATOR (c)))\n+\t\t  {\n+\t\t    /* Additionally, put firstprivate clause on task\n+\t\t       for the allocator if it is not constant.  */\n+\t\t    *gtask_clauses_ptr\n+\t\t      = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t  OMP_CLAUSE_FIRSTPRIVATE);\n+\t\t    OMP_CLAUSE_DECL (*gtask_clauses_ptr)\n+\t\t      = OMP_CLAUSE_ALLOCATE_ALLOCATOR (c);\n+\t\t    gtask_clauses_ptr = &OMP_CLAUSE_CHAIN (*gtask_clauses_ptr);\n+\t\t  }\n+\t\t*gfor_clauses_ptr = c;\n+\t\tgfor_clauses_ptr = &OMP_CLAUSE_CHAIN (c);\n+\t\t*gtask_clauses_ptr = copy_node (c);\n+\t\tgtask_clauses_ptr = &OMP_CLAUSE_CHAIN (*gtask_clauses_ptr);\n+\t      }\n+\t    else\n+\t      {\n+\t\t*gtask_clauses_ptr = c;\n+\t\tgtask_clauses_ptr = &OMP_CLAUSE_CHAIN (c);\n+\t      }\n \t    break;\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n       *gfor_clauses_ptr = NULL_TREE;\n       *gtask_clauses_ptr = NULL_TREE;\n       *gforo_clauses_ptr = NULL_TREE;\n+      BITMAP_FREE (lastprivate_uids);\n       g = gimple_build_bind (NULL_TREE, gfor, NULL_TREE);\n       g = gimple_build_omp_task (g, task_clauses, NULL_TREE, NULL_TREE,\n \t\t\t\t NULL_TREE, NULL_TREE, NULL_TREE);"}, {"sha": "e61cc1e504ae5c79f5089c5d2f61ea999b2c3d70", "filename": "gcc/testsuite/c-c++-common/gomp/allocate-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e713209adcb3b7f65d14906eb200317cc1c2ae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e713209adcb3b7f65d14906eb200317cc1c2ae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-3.c?ref=71e713209adcb3b7f65d14906eb200317cc1c2ae", "patch": "@@ -0,0 +1,38 @@\n+typedef enum omp_allocator_handle_t\n+#if __cplusplus >= 201103L\n+: __UINTPTR_TYPE__\n+#endif\n+{\n+  omp_null_allocator = 0,\n+  omp_default_mem_alloc = 1,\n+  omp_large_cap_mem_alloc = 2,\n+  omp_const_mem_alloc = 3,\n+  omp_high_bw_mem_alloc = 4,\n+  omp_low_lat_mem_alloc = 5,\n+  omp_cgroup_mem_alloc = 6,\n+  omp_pteam_mem_alloc = 7,\n+  omp_thread_mem_alloc = 8,\n+  __omp_allocator_handle_t_max__ = __UINTPTR_MAX__\n+} omp_allocator_handle_t;\n+\n+omp_allocator_handle_t baz (int);\n+\n+int\n+foo (omp_allocator_handle_t h1, omp_allocator_handle_t h2, int y)\n+{\n+  int x;\n+  #pragma omp taskloop default(none) lastprivate (x) allocate (h1:x) firstprivate(y) allocate (h2:y)\n+  for (int i = 0; i < 64; i++)\n+    x = y + i;\n+  return x;\n+}\n+\n+int\n+bar (int y)\n+{\n+  int x;\n+  #pragma omp taskloop default(none) lastprivate (x) allocate (baz (0):x) allocate (baz (1):y) firstprivate(y)\n+  for (int i = 0; i < 64; i++)\n+    x = y + i;\n+  return x;\n+}"}]}