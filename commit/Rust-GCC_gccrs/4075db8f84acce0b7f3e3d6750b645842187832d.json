{"sha": "4075db8f84acce0b7f3e3d6750b645842187832d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3NWRiOGY4NGFjY2UwYjdmM2UzZDY3NTBiNjQ1ODQyMTg3ODMyZA==", "commit": {"author": {"name": "Bo Thorsen", "email": "bo@gcc.gnu.org", "date": "2002-05-28T07:11:42Z"}, "committer": {"name": "Bo Thorsen", "email": "bo@gcc.gnu.org", "date": "2002-05-28T07:11:42Z"}, "message": "Fix last commit. Sorry about that.\n\nFrom-SVN: r53946", "tree": {"sha": "e25b89c5a7c2f3e51af0398fa522f61e6a284320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e25b89c5a7c2f3e51af0398fa522f61e6a284320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4075db8f84acce0b7f3e3d6750b645842187832d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075db8f84acce0b7f3e3d6750b645842187832d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4075db8f84acce0b7f3e3d6750b645842187832d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075db8f84acce0b7f3e3d6750b645842187832d/comments", "author": null, "committer": null, "parents": [{"sha": "9c07557009ba8a90f19e4773bd3b24e47d486fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c07557009ba8a90f19e4773bd3b24e47d486fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c07557009ba8a90f19e4773bd3b24e47d486fcb"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "1862316b1413613756d251796bc5e75dffe418a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075db8f84acce0b7f3e3d6750b645842187832d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075db8f84acce0b7f3e3d6750b645842187832d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4075db8f84acce0b7f3e3d6750b645842187832d", "patch": "@@ -8,6 +8,17 @@\n \tand less-than-half-precision cases.\n \t(num_trim, num_positive, num_div_op): Cast constants.\n \n+2002-05-27  Bo Thorsen  <bo@suse.de>\n+\n+\t* config/i386/libgcc-x86_64-glibc.ver: Copy this file from the\n+\t3.1 branch. The file was made by Jakub Jelinek.\n+\t* config/i386/linux64.h (MD_FALLBACK_FRAME_STATE_FOR): Add i386\n+\tsupport so multilib doesn't break. And don't define this at all\n+\twhen -Dinhibit_libc is used.\n+\t(MULTILIB_DEFAULTS): Always set default to 64 bit compilation.\n+\t* config/i386/t-linux64: Implement full multilib support. Patch\n+\toriginally done by Andreas Jaeger and Jakub Jelinek.\n+\n 2002-05-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-common.c: Add support for __attribute__((nothrow)) to specify"}, {"sha": "e8eebbb960e34207c58740b22d272d50c11484f6", "filename": "libffi/ChangeLog", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075db8f84acce0b7f3e3d6750b645842187832d/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075db8f84acce0b7f3e3d6750b645842187832d/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=4075db8f84acce0b7f3e3d6750b645842187832d", "patch": "@@ -1,3 +1,8 @@\n+2002-05-28  Bo Thorsen  <bo@suse.de>\n+\n+\t* src/x86/ffi.c (ffi_prep_incoming_args_SYSV): Remove\n+\tthe same unused avn var from this one too.\n+\n 2002-05-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* src/x86/ffi.c (ffi_prep_args): Remove reference to avn.\n@@ -182,13 +187,13 @@\n \t\n 2001-06-06  Andrew Haley  <aph@redhat.com>\n \n-        * src/alpha/osf.S (__FRAME_BEGIN__): Conditionalize for ELF.\n+\t* src/alpha/osf.S (__FRAME_BEGIN__): Conditionalize for ELF.\n \n 2001-06-03  Andrew Haley  <aph@redhat.com>\n \n-        * src/alpha/osf.S: Add unwind info.\n-        * src/powerpc/sysv.S: Add unwind info.\n-        * src/powerpc/ppc_closure.S: Likewise.\n+\t* src/alpha/osf.S: Add unwind info.\n+\t* src/powerpc/sysv.S: Add unwind info.\n+\t* src/powerpc/ppc_closure.S: Likewise.\n \n 2000-05-31  Jeff Sturm  <jsturm@one-point.com>\n \n@@ -347,14 +352,14 @@\n \t(Multilib support.): Add section.\n \t* Makefile.in: Rebuilt.\n \t* ltconfig (extra_compiler_flags, extra_compiler_flags_value):\n-        New variables. Set for gcc using -print-multi-lib. Export them\n-        to libtool.\n-        (sparc64-*-linux-gnu*): Use libsuff 64 for search paths.\n-        * ltmain.sh (B|b|V): Don't throw away gcc's -B, -b and -V options\n-        for -shared links.\n-        (extra_compiler_flags_value, extra_compiler_flags): Check these\n-        for extra compiler options which need to be passed down in\n-        compiler_flags.\n+\tNew variables. Set for gcc using -print-multi-lib. Export them\n+\tto libtool.\n+\t(sparc64-*-linux-gnu*): Use libsuff 64 for search paths.\n+\t* ltmain.sh (B|b|V): Don't throw away gcc's -B, -b and -V options\n+\tfor -shared links.\n+\t(extra_compiler_flags_value, extra_compiler_flags): Check these\n+\tfor extra compiler options which need to be passed down in\n+\tcompiler_flags.\n \n 2000-04-16  Anthony Green  <green@redhat.com>\n \n@@ -363,7 +368,7 @@\n \n 2000-04-14  Jakub Jelinek  <jakub@redhat.com>\n \n-        * include/ffi.h.in (SPARC64): Define for 64bit SPARC builds.\n+\t* include/ffi.h.in (SPARC64): Define for 64bit SPARC builds.\n \tSet SPARC FFI_DEFAULT_ABI based on SPARC64 define.\n \t* src/sparc/ffi.c (ffi_prep_args_v8): Renamed from ffi_prep_args.\n \tReplace all void * sizeofs with sizeof(int).\n@@ -473,7 +478,7 @@\n \t* configure: Rebuilt.\n \t* configure.in: Change version to 2.00-beta.\n \n-        * fficonfig.h.in: Rebuilt.\n+\t* fficonfig.h.in: Rebuilt.\n \t* acconfig.h (FFI_NO_STRUCTS, FFI_NO_RAW_API): Define.\n \n \t* src/x86/ffi.c (ffi_raw_call): Rename."}, {"sha": "c2af395228b36e0a04f080948fc183674e2aea56", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075db8f84acce0b7f3e3d6750b645842187832d/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075db8f84acce0b7f3e3d6750b645842187832d/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=4075db8f84acce0b7f3e3d6750b645842187832d", "patch": "@@ -267,7 +267,6 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue,\n {\n   register unsigned int i;\n   register int tmp;\n-  register unsigned int avn;\n   register void **p_argv;\n   register char *argp;\n   register ffi_type **p_arg;\n@@ -280,12 +279,9 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue,\n     argp += 4;\n   }\n \n-  avn = cif->nargs;\n   p_argv = avalue;\n \n-  for (i = cif->nargs, p_arg = cif->arg_types;\n-       (i != 0) && (avn != 0);\n-       i--, p_arg++)\n+  for (i = cif->nargs, p_arg = cif->arg_types; (i != 0); i--, p_arg++)\n     {\n       size_t z;\n \n@@ -294,19 +290,14 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue,\n \targp = (char *) ALIGN(argp, (*p_arg)->alignment);\n       }\n \n-      if (avn != 0) \n-\t{\n-\t  avn--;\n-\t  z = (*p_arg)->size;\n+      z = (*p_arg)->size;\n \n-\t  /* because we're little endian, this is \n-\t     what it turns into.   */\n+      /* because we're little endian, this is what it turns into.   */\n \n-\t  *p_argv = (void*) argp;\n+      *p_argv = (void*) argp;\n \n-\t  p_argv++;\n-\t  argp += z;\n-\t}\n+      p_argv++;\n+      argp += z;\n     }\n   \n   return;"}]}