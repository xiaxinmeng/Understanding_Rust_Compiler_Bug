{"sha": "074084767c9d7c4d52d919c343b65bb61c564096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc0MDg0NzY3YzlkN2M0ZDUyZDkxOWMzNDNiNjViYjYxYzU2NDA5Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-04-29T15:17:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-04-29T15:17:01Z"}, "message": "Remove DDR_INNER_LOOP\n\n...since it was only ever zero in practice.  I wondered about making\nit a symbolic constant instead, but it didn't seem worth it when\nthere was only one user (and that user was part of the internal\ntree-data-ref.c implementation).\n\n2019-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-data-ref.h (data_dependence_relation::inner_loop): Delete.\n\t(DDR_INNER_LOOP): Likewise.\n\t* tree-data-ref.c (dump_data_dependence_relation): Update accordingly.\n\t(initialize_data_dependence_relation): Likewise.\n\t(insert_innermost_unit_dist_vector): Use 0 instead of DDR_INNER_LOOP.\n\nFrom-SVN: r270654", "tree": {"sha": "2b208542a01c6d0a15ef892e61ecf858e99d9fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b208542a01c6d0a15ef892e61ecf858e99d9fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/074084767c9d7c4d52d919c343b65bb61c564096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074084767c9d7c4d52d919c343b65bb61c564096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074084767c9d7c4d52d919c343b65bb61c564096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074084767c9d7c4d52d919c343b65bb61c564096/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1008df90cca4a4f49f2a898115f8756fafff3187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1008df90cca4a4f49f2a898115f8756fafff3187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1008df90cca4a4f49f2a898115f8756fafff3187"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "e548281a86d571bafee5d81fcdd2d8be9abf2315", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=074084767c9d7c4d52d919c343b65bb61c564096", "patch": "@@ -1,3 +1,11 @@\n+2019-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-data-ref.h (data_dependence_relation::inner_loop): Delete.\n+\t(DDR_INNER_LOOP): Likewise.\n+\t* tree-data-ref.c (dump_data_dependence_relation): Update accordingly.\n+\t(initialize_data_dependence_relation): Likewise.\n+\t(insert_innermost_unit_dist_vector): Use 0 instead of DDR_INNER_LOOP.\n+\n 2019-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/90257"}, {"sha": "6c69f77e653ee36f894394b6902963e19458749a", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=074084767c9d7c4d52d919c343b65bb61c564096", "patch": "@@ -460,7 +460,6 @@ dump_data_dependence_relation (FILE *outf,\n \t  dump_subscript (outf, sub);\n \t}\n \n-      fprintf (outf, \"  inner loop index: %d\\n\", DDR_INNER_LOOP (ddr));\n       fprintf (outf, \"  loop nest: (\");\n       FOR_EACH_VEC_ELT (DDR_LOOP_NEST (ddr), i, loopi)\n \tfprintf (outf, \"%d \", loopi->num);\n@@ -2643,7 +2642,6 @@ initialize_data_dependence_relation (struct data_reference *a,\n   DDR_ARE_DEPENDENT (res) = NULL_TREE;\n   DDR_SUBSCRIPTS (res).create (full_seq.length);\n   DDR_LOOP_NEST (res) = loop_nest;\n-  DDR_INNER_LOOP (res) = 0;\n   DDR_SELF_REFERENCE (res) = false;\n \n   for (i = 0; i < full_seq.length; ++i)\n@@ -4478,7 +4476,7 @@ insert_innermost_unit_dist_vector (struct data_dependence_relation *ddr)\n {\n   lambda_vector dist_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n \n-  dist_v[DDR_INNER_LOOP (ddr)] = 1;\n+  dist_v[0] = 1;\n   save_dist_v (ddr, dist_v);\n }\n "}, {"sha": "ab44d07273122a462b885fdb10041f6c89e293f9", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074084767c9d7c4d52d919c343b65bb61c564096/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=074084767c9d7c4d52d919c343b65bb61c564096", "patch": "@@ -347,10 +347,6 @@ struct data_dependence_relation\n   /* The classic distance vector.  */\n   vec<lambda_vector> dist_vects;\n \n-  /* An index in loop_nest for the innermost loop that varies for\n-     this data dependence relation.  */\n-  unsigned inner_loop;\n-\n   /* Is the dependence reversed with respect to the lexicographic order?  */\n   bool reversed_p;\n \n@@ -406,7 +402,6 @@ typedef struct data_dependence_relation *ddr_p;\n /* The size of the direction/distance vectors: the number of loops in\n    the loop nest.  */\n #define DDR_NB_LOOPS(DDR) (DDR_LOOP_NEST (DDR).length ())\n-#define DDR_INNER_LOOP(DDR) (DDR)->inner_loop\n #define DDR_SELF_REFERENCE(DDR) (DDR)->self_reference_p\n \n #define DDR_DIST_VECTS(DDR) ((DDR)->dist_vects)"}]}