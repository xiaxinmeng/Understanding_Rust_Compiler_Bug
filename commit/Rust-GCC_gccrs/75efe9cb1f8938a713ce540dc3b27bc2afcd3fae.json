{"sha": "75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlZmU5Y2IxZjg5MzhhNzEzY2U1NDBkYzNiMjdiYzJhZmNkM2ZhZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-02T08:46:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-02T14:53:21Z"}, "message": "c/94392 - only enable -ffinite-loops for C++\n\nThis does away with enabling -ffinite-loops at -O2+ for all languages\nand instead enables it selectively for C++ only.\n\nIt also makes -ffinite-loops loop-private at CFG construction time\nfixing correctness issues with inlining.\n\n2020-04-02  Richard Biener  <rguenther@suse.de>\n\n\tPR c/94392\n\t* c-opts.c (c_common_post_options): Enable -ffinite-loops\n\tfor -O2 and C++11 or newer.\n\n\t* common.opt (ffinite-loops): Initialize to zero.\n\t* opts.c (default_options_table): Remove OPT_ffinite_loops\n\tentry.\n\t* cfgloop.h (loop::finite_p): New member.\n\t* cfgloopmanip.c (copy_loop_info): Copy finite_p.\n\t* ipa-icf-gimple.c (func_checker::compare_loops): Compare\n\tfinite_p.\n\t* lto-streamer-in.c (input_cfg): Stream finite_p.\n\t* lto-streamer-out.c (output_cfg): Likewise.\n\t* tree-cfg.c (replace_loop_annotate): Initialize finite_p\n\tfrom flag_finite_loops at CFG build time.\n\t* tree-ssa-loop-niter.c (finite_loop_p): Check the loops\n\tfinite_p flag instead of flag_finite_loops.\n\t* doc/invoke.texi (ffinite-loops): Adjust documentation of\n\tdefault setting.\n\n\t* gcc.dg/torture/pr94392.c: New testcase.", "tree": {"sha": "69f0c6905f576eeedd84101d3bfb66a72a2c4331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69f0c6905f576eeedd84101d3bfb66a72a2c4331"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54af95767e887d63dc332731738e642536d87a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54af95767e887d63dc332731738e642536d87a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54af95767e887d63dc332731738e642536d87a48"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "4250204f15d9502bc09e2bc0041171481c9e9e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1,3 +1,22 @@\n+2020-04-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/94392\n+\t* common.opt (ffinite-loops): Initialize to zero.\n+\t* opts.c (default_options_table): Remove OPT_ffinite_loops\n+\tentry.\n+\t* cfgloop.h (loop::finite_p): New member.\n+\t* cfgloopmanip.c (copy_loop_info): Copy finite_p.\n+\t* ipa-icf-gimple.c (func_checker::compare_loops): Compare\n+\tfinite_p.\n+\t* lto-streamer-in.c (input_cfg): Stream finite_p.\n+\t* lto-streamer-out.c (output_cfg): Likewise.\n+\t* tree-cfg.c (replace_loop_annotate): Initialize finite_p\n+\tfrom flag_finite_loops at CFG build time.\n+\t* tree-ssa-loop-niter.c (finite_loop_p): Check the loops\n+\tfinite_p flag instead of flag_finite_loops.\n+\t* doc/invoke.texi (ffinite-loops): Adjust documentation of\n+\tdefault setting.\n+\n 2020-04-02  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/94450"}, {"sha": "92aed0ed7ce1c3b2055dad097437aef90c1571ec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1,3 +1,9 @@\n+2020-04-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/94392\n+\t* c-opts.c (c_common_post_options): Enable -ffinite-loops\n+\tfor -O2 and C++11 or newer.\n+\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n \t* c.opt: Add -fconcepts-diagnostics-depth."}, {"sha": "58ba0948e792731a93b46f7e8a8524d31db95f13", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -989,6 +989,10 @@ c_common_post_options (const char **pfilename)\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set, flag_new_ttp,\n \t\t       cxx_dialect >= cxx17);\n \n+  /* C++11 guarantees forward progress.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set, flag_finite_loops,\n+\t\t       optimize >= 2 && cxx_dialect >= cxx11);\n+\n   if (cxx_dialect >= cxx11)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98"}, {"sha": "18b404e292f456e00f70c519195f951d38ba0b33", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -226,6 +226,10 @@ class GTY ((chain_next (\"%h.next\"))) loop {\n   /* True if the loop is part of an oacc kernels region.  */\n   unsigned in_oacc_kernels_region : 1;\n \n+  /* True if the loop is known to be finite.  This is a localized\n+     flag_finite_loops or similar pragmas state.  */\n+  unsigned finite_p : 1;\n+\n   /* The number of times to unroll the loop.  0 means no information given,\n      just do what we always do.  A value of 1 means do not unroll the loop.\n      A value of USHRT_MAX means unroll with no specific unrolling factor."}, {"sha": "50c7267ec49e7a01fb80407fbc2838a188bd309f", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1023,6 +1023,7 @@ copy_loop_info (class loop *loop, class loop *target)\n   target->dont_vectorize = loop->dont_vectorize;\n   target->force_vectorize = loop->force_vectorize;\n   target->in_oacc_kernels_region = loop->in_oacc_kernels_region;\n+  target->finite_p = loop->finite_p;\n   target->unroll = loop->unroll;\n   target->owned_clique = loop->owned_clique;\n }"}, {"sha": "bb2ea4c905d0a78cb2080e8b78f3d42e645a85d5", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1490,7 +1490,7 @@ Common Report Var(flag_finite_math_only) Optimization SetByCombined\n Assume no NaNs or infinities are generated.\n \n ffinite-loops\n-Common Report Var(flag_finite_loops) Optimization\n+Common Report Var(flag_finite_loops) Optimization Init(0)\n Assume that loops with an exit will terminate and not loop indefinitely.\n \n ffixed-"}, {"sha": "e3e652ff6c15b1e953fa133869337c822d0524b9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -10432,7 +10432,8 @@ Assume that a loop with an exit will eventually take the exit and not loop\n indefinitely.  This allows the compiler to remove loops that otherwise have\n no side-effects, not considering eventual endless looping as such.\n \n-This option is enabled by default at @option{-O2}.\n+This option is enabled by default at @option{-O2} for C++ with -std=c++11\n+or higher.\n \n @item -ftree-dominator-opts\n @opindex ftree-dominator-opts"}, {"sha": "d306fec56cec5f0e38f659d7350c2e264a294066", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -395,6 +395,8 @@ func_checker::compare_loops (basic_block bb1, basic_block bb2)\n     return return_false_with_msg (\"dont_vectorize\");\n   if (l1->force_vectorize != l2->force_vectorize)\n     return return_false_with_msg (\"force_vectorize\");\n+  if (l1->finite_p != l2->finite_p)\n+    return return_false_with_msg (\"finite_p\");\n   if (l1->unroll != l2->unroll)\n     return return_false_with_msg (\"unroll\");\n   if (!compare_variable_decl (l1->simduid, l2->simduid))"}, {"sha": "244f5b8aa5c7f64fefd7812bd8b6c4300f245183", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -821,6 +821,7 @@ input_cfg (class lto_input_block *ib, class data_in *data_in,\n       loop->owned_clique = streamer_read_hwi (ib);\n       loop->dont_vectorize = streamer_read_hwi (ib);\n       loop->force_vectorize = streamer_read_hwi (ib);\n+      loop->finite_p = streamer_read_hwi (ib);\n       loop->simduid = stream_read_tree (ib, data_in);\n \n       place_new_loop (fn, loop);"}, {"sha": "52ef94718db5e528b1f3d7929cef7ffb7c18d815", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1950,6 +1950,7 @@ output_cfg (struct output_block *ob, struct function *fn)\n       streamer_write_hwi (ob, loop->owned_clique);\n       streamer_write_hwi (ob, loop->dont_vectorize);\n       streamer_write_hwi (ob, loop->force_vectorize);\n+      streamer_write_hwi (ob, loop->finite_p);\n       stream_write_tree (ob, loop->simduid, true);\n     }\n "}, {"sha": "d4df8627bf7f6dd20de1bec725380bf64419aef7", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -478,7 +478,6 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize_speculatively, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_ffinite_loops, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },"}, {"sha": "c3803b69bdb3459722694b99ac93ec8a0e6769c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -1,3 +1,8 @@\n+2020-04-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/94392\n+\t* gcc.dg/torture/pr94392.c: New testcase.\n+\n 2020-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94435"}, {"sha": "373f18ce9836ba186446459174d8858fa9aba614", "filename": "gcc/testsuite/gcc.dg/torture/pr94392.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94392.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94392.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94392.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"finite loops\" { *-*-* } { \"-ffinite-loops\" } } */\n+/* { dg-skip-if \"LTO optimizes the test\" { *-*-* } { \"-flto\" } } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+int a, b;\n+\n+int\n+main()\n+{\n+  while (1)\n+    {\n+      /* Try really hard.  */\n+      if (a != b)\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+\n+/* ISO C does not guarantee forward progress like C++ does so we\n+   cannot assume the loop is finite and optimize it to return 1.  */\n+/* { dg-final { scan-tree-dump \"if\" \"optimized\" } } */"}, {"sha": "e99fb9ff5d12b368400f352c1cf0bbaa4e392ef9", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -324,6 +324,9 @@ replace_loop_annotate (void)\n       /* Then look into the latch, if any.  */\n       if (loop->latch)\n \treplace_loop_annotate_in_block (loop->latch, loop);\n+\n+      /* Push the global flag_finite_loops state down to individual loops.  */\n+      loop->finite_p = flag_finite_loops;\n     }\n \n   /* Remove IFN_ANNOTATE.  Safeguard for the case loop->latch == NULL.  */"}, {"sha": "7d61ef080ebac88982d4567d90b43d0c3931f0d0", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "patch": "@@ -2834,7 +2834,7 @@ finite_loop_p (class loop *loop)\n       return true;\n     }\n \n-  if (flag_finite_loops)\n+  if (loop->finite_p)\n     {\n       unsigned i;\n       vec<edge> exits = get_loop_exit_edges (loop);"}]}