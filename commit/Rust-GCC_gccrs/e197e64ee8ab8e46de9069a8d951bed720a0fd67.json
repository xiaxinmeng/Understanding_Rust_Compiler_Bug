{"sha": "e197e64ee8ab8e46de9069a8d951bed720a0fd67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5N2U2NGVlOGFiOGU0NmRlOTA2OWE4ZDk1MWJlZDcyMGEwZmQ2Nw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2018-06-16T21:34:29Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2018-06-16T21:34:29Z"}, "message": "re PR tree-optimization/64946 ([AArch64] gcc.target/aarch64/vect-abs-compile.c - \"abs\" vectorization fails for char/short types)\n\ngcc/ChangeLog:\n\n2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/64946\n\t* cfgexpand.c (expand_debug_expr): Hande ABSU_EXPR.\n\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n\t* dojump.c (do_jump): Likewise.\n\t* expr.c (expand_expr_real_2): Check operand type's sign.\n\t* fold-const.c (const_unop): Handle ABSU_EXPR.\n\t(fold_abs_const): Likewise.\n\t* gimple-pretty-print.c (dump_unary_rhs): Likewise.\n\t* gimple-ssa-backprop.c (backprop::process_assign_use): Likesie.\n\t(strip_sign_op_1): Likesise.\n\t* match.pd: Add new pattern to generate ABSU_EXPR.\n\t* optabs-tree.c (optab_for_tree_code): Handle ABSU_EXPR.\n\t* tree-cfg.c (verify_gimple_assign_unary): Likewise.\n\t* tree-eh.c (operation_could_trap_helper_p): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-vect-patterns.c (vect_recog_sad_pattern): Likewise.\n\t* tree.def (ABSU_EXPR): New.\n\ngcc/c-family/ChangeLog:\n\n2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* c-common.c (c_common_truthvalue_conversion): Handle ABSU_EXPR.\n\ngcc/c/ChangeLog:\n\n2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* c-typeck.c (build_unary_op): Handle ABSU_EXPR;\n\t* gimple-parser.c (c_parser_gimple_statement): Likewise.\n\t(c_parser_gimple_unary_expression): Likewise.\n\ngcc/cp/ChangeLog:\n\n2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* constexpr.c (potential_constant_expression_1): Handle ABSU_EXPR.\n\t* cp-gimplify.c (cp_fold): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/64946\n\t* gcc.dg/absu.c: New test.\n\t* gcc.dg/gimplefe-29.c: New test.\n\t* gcc.target/aarch64/pr64946.c: New test.\n\nFrom-SVN: r261681", "tree": {"sha": "5081fb715fc1d3e50ca8082c529445c5361e4c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5081fb715fc1d3e50ca8082c529445c5361e4c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e197e64ee8ab8e46de9069a8d951bed720a0fd67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e197e64ee8ab8e46de9069a8d951bed720a0fd67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e197e64ee8ab8e46de9069a8d951bed720a0fd67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e197e64ee8ab8e46de9069a8d951bed720a0fd67/comments", "author": null, "committer": null, "parents": [{"sha": "ee79110cfd00fb7422cb461f63bfbd39637c1962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee79110cfd00fb7422cb461f63bfbd39637c1962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee79110cfd00fb7422cb461f63bfbd39637c1962"}], "stats": {"total": 218, "additions": 203, "deletions": 15}, "files": [{"sha": "fe24ad300db8081ea01fe50722e41605520c0807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1,3 +1,24 @@\n+2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/64946\n+\t* cfgexpand.c (expand_debug_expr): Hande ABSU_EXPR.\n+\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n+\t* dojump.c (do_jump): Likewise.\n+\t* expr.c (expand_expr_real_2): Check operand type's sign.\n+\t* fold-const.c (const_unop): Handle ABSU_EXPR.\n+\t(fold_abs_const): Likewise.\n+\t* gimple-pretty-print.c (dump_unary_rhs): Likewise.\n+\t* gimple-ssa-backprop.c (backprop::process_assign_use): Likesie.\n+\t(strip_sign_op_1): Likesise.\n+\t* match.pd: Add new pattern to generate ABSU_EXPR.\n+\t* optabs-tree.c (optab_for_tree_code): Handle ABSU_EXPR.\n+\t* tree-cfg.c (verify_gimple_assign_unary): Likewise.\n+\t* tree-eh.c (operation_could_trap_helper_p): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_sad_pattern): Likewise.\n+\t* tree.def (ABSU_EXPR): New.\n+\n 2018-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/86095"}, {"sha": "d4e5942e49d1dabad060e998b4f5b059636957c2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1,3 +1,7 @@\n+2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Handle ABSU_EXPR.\n+\n 2018-06-13  Jason Merrill  <jason@redhat.com>\n \n \t* c-opts.c (c_common_post_options): Warn about useless -Wabi."}, {"sha": "0e8efb53f40b84144d94d35f11466efda2eef430", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -3312,6 +3312,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \n     case NEGATE_EXPR:\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n     case FLOAT_EXPR:\n     case EXCESS_PRECISION_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */"}, {"sha": "f1ff69e8fdd5bb67fe577250b11c05254e99b742", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1,3 +1,9 @@\n+2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* c-typeck.c (build_unary_op): Handle ABSU_EXPR;\n+\t* gimple-parser.c (c_parser_gimple_statement): Likewise.\n+\t(c_parser_gimple_unary_expression): Likewise.\n+\n 2018-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/86093"}, {"sha": "aa70b23ff101bf31b1510bf7e834e1bc15d21964", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -4319,6 +4319,16 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \targ = default_conversion (arg);\n       break;\n \n+    case ABSU_EXPR:\n+      if (!(typecode == INTEGER_TYPE))\n+\t{\n+\t  error_at (location, \"wrong type argument to absu\");\n+\t  return error_mark_node;\n+\t}\n+      else if (!noconvert)\n+\targ = default_conversion (arg);\n+      break;\n+\n     case CONJ_EXPR:\n       /* Conjugating a real value is a no-op, but allow it anyway.  */\n       if (!(typecode == INTEGER_TYPE || typecode == REAL_TYPE"}, {"sha": "1be5d14dc2dbe41928722e6650e0fcbecc602363", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -328,7 +328,8 @@ c_parser_gimple_statement (c_parser *parser, gimple_seq *seq)\n     case CPP_NAME:\n       {\n \ttree id = c_parser_peek_token (parser)->value;\n-\tif (strcmp (IDENTIFIER_POINTER (id), \"__ABS\") == 0)\n+\tif (strcmp (IDENTIFIER_POINTER (id), \"__ABS\") == 0\n+\t    || strcmp (IDENTIFIER_POINTER (id), \"__ABSU\") == 0)\n \t  goto build_unary_expr;\n \tbreak;\n       }\n@@ -638,6 +639,12 @@ c_parser_gimple_unary_expression (c_parser *parser)\n \t      op = c_parser_gimple_postfix_expression (parser);\n \t      return parser_build_unary_op (op_loc, ABS_EXPR, op);\n \t    }\n+\t  else if (strcmp (IDENTIFIER_POINTER (id), \"__ABSU\") == 0)\n+\t    {\n+\t      c_parser_consume_token (parser);\n+\t      op = c_parser_gimple_postfix_expression (parser);\n+\t      return parser_build_unary_op (op_loc, ABSU_EXPR, op);\n+\t    }\n \t  else\n \t    return c_parser_gimple_postfix_expression (parser);\n \t}"}, {"sha": "9b91279282e1c6956c8b3699f13036c401ea1dcd", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -4545,6 +4545,7 @@ expand_debug_expr (tree exp)\n       }\n \n     case ABS_EXPR:\n+    case ABSU_EXPR:\n       return simplify_gen_unary (ABS, mode, op0, mode);\n \n     case NEGATE_EXPR:"}, {"sha": "f88680703ed33e4bc0a4de1ebd4195bfce3ffecb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -50350,6 +50350,7 @@ ix86_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n \n \tcase BIT_IOR_EXPR:\n \tcase ABS_EXPR:\n+\tcase ABSU_EXPR:\n \tcase MIN_EXPR:\n \tcase MAX_EXPR:\n \tcase BIT_XOR_EXPR:"}, {"sha": "0879dd727532e50a4e1e1aacc91ff9e3cd2d560c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1,3 +1,8 @@\n+2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* constexpr.c (potential_constant_expression_1): Handle ABSU_EXPR.\n+\t* cp-gimplify.c (cp_fold): Likewise.\n+\n 2018-06-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86147 - wrong capture for template argument."}, {"sha": "4670076a6fa57706bdf7319b1f5ec2db392d6529", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -5816,6 +5816,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n     case TRUTH_NOT_EXPR:\n     case FIXED_CONVERT_EXPR:\n     case UNARY_PLUS_EXPR:"}, {"sha": "4567365b48bcf384fa763fc3ee4f5a09a64c9d38", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -2272,6 +2272,7 @@ cp_fold (tree x)\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:\n     case FIXED_CONVERT_EXPR:"}, {"sha": "88cc96ae85ae2e799c1af8969b9d7835fb74d907", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -467,6 +467,7 @@ do_jump (tree exp, rtx_code_label *if_false_label,\n       /* FALLTHRU */\n     case NON_LVALUE_EXPR:\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n     case NEGATE_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:"}, {"sha": "56751df8431a31eebc2dadd21ae4e26a532975e3", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -8962,6 +8962,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n       return REDUCE_BIT_FIELD (temp);\n \n     case ABS_EXPR:\n+    case ABSU_EXPR:\n       op0 = expand_expr (treeop0, subtarget,\n \t\t\t VOIDmode, EXPAND_NORMAL);\n       if (modifier == EXPAND_STACK_PARM)\n@@ -8973,7 +8974,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \n       /* Unsigned abs is simply the operand.  Testing here means we don't\n \t risk generating incorrect code below.  */\n-      if (TYPE_UNSIGNED (type))\n+      if (TYPE_UNSIGNED (TREE_TYPE (treeop0)))\n \treturn op0;\n \n       return expand_abs (mode, op0, target, unsignedp,"}, {"sha": "4568e1e2b5744cf7a2f8895422cafa5a0a509bba", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1726,7 +1726,8 @@ const_unop (enum tree_code code, tree type, tree arg0)\n       && HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n       && REAL_VALUE_ISSIGNALING_NAN (TREE_REAL_CST (arg0))\n       && code != NEGATE_EXPR\n-      && code != ABS_EXPR)\n+      && code != ABS_EXPR\n+      && code != ABSU_EXPR)\n     return NULL_TREE;\n \n   switch (code)\n@@ -1761,6 +1762,7 @@ const_unop (enum tree_code code, tree type, tree arg0)\n       }\n \n     case ABS_EXPR:\n+    case ABSU_EXPR:\n       if (TREE_CODE (arg0) == INTEGER_CST || TREE_CODE (arg0) == REAL_CST)\n \treturn fold_abs_const (arg0, type);\n       break;\n@@ -13867,20 +13869,21 @@ fold_abs_const (tree arg0, tree type)\n       {\n         /* If the value is unsigned or non-negative, then the absolute value\n \t   is the same as the ordinary value.  */\n-\tif (!wi::neg_p (wi::to_wide (arg0), TYPE_SIGN (type)))\n-\t  t = arg0;\n+\twide_int val = wi::to_wide (arg0);\n+\tbool overflow = false;\n+\tif (!wi::neg_p (val, TYPE_SIGN (TREE_TYPE (arg0))))\n+\t  ;\n \n \t/* If the value is negative, then the absolute value is\n \t   its negation.  */\n \telse\n-\t  {\n-\t    bool overflow;\n-\t    wide_int val = wi::neg (wi::to_wide (arg0), &overflow);\n-\t    t = force_fit_type (type, val, -1,\n-\t\t\t\toverflow | TREE_OVERFLOW (arg0));\n-\t  }\n+\t  val = wi::neg (val, &overflow);\n+\n+\t/* Force to the destination type, set TREE_OVERFLOW for signed\n+\t   TYPE only.  */\n+\tt = force_fit_type (type, val, 1, overflow | TREE_OVERFLOW (arg0));\n       }\n-      break;\n+    break;\n \n     case REAL_CST:\n       if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg0)))"}, {"sha": "bee81ad727154696887f07cdda3dafd66c98633c", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -358,14 +358,17 @@ dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n       break;\n \n     case ABS_EXPR:\n+    case ABSU_EXPR:\n       if (flags & TDF_GIMPLE)\n \t{\n-\t  pp_string (buffer, \"__ABS \");\n+\t  pp_string (buffer,\n+\t\t     rhs_code == ABS_EXPR ? \"__ABS \" : \"__ABSU \");\n \t  dump_generic_node (buffer, rhs, spc, flags, false);\n \t}\n       else\n \t{\n-\t  pp_string (buffer, \"ABS_EXPR <\");\n+\t  pp_string (buffer,\n+\t\t     rhs_code == ABS_EXPR ? \"ABS_EXPR <\" : \"ABSU_EXPR <\");\n \t  dump_generic_node (buffer, rhs, spc, flags, false);\n \t  pp_greater (buffer);\n \t}"}, {"sha": "d554826216f6d4721c6dc57582391ed7e49dcb0c", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -413,6 +413,7 @@ backprop::process_assign_use (gassign *assign, tree rhs, usage_info *info)\n   switch (gimple_assign_rhs_code (assign))\n     {\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n       /* The sign of the input doesn't matter.  */\n       info->flags.ignore_sign = true;\n       break;\n@@ -688,6 +689,7 @@ strip_sign_op_1 (tree rhs)\n     switch (gimple_assign_rhs_code (assign))\n       {\n       case ABS_EXPR:\n+      case ABSU_EXPR:\n       case NEGATE_EXPR:\n \treturn gimple_assign_rhs1 (assign);\n "}, {"sha": "c1e0963da9a52db2afcef00670cecc474fd29a44", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -102,6 +102,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (match (nop_convert @0)\n  @0) \n \n+/* Transform likes of (char) ABS_EXPR <(int) x> into (char) ABSU_EXPR <x>\n+   ABSU_EXPR returns unsigned absolute value of the operand and the operand\n+   of the ABSU_EXPR will have the corresponding signed type.  */\n+(simplify (abs (convert @0))\n+ (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && !TYPE_UNSIGNED (TREE_TYPE (@0))\n+      && element_precision (type) > element_precision (TREE_TYPE (@0)))\n+  (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n+   (convert (absu:utype @0)))))\n+\n+\n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n "}, {"sha": "1c7181a5748685f9dd77fe0ba04d32935e1d0e3a", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -251,6 +251,8 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case ABS_EXPR:\n       return trapv ? absv_optab : abs_optab;\n \n+    case ABSU_EXPR:\n+      return abs_optab;\n     default:\n       return unknown_optab;\n     }"}, {"sha": "af7d3d8bb1ba58d6b3c7dcd5e77880d7831199fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -1,3 +1,10 @@\n+2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/64946\n+\t* gcc.dg/absu.c: New test.\n+\t* gcc.dg/gimplefe-29.c: New test.\n+\t* gcc.target/aarch64/pr64946.c: New test.\n+\n 2018-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/86093"}, {"sha": "e2428cdbc19d31e11e758cc07ced143860065bac", "filename": "gcc/testsuite/gcc.dg/absu.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.dg%2Fabsu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.dg%2Fabsu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fabsu.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -0,0 +1,45 @@\n+\n+/* { dg-do run  } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <limits.h>\n+#define ABS(x)\t(((x) >= 0) ? (x) : -(x))\n+\n+#define DEF_TEST(TYPE)\t\\\n+void foo_##TYPE (signed TYPE x, unsigned TYPE y){\t\\\n+    TYPE t = ABS (x);\t\t\t\t\\\n+    if (t != y)\t\t\t\t\t\\\n+ \t__builtin_abort ();\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+DEF_TEST (char);\n+DEF_TEST (short);\n+DEF_TEST (int);\n+DEF_TEST (long);\n+\n+int main ()\n+{\n+  foo_char (SCHAR_MIN + 1, SCHAR_MAX);\n+  foo_char (0, 0);\n+  foo_char (-1, 1);\n+  foo_char (1, 1);\n+  foo_char (SCHAR_MAX, SCHAR_MAX);\n+\n+  foo_int (-1, 1);\n+  foo_int (0, 0);\n+  foo_int (INT_MAX, INT_MAX);\n+  foo_int (INT_MIN + 1, INT_MAX);\n+\n+  foo_short (-1, 1);\n+  foo_short (0, 0);\n+  foo_short (SHRT_MAX, SHRT_MAX);\n+  foo_short (SHRT_MIN + 1, SHRT_MAX);\n+\n+  foo_long (-1, 1);\n+  foo_long (0, 0);\n+  foo_long (LONG_MAX, LONG_MAX);\n+  foo_long (LONG_MIN + 1, LONG_MAX);\n+\n+  return 0;\n+}\n+"}, {"sha": "54b86ef86fbf87e89e21789c75341dc75dc97e45", "filename": "gcc/testsuite/gcc.dg/gimplefe-29.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-29.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fgimple -fdump-tree-ssa-gimple\" } */\n+\n+unsigned int __GIMPLE() f(int a)\n+{\n+  unsigned int t0;\n+  t0_1 = __ABSU a;\n+  return t0_1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__ABSU a\" \"ssa\" } } */"}, {"sha": "736656fcc96366aedd1fdf4a3a5b94af2a9c7d31", "filename": "gcc/testsuite/gcc.target/aarch64/pr64946.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr64946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr64946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr64946.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -0,0 +1,13 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+signed char a[100],b[100];\n+void absolute_s8 (void)\n+{\n+  int i;\n+  for (i=0; i<16; i++)\n+    a[i] = (b[i] > 0 ? b[i] : -b[i]);\n+};\n+\n+/* { dg-final { scan-assembler-times \"abs\\tv\\[0-9\\]+.16b, v\\[0-9\\]+.16b\" 1 } } */"}, {"sha": "a22fed5d1c92ce1f4614d8f365b1f807346084d6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -3722,6 +3722,20 @@ verify_gimple_assign_unary (gassign *stmt)\n     case CONJ_EXPR:\n       break;\n \n+    case ABSU_EXPR:\n+      if (!ANY_INTEGRAL_TYPE_P (lhs_type)\n+\t  || !TYPE_UNSIGNED (lhs_type)\n+\t  || !ANY_INTEGRAL_TYPE_P (rhs1_type)\n+\t  || TYPE_UNSIGNED (rhs1_type)\n+\t  || element_precision (lhs_type) != element_precision (rhs1_type))\n+\t{\n+\t  error (\"invalid types for ABSU_EXPR\");\n+\t  debug_generic_expr (lhs_type);\n+\t  debug_generic_expr (rhs1_type);\n+\t  return true;\n+\t}\n+      return false;\n+\n     case VEC_DUPLICATE_EXPR:\n       if (TREE_CODE (lhs_type) != VECTOR_TYPE\n \t  || !useless_type_conversion_p (TREE_TYPE (lhs_type), rhs1_type))"}, {"sha": "f367040af4512f3c75290134007c8f4dd86de112", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -2471,6 +2471,10 @@ operation_could_trap_helper_p (enum tree_code op,\n \treturn true;\n       return false;\n \n+    case ABSU_EXPR:\n+      /* ABSU_EXPR never traps.  */\n+      return false;\n+\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:"}, {"sha": "161cdd4facc1cc4cd21d58e0e1e1f11fa97c765a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -3801,6 +3801,7 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case MIN_EXPR:\n     case MAX_EXPR:\n     case ABS_EXPR:\n+    case ABSU_EXPR:\n \n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:"}, {"sha": "63ec823c0bad8d0d2e3f6ed3426656174c1084a9", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -2462,6 +2462,12 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_greater (pp);\n       break;\n \n+    case ABSU_EXPR:\n+      pp_string (pp, \"ABSU_EXPR <\");\n+      dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_greater (pp);\n+      break;\n+\n     case RANGE_EXPR:\n       NIY;\n       break;"}, {"sha": "6621392b7e8088088fee7454d76b4d09006b675e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -615,7 +615,8 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n   gcc_assert (abs_stmt_vinfo);\n   if (STMT_VINFO_DEF_TYPE (abs_stmt_vinfo) != vect_internal_def)\n     return NULL;\n-  if (gimple_assign_rhs_code (abs_stmt) != ABS_EXPR)\n+  if (gimple_assign_rhs_code (abs_stmt) != ABS_EXPR\n+      && gimple_assign_rhs_code (abs_stmt) != ABSU_EXPR)\n     return NULL;\n \n   tree abs_oprnd = gimple_assign_rhs1 (abs_stmt);"}, {"sha": "49bc423c0a88c78f1c2eedc31f0ecfac4ae5ed74", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e197e64ee8ab8e46de9069a8d951bed720a0fd67/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=e197e64ee8ab8e46de9069a8d951bed720a0fd67", "patch": "@@ -752,6 +752,11 @@ DEFTREECODE (MAX_EXPR, \"max_expr\", tcc_binary, 2)\n    operand of the ABS_EXPR must have the same type.  */\n DEFTREECODE (ABS_EXPR, \"abs_expr\", tcc_unary, 1)\n \n+/* Represents the unsigned absolute value of the operand.\n+   An ABSU_EXPR must have unsigned INTEGER_TYPE.  The operand of the ABSU_EXPR\n+   must have the corresponding signed type.  */\n+DEFTREECODE (ABSU_EXPR, \"absu_expr\", tcc_unary, 1)\n+\n /* Shift operations for shift and rotate.\n    Shift means logical shift if done on an\n    unsigned type, arithmetic shift if done on a signed type."}]}