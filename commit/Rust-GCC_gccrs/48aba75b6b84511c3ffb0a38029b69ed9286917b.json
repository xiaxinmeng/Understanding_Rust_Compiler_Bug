{"sha": "48aba75b6b84511c3ffb0a38029b69ed9286917b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhYmE3NWI2Yjg0NTExYzNmZmIwYTM4MDI5YjY5ZWQ5Mjg2OTE3Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-19T00:09:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-19T00:09:28Z"}, "message": "toplev.c (note_deferral_of_defined_inlined_function): Argument FNDECL may be unused.\n\n\t* toplev.c (note_deferral_of_defined_inlined_function): Argument\n\tFNDECL may be unused.\n\n\t* toplev.c (rest_of_compilation): Don't have CSE skip blocks or\n\tfollow jumps after first run.\n\tIf -fexpensive-optimizations rerun CSE after GCSE and iterate until\n\tit doesn't change any jumps.\n\nFrom-SVN: r39861", "tree": {"sha": "f06f2097d9742791c45ef4547d93d8a47df3a55b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f06f2097d9742791c45ef4547d93d8a47df3a55b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48aba75b6b84511c3ffb0a38029b69ed9286917b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48aba75b6b84511c3ffb0a38029b69ed9286917b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48aba75b6b84511c3ffb0a38029b69ed9286917b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48aba75b6b84511c3ffb0a38029b69ed9286917b/comments", "author": null, "committer": null, "parents": [{"sha": "3335f1d984358b093678719844d52027ec5d01e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335f1d984358b093678719844d52027ec5d01e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3335f1d984358b093678719844d52027ec5d01e1"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "52042ac2d2bb456bb058e36497dbd69c5e025d73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48aba75b6b84511c3ffb0a38029b69ed9286917b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48aba75b6b84511c3ffb0a38029b69ed9286917b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48aba75b6b84511c3ffb0a38029b69ed9286917b", "patch": "@@ -1,3 +1,13 @@\n+Sun Feb 18 15:45:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* toplev.c (note_deferral_of_defined_inlined_function): Argument\n+\tFNDECL may be unused.\n+\n+\t* toplev.c (rest_of_compilation): Don't have CSE skip blocks or\n+\tfollow jumps after first run.\n+\tIf -fexpensive-optimizations rerun CSE after GCSE and iterate until\n+\tit doesn't change any jumps.\n+\n Sun Feb 18 17:05:50 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (rtlanal.o): Depend on hard-reg-set.h.\n@@ -9,6 +19,7 @@ Sun Feb 18 17:05:50 2001  Jeffrey A Law  (law@cygnus.com)\n \t(rtx_varies_p, rtx_addr_can_trap_p): Similarly.\n \n Sun Feb 18 15:45:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+>>>>>>> 1.9328\n \n \t* sibcall.c (optimize_sibling_and_tail_recursive_call): Compare\n \tagainst last real insn in basic block."}, {"sha": "b76b6ba4f1f11af0c8827ebb92522b9532727084", "filename": "gcc/toplev.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48aba75b6b84511c3ffb0a38029b69ed9286917b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48aba75b6b84511c3ffb0a38029b69ed9286917b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=48aba75b6b84511c3ffb0a38029b69ed9286917b", "patch": "@@ -2687,7 +2687,7 @@ note_deferral_of_defined_inline_function (decl)\n \n void\n note_outlining_of_inline_function (fndecl)\n-     tree fndecl;\n+     tree fndecl ATTRIBUTE_UNUSED;\n {\n #ifdef DWARF2_DEBUGGING_INFO\n   /* The DWARF 2 backend tries to reduce debugging bloat by not emitting\n@@ -3004,9 +3004,10 @@ rest_of_compilation (decl)\n \n       tem = cse_main (insns, max_reg_num (), 0, rtl_dump_file);\n \n-      /* If we are not running the second CSE pass, then we are no longer\n-\t expecting CSE to be run.  */\n-      cse_not_expected = !flag_rerun_cse_after_loop;\n+      /* If we are not running more CSE passes, then we are no longer\n+\t expecting CSE to be run.  But always rerun it in a cheap mode.  */\n+      cse_not_expected = !flag_rerun_cse_after_loop && !flag_gcse;\n+      flag_cse_skip_blocks = flag_cse_follow_jumps = 0;\n \n       if (tem || optimize > 1)\n \t{\n@@ -3105,21 +3106,43 @@ rest_of_compilation (decl)\n \n   if (optimize > 0 && flag_gcse)\n     {\n+      int tem2 = 0;\n+\n       timevar_push (TV_GCSE);\n       open_dump_file (DFI_gcse, decl);\n \n       find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n       cleanup_cfg (insns);\n       tem = gcse_main (insns, rtl_dump_file);\n \n-      /* If gcse altered any jumps, rerun jump optimizations to clean\n-\t things up.  */\n-      if (tem)\n+      /* If -fexpensive-optimizations, re-run CSE to clean up things done\n+\t by gcse.  */\n+      if (flag_expensive_optimizations)\n+\t{\n+\t  timevar_push (TV_CSE);\n+\t  reg_scan (insns, max_reg_num (), 1);\n+\t  tem2 = cse_main (insns, max_reg_num (), 0, rtl_dump_file);\n+\t  timevar_pop (TV_CSE);\n+\t  cse_not_expected = !flag_rerun_cse_after_loop;\n+\t}\n+      \n+      /* If gcse or cse altered any jumps, rerun jump optimizations to clean\n+\t things up.  Then possibly re-run CSE again.  */\n+      while (tem || tem2)\n \t{\n+\t  tem = tem2 = 0;\n \t  timevar_push (TV_JUMP);\n \t  jump_optimize (insns, !JUMP_CROSS_JUMP, !JUMP_NOOP_MOVES,\n \t\t\t !JUMP_AFTER_REGSCAN);\n \t  timevar_pop (TV_JUMP);\n+\n+\t  if (flag_expensive_optimizations)\n+\t    {\n+\t      timevar_push (TV_CSE);\n+\t      reg_scan (insns, max_reg_num (), 1);\n+\t      tem2 = cse_main (insns, max_reg_num (), 0, rtl_dump_file);\n+\t      timevar_pop (TV_CSE);\n+\t    }\n \t}\n \n       close_dump_file (DFI_gcse, print_rtl, insns);"}]}