{"sha": "a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkOWY5ZDM4OGNiNjc4OGQ2NmM0NmZlOTNkNTNhMDhkYTBlMjM1MA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:42:09Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:42:09Z"}, "message": "unary_op.inc: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_op.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vabs.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vneg.c: Likewise.\n\nFrom-SVN: r216642", "tree": {"sha": "b0ad4e70a4d461e42c8e56abcef7cbc2bd5f6085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0ad4e70a4d461e42c8e56abcef7cbc2bd5f6085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/comments", "author": null, "committer": null, "parents": [{"sha": "2f46a9cd83980bf549058eca30001e2ceeb41b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f46a9cd83980bf549058eca30001e2ceeb41b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f46a9cd83980bf549058eca30001e2ceeb41b88"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "5156ac125a6395c308364daaeb458ee754bc37f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "patch": "@@ -1,3 +1,9 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/unary_op.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vabs.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vneg.c: Likewise.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/README.advsimd-intrinsics: New file."}, {"sha": "33f9b5f2d24e4cb1a548d511d690ce4eadea53f4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_op.inc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_op.inc?ref=a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "patch": "@@ -0,0 +1,72 @@\n+/* Template file for unary operator validation.\n+\n+   This file is meant to be included by the relevant test files, which\n+   have to define the intrinsic family to test. If a given intrinsic\n+   supports variants which are not supported by all the other unary\n+   operators, these can be tested by providing a definition for\n+   EXTRA_TESTS.  */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=OP(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_UNARY_OP(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\t\\\n+\n+  /* No need for 64 bits variants in the general case.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  VLOAD(vector, buffer, , int, s, 8, 8);\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME)();\n+\n+  return 0;\n+}"}, {"sha": "ca3901abb137c2d8f747d3a4bf73bccdbc282094", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabs.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c?ref=a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "patch": "@@ -0,0 +1,74 @@\n+#define INSN_NAME vabs\n+#define TEST_MSG \"VABS/VABSQ\"\n+\n+/* Extra tests for functions requiring floating-point types.  */\n+void exec_vabs_f32(void);\n+#define EXTRA_TESTS exec_vabs_f32\n+\n+#include \"unary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t       0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x10, 0xf };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x10, 0xf, 0xe, 0xd, 0xc, 0xb, 0xa, 0x9,\n+\t\t\t\t\t0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t  0x33333333, 0x33333333 };\n+\n+/* Expected results for float32 variants. Needs to be separated since\n+   the generic test function does not test floating-point\n+   versions.  */\n+VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0x40133333, 0x40133333 };\n+VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x4059999a, 0x4059999a,\n+\t\t\t\t\t\t   0x4059999a, 0x4059999a };\n+\n+void exec_vabs_f32(void)\n+{\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  VDUP(vector, , float, f, 32, 2, -2.3f);\n+  VDUP(vector, q, float, f, 32, 4, 3.4f);\n+\n+  TEST_UNARY_OP(INSN_NAME, , float, f, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, float, f, 32, 4);\n+\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+}"}, {"sha": "c45492ddb0068a12b9fc607175bf8d20034fea5c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vneg.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d9f9d388cb6788d66c46fe93d53a08da0e2350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c?ref=a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "patch": "@@ -0,0 +1,74 @@\n+#define INSN_NAME vneg\n+#define TEST_MSG \"VNEG/VNEGQ\"\n+\n+/* Extra tests for functions requiring floating-point types.  */\n+void exec_vneg_f32(void);\n+#define EXTRA_TESTS exec_vneg_f32\n+\n+#include \"unary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t       0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x10, 0xf };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x10, 0xf, 0xe, 0xd, 0xc, 0xb, 0xa, 0x9,\n+\t\t\t\t\t0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results for float32 variants. Needs to be separated since\n+   the generic test function does not test floating-point\n+   versions.  */\n+VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0xc0133333, 0xc0133333 };\n+VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0xc059999a, 0xc059999a,\n+\t\t\t\t\t\t   0xc059999a, 0xc059999a };\n+\n+void exec_vneg_f32(void)\n+{\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  VDUP(vector, , float, f, 32, 2, 2.3f);\n+  VDUP(vector, q, float, f, 32, 4, 3.4f);\n+\n+  TEST_UNARY_OP(INSN_NAME, , float, f, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, float, f, 32, 4);\n+\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+}"}]}