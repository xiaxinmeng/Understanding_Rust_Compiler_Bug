{"sha": "4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkODBiYjczYjk5YTFiMWIwMWZmY2E5ODcxYTYzYjMxYjZmMDNkMQ==", "commit": {"author": {"name": "Quentin Ochem", "email": "ochem@adacore.com", "date": "2008-08-06T08:32:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-06T08:32:09Z"}, "message": "s-stausa.adb (Fill_Stack): Fixed pragma assert and top pattern mark in the case of an empty pattern size.\n\n2008-08-06  Quentin Ochem  <ochem@adacore.com>\n\n\t* s-stausa.adb (Fill_Stack): Fixed pragma assert and top pattern mark\n\tin the case of an empty pattern size.\n\t(Compute_Result): Do not do any computation in the case of an empty\n\tpattern size.\n\t(Report_Result): Fixed computation of the overflow guard.\n\nFrom-SVN: r138771", "tree": {"sha": "5d77f0d536f21c798468ed4742933e683b4ac775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d77f0d536f21c798468ed4742933e683b4ac775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1/comments", "author": {"login": "QuentinOchem", "id": 5612750, "node_id": "MDQ6VXNlcjU2MTI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5612750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuentinOchem", "html_url": "https://github.com/QuentinOchem", "followers_url": "https://api.github.com/users/QuentinOchem/followers", "following_url": "https://api.github.com/users/QuentinOchem/following{/other_user}", "gists_url": "https://api.github.com/users/QuentinOchem/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuentinOchem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuentinOchem/subscriptions", "organizations_url": "https://api.github.com/users/QuentinOchem/orgs", "repos_url": "https://api.github.com/users/QuentinOchem/repos", "events_url": "https://api.github.com/users/QuentinOchem/events{/privacy}", "received_events_url": "https://api.github.com/users/QuentinOchem/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a9a686e312f60716594fd45466b1adb827371ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9a686e312f60716594fd45466b1adb827371ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9a686e312f60716594fd45466b1adb827371ef"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "ff5f86e1668c7cfb19d2631e9384dae97f18dd24", "filename": "gcc/ada/s-stausa.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1/gcc%2Fada%2Fs-stausa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1/gcc%2Fada%2Fs-stausa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.adb?ref=4dd80bb73b99a1b1b01ffca9871a63b31b6f03d1", "patch": "@@ -298,15 +298,16 @@ package body System.Stack_Usage is\n               To_Stack_Address (Stack (Top_Slot_Index_In (Stack))'Address);\n          else\n             Analyzer.Bottom_Pattern_Mark := To_Stack_Address (Stack'Address);\n-            Analyzer.Bottom_Pattern_Mark := To_Stack_Address (Stack'Address);\n+            Analyzer.Top_Pattern_Mark := To_Stack_Address (Stack'Address);\n          end if;\n \n          --  If Arr has been packed, the following assertion must be true (we\n          --  add the size of the element whose address is:\n          --    Min (Analyzer.Inner_Pattern_Mark, Analyzer.Outer_Pattern_Mark)):\n \n          pragma Assert\n-           (Analyzer.Pattern_Size =\n+           (Analyzer.Pattern_Size = 0 or else\n+            Analyzer.Pattern_Size =\n               Stack_Size\n                 (Analyzer.Top_Pattern_Mark, Analyzer.Bottom_Pattern_Mark));\n       end;\n@@ -381,6 +382,10 @@ package body System.Stack_Usage is\n    begin\n       Analyzer.Topmost_Touched_Mark := Analyzer.Bottom_Pattern_Mark;\n \n+      if Analyzer.Pattern_Size = 0 then\n+         return;\n+      end if;\n+\n       --  Look backward from the topmost possible end of the marked stack to\n       --  the bottom of it. The first index not equals to the patterns marks\n       --  the beginning of the used stack.\n@@ -559,20 +564,23 @@ package body System.Stack_Usage is\n                    Min_Measure    => 0,\n                    Max_Measure    => 0);\n \n+      Overflow_Guard : constant Integer :=\n+        Analyzer.Stack_Size\n+          - Stack_Size (Analyzer.Top_Pattern_Mark, Analyzer.Bottom_Of_Stack);\n+\n    begin\n       if Analyzer.Pattern_Size = 0 then\n          --  If we have that result, it means that we didn't do any computation\n          --  at all. In other words, we used at least everything (and possibly\n          --  more).\n \n-         Result.Min_Measure := Analyzer.Stack_Size;\n+         Result.Min_Measure := Analyzer.Stack_Size - Overflow_Guard;\n          Result.Max_Measure := Analyzer.Stack_Size;\n       else\n          Result.Min_Measure := Stack_Size\n                     (Analyzer.Topmost_Touched_Mark,\n                      Analyzer.Bottom_Of_Stack);\n-         Result.Max_Measure := Result.Min_Measure +\n-           (Analyzer.Stack_Size - Analyzer.Pattern_Size);\n+         Result.Max_Measure := Result.Min_Measure + Overflow_Guard;\n       end if;\n \n       if Analyzer.Result_Id in Result_Array'Range then"}]}