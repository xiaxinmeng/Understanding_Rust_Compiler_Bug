{"sha": "4ceffa27eea18baea5660ef3e29186eae7fa247a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlZmZhMjdlZWExOGJhZWE1NjYwZWYzZTI5MTg2ZWFlN2ZhMjQ3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-26T20:38:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-26T20:38:59Z"}, "message": "re PR middle-end/59150 (ICE: in expand_one_var, at cfgexpand.c:1242 with -fopenmp)\n\n\tPR middle-end/59150\n\t* omp-low.c (lower_rec_input_clause): For reduction with placeholder\n\tof references to constant size types in simd loops, defer emitting\n\tinitializer for the new_var, emit it later on only if not using\n\tSIMD arrays for it.\n\n\t* g++.dg/gomp/pr59150.C: New test.\n\nFrom-SVN: r205411", "tree": {"sha": "a30f470db61501115d88b0a08c1827eddc81736a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a30f470db61501115d88b0a08c1827eddc81736a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ceffa27eea18baea5660ef3e29186eae7fa247a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceffa27eea18baea5660ef3e29186eae7fa247a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ceffa27eea18baea5660ef3e29186eae7fa247a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceffa27eea18baea5660ef3e29186eae7fa247a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01dde9b0e98f435232dd99d8128cd1087066d5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01dde9b0e98f435232dd99d8128cd1087066d5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01dde9b0e98f435232dd99d8128cd1087066d5ef"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "0d97d2ec45a514e6f7ef93812ff804ff03b17ec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ceffa27eea18baea5660ef3e29186eae7fa247a", "patch": "@@ -1,5 +1,11 @@\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/59150\n+\t* omp-low.c (lower_rec_input_clause): For reduction with placeholder\n+\tof references to constant size types in simd loops, defer emitting\n+\tinitializer for the new_var, emit it later on only if not using\n+\tSIMD arrays for it.\n+\n \tPR middle-end/59152\n \t* omp-low.c (expand_omp_for_static_chunk): Don't set loop->latch\n \tfor the inner loop if collapse_bb is non-NULL."}, {"sha": "b980825defb7f057a6ed45b267d6322d9f3276ec", "filename": "gcc/omp-low.c", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=4ceffa27eea18baea5660ef3e29186eae7fa247a", "patch": "@@ -3185,24 +3185,38 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t}\n \t      else if (TREE_CONSTANT (x))\n \t\t{\n-\t\t  const char *name = NULL;\n-\t\t  if (DECL_NAME (var))\n-\t\t    name = IDENTIFIER_POINTER (DECL_NAME (new_var));\n-\n-\t\t  x = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (new_var)),\n-\t\t\t\t\t  name);\n-\t\t  gimple_add_tmp_var (x);\n-\t\t  TREE_ADDRESSABLE (x) = 1;\n-\t\t  x = build_fold_addr_expr_loc (clause_loc, x);\n+\t\t  /* For reduction with placeholder in SIMD loop,\n+\t\t     defer adding the initialization of the reference,\n+\t\t     because if we decide to use SIMD array for it,\n+\t\t     the initilization could cause expansion ICE.  */\n+\t\t  if (c_kind == OMP_CLAUSE_REDUCTION\n+\t\t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c)\n+\t\t      && is_simd)\n+\t\t    x = NULL_TREE;\n+\t\t  else\n+\t\t    {\n+\t\t      const char *name = NULL;\n+\t\t      if (DECL_NAME (var))\n+\t\t\tname = IDENTIFIER_POINTER (DECL_NAME (new_var));\n+\n+\t\t      x = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (new_var)),\n+\t\t\t\t\t      name);\n+\t\t      gimple_add_tmp_var (x);\n+\t\t      TREE_ADDRESSABLE (x) = 1;\n+\t\t      x = build_fold_addr_expr_loc (clause_loc, x);\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n \t\t  tree atmp = builtin_decl_explicit (BUILT_IN_ALLOCA);\n \t\t  x = build_call_expr_loc (clause_loc, atmp, 1, x);\n \t\t}\n \n-\t      x = fold_convert_loc (clause_loc, TREE_TYPE (new_var), x);\n-\t      gimplify_assign (new_var, x, ilist);\n+\t      if (x)\n+\t\t{\n+\t\t  x = fold_convert_loc (clause_loc, TREE_TYPE (new_var), x);\n+\t\t  gimplify_assign (new_var, x, ilist);\n+\t\t}\n \n \t      new_var = build_simple_mem_ref_loc (clause_loc, new_var);\n \t    }\n@@ -3500,6 +3514,29 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t}\n \t\t      break;\n \t\t    }\n+\t\t  /* If this is a reference to constant size reduction var\n+\t\t     with placeholder, we haven't emitted the initializer\n+\t\t     for it because it is undesirable if SIMD arrays are used.\n+\t\t     But if they aren't used, we need to emit the deferred\n+\t\t     initialization now.  */\n+\t\t  else if (is_reference (var) && is_simd)\n+\t\t    {\n+\t\t      tree z\n+\t\t\t= TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (new_vard)));\n+\t\t      if (TREE_CONSTANT (z))\n+\t\t\t{\n+\t\t\t  const char *name = NULL;\n+\t\t\t  if (DECL_NAME (var))\n+\t\t\t    name = IDENTIFIER_POINTER (DECL_NAME (new_vard));\n+\n+\t\t\t  z = create_tmp_var_raw\n+\t\t\t\t(TREE_TYPE (TREE_TYPE (new_vard)), name);\n+\t\t\t  gimple_add_tmp_var (z);\n+\t\t\t  TREE_ADDRESSABLE (z) = 1;\n+\t\t\t  z = build_fold_addr_expr_loc (clause_loc, z);\n+\t\t\t  gimplify_assign (new_vard, z, ilist);\n+\t\t\t}\n+\t\t    }\n \t\t  x = lang_hooks.decls.omp_clause_default_ctor\n \t\t\t\t(c, new_var, unshare_expr (x));\n \t\t  if (x)"}, {"sha": "a23c3972516809ef271485cd11d7f5ebadb31ef2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ceffa27eea18baea5660ef3e29186eae7fa247a", "patch": "@@ -1,5 +1,8 @@\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/59150\n+\t* g++.dg/gomp/pr59150.C: New test.\n+\n \tPR middle-end/59152\n \t* c-c++-common/gomp/pr59152.c: New test.\n "}, {"sha": "103edb6491807cc1edf71de31e20872171211bdd", "filename": "gcc/testsuite/g++.dg/gomp/pr59150.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr59150.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceffa27eea18baea5660ef3e29186eae7fa247a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr59150.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr59150.C?ref=4ceffa27eea18baea5660ef3e29186eae7fa247a", "patch": "@@ -0,0 +1,25 @@\n+// PR middle-end/59150\n+// { dg-do compile }\n+// { dg-options \"-O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\" }\n+\n+#pragma omp declare reduction (foo: int: omp_out += omp_in) initializer (omp_priv = 0)\n+\n+int\n+foo ()\n+{\n+  int i, v, &u = v;\n+  #pragma omp simd reduction (foo:u)\n+    for (i = 0; i < 1024; i++)\n+      u = i;\n+  return u;\n+}\n+\n+int\n+bar ()\n+{\n+  int i, v, &u = v;\n+  #pragma omp simd reduction (foo:u) safelen(1)\n+    for (i = 0; i < 1024; i++)\n+      u = i;\n+  return u;\n+}"}]}