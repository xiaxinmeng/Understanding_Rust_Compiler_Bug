{"sha": "bf730f15c50fab842ac222b8e60d62737d5f0d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3MzBmMTVjNTBmYWI4NDJhYzIyMmI4ZTYwZDYyNzM3ZDVmMGQ5YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-07T18:49:36Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-07T18:49:36Z"}, "message": "re PR c/14649 (atan(1.0) should not be a constant expression)\n\n\n\tPR c/14649\n\t* c-typeck.c (require_constant_value, require_constant_elements):\n\tMove declarations to the top of the file.\n\t(build_function_call): If we require a constant value, fold with\n\tfold_initializer.  If the result is a constant, and the function\n\twasn't called using __builtin_foo, issue a pedantic warning.\n\t(build_unary_op): If we require a constant value, fold tree with\n\tfold_initializer.\n\t(build_binary_op): Use require_constant_value to determine whether\n\tto call fold or fold_initializer.\n\n\t* gcc.dg/pr14649-1.c: New test case.\n\nFrom-SVN: r82705", "tree": {"sha": "15790a9a0fa2a93d8ffe3c058372c43f8aef3c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15790a9a0fa2a93d8ffe3c058372c43f8aef3c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf730f15c50fab842ac222b8e60d62737d5f0d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf730f15c50fab842ac222b8e60d62737d5f0d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf730f15c50fab842ac222b8e60d62737d5f0d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf730f15c50fab842ac222b8e60d62737d5f0d9a/comments", "author": null, "committer": null, "parents": [{"sha": "cb6231728e5b5cd61ef549354378252bfa92aabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6231728e5b5cd61ef549354378252bfa92aabb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6231728e5b5cd61ef549354378252bfa92aabb"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "ba13ae70377aac5a1ea8088274cf8abcb47b548c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf730f15c50fab842ac222b8e60d62737d5f0d9a", "patch": "@@ -1,3 +1,16 @@\n+2004-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/14649\n+\t* c-typeck.c (require_constant_value, require_constant_elements):\n+\tMove declarations to the top of the file.\n+\t(build_function_call): If we require a constant value, fold with\n+\tfold_initializer.  If the result is a constant, and the function\n+\twasn't called using __builtin_foo, issue a pedantic warning.\n+\t(build_unary_op): If we require a constant value, fold tree with\n+\tfold_initializer.\n+\t(build_binary_op): Use require_constant_value to determine whether\n+\tto call fold or fold_initializer.\n+\n 2004-06-07  Richard Henderson  <rth@redhat.com>\n \n \t* gimple-low.c (struct lower_data): Add the_return_label and"}, {"sha": "3b8cb4b2c8c3620ae0b3b0747015ff04e5680ee6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bf730f15c50fab842ac222b8e60d62737d5f0d9a", "patch": "@@ -50,6 +50,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    message within this initializer.  */\n static int missing_braces_mentioned;\n \n+static int require_constant_value;\n+static int require_constant_elements;\n+\n static tree qualify_type (tree, tree);\n static int tagged_types_tu_compatible_p (tree, tree, int);\n static int comp_target_types (tree, tree, int);\n@@ -1893,7 +1896,18 @@ build_function_call (tree function, tree params)\n   result = build (CALL_EXPR, TREE_TYPE (fntype),\n \t\t  function, coerced_params, NULL_TREE);\n   TREE_SIDE_EFFECTS (result) = 1;\n-  result = fold (result);\n+\n+  if (require_constant_value)\n+    {\n+      result = fold_initializer (result);\n+\n+      if (TREE_CONSTANT (result)\n+\t  && (name == NULL_TREE\n+\t      || strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10) != 0))\n+\tpedwarn_init (\"initializer element is not constant\");\n+    }\n+  else\n+    result = fold (result);\n \n   if (VOID_TYPE_P (TREE_TYPE (result)))\n     return result;\n@@ -2586,7 +2600,8 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \n   if (argtype == 0)\n     argtype = TREE_TYPE (arg);\n-  return fold (build1 (code, argtype, arg));\n+  val = build1 (code, argtype, arg);\n+  return require_constant_value ? fold_initializer (val) : fold (val);\n }\n \n /* Return nonzero if REF is an lvalue valid for this language.\n@@ -4228,9 +4243,6 @@ static int constructor_depth;\n /* 0 if implicitly pushing constructor levels is allowed.  */\n int constructor_no_implicit = 0; /* 0 for C; 1 for some other languages.  */\n \n-static int require_constant_value;\n-static int require_constant_elements;\n-\n /* DECL node for which an initializer is being read.\n    0 means we are reading a constructor expression\n    such as (struct foo) {...}.  */\n@@ -7195,8 +7207,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     tree result = build (resultcode, build_type, op0, op1);\n \n     /* Treat expressions in initializers specially as they can't trap.  */\n-    result = initializer_stack ? fold_initializer (result)\n-\t\t\t       : fold (result);\n+    result = require_constant_value ? fold_initializer (result)\n+\t\t\t\t    : fold (result);\n \n     if (final_type != 0)\n       result = convert (final_type, result);"}, {"sha": "cbb0c496b23fe5988adc340aae8e3e4569c3b8bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf730f15c50fab842ac222b8e60d62737d5f0d9a", "patch": "@@ -1,3 +1,8 @@\n+2004-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/14649\n+\t* gcc.dg/pr14649-1.c: New test case.\n+\n 2004-06-07  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/tree-ssa/20030728-1.c: Fixup return value to not match"}, {"sha": "83a9f570eef3e0d0e3e86bc6d75da78f37373886", "filename": "gcc/testsuite/gcc.dg/pr14649-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf730f15c50fab842ac222b8e60d62737d5f0d9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c?ref=bf730f15c50fab842ac222b8e60d62737d5f0d9a", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/14649 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+double atan(double);\n+\n+const double pi = 4*atan(1.0);  /* { dg-warning \"(not constant)|(near initialization)\" } */\n+\n+const double ok = 4*__builtin_atan(1.0);\n+\n+double foo()\n+{\n+  double ok2 = 4*atan(1.0);\n+  return ok2;\n+}\n+"}]}