{"sha": "efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNzFmY2M0Y2IwZTk5ODliMjY1NWUwMzRjNTdjYzczYWU2NzlhOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-24T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-24T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "e57644693fd2df39aa54a5deef8f07a982976ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57644693fd2df39aa54a5deef8f07a982976ab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/comments", "author": null, "committer": null, "parents": [{"sha": "27f7ab27d1a514eaf538ae01840b42c6d12cb28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f7ab27d1a514eaf538ae01840b42c6d12cb28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f7ab27d1a514eaf538ae01840b42c6d12cb28f"}], "stats": {"total": 705, "additions": 704, "deletions": 1}, "files": [{"sha": "95aa1b5654faccd9341c322535b873b3308e1ef0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,190 @@\n+2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* Makefile.in: Add symtab-thunks.o\n+\t(GTFILES): Add symtab-thunks.h and symtab-thunks.cc; remove cgraphunit.c\n+\t* cgraph.c: Include symtab-thunks.h.\n+\t(cgraph_node::create_thunk): Update\n+\t(symbol_table::create_edge): Update\n+\t(cgraph_node::dump): Update\n+\t(cgraph_node::call_for_symbol_thunks_and_aliases): Update\n+\t(set_nothrow_flag_1): Update\n+\t(set_malloc_flag_1): Update\n+\t(set_const_flag_1): Update\n+\t(collect_callers_of_node_1): Update\n+\t(clone_of_p): Update\n+\t(cgraph_node::verify_node): Update\n+\t(cgraph_node::function_symbol): Update\n+\t(cgraph_c_finalize): Call thunk_info::release.\n+\t(cgraph_node::has_thunk_p): Update\n+\t(cgraph_node::former_thunk_p): Move here from cgraph.h; reimplement.\n+\t* cgraph.h (struct cgraph_thunk_info): Rename to symtab-thunks.h.\n+\t(cgraph_node): Remove thunk field; add thunk bitfield.\n+\t(cgraph_node::expand_thunk): Move to symtab-thunks.h\n+\t(symtab_thunks_cc_finalize): Declare.\n+\t(cgraph_node::has_gimple_body_p): Update.\n+\t(cgraph_node::former_thunk_p): Update.\n+\t* cgraphclones.c: Include symtab-thunks.h.\n+\t(duplicate_thunk_for_node): Update.\n+\t(cgraph_edge::redirect_callee_duplicating_thunks): Update.\n+\t(cgraph_node::expand_all_artificial_thunks): Update.\n+\t(cgraph_node::create_edge_including_clones): Update.\n+\t* cgraphunit.c: Include symtab-thunks.h.\n+\t(vtable_entry_type): Move to symtab-thunks.c.\n+\t(cgraph_node::analyze): Update.\n+\t(analyze_functions): Update.\n+\t(mark_functions_to_output): Update.\n+\t(thunk_adjust): Move to symtab-thunks.c\n+\t(cgraph_node::expand_thunk): Move to symtab-thunks.c\n+\t(cgraph_node::assemble_thunks_and_aliases): Update.\n+\t(output_in_order): Update.\n+\t(cgraphunit_c_finalize): Do not clear vtable_entry_type.\n+\t(cgraph_node::create_wrapper): Update.\n+\t* gengtype.c (open_base_files): Add symtab-thunks.h\n+\t* ipa-comdats.c (propagate_comdat_group): UPdate.\n+\t(ipa_comdats): Update.\n+\t* ipa-cp.c (determine_versionability): UPdate.\n+\t(gather_caller_stats): Update.\n+\t(count_callers): Update\n+\t(set_single_call_flag): Update\n+\t(initialize_node_lattices): Update\n+\t(call_passes_through_thunk_p): Update\n+\t(call_passes_through_thunk): Update\n+\t(propagate_constants_across_call): Update\n+\t(find_more_scalar_values_for_callers_subset): Update\n+\t(has_undead_caller_from_outside_scc_p): Update\n+\t* ipa-fnsummary.c (evaluate_properties_for_edge): Update.\n+\t(compute_fn_summary): Update.\n+\t(inline_analyze_function): Update.\n+\t* ipa-icf.c: Include symtab-thunks.h.\n+\t(sem_function::equals_wpa): Update.\n+\t(redirect_all_callers): Update.\n+\t(sem_function::init): Update.\n+\t(sem_function::parse): Update.\n+\t* ipa-inline-transform.c: Include symtab-thunks.h.\n+\t(inline_call): Update.\n+\t(save_inline_function_body): Update.\n+\t(preserve_function_body_p): Update.\n+\t* ipa-inline.c (inline_small_functions): Update.\n+\t* ipa-polymorphic-call.c: Include alloc-pool.h, symbol-summary.h,\n+\tsymtab-thunks.h\n+\t(ipa_polymorphic_call_context::ipa_polymorphic_call_context): Update.\n+\t* ipa-pure-const.c: Include symtab-thunks.h.\n+\t(analyze_function): Update.\n+\t* ipa-sra.c (check_for_caller_issues): Update.\n+\t* ipa-utils.c (ipa_reverse_postorder): Update.\n+\t(ipa_merge_profiles): Update.\n+\t* ipa-visibility.c (non_local_p): Update.\n+\t(cgraph_node::local_p): Update.\n+\t(function_and_variable_visibility): Update.\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Update.\n+\t* lto-cgraph.c: Include alloc-pool.h, symbol-summary.h and\n+\tsymtab-thunks.h\n+\t(lto_output_edge): Update.\n+\t(lto_output_node): Update.\n+\t(compute_ltrans_boundary): Update.\n+\t(output_symtab): Update.\n+\t(verify_node_partition): Update.\n+\t(input_overwrite_node): Update.\n+\t(input_node): Update.\n+\t* lto-streamer-in.c (fixup_call_stmt_edges): Update.\n+\t* symtab-thunks.cc: New file.\n+\t* symtab-thunks.h: New file.\n+\t* toplev.c (toplev::finalize): Call symtab_thunks_cc_finalize.\n+\t* trans-mem.c (ipa_tm_mayenterirr_function): Update.\n+\t(ipa_tm_execute): Update.\n+\t* tree-inline.c (expand_call_inline): Update.\n+\t* tree-nested.c (create_nesting_tree): Update.\n+\t(convert_all_function_calls): Update.\n+\t(gimplify_all_functions): Update.\n+\t* tree-profile.c (tree_profiling): Update.\n+\t* tree-ssa-structalias.c (associate_varinfo_to_alias): Update.\n+\t* tree.c (free_lang_data_in_decl): Update.\n+\t* value-prof.c (init_node_map): Update.\n+\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91741\n+\t* doc/invoke.texi: Document -Wsizeof-array-div.\n+\n+2020-10-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97552\n+\t* attribs.c (init_attr_rdwr_indices): Handle static VLA parameters.\n+\n+2020-10-23  Douglas Rupp  <rupp@adacore.com>\n+\n+\t* config/vxworks.h (VXWORKS_NET_LIBS_RTP): Use -lrtnet if\n+\trtnetStackLib.h is available,fallback to -lnet otherwise.\n+\n+2020-10-23  Douglas Rupp  <rupp@adacore.com>\n+\n+\t* gcc.c (if-exists-then-else): New built-in spec function.\n+\t* doc/invoke.texi: Document it.\n+\n+2020-10-23  Tulio Magno Quites Machado Filho  <tuliom@linux.ibm.com>\n+\n+\t* doc/extend.texi (PowerPC Built-in Functions): Replace\n+\textraneous characters with whitespace.\n+\n+2020-10-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (read_count_file): Never call gcov_sync with a negative\n+\tvalue.\n+\n+2020-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.in (PLUGIN_HEADERS): Add gomp-constants.h and $(EXPR_H).\n+\t(s-header-vars): Accept not just spaces but also tabs between *_H name\n+\tand =.  Handle common/config/ headers similarly to config.  Don't\n+\tthrow away everything from first ... to last / on the remaining\n+\tstring, instead skip just ... to corresponding last / without\n+\tintervening spaces and tabs.\n+\t(install-plugin): Treat common/config headers like config headers.\n+\t* config/i386/t-i386 (TM_H): Add\n+\t$(srcdir)/common/config/i386/i386-cpuinfo.h.\n+\n+2020-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97164\n+\t* stor-layout.c (layout_type): Also reject arrays where element size\n+\tis constant, but not a multiple of element alignment.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-loop-ivopts.c (analyze_and_mark_doloop_use): Bail out if\n+\tthe loop is subject to a pragma Unroll with no specific count.\n+\n+2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/mve.md (mve_vsubq<mode>): New entry for vsub instruction\n+\tusing expression 'minus'.\n+\t(mve_vsubq_f<mode>): Use minus instead of VSUBQ_F unspec.\n+\t* config/arm/neon.md (sub<mode>3, sub<mode>3_fp16): Removed.\n+\t(neon_vsub<mode>): Use gen_sub<mode>3 instead of gen_sub<mode>3_fp16.\n+\t* config/arm/vec-common.md (sub<mode>3): Use the new mode macros\n+\tARM_HAVE_<MODE>_ARITH. Use iterator VDQ instead of VALL.\n+\n+2020-10-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/97524\n+\t* lto-wrapper.c (make_exists): New function.\n+\t(run_gcc): Use it to check that make is present and working\n+\tfor parallel execution.\n+\n+2020-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2020-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* expr.c (expand_expr_real_1): Be more careful when\n+\texpanding a VECTOR_BOOLEAN_TYPE_P VECTOR_CSTs.\n+\n+2020-10-23  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Remove the redundant\n+\tLOOP_VINFO_FULLY_MASKED_P check.\n+\n 2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/arm/mve.md (mve_vsubq<mode>): New entry for vsub instruction"}, {"sha": "b858c4c782c277523a9023bc370157bea5ee1d7f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1 +1 @@\n-20201023\n+20201024"}, {"sha": "4b4e760bd370e34739916c287e256dd88d11fa47", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 393, "deletions": 0, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,396 @@\n+2020-10-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* adaint.c: On Darwin platforms, define st_atim to\n+\tst_atimespec. Likwise st_mtim to st_mtimespec.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (EXTRA_GNATRTL_NONTASKING_OBJS) [IA64/Linux]: Fix typo.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (EXTRA_GNATRTL_NONTASKING_OBJS) [IA64/Linux]: Fix typo.\n+\n+2020-10-23  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR ada/97504\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Select wraplf version\n+\tof Aux_Long_Long_Float for s390 and remaining sparc and\n+\tpowerpc targets.\n+\n+2020-10-23  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_SOCKETS_OBJS): New object\n+\tg-socpol$(objext) New source files noted: g-socpol.adb,\n+\tg-socpol.ads, g-socpol__dummy.adb, g-socpol__dummy.ads,\n+\tg-sopowa.adb, g-sopowa__posix.adb, g-sopowa__mingw.adb,\n+\tg-spogwa.adb, g-spogwa.ads.\n+\t* impunit.adb (Non_Imp_File_Names_95): New base filename\n+\tg-socpol in \"GNAT Library Units\" section for GNAT.Sockets.Poll\n+\tunit.\n+\t* libgnat/g-socket.ads, libgnat/g-socket.adb:\n+\t(Raise_Socket_Error): Moved from body to private part of\n+\tspecification to use in GNAT.Sockets.Poll.\n+\t* libgnat/g-socpol.ads, libgnat/g-socpol.adb: Main unit of the\n+\timplementation.\n+\t* libgnat/g-socpol__dummy.ads, libgnat/g-socpol__dummy.adb:\n+\tEmpty unit for the systems without sockets support.\n+\t* libgnat/g-spogwa.ads, libgnat/g-spogwa.adb: Generic unit\n+\timplementing sockets poll on top of select system call.\n+\t* libgnat/g-sopowa.adb (Wait): Separate implementation for\n+\toperation systems with poll system call support.\n+\t* libgnat/g-sopowa__posix.adb (Wait): Separate implementation\n+\tfor POSIX select system call.\n+\t* libgnat/g-sopowa__mingw.adb (Wait): Separate implementation\n+\tfor Windows select system call.\n+\t* gsocket.h (_WIN32_WINNT): Increase to 0x0600 for winsock2.h to\n+\tallow WSAPoll related definitions.\n+\t* s-oscons-tmplt.c: Fix comment next to #endif for\n+\t#if defined (__linux__) || defined (__ANDROID__) line.  Include\n+\t<poll.h> for all except VxWorks and Windows.\n+\t(SIZEOF_nfds_t): New definition.\n+\t(SIZEOF_fd_type): New definition.\n+\t(SIZEOF_pollfd_events): New definition.\n+\t(POLLIN, POLLPRI, POLLOUT, POLLERR, POLLHUP, POLLNVAL): New\n+\tdefinitions for VxWorks to be able to emulate poll on top of\n+\tselect in it.  Define POLLPRI as zero on Windows as it is not\n+\tsupported there.\n+\t(Poll_Linkname): New definition, because the poll system call\n+\thas different name in Windows and POSIX.\n+\n+2020-10-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Apply_Accessibility_Check): Skip checks against\n+\tthe extra accessibility of a function result when in Ada 2005\n+\tmode or earlier.\n+\t* exp_ch3.adb (Build_Initialization_Call): Modify accessibility\n+\tlevel calls to use Accessibility_Level.\n+\t(Expand_N_Object_Declaration): Modify accessibility level calls\n+\tto use Accessibility_Level.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Add static check\n+\tfor anonymous access discriminants. Remove unneeded propagation\n+\tof accessibility actual.\n+\t(Expand_N_In): Modify accessibility level calls to use\n+\tAccessibility_Level.\n+\t(Expand_N_Type_Conversion): Modify accessibility level calls to\n+\tuse Accessibility_Level.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Modify\n+\taccessibility level calls to use Accessibility_Level.\n+\t* exp_ch6.adb (Expand_Call_Helper): Rewrite accessibility\n+\tcalculation for the extra accessibility of result actual in\n+\tfunction calls, and modify accessibility level calls to use\n+\tAccessibility_Level.\n+\t(Check_Against_Result_Level): Removed.\n+\t* exp_ch9.adb (Expand_N_Requeue_Statement): Add dynamic\n+\taccessibility check for requeues\n+\t* sem_attr.adb (Resolve_Attribute): Modify accessibility level\n+\tcalls to use Accessibility_Level.\n+\t* sem_ch13.adb (Associate_Storage_Pool): Modify accessibility\n+\tlevel calls to use Accessibility_Level.\n+\t* sem_ch4.adb (Analyze_Call): Add static check for explicitly\n+\taliased formals in function calls within return statements.\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Rewrite\n+\troutine to account for non-aggregate return objects.\n+\t(Generate_Minimum_Accessibility): Created.\n+\t(Analyze_Call): Modify accessibility level calls to use\n+\tAccessibility_Level.\n+\t(Analyze_Subprogram_Body_Helper): Add generation of minimum\n+\taccessibility for the extra accessibility of the function\n+\tresult.\n+\t* sem_ch9.adb (Analyze_Requeue): Modify accessibility level\n+\tcalls to use Accessibility_Level.\n+\t* sem_res.adb: (Check_Aliased_Parameters): Modify accessibility\n+\tlevel calls to use Accessibility_Level.\n+\t(Valid_Conversion): Modify accessibility level calls to use\n+\tAccessibility_Level.\n+\t* sem_util.adb, sem_util.ads (Accessibility_Level_Helper):\n+\tRenamed to Accessibility_Level, add detection for functions in\n+\tprefix notation, and add cases where to return zero when\n+\tspecified. Modified to take new, more descriptive, parameters.\n+\t(Accessibility_Level): Created.\n+\t(Function_Call_Level): Removed.\n+\t(Function_Call_Or_Allocator_Level): Created to centralize the\n+\tcalculation accessibility levels for function calls and\n+\tallocators.\n+\t(Static_Accessibility_Level): Removed.\n+\t(Dynamic_Accessibility_Level): Removed.\n+\t(Get_Dynamic_Accessibility): Renamed from Get_Accessibility.\n+\t(In_Return_Value): Created to determine if a given expression\n+\tcontributes to the current function's return value.\n+\t(Is_Master): Created.\n+\t(Is_Explicitly_Aliased): Created\n+\n+2020-10-23  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Document\n+\t--no-comments-fill.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Analyze_Entry_Or_Subprogram_Contract,\n+\tAnalyze_Subprogram_Body_Stub_Contract): Fix missing references\n+\tto Subprogram_Variant where similar references to Contract_Cases\n+\tare present.\n+\t* sem_prag.adb (Analyze_Contract_Case, Analyze_Variant): Check\n+\tthat aggregate parameter has no expressions.\n+\t(Analyze_Pragma): Replace Contract_Cases with Subprogram_Variant\n+\tin a copy-pasted comment.\n+\n+2020-10-23  Philippe Gil  <gil@adacore.com>\n+\n+\t* libgnat/g-socket.ads: Fix comment typo.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (VFA): Remove uage\n+\trestrictions in conjunction with Atomic and Aliased.\n+\t* gnat_rm.texi: Regenerate.\n+\t* aspects.ads (Aspect_Id): Add Aspect_Full_Access_Only.\n+\t(Is_Representation_Aspect): Likewise.\n+\t(Aspect_Names): Likewise.\n+\t(Aspect_Delay): Likewise.\n+\t* einfo.ads (Is_Atomic_Or_VFA): Rename into...\n+\t(Is_Full_Access): ...this.\n+\t(Is_Volatile_Full_Access): Document new usage for Full_Access_Only.\n+\t* einfo.adb (Is_Atomic_Or_VFA): Rename into...\n+\t(Is_Full_Access): ...this.\n+\t* freeze.ads (Is_Atomic_VFA_Aggregate): Rename into...\n+\t(Is_Full_Access_Aggregate): ...this.\n+\t* freeze.adb (Is_Atomic_VFA_Aggregate): Rename into...\n+\t(Is_Full_Access_Aggregate): ...this.  Adjust to above renaming.\n+\t(Freeze_Array_Type): Likewise.\n+\t(Freeze_Entity): Likewise.\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Likewise.\n+\t(Expand_Record_Aggregate): Likewise.\n+\t* exp_ch4.adb (Expand_N_Op_Eq): Likewise.\n+\t* exp_ch5.adb (Expand_Assign_Array): Likewise.\n+\t* exp_ch8.adb (Evaluation_Required): Likewise.\n+\t* layout.adb (Layout_Type): Likewise.\n+\t(Set_Composite_Alignment): Likewise.\n+\t* sem_aux.ads (Has_Rep_Item): Delete.\n+\t* sem_aux.adb (Has_Rep_Item): Likewise.\n+\t* sem_attr.adb (Resolve_Attribute) <Attribute_Access>: Implement\n+\tnew legality rules in C.6(12).\n+\t* sem_ch12.adb (Instantiate_Object): Likewise.\n+\t* sem_res.adb (Resolve_Actuals): Likewise.\n+\t* sem_ch13.adb (Inherit_Delayed_Rep_Aspects): Deal with aspect\n+\tFull_Access_Only.\n+\t(Check_False_Aspect_For_Derived_Type): Likewise.\n+\t(Make_Pragma_From_Boolean_Aspect): Test for the presence of Expr.\n+\tDeal with aspect Full_Access_Only.\n+\t(Analyze_Aspects_At_Freeze_Point): Likewise.\n+\t(Analyze_One_Aspect): Do not set Delay_Required to true even for\n+\tAlways_Delay boolean aspects if they have no expression.  Force\n+\tDelay_Required to true for aspect Full_Access_Only in all cases.\n+\tReject aspect Full_Access_Only if not in Ada 2020 mode.\n+\t(Check_Aspect_At_End_Of_Declarations): Deal with empty expression.\n+\t(Check_Aspect_At_Freeze_Point): Likewise.\n+\t(Rep_Item_Entity): Delete.\n+\t(Inherit_Aspects_At_Freeze_Point): Align handling for Bit_Order\n+\twith that for Scalar_Storage_Order.\n+\t* sem_prag.adb (Check_Atomic_VFA): Delete.\n+\t(Check_VFA_Conflicts): Likewise.\n+\t(Check_Full_Access_Only): New procedure.\n+\t(Process_Atomic_Independent_Shared_Volatile): Call to implement\n+\tthe new legality checks in C.6(8/2) and mark the entity last.\n+\t(Analyze_Pragma) <Pragma_Atomic_Components>: Remove obsolete check.\n+\t* sem_util.ads (Is_Atomic_Or_VFA_Object): Rename into...\n+\t(Is_Full_Access_Object): ...this.\n+\t(Is_Subcomponent_Of_Atomic_Object): Rename into...\n+\t(Is_Subcomponent_Of_Full_Access_Object): ...this.\n+\t* sem_util.adb (Inherit_Rep_Item_Chain): Use Present_In_Rep_Item.\n+\t(Is_Atomic_Or_VFA_Object): Rename into...\n+\t(Is_Full_Access_Object): ...this.\n+\t(Is_Subcomponent_Of_Atomic_Object): Rename into...\n+\t(Is_Subcomponent_Of_Full_Access_Object): ...this and adjust.\n+\t* snames.ads-tmpl (Name_Full_Access_Only): New name of aspect.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust for renaming.\n+\t(promote_object_alignment): Likewise.\n+\t(gnat_to_gnu_field): Likewise.  Rename local variable and use\n+\tspecific qualifier in error message for Volatile_Full_Access.\n+\t* gcc-interface/trans.c (lvalue_required_p): Likewise.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib-writ.ads, lib-writ.adb (Write_ALI): No longer read\n+\texisting ALI files in -gnatc mode.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/g-socthi__mingw.adb (C_Select): Fix logic in code and\n+\tmake it explicit that we are checking against null values before\n+\tdereferencing them.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): For an enumeration type\n+\tsubject to pragma Discard_Names, convert 'Pos to Long_Long_Integer\n+\tbefore applying 'Img to the result.\n+\n+2020-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Type_Refs): Add guard on freezing of the\n+\tdesignated type of an access type appearing in the expression,\n+\twhen expression includes an explicit dereference whose prefix\n+\tincludes a function call.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Delta_Or_Update): Handle\n+\tsubtype_indication; do not apply range checks for ranges; add\n+\tcomment saying that others_choices is not allowed.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Aggregate,\n+\tExpand_SPARK_Delta_Or_Update): Expand\n+\tIterated_Component_Association occurring within delta\n+\taggregates.\n+\t(Expand_SPARK): Apply SPARK-specific expansion to ordinary\n+\taggregates.\n+\n+2020-10-23  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* exp_util.adb, exp_util.ads\n+\t(Containing_Package_With_Ext_Axioms,\n+\tHas_Annotate_Pragma_For_External_Axiomatizations): Removed.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Removed code\n+\trelated to external axiomatizations.\n+\t* einfo.ads\n+\t(Is_Generic_Actual_Subprogram): Removed comment about external\n+\taxiomatization.\n+\n+2020-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Aggregate): Do not call\n+\tResolve_Container_Aggregate if compilation version is earlier\n+\tthan Ada_2020.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Improve\n+\tdocumentation of pragma Abort_Defer.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-23  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_prag.adb (Etype_Or_Dim3): New function.\n+\t(Expand_Pragma_Cuda_Execute): Use Etype_Or_Dim3 for temporary\n+\tdecls.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-fileio.adb (Open): Fix setting of Tempfile.\n+\n+2020-10-23  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_prag.adb (Get_Launch_Kernel_Arg_Type): Renamed to\n+\tGet_Nth_Arg_Type and made more generic.\n+\t(Build_Dim3_Declaration): Now builds a CUDA.Internal.Dim3\n+\tinstead of a CUDA.Vector_Types.Dim3.\n+\t(Build_Shared_Memory_Declaration): Now infers needed type from\n+\tLaunch_Kernel instead of using a hard-coded type.\n+\t(Expand_Pragma_CUDA_Execute): Build additional temporaries to\n+\tstore Grids and Blocks.\n+\t* rtsfind.ads: Move Launch_Kernel from public to internal\n+\tpackage.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Complete_Object_Operation): Only mark entities\n+\treferenced if we are compiling the extended main unit.\n+\t* sem_attr.adb (Analyze_Attribute [Attribute_Tag]): Record a\n+\treference on the type and its scope.\n+\n+2020-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Is_Uninitialized_Aggregate): Recognize an array\n+\taggregate with box initialization, scalar components, and no\n+\tcomponent default values.\n+\t(Freeze_Entity, Check_Address_Clause): Call it, and simplify\n+\tfreeze code for entity by removing useless assignment.\n+\n+2020-10-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Subprogram renamings\n+\tcannot be overridden.\n+\t(Derive_Subprogram): Enable setting attribute\n+\tRequires_Overriding on functions with controlling access results\n+\tof record extensions with a null extension part require\n+\toverriding (AI95-00391/06).\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): Push scope of\n+\tthe implicit loop before entering name of the index parameter,\n+\tnot after; enter name no matter if the identifier has been\n+\tdecorated before.\n+\n+2020-10-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Call): In the case where the call is not\n+\toverloaded, check for a call to an abstract nondispatching\n+\toperation and flag an error.\n+\n+2020-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Rewrite again code enabling\n+\tor disabling the support for 128-bit integer types.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* alloc.ads, aspects.adb, aspects.ads, atree.adb, atree.ads,\n+\tcasing.adb, casing.ads, csets.adb, csets.ads, debug.adb, debug.ads,\n+\teinfo.adb, einfo.ads, elists.adb, elists.ads, fname.adb, fname.ads,\n+\tgnatvsn.adb, gnatvsn.ads, hostparm.ads, indepsw-aix.adb,\n+\tindepsw-darwin.adb, indepsw-gnu.adb, indepsw.adb, indepsw.ads,\n+\tkrunch.adb, krunch.ads, lib-list.adb, lib-sort.adb, lib.adb, lib.ads,\n+\tnamet-sp.adb, namet-sp.ads, namet.adb, namet.ads, nlists.adb,\n+\tnlists.ads, opt.adb, opt.ads, output.adb, output.ads, rident.ads,\n+\tscans.adb, scans.ads, scil_ll.adb, scil_ll.ads, sem_aux.ads,\n+\tsem_aux.adb, sfn_scan.adb, sinfo.adb, sinfo.ads, sinput.adb,\n+\tsinput.ads, snames.adb-tmpl, snames.ads-tmpl, stand.ads,\n+\tstringt.adb, stringt.ads, table.adb, table.ads, types.adb,\n+\ttypes.ads, uintp.adb, uintp.ads, uname.adb, uname.ads,\n+\turealp.adb, urealp.ads, vast.adb, vast.ads, widechar.adb,\n+\twidechar.ads: Update header.\n+\n+2020-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.adb (From_String): Take advantage of\n+\tLong_Long_Long_Integer.\n+\t* libgnat/s-genbig.ads, libgnat/s-genbig.adb (To_Bignum): New\n+\tfunction taking a Long_Long_Long_Integer.\n+\n+2020-10-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Call_Helper): In the selected\n+\tcomponent case, test if a prefix is a function call and whether\n+\tthe subprogram call is not being used in its entirety and use\n+\tthe Innermost_Master_Scope_Depth in that case.\n+\t(Innermost_Master_Scope_Depth): Test against the node_par\n+\tinstead of its identifier to avoid misattributing unnamed blocks\n+\tas not being from source.\n+\t(Function_Call_Level): Add calculation for whether a subprogram\n+\tcall is initializing an object in its entirety.\n+\t(Subprogram_Call_Level): Renamed to Function_Call_Level.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_External_Properties): Rewrite to match the\n+\tSPARK RM description.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Check_Type_Or_Object_External_Properties):\n+\tCleanup.\n+\n+2020-10-23  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Set the\n+\toutput parameter Expr_Val to the (implicit) pragma argument even\n+\twhen returning early.\n+\n 2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* Makefile.rtl (GNATRTL_128BIT_PAIRS): Add i-cexten.ads."}, {"sha": "27a59c2a22f217977b9491c3501d5e32b18b8e64", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,23 @@\n+2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-common.c (c_common_finalize_early_debug): Update for new thunk api.\n+\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91741\n+\t* c-common.c (verify_tree): Handle PAREN_SIZEOF_EXPR.\n+\t(c_common_init_ts): Likewise.\n+\t* c-common.def (PAREN_SIZEOF_EXPR): New tree code.\n+\t* c-common.h (maybe_warn_sizeof_array_div): Declare.\n+\t* c-warn.c (sizeof_pointer_memaccess_warning): Unwrap NOP_EXPRs.\n+\t(maybe_warn_sizeof_array_div): New function.\n+\t* c.opt (Wsizeof-array-div): New option.\n+\n+2020-10-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97463\n+\t* c-warn.c (warn_parm_ptrarray_mismatch): Move null test earlier.\n+\n 2020-10-22  Martin Liska  <mliska@suse.cz>\n \n \tPR c/94722"}, {"sha": "8c6893b9f31b0c1851a91a6d590393ae5cbce80a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,17 @@\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91741\n+\t* c-parser.c (c_parser_binary_expression): Implement -Wsizeof-array-div.\n+\t(c_parser_postfix_expression): Set PAREN_SIZEOF_EXPR.\n+\t(c_parser_expr_list): Handle PAREN_SIZEOF_EXPR like SIZEOF_EXPR.\n+\t* c-tree.h (char_type_p): Declare.\n+\t* c-typeck.c (char_type_p): No longer static.\n+\n+2020-10-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97552\n+\t* c-decl.c (get_parm_array_spec): Handle static VLA parameters.\n+\n 2020-09-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/50584"}, {"sha": "67cbc420147dd5912097c1f3b172c3d1963f2ab8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,8 @@\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91741\n+\t* typeck.c (cp_build_binary_op): Implement -Wsizeof-array-div.\n+\n 2020-10-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/97328"}, {"sha": "2d7945cc6ef21f9cfc303e1b449871028b4288e9", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,7 @@\n+2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* decl.cc (finish_thunk): Update for new thunk api.\n+\n 2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* decl.cc: Include tree-nested.h"}, {"sha": "5fbbce841c59254e7ffa7bdaea6bfbce5f890e9c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,8 @@\n+2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-partition.c (add_symbol_to_partition_1): Update for new thunk\n+\tapi.\n+\n 2020-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* lto-common.c (lto_file_finalize): Set exact argument of a vector"}, {"sha": "78166d21a44ead7498189f05c59e9d941e9143e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,60 @@\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/Wsizeof-array-div1.c: Expect certain warnings on\n+\tlp64 targets only.\n+\t* g++.dg/warn/Wsizeof-array-div2.C: Only run on lp64 targets.\n+\n+2020-10-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91741\n+\t* c-c++-common/Wsizeof-pointer-div.c: Add dg-warning.\n+\t* c-c++-common/Wsizeof-array-div1.c: New test.\n+\t* g++.dg/warn/Wsizeof-array-div1.C: New test.\n+\t* g++.dg/warn/Wsizeof-array-div2.C: New test.\n+\n+2020-10-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97552\n+\t* gcc.dg/Wvla-parameter-2.c: Adjust text of expected warning.\n+\t* gcc.dg/Wnonnull-5.c: New test.\n+\n+2020-10-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97463\n+\t* gcc.dg/pr97463.c: New test.\n+\n+2020-10-23  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/vec-rlmi-rlnm.c: Update xxlor expect.\n+\n+2020-10-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/compat/eh/filter2_y.C: Add noexcept(false) to\n+\tdestructor.\n+\n+2020-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97164\n+\t* c-c++-common/pr97164.c: New test.\n+\t* gcc.c-torture/execute/pr36093.c: Move ...\n+\t* gcc.dg/pr36093.c: ... here.  Add dg-do compile and dg-error\n+\tdirectives.\n+\t* gcc.c-torture/execute/pr43783.c: Move ...\n+\t* gcc.dg/pr43783.c: ... here.  Add dg-do compile, dg-options and\n+\tdg-error directives.\n+\n+2020-10-23  Dennis Zhang  <dennis.zh@live.com>\n+\n+\t* gcc.target/arm/simd/mve-vsub_1.c: New test.\n+\n+2020-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2020-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* gcc.target/i386/pr97521.c: New testcase.\n+\n 2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/simd/mve-vsub_1.c: New test."}, {"sha": "c8616a2bd6d014906c281cc165472e79de9657ba", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,9 @@\n+2020-10-23  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/gthr-vxworks-thread.c: #include gthr.h before\n+\ttesting the guard defined there.\n+\t* config/gthr-vxworks-cond.c: Likewise.\n+\n 2020-10-21  Douglas Rupp  <rupp@adacore.com>\n \t    Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "ce4b57e4bafe40259bf31d190fc7ea12d4dd5359", "filename": "libgcc/config/libbid/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libgcc%2Fconfig%2Flibbid%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libgcc%2Fconfig%2Flibbid%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,8 @@\n+2020-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97164\n+\t* bid_functions.h (UINT192): Decrease alignment to 8 bytes.\n+\n 2020-05-05  Martin Liska  <mliska@suse.cz>\n \n \tPR libgcc/92565"}, {"sha": "e6656ec6497d7011d84ef5670c8b10c2a517e40e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe71fcc4cb0e9989b2655e034c57cc73ae679a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=efe71fcc4cb0e9989b2655e034c57cc73ae679a9", "patch": "@@ -1,3 +1,10 @@\n+2020-10-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (single_view::single_view): Mark the\n+\tin place constructor explicit as per LWG 3428.\n+\t(take_view): Remove the constraint on the deduction guide's\n+\ttemplate parameter as per LWG 3447.\n+\n 2020-10-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/memory_resource: Include <tuple>."}]}