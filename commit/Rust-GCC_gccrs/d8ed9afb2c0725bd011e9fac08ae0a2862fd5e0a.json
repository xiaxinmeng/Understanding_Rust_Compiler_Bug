{"sha": "d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlZDlhZmIyYzA3MjViZDAxMWU5ZmFjMDhhZTBhMjg2MmZkNWUwYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-31T14:05:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-31T14:05:07Z"}, "message": "caller-save.c (restore_referenced_regs): When restoring a referenced hard register...\n\n\t* caller-save.c (restore_referenced_regs): When restoring a\n\treferenced hard register, use CEIL instead of truncating\n\tdivide to determine the maximum number of registers to\n\trestore.\n\t(insert_save_restore): Document maxrestore parameter.\n\t(CEIL): Define.\n\nFrom-SVN: r2003", "tree": {"sha": "2b9fde5d5ffe10508f9008633b0e85396032af72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9fde5d5ffe10508f9008633b0e85396032af72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a/comments", "author": null, "committer": null, "parents": [{"sha": "812dd8a30d0b036bffca9780cfdef45d934d8558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812dd8a30d0b036bffca9780cfdef45d934d8558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812dd8a30d0b036bffca9780cfdef45d934d8558"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "ed4c7819336e95a154516b87bd450c43e863233e", "filename": "gcc/caller-save.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=d8ed9afb2c0725bd011e9fac08ae0a2862fd5e0a", "patch": "@@ -28,6 +28,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"reload.h\"\n #include \"expr.h\"\n \n+#define CEIL(x,y) (((x) + (y) - 1) / (y))\n+\n /* Modes for each hard register that we can save.  The smallest mode is wide\n    enough to save the entire contents of the register.  When saving the\n    register because it is live we first try to save in multi-register modes.\n@@ -593,7 +595,7 @@ restore_referenced_regs (x, insn, insn_mode)\n \t  for (i = regno; i < endregno; i++)\n \t    if (TEST_HARD_REG_BIT (hard_regs_need_restore, i))\n \t      i += insert_save_restore (insn, 0, i, insn_mode, \n-\t\t\t\tGET_MODE_SIZE (GET_MODE (x)) / UNITS_PER_WORD);\n+\t\t   CEIL (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD));\n \t}\n \n       return;\n@@ -612,7 +614,9 @@ restore_referenced_regs (x, insn, insn_mode)\n \f\n /* Insert a sequence of insns to save or restore, SAVE_P says which,\n    REGNO.  Place these insns in front of INSN.  INSN_MODE is the mode\n-   to assign to these insns. \n+   to assign to these insns.   MAXRESTORE is the maximum number of registers\n+   which should be restored during this call (when SAVE_P == 0).  It should\n+   never be less than 1 since we only work with entire registers.\n \n    Note that we have verified in init_caller_save that we can do this\n    with a simple SET, so use it.  Set INSN_CODE to what we save there"}]}