{"sha": "08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjOWVmMDg5ZmRiZTE5ZTY0ODAxNmRiN2NiNGM5ZmRkNjY1YmNjYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-26T09:53:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:05Z"}, "message": "[Ada] Fix invalid JSON real numbers generated with -gnatRj\n\ngcc/ada/\n\n\t* urealp.ads (UR_Write_To_JSON): Declare.\n\t* urealp.adb (Decimal_Exponent_Hi): Treat numbers in base 10\n\tspecially and rewrite handling of numbers in other bases.\n\t(Decimal_Exponent_Lo): Likewise.\n\t(Normalize): Minor tweak.\n\t(UR_Write_To_JSON): New wrapper procedure around UR_Write.\n\t* repinfo.adb (List_Type_Info): When the output is to JSON, call\n\tUR_Write_To_JSON instead of UR_Write.", "tree": {"sha": "d90f183fa107a0f6942f4b86f9061cc2a09f3248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90f183fa107a0f6942f4b86f9061cc2a09f3248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05447313c9acb24e0fad6305ad333077707de9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05447313c9acb24e0fad6305ad333077707de9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05447313c9acb24e0fad6305ad333077707de9ba"}], "stats": {"total": 146, "additions": 126, "deletions": 20}, "files": [{"sha": "137c867c05f5d186dfb694b768ce0088736d86ea", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "patch": "@@ -2030,7 +2030,7 @@ package body Repinfo is\n          if List_Representation_Info_To_JSON then\n             Write_Line (\",\");\n             Write_Str (\"  \"\"Small\"\": \");\n-            UR_Write (Small_Value (Ent));\n+            UR_Write_To_JSON (Small_Value (Ent));\n          else\n             Write_Str (\"for \");\n             List_Name (Ent);\n@@ -2052,9 +2052,9 @@ package body Repinfo is\n                if List_Representation_Info_To_JSON then\n                   Write_Line (\",\");\n                   Write_Str (\"  \"\"Range\"\": [ \");\n-                  UR_Write (Realval (Low_Bound (R)));\n+                  UR_Write_To_JSON (Realval (Low_Bound (R)));\n                   Write_Str (\", \");\n-                  UR_Write (Realval (High_Bound (R)));\n+                  UR_Write_To_JSON (Realval (High_Bound (R)));\n                   Write_Str (\" ]\");\n                else\n                   Write_Str (\"for \");"}, {"sha": "1367ad3a9e6ad40762b737d590f64e1a7ce6b1a3", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 119, "deletions": 17, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "patch": "@@ -174,16 +174,30 @@ package body Urealp is\n          return UI_Decimal_Digits_Hi (Val.Num) -\n                 UI_Decimal_Digits_Lo (Val.Den);\n \n-      --  For based numbers, just subtract the decimal exponent from the\n-      --  high estimate of the number of digits in the numerator and add\n-      --  one to accommodate possible round off errors for non-decimal\n-      --  bases. For example:\n+      --  For based numbers, get the maximum number of digits in the numerator\n+      --  minus one and the either exact or floor value of the decimal exponent\n+      --  of the denominator, and subtract. For example:\n \n-      --     1_500_000 / 10**4 = 1.50E-2\n+      --      321 / 10**3 = 3.21E-1\n+      --      435 / 5**7  = 5.57E-3\n \n-      else -- Val.Rbase /= 0\n-         return UI_Decimal_Digits_Hi (Val.Num) -\n-                Equivalent_Decimal_Exponent (Val) + 1;\n+      else\n+         declare\n+            E : Int;\n+\n+         begin\n+            if Val.Rbase = 10 then\n+               E := UI_To_Int (Val.Den);\n+\n+            else\n+               E := Equivalent_Decimal_Exponent (Val);\n+               if E < 0 then\n+                  E := E - 1;\n+               end if;\n+            end if;\n+\n+            return UI_Decimal_Digits_Hi (Val.Num) - 1 - E;\n+         end;\n       end if;\n    end Decimal_Exponent_Hi;\n \n@@ -213,16 +227,30 @@ package body Urealp is\n          return UI_Decimal_Digits_Lo (Val.Num) -\n                 UI_Decimal_Digits_Hi (Val.Den) - 1;\n \n-      --  For based numbers, just subtract the decimal exponent from the\n-      --  low estimate of the number of digits in the numerator and subtract\n-      --  one to accommodate possible round off errors for non-decimal\n-      --  bases. For example:\n+      --  For based numbers, get the minimum number of digits in the numerator\n+      --  minus one and the either exact or ceil value of the decimal exponent\n+      --  of the denominator, and subtract. For example:\n \n-      --     1_500_000 / 10**4 = 1.50E-2\n+      --      321 / 10**3 = 3.21E-1\n+      --      435 / 5**7  = 5.57E-3\n \n-      else -- Val.Rbase /= 0\n-         return UI_Decimal_Digits_Lo (Val.Num) -\n-                Equivalent_Decimal_Exponent (Val) - 1;\n+      else\n+         declare\n+            E : Int;\n+\n+         begin\n+            if Val.Rbase = 10 then\n+               E := UI_To_Int (Val.Den);\n+\n+            else\n+               E := Equivalent_Decimal_Exponent (Val);\n+               if E > 0 then\n+                  E := E + 1;\n+               end if;\n+            end if;\n+\n+            return UI_Decimal_Digits_Lo (Val.Num) - 1 - E;\n+         end;\n       end if;\n    end Decimal_Exponent_Lo;\n \n@@ -374,7 +402,7 @@ package body Urealp is\n       Tmp : Uint;\n       Num : Uint;\n       Den : Uint;\n-      M   : constant Uintp.Save_Mark := Uintp.Mark;\n+      M   : constant Uintp.Save_Mark := Mark;\n \n    begin\n       --  Start by setting J to the greatest of the absolute values of the\n@@ -1486,6 +1514,80 @@ package body Urealp is\n       end if;\n    end UR_Write;\n \n+   ----------------------\n+   -- UR_Write_To_JSON --\n+   ----------------------\n+\n+   --  We defer to the implementation of UR_Write in all cases, either directly\n+   --  for values that are naturally written in a JSON compatible format, or by\n+   --  first computing a decimal approxixmation for other values.\n+\n+   procedure UR_Write_To_JSON (Real : Ureal) is\n+      Val  : constant Ureal_Entry      := Ureals.Table (Real);\n+      Imrk : constant Uintp.Save_Mark  := Mark;\n+      Rmrk : constant Urealp.Save_Mark := Mark;\n+\n+      T : Ureal;\n+\n+   begin\n+      --  Zero is zero\n+\n+      if Val.Num = 0 then\n+         T := Real;\n+\n+      --  For constants with a denominator of zero, the value is simply the\n+      --  numerator value, since we are dividing by base**0, which is 1.\n+\n+      elsif Val.Den = 0 then\n+         T := Real;\n+\n+      --  Small powers of 2 get written in decimal fixed-point format\n+\n+      elsif Val.Rbase = 2\n+        and then Val.Den <= 3\n+        and then Val.Den >= -16\n+      then\n+         T := Real;\n+\n+      --  Constants in base 10 can be written in normal Ada literal style\n+\n+      elsif Val.Rbase = 10 then\n+         T := Real;\n+\n+      --  Rationals where numerator is divisible by denominator can be output\n+      --  as literals after we do the division. This includes the common case\n+      --  where the denominator is 1.\n+\n+      elsif Val.Rbase = 0 and then Val.Num mod Val.Den = 0 then\n+         T := Real;\n+\n+      --  For other constants, compute an approxixmation in base 10\n+\n+      else\n+         declare\n+            A : constant Ureal := UR_Abs (Real);\n+            --  The absolute value\n+\n+            E : constant Uint  :=\n+                  (if A < Ureal_1\n+                   then UI_From_Int (3 - Decimal_Exponent_Lo (Real))\n+                   else Uint_3);\n+            --  The exponent for at least 3 digits after the decimal point\n+\n+            Num : constant Uint :=\n+                    UR_To_Uint (UR_Mul (A, UR_Exponentiate (Ureal_10, E)));\n+            --  The numerator appropriately rounded\n+\n+         begin\n+            T := UR_From_Components (Num, E, 10, Val.Negative);\n+         end;\n+      end if;\n+\n+      UR_Write (T);\n+      Release (Imrk);\n+      Release (Rmrk);\n+   end UR_Write_To_JSON;\n+\n    -------------\n    -- Ureal_0 --\n    -------------"}, {"sha": "5c625f9b949ff01b4cea9fdabdf56dd5fcd5df65", "filename": "gcc/ada/urealp.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Furealp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c9ef089fdbe19e648016db7cb4c9fdd665bccc/gcc%2Fada%2Furealp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.ads?ref=08c9ef089fdbe19e648016db7cb4c9fdd665bccc", "patch": "@@ -288,6 +288,10 @@ package Urealp is\n    --  In the case where an expression is output, if Brackets is set to True,\n    --  the expression is surrounded by square brackets.\n \n+   procedure UR_Write_To_JSON (Real : Ureal);\n+   --  Writes value of Real to standard output in the JSON data interchange\n+   --  format specified by the ECMA-404 standard, for the -gnatRj output.\n+\n    procedure pr (Real : Ureal);\n    pragma Export (Ada, pr);\n    --  Writes value of Real to standard output with a terminating line return,"}]}