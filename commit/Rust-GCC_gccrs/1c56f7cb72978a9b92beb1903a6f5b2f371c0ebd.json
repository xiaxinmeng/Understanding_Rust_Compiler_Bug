{"sha": "1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1NmY3Y2I3Mjk3OGE5YjkyYmViMTkwM2E2ZjViMmYzNzFjMGViZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-09-17T09:12:24Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-09-17T09:12:24Z"}, "message": "hashtable.h (_Hashtable<>::__rehash_policy(const _RehashPolicy&)): Commit the modification of the policy only if no exception occured.\n\n2011-09-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable.h (_Hashtable<>::__rehash_policy(const\n\t_RehashPolicy&)): Commit the modification of the policy only if no\n\texception occured.\n\t* testsuite/23_containers/unordered_set/max_load_factor/robustness.cc:\n\tNew.\n\nFrom-SVN: r178927", "tree": {"sha": "61b2d732f425b25d21ff17fc77c5100c1255f1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b2d732f425b25d21ff17fc77c5100c1255f1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/comments", "author": null, "committer": null, "parents": [{"sha": "ab2fd9953bad95e662e70215b955d13db538fd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2fd9953bad95e662e70215b955d13db538fd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2fd9953bad95e662e70215b955d13db538fd2d"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "4e0ddf4c191e91996de2d1d660f87d659df4df88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "patch": "@@ -1,3 +1,11 @@\n+2011-09-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::__rehash_policy(const\n+\t_RehashPolicy&)): Commit the modification of the policy only if no\n+\texception occured.\n+\t* testsuite/23_containers/unordered_set/max_load_factor/robustness.cc:\n+\tNew.\n+\n 2011-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/array/comparison_operators/"}, {"sha": "5c740668b69619547d4c53f89f8b71ff3e34cc83", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "patch": "@@ -741,10 +741,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     __rehash_policy(const _RehashPolicy& __pol)\n     {\n-      _M_rehash_policy = __pol;\n       size_type __n_bkt = __pol._M_bkt_for_elements(_M_element_count);\n       if (__n_bkt > _M_bucket_count)\n-\t_M_rehash(__n_bkt, __pol._M_next_resize);\n+\t_M_rehash(__n_bkt, _M_rehash_policy._M_next_resize);\n+      _M_rehash_policy = __pol;\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "7db51f79f33b75da1cb9d277609480193b8e649c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/max_load_factor/robustness.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc?ref=1c56f7cb72978a9b92beb1903a6f5b2f371c0ebd", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <limits>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::numeric_limits<std::size_t> nl_size_t;\n+  std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n+\t\t     __gnu_cxx::throw_allocator_limit<int> > us;\n+  int val = 0;\n+  for (; val != 100; ++val)\n+    {\n+      VERIFY( us.insert(val).second) ;\n+      VERIFY( us.load_factor() <= us.max_load_factor() );\n+    }\n+\n+  float cur_max_load_factor = us.max_load_factor();\n+  int counter = 0;\n+  std::size_t thrown_exceptions = 0;\n+  while (true)\n+    {\n+      __gnu_cxx::limit_condition::set_limit(counter++);\n+      bool do_break = false;\n+      try\n+\t{\n+\t  us.max_load_factor(.5f);\n+\t  do_break = true;\n+\t}\n+      catch (const __gnu_cxx::forced_error&)\n+\t{\n+\t  VERIFY( us.max_load_factor() == cur_max_load_factor );\n+\t  ++thrown_exceptions;\n+\t}\n+      // Lets check that unordered_set will still be correctly resized\n+      // when needed\n+      __gnu_cxx::limit_condition::set_limit(nl_size_t::max());\n+      for (;;)\n+\t{\n+\t  VERIFY( us.load_factor() <= us.max_load_factor() );\n+\t  size_t nbkts = us.bucket_count();\n+\t  VERIFY( us.insert(val++).second );\n+\t  if (us.bucket_count() != nbkts)\n+\t    break;\n+\t}\n+      if (do_break)\n+\tbreak;\n+    }\n+  VERIFY( thrown_exceptions > 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}