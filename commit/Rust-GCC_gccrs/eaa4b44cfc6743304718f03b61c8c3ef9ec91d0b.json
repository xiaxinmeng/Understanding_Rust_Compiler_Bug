{"sha": "eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhNGI0NGNmYzY3NDMzMDQ3MThmMDNiNjFjOGMzZWY5ZWM5MWQwYg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-19T12:03:01Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-19T12:03:01Z"}, "message": "[multiple changes]\n\n1999-01-19  Vladimir N. Makarov  <vmakarov@cygnus.com>\n\t* invoke.texi (-mlong-double-64): New option description.\n1999-01-19  Jim Wilson  <wilson@cygnus.com>\n\t* libgcc2.c: Change all uses of LONG_DOUBLE_TYPE_SIZE to\n\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New.  Set to LONG_DOUBLE_TYPE_SIZE\n\tif not defined.\n\t* i960/i960.h (MULTILIB_DEFAULTS): Define to mnumerics.\n\t(CPP_SPECS): Add -mlong-double-64 support.\n\t(TARGET_FLAG_LONG_DOUBLE_64, TARGET_LONG_DOUBLE_64): New.\n\t(TARGET_SWITCHES): Add -mlong-double-64 support.\n\t(LONG_DOUBLE_TYPE_SIZE): Likewise.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.\n\t* i960/vx960-coff.h (MULTILIB_DEFAULTS): Define to msoft-float.\n\t(CPP_SPECS): Add -mlong-double-64 support.\n\t* i960/t-960bare (MULTILIB_OPTIONS): Add mlong-double-64.\n\t(MULTILIB_DIRNAMES): Add ld64.\n\t* i960/t-vxworks960 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Likewise.\n\nFrom-SVN: r24764", "tree": {"sha": "ed369eff236e0ae27f442c15fba0966a72f573b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed369eff236e0ae27f442c15fba0966a72f573b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/comments", "author": null, "committer": null, "parents": [{"sha": "60409070a6daca63bbb2be39cefe8692e96ad952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60409070a6daca63bbb2be39cefe8692e96ad952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60409070a6daca63bbb2be39cefe8692e96ad952"}], "stats": {"total": 94, "additions": 75, "deletions": 19}, "files": [{"sha": "da6bdc076530ded26057cbd0f1945d77e036aed8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -1,3 +1,25 @@\n+1999-01-19  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t* invoke.texi (-mlong-double-64): New option description.\n+\n+1999-01-19  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* libgcc2.c: Change all uses of LONG_DOUBLE_TYPE_SIZE to\n+\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New.  Set to LONG_DOUBLE_TYPE_SIZE\n+\tif not defined.\n+\t* i960/i960.h (MULTILIB_DEFAULTS): Define to mnumerics.\n+\t(CPP_SPECS): Add -mlong-double-64 support.\n+\t(TARGET_FLAG_LONG_DOUBLE_64, TARGET_LONG_DOUBLE_64): New.\n+\t(TARGET_SWITCHES): Add -mlong-double-64 support.\n+\t(LONG_DOUBLE_TYPE_SIZE): Likewise.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.\n+\t* i960/vx960-coff.h (MULTILIB_DEFAULTS): Define to msoft-float.\n+\t(CPP_SPECS): Add -mlong-double-64 support.\n+\t* i960/t-960bare (MULTILIB_OPTIONS): Add mlong-double-64.\n+\t(MULTILIB_DIRNAMES): Add ld64.\n+\t* i960/t-vxworks960 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Likewise.\n+\n Tue Jan 19 11:54:04 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* calls.c (expand_call): Strip a TARGET_EXPR if we're passing by"}, {"sha": "f433b4c6cdfc47ee4a18ee89f5592f2926a82b9b", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -24,6 +24,8 @@ Boston, MA 02111-1307, USA.  */\n /* Note that some other tm.h files may include this one and then override\n    many of the definitions that relate to assembler syntax.  */\n \n+#define MULTILIB_DEFAULTS { \"mnumerics\" }\n+\n /* Names to predefine in the preprocessor for this target machine.  */\n #define CPP_PREDEFINES \"-Di960 -Di80960 -DI960 -DI80960 -Acpu(i960) -Amachine(i960)\"\n \n@@ -45,7 +47,8 @@ Boston, MA 02111-1307, USA.  */\n \t%{mcc:-D__i960CC__ -D__i960_CC__}\\\n \t%{mcf:-D__i960CF__ -D__i960_CF__}\\\n \t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:\\\n-\t\t%{!mcc:%{!mcf:-D__i960_KB -D__i960KB__ %{mic*:-D__i960KB}}}}}}}}}\"\n+\t\t%{!mcc:%{!mcf:-D__i960_KB -D__i960KB__ %{mic*:-D__i960KB}}}}}}}}}\\\n+\t%{mlong-double-64:-D__LONG_DOUBLE_64__}\"\n \n /* -mic* options make characters signed by default.  */\n /* Use #if rather than ?: because MIPS C compiler rejects ?: in\n@@ -209,6 +212,11 @@ extern int process_pragma ();\n #define TARGET_FLAG_OLD_ALIGN\t0x8000\n #define TARGET_OLD_ALIGN\t(target_flags & TARGET_FLAG_OLD_ALIGN)\n \n+/* Nonzero if long doubles are to be 64 bits.  Useful for soft-float targets\n+   if 80 bit long double support is missing.  */\n+#define TARGET_FLAG_LONG_DOUBLE_64\t0x10000\n+#define TARGET_LONG_DOUBLE_64\t(target_flags & TARGET_FLAG_LONG_DOUBLE_64)\n+\n extern int target_flags;\n \n /* Macro to define tables used to set the flags.\n@@ -268,6 +276,7 @@ extern int target_flags;\n     {\"no-strict-align\", -(TARGET_FLAG_STRICT_ALIGN)},\t\\\n     {\"old-align\", (TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN)},\t \\\n     {\"no-old-align\", -(TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN)}, \\\n+    {\"long-double-64\", TARGET_FLAG_LONG_DOUBLE_64},\t\\\n     {\"link-relax\", 0},\t\t\t\t\t\\\n     {\"no-link-relax\", 0},\t\t\t\t\\\n     SUBTARGET_SWITCHES                                                  \\\n@@ -356,8 +365,17 @@ extern int target_flags;\n /* Width in bits of a pointer.  See also the macro `Pmode' defined below.  */\n #define POINTER_SIZE 32\n \n-/* Width in bits of a long double.  Identical to double for now.  */\n-#define\tLONG_DOUBLE_TYPE_SIZE\t64\n+/* Width in bits of a long double.  Define to 96, and let\n+   ROUND_TYPE_ALIGN adjust the alignment for speed. */\n+#define\tLONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_64 ? 64 : 96)\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#if defined(__LONG_DOUBLE_64__)\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 96\n+#endif\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n #define POINTER_BOUNDARY 32"}, {"sha": "37929bb07f8586dc341fb3d9da2c43ace7f5a68f", "filename": "gcc/config/i960/t-960bare", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Ft-960bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Ft-960bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-960bare?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -16,8 +16,8 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define EXTENDED_FLOAT_STUBS' > xp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n-MULTILIB_OPTIONS=mnumerics/msoft-float\n-MULTILIB_DIRNAMES=float soft-float\n+MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64\n+MULTILIB_DIRNAMES=float soft-float ld64\n MULTILIB_MATCHES=mnumerics=msb mnumerics=msc mnumerics=mkb mnumerics=mkc mnumerics=mmc mnumerics=mcb mnumerics=mcc mnumerics=mjf msoft-float=msa msoft-float=mka msoft-float=mca msoft-float=mcf\n \n LIBGCC = stmp-multilib"}, {"sha": "851e7bd1fec7edf5b7beabe1d5ccc7a50362ae83", "filename": "gcc/config/i960/t-vxworks960", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-vxworks960?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -19,8 +19,8 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define EXTENDED_FLOAT_STUBS' > xp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n-MULTILIB_OPTIONS=mnumerics/msoft-float\n-MULTILIB_DIRNAMES=float soft-float\n+MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64\n+MULTILIB_DIRNAMES=float soft-float ld64\n MULTILIB_MATCHES=mnumerics=msb mnumerics=msc mnumerics=mkb mnumerics=mkc mnumerics=mmc mnumerics=mcb mnumerics=mcc msoft-float=msa msoft-float=mka msoft-float=mca msoft-float=mcf\n \n LIBGCC = stmp-multilib"}, {"sha": "91879ddec398b6f34262dffb528bf4434aa9474a", "filename": "gcc/config/i960/vx960-coff.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Fvx960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Fconfig%2Fi960%2Fvx960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fvx960-coff.h?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -21,6 +21,8 @@ Boston, MA 02111-1307, USA.  */\n /* This file just exists to give specs for the 960 running on VxWorks.\n    VxWorks does all the library stuff itself.  */\n \n+#define MULTILIB_DEFAULTS { \"msoft-float\" }\n+\n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n \n@@ -57,7 +59,8 @@ Boston, MA 02111-1307, USA.  */\n \t%{mcf:-D__i960CF__ -D__i960_CF__}\\\n \t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:\\\n \t\t%{!mcc:%{!mcf:-D__i960_CA -D__i960CA__ -DCPU=I960CA\\\n-\t\t\t      %{mic*:-D__i960CA}}}}}}}}}\"\n+\t\t\t      %{mic*:-D__i960CA}}}}}}}}}\\\n+\t%{mlong-double-64:-D__LONG_DOUBLE_64__}\"\n \n /* Default to -mca.  */\n "}, {"sha": "7f4bd146e04086f3d29ffd863ddeb15bd0d70417", "filename": "gcc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -5255,6 +5255,15 @@ Do not permit (do permit) unaligned accesses.\n @item -mold-align\n Enable structure-alignment compatibility with Intel's gcc release version\n 1.3 (based on gcc 1.37).  This option implies @samp{-mstrict-align}.\n+\n+@item -mlong-double-64\n+Implement type @samp{long double} as 64-bit floating point numbers.\n+Without the option @samp{long double} is implemented by 80-bit\n+floating point numbers.  The only reason we have it because there is\n+no 128-bit @samp{long double} support in @samp{fp-bit.c} yet.  So it\n+is only useful for people using soft-float targets.  Otherwise, we\n+should recommend against use of it.\n+\n @end table\n \n @node DEC Alpha Options"}, {"sha": "b06b7715b1c12d539b5c820053076e0b83cc4dc7", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=eaa4b44cfc6743304718f03b61c8c3ef9ec91d0b", "patch": "@@ -72,6 +72,10 @@ Boston, MA 02111-1307, USA.  */\n #define LIBGCC2_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n #endif\n \n+#ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n+#endif\n+\n /* In the first part of this file, we are interfacing to calls generated\n    by the compiler itself.  These calls pass values into these routines\n    which have very specific modes (rather than very specific types), and\n@@ -90,10 +94,10 @@ typedef unsigned int UDItype\t__attribute__ ((mode (DI)));\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef\t\tfloat DFtype\t__attribute__ ((mode (DF)));\n \n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n typedef\t\tfloat XFtype\t__attribute__ ((mode (XF)));\n #endif\n-#if LONG_DOUBLE_TYPE_SIZE == 128\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n typedef\t\tfloat TFtype\t__attribute__ ((mode (TF)));\n #endif\n \n@@ -144,10 +148,10 @@ typedef union\n \n extern DItype __fixunssfdi (SFtype a);\n extern DItype __fixunsdfdi (DFtype a);\n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n extern DItype __fixunsxfdi (XFtype a);\n #endif\n-#if LONG_DOUBLE_TYPE_SIZE == 128\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n extern DItype __fixunstfdi (TFtype a);\n #endif\n \f\n@@ -768,7 +772,7 @@ __ucmpdi2 (DItype a, DItype b)\n }\n #endif\n \f\n-#if defined(L_fixunstfdi) && (LONG_DOUBLE_TYPE_SIZE == 128)\n+#if defined(L_fixunstfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n \n@@ -800,7 +804,7 @@ __fixunstfdi (TFtype a)\n }\n #endif\n \n-#if defined(L_fixtfdi) && (LONG_DOUBLE_TYPE_SIZE == 128)\n+#if defined(L_fixtfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n DItype\n __fixtfdi (TFtype a)\n {\n@@ -810,7 +814,7 @@ __fixtfdi (TFtype a)\n }\n #endif\n \n-#if defined(L_fixunsxfdi) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_fixunsxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n \n@@ -842,7 +846,7 @@ __fixunsxfdi (XFtype a)\n }\n #endif\n \n-#if defined(L_fixxfdi) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_fixxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n DItype\n __fixxfdi (XFtype a)\n {\n@@ -940,7 +944,7 @@ __fixsfdi (SFtype a)\n }\n #endif\n \n-#if defined(L_floatdixf) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_floatdixf) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_HALFWORD_COEFF (((UDItype) 1) << (WORD_SIZE / 2))\n #define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n@@ -959,7 +963,7 @@ __floatdixf (DItype u)\n }\n #endif\n \n-#if defined(L_floatditf) && (LONG_DOUBLE_TYPE_SIZE == 128)\n+#if defined(L_floatditf) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_HALFWORD_COEFF (((UDItype) 1) << (WORD_SIZE / 2))\n #define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n@@ -1065,7 +1069,7 @@ __floatdisf (DItype u)\n }\n #endif\n \n-#if defined(L_fixunsxfsi) && LONG_DOUBLE_TYPE_SIZE == 96\n+#if defined(L_fixunsxfsi) && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n /* Reenable the normal types, in case limits.h needs them.  */\n #undef char\n #undef short"}]}