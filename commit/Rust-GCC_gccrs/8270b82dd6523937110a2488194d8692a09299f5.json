{"sha": "8270b82dd6523937110a2488194d8692a09299f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3MGI4MmRkNjUyMzkzNzExMGEyNDg4MTk0ZDg2OTJhMDkyOTlmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-18T13:09:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-18T13:09:53Z"}, "message": "re PR tree-optimization/43434 (Missed vectorization: \"not vectorized: data ref analysis\": pointer incremented by a parameter)\n\n2016-04-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/43434\n\t* tree-ssa-structalias.c (struct vls_data): New.\n\t(visit_loadstore): Handle all pointer-based accesses.\n\t(compute_dependence_clique): Compute a bitmap of restrict tags\n\tassigned bases and pass it to visit_loadstore.\n\n\t* gcc.dg/vect/pr43434.c: New testcase.\n\t* c-c++-common/goacc/kernels-alias-3.c: Adjust.\n\t* c-c++-common/goacc/kernels-alias-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-5.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-6.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-7.c: Likewise.\n\t* c-c++-common/goacc/kernels-alias-8.c: Likewise.\n\t* gcc.dg/gomp/pr68640.c: Likewise.\n\t* gfortran.dg/goacc/kernels-alias-3.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-alias-4.f95: Likewise.\n\nFrom-SVN: r235147", "tree": {"sha": "35411861d0db9d20d53a3e9bc3c8a371c01a86ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35411861d0db9d20d53a3e9bc3c8a371c01a86ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8270b82dd6523937110a2488194d8692a09299f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270b82dd6523937110a2488194d8692a09299f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8270b82dd6523937110a2488194d8692a09299f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270b82dd6523937110a2488194d8692a09299f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0355585f0b4ce41cf72300f3a30008a0b4ff3d"}], "stats": {"total": 149, "additions": 110, "deletions": 39}, "files": [{"sha": "19c40f7a4bbc3638c4e1cac27d8458eade51ebfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -1,3 +1,11 @@\n+2016-04-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43434\n+\t* tree-ssa-structalias.c (struct vls_data): New.\n+\t(visit_loadstore): Handle all pointer-based accesses.\n+\t(compute_dependence_clique): Compute a bitmap of restrict tags\n+\tassigned bases and pass it to visit_loadstore.\n+\n 2016-04-18  Matthew Wahab  <matthew.wahab@arm.com>\n \n \tPR target/70711"}, {"sha": "a9b46586c42129b2eb54c68d0bf1b6581a6f453a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -1,3 +1,17 @@\n+2016-04-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43434\n+\t* gcc.dg/vect/pr43434.c: New testcase.\n+\t* c-c++-common/goacc/kernels-alias-3.c: Adjust.\n+\t* c-c++-common/goacc/kernels-alias-4.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-5.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-6.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-7.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-8.c: Likewise.\n+\t* gcc.dg/gomp/pr68640.c: Likewise.\n+\t* gfortran.dg/goacc/kernels-alias-3.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-alias-4.f95: Likewise.\n+\n 2016-04-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70701"}, {"sha": "6989c1c1b6d1ac79afb967158848512d9a515b36", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -14,7 +14,8 @@ foo (void)\n   }\n }\n \n-/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* Only the omp_data_i related loads should be annotated with\n+   non-base 0 cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n "}, {"sha": "d41802c00db76e43c90d98748f3de903a82cc662", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -16,7 +16,8 @@ foo (void)\n   }\n }\n \n-/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* Only the omp_data_i related loads should be annotated with\n+   non-base 0 cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n "}, {"sha": "6fefe183203687d31bce5ec8acb93bb0f2ff19dd", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -15,5 +15,5 @@ foo (int *a)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 4 \"ealias\" } } */\n "}, {"sha": "908e1cafd71915bf300b593492950577213b6f75", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -19,5 +19,5 @@ foo (void)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n "}, {"sha": "923d00239a2abf7322a91ccbeb709a26efabfec7", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -21,5 +21,5 @@ foo (void)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n "}, {"sha": "3b91acd27f57d419d2d017eeeaa7fa27f6809414", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -18,5 +18,5 @@ foo (int *a, size_t n)\n \n /* Only the omp_data_i related loads should be annotated with cliques.  */\n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } } */\n "}, {"sha": "d2b1b472140a1064dcc58396d9bed3cb7d30d1fe", "filename": "gcc/testsuite/gcc.dg/gomp/pr68640.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr68640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr68640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr68640.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -13,4 +13,4 @@ foo (int *__restrict__ ap)\n }\n \n /* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n-/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 2 \"ealias\" } } */"}, {"sha": "caa63aa9dcc4354706c40f172ecc9b44859a863f", "filename": "gcc/testsuite/gcc.dg/vect/pr43434.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43434.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43434.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43434.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+typedef short DCTELEM;\n+typedef unsigned char uint8_t;\n+\n+void diff_pixels_c(DCTELEM *__restrict__ block, const uint8_t *s1,\n+\t\t   const uint8_t *s2, int stride)\n+{\n+  int i;\n+\n+  for(i=0;i<8;i++)\n+    {\n+      block[0] = s1[0] - s2[0];\n+      block[1] = s1[1] - s2[1];\n+      block[2] = s1[2] - s2[2];\n+      block[3] = s1[3] - s2[3];\n+      block[4] = s1[4] - s2[4];\n+      block[5] = s1[5] - s2[5];\n+      block[6] = s1[6] - s2[6];\n+      block[7] = s1[7] - s2[7];\n+      s1 += stride;\n+      s2 += stride;\n+      block += 8;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { vect_int && { vect_unpack && vect_hw_misalign } } } } } */"}, {"sha": "07dc8d6c641973af7fb9aa011a3b186f93e49ce8", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-alias-3.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-3.f95?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -16,4 +16,4 @@ end program main\n \n ! Only the omp_data_i related loads should be annotated with cliques.\n ! { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 3 \"ealias\" } }"}, {"sha": "36f7f65fbacee0804604dfe387fab757136127e5", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-alias-4.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-4.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-4.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-alias-4.f95?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -17,4 +17,4 @@ end program main\n \n ! Only the omp_data_i related loads should be annotated with cliques.\n ! { dg-final { scan-tree-dump-times \"clique 1 base 1\" 3 \"ealias\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 3 \"ealias\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)clique 1 base 0\" 4 \"ealias\" } }"}, {"sha": "3fdde846d0dabc88aebbbe0f00c0815aa918acf2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270b82dd6523937110a2488194d8692a09299f5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8270b82dd6523937110a2488194d8692a09299f5", "patch": "@@ -7182,26 +7182,37 @@ delete_points_to_sets (void)\n   obstack_free (&final_solutions_obstack, NULL);\n }\n \n+struct vls_data\n+{\n+  unsigned short clique;\n+  bitmap rvars;\n+};\n+\n /* Mark \"other\" loads and stores as belonging to CLIQUE and with\n    base zero.  */\n \n static bool\n-visit_loadstore (gimple *, tree base, tree ref, void *clique_)\n+visit_loadstore (gimple *, tree base, tree ref, void *data)\n {\n-  unsigned short clique = (uintptr_t)clique_;\n+  unsigned short clique = ((vls_data *) data)->clique;\n+  bitmap rvars = ((vls_data *) data)->rvars;\n   if (TREE_CODE (base) == MEM_REF\n       || TREE_CODE (base) == TARGET_MEM_REF)\n     {\n       tree ptr = TREE_OPERAND (base, 0);\n       if (TREE_CODE (ptr) == SSA_NAME\n \t  && ! SSA_NAME_IS_DEFAULT_DEF (ptr))\n \t{\n-\t  /* ???  We need to make sure 'ptr' doesn't include any of\n+\t  /* We need to make sure 'ptr' doesn't include any of\n \t     the restrict tags we added bases for in its points-to set.  */\n-\t  return false;\n-\t}\n+\t  varinfo_t vi = lookup_vi_for_tree (ptr);\n+\t  if (! vi)\n+\t    return false;\n \n-      /* For now let decls through.  */\n+\t  vi = get_varinfo (find (vi->id));\n+\t  if (bitmap_intersect_p (rvars, vi->solution))\n+\t    return false;\n+\t}\n \n       /* Do not overwrite existing cliques (that includes clique, base\n          pairs we just set).  */\n@@ -7275,6 +7286,7 @@ compute_dependence_clique (void)\n {\n   unsigned short clique = 0;\n   unsigned short last_ruid = 0;\n+  bitmap rvars = BITMAP_ALLOC (NULL);\n   for (unsigned i = 0; i < num_ssa_names; ++i)\n     {\n       tree ptr = ssa_name (i);\n@@ -7330,38 +7342,46 @@ compute_dependence_clique (void)\n \t  /* Now look at possible dereferences of ptr.  */\n \t  imm_use_iterator ui;\n \t  gimple *use_stmt;\n+\t  bool used = false;\n \t  FOR_EACH_IMM_USE_STMT (use_stmt, ui, ptr)\n \t    {\n \t      /* ???  Calls and asms.  */\n \t      if (!gimple_assign_single_p (use_stmt))\n \t\tcontinue;\n-\t      maybe_set_dependence_info (gimple_assign_lhs (use_stmt), ptr,\n-\t\t\t\t\t clique, restrict_var, last_ruid);\n-\t      maybe_set_dependence_info (gimple_assign_rhs1 (use_stmt), ptr,\n-\t\t\t\t\t clique, restrict_var, last_ruid);\n+\t      used |= maybe_set_dependence_info (gimple_assign_lhs (use_stmt),\n+\t\t\t\t\t\t ptr, clique, restrict_var,\n+\t\t\t\t\t\t last_ruid);\n+\t      used |= maybe_set_dependence_info (gimple_assign_rhs1 (use_stmt),\n+\t\t\t\t\t\t ptr, clique, restrict_var,\n+\t\t\t\t\t\t last_ruid);\n \t    }\n+\t  if (used)\n+\t    bitmap_set_bit (rvars, restrict_var->id);\n \t}\n     }\n \n-  if (clique == 0)\n-    return;\n+  if (clique != 0)\n+    {\n+      /* Assign the BASE id zero to all accesses not based on a restrict\n+\t pointer.  That way they get disambiguated against restrict\n+\t accesses but not against each other.  */\n+      /* ???  For restricts derived from globals (thus not incoming\n+\t parameters) we can't restrict scoping properly thus the following\n+\t is too aggressive there.  For now we have excluded those globals from\n+\t getting into the MR_DEPENDENCE machinery.  */\n+      vls_data data = { clique, rvars };\n+      basic_block bb;\n+      FOR_EACH_BB_FN (bb, cfun)\n+\tfor (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\t     !gsi_end_p (gsi); gsi_next (&gsi))\n+\t  {\n+\t    gimple *stmt = gsi_stmt (gsi);\n+\t    walk_stmt_load_store_ops (stmt, &data,\n+\t\t\t\t      visit_loadstore, visit_loadstore);\n+\t  }\n+    }\n \n-  /* Assign the BASE id zero to all accesses not based on a restrict\n-     pointer.  That way they get disabiguated against restrict\n-     accesses but not against each other.  */\n-  /* ???  For restricts derived from globals (thus not incoming\n-     parameters) we can't restrict scoping properly thus the following\n-     is too aggressive there.  For now we have excluded those globals from\n-     getting into the MR_DEPENDENCE machinery.  */\n-  basic_block bb;\n-  FOR_EACH_BB_FN (bb, cfun)\n-    for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n-\t !gsi_end_p (gsi); gsi_next (&gsi))\n-      {\n-\tgimple *stmt = gsi_stmt (gsi);\n-\twalk_stmt_load_store_ops (stmt, (void *)(uintptr_t)clique,\n-\t\t\t\t  visit_loadstore, visit_loadstore);\n-      }\n+  BITMAP_FREE (rvars);\n }\n \n /* Compute points-to information for every SSA_NAME pointer in the"}]}