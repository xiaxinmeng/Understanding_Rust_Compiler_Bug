{"sha": "639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5ZThiMGM3NDY1N2JkZTU0OGYzNzRmZTg4N2NiMmViN2E5Y2U5Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-05T23:13:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-05T23:13:04Z"}, "message": "cpplex.c (cpp_interpret_charconst): Sign-extend each character.\n\n\t* cpplex.c (cpp_interpret_charconst): Sign-extend each\n\tcharacter.  Don't ignore excess characters.  Treat\n\tmulticharacter character constants as signed.\n\t(cpp_parse_escape): Clarify diagnostic.\n\nFrom-SVN: r53200", "tree": {"sha": "15ed44a42e459ceafe9e014f17378a1a184f2bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15ed44a42e459ceafe9e014f17378a1a184f2bc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639e8b0c74657bde548f374fe887cb2eb7a9ce9c/comments", "author": null, "committer": null, "parents": [{"sha": "84ea5bc107f6bfb7efcdec0a2604fc3d3144ec81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ea5bc107f6bfb7efcdec0a2604fc3d3144ec81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ea5bc107f6bfb7efcdec0a2604fc3d3144ec81"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "8d2de308f7d6ac78491cc9aa3005aa1c0160ad28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639e8b0c74657bde548f374fe887cb2eb7a9ce9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639e8b0c74657bde548f374fe887cb2eb7a9ce9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "patch": "@@ -1,3 +1,10 @@\n+2002-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpplex.c (cpp_interpret_charconst): Sign-extend each\n+\tcharacter.  Don't ignore excess characters.  Treat\n+\tmulticharacter character constants as signed.\n+\t(cpp_parse_escape): Clarify diagnostic.\n+\n 2002-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.md (ashlsi3): If shift count is const1_rtx,"}, {"sha": "d3268985697b42bdfe6a94b1ea2f7ca1b81c3829", "filename": "gcc/cpplex.c", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639e8b0c74657bde548f374fe887cb2eb7a9ce9c/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639e8b0c74657bde548f374fe887cb2eb7a9ce9c/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=639e8b0c74657bde548f374fe887cb2eb7a9ce9c", "patch": "@@ -1847,7 +1847,7 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n \n   if (c > mask)\n     {\n-      cpp_error (pfile, DL_PEDWARN, \"escape sequence out of range for type\");\n+      cpp_error (pfile, DL_PEDWARN, \"escape sequence out of range for its type\");\n       c &= mask;\n     }\n \n@@ -1871,7 +1871,7 @@ cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n   const unsigned char *str = token->val.str.text;\n   const unsigned char *limit = str + token->val.str.len;\n   unsigned int chars_seen = 0;\n-  unsigned int width, max_chars;\n+  size_t width, max_chars;\n   cppchar_t c, mask, result = 0;\n   bool unsigned_p;\n \n@@ -1928,36 +1928,31 @@ cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n \tc = MAP_CHARACTER (c);\n #endif\n       \n-      /* Merge character into result; ignore excess chars.  */\n-      if (++chars_seen <= max_chars)\n-\t{\n-\t  if (width < BITS_PER_CPPCHAR_T)\n-\t    result = (result << width) | (c & mask);\n-\t  else\n-\t    result = c;\n-\t}\n+      chars_seen++;\n+\n+      /* Sign-extend the character, scale result, and add the two.  */\n+      if (!unsigned_p && (c & (1 << (width - 1))))\n+\tc |= ~mask;\n+      if (width < BITS_PER_CPPCHAR_T)\n+\tresult = (result << width) + c;\n+      else\n+\tresult = c;\n     }\n \n   if (chars_seen == 0)\n     cpp_error (pfile, DL_ERROR, \"empty character constant\");\n-  else if (chars_seen > max_chars)\n+  else if (chars_seen > 1)\n     {\n-      chars_seen = max_chars;\n-      cpp_error (pfile, DL_WARNING, \"character constant too long\");\n-    }\n-  else if (chars_seen > 1 && warn_multi)\n-    cpp_error (pfile, DL_WARNING, \"multi-character character constant\");\n-\n-  /* If relevant type is signed, sign-extend the constant.  */\n-  if (chars_seen)\n-    {\n-      unsigned int nbits = chars_seen * width;\n-\n-      mask = (cppchar_t) ~0 >> (BITS_PER_CPPCHAR_T - nbits);\n-      if (unsigned_p || ((result >> (nbits - 1)) & 1) == 0)\n-\tresult &= mask;\n-      else\n-\tresult |= ~mask;\n+      /* Multichar charconsts are of type int and therefore signed.  */\n+      unsigned_p = 0;\n+      if (chars_seen > max_chars)\n+\t{\n+\t  chars_seen = max_chars;\n+\t  cpp_error (pfile, DL_WARNING,\n+\t\t     \"character constant too long for its type\");\n+\t}\n+      else if (warn_multi)\n+\tcpp_error (pfile, DL_WARNING, \"multi-character character constant\");\n     }\n \n   *pchars_seen = chars_seen;"}]}