{"sha": "1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkMmY0NTBhMDdiMzJkMDhmOGI5YzY0Y2Y2YjcwOGFkZjQwNmJlMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-10T18:58:12Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-10T18:58:12Z"}, "message": "re PR middle-end/39701 (Revision 145846 caused many test failures)\n\n2009-04-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/39701\n\t* common.opt (-fdelete-null-pointer-checks): Initialize to 1.\n\n\t* opts.c (decode_options): Don't set flag_delete_null_pointer_checks\n\there.\n\n\t* doc/invoke.texi: Update -fdelete-null-pointer-checks.\n\nFrom-SVN: r145937", "tree": {"sha": "02f648ebc095eb3672b5a87f78c23ae923f92575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02f648ebc095eb3672b5a87f78c23ae923f92575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/comments", "author": null, "committer": null, "parents": [{"sha": "72b75d0333b5b00c02a1b3f87641269e6cd629d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b75d0333b5b00c02a1b3f87641269e6cd629d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b75d0333b5b00c02a1b3f87641269e6cd629d7"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "c61b4cde606dbf4fa56278e2323de9dc9b2e3f93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "patch": "@@ -1,3 +1,13 @@\n+2009-04-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/39701\n+\t* common.opt (-fdelete-null-pointer-checks): Initialize to 1.\n+\n+\t* opts.c (decode_options): Don't set flag_delete_null_pointer_checks\n+\there.\n+\n+\t* doc/invoke.texi: Update -fdelete-null-pointer-checks.\n+\n 2009-04-10  Chao-ying Fu  <fu@mips.com>\n \n \t* doc/tm.texi (Instruction Output): Document\n@@ -18,8 +28,8 @@\n 2009-04-10  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR middle-end/39701\n-        * fold-const.c (tree_single_nonzero_warnv_p): Pass non-static\n-        variables as non-NULL even with -fdelete-null-pointer-checks.\n+\t* fold-const.c (tree_single_nonzero_warnv_p): Pass non-static\n+\tvariables as non-NULL even with -fdelete-null-pointer-checks.\n \n 2009-04-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -54,8 +64,8 @@\n \t* expmed.c (expand_divmod): Always use a comparison for a division\n \tby a large unsigned integer.\n \n-        * fold-const.c (tree_single_nonzero_warnv_p): Always treat decls\n-        for things others than variables or functions as nonzero.\n+\t* fold-const.c (tree_single_nonzero_warnv_p): Always treat decls\n+\tfor things others than variables or functions as nonzero.\n \n 2009-04-09  Nick Clifton  <nickc@redhat.com>\n \n@@ -396,40 +406,40 @@\n \n 2009-04-09  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * config/i386/i386.md (cmpcc): New.\n-        * config/i386/sync.md (sync_compare_and_swap*): Set FLAGS_REG.\n-        (sync_compare_and_swap_cc*): Delete.\n-\n-        * config/s390/s390.c (s390_compare_emitted): Remove.\n-        (s390_emit_compare): Handle MODE_CC s390_compare_op0 like\n-        s390_compare_emitted used to be handled.  Assert that modes match.\n-        (s390_emit_compare_and_swap): Use s390_emit_compare, do not\n-        refer to sync_compare_and_swap_ccsi.\n-        * config/s390/s390.h (s390_compare_emitted): Remove.\n-        * config/s390/s390.md (seq): Look for MODE_CC s390_compare_op0\n-        instead of s390_compare_emitted.\n-        (stack_protect_test, sync_compare_and_swap_cc): Set s390_compare_op0\n-        instead of s390_compare_emitted.\n-        * config/s390/s390.md (cmpcc): New.\n-        (sync_compare_and_swapqi, sync_compare_and_swaphi): Clobber\n-        CC_REGNUM, do not pretend it's set.\n-        (sync_compare_and_swap_cc*): Delete.\n-        * config/s390/predicates.md (cc_reg_operand): New.\n-\n-        * expr.c (sync_compare_and_swap_cc): Delete.\n-        * optabs.h (sync_compare_and_swap_cc): Delete.\n-        * optabs.c (prepare_cmp_insn): Ignore which specific CCmode\n-        is being used with can_compare_p.\n-        (emit_cmp_and_jump_insn_1): Likewise when looking in the optab.\n-        (find_cc_set): New.\n-        (expand_bool_compare_and_swap): Do not use sync_compare_and_swap_cc,\n-        look for a MODE_CC set instead.  Use emit_store_flag.\n-        (expand_compare_and_swap_loop): Likewise, with some additional\n-        complication to avoid a force_reg when useless.  Use\n-        emit_cmp_and_jump_insns.\n-        * genopinit.c (optabs): Delete sync_compare_and_swap_cc.\n-        * doc/md.texi (sync_compare_and_swap_cc): Merge with\n-        sync_compare_and_swap documentation.\n+\t* config/i386/i386.md (cmpcc): New.\n+\t* config/i386/sync.md (sync_compare_and_swap*): Set FLAGS_REG.\n+\t(sync_compare_and_swap_cc*): Delete.\n+\n+\t* config/s390/s390.c (s390_compare_emitted): Remove.\n+\t(s390_emit_compare): Handle MODE_CC s390_compare_op0 like\n+\ts390_compare_emitted used to be handled.  Assert that modes match.\n+\t(s390_emit_compare_and_swap): Use s390_emit_compare, do not\n+\trefer to sync_compare_and_swap_ccsi.\n+\t* config/s390/s390.h (s390_compare_emitted): Remove.\n+\t* config/s390/s390.md (seq): Look for MODE_CC s390_compare_op0\n+\tinstead of s390_compare_emitted.\n+\t(stack_protect_test, sync_compare_and_swap_cc): Set s390_compare_op0\n+\tinstead of s390_compare_emitted.\n+\t* config/s390/s390.md (cmpcc): New.\n+\t(sync_compare_and_swapqi, sync_compare_and_swaphi): Clobber\n+\tCC_REGNUM, do not pretend it's set.\n+\t(sync_compare_and_swap_cc*): Delete.\n+\t* config/s390/predicates.md (cc_reg_operand): New.\n+\n+\t* expr.c (sync_compare_and_swap_cc): Delete.\n+\t* optabs.h (sync_compare_and_swap_cc): Delete.\n+\t* optabs.c (prepare_cmp_insn): Ignore which specific CCmode\n+\tis being used with can_compare_p.\n+\t(emit_cmp_and_jump_insn_1): Likewise when looking in the optab.\n+\t(find_cc_set): New.\n+\t(expand_bool_compare_and_swap): Do not use sync_compare_and_swap_cc,\n+\tlook for a MODE_CC set instead.  Use emit_store_flag.\n+\t(expand_compare_and_swap_loop): Likewise, with some additional\n+\tcomplication to avoid a force_reg when useless.  Use\n+\temit_cmp_and_jump_insns.\n+\t* genopinit.c (optabs): Delete sync_compare_and_swap_cc.\n+\t* doc/md.texi (sync_compare_and_swap_cc): Merge with\n+\tsync_compare_and_swap documentation.\n \n 2009-04-09  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "c15de5a4bce32ed92ce531f53272da06c58f194e", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "patch": "@@ -436,7 +436,7 @@ Common Report Var(flag_delayed_branch) Optimization\n Attempt to fill delay slots of branch instructions\n \n fdelete-null-pointer-checks\n-Common Report Var(flag_delete_null_pointer_checks) Optimization\n+Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization\n Delete useless null pointer checks\n \n fdiagnostics-show-location="}, {"sha": "e87de62049a7ca1cc1f2cc43702b09108577f5fa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "patch": "@@ -5898,7 +5898,7 @@ safely dereference null pointers.  Use\n @option{-fno-delete-null-pointer-checks} to disable this optimization\n for programs which depend on that behavior.\n \n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled by default.\n \n @item -fexpensive-optimizations\n @opindex fexpensive-optimizations"}, {"sha": "76f5d1ed9134ad53087ce4a9e47beceaa3c270c8", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad2f450a07b32d08f8b9c64cf6b708adf406be1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1ad2f450a07b32d08f8b9c64cf6b708adf406be1", "patch": "@@ -894,7 +894,6 @@ decode_options (unsigned int argc, const char **argv)\n   flag_regmove = opt2;\n   flag_strict_aliasing = opt2;\n   flag_strict_overflow = opt2;\n-  flag_delete_null_pointer_checks = opt2;\n   flag_reorder_blocks = opt2;\n   flag_reorder_functions = opt2;\n   flag_tree_vrp = opt2;"}]}