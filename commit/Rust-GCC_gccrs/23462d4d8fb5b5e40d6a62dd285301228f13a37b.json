{"sha": "23462d4d8fb5b5e40d6a62dd285301228f13a37b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0NjJkNGQ4ZmI1YjVlNDBkNmE2MmRkMjg1MzAxMjI4ZjEzYTM3Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-17T11:19:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-17T11:19:06Z"}, "message": "re PR middle-end/37908 (atomic NAND op generate wrong code; __sync_nand_and_fetch, __sync_fetch_and_nand)\n\n\tPR middle-end/37908\n\t* optabs.c (expand_sync_operation): Properly handle NAND case\n\tby calculating ~(t1 & val) instead of (~t1 & val).\n\t* builtins.c (expand_builtin_sync_operation): Warn for changed\n\tsemantics in NAND builtins.\n\t* c.opt (Wsync-nand): New warning option.  Describe -Wsync-nand.\n\t\n\t* doc/invoke.texi (Warning options): Add Wsync-nand.\n\t* doc/extend.texi (Atomic Builtins) [__sync_fetch_and_nand]: Correct\n\t__sync_fetch_and_nand builtin operation in the example.  Add a note\n\tabout changed semantics in GCC 4.4.\n\t[__sync_nand_and_fetch]: Correct __sync_nand_and_fetch builtin\n\toperation in the example.  Add a note about changed semantics in\n\tGCC 4.4.\n\ntestsuite/ChangeLog:\n\n\tPR middle-end/37908\n\t* gcc.dg/pr37908.c: New test.\n\t* gcc.dg/ia64-sync-1.c: Correct __sync_fetch_and_nand and\n\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n\tabout changed semantics of NAND builtin.\n\t(init_si, init_di): Change init value for __sync_fetch_and_nand to -1.\n\t(test_si, test_di): Change expected result of\n\t__sync_nand_and_fetch to ~7.\n\t* gcc.dg/ia64-sync-2.c: Correct __sync_fetch_and_nand and\n\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n\tabout changed semantics of NAND builtin.\n\t(init_noret_si, init_noret_di): Change init value for\n\t__sync_fetch_and_nand to -1.\n\t(init_noret_si, init_noret_di): Change expected result of\n\t__sync_nand_and_fetch to ~7.\n\t* gcc.dg/sync-2.c: Correct __sync_fetch_and_nand and\n\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n\tabout changed semantics of NAND builtin.\n\t(init_qi, init_qi): Change init value for __sync_fetch_and_nand to -1.\n\t(init_hi, init_hi): Change expected result of\n\t__sync_nand_and_fetch to ~7.\n\t* gcc.dg/sync-3.c: Copy from sync-2.c instead of including\n\tthe c source file.\n\t* gcc.c-torture/compile/sync-1.c: Add dg-message to look for the\n\twarning about changed semantics of NAND builtin.\n\t* gcc.c-torture/compile/sync-2.c: Ditto.\n\t* gcc.c-torture/compile/sync-3.c: Ditto.\n\nFrom-SVN: r141942", "tree": {"sha": "ec588937bd71d8c137cd8e58e26176a069ebf17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec588937bd71d8c137cd8e58e26176a069ebf17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23462d4d8fb5b5e40d6a62dd285301228f13a37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23462d4d8fb5b5e40d6a62dd285301228f13a37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23462d4d8fb5b5e40d6a62dd285301228f13a37b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23462d4d8fb5b5e40d6a62dd285301228f13a37b/comments", "author": null, "committer": null, "parents": [{"sha": "73ce7fcb8cdacf40e7342834e1af9d930e012e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ce7fcb8cdacf40e7342834e1af9d930e012e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ce7fcb8cdacf40e7342834e1af9d930e012e02"}], "stats": {"total": 353, "additions": 299, "deletions": 54}, "files": [{"sha": "a916993a7997f101b52f17d7f46c6f78e8c87b4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,3 +1,20 @@\n+2008-11-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/37908\n+\t* optabs.c (expand_sync_operation): Properly handle NAND case\n+\tby calculating ~(t1 & val) instead of (~t1 & val).\n+\t* builtins.c (expand_builtin_sync_operation): Warn for changed\n+\tsemantics in NAND builtins.\n+\t* c.opt (Wsync-nand): New warning option.  Describe -Wsync-nand.\n+\t\n+\t* doc/invoke.texi (Warning options): Add Wsync-nand.\n+\t* doc/extend.texi (Atomic Builtins) [__sync_fetch_and_nand]: Correct\n+\t__sync_fetch_and_nand builtin operation in the example.  Add a note\n+\tabout changed semantics in GCC 4.4.\n+\t[__sync_nand_and_fetch]: Correct __sync_nand_and_fetch builtin\n+\toperation in the example.  Add a note about changed semantics in\n+\tGCC 4.4.\n+\n 2008-11-16  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_function_body_availability): Fix test of externally\n@@ -165,10 +182,8 @@\n \n \t* configure.ac (gcc_cv_libc_provides_ssp): Also consider GNU/Hurd\n \tsystems, which are assumend to always provide SSP-support in glibc.\n-\t* configure: Regenerate.\n-\n-\t* configure.ac (gcc_cv_libc_provides_ssp): Also consider GNU/kFreeBSD,\n-\tGNU/kNetBSD systems in the `*-*-linux*' case.\n+\tAlso consider GNU/kFreeBSD, GNU/kNetBSD systems in the `*-*-linux*'\n+\tcase.\n \t* configure: Regenerate.\n \n 2008-11-14  Jakub Jelinek  <jakub@redhat.com>\n@@ -180,9 +195,9 @@\n 2008-11-13  Thomas Schwinge  <tschwinge@gnu.org>\n \n \tPR target/28102\n-\t* config.gcc (*-*-gnu*): Move Alpha parts into the `alpha*-*-gnu*', x86\n-\tparts into the `i[34567]86-*-linux*' and parts that are independent of\n-\tthe processor architecture into the `*-*-linux*' cases.\n+\t* config.gcc (*-*-gnu*): Move Alpha parts into the `alpha*-*-gnu*',\n+\tx86 parts into the `i[34567]86-*-linux*' and parts that are\n+\tindependent of the processor architecture into the `*-*-linux*' cases.\n \t(*-*-linux*): Consider `linux.opt' only for Linux-based configurations.\n \t* config/i386/gnu.h (GLIBC_DYNAMIC_LINKER): Redefine.\n \t(TARGET_OS_CPP_BUILTINS, LINK_SPEC): Don't redefine.\n@@ -340,8 +355,8 @@\n 2008-11-11  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR rtl-optimization/37363\n-\t* simplify-rtx.c (simplify_plus_minus): Don't create (const (minus ...))\n-\texpresisons.\n+\t* simplify-rtx.c (simplify_plus_minus): Don't create\n+\t(const (minus ...)) expresisons.\n \n 2008-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "fd6d0b859e00a85f05cd04b51b3d6e56a196816a", "filename": "gcc/builtins.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -5988,6 +5988,50 @@ expand_builtin_sync_operation (enum machine_mode mode, tree exp,\n   rtx val, mem;\n   enum machine_mode old_mode;\n \n+  if (code == NOT && warn_sync_nand)\n+    {\n+      tree fndecl = get_callee_fndecl (exp);\n+      enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+      static bool warned_f_a_n, warned_n_a_f;\n+\n+      switch (fcode)\n+\t{\n+\tcase BUILT_IN_FETCH_AND_NAND_1:\n+\tcase BUILT_IN_FETCH_AND_NAND_2:\n+\tcase BUILT_IN_FETCH_AND_NAND_4:\n+\tcase BUILT_IN_FETCH_AND_NAND_8:\n+\tcase BUILT_IN_FETCH_AND_NAND_16:\n+\n+\t  if (warned_f_a_n)\n+\t    break;\n+\n+\t  fndecl = implicit_built_in_decls[BUILT_IN_FETCH_AND_NAND_N];\n+\t  inform (input_location,\n+\t\t  \"%qD changed semantics in GCC 4.4\", fndecl);\n+\t  warned_f_a_n = true;\n+\t  break;\n+\n+\tcase BUILT_IN_NAND_AND_FETCH_1:\n+\tcase BUILT_IN_NAND_AND_FETCH_2:\n+\tcase BUILT_IN_NAND_AND_FETCH_4:\n+\tcase BUILT_IN_NAND_AND_FETCH_8:\n+\tcase BUILT_IN_NAND_AND_FETCH_16:\n+\n+\t  if (warned_n_a_f)\n+\t    break;\n+\n+\t  fndecl = implicit_built_in_decls[BUILT_IN_NAND_AND_FETCH_N];\n+\t  inform (input_location,\n+\t\t  \"%qD changed semantics in GCC 4.4\", fndecl);\n+\t  warned_n_a_f = true;\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n "}, {"sha": "1888ecde63c5cd2cfdde3a46cfacce275d6016c5", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -428,6 +428,10 @@ Wstrict-selector-match\n ObjC ObjC++ Var(warn_strict_selector_match) Warning\n Warn if type signatures of candidate methods do not match exactly\n \n+Wsync-nand\n+C C++ Var(warn_sync_nand) Init(1) Warning\n+Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used\n+\n Wsynth\n C++ ObjC++ Var(warn_synth) Warning\n Deprecated.  This switch has no effect"}, {"sha": "43e91afe8b42587c438bf476351c0ab96fb28706", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -5774,9 +5774,12 @@ returns the value that had previously been in memory.  That is,\n \n @smallexample\n @{ tmp = *ptr; *ptr @var{op}= value; return tmp; @}\n-@{ tmp = *ptr; *ptr = ~tmp & value; return tmp; @}   // nand\n+@{ tmp = *ptr; *ptr = ~(tmp & value); return tmp; @}   // nand\n @end smallexample\n \n+@emph{Note:} GCC 4.4 and later implement @code{__sync_fetch_and_nand}\n+builtin as @code{*ptr = ~(tmp & value)} instead of @code{*ptr = ~tmp & value}.\n+\n @item @var{type} __sync_add_and_fetch (@var{type} *ptr, @var{type} value, ...)\n @itemx @var{type} __sync_sub_and_fetch (@var{type} *ptr, @var{type} value, ...)\n @itemx @var{type} __sync_or_and_fetch (@var{type} *ptr, @var{type} value, ...)\n@@ -5794,9 +5797,13 @@ return the new value.  That is,\n \n @smallexample\n @{ *ptr @var{op}= value; return *ptr; @}\n-@{ *ptr = ~*ptr & value; return *ptr; @}   // nand\n+@{ *ptr = ~(*ptr & value); return *ptr; @}   // nand\n @end smallexample\n \n+@emph{Note:} GCC 4.4 and later implement @code{__sync_nand_and_fetch}\n+builtin as @code{*ptr = ~(*ptr & value)} instead of\n+@code{*ptr = ~*ptr & value}.\n+\n @item bool __sync_bool_compare_and_swap (@var{type} *ptr, @var{type} oldval @var{type} newval, ...)\n @itemx @var{type} __sync_val_compare_and_swap (@var{type} *ptr, @var{type} oldval @var{type} newval, ...)\n @findex __sync_bool_compare_and_swap"}, {"sha": "476ab8cf92a39690d047997520096d31eeeb5635", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -257,7 +257,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wsign-compare  -Wsign-conversion  -Wstack-protector @gol\n -Wstrict-aliasing -Wstrict-aliasing=n @gol\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n--Wswitch  -Wswitch-default  -Wswitch-enum @gol\n+-Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n -Wsystem-headers  -Wtrigraphs  -Wtype-limits  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n@@ -3127,6 +3127,12 @@ and lacks a @code{case} for one or more of the named codes of that\n enumeration.  @code{case} labels outside the enumeration range also\n provoke warnings when this option is used.\n \n+@item -Wsync-nand\n+@opindex Wsync-nand\n+@opindex Wno-sync-nand\n+Warn when @code{__sync_fetch_and_nand} and @code{__sync_nand_and_fetch}\n+built-in functions are used.  These functions changed semantics in GCC 4.4.\n+\n @item -Wtrigraphs\n @opindex Wtrigraphs\n @opindex Wno-trigraphs"}, {"sha": "ed59f5e1e7f17560c392d366df8209c6a4f88c22", "filename": "gcc/optabs.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -7182,12 +7182,13 @@ expand_sync_operation (rtx mem, rtx val, enum rtx_code code)\n       t1 = t0;\n       if (code == NOT)\n \t{\n-\t  t1 = expand_simple_unop (mode, NOT, t1, NULL_RTX, true);\n-\t  code = AND;\n+\t  t1 = expand_simple_binop (mode, AND, t1, val, NULL_RTX,\n+\t\t\t\t    true, OPTAB_LIB_WIDEN);\n+\t  t1 = expand_simple_unop (mode, code, t1, NULL_RTX, true);\n \t}\n-      t1 = expand_simple_binop (mode, code, t1, val, NULL_RTX,\n-\t\t\t\ttrue, OPTAB_LIB_WIDEN);\n-\n+      else\n+\tt1 = expand_simple_binop (mode, code, t1, val, NULL_RTX,\n+\t\t\t\t  true, OPTAB_LIB_WIDEN);\n       insn = get_insns ();\n       end_sequence ();\n \n@@ -7315,9 +7316,17 @@ expand_sync_fetch_operation (rtx mem, rtx val, enum rtx_code code,\n \t\t}\n \n \t      if (code == NOT)\n-\t\ttarget = expand_simple_unop (mode, NOT, target, NULL_RTX, true);\n-\t      target = expand_simple_binop (mode, code, target, val, NULL_RTX,\n-\t\t\t\t\t    true, OPTAB_LIB_WIDEN);\n+\t\t{\n+\t\t  target = expand_simple_binop (mode, AND, target, val,\n+\t\t\t\t\t\tNULL_RTX, true,\n+\t\t\t\t\t\tOPTAB_LIB_WIDEN);\n+\t\t  target = expand_simple_unop (mode, code, target,\n+\t\t\t\t\t       NULL_RTX, true);\n+\t\t}\n+\t      else\n+\t\ttarget = expand_simple_binop (mode, code, target, val,\n+\t\t\t\t\t      NULL_RTX, true,\n+\t\t\t\t\t      OPTAB_LIB_WIDEN);\n \t    }\n \n \t  return target;\n@@ -7340,11 +7349,13 @@ expand_sync_fetch_operation (rtx mem, rtx val, enum rtx_code code,\n       t1 = t0;\n       if (code == NOT)\n \t{\n-\t  t1 = expand_simple_unop (mode, NOT, t1, NULL_RTX, true);\n-\t  code = AND;\n+\t  t1 = expand_simple_binop (mode, AND, t1, val, NULL_RTX,\n+\t\t\t\t    true, OPTAB_LIB_WIDEN);\n+\t  t1 = expand_simple_unop (mode, code, t1, NULL_RTX, true);\n \t}\n-      t1 = expand_simple_binop (mode, code, t1, val, NULL_RTX,\n-\t\t\t\ttrue, OPTAB_LIB_WIDEN);\n+      else\n+\tt1 = expand_simple_binop (mode, code, t1, val, NULL_RTX,\n+\t\t\t\t  true, OPTAB_LIB_WIDEN);\n       if (after)\n \temit_move_insn (target, t1);\n "}, {"sha": "16c4e05e23fed054e8e2d009e4fb33d4a49f401d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,3 +1,33 @@\n+2008-11-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/37908\n+\t* gcc.dg/pr37908.c: New test.\n+\t* gcc.dg/ia64-sync-1.c: Correct __sync_fetch_and_nand and\n+\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n+\tabout changed semantics of NAND builtin.\n+\t(init_si, init_di): Change init value for __sync_fetch_and_nand to -1.\n+\t(test_si, test_di): Change expected result of\n+\t__sync_nand_and_fetch to ~7.\n+\t* gcc.dg/ia64-sync-2.c: Correct __sync_fetch_and_nand and\n+\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n+\tabout changed semantics of NAND builtin.\n+\t(init_noret_si, init_noret_di): Change init value for\n+\t__sync_fetch_and_nand to -1.\n+\t(init_noret_si, init_noret_di): Change expected result of\n+\t__sync_nand_and_fetch to ~7.\n+\t* gcc.dg/sync-2.c: Correct __sync_fetch_and_nand and\n+\t__sync_nand_and_fetch results.  Add dg-message to look for the warning\n+\tabout changed semantics of NAND builtin.\n+\t(init_qi, init_qi): Change init value for __sync_fetch_and_nand to -1.\n+\t(init_hi, init_hi): Change expected result of\n+\t__sync_nand_and_fetch to ~7.\n+\t* gcc.dg/sync-3.c: Copy from sync-2.c instead of including\n+\tthe c source file.\n+\t* gcc.c-torture/compile/sync-1.c: Add dg-message to look for the\n+\twarning about changed semantics of NAND builtin.\n+\t* gcc.c-torture/compile/sync-2.c: Ditto.\n+\t* gcc.c-torture/compile/sync-3.c: Ditto.\n+\n 2008-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36089"}, {"sha": "0354923d2dd15ba8d1592d047a841b9fa96c72e5", "filename": "gcc/testsuite/gcc.c-torture/compile/sync-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-1.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Validate that each of the __sync builtins compiles.  This won't \n    necessarily link, since the target might not support the builtin,\n    so this may result in external library calls.  */"}, {"sha": "bdc84ef0ae6a4ecf5f4fd55f217188bb1511a5a5", "filename": "gcc/testsuite/gcc.c-torture/compile/sync-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-2.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Validate that each of the __sync builtins compiles.  This won't \n    necessarily link, since the target might not support the builtin,\n    so this may result in external library calls.  */"}, {"sha": "9689eea5bb05385e6a9d271b9680c94a8e658a7b", "filename": "gcc/testsuite/gcc.c-torture/compile/sync-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Validate that each of the __sync builtins compiles.  This won't \n    necessarily link, since the target might not support the builtin,\n    so this may result in external library calls.  */"}, {"sha": "83c995a624f94b02e869f4d7ac653f932d072e32", "filename": "gcc/testsuite/gcc.dg/ia64-sync-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -4,6 +4,8 @@\n /* { dg-options \"-march=i486\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-mcpu=v9\" { target sparc*-*-* } } */\n \n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Test basic functionality of the intrinsics.  The operations should\n    not be optimized away if no one checks the return values.  */\n \n@@ -13,8 +15,8 @@ extern void abort (void);\n extern void *memcpy (void *, const void *, size_t);\n \n static int AI[12];\n-static int init_noret_si[12] = { 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0 };\n-static int test_noret_si[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, 7 };\n+static int init_noret_si[12] = { 0, 0, 0, 1, 0, 0, 0 , 0  , -1, 0, 0, -1 };\n+static int test_noret_si[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7 , 8, 9, ~7 };\n \n static void\n do_noret_si (void)\n@@ -35,8 +37,8 @@ do_noret_si (void)\n }\n \n static long AL[12];\n-static long init_noret_di[12] = { 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0 };\n-static long test_noret_di[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, 7 };\n+static long init_noret_di[12] = { 0, 0, 0, 1, 0, 0, 0 , 0  , -1, 0, 0, -1 };\n+static long test_noret_di[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7 , 8, 9, ~7 };\n \n static void\n do_noret_di (void)"}, {"sha": "69fb9b7c26e808f5c5538a56b7844f637c1f9330", "filename": "gcc/testsuite/gcc.dg/ia64-sync-2.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -4,6 +4,9 @@\n /* { dg-options \"-march=i486\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-mcpu=v9\" { target sparc*-*-* } } */\n \n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Test basic functionality of the intrinsics.  */\n \n __extension__ typedef __SIZE_TYPE__ size_t;\n@@ -12,8 +15,8 @@ extern void abort (void);\n extern void *memcpy (void *, const void *, size_t);\n \n static int AI[18];\n-static int init_si[18] = { 0,0,0,1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n-static int test_si[18] = { 1,1,1,1,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+static int init_si[18] = { 0,0,0,1,0,0, 0,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static int test_si[18] = { 1,1,1,1,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n \n static void\n do_si (void)\n@@ -44,7 +47,7 @@ do_si (void)\n     abort ();\n   if (__sync_fetch_and_xor(AI+10, 9) != 0)\n     abort ();\n-  if (__sync_fetch_and_nand(AI+11, 7) != 0)\n+  if (__sync_fetch_and_nand(AI+11, 7) != -1)\n     abort ();\n \n   if (__sync_add_and_fetch(AI+12, 1) != 1)\n@@ -57,13 +60,13 @@ do_si (void)\n     abort ();\n   if (__sync_xor_and_fetch(AI+16, 9) != 9)\n     abort ();\n-  if (__sync_nand_and_fetch(AI+17, 7) != 7)\n+  if (__sync_nand_and_fetch(AI+17, 7) != ~7)\n     abort ();\n }\n \n static long AL[18];\n-static long init_di[18] = { 0,0,0,1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n-static long test_di[18] = { 1,1,1,1,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+static long init_di[18] = { 0,0,0,1,0,0, 0,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static long test_di[18] = { 1,1,1,1,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n \n static void\n do_di (void)\n@@ -94,7 +97,7 @@ do_di (void)\n     abort ();\n   if (__sync_fetch_and_xor(AL+10, 9) != 0)\n     abort ();\n-  if (__sync_fetch_and_nand(AL+11, 7) != 0)\n+  if (__sync_fetch_and_nand(AL+11, 7) != -1)\n     abort ();\n \n   if (__sync_add_and_fetch(AL+12, 1) != 1)\n@@ -107,7 +110,7 @@ do_di (void)\n     abort ();\n   if (__sync_xor_and_fetch(AL+16, 9) != 9)\n     abort ();\n-  if (__sync_nand_and_fetch(AL+17, 7) != 7)\n+  if (__sync_nand_and_fetch(AL+17, 7) != ~7)\n     abort ();\n }\n "}, {"sha": "d9278075ef241673ebb6c241441e336bc5dd2af8", "filename": "gcc/testsuite/gcc.dg/pr37908.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sync_char_short } */\n+/* { dg-options \"-Wsync-nand\" } */\n+/* { dg-options \"-Wsync-nand -march=i486\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-Wsync-nand -mcpu=v9\" { target sparc*-*-* } } */\n+\n+\n+extern void abort (void);\n+\n+int main (void)\n+{\n+\n+  short xLoc;\n+  short xIn, xOut, xExpect, i = 1;\n+\n+  xLoc = xIn = ~ (1 << i);\n+  xExpect = ~ (xIn & 0x7F);\n+\n+  xOut = __sync_nand_and_fetch (&xLoc, 0x7F); /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" } */\n+\n+  if (xOut != xExpect)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "7fea8f8fd03bcc896ff394b63e2233ec24f402ef", "filename": "gcc/testsuite/gcc.dg/sync-2.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -4,18 +4,17 @@\n /* { dg-options \"-march=i486\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-mcpu=v9\" { target sparc*-*-* } } */\n \n+/* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" { target *-*-* } 0 } */\n+\n /* Test functionality of the intrinsics for 'short' and 'char'.  */\n \n extern void abort (void);\n extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n \n-#ifndef AI_ALIGN\n-#define AI_ALIGN\n-#endif\n-\n-static char AI[18] AI_ALIGN;\n-static char init_qi[18] = { 3,5,7,9,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n-static char test_qi[18] = { 3,5,7,9,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+static char AI[18];\n+static char init_qi[18] = { 3,5,7,9,0,0,0 ,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static char test_qi[18] = { 3,5,7,9,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n \n static void\n do_qi (void)\n@@ -34,7 +33,7 @@ do_qi (void)\n     abort ();\n   if (__sync_fetch_and_xor(AI+10, 9) != 0)\n     abort ();\n-  if (__sync_fetch_and_nand(AI+11, 7) != 0)\n+  if (__sync_fetch_and_nand(AI+11, 7) != (char)-1)\n     abort ();\n \n   if (__sync_add_and_fetch(AI+12, 1) != 1)\n@@ -47,13 +46,13 @@ do_qi (void)\n     abort ();\n   if (__sync_xor_and_fetch(AI+16, 9) != 9)\n     abort ();\n-  if (__sync_nand_and_fetch(AI+17, 7) != 7)\n+  if (__sync_nand_and_fetch(AI+17, 7) != ~7)\n     abort ();\n }\n \n static short AL[18];\n-static short init_hi[18] = { 3,5,7,9,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n-static short test_hi[18] = { 3,5,7,9,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+static short init_hi[18] = { 3,5,7,9,0,0,0 ,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static short test_hi[18] = { 3,5,7,9,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n \n static void\n do_hi (void)\n@@ -72,7 +71,7 @@ do_hi (void)\n     abort ();\n   if (__sync_fetch_and_xor(AL+10, 9) != 0)\n     abort ();\n-  if (__sync_fetch_and_nand(AL+11, 7) != 0)\n+  if (__sync_fetch_and_nand(AL+11, 7) != -1)\n     abort ();\n \n   if (__sync_add_and_fetch(AL+12, 1) != 1)\n@@ -85,7 +84,7 @@ do_hi (void)\n     abort ();\n   if (__sync_xor_and_fetch(AL+16, 9) != 9)\n     abort ();\n-  if (__sync_nand_and_fetch(AL+17, 7) != 7)\n+  if (__sync_nand_and_fetch(AL+17, 7) != ~7)\n     abort ();\n }\n "}, {"sha": "a359d162fee3cb67d7ed29947148b840663a4521", "filename": "gcc/testsuite/gcc.dg/sync-3.c", "status": "modified", "additions": 97, "deletions": 5, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23462d4d8fb5b5e40d6a62dd285301228f13a37b/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c?ref=23462d4d8fb5b5e40d6a62dd285301228f13a37b", "patch": "@@ -1,10 +1,102 @@\n /* { dg-do run } */\n /* { dg-require-effective-target sync_char_short } */\n-/* { dg-options \"-O2\" } */\n-/* { dg-options \"-march=i486 -O2\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-/* { dg-options \"-mcpu=v9 -O2\" { target sparc*-*-* } } */\n+/* { dg-options \"-ansi\" } */\n+/* { dg-options \"-march=i486\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-mcpu=v9\" { target sparc*-*-* } } */\n \n /* Test functionality of the intrinsics for 'short' and 'char'.  */\n \n-#define AI_ALIGN __attribute__((__aligned__ (4)))\n-#include \"sync-2.c\"\n+extern void abort (void);\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+\n+static char AI[18] __attribute__((__aligned__ (4)));\n+static char init_qi[18] = { 3,5,7,9,0,0,0 ,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static char test_qi[18] = { 3,5,7,9,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n+\n+static void\n+do_qi (void)\n+{\n+  if (__sync_fetch_and_add(AI+4, 1) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AI+5, 4) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AI+6, 22) != 0)\n+    abort ();\n+  if (__sync_fetch_and_sub(AI+7, 12) != 0)\n+    abort ();\n+  if (__sync_fetch_and_and(AI+8, 7) != (char)-1)\n+    abort ();\n+  if (__sync_fetch_and_or(AI+9, 8) != 0)\n+    abort ();\n+  if (__sync_fetch_and_xor(AI+10, 9) != 0)\n+    abort ();\n+  if (__sync_fetch_and_nand(AI+11, 7) != (char)-1) /* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" } */\n+    abort ();\n+\n+  if (__sync_add_and_fetch(AI+12, 1) != 1)\n+    abort ();\n+  if (__sync_sub_and_fetch(AI+13, 12) != (char)-12)\n+    abort ();\n+  if (__sync_and_and_fetch(AI+14, 7) != 7)\n+    abort ();\n+  if (__sync_or_and_fetch(AI+15, 8) != 8)\n+    abort ();\n+  if (__sync_xor_and_fetch(AI+16, 9) != 9)\n+    abort ();\n+  if (__sync_nand_and_fetch(AI+17, 7) != ~7) /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" } */\n+    abort ();\n+}\n+\n+static short AL[18];\n+static short init_hi[18] = { 3,5,7,9,0,0,0 ,0  ,-1,0,0,-1,0,0  ,-1,0,0,-1 };\n+static short test_hi[18] = { 3,5,7,9,1,4,22,-12,7 ,8,9,~7,1,-12,7 ,8,9,~7 };\n+\n+static void\n+do_hi (void)\n+{\n+  if (__sync_fetch_and_add(AL+4, 1) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AL+5, 4) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AL+6, 22) != 0)\n+    abort ();\n+  if (__sync_fetch_and_sub(AL+7, 12) != 0)\n+    abort ();\n+  if (__sync_fetch_and_and(AL+8, 7) != -1)\n+    abort ();\n+  if (__sync_fetch_and_or(AL+9, 8) != 0)\n+    abort ();\n+  if (__sync_fetch_and_xor(AL+10, 9) != 0)\n+    abort ();\n+  if (__sync_fetch_and_nand(AL+11, 7) != -1)\n+    abort ();\n+\n+  if (__sync_add_and_fetch(AL+12, 1) != 1)\n+    abort ();\n+  if (__sync_sub_and_fetch(AL+13, 12) != -12)\n+    abort ();\n+  if (__sync_and_and_fetch(AL+14, 7) != 7)\n+    abort ();\n+  if (__sync_or_and_fetch(AL+15, 8) != 8)\n+    abort ();\n+  if (__sync_xor_and_fetch(AL+16, 9) != 9)\n+    abort ();\n+  if (__sync_nand_and_fetch(AL+17, 7) != ~7)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  memcpy(AI, init_qi, sizeof(init_qi));\n+  memcpy(AL, init_hi, sizeof(init_hi));\n+\n+  do_qi ();\n+  do_hi ();\n+\n+  if (memcmp (AI, test_qi, sizeof(test_qi)))\n+    abort ();\n+  if (memcmp (AL, test_hi, sizeof(test_hi)))\n+    abort ();\n+\n+  return 0;\n+}"}]}