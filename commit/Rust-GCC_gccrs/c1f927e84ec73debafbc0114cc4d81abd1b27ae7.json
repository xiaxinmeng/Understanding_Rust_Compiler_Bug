{"sha": "c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmOTI3ZTg0ZWM3M2RlYmFmYmMwMTE0Y2M0ZDgxYWJkMWIyN2FlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-09-08T15:56:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-08T15:56:27Z"}, "message": "c-decl.c (c_expand_body_1): Push and pop function context here.\n\ngcc/\n        * c-decl.c (c_expand_body_1): Push and pop function context here.\n        * tree-optimize.c (tree_rest_of_compilation): ... not here.  Take\n        nested argument instead of computing nesting ourselves.\n\ngcc/cp/\n        * decl.c (finish_function): Clear current_function_decl.\n        * decl2.c (mark_used): Don't push/pop gc context.\n        * optimize.c (optimize_function): Likewise.\n        * tree.c (cp_cannot_inline_tree_fn): Likewise.\n        * pt.c (instantiate_decl): Inc/dec function_depth instead.\n        * semantics.c (expand_body): Update for tree_rest_of_compilation\n        nested argument.\n\nFrom-SVN: r71208", "tree": {"sha": "ad932cb4dec8a82eb9fd686cb0a6c341596f0816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad932cb4dec8a82eb9fd686cb0a6c341596f0816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/comments", "author": null, "committer": null, "parents": [{"sha": "7f14bbe68f1fac27349b5154730aeb2e23e97dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f14bbe68f1fac27349b5154730aeb2e23e97dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f14bbe68f1fac27349b5154730aeb2e23e97dfa"}], "stats": {"total": 95, "additions": 38, "deletions": 57}, "files": [{"sha": "af01922a75eee0fca00cf6086118e94d6211b0c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -1,3 +1,9 @@\n+2003-09-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-decl.c (c_expand_body_1): Push and pop function context here.\n+\t* tree-optimize.c (tree_rest_of_compilation): ... not here.  Take\n+\tnested argument instead of computing nesting ourselves.\n+\n 2003-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* toplev.c (rest_of_handle_stack_regs): Call split_all_insns before"}, {"sha": "6afcd7afc94d7d7d38143addbbafbb314d6c926b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -6181,9 +6181,16 @@ c_expand_body_1 (tree fndecl, int nested_p)\n       /* Make sure that we will evaluate variable-sized types involved\n \t in our function's type.  */\n       expand_pending_sizes (DECL_LANG_SPECIFIC (fndecl)->pending_sizes);\n+\n+      /* Squirrel away our current state.  */\n+      push_function_context ();\n     }\n \n-  tree_rest_of_compilation (fndecl);\n+  tree_rest_of_compilation (fndecl, nested_p);\n+\n+  if (nested_p)\n+    /* Return to the enclosing function.  */\n+    pop_function_context ();\n \n   if (DECL_STATIC_CONSTRUCTOR (fndecl))\n     {"}, {"sha": "9fea09b75d1818df3d9cfaef4f46c04e4549b4a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -1,3 +1,13 @@\n+2003-09-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (finish_function): Clear current_function_decl.\n+\t* decl2.c (mark_used): Don't push/pop gc context.\n+\t* optimize.c (optimize_function): Likewise.\n+\t* tree.c (cp_cannot_inline_tree_fn): Likewise.\n+\t* pt.c (instantiate_decl): Inc/dec function_depth instead.\n+\t* semantics.c (expand_body): Update for tree_rest_of_compilation\n+\tnested argument.\n+\n 2003-09-07  Gabriel Dos Reis  <gcc@integrable-solutions.net>\n \n \tPR c++/11762"}, {"sha": "6886fe4d2f2b6c088d25a2657c9e4d02a647fd2b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -14104,6 +14104,7 @@ finish_function (int flags)\n   /* We're leaving the context of this function, so zap cfun.  It's still in\n      DECL_SAVED_INSNS, and we'll restore it in tree_rest_of_compilation.  */\n   cfun = NULL;\n+  current_function_decl = NULL;\n \n   /* If this is an in-class inline definition, we may have to pop the\n      bindings for the template parameters that we added in"}, {"sha": "209f793f06265aaee803a6b312fb858a5323f298", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -4232,10 +4232,7 @@ mark_used (tree decl)\n \t\t  information.  */\n \t       || cp_function_chain->can_throw);\n \n-      /* Our caller is likely to have lots of data on the stack.  */\n-      ggc_push_context ();\n       instantiate_decl (decl, defer);\n-      ggc_pop_context ();\n     }\n }\n "}, {"sha": "bcb74e4917f9d0f7a544fe3467de51b194fca21a", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -56,31 +56,7 @@ optimize_function (tree fn)\n          and (d) TARGET_ASM_OUTPUT_MI_THUNK is there to DTRT anyway.  */\n       && !DECL_THUNK_P (fn))\n     {\n-      /* ??? Work around GC problem.  Call stack is\n-\n-\t -> instantiate_decl\n-\t -> expand_or_defer_fn\n-\t -> maybe_clone_body\n-\t -> expand_body\n-\t -> tree_rest_of_compilation\n-\n-\t which of course collects.  This used to be protected by the\n-\t \"regular\" nested call ggc_push_context that now lives in \n-\t tree_rest_of_compilation.\n-\n-\t Two good fixes:\n-\t (1) Do inlining in tree_rest_of_compilation.  This is good\n-\t     in that this common optimization happens in common code.\n-\t (2) Don't nest compilation of functions.  Instead queue the\n-\t     new function to cgraph, and let it get picked up in the\n-\t     next round of \"emit everything that needs emitting\".\n-\n-\t For the nonce, just protect things here.  */\n-\n-      ggc_push_context ();\n       optimize_inline_calls (fn);\n-      ggc_pop_context ();\n-\n       dump_function (TDI_inlined, fn);\n     }\n   "}, {"sha": "bb9304769d17c922e41dbc9438318f4139a6464c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -10730,10 +10730,14 @@ instantiate_decl (tree d, int defer_ok)\n \n   timevar_push (TV_PARSE);\n \n-  /* We may be in the middle of deferred access check.  Disable\n-     it now.  */\n+  /* We may be in the middle of deferred access check.  Disable it now.  */\n   push_deferring_access_checks (dk_no_deferred);\n \n+  /* Our caller does not expect collection to happen, which it might if\n+     we decide to compile the function to rtl now.  Arrange for a new\n+     gc context to be created if so.  */\n+  function_depth++;\n+\n   /* Set TD to the template whose DECL_TEMPLATE_RESULT is the pattern\n      for the instantiation.  */\n   td = template_for_substitution (d);\n@@ -10978,6 +10982,7 @@ instantiate_decl (tree d, int defer_ok)\n   input_location = saved_loc;\n   pop_deferring_access_checks ();\n   pop_tinst_level ();\n+  function_depth--;\n \n   timevar_pop (TV_PARSE);\n "}, {"sha": "8b765ef1697a7a9a3748c680e8cab31e7840aa82", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -2868,7 +2868,7 @@ expand_body (tree fn)\n   optimize_function (fn);\n   timevar_pop (TV_INTEGRATION);\n \n-  tree_rest_of_compilation (fn);\n+  tree_rest_of_compilation (fn, function_depth > 1);\n \n   current_function_decl = saved_function;\n   input_location = saved_loc;"}, {"sha": "0c729d6118c81b156eff8a2715e64792139b0fb4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -2026,15 +2026,8 @@ cp_cannot_inline_tree_fn (tree* fnp)\n \t\t\t(template_for_substitution (fn))))\n \treturn 1;\n \n-      /* Our caller does not expect us to call ggc_collect, but\n-\t instantiate_decl can call rest_of_compilation so we must\n-\t protect our caller.  */\n-      ggc_push_context();\n-      \n       fn = *fnp = instantiate_decl (fn, /*defer_ok=*/0);\n \n-      ggc_pop_context();\n-\n       if (TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n \treturn 1;\n     }"}, {"sha": "ae05f4b22ec0b5ef40a380d41db3591bc87ef813", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -66,7 +66,7 @@ extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void rest_of_decl_compilation (tree, const char *, int, int);\n extern void rest_of_type_compilation (tree, int);\n extern void rest_of_compilation (tree);\n-extern void tree_rest_of_compilation (tree);\n+extern void tree_rest_of_compilation (tree, bool);\n \n extern void announce_function (tree);\n "}, {"sha": "253fda2f3cd94cbe2d223a21c83d246eb27cdb1a", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f927e84ec73debafbc0114cc4d81abd1b27ae7/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c1f927e84ec73debafbc0114cc4d81abd1b27ae7", "patch": "@@ -93,21 +93,13 @@ clear_decl_rtl (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n    compilation for FNDECL.  */\n \n void\n-tree_rest_of_compilation (tree fndecl)\n+tree_rest_of_compilation (tree fndecl, bool nested_p)\n {\n-  static int nesting = -1;\n-\n   timevar_push (TV_EXPAND);\n \n-  ++nesting;\n-\n   if (flag_unit_at_a_time && !cgraph_global_info_ready)\n     abort ();\n \n-  if (nesting > 0)\n-    /* Squirrel away our current state.  */\n-    push_function_context ();\n-\n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n@@ -162,7 +154,7 @@ tree_rest_of_compilation (tree fndecl)\n \n   /* If this is a nested function, protect the local variables in the stack\n      above us from being collected while we're compiling this function.  */\n-  if (nesting > 0)\n+  if (nested_p)\n     ggc_push_context ();\n \n   /* There's no need to defer outputting this function any more; we\n@@ -173,7 +165,7 @@ tree_rest_of_compilation (tree fndecl)\n   rest_of_compilation (fndecl);\n \n   /* Undo the GC context switch.  */\n-  if (nesting > 0)\n+  if (nested_p)\n     ggc_pop_context ();\n \n   /* If requested, warn about function definitions where the function will\n@@ -227,7 +219,7 @@ tree_rest_of_compilation (tree fndecl)\n \t\t\t\tclear_decl_rtl,\n \t\t\t\tfndecl);\n \n-  if (DECL_SAVED_INSNS (fndecl) == 0 && ! nesting && ! flag_inline_trees)\n+  if (DECL_SAVED_INSNS (fndecl) == 0 && !nested_p && !flag_inline_trees)\n     {\n       /* Stop pointing to the local nodes about to be freed.\n \t But DECL_INITIAL must remain nonzero so we know this\n@@ -240,11 +232,5 @@ tree_rest_of_compilation (tree fndecl)\n       DECL_ARGUMENTS (fndecl) = 0;\n     }\n \n-  if (nesting > 0)\n-    /* Return to the enclosing function.  */\n-    pop_function_context ();\n-\n-  --nesting;\n-\n   timevar_pop (TV_EXPAND);\n }"}]}