{"sha": "c4394c1546db30313bdd30d0ad3d5e304d44ba24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQzOTRjMTU0NmRiMzAzMTNiZGQzMGQwYWQzZDVlMzA0ZDQ0YmEyNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:43:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:43:49Z"}, "message": "s-osinte-vxworks6.ads: Removed, merged with s-osinte-vxworks.ads/.adb\n\n\t* s-osinte-vxworks6.ads: Removed, merged with s-osinte-vxworks.ads/.adb\n\t* s-vxwext.ads, s-vxwext-kernel.ads, s-vxwext-rtp.ads,\n\ts-vxwext-rtp.adb: New files.\n\n\t* s-taprop-vxworks.adb, s-osinte-vxworks.ads, s-osinte-vxworks.adb: \n\tMinor updates to accomodate changes above.\n\nFrom-SVN: r134005", "tree": {"sha": "79e66576bfa8f7d6e286eaedc4cec3ed5133bd60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e66576bfa8f7d6e286eaedc4cec3ed5133bd60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4394c1546db30313bdd30d0ad3d5e304d44ba24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4394c1546db30313bdd30d0ad3d5e304d44ba24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4394c1546db30313bdd30d0ad3d5e304d44ba24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4394c1546db30313bdd30d0ad3d5e304d44ba24/comments", "author": null, "committer": null, "parents": [{"sha": "770db697e62902a236c8cb4cf0e8b6cc52051703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770db697e62902a236c8cb4cf0e8b6cc52051703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770db697e62902a236c8cb4cf0e8b6cc52051703"}], "stats": {"total": 898, "additions": 343, "deletions": 555}, "files": [{"sha": "312fabaaeb65761eff1588706a4af58bd4cdf894", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -47,62 +47,15 @@ package body System.OS_Interface is\n    Low_Priority : constant := 255;\n    --  VxWorks native (default) lowest scheduling priority\n \n-   ------------\n-   -- getpid --\n-   ------------\n-\n-   function getpid return t_id is\n-   begin\n-      --  VxWorks 5 (and VxWorks 6 in kernel mode) does not have a getpid\n-      --  function. taskIdSelf is the equivalent routine.\n-\n-      return taskIdSelf;\n-   end getpid;\n-\n-   --------------\n-   -- Int_Lock --\n-   --------------\n-\n-   function Int_Lock return int is\n-      function intLock return int;\n-      pragma Import (C, intLock, \"intLock\");\n-   begin\n-      return intLock;\n-   end Int_Lock;\n-\n-   ----------------\n-   -- Int_Unlock --\n-   ----------------\n-\n-   function Int_Unlock return int is\n-      function intUnlock return int;\n-      pragma Import (C, intUnlock, \"intUnlock\");\n-   begin\n-      return intUnlock;\n-   end Int_Unlock;\n-\n    ----------\n    -- kill --\n    ----------\n \n    function kill (pid : t_id; sig : Signal) return int is\n-      function c_kill (pid : t_id; sig : Signal) return int;\n-      pragma Import (C, c_kill, \"kill\");\n    begin\n-      return c_kill (pid, sig);\n+      return System.VxWorks.Ext.kill (pid, int (sig));\n    end kill;\n \n-   --------------------\n-   -- Set_Time_Slice --\n-   --------------------\n-\n-   function Set_Time_Slice (ticks : int) return int is\n-      function kernelTimeSlice (ticks : int) return int;\n-      pragma Import (C, kernelTimeSlice, \"kernelTimeSlice\");\n-   begin\n-      return kernelTimeSlice (ticks);\n-   end Set_Time_Slice;\n-\n    -------------\n    -- sigwait --\n    -------------\n@@ -129,28 +82,6 @@ package body System.OS_Interface is\n       end if;\n    end sigwait;\n \n-   ---------------\n-   -- Task_Cont --\n-   ---------------\n-\n-   function Task_Cont (tid : t_id) return int is\n-      function taskResume (tid : t_id) return int;\n-      pragma Import (C, taskResume, \"taskResume\");\n-   begin\n-      return taskResume (tid);\n-   end Task_Cont;\n-\n-   ---------------\n-   -- Task_Stop --\n-   ---------------\n-\n-   function Task_Stop (tid : t_id) return int is\n-      function taskSuspend (tid : t_id) return int;\n-      pragma Import (C, taskSuspend, \"taskSuspend\");\n-   begin\n-      return taskSuspend (tid);\n-   end Task_Stop;\n-\n    -----------------\n    -- To_Duration --\n    -----------------"}, {"sha": "35baabb6924e0404ec96d583637fc326d5eda296", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 77, "deletions": 39, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n+--            Copyright (C) 1991-1994, Florida State University             --\n --          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the VxWorks version of this package\n+--  This is the VxWorks 5.x and 6.x version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by the tasking run-time (libgnarl).\n@@ -41,18 +41,20 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-\n with System.VxWorks;\n+with System.VxWorks.Ext;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n \n-   subtype int        is Interfaces.C.int;\n-   subtype short      is Short_Integer;\n-   type unsigned_int  is mod 2 ** int'Size;\n-   type long          is new Long_Integer;\n-   type unsigned_long is mod 2 ** long'Size;\n-   type size_t        is mod 2 ** Standard'Address_Size;\n+   subtype int             is Interfaces.C.int;\n+   subtype short           is Short_Integer;\n+   type unsigned_int       is mod 2 ** int'Size;\n+   type long               is new Long_Integer;\n+   type unsigned_long      is mod 2 ** long'Size;\n+   type long_long          is new Long_Long_Integer;\n+   type unsigned_long_long is mod 2 ** long_long'Size;\n+   type size_t             is mod 2 ** Standard'Address_Size;\n \n    -----------\n    -- Errno --\n@@ -73,7 +75,7 @@ package System.OS_Interface is\n    -- Signals and Interrupts --\n    ----------------------------\n \n-   NSIG : constant := 32;\n+   NSIG : constant := 64;\n    --  Number of signals on the target OS\n    type Signal is new int range 0 .. Interfaces.C.\"-\" (NSIG, 1);\n \n@@ -82,11 +84,58 @@ package System.OS_Interface is\n \n    Max_Interrupt : constant := Max_HW_Interrupt;\n \n-   SIGILL  : constant :=  4; --  illegal instruction (not reset)\n-   SIGABRT : constant :=  6; --  used by abort, replace SIGIOT in the future\n-   SIGFPE  : constant :=  8; --  floating point exception\n-   SIGBUS  : constant := 10; --  bus error\n-   SIGSEGV : constant := 11; --  segmentation violation\n+   --  Signals common to Vxworks 5.x and 6.x\n+\n+   SIGILL    : constant :=  4; --  illegal instruction (not reset when caught)\n+   SIGABRT   : constant :=  6; --  used by abort, replace SIGIOT in the future\n+   SIGFPE    : constant :=  8; --  floating point exception\n+   SIGBUS    : constant := 10; --  bus error\n+   SIGSEGV   : constant := 11; --  segmentation violation\n+\n+   --  Signals specific to VxWorks 6.x\n+\n+   SIGHUP    : constant :=  1; --  hangup\n+   SIGINT    : constant :=  2; --  interrupt\n+   SIGQUIT   : constant :=  3; --  quit\n+   SIGTRAP   : constant :=  5; --  trace trap (not reset when caught)\n+   SIGEMT    : constant :=  7; --  EMT instruction\n+   SIGKILL   : constant :=  9; --  kill\n+   SIGFMT    : constant := 12; --  STACK FORMAT ERROR (not posix)\n+   SIGPIPE   : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM   : constant := 14; --  alarm clock\n+   SIGTERM   : constant := 15; --  software termination signal from kill\n+   SIGCNCL   : constant := 16; --  pthreads cancellation signal\n+   SIGSTOP   : constant := 17; --  sendable stop signal not from tty\n+   SIGTSTP   : constant := 18; --  stop signal from tty\n+   SIGCONT   : constant := 19; --  continue a stopped process\n+   SIGCHLD   : constant := 20; --  to parent on child stop or exit\n+   SIGTTIN   : constant := 21; --  to readers pgrp upon background tty read\n+   SIGTTOU   : constant := 22; --  like TTIN for output\n+\n+   SIGRES1   : constant := 23; --  reserved signal number (Not POSIX)\n+   SIGRES2   : constant := 24; --  reserved signal number (Not POSIX)\n+   SIGRES3   : constant := 25; --  reserved signal number (Not POSIX)\n+   SIGRES4   : constant := 26; --  reserved signal number (Not POSIX)\n+   SIGRES5   : constant := 27; --  reserved signal number (Not POSIX)\n+   SIGRES6   : constant := 28; --  reserved signal number (Not POSIX)\n+   SIGRES7   : constant := 29; --  reserved signal number (Not POSIX)\n+\n+   SIGUSR1   : constant := 30; --  user defined signal 1\n+   SIGUSR2   : constant := 31; --  user defined signal 2\n+\n+   SIGPOLL   : constant := 32; --  pollable event\n+   SIGPROF   : constant := 33; --  profiling timer expired\n+   SIGSYS    : constant := 34; --  bad system call\n+   SIGURG    : constant := 35; --  high bandwidth data is available at socket\n+   SIGVTALRM : constant := 36; --  virtual timer expired\n+   SIGXCPU   : constant := 37; --  CPU time limit exceeded\n+   SIGXFSZ   : constant := 38; --  file size time limit exceeded\n+\n+   SIGEVTS   : constant := 39; --  signal event thread send\n+   SIGEVTD   : constant := 40; --  signal event thread delete\n+\n+   SIGRTMIN  : constant := 48; --  Realtime signal min\n+   SIGRTMAX  : constant := 63; --  Realtime signal max\n \n    -----------------------------------\n    -- Signal processing definitions --\n@@ -100,8 +149,8 @@ package System.OS_Interface is\n \n    --  The sa_flags in struct sigaction\n \n-   SA_SIGINFO   : constant := 16#0002#;\n-   SA_ONSTACK   : constant := 16#0004#;\n+   SA_SIGINFO : constant := 16#0002#;\n+   SA_ONSTACK : constant := 16#0004#;\n \n    SIG_DFL : constant := 0;\n    SIG_IGN : constant := 1;\n@@ -152,36 +201,33 @@ package System.OS_Interface is\n       oset : access sigset_t) return int;\n    pragma Import (C, pthread_sigmask, \"sigprocmask\");\n \n-   type t_id is new long;\n+   subtype t_id is System.VxWorks.Ext.t_id;\n    subtype Thread_Id is t_id;\n \n    function kill (pid : t_id; sig : Signal) return int;\n    pragma Inline (kill);\n \n-   function getpid return t_id;\n-   pragma Inline (getpid);\n+   function getpid return t_id renames System.VxWorks.Ext.getpid;\n \n-   function Task_Stop (tid : t_id) return int;\n-   pragma Inline (Task_Stop);\n+   function Task_Stop (tid : t_id) return int\n+     renames System.VxWorks.Ext.Task_Stop;\n    --  If we are in the kernel space, stop the task whose t_id is\n    --  given in parameter in such a way that it can be examined by the\n    --  debugger. This typically maps to taskSuspend on VxWorks 5 and\n    --  to taskStop on VxWorks 6.\n \n-   function Task_Cont (tid : t_id) return int;\n-   pragma Inline (Task_Cont);\n+   function Task_Cont (tid : t_id) return int\n+     renames System.VxWorks.Ext.Task_Cont;\n    --  If we are in the kernel space, continue the task whose t_id is\n    --  given in parameter if it has been stopped previously to be examined\n    --  by the debugger (e.g. by taskStop). It typically maps to taskResume\n    --  on VxWorks 5 and to taskCont on VxWorks 6.\n \n-   function Int_Lock return int;\n-   pragma Inline (Int_Lock);\n+   function Int_Lock return int renames System.VxWorks.Ext.Int_Lock;\n    --  If we are in the kernel space, lock interrupts. It typically maps to\n    --  intLock.\n \n-   function Int_Unlock return int;\n-   pragma Inline (Int_Unlock);\n+   function Int_Unlock return int renames System.VxWorks.Ext.Int_Unlock;\n    --  If we are in the kernel space, unlock interrupts. It typically maps to\n    --  intUnlock.\n \n@@ -214,14 +260,6 @@ package System.OS_Interface is\n      (clock_id : clockid_t; tp : access timespec) return int;\n    pragma Import (C, clock_gettime, \"clock_gettime\");\n \n-   type ULONG is new unsigned_long;\n-\n-   procedure tickSet (ticks : ULONG);\n-   pragma Import (C, tickSet, \"tickSet\");\n-\n-   function tickGet return ULONG;\n-   pragma Import (C, tickGet, \"tickGet\");\n-\n    ----------------------\n    -- Utility Routines --\n    ----------------------\n@@ -324,8 +362,8 @@ package System.OS_Interface is\n    procedure taskDelete (tid : t_id);\n    pragma Import (C, taskDelete, \"taskDelete\");\n \n-   function Set_Time_Slice (ticks : int) return int;\n-   pragma Inline (Set_Time_Slice);\n+   function Set_Time_Slice (ticks : int) return int\n+     renames System.VxWorks.Ext.Set_Time_Slice;\n    --  Calls kernelTimeSlice under VxWorks 5.x\n    --  Do nothing under VxWorks 6.x\n \n@@ -395,7 +433,7 @@ package System.OS_Interface is\n    --  Release all threads blocked on the semaphore\n \n private\n-   type sigset_t is new long;\n+   type sigset_t is new unsigned_long_long;\n \n    type pid_t is new int;\n "}, {"sha": "4ef43c9c31f0813be6931c60f63eef8e67b4f678", "filename": "gcc/ada/s-osinte-vxworks6.ads", "status": "removed", "additions": 0, "deletions": 446, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770db697e62902a236c8cb4cf0e8b6cc52051703/gcc%2Fada%2Fs-osinte-vxworks6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770db697e62902a236c8cb4cf0e8b6cc52051703/gcc%2Fada%2Fs-osinte-vxworks6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks6.ads?ref=770db697e62902a236c8cb4cf0e8b6cc52051703", "patch": "@@ -1,446 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n---                                                                          --\n---                    S Y S T E M . O S _ I N T E R F A C E                 --\n---                                                                          --\n---                                   S p e c                                --\n---                                                                          --\n---            Copyright (C) 1991-1994, Florida State University             --\n---          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNARL; see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks 6.x version of this package\n-\n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by the tasking run-time (libgnarl).\n-\n---  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n---  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n-\n-with Interfaces.C;\n-with System.VxWorks;\n-\n-package System.OS_Interface is\n-   pragma Preelaborate;\n-\n-   subtype int             is Interfaces.C.int;\n-   subtype short           is Short_Integer;\n-   type unsigned_int       is mod 2 ** int'Size;\n-   type long               is new Long_Integer;\n-   type unsigned_long      is mod 2 ** long'Size;\n-   type long_long          is new Long_Long_Integer;\n-   type unsigned_long_long is mod 2 ** long_long'Size;\n-   type size_t             is mod 2 ** Standard'Address_Size;\n-\n-   -----------\n-   -- Errno --\n-   -----------\n-\n-   function errno return int;\n-   pragma Import (C, errno, \"errnoGet\");\n-\n-   EINTR     : constant := 4;\n-   EAGAIN    : constant := 35;\n-   ENOMEM    : constant := 12;\n-   EINVAL    : constant := 22;\n-   ETIMEDOUT : constant := 60;\n-\n-   FUNC_ERR  : constant := -1;\n-\n-   ----------------------------\n-   -- Signals and Interrupts --\n-   ----------------------------\n-\n-   NSIG : constant := 64;\n-   --  Number of signals on the target OS\n-   type Signal is new int range 0 .. Interfaces.C.\"-\" (NSIG, 1);\n-\n-   Max_HW_Interrupt : constant := System.VxWorks.Num_HW_Interrupts - 1;\n-   type HW_Interrupt is new int range 0 .. Max_HW_Interrupt;\n-\n-   Max_Interrupt : constant := Max_HW_Interrupt;\n-\n-   SIGHUP    : constant :=  1; --  hangup\n-   SIGINT    : constant :=  2; --  interrupt\n-   SIGQUIT   : constant :=  3; --  quit\n-   SIGILL    : constant :=  4; --  illegal instruction (not reset when caught)\n-   SIGTRAP   : constant :=  5; --  trace trap (not reset when caught)\n-   SIGABRT   : constant :=  6; --  used by abort, replace SIGIOT in the future\n-   SIGEMT    : constant :=  7; --  EMT instruction\n-   SIGFPE    : constant :=  8; --  floating point exception\n-   SIGKILL   : constant :=  9; --  kill\n-   SIGBUS    : constant := 10; --  bus error\n-   SIGSEGV   : constant := 11; --  segmentation violation\n-   SIGFMT    : constant := 12; --  STACK FORMAT ERROR (not posix)\n-   SIGPIPE   : constant := 13; --  write on a pipe with no one to read it\n-   SIGALRM   : constant := 14; --  alarm clock\n-   SIGTERM   : constant := 15; --  software termination signal from kill\n-   SIGCNCL   : constant := 16; --  pthreads cancellation signal\n-   SIGSTOP   : constant := 17; --  sendable stop signal not from tty\n-   SIGTSTP   : constant := 18; --  stop signal from tty\n-   SIGCONT   : constant := 19; --  continue a stopped process\n-   SIGCHLD   : constant := 20; --  to parent on child stop or exit\n-   SIGTTIN   : constant := 21; --  to readers pgrp upon background tty read\n-   SIGTTOU   : constant := 22; --  like TTIN for output\n-\n-   SIGRES1   : constant := 23; --  reserved signal number (Not POSIX)\n-   SIGRES2   : constant := 24; --  reserved signal number (Not POSIX)\n-   SIGRES3   : constant := 25; --  reserved signal number (Not POSIX)\n-   SIGRES4   : constant := 26; --  reserved signal number (Not POSIX)\n-   SIGRES5   : constant := 27; --  reserved signal number (Not POSIX)\n-   SIGRES6   : constant := 28; --  reserved signal number (Not POSIX)\n-   SIGRES7   : constant := 29; --  reserved signal number (Not POSIX)\n-\n-   SIGUSR1   : constant := 30; --  user defined signal 1\n-   SIGUSR2   : constant := 31; --  user defined signal 2\n-\n-   SIGPOLL   : constant := 32; --  pollable event\n-   SIGPROF   : constant := 33; --  profiling timer expired\n-   SIGSYS    : constant := 34; --  bad system call\n-   SIGURG    : constant := 35; --  high bandwidth data is available at socket\n-   SIGVTALRM : constant := 36; --  virtual timer expired\n-   SIGXCPU   : constant := 37; --  CPU time limit exceeded\n-   SIGXFSZ   : constant := 38; --  file size time limit exceeded\n-\n-   SIGEVTS   : constant := 39; --  signal event thread send\n-   SIGEVTD   : constant := 40; --  signal event thread delete\n-\n-   SIGRTMIN  : constant := 48; --  Realtime signal min\n-   SIGRTMAX  : constant := 63; --  Realtime signal max\n-\n-   -----------------------------------\n-   -- Signal processing definitions --\n-   -----------------------------------\n-\n-   --  The how in sigprocmask()\n-   SIG_BLOCK   : constant := 1;\n-   SIG_UNBLOCK : constant := 2;\n-   SIG_SETMASK : constant := 3;\n-\n-   --  The sa_flags in struct sigaction\n-   SA_SIGINFO   : constant := 16#0002#;\n-   SA_ONSTACK   : constant := 16#0004#;\n-\n-   SIG_DFL : constant := 0;\n-   SIG_IGN : constant := 1;\n-\n-   type sigset_t is private;\n-\n-   type struct_sigaction is record\n-      sa_handler : System.Address;\n-      sa_mask    : sigset_t;\n-      sa_flags   : int;\n-   end record;\n-   pragma Convention (C, struct_sigaction);\n-   type struct_sigaction_ptr is access all struct_sigaction;\n-\n-   function sigaddset (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigaddset, \"sigaddset\");\n-\n-   function sigdelset (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigdelset, \"sigdelset\");\n-\n-   function sigfillset (set : access sigset_t) return int;\n-   pragma Import (C, sigfillset, \"sigfillset\");\n-\n-   function sigismember (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigismember, \"sigismember\");\n-\n-   function sigemptyset (set : access sigset_t) return int;\n-   pragma Import (C, sigemptyset, \"sigemptyset\");\n-\n-   function sigaction\n-     (sig  : Signal;\n-      act  : struct_sigaction_ptr;\n-      oact : struct_sigaction_ptr) return int;\n-   pragma Import (C, sigaction, \"sigaction\");\n-\n-   type isr_address is access procedure (sig : int);\n-   pragma Convention (C, isr_address);\n-\n-   function c_signal (sig : Signal; handler : isr_address) return isr_address;\n-   pragma Import (C, c_signal, \"signal\");\n-\n-   function sigwait (set : access sigset_t; sig : access Signal) return int;\n-   pragma Inline (sigwait);\n-\n-   function pthread_sigmask\n-     (how  : int;\n-      set  : access sigset_t;\n-      oset : access sigset_t) return int;\n-   pragma Import (C, pthread_sigmask, \"sigprocmask\");\n-\n-   type t_id is new long;\n-   subtype Thread_Id is t_id;\n-\n-   function kill (pid : t_id; sig : Signal) return int;\n-   pragma Inline (kill);\n-\n-   function getpid return t_id;\n-   pragma Inline (getpid);\n-\n-   function Task_Stop (tid : t_id) return int;\n-   pragma Inline (Task_Stop);\n-   --  If we are in the kernel space, continue the task whose t_id is\n-   --  given in parameter if it has been stopped previously to be examined\n-   --  by the debugger (e.g. by taskStop). It typically maps to taskResume\n-   --  on VxWorks 5 and to taskCont on VxWorks 6.\n-\n-   function Task_Cont (tid : t_id) return int;\n-   pragma Inline (Task_Cont);\n-   --  If we are in the kernel space, lock interrupts. It typically maps to\n-   --  intLock.\n-\n-   function Int_Lock return int;\n-   pragma Inline (Int_Lock);\n-   --  If we are in the kernel space, lock interrupts. It typically maps to\n-   --  intLock.\n-\n-   function Int_Unlock return int;\n-   pragma Inline (Int_Unlock);\n-   --  If we are in the kernel space, unlock interrupts. It typically maps to\n-   --  intUnlock.\n-\n-   ----------\n-   -- Time --\n-   ----------\n-\n-   type time_t is new unsigned_long;\n-\n-   type timespec is record\n-      ts_sec  : time_t;\n-      ts_nsec : long;\n-   end record;\n-   pragma Convention (C, timespec);\n-\n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME : constant clockid_t;   --  System wide realtime clock\n-\n-   function To_Duration (TS : timespec) return Duration;\n-   pragma Inline (To_Duration);\n-\n-   function To_Timespec (D : Duration) return timespec;\n-   pragma Inline (To_Timespec);\n-\n-   function To_Clock_Ticks (D : Duration) return int;\n-   --  Convert a duration value (in seconds) into clock ticks\n-\n-   function clock_gettime\n-     (clock_id : clockid_t; tp : access timespec) return int;\n-   pragma Import (C, clock_gettime, \"clock_gettime\");\n-\n-   type ULONG is new unsigned_long;\n-\n-   procedure tickSet (ticks : ULONG);\n-   pragma Import (C, tickSet, \"tickSet\");\n-\n-   function tickGet return ULONG;\n-   pragma Import (C, tickGet, \"tickGet\");\n-\n-   ----------------------\n-   -- Utility Routines --\n-   ----------------------\n-\n-   function To_VxWorks_Priority (Priority : int) return int;\n-   pragma Inline (To_VxWorks_Priority);\n-   --  Convenience routine to convert between VxWorks priority and Ada priority\n-\n-   --------------------------\n-   -- VxWorks specific API --\n-   --------------------------\n-\n-   subtype STATUS is int;\n-   --  Equivalent of the C type STATUS\n-\n-   OK    : constant STATUS := 0;\n-   ERROR : constant STATUS := Interfaces.C.int (-1);\n-\n-   function taskIdVerify (tid : t_id)  return STATUS;\n-   pragma Import (C, taskIdVerify, \"taskIdVerify\");\n-\n-   function taskIdSelf return t_id;\n-   pragma Import (C, taskIdSelf, \"taskIdSelf\");\n-\n-   function taskOptionsGet (tid : t_id; pOptions : access int) return int;\n-   pragma Import (C, taskOptionsGet, \"taskOptionsGet\");\n-\n-   function taskSuspend (tid : t_id) return int;\n-   pragma Import (C, taskSuspend, \"taskSuspend\");\n-\n-   function taskResume (tid : t_id) return int;\n-   pragma Import (C, taskResume, \"taskResume\");\n-\n-   function taskIsSuspended (tid : t_id) return int;\n-   pragma Import (C, taskIsSuspended, \"taskIsSuspended\");\n-\n-   function taskDelay (ticks : int) return int;\n-   procedure taskDelay (ticks : int);\n-   pragma Import (C, taskDelay, \"taskDelay\");\n-\n-   function sysClkRateGet return int;\n-   pragma Import (C, sysClkRateGet, \"sysClkRateGet\");\n-\n-   --  VxWorks 5.x specific functions\n-\n-   function taskVarAdd\n-     (tid : t_id; pVar : access System.Address) return int;\n-   pragma Import (C, taskVarAdd, \"taskVarAdd\");\n-\n-   function taskVarDelete\n-     (tid : t_id; pVar : access System.Address) return int;\n-   pragma Import (C, taskVarDelete, \"taskVarDelete\");\n-\n-   function taskVarSet\n-     (tid   : t_id;\n-      pVar  : access System.Address;\n-      value : System.Address) return int;\n-   pragma Import (C, taskVarSet, \"taskVarSet\");\n-\n-   function taskVarGet\n-     (tid  : t_id;\n-      pVar : access System.Address) return int;\n-   pragma Import (C, taskVarGet, \"taskVarGet\");\n-\n-   --  VxWorks 6.x specific functions\n-\n-   function tlsKeyCreate return int;\n-   pragma Import (C, tlsKeyCreate, \"tlsKeyCreate\");\n-\n-   function tlsValueGet (key : int) return System.Address;\n-   pragma Import (C, tlsValueGet, \"tlsValueGet\");\n-\n-   function tlsValueSet (key : int; value : System.Address) return STATUS;\n-   pragma Import (C, tlsValueSet, \"tlsValueSet\");\n-\n-   --  Option flags for taskSpawn\n-\n-   VX_UNBREAKABLE    : constant := 16#0002#;\n-   VX_FP_PRIVATE_ENV : constant := 16#0080#;\n-   VX_NO_STACK_FILL  : constant := 16#0100#;\n-\n-   function taskSpawn\n-     (name          : System.Address;  --  Pointer to task name\n-      priority      : int;\n-      options       : int;\n-      stacksize     : size_t;\n-      start_routine : System.Address;\n-      arg1          : System.Address;\n-      arg2          : int := 0;\n-      arg3          : int := 0;\n-      arg4          : int := 0;\n-      arg5          : int := 0;\n-      arg6          : int := 0;\n-      arg7          : int := 0;\n-      arg8          : int := 0;\n-      arg9          : int := 0;\n-      arg10         : int := 0) return t_id;\n-   pragma Import (C, taskSpawn, \"taskSpawn\");\n-\n-   procedure taskDelete (tid : t_id);\n-   pragma Import (C, taskDelete, \"taskDelete\");\n-\n-   function Set_Time_Slice (ticks : int) return int;\n-   pragma Inline (Set_Time_Slice);\n-   --  Calls kernelTimeSlice under VxWorks 5.x\n-   --  Do nothing under VxWorks 6.x\n-\n-   function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n-   pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n-\n-   function taskPrioritySet (tid : t_id; newPriority : int) return int;\n-   pragma Import (C, taskPrioritySet, \"taskPrioritySet\");\n-\n-   --  Semaphore creation flags\n-\n-   SEM_Q_FIFO         : constant := 0;\n-   SEM_Q_PRIORITY     : constant := 1;\n-   SEM_DELETE_SAFE    : constant := 4;  -- only valid for binary semaphore\n-   SEM_INVERSION_SAFE : constant := 8;  -- only valid for binary semaphore\n-\n-   --  Semaphore initial state flags\n-\n-   SEM_EMPTY : constant := 0;\n-   SEM_FULL  : constant := 1;\n-\n-   --  Semaphore take (semTake) time constants\n-\n-   WAIT_FOREVER : constant := -1;\n-   NO_WAIT      : constant := 0;\n-\n-   --  Error codes (errno). The lower level 16 bits are the error code, with\n-   --  the upper 16 bits representing the module number in which the error\n-   --  occurred. By convention, the module number is 0 for UNIX errors. VxWorks\n-   --  reserves module numbers 1-500, with the remaining module numbers being\n-   --  available for user applications.\n-\n-   M_objLib                 : constant := 61 * 2**16;\n-   --  semTake() failure with ticks = NO_WAIT\n-   S_objLib_OBJ_UNAVAILABLE : constant := M_objLib + 2;\n-   --  semTake() timeout with ticks > NO_WAIT\n-   S_objLib_OBJ_TIMEOUT     : constant := M_objLib + 4;\n-\n-   type SEM_ID is new System.Address;\n-   --  typedef struct semaphore *SEM_ID;\n-\n-   --  We use two different kinds of VxWorks semaphores: mutex and binary\n-   --  semaphores. A null ID is returned when a semaphore cannot be created.\n-\n-   function semBCreate (options : int; initial_state : int) return SEM_ID;\n-   pragma Import (C, semBCreate, \"semBCreate\");\n-   --  Create a binary semaphore. Return ID, or 0 if memory could not\n-   --  be allocated.\n-\n-   function semMCreate (options : int) return SEM_ID;\n-   pragma Import (C, semMCreate, \"semMCreate\");\n-\n-   function semDelete (Sem : SEM_ID) return int;\n-   pragma Import (C, semDelete, \"semDelete\");\n-   --  Delete a semaphore\n-\n-   function semGive (Sem : SEM_ID) return int;\n-   pragma Import (C, semGive, \"semGive\");\n-\n-   function semTake (Sem : SEM_ID; timeout : int) return int;\n-   pragma Import (C, semTake, \"semTake\");\n-   --  Attempt to take binary semaphore.  Error is returned if operation\n-   --  times out\n-\n-   function semFlush (SemID : SEM_ID) return STATUS;\n-   pragma Import (C, semFlush, \"semFlush\");\n-   --  Release all threads blocked on the semaphore\n-\n-private\n-   type sigset_t is new unsigned_long_long;\n-\n-   type pid_t is new int;\n-\n-   ERROR_PID : constant pid_t := -1;\n-\n-   type clockid_t is new int;\n-   CLOCK_REALTIME : constant clockid_t := 0;\n-\n-end System.OS_Interface;"}, {"sha": "f12b9afd702457ec64e567bdcc3673156f710961", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -54,6 +54,8 @@ with System.Soft_Links;\n --  on. For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n+with System.VxWorks.Ext;\n+\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -62,6 +64,7 @@ package body System.Task_Primitives.Operations is\n    use System.Tasking;\n    use System.OS_Interface;\n    use System.Parameters;\n+   use type System.VxWorks.Ext.t_id;\n    use type Interfaces.C.int;\n \n    subtype int is System.OS_Interface.int;"}, {"sha": "bb3df9135142655a2463cdf8f4d5f99a69a1e755", "filename": "gcc/ada/s-vxwext-kernel.ads", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.ads?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -0,0 +1,65 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                     S Y S T E M . V X W O R K S . E X T                  --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides vxworks specific support functions needed\n+--  by System.OS_Interface.\n+\n+--  This is the VxWorks 6 kernel version of this package\n+\n+with Interfaces.C;\n+\n+package System.VxWorks.Ext is\n+   pragma Preelaborate;\n+\n+   type t_id is new Long_Integer;\n+   subtype int is Interfaces.C.int;\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Import (C, Task_Cont, \"taskCont\");\n+\n+   function Task_Stop (tid : t_id) return int;\n+   pragma Import (C, Task_Stop, \"taskStop\");\n+\n+   function Int_Lock return int;\n+   pragma Import (C, Int_Lock, \"intLock\");\n+\n+   function Int_Unlock return int;\n+   pragma Import (C, Int_Unlock, \"intUnlock\");\n+\n+   function kill (pid : t_id; sig : int) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n+\n+   function getpid return t_id;\n+   pragma Import (C, getpid, \"taskIdSelf\");\n+\n+end System.VxWorks.Ext;"}, {"sha": "aab05e15ca12c432f50f6ca99515f304b09eda48", "filename": "gcc/ada/s-vxwext-rtp.adb", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-rtp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-rtp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-rtp.adb?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -0,0 +1,67 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                     S Y S T E M . V X W O R K S . E X T                  --\n+--                                                                          --\n+--                                   B o d y                                --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks 6 rtp version of this package\n+\n+package body System.VxWorks.Ext is\n+\n+   function Task_Cont (tid : t_id) return int is\n+      pragma Unreferenced (tid);\n+   begin\n+      --  Operation not allowed in an RTP\n+      return 0;\n+   end Task_Cont;\n+\n+   function Task_Stop (tid : t_id) return int is\n+      pragma Unreferenced (tid);\n+   begin\n+      --  Operation not allowed in an RTP\n+      return 0;\n+   end Task_Stop;\n+\n+   function Int_Lock return int is\n+   begin\n+      --  Operation not allowed in an RTP\n+      return 0;\n+   end Int_Lock;\n+\n+   function Int_Unlock return int is\n+   begin\n+      --  Operation not allowed in an RTP\n+      return 0;\n+   end Int_Unlock;\n+\n+   function Set_Time_Slice (ticks : int) return int is\n+      pragma Unreferenced (ticks);\n+   begin\n+      return 0;\n+   end Set_Time_Slice;\n+\n+end System.VxWorks.Ext;"}, {"sha": "d658e26c1940442ea20727a343a24f20a6a3a669", "filename": "gcc/ada/s-vxwext-rtp.ads", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-rtp.ads?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -0,0 +1,65 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                     S Y S T E M . V X W O R K S . E X T                  --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides vxworks specific support functions needed\n+--  by System.OS_Interface.\n+\n+--  This is the VxWorks 6 rtp version of this package\n+\n+with Interfaces.C;\n+\n+package System.VxWorks.Ext is\n+   pragma Preelaborate;\n+\n+   type t_id is new Long_Integer;\n+   subtype int is Interfaces.C.int;\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Inline (Task_Cont);\n+\n+   function Task_Stop (tid : t_id) return int;\n+   pragma Inline (Task_Stop);\n+\n+   function Int_Lock return int;\n+   pragma Inline (Int_Lock);\n+\n+   function Int_Unlock return int;\n+   pragma Inline (Int_Unlock);\n+\n+   function kill (pid : t_id; sig : int) return int;\n+   pragma Import (C, kill, \"taskKill\");\n+\n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Inline (Set_Time_Slice);\n+\n+   function getpid return t_id;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+end System.VxWorks.Ext;"}, {"sha": "350aa9c4d8f9e26bf33f8667a157c1de1c6dc5be", "filename": "gcc/ada/s-vxwext.ads", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4394c1546db30313bdd30d0ad3d5e304d44ba24/gcc%2Fada%2Fs-vxwext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext.ads?ref=c4394c1546db30313bdd30d0ad3d5e304d44ba24", "patch": "@@ -0,0 +1,65 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                     S Y S T E M . V X W O R K S . E X T                  --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides vxworks specific support functions needed\n+--  by System.OS_Interface.\n+\n+--  This is the VxWorks 5 version of this package\n+\n+with Interfaces.C;\n+\n+package System.VxWorks.Ext is\n+   pragma Preelaborate;\n+\n+   type t_id is new Long_Integer;\n+   subtype int is Interfaces.C.int;\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Import (C, Task_Cont, \"taskResume\");\n+\n+   function Task_Stop (tid : t_id) return int;\n+   pragma Import (C, Task_Stop, \"taskSuspend\");\n+\n+   function Int_Lock return int;\n+   pragma Import (C, Int_Lock, \"intLock\");\n+\n+   function Int_Unlock return int;\n+   pragma Import (C, Int_Unlock, \"intUnlock\");\n+\n+   function kill (pid : t_id; sig : int) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n+\n+   function getpid return t_id;\n+   pragma Import (C, getpid, \"taskIdSelf\");\n+\n+end System.VxWorks.Ext;"}]}