{"sha": "947765f9f25ad8b7c6a305246211fd99e6871ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3NzY1ZjlmMjVhZDhiN2M2YTMwNTI0NjIxMWZkOTllNjg3MWFiOQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-04-26T23:55:44Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-04-26T23:55:44Z"}, "message": "New macro AGGREGATE_TYPE_P.\n\nFrom-SVN: r7159", "tree": {"sha": "a444bb12b44656bef51fc77a2c812c17a8c32be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a444bb12b44656bef51fc77a2c812c17a8c32be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/947765f9f25ad8b7c6a305246211fd99e6871ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947765f9f25ad8b7c6a305246211fd99e6871ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947765f9f25ad8b7c6a305246211fd99e6871ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947765f9f25ad8b7c6a305246211fd99e6871ab9/comments", "author": null, "committer": null, "parents": [{"sha": "5db1a3c46ed8340958ac9ca4effaa443d46a6c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db1a3c46ed8340958ac9ca4effaa443d46a6c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db1a3c46ed8340958ac9ca4effaa443d46a6c64"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "d1d289231d012186c27822cb5da44e16cd9b63f5", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947765f9f25ad8b7c6a305246211fd99e6871ab9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947765f9f25ad8b7c6a305246211fd99e6871ab9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=947765f9f25ad8b7c6a305246211fd99e6871ab9", "patch": "@@ -227,6 +227,13 @@ struct tree_common\n   (TREE_CODE (TYPE) == REAL_TYPE\t\\\n    || (TREE_CODE (TYPE) == COMPLEX_TYPE \\\n        && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE))\n+\n+/* Nonzero if TYPE represents an aggregate (multi-component) type. */\n+\n+#define AGGREGATE_TYPE_P(TYPE) \\\n+  (TREE_CODE (TYPE) == ARRAY_TYPE || TREE_CODE (TYPE) == RECORD_TYPE \\\n+   || TREE_CODE (TYPE) == UNION_TYPE || TREE_CODE (TYPE) == QUAL_UNION_TYPE \\\n+   || TREE_CODE (TYPE) == SET_TYPE)\n \f\n /* Define many boolean fields that all tree nodes have.  */\n "}]}