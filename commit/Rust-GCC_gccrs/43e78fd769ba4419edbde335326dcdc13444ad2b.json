{"sha": "43e78fd769ba4419edbde335326dcdc13444ad2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNlNzhmZDc2OWJhNDQxOWVkYmRlMzM1MzI2ZGNkYzEzNDQ0YWQyYg==", "commit": {"author": {"name": "Michael Zolotukhin", "email": "michael.v.zolotukhin@intel.com", "date": "2011-12-09T15:21:08Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2011-12-09T15:21:08Z"}, "message": "slp-13.c: Increase array size, add initialization.\n\n\n\t* gcc.dg/vect/slp-13.c: Increase array size, add initialization.\n\t* gcc.dg/vect/slp-24.c: Ditto.\n\t* gcc.dg/vect/slp-3.c: Likewise and fix scans.\n\t* gcc.dg/vect/slp-34.c: Ditto.\n\t* gcc.dg/vect/slp-4.c: Ditto.\n\t* gcc.dg/vect/slp-cond-2.c: Ditto.\n\t* gcc.dg/vect/slp-multitypes-11.c: Ditto.\n\t* gcc.dg/vect/vect-1.c: Ditto.\n\t* gcc.dg/vect/vect-10.c: Ditto.\n\t* gcc.dg/vect/vect-105.c: Ditto.\n\t* gcc.dg/vect/vect-112.c: Ditto.\n\t* gcc.dg/vect/vect-15.c: Ditto.\n\t* gcc.dg/vect/vect-2.c: Ditto.\n\t* gcc.dg/vect/vect-31.c: Ditto.\n\t* gcc.dg/vect/vect-32.c: Ditto.\n\t* gcc.dg/vect/vect-33.c: Ditto.\n\t* gcc.dg/vect/vect-34.c: Ditto.\n\t* gcc.dg/vect/vect-35.c: Ditto.\n\t* gcc.dg/vect/vect-36.c: Ditto.\n\t* gcc.dg/vect/vect-6.c: Ditto.\n\t* gcc.dg/vect/vect-73.c: Ditto.\n\t* gcc.dg/vect/vect-74.c: Ditto.\n\t* gcc.dg/vect/vect-75.c: Ditto.\n\t* gcc.dg/vect/vect-76.c: Ditto.\n\t* gcc.dg/vect/vect-80.c: Ditto.\n\t* gcc.dg/vect/vect-85.c: Ditto.\n\t* gcc.dg/vect/vect-89.c: Ditto.\n\t* gcc.dg/vect/vect-97.c: Ditto.\n\t* gcc.dg/vect/vect-98.c: Ditto.\n\t* gcc.dg/vect/vect-all.c: Ditto.\n\t* gcc.dg/vect/vect-double-reduc-6.c: Ditto.\n\t* gcc.dg/vect/vect-iv-8.c: Ditto.\n\t* gcc.dg/vect/vect-iv-8a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1b.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2c.c: Ditto.\n\t* gcc.dg/vect/vect-outer-3.c: Ditto.\n\t* gcc.dg/vect/vect-outer-3a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4b.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4c.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4d.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4m.c: Ditto.\n\t* gcc.dg/vect/vect-outer-fir-lb.c: Ditto.\n\t* gcc.dg/vect/vect-outer-fir.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-1.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-2.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-3.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-4.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-1char.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-2char.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n\t* gcc.dg/vect/vect-shift-2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c: Ditto.\n\nFrom-SVN: r182165", "tree": {"sha": "2d6c2d0e9fdcc8dc4f7432897e1db86153c8f622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6c2d0e9fdcc8dc4f7432897e1db86153c8f622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43e78fd769ba4419edbde335326dcdc13444ad2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e78fd769ba4419edbde335326dcdc13444ad2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e78fd769ba4419edbde335326dcdc13444ad2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e78fd769ba4419edbde335326dcdc13444ad2b/comments", "author": null, "committer": null, "parents": [{"sha": "6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d26322f9762cc87fc01a2bdf6363b00e6ef4322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d26322f9762cc87fc01a2bdf6363b00e6ef4322"}], "stats": {"total": 5464, "additions": 4799, "deletions": 665}, "files": [{"sha": "7a165ae88ba578ec3b71d8caa910d14b8bd1595e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,3 +1,132 @@\n+2011-12-09  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.dg/vect/slp-13.c: Array size increase reverted.\n+\t* gcc.dg/vect/slp-24.c: Ditto.\n+\t* gcc.dg/vect/slp-3.c: Ditto.\n+\t* gcc.dg/vect/slp-34.c: Ditto.\n+\t* gcc.dg/vect/slp-4.c: Ditto.\n+\t* gcc.dg/vect/slp-cond-2.c: Ditto.\n+\t* gcc.dg/vect/slp-multitypes-11.c: Ditto.\n+\t* gcc.dg/vect/vect-1.c: Ditto.\n+\t* gcc.dg/vect/vect-10.c: Ditto.\n+\t* gcc.dg/vect/vect-105.c: Ditto.\n+\t* gcc.dg/vect/vect-112.c: Ditto.\n+\t* gcc.dg/vect/vect-15.c: Ditto.\n+\t* gcc.dg/vect/vect-2.c: Ditto.\n+\t* gcc.dg/vect/vect-31.c: Ditto.\n+\t* gcc.dg/vect/vect-32.c: Ditto.\n+\t* gcc.dg/vect/vect-33.c: Ditto.\n+\t* gcc.dg/vect/vect-34.c: Ditto.\n+\t* gcc.dg/vect/vect-35.c: Ditto.\n+\t* gcc.dg/vect/vect-36.c: Ditto.\n+\t* gcc.dg/vect/vect-6.c: Ditto.\n+\t* gcc.dg/vect/vect-73.c: Ditto.\n+\t* gcc.dg/vect/vect-74.c: Ditto.\n+\t* gcc.dg/vect/vect-75.c: Ditto.\n+\t* gcc.dg/vect/vect-76.c: Ditto.\n+\t* gcc.dg/vect/vect-80.c: Ditto.\n+\t* gcc.dg/vect/vect-85.c: Ditto.\n+\t* gcc.dg/vect/vect-89.c: Ditto.\n+\t* gcc.dg/vect/vect-97.c: Ditto.\n+\t* gcc.dg/vect/vect-98.c: Ditto.\n+\t* gcc.dg/vect/vect-all.c: Ditto.\n+\t* gcc.dg/vect/vect-double-reduc-6.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1b.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2c.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4b.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4c.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4d.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4m.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir-lb.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-1.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-2.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-3.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-4.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-1char.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-2char.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n+\t* gcc.dg/vect/vect-shift-2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c: Ditto.\n+\t* gcc.dg/vect/slp-13-big-array.c: New test.\n+\t* gcc.dg/vect/slp-24-big-array.c: Ditto.\n+\t* gcc.dg/vect/slp-3-big-array.c: Ditto.\n+\t* gcc.dg/vect/slp-34-big-array.c: Ditto.\n+\t* gcc.dg/vect/slp-4-big-array.c: Ditto.\n+\t* gcc.dg/vect/slp-cond-2-big-array.c: Ditto.\n+\t* gcc.dg/vect/slp-multitypes-11-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-1-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-10-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-105-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-112-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-15-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-31-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-32-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-33-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-34-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-35-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-36-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-6-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-73-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-74-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-75-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-76-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-80-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-85-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-89-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-97-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-98-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-all-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-double-reduc-6-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8a-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1a-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1b-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2a-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2c-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3a-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4a-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4b-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4c-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4d-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4m-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir-lb-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-1-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-3-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-4-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-1char-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-2char-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1c-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-2b-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-shift-2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c: Ditto.\n+\n 2011-12-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48042"}, {"sha": "c40822b62a0b9906aa01dd2252f89f361461f75f", "filename": "gcc/testsuite/gcc.dg/vect/slp-13-big-array.c", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,141 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+volatile int y = 0;\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned short out[N*8];\n+  unsigned short in[N*8];\n+  unsigned int in2[N*8];\n+  unsigned int out2[N*8];\n+\n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = in2[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n+  /* Induction is not SLPable yet.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i*8] = in[i*8] + i;\n+      out[i*8 + 1] = in[i*8 + 1] + i;\n+      out[i*8 + 2] = in[i*8 + 2] + i;\n+      out[i*8 + 3] = in[i*8 + 3] + i;\n+      out[i*8 + 4] = in[i*8 + 4] + i;\n+      out[i*8 + 5] = in[i*8 + 5] + i;\n+      out[i*8 + 6] = in[i*8 + 6] + i;\n+      out[i*8 + 7] = in[i*8 + 7] + i;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i*8] !=  in[i*8] + i\n+         || out[i*8 + 1] != in[i*8 + 1] + i\n+         || out[i*8 + 2] != in[i*8 + 2] + i\n+         || out[i*8 + 3] != in[i*8 + 3] + i\n+         || out[i*8 + 4] != in[i*8 + 4] + i\n+         || out[i*8 + 5] != in[i*8 + 5] + i\n+         || out[i*8 + 6] != in[i*8 + 6] + i\n+         || out[i*8 + 7] != in[i*8 + 7] + i)\n+\tabort ();\n+    }\n+\n+  /* Induction is not SLPable yet and strided group size must be a power of 2\n+     to get vectorized.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      out2[i*12] = in2[i*12] + i;\n+      out2[i*12 + 1] = in2[i*12 + 1] + i;\n+      out2[i*12 + 2] = in2[i*12 + 2] + i;\n+      out2[i*12 + 3] = in2[i*12 + 3] + i;\n+      out2[i*12 + 4] = in2[i*12 + 4] + i;\n+      out2[i*12 + 5] = in2[i*12 + 5] + i;\n+      out2[i*12 + 6] = in2[i*12 + 6] + i;\n+      out2[i*12 + 7] = in2[i*12 + 7] + i;\n+      out2[i*12 + 8] = in2[i*12 + 8] + i;\n+      out2[i*12 + 9] = in2[i*12 + 9] + i;\n+      out2[i*12 + 10] = in2[i*12 + 10] + i;\n+      out2[i*12 + 11] = in2[i*12 + 11] + i;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+        if (out2[i*12] != in2[i*12] + i\n+            || out2[i*12 + 1] != in2[i*12 + 1] + i\n+            || out2[i*12 + 2] != in2[i*12 + 2] + i\n+            || out2[i*12 + 3] != in2[i*12 + 3] + i\n+            || out2[i*12 + 4] != in2[i*12 + 4] + i\n+            || out2[i*12 + 5] != in2[i*12 + 5] + i\n+            || out2[i*12 + 6] != in2[i*12 + 6] + i\n+            || out2[i*12 + 7] != in2[i*12 + 7] + i\n+            || out2[i*12 + 8] != in2[i*12 + 8] + i\n+            || out2[i*12 + 9] != in2[i*12 + 9] + i\n+            || out2[i*12 + 10] != in2[i*12 + 10] + i\n+            || out2[i*12 + 11] != in2[i*12 + 11] + i)\n+          abort ();\n+    }\n+\n+  /* Not power of 2 but SLPable.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      out2[i*12] = in2[i*12] + 1;\n+      out2[i*12 + 1] = in2[i*12 + 1] + 2;\n+      out2[i*12 + 2] = in2[i*12 + 2] + 3;\n+      out2[i*12 + 3] = in2[i*12 + 3] + 4;\n+      out2[i*12 + 4] = in2[i*12 + 4] + 5;\n+      out2[i*12 + 5] = in2[i*12 + 5] + 6;\n+      out2[i*12 + 6] = in2[i*12 + 6] + 7;\n+      out2[i*12 + 7] = in2[i*12 + 7] + 8;\n+      out2[i*12 + 8] = in2[i*12 + 8] + 9;\n+      out2[i*12 + 9] = in2[i*12 + 9] + 10;\n+      out2[i*12 + 10] = in2[i*12 + 10] + 11;\n+      out2[i*12 + 11] = in2[i*12 + 11] + 12;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+        if (out2[i*12] != in2[i*12] + 1\n+            || out2[i*12 + 1] != in2[i*12 + 1] + 2\n+            || out2[i*12 + 2] != in2[i*12 + 2] + 3\n+            || out2[i*12 + 3] != in2[i*12 + 3] + 4\n+            || out2[i*12 + 4] != in2[i*12 + 4] + 5\n+            || out2[i*12 + 5] != in2[i*12 + 5] + 6\n+            || out2[i*12 + 6] != in2[i*12 + 6] + 7\n+            || out2[i*12 + 7] != in2[i*12 + 7] + 8\n+            || out2[i*12 + 8] != in2[i*12 + 8] + 9\n+            || out2[i*12 + 9] != in2[i*12 + 9] + 10\n+            || out2[i*12 + 10] != in2[i*12 + 10] + 11\n+            || out2[i*12 + 11] != in2[i*12 + 11] + 12)\n+          abort ();\n+    }\n+\n+\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_interleave && vect_extract_even_odd } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { xfail *-*-* }  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "655e6ade1d0ceb58908ad13547a90e0bf0498155", "filename": "gcc/testsuite/gcc.dg/vect/slp-13.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,25 +3,17 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n-volatile int y = 0;\n+#define N 8 \n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n-  unsigned short in[N*8];\n-  unsigned int in2[N*8];\n+  unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned int in2[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n   unsigned int out2[N*8];\n \n-  for (i = 0; i < N*8; i++)\n-    {\n-      in[i] = in2[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n-    }\n-\n   /* Induction is not SLPable yet.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "6c8f01c97497abc4862c77dff715bae77146fcea", "filename": "gcc/testsuite/gcc.dg/vect/slp-24-big-array.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+} s;\n+\n+unsigned char ub[N*2];\n+unsigned char uc[N];\n+\n+volatile int y = 0;\n+unsigned char check_diff = 2;\n+\n+void\n+main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *arr)\n+{\n+  int i;\n+  unsigned char udiff = 2;\n+  unsigned char umax = x;\n+  unsigned char umin = x;\n+  unsigned char ua1[N*2];\n+  s *pIn = arr;\n+  s out[N];\n+\n+  for (i = 0; i < N; i++) {\n+    udiff += (unsigned char) (ub[i] - uc[i]);\n+\n+    ua1[2*i+1] = ub[2*i+1];\n+    ua1[2*i] = ub[2*i];\n+\n+    out[i].d = pIn->d - 1;\n+    out[i].b = pIn->b - 4;\n+    out[i].c = pIn->c - 8;\n+    out[i].a = pIn->a - 3;\n+\n+    pIn++;\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    if (ua1[2*i] != ub[2*i]\n+        || ua1[2*i+1] != ub[2*i+1]\n+        || out[i].a != arr[i].a - 3\n+        || out[i].b != arr[i].b - 4\n+        || out[i].c != arr[i].c - 8\n+        || out[i].d != arr[i].d - 1)\n+      abort ();\n+  }\n+\n+  /* check results:  */\n+  if (udiff != check_diff)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  s arr[N];\n+\n+  check_diff = 2;\n+  ub[0] = uc[0] = 1;\n+  for (i = 1; i < N; i++) {\n+    ub[i] = (i%5 == 0)?i*3:i;\n+    uc[i] = i;\n+    check_diff += (unsigned char) (ub[i] - uc[i]);\n+    if (y) /* Avoid vectorization.  */\n+      abort ();\n+  }\n+  for (; i < 2*N; i++) {\n+    ub[i] = 0;\n+    if (y) /* Avoid vectorization.  */\n+      abort ();\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i + 9;\n+      arr[i].b = i * 2 + 10;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+  check_vect ();\n+\n+  main1 (100, 100, 1, arr);\n+  main1 (0, 15, 0, arr);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { vect_no_align && ilp32 } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "61c53f08fa688021147e79f9ce6ecc0b0bc460d7", "filename": "gcc/testsuite/gcc.dg/vect/slp-24.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 16\n+#define DIFF 242\n \n typedef struct {\n    unsigned char a;\n@@ -12,11 +13,8 @@ typedef struct {\n    unsigned char d;\n } s;\n \n-unsigned char ub[N*2];\n-unsigned char uc[N];\n-\n-volatile int y = 0;\n-unsigned char check_diff = 2;\n+unsigned char ub[N*2] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *arr)\n@@ -30,7 +28,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *a\n   s out[N];\n \n   for (i = 0; i < N; i++) {\n-    udiff += (unsigned char) (ub[i] - uc[i]);\n+    udiff += (unsigned char)(ub[i] - uc[i]);\n \n     ua1[2*i+1] = ub[2*i+1];\n     ua1[2*i] = ub[2*i];\n@@ -54,7 +52,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *a\n   }\n \n   /* check results:  */\n-  if (udiff != check_diff)\n+  if (udiff != DIFF)\n     abort ();\n }\n \n@@ -63,21 +61,6 @@ int main (void)\n   int i; \n   s arr[N];\n \n-  check_diff = 2;\n-  ub[0] = uc[0] = 1;\n-  for (i = 1; i < N; i++) {\n-    ub[i] = (i%5 == 0)?i*3:i;\n-    uc[i] = i;\n-    check_diff += (unsigned char) (ub[i] - uc[i]);\n-    if (y) /* Avoid vectorization.  */\n-      abort ();\n-  }\n-  for (; i < 2*N; i++) {\n-    ub[i] = 0;\n-    if (y) /* Avoid vectorization.  */\n-      abort ();\n-  }\n-\n   for (i = 0; i < N; i++)\n     {\n       arr[i].a = i + 9;"}, {"sha": "4f50f1f90faa07e5dc25ed00937b7f40cc621e8a", "filename": "gcc/testsuite/gcc.dg/vect/slp-3-big-array.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,155 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 96\n+\n+unsigned short in[N*8];\n+volatile int y = 0;\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned short out[N*8];\n+\n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = i&63;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i*8] = in[i*8];\n+      out[i*8 + 1] = in[i*8 + 1];\n+      out[i*8 + 2] = in[i*8 + 2];\n+      out[i*8 + 3] = in[i*8 + 3];\n+      out[i*8 + 4] = in[i*8 + 4];\n+      out[i*8 + 5] = in[i*8 + 5];\n+      out[i*8 + 6] = in[i*8 + 6];\n+      out[i*8 + 7] = in[i*8 + 7];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i*8] !=  in[i*8]\n+         || out[i*8 + 1] != in[i*8 + 1]\n+         || out[i*8 + 2] != in[i*8 + 2]\n+         || out[i*8 + 3] != in[i*8 + 3]\n+         || out[i*8 + 4] != in[i*8 + 4]\n+         || out[i*8 + 5] != in[i*8 + 5]\n+         || out[i*8 + 6] != in[i*8 + 6]\n+         || out[i*8 + 7] != in[i*8 + 7])\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N*2; i++)\n+    {\n+      out[i*4] = in[i*4];\n+      out[i*4 + 1] = in[i*4 + 1];\n+      out[i*4 + 2] = in[i*4 + 2];\n+      out[i*4 + 3] = in[i*4 + 3];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      if (out[i*4] !=  in[i*4]\n+         || out[i*4 + 1] != in[i*4 + 1]\n+         || out[i*4 + 2] != in[i*4 + 2]\n+         || out[i*4 + 3] != in[i*4 + 3])\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      out[i*16] = in[i*16];\n+      out[i*16 + 1] = in[i*16 + 1];\n+      out[i*16 + 2] = in[i*16 + 2];\n+      out[i*16 + 3] = in[i*16 + 3];\n+      out[i*16 + 4] = in[i*16 + 4];\n+      out[i*16 + 5] = in[i*16 + 5];\n+      out[i*16 + 6] = in[i*16 + 6];\n+      out[i*16 + 7] = in[i*16 + 7];\n+      out[i*16 + 8] = in[i*16 + 8];\n+      out[i*16 + 9] = in[i*16 + 9];\n+      out[i*16 + 10] = in[i*16 + 10];\n+      out[i*16 + 11] = in[i*16 + 11];\n+      out[i*16 + 12] = in[i*16 + 12];\n+      out[i*16 + 13] = in[i*16 + 13];\n+      out[i*16 + 14] = in[i*16 + 14];\n+      out[i*16 + 15] = in[i*16 + 15];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (out[i*16] !=  in[i*16]\n+         || out[i*16 + 1] != in[i*16 + 1]\n+         || out[i*16 + 2] != in[i*16 + 2]\n+         || out[i*16 + 3] != in[i*16 + 3]\n+         || out[i*16 + 4] != in[i*16 + 4]\n+         || out[i*16 + 5] != in[i*16 + 5]\n+         || out[i*16 + 6] != in[i*16 + 6]\n+         || out[i*16 + 7] != in[i*16 + 7]\n+         || out[i*16 + 8] != in[i*16 + 8]\n+         || out[i*16 + 9] != in[i*16 + 9]\n+         || out[i*16 + 10] != in[i*16 + 10]\n+         || out[i*16 + 11] != in[i*16 + 11]\n+         || out[i*16 + 12] != in[i*16 + 12]\n+         || out[i*16 + 13] != in[i*16 + 13]\n+         || out[i*16 + 14] != in[i*16 + 14]\n+         || out[i*16 + 15] != in[i*16 + 15])\n+        abort ();\n+    }\n+\n+  /* SLP with unrolling by 8.  */\n+  for (i = 0; i < N/4; i++)\n+    {\n+      out[i*9] = in[i*9];\n+      out[i*9 + 1] = in[i*9 + 1];\n+      out[i*9 + 2] = in[i*9 + 2];\n+      out[i*9 + 3] = in[i*9 + 3];\n+      out[i*9 + 4] = in[i*9 + 4];\n+      out[i*9 + 5] = in[i*9 + 5];\n+      out[i*9 + 6] = in[i*9 + 6];\n+      out[i*9 + 7] = in[i*9 + 7];\n+      out[i*9 + 8] = in[i*9 + 8];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N/4; i++)\n+    {\n+      if (out[i*9] !=  in[i*9]\n+         || out[i*9 + 1] != in[i*9 + 1]\n+         || out[i*9 + 2] != in[i*9 + 2]\n+         || out[i*9 + 3] != in[i*9 + 3]\n+         || out[i*9 + 4] != in[i*9 + 4]\n+         || out[i*9 + 5] != in[i*9 + 5]\n+         || out[i*9 + 6] != in[i*9 + 6]\n+         || out[i*9 + 7] != in[i*9 + 7]\n+         || out[i*9 + 8] != in[i*9 + 8])\n+        abort ();\n+    }\n+\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "7d9bd563739ab9170222de5a0b72cd71e3d4d45d", "filename": "gcc/testsuite/gcc.dg/vect/slp-3.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,24 +3,16 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 96\n+#define N 12\n \n-unsigned short in[N*8];\n-volatile int y = 0;\n+unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n \n-  for (i = 0; i < N*8; i++)\n-    {\n-      in[i] = i&63;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n       out[i*8] = in[i*8];\n@@ -149,7 +141,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "53da79ee77f9a075b0fa015f7d48848a2482abfb", "filename": "gcc/testsuite/gcc.dg/vect/slp-34-big-array.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+unsigned short in[N*8];\n+unsigned short in2[N*8];\n+volatile int y = 0;\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned short out[N*8];\n+  unsigned short out2[N*8];\n+\n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = in2[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n+  /* SLP with unrolling by 8.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i*3] = in[i*3] + 5;\n+      out[i*3 + 1] = in[i*3 + 1] + 6;\n+      out[i*3 + 2] = in[i*3 + 2] + 16;\n+\n+      out2[i*5] = in2[i*5] + 2;\n+      out2[i*5 + 1] = in2[i*5 + 1] + 2;\n+      out2[i*5 + 2] = in2[i*5 + 2] + 1;\n+      out2[i*5 + 3] = in2[i*5 + 3] + 3;\n+      out2[i*5 + 4] = in2[i*5 + 4] + 13;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i*3] != in[i*3] + 5\n+          || out[i*3 + 1] != in[i*3 + 1] + 6\n+          || out[i*3 + 2] != in[i*3 + 2] + 16\n+          || out2[i*5] != in2[i*5] + 2\n+          || out2[i*5 + 1] != in2[i*5 + 1] + 2\n+          || out2[i*5 + 2] != in2[i*5 + 2] + 1\n+          || out2[i*5 + 3] != in2[i*5 + 3] + 3\n+          || out2[i*5 + 4] != in2[i*5 + 4] + 13)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "63dbab051527e868867485e0e68d0fc61fb3218d", "filename": "gcc/testsuite/gcc.dg/vect/slp-34.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,11 +3,10 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 8 \n \n-unsigned short in[N*8];\n-unsigned short in2[N*8];\n-volatile int y = 0;\n+unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+unsigned short in2[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n \n int\n main1 ()\n@@ -16,13 +15,6 @@ main1 ()\n   unsigned short out[N*8];\n   unsigned short out2[N*8];\n \n-  for (i = 0; i < N*8; i++)\n-    {\n-      in[i] = in2[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n-    }\n-\n   /* SLP with unrolling by 8.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "55607dd2d94a859e6b603ce4f3391bb9e50c0ee6", "filename": "gcc/testsuite/gcc.dg/vect/slp-4-big-array.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,135 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+volatile int y = 0;\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  unsigned short out[N*8];\n+  unsigned short in[N*8];\n+  unsigned int ia[N*2];\n+\n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i*8] = in[i*8];\n+      out[i*8 + 1] = in[i*8 + 1];\n+      out[i*8 + 2] = in[i*8 + 2];\n+      out[i*8 + 3] = in[i*8 + 3];\n+      out[i*8 + 4] = in[i*8 + 4];\n+      out[i*8 + 5] = in[i*8 + 5];\n+      out[i*8 + 6] = in[i*8 + 6];\n+      out[i*8 + 7] = in[i*8 + 7];\n+\n+      ia[i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i*8] !=  in[i*8]\n+         || out[i*8 + 1] != in[i*8 + 1]\n+         || out[i*8 + 2] != in[i*8 + 2]\n+         || out[i*8 + 3] != in[i*8 + 3]\n+         || out[i*8 + 4] != in[i*8 + 4]\n+         || out[i*8 + 5] != in[i*8 + 5]\n+         || out[i*8 + 6] != in[i*8 + 6]\n+         || out[i*8 + 7] != in[i*8 + 7]\n+         || ia[i] != 7)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N*2; i++)\n+    {\n+      out[i*4] = in[i*4];\n+      out[i*4 + 1] = in[i*4 + 1];\n+      out[i*4 + 2] = in[i*4 + 2];\n+      out[i*4 + 3] = in[i*4 + 3];\n+\n+      ia[i] = 12;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N*2; i++)\n+    {\n+      if (out[i*4] !=  in[i*4]\n+         || out[i*4 + 1] != in[i*4 + 1]\n+         || out[i*4 + 2] != in[i*4 + 2]\n+         || out[i*4 + 3] != in[i*4 + 3]\n+         || ia[i] != 12)\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      out[i*16] = in[i*16];\n+      out[i*16 + 1] = in[i*16 + 1];\n+      out[i*16 + 2] = in[i*16 + 2];\n+      out[i*16 + 3] = in[i*16 + 3];\n+      out[i*16 + 4] = in[i*16 + 4];\n+      out[i*16 + 5] = in[i*16 + 5];\n+      out[i*16 + 6] = in[i*16 + 6];\n+      out[i*16 + 7] = in[i*16 + 7];\n+      out[i*16 + 8] = in[i*16 + 8];\n+      out[i*16 + 9] = in[i*16 + 9];\n+      out[i*16 + 10] = in[i*16 + 10];\n+      out[i*16 + 11] = in[i*16 + 11];\n+      out[i*16 + 12] = in[i*16 + 12];\n+      out[i*16 + 13] = in[i*16 + 13];\n+      out[i*16 + 14] = in[i*16 + 14];\n+      out[i*16 + 15] = in[i*16 + 15];\n+\n+      ia[i] = 21;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (out[i*16] !=  in[i*16]\n+         || out[i*16 + 1] != in[i*16 + 1]\n+         || out[i*16 + 2] != in[i*16 + 2]\n+         || out[i*16 + 3] != in[i*16 + 3]\n+         || out[i*16 + 4] != in[i*16 + 4]\n+         || out[i*16 + 5] != in[i*16 + 5]\n+         || out[i*16 + 6] != in[i*16 + 6]\n+         || out[i*16 + 7] != in[i*16 + 7]\n+         || out[i*16 + 8] != in[i*16 + 8]\n+         || out[i*16 + 9] != in[i*16 + 9]\n+         || out[i*16 + 10] != in[i*16 + 10]\n+         || out[i*16 + 11] != in[i*16 + 11]\n+         || out[i*16 + 12] != in[i*16 + 12]\n+         || out[i*16 + 13] != in[i*16 + 13]\n+         || out[i*16 + 14] != in[i*16 + 14]\n+         || out[i*16 + 15] != in[i*16 + 15]\n+         || ia[i] != 21)\n+        abort ();\n+    }\n+\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "50ad2bd53a47eb08e62b8b5b0d4b21a3ef1061ca", "filename": "gcc/testsuite/gcc.dg/vect/slp-4.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,24 +3,16 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n-volatile int y = 0;\n+#define N 16 \n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n-  unsigned short in[N*8];\n+  unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n   unsigned int ia[N*2];\n \n-  for (i = 0; i < N*8; i++)\n-    {\n-      in[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n       out[i*8] = in[i*8];"}, {"sha": "8217b764af0f11f753ffd8313ecd28e3c8da9841", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-2-big-array.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,127 @@\n+/* { dg-require-effective-target vect_cond_mixed } */\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+int d[N], e[N], f[N];\n+unsigned char k[N];\n+float a[N], b[N];\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N/4; i++)\n+    {\n+      k[4*i] = a[4*i] < b[4*i] ? 17 : 0;\n+      k[4*i+1] = a[4*i+1] < b[4*i+1] ? 17 : 0;\n+      k[4*i+2] = a[4*i+2] < b[4*i+2] ? 17 : 0;\n+      k[4*i+3] = a[4*i+3] < b[4*i+3] ? 17 : 0;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N/2; ++i)\n+    {\n+      k[2*i] = a[2*i] < b[2*i] ? 0 : 24;\n+      k[2*i+1] = a[2*i+1] < b[2*i+1] ? 7 : 4;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N/2; ++i)\n+    {\n+      k[2*i] = a[2*i] < b[2*i] ? 51 : 12;\n+      k[2*i+1] = a[2*i+1] > b[2*i+1] ? 51 : 12;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N/2; ++i)\n+    {\n+      int d0 = d[2*i], e0 = e[2*i];\n+      int d1 = d[2*i+1], e1 = e[2*i+1];\n+      f[2*i] = a[2*i] >= b[2*i] ? d0 : e0;\n+      f[2*i+1] = a[2*i+1] >= b[2*i+1] ? d1 : e1;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      switch (i % 9)\n+\t{\n+\tcase 0: asm (\"\"); a[i] = - i - 1; b[i] = i + 1; break;\n+\tcase 1: a[i] = 0; b[i] = 0; break;\n+\tcase 2: a[i] = i + 1; b[i] = - i - 1; break;\n+\tcase 3: a[i] = i; b[i] = i + 7; break;\n+\tcase 4: a[i] = i; b[i] = i; break;\n+\tcase 5: a[i] = i + 16; b[i] = i + 3; break;\n+\tcase 6: a[i] = - i - 5; b[i] = - i; break;\n+\tcase 7: a[i] = - i; b[i] = - i; break;\n+\tcase 8: a[i] = - i; b[i] = - i - 7; break;\n+\t}\n+      d[i] = i;\n+      e[i] = 2 * i;\n+    }\n+\n+  f1 ();\n+  for (i = 0; i < N; i++)\n+    if (k[i] != ((i % 3) == 0 ? 17 : 0))\n+      abort ();\n+\n+  f2 ();\n+  for (i = 0; i < N; i++)\n+    {\n+      switch (i % 9)\n+        {\n+        case 0:\n+\tcase 6:\n+\t  if (k[i] != ((i/9 % 2) == 0 ? 0 : 7))\n+\t    abort ();\n+\t  break;\n+        case 1:\n+        case 5:\n+        case 7:\n+\t  if (k[i] != ((i/9 % 2) == 0 ? 4 : 24))\n+            abort ();\n+          break;\n+        case 2:\n+        case 4:\n+        case 8:\n+\t  if (k[i] != ((i/9 % 2) == 0 ? 24 : 4))\n+            abort ();\n+          break;\n+        case 3:\n+\t  if (k[i] != ((i/9 % 2) == 0 ? 7 : 0))\n+            abort ();\n+          break;\n+        }\n+    }\n+\n+  f3 ();\n+\n+  f4 ();\n+  for (i = 0; i < N; i++)\n+    if (f[i] != ((i % 3) == 0 ? e[i] : d[i]))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c73933fce0fe94cbeb5c98fbc633cd97680e7ba2", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-require-effective-target vect_cond_mixed } */\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 32\n int d[N], e[N], f[N];\n unsigned char k[N];\n float a[N], b[N];"}, {"sha": "b7a7a0be11ba115faf4054f3f193cfdf431262e1", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-11-big-array.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 144\n+\n+struct s\n+{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+char in[N*3];\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n+  struct s out[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i&127;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      out[i].a = (int) in[i*3] + 1;\n+      out[i].b = (int) in[i*3 + 1] + 2;\n+      out[i].c = (int) in[i*3 + 2] + 3;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (out[i].a !=  (int) in[i*3] + 1\n+         || out[i].b != (int) in[i*3 + 1] + 2\n+         || out[i].c != (int) in[i*3 + 2] + 3)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_unpack } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "602517bfcd129d86970605e185279edc907549eb", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-11.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 144\n+#define N 18 \n \n struct s \n {\n@@ -12,22 +12,14 @@ struct s\n   int c;\n };\n \n-char in[N*3];\n-volatile int y = 0;\n+char in[N*3] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53};\n \n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n   struct s out[N];\n \n-  for (i = 0; i < N; i++)\n-    {\n-      in[i] = i&127;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n       out[i].a = (int) in[i*3] + 1;"}, {"sha": "4c0f532b46813e6f7bfcc62647551475eab0b9cc", "filename": "gcc/testsuite/gcc.dg/vect/vect-1-big-array.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#define N 128\n+\n+void fbar (float *);\n+void ibar (int *);\n+void sbar (short *);\n+\n+/* multiple loops */\n+\n+foo (int n)\n+{\n+  float a[N+1];\n+  float b[N];\n+  float c[N];\n+  float d[N];\n+  int ia[N];\n+  int ib[N];\n+  int ic[N];\n+  int i,j;\n+  int diff = 0;\n+  char cb[N];\n+  char cc[N];\n+  char image[N][N];\n+  char block[N][N];\n+\n+  /* Vectorizable.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (cb[i] - cc[i]);\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Vectorizable.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i] + d[i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Strided access.  Vectorizable on platforms that support load of strided\n+     accesses (extract of even/odd vector elements).  */\n+  for (i = 0; i < N/2; i++){\n+    a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+    d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i];\n+    d[i] = b[i] + c[i];\n+    ia[i] = ib[i] + ic[i];\n+  }\n+  ibar (ia);\n+  fbar (a);\n+  fbar (d);\n+\n+  /* Not vetorizable yet (too conservative dependence test).  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i];\n+    a[i+1] = b[i] + c[i];\n+  }\n+  fbar (a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 6 loops\" 1 \"vect\" { target vect_strided2 } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 5 loops\" 1 \"vect\" { xfail vect_strided2 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "04392ea78dab22007fa617ee4a6728e889a2e43b", "filename": "gcc/testsuite/gcc.dg/vect/vect-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_float } */\n \n-#define N 128\n+#define N 16\n \n void fbar (float *);\n void ibar (int *);"}, {"sha": "ce6161977ac37a6f763b89336beb04defe650918", "filename": "gcc/testsuite/gcc.dg/vect/vect-10-big-array.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+#include <stdlib.h>\n+\n+#define N 128\n+\n+short a[N];\n+short d[N];\n+\n+volatile int y = 0;\n+\n+int foo ()\n+{\n+  int i;\n+  short b[N];\n+  short c[N];\n+  for (i = 0; i < N/2; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* Strided access pattern.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+      d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { ! vect_strided2 } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "faa500d2a18b2ede615a92d765cf9e839e815228", "filename": "gcc/testsuite/gcc.dg/vect/vect-10.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,28 +1,16 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n-#include <stdlib.h>\n \n-#define N 128\n+#define N 16\n \n short a[N];\n short d[N];\n \n-volatile int y = 0;\n-\n int foo ()\n {\n   int i;\n-  short b[N];\n-  short c[N];\n-  for (i = 0; i < N/2; i++)\n-    {\n-      b[i] = i*3;\n-      c[i] = i;\n-\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n+  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n   /* Strided access pattern.  */\n   for (i = 0; i < N/2; i++)"}, {"sha": "f99a2afd728ca440042d4648d95a5fb18f6dcc81", "filename": "gcc/testsuite/gcc.dg/vect/vect-105-big-array.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+struct extraction\n+{\n+  int a[N][N];\n+  int b[N][N];\n+};\n+\n+static int a[N][N];\n+static int b[N][N];\n+static int c[N][N];\n+\n+volatile int y;\n+\n+__attribute__ ((noinline))\n+int main1 (int x) {\n+  int i,j, off;\n+  struct extraction *p;\n+  p = (struct extraction *) malloc (sizeof (struct extraction));\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       a[i][j] = (i*7 + j*17)%53;\n+       b[i][j] = (i*11+ j*13)%41;\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+     }\n+   }\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       c[i][j] = a[i][j];\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+     }\n+   }\n+  for (i = 1; i < N; i++)\n+  {\n+    for (j = 0; j < N; j++)\n+    {\n+      off = x + i + j + N+1;\n+      if (x + i + j > N*N-1)\n+\tbreak;\n+      if (off > N*N-1)\n+\t*(&c[0][0]+x+i+j) = *(&b[0][0] + off - N*N);\n+      else\n+\t*(&c[0][0]+x+i+j) = *(&a[0][0] + off);\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+    }\n+  }\n+\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       p->a[i][j] = a[i][j];\n+       p->b[i][j] = b[i][j];\n+       /* Because Y is volatile, the compiler cannot move this check out\n+\t  of the loop.  */\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+     }\n+   }\n+\n+  /* Vectorizable: distance > number of iterations.  */\n+  for (i = 1; i < N; i++)\n+  {\n+    for (j = 0; j < N; j++)\n+    {\n+       *((int *)p + x + i + j) = *((int *)p + x + i + j + N+1);\n+    }\n+  }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       if (p->a[i][j] != c[i][j])\n+         abort ();\n+     }\n+  }\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 (N);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "bbf42af897ffa24319972f39e2b94c76d8ae06c3", "filename": "gcc/testsuite/gcc.dg/vect/vect-105.c", "status": "modified", "additions": 9, "deletions": 43, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -4,59 +4,25 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 4\n \n struct extraction\n {\n   int a[N][N];\n   int b[N][N];\n };\n \n-static int a[N][N];\n-static int b[N][N];\n-static int c[N][N];\n+static int a[N][N] = {{1,2,3,11},{4,5,6,12},{7,8,9,13},{34,45,67,83}};\n+static int b[N][N] = {{17,28,15,23},{0,2,3,24},{4,31,82,25},{29,31,432,256}};\n+static int c[N][N] = {{1,2,3,11},{4,9,13,34},{45,67,83,13},{34,45,67,83}};\n \n volatile int y;\n \n __attribute__ ((noinline))\n int main1 (int x) {\n-  int i,j, off;\n+  int i,j;\n   struct extraction *p;\n   p = (struct extraction *) malloc (sizeof (struct extraction));\n-  for (i = 0; i < N; i++)\n-   {\n-    for (j = 0; j < N; j++)\n-     {\n-       a[i][j] = (i*7 + j*17)%53;\n-       b[i][j] = (i*11+ j*13)%41;\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n-     }\n-   }\n-  for (i = 0; i < N; i++)\n-   {\n-    for (j = 0; j < N; j++)\n-     {\n-       c[i][j] = a[i][j];\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n-     }\n-   }\n-  for (i = 1; i < N; i++)\n-  {\n-    for (j = 0; j < N; j++)\n-    {\n-      off = x + i + j + N+1;\n-      if (x + i + j > N*N-1)\n-\tbreak;\n-      if (off > N*N-1)\n-\t*(&c[0][0]+x+i+j) = *(&b[0][0] + off - N*N);\n-      else\n-\t*(&c[0][0]+x+i+j) = *(&a[0][0] + off);\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n-    }\n-  }\n \n   for (i = 0; i < N; i++)\n    {\n@@ -67,7 +33,7 @@ int main1 (int x) {\n        /* Because Y is volatile, the compiler cannot move this check out\n \t  of the loop.  */\n        if (y)\n-\t abort (); /* to avoid vectorization.  */\n+\t abort (); /* to avoid vectorization  */\n      }\n    }\n \n@@ -76,7 +42,7 @@ int main1 (int x) {\n   {\n     for (j = 0; j < N; j++)\n     {\n-       *((int *)p + x + i + j) = *((int *)p + x + i + j + N+1);\n+       *((int *)p + x + i + j) = *((int *)p + x + i + j + 5);\n     }\n   }\n \n@@ -86,7 +52,7 @@ int main1 (int x) {\n     for (j = 0; j < N; j++)\n      {\n        if (p->a[i][j] != c[i][j])\n-         abort ();\n+         abort();\n      }\n   }\n   return 0;\n@@ -100,7 +66,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n /* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "a1302c1e93685fa133a729e24c4aefeff765dab8", "filename": "gcc/testsuite/gcc.dg/vect/vect-112-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+char cb[N];\n+char cc[N];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+main1 (void)\n+{\n+  int i;\n+  int diff = 0;\n+  int check_diff = 0;\n+  for (i = 0; i < N; i++) {\n+    cb[i] = i + 2;\n+    cc[i] = i + 1;\n+    check_diff += (cb[i] - cc[i]);\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n+\n+  /* Cross-iteration cycle.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (cb[i] - cc[i]);\n+  }\n+\n+  /* Check results.  */\n+  if (diff != check_diff)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_unpack } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+"}, {"sha": "4d954d10829b5eadf88d523d36e57abfacce2971", "filename": "gcc/testsuite/gcc.dg/vect/vect-112.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,27 +3,16 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n-char cb[N];\n-char cc[N];\n-\n-volatile int y = 0;\n+char cb[N] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n+char cc[N] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n \n __attribute__ ((noinline)) int\n main1 (void)\n {\n   int i;\n   int diff = 0;\n-  int check_diff = 0;\n-  for (i = 0; i < N; i++) {\n-    cb[i] = i + 2;\n-    cc[i] = i + 1;\n-    check_diff += (cb[i] - cc[i]);\n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n-  }\n \n   /* Cross-iteration cycle.  */\n   diff = 0;\n@@ -32,8 +21,8 @@ main1 (void)\n   }\n \n   /* Check results.  */\n-  if (diff != check_diff)\n-    abort ();\n+  if (diff != 16)\n+    abort();\n \n   return 0;\n }"}, {"sha": "912907d8c821979836bcb1e180bd40c336b8b046", "filename": "gcc/testsuite/gcc.dg/vect/vect-15-big-array.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+  int a[N];\n+  int b[N];\n+\n+  for (i = 0; i <N; i++)\n+    {\n+      b[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* Not vectorizable yet (reverse access and forward access).  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = b[i-1];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != b[N-1-i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm && vect_hw_misalign } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ba7599162dba1a614f738d2a41a1a729280e20fc", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,23 +3,14 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n-\n-volatile int y = 0;\n+#define N 16\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n   int a[N];\n-  int b[N];\n-\n-  for (i = 0; i <N; i++)\n-    {\n-      b[i] = i*3;\n-      if (y)\n-\tabort ();\n-    }\n+  int b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n   /* Not vectorizable yet (reverse access and forward access).  */\n   for (i = N; i > 0; i--)"}, {"sha": "25502700452fdee8fef96c787be18d742e1cf4e9", "filename": "gcc/testsuite/gcc.dg/vect/vect-2-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+char cb[N];\n+char ca[N];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      /* To avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5d4fc914a970dd6ee73d1581dd30153a5aac8b3d", "filename": "gcc/testsuite/gcc.dg/vect/vect-2.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,26 +3,16 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n-char cb[N];\n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n char ca[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) \n int main1 ()\n {  \n   int i;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      cb[i] = i*3;\n-      /* To avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n       ca[i] = cb[i];"}, {"sha": "25d7fdf2b7b1878a4241fb69dec522e36baaaeae", "filename": "gcc/testsuite/gcc.dg/vect/vect-31-big-array.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+struct t{\n+  int k[N];\n+  int l;\n+};\n+\n+struct s{\n+  char a;\t/* aligned */\n+  char b[N-1];  /* unaligned (offset 1B) */\n+  char c[N];    /* aligned (offset NB) */\n+  struct t d;   /* aligned (offset 2NB) */\n+  struct t e;   /* unaligned (offset 2N+4N+4 B) */\n+};\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+  struct s tmp;\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.b[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.b[i] != 5)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.c[i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.c[i] != 6)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.d.k[i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.d.k[i] != 7)\n+        abort ();\n+    }\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.e.k[i] = 8;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.e.k[i] != 8)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8719fc9d27ef9cae46d0ee70c64ef8ac40566b54", "filename": "gcc/testsuite/gcc.dg/vect/vect-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 256\n+#define N 32\n \n struct t{\n   int k[N];"}, {"sha": "774a0b05577b6431180fdc7077fffe4968b8bbcd", "filename": "gcc/testsuite/gcc.dg/vect/vect-32-big-array.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  struct {\n+    char ca[N];\n+  } s;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c869f5ec98974c913c902be9b05119d9fb807270", "filename": "gcc/testsuite/gcc.dg/vect/vect-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "2fc7106b8885935077e77e43ea14bf172f9499c3", "filename": "gcc/testsuite/gcc.dg/vect/vect-33-big-array.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+struct test {\n+  char ca[N];\n+};\n+\n+extern struct test s;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  return main1 ();\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target vector_alignment_reachable } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d35bce4d6f66807f3fe7d880889a141cc455dd0b", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -4,7 +4,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n struct test {\n   char ca[N];\n };"}, {"sha": "9041bd6e194c8431744f8e4de8bed07ca6d5c69e", "filename": "gcc/testsuite/gcc.dg/vect/vect-34-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+struct {\n+  char ca[N];\n+} s;\n+char cb[N];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      /* To avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "df18f774e5dc163f17ca148309da4c2f5f453dd3", "filename": "gcc/testsuite/gcc.dg/vect/vect-34.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,27 +3,18 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n struct {\n   char ca[N];\n } s;\n-char cb[N];\n-\n-volatile int y = 0;\n-\n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+ \n __attribute__ ((noinline))\n int main1 ()\n {  \n   int i;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      cb[i] = i*3;\n-      /* To avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n   for (i = 0; i < N; i++)\n     {\n       s.ca[i] = cb[i];"}, {"sha": "73b18cf62d8c094531f1813ff39eac769665eccd", "filename": "gcc/testsuite/gcc.dg/vect/vect-35-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  union {\n+    unsigned char a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+    unsigned char b[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  } s;\n+  int i;\n+\n+  /* Initialization.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      s.b[i] = i;\n+    }\n+\n+  /* Dependence analysis fails cause s.a and s.b may overlap.\n+     Use runtime aliasing test with versioning.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      s.a[i] = s.b[i] + 1;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.a[i] != i + 1)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { xfail { ia64-*-* sparc*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0f4284a6257d564628b564713c35c8cea36afa32", "filename": "gcc/testsuite/gcc.dg/vect/vect-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "8f2514db234a36b17aa884d9c417fd8a40e31eac", "filename": "gcc/testsuite/gcc.dg/vect/vect-36-big-array.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+  struct {\n+    char ca[N];\n+    char cb[N];\n+  } s;\n+\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.cb[i] = 3*i;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = s.cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != s.cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "20df3940a48131a3857e29f5c0c5af3f2b731868", "filename": "gcc/testsuite/gcc.dg/vect/vect-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "14d3faa0a125ce787742ba11b7470616c41ecc01", "filename": "gcc/testsuite/gcc.dg/vect/vect-6-big-array.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+float results1[N];\n+float results2[N];\n+float a[N] = {0};\n+float e[N] = {0};\n+float b[N];\n+float c[N];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+\n+  for (i=0; i<N; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+      results1[i] = 0;\n+      results2[i] = 0;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+  for (i=0; i<N/2; i++)\n+    {\n+      results1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      results2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      e[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+    }\n+\n+  /* check results:  */\n+  for (i=0; i<N; i++)\n+    {\n+      if (a[i] != results1[i] || e[i] != results2[i])\n+\tabort ();\n+    }\n+\n+\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      a[i+3] = b[i-1];\n+    }\n+\n+  /* check results:  */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      if (a[i+3] != b[i-1])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5f2e0ea59364cabb817d01dec61f1eacc5f3027b", "filename": "gcc/testsuite/gcc.dg/vect/vect-6.c", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,41 +3,20 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n-float results1[N];\n-float results2[N];\n+float results1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};\n+float results2[N] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n float a[N] = {0};\n float e[N] = {0};\n-float b[N];\n-float c[N];\n-\n-volatile int y = 0;\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n \n-  for (i=0; i<N; i++)\n-    {\n-      b[i] = i*3;\n-      c[i] = i;\n-      results1[i] = 0;\n-      results2[i] = 0;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n-  for (i=0; i<N/2; i++)\n-    {\n-      results1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n-      results2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N/2; i++)\n     { \n       a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];"}, {"sha": "5f40055e2c8fe8673023ab756a917b258dfc7035", "filename": "gcc/testsuite/gcc.dg/vect/vect-73-big-array.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+int ic[N*2];\n+int ib[N];\n+\n+#define ia (ic+N)\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i, j;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ib[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+       ia[i] = ib[i];\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+       if (ia[i] != ib[i])\n+         abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ee3c6e60e15be974b387d8c101f7ad19a38b209a", "filename": "gcc/testsuite/gcc.dg/vect/vect-73.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,27 +3,18 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n int ic[N*2];\n-int ib[N];\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n #define ia (ic+N)\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i, j;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      ib[i] = i*3;\n-      if (y)\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n        ia[i] = ib[i];\n@@ -33,7 +24,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n        if (ia[i] != ib[i])\n-         abort ();\n+         abort();\n     }\n \n   return 0;"}, {"sha": "5cd926fe0bac87dcdab12b5f712390ce97a5bd81", "filename": "gcc/testsuite/gcc.dg/vect/vect-74-big-array.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float b[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n+float c[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+  float *q = pb + 4;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = i;\n+      c[i] = 0.5 + i;\n+      if (y)\n+\tabort ();\n+    }\n+  for (; i < N+4; i++)\n+    {\n+      b[i] = i;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = q[i] * pc[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != q[i] * pc[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (a, b, c);\n+\n+  return 0;\n+}\n+\n+/* Xfail until handling restrict is refined.  See pr29145.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Uncomment when this testcase gets vectorized again:\n+ dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } }\n+ dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } }\n+ dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } }\n+*/\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a680b9fb01b79d5b763f5cada1bb70e81fa3b0b6", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n@@ -13,28 +13,12 @@ float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float b[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0}; \n float c[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc)\n {\n   int i;\n   float *q = pb + 4;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      b[i] = i;\n-      c[i] = 0.5 + i;\n-      if (y)\n-\tabort ();\n-    }\n-  for (; i < N+4; i++)\n-    {\n-      b[i] = i;\n-      if (y)\n-\tabort ();\n-    }\n-\n   for (i = 0; i < N; i++)\n     {\n       pa[i] = q[i] * pc[i];\n@@ -43,7 +27,7 @@ main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc\n   for (i = 0; i < N; i++)\n     {\n       if (pa[i] != q[i] * pc[i])\n-\tabort ();\n+\tabort();\n     }\n   \n   return 0;"}, {"sha": "1c70cc2c5186006c48cf560e4be2e0a4513bdbbb", "filename": "gcc/testsuite/gcc.dg/vect/vect-75-big-array.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 120\n+#define OFF 8\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 (int *ib)\n+{\n+  int i;\n+  int ia[N];\n+\n+  for (i = OFF; i < N+OFF; i++)\n+    {\n+      ib[i] = ib[i%OFF]*(i/OFF);\n+      if (y)\n+\tabort ();\n+    }\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+OFF];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != ib[i+OFF])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (ib);\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "092a3013e07250296cec0dbd7b5886dedc226e2a", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,29 +3,21 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 120\n+#define N 8\n #define OFF 8\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n-\n-volatile int y = 0;\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n \n __attribute__ ((noinline))\n int main1 (int *ib)\n {\n   int i;\n   int ia[N];\n \n-  for (i = OFF; i < N+OFF; i++)\n-    {\n-      ib[i] = ib[i%OFF]*(i/OFF);\n-      if (y)\n-\tabort ();\n-    }\n   for (i = 0; i < N; i++)\n     {\n       ia[i] = ib[i+OFF];"}, {"sha": "915f10edbf4439a0262661cec02085f42159471b", "filename": "gcc/testsuite/gcc.dg/vect/vect-76-big-array.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 124\n+#define OFF 4\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n+int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17};\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 (int *pib)\n+{\n+  int i;\n+  int ia[N+OFF];\n+  for (i = OFF; i < N+OFF; i++)\n+    {\n+      ib[i] = ib[i%8]*(i/8);\n+      ic[i] = ic[i%8]*(i/8);\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = OFF; i < N; i++)\n+    {\n+      ia[i] = pib[i - OFF];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = OFF; i < N; i++)\n+    {\n+     if (ia[i] != pib[i - OFF])\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = pib[i - OFF];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+     if (ia[i] != pib[i - OFF])\n+        abort ();\n+    }\n+\n+  for (i = OFF; i < N; i++)\n+    {\n+      ia[i] = ic[i - OFF];\n+    }\n+\n+\n+  /* check results:  */\n+  for (i = OFF; i < N; i++)\n+    {\n+     if (ia[i] != ic[i - OFF])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (&ib[OFF]);\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d771302422426cac39d9a7e57ccc8613432548f1", "filename": "gcc/testsuite/gcc.dg/vect/vect-76.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,30 +3,21 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 124\n+#define N 24\n #define OFF 4\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n-int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17};\n-\n-volatile int y = 0;\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};\n+int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};\n \n __attribute__ ((noinline))\n int main1 (int *pib)\n {\n   int i;\n   int ia[N+OFF];\n-  for (i = OFF; i < N+OFF; i++)\n-    {\n-      ib[i] = ib[i%8]*(i/8);\n-      ic[i] = ic[i%8]*(i/8);\n-      if (y)\n-\tabort ();\n-    }\n \n   for (i = OFF; i < N; i++)\n     {"}, {"sha": "611d8260d4d6aad3aa73eccf1138831ea89c636c", "filename": "gcc/testsuite/gcc.dg/vect/vect-80-big-array.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+float fa[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float fb[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+/* Check handling of accesses for which the \"initial condition\" -\n+   the expression that represents the first location accessed - is\n+   more involved than just an ssa_name.  */\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+main1 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n+{\n+  int i;\n+  float *q = pb + 4;\n+  for (i = 0; i < N; i++)\n+    {\n+      fb[i] = i;\n+      fc[i] = 0.5+i;\n+      if (y)\n+\tabort ();\n+    }\n+  for (; i < N+4; i++)\n+    {\n+      fb[i] = i;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = q[i] * pc[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != q[i] * pc[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (fa, fb, fc);\n+\n+  return 0;\n+}\n+\n+/* For targets that don't support misaligned loads we version for the\n+   all three accesses (peeling to align the store will not force the\n+   two loads to be aligned).  */\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Uncomment when this testcase gets vectorized again:\n+ dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } }\n+ dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } }\n+ dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target vect_no_align } }\n+*/\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fc0ed1b3938d60f94fb091ccf33991de9e9e3221", "filename": "gcc/testsuite/gcc.dg/vect/vect-80.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,36 +3,21 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n float fa[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-float fb[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float fb[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n+float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n {\n   int i;\n   float *q = pb + 4;\n-  for (i = 0; i < N; i++)\n-    {\n-      fb[i] = i;\n-      fc[i] = 0.5+i;\n-      if (y)\n-\tabort ();\n-    }\n-  for (; i < N+4; i++)\n-    {\n-      fb[i] = i;\n-      if (y)\n-\tabort ();\n-    }\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "004114fbb66d5a7eede7cd845c1d95930e56c3a4", "filename": "gcc/testsuite/gcc.dg/vect/vect-85-big-array.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline))\n+int main1 (int *a)\n+{\n+  int i, j, k;\n+  int b[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+\t  k = i + N;\n+          a[j] = k;\n+        }\n+      b[i] = k;\n+    }\n+\n+\n+  for (j = 0; j < N; j++)\n+    if (a[j] != i + N - 1)\n+      abort ();\n+\n+  for (j = 0; j < N; j++)\n+    if (b[j] != j + N)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+  check_vect ();\n+\n+  main1 (a);\n+\n+  return 0;\n+}\n+\n+/* Fails for targets that don't vectorize PLUS (e.g alpha).  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a5bf5db078a3998bd2a8fa4dd69724fa2aa36f42", "filename": "gcc/testsuite/gcc.dg/vect/vect-85.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n __attribute__ ((noinline))\n int main1 (int *a)"}, {"sha": "89286635ceeebc88a1a573231fc2c0f3563aae6f", "filename": "gcc/testsuite/gcc.dg/vect/vect-89-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+struct tmp_struct\n+{\n+  int x;\n+  int y[N];\n+};\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i, *q;\n+  struct tmp_struct tmp, *p;\n+\n+  p = &tmp;\n+  q = p->y;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      *q++ = 5;\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (p->y[i] != 5)\n+        {\n+          abort ();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "131efeab53a32f87838ceaedb17a96e15de4a66f", "filename": "gcc/testsuite/gcc.dg/vect/vect-89.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n struct tmp_struct\n {"}, {"sha": "87bacbf726b70be2ab8fd0680a6b9ad56b2e4b98", "filename": "gcc/testsuite/gcc.dg/vect/vect-97-big-array.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+char x[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  struct {\n+    char *p;\n+    char *q;\n+  } s;\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* Check that datarefs analysis can determine that the access via pointer\n+     s.p is based off array x, which enables us to antialias this access from\n+     the access to array cb.  */\n+  s.p = x;\n+  for (i = 0; i < N; i++)\n+    {\n+      s.p[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.p[i] != cb[i])\n+        abort ();\n+    }\n+\n+  /* Check that datarefs analysis can determine that the access via pointer\n+     s.p is based off array x, and that the access via pointer s.q is based off\n+     array cb, which enables us to antialias these two accesses.  */\n+  s.q = cb;\n+  for (i = 0; i < N; i++)\n+    {\n+      s.p[i] = s.q[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.p[i] != s.q[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6ea2614909512f1e53a00c5c9dd02a98586b50a5", "filename": "gcc/testsuite/gcc.dg/vect/vect-97.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,12 +3,10 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n  \n char x[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-\n-volatile int y = 0;\n+char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n __attribute__ ((noinline))\n int main1 ()\n@@ -18,12 +16,6 @@ int main1 ()\n     char *q;\n   } s;\n   int i;\n-  for (i = 0; i < N; i++)\n-    {\n-      cb[i] = i*3;\n-      if (y)\n-\tabort ();\n-    }\n \n   /* Check that datarefs analysis can determine that the access via pointer\n      s.p is based off array x, which enables us to antialias this access from"}, {"sha": "0528d43b807bf621086f2a37ab2ba4a4f203dc1f", "filename": "gcc/testsuite/gcc.dg/vect/vect-98-big-array.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+#define DOT16( a, b)   ( a[0]*b[0]   + a[1]*b[1]   + a[2]*b[2]   + a[3]*b[3] + \\\n+\t\t\t a[4]*b[4]   + a[5]*b[5]   + a[6]*b[6]   + a[7]*b[7] + \\\n+\t\t\t a[8]*b[8]   + a[9]*b[9]   + a[10]*b[10] + a[11]*b[11] + \\\n+\t\t\t a[12]*b[12] + a[13]*b[13] + a[14]*b[14] + a[15]*b[15])\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+int main1 (int ia[][N])\n+{\n+  int i, j;\n+  int ib[N] = {0,3,6,9};\n+  int ic[N][N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+\tic[0][i] = DOT16 (ia[i], ib);\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+       if (ic[0][i] != DOT16 (ia[i], ib))\n+           abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int ia[N][N];\n+  int i,j;\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+        ia[i][j] = i + j + 1;\n+\t/* Avoid vectorization.  */\n+\tif (y)\n+\t  abort ();\n+      }\n+\n+  check_vect ();\n+\n+  return main1 (ia);\n+}\n+\n+/* Needs interleaving support.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided4 } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { xfail  vect_strided4 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "01c9153878f7a2edc7bdd346f9b8b9517547eae5", "filename": "gcc/testsuite/gcc.dg/vect/vect-98.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,13 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-#define DOT16( a, b)   ( a[0]*b[0]   + a[1]*b[1]   + a[2]*b[2]   + a[3]*b[3] + \\\n-\t\t\t a[4]*b[4]   + a[5]*b[5]   + a[6]*b[6]   + a[7]*b[7] + \\\n-\t\t\t a[8]*b[8]   + a[9]*b[9]   + a[10]*b[10] + a[11]*b[11] + \\\n-\t\t\t a[12]*b[12] + a[13]*b[13] + a[14]*b[14] + a[15]*b[15])\n-\n-volatile int y = 0;\n+#define N 4\n+#define DOT4( a, b )  ( a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3] )\n \n __attribute__ ((noinline))\n int main1 (int ia[][N])\n@@ -20,31 +15,22 @@ int main1 (int ia[][N])\n \n   for (i = 0; i < N; i++)\n     {\n-\tic[0][i] = DOT16 (ia[i], ib);\n+\tic[0][i] = DOT4 (ia[i], ib);\n     }\n \n   /* check results: */  \n   for (i = 0; i < N; i++)\n     {\n-       if (ic[0][i] != DOT16 (ia[i], ib))\n-           abort ();\n+       if (ic[0][i] != DOT4 (ia[i], ib))\n+           abort();\n     }\n \n   return 0;\n }\n \n int main (void)\n { \n-  int ia[N][N];\n-  int i,j;\n-  for (i = 0; i < N; i++)\n-    for (j = 0; j < N; j++)\n-      {\n-        ia[i][j] = i + j + 1;\n-\t/* Avoid vectorization.  */\n-\tif (y)\n-\t  abort ();\n-      }\n+  int ia[N][N] = {{1,2,3,4},{2,3,5,7},{2,4,6,8},{22,43,55,77}};\n \n   check_vect ();\n "}, {"sha": "ef5213a36858752647edf5d93da59e8564966a5c", "filename": "gcc/testsuite/gcc.dg/vect/vect-all-big-array.c", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,254 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+int iadd_results[N];\n+float fadd_results[N];\n+float fmul_results[N];\n+float fresults1[N];\n+float fresults2[N];\n+\n+/****************************************************/\n+__attribute__ ((noinline))\n+void icheck_results (int *a, int *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}\n+\n+__attribute__ ((noinline))\n+void fcheck_results (float *a, float *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}\n+\n+__attribute__ ((noinline)) void\n+fbar_mul (float *a)\n+{\n+  fcheck_results (a, fmul_results);\n+}\n+\n+__attribute__ ((noinline)) void\n+fbar_add (float *a)\n+{\n+  fcheck_results (a, fadd_results);\n+}\n+\n+__attribute__ ((noinline)) void\n+ibar_add (int *a)\n+{\n+  icheck_results (a, iadd_results);\n+}\n+\n+__attribute__ ((noinline)) void\n+fbar1 (float *a)\n+{\n+  fcheck_results (a, fresults1);\n+}\n+\n+__attribute__ ((noinline)) void\n+fbar2 (float *a)\n+{\n+  fcheck_results (a, fresults2);\n+}\n+\n+float a[N];\n+float e[N];\n+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ia[N];\n+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+char ca[N];\n+short sa[N];\n+\n+volatile int y = 0;\n+\n+/* All of the loops below are currently vectorizable, except\n+   initialization ones.  */\n+\n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i,j;\n+  /* Initialization.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+      d[i] = i*2;\n+      ic[i] = i*3;\n+      ib[i] = i*3;\n+      cb[i] = i*3;\n+      fadd_results[i] = b[i] + c[i] + d[i];\n+      iadd_results[i] = ib[i] + ic[i];\n+      fmul_results[i] = b[i] * c[i];\n+      fresults1[i] = 0;\n+      fresults2[i] = 0;\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* Test 1: copy chars.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+\tabort ();\n+    }\n+\n+\n+  /* Test 2: fp mult.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] * c[i];\n+    }\n+  fbar_mul (a);\n+\n+\n+  /* Test 3: mixed types (int, fp), same nunits in vector.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] + c[i] + d[i];\n+      e[i] = b[i] + c[i] + d[i];\n+      ia[i] = ib[i] + ic[i];\n+    }\n+  ibar_add (ia);\n+  fbar_add (a);\n+  fbar_add (e);\n+\n+  /* Initialization.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      fresults1[i] = a[i];\n+      fresults2[i] = e[i];\n+      if (y)\n+\tabort ();\n+    }\n+  for (i = 0; i < N/2; i++)\n+    {\n+      fresults1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      fresults2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+      if (y)\n+\tabort ();\n+    }\n+  /* Test 4: access with offset.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      e[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+    }\n+  fbar1 (a);\n+  fbar2 (e);\n+\n+\n+  /* Test 5: access with offset.  */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      a[i+3] = b[i-1];\n+    }\n+  /* check results:  */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      if (a[i+3] != b[i-1])\n+\tabort ();\n+    }\n+\n+\n+  /* Test 6 - loop induction with stride != 1.  */\n+  i = 0;\n+  j = 0;\n+  while (i < 5*N)\n+    {\n+      a[j] = c[j];\n+      i += 5;\n+      j++;\n+    }\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != c[i])\n+        abort ();\n+    }\n+\n+\n+  /* Test 7 - reverse access.  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = d[N-i];\n+    }\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != d[i])\n+        abort ();\n+    }\n+\n+\n+  /* Tests 8,9,10 - constants.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 5.0;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 5.0)\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = 5;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (sa[i] != 5)\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] + 5;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] + 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 10 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6adb7bf88bd09ea50cc6141259502e89f55975f5", "filename": "gcc/testsuite/gcc.dg/vect/vect-all.c", "status": "modified", "additions": 8, "deletions": 42, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -4,13 +4,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16\n \n-int iadd_results[N];\n-float fadd_results[N];\n-float fmul_results[N];\n-float fresults1[N];\n-float fresults2[N];\n+int iadd_results[N] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};\n+float fadd_results[N] = {0.0,6.0,12.0,18.0,24.0,30.0,36.0,42.0,48.0,54.0,60.0,66.0,72.0,78.0,84.0,90.0};\n+float fmul_results[N] = {0.0,3.0,12.0,27.0,48.0,75.0,108.0,147.0,192.0,243.0,300.0,363.0,432.0,507.0,588.0,675.0};\n+float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48.00,54.00,60.00,66.00,72.00,78.00,84.00,90.00};\n+float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n \n /****************************************************/\n __attribute__ ((noinline))\n@@ -77,32 +77,12 @@ char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n char ca[N];\n short sa[N];\n \n-volatile int y = 0;\n-\n-/* All of the loops below are currently vectorizable, except\n-   initialization ones.  */\n+/* All of the loops below are currently vectorizable.  */\n \n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i,j;\n-  /* Initialization.  */\n-  for (i = 0; i < N; i++)\n-    {\n-      b[i] = i*3;\n-      c[i] = i;\n-      d[i] = i*2;\n-      ic[i] = i*3;\n-      ib[i] = i*3;\n-      cb[i] = i*3;\n-      fadd_results[i] = b[i] + c[i] + d[i];\n-      iadd_results[i] = ib[i] + ic[i];\n-      fmul_results[i] = b[i] * c[i];\n-      fresults1[i] = 0;\n-      fresults2[i] = 0;\n-      if (y)\n-\tabort ();\n-    }\n \n   /* Test 1: copy chars.  */\n   for (i = 0; i < N; i++)\n@@ -136,21 +116,7 @@ main1 ()\n   fbar_add (a);\n   fbar_add (e);\n \n-  /* Initialization.  */\n-  for (i = 0; i < N; i++)\n-    {\n-      fresults1[i] = a[i];\n-      fresults2[i] = e[i];\n-      if (y)\n-\tabort ();\n-    }\n-  for (i = 0; i < N/2; i++)\n-    {\n-      fresults1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n-      fresults2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n-      if (y)\n-\tabort ();\n-    }\n+\n   /* Test 4: access with offset.  */\n   for (i = 0; i < N/2; i++)\n     {"}, {"sha": "abf3f7db6d3d0adb5a43d4a632a92a2b10c3bb52", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-6-big-array.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-require-effective-target vect_int_mult } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define K 16\n+\n+int in[2*K][K] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+int out[K];\n+int check_result[K];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) void\n+foo ()\n+{\n+  int sum;\n+  int i, j, k;\n+\n+  for (k = 0; k < K; k++)\n+    {\n+      sum = 1;\n+      for (j = 0; j < K; j++)\n+        for (i = 0; i < K; i++)\n+\t{\n+          sum *= in[i+k][j];\n+\t  /* Avoid vectorization.  */\n+\t  if (y)\n+\t    abort ();\n+\t}\n+      check_result[k] = sum;\n+    }\n+\n+  for (k = 0; k < K; k++)\n+    {\n+      sum = 1;\n+      for (j = 0; j < K; j++)\n+        for (i = 0; i < K; i++)\n+          sum *= in[i+k][j];\n+      out[k] = sum;\n+    }\n+}\n+\n+int main ()\n+{\n+  int i, j, k;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < 2*K; i++)\n+    for (j = 0; j < K; j++)\n+      in[i][j] = (i+2)/3;\n+\n+  foo ();\n+\n+  for (k = 0; k < K; k++)\n+    if (out[k] != check_result[k])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "6b14e3bf5901911716281379df9f9ed324cc6756", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-6.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,15 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define K 16\n+#define K 4 \n \n int in[2*K][K] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n int out[K];\n-int check_result[K];\n+int check_result[K] = {0,16,256,4096};\n \n-volatile int y = 0;\n-\n-__attribute__ ((noinline)) void\n+__attribute__ ((noinline)) void \n foo ()\n {\n   int sum;\n@@ -20,21 +18,7 @@ foo ()\n   for (k = 0; k < K; k++)\n     {\n       sum = 1;\n-      for (j = 0; j < K; j++)\n-        for (i = 0; i < K; i++)\n-\t{\n-          sum *= in[i+k][j];\n-\t  /* Avoid vectorization.  */\n-\t  if (y)\n-\t    abort ();\n-\t}\n-      check_result[k] = sum;\n-    }\n-\n-  for (k = 0; k < K; k++)\n-    {\n-      sum = 1;\n-      for (j = 0; j < K; j++)\n+      for (j = 0; j < K; j++) \n         for (i = 0; i < K; i++)\n           sum *= in[i+k][j];\n       out[k] = sum;\n@@ -59,7 +43,7 @@ int main ()\n \n   return 0;\n }\n-\n+        \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-\n+      "}, {"sha": "677b7a3534b178bdcf4618a80853c970837f6a0e", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8-big-array.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline)) int main1 (short X)\n+{\n+  unsigned char a[N];\n+  unsigned short b[N];\n+  unsigned int c[N];\n+  short myX = X;\n+  int i;\n+\n+  /* vectorization of induction with type conversions.  */\n+  for (i = 0; i < N; i++)\n+  {\n+    a[i] = (unsigned char)X;\n+    b[i] = X;\n+    c[i] = (unsigned int)X;\n+    X++;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != (unsigned char)myX || b[i] != myX || c[i] != (unsigned int)myX++)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 (3);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_trunc && vect_unpack } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6544988b2472ef5028882cf9a84faace86c0e08c", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 26\n  \n __attribute__ ((noinline)) int main1 (short X)\n {  "}, {"sha": "100c7513c40c576e659d870f0381897ac4145c8d", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8a-big-array.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+__attribute__ ((noinline)) int main1 (short X)\n+{\n+  signed char a[N];\n+  short b[N];\n+  int c[N];\n+  short myX = X;\n+  int i;\n+\n+  /* vectorization of induction with type conversions.  */\n+  for (i = 0; i < N; i++)\n+  {\n+    a[i] = (signed char)X;\n+    b[i] = X;\n+    c[i] = (int)X;\n+    X++;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != (signed char)myX || b[i] != myX || c[i] != (int)myX++)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 (3);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_trunc && vect_unpack } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "dc742eb84fb11b56ecfd89205cdd34f54b5d9c52", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 26\n  \n __attribute__ ((noinline)) int main1 (short X)\n {  "}, {"sha": "804c3867bd07e3a7daa6c520ec2d754b56bdfd0c", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1-big-array.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#define N 256\n+signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+signed short out[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+/* Can't do outer-loop vectorization because of non-consecutive access.  */\n+\n+void\n+foo (){\n+  int i,j;\n+  int diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j+=8) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2ce8f8ebac85e323ed8a4674b631ff96f21df5e0", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 256\n+#define N 64\n signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short out[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));"}, {"sha": "9b418fabaa9795772f4396dc4cef8d40ab3c6e49", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1a-big-array.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+#define N 256\n+signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+/* Can't do outer-loop vectorization because of non-consecutive access.  */\n+\n+int\n+foo (){\n+  int i,j;\n+  int diff = 0;\n+\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j+=8) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+  }\n+  return diff;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a9b786e235c218681fc3f62475160df011f97c6a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 256\n+#define N 64\n signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n "}, {"sha": "48b7180784e1544c17f5219aeda197d409434e5a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1b-big-array.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#define N 160\n+signed short image[N][N];\n+signed short block[N][N];\n+signed short out[N];\n+\n+/* Outer-loop cannot get vectorized because of non-consecutive access.  */\n+\n+void\n+foo (){\n+  int i,j;\n+  int diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j+=4) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "815758c766f703b3c760587439f7ed15a9db12f4", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 160\n+#define N 40\n signed short image[N][N];\n signed short block[N][N];\n signed short out[N];"}, {"sha": "ba3fa87b151afdd2b16092fdebc05602e1fdc8d9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2-big-array.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_intfloat_cvt } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 160\n+float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float out[N];\n+\n+/* Outer-loop vectorization.  */\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j;\n+\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      image[j][i] = j+i;\n+    }\n+  }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+\n+  foo ();\n+\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      if (image[j][i] != j+i)\n+\tabort ();\n+    }\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "38701977bc6c28c5fd35d9f26ccb92af4b6507ac", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 160\n+#define N 40\n float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "062e1fdd45103732a09be06eee21f62a36fae969", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2a-big-array.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_intfloat_cvt } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 160\n+float image[N][N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j,k;\n+\n+ for (k=0; k<N; k++) {\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      image[k][j][i] = j+i+k;\n+    }\n+  }\n+ }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j, k;\n+\n+  foo ();\n+\n+ for (k=0; k<N; k++) {\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      if (image[k][j][i] != j+i+k)\n+\tabort ();\n+    }\n+  }\n+ }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b8d0e51fee55db7562cf20163b8bcf8a9e7fa0cb", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 160\n+#define N 40\n float image[N][N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n __attribute__ ((noinline)) void"}, {"sha": "cdea72aabe2cd1230299d71e61c26fecfbc381ad", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2c-big-array.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_intfloat_cvt } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 160\n+float image[2*N][2*N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j,k;\n+\n+ for (k=0; k<N; k++) {\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j+=2) {\n+      image[k][j][i] = j+i+k;\n+    }\n+  }\n+ }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j, k;\n+\n+  foo ();\n+\n+ for (k=0; k<N; k++) {\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j+=2) {\n+      if (image[k][j][i] != j+i+k)\n+\tabort ();\n+    }\n+  }\n+ }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0ca868637adc962e50d0730f5553bf391e099b6a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 160\n+#define N 40\n float image[2*N][2*N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n __attribute__ ((noinline)) void"}, {"sha": "83b6f994cd7fe46d2ba950d4caf6fd6a577f667c", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3-big-array.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_float } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 320\n+float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float out[N];\n+\n+/* Outer-loop vectoriation.  */\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j++) {\n+      diff += image[j][i];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      image[i][j]=i+j;\n+    }\n+  }\n+\n+  foo ();\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j++) {\n+      diff += image[j][i];\n+    }\n+    if (out[i] != diff)\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "924700c58409cc69f459f4025ce9c9bf6bbb88c2", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -2,7 +2,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 320\n+#define N 40\n float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "9768a1ed57771ae0ecd016c61e0f72675f996303", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a-big-array.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-require-effective-target vect_float } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 320\n+float image[N][N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float out[N];\n+\n+/* Outer-loop vectorization with misaliged accesses in the inner-loop.  */\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j++) {\n+      diff += image[j][i];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    for (j = 0; j < N; j++) {\n+      image[i][j]=i+j;\n+    }\n+  }\n+\n+  foo ();\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < N; j++) {\n+      diff += image[j][i];\n+    }\n+    if (out[i] != diff)\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 2 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 3 \"vect\" { target vect_multiple_sizes } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1759ee38db784d20d11e9f15ea6e30f519d35a93", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -2,7 +2,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 320\n+#define N 40\n float image[N][N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "af9d2a88b2930956f302dfb9f43547099b507de1", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4a-big-array.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+#define N 512\n+#define M 1024\n+signed short in[N+M];\n+signed short coeff[M];\n+signed short out[N];\n+\n+/* Outer-loop vectorization.  */\n+\n+void\n+foo (){\n+  int i,j;\n+  int diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=8) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { target { vect_widen_mult_hi_to_si && vect_pack_trunc } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d7bcc9a2e8c49a826499a4ce2e72365e35c3c3d1", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 512\n-#define M 1024\n+#define N 40\n+#define M 128\n signed short in[N+M];\n signed short coeff[M];\n signed short out[N];"}, {"sha": "703ac94835a51f7d63c76b77148e9abe0f3471e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4b-big-array.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+#define N 320\n+#define M 1024\n+signed short in[N+M];\n+signed short coeff[M];\n+int out[N];\n+\n+/* Outer-loop vectorization.  */\n+\n+void\n+foo (){\n+  int i,j;\n+  int diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=8) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { target vect_widen_mult_hi_to_si } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "407315a8dc305e4c262dc9bcd0fea0caa0b49462", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 320\n-#define M 1024\n+#define N 40\n+#define M 128\n signed short in[N+M];\n signed short coeff[M];\n int out[N];"}, {"sha": "2ce242cb96b34682f9f0d907683a7a199f6e4049", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4c-big-array.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#define N 320\n+#define M 1024\n+unsigned short in[N+M];\n+unsigned short coeff[M];\n+unsigned int out[N];\n+\n+/* Outer-loop vectorization.  */\n+\n+void\n+foo (){\n+  int i,j;\n+  unsigned short diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=8) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { target { vect_short_mult && { ! vect_no_align } } } } } */\n+/* { dg-final { scan-tree-dump-times \"zero step in outer loop.\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3342b79b215b1b230a1cf67bedaa7b394367dc62", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 320\n-#define M 1024\n+#define N 40\n+#define M 128\n unsigned short in[N+M];\n unsigned short coeff[M];\n unsigned int out[N];"}, {"sha": "0d85bed6059829436afe36920ba428a76dea7ba9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4d-big-array.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 320\n+#define M 1024\n+float in[N+M];\n+float out[N];\n+\n+/* Outer-loop vectorization.  */\n+\n+__attribute__ ((noinline)) void\n+foo (){\n+  int i,j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=4) {\n+      diff += in[j+i];\n+    }\n+    out[i]=diff;\n+  }\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+  float diff;\n+\n+  for (i = 0; i < N; i++)\n+    in[i] = i;\n+\n+  foo ();\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=4) {\n+      diff += in[j+i];\n+    }\n+    if (out[i] != diff)\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c344fb1d67b39533cc79e4f47e129be3825bbdb3", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 320\n-#define M 1024\n+#define N 40\n+#define M 128\n float in[N+M];\n float out[N];\n "}, {"sha": "9a1e02e0356131133190804da9e8b9bdceecc312", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4m-big-array.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target vect_int } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 320\n+#define M 1024\n+unsigned short in[N+M];\n+unsigned int out[N];\n+\n+/* Outer-loop vectorization.  */\n+/* Not vectorized due to multiple-types in the inner-loop.  */\n+\n+__attribute__ ((noinline)) unsigned int\n+foo (){\n+  int i,j;\n+  unsigned int diff;\n+  unsigned int s=0;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=8) {\n+      diff += in[j+i];\n+    }\n+    s+=((unsigned short)diff>>3);\n+  }\n+  return s;\n+}\n+\n+int main (void)\n+{\n+  int i, j;\n+  unsigned int diff;\n+  unsigned int s=0,sum=0;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N+M; i++) {\n+    in[i] = i;\n+  }\n+\n+  sum=foo ();\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j+=8) {\n+      diff += in[j+i];\n+    }\n+    s += ((unsigned short)diff>>3);\n+  }\n+\n+  if (s != sum)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\"  { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6e032f13c4f2655356900a743d2d2c944bccb1b8", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4m.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -2,8 +2,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 320\n-#define M 1024\n+#define N 40\n+#define M 128\n unsigned short in[N+M];\n unsigned int out[N];\n "}, {"sha": "c69b7d749504b0b2a8de7d44994e61c99a36a79f", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-big-array.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 80\n+#define M 256\n+float in[N+M];\n+float coeff[M];\n+float out[N];\n+float fir_out[N];\n+\n+/* Should be vectorized.  Fixed misaligment in the inner-loop.  */\n+__attribute__ ((noinline))\n+void foo (){\n+ int i,j,k;\n+ float diff;\n+\n+ for (i = 0; i < N; i++) {\n+  out[i] = 0;\n+ }\n+\n+ for (k = 0; k < 4; k++) {\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = k; j < M; j+=4) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    out[i] += diff;\n+  }\n+ }\n+\n+}\n+\n+/* Vectorized.  Changing misalignment in the inner-loop.  */\n+__attribute__ ((noinline))\n+void fir (){\n+  int i,j,k;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j++) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    fir_out[i] = diff;\n+  }\n+}\n+\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+  float diff;\n+\n+  for (i = 0; i < M; i++)\n+    coeff[i] = i;\n+  for (i = 0; i < N+M; i++)\n+    in[i] = i;\n+\n+  foo ();\n+  fir ();\n+\n+  for (i = 0; i < N; i++) {\n+    if (out[i] != fir_out[i])\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5ac62ac3a2f7f0f3aaa35e7b9df770e646e2c8c9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-lb-big-array.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 80\n+#define M 128\n+float in[N+M];\n+float coeff[M];\n+float out[N];\n+float fir_out[N];\n+\n+/* Vectorized.  Fixed misaligment in the inner-loop.  */\n+__attribute__ ((noinline))\n+void foo (){\n+ int i,j,k;\n+ float diff;\n+\n+ for (i = 0; i < N; i++) {\n+  out[i] = 0;\n+ }\n+\n+ for (k = 0; k < 4; k++) {\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    j = k;\n+\n+    do {\n+      diff += in[j+i]*coeff[j];\n+      j+=4;\n+    } while (j < M);\n+\n+    out[i] += diff;\n+  }\n+ }\n+\n+}\n+\n+/* Vectorized.  Changing misalignment in the inner-loop.  */\n+__attribute__ ((noinline))\n+void fir (){\n+  int i,j,k;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j++) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    fir_out[i] = diff;\n+  }\n+}\n+\n+\n+int main (void)\n+{\n+  check_vect ();\n+  int i, j;\n+  float diff;\n+\n+  for (i = 0; i < M; i++)\n+    coeff[i] = i;\n+  for (i = 0; i < N+M; i++)\n+    in[i] = i;\n+\n+  foo ();\n+  fir ();\n+\n+  for (i = 0; i < N; i++) {\n+    if (out[i] != fir_out[i])\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3c1a362c003e741eeb686c1f84ca8d80797c860c", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-lb.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 80\n-#define M 128\n+#define N 40\n+#define M 64\n float in[N+M];\n float coeff[M];\n float out[N];"}, {"sha": "af787b96a33691d15e3cc570925f6ede80f84a28", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 80\n-#define M 256\n+#define N 40\n+#define M 128\n float in[N+M];\n float coeff[M];\n float out[N];"}, {"sha": "2061594acc05360754b5c854ab72254fa3b7c976", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1-big-array.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_shift } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 512\n+\n+/* Modified rgb to rgb conversion from FFmpeg.  */\n+__attribute__ ((noinline)) void\n+foo (unsigned char *src, unsigned char *dst)\n+{\n+  unsigned char *s = src;\n+  unsigned short *d = (unsigned short *)dst;\n+  int i;\n+\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      *d = ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5));\n+      d++;\n+    }\n+\n+  s = src;\n+  d = (unsigned short *)dst;\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      if (*d != ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5)))\n+        abort ();\n+      d++;\n+    }\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  unsigned char in[N], out[N];\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i;\n+      out[i] = 255;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (in, out);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "36f4684ad582e921faf8611892a7954c54849198", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 512\n+#define N 64\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "bc738cef26c4604cd004c687e09583aa41beb3b6", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-2-big-array.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_shift } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 512\n+\n+/* Modified rgb to rgb conversion from FFmpeg.  */\n+__attribute__ ((noinline)) void\n+foo (unsigned char *src, unsigned char *dst)\n+{\n+  unsigned char *s = src;\n+  int *d = (int *)dst;\n+  int i;\n+\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      *d = ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5));\n+      d++;\n+    }\n+\n+  s = src;\n+  d = (int *)dst;\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      if (*d != ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5)))\n+        abort ();\n+      d++;\n+    }\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  unsigned char in[N], out[N];\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i;\n+      out[i] = 255;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (in, out);\n+\n+  return 0;\n+}\n+\n+/* Final value stays in int, so no over-widening is detected at the moment.  */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "fecc5ef3038106330df8350808dcdf61a62b6f24", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 512\n+#define N 64\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "d828c833f5558a39ca190e1ee1db59e95d23c421", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3-big-array.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_shift } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+/* Modified rgb to rgb conversion from FFmpeg.  */\n+__attribute__ ((noinline)) void\n+foo (unsigned char *src, unsigned char *dst)\n+{\n+  unsigned char *s = src;\n+  unsigned short *d = (unsigned short *)dst;\n+  int i;\n+\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      *d = ((b>>3) | ((g&0xFFC)<<3) | ((r+0xF8)>>8) | (a<<9));\n+      d++;\n+    }\n+\n+  s = src;\n+  d = (unsigned short *)dst;\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      if (*d != ((b>>3) | ((g&0xFFC)<<3) | ((r+0xF8)>>8) | (a<<9)))\n+        abort ();\n+      d++;\n+    }\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  unsigned char in[N], out[N];\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i;\n+      out[i] = 255;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (in, out);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "ed36688f6c6b94709c8937b3405a289a80a4b755", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 64\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "d296dc944869015d5e2dc5c27fe3a1818dcf9393", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4-big-array.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_shift } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 512\n+\n+/* Modified rgb to rgb conversion from FFmpeg.  */\n+__attribute__ ((noinline)) int\n+foo (unsigned char *src, unsigned char *dst)\n+{\n+  unsigned char *s = src;\n+  unsigned short *d = (unsigned short *)dst, res;\n+  int i, result = 0;\n+\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      res = ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5));\n+      *d = res;\n+      result += res;\n+      d++;\n+    }\n+\n+  s = src;\n+  d = (unsigned short *)dst;\n+  for (i = 0; i < N/4; i++)\n+    {\n+      const int b = *s++;\n+      const int g = *s++;\n+      const int r = *s++;\n+      const int a = *s++;\n+      if (*d != ((b>>3) | ((g&0xFC)<<3) | ((r&0xF8)<<8) | (a>>5)))\n+        abort ();\n+      d++;\n+    }\n+\n+  return result;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  unsigned char in[N], out[N];\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i;\n+      out[i] = 255;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (in, out);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "c1291e38f6d9842e46feda07c7ea945ade0c12c6", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 512\n+#define N 64\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) int"}, {"sha": "7462cb34cc56e7e20652ba1dd67ab66475c1110d", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1char-big-array.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+unsigned char ub[N];\n+unsigned char uc[N];\n+unsigned char diff;\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) void\n+main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n+{\n+  int i;\n+  unsigned char udiff = 2;\n+  unsigned char umax = x;\n+  unsigned char umin = x;\n+\n+  diff = 2;\n+  for (i = 0; i < N; i++) {\n+    ub[i] = i;\n+    uc[i] = i;\n+    if (i%16 == 0)\n+      {\n+\tub[i] = i+2;\n+\tdiff += 2;\n+      }\n+    if (uc[i] > max_result)\n+      max_result = uc[i];\n+    if (uc[i] < min_result)\n+      min_result = uc[i];\n+\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n+  for (i = 0; i < N; i++) {\n+    udiff += (unsigned char) (ub[i] - uc[i]);\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    umax = umax < uc[i] ? uc[i] : umax;\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    umin = umin > uc[i] ? uc[i] : umin;\n+  }\n+\n+  /* check results:  */\n+  if (udiff != diff)\n+    abort ();\n+  if (umax != max_result)\n+    abort ();\n+  if (umin != min_result)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_no_int_max } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5a1c03d113fbb3b6453a62c7c1d0602d0f66188e", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1char.c", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,13 +3,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 256\n+#define N 16\n+#define DIFF 242\n \n-unsigned char ub[N];\n-unsigned char uc[N];\n-unsigned char diff;\n-\n-volatile int y = 0;\n+unsigned char ub[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n __attribute__ ((noinline)) void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n@@ -19,26 +17,8 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n   unsigned char umax = x;\n   unsigned char umin = x;\n \n-  diff = 2;\n-  for (i = 0; i < N; i++) {\n-    ub[i] = i;\n-    uc[i] = i;\n-    if (i%16 == 0)\n-      {\n-\tub[i] = i+2;\n-\tdiff += 2;\n-      }\n-    if (uc[i] > max_result)\n-      max_result = uc[i];\n-    if (uc[i] < min_result)\n-      min_result = uc[i];\n-\n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n-  }\n   for (i = 0; i < N; i++) {\n-    udiff += (unsigned char) (ub[i] - uc[i]);\n+    udiff += (unsigned char)(ub[i] - uc[i]);\n   }\n \n   for (i = 0; i < N; i++) {\n@@ -50,7 +30,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n   }\n \n   /* check results:  */\n-  if (udiff != diff)\n+  if (udiff != DIFF)\n     abort ();\n   if (umax != max_result)\n     abort ();\n@@ -59,9 +39,9 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n }\n \n int main (void)\n-{\n+{ \n   check_vect ();\n-\n+  \n   main1 (100, 100, 1);\n   main1 (0, 15, 0);\n   return 0;"}, {"sha": "7004e9e4e4403e8fb11d7adf29acb3ac032073c8", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char-big-array.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+volatile int y = 0;\n+\n+__attribute__ ((noinline))\n+void main1 (signed char x, signed char max_result, signed char min_result)\n+{\n+  int i;\n+  signed char b[N];\n+  signed char c[N];\n+  signed char check_diff = 2;\n+  signed char diff = 2;\n+  signed char max = x;\n+  signed char min = x;\n+\n+  check_diff = 2;\n+  for (i = 0; i < N; i++) {\n+    b[i] = i;\n+    c[i] = i;\n+    if (i%16 == 0)\n+      {\n+\tc[i] = i + 1;\n+\tcheck_diff += 1;\n+      }\n+    if (c[i] > max_result)\n+      max_result = c[i];\n+    if (c[i] < min_result)\n+      min_result = c[i];\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    diff += (signed char) (c[i] - b[i]);\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    max = max < c[i] ? c[i] : max;\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    min = min > c[i] ? c[i] : min;\n+  }\n+\n+  /* check results:  */\n+  if (diff != check_diff)\n+    abort ();\n+  if (max != max_result)\n+    abort ();\n+  if (min != min_result)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6d01f03174abf42f2f82f5ac7fa11172626e63c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,40 +3,21 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 256\n-volatile int y = 0;\n+#define N 16\n+#define DIFF 121\n \n __attribute__ ((noinline))\n void main1 (signed char x, signed char max_result, signed char min_result)\n {\n   int i;\n-  signed char b[N];\n-  signed char c[N];\n-  signed char check_diff = 2;\n+  signed char b[N] = {1,2,3,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+  signed char c[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   signed char diff = 2;\n   signed char max = x;\n   signed char min = x;\n \n-  check_diff = 2;\n   for (i = 0; i < N; i++) {\n-    b[i] = i;\n-    c[i] = i;\n-    if (i%16 == 0)\n-      {\n-\tc[i] = i + 1;\n-\tcheck_diff += 1;\n-      }\n-    if (c[i] > max_result)\n-      max_result = c[i];\n-    if (c[i] < min_result)\n-      min_result = c[i];\n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n-  }\n-\n-  for (i = 0; i < N; i++) {\n-    diff += (signed char) (c[i] - b[i]);\n+    diff += (signed char)(b[i] - c[i]);\n   }\n \n   for (i = 0; i < N; i++) {\n@@ -48,7 +29,7 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n   }\n \n   /* check results:  */\n-  if (diff != check_diff)\n+  if (diff != DIFF)\n     abort ();\n   if (max != max_result)\n     abort ();\n@@ -57,9 +38,9 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n }\n \n int main (void)\n-{\n+{ \n   check_vect ();\n-\n+  \n   main1 (100, 100, 1);\n   main1 (0, 15, 0);\n   return 0;"}, {"sha": "1967e3da6b237d2a7e7821f734dca17e74c7ed74", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b-big-array.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+unsigned char udata_ch[N];\n+#define SUM N*(N-1)\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+foo ()\n+{\n+  int i;\n+  unsigned int intsum = 0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      udata_ch[i] = i*2;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* widenning sum: sum chars into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += udata_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_widen_sum_qi_to_si || vect_unpack } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { { ! vect_widen_sum_qi_to_si } && { ! vect_unpack } } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6effa87ebb5be054b58b5bd1352f1c958295e520", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,26 +3,17 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n-unsigned char udata_ch[N];\n-#define SUM N*(N-1)\n-\n-volatile int y = 0;\n+#define N 16\n+unsigned char udata_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   unsigned int intsum = 0;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      udata_ch[i] = i*2;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n-\n   /* widenning sum: sum chars into int.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "5394adee00ec1676284e5ae3b42b650ecb2125dc", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c-big-array.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+unsigned char udata_ch[N];\n+#define SUM N*(N-1)\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+foo ()\n+{\n+  int i;\n+  unsigned short shortsum = 0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      udata_ch[i] = i*2;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* widenning sum: sum chars into short.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      shortsum += udata_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (shortsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "872e6e82e5b70c1f1b5f2b1f1e9e5488e12415ce", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,26 +3,17 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n-unsigned char udata_ch[N];\n-#define SUM N*(N-1)\n-\n-volatile int y = 0;\n+#define N 16\n+unsigned char udata_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   unsigned short shortsum = 0;\n \n-  for (i = 0; i < N; i++)\n-    {\n-      udata_ch[i] = i*2;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n-\n   /* widenning sum: sum chars into short.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "fa0100b9a9d94c7088c3dca91f08c5763040dc5b", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b-big-array.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+signed char data_ch[N];\n+\n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) int\n+foo ()\n+{\n+  int i;\n+  signed int intsum = 0;\n+  signed int check_intsum = 0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      data_ch[i] = i*2;\n+      check_intsum += data_ch[i];\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n+  /* widenning sum: sum chars into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += data_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != check_intsum)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_widen_sum_qi_to_si && vect_unpack } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { { ! vect_widen_sum_qi_to_si } && { ! vect_unpack } } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "53d5f0d5cceaf41cf5a14ffd67000739dbc6f7ab", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,26 +3,16 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n-signed char data_ch[N];\n-\n-volatile int y = 0;\n+#define N 16\n+signed char data_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   signed int intsum = 0;\n-  signed int check_intsum = 0;\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      data_ch[i] = i*2;\n-      check_intsum += data_ch[i];\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n-    }\n \n   /* widenning sum: sum chars into int.  */\n   for (i = 0; i < N; i++)\n@@ -31,7 +21,7 @@ foo ()\n     }\n \n   /* check results:  */\n-  if (intsum != check_intsum)\n+  if (intsum != SUM)\n     abort ();\n \n   return 0;"}, {"sha": "0e1acfb7bebea3f73347dc0fd32325e8d3dc45dd", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-2-big-array.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,190 @@\n+/* { dg-require-effective-target vect_shift } */\n+/* { dg-require-effective-target vect_int } */\n+/* Check the standard integer types for left and right shifts to see if the\n+   compiler replaced a scalar instruction with a vector instruction whether the\n+   correct value is generated.  */\n+\n+#ifdef TRACE\n+#endif\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#ifndef ALIGN\n+#define ALIGN __attribute__((__aligned__(__BIGGEST_ALIGNMENT__)))\n+#endif\n+\n+#ifndef NOINLINE\n+#define NOINLINE __attribute__((__noinline__))\n+#endif\n+\n+#ifdef TRACE\n+#define TRACE_FUNC(PREFIX, NAME) printf (#PREFIX #NAME \"\\n\")\n+#define TRACE_DONE()  printf (\"done!\\n\")\n+#define TRACE_ABORT(I,E,G)\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  printf (\"Element %d, expected 0x%lx, got 0x%lx\\n\",\t\t\t\\\n+\t  I, (long)(E), (long)(G));\t\t\t\t\t\\\n+  abort ();\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+#else\n+#define TRACE_FUNC(PREFIX, A)\n+#define TRACE_DONE()\n+#define TRACE_ABORT(I,E,G) abort ()\n+#endif\n+\n+#define NAME(A,B) A ## B\n+\n+#define VECT_TESTS(PREFIX, TYPE, N)\t\t\t\t\t\\\n+ /* Restrict the optimizer from optimizing the setup loops.  */\t\t\\\n+volatile TYPE NAME (PREFIX, zero) = 0;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE NAME (PREFIX, a)[N] ALIGN;\t\t\t\t\t\t\\\n+TYPE NAME (PREFIX, b)[N] ALIGN;\t\t\t\t\t\t\\\n+TYPE NAME (PREFIX, c)[N] ALIGN;\t\t\t\t\t\t\\\n+TYPE NAME (PREFIX, d)[N] ALIGN;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, lshift_2) (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, lshift_2);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] << 2;\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, lshift_var) (int shift)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, lshift_var);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] << shift;\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, lshift_vect) (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, lshift_vect);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] << NAME (PREFIX, c)[i];\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, rshift_2) (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, rshift_2);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] >> 2;\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, rshift_var) (int shift)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, rshift_var);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] >> shift;\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, rshift_vect) (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, rshift_vect);\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    NAME (PREFIX, a)[i] = NAME (PREFIX, b)[i] >> NAME (PREFIX, c)[i];\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, check) (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, check);\t\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    if (NAME (PREFIX, a)[i] != NAME (PREFIX, d)[i])\t\t\t\\\n+      TRACE_ABORT (i, NAME (PREFIX, d)[i], NAME (PREFIX, a)[i]);\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void NOINLINE\t\t\t\t\t\t\t\\\n+NAME (PREFIX, tests) (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TRACE_FUNC (PREFIX, tests);\t\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      NAME (PREFIX, b)[i] = (i + NAME (PREFIX, zero));\t\t\t\\\n+      NAME (PREFIX, c)[i] = 2;\t\t\t\t\t\t\\\n+      NAME (PREFIX, d)[i] = (i + NAME (PREFIX, zero)) << 2;\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, lshift_2) ();\t\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, lshift_var) (2);\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, lshift_vect) ();\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < N; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      NAME (PREFIX, b)[i] = ((i + NAME (PREFIX, zero)) << 4)\t\t\\\n+\t| (((TYPE)0x80) << ((sizeof (TYPE) * 8) - 8));\t\t\t\\\n+      NAME (PREFIX, c)[i] = 2;\t\t\t\t\t\t\\\n+      NAME (PREFIX, d)[i] = (TYPE)((NAME (PREFIX, b)[i]\t\t\t\\\n+\t\t\t\t    + NAME (PREFIX, zero)) >> 2);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, rshift_2) ();\t\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, rshift_var) (2);\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  NAME (PREFIX, rshift_vect) ();\t\t\t\t\t\\\n+  NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n+}\n+\n+VECT_TESTS (uc_, unsigned char,  128)\n+VECT_TESTS (us_, unsigned short, 256)\n+VECT_TESTS (ui_, unsigned int,   256)\n+VECT_TESTS (ul_, unsigned long,  256)\n+\n+VECT_TESTS (sc_, signed char,    128)\n+VECT_TESTS (ss_, short,          256)\n+VECT_TESTS (si_, int,            256)\n+VECT_TESTS (sl_, long,           256)\n+\n+int main ()\n+{\n+  int i;\n+\n+  check_vect ();\n+\n+  uc_tests ();\n+  us_tests ();\n+  ui_tests ();\n+  ul_tests ();\n+\n+  sc_tests ();\n+  ss_tests ();\n+  si_tests ();\n+  sl_tests ();\n+\n+  TRACE_DONE ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "83211eba49f326da7516ae43b4f9550506513a72", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -157,15 +157,15 @@ NAME (PREFIX, tests) (void)\t\t\t\t\t\t\\\n   NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n }\n \n-VECT_TESTS (uc_, unsigned char,  128)\n-VECT_TESTS (us_, unsigned short, 256)\n-VECT_TESTS (ui_, unsigned int,   256)\n-VECT_TESTS (ul_, unsigned long,  256)\n-\n-VECT_TESTS (sc_, signed char,    128)\n-VECT_TESTS (ss_, short,          256)\n-VECT_TESTS (si_, int,            256)\n-VECT_TESTS (sl_, long,           256)\n+VECT_TESTS(uc_, unsigned char,  16)\n+VECT_TESTS(us_, unsigned short, 32)\n+VECT_TESTS(ui_, unsigned int,   32)\n+VECT_TESTS(ul_, unsigned long,  32)\n+\n+VECT_TESTS(sc_, signed char,    16)\n+VECT_TESTS(ss_, short,          32)\n+VECT_TESTS(si_, int,            32)\n+VECT_TESTS(sl_, long,           32)\n \n int main ()\n {"}, {"sha": "6e3c9f1b9ae6f882badb9263654c0b33ac24a6a4", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+   unsigned char e;\n+   unsigned char f;\n+   unsigned char g;\n+   unsigned char h;\n+} s;\n+\n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n+  s arr[N];\n+  s *ptr = arr;\n+  s check_res[N];\n+  s res[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i;\n+      arr[i].b = i * 2;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      arr[i].e = i + 5;\n+      arr[i].f = i * 2 + 2;\n+      arr[i].g = i - 3;\n+      arr[i].h = 56;\n+\n+      check_res[i].c = arr[i].a;\n+      check_res[i].a = arr[i].f + arr[i].a;\n+      check_res[i].d = arr[i].f - arr[i].a;\n+      check_res[i].b = arr[i].f;\n+      check_res[i].f = arr[i].a;\n+      check_res[i].e = arr[i].f - arr[i].a;\n+      check_res[i].h = arr[i].f;\n+      check_res[i].g = arr[i].f - arr[i].a;\n+\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      res[i].c = ptr->a;\n+      res[i].a = ptr->f + ptr->a;\n+      res[i].d = ptr->f - ptr->a;\n+      res[i].b = ptr->f;\n+      res[i].f = ptr->a;\n+      res[i].e = ptr->f - ptr->a;\n+      res[i].h = ptr->f;\n+      res[i].g = ptr->f - ptr->a;\n+      ptr++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+          abort ();\n+   }\n+}\n+\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "4fb5494a4d35e773621cd035a5bfbaf741d7b4fd", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2.c", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16 \n \n typedef struct {\n    unsigned char a;\n@@ -22,7 +22,6 @@ main1 ()\n   int i;\n   s arr[N];\n   s *ptr = arr;\n-  s check_res[N];\n   s res[N];\n \n   for (i = 0; i < N; i++)\n@@ -35,16 +34,6 @@ main1 ()\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-\n-      check_res[i].c = arr[i].a;\n-      check_res[i].a = arr[i].f + arr[i].a;\n-      check_res[i].d = arr[i].f - arr[i].a;\n-      check_res[i].b = arr[i].f;\n-      check_res[i].f = arr[i].a;\n-      check_res[i].e = arr[i].f - arr[i].a;\n-      check_res[i].h = arr[i].f;\n-      check_res[i].g = arr[i].f - arr[i].a;\n-\n       if (arr[i].a == 178)\n          abort();\n     }\n@@ -56,23 +45,23 @@ main1 ()\n       res[i].d = ptr->f - ptr->a;\n       res[i].b = ptr->f;\n       res[i].f = ptr->a;\n-      res[i].e = ptr->f - ptr->a;\n-      res[i].h = ptr->f;\n+      res[i].e = ptr->f - ptr->a; \n+      res[i].h = ptr->f;   \n       res[i].g = ptr->f - ptr->a;\n-      ptr++;\n-    }\n-\n+      ptr++; \n+    } \n+   \n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    {\n-      if (res[i].a != check_res[i].a\n-\t  || res[i].b != check_res[i].b\n-\t  || res[i].c != check_res[i].c\n-\t  || res[i].d != check_res[i].d\n-\t  || res[i].e != check_res[i].e\n-\t  || res[i].f != check_res[i].f\n-\t  || res[i].g != check_res[i].g\n-\t  || res[i].h != check_res[i].h)\n+    { \n+      if (res[i].c != arr[i].a\n+          || res[i].a != arr[i].f + arr[i].a\n+          || res[i].d != arr[i].f - arr[i].a\n+          || res[i].b != arr[i].f\n+          || res[i].f != arr[i].a\n+          || res[i].e != arr[i].f - arr[i].a\n+          || res[i].h != arr[i].f\n+          || res[i].g != arr[i].f - arr[i].a)\n           abort();\n    }\n }\n@@ -89,4 +78,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-\n+  "}, {"sha": "5a446317ca3355390bac9ec1479a3df1bd78e538", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+   unsigned char e;\n+   unsigned char f;\n+   unsigned char g;\n+   unsigned char h;\n+} s;\n+\n+__attribute__ ((noinline)) int\n+main1 ()\n+{\n+  int i;\n+  s arr[N];\n+  s *ptr = arr;\n+  s check_res[N];\n+  s res[N];\n+  unsigned char u, t, s, x, y, z, w;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i;\n+      arr[i].b = i * 2;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      arr[i].e = i * 3 + 5;\n+      arr[i].f = i * 5;\n+      arr[i].g = i - 3;\n+      arr[i].h = 67;\n+\n+      u = arr[i].b - arr[i].a;\n+      t = arr[i].d - arr[i].c;\n+      check_res[i].c = u + t;\n+      x = arr[i].b + arr[i].d;\n+      check_res[i].a = arr[i].a + x;\n+      check_res[i].d = u + t;\n+      s = arr[i].h - arr[i].a;\n+      check_res[i].b = s + t;\n+      check_res[i].f = arr[i].f + arr[i].h;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].d;\n+      check_res[i].g = u + t;\n+\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      u = ptr->b - ptr->a;\n+      t = ptr->d - ptr->c;\n+      res[i].c = u + t;\n+      x = ptr->b + ptr->d;\n+      res[i].a = ptr->a + x;\n+      res[i].d = u + t;\n+      s = ptr->h - ptr->a;\n+      res[i].b = s + t;\n+      res[i].f = ptr->f + ptr->h;\n+      res[i].e = ptr->b + ptr->e;\n+      res[i].h = ptr->d;\n+      res[i].g = u + t;\n+      ptr++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+         abort ();\n+   }\n+}\n+\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  main1 ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "cc09fa608dcb67388bcf176fbcf9b076708a1c3c", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7.c", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16 \n \n typedef struct {\n    unsigned char a;\n@@ -22,7 +22,6 @@ main1 ()\n   int i;\n   s arr[N];\n   s *ptr = arr;\n-  s check_res[N];\n   s res[N];\n   unsigned char u, t, s, x, y, z, w;\n \n@@ -36,20 +35,6 @@ main1 ()\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-\n-      u = arr[i].b - arr[i].a;\n-      t = arr[i].d - arr[i].c;\n-      check_res[i].c = u + t;\n-      x = arr[i].b + arr[i].d;\n-      check_res[i].a = arr[i].a + x;\n-      check_res[i].d = u + t;\n-      s = arr[i].h - arr[i].a;\n-      check_res[i].b = s + t;\n-      check_res[i].f = arr[i].f + arr[i].h;\n-      check_res[i].e = arr[i].b + arr[i].e;\n-      check_res[i].h = arr[i].d;\n-      check_res[i].g = u + t;\n-\n       if (arr[i].a == 178)\n          abort();\n     }\n@@ -74,14 +59,14 @@ main1 ()\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     { \n-      if (res[i].a != check_res[i].a\n-\t  || res[i].b != check_res[i].b\n-\t  || res[i].c != check_res[i].c\n-\t  || res[i].d != check_res[i].d\n-\t  || res[i].e != check_res[i].e\n-\t  || res[i].f != check_res[i].f\n-\t  || res[i].g != check_res[i].g\n-\t  || res[i].h != check_res[i].h)\n+      if (res[i].c != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].a != arr[i].a + arr[i].b + arr[i].d\n+          || res[i].d != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].b != arr[i].h - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].f != arr[i].f + arr[i].h\n+          || res[i].e != arr[i].b + arr[i].e\n+          || res[i].h != arr[i].d\n+          || res[i].g != arr[i].b - arr[i].a + arr[i].d - arr[i].c)\n          abort();\n    }\n }"}, {"sha": "cc1b94989149c847ae63c45063a22d20fe1ae196", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+   unsigned char e;\n+   unsigned char f;\n+   unsigned char g;\n+   unsigned char h;\n+} s;\n+\n+s check_res[N];\n+\n+__attribute__ ((noinline)) int\n+main1 (s *arr)\n+{\n+  int i;\n+  s *ptr = arr;\n+  s res[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      res[i].c = ptr->b;\n+      res[i].a = ptr->f + ptr->b;\n+      res[i].d = ptr->f - ptr->b;\n+      res[i].b = ptr->f;\n+      res[i].f = ptr->b;\n+      res[i].e = ptr->f - ptr->b;\n+      res[i].h = ptr->f;\n+      res[i].g = ptr->f - ptr->b;\n+      ptr++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+          abort ();\n+   }\n+}\n+\n+\n+int main (void)\n+{\n+  int i;\n+  s arr[N];\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i;\n+      arr[i].b = i * 2;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      arr[i].e = i + 5;\n+      arr[i].f = i * 2 + 2;\n+      arr[i].g = i - 3;\n+      arr[i].h = 56;\n+\n+      check_res[i].c = arr[i].b;\n+      check_res[i].a = arr[i].f + arr[i].b;\n+      check_res[i].d = arr[i].f - arr[i].b;\n+      check_res[i].b = arr[i].f;\n+      check_res[i].f = arr[i].b;\n+      check_res[i].e = arr[i].f - arr[i].b;\n+      check_res[i].h = arr[i].f;\n+      check_res[i].g = arr[i].f - arr[i].b;\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+\n+  main1 (arr);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "349e869392609be6894ac0634d06ac6f2644a29f", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2.c", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16 \n \n typedef struct {\n    unsigned char a;\n@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-s check_res[N];\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -32,24 +30,24 @@ main1 (s *arr)\n       res[i].d = ptr->f - ptr->b;\n       res[i].b = ptr->f;\n       res[i].f = ptr->b;\n-      res[i].e = ptr->f - ptr->b;\n-      res[i].h = ptr->f;\n+      res[i].e = ptr->f - ptr->b; \n+      res[i].h = ptr->f;   \n       res[i].g = ptr->f - ptr->b;\n-      ptr++;\n-    }\n-\n+      ptr++; \n+    } \n+   \n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    {\n-      if (res[i].a != check_res[i].a\n-\t  || res[i].b != check_res[i].b\n-\t  || res[i].c != check_res[i].c\n-\t  || res[i].d != check_res[i].d\n-\t  || res[i].e != check_res[i].e\n-\t  || res[i].f != check_res[i].f\n-\t  || res[i].g != check_res[i].g\n-\t  || res[i].h != check_res[i].h)\n-          abort ();\n+    { \n+      if (res[i].c != arr[i].b\n+          || res[i].a != arr[i].f + arr[i].b\n+          || res[i].d != arr[i].f - arr[i].b\n+          || res[i].b != arr[i].f\n+          || res[i].f != arr[i].b\n+          || res[i].e != arr[i].f - arr[i].b\n+          || res[i].h != arr[i].f\n+          || res[i].g != arr[i].f - arr[i].b)\n+          abort();\n    }\n }\n \n@@ -58,11 +56,11 @@ int main (void)\n {\n   int i;\n   s arr[N];\n-\n+  \n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    {\n+    { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n@@ -71,18 +69,9 @@ int main (void)\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-\n-      check_res[i].c = arr[i].b;\n-      check_res[i].a = arr[i].f + arr[i].b;\n-      check_res[i].d = arr[i].f - arr[i].b;\n-      check_res[i].b = arr[i].f;\n-      check_res[i].f = arr[i].b;\n-      check_res[i].e = arr[i].f - arr[i].b;\n-      check_res[i].h = arr[i].f;\n-      check_res[i].g = arr[i].f - arr[i].b;\n       if (arr[i].a == 178)\n-         abort ();\n-    }\n+         abort(); \n+    } \n \n   main1 (arr);\n \n@@ -91,4 +80,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-\n+  "}, {"sha": "916fdf4d4fa24f1ad462d55e3974641bfa93bfc1", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+   unsigned char e;\n+   unsigned char f;\n+   unsigned char g;\n+   unsigned char h;\n+} s;\n+\n+s check_res[N];\n+\n+__attribute__ ((noinline)) int\n+main1 (s *arr)\n+{\n+  int i;\n+  s *ptr = arr;\n+  s res[N];\n+  unsigned char x;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      res[i].c = ptr->b + ptr->c;\n+      x = ptr->c + ptr->f;\n+      res[i].a = x + ptr->b;\n+      res[i].d = ptr->b + ptr->c;\n+      res[i].b = ptr->c;\n+      res[i].f = ptr->f + ptr->e;\n+      res[i].e = ptr->b + ptr->e;\n+      res[i].h = ptr->c;\n+      res[i].g = ptr->b + ptr->c;\n+      ptr++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+          abort ();\n+   }\n+\n+  ptr = arr;\n+  /* Not vectorizable: gap in store.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      res[i].a = ptr->b;\n+      res[i].b = ptr->c;\n+      ptr++;\n+    }\n+\n+  /* Check results.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != arr[i].b\n+\t  || res[i].b != arr[i].c)\n+          abort ();\n+    }\n+\n+}\n+\n+\n+int main (void)\n+{\n+  int i;\n+  s arr[N];\n+  unsigned char x;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i;\n+      arr[i].b = i * 2;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      arr[i].e = i * 3 + 5;\n+      arr[i].f = i * 5;\n+      arr[i].g = i - 3;\n+      arr[i].h = 56;\n+\n+      check_res[i].c = arr[i].b + arr[i].c;\n+      x = arr[i].c + arr[i].f;\n+      check_res[i].a = x + arr[i].b;\n+      check_res[i].d = arr[i].b + arr[i].c;\n+      check_res[i].b = arr[i].c;\n+      check_res[i].f = arr[i].f + arr[i].e;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].c;\n+      check_res[i].g = arr[i].b + arr[i].c;\n+\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+  main1 (arr);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "537bcc87dfb573731e4e662adf4251a04dd0afce", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4.c", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16 \n \n typedef struct {\n    unsigned char a;\n@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-s check_res[N];\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -34,39 +32,39 @@ main1 (s *arr)\n       res[i].d = ptr->b + ptr->c;\n       res[i].b = ptr->c;\n       res[i].f = ptr->f + ptr->e;\n-      res[i].e = ptr->b + ptr->e;\n-      res[i].h = ptr->c;\n+      res[i].e = ptr->b + ptr->e; \n+      res[i].h = ptr->c;   \n       res[i].g = ptr->b + ptr->c;\n-      ptr++;\n-    }\n-\n+      ptr++; \n+    } \n+   \n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    {\n-      if (res[i].a != check_res[i].a\n-\t  || res[i].b != check_res[i].b\n-\t  || res[i].c != check_res[i].c\n-\t  || res[i].d != check_res[i].d\n-\t  || res[i].e != check_res[i].e\n-\t  || res[i].f != check_res[i].f\n-\t  || res[i].g != check_res[i].g\n-\t  || res[i].h != check_res[i].h)\n+    { \n+      if (res[i].c != arr[i].b + arr[i].c\n+          || res[i].a != arr[i].c + arr[i].f + arr[i].b\n+          || res[i].d != arr[i].b + arr[i].c\n+          || res[i].b != arr[i].c\n+          || res[i].f != arr[i].f + arr[i].e\n+          || res[i].e != arr[i].b + arr[i].e\n+          || res[i].h != arr[i].c\n+          || res[i].g != arr[i].b + arr[i].c)\n           abort ();\n    }\n \n   ptr = arr;\n   /* Not vectorizable: gap in store. */\n   for (i = 0; i < N; i++)\n-    {\n+    { \n       res[i].a = ptr->b;\n       res[i].b = ptr->c;\n-      ptr++;\n+      ptr++; \n     }\n-\n+  \n   /* Check results.  */\n   for (i = 0; i < N; i++)\n     {\n-      if (res[i].a != arr[i].b\n+      if (res[i].a != arr[i].b \n \t  || res[i].b != arr[i].c)\n           abort ();\n     }\n@@ -78,12 +76,11 @@ int main (void)\n {\n   int i;\n   s arr[N];\n-  unsigned char x;\n-\n+  \n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    {\n+    { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n@@ -92,25 +89,15 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-\n-      check_res[i].c = arr[i].b + arr[i].c;\n-      x = arr[i].c + arr[i].f;\n-      check_res[i].a = x + arr[i].b;\n-      check_res[i].d = arr[i].b + arr[i].c;\n-      check_res[i].b = arr[i].c;\n-      check_res[i].f = arr[i].f + arr[i].e;\n-      check_res[i].e = arr[i].b + arr[i].e;\n-      check_res[i].h = arr[i].c;\n-      check_res[i].g = arr[i].b + arr[i].c;\n-\n       if (arr[i].a == 178)\n-         abort ();\n-    }\n+         abort(); \n+    } \n+\n   main1 (arr);\n \n   return 0;\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-\n+  "}, {"sha": "ecacefab9a5ed96d11e6f331909f237aa975351e", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+typedef struct {\n+   unsigned char a;\n+   unsigned char b;\n+   unsigned char c;\n+   unsigned char d;\n+   unsigned char e;\n+   unsigned char f;\n+   unsigned char g;\n+   unsigned char h;\n+} s;\n+\n+s check_res[N];\n+\n+__attribute__ ((noinline)) int\n+main1 (s *arr)\n+{\n+  int i;\n+  s *ptr = arr;\n+  s res[N];\n+  unsigned char u, t, s, x, y, z, w;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      u = ptr->b - ptr->a;\n+      t = ptr->d - ptr->c;\n+      res[i].c = u + t;\n+      x = ptr->b + ptr->d;\n+      res[i].a = ptr->a + x;\n+      res[i].d = u + t;\n+      s = ptr->h - ptr->a;\n+      res[i].b = s + t;\n+      res[i].f = ptr->f + ptr->h;\n+      res[i].e = ptr->b + ptr->e;\n+      res[i].h = ptr->d;\n+      res[i].g = u + t;\n+      ptr++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+         abort ();\n+   }\n+}\n+\n+\n+int main (void)\n+{\n+  int i;\n+  s arr[N];\n+  unsigned char u, t, s, x, y, z, w;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      arr[i].a = i;\n+      arr[i].b = i * 2;\n+      arr[i].c = 17;\n+      arr[i].d = i+34;\n+      arr[i].e = i * 3 + 5;\n+      arr[i].f = i * 5;\n+      arr[i].g = i - 3;\n+      arr[i].h = 67;\n+\n+      u = arr[i].b - arr[i].a;\n+      t = arr[i].d - arr[i].c;\n+      check_res[i].c = u + t;\n+      x = arr[i].b + arr[i].d;\n+      check_res[i].a = arr[i].a + x;\n+      check_res[i].d = u + t;\n+      s = arr[i].h - arr[i].a;\n+      check_res[i].b = s + t;\n+      check_res[i].f = arr[i].f + arr[i].h;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].d;\n+      check_res[i].g = u + t;\n+\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n+\n+  main1 (arr);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "76cb66d0861c09c16752462742cc614f8d15e143", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e78fd769ba4419edbde335326dcdc13444ad2b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c?ref=43e78fd769ba4419edbde335326dcdc13444ad2b", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N 16 \n \n typedef struct {\n    unsigned char a;\n@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-s check_res[N];\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -46,14 +44,14 @@ main1 (s *arr)\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     { \n-      if (res[i].a != check_res[i].a\n-\t  || res[i].b != check_res[i].b\n-\t  || res[i].c != check_res[i].c\n-\t  || res[i].d != check_res[i].d\n-\t  || res[i].e != check_res[i].e\n-\t  || res[i].f != check_res[i].f\n-\t  || res[i].g != check_res[i].g\n-\t  || res[i].h != check_res[i].h)\n+      if (res[i].c != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].a != arr[i].a + arr[i].b + arr[i].d\n+          || res[i].d != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].b != arr[i].h - arr[i].a + arr[i].d - arr[i].c\n+          || res[i].f != arr[i].f + arr[i].h\n+          || res[i].e != arr[i].b + arr[i].e\n+          || res[i].h != arr[i].d\n+          || res[i].g != arr[i].b - arr[i].a + arr[i].d - arr[i].c)\n          abort();\n    }\n }\n@@ -63,7 +61,6 @@ int main (void)\n {\n   int i;\n   s arr[N];\n-  unsigned char u, t, s, x, y, z, w;\n   \n   check_vect ();\n \n@@ -77,20 +74,6 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-\n-      u = arr[i].b - arr[i].a;\n-      t = arr[i].d - arr[i].c;\n-      check_res[i].c = u + t;\n-      x = arr[i].b + arr[i].d;\n-      check_res[i].a = arr[i].a + x;\n-      check_res[i].d = u + t;\n-      s = arr[i].h - arr[i].a;\n-      check_res[i].b = s + t;\n-      check_res[i].f = arr[i].f + arr[i].h;\n-      check_res[i].e = arr[i].b + arr[i].e;\n-      check_res[i].h = arr[i].d;\n-      check_res[i].g = u + t;\n-\n       if (arr[i].a == 178)\n          abort(); \n     } "}]}