{"sha": "082916584969704a8b996bdbd0ea353a3b742bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgyOTE2NTg0OTY5NzA0YThiOTk2YmRiZDBlYTM1M2EzYjc0MmJkMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-03-02T01:34:34Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-03-02T01:34:34Z"}, "message": "re PR c++/9367 (error: nonnull argument with extern \"C\" snprintf prototype)\n\n\n\tPR c++/9367\n\t* builtin-types.def (DEF_FUNCTION_TYPE_VAR_3): New macro.\n\t(BT_FN_INT_CONST_STRING_VALIST_ARG,\n\tBT_FN_INT_STRING_CONST_STRING_VALIST_ARG,\n\tBT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG,\n\tBT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n\tBT_FN_INT_STRING_CONST_STRING_VAR,\n\tBT_FN_INT_CONST_STRING_CONST_STRING_VAR,\n\tBT_FN_INT_STRING_SIZE_CONST_STRING_VAR): New built-in types.\n\t* builtin-attrs.def (ATTR_NONNULL_1, ATTR_NONNULL_2,\n\tATTR_NONNULL_3): Also include the nothrow attribute.\n\t(sprintf, scanf, sscanf, vprintf, vsprintf, snprintf,\n\tvsnprintf, vscanf, vsscanf): Don't define attributes here.\n\t* builtins.def (putchar, puts): Make full C89 built-ins.\n\t(snprintf, sprintf, scanf, sscanf, vprintf, vscanf,\n\tvsscanf, vsnprintf, vsprintf): New built-ins.\n\t* c-common.c (c_common_nodes_and_builtins): Handle new macro\n\tDEF_FUNCTION_TYPE_VAR_3.\n\n\t* doc/extend.texi: Document these new built-in functions.\n\n\t* java/builtins.c (builtin_type): Handle DEF_FUNCTION_TYPE_VAR_3.\n\t(initialize_builtins): Handle DEF_FUNCTION_TYPE_VAR_3.\n\n\t* g++.old-deja/g++.other/builtins10.C: New test for PR 9367.\n\t* gcc.dg/format/attr-5.c: Handle new conflicting types warning.\n\nFrom-SVN: r63650", "tree": {"sha": "13a26927c2fd8d16601ecab3d5325e98595e4c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a26927c2fd8d16601ecab3d5325e98595e4c07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/082916584969704a8b996bdbd0ea353a3b742bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082916584969704a8b996bdbd0ea353a3b742bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082916584969704a8b996bdbd0ea353a3b742bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082916584969704a8b996bdbd0ea353a3b742bd3/comments", "author": null, "committer": null, "parents": [{"sha": "66c4e25802794e3c3c92e3cfdafe3ee8bd3b005c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c4e25802794e3c3c92e3cfdafe3ee8bd3b005c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c4e25802794e3c3c92e3cfdafe3ee8bd3b005c"}], "stats": {"total": 214, "additions": 174, "deletions": 40}, "files": [{"sha": "61dca7ead8fbbd710db6c605474a18c204abc115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -1,3 +1,26 @@\n+2003-03-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c++/9367\n+\t* builtin-types.def (DEF_FUNCTION_TYPE_VAR_3): New macro.\n+\t(BT_FN_INT_CONST_STRING_VALIST_ARG,\n+\tBT_FN_INT_STRING_CONST_STRING_VALIST_ARG,\n+\tBT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG,\n+\tBT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n+\tBT_FN_INT_STRING_CONST_STRING_VAR,\n+\tBT_FN_INT_CONST_STRING_CONST_STRING_VAR,\n+\tBT_FN_INT_STRING_SIZE_CONST_STRING_VAR): New built-in types.\n+\t* builtin-attrs.def (ATTR_NONNULL_1, ATTR_NONNULL_2,\n+\tATTR_NONNULL_3): Also include the nothrow attribute.\n+\t(sprintf, scanf, sscanf, vprintf, vsprintf, snprintf,\n+\tvsnprintf, vscanf, vsscanf): Don't define attributes here.\n+\t* builtins.def (putchar, puts): Make full C89 built-ins.\n+\t(snprintf, sprintf, scanf, sscanf, vprintf, vscanf,\n+\tvsscanf, vsnprintf, vsprintf): New built-ins.\n+\t* c-common.c (c_common_nodes_and_builtins): Handle new macro\n+\tDEF_FUNCTION_TYPE_VAR_3.\n+\n+\t* doc/extend.texi: Document these new built-in functions.\n+\n 2003-03-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (a peephole2): New."}, {"sha": "7bdbd6280865f39b73d63becb7f7e3ea25e7c461", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -102,9 +102,12 @@ DEF_ATTR_TREE_LIST (ATTR_NORETURN_NOTHROW_LIST, ATTR_NORETURN,\t\\\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_LIST, ATTR_MALLOC,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n \n-DEF_ATTR_TREE_LIST (ATTR_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, ATTR_NULL)\n-DEF_ATTR_TREE_LIST (ATTR_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, ATTR_NULL)\n-DEF_ATTR_TREE_LIST (ATTR_NONNULL_3, ATTR_NONNULL, ATTR_LIST_3, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, \\\n+\t\t\tATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, \\\n+\t\t\tATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_3, ATTR_NONNULL, ATTR_LIST_3, \\\n+\t\t\tATTR_NOTHROW_LIST)\n \n /* Construct a tree for a format attribute.  */\n #define DEF_FORMAT_ATTRIBUTE(TYPE, FA, VALUES)\t\t\t\t \\\n@@ -149,13 +152,8 @@ DEF_FORMAT_ARG_ATTRIBUTE(2)\n \n /* Functions from ISO/IEC 9899:1990.  */\n #define DEF_C89_ATTR(NAME, ATTRS) DEF_FN_ATTR_IDENT (NAME, ATTRS, flag_hosted)\n-DEF_C89_ATTR (sprintf, ATTR_FORMAT_PRINTF_2_3)\n-DEF_C89_ATTR (scanf, ATTR_FORMAT_SCANF_1_2)\n DEF_C89_ATTR (fscanf, ATTR_FORMAT_SCANF_2_3)\n-DEF_C89_ATTR (sscanf, ATTR_FORMAT_SCANF_2_3)\n-DEF_C89_ATTR (vprintf, ATTR_FORMAT_PRINTF_1_0)\n DEF_C89_ATTR (vfprintf, ATTR_FORMAT_PRINTF_2_0)\n-DEF_C89_ATTR (vsprintf, ATTR_FORMAT_PRINTF_2_0)\n DEF_C89_ATTR (strftime, ATTR_FORMAT_STRFTIME_3_0)\n #undef DEF_C89_ATTR\n \n@@ -164,11 +162,7 @@ DEF_C89_ATTR (strftime, ATTR_FORMAT_STRFTIME_3_0)\n   DEF_FN_ATTR_IDENT (NAME, ATTRS,\t\t\t\t\t    \\\n \t       (flag_hosted\t\t\t\t\t\t    \\\n \t\t&& (flag_isoc99 || flag_noniso_default_format_attributes)))\n-DEF_C99_ATTR (snprintf, ATTR_FORMAT_PRINTF_3_4)\n-DEF_C99_ATTR (vsnprintf, ATTR_FORMAT_PRINTF_3_0)\n-DEF_C99_ATTR (vscanf, ATTR_FORMAT_SCANF_1_0)\n DEF_C99_ATTR (vfscanf, ATTR_FORMAT_SCANF_2_0)\n-DEF_C99_ATTR (vsscanf, ATTR_FORMAT_SCANF_2_0)\n #undef DEF_C99_ATTR\n \n /* Functions not in any version of ISO C.  */"}, {"sha": "c095d07b609f8a14355378ad93addaf6ca987aa6", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -40,6 +40,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    DEF_FUNCTION_TYPE_VAR_0 (ENUM, RETURN)\n    DEF_FUNCTION_TYPE_VAR_1 (ENUM, RETURN, ARG1)\n    DEF_FUNCTION_TYPE_VAR_2 (ENUM, RETURN, ARG1, ARG2)\n+   DEF_FUNCTION_TYPE_VAR_3 (ENUM, RETURN, ARG1, ARG2, ARG3)\n \n      Similar, but for function types that take variable arguments.\n      For example:\n@@ -155,6 +156,8 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n \t\t     BT_LONG_DOUBLE, BT_LONG_DOUBLE, BT_LONG_DOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_VALIST_ARG,\n+\t\t     BT_INT, BT_CONST_STRING, BT_VALIST_ARG)\n \n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)\n@@ -166,10 +169,17 @@ DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t             BT_INT, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_INT_SIZE,\n \t             BT_PTR, BT_PTR, BT_INT, BT_SIZE)\n-DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_INT_INT, BT_VOID, BT_PTR, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_INT_INT,\n+\t\t     BT_VOID, BT_PTR, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_STRING_CONST_STRING_VALIST_ARG,\n+\t\t     BT_INT, BT_STRING, BT_CONST_STRING, BT_VALIST_ARG)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG,\n+\t\t     BT_INT, BT_CONST_STRING, BT_CONST_STRING, BT_VALIST_ARG)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)\n+DEF_FUNCTION_TYPE_4 (BT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n+\t\tBT_INT, BT_STRING, BT_SIZE, BT_CONST_STRING, BT_VALIST_ARG)\n \n DEF_FUNCTION_TYPE_VAR_0 (BT_FN_VOID_VAR, BT_VOID)\n DEF_FUNCTION_TYPE_VAR_0 (BT_FN_INT_VAR, BT_INT)\n@@ -184,6 +194,13 @@ DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n \n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_PTR_CONST_STRING_VAR,\n \t                 BT_INT, BT_PTR, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_STRING_CONST_STRING_VAR,\n+\t\t\t BT_INT, BT_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_CONST_STRING_CONST_STRING_VAR,\n+\t\t\t BT_INT, BT_CONST_STRING, BT_CONST_STRING)\n+\n+DEF_FUNCTION_TYPE_VAR_3 (BT_FN_INT_STRING_SIZE_CONST_STRING_VAR,\n+\t\t\t BT_INT, BT_STRING, BT_SIZE, BT_CONST_STRING)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_VAR, BT_FN_VOID_VAR)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE,"}, {"sha": "48fd19762ae1ab4ef9ea19d30f8cb52cc05a105d", "filename": "gcc/builtins.def", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -711,27 +711,69 @@ DEF_GCC_BUILTIN(BUILT_IN_PREFETCH,\n \t\tBT_FN_VOID_CONST_PTR_VAR,\n \t\tATTR_NULL)\n \n-/* Stdio builtins.  */\n-DEF_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR,\n-\t\t    \"__builtin_putchar\",\n-\t\t     BT_FN_INT_INT,\n-\t\t     ATTR_NOTHROW_LIST)\n-DEF_FALLBACK_BUILTIN(BUILT_IN_PUTS,\n-\t\t     \"__builtin_puts\",\n-\t\t     BT_FN_INT_CONST_STRING,\n-\t\t     ATTR_NOTHROW_LIST)\n+/* stdio.h builtins (without FILE *).  */\n+\n DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF,\n \t\t\t  \"__builtin_printf\",\n \t\t\t  BT_FN_INT_CONST_STRING_VAR,\n \t\t\t  ATTR_FORMAT_PRINTF_1_2)\n-DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,\n-\t\t     \"__builtin_fputc\",\n-\t\t     BT_FN_INT_INT_PTR,\n-\t\t     ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_PUTCHAR,\n+\t\t\"__builtin_putchar\",\n+\t\tBT_FN_INT_INT,\n+\t\tATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_PUTS,\n+\t\t\"__builtin_puts\",\n+\t\tBT_FN_INT_CONST_STRING,\n+\t\tATTR_NOTHROW_LIST)\n+DEF_C99_BUILTIN(BUILT_IN_SNPRINTF,\n+\t\t\"__builtin_snprintf\",\n+\t\tBT_FN_INT_STRING_SIZE_CONST_STRING_VAR,\n+\t\tATTR_FORMAT_PRINTF_3_4)\n+DEF_LIB_BUILTIN(BUILT_IN_SPRINTF,\n+\t\t\"__builtin_sprintf\",\n+\t\tBT_FN_INT_STRING_CONST_STRING_VAR,\n+\t\tATTR_FORMAT_PRINTF_2_3)\n+DEF_LIB_BUILTIN(BUILT_IN_SCANF,\n+\t\t\"__builtin_scanf\",\n+\t\tBT_FN_INT_CONST_STRING_VAR,\n+\t\tATTR_FORMAT_SCANF_1_2)\n+DEF_LIB_BUILTIN(BUILT_IN_SSCANF,\n+\t\t\"__builtin_sscanf\",\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING_VAR,\n+\t\tATTR_FORMAT_SCANF_2_3)\n+DEF_LIB_BUILTIN(BUILT_IN_VPRINTF,\n+\t\t\"__builtin_vprintf\",\n+\t\tBT_FN_INT_CONST_STRING_VALIST_ARG,\n+\t\tATTR_FORMAT_PRINTF_1_0)\n+DEF_C99_BUILTIN(BUILT_IN_VSCANF,\n+\t\t\"__builtin_vscanf\",\n+\t\tBT_FN_INT_CONST_STRING_VALIST_ARG,\n+\t\tATTR_FORMAT_SCANF_1_0)\n+DEF_C99_BUILTIN(BUILT_IN_VSSCANF,\n+\t\t\"__builtin_vsscanf\",\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG,\n+\t\tATTR_FORMAT_SCANF_2_0)\n+DEF_C99_BUILTIN(BUILT_IN_VSNPRINTF,\n+\t\t\"__builtin_vsnprintf\",\n+\t\tBT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n+\t\tATTR_FORMAT_PRINTF_3_0)\n+DEF_LIB_BUILTIN(BUILT_IN_VSPRINTF,\n+\t\t\"__builtin_vsprintf\",\n+\t\tBT_FN_INT_STRING_CONST_STRING_VALIST_ARG,\n+\t\tATTR_FORMAT_PRINTF_2_0)\n+\n+\n+/* stdio.h builtins (with FILE *).  */\n+\n /* Declare the __builtin_ style with arguments and the regular style\n    without them.  We rely on stdio.h to supply the arguments for the\n    regular style declaration since we had to use void* instead of\n    FILE* in the __builtin_ prototype supplied here.  */\n+\n+DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,\n+\t\t     \"__builtin_fputc\",\n+\t\t     BT_FN_INT_INT_PTR,\n+\t\t     ATTR_NOTHROW_LIST)\n DEF_BUILTIN (BUILT_IN_FPUTS,\n \t     \"__builtin_fputs\",\n \t     BUILT_IN_NORMAL,\n@@ -747,7 +789,7 @@ DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,\n \t\t\t BT_FN_INT_PTR_CONST_STRING_VAR,\n \t\t\t ATTR_FORMAT_PRINTF_2_3)\n \n-/* Stdio unlocked builtins.  */\n+/* stdio unlocked builtins (without FILE *).  */\n \n DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,\n \t\t\t \"__builtin_putchar_unlocked\",\n@@ -759,13 +801,17 @@ DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,\n \t\t\t      \"__builtin_printf_unlocked\",\n \t\t\t      BT_FN_INT_CONST_STRING_VAR,\n \t\t\t      ATTR_FORMAT_PRINTF_1_2)\n-DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n-\t\t\t \"__builtin_fputc_unlocked\",\n-\t\t\t BT_FN_INT_INT_PTR)\n+\n+/* stdio unlocked builtins (with FILE *).  */\n+\n /* Declare the __builtin_ style with arguments and the regular style\n    without them.  We rely on stdio.h to supply the arguments for the\n    regular style declaration since we had to use void* instead of\n    FILE* in the __builtin_ prototype supplied here.  */\n+\n+DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n+\t\t\t \"__builtin_fputc_unlocked\",\n+\t\t\t BT_FN_INT_INT_PTR)\n DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,\n \t     \"__builtin_fputs_unlocked\",\n \t     BUILT_IN_NORMAL,"}, {"sha": "1a20b474fca84e45bf8bc545f63031381e5642f8", "filename": "gcc/c-common.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -3203,6 +3203,7 @@ c_common_nodes_and_builtins ()\n #define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,\n #define DEF_FUNCTION_TYPE_VAR_1(NAME, RETURN, ARG1) NAME,\n #define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_3(NAME, RETURN, ARG1, ARG2, ARG3) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"builtin-types.def\"\n #undef DEF_PRIMITIVE_TYPE\n@@ -3214,6 +3215,7 @@ c_common_nodes_and_builtins ()\n #undef DEF_FUNCTION_TYPE_VAR_0\n #undef DEF_FUNCTION_TYPE_VAR_1\n #undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_POINTER_TYPE\n     BT_LAST\n   };\n@@ -3533,6 +3535,19 @@ c_common_nodes_and_builtins ()\n \t\t  tree_cons (NULL_TREE,\t\t\t\t\\\n \t\t\t     builtin_types[(int) ARG2],\t\t\\\n \t\t\t     NULL_TREE)));\n+\n+#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\t\\\n+   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = build_function_type \t\t\t\t\t\t\\\n+      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n+       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n+\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n+\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n+\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n+\t\t\t     tree_cons (NULL_TREE,\t\t\t\\\n+\t\t\t\t\tbuiltin_types[(int) ARG3],\t\\\n+\t\t\t\t\tNULL_TREE))));\n+\n #define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\\\n     = build_pointer_type (builtin_types[(int) TYPE]);\n@@ -3544,6 +3559,8 @@ c_common_nodes_and_builtins ()\n #undef DEF_FUNCTION_TYPE_4\n #undef DEF_FUNCTION_TYPE_VAR_0\n #undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_POINTER_TYPE\n \n   if (!c_attrs_initialized)"}, {"sha": "a74c7513bb57412bed2f325a602b14569c041daf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -4591,16 +4591,22 @@ v4si f (v4si a, v4si b, v4si c)\n @findex powl\n @findex printf\n @findex printf_unlocked\n+@findex putchar\n+@findex puts\n @findex rindex\n @findex round\n @findex roundf\n @findex roundl\n+@findex scanf\n @findex sin\n @findex sinf\n @findex sinl\n+@findex snprintf\n+@findex sprintf\n @findex sqrt\n @findex sqrtf\n @findex sqrtl\n+@findex sscanf\n @findex strcat\n @findex strchr\n @findex strcmp\n@@ -4617,6 +4623,11 @@ v4si f (v4si a, v4si b, v4si c)\n @findex trunc\n @findex truncf\n @findex truncl\n+@findex vprintf\n+@findex vscanf\n+@findex vsnprintf\n+@findex vsprintf\n+@findex vsscanf\n \n GCC provides a large number of built-in functions other than the ones\n mentioned above.  Some of these are for internal use in the processing\n@@ -4648,10 +4659,12 @@ mode.\n \n The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl}, @code{creal},\n @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf}, @code{cimagl},\n-@code{_Exit},\n-@code{llabs}, @code{imaxabs}, @code{round}, @code{roundf}, @code{roundl},\n-@code{trunc}, @code{truncf}, @code{truncl}, @code{nearbyint},\n-@code{nearbyintf} and @code{nearbyintl} are handled as built-in functions\n+@code{_Exit}, @code{imaxabs}, @code{llabs},\n+@code{nearbyint}, @code{nearbyintf}, @code{nearbyintl},\n+@code{round}, @code{roundf}, @code{roundl}, @code{snprintf},\n+@code{trunc}, @code{truncf}, @code{truncl},\n+@code{vscanf}, @code{vsnprintf} and @code{vsscanf}\n+are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n There are also built-in versions of the ISO C99 functions @code{atan2f},\n@@ -4669,10 +4682,13 @@ The ISO C90 functions @code{abort}, @code{abs}, @code{atan2}, @code{ceil},\n @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n @code{fprintf}, @code{fputs}, @code{labs}, @code{log},\n @code{memcmp}, @code{memcpy}, @code{memset}, @code{pow}, @code{printf},\n-@code{sin}, @code{sqrt}, @code{strcat}, @code{strchr}, @code{strcmp},\n+@code{putchar}, @code{puts}, @code{scanf}, @code{sin}, @code{snprintf},\n+@code{sprintf}, code{sqrt}, @code{sscanf},\n+@code{strcat}, @code{strchr}, @code{strcmp},\n @code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n-@code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn}, and\n-@code{strstr} are all recognized as built-in functions unless\n+@code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn}, @code{strstr},\n+@code{vprintf} and @code{vsprintf}\n+are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have\n corresponding versions prefixed with @code{__builtin_}."}, {"sha": "31bd3a4dc8053517d2bc6ccf7ba29eb9bc697492", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -1,3 +1,8 @@\n+2003-03-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* java/builtins.c (builtin_type): Handle DEF_FUNCTION_TYPE_VAR_3.\n+\t(initialize_builtins): Handle DEF_FUNCTION_TYPE_VAR_3.\n+\n 2003-03-01  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (jdep_resolve_class): Only check deprecation if we found"}, {"sha": "4c9a83a9dd500500d4eb96da8548c8a919878d4a", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -46,6 +46,7 @@ enum builtin_type\n #define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,\n #define DEF_FUNCTION_TYPE_VAR_1(NAME, RETURN, ARG1) NAME,\n #define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_3(NAME, RETURN, ARG1, ARG2, ARG3) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"builtin-types.def\"\n #undef DEF_PRIMITIVE_TYPE\n@@ -57,6 +58,7 @@ enum builtin_type\n #undef DEF_FUNCTION_TYPE_VAR_0\n #undef DEF_FUNCTION_TYPE_VAR_1\n #undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_3\n #undef DEF_POINTER_TYPE\n   BT_LAST\n };\n@@ -297,12 +299,14 @@ initialize_builtins (void)\n #define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n     = define_builtin_type (RETURN, ARG1, ARG2, ARG3, ARG4);\n-#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\t      \\\n+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\\\n   builtin_types[(int) ENUM] = NULL_TREE;\n-#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1)\t\t\t \\\n+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1)\t\t\\\n    builtin_types[(int) ENUM] = NULL_TREE;\n #define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2)\t\\\n    builtin_types[(int) ENUM] = NULL_TREE;\n+#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\\\n+   builtin_types[(int) ENUM] = NULL_TREE;\n #define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n   builtin_types[(int) ENUM] = NULL_TREE;\n "}, {"sha": "e7aa1e6eae99beddb3f874d0f82cb31d8a1d639a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -1,3 +1,8 @@\n+2003-03-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* g++.old-deja/g++.other/builtins10.C: New test for PR 9367.\n+\t* gcc.dg/format/attr-5.c: Handle new conflicting types warning.\n+\n 2003-03-01  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.dg/warn/implicit-typename1.C: Remove warning."}, {"sha": "0fa598001d9aafadc90a3f1c1d8a72567021d538", "filename": "gcc/testsuite/g++.old-deja/g++.other/builtins10.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link:\n+// Test that built-in functions don't warn when prototyped without arguments.\n+// Origin: PR c++/9367\n+// Copyright (C) 2003 Free Software Foundation.\n+\n+extern \"C\" int snprintf();\n+"}, {"sha": "36b1198968744b1f6bc0a00fa5daab78db3f5de9", "filename": "gcc/testsuite/gcc.dg/format/attr-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082916584969704a8b996bdbd0ea353a3b742bd3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c?ref=082916584969704a8b996bdbd0ea353a3b742bd3", "patch": "@@ -11,7 +11,7 @@ static int scanf(const char *restrict, ...);\n \n /* This sscanf declaration doesn't have variable arguments, so isn't\n    compatible with a format attribute.  */\n-extern int sscanf(const char *restrict, const char *restrict, int *);\n+extern int sscanf(const char *restrict, const char *restrict, int *); /* { dg-warning \"conflict\" \"conflict\" } */\n \n void\n foo (const char *s, int *p)"}]}