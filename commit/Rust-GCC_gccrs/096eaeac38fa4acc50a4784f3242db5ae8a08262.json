{"sha": "096eaeac38fa4acc50a4784f3242db5ae8a08262", "node_id": "C_kwDOANBUbNoAKDA5NmVhZWFjMzhmYTRhY2M1MGE0Nzg0ZjMyNDJkYjVhZThhMDgyNjI", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-04-22T16:14:56Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-20T07:35:08Z"}, "message": "testsuite: enable more BID DFP tests for AArch64\n\nSome tests for the BID format are currently restricted to i?86 and\nx86_64, but they also pass on AArch64, so this patch enables them.\n\nSince all these tests are related to the BID format, it seems useful\nto introduce a new effective-target (dfp_bid) instead of adding\naarch64 to the current target list.\n\n2022-04-28  Christophe Lyon  <christophe.lyon@arm.com>\n\n\tgcc/\n\t* doc/sourcebuild.texi (Decimal floating point attributes): Document\n\tdfp_bid effective-target.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_dfp_bid): New.\n\t* gcc.dg/dfp/bid-non-canonical-d128-1.c: Use dfp_bid\n\teffective-target.\n\t* gcc.dg/dfp/bid-non-canonical-d128-2.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d128-3.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d128-4.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d32-1.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d32-2.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d64-1.c: Likewise.\n\t* gcc.dg/dfp/bid-non-canonical-d64-2.c: Likewise.", "tree": {"sha": "ea26d4ba3db3edd281611d871df53db7155db14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea26d4ba3db3edd281611d871df53db7155db14a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096eaeac38fa4acc50a4784f3242db5ae8a08262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096eaeac38fa4acc50a4784f3242db5ae8a08262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096eaeac38fa4acc50a4784f3242db5ae8a08262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096eaeac38fa4acc50a4784f3242db5ae8a08262/comments", "author": null, "committer": null, "parents": [{"sha": "1b99d71bb27e308aed7a586de20d6dc6768de32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b99d71bb27e308aed7a586de20d6dc6768de32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b99d71bb27e308aed7a586de20d6dc6768de32d"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "d465b046d6de17158eb616bd2dd1b171d9142059", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1937,6 +1937,9 @@ test system can execute decimal floating point tests.\n \n @item hard_dfp\n Target generates decimal floating point instructions with current options.\n+\n+@item dfp_bid\n+Target uses the BID format for decimal floating point.\n @end table\n \n @subsubsection ARM-specific attributes"}, {"sha": "f8da7022213091fadb250548a729190bae10c550", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal128.  Bug 91226.  */\n-/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O2\" } */\n \n extern void abort (void);"}, {"sha": "dade48fcf66add36a8a77e8948448e366d1ad46e", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,6 +1,7 @@\n /* Test non-canonical BID significands: _Decimal128, case where\n    combination field starts 11.  Bug 91226.  */\n-/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O2\" } */\n \n extern void abort (void);"}, {"sha": "77c0941c0270f56fa89d032e201941651e3ddcaa", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal128.  Bug 91226.  */\n-/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O0\" } */\n \n #include \"bid-non-canonical-d128-1.c\""}, {"sha": "93ff0fc6d57d863bd70db7e9e9febc353b89b2aa", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,6 +1,7 @@\n /* Test non-canonical BID significands: _Decimal128, case where\n    combination field starts 11.  Bug 91226.  */\n-/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O0\" } */\n \n #include \"bid-non-canonical-d128-2.c\""}, {"sha": "69d014f68c07734201da6991247de7d9aa4bd8fa", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d32-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal32.  Bug 91226.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O2\" } */\n \n extern void abort (void);"}, {"sha": "874b2fb36334bdacac8a675461930a505fafa7ea", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d32-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal32.  Bug 91226.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O0\" } */\n \n #include \"bid-non-canonical-d32-1.c\""}, {"sha": "4602d34d7cb5f9cfe72a8c6e70b6714be49411db", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d64-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal64.  Bug 91226.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O2\" } */\n \n extern void abort (void);"}, {"sha": "c2993b6476fdffd6aa9690847863620fbf13f82c", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d64-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -1,5 +1,6 @@\n /* Test non-canonical BID significands: _Decimal64.  Bug 91226.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp_bid } */\n /* { dg-options \"-std=gnu2x -O0\" } */\n \n #include \"bid-non-canonical-d64-1.c\""}, {"sha": "d1f4eb7641fa7cde71135537b7ec752c02ad2691", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096eaeac38fa4acc50a4784f3242db5ae8a08262/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=096eaeac38fa4acc50a4784f3242db5ae8a08262", "patch": "@@ -3427,6 +3427,17 @@ proc check_effective_target_dfprt { } {\n     }]\n }\n \n+# Return 1 if the target uses the BID format for Decimal Floating\n+# Point, 0 otherwise.\n+\n+proc check_effective_target_dfp_bid { } {\n+    if { [istarget aarch64*-*-*]\n+\t || [istarget i?86-*-*] || [istarget x86_64-*-*]} {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n # Return 1 iff target has unsigned plain 'char' by default.\n \n proc check_effective_target_unsigned_char {} {"}]}