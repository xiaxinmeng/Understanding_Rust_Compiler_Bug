{"sha": "e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzNTIyNmJhYjViMzU3NWM4YTU1YzA0OGRjZmVkM2Q0Y2RlNWUwZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-11T10:29:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-11T10:34:25Z"}, "message": "Fix GIMPLE verification failure in LTO mode on Ada code\n\nThe issue is that tree_is_indexable doesn't return the same result for\na FIELD_DECL with QUAL_UNION_TYPE and the QUAL_UNION_TYPE, resulting\nin two instances of the QUAL_UNION_TYPE in the bytecode.  The result\nfor the type is the correct one (false, since it is variably modified)\nwhile the result for the field is falsely true because:\n\n  else if (TREE_CODE (t) == FIELD_DECL\n           && lto_variably_modified_type_p (DECL_CONTEXT (t)))\n    return false;\n\nis not satisfied.  The reason for this is that the DECL_QUALIFIER of\nfields of a QUAL_UNION_TYPE depends on a discriminant in Ada, which\nmeans that the size of the type does too (CONTAINS_PLACEHOLDER_P),\nwhich in turn means that it is reset to a mere PLACEHOLDER_EXPR by\nfree_lang_data, which finally means that the size of DECL_CONTEXT is\ntoo, so RETURN_TRUE_IF_VAR is false.\n\nIn other words, the CONTAINS_PLACEHOLDER_P property of the DECL_QUALIFIER\nof fields of a QUAL_UNION_TYPE hides the variably_modified_type_p property\nof  these fields, if you look from the outside.\n\n\tPR middle-end/93961\n\t* tree.c (variably_modified_type_p) <RECORD_TYPE>: Recurse into\n\tfields whose type is a qualified union.", "tree": {"sha": "efcc98ba6b3e9d24a8a1dd7176d1657a083e30bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efcc98ba6b3e9d24a8a1dd7176d1657a083e30bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/comments", "author": null, "committer": null, "parents": [{"sha": "a5aac267e64c578d55e6e269fa9e331f0d01da98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5aac267e64c578d55e6e269fa9e331f0d01da98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5aac267e64c578d55e6e269fa9e331f0d01da98"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "0a79692a53f822b09923da7dafc5f8351252d7b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "patch": "@@ -1,3 +1,9 @@\n+2020-03-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/93961\n+\t* tree.c (variably_modified_type_p) <RECORD_TYPE>: Recurse into fields\n+\twhose type is a qualified union.\n+\n 2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94121"}, {"sha": "5349fd96a8f1f9ffa45582c8f7c3bc3a1e78ad06", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "patch": "@@ -1,7 +1,7 @@\n 2020-03-11  Richard Wai  <richard@annexi-strayline.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Also test Is_Public on\n-\tthe Alias of the entitiy, if is present, in the main assertion.\n+\tthe Alias of the entitiy, if it is present, in the main assertion.\n \n 2020-02-06  Alexandre Oliva <oliva@adacore.com>\n "}, {"sha": "905563fa4be9008080ec3abb3e32c0d03e5fd5fc", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e835226bab5b3575c8a55c048dcfed3d4cde5e0e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e835226bab5b3575c8a55c048dcfed3d4cde5e0e", "patch": "@@ -9206,8 +9206,18 @@ variably_modified_type_p (tree type, tree fn)\n \t    RETURN_TRUE_IF_VAR (DECL_SIZE (t));\n \t    RETURN_TRUE_IF_VAR (DECL_SIZE_UNIT (t));\n \n+\t    /* If the type is a qualified union, then the DECL_QUALIFIER\n+\t       of fields can also be an expression containing a variable.  */\n \t    if (TREE_CODE (type) == QUAL_UNION_TYPE)\n \t      RETURN_TRUE_IF_VAR (DECL_QUALIFIER (t));\n+\n+\t    /* If the field is a qualified union, then it's only a container\n+\t       for what's inside so we look into it.  That's necessary in LTO\n+\t       mode because the sizes of the field tested above have been set\n+\t       to PLACEHOLDER_EXPRs by free_lang_data.  */\n+\t    if (TREE_CODE (TREE_TYPE (t)) == QUAL_UNION_TYPE\n+\t\t&& variably_modified_type_p (TREE_TYPE (t), fn))\n+\t      return true;\n \t  }\n       break;\n "}]}