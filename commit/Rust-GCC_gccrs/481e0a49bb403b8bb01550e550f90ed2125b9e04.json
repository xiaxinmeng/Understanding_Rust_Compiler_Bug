{"sha": "481e0a49bb403b8bb01550e550f90ed2125b9e04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxZTBhNDliYjQwM2I4YmIwMTU1MGU1NTBmOTBlZDIxMjViOWUwNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-03-14T01:45:39Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-03-14T01:45:39Z"}, "message": "re PR middle-end/31127 (ICE in cse_find_path, at cse.c:5930)\n\ngcc/ChangeLog:\nPR middle-end/31127\n* cse.c (cse_find_path): Do not bail out if a basic block that\nwe already visited now becomes part of a path that starts at a\ndifferent basic block.  Just disallow this, to make sure we\nvisit each basic block at most once.\ngcc/testsuite/ChangeLog:\nPR middle-end/31127\n* gcc.dg/pr31127.c: New.\n\nFrom-SVN: r122900", "tree": {"sha": "69d1846bc7e05624b70bc682d57e1942c56bf793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d1846bc7e05624b70bc682d57e1942c56bf793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481e0a49bb403b8bb01550e550f90ed2125b9e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481e0a49bb403b8bb01550e550f90ed2125b9e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481e0a49bb403b8bb01550e550f90ed2125b9e04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481e0a49bb403b8bb01550e550f90ed2125b9e04/comments", "author": null, "committer": null, "parents": [{"sha": "4cdb798f6c9b2bb7090f9fa8101da6e34bd2e569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdb798f6c9b2bb7090f9fa8101da6e34bd2e569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdb798f6c9b2bb7090f9fa8101da6e34bd2e569"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "9d2fc89953edfe5dbb1fbed99b2a9f84b2c742e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=481e0a49bb403b8bb01550e550f90ed2125b9e04", "patch": "@@ -1,3 +1,11 @@\n+2007-03-13  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR middle-end/31127\n+\t* cse.c (cse_find_path): Do not bail out if a basic block that\n+\twe already visited now becomes part of a path that starts at a\n+\tdifferent basic block.  Just disallow this, to make sure we\n+\tvisit each basic block at most once.\n+\n 2007-03-13  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (cgraph_maybe_hot_edge_p): Look for hot/cold attributes,"}, {"sha": "cdc5ebe4ce3ce63f4aa15b2c2b85a788b4bdaa20", "filename": "gcc/cse.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=481e0a49bb403b8bb01550e550f90ed2125b9e04", "patch": "@@ -5876,13 +5876,20 @@ cse_find_path (basic_block first_bb, struct cse_basic_block_data *data,\n \t    {\n \t      bb = FALLTHRU_EDGE (previous_bb_in_path)->dest;\n \t      if (bb != EXIT_BLOCK_PTR\n-\t\t  && single_pred_p (bb))\n+\t\t  && single_pred_p (bb)\n+\t\t  /* We used to assert here that we would only see blocks\n+\t\t     that we have not visited yet.  But we may end up\n+\t\t     visiting basic blocks twice if the CFG has changed\n+\t\t     in this run of cse_main, because when the CFG changes\n+\t\t     the topological sort of the CFG also changes.  A basic\n+\t\t     blocks that previously had more than two predecessors\n+\t\t     may now have a single predecessor, and become part of\n+\t\t     a path that starts at another basic block.\n+\n+\t\t     We still want to visit each basic block only once, so\n+\t\t     halt the path here if we have already visited BB.  */\n+\t\t  && !TEST_BIT (cse_visited_basic_blocks, bb->index))\n \t\t{\n-#if ENABLE_CHECKING\n-\t\t  /* We should only see blocks here that we have not\n-\t\t     visited yet.  */\n-\t\t  gcc_assert (!TEST_BIT (cse_visited_basic_blocks, bb->index));\n-#endif\n \t\t  SET_BIT (cse_visited_basic_blocks, bb->index);\n \t\t  data->path[path_size++].bb = bb;\n \t\t  break;\n@@ -5921,14 +5928,12 @@ cse_find_path (basic_block first_bb, struct cse_basic_block_data *data,\n \t    e = NULL;\n \n \t  if (e && e->dest != EXIT_BLOCK_PTR\n-\t      && single_pred_p (e->dest))\n+\t      && single_pred_p (e->dest)\n+\t      /* Avoid visiting basic blocks twice.  The large comment\n+\t\t above explains why this can happen.  */\n+\t      && !TEST_BIT (cse_visited_basic_blocks, e->dest->index))\n \t    {\n \t      basic_block bb2 = e->dest;\n-\n-\t      /* We should only see blocks here that we have not\n-\t\t visited yet.  */\n-\t      gcc_assert (!TEST_BIT (cse_visited_basic_blocks, bb2->index));\n-\n \t      SET_BIT (cse_visited_basic_blocks, bb2->index);\n \t      data->path[path_size++].bb = bb2;\n \t      bb = bb2;"}, {"sha": "3007d98f41e008699fcf45a9dd5af7d925c7bc43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=481e0a49bb403b8bb01550e550f90ed2125b9e04", "patch": "@@ -1,3 +1,8 @@\n+2007-03-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/31127\n+\t* gcc.dg/pr31127.c: New.\n+\n 2007-03-13  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/loop-26.c: New test."}, {"sha": "f45b10ed5bb64531f39c61020a91411a667c04f2", "filename": "gcc/testsuite/gcc.dg/pr31127.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31127.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481e0a49bb403b8bb01550e550f90ed2125b9e04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31127.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31127.c?ref=481e0a49bb403b8bb01550e550f90ed2125b9e04", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void ParseStringSidToSid(char *s, int* p) {\n+    int i = 0;\n+\n+    while (*s) {\n+        while (*s && *s != '-')\n+            s++;\n+        if (*s== '-')\n+            s++;\n+\n+        p[i++] = *s;\n+    }\n+}"}]}