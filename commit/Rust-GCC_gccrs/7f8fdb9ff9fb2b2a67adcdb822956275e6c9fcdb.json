{"sha": "7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4ZmRiOWZmOWZiMmIyYTY3YWRjZGI4MjI5NTYyNzVlNmM5ZmNkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-05T16:09:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-05T16:09:46Z"}, "message": "re PR middle-end/40022 (Alpine miscompilation)\n\n2009-05-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40022\n\t* tree-ssa-phiprop.c (struct phiprop_d): Exchange vop_stmt for\n\tthe only vuse.\n\t(phivn_valid_p): Fix tuplification error, simplify.\n\t(phiprop_insert_phi): Add dumps.\n\t(propagate_with_phi): Simplify.\n\n\t* gcc.c-torture/execute/pr40022.c: New testcase.\n\nFrom-SVN: r147128", "tree": {"sha": "a46972c7dde7c1141d1a9cb3070c1abc311b308e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a46972c7dde7c1141d1a9cb3070c1abc311b308e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d972839dfb7749bd218b9b6804a33e353c83d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d972839dfb7749bd218b9b6804a33e353c83d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d972839dfb7749bd218b9b6804a33e353c83d4f"}], "stats": {"total": 163, "additions": 123, "deletions": 40}, "files": [{"sha": "228ddb4a21e3854fb3e542984e84d45aa812f756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "patch": "@@ -1,3 +1,12 @@\n+2009-05-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40022\n+\t* tree-ssa-phiprop.c (struct phiprop_d): Exchange vop_stmt for\n+\tthe only vuse.\n+\t(phivn_valid_p): Fix tuplification error, simplify.\n+\t(phiprop_insert_phi): Add dumps.\n+\t(propagate_with_phi): Simplify.\n+\n 2009-05-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40023"}, {"sha": "0d8407b2ffd3b398d3ebf82ebff40fe77ba9333f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "patch": "@@ -1,3 +1,8 @@\n+2009-05-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40022\n+\t* gcc.c-torture/execute/pr40022.c: New testcase.\n+\n 2009-05-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40023"}, {"sha": "1e8f728ab4438415067610fae652ea79bc6d5a60", "filename": "gcc/testsuite/gcc.c-torture/execute/pr40022.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40022.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40022.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40022.c?ref=7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "patch": "@@ -0,0 +1,51 @@\n+extern void abort (void);\n+\n+struct A\n+{\n+  struct A *a;\n+};\n+\n+struct B\n+{\n+  struct A *b;\n+};\n+\n+__attribute__((noinline))\n+struct A *\n+foo (struct A *x)\n+{\n+  asm volatile (\"\" : : \"g\" (x) : \"memory\");\n+  return x;\n+}\n+\n+__attribute__((noinline))\n+void\n+bar (struct B *w, struct A *x, struct A *y, struct A *z)\n+{\n+  struct A **c;\n+  c = &w->b;\n+  *c = foo (x);\n+  while (*c)\n+    c = &(*c)->a;\n+  *c = foo (y);\n+  while (*c)\n+    c = &(*c)->a;\n+  *c = foo (z);\n+}\n+\n+struct B d;\n+struct A e, f, g;\n+\n+int\n+main (void)\n+{\n+  f.a = &g;\n+  bar (&d, &e, &f, 0);\n+  if (d.b == 0\n+      || d.b->a == 0\n+      || d.b->a->a == 0\n+      || d.b->a->a->a != 0)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "6ccc30ec808b41c3f74fa854956e34a9439742d6", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=7f8fdb9ff9fb2b2a67adcdb822956275e6c9fcdb", "patch": "@@ -90,12 +90,12 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Structure to keep track of the value of a dereferenced PHI result\n-   and the set of virtual operands used for that dereference.  */\n+   and the virtual operand used for that dereference.  */\n \n struct phiprop_d\n {\n   tree value;\n-  gimple vop_stmt;\n+  tree vuse;\n };\n \n /* Verify if the value recorded for NAME in PHIVN is still valid at\n@@ -104,34 +104,27 @@ struct phiprop_d\n static bool\n phivn_valid_p (struct phiprop_d *phivn, tree name, basic_block bb)\n {\n-  gimple vop_stmt = phivn[SSA_NAME_VERSION (name)].vop_stmt;\n-  tree vuse;\n+  tree vuse = phivn[SSA_NAME_VERSION (name)].vuse;\n+  gimple use_stmt;\n+  imm_use_iterator ui2;\n+  bool ok = true;\n \n-  /* The def stmts of all virtual uses need to be post-dominated\n-     by bb.  */\n-  if ((vuse = gimple_vuse (vop_stmt)))\n-    {\n-      gimple use_stmt;\n-      imm_use_iterator ui2;\n-      bool ok = true;\n+  /* The def stmts of the virtual uses need to be dominated by bb.  */\n+  gcc_assert (vuse != NULL_TREE);\n \n-      FOR_EACH_IMM_USE_STMT (use_stmt, ui2, vuse)\n+  FOR_EACH_IMM_USE_STMT (use_stmt, ui2, vuse)\n+    {\n+      /* If BB does not dominate a VDEF, the value is invalid.  */\n+      if ((gimple_vdef (use_stmt) != NULL_TREE\n+\t   || gimple_code (use_stmt) == GIMPLE_PHI)\n+\t  && !dominated_by_p (CDI_DOMINATORS, gimple_bb (use_stmt), bb))\n \t{\n-\t  /* If BB does not dominate a VDEF, the value is invalid.  */\n-\t  if (((is_gimple_assign (use_stmt)\n-\t        && gimple_vdef (use_stmt))\n-\t       || gimple_code (use_stmt) == GIMPLE_PHI)\n-\t      && !dominated_by_p (CDI_DOMINATORS, gimple_bb (use_stmt), bb))\n-\t    {\n-\t      ok = false;\n-\t      BREAK_FROM_IMM_USE_STMT (ui2);\n-\t    }\n+\t  ok = false;\n+\t  BREAK_FROM_IMM_USE_STMT (ui2);\n \t}\n-      if (!ok)\n-\treturn false;\n     }\n \n-  return true;\n+  return ok;\n }\n \n /* Insert a new phi node for the dereference of PHI at basic_block\n@@ -154,6 +147,12 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n   res = gimple_assign_lhs (use_stmt);\n   SSA_NAME_DEF_STMT (res) = new_phi = create_phi_node (res, bb);\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Inserting PHI for result of load \");\n+      print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+    }\n+\n   /* Add PHI arguments for each edge inserting loads of the\n      addressable operands.  */\n   FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -171,8 +170,19 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t}\n \n       if (TREE_CODE (old_arg) == SSA_NAME)\n-\t/* Reuse a formerly created dereference.  */\n-\tnew_var = phivn[SSA_NAME_VERSION (old_arg)].value;\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"  for edge defining \");\n+\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e), 0);\n+\t      fprintf (dump_file, \" reusing PHI result \");\n+\t      print_generic_expr (dump_file,\n+\t\t\t\t  phivn[SSA_NAME_VERSION (old_arg)].value, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t  /* Reuse a formerly created dereference.  */\n+\t  new_var = phivn[SSA_NAME_VERSION (old_arg)].value;\n+\t}\n       else\n \t{\n \t  gcc_assert (TREE_CODE (old_arg) == ADDR_EXPR);\n@@ -188,16 +198,25 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t  gimple_assign_set_lhs (tmp, new_var);\n \n \t  gsi_insert_on_edge (e, tmp);\n-\n \t  update_stmt (tmp);\n-\t  mark_symbols_for_renaming (tmp);\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"  for edge defining \");\n+\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e), 0);\n+\t      fprintf (dump_file, \" inserting load \");\n+\t      print_gimple_stmt (dump_file, tmp, 0, 0);\n+\t    }\n \t}\n \n       add_phi_arg (new_phi, new_var, e);\n     }\n \n   update_stmt (new_phi);\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    print_gimple_stmt (dump_file, new_phi, 0, 0);\n+\n   return res;\n }\n \n@@ -270,6 +289,7 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n   phi_inserted = false;\n   FOR_EACH_IMM_USE_STMT (use_stmt, ui, ptr)\n     {\n+      gimple def_stmt;\n       tree vuse;\n \n       /* Check whether this is a load of *ptr.  */\n@@ -281,17 +301,15 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n \t    && !stmt_can_throw_internal (use_stmt)))\n \tcontinue;\n \n-      /* Check if we can move the loads.  The def stmts of all virtual uses\n-\t need to be post-dominated by bb.  */\n-      if ((vuse = gimple_vuse (use_stmt)) != NULL_TREE)\n-\t{\n-\t  gimple def_stmt = SSA_NAME_DEF_STMT (vuse);\n-\t  if (!SSA_NAME_IS_DEFAULT_DEF (vuse)\n-\t      && (gimple_bb (def_stmt) == bb\n-\t\t  || !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t      bb, gimple_bb (def_stmt))))\n-\t    goto next;\n-\t}\n+      /* Check if we can move the loads.  The def stmt of the virtual use\n+\t needs to be in a different basic block dominating bb.  */\n+      vuse = gimple_vuse (use_stmt);\n+      def_stmt = SSA_NAME_DEF_STMT (vuse);\n+      if (!SSA_NAME_IS_DEFAULT_DEF (vuse)\n+\t  && (gimple_bb (def_stmt) == bb\n+\t      || !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t  bb, gimple_bb (def_stmt))))\n+\tgoto next;\n \n       /* Found a proper dereference.  Insert a phi node if this\n \t is the first load transformation.  */\n@@ -301,7 +319,7 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n \n \t  /* Remember the value we created for *ptr.  */\n \t  phivn[SSA_NAME_VERSION (ptr)].value = res;\n-\t  phivn[SSA_NAME_VERSION (ptr)].vop_stmt = use_stmt;\n+\t  phivn[SSA_NAME_VERSION (ptr)].vuse = vuse;\n \n \t  /* Remove old stmt.  The phi is taken care of by DCE, if we\n \t     want to delete it here we also have to delete all intermediate"}]}