{"sha": "9e9b53411e671de84ff27b5ff6062bf80d0bea56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5YjUzNDExZTY3MWRlODRmZjI3YjVmZjYwNjJiZjgwZDBiZWE1Ng==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2008-04-01T20:25:23Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2008-04-01T20:25:23Z"}, "message": "v850.md (casesi): Remove if (0) code.\n\n\t* config/v850/v850.md (casesi): Remove if (0) code.\n\t* config/i386/uwin.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/alpha/alpha.c (alpha_initialize_trampoline): Likewise.\n\nFrom-SVN: r133799", "tree": {"sha": "9c1e631a12ee58c2721c52c31ecdb4e1a9352bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c1e631a12ee58c2721c52c31ecdb4e1a9352bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e9b53411e671de84ff27b5ff6062bf80d0bea56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9b53411e671de84ff27b5ff6062bf80d0bea56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9b53411e671de84ff27b5ff6062bf80d0bea56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9b53411e671de84ff27b5ff6062bf80d0bea56/comments", "author": null, "committer": null, "parents": [{"sha": "380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380edc9fafa5b2e2e7f688b8a2f846a9413c8160"}], "stats": {"total": 40, "additions": 6, "deletions": 34}, "files": [{"sha": "f5c69d5c07a6015a4d7661f290f3be7948d8f42a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e9b53411e671de84ff27b5ff6062bf80d0bea56", "patch": "@@ -1,3 +1,9 @@\n+2008-04-02  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config/v850/v850.md (casesi): Remove if (0) code.\n+\t* config/i386/uwin.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/alpha/alpha.c (alpha_initialize_trampoline): Likewise.\n+\n 2008-04-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (rex64suffix): New mode attribute."}, {"sha": "c5923a392fbf28c05b5d9efbbe350507160d1ffe", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9e9b53411e671de84ff27b5ff6062bf80d0bea56", "patch": "@@ -5464,28 +5464,6 @@ alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n   addr = memory_address (mode, plus_constant (tramp, cxtofs));\n   emit_move_insn (gen_rtx_MEM (mode, addr), cxt);\n \n-  /* This has been disabled since the hint only has a 32k range, and in\n-     no existing OS is the stack within 32k of the text segment.  */\n-  if (0 && jmpofs >= 0)\n-    {\n-      /* Compute hint value.  */\n-      temp = force_operand (plus_constant (tramp, jmpofs+4), NULL_RTX);\n-      temp = expand_binop (DImode, sub_optab, fnaddr, temp, temp, 1,\n-\t\t\t   OPTAB_WIDEN);\n-      temp = expand_shift (RSHIFT_EXPR, Pmode, temp,\n-\t\t           build_int_cst (NULL_TREE, 2), NULL_RTX, 1);\n-      temp = expand_and (SImode, gen_lowpart (SImode, temp),\n-\t\t\t GEN_INT (0x3fff), 0);\n-\n-      /* Merge in the hint.  */\n-      addr = memory_address (SImode, plus_constant (tramp, jmpofs));\n-      temp1 = force_reg (SImode, gen_rtx_MEM (SImode, addr));\n-      temp1 = expand_and (SImode, temp1, GEN_INT (0xffffc000), NULL_RTX);\n-      temp1 = expand_binop (SImode, ior_optab, temp1, temp, temp1, 1,\n-\t\t\t    OPTAB_WIDEN);\n-      emit_move_insn (gen_rtx_MEM (SImode, addr), temp1);\n-    }\n-\n #ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (init_one_libfunc (\"__enable_execute_stack\"),\n \t\t     0, VOIDmode, 1, tramp, Pmode);"}, {"sha": "8884b08b7d029adc5dffad3ea1d9e7978d8c3109", "filename": "gcc/config/i386/uwin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Fi386%2Fuwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Fi386%2Fuwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.h?ref=9e9b53411e671de84ff27b5ff6062bf80d0bea56", "patch": "@@ -77,10 +77,6 @@ along with GCC; see the file COPYING3.  If not see\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       i386_pe_maybe_record_exported_symbol (DECL, NAME, 0);\t\t\\\n-      /* UWIN binutils bug workaround.  */\t\t\t\t\\\n-      if (0 && write_symbols != SDB_DEBUG)\t\t\t\t\\\n-\ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "504a748f4968658f0d3b233d4f3eeaadf6bb81af", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9b53411e671de84ff27b5ff6062bf80d0bea56/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=9e9b53411e671de84ff27b5ff6062bf80d0bea56", "patch": "@@ -1250,14 +1250,6 @@\n   /* Branch to the default label if out of range of the table.  */\n   emit_jump_insn (gen_bgtu (operands[4]));\n \n-  /* Disabled because the switch pattern is not being recognized\n-     properly at the moment.  eg. compiling vfscanf.c in newlib.  */\n-  if (0 && ! TARGET_BIG_SWITCH && TARGET_V850E)\n-    {\n-      emit_jump_insn (gen_switch (reg, operands[3]));\n-      DONE;\n-    }\n-\n   /* Shift index for the table array access.  */\n   emit_insn (gen_ashlsi3 (reg, reg, GEN_INT (TARGET_BIG_SWITCH ? 2 : 1)));\n   /* Load the table address into a pseudo.  */"}]}