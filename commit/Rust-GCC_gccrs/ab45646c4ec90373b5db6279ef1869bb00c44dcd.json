{"sha": "ab45646c4ec90373b5db6279ef1869bb00c44dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0NTY0NmM0ZWM5MDM3M2I1ZGI2Mjc5ZWYxODY5YmIwMGM0NGRjZA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@cygnus.com", "date": "1999-04-06T14:28:39Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-06T14:28:39Z"}, "message": "expr.c (pop_type_0): New function.\n\n\ufffd\n\t* expr.c (pop_type_0):  New function.\n\t(pop_type):  Use pop_type_0.\n\t* java-tree.h (pop_type_0):  New declaration.\n\t* verify.c (verify_jvm_instructions):  Check return instructions.\n\nFrom-SVN: r26218", "tree": {"sha": "2fc92b2fe38c1015a881fc6144ab600f9aa2737d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc92b2fe38c1015a881fc6144ab600f9aa2737d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab45646c4ec90373b5db6279ef1869bb00c44dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab45646c4ec90373b5db6279ef1869bb00c44dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab45646c4ec90373b5db6279ef1869bb00c44dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab45646c4ec90373b5db6279ef1869bb00c44dcd/comments", "author": null, "committer": null, "parents": [{"sha": "ddcd8199a816e1d7d6dba84ab77105ff423b4188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddcd8199a816e1d7d6dba84ab77105ff423b4188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddcd8199a816e1d7d6dba84ab77105ff423b4188"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "1f3708afedc0eb82b450026b84a449523c612e20", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab45646c4ec90373b5db6279ef1869bb00c44dcd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab45646c4ec90373b5db6279ef1869bb00c44dcd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ab45646c4ec90373b5db6279ef1869bb00c44dcd", "patch": "@@ -1,5 +1,10 @@\n 1999-04-06  Per Bothner  <bothner@cygnus.com>\n \n+\t* expr.c (pop_type_0):  New function.\n+\t(pop_type):  Use pop_type_0.\n+\t* java-tree.h (pop_type_0):  New declaration.\n+\t* verify.c (verify_jvm_instructions):  Check return instructions.\n+\n \t* parse.y (patch_binop):  Don't fold if non-constant and emiting\n \tclass files.\n "}, {"sha": "4b34c4717d30951b030d5e1c42014333f391cfaa", "filename": "gcc/java/verify.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab45646c4ec90373b5db6279ef1869bb00c44dcd/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab45646c4ec90373b5db6279ef1869bb00c44dcd/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=ab45646c4ec90373b5db6279ef1869bb00c44dcd", "patch": "@@ -340,6 +340,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n   register unsigned char *p;\n   struct eh_range *prev_eh_ranges = NULL_EH_RANGE;\n   struct eh_range *eh_ranges;\n+  tree return_type = TREE_TYPE (TREE_TYPE (current_function_decl));\n \n   jint int_value = -1;\n \n@@ -707,15 +708,33 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t      VERIFICATION_ERROR (\"invalid use of wide instruction\");\n \t    }\n \t  break;\n-\tcase OPCODE_ireturn:  type = int_type_node;    goto ret;\n+\tcase OPCODE_return:   type = void_type_node;   goto ret;\n+\tcase OPCODE_ireturn:\n+\t  if ((TREE_CODE (return_type) == BOOLEAN_TYPE\n+\t       || TREE_CODE (return_type) == CHAR_TYPE\n+\t       || TREE_CODE (return_type) == INTEGER_TYPE)\n+\t      && TYPE_PRECISION (return_type) <= 32)\n+\t    type = return_type;\n+\t  else\n+\t    type = NULL_TREE;\n+\t  goto ret;\n \tcase OPCODE_lreturn:  type = long_type_node;   goto ret;\n \tcase OPCODE_freturn:  type = float_type_node;  goto ret;\n \tcase OPCODE_dreturn:  type = double_type_node; goto ret;\n-\tcase OPCODE_areturn:  type = ptr_type_node;    goto ret;\n+\tcase OPCODE_areturn:\n+\t  if (TREE_CODE (return_type) == POINTER_TYPE)\n+\t    type = return_type;\n+\t  else\n+\t    type = NULL_TREE;\n+\t  goto ret;\n \tret:\n-\t  pop_type (type);\n-\t  /* ... fall through ... */\n-\tcase OPCODE_return:\n+\t  if (type != return_type)\n+\t    VERIFICATION_ERROR (\"incorrect ?return opcode\");\n+\t  if (type != void_type_node)\n+\t    {\n+\t      if (pop_type_0 (type) == NULL_TREE)\n+\t\tVERIFICATION_ERROR (\"return value has wrong type\");\n+\t    }\n \t  INVALIDATE_PC;\n \t  break;\n \tcase OPCODE_getstatic: is_putting = 0;  is_static = 1;  goto field;"}]}