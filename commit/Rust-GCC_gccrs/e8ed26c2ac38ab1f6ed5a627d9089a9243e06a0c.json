{"sha": "e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "node_id": "C_kwDOANBUbNoAKGU4ZWQyNmMyYWMzOGFiMWY2ZWQ1YTYyN2Q5MDg5YTkyNDNlMDZhMGM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-07T19:52:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-08T20:38:25Z"}, "message": "c++: non-templated friends [PR105852]\n\nThe previous patch for 105852 avoids copying DECL_TEMPLATE_INFO from a\nnon-templated friend, but it really shouldn't have it in the first place.\n\n\tPR c++/105852\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (duplicate_decls): Change non-templated friend\n\tcheck to an assert.\n\t* pt.cc\t(tsubst_function_decl): Don't set DECL_TEMPLATE_INFO\n\ton non-templated friends.\n\t(tsubst_friend_function): Adjust.", "tree": {"sha": "9dca7d858cc4aac7528d18a71525faf40a9b53b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dca7d858cc4aac7528d18a71525faf40a9b53b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d87790a871482e9c5142a8e885b4a5f76d197c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d87790a871482e9c5142a8e885b4a5f76d197c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d87790a871482e9c5142a8e885b4a5f76d197c8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "7f3b3c3c5882a360a18a3a2eca2ef60cf466ab53", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "patch": "@@ -2664,10 +2664,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t\t  = TINFO_USED_TEMPLATE_ID (new_template_info);\n \t    }\n \n-\t  if (non_templated_friend_p (olddecl))\n-\t    /* Don't copy tinfo from a non-templated friend (PR105761).  */;\n-\t  else\n-\t    DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n+\t  /* We don't want to copy template info from a non-templated friend\n+\t     (PR105761), but these shouldn't have DECL_TEMPLATE_INFO now.  */\n+\t  gcc_checking_assert (!DECL_TEMPLATE_INFO (olddecl)\n+\t\t\t       || !non_templated_friend_p (olddecl));\n+\t  DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n \t}\n \n       if (DECL_DECLARES_FUNCTION_P (newdecl))"}, {"sha": "3154186ac20680fa2378951567bc01d2a24aee8a", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=e8ed26c2ac38ab1f6ed5a627d9089a9243e06a0c", "patch": "@@ -11298,9 +11298,10 @@ tsubst_friend_function (tree decl, tree args)\n       tree new_friend_template_info = DECL_TEMPLATE_INFO (new_friend);\n       tree new_friend_result_template_info = NULL_TREE;\n       bool new_friend_is_defn =\n-\t(DECL_INITIAL (DECL_TEMPLATE_RESULT\n-\t\t       (template_for_substitution (new_friend)))\n-\t != NULL_TREE);\n+\t(new_friend_template_info\n+\t && (DECL_INITIAL (DECL_TEMPLATE_RESULT\n+\t\t\t   (template_for_substitution (new_friend)))\n+\t     != NULL_TREE));\n       tree not_tmpl = new_friend;\n \n       if (TREE_CODE (new_friend) == TEMPLATE_DECL)\n@@ -14084,6 +14085,10 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t  && !LAMBDA_FUNCTION_P (t))\n \treturn t;\n \n+      /* A non-templated friend doesn't get DECL_TEMPLATE_INFO.  */\n+      if (non_templated_friend_p (t))\n+\tgoto friend_case;\n+\n       /* Calculate the most general template of which R is a\n \t specialization.  */\n       gen_tmpl = most_general_template (DECL_TI_TEMPLATE (t));\n@@ -14129,6 +14134,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t tsubst_friend_function, and we want only to create a\n \t new decl (R) with appropriate types so that we can call\n \t determine_specialization.  */\n+    friend_case:\n       gen_tmpl = NULL_TREE;\n       argvec = NULL_TREE;\n     }\n@@ -14324,7 +14330,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n       /* If this is an instantiation of a member template, clone it.\n \t If it isn't, that'll be handled by\n \t clone_constructors_and_destructors.  */\n-      if (PRIMARY_TEMPLATE_P (gen_tmpl))\n+      if (gen_tmpl && PRIMARY_TEMPLATE_P (gen_tmpl))\n \tclone_cdtor (r, /*update_methods=*/false);\n     }\n   else if ((complain & tf_error) != 0"}]}