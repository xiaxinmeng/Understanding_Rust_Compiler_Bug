{"sha": "b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyMGZkOTIxMDZmYTI1MTdmMmM4YWU1ZTAzZWM5YzBlYWUxMGVhYw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-11-02T17:06:24Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-11-02T17:06:24Z"}, "message": "Fix compile time warnings\n\nFrom-SVN: r30353", "tree": {"sha": "e90210290d40d65cd9ed9dab8d4888ec1410a22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e90210290d40d65cd9ed9dab8d4888ec1410a22a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/comments", "author": null, "committer": null, "parents": [{"sha": "f5da5c8714390bc8571d7f3fb6acf956920d0f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da5c8714390bc8571d7f3fb6acf956920d0f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5da5c8714390bc8571d7f3fb6acf956920d0f19"}], "stats": {"total": 372, "additions": 277, "deletions": 95}, "files": [{"sha": "0cc75f41214a9bdb7e3d9e0e528f927abee66eba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -1,3 +1,15 @@\n+Tue Nov  2 17:04:36 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/tpe.h: Add prototypes for exported functions.\n+\t* config/arm/pe.c: Fix compile time warnings.\n+\t* config/arm/semi.h: Fix compile time warnings.\n+\t* config/arm/arm.c: Fix compile time warnings.\n+\t* config/arm/arm.h: Fix compile time warnings.\n+\t* config/arm/arm.md: Fix compile time warnings.\n+\t* config/arm/thumb.c: Fix compile time warnings.\n+\t* config/arm/thumb.h: Fix compile time warnings.\n+\t* config/arm/thumb.md: Fix compile time warnings.\n+\n Tue Nov  2 04:10:24 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* jump.c (jump_optimize_1): Swap the incscc and the conditional mode"}, {"sha": "547cbfd24162bbda2e6b1e36ff7d0a0136873047", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -6759,7 +6759,7 @@ arm_final_prescan_insn (insn)\n       /* Restore recog_data (getting the attributes of other insns can\n \t destroy this array, but final.c assumes that it remains intact\n \t across this call; since the insn has been recognized already we\n-\t call recog direct). */\n+\t call recog direct).  */\n       recog (PATTERN (insn), insn, NULL_PTR);\n     }\n }"}, {"sha": "db7bf5c122f05407df2f7f8e2e4cda6c8fe8d4e5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -215,7 +215,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \"\n \n /* Default is little endian, which doesn't define anything. */\n-#define CPP_ENDIAN_DEFAULT_SPEC \"\"\n+#define CPP_ENDIAN_DEFAULT_SPEC \"-D__ARMEL__\"\n \n #define CC1_SPEC \"\"\n \n@@ -313,6 +313,9 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Nonzero if function prologues should not load the PIC register. */\n #define ARM_FLAG_SINGLE_PIC_BASE (1 << 14)\n \n+/* Nonzero if all call instructions should be indirect.  */\n+#define ARM_FLAG_LONG_CALLS\t(1 << 15)\n+\n #define TARGET_APCS\t\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n@@ -336,6 +339,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define TARGET_NO_SCHED_PRO\t\t(target_flags & ARM_FLAG_NO_SCHED_PRO)\n #define TARGET_ABORT_NORETURN\t\t(target_flags & ARM_FLAG_ABORT_NORETURN)\n #define TARGET_SINGLE_PIC_BASE\t\t(target_flags & ARM_FLAG_SINGLE_PIC_BASE)\n+#define TARGET_LONG_CALLS\t\t(target_flags & ARM_FLAG_LONG_CALLS)\n \n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis.\n    Bit 31 is reserved.  See riscix.h.  */\n@@ -393,6 +397,9 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   {\"single-pic-base\",\t\tARM_FLAG_SINGLE_PIC_BASE,\t\\\n      \"Do not load the PIC register in function prologues\" },\t\\\n   {\"no-single-pic-base\",       -ARM_FLAG_SINGLE_PIC_BASE, \"\" },\t\\\n+  {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\\\n+   \"Generate all call instructions as indirect calls\"},\t\t\\\n+  {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\"},\t\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\\\n }\n@@ -2335,6 +2342,14 @@ void   aof_add_import PROTO ((char *));\n void   aof_delete_import PROTO ((char *));\n void   aof_dump_imports STDIO_PROTO ((FILE *));\n #endif\n+\n+/* Define in pe.c */\n+int   arm_pe_return_in_memory PROTO ((Tree));\n+int   arm_dllexport_p PROTO ((Tree));\n+int   arm_dllimport_p PROTO ((Tree));\n+int   arm_dllexport_name_p PROTO ((char *));\n+int   arm_dllimport_name_p PROTO ((char *));\n+\n #endif /* HAVE_CONFIG_H */\n \n #endif /* __ARM_H__ */"}, {"sha": "caab9c2b8d15a4164de4853e5d235131b7ad4cdf", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -1667,7 +1667,8 @@\n \t\t\t  (match_operand:SI 3 \"arm_rhs_operand\" \"rM\")]))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"bic%?\\\\t%0, %1, %2%S4\")\n+  \"bic%?\\\\t%0, %1, %2%S4\"\n+)\n \n (define_insn \"*andsi_notsi_si_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -2040,7 +2041,8 @@\n \t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n   \"\"\n-  \"mov%?\\\\t%0, %1%S3\")\n+  \"mov%?\\\\t%0, %1%S3\"\n+)\n \n (define_insn \"*shiftsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -2052,7 +2054,8 @@\n \t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2063,15 +2066,17 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*notsi_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"\"\n-  \"mvn%?\\\\t%0, %1%S3\")\n+  \"mvn%?\\\\t%0, %1%S3\"\n+)\n \n (define_insn \"*notsi_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -2083,7 +2088,8 @@\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n   \"\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2094,7 +2100,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n \f\n ;; Unary arithmetic insns\n@@ -2990,7 +2997,7 @@\n  (set_attr \"pool_range\" \"4096\")])\n \n (define_insn \"pic_add_dot_plus_eight\"\n-  [(set (match_operand 0 \"register_operand\" \"+r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n \t(plus:SI (match_dup 0) (const (plus:SI (pc) (const_int 8)))))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"flag_pic\"\n@@ -3879,7 +3886,8 @@\n \t\t      (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP 24)\n@@ -3889,7 +3897,8 @@\n \t\t\t(match_operand:SI 0 \"s_register_operand\" \"r\")))]\n   \"\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*cmpsi_neg_shiftsi\"\n   [(set (reg:CC 24)\n@@ -3899,7 +3908,8 @@\n \t\t\t      (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))))]\n   \"\"\n   \"cmn%?\\\\t%0, %1%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*cmpsf_insn\"\n   [(set (reg:CCFP 24)\n@@ -4469,7 +4479,12 @@\n \t            (match_operand 1 \"general_operand\" \"\"))\n \t      (clobber (reg:SI 14))])]\n   \"\"\n-  \"\")\n+  \"\n+  {\n+    if (TARGET_LONG_CALLS && GET_CODE (XEXP (operands[0], 0)) != REG)\n+      XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n+  }\"\n+)\n \n (define_insn \"*call_reg\"\n   [(call (mem:SI (match_operand:SI 0 \"s_register_operand\" \"r\"))\n@@ -4484,7 +4499,7 @@\n  (set_attr \"type\" \"call\")])\n \n (define_insn \"*call_mem\"\n-  [(call (mem:SI (match_operand 0 \"memory_operand\" \"m\"))\n+  [(call (mem:SI (match_operand:SI 0 \"memory_operand\" \"m\"))\n \t (match_operand 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"\"\n@@ -4500,7 +4515,12 @@\n \t\t         (match_operand 2 \"general_operand\" \"g\")))\n \t      (clobber (reg:SI 14))])]\n   \"\"\n-  \"\")\n+  \"\n+  {\n+    if (TARGET_LONG_CALLS && GET_CODE (XEXP (operands[1], 0)) != REG)\n+      XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n+  }\"\n+)\n \n (define_insn \"*call_value_reg\"\n   [(set (match_operand 0 \"\" \"=rf\")\n@@ -4533,7 +4553,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n \t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n-  \"GET_CODE (operands[0]) == SYMBOL_REF\"\n+  \"! TARGET_LONG_CALLS && GET_CODE (operands[0]) == SYMBOL_REF\"\n   \"*\n   {\n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a0(PLT)\\\" : \\\"bl%?\\\\t%a0\\\";\n@@ -4545,7 +4565,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t(match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n-  \"GET_CODE(operands[1]) == SYMBOL_REF\"\n+  \"! TARGET_LONG_CALLS && GET_CODE(operands[1]) == SYMBOL_REF\"\n   \"*\n   {\n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a1(PLT)\\\" : \\\"bl%?\\\\t%a1\\\";\n@@ -4727,7 +4747,8 @@\n               (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n            (match_operand:SI 2 \"s_register_operand\" \"r\")]))]\n   \"\"\n-  \"%i1%?\\\\t%0, %2, %4%S3\")\n+  \"%i1%?\\\\t%0, %2, %4%S3\"\n+)\n \n (define_insn \"*arith_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -4742,7 +4763,8 @@\n \t\t\t (match_dup 2)]))]\n   \"\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -4755,7 +4777,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*sub_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -4764,7 +4787,8 @@\n \t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n   \"\"\n-  \"sub%?\\\\t%0, %1, %3%S2\")\n+  \"sub%?\\\\t%0, %1, %3%S2\"\n+)\n \n (define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -4779,7 +4803,8 @@\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -4792,7 +4817,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")\n+])\n \n ;; These variants of the above insns can occur if the first operand is the\n ;; frame pointer and we eliminate that.  This is a kludge, but there doesn't\n@@ -5041,7 +5067,7 @@\n  (set_attr \"length\" \"8,12\")])\n \n (define_insn \"*cmp_ite0\"\n-  [(set (match_operand 6 \"dominant_cc_register\" \"\")\n+  [(set (match_operand:CC 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n \t  (match_operator 4 \"comparison_operator\"\n@@ -5073,7 +5099,7 @@\n  (set_attr \"length\" \"8\")])\n \n (define_insn \"*cmp_ite1\"\n-  [(set (match_operand 6 \"dominant_cc_register\" \"\")\n+  [(set (match_operand:CC 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n \t  (match_operator 4 \"comparison_operator\""}, {"sha": "dbd1c94fd24072975d308a173bda7da571fde392", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"expr.h\"\n+#include \"toplev.h\"\n \n extern int current_function_anonymous_args;\n \n@@ -49,7 +50,7 @@ extern int current_function_anonymous_args;\n int\n arm_pe_valid_machine_decl_attribute (decl, attributes, attr, args)\n      tree decl;\n-     tree attributes;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree attr;\n      tree args;\n {\n@@ -117,6 +118,7 @@ arm_pe_merge_machine_decl_attributes (old, new)\n   return a;\n }\n \f\n+#if 0\n /* Check a type that has a virtual table, and see if any virtual methods are\n    marked for import or export, and if so, arrange for the vtable to\n    be imported or exported.  */\n@@ -153,6 +155,7 @@ arm_check_vtable_importexport (type)\n \n   return 0;\n }\n+#endif\n \n /* Return non-zero if DECL is a dllexport'd object.  */\n "}, {"sha": "c19e857c687b5e95394036daa88121ed0036be3e", "filename": "gcc/config/arm/semi.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fsemi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fsemi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemi.h?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -30,11 +30,15 @@ Boston, MA 02111-1307, USA.  */\n \n #define LINK_SPEC \"%{mbig-endian:-EB} -X\"\n \n+#ifndef TARGET_VERSION\n #define TARGET_VERSION fputs (\" (ARM/semi-hosted)\", stderr);\n+#endif\n \n+#ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT ARM_FLAG_APCS_32\n+#endif\n \n #include \"arm/aout.h\"\n \n-#undef CPP_APCS_PC_DEFAULT_SPEC\n+#undef  CPP_APCS_PC_DEFAULT_SPEC\n #define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_32__\""}, {"sha": "fcc84418b11f1aa355c8345d5542824f7c2c3801", "filename": "gcc/config/arm/thumb.c", "status": "modified", "additions": 101, "deletions": 33, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.c?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -41,8 +41,8 @@ Boston, MA 02111-1307, USA.  */\n int current_function_anonymous_args = 0;\n \n /* Used to parse -mstructure_size_boundary command line option.  */\n-char * structure_size_string = NULL;\n-int    arm_structure_size_boundary = 32; /* Used to be 8 */\n+const char * structure_size_string = NULL;\n+int          arm_structure_size_boundary = 32; /* Used to be 8 */\n \n /* The register number to be used for the PIC offset register.  */\n const char * thumb_pic_register_string = NULL;\n@@ -81,7 +81,7 @@ int\n thumb_shiftable_const (val)\n      HOST_WIDE_INT val;\n {\n-  unsigned HOST_WIDE_INT mask = 0xff;\n+  HOST_WIDE_INT mask = 0xff;\n   int i;\n \n   for (i = 0; i < 25; i++)\n@@ -94,8 +94,6 @@ thumb_shiftable_const (val)\n int\n thumb_trivial_epilogue ()\n {\n-  int regno;\n-\n   /* ??? If this function ever returns 1, we get a function without any\n      epilogue at all.  It appears that the intent was to cause a \"return\"\n      insn to be emitted, but that does not happen.  */\n@@ -118,7 +116,7 @@ thumb_trivial_epilogue ()\n \f\n /* Return TRUE if X references a SYMBOL_REF.  */\n int\n-symbol_mentioned_p (x)\n+thumb_symbol_mentioned_p (x)\n      rtx x;\n {\n   register const char * fmt;\n@@ -135,10 +133,10 @@ symbol_mentioned_p (x)\n \t  register int j;\n \n \t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t    if (symbol_mentioned_p (XVECEXP (x, i, j)))\n+\t    if (thumb_symbol_mentioned_p (XVECEXP (x, i, j)))\n \t      return 1;\n \t}\n-      else if (fmt[i] == 'e' && symbol_mentioned_p (XEXP (x, i)))\n+      else if (fmt[i] == 'e' && thumb_symbol_mentioned_p (XEXP (x, i)))\n \treturn 1;\n     }\n \n@@ -281,7 +279,7 @@ legitimize_pic_address (orig, mode, reg)\n static rtx pic_rtx;\n \n int\n-is_pic(x)\n+is_pic (x)\n      rtx x;\n {\n   if (x == pic_rtx)\n@@ -413,7 +411,6 @@ add_constant (x, mode)\n      enum machine_mode mode;\n {\n   int i;\n-  rtx lab;\n   HOST_WIDE_INT offset;\n \n   if (mode == SImode && GET_CODE (x) == MEM && CONSTANT_P (XEXP (x, 0))\n@@ -538,10 +535,7 @@ find_barrier (from)\n \t  && GET_CODE (PATTERN (from)) == SET\n \t  && CONSTANT_P (SET_SRC (PATTERN (from)))\n \t  && CONSTANT_POOL_ADDRESS_P (SET_SRC (PATTERN (from))))\n-\t{\n-\t  rtx src = SET_SRC (PATTERN (from));\n-\t  count += 2;\n-\t}\n+\tcount += 2;\n       else\n \tcount += get_attr_length (from);\n \n@@ -773,7 +767,7 @@ thumb_expand_movstrqi (operands)\n \n void\n thumb_reload_out_si (operands)\n-     rtx operands;\n+     rtx operands ATTRIBUTE_UNUSED;\n {\n   abort ();\n }\n@@ -819,10 +813,10 @@ is_called_in_ARM_mode (func)\n /* Routines for emitting code */\n \n void\n-final_prescan_insn(insn)\n+thumb_final_prescan_insn (insn)\n      rtx insn;\n {\n-  extern int *insn_addresses;\n+  extern int * insn_addresses;\n \n   if (flag_print_asm_name)\n     fprintf (asm_out_file, \"%s 0x%04x\\n\", ASM_COMMENT_START,\n@@ -871,7 +865,6 @@ thumb_exit (f, reg_containing_return_addr)\n   int regs_available_for_popping;\n   int regs_to_pop;\n   int pops_needed;\n-  int reg;\n   int available;\n   int required;\n   int mode;\n@@ -1284,10 +1277,9 @@ output_return ()\n \n void\n thumb_function_prologue (f, frame_size)\n-     FILE *f;\n-     int frame_size;\n+     FILE * f;\n+     int frame_size ATTRIBUTE_UNUSED;\n {\n-  int amount = frame_size + current_function_outgoing_args_size;\n   int live_regs_mask = 0;\n   int high_regs_pushed = 0;\n   int store_arg_regs = 0;\n@@ -1358,7 +1350,7 @@ thumb_function_prologue (f, frame_size)\n \t&& ! (TARGET_SINGLE_PIC_BASE && (regno == thumb_pic_register)))\n       live_regs_mask |= 1 << regno;\n \n-  if (live_regs_mask || ! leaf_function_p () || far_jump_used_p())\n+  if (live_regs_mask || ! leaf_function_p () || far_jump_used_p ())\n     live_regs_mask |= 1 << 14;\n \n   if (TARGET_BACKTRACE)\n@@ -1367,7 +1359,6 @@ thumb_function_prologue (f, frame_size)\n       int    offset;\n       int    work_register = 0;\n       \n-      \n       /* We have been asked to create a stack backtrace structure.\n          The code looks like this:\n \t \n@@ -1390,7 +1381,7 @@ thumb_function_prologue (f, frame_size)\n \t{\n \t  /* See if the a4 register is free.  */\n \n-\t  if (regs_ever_live[ 3 ] == 0)\n+\t  if (regs_ever_live [3] == 0)\n \t    work_register = 3;\n \t  else\t  /* We must push a register of our own */\n \t    live_regs_mask |= (1 << 7);\n@@ -1510,6 +1501,77 @@ thumb_function_prologue (f, frame_size)\n     }\n }\n \n+/* Functions to save and restore thumb_return_addr_rtx.  */\n+static rtx thumb_return_addr_rtx = NULL_RTX;\n+\n+struct machine_function\n+{\n+  rtx ra_rtx;\n+};\n+\n+static void\n+thumb_save_machine_status (p)\n+     struct function * p;\n+{\n+  struct machine_function * machine =\n+    (struct machine_function *) xmalloc (sizeof (* machine));\n+\n+  p->machine = machine;\n+  machine->ra_rtx = thumb_return_addr_rtx;\n+}\n+\n+static void\n+thumb_restore_machine_status (p)\n+     struct function * p;\n+{\n+  struct machine_function * machine = p->machine;\n+\n+  thumb_return_addr_rtx = machine->ra_rtx;\n+\n+  free (machine);\n+  \n+  p->machine = (struct machine_function *) NULL;\n+}\n+\n+/* Return an RTX indicating where the return address to the\n+   calling function can be found.  */\n+rtx\n+thumb_return_addr (count)\n+     int count;\n+{\n+  if (count != 0)\n+    return NULL_RTX;\n+\n+  if (thumb_return_addr_rtx == NULL_RTX)\n+    {\n+      rtx init;\n+      \n+      thumb_return_addr_rtx = gen_reg_rtx (Pmode);\n+      \n+      init = gen_rtx_REG (Pmode, 14);\n+\n+      init = gen_rtx_SET (VOIDmode, thumb_return_addr_rtx, init);\n+\n+      /* Emit the insn to the prologue with the other argument copies.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (init, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n+  return thumb_return_addr_rtx;\n+}\n+\n+/* Do anything needed before RTL is emitted for each function.  */\n+void\n+thumb_init_expanders ()\n+{\n+  thumb_return_addr_rtx = NULL_RTX;\n+\n+  /* Arrange to save and restore machine status around nested functions.  */\n+  save_machine_status    = thumb_save_machine_status;\n+  restore_machine_status = thumb_restore_machine_status;\n+}\n+\n void\n thumb_expand_prologue ()\n {\n@@ -1530,7 +1592,7 @@ thumb_expand_prologue ()\n \t{\n \t  int regno;\n \t  rtx reg;\n-\n+\t  \n \t  /* The stack decrement is too big for an immediate value in a single\n \t     insn.  In theory we could issue multiple subtracts, but after\n \t     three of them it becomes more space efficient to place the full\n@@ -1586,6 +1648,9 @@ thumb_expand_prologue ()\n \t}\n     }\n \n+  /* This should only happen with optimisation disabled.  Emit the copy\n+     *after* the stack adjust, as the unoptimised code will attempt to store\n+     local variables at positive offsets from the frame pointer.  */\n   if (frame_pointer_needed)\n     {\n       if (current_function_outgoing_args_size)\n@@ -1606,17 +1671,15 @@ thumb_expand_prologue ()\n \temit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n     }\n \n-  /* if (profile_flag || profile_block_flag) */\n-  emit_insn (gen_blockage ());\n+  if (profile_flag || profile_block_flag)\n+    emit_insn (gen_blockage ());\n }\n \n void\n thumb_expand_epilogue ()\n {\n   HOST_WIDE_INT amount = (get_frame_size ()\n \t\t\t  + current_function_outgoing_args_size);\n-  int regno;\n-\n #ifdef THUMB_PE\n   /* Naked functions don't have epilogues.  */\n   if (arm_naked_function_p (current_function_decl))\n@@ -1635,15 +1698,20 @@ thumb_expand_epilogue ()\n \t  emit_insn (gen_movsi (reg, GEN_INT (amount)));\n \t  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, reg));\n \t}\n-      /* if (profile_flag || profile_block_flag) */\n-      emit_insn (gen_blockage ());\n     }\n+  \n+  /* Emit a USE (stack_pointer_rtx), so that\n+     the stack adjustment will not be deleted.  */\n+  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+\n+  if (profile_flag || profile_block_flag)\n+    emit_insn (gen_blockage ());\n }\n \n void\n thumb_function_epilogue (f, frame_size)\n-     FILE *f;\n-     int frame_size;\n+     FILE * f ATTRIBUTE_UNUSED;\n+     int frame_size ATTRIBUTE_UNUSED;\n {\n   /* ??? Probably not safe to set this here, since it assumes that a\n      function will be emitted as assembly immediately after we generate"}, {"sha": "09f5448c72af02a5aba94316c2a2d747ffc33763", "filename": "gcc/config/arm/thumb.h", "status": "modified", "additions": 65, "deletions": 31, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.h?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -101,28 +101,29 @@ extern int target_flags;\n \n #define TARGET_SWITCHES                                 \t\\\n {                                                       \t\\\n-  {\"big-endian\",\t\t    THUMB_FLAG_BIG_END},\t\\\n-  {\"little-endian\",\t           -THUMB_FLAG_BIG_END},\t\\\n-  {\"thumb-interwork\",\t\t    ARM_FLAG_THUMB},\t\t\\\n-  {\"no-thumb-interwork\",           -ARM_FLAG_THUMB},\t\t\\\n-  {\"tpcs-frame\",\t\t    THUMB_FLAG_BACKTRACE},\t\\\n-  {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE},\t\\\n-  {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE},\t\\\n-  {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE},\t\\\n-  {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING}, \\\n-  {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING}, \\\n-  {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING}, \\\n-  {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING}, \\\n+  {\"big-endian\",\t\t    THUMB_FLAG_BIG_END, \"\"},\t\\\n+  {\"little-endian\",\t           -THUMB_FLAG_BIG_END, \"\"},\t\\\n+  {\"thumb-interwork\",\t\t    ARM_FLAG_THUMB, \"\"},\t\\\n+  {\"no-thumb-interwork\",           -ARM_FLAG_THUMB, \"\"},\t\\\n+  {\"tpcs-frame\",\t\t    THUMB_FLAG_BACKTRACE, \"\"},\t\\\n+  {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE, \"\"},\t\\\n+  {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE, \"\"},\t\\\n+  {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE, \"\"},\t\\\n+  {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING, \"\"}, \\\n+  {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING, \"\"}, \\\n+  {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING, \"\"}, \\\n+  {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING, \"\"}, \\\n   {\"single-pic-base\",\t\t    THUMB_FLAG_SINGLE_PIC_BASE,\t\\\n      \"Do not load the PIC register in function prologues\" },\t\\\n-  {\"no-single-pic-base\",\t   -THUMB_FLAG_SINGLE_PIC_BASE, \"\" }, \\\n+  {\"no-single-pic-base\",\t   -THUMB_FLAG_SINGLE_PIC_BASE, \"\"}, \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  {\"\",                          TARGET_DEFAULT}         \t\\\n+  {\"\",                          TARGET_DEFAULT, \"\"}         \t\\\n }\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  { \"structure-size-boundary=\", & structure_size_string }, \t\\\n+  { \"structure-size-boundary=\", & structure_size_string,        \\\n+      \"Specify the structure aligment: 8 or 32 bits\" }, \t\\\n   { \"pic-register=\", & thumb_pic_register_string,\t\t\\\n      \"Specify the register to be used for PIC addressing\" }\t\\\n }\n@@ -435,7 +436,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define STRUCTURE_SIZE_BOUNDARY 32\n \n /* Used when parsing command line option -mstructure_size_boundary.  */\n-extern char * structure_size_string;\n+extern const char * structure_size_string;\n \n #define STRICT_ALIGNMENT 1\n \n@@ -523,13 +524,13 @@ enum reg_class\n \n #define REG_CLASS_CONTENTS\t\\\n {\t\t\t\t\\\n-  0x00000,\t\t\t\\\n-  0x000f0,\t\t\t\\\n-  0x000ff,\t\t\t\\\n-  0x02000,\t\t\t\\\n-  0x020ff,\t\t\t\\\n-  0x0ff00,\t\t\t\\\n-  0x1ffff,\t\t\t\\\n+  { 0x00000 },\t\t\t\\\n+  { 0x000f0 },\t\t\t\\\n+  { 0x000ff },\t\t\t\\\n+  { 0x02000 },\t\t\t\\\n+  { 0x020ff },\t\t\t\\\n+  { 0x0ff00 },\t\t\t\\\n+  { 0x1ffff },\t\t\t\\\n }\n \n #define REGNO_REG_CLASS(REGNO)\t\t\t\\\n@@ -698,8 +699,17 @@ int thumb_shiftable_const ();\n     (OFFSET) += current_function_outgoing_args_size;\t\t\\\n }\n \n+/* A C expression whose value is RTL representing the value of the return\n+   address for the frame COUNT steps up from the current frame.  */\n+\n+#define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n+  thumb_return_addr (COUNT)\n /* Passing Arguments on the stack */\n \n+/* Initialize data used by insn expanders.  This is called from insn_emit,\n+   once for every function before code is generated.  */\n+#define INIT_EXPANDERS  thumb_init_expanders ()\n+\n #define PROMOTE_PROTOTYPES 1\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n@@ -835,9 +845,9 @@ extern int thumb_pic_register;\n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n-\t(! symbol_mentioned_p (X)\t\t\t\t\\\n+\t(! thumb_symbol_mentioned_p (X)\t\t\t\t\\\n \t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n-\t     || ! symbol_mentioned_p (get_pool_constant (X))))\n+\t     || ! thumb_symbol_mentioned_p (get_pool_constant (X))))\n \n /* We need to know when we are making a constant pool; this determines\n    whether data needs to be in the GOT or can be referenced via a GOT\n@@ -1016,7 +1026,7 @@ extern int making_const_table;\n \t   && GET_CODE (X) == SYMBOL_REF\t\t\t\t\\\n \t   && CONSTANT_POOL_ADDRESS_P (X)\t\t\t\t\\\n \t   && ! (flag_pic\t\t\t\t\t\t\\\n-\t\t && symbol_mentioned_p (get_pool_constant (X))))\t\\\n+\t\t && thumb_symbol_mentioned_p (get_pool_constant (X))))\t\\\n     goto WIN;\t\t\t\t\t\t\t\t\\\n }\n \n@@ -1156,9 +1166,9 @@ extern int thumb_pic_register;\n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n-\t(! symbol_mentioned_p (X)\t\t\t\t\\\n+\t(! thumb_symbol_mentioned_p (X)\t\t\t\t\\\n \t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n-\t     || ! symbol_mentioned_p (get_pool_constant (X))))\n+\t     || ! thumb_symbol_mentioned_p (get_pool_constant (X))))\n  \n /* We need to know when we are making a constant pool; this determines\n    whether data needs to be in the GOT or can be referenced via a GOT\n@@ -1231,10 +1241,10 @@ extern int making_const_table;\n   asm_fprintf ((STREAM), \"\\tpush {%R%s}\\n\", reg_names[(REGNO)])\n \n #define ASM_OUTPUT_REG_POP(STREAM,REGNO)\t\t\t\\\n-  fprintf ((STREAM), \"\\tpop {%R%s}\\n\", reg_names[(REGNO)])\n+  asm_fprintf ((STREAM), \"\\tpop {%R%s}\\n\", reg_names[(REGNO)])\n \n #define FINAL_PRESCAN_INSN(INSN,OPVEC,NOPERANDS) \\\n-  final_prescan_insn((INSN))\n+  thumb_final_prescan_insn (INSN)\n \f\n /* Controlling Debugging Information Format */\n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n@@ -1280,7 +1290,7 @@ extern int making_const_table;\n \n /* The literal pool needs to reside in the text area due to the\n    limited PC addressing range: */\n-#define MACHINE_DEPENDENT_REORG(INSN) thumb_reorg ((INSN))\n+#define MACHINE_DEPENDENT_REORG(INSN) thumb_reorg (INSN)\n \n \f\n /* Options specific to Thumb */\n@@ -1295,4 +1305,28 @@ extern char * thumb_load_double_from_address ();\n extern char * output_return ();\n extern int    far_jump_used_p();\n extern int    is_called_in_ARM_mode ();\n+extern void   thumb_finalize_pic ();\n+extern void   thumb_reorg ();\n+extern void   thumb_override_options ();\n+extern int    is_pic ();\n+extern int    thumb_symbol_mentioned_p ();\n+extern void   thumb_function_prologue ();\n+extern void   thumb_function_epilogue ();\n+extern void   thumb_print_operand ();\n+extern void   thumb_final_prescan_insn ();\n+extern int    thumb_cmp_operand ();\n+extern void   thumb_expand_movstrqi ();\n+extern void   thumb_expand_prologue ();\n+extern void   thumb_expand_epilogue ();\n+extern int    arm_valid_machine_decl_attribute ();\n+extern void   thumb_init_expanders ();\n+\n+#ifndef RTX_CODE\n+struct rtx_def;\n+#define Rtx struct rtx_def *\n+#else\n+#define Rtx rtx\n+#endif\n+\n+extern Rtx    thumb_return_addr ();\n "}, {"sha": "aa38340ed99ab51ac84d9234c142dc560a72e19d", "filename": "gcc/config/arm/thumb.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Fthumb.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.md?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -260,6 +260,8 @@\n {\n   switch (which_alternative)\n     {\n+    default:\n+      abort ();\n     case 0:\n       if (REGNO (operands[1]) == REGNO (operands[0]) + 1)\n \treturn \\\"add\\\\t%0, %1, #0\\;add\\\\t%H0, %H1, #0\\\";\n@@ -310,6 +312,8 @@\n   \"*\n   switch (which_alternative)\n     {\n+    default:\n+      abort ();\n     case 0:\n       if (REGNO (operands[1]) == REGNO (operands[0]) + 1)\n \treturn \\\"add\\\\t%0, %1, #0\\;add\\\\t%H0, %H1, #0\\\";\n@@ -596,14 +600,23 @@\n \n ;; Arithmetic insns\n \n+(define_insn \"negdi2\"\n+  [(set (match_operand:DI         0 \"register_operand\" \"=&l\")\n+\t(neg:DI (match_operand:DI 1 \"register_operand\"   \"l\")))]\n+  \"\"\n+  \"neg\\\\t%Q0, %Q1\\;mov\\\\t%R0, #0\\;sbc\\\\t%R0, %R1\"\n+  [(set_attr \"conds\" \"changed\")\n+   (set_attr \"length\" \"6\")]\n+)\n+\n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:DI 2 \"register_operand\" \"l\")))]\n   \"\"\n   \"add\\\\t%Q0, %Q0, %Q2\\;adc\\\\t%R0, %R0, %R2\"\n [(set_attr \"conds\" \"changed\")\n- (set_attr \"length\" \"8\")])\n+ (set_attr \"length\" \"4\")])\n \n ;; register group 'k' is a single register group containing only the stack\n ;; register.  Trying to reload it will always fail catastrophically,\n@@ -649,7 +662,7 @@\n   \"\"\n   \"sub\\\\t%Q0, %Q0, %Q2\\;sbc\\\\t%R0, %R0, %R2\"\n [(set_attr \"conds\" \"changed\")\n- (set_attr \"length\" \"8\")])\n+ (set_attr \"length\" \"4\")])\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n@@ -1168,6 +1181,7 @@\n  [(unspec_volatile [(const_int 0)] 5)]\n  \"\"\n  \"*\n+   extern void assemble_align ();\n    assemble_align (32);\n    return \\\"\\\";\n \")\n@@ -1184,7 +1198,7 @@\n   \"ldr\\\\t%0, %a1\")\n \n (define_insn \"pic_add_dot_plus_four\"\n-  [(set (match_operand 0 \"register_operand\" \"+r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n \t(plus:SI (match_dup 0) (const (plus:SI (pc) (const_int 4)))))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"flag_pic\""}, {"sha": "526cd36bb64d5b35d8b62c4c3b4537d6e3c45141", "filename": "gcc/config/arm/tpe.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Ftpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020fd92106fa2517f2c8ae5e03ec9c0eae10eac/gcc%2Fconfig%2Farm%2Ftpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftpe.h?ref=b020fd92106fa2517f2c8ae5e03ec9c0eae10eac", "patch": "@@ -224,6 +224,7 @@ do {\t\t\t\t\t\t\\\n #define RETURN_IN_MEMORY(TYPE) \t\t\t\t\t\t\\\n   ((TYPE_MODE ((TYPE)) == BLKmode && ! TYPE_NO_FORCE_BLK (TYPE))\t\\\n    || (AGGREGATE_TYPE_P ((TYPE)) && arm_pe_return_in_memory ((TYPE))))\n+extern int arm_pe_return_in_memory ();\n \f\n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for DECL.\n@@ -419,3 +420,8 @@ switch_to_section (section, decl) \\\n \n \f\n extern int thumb_pe_valid_machine_decl_attribute ();\n+extern int arm_dllexport_p ();\n+extern int arm_dllimport_p ();\n+extern int arm_dllexport_name_p ();\n+extern int arm_dllimport_name_p ();\n+extern int arm_pe_return_in_memory ();"}]}