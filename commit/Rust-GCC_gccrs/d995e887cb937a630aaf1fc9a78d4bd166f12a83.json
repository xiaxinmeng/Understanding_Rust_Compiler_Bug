{"sha": "d995e887cb937a630aaf1fc9a78d4bd166f12a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk5NWU4ODdjYjkzN2E2MzBhYWYxZmM5YTc4ZDRiZDE2NmYxMmE4Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-21T09:15:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-21T09:15:05Z"}, "message": "re PR tree-optimization/59058 (wrong code at -O3 on x86_64-linux-gnu (affecting gcc 4.6 to trunk))\n\n2013-11-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59058\n\t* tree-loop-distribution.c (struct partition_s): Add plus_one\n\tmember.\n\t(build_size_arg_loc): Apply niter adjustment here.\n\t(generate_memset_builtin): Adjust.\n\t(generate_memcpy_builtin): Likewise.\n\t(classify_partition): Do not use number_of_exit_cond_executions\n\tbut record whether niter needs to be adjusted.\n\nFrom-SVN: r205197", "tree": {"sha": "1f8c0d81378b597d7ea98fdbd5f698eba2cccdf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8c0d81378b597d7ea98fdbd5f698eba2cccdf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d995e887cb937a630aaf1fc9a78d4bd166f12a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d995e887cb937a630aaf1fc9a78d4bd166f12a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d995e887cb937a630aaf1fc9a78d4bd166f12a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d995e887cb937a630aaf1fc9a78d4bd166f12a83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d091cd30a1a183ecfbc3adcc28e4bfd9fb86aee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d091cd30a1a183ecfbc3adcc28e4bfd9fb86aee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d091cd30a1a183ecfbc3adcc28e4bfd9fb86aee0"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "1cfbefef29d45c8a5c3ad3abc01685203bff1d72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d995e887cb937a630aaf1fc9a78d4bd166f12a83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d995e887cb937a630aaf1fc9a78d4bd166f12a83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d995e887cb937a630aaf1fc9a78d4bd166f12a83", "patch": "@@ -1,3 +1,14 @@\n+2013-11-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59058\n+\t* tree-loop-distribution.c (struct partition_s): Add plus_one\n+\tmember.\n+\t(build_size_arg_loc): Apply niter adjustment here.\n+\t(generate_memset_builtin): Adjust.\n+\t(generate_memcpy_builtin): Likewise.\n+\t(classify_partition): Do not use number_of_exit_cond_executions\n+\tbut record whether niter needs to be adjusted.\n+\n 2013-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-tail-merge.c (stmt_local_def): Return false if the statement"}, {"sha": "b4ca2119d1e82b1aac3e50fd123f26be96d7a8b0", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d995e887cb937a630aaf1fc9a78d4bd166f12a83/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d995e887cb937a630aaf1fc9a78d4bd166f12a83/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=d995e887cb937a630aaf1fc9a78d4bd166f12a83", "patch": "@@ -480,6 +480,7 @@ typedef struct partition_s\n   data_reference_p main_dr;\n   data_reference_p secondary_dr;\n   tree niter;\n+  bool plus_one;\n } *partition_t;\n \n \n@@ -703,13 +704,16 @@ generate_loops_for_partition (struct loop *loop, partition_t partition,\n /* Build the size argument for a memory operation call.  */\n \n static tree\n-build_size_arg_loc (location_t loc, data_reference_p dr, tree nb_iter)\n+build_size_arg_loc (location_t loc, data_reference_p dr, tree nb_iter,\n+\t\t    bool plus_one)\n {\n-  tree size;\n-  size = fold_build2_loc (loc, MULT_EXPR, sizetype,\n-\t\t\t  fold_convert_loc (loc, sizetype, nb_iter),\n+  tree size = fold_convert_loc (loc, sizetype, nb_iter);\n+  if (plus_one)\n+    size = size_binop (PLUS_EXPR, size, size_one_node);\n+  size = fold_build2_loc (loc, MULT_EXPR, sizetype, size,\n \t\t\t  TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dr))));\n-  return fold_convert_loc (loc, size_type_node, size);\n+  size = fold_convert_loc (loc, size_type_node, size);\n+  return size;\n }\n \n /* Build an address argument for a memory operation call.  */\n@@ -781,7 +785,8 @@ generate_memset_builtin (struct loop *loop, partition_t partition)\n   /* The new statements will be placed before LOOP.  */\n   gsi = gsi_last_bb (loop_preheader_edge (loop)->src);\n \n-  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter);\n+  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter,\n+\t\t\t\t partition->plus_one);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n   mem = build_addr_arg_loc (loc, partition->main_dr, nb_bytes);\n@@ -837,7 +842,8 @@ generate_memcpy_builtin (struct loop *loop, partition_t partition)\n   /* The new statements will be placed before LOOP.  */\n   gsi = gsi_last_bb (loop_preheader_edge (loop)->src);\n \n-  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter);\n+  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter,\n+\t\t\t\t partition->plus_one);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n   dest = build_addr_arg_loc (loc, partition->main_dr, nb_bytes);\n@@ -980,11 +986,13 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n   tree nb_iter;\n   data_reference_p single_load, single_store;\n   bool volatiles_p = false;\n+  bool plus_one = false;\n \n   partition->kind = PKIND_NORMAL;\n   partition->main_dr = NULL;\n   partition->secondary_dr = NULL;\n   partition->niter = NULL_TREE;\n+  partition->plus_one = false;\n \n   EXECUTE_IF_SET_IN_BITMAP (partition->stmts, 0, i, bi)\n     {\n@@ -1047,13 +1055,12 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n   if (!single_store)\n     return;\n \n-  if (!dominated_by_p (CDI_DOMINATORS, single_exit (loop)->src,\n-\t\t       gimple_bb (DR_STMT (single_store))))\n-    nb_iter = number_of_latch_executions (loop);\n-  else\n-    nb_iter = number_of_exit_cond_executions (loop);\n+  nb_iter = number_of_latch_executions (loop);\n   if (!nb_iter || nb_iter == chrec_dont_know)\n     return;\n+  if (dominated_by_p (CDI_DOMINATORS, single_exit (loop)->src,\n+\t\t      gimple_bb (DR_STMT (single_store))))\n+    plus_one = true;\n \n   if (single_store && !single_load)\n     {\n@@ -1075,6 +1082,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n       partition->kind = PKIND_MEMSET;\n       partition->main_dr = single_store;\n       partition->niter = nb_iter;\n+      partition->plus_one = plus_one;\n     }\n   else if (single_store && single_load)\n     {\n@@ -1132,6 +1140,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n       partition->main_dr = single_store;\n       partition->secondary_dr = single_load;\n       partition->niter = nb_iter;\n+      partition->plus_one = plus_one;\n     }\n }\n "}]}