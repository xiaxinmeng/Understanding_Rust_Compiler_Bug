{"sha": "b420ba79dea984c78388047f07ab542665b22ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyMGJhNzlkZWE5ODRjNzgzODgwNDdmMDdhYjU0MjY2NWIyMmFiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T10:43:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T10:43:33Z"}, "message": "[multiple changes]\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Limited_Return): Make global to package\n\tfor use elsewhere.\n\t(Analyze_Expression_Function): Remove duplicated code, pre-analyze\n\texpression to capture names and call Check_Limited_Return so\n\tthat semantic checks are identical to those for regular functions\n\treturning limited types.\n\n2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* bindgen.adb: Fix typo.\n\t* sem_ch6.adb: Minor reformatting.\n\n2015-11-12  Emmanuel Briot  <briot@adacore.com>\n\n\t* s-os_lib.adb (Argument_String_To_List): fix handling of\n\twindows separators\n\nFrom-SVN: r230224", "tree": {"sha": "a4ebe84c43c976d9d7012de3d5a411905a35308f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ebe84c43c976d9d7012de3d5a411905a35308f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b420ba79dea984c78388047f07ab542665b22ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b420ba79dea984c78388047f07ab542665b22ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b420ba79dea984c78388047f07ab542665b22ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b420ba79dea984c78388047f07ab542665b22ab4/comments", "author": null, "committer": null, "parents": [{"sha": "465f1e5d630b4fc2020bc0ade8d282d24201700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465f1e5d630b4fc2020bc0ade8d282d24201700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465f1e5d630b4fc2020bc0ade8d282d24201700f"}], "stats": {"total": 251, "additions": 138, "deletions": 113}, "files": [{"sha": "3e98a5d5502cdffaaa1e1c569be2f11ca056dc88", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b420ba79dea984c78388047f07ab542665b22ab4", "patch": "@@ -1,3 +1,22 @@\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Limited_Return): Make global to package\n+\tfor use elsewhere.\n+\t(Analyze_Expression_Function): Remove duplicated code, pre-analyze\n+\texpression to capture names and call Check_Limited_Return so\n+\tthat semantic checks are identical to those for regular functions\n+\treturning limited types.\n+\n+2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* bindgen.adb: Fix typo.\n+\t* sem_ch6.adb: Minor reformatting.\n+\n+2015-11-12  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-os_lib.adb (Argument_String_To_List): fix handling of\n+\twindows separators\n+\n 2015-11-11  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc-interface/decl.c: Remove unused header files."}, {"sha": "4ad19042ab3e9728bfea58eb3045b1cf6360174b", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=b420ba79dea984c78388047f07ab542665b22ab4", "patch": "@@ -89,7 +89,7 @@ package body Bindgen is\n    --  elaboration policy is sequential.\n \n    System_BB_CPU_Primitives_Multiprocessors_Used : Boolean := False;\n-   --  Flag indicating wether the unit System.BB.CPU_Primitives.Multiprocessors\n+   --  Flag indicating whether unit System.BB.CPU_Primitives.Multiprocessors\n    --  is in the closure of the partiation. This is set by procedure\n    --  Resolve_Binder_Options, and it is used to call a procedure that starts\n    --  slave processors."}, {"sha": "849ae7e39aed39138c3e129c5ff38d701e358458", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=b420ba79dea984c78388047f07ab542665b22ab4", "patch": "@@ -197,6 +197,10 @@ package body System.OS_Lib is\n       --  backslash escapes when computing the bounds for arguments. It is\n       --  then removing the extra backslashes from the argument.\n \n+      Backslash_Is_Sep : constant Boolean := Directory_Separator = '\\';\n+      --  Whether '\\' is a directory separator (as on Windows), or a\n+      --  way to quote special characters.\n+\n    begin\n       Idx := Arg_String'First;\n \n@@ -246,7 +250,9 @@ package body System.OS_Lib is\n \n                --  Following character is backquoted\n \n-               elsif Arg_String (Idx) = '\\' then\n+               elsif not Backslash_Is_Sep\n+                  and then Arg_String (Idx) = '\\'\n+               then\n                   Backqd := True;\n \n                else"}, {"sha": "ea5ca61584169c0795c333ea9582bbc961e72ef5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 111, "deletions": 111, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b420ba79dea984c78388047f07ab542665b22ab4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b420ba79dea984c78388047f07ab542665b22ab4", "patch": "@@ -153,6 +153,14 @@ package body Sem_Ch6 is\n    --  against a formal access-to-subprogram type so Get_Instance_Of must\n    --  be called.\n \n+   procedure Check_Limited_Return\n+     (N      : Node_Id;\n+      Expr   : Node_Id;\n+      R_Type : Entity_Id);\n+   --  Check the appropriate (Ada 95 or Ada 2005) rules for returning limited\n+   --  types. Used only for simple return statements. Expr is the expression\n+   --  returned.\n+\n    procedure Check_Subprogram_Order (N : Node_Id);\n    --  N is the N_Subprogram_Body node for a subprogram. This routine applies\n    --  the alpha ordering rule for N if this ordering requirement applicable.\n@@ -450,6 +458,7 @@ package body Sem_Ch6 is\n          end if;\n \n          Analyze (N);\n+         Def_Id := Defining_Entity (N);\n \n          --  If aspect SPARK_Mode was specified on the body, it needs to be\n          --  repeated both on the generated spec and the body.\n@@ -467,16 +476,11 @@ package body Sem_Ch6 is\n          --  this because it is not part of the original source.\n \n          if Inside_A_Generic then\n-            declare\n-               Id : constant Entity_Id := Defining_Entity (N);\n-\n-            begin\n-               Set_Has_Completion (Id);\n-               Push_Scope (Id);\n-               Install_Formals (Id);\n-               Preanalyze_Spec_Expression (Expr, Etype (Id));\n-               End_Scope;\n-            end;\n+            Set_Has_Completion (Def_Id);\n+            Push_Scope (Def_Id);\n+            Install_Formals (Def_Id);\n+            Preanalyze_Spec_Expression (Expr, Etype (Def_Id));\n+            End_Scope;\n          end if;\n \n          Set_Is_Inlined (Defining_Entity (N));\n@@ -500,8 +504,9 @@ package body Sem_Ch6 is\n \n          declare\n             Decls : List_Id            := List_Containing (N);\n+            Expr  : constant Node_Id   := Expression (Ret);\n             Par   : constant Node_Id   := Parent (Decls);\n-            Id    : constant Entity_Id := Defining_Entity (N);\n+            Typ   : constant Entity_Id := Etype (Def_Id);\n \n          begin\n             --  If this is a wrapper created for in an instance for a formal\n@@ -523,23 +528,19 @@ package body Sem_Ch6 is\n                end if;\n \n                Insert_After (Last (Decls), New_Body);\n-               Push_Scope (Id);\n-               Install_Formals (Id);\n \n                --  Preanalyze the expression for name capture, except in an\n                --  instance, where this has been done during generic analysis,\n                --  and will be redone when analyzing the body.\n \n-               declare\n-                  Expr : constant Node_Id := Expression (Ret);\n-\n-               begin\n-                  Set_Parent (Expr, Ret);\n+               Set_Parent (Expr, Ret);\n+               Push_Scope (Def_Id);\n+               Install_Formals (Def_Id);\n \n-                  if not In_Instance then\n-                     Preanalyze_Spec_Expression (Expr, Etype (Id));\n-                  end if;\n-               end;\n+               if not In_Instance then\n+                  Preanalyze_Spec_Expression (Expr, Typ);\n+                  Check_Limited_Return (Original_Node (N), Expr, Typ);\n+               end if;\n \n                End_Scope;\n             end if;\n@@ -549,8 +550,8 @@ package body Sem_Ch6 is\n       --  If the return expression is a static constant, we suppress warning\n       --  messages on unused formals, which in most cases will be noise.\n \n-      Set_Is_Trivial_Subprogram (Defining_Entity (New_Body),\n-        Is_OK_Static_Expression (Expr));\n+      Set_Is_Trivial_Subprogram\n+        (Defining_Entity (New_Body), Is_OK_Static_Expression (Expr));\n    end Analyze_Expression_Function;\n \n    ----------------------------------------\n@@ -624,11 +625,6 @@ package body Sem_Ch6 is\n       --  Apply legality rule of 6.5 (8.2) to the access discriminants of an\n       --  aggregate in a return statement.\n \n-      procedure Check_Limited_Return (Expr : Node_Id);\n-      --  Check the appropriate (Ada 95 or Ada 2005) rules for returning\n-      --  limited types. Used only for simple return statements.\n-      --  Expr is the expression returned.\n-\n       procedure Check_Return_Subtype_Indication (Obj_Decl : Node_Id);\n       --  Check that the return_subtype_indication properly matches the result\n       --  subtype of the function, as required by RM-6.5(5.1/2-5.3/2).\n@@ -685,87 +681,6 @@ package body Sem_Ch6 is\n          end if;\n       end Check_Aggregate_Accessibility;\n \n-      --------------------------\n-      -- Check_Limited_Return --\n-      --------------------------\n-\n-      procedure Check_Limited_Return (Expr : Node_Id) is\n-      begin\n-         --  Ada 2005 (AI-318-02): Return-by-reference types have been\n-         --  removed and replaced by anonymous access results. This is an\n-         --  incompatibility with Ada 95. Not clear whether this should be\n-         --  enforced yet or perhaps controllable with special switch. ???\n-\n-         --  A limited interface that is not immutably limited is OK.\n-\n-         if Is_Limited_Interface (R_Type)\n-           and then\n-             not (Is_Task_Interface (R_Type)\n-                   or else Is_Protected_Interface (R_Type)\n-                   or else Is_Synchronized_Interface (R_Type))\n-         then\n-            null;\n-\n-         elsif Is_Limited_Type (R_Type)\n-           and then not Is_Interface (R_Type)\n-           and then Comes_From_Source (N)\n-           and then not In_Instance_Body\n-           and then not OK_For_Limited_Init_In_05 (R_Type, Expr)\n-         then\n-            --  Error in Ada 2005\n-\n-            if Ada_Version >= Ada_2005\n-              and then not Debug_Flag_Dot_L\n-              and then not GNAT_Mode\n-            then\n-               Error_Msg_N\n-                 (\"(Ada 2005) cannot copy object of a limited type \"\n-                  & \"(RM-2005 6.5(5.5/2))\", Expr);\n-\n-               if Is_Limited_View (R_Type) then\n-                  Error_Msg_N\n-                    (\"\\return by reference not permitted in Ada 2005\", Expr);\n-               end if;\n-\n-            --  Warn in Ada 95 mode, to give folks a heads up about this\n-            --  incompatibility.\n-\n-            --  In GNAT mode, this is just a warning, to allow it to be\n-            --  evilly turned off. Otherwise it is a real error.\n-\n-            --  In a generic context, simplify the warning because it makes\n-            --  no sense to discuss pass-by-reference or copy.\n-\n-            elsif Warn_On_Ada_2005_Compatibility or GNAT_Mode then\n-               if Inside_A_Generic then\n-                  Error_Msg_N\n-                    (\"return of limited object not permitted in Ada 2005 \"\n-                     & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n-\n-               elsif Is_Limited_View (R_Type) then\n-                  Error_Msg_N\n-                    (\"return by reference not permitted in Ada 2005 \"\n-                     & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n-               else\n-                  Error_Msg_N\n-                    (\"cannot copy object of a limited type in Ada 2005 \"\n-                     & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n-               end if;\n-\n-            --  Ada 95 mode, compatibility warnings disabled\n-\n-            else\n-               return; --  skip continuation messages below\n-            end if;\n-\n-            if not Inside_A_Generic then\n-               Error_Msg_N\n-                 (\"\\consider switching to return of access type\", Expr);\n-               Explain_Limited_Type (R_Type, Expr);\n-            end if;\n-         end if;\n-      end Check_Limited_Return;\n-\n       -------------------------------------\n       -- Check_Return_Subtype_Indication --\n       -------------------------------------\n@@ -987,7 +902,7 @@ package body Sem_Ch6 is\n             end if;\n \n             Resolve (Expr, R_Type);\n-            Check_Limited_Return (Expr);\n+            Check_Limited_Return (N, Expr, R_Type);\n \n             if Present (Expr) and then Nkind (Expr) = N_Aggregate then\n                Check_Aggregate_Accessibility (Expr);\n@@ -5526,6 +5441,91 @@ package body Sem_Ch6 is\n         (New_Id, Old_Id, Fully_Conformant, True, Result, Err_Loc);\n    end Check_Fully_Conformant;\n \n+   --------------------------\n+   -- Check_Limited_Return --\n+   --------------------------\n+\n+   procedure Check_Limited_Return\n+     (N      : Node_Id;\n+      Expr   : Node_Id;\n+      R_Type : Entity_Id)\n+   is\n+   begin\n+      --  Ada 2005 (AI-318-02): Return-by-reference types have been removed and\n+      --  replaced by anonymous access results. This is an incompatibility with\n+      --  Ada 95. Not clear whether this should be enforced yet or perhaps\n+      --  controllable with special switch. ???\n+\n+      --  A limited interface that is not immutably limited is OK\n+\n+      if Is_Limited_Interface (R_Type)\n+        and then\n+          not (Is_Task_Interface (R_Type)\n+                or else Is_Protected_Interface (R_Type)\n+                or else Is_Synchronized_Interface (R_Type))\n+      then\n+         null;\n+\n+      elsif Is_Limited_Type (R_Type)\n+        and then not Is_Interface (R_Type)\n+        and then Comes_From_Source (N)\n+        and then not In_Instance_Body\n+        and then not OK_For_Limited_Init_In_05 (R_Type, Expr)\n+      then\n+         --  Error in Ada 2005\n+\n+         if Ada_Version >= Ada_2005\n+           and then not Debug_Flag_Dot_L\n+           and then not GNAT_Mode\n+         then\n+            Error_Msg_N\n+              (\"(Ada 2005) cannot copy object of a limited type \"\n+               & \"(RM-2005 6.5(5.5/2))\", Expr);\n+\n+            if Is_Limited_View (R_Type) then\n+               Error_Msg_N\n+                 (\"\\return by reference not permitted in Ada 2005\", Expr);\n+            end if;\n+\n+         --  Warn in Ada 95 mode, to give folks a heads up about this\n+         --  incompatibility.\n+\n+         --  In GNAT mode, this is just a warning, to allow it to be evilly\n+         --  turned off. Otherwise it is a real error.\n+\n+         --  In a generic context, simplify the warning because it makes no\n+         --  sense to discuss pass-by-reference or copy.\n+\n+         elsif Warn_On_Ada_2005_Compatibility or GNAT_Mode then\n+            if Inside_A_Generic then\n+               Error_Msg_N\n+                 (\"return of limited object not permitted in Ada 2005 \"\n+                  & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n+\n+            elsif Is_Limited_View (R_Type) then\n+               Error_Msg_N\n+                 (\"return by reference not permitted in Ada 2005 \"\n+                  & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n+            else\n+               Error_Msg_N\n+                 (\"cannot copy object of a limited type in Ada 2005 \"\n+                  & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n+            end if;\n+\n+         --  Ada 95 mode, compatibility warnings disabled\n+\n+         else\n+            return; --  skip continuation messages below\n+         end if;\n+\n+         if not Inside_A_Generic then\n+            Error_Msg_N\n+              (\"\\consider switching to return of access type\", Expr);\n+            Explain_Limited_Type (R_Type, Expr);\n+         end if;\n+      end if;\n+   end Check_Limited_Return;\n+\n    ---------------------------\n    -- Check_Mode_Conformant --\n    ---------------------------"}]}