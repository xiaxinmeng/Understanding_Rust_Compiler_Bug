{"sha": "dde5ce541e3258276848aee85229a71c0e5f6965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlNWNlNTQxZTMyNTgyNzY4NDhhZWU4NTIyOWE3MWMwZTVmNjk2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-28T08:26:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-28T08:26:24Z"}, "message": "s390: -Wpsabi diagnostics for C++14 vs. C++17 ABI incompatibility on s390{,x} [PR94704]\n\n> We probably have to look into providing a -Wpsabi warning as well.\n\nSo like this?\n\n2020-04-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94704\n\t* config/s390/s390.c (s390_function_arg_vector,\n\ts390_function_arg_float): Emit -Wpsabi diagnostics if the ABI changed.", "tree": {"sha": "30a4e3260b8c2128a3e423a83b06a666375ac131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30a4e3260b8c2128a3e423a83b06a666375ac131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dde5ce541e3258276848aee85229a71c0e5f6965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde5ce541e3258276848aee85229a71c0e5f6965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde5ce541e3258276848aee85229a71c0e5f6965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde5ce541e3258276848aee85229a71c0e5f6965/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62a820d686d1fa97a9eefdc65ca07d8f96ac9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62a820d686d1fa97a9eefdc65ca07d8f96ac9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62a820d686d1fa97a9eefdc65ca07d8f96ac9f4"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "bb017f2de2b6c713d7e29f914c145905b8e37157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde5ce541e3258276848aee85229a71c0e5f6965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde5ce541e3258276848aee85229a71c0e5f6965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dde5ce541e3258276848aee85229a71c0e5f6965", "patch": "@@ -1,3 +1,9 @@\n+2020-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94704\n+\t* config/s390/s390.c (s390_function_arg_vector,\n+\ts390_function_arg_float): Emit -Wpsabi diagnostics if the ABI changed.\n+\n 2020-04-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94727"}, {"sha": "50994bc413ddb12fd2bd42d7d81dad3c73f43911", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde5ce541e3258276848aee85229a71c0e5f6965/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde5ce541e3258276848aee85229a71c0e5f6965/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=dde5ce541e3258276848aee85229a71c0e5f6965", "patch": "@@ -11911,16 +11911,22 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n \n   /* The ABI says that record types with a single member are treated\n      just like that member would be.  */\n+  bool cxx17_empty_base_seen = false;\n   while (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field, single = NULL_TREE;\n \n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \t{\n-\t  if (TREE_CODE (field) != FIELD_DECL\n-\t      || cxx17_empty_base_field_p (field))\n+\t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n \n+\t  if (cxx17_empty_base_field_p (field))\n+\t    {\n+\t      cxx17_empty_base_seen = true;\n+\t      continue;\n+\t    }\n+\n \t  if (single == NULL_TREE)\n \t    single = TREE_TYPE (field);\n \t  else\n@@ -11940,7 +11946,22 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n \t}\n     }\n \n-  return VECTOR_TYPE_P (type);\n+  if (!VECTOR_TYPE_P (type))\n+    return false;\n+\n+  if (warn_psabi && cxx17_empty_base_seen)\n+    {\n+      static unsigned last_reported_type_uid;\n+      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n+      if (uid != last_reported_type_uid)\n+\t{\n+\t  last_reported_type_uid = uid;\n+\t  inform (input_location, \"parameter passing for argument of type \"\n+\t\t\t\t  \"%qT when C++17 is enabled changed to match \"\n+\t\t\t\t  \"C++14 in GCC 10.1\", type);\n+\t}\n+    }\n+  return true;\n }\n \n /* Return true if a function argument of type TYPE and mode MODE\n@@ -11962,15 +11983,20 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n \n   /* The ABI says that record types with a single member are treated\n      just like that member would be.  */\n+  bool cxx17_empty_base_seen = false;\n   while (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field, single = NULL_TREE;\n \n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \t{\n-\t  if (TREE_CODE (field) != FIELD_DECL\n-\t      || cxx17_empty_base_field_p (field))\n+\t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n+\t  if (cxx17_empty_base_field_p (field))\n+\t    {\n+\t      cxx17_empty_base_seen = true;\n+\t      continue;\n+\t    }\n \n \t  if (single == NULL_TREE)\n \t    single = TREE_TYPE (field);\n@@ -11984,7 +12010,23 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n \ttype = single;\n     }\n \n-  return TREE_CODE (type) == REAL_TYPE;\n+  if (TREE_CODE (type) != REAL_TYPE)\n+    return false;\n+\n+  if (warn_psabi && cxx17_empty_base_seen)\n+    {\n+      static unsigned last_reported_type_uid;\n+      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n+      if (uid != last_reported_type_uid)\n+\t{\n+\t  last_reported_type_uid = uid;\n+\t  inform (input_location, \"parameter passing for argument of type \"\n+\t\t\t\t  \"%qT when C++17 is enabled changed to match \"\n+\t\t\t\t  \"C++14 in GCC 10.1\", type);\n+\t}\n+    }\n+\n+  return true;\n }\n \n /* Return true if a function argument of type TYPE and mode MODE"}]}