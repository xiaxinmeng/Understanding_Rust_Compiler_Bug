{"sha": "6624ad73064de241e937e97a28b65c50fe14c78e", "node_id": "C_kwDOANBUbNoAKDY2MjRhZDczMDY0ZGUyNDFlOTM3ZTk3YTI4YjY1YzUwZmUxNGM3OGU", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-08-15T06:39:22Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-08-15T06:39:29Z"}, "message": "x86: Enable __bf16 type for TARGET_SSE2 and above\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin-types.def (BFLOAT16): New primitive type.\n\t* config/i386/i386-builtins.cc : Support __bf16 type for i386 backend.\n\t(ix86_register_bf16_builtin_type): New function.\n\t(ix86_bf16_type_node): New.\n\t(ix86_bf16_ptr_type_node): Ditto.\n\t(ix86_init_builtin_types): Add ix86_register_bf16_builtin_type function call.\n\t* config/i386/i386-modes.def (FLOAT_MODE): Add BFmode.\n\t(ADJUST_FLOAT_FORMAT): Ditto.\n\t* config/i386/i386.cc (classify_argument): Handle BFmode.\n\t(construct_container): Ditto.\n\t(function_value_32): Return __bf16 by %xmm0.\n\t(function_value_64): Return __bf16 by SSE register.\n\t(ix86_output_ssemov): Handle BFmode.\n\t(ix86_legitimate_constant_p): Disable BFmode constant double.\n\t(ix86_secondary_reload): Require gpr as intermediate register\n\tto store __bf16 from sse register when sse4 is not available.\n\t(ix86_scalar_mode_supported_p): Enable __bf16 under sse2.\n\t(ix86_mangle_type): Add manlging for __bf16 type.\n\t(ix86_invalid_conversion): New function for target hook.\n\t(ix86_invalid_unary_op): Ditto.\n\t(ix86_invalid_binary_op): Ditto.\n\t(TARGET_INVALID_CONVERSION): New define for target hook.\n\t(TARGET_INVALID_UNARY_OP): Ditto.\n\t(TARGET_INVALID_BINARY_OP): Ditto.\n\t* config/i386/i386.h (host_detect_local_cpu): Add BFmode.\n\t* config/i386/i386.md (\"mode\"): Add BFmode.\n\t(MODE_SIZE): Ditto.\n\t(X87MODEFH): Ditto.\n\t(HFBF): Add new define_mode_iterator.\n\t(*pushhf_rex64): Change for BFmode.\n\t(*push<mode>_rex64): Ditto.\n\t(*pushhf): Ditto.\n\t(*push<mode>): Ditto.\n\t(MODESH): Ditto.\n\t(hfbfconstf): Add new define_mode_attr.\n\t(*mov<mode>_internal): Add BFmode.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/bfloat_cpp_typecheck.C: New test.\n\t* gcc.target/i386/bfloat16-1.c: Ditto.\n\t* gcc.target/i386/sse2-bfloat16-1.c: Ditto.\n\t* gcc.target/i386/sse2-bfloat16-2.c: Ditto.\n\t* gcc.target/i386/sse2-bfloat16-scalar-typecheck.c: Ditto.", "tree": {"sha": "bf98aab33946b4b8bede93f521f589ef41ed5adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf98aab33946b4b8bede93f521f589ef41ed5adb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6624ad73064de241e937e97a28b65c50fe14c78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6624ad73064de241e937e97a28b65c50fe14c78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6624ad73064de241e937e97a28b65c50fe14c78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6624ad73064de241e937e97a28b65c50fe14c78e/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c435085e8789ef6c774c74db567293e2d27ff143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c435085e8789ef6c774c74db567293e2d27ff143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c435085e8789ef6c774c74db567293e2d27ff143"}], "stats": {"total": 415, "additions": 391, "deletions": 24}, "files": [{"sha": "63a360b0f8b99a3b35932692fb7b2a90410e74a7", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -69,6 +69,7 @@ DEF_PRIMITIVE_TYPE (UINT16, short_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (INT64, long_long_integer_type_node)\n DEF_PRIMITIVE_TYPE (UINT64, long_long_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT16, ix86_float16_type_node)\n+DEF_PRIMITIVE_TYPE (BFLOAT16, ix86_bf16_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT80, float80_type_node)"}, {"sha": "6a04fb57e65cab0f88add219187bbac4732c58e9", "filename": "gcc/config/i386/i386-builtins.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -126,6 +126,9 @@ BDESC_VERIFYS (IX86_BUILTIN_MAX,\n static GTY(()) tree ix86_builtin_type_tab[(int) IX86_BT_LAST_CPTR + 1];\n \n tree ix86_float16_type_node = NULL_TREE;\n+tree ix86_bf16_type_node = NULL_TREE;\n+tree ix86_bf16_ptr_type_node = NULL_TREE;\n+\n /* Retrieve an element from the above table, building some of\n    the types lazily.  */\n \n@@ -1366,6 +1369,22 @@ ix86_register_float16_builtin_type (void)\n \t\t\t\t\t    \"_Float16\");\n }\n \n+static void\n+ix86_register_bf16_builtin_type (void)\n+{\n+  ix86_bf16_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (ix86_bf16_type_node) = 16;\n+  SET_TYPE_MODE (ix86_bf16_type_node, BFmode);\n+  layout_type (ix86_bf16_type_node);\n+\n+  if (!maybe_get_identifier (\"__bf16\") && TARGET_SSE2)\n+    {\n+      lang_hooks.types.register_builtin_type (ix86_bf16_type_node,\n+\t\t\t\t\t    \"__bf16\");\n+      ix86_bf16_ptr_type_node = build_pointer_type (ix86_bf16_type_node);\n+    }\n+}\n+\n static void\n ix86_init_builtin_types (void)\n {\n@@ -1396,6 +1415,8 @@ ix86_init_builtin_types (void)\n \n   ix86_register_float16_builtin_type ();\n \n+  ix86_register_bf16_builtin_type ();\n+\n   const_string_type_node\n     = build_pointer_type (build_qualified_type\n \t\t\t  (char_type_node, TYPE_QUAL_CONST));"}, {"sha": "b49daaef253941aea920c70882dc69c217a6419c", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n FRACTIONAL_FLOAT_MODE (XF, 80, 12, ieee_extended_intel_96_format);\n FLOAT_MODE (TF, 16, ieee_quad_format);\n FLOAT_MODE (HF, 2, ieee_half_format);\n+FLOAT_MODE (BF, 2, 0);\n+ADJUST_FLOAT_FORMAT (BF, &arm_bfloat_half_format);\n \n /* In ILP32 mode, XFmode has size 12 and alignment 4.\n    In LP64 mode, XFmode has size and alignment 16.  */"}, {"sha": "fa3722a11e1e65e0d17d542db9f8e0d9159f7cbb", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -2399,6 +2399,7 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_CTImode:\n       return 0;\n     case E_HFmode:\n+    case E_BFmode:\n       if (!(bit_offset % 64))\n \tclasses[0] = X86_64_SSEHF_CLASS;\n       else\n@@ -2792,9 +2793,10 @@ construct_container (machine_mode mode, machine_mode orig_mode,\n \t    intreg++;\n \t    break;\n \t  case X86_64_SSEHF_CLASS:\n+\t    tmpmode = (mode == BFmode ? BFmode : HFmode);\n \t    exp [nexps++]\n \t      = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t   gen_rtx_REG (HFmode,\n+\t\t\t\t   gen_rtx_REG (tmpmode,\n \t\t\t\t\t\tGET_SSE_REGNO (sse_regno)),\n \t\t\t\t   GEN_INT (i*8));\n \t    sse_regno++;\n@@ -4001,8 +4003,8 @@ function_value_32 (machine_mode orig_mode, machine_mode mode,\n     /* Most things go in %eax.  */\n     regno = AX_REG;\n \n-  /* Return _Float16/_Complex _Foat16 by sse register.  */\n-  if (mode == HFmode)\n+  /* Return __bf16/ _Float16/_Complex _Foat16 by sse register.  */\n+  if (mode == HFmode || mode == BFmode)\n     regno = FIRST_SSE_REG;\n   if (mode == HCmode)\n     {\n@@ -4050,6 +4052,7 @@ function_value_64 (machine_mode orig_mode, machine_mode mode,\n \n       switch (mode)\n \t{\n+\tcase E_BFmode:\n \tcase E_HFmode:\n \tcase E_HCmode:\n \tcase E_SFmode:\n@@ -5631,6 +5634,7 @@ ix86_output_ssemov (rtx_insn *insn, rtx *operands)\n \treturn \"%vmovss\\t{%1, %0|%0, %1}\";\n \n     case MODE_HF:\n+    case MODE_BF:\n       if (REG_P (operands[0]) && REG_P (operands[1]))\n \treturn \"vmovsh\\t{%d1, %0|%0, %d1}\";\n       else\n@@ -10648,6 +10652,11 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n     case CONST_VECTOR:\n       if (!standard_sse_constant_p (x, mode))\n \treturn false;\n+      break;\n+\n+    case CONST_DOUBLE:\n+      if (mode == E_BFmode)\n+\treturn false;\n \n     default:\n       break;\n@@ -19415,7 +19424,8 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n     }\n \n   /* Require movement to gpr, and then store to memory.  */\n-  if ((mode == HFmode || mode == HImode || mode == V2QImode)\n+  if ((mode == HFmode || mode == HImode || mode == V2QImode\n+       || mode == BFmode)\n       && !TARGET_SSE4_1\n       && SSE_CLASS_P (rclass)\n       && !in_p && MEM_P (x))\n@@ -22358,7 +22368,7 @@ ix86_scalar_mode_supported_p (scalar_mode mode)\n     return default_decimal_float_supported_p ();\n   else if (mode == TFmode)\n     return true;\n-  else if (mode == HFmode && TARGET_SSE2)\n+  else if ((mode == HFmode || mode == BFmode) && TARGET_SSE2)\n     return true;\n   else\n     return default_scalar_mode_supported_p (mode);\n@@ -22673,6 +22683,8 @@ ix86_mangle_type (const_tree type)\n \n   switch (TYPE_MODE (type))\n     {\n+    case E_BFmode:\n+      return \"u6__bf16\";\n     case E_HFmode:\n       /* _Float16 is \"DF16_\".\n \t Align with clang's decision in https://reviews.llvm.org/D33719. */\n@@ -22688,6 +22700,55 @@ ix86_mangle_type (const_tree type)\n     }\n }\n \n+/* Return the diagnostic message string if conversion from FROMTYPE to\n+   TOTYPE is not allowed, NULL otherwise.  */\n+\n+static const char *\n+ix86_invalid_conversion (const_tree fromtype, const_tree totype)\n+{\n+  if (element_mode (fromtype) != element_mode (totype))\n+    {\n+      /* Do no allow conversions to/from BFmode scalar types.  */\n+      if (TYPE_MODE (fromtype) == BFmode)\n+\treturn N_(\"invalid conversion from type %<__bf16%>\");\n+      if (TYPE_MODE (totype) == BFmode)\n+\treturn N_(\"invalid conversion to type %<__bf16%>\");\n+    }\n+\n+  /* Conversion allowed.  */\n+  return NULL;\n+}\n+\n+/* Return the diagnostic message string if the unary operation OP is\n+   not permitted on TYPE, NULL otherwise.  */\n+\n+static const char *\n+ix86_invalid_unary_op (int op, const_tree type)\n+{\n+  /* Reject all single-operand operations on BFmode except for &.  */\n+  if (element_mode (type) == BFmode && op != ADDR_EXPR)\n+    return N_(\"operation not permitted on type %<__bf16%>\");\n+\n+  /* Operation allowed.  */\n+  return NULL;\n+}\n+\n+/* Return the diagnostic message string if the binary operation OP is\n+   not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n+\n+static const char *\n+ix86_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1,\n+\t\t\t   const_tree type2)\n+{\n+  /* Reject all 2-operand operations on BFmode.  */\n+  if (element_mode (type1) == BFmode\n+      || element_mode (type2) == BFmode)\n+    return N_(\"operation not permitted on type %<__bf16%>\");\n+\n+  /* Operation allowed.  */\n+  return NULL;\n+}\n+\n static GTY(()) tree ix86_tls_stack_chk_guard_decl;\n \n static tree\n@@ -24745,6 +24806,15 @@ ix86_libgcc_floating_mode_supported_p\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE ix86_mangle_type\n \n+#undef TARGET_INVALID_CONVERSION\n+#define TARGET_INVALID_CONVERSION ix86_invalid_conversion\n+\n+#undef TARGET_INVALID_UNARY_OP\n+#define TARGET_INVALID_UNARY_OP ix86_invalid_unary_op\n+\n+#undef TARGET_INVALID_BINARY_OP\n+#define TARGET_INVALID_BINARY_OP ix86_invalid_binary_op\n+\n #undef TARGET_STACK_PROTECT_GUARD\n #define TARGET_STACK_PROTECT_GUARD ix86_stack_protect_guard\n "}, {"sha": "0da3dce1d31c5e063e218fa71f7ad8228a3671f2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -1046,7 +1046,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == V2QImode || (MODE) == DFmode\t\\\n-   || (MODE) == HFmode)\n+   || (MODE) == HFmode || (MODE) == BFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n@@ -1077,7 +1077,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == CQImode || (MODE) == CHImode\t\t\t\t\\\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n    || (MODE) == SDmode || (MODE) == DDmode\t\t\t\t\\\n-   || (MODE) == HFmode || (MODE) == HCmode\t\t\t\t\\\n+   || (MODE) == HFmode || (MODE) == HCmode || (MODE) == BFmode\t\t\\\n    || (MODE) == V2HImode || (MODE) == V2HFmode\t\t\t\t\\\n    || (MODE) == V1SImode || (MODE) == V4QImode || (MODE) == V2QImode\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\"}, {"sha": "5f7e2457f5c7b52796aae652b2ba3e507b175ef2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -499,7 +499,7 @@\n \n ;; Main data type used by the insn\n (define_attr \"mode\"\n-  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,SF,DF,XF,TF,V32HF,V16HF,V8HF,\n+  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,BF,SF,DF,XF,TF,V32HF,V16HF,V8HF,\n    V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF,V4HF,V2HF\"\n   (const_string \"unknown\"))\n \n@@ -1104,7 +1104,7 @@\n ;; GET_MODE_SIZE (<MODE>mode).  For XFmode which depends on\n ;; command line options just use GET_MODE_SIZE macro.\n (define_mode_attr MODE_SIZE [(QI \"1\") (HI \"2\") (SI \"4\") (DI \"8\")\n-\t\t\t     (TI \"16\") (HF \"2\") (SF \"4\") (DF \"8\")\n+\t\t\t     (TI \"16\") (HF \"2\") (BF \"2\") (SF \"4\") (DF \"8\")\n \t\t\t     (XF \"GET_MODE_SIZE (XFmode)\")\n \t\t\t     (V16QI \"16\") (V32QI \"32\") (V64QI \"64\")\n \t\t\t     (V8HI \"16\") (V16HI \"32\") (V32HI \"64\")\n@@ -1248,7 +1248,7 @@\n (define_mode_iterator X87MODEF [SF DF XF])\n \n ;; All x87 floating point modes plus HFmode\n-(define_mode_iterator X87MODEFH [HF SF DF XF])\n+(define_mode_iterator X87MODEFH [HF SF DF XF BF])\n \n ;; All SSE floating point modes\n (define_mode_iterator SSEMODEF [HF SF DF TF])\n@@ -3439,9 +3439,11 @@\n   operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n })\n \n-(define_insn \"*pushhf_rex64\"\n-  [(set (match_operand:HF 0 \"push_operand\" \"=X,X\")\n-\t(match_operand:HF 1 \"nonmemory_no_elim_operand\" \"r,x\"))]\n+(define_mode_iterator HFBF [HF BF])\n+\n+(define_insn \"*push<mode>_rex64\"\n+  [(set (match_operand:HFBF 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:HFBF 1 \"nonmemory_no_elim_operand\" \"r,x\"))]\n   \"TARGET_64BIT\"\n {\n   /* Anything else should be already split before reg-stack.  */\n@@ -3452,9 +3454,9 @@\n    (set_attr \"type\" \"push,multi\")\n    (set_attr \"mode\" \"DI,TI\")])\n \n-(define_insn \"*pushhf\"\n-  [(set (match_operand:HF 0 \"push_operand\" \"=X,X\")\n-\t(match_operand:HF 1 \"general_no_elim_operand\" \"rmF,x\"))]\n+(define_insn \"*push<mode>\"\n+  [(set (match_operand:HFBF 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:HFBF 1 \"general_no_elim_operand\" \"rmF,x\"))]\n   \"!TARGET_64BIT\"\n {\n   /* Anything else should be already split before reg-stack.  */\n@@ -3493,7 +3495,7 @@\n    (set_attr \"unit\" \"i387,*,*\")\n    (set_attr \"mode\" \"SF,SI,SF\")])\n \n-(define_mode_iterator MODESH [SF HF])\n+(define_mode_iterator MODESH [SF HF BF])\n ;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:MODESH 0 \"push_operand\")\n@@ -3981,18 +3983,21 @@\n \t   ]\n \t   (const_string \"*\")))])\n \n-(define_insn \"*movhf_internal\"\n- [(set (match_operand:HF 0 \"nonimmediate_operand\"\n+(define_mode_attr hfbfconstf\n+ [(HF \"F\") (BF \"\")])\n+\n+(define_insn \"*mov<mode>_internal\"\n+ [(set (match_operand:HFBF 0 \"nonimmediate_operand\"\n \t \"=?r,?r,?r,?m,v,v,?r,m,?v,v\")\n-       (match_operand:HF 1 \"general_operand\"\n-\t \"r  ,F ,m ,rF,C,v, v,v,r ,m\"))]\n+       (match_operand:HFBF 1 \"general_operand\"\n+\t \"r  ,F ,m ,r<hfbfconstf>,C,v, v,v,r ,m\"))]\n  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress\n       || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n       || (TARGET_SSE2\n-\t  && standard_sse_constant_p (operands[1], HFmode) == 1)\n-      || memory_operand (operands[0], HFmode))\"\n+\t  && standard_sse_constant_p (operands[1], <MODE>mode) == 1)\n+      || memory_operand (operands[0], <MODE>mode))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -4087,7 +4092,13 @@\n \t\t\t (not (match_test \"TARGET_HIMODE_MATH\"))))\n \t\t (const_string \"SI\")\n \t      ]\n-\t      (const_string \"HI\")))])\n+\t      (const_string \"HI\")))\n+   (set (attr \"enabled\")\n+\t(cond [(and (match_test \"<MODE>mode == BFmode\")\n+\t\t    (eq_attr \"alternative\" \"1\"))\n+\t\t(symbol_ref \"false\")\n+\t      ]\n+\t      (const_string \"*\")))])\n \n (define_split\n   [(set (match_operand 0 \"any_fp_register_operand\")"}, {"sha": "5152336efe61d36c9f4deb27d85edc2f4bc6fc01", "filename": "gcc/testsuite/g++.target/i386/bfloat_cpp_typecheck.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fbfloat_cpp_typecheck.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fbfloat_cpp_typecheck.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fbfloat_cpp_typecheck.C?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O3 --save-temps\" } */\n+\n+void foo (void)\n+{\n+  __bf16 (); /* { dg-bogus {invalid conversion to type '__bf16'} \"\" { xfail *-*-* } } */\n+  __bf16 a = __bf16(); /* { dg-bogus {invalid conversion to type '__bf16'} \"\" { xfail *-*-* } } */\n+  __bf16 (0x1234); /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 (0.1); /* { dg-error {invalid conversion to type '__bf16'} } */\n+}"}, {"sha": "6aaec28efd290b2fec09ce5eb43f84718800b1c3", "filename": "gcc/testsuite/gcc.target/i386/bfloat16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbfloat16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbfloat16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbfloat16-1.c?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2\" } */\n+__bf16\n+foo (int a)\n+{\n+  union {\n+    int a;\n+    __bf16 b;\n+  }c;\n+  c.a = a;\n+  return c.b;\n+}"}, {"sha": "612d55be826bcafc0604738d62d12afa80f1eb32", "filename": "gcc/testsuite/gcc.target/i386/sse2-bfloat16-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-1.c?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sse2\" } */\n+\n+__bf16/* { dg-error \"unknown type name '__bf16'\" } */\n+foo (__bf16 x) /* { dg-error \"unknown type name '__bf16'\" } */\n+{\n+  return x;\n+}"}, {"sha": "a3286e26c489b59fd4555a4cb0900579cef1aa29", "filename": "gcc/testsuite/gcc.target/i386/sse2-bfloat16-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-2.c?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-avx512f\" } */\n+\n+union flt\n+{\n+  __bf16 flt;\n+  short s;\n+};\n+\n+__bf16\n+foo (union flt x)\n+{\n+  return x.flt;\n+}\n+\n+/* { dg-final { scan-assembler {(?n)pinsrw[\\t ].*%xmm0} { target ia32 } } } */\n+/* { dg-final { scan-assembler {(?n)movd[\\t ].*%xmm0} { target { ! ia32 } } } } */"}, {"sha": "f76d5547758e6c8770ccf0b46016c88de10f11e1", "filename": "gcc/testsuite/gcc.target/i386/sse2-bfloat16-scalar-typecheck.c", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-scalar-typecheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6624ad73064de241e937e97a28b65c50fe14c78e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-scalar-typecheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-bfloat16-scalar-typecheck.c?ref=6624ad73064de241e937e97a28b65c50fe14c78e", "patch": "@@ -0,0 +1,215 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2\" } */\n+\n+\n+__bf16 glob_bfloat;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+float *float_ptr;\n+\n+__bf16 foo1 (void) { return (__bf16) 0x1234; } /* { dg-error {invalid conversion to type '__bf16'} } */\n+__bf16 foo2 (void) { return (__bf16) (short) 0x1234; } /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+__bf16 footest (__bf16 scalar0)\n+{\n+\n+  /* Initialisation  */\n+\n+  __bf16 scalar1_1;\n+  __bf16 scalar1_2 = glob_bfloat;\n+  __bf16 scalar1_3 = 0;   /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_4 = 0.1; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_5 = is_a_float; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_6 = is_an_int;  /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_7 = is_a_float16; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_8 = is_a_double; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar1_9 = is_a_short_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  int initi_1_1 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  float initi_1_2 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  _Float16 initi_1_3 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  short initi_1_4 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  double initi_1_5 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  __bf16 scalar2_1 = {}; /* { dg-error {empty scalar initializer} } */\n+  __bf16 scalar2_2 = { glob_bfloat };\n+  __bf16 scalar2_3 = { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_4 = { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_5 = { is_a_float }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_6 = { is_an_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_7 = { is_a_float16 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_8 = { is_a_double }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  __bf16 scalar2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  int initi_2_1 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  float initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  _Float16 initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  short initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  double initi_2_5 = { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Assignments.  */\n+\n+  glob_bfloat = glob_bfloat;\n+  glob_bfloat = 0;   /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = 0.1; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = is_a_float; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = is_an_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = is_a_float16; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = is_a_double; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  glob_bfloat = is_a_short_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  is_an_int = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_float16 = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_double = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  is_a_short_int = glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat;\n+  (__bf16) glob_bfloat;\n+\n+  (int) glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (float) glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (_Float16) glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (double) glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (short) glob_bfloat; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  (__bf16) is_an_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) is_a_float; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) is_a_float16; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) is_a_double; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) is_a_short_int; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  /* Compound literals.  */\n+\n+  (__bf16) {}; /* { dg-error {empty scalar initializer} } */\n+  (__bf16) { glob_bfloat };\n+  (__bf16) { 0 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { 0.1 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { is_a_float }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { is_an_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { is_a_float16 }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { is_a_double }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  (__bf16) { is_a_short_int }; /* { dg-error {invalid conversion to type '__bf16'} } */\n+\n+  (int) { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (float) { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (_Float16) { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (double) { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  (short) { glob_bfloat }; /* { dg-error {invalid conversion from type '__bf16'} } */\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef __bf16 array_type[2];\n+  extern __bf16 extern_array[];\n+\n+  __bf16 array[2];\n+  __bf16 zero_length_array[0];\n+  __bf16 empty_init_array[] = {};\n+  typedef __bf16 some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    __bf16 a;\n+  };\n+\n+  union union1 {\n+    __bf16 a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  __bf16 *bfloat_ptr = &scalar0;\n+  scalar0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  __bf16 *bfloat_ptr2 = bfloat_ptr;\n+  __bf16 *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  scalar0 > glob_bfloat; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  glob_bfloat == scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 > is_a_float; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_a_float == scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 > 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0 == scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 > 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  0.1 == scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 > is_an_int; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  is_an_int == scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &scalar0;\n+  bfloat_ptr != &scalar0;\n+  bfloat_ptr < &scalar0;\n+  bfloat_ptr <= &scalar0;\n+  bfloat_ptr > &scalar0;\n+  bfloat_ptr >= &scalar0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? scalar0 : scalar0;\n+  0 ? scalar0 : is_a_float; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  0 ? is_a_float : scalar0; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  0 ? scalar0 : 0; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  0 ? 0 : scalar0; /* { dg-error {invalid conversion to type '__bf16'} } */\n+  0 ? 0.1 : scalar0; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  0 ? scalar0 : 0.1; /* { dg-error {invalid conversion from type '__bf16'} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-warning {pointer type mismatch in conditional expression} } */\n+\n+  scalar0 ? scalar0 : scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 ? is_a_float : scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 ? scalar0 : is_a_float; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 ? is_a_float : is_a_float; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Unary operators.  */\n+\n+  +scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  -scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ~scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  !scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  *scalar0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  __imag scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  ++scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  --scalar0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0++; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0--; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  scalar0 = glob_bfloat + *bfloat_ptr; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 = glob_bfloat + 0.1; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 = glob_bfloat + 0; /* { dg-error {operation not permitted on type '__bf16'} } */\n+  scalar0 = glob_bfloat + is_a_float; /* { dg-error {operation not permitted on type '__bf16'} } */\n+\n+  return scalar0;\n+}\n+"}]}