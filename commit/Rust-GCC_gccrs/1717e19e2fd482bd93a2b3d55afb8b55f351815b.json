{"sha": "1717e19e2fd482bd93a2b3d55afb8b55f351815b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxN2UxOWUyZmQ0ODJiZDkzYTJiM2Q1NWFmYjhiNTVmMzUxODE1Yg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-26T18:23:55Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-26T18:23:55Z"}, "message": "expr.c (expand_expr): Convert A - const to A + (-const) on RTX level, even for unsigned types.\n\n\t* expr.c (expand_expr) [MINUS_EXPR]: Convert A - const to\n\tA + (-const) on RTX level, even for unsigned types.\n\nFrom-SVN: r57543", "tree": {"sha": "152241aa7a37823990ff2b3d085dc1525ca33140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152241aa7a37823990ff2b3d085dc1525ca33140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1717e19e2fd482bd93a2b3d55afb8b55f351815b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1717e19e2fd482bd93a2b3d55afb8b55f351815b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1717e19e2fd482bd93a2b3d55afb8b55f351815b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1717e19e2fd482bd93a2b3d55afb8b55f351815b/comments", "author": null, "committer": null, "parents": [{"sha": "6cabe79eabc995c20a16ce121cb42d3409b7364c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cabe79eabc995c20a16ce121cb42d3409b7364c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cabe79eabc995c20a16ce121cb42d3409b7364c"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "ebc0d51cbc8a5b1e11c8c2e30d204e3f8081ef3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1717e19e2fd482bd93a2b3d55afb8b55f351815b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1717e19e2fd482bd93a2b3d55afb8b55f351815b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1717e19e2fd482bd93a2b3d55afb8b55f351815b", "patch": "@@ -1,3 +1,8 @@\n+2002-09-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* expr.c (expand_expr) [MINUS_EXPR]: Convert A - const to \n+\tA + (-const) on RTX level, even for unsigned types.\n+\n 2002-09-26  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* reload.c (dup_replacements): New function."}, {"sha": "01c360315b8f98a0d70d3f1da95b6b890b517850", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1717e19e2fd482bd93a2b3d55afb8b55f351815b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1717e19e2fd482bd93a2b3d55afb8b55f351815b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1717e19e2fd482bd93a2b3d55afb8b55f351815b", "patch": "@@ -7804,9 +7804,6 @@ expand_expr (exp, target, tmode, modifier)\n       return op0;\n \n     case PLUS_EXPR:\n-      /* We come here from MINUS_EXPR when the second operand is a\n-         constant.  */\n-    plus_expr:\n       this_optab = ! unsignedp && flag_trapv\n                    && (GET_MODE_CLASS (mode) == MODE_INT)\n                    ? addv_optab : add_optab;\n@@ -7916,6 +7913,8 @@ expand_expr (exp, target, tmode, modifier)\n       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, modifier);\n       op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, modifier);\n \n+      /* We come here from MINUS_EXPR when the second operand is a\n+         constant.  */\n     both_summands:\n       /* Make sure any term that's a sum with a constant comes last.  */\n       if (GET_CODE (op0) == PLUS\n@@ -7985,27 +7984,33 @@ expand_expr (exp, target, tmode, modifier)\n \t  else\n \t    return gen_rtx_MINUS (mode, op0, op1);\n \t}\n-      /* Convert A - const to A + (-const).  */\n-      if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n-\t{\n-\t  tree negated = fold (build1 (NEGATE_EXPR, type,\n-\t\t\t\t       TREE_OPERAND (exp, 1)));\n \n-\t  if (TREE_UNSIGNED (type) || TREE_OVERFLOW (negated))\n-\t    /* If we can't negate the constant in TYPE, leave it alone and\n-\t       expand_binop will negate it for us.  We used to try to do it\n-\t       here in the signed version of TYPE, but that doesn't work\n-\t       on POINTER_TYPEs.  */;\n-\t  else\n-\t    {\n-\t      exp = build (PLUS_EXPR, type, TREE_OPERAND (exp, 0), negated);\n-\t      goto plus_expr;\n-\t    }\n-\t}\n       this_optab = ! unsignedp && flag_trapv\n                    && (GET_MODE_CLASS(mode) == MODE_INT)\n                    ? subv_optab : sub_optab;\n-      goto binop;\n+\n+      /* No sense saving up arithmetic to be done\n+\t if it's all in the wrong mode to form part of an address.\n+\t And force_operand won't know whether to sign-extend or\n+\t zero-extend.  */\n+      if ((modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n+\t  || mode != ptr_mode)\n+\tgoto binop;\n+\n+      if (! safe_from_p (subtarget, TREE_OPERAND (exp, 1), 1))\n+\tsubtarget = 0;\n+\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, modifier);\n+      op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, modifier);\n+\n+      /* Convert A - const to A + (-const).  */\n+      if (GET_CODE (op1) == CONST_INT)\n+\t{\n+\t  op1 = negate_rtx (mode, op1);\n+\t  goto both_summands;\n+\t}\n+\n+      goto binop2;\n \n     case MULT_EXPR:\n       /* If first operand is constant, swap them."}]}