{"sha": "1c91b014923f418e0aab789c5cf57facf04bf266", "node_id": "C_kwDOANBUbNoAKDFjOTFiMDE0OTIzZjQxOGUwYWFiNzg5YzVjZjU3ZmFjZjA0YmYyNjY", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-01-27T10:33:00Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-01-27T10:35:37Z"}, "message": "Fix omp-low ICE for indirect references based off component access [PR103642]\n\nThis issue was triggered after the patch extending syntax for component access\nin map clauses in commit 0ab29cf0bb68960c1f87405f14b4fb2109254e2f.\n\nIn gimplify_scan_omp_clauses, the case for handling indirect accesses (which\ncreates firstprivate ptr and zero-length array section map for such decls) was\nerroneously went into for non-pointer cases (here being the base struct decl),\nso added the\nappropriate checks there.\n\nAdded new testcase is a compile only test for the ICE. The original omptests\nt-partial-struct test actually should not execute correctly, because for\nmap(t.s->a[:N]), map(t.s[:1]) is not implicitly mapped, thus the entire\noffloaded access does not work as is (fixing that omptests test is out of\nscope here).\n\n2022-01-27  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tPR middle-end/103642\n\ngcc/ChangeLog:\n\n\t* gimplify.cc (gimplify_scan_omp_clauses): Do not do indir_p handling\n\tfor non-pointer or non-reference-to-pointer cases.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/pr103642.c: New test.", "tree": {"sha": "49bc3533c159ab9edb912db2b115b9af165f3dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49bc3533c159ab9edb912db2b115b9af165f3dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c91b014923f418e0aab789c5cf57facf04bf266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91b014923f418e0aab789c5cf57facf04bf266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c91b014923f418e0aab789c5cf57facf04bf266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91b014923f418e0aab789c5cf57facf04bf266/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4bf373f2ae97be3adc654054e7e8a982813766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4bf373f2ae97be3adc654054e7e8a982813766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4bf373f2ae97be3adc654054e7e8a982813766"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "cd4b61362b459a59d725831a54ef87a010ec4b49", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c91b014923f418e0aab789c5cf57facf04bf266/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c91b014923f418e0aab789c5cf57facf04bf266/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=1c91b014923f418e0aab789c5cf57facf04bf266", "patch": "@@ -9552,7 +9552,10 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t\t  == REFERENCE_TYPE))\n \t\t    decl = TREE_OPERAND (decl, 0);\n \t\t}\n-\t      if (decl != orig_decl && DECL_P (decl) && indir_p)\n+\t      if (decl != orig_decl && DECL_P (decl) && indir_p\n+\t\t  && (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n+\t\t      || (decl_ref\n+\t\t\t  && TREE_CODE (TREE_TYPE (decl_ref)) == POINTER_TYPE)))\n \t\t{\n \t\t  gomp_map_kind k\n \t\t    = ((code == OACC_EXIT_DATA || code == OMP_TARGET_EXIT_DATA)"}, {"sha": "bbd0896841f66df9054b5d8f3d572ceb60e87087", "filename": "gcc/testsuite/c-c++-common/gomp/pr103642.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c91b014923f418e0aab789c5cf57facf04bf266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr103642.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c91b014923f418e0aab789c5cf57facf04bf266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr103642.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr103642.c?ref=1c91b014923f418e0aab789c5cf57facf04bf266", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/103642 */\n+/* { dg-do compile } */\n+\n+#include <stdlib.h>\n+\n+typedef struct\n+{\n+  int *a;\n+} S;\n+\n+typedef struct\n+{\n+  S *s;\n+  int *ptr;\n+} T;\n+\n+#define N 10\n+\n+int main (void)\n+{\n+  T t;\n+  t.s = (S *) malloc (sizeof (S));\n+  t.s->a = (int *) malloc (sizeof(int) * N);\n+\n+  #pragma omp target map(from: t.s->a[:N])\n+  {\n+    t.s->a[0] = 1;\n+  }\n+\n+  free (t.s->a);\n+  free (t.s);\n+\n+  return 0;\n+}"}]}