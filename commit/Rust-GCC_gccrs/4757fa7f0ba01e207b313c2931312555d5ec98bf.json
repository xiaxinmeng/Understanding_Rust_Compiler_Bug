{"sha": "4757fa7f0ba01e207b313c2931312555d5ec98bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1N2ZhN2YwYmEwMWUyMDdiMzEzYzI5MzEzMTI1NTVkNWVjOThiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-08-12T17:33:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-08-12T17:33:39Z"}, "message": "re PR c++/67161 (ICE with a static_assert using our internal __not/__or/__and traits)\n\n\tPR c++/67161\n\t* error.c (dump_decl) [TEMPLATE_ID_EXPR]: Pass\n\tTFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS.\n\nFrom-SVN: r226827", "tree": {"sha": "8b878b690b6ca0db3a43e5eca10ba2528c8ef0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b878b690b6ca0db3a43e5eca10ba2528c8ef0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4757fa7f0ba01e207b313c2931312555d5ec98bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757fa7f0ba01e207b313c2931312555d5ec98bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4757fa7f0ba01e207b313c2931312555d5ec98bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757fa7f0ba01e207b313c2931312555d5ec98bf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b893e375096038ac99521a97b7fa346b016bdb78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b893e375096038ac99521a97b7fa346b016bdb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b893e375096038ac99521a97b7fa346b016bdb78"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "bed0a5eb0234804436328fcab08be37f5c46936b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4757fa7f0ba01e207b313c2931312555d5ec98bf", "patch": "@@ -1,3 +1,9 @@\n+2015-08-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67161\n+\t* error.c (dump_decl) [TEMPLATE_ID_EXPR]: Pass\n+\tTFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS.\n+\n 2015-08-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67152"}, {"sha": "ae3e0921c5c9964b78bcc88944028330b7d7b4fe", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4757fa7f0ba01e207b313c2931312555d5ec98bf", "patch": "@@ -1212,7 +1212,8 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \tif (args == error_mark_node)\n \t  pp_string (pp, M_(\"<template arguments error>\"));\n \telse if (args)\n-\t  dump_template_argument_list (pp, args, flags);\n+\t  dump_template_argument_list\n+\t    (pp, args, flags|TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS);\n       \tpp_cxx_end_template_argument_list (pp);\n       }\n       break;"}, {"sha": "2fc21a50631870e9f76a32a915ab62b9472d35eb", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ44.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4757fa7f0ba01e207b313c2931312555d5ec98bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C?ref=4757fa7f0ba01e207b313c2931312555d5ec98bf", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/67161\n+// { dg-do compile { target c++14 } }\n+\n+template <typename _Tp> struct integral_constant {\n+  static constexpr _Tp value = 0;\n+};\n+template <bool, typename, typename> struct conditional;\n+template <typename...> struct __or_;\n+template <typename _B1, typename _B2>\n+struct __or_<_B1, _B2> : conditional<1, _B1, _B2>::type {};\n+template <typename...> struct __and_;\n+template <typename> struct __not_ : integral_constant<bool> {};\n+template <typename> struct __is_void_helper : integral_constant<bool> {};\n+template <typename> struct is_void : __is_void_helper<int> {};\n+template <bool, typename _Iftrue, typename> struct conditional {\n+  typedef _Iftrue type;\n+};\n+template <bool _Cond, typename _Iftrue, typename _Iffalse>\n+using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;\n+template <typename...> using common_type_t = int;\n+template <typename, int> struct array {};\n+template <typename _Tp> constexpr int is_void_v = is_void<_Tp>::value;\n+template <typename _Dest = void, typename... _Types>\n+constexpr auto make_array()\n+    -> array<conditional_t<is_void_v<_Dest>, common_type_t<>, _Dest>,\n+             sizeof...(_Types)> {\n+  static_assert(__or_<__not_<is_void<_Dest>>, __and_<>>::value, \"\"); // { dg-error \"static assert\" }\n+}\n+auto d = make_array();"}]}