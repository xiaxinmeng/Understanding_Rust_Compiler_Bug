{"sha": "83c32f2e4802d9f53f9a98427c6e568898056e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjMzJmMmU0ODAyZDlmNTNmOWE5ODQyN2M2ZTU2ODg5ODA1NmU0NQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-01-15T20:04:57Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-01-15T20:04:57Z"}, "message": "re PR target/19336 (HPPA64 does not support TImode)\n\n\tPR target/19336\n\t* pa.c (pa_scalar_mode_supported_p): New function.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n\t* pa.h (MIN_UNITS_PER_WORD): Add comment.\n\nFrom-SVN: r93703", "tree": {"sha": "9fb312d9df2c91cafebc7fe64cbd54bb431f34b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fb312d9df2c91cafebc7fe64cbd54bb431f34b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83c32f2e4802d9f53f9a98427c6e568898056e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c32f2e4802d9f53f9a98427c6e568898056e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c32f2e4802d9f53f9a98427c6e568898056e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c32f2e4802d9f53f9a98427c6e568898056e45/comments", "author": null, "committer": null, "parents": [{"sha": "2d5ca9a017f4ca590249b3bc987fc7c1803b00ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5ca9a017f4ca590249b3bc987fc7c1803b00ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5ca9a017f4ca590249b3bc987fc7c1803b00ee"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "ab3a41e46d1bde7091319dc554876c10f977ae5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83c32f2e4802d9f53f9a98427c6e568898056e45", "patch": "@@ -1,5 +1,10 @@\n 2005-01-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n+\tPR target/19336\n+\t* pa.c (pa_scalar_mode_supported_p): New function.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n+\t* pa.h (MIN_UNITS_PER_WORD): Add comment.\n+\n \t* pa-protos.h (prefetch_operand): Delete.\n \t(prefetch_cc_operand, prefetch_nocc_operand): New declations.\n \t* pa.c (prefetch_operand): Delete."}, {"sha": "c470165f1511d878a9fcc2f1527ec476865e87df", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=83c32f2e4802d9f53f9a98427c6e568898056e45", "patch": "@@ -123,6 +123,7 @@ static void pa_asm_out_destructor (rtx, int);\n static void pa_init_builtins (void);\n static rtx hppa_builtin_saveregs (void);\n static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n+static bool pa_scalar_mode_supported_p (enum machine_mode);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel (const char *)\n@@ -292,6 +293,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR hppa_gimplify_va_arg_expr\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P pa_scalar_mode_supported_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -6219,6 +6223,50 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n     }\n }\n \n+/* True if MODE is valid for the target.  By \"valid\", we mean able to\n+   be manipulated in non-trivial ways.  In particular, this means all\n+   the arithmetic is supported.\n+\n+   Currently, TImode is not valid as the HP 64-bit runtime documentation\n+   doesn't document the alignment and calling conventions for this type. \n+   Thus, we return false when PRECISION is 2 * BITS_PER_WORD and\n+   2 * BITS_PER_WORD isn't equal LONG_LONG_TYPE_SIZE.  */\n+\n+static bool\n+pa_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  int precision = GET_MODE_PRECISION (mode);\n+\n+  switch (GET_MODE_CLASS (mode))\n+    {\n+    case MODE_PARTIAL_INT:\n+    case MODE_INT:\n+      if (precision == CHAR_TYPE_SIZE)\n+\treturn true;\n+      if (precision == SHORT_TYPE_SIZE)\n+\treturn true;\n+      if (precision == INT_TYPE_SIZE)\n+\treturn true;\n+      if (precision == LONG_TYPE_SIZE)\n+\treturn true;\n+      if (precision == LONG_LONG_TYPE_SIZE)\n+\treturn true;\n+      return false;\n+\n+    case MODE_FLOAT:\n+      if (precision == FLOAT_TYPE_SIZE)\n+\treturn true;\n+      if (precision == DOUBLE_TYPE_SIZE)\n+\treturn true;\n+      if (precision == LONG_DOUBLE_TYPE_SIZE)\n+\treturn true;\n+      return false;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* This routine handles all the normal conditional branch sequences we\n    might need to generate.  It handles compare immediate vs compare\n    register, nullification of delay slots, varying length branches,"}, {"sha": "48e459a84ffc55debcdd9c9d0c013d8ba5ce09a2", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c32f2e4802d9f53f9a98427c6e568898056e45/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=83c32f2e4802d9f53f9a98427c6e568898056e45", "patch": "@@ -484,6 +484,15 @@ typedef struct machine_function GTY(())\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)\n+\n+/* Minimum number of units in a word.  If this is undefined, the default\n+   is UNITS_PER_WORD.  Otherwise, it is the constant value that is the\n+   smallest value that UNITS_PER_WORD can have at run-time.\n+\n+   FIXME: This needs to be 4 when TARGET_64BIT is true to suppress the\n+   building of various TImode routines in libgcc.  The HP runtime\n+   specification doesn't provide the alignment requirements and calling\n+   conventions for TImode variables.  */\n #define MIN_UNITS_PER_WORD 4\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */"}]}