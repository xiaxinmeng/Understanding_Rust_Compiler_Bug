{"sha": "f4581282e57ef0f609b21be81e641911965c3bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1ODEyODJlNTdlZjBmNjA5YjIxYmU4MWU2NDE5MTE5NjVjM2JkOA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-04-02T20:55:02Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-04-02T20:55:02Z"}, "message": "re PR rtl-optimization/60650 ([ARM] LRA ICE in assign_by_spills)\n\n2014-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60650\n\t* lra-constraints.c (process_alt_operands): Decrease reject for\n\tearlyclobber matching.\n\n2014-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/60650\n\t* gcc.target/arm/pr60650-2.c: New.\n\nFrom-SVN: r209038", "tree": {"sha": "a7d5d954780e636400f8827190e1f3240b9c4a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d5d954780e636400f8827190e1f3240b9c4a2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4581282e57ef0f609b21be81e641911965c3bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4581282e57ef0f609b21be81e641911965c3bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4581282e57ef0f609b21be81e641911965c3bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4581282e57ef0f609b21be81e641911965c3bd8/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab18f2f51cc15d464943663949d9872a15108b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab18f2f51cc15d464943663949d9872a15108b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab18f2f51cc15d464943663949d9872a15108b0a"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "1b2f824ff5d773295e25ab5a91c13e5bf17b74ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4581282e57ef0f609b21be81e641911965c3bd8", "patch": "@@ -1,3 +1,9 @@\n+2014-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60650\n+\t* lra-constraints.c (process_alt_operands): Decrease reject for\n+\tearlyclobber matching.\n+\n 2014-04-02  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_insv): Use GET_MODE_BITSIZE.\n@@ -280,7 +286,7 @@\n 2014-03-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/60650\n-\t* lra-asign.c (find_hard_regno_for, spill_for): Add parameter\n+\t* lra-assign.c (find_hard_regno_for, spill_for): Add parameter\n \tfirst_p.  Use it.\n \t(find_spills_for): New.\n \t(assign_by_spills): Pass the new parameter to find_hard_regno_for."}, {"sha": "aac50876d21a5c9be55803d9022892861984bf47", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f4581282e57ef0f609b21be81e641911965c3bd8", "patch": "@@ -1747,12 +1747,27 @@ process_alt_operands (int only_alternative)\n \t\t\t\t  [GET_MODE (*curr_id->operand_loc[m])]);\n \t\t\t  }\n \n-\t\t\t/* We prefer no matching alternatives because\n-\t\t\t   it gives more freedom in RA.\t */\n-\t\t\tif (operand_reg[nop] == NULL_RTX\n-\t\t\t    || (find_regno_note (curr_insn, REG_DEAD,\n-\t\t\t\t\t\t REGNO (operand_reg[nop]))\n-\t\t\t\t == NULL_RTX))\n+\t\t\t/* Prefer matching earlyclobber alternative as\n+\t\t\t   it results in less hard regs required for\n+\t\t\t   the insn than a non-matching earlyclobber\n+\t\t\t   alternative.  */\n+\t\t\tif (curr_static_id->operand[m].early_clobber)\n+\t\t\t  {\n+\t\t\t    if (lra_dump_file != NULL)\n+\t\t\t      fprintf\n+\t\t\t\t(lra_dump_file,\n+\t\t\t\t \"            %d Matching earlyclobber alt:\"\n+\t\t\t\t \" reject--\\n\",\n+\t\t\t\t nop);\n+\t\t\t    reject--;\n+\t\t\t  }\n+\t\t\t/* Otherwise we prefer no matching\n+\t\t\t   alternatives because it gives more freedom\n+\t\t\t   in RA.  */\n+\t\t\telse if (operand_reg[nop] == NULL_RTX\n+\t\t\t\t || (find_regno_note (curr_insn, REG_DEAD,\n+\t\t\t\t\t\t      REGNO (operand_reg[nop]))\n+\t\t\t\t     == NULL_RTX))\n \t\t\t  {\n \t\t\t    if (lra_dump_file != NULL)\n \t\t\t      fprintf\n@@ -2143,7 +2158,7 @@ process_alt_operands (int only_alternative)\n \t\t}\n \t      /* If the operand is dying, has a matching constraint,\n \t\t and satisfies constraints of the matched operand\n-\t\t which failed to satisfy the own constraints, probably\n+\t\t which failed to satisfy the own constraints, most probably\n \t\t the reload for this operand will be gone.  */\n \t      if (this_alternative_matches >= 0\n \t\t  && !curr_alt_win[this_alternative_matches]"}, {"sha": "2decdf152ba95ca6507fc435186c9e210a7c7521", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4581282e57ef0f609b21be81e641911965c3bd8", "patch": "@@ -1,3 +1,8 @@\n+2014-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/60650\n+\t* gcc.target/arm/pr60650-2.c: New.\n+\n 2014-04-02  Joseph Myers  <joseph@codesourcery.cmo>\n \n \t* gcc.target/i386/avx2-vpand-3.c,"}, {"sha": "19467607b6edc2c4c7114679c854c33264089be4", "filename": "gcc/testsuite/gcc.target/arm/pr60650-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60650-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4581282e57ef0f609b21be81e641911965c3bd8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60650-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60650-2.c?ref=f4581282e57ef0f609b21be81e641911965c3bd8", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -march=armv7-a\" } */\n+\n+int a, h, j;\n+long long d, e, i;\n+int f;\n+fn1 (void *p1, int p2)\n+{\n+    switch (p2)\n+    case 8:\n+{\n+    register b = *(long long *) p1, c asm (\"r2\");\n+    asm (\"%0\": \"=r\" (a), \"=r\" (c):\"r\" (b), \"r\" (0));\n+    *(long long *) p1 = c;\n+    }\n+}\n+\n+fn2 ()\n+{\n+    int k;\n+    k = f;\n+    while (1)\n+    {\n+        fn1 (&i, sizeof i);\n+        e = d + k;\n+        switch (d)\n+        case 0:\n+        (\n+        {\n+            register l asm (\"r4\");\n+            register m asm (\"r0\");\n+            asm (\"  .err  .endif\\n\\t\": \"=r\" (h), \"=r\" (j):\"r\" (m),\n+            \"r\"\n+            (l));;\n+        });\n+    }\n+}"}]}