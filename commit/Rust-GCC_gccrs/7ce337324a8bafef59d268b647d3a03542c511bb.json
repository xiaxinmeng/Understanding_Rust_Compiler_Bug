{"sha": "7ce337324a8bafef59d268b647d3a03542c511bb", "node_id": "C_kwDOANBUbNoAKDdjZTMzNzMyNGE4YmFmZWY1OWQyNjhiNjQ3ZDNhMDM1NDJjNTExYmI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:21:37Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:08Z"}, "message": "RISC-V: Add vnmsac vx rv64 C++ api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-3.C: New test.", "tree": {"sha": "ffd6d10a36d8e092e0b700a1d16efebe12379f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd6d10a36d8e092e0b700a1d16efebe12379f90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce337324a8bafef59d268b647d3a03542c511bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce337324a8bafef59d268b647d3a03542c511bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce337324a8bafef59d268b647d3a03542c511bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce337324a8bafef59d268b647d3a03542c511bb/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249be04bb830eae753c6171bb77c03872f5cee90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249be04bb830eae753c6171bb77c03872f5cee90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/249be04bb830eae753c6171bb77c03872f5cee90"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "d7b5f3b96b1096e592befb99dfe999c4c53fd607", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-1.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "d930cd0f10ad2cf381802f547067bcd703135017", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-2.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "56573a42a36761ef7831d29e77cff100adba3a31", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv64-3.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "6ff4718a86766688826b17225c45976ddcbd1b79", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv64-1.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-1.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "f3dd8c0fb7aed041efbffa1a3fe37e9f6b69308f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv64-2.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-2.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "e8ef1727a3573f3af79a05ca71ade9571e84393c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv64-3.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv64-3.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "ec6801a4f9ccbcc36cd15b573888b271d377fd69", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-1.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "e46b2f94cd999c5dabec1a5bad7c3622ca8bc7e9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-2.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "17a0dd39d2d4c77c7db50d69ae7b39fad6966d98", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv64-3.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "e404589f8c373b3f916e41ee68e6817c833aebb1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-1.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "4a1fcc9b1e757a97afceb0c9c81cb8da571a526c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-2.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "94fccae549f28d25b3e540faf934776adf53eef3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv64-3.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "7c83dde7d75eb9ff3c4046f6a14a46df254a2fd5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-1.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "0476655e2546d6ba1b87d2404c6b8b2438443d1b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-2.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "44f70c69ed9f15823ac4cf1714bc1cb2ceba8bd0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce337324a8bafef59d268b647d3a03542c511bb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv64-3.C?ref=7ce337324a8bafef59d268b647d3a03542c511bb", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}]}