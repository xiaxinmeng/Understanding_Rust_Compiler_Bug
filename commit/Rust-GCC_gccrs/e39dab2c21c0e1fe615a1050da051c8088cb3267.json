{"sha": "e39dab2c21c0e1fe615a1050da051c8088cb3267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5ZGFiMmMyMWMwZTFmZTYxNWExMDUwZGEwNTFjODA4OGNiMzI2Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-05-10T19:52:20Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-05-10T19:52:20Z"}, "message": "Simple bitop reassoc in match.pd\n\n2016-05-10  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* fold-const.c (fold_binary_loc) [(X ^ Y) & Y]: Remove and merge with...\n\t* match.pd ((X & Y) ^ Y): ... this.\n\t((X & Y) & Y, (X | Y) | Y, (X ^ Y) ^ Y, (X & Y) & (X & Z), (X | Y)\n\t| (X | Z), (X ^ Y) ^ (X ^ Z)): New transformations.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/bit-assoc.c: New testcase.\n\t* gcc.dg/tree-ssa/pr69270.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp59.c: Disable forwprop.\n\nFrom-SVN: r236103", "tree": {"sha": "0a73b6e9c04150d305bc301e3cee930e37a9d50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a73b6e9c04150d305bc301e3cee930e37a9d50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e39dab2c21c0e1fe615a1050da051c8088cb3267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39dab2c21c0e1fe615a1050da051c8088cb3267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39dab2c21c0e1fe615a1050da051c8088cb3267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39dab2c21c0e1fe615a1050da051c8088cb3267/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "601070fce9761f7665d5916c786fe065f3165c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601070fce9761f7665d5916c786fe065f3165c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601070fce9761f7665d5916c786fe065f3165c00"}], "stats": {"total": 128, "additions": 82, "deletions": 46}, "files": [{"sha": "0f20a323c6bef894fa67992cc1b9dc7b2e849d42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -1,3 +1,10 @@\n+2016-05-10  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (fold_binary_loc) [(X ^ Y) & Y]: Remove and merge with...\n+\t* match.pd ((X & Y) ^ Y): ... this.\n+\t((X & Y) & Y, (X | Y) | Y, (X ^ Y) ^ Y, (X & Y) & (X & Z), (X | Y)\n+\t| (X | Z), (X ^ Y) ^ (X ^ Z)): New transformations.\n+\n 2016-05-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* read-md.c (require_char_ws): New function."}, {"sha": "0ef48ddd54e446e4f8d65e9dc111f2eaed43d9d5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -10071,45 +10071,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t  build_zero_cst (TREE_TYPE (tem)));\n \t}\n \n-      /* Fold (X ^ Y) & Y as ~X & Y.  */\n-      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg1));\n-\t}\n-      /* Fold (X ^ Y) & X as ~Y & X.  */\n-      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n-\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg1));\n-\t}\n-      /* Fold X & (X ^ Y) as X & ~Y.  */\n-      if (TREE_CODE (arg1) == BIT_XOR_EXPR\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_convert_loc (loc, type, arg0),\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem));\n-\t}\n-      /* Fold X & (Y ^ X) as ~Y & X.  */\n-      if (TREE_CODE (arg1) == BIT_XOR_EXPR\n-\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n-\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n-\t{\n-\t  tem = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n-\t  return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, BIT_NOT_EXPR, type, tem),\n-\t\t\t      fold_convert_loc (loc, type, arg0));\n-\t}\n-\n       /* Fold (X * Y) & -(1 << CST) to X * Y if Y is a constant\n          multiple of 1 << CST.  */\n       if (TREE_CODE (arg1) == INTEGER_CST)"}, {"sha": "5b3cb3bfd5e86dce2708c909b76d37da09855ca9", "filename": "gcc/match.pd", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -674,10 +674,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n   (bit_xor (convert @0) (bit_not @1))))\n \n-/* Fold (X & Y) ^ Y as ~X & Y.  */\n-(simplify\n- (bit_xor:c (bit_and:c @0 @1) @1)\n- (bit_and (bit_not @0) @1))\n+/* Fold (X & Y) ^ Y and (X ^ Y) & Y as ~X & Y.  */\n+(for opo (bit_and bit_xor)\n+     opi (bit_xor bit_and)\n+ (simplify\n+  (opo:c (opi:c @0 @1) @1) \n+  (bit_and (bit_not @0) @1)))\n \n /* Given a bit-wise operation CODE applied to ARG0 and ARG1, see if both\n    operands are another bit-wise operation with a common input.  If so,\n@@ -693,6 +695,35 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && tree_nop_conversion_p (type, TREE_TYPE (@2)))\n    (rop (convert @0) (op (convert @1) (convert @2))))))\n \n+/* Some simple reassociation for bit operations, also handled in reassoc.  */\n+/* (X & Y) & Y -> X & Y\n+   (X | Y) | Y -> X | Y  */\n+(for op (bit_and bit_ior)\n+ (simplify\n+  (op:c (convert?@2 (op:c @0 @1)) (convert? @1))\n+  @2))\n+/* (X ^ Y) ^ Y -> X  */\n+(simplify\n+ (bit_xor:c (convert? (bit_xor:c @0 @1)) (convert? @1))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert @0)))\n+/* (X & Y) & (X & Z) -> (X & Y) & Z\n+   (X | Y) | (X | Z) -> (X | Y) | Z  */\n+(for op (bit_and bit_ior)\n+ (simplify\n+  (op:c (convert1?@3 (op:c@4 @0 @1)) (convert2?@5 (op:c@6 @0 @2)))\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n+       && tree_nop_conversion_p (type, TREE_TYPE (@2)))\n+   (if (single_use (@5) && single_use (@6))\n+    (op @3 (convert @2))\n+    (if (single_use (@3) && single_use (@4))\n+     (op (convert @1) @5))))))\n+/* (X ^ Y) ^ (X ^ Z) -> Y ^ Z  */\n+(simplify\n+ (bit_xor (convert1? (bit_xor:c @0 @1)) (convert2? (bit_xor:c @0 @2)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n+      && tree_nop_conversion_p (type, TREE_TYPE (@2)))\n+  (convert (bit_xor @1 @2))))\n \n (simplify\n  (abs (abs@1 @0))"}, {"sha": "ee47bd8bdf74908f86c03957f23dc31db9ebd257", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -1,3 +1,9 @@\n+2016-05-10  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/bit-assoc.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr69270.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp59.c: Disable forwprop.\n+\n 2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/70799"}, {"sha": "b563f5e404cb850e08ff977e573b209a253203df", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bit-assoc.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbit-assoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbit-assoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbit-assoc.c?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1-details -fdump-tree-ccp1-details\" } */\n+\n+int f1(int a, int b){\n+  int c = a & b;\n+  return c & b;\n+}\n+int f2(int a, int b){\n+  int c = a | b;\n+  return b | c;\n+}\n+int g1(int a, int b, int c){\n+  int d = a & b;\n+  int e = b & c;\n+  return d & e;\n+}\n+int g2(int a, int b, int c){\n+  int d = a | b;\n+  int e = c | b;\n+  return d | e;\n+}\n+int g3(int a, int b, int c){\n+  int d = a ^ b;\n+  int e = b ^ c;\n+  return e ^ d;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Match-and-simplified\" 2 \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"gimple_simplified\" 3 \"forwprop1\" } } */"}, {"sha": "28f6d0fac286574a77209b9735f43e7e933c3ae3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69270.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -7,8 +7,10 @@\n /* { dg-final { scan-tree-dump-times \"Replaced .bufferstep_\\[0-9\\]+. with constant .1.\" 1 \"dom3\"} } */\n \n /* And some assignments ought to fold down to constants.  */\n-/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 1;\" 2 \"dom3\"} } */\n-/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 0;\" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = -1;\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = -2;\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 1;\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 0;\" 1 \"dom3\"} } */\n \n /* The XOR operations should have been optimized to constants.  */\n /* { dg-final { scan-tree-dump-not \"bit_xor\" \"dom3\"} } */"}, {"sha": "5f6e9d956f096bb87f457c6947fdd23ed65cf1e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp59.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39dab2c21c0e1fe615a1050da051c8088cb3267/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp59.c?ref=e39dab2c21c0e1fe615a1050da051c8088cb3267", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fno-tree-forwprop -fdump-tree-vrp1\" } */\n \n int f(int x)\n {"}]}