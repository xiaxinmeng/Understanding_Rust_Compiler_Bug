{"sha": "03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmYmU3MThjYjljZDZhYTUxNDhjOGYxM2MwNTM5ZTdmMDcyNTZmMQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-04-14T12:17:41Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-04-14T12:17:41Z"}, "message": "cfgcleanup.c (try_optimize_cfg): Replace call to delete_insn_chain by call to delete_insn.\n\n2012-04-14  Tom de Vries  <tom@codesourcery.com>\n\n\t* cfgcleanup.c (try_optimize_cfg): Replace call to delete_insn_chain by\n\tcall to delete_insn.  Remove code to reorder BASIC_BLOCK note and\n\tDELETED_LABEL note, and move it to ...\n\t* cfgrtl.c (delete_insn): ... here.  Change return type to void.\n\t(delete_insn_and_edges): Likewise.\n\t(delete_insn_chain): Handle new return type of delete_insn.  Delete\n\tchain backwards rather than forwards.\n\t* rtl.h (delete_insn, delete_insn_and_edges): Change return type to\n\tvoid.\n\t* cfglayout.c (fixup_reorder_chain): Delete unused label.\n\nFrom-SVN: r186451", "tree": {"sha": "4f6d14468c3e8c66203f590c5cce7d44cffa1a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f6d14468c3e8c66203f590c5cce7d44cffa1a49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/comments", "author": null, "committer": null, "parents": [{"sha": "960bfb6929fa5c463267b962b9ff9dabdb6df3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960bfb6929fa5c463267b962b9ff9dabdb6df3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960bfb6929fa5c463267b962b9ff9dabdb6df3f3"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "c0a4ee9c29941ebbc8c9bac0e75826e7b3f0039c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "patch": "@@ -1,3 +1,16 @@\n+2012-04-14  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* cfgcleanup.c (try_optimize_cfg): Replace call to delete_insn_chain by\n+\tcall to delete_insn.  Remove code to reorder BASIC_BLOCK note and\n+\tDELETED_LABEL note, and move it to ...\n+\t* cfgrtl.c (delete_insn): ... here.  Change return type to void.\n+\t(delete_insn_and_edges): Likewise.\n+\t(delete_insn_chain): Handle new return type of delete_insn.  Delete\n+\tchain backwards rather than forwards.\n+\t* rtl.h (delete_insn, delete_insn_and_edges): Change return type to\n+\tvoid.\n+\t* cfglayout.c (fixup_reorder_chain): Delete unused label.\n+\n 2012-04-14  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h: Update copyrights;"}, {"sha": "d06a9b1a90336c8c732f5bf189f211e840e222f4", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "patch": "@@ -2637,20 +2637,7 @@ try_optimize_cfg (int mode)\n \t\t      || ! label_is_jump_target_p (BB_HEAD (b),\n \t\t\t\t\t\t   BB_END (single_pred (b)))))\n \t\t{\n-\t\t  rtx label = BB_HEAD (b);\n-\n-\t\t  delete_insn_chain (label, label, false);\n-\t\t  /* If the case label is undeletable, move it after the\n-\t\t     BASIC_BLOCK note.  */\n-\t\t  if (NOTE_KIND (BB_HEAD (b)) == NOTE_INSN_DELETED_LABEL)\n-\t\t    {\n-\t\t      rtx bb_note = NEXT_INSN (BB_HEAD (b));\n-\n-\t\t      reorder_insns_nobb (label, label, bb_note);\n-\t\t      BB_HEAD (b) = bb_note;\n-\t\t      if (BB_END (b) == bb_note)\n-\t\t\tBB_END (b) = label;\n-\t\t    }\n+\t\t  delete_insn (BB_HEAD (b));\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \"Deleted label in block %i.\\n\",\n \t\t\t     b->index);"}, {"sha": "c6e1f8324d88ad07d8e41fa710c5272e3c38ab4e", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "patch": "@@ -857,6 +857,9 @@ fixup_reorder_chain (void)\n \t\t\t\t       (e_taken->src, e_taken->dest));\n \t\t  e_taken->flags |= EDGE_FALLTHRU;\n \t\t  update_br_prob_note (bb);\n+\t\t  if (LABEL_NUSES (ret_label) == 0\n+\t\t      && single_pred_p (e_taken->dest))\n+\t\t    delete_insn (ret_label);\n \t\t  continue;\n \t\t}\n \t    }"}, {"sha": "e3ffc9c656e118a740739aa5d27c686d63f04864", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "patch": "@@ -111,12 +111,11 @@ can_delete_label_p (const_rtx label)\n \t  && !in_expr_list_p (forced_labels, label));\n }\n \n-/* Delete INSN by patching it out.  Return the next insn.  */\n+/* Delete INSN by patching it out.  */\n \n-rtx\n+void\n delete_insn (rtx insn)\n {\n-  rtx next = NEXT_INSN (insn);\n   rtx note;\n   bool really_delete = true;\n \n@@ -128,11 +127,22 @@ delete_insn (rtx insn)\n       if (! can_delete_label_p (insn))\n \t{\n \t  const char *name = LABEL_NAME (insn);\n+\t  basic_block bb = BLOCK_FOR_INSN (insn);\n+\t  rtx bb_note = NEXT_INSN (insn);\n \n \t  really_delete = false;\n \t  PUT_CODE (insn, NOTE);\n \t  NOTE_KIND (insn) = NOTE_INSN_DELETED_LABEL;\n \t  NOTE_DELETED_LABEL_NAME (insn) = name;\n+\n+\t  if (bb_note != NULL_RTX && NOTE_INSN_BASIC_BLOCK_P (bb_note)\n+\t      && BLOCK_FOR_INSN (bb_note) == bb)\n+\t    {\n+\t      reorder_insns_nobb (insn, insn, bb_note);\n+\t      BB_HEAD (bb) = bb_note;\n+\t      if (BB_END (bb) == bb_note)\n+\t\tBB_END (bb) = insn;\n+\t    }\n \t}\n \n       remove_node_from_expr_list (insn, &nonlocal_goto_handler_labels);\n@@ -190,26 +200,22 @@ delete_insn (rtx insn)\n \t    LABEL_NUSES (label)--;\n \t}\n     }\n-\n-  return next;\n }\n \n /* Like delete_insn but also purge dead edges from BB.  */\n \n-rtx\n+void\n delete_insn_and_edges (rtx insn)\n {\n-  rtx x;\n   bool purge = false;\n \n   if (INSN_P (insn)\n       && BLOCK_FOR_INSN (insn)\n       && BB_END (BLOCK_FOR_INSN (insn)) == insn)\n     purge = true;\n-  x = delete_insn (insn);\n+  delete_insn (insn);\n   if (purge)\n     purge_dead_edges (BLOCK_FOR_INSN (insn));\n-  return x;\n }\n \n /* Unlink a chain of insns between START and FINISH, leaving notes\n@@ -219,25 +225,26 @@ delete_insn_and_edges (rtx insn)\n void\n delete_insn_chain (rtx start, rtx finish, bool clear_bb)\n {\n-  rtx next;\n+  rtx prev, current;\n \n   /* Unchain the insns one by one.  It would be quicker to delete all of these\n      with a single unchaining, rather than one at a time, but we need to keep\n      the NOTE's.  */\n+  current = finish;\n   while (1)\n     {\n-      next = NEXT_INSN (start);\n-      if (NOTE_P (start) && !can_delete_note_p (start))\n+      prev = PREV_INSN (current);\n+      if (NOTE_P (current) && !can_delete_note_p (current))\n \t;\n       else\n-\tnext = delete_insn (start);\n+\tdelete_insn (current);\n \n-      if (clear_bb && !INSN_DELETED_P (start))\n-\tset_block_for_insn (start, NULL);\n+      if (clear_bb && !INSN_DELETED_P (current))\n+\tset_block_for_insn (current, NULL);\n \n-      if (start == finish)\n+      if (current == start)\n \tbreak;\n-      start = next;\n+      current = prev;\n     }\n }\n \f"}, {"sha": "795a75f1a9c8d102a92bdf4b3cb4a7d00075411e", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fbe718cb9cd6aa5148c8f13c0539e7f07256f1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=03fbe718cb9cd6aa5148c8f13c0539e7f07256f1", "patch": "@@ -2443,12 +2443,12 @@ extern void add_insn_before (rtx, rtx, struct basic_block_def *);\n extern void add_insn_after (rtx, rtx, struct basic_block_def *);\n extern void remove_insn (rtx);\n extern rtx emit (rtx);\n-extern rtx delete_insn (rtx);\n+extern void delete_insn (rtx);\n extern rtx entry_of_function (void);\n extern void emit_insn_at_entry (rtx);\n extern void delete_insn_chain (rtx, rtx, bool);\n extern rtx unlink_insn_chain (rtx, rtx);\n-extern rtx delete_insn_and_edges (rtx);\n+extern void delete_insn_and_edges (rtx);\n extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);\n extern rtx gen_const_mem (enum machine_mode, rtx);\n extern rtx gen_frame_mem (enum machine_mode, rtx);"}]}