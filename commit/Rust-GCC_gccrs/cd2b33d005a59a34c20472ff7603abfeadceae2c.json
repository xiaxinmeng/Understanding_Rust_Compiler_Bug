{"sha": "cd2b33d005a59a34c20472ff7603abfeadceae2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyYjMzZDAwNWE1OWEzNGMyMDQ3MmZmNzYwM2FiZmVhZGNlYWUyYw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-05-23T20:52:58Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-05-23T20:52:58Z"}, "message": "Remove compile time warnings when building arm.o\n\nFrom-SVN: r34114", "tree": {"sha": "66517deb39d48d68eade5de976b5f32f42e6eb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66517deb39d48d68eade5de976b5f32f42e6eb1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd2b33d005a59a34c20472ff7603abfeadceae2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2b33d005a59a34c20472ff7603abfeadceae2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd2b33d005a59a34c20472ff7603abfeadceae2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2b33d005a59a34c20472ff7603abfeadceae2c/comments", "author": null, "committer": null, "parents": [{"sha": "8ceaac3c6ee1c1b36dc9e6d37ab01fa2b565105e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ceaac3c6ee1c1b36dc9e6d37ab01fa2b565105e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ceaac3c6ee1c1b36dc9e6d37ab01fa2b565105e"}], "stats": {"total": 156, "additions": 90, "deletions": 66}, "files": [{"sha": "85e6e23f264b3afcc32b2bb27917e1fb76ac6f4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -1,3 +1,19 @@\n+2000-05-23  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* configure.in: Treat 'strongarm' as if it were 'arm' when\n+\tdetermining cpu type.\n+\n+\t* configure: Regenerate.\n+\n+\t* config/arm/arm.c: Change 'char *' to 'const char *' for cases\n+\twhere constant strings are involved.\n+\n+\t* config/arm/arm.h (arm_condition_codes): Change type to 'const\n+\tchar *'.\n+\n+\t* config/arm/arm-protos.h: Change 'char *' to 'const char *' for\n+\tcases where constant strings are involved.\n+\n Tue May 23 15:08:31 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* config/sh/sh.c (gen_far_branch, split_branches): Update"}, {"sha": "7bdb65b5549bb3c56cc9d45cace3d7fb1b63c631", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -27,7 +27,7 @@ extern int    arm_process_pragma\tPARAMS ((int (*)(void), void (*) (int),\n \t\t\t\t\t\tchar *));\n extern void   arm_finalize_pic\t\tPARAMS ((void));\n extern int    arm_volatile_func\t\tPARAMS ((void));\n-extern char * arm_output_epilogue\tPARAMS ((int));\n+extern const char * arm_output_epilogue\tPARAMS ((int));\n extern void   output_func_epilogue\tPARAMS ((int));\n extern void   arm_expand_prologue\tPARAMS ((void));\n /* Used in arm.md, but defined in output.c.  */\n@@ -40,7 +40,7 @@ extern int    arm_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree));\n extern int    arm_comp_type_attributes\tPARAMS ((tree, tree));\n extern int    arm_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern void   arm_set_default_type_attributes\tPARAMS ((tree));\n-extern void   arm_encode_call_attribute\tPARAMS ((tree, char));\n+extern void   arm_encode_call_attribute\tPARAMS ((tree, int));\n #endif\n #ifdef RTX_CODE\n extern int    const_ok_for_arm\t\tPARAMS ((HOST_WIDE_INT));\n@@ -93,10 +93,10 @@ extern RTX_CODE minmax_code\t\tPARAMS ((rtx));\n extern int    adjacent_mem_locations\tPARAMS ((rtx, rtx));\n extern int    load_multiple_sequence\tPARAMS ((rtx *, int, int *, int *,\n \t\t\t\t\t\tHOST_WIDE_INT *));\n-extern char * emit_ldm_seq\t\tPARAMS ((rtx *, int));\n+extern const char * emit_ldm_seq\tPARAMS ((rtx *, int));\n extern int    store_multiple_sequence\tPARAMS ((rtx *, int, int *, int *,\n \t\t\t\t\t\tHOST_WIDE_INT *));\n-extern char * emit_stm_seq\t\tPARAMS ((rtx *, int));\n+extern const char * emit_stm_seq\tPARAMS ((rtx *, int));\n extern rtx    arm_gen_load_multiple\tPARAMS ((int, int, rtx, int, int, int,\n \t\t\t\t\t\tint, int));\n extern rtx    arm_gen_store_multiple\tPARAMS ((int, int, rtx, int, int, int,\n@@ -108,20 +108,20 @@ extern rtx    arm_gen_compare_reg\tPARAMS ((RTX_CODE, rtx, rtx));\n extern void   arm_reload_in_hi\t\tPARAMS ((rtx *));\n extern void   arm_reload_out_hi\t\tPARAMS ((rtx *));\n extern void   arm_reorg\t\t\tPARAMS ((rtx));\n-extern char * fp_immediate_constant\tPARAMS ((rtx));\n-extern char * output_call\t\tPARAMS ((rtx *));\n-extern char * output_call_mem\t\tPARAMS ((rtx *));\n-extern char * output_mov_long_double_fpu_from_arm PARAMS ((rtx *));\n-extern char * output_mov_long_double_arm_from_fpu PARAMS ((rtx *));\n-extern char * output_mov_long_double_arm_from_arm PARAMS ((rtx *));\n-extern char * output_mov_double_fpu_from_arm      PARAMS ((rtx *));\n-extern char * output_mov_double_arm_from_fpu      PARAMS ((rtx *));\n-extern char * output_move_double\tPARAMS ((rtx *));\n-extern char * output_mov_immediate\tPARAMS ((rtx *));\n-extern char * output_add_immediate\tPARAMS ((rtx *));\n-extern char * arithmetic_instr\t\tPARAMS ((rtx, int));\n+extern const char * fp_immediate_constant PARAMS ((rtx));\n+extern const char * output_call\t\tPARAMS ((rtx *));\n+extern const char * output_call_mem\tPARAMS ((rtx *));\n+extern const char * output_mov_long_double_fpu_from_arm PARAMS ((rtx *));\n+extern const char * output_mov_long_double_arm_from_fpu PARAMS ((rtx *));\n+extern const char * output_mov_long_double_arm_from_arm PARAMS ((rtx *));\n+extern const char * output_mov_double_fpu_from_arm      PARAMS ((rtx *));\n+extern const char * output_mov_double_arm_from_fpu      PARAMS ((rtx *));\n+extern const char * output_move_double\tPARAMS ((rtx *));\n+extern const char * output_mov_immediate PARAMS ((rtx *));\n+extern const char * output_add_immediate PARAMS ((rtx *));\n+extern const char * arithmetic_instr\tPARAMS ((rtx, int));\n extern void   output_ascii_pseudo_op\tPARAMS ((FILE *, const unsigned char *, int));\n-extern char * output_return_instruction\tPARAMS ((rtx, int, int));\n+extern const char * output_return_instruction PARAMS ((rtx, int, int));\n extern void   arm_poke_function_name\tPARAMS ((FILE *, char *));\n extern void   output_arm_prologue\tPARAMS ((FILE *, int));\n extern void   arm_print_operand\t\tPARAMS ((FILE *, rtx, int));\n@@ -152,19 +152,19 @@ extern void   aof_dump_imports\t\tPARAMS ((FILE *));\n /* Thumb functions.  */\n extern void   arm_init_expanders\tPARAMS ((void));\n extern int    thumb_far_jump_used_p\tPARAMS ((int));\n-extern char * thumb_unexpanded_epilogue\tPARAMS ((void));\n+extern const char * thumb_unexpanded_epilogue\tPARAMS ((void));\n extern void   thumb_expand_prologue\tPARAMS ((void));\n extern void   thumb_expand_epilogue\tPARAMS ((void));\n #ifdef TREE_CODE\n extern int    is_called_in_ARM_mode\tPARAMS ((tree));\n #endif\n-#ifdef RTX_CODE\n extern int    thumb_shiftable_const\tPARAMS ((unsigned HOST_WIDE_INT));\n+extern void   output_thumb_prologue\tPARAMS ((FILE *));\n+#ifdef RTX_CODE\n extern void   thumb_final_prescan_insn\tPARAMS ((rtx));\n-extern char * thumb_load_double_from_address\n+extern const char * thumb_load_double_from_address\n \t\t\t\t\tPARAMS ((rtx *));\n-extern void   output_thumb_prologue\tPARAMS ((FILE *));\n-extern char * thumb_output_move_mem_multiple\n+extern const char * thumb_output_move_mem_multiple\n \t\t\t\t\tPARAMS ((int, rtx *));\n extern void   thumb_expand_movstrqi\tPARAMS ((rtx *));\n extern int    thumb_cmp_operand\t\tPARAMS ((rtx, enum machine_mode));"}, {"sha": "bcdcd2452da1c404f929c1e728dc59ef1753784c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -63,22 +63,22 @@ static int       const_ok_for_op \t\tPARAMS ((Hint, enum rtx_code));\n static int       eliminate_lr2ip\t\tPARAMS ((rtx *));\n static rtx\t emit_multi_reg_push\t\tPARAMS ((int));\n static rtx\t emit_sfm\t\t\tPARAMS ((int, int));\n-static char *    fp_const_from_val\t\tPARAMS ((REAL_VALUE_TYPE *));\n+static const char * fp_const_from_val\t\tPARAMS ((REAL_VALUE_TYPE *));\n static arm_cc    get_arm_condition_code\t\tPARAMS ((rtx));\n static void      init_fpa_table\t\t\tPARAMS ((void));\n static Hint      int_log2\t\t\tPARAMS ((Hint));\n static rtx       is_jump_table \t\t\tPARAMS ((rtx));\n-static char *    output_multi_immediate\t\tPARAMS ((rtx *, char *, char *, int, Hint));\n-static void      print_multi_reg\t\tPARAMS ((FILE *, char *, int, int, int));\n+static const char * output_multi_immediate\tPARAMS ((rtx *, const char *, const char *, int, Hint));\n+static void      print_multi_reg\t\tPARAMS ((FILE *, const char *, int, int, int));\n static Mmode     select_dominance_cc_mode\tPARAMS ((rtx, rtx, Hint));\n-static char *    shift_op\t\t\tPARAMS ((rtx, Hint *));\n+static const char * shift_op\t\t\tPARAMS ((rtx, Hint *));\n static void      arm_init_machine_status\tPARAMS ((struct function *));\n static void      arm_mark_machine_status        PARAMS ((struct function *));\n static int       number_of_first_bit_set        PARAMS ((int));\n static void      replace_symbols_in_block       PARAMS ((tree, rtx, rtx));\n static void      thumb_exit                     PARAMS ((FILE *, int, rtx));\n static void      thumb_pushpop                  PARAMS ((FILE *, int, int));\n-static char *    thumb_condition_code           PARAMS ((rtx, int));\n+static const char * thumb_condition_code        PARAMS ((rtx, int));\n static rtx\t is_jump_table\t\t        PARAMS ((rtx));\n static Hint\t get_jump_table_size\t        PARAMS ((rtx));\n static Mnode *   move_minipool_fix_forward_ref  PARAMS ((Mnode *, Mnode *, Hint));\n@@ -202,7 +202,7 @@ rtx arm_target_insn;\n int arm_target_label;\n \n /* The condition codes of the ARM, and the inverse function.  */\n-char * arm_condition_codes[] =\n+const char * arm_condition_codes[] =\n {\n   \"eq\", \"ne\", \"cs\", \"cc\", \"mi\", \"pl\", \"vs\", \"vc\",\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n@@ -214,7 +214,7 @@ char * arm_condition_codes[] =\n \n struct processors\n {\n-  char *       name;\n+  const char * name;\n   unsigned int flags;\n };\n \n@@ -357,8 +357,8 @@ arm_override_options ()\n       unsigned int        sought;\n       static struct cpu_default\n       {\n-\tint    cpu;\n-\tchar * name;\n+\tint          cpu;\n+\tconst char * name;\n       }\n       cpu_defaults[] =\n       {\n@@ -599,7 +599,7 @@ arm_override_options ()\n       && (tune_flags & FL_MODE32) == 0)\n     flag_schedule_insns = flag_schedule_insns_after_reload = 0;\n   \n-  arm_prog_mode = TARGET_APCS_32 ? PROG_MODE_PROG32 : PROG_MODE_PROG26;\n+  arm_prgmode = TARGET_APCS_32 ? PROG_MODE_PROG32 : PROG_MODE_PROG26;\n   \n   if (structure_size_string != NULL)\n     {\n@@ -1704,7 +1704,7 @@ arm_comp_type_attributes (type1, type2)\n void\n arm_encode_call_attribute (decl, flag)\n   tree decl;\n-  char flag;\n+  int flag;\n {\n   const char * str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n   int          len = strlen (str);\n@@ -2455,7 +2455,7 @@ arm_adjust_cost (insn, link, dep, cost)\n \n static int fpa_consts_inited = 0;\n \n-char * strings_fpa[8] =\n+static const char * strings_fpa[8] =\n {\n   \"0\",   \"1\",   \"2\",   \"3\",\n   \"4\",   \"5\",   \"0.5\", \"10\"\n@@ -3472,7 +3472,7 @@ load_multiple_sequence (operands, nops, regs, base, load_offset)\n \t  || const_ok_for_arm (-unsorted_offsets[order[0]])) ? 5 : 0;\n }\n \n-char *\n+const char *\n emit_ldm_seq (operands, nops)\n      rtx * operands;\n      int nops;\n@@ -3669,7 +3669,7 @@ store_multiple_sequence (operands, nops, regs, base, load_offset)\n   return 0;\n }\n \n-char *\n+const char *\n emit_stm_seq (operands, nops)\n      rtx * operands;\n      int nops;\n@@ -5611,7 +5611,7 @@ arm_reorg (first)\n /* If the rtx is the correct value then return the string of the number.\n    In this way we can ensure that valid double constants are generated even\n    when cross compiling.  */\n-char *\n+const char *\n fp_immediate_constant (x)\n      rtx x;\n {\n@@ -5630,7 +5630,7 @@ fp_immediate_constant (x)\n }\n \n /* As for fp_immediate_constant, but value is passed directly, not in rtx.  */\n-static char *\n+static const char *\n fp_const_from_val (r)\n      REAL_VALUE_TYPE * r;\n {\n@@ -5654,7 +5654,7 @@ fp_const_from_val (r)\n static void\n print_multi_reg (stream, instr, reg, mask, hat)\n      FILE * stream;\n-     char * instr;\n+     const char * instr;\n      int reg;\n      int mask;\n      int hat;\n@@ -5681,7 +5681,7 @@ print_multi_reg (stream, instr, reg, mask, hat)\n \n /* Output a 'call' insn.  */\n \n-char *\n+const char *\n output_call (operands)\n      rtx * operands;\n {\n@@ -5739,7 +5739,7 @@ eliminate_lr2ip (x)\n   \n /* Output a 'call' insn that is a reference in memory.  */\n \n-char *\n+const char *\n output_call_mem (operands)\n      rtx * operands;\n {\n@@ -5768,7 +5768,7 @@ output_call_mem (operands)\n    OPERANDS[0] is an fpu register.\n    OPERANDS[1] is the first registers of an arm register pair.  */\n \n-char *\n+const char *\n output_mov_long_double_fpu_from_arm (operands)\n      rtx * operands;\n {\n@@ -5792,7 +5792,7 @@ output_mov_long_double_fpu_from_arm (operands)\n    OPERANDS[0] is the first registers of an arm register pair.\n    OPERANDS[1] is an fpu register.  */\n \n-char *\n+const char *\n output_mov_long_double_arm_from_fpu (operands)\n      rtx * operands;\n {\n@@ -5814,7 +5814,7 @@ output_mov_long_double_arm_from_fpu (operands)\n /* Output a move from arm registers to arm registers of a long double\n    OPERANDS[0] is the destination.\n    OPERANDS[1] is the source.  */\n-char *\n+const char *\n output_mov_long_double_arm_from_arm (operands)\n      rtx * operands;\n {\n@@ -5851,7 +5851,7 @@ output_mov_long_double_arm_from_arm (operands)\n    OPERANDS[0] is an fpu register.\n    OPERANDS[1] is the first registers of an arm register pair.  */\n \n-char *\n+const char *\n output_mov_double_fpu_from_arm (operands)\n      rtx * operands;\n {\n@@ -5872,7 +5872,7 @@ output_mov_double_fpu_from_arm (operands)\n    OPERANDS[0] is the first registers of an arm register pair.\n    OPERANDS[1] is an fpu register.  */\n \n-char *\n+const char *\n output_mov_double_arm_from_fpu (operands)\n      rtx * operands;\n {\n@@ -5893,7 +5893,7 @@ output_mov_double_arm_from_fpu (operands)\n    It must be REG<-REG, REG<-CONST_DOUBLE, REG<-CONST_INT, REG<-MEM\n    or MEM<-REG and all MEMs must be offsettable addresses.  */\n \n-char *\n+const char *\n output_move_double (operands)\n      rtx * operands;\n {\n@@ -6129,7 +6129,7 @@ output_move_double (operands)\n /* Output an arbitrary MOV reg, #n.\n    OPERANDS[0] is a register.  OPERANDS[1] is a const_int.  */\n \n-char *\n+const char *\n output_mov_immediate (operands)\n      rtx * operands;\n {\n@@ -6170,7 +6170,7 @@ output_mov_immediate (operands)\n /* Output an ADD r, s, #n where n may be too big for one instruction.  If\n    adding zero to one register, output nothing.  */\n \n-char *\n+const char *\n output_add_immediate (operands)\n      rtx * operands;\n {\n@@ -6198,10 +6198,11 @@ output_add_immediate (operands)\n    IMMED_OP is the index of the constant slot in OPERANDS.\n    N is the constant value.  */\n \n-static char *\n+static const char *\n output_multi_immediate (operands, instr1, instr2, immed_op, n)\n      rtx * operands;\n-     char * instr1, * instr2;\n+     const char * instr1;\n+     const char * instr2;\n      int immed_op;\n      HOST_WIDE_INT n;\n {\n@@ -6217,7 +6218,7 @@ output_multi_immediate (operands, instr1, instr2, immed_op, n)\n   else\n     {\n       int i;\n-      char *instr = instr1;\n+      const char * instr = instr1;\n \n       /* Note that n is never zero here (which would give no output).  */\n       for (i = 0; i < 32; i += 2)\n@@ -6231,6 +6232,7 @@ output_multi_immediate (operands, instr1, instr2, immed_op, n)\n \t    }\n \t}\n     }\n+  \n   return \"\";\n }\n \n@@ -6240,7 +6242,7 @@ output_multi_immediate (operands, instr1, instr2, immed_op, n)\n    operation.  SHIFT_FIRST_ARG is TRUE if the first argument of the operator\n    was shifted.  */\n \n-char *\n+const char *\n arithmetic_instr (op, shift_first_arg)\n      rtx op;\n      int shift_first_arg;\n@@ -6274,12 +6276,12 @@ arithmetic_instr (op, shift_first_arg)\n    On exit, *AMOUNTP will be -1 if the shift is by a register, or a constant\n    shift.  */\n \n-static char *\n+static const char *\n shift_op (op, amountp)\n      rtx op;\n      HOST_WIDE_INT *amountp;\n {\n-  char * mnem;\n+  const char * mnem;\n   enum rtx_code code = GET_CODE (op);\n \n   if (GET_CODE (XEXP (op, 1)) == REG || GET_CODE (XEXP (op, 1)) == SUBREG)\n@@ -6447,7 +6449,7 @@ output_ascii_pseudo_op (stream, p, len)\n }\n \f\n \n-char *\n+const char *\n output_return_instruction (operand, really_return, reverse)\n      rtx operand;\n      int really_return;\n@@ -6732,7 +6734,7 @@ output_arm_prologue (f, frame_size)\n #endif\n }\n \n-char *\n+const char *\n arm_output_epilogue (really_return)\n      int really_return;\n {\n@@ -7398,7 +7400,7 @@ arm_print_operand (stream, x, code)\n     case 'S':\n       {\n \tHOST_WIDE_INT val;\n-\tchar * shift = shift_op (x, & val);\n+\tconst char * shift = shift_op (x, & val);\n \n \tif (shift)\n \t  {\n@@ -8041,7 +8043,7 @@ arm_debugger_arg_offset (value, addr)\n \n   /* If we are using the frame pointer to point at the argument, then\n      an offset of 0 is correct.  */\n-  if (REGNO (addr) == HARD_FRAME_POINTER_REGNUM)\n+  if (REGNO (addr) == (unsigned) HARD_FRAME_POINTER_REGNUM)\n     return 0;\n   \n   /* If we are using the stack pointer to point at the\n@@ -8087,7 +8089,7 @@ arm_debugger_arg_offset (value, addr)\n \t  && REGNO    (XEXP (PATTERN (insn), 0)) == REGNO (addr)\n \t  && GET_CODE (XEXP (PATTERN (insn), 1)) == PLUS\n \t  && GET_CODE (XEXP (XEXP (PATTERN (insn), 1), 0)) == REG\n-\t  && REGNO    (XEXP (XEXP (PATTERN (insn), 1), 0)) == HARD_FRAME_POINTER_REGNUM\n+\t  && REGNO    (XEXP (XEXP (PATTERN (insn), 1), 0)) == (unsigned) HARD_FRAME_POINTER_REGNUM\n \t  && GET_CODE (XEXP (XEXP (PATTERN (insn), 1), 1)) == CONST_INT\n \t     )\n \t{\n@@ -8635,7 +8637,7 @@ is_called_in_ARM_mode (func)\n }\n \n /* The bits which aren't usefully expanded as rtl. */\n-char *\n+const char *\n thumb_unexpanded_epilogue ()\n {\n   int regno;\n@@ -9250,7 +9252,7 @@ output_thumb_prologue (f)\n    a computed memory address.  The computed address may involve a\n    register which is overwritten by the load.  */\n \n-char *\n+const char *\n thumb_load_double_from_address (operands)\n      rtx * operands;\n {\n@@ -9376,7 +9378,7 @@ thumb_load_double_from_address (operands)\n }\n \n \n-char *\n+const char *\n thumb_output_move_mem_multiple (n, operands)\n      int n;\n      rtx * operands;\n@@ -9490,12 +9492,12 @@ thumb_cmp_operand (op, mode)\n \t  || register_operand (op, mode));\n }\n \n-static char *\n+static const char *\n thumb_condition_code (x, invert)\n      rtx x;\n      int invert;\n {\n-  static char * conds[] =\n+  static const char * conds[] =\n   {\n     \"eq\", \"ne\", \"cs\", \"cc\", \"mi\", \"pl\", \"vs\", \"vc\", \n     \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\""}, {"sha": "c00e55e8cb34b94d10e433fa60f957142aa91fca", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -59,7 +59,7 @@ typedef enum arm_cond_code\n arm_cc;\n \n extern arm_cc arm_current_cc;\n-extern char * arm_condition_codes[];\n+extern const char * arm_condition_codes[];\n \n #define ARM_INVERSE_CONDITION_CODE(X)  ((arm_cc) (((int)X) ^ 1))\n "}, {"sha": "75cdbec28db8a736887c064f18cafd988d30564e", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -3437,6 +3437,9 @@ for machine in $build $host $target; do\n \talpha*-*-*)\n \t\tcpu_type=alpha\n \t\t;;\n+\tstrongarm*-*-*)\n+\t\tcpu_type=arm\n+\t\t;;\n \tarm*-*-*)\n \t\tcpu_type=arm\n \t\t;;"}, {"sha": "aee426a24fa401f93f558d9042080783272e7358", "filename": "gcc/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b33d005a59a34c20472ff7603abfeadceae2c/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=cd2b33d005a59a34c20472ff7603abfeadceae2c", "patch": "@@ -566,6 +566,9 @@ for machine in $build $host $target; do\n \talpha*-*-*)\n \t\tcpu_type=alpha\n \t\t;;\n+\tstrongarm*-*-*)\n+\t\tcpu_type=arm\n+\t\t;;\n \tarm*-*-*)\n \t\tcpu_type=arm\n \t\t;;"}]}