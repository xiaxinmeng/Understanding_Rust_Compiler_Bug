{"sha": "8274e603cf58034e223ace062ca103f107cd8206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3NGU2MDNjZjU4MDM0ZTIyM2FjZTA2MmNhMTAzZjEwN2NkODIwNg==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@rice.edu", "date": "2003-08-23T02:24:14Z"}, "committer": {"name": "Jason Eckhardt", "email": "jle@gcc.gnu.org", "date": "2003-08-23T02:24:14Z"}, "message": "i860.c: Replace all occurrences of 'GNU CC' with 'GCC'.\n\n2003-08-22  Jason Eckhardt  <jle@rice.edu>\n\n\t* config/i860/i860.c: Replace all occurrences of 'GNU CC' with 'GCC'.\n\tRemove all uses of the PARAMS macro.  Remove superflous prototypes.\n\tConvert all function definitions from traditional to ISO C90 syntax.\n\t* config/i860/i860-protos.h: Replace all occurrences of 'GNU CC'\n\twith 'GCC'.  Remove all uses of the PARAMS macro.\n\t* config/i860/i860.h: Replace all occurrences of 'GNU CC' with 'GCC'.\n\t* config/i860/i860.md: Likewise.\n\t* config/i860/sysv4.h: Likewise.\n\t* config/i860/varargs.asm: Likewise.\n\nFrom-SVN: r70723", "tree": {"sha": "4a62624feebebacf956468d9b02e0c74a4433487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a62624feebebacf956468d9b02e0c74a4433487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8274e603cf58034e223ace062ca103f107cd8206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8274e603cf58034e223ace062ca103f107cd8206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8274e603cf58034e223ace062ca103f107cd8206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8274e603cf58034e223ace062ca103f107cd8206/comments", "author": null, "committer": null, "parents": [{"sha": "cfbdb8303426109984cf0893fdf2815bab8ca82f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbdb8303426109984cf0893fdf2815bab8ca82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbdb8303426109984cf0893fdf2815bab8ca82f"}], "stats": {"total": 250, "additions": 100, "deletions": 150}, "files": [{"sha": "d73889764be2535f8dcaea8c0fa1900c12a7ae85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -1,3 +1,15 @@\n+2003-08-22  Jason Eckhardt  <jle@rice.edu>\n+\n+\t* config/i860/i860.c: Replace all occurrences of 'GNU CC' with 'GCC'.\n+\tRemove all uses of the PARAMS macro.  Remove superflous prototypes.\n+\tConvert all function definitions from traditional to ISO C90 syntax.\n+\t* config/i860/i860-protos.h: Replace all occurrences of 'GNU CC'\n+\twith 'GCC'.  Remove all uses of the PARAMS macro.\n+\t* config/i860/i860.h: Replace all occurrences of 'GNU CC' with 'GCC'.\n+\t* config/i860/i860.md: Likewise.\n+\t* config/i860/sysv4.h: Likewise.\n+\t* config/i860/varargs.asm: Likewise.\n+\n 2003-08-22  Jason Eckhardt  <jle@rice.edu>\n \n \t* config/i860/i860-protos.h (i860_va_start): Remove 'stdarg_p'"}, {"sha": "b223692467c9a83a59f612f89d3501e72195f9a5", "filename": "gcc/config/i860/i860-protos.h", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860-protos.h?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -3,61 +3,61 @@\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n-This file is part of GNU CC.\n+This file is part of GCC.\n \n-GNU CC is free software; you can redistribute it and/or modify\n+GCC is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n \n-GNU CC is distributed in the hope that it will be useful,\n+GCC is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n+along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Declare things which are defined in i860.c but called from\n    insn-output.c.  */\n \n #ifdef RTX_CODE\n-extern unsigned long sfmode_constant_to_ulong PARAMS ((rtx));\n-extern const char *output_load PARAMS ((rtx *));\n-extern const char *output_store PARAMS ((rtx *));\n-extern const char *output_move_double PARAMS ((rtx *));\n-extern const char *output_fp_move_double PARAMS ((rtx *));\n-extern const char *output_block_move PARAMS ((rtx *));\n-extern const char *output_delay_insn PARAMS ((rtx));\n+extern unsigned long sfmode_constant_to_ulong (rtx);\n+extern const char *output_load (rtx *);\n+extern const char *output_store (rtx *);\n+extern const char *output_move_double (rtx *);\n+extern const char *output_fp_move_double (rtx *);\n+extern const char *output_block_move (rtx *);\n+extern const char *output_delay_insn (rtx);\n #if 0\n-extern const char *output_delayed_branch PARAMS ((const char *, rtx *, rtx));\n+extern const char *output_delayed_branch (const char *, rtx *, rtx);\n #endif\n-extern void output_load_address PARAMS ((rtx *));\n-extern int safe_insn_src_p PARAMS ((rtx, enum machine_mode));\n-extern int operand_clobbered_before_used_after PARAMS ((rtx, rtx));\n-extern int single_insn_src_p PARAMS ((rtx, enum machine_mode));\n-extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n-extern int arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int logic_operand PARAMS ((rtx, enum machine_mode));\n-extern int shift_operand PARAMS ((rtx, enum machine_mode));\n-extern int compare_operand PARAMS ((rtx, enum machine_mode));\n-extern int bte_operand PARAMS ((rtx, enum machine_mode));\n-extern int indexed_operand PARAMS ((rtx, enum machine_mode));\n-extern int load_operand PARAMS ((rtx, enum machine_mode));\n-extern int small_int PARAMS ((rtx, enum machine_mode));\n-extern int logic_int PARAMS ((rtx, enum machine_mode));\n-extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n-extern rtx i860_saveregs PARAMS ((void));\n+extern void output_load_address (rtx *);\n+extern int safe_insn_src_p (rtx, enum machine_mode);\n+extern int operand_clobbered_before_used_after (rtx, rtx);\n+extern int single_insn_src_p (rtx, enum machine_mode);\n+extern int reg_or_0_operand (rtx, enum machine_mode);\n+extern int arith_operand (rtx, enum machine_mode);\n+extern int logic_operand (rtx, enum machine_mode);\n+extern int shift_operand (rtx, enum machine_mode);\n+extern int compare_operand (rtx, enum machine_mode);\n+extern int bte_operand (rtx, enum machine_mode);\n+extern int indexed_operand (rtx, enum machine_mode);\n+extern int load_operand (rtx, enum machine_mode);\n+extern int small_int (rtx, enum machine_mode);\n+extern int logic_int (rtx, enum machine_mode);\n+extern int call_insn_operand (rtx, enum machine_mode);\n+extern rtx i860_saveregs (void);\n #ifdef TREE_CODE\n-extern void i860_va_start PARAMS ((tree, rtx));\n-extern rtx i860_va_arg PARAMS ((tree, tree));\n+extern void i860_va_start (tree, rtx);\n+extern rtx i860_va_arg (tree, tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern tree i860_build_va_list PARAMS ((void));\n+extern tree i860_build_va_list (void);\n #endif /* TREE_CODE */\n \n extern void tdesc_section (void);"}, {"sha": "76df09c93a4494708988da046bc191cd677e4462", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 39, "deletions": 101, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -8,20 +8,20 @@\n    Hacked substantially by Ron Guilmette (rfg@netcom.com) to cater\n    to the whims of the System V Release 4 assembler.\n \n-This file is part of GNU CC.\n+This file is part of GCC.\n \n-GNU CC is free software; you can redistribute it and/or modify\n+GCC is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n \n-GNU CC is distributed in the hope that it will be useful,\n+GCC is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n+along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n@@ -48,14 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-static rtx find_addr_reg PARAMS ((rtx));\n-static int reg_clobbered_p PARAMS ((rtx, rtx));\n-static const char *singlemove_string PARAMS ((rtx *));\n-static const char *load_opcode PARAMS ((enum machine_mode, const char *, rtx));\n-static const char *store_opcode PARAMS ((enum machine_mode, const char *, rtx));\n-static void output_size_for_block_move PARAMS ((rtx, rtx, rtx));\n-static void i860_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i860_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static rtx find_addr_reg (rtx);\n \n #ifndef I860_REG_PREFIX\n #define I860_REG_PREFIX \"\"\n@@ -70,9 +63,7 @@ rtx i860_compare_op0, i860_compare_op1;\n /* Return non-zero if this pattern, can be evaluated safely, even if it\n    was not asked for.  */\n int\n-safe_insn_src_p (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+safe_insn_src_p (rtx op, enum machine_mode mode)\n {\n   /* Just experimenting.  */\n \n@@ -134,9 +125,7 @@ safe_insn_src_p (op, mode)\n    Return 0 if neither.  */\n \n static int\n-reg_clobbered_p (reg, in)\n-     rtx reg;\n-     rtx in;\n+reg_clobbered_p (rtx reg, rtx in)\n {\n   register enum rtx_code code;\n \n@@ -202,9 +191,7 @@ reg_clobbered_p (reg, in)\n    appears in the dest position of a SET insn in a conditional\n    branch's delay slot.  AFTER is the label to start looking from.  */\n int\n-operand_clobbered_before_used_after (op, after)\n-     rtx op;\n-     rtx after;\n+operand_clobbered_before_used_after (rtx op, rtx after)\n {\n   /* Just experimenting.  */\n   if (GET_CODE (op) == CC0)\n@@ -270,9 +257,7 @@ operand_clobbered_before_used_after (op, after)\n /* Return non-zero if this pattern, as a source to a \"SET\",\n    is known to yield an instruction of unit size.  */\n int\n-single_insn_src_p (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+single_insn_src_p (rtx op, enum machine_mode mode)\n {\n   switch (GET_CODE (op))\n     {\n@@ -369,9 +354,7 @@ single_insn_src_p (op, mode)\n /* Return non-zero only if OP is a register of mode MODE,\n    or const0_rtx.  */\n int\n-reg_or_0_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_0_operand (rtx op, enum machine_mode mode)\n {\n   return (op == const0_rtx || register_operand (op, mode)\n \t  || op == CONST0_RTX (mode));\n@@ -381,9 +364,7 @@ reg_or_0_operand (op, mode)\n    address add/subtract insn (such as add %o1,7,%l2) of mode MODE.  */\n \n int\n-arith_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+arith_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op)));\n@@ -392,9 +373,7 @@ arith_operand (op, mode)\n /* Return 1 if OP is a valid first operand for a logical insn of mode MODE.  */\n \n int\n-logic_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+logic_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && LOGIC_INT (op)));\n@@ -403,9 +382,7 @@ logic_operand (op, mode)\n /* Return 1 if OP is a valid first operand for a shift insn of mode MODE.  */\n \n int\n-shift_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+shift_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode)\n           || (GET_CODE (op) == CONST_INT));\n@@ -415,9 +392,7 @@ shift_operand (op, mode)\n    or an add insn of mode MODE.  */\n \n int\n-compare_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+compare_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op) && LOGIC_INT (op)));\n@@ -427,9 +402,7 @@ compare_operand (op, mode)\n    operand of a bte or btne insn.  */\n \n int\n-bte_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+bte_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n@@ -439,9 +412,7 @@ bte_operand (op, mode)\n /* Return 1 if OP is an indexed memory reference of mode MODE.  */\n \n int\n-indexed_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+indexed_operand (rtx op, enum machine_mode mode)\n {\n   return (GET_CODE (op) == MEM && GET_MODE (op) == mode\n \t  && GET_CODE (XEXP (op, 0)) == PLUS\n@@ -454,9 +425,7 @@ indexed_operand (op, mode)\n    with mode MODE.  */\n \n int\n-load_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+load_operand (rtx op, enum machine_mode mode)\n {\n   return (memory_operand (op, mode) || indexed_operand (op, mode));\n }\n@@ -465,9 +434,7 @@ load_operand (op, mode)\n    range constraining immediate operands in add/subtract insns.  */\n \n int\n-small_int (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+small_int (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && SMALL_INT (op));\n }\n@@ -476,9 +443,7 @@ small_int (op, mode)\n    range constraining immediate operands in logic insns.  */\n \n int\n-logic_int (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+logic_int (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && LOGIC_INT (op));\n }\n@@ -489,9 +454,7 @@ logic_int (op, mode)\n    can't handle yet.  */\n \n int\n-call_insn_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+call_insn_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) == MEM\n       && (CONSTANT_ADDRESS_P (XEXP (op, 0))\n@@ -507,8 +470,7 @@ call_insn_operand (op, mode)\n    for moving operands[1] into operands[0] as a fullword.  */\n \n static const char *\n-singlemove_string (operands)\n-     rtx *operands;\n+singlemove_string (rtx *operands)\n {\n   if (GET_CODE (operands[0]) == MEM)\n     {\n@@ -582,8 +544,7 @@ singlemove_string (operands)\n    with operands OPERANDS.  */\n \n const char *\n-output_move_double (operands)\n-     rtx *operands;\n+output_move_double (rtx *operands)\n {\n   enum { REGOP, OFFSOP, MEMOP, PUSHOP, POPOP, CNSTOP, RNDOP } optype0, optype1;\n   rtx latehalf[2];\n@@ -756,8 +717,7 @@ output_move_double (operands)\n }\n \f\n const char *\n-output_fp_move_double (operands)\n-     rtx *operands;\n+output_fp_move_double (rtx *operands)\n {\n   /* If the source operand is any sort of zero, use f0 instead.  */\n \n@@ -826,8 +786,7 @@ output_fp_move_double (operands)\n    ADDR can be effectively incremented by incrementing REG.  */\n \n static rtx\n-find_addr_reg (addr)\n-     rtx addr;\n+find_addr_reg (rtx addr)\n {\n   while (GET_CODE (addr) == PLUS)\n     {\n@@ -855,10 +814,7 @@ find_addr_reg (addr)\n    This string is in static storage.   */\n \n static const char *\n-load_opcode (mode, args, reg)\n-     enum machine_mode mode;\n-     const char *args;\n-     rtx reg;\n+load_opcode (enum machine_mode mode, const char *args, rtx reg)\n {\n   static char buf[30];\n   const char *opcode;\n@@ -902,10 +858,7 @@ load_opcode (mode, args, reg)\n    This string is in static storage.   */\n \n static const char *\n-store_opcode (mode, args, reg)\n-     enum machine_mode mode;\n-     const char *args;\n-     rtx reg;\n+store_opcode (enum machine_mode mode, const char *args, rtx reg)\n {\n   static char buf[30];\n   const char *opcode;\n@@ -953,8 +906,7 @@ store_opcode (mode, args, reg)\n    It may alter the values of operands[0] and operands[1].  */\n \n const char *\n-output_store (operands)\n-     rtx *operands;\n+output_store (rtx *operands)\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n   rtx address = XEXP (operands[0], 0);\n@@ -994,8 +946,7 @@ output_store (operands)\n    It may alter the values of operands[0] and operands[1].  */\n \n const char *\n-output_load (operands)\n-     rtx *operands;\n+output_load (rtx *operands)\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n   rtx address = XEXP (operands[1], 0);\n@@ -1041,8 +992,7 @@ output_load (operands)\n    All cases are handled here.  */\n \n void\n-output_load_address (operands)\n-     rtx *operands;\n+output_load_address (rtx *operands)\n {\n   rtx base, offset;\n \n@@ -1113,8 +1063,7 @@ output_load_address (operands)\n    right to subtract on this machine, so right now we don't.)  */\n \n static void\n-output_size_for_block_move (size, reg, align)\n-     rtx size, reg, align;\n+output_size_for_block_move (rtx size, rtx reg, rtx align)\n {\n   rtx xoperands[3];\n \n@@ -1146,8 +1095,7 @@ output_size_for_block_move (size, reg, align)\n    OPERANDS[4..6] are pseudos we can safely clobber as temps.  */\n \n const char *\n-output_block_move (operands)\n-     rtx *operands;\n+output_block_move (rtx *operands)\n {\n   /* A vector for our computed operands.  Note that load_output_address\n      makes use of (and can clobber) up to the 8th element of this vector.  */\n@@ -1367,10 +1315,7 @@ output_block_move (operands)\n    the code to use the DBR pass.  */\n \n const char *\n-output_delayed_branch (template, operands, insn)\n-     const char *template;\n-     rtx *operands;\n-     rtx insn;\n+output_delayed_branch (const char *template, rtx *operands, rtx insn)\n {\n   rtx src = XVECEXP (PATTERN (insn), 0, 1);\n   rtx dest = XVECEXP (PATTERN (insn), 0, 0);\n@@ -1481,8 +1426,7 @@ output_delayed_branch (template, operands, insn)\n \n /* Output a newly constructed insn DELAY_INSN.  */\n const char *\n-output_delay_insn (delay_insn)\n-     rtx delay_insn;\n+output_delay_insn (rtx delay_insn)\n {\n   const char *template;\n   int insn_code_number;\n@@ -1540,8 +1484,7 @@ output_delay_insn (delay_insn)\n    grok floating literals in instruction operand contexts.  */\n \n unsigned long\n-sfmode_constant_to_ulong (x)\n-     rtx x;\n+sfmode_constant_to_ulong (rtx x)\n {\n   REAL_VALUE_TYPE d;\n   unsigned long l;\n@@ -1659,9 +1602,7 @@ static int must_preserve_r1;\n static unsigned must_preserve_bytes;\n \n static void\n-i860_output_function_prologue (asm_file, local_bytes)\n-     register FILE *asm_file;\n-     register HOST_WIDE_INT local_bytes;\n+i860_output_function_prologue (FILE *asm_file, HOST_WIDE_INT local_bytes)\n {\n   register HOST_WIDE_INT frame_lower_bytes;\n   register HOST_WIDE_INT frame_upper_bytes;\n@@ -1980,9 +1921,7 @@ typedef struct TDESC {\n } TDESC;\n \n static void\n-i860_output_function_epilogue (asm_file, local_bytes)\n-     register FILE *asm_file;\n-     register HOST_WIDE_INT local_bytes;\n+i860_output_function_epilogue (FILE *asm_file, HOST_WIDE_INT local_bytes)\n {\n   register HOST_WIDE_INT frame_upper_bytes;\n   register HOST_WIDE_INT frame_lower_bytes;\n@@ -2111,7 +2050,7 @@ i860_output_function_epilogue (asm_file, local_bytes)\n \n /* Expand a library call to __builtin_saveregs.  */\n rtx\n-i860_saveregs ()\n+i860_saveregs (void)\n {\n   rtx fn = gen_rtx_SYMBOL_REF (Pmode, \"__builtin_saveregs\");\n   rtx save = gen_reg_rtx (Pmode);\n@@ -2130,7 +2069,7 @@ i860_saveregs ()\n }\n \n tree\n-i860_build_va_list ()\n+i860_build_va_list (void)\n {\n   tree field_ireg_used, field_freg_used, field_reg_base, field_mem_ptr;\n   tree record;\n@@ -2242,8 +2181,7 @@ i860_va_start (tree valist, rtx nextarg)\n #endif\n \n rtx\n-i860_va_arg (valist, type)\n-     tree valist, type;\n+i860_va_arg (tree valist, tree type)\n {\n   tree field_ireg_used, field_freg_used, field_reg_base, field_mem_ptr;\n   tree type_ptr_node, t;"}, {"sha": "37a88678e598fe26ac8ef10491996f869b6f9241", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -4,20 +4,20 @@\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n-This file is part of GNU CC.\n+This file is part of GCC.\n \n-GNU CC is free software; you can redistribute it and/or modify\n+GCC is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n \n-GNU CC is distributed in the hope that it will be useful,\n+GCC is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n+along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n "}, {"sha": "847f1c9db644edf6122efb4dfa18962387f8404b", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -1,21 +1,21 @@\n ;;- Machine description for Intel 860 chip for GNU C compiler\n-;;  Copyright (C) 1989, 1990, 1997, 1998, 1999, 2000\n+;;  Copyright (C) 1989, 1990, 1997, 1998, 1999, 2000, 2003\n ;;  Free Software Foundation, Inc.\n \n-;; This file is part of GNU CC.\n+;; This file is part of GCC.\n \n-;; GNU CC is free software; you can redistribute it and/or modify\n+;; GCC is free software; you can redistribute it and/or modify\n ;; it under the terms of the GNU General Public License as published by\n ;; the Free Software Foundation; either version 2, or (at your option)\n ;; any later version.\n \n-;; GNU CC is distributed in the hope that it will be useful,\n+;; GCC is distributed in the hope that it will be useful,\n ;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n ;; GNU General Public License for more details.\n \n ;; You should have received a copy of the GNU General Public License\n-;; along with GNU CC; see the file COPYING.  If not, write to\n+;; along with GCC; see the file COPYING.  If not, write to\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n "}, {"sha": "c178aa525d4a976d8dcf162c8b5d472815dbb497", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -2,20 +2,20 @@\n    Copyright (C) 1991, 1996, 2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n-This file is part of GNU CC.\n+This file is part of GCC.\n \n-GNU CC is free software; you can redistribute it and/or modify\n+GCC is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n \n-GNU CC is distributed in the hope that it will be useful,\n+GCC is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n+along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n "}, {"sha": "f740426172b5122688ed3d6e99fa1dd837fdbca6", "filename": "gcc/config/i860/varargs.asm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fvarargs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274e603cf58034e223ace062ca103f107cd8206/gcc%2Fconfig%2Fi860%2Fvarargs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fvarargs.asm?ref=8274e603cf58034e223ace062ca103f107cd8206", "patch": "@@ -1,9 +1,9 @@\n /* Special varargs support for i860.\n-   Copyright (C) 2001  Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2003  Free Software Foundation, Inc.\n \n-This file is part of GNU CC.\n+This file is part of GCC.\n \n-GNU CC is free software; you can redistribute it and/or modify\n+GCC is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n@@ -17,13 +17,13 @@ do apply in other respects; for example, they cover modification of\n the file, and distribution when not linked into a combine\n executable.)\n \n-GNU CC is distributed in the hope that it will be useful,\n+GCC is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n+along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n "}]}