{"sha": "8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "node_id": "C_kwDOANBUbNoAKDhiMWIxYjJkNjkxZDVjZWU0ZWJjNDBhMDE5NzRhZDViY2NhYjIyZjk", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-02-15T10:38:01Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-02-15T10:38:07Z"}, "message": "ipa: Avoid IPA confusing scalar values and single-field aggregates (PR 108679)\n\nPR 108679 testcase shows a situation when IPA-CP is able to track a\nscalar constant in a single-field structure that is part of a bigger\nstructure.  This smaller structure is however also passed in a few\ncalls to other functions, but the two same-but-different entities,\noriginally placed at the same offset and with the same size, confuse\nthe mechanism that takes care of handling call statements after\nIPA-SRA.\n\nI think that in stage 4 it is best to revert to GCC 12 behavior in this\nparticular case (when IPA-CP detects a constant in a single-field\nstructure or a single element array that is part of a bigger aggregate)\nand the patch below does that.  If accepted, I plan to file a\nmissed-optimization bug to track that we could use the IPA-CP propagated\nvalue to re-construct the small aggregate arguments.\n\ngcc/ChangeLog:\n\n2023-02-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108679\n\t* ipa-sra.cc (push_param_adjustments_for_index): Do not omit\n\tcreation of non-scalar replacements even if IPA-CP knows their\n\tcontents.\n\ngcc/testsuite/ChangeLog:\n\n2023-02-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108679\n\t* gcc.dg/ipa/pr108679.c: New test.", "tree": {"sha": "c58781834c883b2cb23c84b21049eda00e878fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c58781834c883b2cb23c84b21049eda00e878fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmPstg8ACgkQv2PBvD+k\nNUAzYBAAgvlXCfwTyWGxl1uNs1IEbAIp3KSKosqmboeESvUwk6Qv9igCdZ8uAbdZ\ni25OmCavVPNIS51STcb92NUwDkzy80G5scRIX3sx5eIzbiJyLOZPb8CzgoB8nQdm\nkOVObJ5UKexoBu/E5g+d+ZqAbH7wPaKCWq8iGYhoV5DRKgoUCHWTnjhvtds7uz8o\nxPXKq3UOOJBZPg16dnra1n33pLcK6a8Cf+C8W9DclnwnleJ6EbBbYgoP+qIZ227P\n/Ij8hS37OVf04ZjdptzgRVcCtmCjg5gEtgUDgdC2wOt731VUPQSl/MAMuRTPbsVZ\nmbBuljMrCG7J+PZ1W2jKaKlFgjQG2RUTbBDpiSoFCrk3GT/CMoUiPgACAMweL+Xo\ntJcQjAtVTlC5FVGHEnEiRe5fC4YpduS64nIn3IK7IzruyFCkyOaOPSLMPrIFyxhP\nKaejNm3ga0Fl8dWiqHb1xlHZ1Stb90+D8dgg3HZQM7y+6pagkhTO6nRUlZ+zbdAX\ndlW60s7ayjcoy8fWzbjCwxMIZ3h7dRsUHEzLMa4C79RNYEFGpmkxOruDw5dpF7tU\n1k3NyB8k685jYbj2+sZV+DsI/9xxoIJXvfcvPCkJ6vk3SiBtpkRvl1Lt6kktj4bw\nXszzmyIv2qLNatVgZOnftyeBgrZj6F0muwenY2B7+r3JH05ceXo=\n=ZGdV\n-----END PGP SIGNATURE-----", "payload": "tree c58781834c883b2cb23c84b21049eda00e878fd8\nparent 7a8cada824c5e45ea729c112f3d1d29956067b7b\nauthor Martin Jambor <mjambor@suse.cz> 1676457481 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1676457487 +0100\n\nipa: Avoid IPA confusing scalar values and single-field aggregates (PR 108679)\n\nPR 108679 testcase shows a situation when IPA-CP is able to track a\nscalar constant in a single-field structure that is part of a bigger\nstructure.  This smaller structure is however also passed in a few\ncalls to other functions, but the two same-but-different entities,\noriginally placed at the same offset and with the same size, confuse\nthe mechanism that takes care of handling call statements after\nIPA-SRA.\n\nI think that in stage 4 it is best to revert to GCC 12 behavior in this\nparticular case (when IPA-CP detects a constant in a single-field\nstructure or a single element array that is part of a bigger aggregate)\nand the patch below does that.  If accepted, I plan to file a\nmissed-optimization bug to track that we could use the IPA-CP propagated\nvalue to re-construct the small aggregate arguments.\n\ngcc/ChangeLog:\n\n2023-02-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108679\n\t* ipa-sra.cc (push_param_adjustments_for_index): Do not omit\n\tcreation of non-scalar replacements even if IPA-CP knows their\n\tcontents.\n\ngcc/testsuite/ChangeLog:\n\n2023-02-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108679\n\t* gcc.dg/ipa/pr108679.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8cada824c5e45ea729c112f3d1d29956067b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8cada824c5e45ea729c112f3d1d29956067b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8cada824c5e45ea729c112f3d1d29956067b7b"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "3de7d426b7e7339d16b2ed8a28e88659bbf9562e", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "patch": "@@ -3989,7 +3989,7 @@ push_param_adjustments_for_index (isra_func_summary *ifs, unsigned base_index,\n \t{\n \t  ipa_argagg_value_list avl (ipcp_ts);\n \t  tree value = avl.get_value (base_index, pa->unit_offset);\n-\t  if (value)\n+\t  if (value && !AGGREGATE_TYPE_P (pa->type))\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"    - omitting component at byte \""}, {"sha": "b1ed50bb831a7f1d11612fdddc1c607baa6aec29", "filename": "gcc/testsuite/gcc.dg/ipa/pr108679.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108679.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108679.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108679.c?ref=8b1b1b2d691d5cee4ebc40a01974ad5bccab22f9", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S1 {\n+  signed f0;\n+};\n+struct S2 {\n+  struct S1 f2;\n+  short f8;\n+} g_18;\n+void safe_lshift_func_int16_t_s_u();\n+void safe_unary_minus_func_uint64_t_u();\n+int safe_mul_func_uint8_t_u_u(int, struct S1 p_14);\n+int g_732, func_6_l_17;\n+static int *func_12();\n+static int func_6(struct S2 p_7) { func_12(func_6_l_17, p_7.f2, g_18, 0); }\n+static int *func_12(int, struct S1 p_14) {\n+  safe_lshift_func_int16_t_s_u();\n+  safe_unary_minus_func_uint64_t_u();\n+  g_732 = safe_mul_func_uint8_t_u_u(0, p_14);\n+}\n+int main() {\n+  struct S2 l_10 = {3};\n+  func_6(l_10);\n+}"}]}