{"sha": "518fea64fca4b49cabadda582dbbb5365aa2fb3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4ZmVhNjRmY2E0YjQ5Y2FiYWRkYTU4MmRiYmI1MzY1YWEyZmIzZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-02-16T03:08:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-02-16T03:08:03Z"}, "message": "re PR target/60203 (Support long double/_Decimal128 direct move on power8)\n\n[gcc]\n2014-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/60203\n\t* config/rs6000/rs6000.md (rreg): Add TFmode, TDmode constraints.\n\t(mov<mode>_internal, TFmode/TDmode): Split TFmode/TDmode moves\n\tinto 64-bit and 32-bit moves.  On 64-bit moves, add support for\n\tusing direct move instructions on ISA 2.07.  Also adjust\n\tinstruction length for 64-bit.\n\t(mov<mode>_64bit, TFmode/TDmode): Likewise.\n\t(mov<mode>_32bit, TFmode/TDmode): Likewise.\n\n[gcc/testsuite]\n2014-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/60203\n\t* gcc.target/powerpc/pr60203.c: New testsuite.\n\nFrom-SVN: r207808", "tree": {"sha": "5a7b025b5dbad02e3ef46e1cc6e43dbe2ac61941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a7b025b5dbad02e3ef46e1cc6e43dbe2ac61941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/518fea64fca4b49cabadda582dbbb5365aa2fb3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518fea64fca4b49cabadda582dbbb5365aa2fb3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518fea64fca4b49cabadda582dbbb5365aa2fb3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518fea64fca4b49cabadda582dbbb5365aa2fb3d/comments", "author": null, "committer": null, "parents": [{"sha": "71a03f516f23aa321536f957feb6e0676f885b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a03f516f23aa321536f957feb6e0676f885b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a03f516f23aa321536f957feb6e0676f885b67"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "b857c1106b175424a767e0e2263f2ec974dac3dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=518fea64fca4b49cabadda582dbbb5365aa2fb3d", "patch": "@@ -1,3 +1,14 @@\n+2014-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/60203\n+\t* config/rs6000/rs6000.md (rreg): Add TFmode, TDmode constraints.\n+\t(mov<mode>_internal, TFmode/TDmode): Split TFmode/TDmode moves\n+\tinto 64-bit and 32-bit moves.  On 64-bit moves, add support for\n+\tusing direct move instructions on ISA 2.07.  Also adjust\n+\tinstruction length for 64-bit.\n+\t(mov<mode>_64bit, TFmode/TDmode): Likewise.\n+\t(mov<mode>_32bit, TFmode/TDmode): Likewise.\n+\n 2014-02-15  Alan Modra  <amodra@gmail.com>\n \n \tPR target/58675"}, {"sha": "1062d26ab4cbf46764e80135461b1a8ee1f784a0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=518fea64fca4b49cabadda582dbbb5365aa2fb3d", "patch": "@@ -387,6 +387,8 @@\n \n (define_mode_attr rreg [(SF   \"f\")\n \t\t\t(DF   \"ws\")\n+\t\t\t(TF   \"f\")\n+\t\t\t(TD   \"f\")\n \t\t\t(V4SF \"wf\")\n \t\t\t(V2DF \"wd\")])\n \n@@ -9524,10 +9526,22 @@\n ;; It's important to list Y->r and r->Y before r->r because otherwise\n ;; reload, given m->r, will try to pick r->r and reload it, which\n ;; doesn't make progress.\n-(define_insn_and_split \"*mov<mode>_internal\"\n+(define_insn_and_split \"*mov<mode>_64bit\"\n+  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r,r,wm\")\n+\t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,r,YGHF,r,wm,r\"))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_POWERPC64\n+   && (gpc_reg_operand (operands[0], <MODE>mode)\n+       || gpc_reg_operand (operands[1], <MODE>mode))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n+{ rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n+  [(set_attr \"length\" \"8,8,8,12,12,8,8,8\")])\n+\n+(define_insn_and_split \"*mov<mode>_32bit\"\n   [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n \t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,r,YGHF,r\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\""}, {"sha": "8ef7dd564659b423930560369be14e1771915bd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=518fea64fca4b49cabadda582dbbb5365aa2fb3d", "patch": "@@ -1,3 +1,8 @@\n+2014-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/60203\n+\t* gcc.target/powerpc/pr60203.c: New testsuite.\n+\n 2014-02-15  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/59599"}, {"sha": "6a4b4fa1ddbc2e2ba59244b8ab29e9b0bf76c763", "filename": "gcc/testsuite/gcc.target/powerpc/pr60203.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60203.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518fea64fca4b49cabadda582dbbb5365aa2fb3d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60203.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60203.c?ref=518fea64fca4b49cabadda582dbbb5365aa2fb3d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+\n+union u_ld { long double ld; double d[2]; };\n+\n+long double\n+pack (double a, double aa)\n+{\n+  union u_ld u;\n+  u.d[0] = a;\n+  u.d[1] = aa;\n+  return u.ld;\n+}\n+\n+double\n+unpack_0 (long double x)\n+{\n+  union u_ld u;\n+  u.ld = x;\n+  return u.d[0];\n+}\n+\n+double\n+unpack_1 (long double x)\n+{\n+  union u_ld u;\n+  u.ld = x;\n+  return u.d[1];\n+}\n+\n+/* { dg-final { scan-assembler-not \"stfd\"   } } */\n+/* { dg-final { scan-assembler-not \"lfd\"    } } */\n+/* { dg-final { scan-assembler-not \"lxsdx\"  } } */\n+/* { dg-final { scan-assembler-not \"stxsdx\" } } */\n+/* { dg-final { scan-assembler-not \"mfvsrd\" } } */\n+/* { dg-final { scan-assembler-not \"mtvsrd\" } } */\n+\n+"}]}