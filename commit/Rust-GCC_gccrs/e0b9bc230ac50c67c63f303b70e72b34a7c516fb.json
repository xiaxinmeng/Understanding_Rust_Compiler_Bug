{"sha": "e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiOWJjMjMwYWM1MGM2N2M2M2YzMDNiNzBlNzJiMzRhN2M1MTZmYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-05T16:01:39Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-05T16:01:39Z"}, "message": "2018-10-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h\n\t(_Rb_tree_iterator<>::operator==): Make inline friend.\n\t(_Rb_tree_iterator<>::operator!=): Likewise.\n\t(_Rb_tree_const_iterator<>::operator==): Likewise.\n\t(_Rb_tree_const_iterator<>::operator!=): Likewise.\n\t(operator==(const _Rb_tree_iterator<>&,\n\tconst _Rb_tree_const_iterator&)): Remove.\n\t(operator!=(const _Rb_tree_iterator<>&,\n\tconst _Rb_tree_const_iterator&)): Remove.\n\t(operator==(const _Rb_tree<>&, const _Rb_tree<>&)): Make inline friend.\n\t(operator<(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n\t(operator!=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise and\n\tdeprecate.\n\t(operator>(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n\t(operator<=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n\t(operator>=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n\t* include/debug/map.h (map<>::erase(const_iterator, const_iterator)):\n\tCompare __victim with _Base::cend().\n\t* include/debug/multimap.h\n\t(multimap<>::erase(const_iterator, const_iterator)): Likewise.\n\t* include/debug/set.h (set<>::erase(const_iterator, const_iterator)):\n\tCompare __victim with _Base::cend().\n\t* include/debug/multiset.h\n\t(multiset<>::erase(const_iterator, const_iterator)): Likewise.\n\nFrom-SVN: r264875", "tree": {"sha": "778e09bffcc8c7538cb36496379d62cca7e6d72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778e09bffcc8c7538cb36496379d62cca7e6d72f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/comments", "author": null, "committer": null, "parents": [{"sha": "825e64583e897682be613d48fb7d967288585dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825e64583e897682be613d48fb7d967288585dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825e64583e897682be613d48fb7d967288585dbd"}], "stats": {"total": 147, "additions": 72, "deletions": 75}, "files": [{"sha": "06718b5520d2a42ca0e8a20ede050be8750975fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -1,3 +1,30 @@\n+2018-10-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h\n+\t(_Rb_tree_iterator<>::operator==): Make inline friend.\n+\t(_Rb_tree_iterator<>::operator!=): Likewise.\n+\t(_Rb_tree_const_iterator<>::operator==): Likewise.\n+\t(_Rb_tree_const_iterator<>::operator!=): Likewise.\n+\t(operator==(const _Rb_tree_iterator<>&,\n+\tconst _Rb_tree_const_iterator&)): Remove.\n+\t(operator!=(const _Rb_tree_iterator<>&,\n+\tconst _Rb_tree_const_iterator&)): Remove.\n+\t(operator==(const _Rb_tree<>&, const _Rb_tree<>&)): Make inline friend.\n+\t(operator<(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n+\t(operator!=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise and\n+\tdeprecate.\n+\t(operator>(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n+\t(operator<=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n+\t(operator>=(const _Rb_tree<>&, const _Rb_tree<>&)): Likewise.\n+\t* include/debug/map.h (map<>::erase(const_iterator, const_iterator)):\n+\tCompare __victim with _Base::cend().\n+\t* include/debug/multimap.h\n+\t(multimap<>::erase(const_iterator, const_iterator)): Likewise.\n+\t* include/debug/set.h (set<>::erase(const_iterator, const_iterator)):\n+\tCompare __victim with _Base::cend().\n+\t* include/debug/multiset.h\n+\t(multiset<>::erase(const_iterator, const_iterator)): Likewise.\n+\n 2018-10-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59439"}, {"sha": "87e57108deb83d2b091d432718d40f1b84cb94c8", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 41, "deletions": 71, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -260,11 +260,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp* pointer;\n \n       typedef bidirectional_iterator_tag iterator_category;\n-      typedef ptrdiff_t\t\t  difference_type;\n+      typedef ptrdiff_t\t\t\t difference_type;\n \n-      typedef _Rb_tree_iterator<_Tp>\t_Self;\n-      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;\n-      typedef _Rb_tree_node<_Tp>*\t   _Link_type;\n+      typedef _Rb_tree_iterator<_Tp>\t\t_Self;\n+      typedef _Rb_tree_node_base::_Base_ptr\t_Base_ptr;\n+      typedef _Rb_tree_node<_Tp>*\t\t_Link_type;\n \n       _Rb_tree_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n@@ -311,13 +311,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node == __x._M_node; }\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node != __x._M_node; }\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node != __y._M_node; }\n \n       _Base_ptr _M_node;\n   };\n@@ -390,29 +390,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node == __x._M_node; }\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node != __x._M_node; }\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node != __y._M_node; }\n \n       _Base_ptr _M_node;\n     };\n \n-  template<typename _Val>\n-    inline bool\n-    operator==(const _Rb_tree_iterator<_Val>& __x,\n-\t       const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_node == __y._M_node; }\n-\n-  template<typename _Val>\n-    inline bool\n-    operator!=(const _Rb_tree_iterator<_Val>& __x,\n-\t       const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_node != __y._M_node; }\n-\n   void\n   _Rb_tree_insert_and_rebalance(const bool __insert_left,\n \t\t\t\t_Rb_tree_node_base* __x,\n@@ -1616,55 +1604,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t}\n #endif // C++17\n-    };\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    {\n-      return __x.size() == __y.size()\n-\t     && std::equal(__x.begin(), __x.end(), __y.begin());\n-    }\n+      friend bool\n+      operator==(const _Rb_tree& __x, const _Rb_tree& __y)\n+      {\n+\treturn __x.size() == __y.size()\n+\t  && std::equal(__x.begin(), __x.end(), __y.begin());\n+      }\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    {\n-      return std::lexicographical_compare(__x.begin(), __x.end(), \n-\t\t\t\t\t  __y.begin(), __y.end());\n-    }\n+      friend bool\n+      operator<(const _Rb_tree& __x, const _Rb_tree& __y)\n+      {\n+\treturn std::lexicographical_compare(__x.begin(), __x.end(),\n+\t\t\t\t\t    __y.begin(), __y.end());\n+      }\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    { return !(__x == __y); }\n+      friend bool _GLIBCXX_DEPRECATED\n+      operator!=(const _Rb_tree& __x, const _Rb_tree& __y)\n+      { return !(__x == __y); }\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    { return __y < __x; }\n+      friend bool _GLIBCXX_DEPRECATED\n+      operator>(const _Rb_tree& __x, const _Rb_tree& __y)\n+      { return __y < __x; }\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    { return !(__y < __x); }\n+      friend bool _GLIBCXX_DEPRECATED\n+      operator<=(const _Rb_tree& __x, const _Rb_tree& __y)\n+      { return !(__y < __x); }\n \n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-\t   typename _Compare, typename _Alloc>\n-    inline bool\n-    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n-\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n-    { return !(__x < __y); }\n+      friend bool _GLIBCXX_DEPRECATED\n+      operator>=(const _Rb_tree& __x, const _Rb_tree& __y)\n+      { return !(__x < __y); }\n+    };\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>"}, {"sha": "6821fc561e45227d0c884bb8f54823c3d0bf0c3d", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -519,7 +519,7 @@ namespace __debug\n \tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::cend(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));"}, {"sha": "d16ed47ab743884c68dd1deba0739163feb54eeb", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -400,7 +400,7 @@ namespace __debug\n \tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::cend(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));"}, {"sha": "bf154ecad6e0699aff51aa5390ce90bd0e5d044c", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -367,7 +367,7 @@ namespace __debug\n \tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::cend(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));"}, {"sha": "c406fb424f47d8be8b4bb13f41c31ff7297acebb", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b9bc230ac50c67c63f303b70e72b34a7c516fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "patch": "@@ -379,7 +379,7 @@ namespace __debug\n \tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::cend(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));"}]}