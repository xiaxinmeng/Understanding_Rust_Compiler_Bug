{"sha": "507359e1d4d18614eb9679043995edf0675b6ff5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3MzU5ZTFkNGQxODYxNGViOTY3OTA0Mzk5NWVkZjA2NzViNmZmNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-20T09:11:21Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-20T09:12:31Z"}, "message": "i386: Add mult-high and shift patterns for 4-byte vectors [PR100637]\n\n2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/mmx.md (Yv_Yw): Revert adding V4QI and V2HI modes.\n\t(*<plusminus:insn><VI_32:mode>3): Use Yw instad of <Yv_Yw> constrint.\n\t(<s>mulv4hi3_highpart): New expander.\n\t(*<s>mulv2hi3_highpart): New insn pattern.\n\t(<s>mulv2hi3_higpart): New expander.\n\t(*<any_shift:insn>v2hi3): New insn pattern.\n\t(<any_shift:insn>v2hi3): New expander.\n\t* config/i386/sse.md (smulhrsv2hi3): New expander.\n\t(*smulhrsv2hi3): New insn pattern.\n\ngcc/testsuite/\n\n\tPR target/100637\n\t* gcc.target/i386/pr100637-1w.c (shl, ashr, lshr): New tests.", "tree": {"sha": "d73ffd40c13c9b83b44a2bb374bc5f705187df91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73ffd40c13c9b83b44a2bb374bc5f705187df91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/507359e1d4d18614eb9679043995edf0675b6ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507359e1d4d18614eb9679043995edf0675b6ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507359e1d4d18614eb9679043995edf0675b6ff5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507359e1d4d18614eb9679043995edf0675b6ff5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5bd1e9811babe255ddbbdcda1d00ea5997b826"}], "stats": {"total": 133, "additions": 128, "deletions": 5}, "files": [{"sha": "948ba479c32d497f22494693a4baab20cca44854", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=507359e1d4d18614eb9679043995edf0675b6ff5", "patch": "@@ -78,8 +78,7 @@\n   [(V2SF \"v2si\") (V2SI \"v2si\") (V4HI \"v4hi\") (V8QI \"v8qi\")])\n \n (define_mode_attr Yv_Yw\n-  [(V8QI \"Yw\") (V4QI \"Yw\") (V4HI \"Yw\") (V2HI \"Yw\")\n-   (V2SI \"Yv\") (V1DI \"Yv\") (V2SF \"Yv\")])\n+  [(V8QI \"Yw\") (V4HI \"Yw\") (V2SI \"Yv\") (V1DI \"Yv\") (V2SF \"Yv\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -1367,10 +1366,10 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<insn><mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,<Yv_Yw>\")\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,Yw\")\n         (plusminus:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"<comm>0,<Yv_Yw>\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,<Yv_Yw>\")))]\n+\t  (match_operand:VI_32 1 \"register_operand\" \"<comm>0,Yw\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,Yw\")))]\n   \"TARGET_SSE2\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n@@ -1523,6 +1522,51 @@\n    (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"<s>mulv4hi3_highpart\"\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (mult:V4SI\n+\t      (any_extend:V4SI\n+\t\t(match_operand:V4HI 1 \"register_operand\"))\n+\t      (any_extend:V4SI\n+\t\t(match_operand:V4HI 2 \"register_operand\")))\n+\t    (const_int 16))))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n+\n+(define_insn \"*<s>mulv2hi3_highpart\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n+\t(truncate:V2HI\n+\t  (lshiftrt:V2SI\n+\t    (mult:V2SI\n+\t      (any_extend:V2SI\n+\t\t(match_operand:V2HI 1 \"register_operand\" \"%0,Yw\"))\n+\t      (any_extend:V2SI\n+\t\t(match_operand:V2HI 2 \"register_operand\" \"x,Yw\")))\n+\t    (const_int 16))))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (MULT, V2HImode, operands)\"\n+  \"@\n+   pmulh<u>w\\t{%2, %0|%0, %2}\n+   vpmulh<u>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssemul\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"<s>mulv2hi3_highpart\"\n+  [(set (match_operand:V2HI 0 \"register_operand\")\n+\t(truncate:V2HI\n+\t  (lshiftrt:V2SI\n+\t    (mult:V2SI\n+\t      (any_extend:V2SI\n+\t\t(match_operand:V2HI 1 \"register_operand\"))\n+\t      (any_extend:V2SI\n+\t\t(match_operand:V2HI 2 \"register_operand\")))\n+\t    (const_int 16))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V2HImode, operands);\")\n+\n (define_expand \"mmx_pmaddwd\"\n   [(set (match_operand:V2SI 0 \"register_operand\")\n         (plus:V2SI\n@@ -1817,6 +1861,30 @@\n \t  (match_operand:DI 2 \"nonmemory_operand\")))]\n   \"TARGET_MMX_WITH_SSE\")\n \n+(define_insn \"*<insn>v2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n+        (any_shift:V2HI\n+\t  (match_operand:V2HI 1 \"register_operand\" \"0,Yw\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"xN,YwN\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   p<vshift>w\\t{%2, %0|%0, %2}\n+   vp<vshift>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"<insn>v2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\")\n+        (any_shift:V2HI\n+\t  (match_operand:V2HI 1 \"register_operand\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\")))]\n+  \"TARGET_SSE2\")\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral comparisons"}, {"sha": "0f1108f0db10baf82b9764ee034707539e6abb34", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=507359e1d4d18614eb9679043995edf0675b6ff5", "patch": "@@ -17239,6 +17239,51 @@\n    (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"smulhrsv2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\")\n+\t(truncate:V2HI\n+\t  (lshiftrt:V2SI\n+\t    (plus:V2SI\n+\t      (lshiftrt:V2SI\n+\t\t(mult:V2SI\n+\t\t  (sign_extend:V2SI\n+\t\t    (match_operand:V2HI 1 \"register_operand\"))\n+\t\t  (sign_extend:V2SI\n+\t\t    (match_operand:V2HI 2 \"register_operand\")))\n+\t\t(const_int 14))\n+\t      (match_dup 3))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3\"\n+{\n+  operands[3] = CONST1_RTX(V2HImode);\n+  ix86_fixup_binary_operands_no_copy (MULT, V2HImode, operands);\n+})\n+\n+(define_insn \"*smulhrsv2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yv\")\n+\t(truncate:V2HI\n+\t  (lshiftrt:V2SI\n+\t    (plus:V2SI\n+\t      (lshiftrt:V2SI\n+\t\t(mult:V2SI\n+\t\t  (sign_extend:V2SI\n+\t\t    (match_operand:V2HI 1 \"register_operand\" \"%0,Yv\"))\n+\t\t  (sign_extend:V2SI\n+\t\t    (match_operand:V2HI 2 \"register_operand\" \"x,Yv\")))\n+\t\t(const_int 14))\n+\t      (match_operand:V2HI 3 \"const1_operand\"))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"@\n+   pmulhrsw\\t{%2, %0|%0, %2}\n+   vpmulhrsw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"<ssse3_avx2>_pshufb<mode>3<mask_name>\"\n   [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,<v_Yw>\")\n \t(unspec:VI1_AVX512"}, {"sha": "fe6964044b6f7505353fb41f4df68059fb912efc", "filename": "gcc/testsuite/gcc.target/i386/pr100637-1w.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507359e1d4d18614eb9679043995edf0675b6ff5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c?ref=507359e1d4d18614eb9679043995edf0675b6ff5", "patch": "@@ -3,6 +3,7 @@\n /* { dg-options \"-O2 -msse2 -dp\" } */\n \n typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n+typedef unsigned short __v2hu __attribute__ ((__vector_size__ (4)));\n \n __v2hi and (__v2hi a, __v2hi b) { return a & b; };\n /* { dg-final { scan-assembler \"andv2hi3\" } } */\n@@ -26,3 +27,12 @@ __v2hi neg  (__v2hi a) { return -a; };\n \n __v2hi mul  (__v2hi a, __v2hi b) { return a * b; };\n /* { dg-final { scan-assembler \"mulv2hi3\" } } */\n+\n+__v2hi shl (__v2hi a, int b) { return a << b; };\n+/* { dg-final { scan-assembler \"ashlv2hi3\" } } */\n+\n+__v2hi ashr (__v2hi a, int b) { return a >> b; };\n+/* { dg-final { scan-assembler \"ashrv2hi3\" } } */\n+\n+__v2hu lshr  (__v2hu a, int b) { return a >> b; };\n+/* { dg-final { scan-assembler \"lshrv2hi3\" } } */"}]}