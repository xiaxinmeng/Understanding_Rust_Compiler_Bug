{"sha": "9aba5d2249ed7556d7a73e43959853e07647d90b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiYTVkMjI0OWVkNzU1NmQ3YTczZTQzOTU5ODUzZTA3NjQ3ZDkwYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-28T18:17:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-28T18:17:00Z"}, "message": "i386.c (override_options): Initialize ix86_veclib_handler to ix86_veclibabi_svml when -mveclibabi=svml is used.\n\n        * config/i386/i386.c (override_options): Initialize\n        ix86_veclib_handler to ix86_veclibabi_svml when\n        -mveclibabi=svml is used.\n        (ix86_veclibabi_svml): New function for SVML ABI style\n        vectorization support.\n        * doc/invoke.texi (-mveclibabi) [svml]: Document new target option.\n\ntestsuite/ChangeLog:\n\n        * gcc.target/i386/vectorize6.c: New test.\n\nFrom-SVN: r133692", "tree": {"sha": "fb54ee8d61b1b8a6ce1cae37c98eb583355c1cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb54ee8d61b1b8a6ce1cae37c98eb583355c1cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aba5d2249ed7556d7a73e43959853e07647d90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aba5d2249ed7556d7a73e43959853e07647d90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aba5d2249ed7556d7a73e43959853e07647d90b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aba5d2249ed7556d7a73e43959853e07647d90b/comments", "author": null, "committer": null, "parents": [{"sha": "d60a2d4d2fdc2f8218c0ef7fcee4aea63953e2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60a2d4d2fdc2f8218c0ef7fcee4aea63953e2e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60a2d4d2fdc2f8218c0ef7fcee4aea63953e2e8"}], "stats": {"total": 263, "additions": 207, "deletions": 56}, "files": [{"sha": "7f0fe265f4e39759cf7593d022a6ac1adc7f6c40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aba5d2249ed7556d7a73e43959853e07647d90b", "patch": "@@ -1,3 +1,12 @@\n+2008-03-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (override_options): Initialize\n+\tix86_veclib_handler to ix86_veclibabi_svml when\n+\t-mveclibabi=svml is used.\n+\t(ix86_veclibabi_svml): New function for SVML ABI style\n+\tvectorization support.\n+\t* doc/invoke.texi (-mveclibabi) [svml]: Document new target option.\n+\n 2008-03-28  Rafael Espindola  <espindola@google.com>\n \n \t* fold-const.c (tree_unary_nonnegative_warnv_p): Make it public.\n@@ -34,8 +43,7 @@\n \tASSERT_EXPR <name, expr OP limit>.\n \t(register_edge_assert_for_1): Adjust callers.\n \t(find_assert_locations): Likewise.\n-\t(process_assert_insertions_for): Build condition from\n-\texpression.\n+\t(process_assert_insertions_for): Build condition from expression.\n \t(extract_range_from_assert): Handle ASSERT_EXPRs\n \tof the form ASSERT_EXPR <name, expr OP limit>.\n \t(register_edge_assert_for_2): New helper registering\n@@ -54,7 +62,7 @@\n 2008-03-28  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.c (mn10300_secondary_reload_class):\n-        Return GENERAL_REGS for stack adjustment reloads.\n+\tReturn GENERAL_REGS for stack adjustment reloads.\n \n 2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n@@ -123,44 +131,42 @@\n \ttree_to_aff_combination_expand.\n \t(get_inner_reference_aff): New function.\n \t* tree-parloops.c (loop_parallel_p): Free vectorizer info.\n-        * tree-ssa-loop-im.c: Include tree-affine.h and pointer-set.h.\n-        (struct lim_aux_data): sm_done field removed.\n-        (mem_ref_loc_p, mem_ref_locs_p): New types.\n-        (struct mem_ref): Added id, stored, accesses_in_loop,\n-        indep_loop, dep_loop, indep_ref, dep_ref fields.\n-        Removed is_stored, locs and next fields.\n-        (memory_accesses): New variable.\n-        (movement_possibility): Do not allow moving statements\n-        that store to memory.\n-        (outermost_indep_loop, simple_mem_ref_in_stmt, mem_ref_in_stmt):\n-        New functions.\n-        (determine_max_movement): For statements with memory references,\n-        find the outermost loop in that the reference is independent.\n-        (move_computations_stmt): Mark the virtual operands for\n-        renaming.\n-        (memref_free, mem_ref_alloc, mem_ref_locs_alloc, mark_ref_stored,\n-        gather_mem_refs_stmt, gather_mem_refs_in_loops, vtoe_hash, vtoe_eq,\n-        vtoe_free, record_vop_access, get_vop_accesses, get_vop_stores,\n-        add_vop_ref_mapping, create_vop_ref_mapping_loop,\n-        create_vop_ref_mapping, analyze_memory_references,\n-        cannot_overlap_p, mem_refs_may_alias_p, rewrite_mem_ref_loc,\n-        get_all_locs_in_loop, ref_always_accessed_p,\n-        refs_independent_p, record_indep_loop, ref_indep_loop_p_1,\n-        ref_indep_loop_p, can_sm_ref_p, find_refs_for_sm,\n-        store_motion_loop, store_motion): New functions.\n-        (struct vop_to_refs_elt): New type.\n-        (record_mem_ref_loc, free_mem_ref_locs, rewrite_mem_refs,\n-        memref_hash, memref_eq, hoist_memory_references): Rewritten.\n-        (schedule_sm): Replaced by...\n-        (execute_sm): ... this.\n-        (determine_lsm_ref, hoist_memory_references,\n-        loop_suitable_for_sm, gather_mem_refs_stmt, gather_mem_refs,\n-        find_more_ref_vops, free_mem_ref, free_mem_refs,\n-        determine_lsm_loop, determine_lsm): Removed.\n-        (tree_ssa_lim_finalize): Free data structures used by store\n-        motion.\n-        (tree_ssa_lim): Call analyze_memory_references.  Use\n-        store_motion instead of determine_lsm.\n+\t* tree-ssa-loop-im.c: Include tree-affine.h and pointer-set.h.\n+\t(struct lim_aux_data): sm_done field removed.\n+\t(mem_ref_loc_p, mem_ref_locs_p): New types.\n+\t(struct mem_ref): Added id, stored, accesses_in_loop,\n+\tindep_loop, dep_loop, indep_ref, dep_ref fields.\n+\tRemoved is_stored, locs and next fields.\n+\t(memory_accesses): New variable.\n+\t(movement_possibility): Do not allow moving statements\n+\tthat store to memory.\n+\t(outermost_indep_loop, simple_mem_ref_in_stmt, mem_ref_in_stmt):\n+\tNew functions.\n+\t(determine_max_movement): For statements with memory references,\n+\tfind the outermost loop in that the reference is independent.\n+\t(move_computations_stmt): Mark the virtual operands for renaming.\n+\t(memref_free, mem_ref_alloc, mem_ref_locs_alloc, mark_ref_stored,\n+\tgather_mem_refs_stmt, gather_mem_refs_in_loops, vtoe_hash, vtoe_eq,\n+\tvtoe_free, record_vop_access, get_vop_accesses, get_vop_stores,\n+\tadd_vop_ref_mapping, create_vop_ref_mapping_loop,\n+\tcreate_vop_ref_mapping, analyze_memory_references,\n+\tcannot_overlap_p, mem_refs_may_alias_p, rewrite_mem_ref_loc,\n+\tget_all_locs_in_loop, ref_always_accessed_p,\n+\trefs_independent_p, record_indep_loop, ref_indep_loop_p_1,\n+\tref_indep_loop_p, can_sm_ref_p, find_refs_for_sm,\n+\tstore_motion_loop, store_motion): New functions.\n+\t(struct vop_to_refs_elt): New type.\n+\t(record_mem_ref_loc, free_mem_ref_locs, rewrite_mem_refs,\n+\tmemref_hash, memref_eq, hoist_memory_references): Rewritten.\n+\t(schedule_sm): Replaced by...\n+\t(execute_sm): ... this.\n+\t(determine_lsm_ref, hoist_memory_references,\n+\tloop_suitable_for_sm, gather_mem_refs_stmt, gather_mem_refs,\n+\tfind_more_ref_vops, free_mem_ref, free_mem_refs,\n+\tdetermine_lsm_loop, determine_lsm): Removed.\n+\t(tree_ssa_lim_finalize): Free data structures used by store motion.\n+\t(tree_ssa_lim): Call analyze_memory_references.  Use\n+\tstore_motion instead of determine_lsm.\n \n 2008-03-27  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -523,8 +529,7 @@\n \n 2008-03-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/i386.h (STATIC_CHAIN_REGNUM): Use R10_REG and\n-\tCX_REG.\n+\t* config/i386/i386.h (STATIC_CHAIN_REGNUM): Use R10_REG and CX_REG.\n \n 2008-03-23  Zuxy Meng <zuxy.meng@gmail.com>\n "}, {"sha": "4fc8fcd336ee1f030796e3e458d8eb503af9ea26", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 118, "deletions": 3, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9aba5d2249ed7556d7a73e43959853e07647d90b", "patch": "@@ -1830,6 +1830,7 @@ static int ix86_isa_flags_explicit;\n \n /* Vectorization library interface and handlers.  */\n tree (*ix86_veclib_handler)(enum built_in_function, tree, tree) = NULL;\n+static tree ix86_veclibabi_svml (enum built_in_function, tree, tree);\n static tree ix86_veclibabi_acml (enum built_in_function, tree, tree);\n \n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -2673,7 +2674,9 @@ override_options (void)\n   /* Use external vectorized library in vectorizing intrinsics.  */\n   if (ix86_veclibabi_string)\n     {\n-      if (strcmp (ix86_veclibabi_string, \"acml\") == 0)\n+      if (strcmp (ix86_veclibabi_string, \"svml\") == 0)\n+\tix86_veclib_handler = ix86_veclibabi_svml;\n+      else if (strcmp (ix86_veclibabi_string, \"acml\") == 0)\n \tix86_veclib_handler = ix86_veclibabi_acml;\n       else\n \terror (\"unknown vectorization library ABI type (%s) for \"\n@@ -21415,8 +21418,120 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n   return NULL_TREE;\n }\n \n-/* Handler for an ACML-style interface to a library with vectorized\n-   intrinsics.  */\n+/* Handler for an SVML-style interface to\n+   a library with vectorized intrinsics.  */\n+\n+static tree\n+ix86_veclibabi_svml (enum built_in_function fn, tree type_out, tree type_in)\n+{\n+  char name[20];\n+  tree fntype, new_fndecl, args;\n+  unsigned arity;\n+  const char *bname;\n+  enum machine_mode el_mode, in_mode;\n+  int n, in_n;\n+\n+  /* The SVML is suitable for unsafe math only.  */\n+  if (!flag_unsafe_math_optimizations)\n+    return NULL_TREE;\n+\n+  el_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+  if (el_mode != in_mode\n+      || n != in_n)\n+    return NULL_TREE;\n+\n+  switch (fn)\n+    {\n+    case BUILT_IN_EXP:\n+    case BUILT_IN_LOG:\n+    case BUILT_IN_LOG10:\n+    case BUILT_IN_POW:\n+    case BUILT_IN_TANH:\n+    case BUILT_IN_TAN:\n+    case BUILT_IN_ATAN:\n+    case BUILT_IN_ATAN2:\n+    case BUILT_IN_ATANH:\n+    case BUILT_IN_CBRT:\n+    case BUILT_IN_SINH:\n+    case BUILT_IN_SIN:\n+    case BUILT_IN_ASINH:\n+    case BUILT_IN_ASIN:\n+    case BUILT_IN_COSH:\n+    case BUILT_IN_COS:\n+    case BUILT_IN_ACOSH:\n+    case BUILT_IN_ACOS:\n+      if (el_mode != DFmode || n != 2)\n+\treturn NULL_TREE;\n+      break;\n+\n+    case BUILT_IN_EXPF:\n+    case BUILT_IN_LOGF:\n+    case BUILT_IN_LOG10F:\n+    case BUILT_IN_POWF:\n+    case BUILT_IN_TANHF:\n+    case BUILT_IN_TANF:\n+    case BUILT_IN_ATANF:\n+    case BUILT_IN_ATAN2F:\n+    case BUILT_IN_ATANHF:\n+    case BUILT_IN_CBRTF:\n+    case BUILT_IN_SINHF:\n+    case BUILT_IN_SINF:\n+    case BUILT_IN_ASINHF:\n+    case BUILT_IN_ASINF:\n+    case BUILT_IN_COSHF:\n+    case BUILT_IN_COSF:\n+    case BUILT_IN_ACOSHF:\n+    case BUILT_IN_ACOSF:\n+      if (el_mode != SFmode || n != 4)\n+\treturn NULL_TREE;\n+      break;\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+\n+  bname = IDENTIFIER_POINTER (DECL_NAME (implicit_built_in_decls[fn]));\n+\n+  if (fn == BUILT_IN_LOGF)\n+    strcpy (name, \"vmlsLn4\");\n+  else if (fn == BUILT_IN_LOG)\n+    strcpy (name, \"vmldLn2\");\n+  else if (n == 4)\n+    {\n+      sprintf (name, \"vmls%s\", bname+10);\n+      name[strlen (name)-1] = '4';\n+    }\n+  else\n+    sprintf (name, \"vmld%s2\", bname+10);\n+\n+  /* Convert to uppercase. */\n+  name[4] &= ~0x20;\n+\n+  arity = 0;\n+  for (args = DECL_ARGUMENTS (implicit_built_in_decls[fn]); args;\n+       args = TREE_CHAIN (args))\n+    arity++;\n+\n+  if (arity == 1)\n+    fntype = build_function_type_list (type_out, type_in, NULL);\n+  else\n+    fntype = build_function_type_list (type_out, type_in, type_in, NULL);\n+\n+  /* Build a function declaration for the vectorized function.  */\n+  new_fndecl = build_decl (FUNCTION_DECL, get_identifier (name), fntype);\n+  TREE_PUBLIC (new_fndecl) = 1;\n+  DECL_EXTERNAL (new_fndecl) = 1;\n+  DECL_IS_NOVOPS (new_fndecl) = 1;\n+  TREE_READONLY (new_fndecl) = 1;\n+\n+  return new_fndecl;\n+}\n+\n+/* Handler for an ACML-style interface to\n+   a library with vectorized intrinsics.  */\n \n static tree\n ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)"}, {"sha": "871881038135195abb59544b64d1eac54b645224", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9aba5d2249ed7556d7a73e43959853e07647d90b", "patch": "@@ -10765,15 +10765,26 @@ decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).\n @item -mveclibabi=@var{type}\n @opindex mveclibabi\n Specifies the ABI type to use for vectorizing intrinsics using an\n-external library.  Supported types are @code{acml} for the AMD\n-math core library style of interfacing.  GCC will currently emit\n-calls to @code{__vrd2_sin}, @code{__vrd2_cos}, @code{__vrd2_exp},\n-@code{__vrd2_log}, @code{__vrd2_log2}, @code{__vrd2_log10},\n-@code{__vrs4_sinf}, @code{__vrs4_cosf}, @code{__vrs4_expf},\n-@code{__vrs4_logf}, @code{__vrs4_log2f}, @code{__vrs4_log10f}\n-and @code{__vrs4_powf} when using this type and @option{-ftree-vectorize}\n-is enabled.  A ACML ABI compatible library will have to be specified\n-at link time.\n+external library.  Supported types are @code{svml} for the Intel short\n+vector math library and @code{acml} for the AMD math core library style\n+of interfacing.  GCC will currently emit calls to @code{vmldExp2},\n+@code{vmldLn2}, @code{vmldLog102}, @code{vmldLog102}, @code{vmldPow2},\n+@code{vmldTanh2}, @code{vmldTan2}, @code{vmldAtan2}, @code{vmldAtanh2},\n+@code{vmldCbrt2}, @code{vmldSinh2}, @code{vmldSin2}, @code{vmldAsinh2},\n+@code{vmldAsin2}, @code{vmldCosh2}, @code{vmldCos2}, @code{vmldAcosh2},\n+@code{vmldAcos2}, @code{vmlsExp4}, @code{vmlsLn4}, @code{vmlsLog104},\n+@code{vmlsLog104}, @code{vmlsPow4}, @code{vmlsTanh4}, @code{vmlsTan4},\n+@code{vmlsAtan4}, @code{vmlsAtanh4}, @code{vmlsCbrt4}, @code{vmlsSinh4},\n+@code{vmlsSin4}, @code{vmlsAsinh4}, @code{vmlsAsin4}, @code{vmlsCosh4},\n+@code{vmlsCos4}, @code{vmlsAcosh4} and @code{vmlsAcos4} for corresponding\n+function type when @option{-mveclibabi=svml} is used and @code{__vrd2_sin},\n+@code{__vrd2_cos}, @code{__vrd2_exp}, @code{__vrd2_log}, @code{__vrd2_log2},\n+@code{__vrd2_log10}, @code{__vrs4_sinf}, @code{__vrs4_cosf},\n+@code{__vrs4_expf}, @code{__vrs4_logf}, @code{__vrs4_log2f},\n+@code{__vrs4_log10f} and @code{__vrs4_powf} for corresponding function type\n+when @option{-mveclibabi=acml} is used. Both @option{-ftree-vectorize} and\n+@option{-funsafe-math-optimizations} have to be enabled. A SVML or ACML ABI\n+compatible library will have to be specified at link time.\n \n @item -mpush-args\n @itemx -mno-push-args"}, {"sha": "3bd9eab567a6945ce5c107333669ccf0bc929c6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9aba5d2249ed7556d7a73e43959853e07647d90b", "patch": "@@ -1,3 +1,7 @@\n+2008-03-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/vectorize6.c: New test.\n+\n 2008-03-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/35721\n@@ -20,7 +24,7 @@\n 2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR target/31334\n-\t* gcc.target/powerpc/altivec-25.c: Nnew testcase.\n+\t* gcc.target/powerpc/altivec-25.c: New testcase.\n \n 2008-03-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n "}, {"sha": "78ec53d15a81d45842cee73ac62f8468fe834293", "filename": "gcc/testsuite/gcc.target/i386/vectorize6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aba5d2249ed7556d7a73e43959853e07647d90b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c?ref=9aba5d2249ed7556d7a73e43959853e07647d90b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -ftree-vectorize -mveclibabi=svml -ffast-math\" } */\n+\n+double x[256];\n+\n+extern double sin(double);\n+\n+void foo(void)\n+{\n+  int i;\n+\n+  for (i=0; i<256; ++i)\n+    x[i] = sin(x[i]);\n+}\n+\n+/* { dg-final { scan-assembler \"vmldSin2\" } } */"}]}