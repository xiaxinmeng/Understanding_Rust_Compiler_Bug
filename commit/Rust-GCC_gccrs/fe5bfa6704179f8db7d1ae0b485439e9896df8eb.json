{"sha": "fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1YmZhNjcwNDE3OWY4ZGI3ZDFhZTBiNDg1NDM5ZTk4OTZkZjhlYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-28T16:46:47Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-28T16:46:47Z"}, "message": "offload-defaulted: Config option to silently ignore uninstalled offload compilers\n\nIf configured with --enable-offload-defaulted, configured but not installed\noffload compilers and libgomp plugins are silently ignored.  Useful for\ndistribution compilers where those are in separate optional packages.\n\n2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\nChangeLog:\n\n\t* configure.ac (--enable-offload-defaulted): New.\n\t* configure: Regenerate.\n\ngcc/ChangeLog:\n\n\t* configure.ac (OFFLOAD_DEFAULTED): AC_DEFINE if offload-defaulted.\n\t* gcc.c (process_command): New variable.\n\t(driver::maybe_putenv_OFFLOAD_TARGETS): If OFFLOAD_DEFAULTED,\n\tset it if -foffload is defaulted.\n\t* lto-wrapper.c (OFFLOAD_TARGET_DEFAULT_ENV): Define.\n\t(compile_offload_image): If OFFLOAD_DEFAULTED and\n\tOFFLOAD_TARGET_DEFAULT is in the environment, don't fail\n\tif corresponding mkoffload can't be found.\n\t(compile_images_for_offload_targets): Likewise.  Free and clear\n\toffload_names if no valid offload is found.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\nlibgomp/ChangeLog:\n\n\t* configure.ac (OFFLOAD_DEFAULTED): AC_DEFINE if offload-defaulted.\n\t* target.c (gomp_load_plugin_for_device): If set and if a plugin\n\tcan't be dlopened, silently assume it has no devices.\n\t* Makefile.in: Regenerate.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "7687db287a1ef04b1399cf8db2a06eb9398cc995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7687db287a1ef04b1399cf8db2a06eb9398cc995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da80ed7efd582575e7850a403ce693ec882d087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da80ed7efd582575e7850a403ce693ec882d087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da80ed7efd582575e7850a403ce693ec882d087"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "7dd1fd5bb6914d7626c086bf507593a14331bd9c", "filename": "configure", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -786,6 +786,7 @@ with_build_libsubdir\n with_system_zlib\n enable_as_accelerator_for\n enable_offload_targets\n+enable_offload_defaulted\n enable_gold\n enable_ld\n enable_compressed_debug_sections\n@@ -1515,6 +1516,11 @@ Optional Features:\n                           enable offloading to devices from comma-separated\n                           LIST of TARGET[=DIR]. Use optional path to find\n                           offload target compiler during the build\n+  --enable-offload-defaulted\n+\t\tIf enabled, configured but not installed offload compilers and\n+\t\tlibgomp plugins are silently ignored.  Useful for distribution\n+\t\tcompilers where those are in separate optional packages.\n+\n   --enable-gold[=ARG]     build gold [ARG={default,yes,no}]\n   --enable-ld[=ARG]       build ld [ARG={default,yes,no}]\n   --enable-compressed-debug-sections={all,gas,gold,ld,none}\n@@ -2981,6 +2987,14 @@ else\n fi\n \n \n+# Check whether --enable-offload-defaulted was given.\n+if test \"${enable_offload_defaulted+set}\" = set; then :\n+  enableval=$enable_offload_defaulted; enable_offload_defaulted=$enableval\n+else\n+  enable_offload_defaulted=\n+fi\n+\n+\n # Handle --enable-gold, --enable-ld.\n # --disable-gold [--enable-ld]\n #     Build only ld.  Default option."}, {"sha": "b923b0bb9ccdec3a263958938170f08de641d0fc", "filename": "configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -300,6 +300,14 @@ AC_ARG_ENABLE(offload-targets,\n   fi\n ], [enable_offload_targets=])\n \n+AC_ARG_ENABLE(offload-defaulted,\n+[AS_HELP_STRING([--enable-offload-defaulted]\n+\t\t[If enabled, configured but not installed offload compilers and\n+\t\tlibgomp plugins are silently ignored.  Useful for distribution\n+\t\tcompilers where those are in separate optional packages.])],\n+[enable_offload_defaulted=$enableval],\n+[enable_offload_defaulted=])\n+\n # Handle --enable-gold, --enable-ld.\n # --disable-gold [--enable-ld]\n #     Build only ld.  Default option."}, {"sha": "fb88acb3c34e67ccf0ebda560a3195a624a36397", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -2190,6 +2190,12 @@\n #endif\n \n \n+/* Define to 1 to if -foffload is defaulted */\n+#ifndef USED_FOR_TARGET\n+#undef OFFLOAD_DEFAULTED\n+#endif\n+\n+\n /* Define to offload targets, separated by commas. */\n #ifndef USED_FOR_TARGET\n #undef OFFLOAD_TARGETS"}, {"sha": "f5bef76ef7765d8461af1302ba2837966705e51e", "filename": "gcc/configure", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -8058,6 +8058,12 @@ $as_echo \"#define ENABLE_OFFLOADING 0\" >>confdefs.h\n \n fi\n \n+if test \"x$enable_offload_defaulted\" = xyes; then\n+\n+$as_echo \"#define OFFLOAD_DEFAULTED 1\" >>confdefs.h\n+\n+fi\n+\n \n # Check whether --with-multilib-list was given.\n if test \"${with_multilib_list+set}\" = set; then :\n@@ -19392,7 +19398,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19395 \"configure\"\n+#line 19401 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19498,7 +19504,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19501 \"configure\"\n+#line 19507 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "22305e3707176c5056e1b0b1ab81827bc8485cb4", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -1139,6 +1139,11 @@ else\n     [Define this to enable support for offloading.])\n fi\n \n+if test \"x$enable_offload_defaulted\" = xyes; then\n+  AC_DEFINE(OFFLOAD_DEFAULTED, 1,\n+    [Define to 1 to if -foffload is defaulted])\n+fi\n+\n AC_ARG_WITH(multilib-list,\n [AS_HELP_STRING([--with-multilib-list], [select multilibs (AArch64, SH and x86-64 only)])],\n :,"}, {"sha": "bd561ac570fbbbe2fd9997a86aef99a860c355da", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -319,6 +319,12 @@ static const char *spec_host_machine = DEFAULT_REAL_TARGET_MACHINE;\n \n static char *offload_targets = NULL;\n \n+#if OFFLOAD_DEFAULTED\n+/* Set to true if -foffload has not been used and offload_targets\n+   is set to the configured in default.  */\n+static bool offload_targets_default;\n+#endif\n+\n /* Nonzero if cross-compiling.\n    When -b is used, the value comes from the `specs' file.  */\n \n@@ -4828,7 +4834,12 @@ process_command (unsigned int decoded_options_count,\n   /* If the user didn't specify any, default to all configured offload\n      targets.  */\n   if (ENABLE_OFFLOADING && offload_targets == NULL)\n-    handle_foffload_option (OFFLOAD_TARGETS);\n+    {\n+      handle_foffload_option (OFFLOAD_TARGETS);\n+#if OFFLOAD_DEFAULTED\n+      offload_targets_default = true;\n+#endif\n+    }\n \n   if (output_file\n       && strcmp (output_file, \"-\") != 0\n@@ -8484,6 +8495,10 @@ driver::maybe_putenv_OFFLOAD_TARGETS () const\n       obstack_grow (&collect_obstack, offload_targets,\n \t\t    strlen (offload_targets) + 1);\n       xputenv (XOBFINISH (&collect_obstack, char *));\n+#if OFFLOAD_DEFAULTED\n+      if (offload_targets_default)\n+\txputenv (\"OFFLOAD_TARGET_DEFAULT=1\");\n+#endif\n     }\n \n   free (offload_targets);"}, {"sha": "e95b0d849baaee50cb317ce25df81925dddd8635", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Environment variable, used for passing the names of offload targets from GCC\n    driver to lto-wrapper.  */\n #define OFFLOAD_TARGET_NAMES_ENV\t\"OFFLOAD_TARGET_NAMES\"\n+#define OFFLOAD_TARGET_DEFAULT_ENV\t\"OFFLOAD_TARGET_DEFAULT\"\n \n /* By default there is no special suffix for target executables.  */\n #ifdef TARGET_EXECUTABLE_SUFFIX\n@@ -906,6 +907,13 @@ compile_offload_image (const char *target, const char *compiler_path,\n \tcompiler = paths[i];\n \tbreak;\n       }\n+#if OFFLOAD_DEFAULTED\n+  if (!compiler && getenv (OFFLOAD_TARGET_DEFAULT_ENV))\n+    {\n+      free_array_of_ptrs ((void **) paths, n_paths);\n+      return NULL;\n+    }\n+#endif\n \n   if (!compiler)\n     fatal_error (input_location,\n@@ -976,6 +984,7 @@ compile_images_for_offload_targets (unsigned in_argc, char *in_argv[],\n   if (!target_names)\n     return;\n   unsigned num_targets = parse_env_var (target_names, &names, NULL);\n+  int next_name_entry = 0;\n \n   const char *compiler_path = getenv (\"COMPILER_PATH\");\n   if (!compiler_path)\n@@ -986,15 +995,28 @@ compile_images_for_offload_targets (unsigned in_argc, char *in_argv[],\n   offload_names = XCNEWVEC (char *, num_targets + 1);\n   for (unsigned i = 0; i < num_targets; i++)\n     {\n-      offload_names[i]\n+      offload_names[next_name_entry]\n \t= compile_offload_image (names[i], compiler_path, in_argc, in_argv,\n \t\t\t\t compiler_opts, compiler_opt_count,\n \t\t\t\t linker_opts, linker_opt_count);\n-      if (!offload_names[i])\n+      if (!offload_names[next_name_entry])\n+#if OFFLOAD_DEFAULTED\n+\tcontinue;\n+#else\n \tfatal_error (input_location,\n \t\t     \"problem with building target image for %s\", names[i]);\n+#endif\n+      next_name_entry++;\n     }\n \n+#if OFFLOAD_DEFAULTED\n+  if (next_name_entry == 0)\n+    {\n+      free (offload_names);\n+      offload_names = NULL;\n+    }\n+#endif\n+\n  out:\n   free_array_of_ptrs ((void **) names, num_targets);\n }"}, {"sha": "9685704c355b374ee0ff3a52d4d629624fbecb6d", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -16,7 +16,7 @@\n \n # Plugins for offload execution, Makefile.am fragment.\n #\n-# Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+# Copyright (C) 2014-2021 Free Software Foundation, Inc.\n #\n # Contributed by Mentor Embedded.\n #"}, {"sha": "e702625ab6e2f4b1106389a12d8dd279dfd44857", "filename": "libgomp/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -143,6 +143,9 @@\n    */\n #undef LT_OBJDIR\n \n+/* Define to 1 to if -foffload is defaulted */\n+#undef OFFLOAD_DEFAULTED\n+\n /* Define to offload plugins, separated by commas. */\n #undef OFFLOAD_PLUGINS\n "}, {"sha": "6161da579c0e0448f6b37f461ec06270f36069b4", "filename": "libgomp/configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -14995,6 +14995,12 @@ $as_echo \"#define LIBGOMP_OFFLOADED_ONLY 1\" >>confdefs.h\n \n fi\n \n+if test \"x$enable_offload_defaulted\" = xyes; then\n+\n+$as_echo \"#define OFFLOAD_DEFAULTED 1\" >>confdefs.h\n+\n+fi\n+\n # The cast to long int works around a bug in the HP C Compiler\n # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'."}, {"sha": "7df80a32765e4d1fec10a0dfbe072b3a7ce4895a", "filename": "libgomp/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -221,6 +221,11 @@ if test x$libgomp_offloaded_only = xyes; then\n             [Define to 1 if building libgomp for an accelerator-only target.])\n fi\n \n+if test \"x$enable_offload_defaulted\" = xyes; then\n+  AC_DEFINE(OFFLOAD_DEFAULTED, 1,\n+    [Define to 1 to if -foffload is defaulted])\n+fi\n+\n AC_CHECK_SIZEOF([void *])\n \n m4_include([plugin/configfrag.ac])"}, {"sha": "2150e5d79b29e6df1e8ab8c370ab977ea367cab3", "filename": "libgomp/target.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5bfa6704179f8db7d1ae0b485439e9896df8eb/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=fe5bfa6704179f8db7d1ae0b485439e9896df8eb", "patch": "@@ -3173,7 +3173,11 @@ gomp_load_plugin_for_device (struct gomp_device_descr *device,\n \n   void *plugin_handle = dlopen (plugin_name, RTLD_LAZY);\n   if (!plugin_handle)\n+#if OFFLOAD_DEFAULTED\n+    return 0;\n+#else\n     goto dl_fail;\n+#endif\n \n   /* Check if all required functions are available in the plugin and store\n      their handlers.  None of the symbols can legitimately be NULL,"}]}