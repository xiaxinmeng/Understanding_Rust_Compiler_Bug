{"sha": "3629030e364980235fcfa66b5ac6b5995c469788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyOTAzMGUzNjQ5ODAyMzVmY2ZhNjZiNWFjNmI1OTk1YzQ2OTc4OA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:17:58Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:17:58Z"}, "message": "[AArch64, 6/6] Reimplement vpadd intrinsics & extend rtl patterns to all modes\n\n\t* config/aarch64/aarch64-builtins.def (faddp): New builtins for modes in\n\tVDQF.\n\t* config/aarch64/aarch64-simd.md (aarch64_faddp<mode>): New.\n\t(arch64_addpv4sf): Delete.\n\t(reduc_plus_scal_v4sf): Use \"gen_aarch64_faddpv4sf\" instead of\n\t\"gen_aarch64_addpv4sf\".\n\t* config/aarch64/arm_neon.h (vpadd_f32): Remove inline assembly.  Use\n\tbuiltin.\n\t(vpadds_f32): Likewise.\n\t(vpaddq_f32): Likewise.\n\t(vpaddq_f64): Likewise.\n\nFrom-SVN: r237205", "tree": {"sha": "aa030b17fbb47083b293a2b4f97983e3581d7369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa030b17fbb47083b293a2b4f97983e3581d7369"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3629030e364980235fcfa66b5ac6b5995c469788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3629030e364980235fcfa66b5ac6b5995c469788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3629030e364980235fcfa66b5ac6b5995c469788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3629030e364980235fcfa66b5ac6b5995c469788/comments", "author": null, "committer": null, "parents": [{"sha": "a672fa1247e54171542e1692bcd3cd6b2f41df2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a672fa1247e54171542e1692bcd3cd6b2f41df2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a672fa1247e54171542e1692bcd3cd6b2f41df2a"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "7b2d10fd16155a1d02cf249d9d7c9a215dff5e44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3629030e364980235fcfa66b5ac6b5995c469788", "patch": "@@ -1,3 +1,17 @@\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.def (faddp): New builtins for modes in\n+\tVDQF.\n+\t* config/aarch64/aarch64-simd.md (aarch64_faddp<mode>): New.\n+\t(arch64_addpv4sf): Delete.\n+\t(reduc_plus_scal_v4sf): Use \"gen_aarch64_faddpv4sf\" instead of\n+\t\"gen_aarch64_addpv4sf\".\n+\t* config/aarch64/arm_neon.h (vpadd_f32): Remove inline assembly.  Use\n+\tbuiltin.\n+\t(vpadds_f32): Likewise.\n+\t(vpaddq_f32): Likewise.\n+\t(vpaddq_f64): Likewise.\n+\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-builtins.def (fabd): New builtins for modes"}, {"sha": "1332734ce01da90d67c4eabfa0ce1cb6c70abfa5", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3629030e364980235fcfa66b5ac6b5995c469788", "patch": "@@ -460,3 +460,6 @@\n \n   /* Implemented by fabd<mode>3.  */\n   BUILTIN_VALLF (BINOP, fabd, 3)\n+\n+  /* Implemented by aarch64_faddp<mode>.  */\n+  BUILTIN_VDQF (BINOP, faddp, 0)"}, {"sha": "c8a5e3e82bb5b6581e06eb44a46ea7074ccb3462", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3629030e364980235fcfa66b5ac6b5995c469788", "patch": "@@ -1992,6 +1992,16 @@\n   }\n )\n \n+(define_insn \"aarch64_faddp<mode>\"\n+ [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+       (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:VDQF 2 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_FADDV))]\n+ \"TARGET_SIMD\"\n+ \"faddp\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_fp_reduc_add_<Vetype><q>\")]\n+)\n+\n (define_insn \"aarch64_reduc_plus_internal<mode>\"\n  [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n        (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n@@ -2019,15 +2029,6 @@\n   [(set_attr \"type\" \"neon_fp_reduc_add_<Vetype><q>\")]\n )\n \n-(define_insn \"aarch64_addpv4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n- \"faddp\\\\t%0.4s, %1.4s, %1.4s\"\n-  [(set_attr \"type\" \"neon_fp_reduc_add_s_q\")]\n-)\n-\n (define_expand \"reduc_plus_scal_v4sf\"\n  [(set (match_operand:SF 0 \"register_operand\")\n        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")]\n@@ -2036,8 +2037,8 @@\n {\n   rtx elt = GEN_INT (ENDIAN_LANE_N (V4SFmode, 0));\n   rtx scratch = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_aarch64_addpv4sf (scratch, operands[1]));\n-  emit_insn (gen_aarch64_addpv4sf (scratch, scratch));\n+  emit_insn (gen_aarch64_faddpv4sf (scratch, operands[1], operands[1]));\n+  emit_insn (gen_aarch64_faddpv4sf (scratch, scratch, scratch));\n   emit_insn (gen_aarch64_get_lanev4sf (operands[0], scratch, elt));\n   DONE;\n })"}, {"sha": "f70b6d367c51c4aebb8336373a6e2dedb4656e9a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 44, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629030e364980235fcfa66b5ac6b5995c469788/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3629030e364980235fcfa66b5ac6b5995c469788", "patch": "@@ -8225,17 +8225,6 @@ vpadalq_u32 (uint64x2_t a, uint32x4_t b)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vpadd_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"faddp %0.2s,%1.2s,%2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vpaddl_s8 (int8x8_t a)\n {\n@@ -8368,28 +8357,6 @@ vpaddlq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vpaddq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"faddp %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vpaddq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"faddp %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vpaddq_s8 (int8x16_t a, int8x16_t b)\n {\n@@ -8478,17 +8445,6 @@ vpaddq_u64 (uint64x2_t a, uint64x2_t b)\n   return result;\n }\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vpadds_f32 (float32x2_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"faddp %s0,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqdmulh_n_s16 (int16x4_t a, int16_t b)\n {\n@@ -18625,6 +18581,24 @@ vnegq_s64 (int64x2_t __a)\n \n /* vpadd  */\n \n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vpadd_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_faddpv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vpaddq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_faddpv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vpaddq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_faddpv2df (__a, __b);\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vpadd_s8 (int8x8_t __a, int8x8_t __b)\n {\n@@ -18664,6 +18638,12 @@ vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n \t\t\t\t\t\t  (int32x2_t) __b);\n }\n \n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vpadds_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_reduc_plus_scal_v2sf (__a);\n+}\n+\n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vpaddd_f64 (float64x2_t __a)\n {"}]}