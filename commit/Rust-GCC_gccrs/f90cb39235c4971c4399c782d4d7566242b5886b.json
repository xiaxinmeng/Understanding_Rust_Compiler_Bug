{"sha": "f90cb39235c4971c4399c782d4d7566242b5886b", "node_id": "C_kwDOANBUbNoAKGY5MGNiMzkyMzVjNDk3MWM0Mzk5Yzc4MmQ0ZDc1NjYyNDJiNTg4NmI", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2021-11-10T16:30:20Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-13T15:38:46Z"}, "message": "RISC-V: costs: support shift-and-add in strength-reduction\n\nThe strength-reduction implementation in expmed.cc will assess the\nprofitability of using shift-and-add using a RTL expression that wraps\na MULT (with a power-of-2) in a PLUS.  Unless the RISC-V rtx_costs\nfunction recognizes this as expressing a sh[123]add instruction, we\nwill return an inflated cost---thus defeating the optimization.\n\nThis change adds the necessary idiom recognition to provide an\naccurate cost for this for of expressing sh[123]add.\n\nInstead on expanding to\n\tli\ta5,200\n\tmulw\ta0,a5,a0\nwith this change, the expression 'a * 200' is sythesized as:\n\tsh2add\ta0,a0,a0   // *5 = a + 4 * a\n\tsh2add\ta0,a0,a0   // *5 = a + 4 * a\n\tslli\ta0,a0,3    // *8\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_rtx_costs): Recognize shNadd,\n\tif expressed as a plus and multiplication with a power-of-2.\n\tSplit costing for MINUS from PLUS.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-shNadd-07.c: New test.", "tree": {"sha": "6b94233d93fd261fb25b1530cdc3e23fbd99c648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b94233d93fd261fb25b1530cdc3e23fbd99c648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90cb39235c4971c4399c782d4d7566242b5886b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90cb39235c4971c4399c782d4d7566242b5886b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90cb39235c4971c4399c782d4d7566242b5886b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90cb39235c4971c4399c782d4d7566242b5886b/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e749ee3019d7917184af30dab8d09c933c0a4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e749ee3019d7917184af30dab8d09c933c0a4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e749ee3019d7917184af30dab8d09c933c0a4a1"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "e36ff05695a6a27d2ae803d5007f0fe36acbdc3c", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90cb39235c4971c4399c782d4d7566242b5886b/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90cb39235c4971c4399c782d4d7566242b5886b/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=f90cb39235c4971c4399c782d4d7566242b5886b", "patch": "@@ -2459,6 +2459,12 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       return false;\n \n     case MINUS:\n+      if (float_mode_p)\n+\t*total = tune_param->fp_add[mode == DFmode];\n+      else\n+\t*total = riscv_binary_cost (x, 1, 4);\n+      return false;\n+\n     case PLUS:\n       /* add.uw pattern for zba.  */\n       if (TARGET_ZBA\n@@ -2482,6 +2488,19 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t  *total = COSTS_N_INSNS (1);\n \t  return true;\n \t}\n+      /* Before strength-reduction, the shNadd can be expressed as the addition\n+\t of a multiplication with a power-of-two.  If this case is not handled,\n+\t the strength-reduction in expmed.c will calculate an inflated cost. */\n+      if (TARGET_ZBA\n+\t  && mode == word_mode\n+\t  && GET_CODE (XEXP (x, 0)) == MULT\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n+\t  && IN_RANGE (pow2p_hwi (INTVAL (XEXP (XEXP (x, 0), 1))), 1, 3))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n       /* shNadd.uw pattern for zba.\n \t [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t       (plus:DI"}, {"sha": "98d35e1da9b4cff1cc16549d318bfb4c53c9c30b", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-07.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90cb39235c4971c4399c782d4d7566242b5886b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90cb39235c4971c4399c782d4d7566242b5886b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c?ref=f90cb39235c4971c4399c782d4d7566242b5886b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+\n+unsigned long\n+f1 (unsigned long i)\n+{\n+  return i * 200;\n+}\n+\n+unsigned long\n+f2 (unsigned long i)\n+{\n+  return i * 783;\n+}\n+\n+unsigned long\n+f3 (unsigned long i)\n+{\n+  return i * 784;\n+}\n+\n+unsigned long\n+f4 (unsigned long i)\n+{\n+  return i * 1574;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh2add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sh1add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"slli\" 5 } } */\n+/* { dg-final { scan-assembler-times \"mul\" 1 } } */"}]}