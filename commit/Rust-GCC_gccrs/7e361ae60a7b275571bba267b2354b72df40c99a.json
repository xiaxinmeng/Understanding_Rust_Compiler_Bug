{"sha": "7e361ae60a7b275571bba267b2354b72df40c99a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UzNjFhZTYwYTdiMjc1NTcxYmJhMjY3YjIzNTRiNzJkZjQwYzk5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-05-17T18:01:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-05-17T18:01:33Z"}, "message": "re PR c++/40139 (ICE on invalid use of destructor)\n\n\tPR c++/40139\n\t* pt.c (tsubst_qualified_id): Retain the type if we aren't dealing\n\twith a dependent type.  Actually look up the destructor.\n\t* semantics.c (finish_id_expression): Fix logic.\n\t(finish_qualified_id_expr): Don't try to use 'this' if we aren't in\n\ta function.\n\t* typeck.c (build_x_unary_op): Diagnose taking the address of a\n\tconstructor or destructor.\n\t* tree.c (get_first_fn): Handle OFFSET_REF.\n\nFrom-SVN: r147638", "tree": {"sha": "097a2b317a3f015b864632a6294fe207c4fd91d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/097a2b317a3f015b864632a6294fe207c4fd91d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e361ae60a7b275571bba267b2354b72df40c99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e361ae60a7b275571bba267b2354b72df40c99a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e361ae60a7b275571bba267b2354b72df40c99a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e361ae60a7b275571bba267b2354b72df40c99a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fa6fa79177806a38422c7c13a29a8fc12e38bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa6fa79177806a38422c7c13a29a8fc12e38bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa6fa79177806a38422c7c13a29a8fc12e38bf3"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "af4b69ca718307086eac47f8b0ac6b052b8c966d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -1,3 +1,15 @@\n+2009-05-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40139\n+\t* pt.c (tsubst_qualified_id): Retain the type if we aren't dealing\n+\twith a dependent type.  Actually look up the destructor.\n+\t* semantics.c (finish_id_expression): Fix logic.\n+\t(finish_qualified_id_expr): Don't try to use 'this' if we aren't in\n+\ta function.\n+\t* typeck.c (build_x_unary_op): Diagnose taking the address of a\n+\tconstructor or destructor.\n+\t* tree.c (get_first_fn): Handle OFFSET_REF.\n+\n 2009-05-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* tree.c (cxx_printable_name_internal): Allow consecutive"}, {"sha": "2ca28d69c6485930ad4acaa3e422d1634f62f24d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -9930,16 +9930,29 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     expr = name;\n \n   if (dependent_type_p (scope))\n-    return build_qualified_name (/*type=*/NULL_TREE,\n-\t\t\t\t scope, expr,\n-\t\t\t\t QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n+    {\n+      tree type = NULL_TREE;\n+      if (DECL_P (expr) && !dependent_scope_p (scope))\n+\ttype = TREE_TYPE (expr);\n+      return build_qualified_name (type, scope, expr,\n+\t\t\t\t   QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n+    }\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n     {\n       if (TREE_CODE (expr) == BIT_NOT_EXPR)\n-\t/* If this were actually a destructor call, it would have been\n-\t   parsed as such by the parser.  */\n-\texpr = error_mark_node;\n+\t{\n+\t  /* A BIT_NOT_EXPR is used to represent a destructor.  */\n+\t  if (!check_dtor_name (scope, TREE_OPERAND (expr, 0)))\n+\t    {\n+\t      error (\"qualifying type %qT does not match destructor name ~%qT\",\n+\t\t     scope, TREE_OPERAND (expr, 0));\n+\t      expr = error_mark_node;\n+\t    }\n+\t  else\n+\t    expr = lookup_qualified_name (scope, complete_dtor_identifier,\n+\t\t\t\t\t  /*is_type_p=*/0, false);\n+\t}\n       else\n \texpr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n       if (TREE_CODE (TREE_CODE (expr) == TEMPLATE_DECL"}, {"sha": "18aa0519e1c43e2b437ccd82a10a6d44e24ac42f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -1664,11 +1664,10 @@ finish_qualified_id_expr (tree qualifying_class,\n       fns = BASELINK_FUNCTIONS (expr);\n       if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n \tfns = TREE_OPERAND (fns, 0);\n-      /* If so, the expression may be relative to the current\n-\t class.  */\n+      /* If so, the expression may be relative to 'this'.  */\n       if (!shared_member_p (fns)\n-\t  && current_class_type\n-\t  && DERIVED_FROM_P (qualifying_class, current_class_type))\n+\t  && current_class_ref\n+\t  && DERIVED_FROM_P (qualifying_class, TREE_TYPE (current_class_ref)))\n \texpr = (build_class_member_access_expr\n \t\t(maybe_dummy_object (qualifying_class, NULL),\n \t\t expr,\n@@ -2871,16 +2870,16 @@ finish_id_expression (tree id_expression,\n \t\t\t\t\t\t     done, address_p,\n \t\t\t\t\t\t     template_p,\n \t\t\t\t\t\t     template_arg_p);\n-\t\t  else if (dependent_scope_p (scope))\n-\t\t    decl = build_qualified_name (/*type=*/NULL_TREE,\n-\t\t\t\t\t\t scope,\n-\t\t\t\t\t\t id_expression,\n-\t\t\t\t\t\t template_p);\n-\t\t  else if (DECL_P (decl))\n-\t\t    decl = build_qualified_name (TREE_TYPE (decl),\n-\t\t\t\t\t\t scope,\n-\t\t\t\t\t\t id_expression,\n-\t\t\t\t\t\t template_p);\n+\t\t  else\n+\t\t    {\n+\t\t      tree type = NULL_TREE;\n+\t\t      if (DECL_P (decl) && !dependent_scope_p (scope))\n+\t\t\ttype = TREE_TYPE (decl);\n+\t\t      decl = build_qualified_name (type,\n+\t\t\t\t\t\t   scope,\n+\t\t\t\t\t\t   id_expression,\n+\t\t\t\t\t\t   template_p);\n+\t\t    }\n \t\t}\n \t      if (TREE_TYPE (decl))\n \t\tdecl = convert_from_reference (decl);"}, {"sha": "f1868f5e5d7d08521eb1869dc21dc1f83ccac7bf", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -1200,7 +1200,8 @@ get_first_fn (tree from)\n {\n   gcc_assert (is_overloaded_fn (from));\n   /* A baselink is also considered an overloaded function.  */\n-  if (TREE_CODE (from) == COMPONENT_REF)\n+  if (TREE_CODE (from) == OFFSET_REF\n+      || TREE_CODE (from) == COMPONENT_REF)\n     from = TREE_OPERAND (from, 1);\n   if (BASELINK_P (from))\n     from = BASELINK_FUNCTIONS (from);"}, {"sha": "069a057004406e2984ac3f355ec259b54ad51c19", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -4141,8 +4141,20 @@ build_x_unary_op (enum tree_code code, tree xarg, tsubst_flags_t complain)\n \t\t\t/*overloaded_p=*/NULL, complain);\n   if (!exp && code == ADDR_EXPR)\n     {\n-      /*  A pointer to member-function can be formed only by saying\n-\t  &X::mf.  */\n+      if (is_overloaded_fn (xarg))\n+\t{\n+\t  tree fn = get_first_fn (xarg);\n+\t  if (DECL_CONSTRUCTOR_P (fn) || DECL_DESTRUCTOR_P (fn))\n+\t    {\n+\t      const char *type =\n+\t\t(DECL_CONSTRUCTOR_P (fn) ? \"constructor\" : \"destructor\");\n+\t      error (\"taking address of %s %qE\", type, xarg);\n+\t      return error_mark_node;\n+\t    }\n+\t}\n+\n+      /* A pointer to member-function can be formed only by saying\n+\t &X::mf.  */\n       if (!flag_ms_extensions && TREE_CODE (TREE_TYPE (xarg)) == METHOD_TYPE\n \t  && (TREE_CODE (xarg) != OFFSET_REF || !PTRMEM_OK_P (xarg)))\n \t{"}, {"sha": "1494ae9ef68fed960278d38785aedfbb30f94def", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -1,3 +1,8 @@\n+2009-05-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40139\n+\t* g++.dg/template/dtor6.C: New.\n+\n 2009-05-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/warn/translate-ice-1.C: New test."}, {"sha": "c44b780294c21f9b189fd2b03ed0c0d97a028cbc", "filename": "gcc/testsuite/g++.dg/template/dtor6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e361ae60a7b275571bba267b2354b72df40c99a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor6.C?ref=7e361ae60a7b275571bba267b2354b72df40c99a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/40139\n+\n+template<int> struct A\n+{\n+  static int i;\n+};\n+\n+template<int N> int A<N>::i = { A::~A }; // { dg-error \"non-static member function\" }\n+\n+template class A<0>;\n+\n+struct X { };\n+\n+int i1 = X::~X;\t\t\t// { dg-error \"non-static member function\" }\n+int i2 = &X::~X;\t\t// { dg-error \"address of destructor\" }\n+int i3 = &A<0>::~A;\t\t// { dg-error \"address of destructor\" }"}]}