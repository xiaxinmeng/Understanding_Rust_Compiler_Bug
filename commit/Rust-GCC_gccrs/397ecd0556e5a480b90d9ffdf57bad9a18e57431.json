{"sha": "397ecd0556e5a480b90d9ffdf57bad9a18e57431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk3ZWNkMDU1NmU1YTQ4MGI5MGQ5ZmZkZjU3YmFkOWExOGU1NzQzMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-23T15:53:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-23T15:53:41Z"}, "message": "testsuite: add param-type-mismatch.c/C testcases as a baseline\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/diagnostic/param-type-mismatch.C: New test acse.\n\t* gcc.dg/param-type-mismatch.c: New test case.\n\nFrom-SVN: r251312", "tree": {"sha": "1b2221267485718efa7fedb17c68410d3d510b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2221267485718efa7fedb17c68410d3d510b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/397ecd0556e5a480b90d9ffdf57bad9a18e57431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397ecd0556e5a480b90d9ffdf57bad9a18e57431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397ecd0556e5a480b90d9ffdf57bad9a18e57431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397ecd0556e5a480b90d9ffdf57bad9a18e57431/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7fbf563809308a66911d0300b42c5522fdd835f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fbf563809308a66911d0300b42c5522fdd835f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fbf563809308a66911d0300b42c5522fdd835f"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "c9c71934a7cb9a8ae8e795cbb61cbe6fd90460f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=397ecd0556e5a480b90d9ffdf57bad9a18e57431", "patch": "@@ -1,3 +1,8 @@\n+2017-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/diagnostic/param-type-mismatch.C: New test acse.\n+\t* gcc.dg/param-type-mismatch.c: New test case.\n+\n 2017-08-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-perm-char.c: New."}, {"sha": "b8833ef1372de0aef45d9196ebc5c1dc7d411358", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch.C", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C?ref=397ecd0556e5a480b90d9ffdf57bad9a18e57431", "patch": "@@ -0,0 +1,179 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* A collection of calls where argument 2 is of the wrong type.\n+\n+   TODO: we should put the caret and underline for the diagnostic\n+   at the second argument, rather than the close paren.\n+\n+   TODO: we should highlight the second parameter of the callee, rather\n+   than its name.  */\n+\n+/* decl, with argname.  */\n+\n+extern int callee_1 (int one, const char *two, float three); // { dg-line callee_1 }\n+\n+int test_1 (int first, int second, float third)\n+{\n+  return callee_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_1 (first, second, third);\n+                                        ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_1\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_1 (int one, const char *two, float three);\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* decl, without argname.  */\n+\n+extern int callee_2 (int, const char *, float); // { dg-line callee_2 }\n+\n+int test_2 (int first, int second, float third)\n+{\n+  return callee_2 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_2 (first, second, third);\n+                                        ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_2\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_2 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_2 (int, const char *, float);\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* defn, with argname.  */\n+\n+static int callee_3 (int one, const char *two, float three) // { dg-line callee_3 }\n+{\n+  return callee_2 (one, two, three);\n+}\n+\n+int test_3 (int first, int second, float third)\n+{\n+  return callee_3 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_3 (first, second, third);\n+                                        ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_3\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_3 }\n+  /* { dg-begin-multiline-output \"\" }\n+ static int callee_3 (int one, const char *two, float three)\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* static member, with argname.  */\n+\n+struct s4 { static int member_1 (int one, const char *two, float three); };\n+\n+int test_4 (int first, int second, float third)\n+{\n+  return s4::member_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return s4::member_1 (first, second, third);\n+                                            ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s4 { static int member_1 (int one, const char *two, float three); };\n+                        ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* non-static member, with argname.  */\n+\n+struct s5 { int member_1 (int one, const char *two, float three); };\n+\n+int test_5 (int first, int second, float third)\n+{\n+  s5 inst;\n+  return inst.member_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s5 { int member_1 (int one, const char *two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* non-static member, with argname, via a ptr.  */\n+\n+struct s6 { int member_1 (int one, const char *two, float three); };\n+\n+int test_6 (int first, int second, float third, s6 *ptr)\n+{\n+  return ptr->member_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return ptr->member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s6 { int member_1 (int one, const char *two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Template function.  */\n+\n+template <typename T>\n+int test_7 (int one, T two, float three);\n+\n+int test_7 (int first, int second, float third)\n+{\n+  return test_7 <const char *> (first, second, third); // { dg-error \"no matching function\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return test_7 <const char *> (first, second, third);\n+                                                     ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return test_7 <const char *> (first, second, third);\n+                                                     ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ int test_7 (int one, T two, float three);\n+     ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Template class, static function.  */\n+\n+template <typename T>\n+struct s8 { static int member_1 (int one, T two, float three); };\n+\n+int test_8 (int first, int second, float third)\n+{\n+  return s8 <const char *>::member_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return s8 <const char *>::member_1 (first, second, third);\n+                                                           ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s8 { static int member_1 (int one, T two, float three); };\n+                        ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Template class, non-static function.  */\n+\n+template <typename T>\n+struct s9 { int member_1 (int one, T two, float three); };\n+\n+int test_9 (int first, int second, float third)\n+{\n+  s9 <const char *> inst;\n+  return inst.member_1 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s9 { int member_1 (int one, T two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+// TODO: template callsite"}, {"sha": "70ea0bc268bfb83096bb3a478ca391a4ebfd5efe", "filename": "gcc/testsuite/gcc.dg/param-type-mismatch.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397ecd0556e5a480b90d9ffdf57bad9a18e57431/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c?ref=397ecd0556e5a480b90d9ffdf57bad9a18e57431", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" }  */\n+\n+/* A collection of calls where argument 2 is of the wrong type.\n+\n+   TODO: we should highlight the second parameter of the callee, rather\n+   than its name.  */\n+\n+/* decl, with argname.  */\n+\n+extern int callee_1 (int one, const char *two, float three); /* { dg-line callee_1 } */\n+\n+int test_1 (int first, int second, float third)\n+{\n+  return callee_1 (first, second, third); /* { dg-warning \"passing argument 2 of 'callee_1' makes pointer from integer without a cast\" }  */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_1 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_1 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_1 (int one, const char *two, float three);\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* decl, without argname.  */\n+\n+extern int callee_2 (int, const char *, float); /* { dg-line callee_2 } */\n+\n+int test_2 (int first, int second, float third)\n+{\n+  return callee_2 (first, second, third); /* { dg-warning \"passing argument 2 of 'callee_2' makes pointer from integer without a cast\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_2 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_2 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_2 (int, const char *, float);\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* defn, with argname.  */\n+\n+static int callee_3 (int one, const char *two, float three) /* { dg-line callee_3 } */\n+{\n+  return callee_2 (one, two, three);\n+}\n+\n+int test_3 (int first, int second, float third)\n+{\n+  return callee_3 (first, second, third); // { dg-warning \"passing argument 2 of 'callee_3' makes pointer from integer without a cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_3 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_3 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ static int callee_3 (int one, const char *two, float three)\n+            ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}