{"sha": "9e07b0bfe8412adf994fa1b191779fe464c3c796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwN2IwYmZlODQxMmFkZjk5NGZhMWIxOTE3NzlmZTQ2NGMzYzc5Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-08T12:45:01Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-08T12:45:01Z"}, "message": "Modernize branch_changer.py script.\n\nmaintainer-scripts/ChangeLog:\n\n\t* branch_changer.py: Modernize and fix flake8 issues.\n\t* setup.cfg: New file.", "tree": {"sha": "5c2510d86fa02731247ba0f8751d4f40629c8ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2510d86fa02731247ba0f8751d4f40629c8ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e07b0bfe8412adf994fa1b191779fe464c3c796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e07b0bfe8412adf994fa1b191779fe464c3c796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e07b0bfe8412adf994fa1b191779fe464c3c796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e07b0bfe8412adf994fa1b191779fe464c3c796/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac24fa46e449fbff0ff571951cfcc78b8488f6e7"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "d79543617522e2ecae9201f158a9d2322153554d", "filename": "maintainer-scripts/branch_changer.py", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e07b0bfe8412adf994fa1b191779fe464c3c796/maintainer-scripts%2Fbranch_changer.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e07b0bfe8412adf994fa1b191779fe464c3c796/maintainer-scripts%2Fbranch_changer.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fbranch_changer.py?ref=9e07b0bfe8412adf994fa1b191779fe464c3c796", "patch": "@@ -16,15 +16,17 @@\n #\n # Sample usages of the script:\n #\n-# $ ./maintainer-scripts/branch_changer.py api_key --new-target-milestone=6.2:6.3 --comment '6.2 has been released....' --add-known-to-fail=6.2 --limit 3\n+# $ ./maintainer-scripts/branch_changer.py api_key --new-target-milestone=6.2:6.3 \\\n+#       --comment '6.2 has been released....' --add-known-to-fail=6.2 --limit 3\n #\n # The invocation will set target milestone to 6.3 for all issues that\n # have mistone equal to 6.2. Apart from that, a comment is added to these\n # issues and 6.2 version is added to known-to-fail versions.\n # At maximum 3 issues will be modified and the script will run\n # in dry mode (no issues are modified), unless you append --doit option.\n #\n-# $ ./maintainer-scripts/branch_changer.py api_key --new-target-milestone=5.5:6.3 --comment 'GCC 5 branch is being closed' --remove 5 --limit 3\n+# $ ./maintainer-scripts/branch_changer.py api_key --new-target-milestone=5.5:6.3 \\\n+#       --comment 'GCC 5 branch is being closed' --remove 5 --limit 3\n #\n # Very similar to previous invocation, but instead of adding to known-to-fail,\n # '5' release is removed from all issues that have the regression prefix.\n@@ -35,17 +37,19 @@\n # issues that contain '7' in its regression prefix.\n #\n \n-import requests\n-import json\n import argparse\n+import json\n import re\n \n-from semantic_version import Version\n+import requests\n+\n+from semantic_version import SimpleSpec\n \n base_url = 'https://gcc.gnu.org/bugzilla/rest.cgi/'\n statuses = ['UNCONFIRMED', 'ASSIGNED', 'SUSPENDED', 'NEW', 'WAITING', 'REOPENED']\n search_summary = ' Regression]'\n-regex = '(.*\\[)([0-9\\./]*)( [rR]egression])(.*)'\n+regex = r'(.*\\[)([0-9\\./]*)( [rR]egression])(.*)'\n+\n \n class Bug:\n     def __init__(self, data):\n@@ -59,7 +63,7 @@ def __init__(self, data):\n \n     def parse_summary(self):\n         m = re.match(regex, self.data['summary'])\n-        if m != None:\n+        if m:\n             self.versions = m.group(2).split('/')\n             self.is_regression = True\n             self.regex_match = m\n@@ -116,15 +120,16 @@ def change_milestone(self, api_key, old_milestone, new_milestone, comment, new_f\n             print('  changing target milestone: \"%s\" to \"%s\" (same branch)' % (old_milestone, new_milestone))\n         elif self.is_regression and new_major in self.versions:\n             args['target_milestone'] = new_milestone\n-            print('  changing target milestone: \"%s\" to \"%s\" (regresses with the new milestone)' % (old_milestone, new_milestone))\n+            print('  changing target milestone: \"%s\" to \"%s\" (regresses with the new milestone)'\n+                  % (old_milestone, new_milestone))\n         else:\n             print('  not changing target milestone: not a regression or does not regress with the new milestone')\n \n-        if 'target_milestone' in args and comment != None:\n+        if 'target_milestone' in args and comment:\n             print('  adding comment: \"%s\"' % comment)\n-            args['comment'] = {'comment': comment }\n+            args['comment'] = {'comment': comment}\n \n-        if new_fail_version != None:\n+        if new_fail_version:\n             if self.add_known_to_fail(new_fail_version):\n                 s = self.serialize_known_to_fail()\n                 print('  changing known_to_fail: \"%s\" to \"%s\"' % (self.data['cf_known_to_fail'], s))\n@@ -137,28 +142,28 @@ def change_milestone(self, api_key, old_milestone, new_milestone, comment, new_f\n             return False\n \n     def serialize_summary(self):\n-        assert self.versions != None\n-        assert self.is_regression == True\n+        assert not self.versions\n+        assert self.is_regression\n \n         new_version = '/'.join(self.versions)\n         new_summary = self.regex_match.group(1) + new_version + self.regex_match.group(3) + self.regex_match.group(4)\n         return new_summary\n \n     def serialize_known_to_fail(self):\n         assert type(self.fail_versions) is list\n-        return ', '.join(sorted(self.fail_versions, key = lambda x: Version(x, partial = True)))\n+        return ', '.join(sorted(self.fail_versions, key=lambda x: SimpleSpec(x)))\n \n     def modify_bug(self, api_key, params, doit):\n         u = base_url + 'bug/' + str(self.data['id'])\n \n         data = {\n             'ids': [self.data['id']],\n-            'api_key': api_key }\n+            'api_key': api_key}\n \n         data.update(params)\n \n         if doit:\n-            r = requests.put(u, data = json.dumps(data), headers = {\"content-type\": \"text/javascript\"})\n+            r = requests.put(u, data=json.dumps(data), headers={'content-type': 'text/javascript'})\n             print(r)\n \n     @staticmethod\n@@ -170,18 +175,19 @@ def get_major_version(release):\n     @staticmethod\n     def get_bugs(api_key, query):\n         u = base_url + 'bug'\n-        r = requests.get(u, params = query)\n+        r = requests.get(u, params=query)\n         return [Bug(x) for x in r.json()['bugs']]\n \n+\n def search(api_key, remove, add, limit, doit):\n     bugs = Bug.get_bugs(api_key, {'api_key': api_key, 'summary': search_summary, 'bug_status': statuses})\n     bugs = list(filter(lambda x: x.is_regression, bugs))\n \n     modified = 0\n     for bug in bugs:\n-        if remove != None:\n+        if remove:\n             bug.remove_release(remove)\n-        if add != None:\n+        if add:\n             bug.add_release(add)\n \n         if bug.update_summary(api_key, doit):\n@@ -191,6 +197,7 @@ def search(api_key, remove, add, limit, doit):\n \n     print('\\nModified PRs: %d' % modified)\n \n+\n def replace_milestone(api_key, limit, old_milestone, new_milestone, comment, add_known_to_fail, doit):\n     bugs = Bug.get_bugs(api_key, {'api_key': api_key, 'bug_status': statuses, 'target_milestone': old_milestone})\n \n@@ -203,23 +210,26 @@ def replace_milestone(api_key, limit, old_milestone, new_milestone, comment, add\n \n     print('\\nModified PRs: %d' % modified)\n \n+\n parser = argparse.ArgumentParser(description='')\n-parser.add_argument('api_key', help = 'API key')\n-parser.add_argument('--remove', nargs = '?', help = 'Remove a release from summary')\n-parser.add_argument('--add', nargs = '?', help = 'Add a new release to summary, e.g. 6:7 will add 7 where 6 is included')\n-parser.add_argument('--limit', nargs = '?', help = 'Limit number of bugs affected by the script')\n-parser.add_argument('--doit', action = 'store_true', help = 'Really modify BUGs in the bugzilla')\n-parser.add_argument('--new-target-milestone', help = 'Set a new target milestone, e.g. 4.9.3:4.9.4 will set milestone to 4.9.4 for all PRs having milestone set to 4.9.3')\n-parser.add_argument('--add-known-to-fail', help = 'Set a new known to fail for all PRs affected by --new-target-milestone')\n-parser.add_argument('--comment', help = 'Comment a PR for which we set a new target milestore')\n+parser.add_argument('api_key', help='API key')\n+parser.add_argument('--remove', nargs='?', help='Remove a release from summary')\n+parser.add_argument('--add', nargs='?', help='Add a new release to summary, e.g. 6:7 will add 7 where 6 is included')\n+parser.add_argument('--limit', nargs='?', help='Limit number of bugs affected by the script')\n+parser.add_argument('--doit', action='store_true', help='Really modify BUGs in the bugzilla')\n+parser.add_argument('--new-target-milestone', help='Set a new target milestone, '\n+                    'e.g. 4.9.3:4.9.4 will set milestone to 4.9.4 for all PRs having milestone set to 4.9.3')\n+parser.add_argument('--add-known-to-fail', help='Set a new known to fail '\n+                    'for all PRs affected by --new-target-milestone')\n+parser.add_argument('--comment', help='Comment a PR for which we set a new target milestore')\n \n args = parser.parse_args()\n # Python3 does not have sys.maxint\n-args.limit = int(args.limit) if args.limit != None else 10**10\n+args.limit = int(args.limit) if args.limit else 10**10\n \n-if args.remove != None or args.add != None:\n+if args.remove or args.add:\n     search(args.api_key, args.remove, args.add, args.limit, args.doit)\n-if args.new_target_milestone != None:\n+if args.new_target_milestone:\n     t = args.new_target_milestone.split(':')\n     assert len(t) == 2\n     replace_milestone(args.api_key, args.limit, t[0], t[1], args.comment, args.add_known_to_fail, args.doit)"}, {"sha": "efc313f6d526e31412bdf993347da88105ebadbb", "filename": "maintainer-scripts/setup.cfg", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e07b0bfe8412adf994fa1b191779fe464c3c796/maintainer-scripts%2Fsetup.cfg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e07b0bfe8412adf994fa1b191779fe464c3c796/maintainer-scripts%2Fsetup.cfg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fsetup.cfg?ref=9e07b0bfe8412adf994fa1b191779fe464c3c796", "patch": "@@ -0,0 +1,5 @@\n+[flake8]\n+max-line-length = 120\n+\n+[tool:pytest]\n+addopts = -vv --flake8"}]}