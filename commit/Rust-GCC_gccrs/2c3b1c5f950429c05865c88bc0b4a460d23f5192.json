{"sha": "2c3b1c5f950429c05865c88bc0b4a460d23f5192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzYjFjNWY5NTA0MjljMDU4NjVjODhiYzBiNGE0NjBkMjNmNTE5Mg==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-09-11T18:55:18Z"}, "committer": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-09-11T20:13:12Z"}, "message": "libstdc++: Split std::align/assume_aligned to bits/align.h\n\nWe would like to be able to use std::align and std::assume_aligned\nwithout pulling in everything in <memory>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am (bits_headers): Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/align.h: New file.\n\t* include/std/memory (align): Move definition to bits/align.h.\n\t(assume_aligned): Likewise.", "tree": {"sha": "cf2011eb4da53b199879a6998a7d0a3f7b115ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2011eb4da53b199879a6998a7d0a3f7b115ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c3b1c5f950429c05865c88bc0b4a460d23f5192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3b1c5f950429c05865c88bc0b4a460d23f5192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3b1c5f950429c05865c88bc0b4a460d23f5192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3b1c5f950429c05865c88bc0b4a460d23f5192/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ad6b1979f4bd7121e977c4a44151b14d8a0147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ad6b1979f4bd7121e977c4a44151b14d8a0147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ad6b1979f4bd7121e977c4a44151b14d8a0147"}], "stats": {"total": 166, "additions": 107, "deletions": 59}, "files": [{"sha": "c9df9a9d6c62751fa8cbd8e3cb6cf9f5e634f1c8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2c3b1c5f950429c05865c88bc0b4a460d23f5192", "patch": "@@ -96,6 +96,7 @@ bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/algorithmfwd.h \\\n+\t${bits_srcdir}/align.h \\\n \t${bits_srcdir}/alloc_traits.h \\\n \t${bits_srcdir}/allocated_ptr.h \\\n \t${bits_srcdir}/allocator.h \\"}, {"sha": "3d86b733ccde3fb76a9e74a953aac964dec40523", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2c3b1c5f950429c05865c88bc0b4a460d23f5192", "patch": "@@ -442,6 +442,7 @@ bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/algorithmfwd.h \\\n+\t${bits_srcdir}/align.h \\\n \t${bits_srcdir}/alloc_traits.h \\\n \t${bits_srcdir}/allocated_ptr.h \\\n \t${bits_srcdir}/allocator.h \\"}, {"sha": "c3267f2293406b8e626455a686104b35d93b1d91", "filename": "libstdc++-v3/include/bits/align.h", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h?ref=2c3b1c5f950429c05865c88bc0b4a460d23f5192", "patch": "@@ -0,0 +1,104 @@\n+// align implementation -*- C++ -*-\n+\n+// Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/align.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{memory}\n+ */\n+\n+#ifndef _GLIBCXX_ALIGN_H\n+#define _GLIBCXX_ALIGN_H 1\n+\n+#include <bits/c++config.h>\n+\n+#include <bit>          // std::has_single_bit\n+#include <stdint.h>     // uintptr_t\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+/**\n+ *  @brief Fit aligned storage in buffer.\n+ *  @ingroup memory\n+ *\n+ *  This function tries to fit @a __size bytes of storage with alignment\n+ *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such\n+ *  a buffer fits then @a __ptr is changed to point to the first byte of the\n+ *  aligned storage and @a __space is reduced by the bytes used for alignment.\n+ *\n+ *  C++11 20.6.5 [ptr.align]\n+ *\n+ *  @param __align   A fundamental or extended alignment value.\n+ *  @param __size    Size of the aligned storage required.\n+ *  @param __ptr     Pointer to a buffer of @a __space bytes.\n+ *  @param __space   Size of the buffer pointed to by @a __ptr.\n+ *  @return the updated pointer if the aligned storage fits, otherwise nullptr.\n+ *\n+ */\n+inline void*\n+align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);\n+#else\n+  // Cannot use std::uintptr_t so assume that std::size_t can be used instead.\n+  static_assert(sizeof(size_t) >= sizeof(void*),\n+      \"std::size_t must be a suitable substitute for std::uintptr_t\");\n+  const auto __intptr = reinterpret_cast<unsigned long long>(__ptr);\n+#endif\n+  const auto __aligned = (__intptr - 1u + __align) & -__align;\n+  const auto __diff = __aligned - __intptr;\n+  if ((__size + __diff) > __space)\n+    return nullptr;\n+  else\n+    {\n+      __space -= __diff;\n+      return __ptr = reinterpret_cast<void*>(__aligned);\n+    }\n+}\n+\n+#if __cplusplus > 201703L\n+#define __cpp_lib_assume_aligned 201811L\n+  /** @brief Inform the compiler that a pointer is aligned.\n+   *\n+   *  @tparam _Align An alignment value (i.e. a power of two)\n+   *  @tparam _Tp    An object type\n+   *  @param  __ptr  A pointer that is aligned to _Align\n+   *  @ingroup memory\n+   */\n+  template<size_t _Align, class _Tp>\n+    [[nodiscard,__gnu__::__always_inline__]]\n+    constexpr _Tp* assume_aligned(_Tp* __ptr)\n+    {\n+      static_assert(std::has_single_bit(_Align));\n+      _GLIBCXX_DEBUG_ASSERT((std::uintptr_t)__ptr % _Align == 0);\n+      return static_cast<_Tp*>(__builtin_assume_aligned(__ptr, _Align));\n+    }\n+#endif // C++2a\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif /* _GLIBCXX_ALIGN_H */"}, {"sha": "a56952fb114bf4d117028769f98417362afb7be2", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3b1c5f950429c05865c88bc0b4a460d23f5192/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=2c3b1c5f950429c05865c88bc0b4a460d23f5192", "patch": "@@ -61,6 +61,7 @@\n  */\n \n #include <bits/stl_algobase.h>\n+#include <bits/align.h>\n #include <bits/allocator.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n@@ -101,46 +102,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-/**\n- *  @brief Fit aligned storage in buffer.\n- *  @ingroup memory\n- *\n- *  This function tries to fit @a __size bytes of storage with alignment\n- *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such\n- *  a buffer fits then @a __ptr is changed to point to the first byte of the\n- *  aligned storage and @a __space is reduced by the bytes used for alignment.\n- *\n- *  C++11 20.6.5 [ptr.align]\n- *\n- *  @param __align   A fundamental or extended alignment value.\n- *  @param __size    Size of the aligned storage required.\n- *  @param __ptr     Pointer to a buffer of @a __space bytes.\n- *  @param __space   Size of the buffer pointed to by @a __ptr.\n- *  @return the updated pointer if the aligned storage fits, otherwise nullptr.\n- *\n- */\n-inline void*\n-align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n-{\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);\n-#else\n-  // Cannot use std::uintptr_t so assume that std::size_t can be used instead.\n-  static_assert(sizeof(size_t) >= sizeof(void*),\n-      \"std::size_t must be a suitable substitute for std::uintptr_t\");\n-  const auto __intptr = reinterpret_cast<unsigned long long>(__ptr);\n-#endif\n-  const auto __aligned = (__intptr - 1u + __align) & -__align;\n-  const auto __diff = __aligned - __intptr;\n-  if ((__size + __diff) > __space)\n-    return nullptr;\n-  else\n-    {\n-      __space -= __diff;\n-      return __ptr = reinterpret_cast<void*>(__aligned);\n-    }\n-}\n-\n /** @defgroup ptr_safety Pointer Safety and Garbage Collection\n  *  @ingroup memory\n  *\n@@ -179,25 +140,6 @@ inline pointer_safety\n get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n // @}\n \n-#if __cplusplus > 201703L\n-#define __cpp_lib_assume_aligned 201811L\n-  /** @brief Inform the compiler that a pointer is aligned.\n-   *\n-   *  @tparam _Align An alignment value (i.e. a power of two)\n-   *  @tparam _Tp    An object type\n-   *  @param  __ptr  A pointer that is aligned to _Align\n-   *  @ingroup memory\n-   */\n-  template<size_t _Align, class _Tp>\n-    [[nodiscard,__gnu__::__always_inline__]]\n-    constexpr _Tp* assume_aligned(_Tp* __ptr)\n-    {\n-      static_assert(std::has_single_bit(_Align));\n-      _GLIBCXX_DEBUG_ASSERT((std::uintptr_t)__ptr % _Align == 0);\n-      return static_cast<_Tp*>(__builtin_assume_aligned(__ptr, _Align));\n-    }\n-#endif // C++2a\n-\n #if __cplusplus > 201703L\n   template<typename _Tp>\n     struct __is_pair : false_type { };"}]}