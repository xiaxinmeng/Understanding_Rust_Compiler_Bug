{"sha": "7194397966e6a007cee42360f96834377c3121a4", "node_id": "C_kwDOANBUbNoAKDcxOTQzOTc5NjZlNmEwMDdjZWU0MjM2MGY5NjgzNDM3N2MzMTIxYTQ", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-12-17T16:59:55Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-12-17T17:30:34Z"}, "message": "rs6000: Redo darn (PR103624)\n\nThe builtins now all return \"long\".  The patterns have :GPR as the\noutput mode, so they can be 32-bit as well (the instruction makes sense\nin 32 bit just fine).  The builtins expand to the DImode version\nnormally, but to the SImode if {32bit} is true.\n\n2021-12-17  Segher Boessenkool <segher@kernel.crashing.org>\n\n\tPR target/103624\n\t* config/rs6000/rs6000-builtins.def (__builtin_darn): Expand to\n\tdarn_64_di.  Add {32bit} attribute.  Return long.\n\t(__builtin_darn_32): Expand to darn_32_di.  Add {32bit} attribute.\n\tReturn long.\n\t(__builtin_darn_raw): Expand to darn_raw_di.  Add {32bit} attribute.\n\tReturn long.\n\t* config/rs6000/rs6000-call.c (rs6000_expand_builtin): Expand the darn\n\tbuiltins to the _si variants for -m32.\n\t* config/rs6000/rs6000.md (UNSPECV_DARN_32, UNSPECV_DARN_RAW): Delete.\n\t(UNSPECV_DARN): Update comment.\n\t(darn_32, darn_raw, darn): Delete.\n\t(darn_32_<mode>, darn_64_<mode>, darn_raw_<mode> for GPR): New.\n\t(@darn<mode> for GPR): New.", "tree": {"sha": "6b2519936286271c414ff0cde198aaef9b2f480d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2519936286271c414ff0cde198aaef9b2f480d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7194397966e6a007cee42360f96834377c3121a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7194397966e6a007cee42360f96834377c3121a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7194397966e6a007cee42360f96834377c3121a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7194397966e6a007cee42360f96834377c3121a4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "3ad5a135eaec85c1759fdbeae87330ca4be9a3be", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=7194397966e6a007cee42360f96834377c3121a4", "patch": "@@ -2798,14 +2798,14 @@\n \n ; Miscellaneous P9 functions\n [power9]\n-  signed long long __builtin_darn ();\n-    DARN darn {}\n+  signed long __builtin_darn ();\n+    DARN darn_64_di {32bit}\n \n-  signed int __builtin_darn_32 ();\n-    DARN_32 darn_32 {}\n+  signed long __builtin_darn_32 ();\n+    DARN_32 darn_32_di {32bit}\n \n-  signed long long __builtin_darn_raw ();\n-    DARN_RAW darn_raw {}\n+  signed long __builtin_darn_raw ();\n+    DARN_RAW darn_raw_di {32bit}\n \n   const signed int __builtin_dtstsfi_eq_dd (const int<6>, _Decimal64);\n     TSTSFI_EQ_DD dfptstsfi_eq_dd {}"}, {"sha": "cc55174c6b723465a396e3dc5bac1b2f06533c1c", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=7194397966e6a007cee42360f96834377c3121a4", "patch": "@@ -5631,6 +5631,12 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n \ticode = CODE_FOR_rs6000_mftb_si;\n       else if (fcode == RS6000_BIF_BPERMD)\n \ticode = CODE_FOR_bpermd_si;\n+      else if (fcode == RS6000_BIF_DARN)\n+\ticode = CODE_FOR_darn_64_si;\n+      else if (fcode == RS6000_BIF_DARN_32)\n+\ticode = CODE_FOR_darn_32_si;\n+      else if (fcode == RS6000_BIF_DARN_RAW)\n+\ticode = CODE_FOR_darn_raw_si;\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "9be484c7cf8348a9bc264288a25cdbbfa1d54076", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7194397966e6a007cee42360f96834377c3121a4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=7194397966e6a007cee42360f96834377c3121a4", "patch": "@@ -172,9 +172,7 @@\n    UNSPECV_EH_RR\t\t; eh_reg_restore\n    UNSPECV_ISYNC\t\t; isync instruction\n    UNSPECV_MFTB\t\t\t; move from time base\n-   UNSPECV_DARN\t\t\t; darn 1 (deliver a random number)\n-   UNSPECV_DARN_32\t\t; darn 2\n-   UNSPECV_DARN_RAW\t\t; darn 0\n+   UNSPECV_DARN\t\t\t; darn (deliver a random number)\n    UNSPECV_NLGR\t\t\t; non-local goto receiver\n    UNSPECV_MFFS\t\t\t; Move from FPSCR\n    UNSPECV_MFFSL\t\t; Move from FPSCR light instruction version\n@@ -15065,25 +15063,36 @@\n \f\n ;; Miscellaneous ISA 3.0 (power9) instructions\n \n-(define_insn \"darn_32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec_volatile:SI [(const_int 0)] UNSPECV_DARN_32))]\n+(define_expand \"darn_32_<mode>\"\n+  [(use (match_operand:GPR 0 \"register_operand\"))]\n   \"TARGET_P9_MISC\"\n-  \"darn %0,0\"\n-  [(set_attr \"type\" \"integer\")])\n+{\n+  emit_insn (gen_darn (<MODE>mode, operands[0], const0_rtx));\n+  DONE;\n+})\n \n-(define_insn \"darn_raw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec_volatile:DI [(const_int 0)] UNSPECV_DARN_RAW))]\n-  \"TARGET_P9_MISC && TARGET_64BIT\"\n-  \"darn %0,2\"\n-  [(set_attr \"type\" \"integer\")])\n+(define_expand \"darn_64_<mode>\"\n+  [(use (match_operand:GPR 0 \"register_operand\"))]\n+  \"TARGET_P9_MISC\"\n+{\n+  emit_insn (gen_darn (<MODE>mode, operands[0], const1_rtx));\n+  DONE;\n+})\n \n-(define_insn \"darn\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec_volatile:DI [(const_int 0)] UNSPECV_DARN))]\n-  \"TARGET_P9_MISC && TARGET_64BIT\"\n-  \"darn %0,1\"\n+(define_expand \"darn_raw_<mode>\"\n+  [(use (match_operand:GPR 0 \"register_operand\"))]\n+  \"TARGET_P9_MISC\"\n+{\n+  emit_insn (gen_darn (<MODE>mode, operands[0], const2_rtx));\n+  DONE;\n+})\n+\n+(define_insn \"@darn<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:GPR [(match_operand 1 \"const_int_operand\" \"n\")]\n+\t\t\t     UNSPECV_DARN))]\n+  \"TARGET_P9_MISC\"\n+  \"darn %0,%1\"\n   [(set_attr \"type\" \"integer\")])\n \n ;; Test byte within range."}]}