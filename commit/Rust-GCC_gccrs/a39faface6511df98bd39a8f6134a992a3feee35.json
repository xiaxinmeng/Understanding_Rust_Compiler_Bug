{"sha": "a39faface6511df98bd39a8f6134a992a3feee35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5ZmFmYWNlNjUxMWRmOThiZDM5YThmNjEzNGE5OTJhM2ZlZWUzNQ==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-04-30T21:45:02Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-04-30T21:45:02Z"}, "message": "intrinsic.c (add_functions): Add SELECTED_CHAR_KIND intrinsic.\n\n\t* intrinsic.c (add_functions): Add SELECTED_CHAR_KIND intrinsic.\n\t* intrinsic.h (gfc_check_selected_char_kind,\n\tgfc_simplify_selected_char_kind): New prototypes.\n\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_SC_KIND.\n\t* trans.h (gfor_fndecl_sc_kind): New function decl.\n\t* trans-decl.c (gfor_fndecl_sc_kind): Build new decl.\n\t* arith.c (gfc_compare_with_Cstring): New function.\n\t* arith.h (gfc_compare_with_Cstring): New prototype.\n\t* check.c (gfc_check_selected_char_kind): New function.\n\t* primary.c (match_string_constant, match_kind_param): Mark\n\tsymbols used as literal constant kind param as referenced.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_sc_kind): New function.\n\t(gfc_conv_intrinsic_function): Call gfc_conv_intrinsic_sc_kind.\n\t* intrinsic.texi (SELECTED_CHAR_KIND): Document new intrinsic.\n\t* simplify.c (gfc_simplify_selected_char_kind): New function.\n\n\t* intrinsics/selected_char_kind.c: New file.\n\t* Makefile.am: Add intrinsics/selected_char_kind.c.\n\t* Makefile.in: Regenerate.\n\n\t* gfortran.dg/selected_char_kind_1.f90: New test.\n\t* gfortran.dg/selected_char_kind_2.f90: New test.\n\t* gfortran.dg/selected_char_kind_3.f90: New test.\n\nFrom-SVN: r134839", "tree": {"sha": "12d8a378f5315443b91acd73a7def97e1a6accf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12d8a378f5315443b91acd73a7def97e1a6accf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a39faface6511df98bd39a8f6134a992a3feee35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39faface6511df98bd39a8f6134a992a3feee35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39faface6511df98bd39a8f6134a992a3feee35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39faface6511df98bd39a8f6134a992a3feee35/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91ded4bb889da5eef83123edb59203979dee491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91ded4bb889da5eef83123edb59203979dee491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91ded4bb889da5eef83123edb59203979dee491"}], "stats": {"total": 374, "additions": 353, "deletions": 21}, "files": [{"sha": "2abc96d009828759fee3c46cfd2b9fcdbc11e99c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -1,8 +1,26 @@\n+2008-04-30  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsic.c (add_functions): Add SELECTED_CHAR_KIND intrinsic.\n+\t* intrinsic.h (gfc_check_selected_char_kind,\n+\tgfc_simplify_selected_char_kind): New prototypes.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_SC_KIND.\n+\t* trans.h (gfor_fndecl_sc_kind): New function decl.\n+\t* trans-decl.c (gfor_fndecl_sc_kind): Build new decl.\n+\t* arith.c (gfc_compare_with_Cstring): New function.\n+\t* arith.h (gfc_compare_with_Cstring): New prototype.\n+\t* check.c (gfc_check_selected_char_kind): New function.\n+\t* primary.c (match_string_constant, match_kind_param): Mark\n+\tsymbols used as literal constant kind param as referenced.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sc_kind): New function.\n+\t(gfc_conv_intrinsic_function): Call gfc_conv_intrinsic_sc_kind.\n+\t* intrinsic.texi (SELECTED_CHAR_KIND): Document new intrinsic.\n+\t* simplify.c (gfc_simplify_selected_char_kind): New function.\n+\n 2008-04-28  Paul Thomas  <pault@gcc.gnu.org>\n \n-       PR fortran/35997\n-       * module.c (find_symbol): Do not return a result for a symbol\n-       that has been renamed in another module.\n+\tPR fortran/35997\n+\t* module.c (find_symbol): Do not return a result for a symbol\n+\tthat has been renamed in another module.\n \n 2008-04-26  George Helffrich <george@gcc.gnu.org>\n "}, {"sha": "4b8d45b189b2bed9e3f153ecc3a4ad911d3a3636", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -1208,7 +1208,7 @@ gfc_compare_string (gfc_expr *a, gfc_expr *b)\n   alen = a->value.character.length;\n   blen = b->value.character.length;\n \n-  len = (alen > blen) ? alen : blen;\n+  len = MAX(alen, blen);\n \n   for (i = 0; i < len; i++)\n     {\n@@ -1224,7 +1224,40 @@ gfc_compare_string (gfc_expr *a, gfc_expr *b)\n     }\n \n   /* Strings are equal */\n+  return 0;\n+}\n+\n+\n+int\n+gfc_compare_with_Cstring (gfc_expr *a, const char *b, bool case_sensitive)\n+{\n+  int len, alen, blen, i, ac, bc;\n+\n+  alen = a->value.character.length;\n+  blen = strlen (b);\n+\n+  len = MAX(alen, blen);\n+\n+  for (i = 0; i < len; i++)\n+    {\n+      /* We cast to unsigned char because default char, if it is signed,\n+\t would lead to ac < 0 for string[i] > 127.  */\n+      ac = (unsigned char) ((i < alen) ? a->value.character.string[i] : ' ');\n+      bc = (unsigned char) ((i < blen) ? b[i] : ' ');\n \n+      if (!case_sensitive)\n+\t{\n+\t  ac = TOLOWER (ac);\n+\t  bc = TOLOWER (bc);\n+\t}\n+\n+      if (ac < bc)\n+\treturn -1;\n+      if (ac > bc)\n+\treturn 1;\n+    }\n+\n+  /* Strings are equal */\n   return 0;\n }\n "}, {"sha": "e27186ae92fa89b6b9c620a4d8e040187d707152", "filename": "gcc/fortran/arith.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.h?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -40,6 +40,8 @@ arith gfc_range_check (gfc_expr *);\n \n int gfc_compare_expr (gfc_expr *, gfc_expr *, gfc_intrinsic_op);\n int gfc_compare_string (gfc_expr *, gfc_expr *);\n+int gfc_compare_with_Cstring (gfc_expr *, const char *, bool);\n+\n \n /* Constant folding for gfc_expr trees.  */\n gfc_expr *gfc_parentheses (gfc_expr * op);"}, {"sha": "5f782400dd3df5601494865caabe728e01c5b00b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -2349,6 +2349,22 @@ gfc_check_secnds (gfc_expr *r)\n }\n \n \n+try\n+gfc_check_selected_char_kind (gfc_expr *name)\n+{\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check (name, 0, gfc_default_character_kind) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (name, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_selected_int_kind (gfc_expr *r)\n {"}, {"sha": "855305cb278b3fe5a3c5c0dbac44e9e8ab97c589", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -465,6 +465,7 @@ enum gfc_isym_id\n   GFC_ISYM_RESHAPE,\n   GFC_ISYM_RRSPACING,\n   GFC_ISYM_RSHIFT,\n+  GFC_ISYM_SC_KIND,\n   GFC_ISYM_SCALE,\n   GFC_ISYM_SCAN,\n   GFC_ISYM_SECNDS,"}, {"sha": "441fbecdc17dd8ab5d4869dd316d7b36bab15f06", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -2141,6 +2141,13 @@ add_functions (void)\n \n   make_generic (\"secnds\", GFC_ISYM_SECNDS, GFC_STD_GNU);\n \n+  add_sym_1 (\"selected_char_kind\", GFC_ISYM_SC_KIND, CLASS_TRANSFORMATIONAL,\n+\t     ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2003,\n+\t     gfc_check_selected_char_kind, gfc_simplify_selected_char_kind,\n+\t     NULL, nm, BT_CHARACTER, dc, REQUIRED);\n+\n+  make_generic (\"selected_char_kind\", GFC_ISYM_SC_KIND, GFC_STD_F2003);\n+\n   add_sym_1 (\"selected_int_kind\", GFC_ISYM_SI_KIND, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_F95, gfc_check_selected_int_kind,\n \t     gfc_simplify_selected_int_kind, NULL, r, BT_INTEGER, di, REQUIRED);"}, {"sha": "91645fbb1e58022b2f7b1b44fd93a8b2dcd6fb45", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -120,6 +120,7 @@ try gfc_check_scale (gfc_expr *, gfc_expr *);\n try gfc_check_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_second_sub (gfc_expr *);\n try gfc_check_secnds (gfc_expr *);\n+try gfc_check_selected_char_kind (gfc_expr *);\n try gfc_check_selected_int_kind (gfc_expr *);\n try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *);\n try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n@@ -287,6 +288,7 @@ gfc_expr *gfc_simplify_reshape (gfc_expr *, gfc_expr *, gfc_expr *,\n gfc_expr *gfc_simplify_rrspacing (gfc_expr *);\n gfc_expr *gfc_simplify_scale (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_selected_char_kind (gfc_expr *);\n gfc_expr *gfc_simplify_selected_int_kind (gfc_expr *);\n gfc_expr *gfc_simplify_selected_real_kind (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_set_exponent (gfc_expr *, gfc_expr *);"}, {"sha": "9d3553da1110131abc46a48af1aea97af15f349f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -225,6 +225,7 @@ Some basic guidelines for editing this document:\n * @code{SCAN}:          SCAN,      Scan a string for the presence of a set of characters\n * @code{SECNDS}:        SECNDS,    Time function\n * @code{SECOND}:        SECOND,    CPU time function\n+* @code{SELECTED_CHAR_KIND}: SELECTED_CHAR_KIND,  Choose character kind\n * @code{SELECTED_INT_KIND}: SELECTED_INT_KIND,  Choose integer kind\n * @code{SELECTED_REAL_KIND}: SELECTED_REAL_KIND,  Choose real kind\n * @code{SET_EXPONENT}:  SET_EXPONENT, Set the exponent of the model\n@@ -9256,6 +9257,48 @@ seconds.\n \n \n \n+@node SELECTED_CHAR_KIND\n+@section @code{SELECTED_CHAR_KIND} --- Choose character kind\n+@fnindex SELECTED_CHAR_KIND\n+@cindex character kind\n+@cindex kind, character\n+\n+@table @asis\n+@item @emph{Description}:\n+\n+@code{SELECTED_CHAR_KIND(NAME)} returns the kind value for the character\n+set named @var{NAME}, if a character set with such a name is supported,\n+or @math{-1} otherwise. Currently, supported character sets include\n+``ASCII'' and ``DEFAULT'', which are equivalent.\n+\n+@item @emph{Standard}:\n+Fortran 2003 and later\n+\n+@item @emph{Class}:\n+Transformational function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = SELECTED_CHAR_KIND(NAME)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{NAME} @tab Shall be a scalar and of the default character type.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program ascii_kind\n+  integer,parameter :: ascii = selected_char_kind(\"ascii\")\n+  character(kind=ascii, len=26) :: s\n+\n+  s = ascii_\"abcdefghijklmnopqrstuvwxyz\"\n+  print *, s\n+end program ascii_kind\n+@end smallexample\n+@end table\n+\n+\n+\n @node SELECTED_INT_KIND\n @section @code{SELECTED_INT_KIND} --- Choose integer kind\n @fnindex SELECTED_INT_KIND"}, {"sha": "6b7fd519d6a3d0f4380fbefb8dfa771a4a28b9b1", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -60,6 +60,8 @@ match_kind_param (int *kind)\n   if (p != NULL)\n     return MATCH_NO;\n \n+  gfc_set_sym_referenced (sym);\n+\n   if (*kind < 0)\n     return MATCH_NO;\n \n@@ -907,6 +909,7 @@ match_string_constant (gfc_expr **result)\n \t  gfc_error (q);\n \t  return MATCH_ERROR;\n \t}\n+      gfc_set_sym_referenced (sym);\n     }\n \n   if (gfc_validate_kind (BT_CHARACTER, kind, true) < 0)"}, {"sha": "62c1cd45aec94a227c287f25e7b4be7e6630b6b7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -3628,6 +3628,28 @@ gfc_simplify_scan (gfc_expr *e, gfc_expr *c, gfc_expr *b, gfc_expr *kind)\n }\n \n \n+gfc_expr *\n+gfc_simplify_selected_char_kind (gfc_expr *e)\n+{\n+  int kind;\n+  gfc_expr *result;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  if (gfc_compare_with_Cstring (e, \"ascii\", false) == 0\n+      || gfc_compare_with_Cstring (e, \"default\", false) == 0)\n+    kind = 1;\n+  else\n+    kind = -1;\n+\n+  result = gfc_int_expr (kind);\n+  result->where = e->where;\n+\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_selected_int_kind (gfc_expr *e)\n {"}, {"sha": "d204579c75f7ba78e3d96d618e500df21b8ace8b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -124,7 +124,8 @@ tree gfor_fndecl_size0;\n tree gfor_fndecl_size1;\n tree gfor_fndecl_iargc;\n \n-/* Intrinsic functions implemented in FORTRAN.  */\n+/* Intrinsic functions implemented in Fortran.  */\n+tree gfor_fndecl_sc_kind;\n tree gfor_fndecl_si_kind;\n tree gfor_fndecl_sr_kind;\n \n@@ -2099,19 +2100,22 @@ gfc_build_intrinsic_function_decls (void)\n \t\t\t\t     pchar_type_node,\n \t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n \n+  gfor_fndecl_sc_kind =\n+    gfc_build_library_function_decl (get_identifier\n+\t\t\t\t\t(PREFIX(\"selected_char_kind\")),\n+                                     gfc_int4_type_node, 2,\n+\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n+\n   gfor_fndecl_si_kind =\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t\t(PREFIX(\"selected_int_kind\")),\n-                                     gfc_int4_type_node,\n-                                     1,\n-                                     pvoid_type_node);\n+                                     gfc_int4_type_node, 1, pvoid_type_node);\n \n   gfor_fndecl_sr_kind =\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t\t(PREFIX(\"selected_real_kind\")),\n-                                     gfc_int4_type_node,\n-                                     2, pvoid_type_node,\n-                                     pvoid_type_node);\n+                                     gfc_int4_type_node, 2,\n+                                     pvoid_type_node, pvoid_type_node);\n \n   /* Power functions.  */\n   {"}, {"sha": "9f022e7a09d2e847acd0dd59529296b9a1a938ab", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -3736,6 +3736,19 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n }\n \n \n+/* Generate code for SELECTED_CHAR_KIND (NAME) intrinsic function.  */\n+\n+static void\n+gfc_conv_intrinsic_sc_kind (gfc_se *se, gfc_expr *expr)\n+{\n+  tree args[2];\n+\n+  gfc_conv_intrinsic_function_args (se, expr, args, 2);\n+  se->expr = build_call_expr (gfor_fndecl_sc_kind, 2, args[0], args[1]);\n+  se->expr = fold_convert (gfc_typenode_for_spec (&expr->ts), se->expr);\n+}\n+\n+\n /* Generate code for SELECTED_INT_KIND (R) intrinsic function.  */\n \n static void\n@@ -4049,6 +4062,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_trim (se, expr);\n       break;\n \n+    case GFC_ISYM_SC_KIND:\n+      gfc_conv_intrinsic_sc_kind (se, expr);\n+      break;\n+\n     case GFC_ISYM_SI_KIND:\n       gfc_conv_intrinsic_si_kind (se, expr);\n       break;"}, {"sha": "3e812a89028a1ad17ab5642ae29527a25fec166c", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -556,7 +556,8 @@ extern GTY(()) tree gfor_fndecl_size0;\n extern GTY(()) tree gfor_fndecl_size1;\n extern GTY(()) tree gfor_fndecl_iargc;\n \n-/* Implemented in FORTRAN.  */\n+/* Implemented in Fortran.  */\n+extern GTY(()) tree gfor_fndecl_sc_kind;\n extern GTY(()) tree gfor_fndecl_si_kind;\n extern GTY(()) tree gfor_fndecl_sr_kind;\n "}, {"sha": "da38b1bedcbeaf11da9f25abb8d85f0a115f2d8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -1,7 +1,13 @@\n+2008-04-30  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/selected_char_kind_1.f90: New test.\n+\t* gfortran.dg/selected_char_kind_2.f90: New test.\n+\t* gfortran.dg/selected_char_kind_3.f90: New test.\n+\n 2008-04-28  Paul Thomas  <pault@gcc.gnu.org>\n \n-       PR fortran/35997\n-       * gfortran.dg/use_rename_3.f90\n+\tPR fortran/35997\n+\t* gfortran.dg/use_rename_3.f90\n \n 2008-04-30  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "f11fd0fb3f460566f82767d592bf9465ab527d1f", "filename": "gcc/testsuite/gfortran.dg/selected_char_kind_1.f90", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_1.f90?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -0,0 +1,65 @@\n+! { dg-do run }\n+! \n+! Checks for the SELECTED_CHAR_KIND intrinsic\n+!\n+  integer, parameter :: ascii = selected_char_kind (\"ascii\")\n+  integer, parameter :: default = selected_char_kind (\"default\")\n+\n+  character(kind=ascii) :: s1\n+  character(kind=default) :: s2\n+  character(kind=selected_char_kind (\"ascii\")) :: s3\n+  character(kind=selected_char_kind (\"default\")) :: s4\n+\n+  if (kind (s1) /= selected_char_kind (\"ascii\")) call abort\n+  if (kind (s2) /= selected_char_kind (\"default\")) call abort\n+  if (kind (s3) /= ascii) call abort\n+  if (kind (s4) /= default) call abort\n+\n+  if (selected_char_kind(\"ascii\") /= 1) call abort\n+  if (selected_char_kind(\"default\") /= 1) call abort\n+  if (selected_char_kind(\"defauLt\") /= 1) call abort\n+  if (selected_char_kind(\"foo\") /= -1) call abort\n+  if (selected_char_kind(\"asciiiii\") /= -1) call abort\n+  if (selected_char_kind(\"default       \") /= 1) call abort\n+\n+  call test(\"ascii\", 1)\n+  call test(\"default\", 1)\n+  call test(\"defauLt\", 1)\n+  call test(\"asciiiiii\", -1)\n+  call test(\"foo\", -1)\n+  call test(\"default     \", 1)\n+  call test(\"default     x\", -1)\n+\n+  call test(ascii_\"ascii\", 1)\n+  call test(ascii_\"default\", 1)\n+  call test(ascii_\"defauLt\", 1)\n+  call test(ascii_\"asciiiiii\", -1)\n+  call test(ascii_\"foo\", -1)\n+  call test(ascii_\"default     \", 1)\n+  call test(ascii_\"default     x\", -1)\n+\n+  call test(default_\"ascii\", 1)\n+  call test(default_\"default\", 1)\n+  call test(default_\"defauLt\", 1)\n+  call test(default_\"asciiiiii\", -1)\n+  call test(default_\"foo\", -1)\n+  call test(default_\"default     \", 1)\n+  call test(default_\"default     x\", -1)\n+\n+  if (kind (selected_char_kind (\"\")) /= kind(0)) call abort\n+end\n+\n+subroutine test(s,i)\n+  character(len=*,kind=selected_char_kind(\"ascii\")) s\n+  integer i\n+\n+  call test2(s,i)\n+  if (selected_char_kind (s) /= i) call abort\n+end subroutine test\n+\n+subroutine test2(s,i)\n+  character(len=*,kind=selected_char_kind(\"default\")) s\n+  integer i\n+\n+  if (selected_char_kind (s) /= i) call abort\n+end subroutine test2"}, {"sha": "28ecd96ba3e9bb76bb1087a414dfcbe02a5e4fb1", "filename": "gcc/testsuite/gfortran.dg/selected_char_kind_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_2.f90?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+! Check that nonexisting character kinds are not rejected by the compiler\n+!\n+  character(kind=selected_char_kind(\"\")) :: s1 ! { dg-error \"is not supported for CHARACTER\" }\n+  character(kind=selected_char_kind(\"     \")) :: s2 ! { dg-error \"is not supported for CHARACTER\" }\n+  character(kind=selected_char_kind(\"asciii\")) :: s3 ! { dg-error \"is not supported for CHARACTER\" }\n+  character(kind=selected_char_kind(\"I don't exist\")) :: s4 ! { dg-error \"is not supported for CHARACTER\" }\n+\n+  print *, selected_char_kind() ! { dg-error \"Missing actual argument\" }\n+  print *, selected_char_kind(12) ! { dg-error \"must be CHARACTER\" }\n+  print *, selected_char_kind([\"foo\", \"bar\"]) ! { dg-error \"must be a scalar\" }\n+\n+end"}, {"sha": "5cc7b112496f990a70eda48efb2391fdbaf03b0b", "filename": "gcc/testsuite/gfortran.dg/selected_char_kind_3.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_char_kind_3.f90?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95 -pedantic -Wall\" }\n+!\n+! Check that SELECTED_CHAR_KIND is rejected with -std=f95\n+!\n+  implicit none\n+  character(kind=selected_char_kind(\"ascii\")) :: s ! { dg-error \"is not included in the selected standard\" }\n+  s = \"\" ! { dg-error \"has no IMPLICIT type\" }\n+  print *, s\n+end"}, {"sha": "dbdaa0decee467a4c64d48aa32f8a27d9bcf7d6f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -1,3 +1,10 @@\n+2008-04-30  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsics/selected_char_kind.c: New file.\n+\t* gfortran.map (GFORTRAN_1.1): Add _gfortran_selected_char_kind.\n+\t* Makefile.am: Add intrinsics/selected_char_kind.c.\n+\t* Makefile.in: Regenerate.\n+\n 2008-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/35993"}, {"sha": "93a4072d7d855f05601ce62fc29a2dc6a7b91363", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -87,6 +87,7 @@ intrinsics/mvbits.c \\\n intrinsics/move_alloc.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n+intrinsics/selected_char_kind.c \\\n intrinsics/signal.c \\\n intrinsics/size.c \\\n intrinsics/sleep.c \\"}, {"sha": "686308a7fa0f65cdf098f8ea422ff46b15673b10", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -416,7 +416,8 @@ am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n \tintrinsics/kill.c intrinsics/link.c intrinsics/malloc.c \\\n \tintrinsics/mvbits.c intrinsics/move_alloc.c \\\n \tintrinsics/pack_generic.c intrinsics/perror.c \\\n-\tintrinsics/signal.c intrinsics/size.c intrinsics/sleep.c \\\n+\tintrinsics/selected_char_kind.c intrinsics/signal.c \\\n+\tintrinsics/size.c intrinsics/sleep.c \\\n \tintrinsics/spread_generic.c intrinsics/string_intrinsics.c \\\n \tintrinsics/system.c intrinsics/rand.c intrinsics/random.c \\\n \tintrinsics/rename.c intrinsics/reshape_generic.c \\\n@@ -698,12 +699,12 @@ am__objects_35 = associated.lo abort.lo access.lo args.lo \\\n \tfnum.lo gerror.lo getcwd.lo getlog.lo getXid.lo hostnm.lo \\\n \tierrno.lo ishftc.lo iso_c_generated_procs.lo iso_c_binding.lo \\\n \tkill.lo link.lo malloc.lo mvbits.lo move_alloc.lo \\\n-\tpack_generic.lo perror.lo signal.lo size.lo sleep.lo \\\n-\tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n-\trandom.lo rename.lo reshape_generic.lo reshape_packed.lo \\\n-\tselected_int_kind.lo selected_real_kind.lo stat.lo symlnk.lo \\\n-\tsystem_clock.lo time.lo transpose_generic.lo umask.lo \\\n-\tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n+\tpack_generic.lo perror.lo selected_char_kind.lo signal.lo \\\n+\tsize.lo sleep.lo spread_generic.lo string_intrinsics.lo \\\n+\tsystem.lo rand.lo random.lo rename.lo reshape_generic.lo \\\n+\treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n+\tstat.lo symlnk.lo system_clock.lo time.lo transpose_generic.lo \\\n+\tumask.lo unlink.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo\n am__objects_36 =\n am__objects_37 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n@@ -986,6 +987,7 @@ intrinsics/mvbits.c \\\n intrinsics/move_alloc.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n+intrinsics/selected_char_kind.c \\\n intrinsics/signal.c \\\n intrinsics/size.c \\\n intrinsics/sleep.c \\\n@@ -2073,6 +2075,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rrspacing_r4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rrspacing_r8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/select.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/selected_char_kind.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/set_exponent_r10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/set_exponent_r16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/set_exponent_r4.Plo@am__quote@\n@@ -5372,6 +5375,13 @@ perror.lo: intrinsics/perror.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o perror.lo `test -f 'intrinsics/perror.c' || echo '$(srcdir)/'`intrinsics/perror.c\n \n+selected_char_kind.lo: intrinsics/selected_char_kind.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT selected_char_kind.lo -MD -MP -MF \"$(DEPDIR)/selected_char_kind.Tpo\" -c -o selected_char_kind.lo `test -f 'intrinsics/selected_char_kind.c' || echo '$(srcdir)/'`intrinsics/selected_char_kind.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/selected_char_kind.Tpo\" \"$(DEPDIR)/selected_char_kind.Plo\"; else rm -f \"$(DEPDIR)/selected_char_kind.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/selected_char_kind.c' object='selected_char_kind.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o selected_char_kind.lo `test -f 'intrinsics/selected_char_kind.c' || echo '$(srcdir)/'`intrinsics/selected_char_kind.c\n+\n signal.lo: intrinsics/signal.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT signal.lo -MD -MP -MF \"$(DEPDIR)/signal.Tpo\" -c -o signal.lo `test -f 'intrinsics/signal.c' || echo '$(srcdir)/'`intrinsics/signal.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/signal.Tpo\" \"$(DEPDIR)/signal.Plo\"; else rm -f \"$(DEPDIR)/signal.Tpo\"; exit 1; fi"}, {"sha": "0c6b7b1b7af182c20ce4999017bbc1baba43d8e4", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -1037,6 +1037,7 @@ GFORTRAN_1.1 {\n     _gfortran_erfc_scaled_r8;\n     _gfortran_erfc_scaled_r10;\n     _gfortran_erfc_scaled_r16;\n+    _gfortran_selected_char_kind;\n     _gfortran_st_wait;\n } GFORTRAN_1.0; \n "}, {"sha": "c10d5b2efafb1e57bbdd62ed6801fdafe5815f9e", "filename": "libgfortran/intrinsics/selected_char_kind.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2Fintrinsics%2Fselected_char_kind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39faface6511df98bd39a8f6134a992a3feee35/libgfortran%2Fintrinsics%2Fselected_char_kind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fselected_char_kind.c?ref=a39faface6511df98bd39a8f6134a992a3feee35", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright 2008 Free Software Foundation, Inc.\n+   Contributed by Paul Brook <paul@nowt.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+#include \"libgfortran.h\"\n+\n+#include <string.h>\n+\n+\n+extern GFC_INTEGER_4 selected_char_kind (gfc_charlen_type, char *);\n+export_proto(selected_char_kind);\n+\n+GFC_INTEGER_4\n+selected_char_kind (gfc_charlen_type name_len, char *name)\n+{\n+  gfc_charlen_type len = fstrlen (name, name_len);\n+\n+  if ((len == 5 && strncasecmp (name, \"ascii\", 5) == 0)\n+      || (len == 7 && strncasecmp (name, \"default\", 7) == 0))\n+    return 1;\n+  else\n+    return -1;\n+}"}]}