{"sha": "f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZDNhYzliYjFmNDEyYTQ2OGZhMGIwZDFmY2NmNzQ2YjY3NmEzZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-10T14:46:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-10T14:46:34Z"}, "message": "gcc_update (gcc/config/rs6000/rs6000-tables.opt): New dependencies.\n\ncontrib:\n\t* gcc_update (gcc/config/rs6000/rs6000-tables.opt): New\n\tdependencies.\n\ngcc:\n\t* config/rs6000/genopt.sh, config/rs6000/rs6000-cpus.def: New\n\tfiles.\n\t* config/rs6000/rs6000-tables.opt: New file (generated).\n\t* config.gcc (powerpc*-*-*, rs6000*-*-*): Add\n\trs6000/rs6000-tables.opt to extra_options.\n\t* config/rs6000/rs6000-opts.h (RS6000_CPU_OPTION_NATIVE): Define.\n\t* config/rs6000/rs6000.c (rs6000_select): Remove.\n\t(processor_target_table): Move contents to rs6000-cpus.def.\n\t(darwin_rs6000_override_options): Check\n\tglobal_options_set.x_rs6000_cpu_index instead of\n\trs6000_select[1].string.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_handle_option): Don't assert that global structures are in\n\tuse.  Don't handle OPT_mcpu_ and OPT_mtune_ here.\n\t(rs6000_default_cpu): New variable.\n\t(rs6000_file_start): Set it instead of local default_cpu.  Check\n\trs6000_default_cpu, global_options_set.x_rs6000_cpu_index and\n\tglobal_options_set.x_rs6000_tune_index instead of rs6000_select.\n\t(rs6000_darwin_file_start): Check rs6000_default_cpu and\n\tglobal_options_set.x_rs6000_cpu_index instead of rs6000_select.\n\t* config/rs6000/rs6000.h (struct rs6000_cpu_select,\n\trs6000_select): Remove.\n\t* config/rs6000/rs6000.opt (rs6000_cpu_index, rs6000_tune_index):\n\tRemove.\n\t(mcpu=, mtune=): Use Var, Init, Enum and Save.\n\t* config/rs6000/t-rs6000\n\t($(srcdir)/config/rs6000/rs6000-tables.opt): New.\n\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n\tglobal_options_set.x_rs6000_cpu_index instead of\n\trs6000_select[1].string.\n\t* config/rs6000/linuxspe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n\tglobal_options_set.x_rs6000_cpu_index instead of\n\trs6000_select[1].string.\n\nFrom-SVN: r173620", "tree": {"sha": "cdaf4e4b94f42706523b5e879fad4ac81c83f2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdaf4e4b94f42706523b5e879fad4ac81c83f2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80cf2e08cc4ae44ac8d15d62191a867f2a60b162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cf2e08cc4ae44ac8d15d62191a867f2a60b162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cf2e08cc4ae44ac8d15d62191a867f2a60b162"}], "stats": {"total": 685, "additions": 502, "deletions": 183}, "files": [{"sha": "e604083574e055b05eac8335bb13a00fd45cfca0", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -1,3 +1,8 @@\n+2011-05-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/rs6000/rs6000-tables.opt): New\n+\tdependencies.\n+\n 2011-05-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc_update (gcc/config/mips/mips-tables.opt): New dependencies."}, {"sha": "e528f756d838d6e9a46e443ffeae4b2b199aed1c", "filename": "contrib/gcc_update", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -83,6 +83,7 @@ gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.\n gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/genopt.sh\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n+gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh\n # And then, language-specific files\n gcc/cp/cfns.h: gcc/cp/cfns.gperf\n gcc/java/keyword.h: gcc/java/keyword.gperf"}, {"sha": "8ac8872ea65da4f33824851da650a785431e3ac4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -1,3 +1,39 @@\n+2011-05-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/genopt.sh, config/rs6000/rs6000-cpus.def: New\n+\tfiles.\n+\t* config/rs6000/rs6000-tables.opt: New file (generated).\n+\t* config.gcc (powerpc*-*-*, rs6000*-*-*): Add\n+\trs6000/rs6000-tables.opt to extra_options.\n+\t* config/rs6000/rs6000-opts.h (RS6000_CPU_OPTION_NATIVE): Define.\n+\t* config/rs6000/rs6000.c (rs6000_select): Remove.\n+\t(processor_target_table): Move contents to rs6000-cpus.def.\n+\t(darwin_rs6000_override_options): Check\n+\tglobal_options_set.x_rs6000_cpu_index instead of\n+\trs6000_select[1].string.\n+\t(rs6000_option_override_internal): Likewise.\n+\t(rs6000_handle_option): Don't assert that global structures are in\n+\tuse.  Don't handle OPT_mcpu_ and OPT_mtune_ here.\n+\t(rs6000_default_cpu): New variable.\n+\t(rs6000_file_start): Set it instead of local default_cpu.  Check\n+\trs6000_default_cpu, global_options_set.x_rs6000_cpu_index and\n+\tglobal_options_set.x_rs6000_tune_index instead of rs6000_select.\n+\t(rs6000_darwin_file_start): Check rs6000_default_cpu and\n+\tglobal_options_set.x_rs6000_cpu_index instead of rs6000_select.\n+\t* config/rs6000/rs6000.h (struct rs6000_cpu_select,\n+\trs6000_select): Remove.\n+\t* config/rs6000/rs6000.opt (rs6000_cpu_index, rs6000_tune_index):\n+\tRemove.\n+\t(mcpu=, mtune=): Use Var, Init, Enum and Save.\n+\t* config/rs6000/t-rs6000\n+\t($(srcdir)/config/rs6000/rs6000-tables.opt): New.\n+\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n+\tglobal_options_set.x_rs6000_cpu_index instead of\n+\trs6000_select[1].string.\n+\t* config/rs6000/linuxspe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n+\tglobal_options_set.x_rs6000_cpu_index instead of\n+\trs6000_select[1].string.\n+\n 2011-05-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (libgcc_tm_file): Define instead of including files"}, {"sha": "7932302eb0988e8c0b3425690f9d2e5890f782c2", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -392,11 +392,11 @@ powerpc*-*-*)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n-\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n \t;;\n rs6000*-*-*)\n \tneed_64bit_hwint=yes\n-\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n \t;;\n score*-*-*)\n \tcpu_type=score"}, {"sha": "19f24726c2edc308c02971b75cfbc613a50ee167", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -26,7 +26,7 @@\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n-  if (rs6000_select[1].string == NULL) \\\n+  if (!global_options_set.x_rs6000_cpu_index) \\\n     rs6000_cpu = PROCESSOR_PPC8540; \\\n   if (!global_options_set.x_rs6000_spe_abi) \\\n     rs6000_spe_abi = 1; \\"}, {"sha": "be87ff50d66fb8475564ec016224e689251230e3", "filename": "gcc/config/rs6000/genopt.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fgenopt.sh?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -0,0 +1,64 @@\n+#!/bin/sh\n+# Generate rs6000-tables.opt from the list of CPUs in rs6000-cpus.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from rs6000-cpus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(rs6000_cpu_opt_value) Type(int)\n+Known CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(native) Value(RS6000_CPU_OPTION_NATIVE) DriverOnly\n+\n+EOF\n+\n+awk -F'[(, \t]+' '\n+BEGIN {\n+    value = 0\n+}\n+\n+/^RS6000_CPU/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(rs6000_cpu_opt_value) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/rs6000-cpus.def"}, {"sha": "8b95d25ff5b247dadbb3fd4f9c57922b8d414d73", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -26,7 +26,7 @@\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n-  if (rs6000_select[1].string == NULL) \\\n+  if (!global_options_set.x_rs6000_cpu_index) \\\n     rs6000_cpu = PROCESSOR_PPC8540; \\\n   if (!global_options_set.x_rs6000_spe_abi) \\\n     rs6000_spe_abi = 1; \\"}, {"sha": "5da8917c440e3535c81ae598ede310e650d69619", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -0,0 +1,140 @@\n+/* IBM RS/6000 CPU names..\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This table occasionally claims that a processor does not support a\n+   particular feature even though it does, but the feature is slower than the\n+   alternative.  Thus, it shouldn't be relied on as a complete description of\n+   the processor's support.\n+\n+   Please keep this list in order, and don't forget to update the documentation\n+   in invoke.texi when adding a new processor or flag.\n+\n+   Before including this file, define a macro:\n+\n+   RS6000_CPU (NAME, CPU, FLAGS)\n+\n+   where the arguments are the fields of struct rs6000_ptt.  */\n+\n+RS6000_CPU (\"401\", PROCESSOR_PPC403, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"403\", PROCESSOR_PPC403,\n+\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN)\n+RS6000_CPU (\"405\", PROCESSOR_PPC405,\n+\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"405fp\", PROCESSOR_PPC405,\n+\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440\", PROCESSOR_PPC440,\n+\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440fp\", PROCESSOR_PPC440,\n+\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464\", PROCESSOR_PPC440,\n+\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464fp\", PROCESSOR_PPC440,\n+\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"476\", PROCESSOR_PPC476,\n+\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_PPC_GFXOPT | MASK_MFCRF\n+\t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"476fp\", PROCESSOR_PPC476,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB\n+\t    | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK)\n+RS6000_CPU (\"601\", PROCESSOR_PPC601,\n+\t    MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"602\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604\", PROCESSOR_PPC604, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604e\", PROCESSOR_PPC604e, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"620\", PROCESSOR_PPC620,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"630\", PROCESSOR_PPC630,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"740\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"7400\", PROCESSOR_PPC7400, POWERPC_7400_MASK)\n+RS6000_CPU (\"7450\", PROCESSOR_PPC7450, POWERPC_7400_MASK)\n+RS6000_CPU (\"750\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"801\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"821\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"823\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n+\t    | MASK_ISEL)\n+/* 8548 has a dummy entry for now.  */\n+RS6000_CPU (\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n+\t    | MASK_ISEL)\n+RS6000_CPU (\"a2\", PROCESSOR_PPCA2,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB\n+\t    | MASK_CMPB | MASK_NO_UPDATE)\n+RS6000_CPU (\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK)\n+RS6000_CPU (\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT\n+\t    | MASK_ISEL)\n+RS6000_CPU (\"e500mc64\", PROCESSOR_PPCE500MC64,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"970\", PROCESSOR_POWER4,\n+\t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"cell\", PROCESSOR_CELL,\n+\t    POWERPC_7400_MASK  | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS)\n+RS6000_CPU (\"ec603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"G3\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK)\n+RS6000_CPU (\"G5\", PROCESSOR_POWER4,\n+\t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"titan\", PROCESSOR_TITAN,\n+\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"power\", PROCESSOR_POWER, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"power2\", PROCESSOR_POWER,\n+\t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"power3\", PROCESSOR_PPC630,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"power4\", PROCESSOR_POWER4,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF)\n+RS6000_CPU (\"power5\", PROCESSOR_POWER5,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB)\n+RS6000_CPU (\"power5+\", PROCESSOR_POWER5,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND)\n+RS6000_CPU (\"power6\", PROCESSOR_POWER6,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_DFP | MASK_RECIP_PRECISION)\n+RS6000_CPU (\"power6x\", PROCESSOR_POWER6,\n+\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_DFP | MASK_MFPGPR | MASK_RECIP_PRECISION)\n+RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n+\t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n+\t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n+\t    | MASK_VSX | MASK_RECIP_PRECISION)\n+RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK)\n+RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"rios\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"rios1\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"rios2\", PROCESSOR_RIOS2,\n+\t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"rsc\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"rsc1\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"rs64\", PROCESSOR_RS64A,\n+\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "ea7e7c74f605cdf61e1ad7a33ef9f18dbf804a4c", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine needed for option handling for GNU compiler,\n    for IBM RS/6000.\n-   Copyright (C) 2010\n+   Copyright (C) 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Meissner (meissner@linux.vnet.ibm.com)\n \n@@ -141,4 +141,9 @@ enum rs6000_vector {\n   VECTOR_OTHER\t\t\t/* Some other vector unit */\n };\n \n+/* No enumeration is defined to index the -mcpu= values (entries in\n+   processor_target_table), with the type int being used instead, but\n+   we need to distinguish the special \"native\" value.  */\n+#define RS6000_CPU_OPTION_NATIVE -1\n+\n #endif"}, {"sha": "91341e6cc3b4ae555e9df95e76b9bcfbbf55a348", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -0,0 +1,205 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from rs6000-cpus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(rs6000_cpu_opt_value) Type(int)\n+Known CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(native) Value(RS6000_CPU_OPTION_NATIVE) DriverOnly\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(401) Value(0)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(403) Value(1)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(405) Value(2)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(405fp) Value(3)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(440) Value(4)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(440fp) Value(5)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(464) Value(6)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(464fp) Value(7)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(476) Value(8)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(476fp) Value(9)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(505) Value(10)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(601) Value(11)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(602) Value(12)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(603) Value(13)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(603e) Value(14)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(604) Value(15)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(604e) Value(16)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(620) Value(17)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(630) Value(18)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(740) Value(19)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(7400) Value(20)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(7450) Value(21)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(750) Value(22)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(801) Value(23)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(821) Value(24)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(823) Value(25)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(8540) Value(26)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(8548) Value(27)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(a2) Value(28)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e300c2) Value(29)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e300c3) Value(30)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e500mc) Value(31)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e500mc64) Value(32)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(860) Value(33)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(970) Value(34)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(cell) Value(35)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(common) Value(36)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(ec603e) Value(37)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G3) Value(38)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G4) Value(39)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G5) Value(40)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(titan) Value(41)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power) Value(42)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power2) Value(43)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power3) Value(44)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power4) Value(45)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power5) Value(46)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power5+) Value(47)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power6) Value(48)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power6x) Value(49)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power7) Value(50)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(51)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(52)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rios) Value(53)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rios1) Value(54)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rios2) Value(55)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rsc) Value(56)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rsc1) Value(57)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(58)\n+"}, {"sha": "12db94e65d5f3503f336665af43109e6c97f504c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 157, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -138,16 +138,6 @@ typedef struct GTY(()) machine_function\n   rtx sdmode_stack_slot;\n } machine_function;\n \n-/* Target cpu type */\n-\n-struct rs6000_cpu_select rs6000_select[3] =\n-{\n-  /* switch\t\tname,\t\t\ttune\tarch */\n-  { (const char *)0,\t\"--with-cpu=\",\t\t1,\t1 },\n-  { (const char *)0,\t\"-mcpu=\",\t\t1,\t1 },\n-  { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n-};\n-\n /* Support targetm.vectorize.builtin_mask_for_load.  */\n static GTY(()) tree altivec_builtin_mask_for_load;\n \n@@ -1697,14 +1687,6 @@ enum {\n \t\t\t  | MASK_VSX)\n };\n \n-/* This table occasionally claims that a processor does not support a\n-   particular feature even though it does, but the feature is slower than the\n-   alternative.  Thus, it shouldn't be relied on as a complete description of\n-   the processor's support.\n-\n-   Please keep this list in order, and don't forget to update the documentation\n-   in invoke.texi when adding a new processor or flag.  */\n-\n struct rs6000_ptt\n {\n   const char *const name;\t\t/* Canonical processor name.  */\n@@ -1714,110 +1696,9 @@ struct rs6000_ptt\n \n static struct rs6000_ptt const processor_target_table[] =\n {\n-  {\"401\", PROCESSOR_PPC403, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"403\", PROCESSOR_PPC403,\n-   POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN},\n-  {\"405\", PROCESSOR_PPC405,\n-   POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB},\n-  {\"405fp\", PROCESSOR_PPC405,\n-   POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n-  {\"440\", PROCESSOR_PPC440,\n-   POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB},\n-  {\"440fp\", PROCESSOR_PPC440,\n-   POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n-  {\"464\", PROCESSOR_PPC440,\n-   POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB},\n-  {\"464fp\", PROCESSOR_PPC440,\n-   POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n-  {\"476\", PROCESSOR_PPC476,\n-   POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_PPC_GFXOPT | MASK_MFCRF\n-   | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB},\n-  {\"476fp\", PROCESSOR_PPC476,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB\n-   | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB},\n-  {\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK},\n-  {\"601\", PROCESSOR_PPC601,\n-   MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING},\n-  {\"602\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"603\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"604\", PROCESSOR_PPC604, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"604e\", PROCESSOR_PPC604e, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"620\", PROCESSOR_PPC620,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n-  {\"630\", PROCESSOR_PPC630,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n-  {\"740\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"7400\", PROCESSOR_PPC7400, POWERPC_7400_MASK},\n-  {\"7450\", PROCESSOR_PPC7450, POWERPC_7400_MASK},\n-  {\"750\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"801\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"821\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"823\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n-   | MASK_ISEL},\n-  /* 8548 has a dummy entry for now.  */\n-  {\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n-   | MASK_ISEL},\n-  {\"a2\", PROCESSOR_PPCA2,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB\n-   | MASK_CMPB | MASK_NO_UPDATE },\n-  {\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK},\n-  {\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT\n-   | MASK_ISEL},\n-  {\"e500mc64\", PROCESSOR_PPCE500MC64, POWERPC_BASE_MASK | MASK_POWERPC64\n-   | MASK_PPC_GFXOPT | MASK_ISEL},\n-  {\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"970\", PROCESSOR_POWER4,\n-   POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n-  {\"cell\", PROCESSOR_CELL,\n-   POWERPC_7400_MASK  | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n-  {\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS},\n-  {\"ec603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-  {\"G3\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n-  {\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK},\n-  {\"G5\", PROCESSOR_POWER4,\n-   POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n-  {\"titan\", PROCESSOR_TITAN,\n-   POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n-  {\"power\", PROCESSOR_POWER, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n-  {\"power2\", PROCESSOR_POWER,\n-   MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING},\n-  {\"power3\", PROCESSOR_PPC630,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n-  {\"power4\", PROCESSOR_POWER4,\n-   POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_PPC_GFXOPT\n-   | MASK_MFCRF},\n-  {\"power5\", PROCESSOR_POWER5,\n-   POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_PPC_GFXOPT\n-   | MASK_MFCRF | MASK_POPCNTB},\n-  {\"power5+\", PROCESSOR_POWER5,\n-   POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_PPC_GFXOPT\n-   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND},\n-  {\"power6\", PROCESSOR_POWER6,\n-   POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_PPC_GFXOPT\n-   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP\n-   | MASK_RECIP_PRECISION},\n-  {\"power6x\", PROCESSOR_POWER6,\n-   POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_PPC_GFXOPT\n-   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP\n-   | MASK_MFPGPR | MASK_RECIP_PRECISION},\n-  {\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n-   POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n-   | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n-   | MASK_VSX | MASK_RECIP_PRECISION},\n-  {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n-  {\"powerpc64\", PROCESSOR_POWERPC64,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n-  {\"rios\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n-  {\"rios1\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n-  {\"rios2\", PROCESSOR_RIOS2,\n-   MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING},\n-  {\"rsc\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n-  {\"rsc1\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n-  {\"rs64\", PROCESSOR_RS64A,\n-   POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64}\n+#define RS6000_CPU(NAME, CPU, FLAGS) { NAME, CPU, FLAGS },\n+#include \"rs6000-cpus.def\"\n+#undef RS6000_CPU\n };\n \n /* Look up a processor name for -mcpu=xxx and -mtune=xxx.  Return -1 if the\n@@ -2625,7 +2506,7 @@ darwin_rs6000_override_options (void)\n       && !flag_apple_kext\n       && strverscmp (darwin_macosx_version_min, \"10.5\") >= 0\n       && ! (target_flags_explicit & MASK_ALTIVEC)\n-      && ! rs6000_select[1].string)\n+      && ! global_options_set.x_rs6000_cpu_index)\n     {\n       target_flags |= MASK_ALTIVEC;\n     }\n@@ -2983,7 +2864,7 @@ rs6000_option_override_internal (bool global_init_p)\n       if ((target_flags & MASK_STRING) != 0)\n \ttarget_flags = target_flags & ~MASK_STRING;\n     }\n-  else if (rs6000_select[1].string != NULL)\n+  else if (global_options_set.x_rs6000_cpu_index)\n     {\n       /* For the powerpc-eabispe configuration, we set all these by\n \t default, so let's unset them if we manually set another\n@@ -4181,9 +4062,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_mno_power:\n@@ -4349,20 +4227,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       opts->x_rs6000_altivec_abi = 0;\n       break;\n \n-    case OPT_mcpu_:\n-      rs6000_select[1].string = arg;\n-      opts->x_rs6000_cpu_index = rs6000_cpu_name_lookup (arg);\n-      if (opts->x_rs6000_cpu_index < 0)\n-\terror_at (loc, \"bad value (%s) for -mcpu\", arg);\n-      break;\n-\n-    case OPT_mtune_:\n-      rs6000_select[2].string = arg;\n-      opts->x_rs6000_tune_index = rs6000_cpu_name_lookup (arg);\n-      if (opts->x_rs6000_tune_index < 0)\n-\terror_at (loc, \"bad value (%s) for -mtune\", arg);\n-      break;\n-\n     case OPT_mlong_double_:\n       if (value != 64 && value != 128)\n \t{\n@@ -4437,38 +4301,49 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n   return true;\n }\n \f\n+/* Default CPU string for rs6000*_file_start functions.  */\n+static const char *rs6000_default_cpu;\n+\n /* Do anything needed at the start of the asm file.  */\n \n static void\n rs6000_file_start (void)\n {\n-  size_t i;\n   char buffer[80];\n   const char *start = buffer;\n-  struct rs6000_cpu_select *ptr;\n-  const char *default_cpu = TARGET_CPU_DEFAULT;\n   FILE *file = asm_out_file;\n \n+  rs6000_default_cpu = TARGET_CPU_DEFAULT;\n+\n   default_file_start ();\n \n #ifdef TARGET_BI_ARCH\n   if ((TARGET_DEFAULT ^ target_flags) & MASK_64BIT)\n-    default_cpu = 0;\n+    rs6000_default_cpu = 0;\n #endif\n \n   if (flag_verbose_asm)\n     {\n       sprintf (buffer, \"\\n%s rs6000/powerpc options:\", ASM_COMMENT_START);\n-      rs6000_select[0].string = default_cpu;\n \n-      for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)\n+      if (rs6000_default_cpu != 0 && rs6000_default_cpu[0] != '\\0')\n \t{\n-\t  ptr = &rs6000_select[i];\n-\t  if (ptr->string != (char *)0 && ptr->string[0] != '\\0')\n-\t    {\n-\t      fprintf (file, \"%s %s%s\", start, ptr->name, ptr->string);\n-\t      start = \"\";\n-\t    }\n+\t  fprintf (file, \"%s --with-cpu=%s\", start, rs6000_default_cpu);\n+\t  start = \"\";\n+\t}\n+\n+      if (global_options_set.x_rs6000_cpu_index)\n+\t{\n+\t  fprintf (file, \"%s -mcpu=%s\", start,\n+\t\t   processor_target_table[rs6000_cpu_index].name);\n+\t  start = \"\";\n+\t}\n+\n+      if (global_options_set.x_rs6000_tune_index)\n+\t{\n+\t  fprintf (file, \"%s -mtune=%s\", start,\n+\t\t   processor_target_table[rs6000_tune_index].name);\n+\t  start = \"\";\n \t}\n \n       if (PPC405_ERRATUM77)\n@@ -25712,10 +25587,12 @@ rs6000_darwin_file_start (void)\n   darwin_file_start ();\n \n   /* Determine the argument to -mcpu=.  Default to G3 if not specified.  */\n-  for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)\n-    if (rs6000_select[i].set_arch_p && rs6000_select[i].string\n-\t&& rs6000_select[i].string[0] != '\\0')\n-      cpu_id = rs6000_select[i].string;\n+  \n+  if (rs6000_default_cpu != 0 && rs6000_default_cpu[0] != '\\0')\n+    cpu_id = rs6000_default_cpu;\n+\n+  if (global_options_set.x_rs6000_cpu_index)\n+    cpu_id = processor_target_table[rs6000_cpu_index].name;\n \n   /* Look through the mapping array.  Pick the first name that either\n      matches the argument, has a bit set in IF_SET that is also set"}, {"sha": "7518a784d2c38afa15ffb264a01faa380ad6d797", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -358,17 +358,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    and the old mnemonics are dialect zero.  */\n #define ASSEMBLER_DIALECT (TARGET_NEW_MNEMONICS ? 1 : 0)\n \n-/* rs6000_select[0] is reserved for the default cpu defined via --with-cpu */\n-struct rs6000_cpu_select\n-{\n-  const char *string;\n-  const char *name;\n-  int set_tune_p;\n-  int set_arch_p;\n-};\n-\n-extern struct rs6000_cpu_select rs6000_select[];\n-\n /* Debug support */\n #define MASK_DEBUG_STACK\t0x01\t/* debug stack applications */\n #define\tMASK_DEBUG_ARG\t\t0x02\t/* debug argument handling */"}, {"sha": "35c936fe53e0e35cae263aa1b2edfb3b6a35e0ca", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -79,14 +79,6 @@ enum rs6000_cmodel rs6000_current_cmodel = CMODEL_SMALL\n TargetVariable\n unsigned int rs6000_recip_control\n \n-;; -mcpu=<xxx> as an index into the processor_target_table or -1\n-TargetVariable\n-int rs6000_cpu_index = -1\n-\n-;; -mtune=<xxx> as an index into the processor_target_table or -1\n-TargetVariable\n-int rs6000_tune_index = -1\n-\n ;; Debug flags\n TargetVariable\n unsigned int rs6000_debug\n@@ -402,11 +394,11 @@ mabi=ibmlongdouble\n Target RejectNegative Undocumented Warn(using IBM extended precision long double) Var(rs6000_ieeequad, 0)\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_cpu_index) Init(-1) Enum(rs6000_cpu_opt_value) Save\n -mcpu=\tUse features of and schedule code for given CPU\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(rs6000_tune_index) Init(-1) Enum(rs6000_cpu_opt_value) Save\n -mtune=\tSchedule code for given CPU\n \n mtraceback="}, {"sha": "588572cb008c56ea78e67821810c158436a1627e", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=f10d3ac9bb1f412a468fa0b0d1fccf746b676a3f", "patch": "@@ -36,6 +36,11 @@ rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/rs6000/rs6000-c.c\n \n+$(srcdir)/config/rs6000/rs6000-tables.opt: $(srcdir)/config/rs6000/genopt.sh \\\n+  $(srcdir)/config/rs6000/rs6000-cpus.def\n+\t$(SHELL) $(srcdir)/config/rs6000/genopt.sh $(srcdir)/config/rs6000 > \\\n+\t\t$(srcdir)/config/rs6000/rs6000-tables.opt\n+\n # The rs6000 backend doesn't cause warnings in these files.\n insn-conditions.o-warn =\n "}]}