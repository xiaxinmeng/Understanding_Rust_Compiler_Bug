{"sha": "7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QwY2U5NDEyY2Y4Zjk2MWY0ZTUxN2ZlZjAzNmIyZDZiYmEyZGVhNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:46:41Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:46:41Z"}, "message": "[arm] Use arm_active_target when configuring builtins\n\nThis patch uses the new ISA data structure to determine which builtins\nto add.  It entirely eliminates the need for insn_flags to be a global\nvariable, but we're about to delete that in the following patches, so\nfor now we leave it as a global.\n\n\t* arm-builtins.c: Include sbitmap.h.\n\t(def_mbuiltin): Change first parameter to a flag bit.  Use it to test\n\tavailable features in the current target.\n\t(struct builtin_description): Change type of feature field.\n\t(IWMMXT_BUILTIN): Use the isa_features types.\n\t(IWMMXT2_BUILTIN): Likewise.\n\t(IWMMXT_BUILTIN2): Likewise.\n\t(IWMMXT2_BUILTIN2): Likewise.\n\t(CRC32_BUILTIN): Likewise.\n\t(CRYPTO_BUILTIN): Likewise.\n\t(iwmmx_builtin): Likewise.\n\t(iwmmx2_builtin): Likewise.\n\t(arm_iwmmxt_builtin): Check for specific feature bits.\n\nFrom-SVN: r243702", "tree": {"sha": "b74fc1cc3f5452e98e7d2cc57ea1fcbee10a17de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b74fc1cc3f5452e98e7d2cc57ea1fcbee10a17de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6/comments", "author": null, "committer": null, "parents": [{"sha": "199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199acf6cfbc3fdd7eca990c817752f32b17c7b4d"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "51b14260f883e21e1a389ef0c8cd8c2903b21a7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "patch": "@@ -1,3 +1,19 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-builtins.c: Include sbitmap.h.\n+\t(def_mbuiltin): Change first parameter to a flag bit.  Use it to test\n+\tavailable features in the current target.\n+\t(struct builtin_description): Change type of feature field.\n+\t(IWMMXT_BUILTIN): Use the isa_features types.\n+\t(IWMMXT2_BUILTIN): Likewise.\n+\t(IWMMXT_BUILTIN2): Likewise.\n+\t(IWMMXT2_BUILTIN2): Likewise.\n+\t(CRC32_BUILTIN): Likewise.\n+\t(CRYPTO_BUILTIN): Likewise.\n+\t(iwmmx_builtin): Likewise.\n+\t(iwmmx2_builtin): Likewise.\n+\t(arm_iwmmxt_builtin): Check for specific feature bits.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-isa.h (enum isa_feature): Add isa_quirk_cm3_ldrd."}, {"sha": "80d3b673e4b3a138f14c3c0b37b3178eac3f594a", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0ce9412cf8f961f4e517fef036b2d6bba2dea6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=7d0ce9412cf8f961f4e517fef036b2d6bba2dea6", "patch": "@@ -37,6 +37,7 @@\n #include \"expr.h\"\n #include \"langhooks.h\"\n #include \"case-cfn-macros.h\"\n+#include \"sbitmap.h\"\n \n #define SIMD_MAX_BUILTIN_ARGS 5\n \n@@ -1154,11 +1155,11 @@ arm_init_crypto_builtins (void)\n #undef NUM_DREG_TYPES\n #undef NUM_QREG_TYPES\n \n-#define def_mbuiltin(FLAGS, NAME, TYPE, CODE)\t\t\t\t\\\n+#define def_mbuiltin(FLAG, NAME, TYPE, CODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      const arm_feature_set flags = FLAGS;\t\t\t\t\\\n-      if (ARM_FSET_CPU_SUBSET (flags, insn_flags))\t\t\t\\\n+      if (FLAG == isa_nobit\t\t\t\t\t\t\\\n+\t  || bitmap_bit_p (arm_active_target.isa, FLAG))\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  tree bdecl;\t\t\t\t\t\t\t\\\n \t  bdecl = add_builtin_function ((NAME), (TYPE), (CODE),\t\t\\\n@@ -1170,7 +1171,7 @@ arm_init_crypto_builtins (void)\n \n struct builtin_description\n {\n-  const arm_feature_set    features;\n+  const enum isa_feature   feature;\n   const enum insn_code     icode;\n   const char * const       name;\n   const enum arm_builtins  code;\n@@ -1181,12 +1182,12 @@ struct builtin_description\n static const struct builtin_description bdesc_2arg[] =\n {\n #define IWMMXT_BUILTIN(code, string, builtin) \\\n-  { ARM_FSET_MAKE_CPU1 (FL_IWMMXT), CODE_FOR_##code, \\\n+  { isa_bit_iwmmxt, CODE_FOR_##code, \\\n     \"__builtin_arm_\" string,\t\t\t     \\\n     ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n #define IWMMXT2_BUILTIN(code, string, builtin) \\\n-  { ARM_FSET_MAKE_CPU1 (FL_IWMMXT2), CODE_FOR_##code, \\\n+  { isa_bit_iwmmxt2, CODE_FOR_##code, \\\n     \"__builtin_arm_\" string,\t\t\t      \\\n     ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n@@ -1270,11 +1271,11 @@ static const struct builtin_description bdesc_2arg[] =\n   IWMMXT_BUILTIN (iwmmxt_walignr3, \"walignr3\", WALIGNR3)\n \n #define IWMMXT_BUILTIN2(code, builtin) \\\n-  { ARM_FSET_MAKE_CPU1 (FL_IWMMXT), CODE_FOR_##code, NULL, \\\n+  { isa_bit_iwmmxt, CODE_FOR_##code, NULL, \\\n     ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n #define IWMMXT2_BUILTIN2(code, builtin) \\\n-  { ARM_FSET_MAKE_CPU2 (FL_IWMMXT2), CODE_FOR_##code, NULL, \\\n+  { isa_bit_iwmmxt2, CODE_FOR_##code, NULL, \\\n     ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n   IWMMXT2_BUILTIN2 (iwmmxt_waddbhusm, WADDBHUSM)\n@@ -1290,15 +1291,15 @@ static const struct builtin_description bdesc_2arg[] =\n \n \n #define FP_BUILTIN(L, U) \\\n-  {ARM_FSET_EMPTY, CODE_FOR_##L, \"__builtin_arm_\"#L, ARM_BUILTIN_##U, \\\n+  {isa_nobit, CODE_FOR_##L, \"__builtin_arm_\"#L, ARM_BUILTIN_##U, \\\n    UNKNOWN, 0},\n \n   FP_BUILTIN (get_fpscr, GET_FPSCR)\n   FP_BUILTIN (set_fpscr, SET_FPSCR)\n #undef FP_BUILTIN\n \n #define CRC32_BUILTIN(L, U) \\\n-  {ARM_FSET_EMPTY, CODE_FOR_##L, \"__builtin_arm_\"#L, \\\n+  {isa_nobit, CODE_FOR_##L, \"__builtin_arm_\"#L, \\\n    ARM_BUILTIN_##U, UNKNOWN, 0},\n    CRC32_BUILTIN (crc32b, CRC32B)\n    CRC32_BUILTIN (crc32h, CRC32H)\n@@ -1310,7 +1311,7 @@ static const struct builtin_description bdesc_2arg[] =\n \n \n #define CRYPTO_BUILTIN(L, U)\t\t\t\t\t   \\\n-  {ARM_FSET_EMPTY, CODE_FOR_crypto_##L,\t\"__builtin_arm_crypto_\"#L, \\\n+  {isa_nobit, CODE_FOR_crypto_##L,\t\"__builtin_arm_crypto_\"#L, \\\n    ARM_BUILTIN_CRYPTO_##U, UNKNOWN, 0},\n #undef CRYPTO1\n #undef CRYPTO2\n@@ -1567,9 +1568,9 @@ arm_init_iwmmxt_builtins (void)\n       machine_mode mode;\n       tree type;\n \n-      if (d->name == 0 ||\n-\t  !(ARM_FSET_HAS_CPU1 (d->features, FL_IWMMXT) ||\n-\t    ARM_FSET_HAS_CPU1 (d->features, FL_IWMMXT2)))\n+      if (d->name == 0\n+\t  || !(d->feature == isa_bit_iwmmxt\n+\t       || d->feature == isa_bit_iwmmxt2))\n \tcontinue;\n \n       mode = insn_data[d->icode].operand[1].mode;\n@@ -1593,16 +1594,16 @@ arm_init_iwmmxt_builtins (void)\n \t  gcc_unreachable ();\n \t}\n \n-      def_mbuiltin (d->features, d->name, type, d->code);\n+      def_mbuiltin (d->feature, d->name, type, d->code);\n     }\n \n   /* Add the remaining MMX insns with somewhat more complicated types.  */\n #define iwmmx_mbuiltin(NAME, TYPE, CODE)\t\t\t\\\n-  def_mbuiltin (ARM_FSET_MAKE_CPU1 (FL_IWMMXT), \"__builtin_arm_\" NAME, \\\n+  def_mbuiltin (isa_bit_iwmmxt, \"__builtin_arm_\" NAME, \\\n \t\t(TYPE), ARM_BUILTIN_ ## CODE)\n \n #define iwmmx2_mbuiltin(NAME, TYPE, CODE)                      \\\n-  def_mbuiltin (ARM_FSET_MAKE_CPU1 (FL_IWMMXT2), \"__builtin_arm_\" NAME, \\\n+  def_mbuiltin (isa_bit_iwmmxt2, \"__builtin_arm_\" NAME, \\\n \t\t(TYPE),\tARM_BUILTIN_ ## CODE)\n \n   iwmmx_mbuiltin (\"wzero\", di_ftype_void, WZERO);"}]}