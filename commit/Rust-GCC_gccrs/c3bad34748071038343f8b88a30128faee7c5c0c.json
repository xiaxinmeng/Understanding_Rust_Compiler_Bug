{"sha": "c3bad34748071038343f8b88a30128faee7c5c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiYWQzNDc0ODA3MTAzODM0M2Y4Yjg4YTMwMTI4ZmFlZTdjNWMwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-08-29T09:01:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-08-29T09:01:26Z"}, "message": "decl.c (check_var_type): Add location_t parameter and use it.\n\n/cp\n2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (check_var_type): Add location_t parameter and use it.\n\t(grokdeclarator): Adjust call.\n\t* pt.c (tsubst_decl): Likewise.\n\t* cp-tree.h: Adjust declaration.\n\n/testsuite\n2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/spellcheck-typenames.C: Adjust expected locations.\n\t* g++.dg/cpp0x/pr84676.C: Check locations.\n\t* g++.dg/other/pr88187.C: Likewise.\n\t* g++.dg/parse/crash13.C: Likewise.\n\t* g++.dg/parse/crash46.C: Likewise.\n\t* g++.dg/parse/template28.C: Likewise.\n\t* g++.dg/parse/typename4.C: Likewise.\n\nFrom-SVN: r275025", "tree": {"sha": "32e4883fbeb50f98458eed38571a0e03fffe8f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32e4883fbeb50f98458eed38571a0e03fffe8f4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bad34748071038343f8b88a30128faee7c5c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bad34748071038343f8b88a30128faee7c5c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bad34748071038343f8b88a30128faee7c5c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bad34748071038343f8b88a30128faee7c5c0c/comments", "author": null, "committer": null, "parents": [{"sha": "f48e4da3259d52076f86aa081cece40dfda7b235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48e4da3259d52076f86aa081cece40dfda7b235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48e4da3259d52076f86aa081cece40dfda7b235"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "37de3d918709b2577d00d8b374b6f02c1fe471a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -1,3 +1,10 @@\n+2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (check_var_type): Add location_t parameter and use it.\n+\t(grokdeclarator): Adjust call.\n+\t* pt.c (tsubst_decl): Likewise.\n+\t* cp-tree.h: Adjust declaration.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P1152R4: Deprecating some uses of volatile."}, {"sha": "3c69e54c8858a2bdeb84ef9e0ca549a60072f0c1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -6478,7 +6478,7 @@ extern tree cxx_comdat_group\t\t\t(tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);\n extern bool is_direct_enum_init\t\t\t(tree, tree);\n extern void initialize_artificial_var\t\t(tree, vec<constructor_elt, va_gc> *);\n-extern tree check_var_type\t\t\t(tree, tree);\n+extern tree check_var_type\t\t\t(tree, tree, location_t);\n extern tree reshape_init                        (tree, tree, tsubst_flags_t);\n extern tree next_initializable_field (tree);\n extern tree fndecl_declared_return_type\t\t(tree);"}, {"sha": "3497874cb8172e6323cba6355767b83881a51c8d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -10298,19 +10298,20 @@ check_special_function_return_type (special_function_kind sfk,\n    error-recovery purposes.  */\n \n tree\n-check_var_type (tree identifier, tree type)\n+check_var_type (tree identifier, tree type, location_t loc)\n {\n   if (VOID_TYPE_P (type))\n     {\n       if (!identifier)\n-\terror (\"unnamed variable or field declared void\");\n+\terror_at (loc, \"unnamed variable or field declared void\");\n       else if (identifier_p (identifier))\n \t{\n \t  gcc_assert (!IDENTIFIER_ANY_OP_P (identifier));\n-\t  error (\"variable or field %qE declared void\", identifier);\n+\t  error_at (loc, \"variable or field %qE declared void\",\n+\t\t    identifier);\n \t}\n       else\n-\terror (\"variable or field declared void\");\n+\terror_at (loc, \"variable or field declared void\");\n       type = error_mark_node;\n     }\n \n@@ -12470,7 +12471,7 @@ grokdeclarator (const cp_declarator *declarator,\n      error message later.  */\n   if (decl_context != PARM)\n     {\n-      type = check_var_type (unqualified_id, type);\n+      type = check_var_type (unqualified_id, type, id_loc);\n       if (type == error_mark_node)\n         return error_mark_node;\n     }"}, {"sha": "13d3db9a0f7bad9bd00f45b289a88bc240839271", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -13894,8 +13894,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    /* Wait until cp_finish_decl to set this again, to handle\n \t       circular dependency (template/instantiate6.C). */\n \t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (r) = 0;\n-\t    type = check_var_type (DECL_NAME (r), type);\n-\n+\t    type = check_var_type (DECL_NAME (r), type,\n+\t\t\t\t   DECL_SOURCE_LOCATION (r));\n \t    if (DECL_HAS_VALUE_EXPR_P (t))\n \t      {\n \t\ttree ve = DECL_VALUE_EXPR (t);"}, {"sha": "a051dda738e3fbffa2a0761bbbdfd210b590b8fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -1,3 +1,13 @@\n+2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/spellcheck-typenames.C: Adjust expected locations.\n+\t* g++.dg/cpp0x/pr84676.C: Check locations.\n+\t* g++.dg/other/pr88187.C: Likewise.\n+\t* g++.dg/parse/crash13.C: Likewise.\n+\t* g++.dg/parse/crash46.C: Likewise.\n+\t* g++.dg/parse/template28.C: Likewise.\n+\t* g++.dg/parse/typename4.C: Likewise.\n+\n 2019-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91568"}, {"sha": "0bd8cc00c2c787acfbdf892c4b165748e8535726", "filename": "gcc/testsuite/g++.dg/cpp0x/pr84676.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84676.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84676.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84676.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++11 } }\n \n int a;\n-void b(__attribute__((c([](int *) {} (a == (0 = auto))))));  // { dg-error \"\" }\n+void b(__attribute__((c([](int *) {} (a == (0 = auto))))));  // { dg-error \"6:variable or field .b. declared void\" }\n+// { dg-error \"expected\" \"\" { target c++11 } .-1 }"}, {"sha": "ebdafddc634f5539713b96b7ed283762151d8586", "filename": "gcc/testsuite/g++.dg/other/pr88187.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr88187.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -2,6 +2,6 @@\n // { dg-do compile }\n \n template <int> struct A;\n-void f (A ());\t// { dg-error \"variable or field 'f' declared void\" \"\" { target c++14_down } }\n+void f (A ());\t// { dg-error \"6:variable or field 'f' declared void\" \"\" { target c++14_down } }\n \t\t// { dg-error \"missing template arguments before '\\\\(' token\" \"\" { target c++14_down } .-1 }\n \t\t// { dg-error \"'auto' parameter not permitted in this context\" \"\" { target c++17 } .-2 }"}, {"sha": "ab6401133cb89e40661810564a11d76f7aa0b1ff", "filename": "gcc/testsuite/g++.dg/parse/crash13.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -12,7 +12,8 @@ struct A\n };\n \n template <typename T> \n-void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" }\n+void func(A<T>::B* )\t// { dg-error \"6:variable or field .func. declared void\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n {\n }\n "}, {"sha": "cb60ad2683e83534b9e6a5a2c30bf7eb1339483a", "filename": "gcc/testsuite/g++.dg/parse/crash46.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -2,17 +2,17 @@\n // { dg-do compile }\n \n void\n-foo (_Decimal32)\t// { dg-error \"declared void\" \"declared\" }\n+foo (_Decimal32)\t// { dg-error \"1:variable or field .foo. declared void\" \"declared\" }\n {\n }\n \t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 5 }\n void\n-bar (_Bool)\t\t// { dg-error \"declared void\" \"declared\" }\n+bar (_Bool)\t\t// { dg-error \"1:variable or field .bar. declared void\" \"declared\" }\n {\n }\n \t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 10 }\n void\n-baz (_Fract)\t\t// { dg-error \"declared void\" \"declared\" }\n+baz (_Fract)\t\t// { dg-error \"1:variable or field .baz. declared void\" \"declared\" }\n {\n }\n \t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 15 }"}, {"sha": "bfd8af17b670488be892feba33bf68f6767dbea1", "filename": "gcc/testsuite/g++.dg/parse/template28.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -2,7 +2,8 @@\n \n template<class> struct A {};\n \n-template<class T> void foo(A<T>=A<T>()) {} // { dg-error \"\" }\n+template<class T> void foo(A<T>=A<T>()) {} // { dg-error \"24:variable or field .foo. declared void\" }\n+// { dg-error \"template\" \"\" { target *-*-* } .-1 }\n \n void bar()\n {"}, {"sha": "94ab98f45ff9a8931b10b44372a0af4b29117937", "filename": "gcc/testsuite/g++.dg/parse/typename4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename4.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -4,4 +4,5 @@\n \n // PR c++/9364: ICE processing typename with name error.\n \n-void find(typename int&); // { dg-error \"typename|void|expected\" }\n+void find(typename int&); // { dg-error \"6:variable or field .find. declared void\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } .-1 }"}, {"sha": "6adf724a3b799df9a9ab0c29e2f62b30086afdea", "filename": "gcc/testsuite/g++.dg/spellcheck-typenames.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bad34748071038343f8b88a30128faee7c5c0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-typenames.C?ref=c3bad34748071038343f8b88a30128faee7c5c0c", "patch": "@@ -4,10 +4,10 @@\n void test_1 (signed char e);\n \n /* PR c/70339.  */\n-void test_2 (singed char e); // { dg-error \"21: variable or field 'test_2' declared void\" }\n+void test_2 (singed char e); // { dg-error \"6: variable or field 'test_2' declared void\" }\n /* { dg-begin-multiline-output \"\" }\n  void test_2 (singed char e);\n-                     ^~~~\n+      ^~~~~~\n    { dg-end-multiline-output \"\" } */\n // { dg-message \"14: 'singed' was not declared in this scope; did you mean 'signed'\\\\?\" \"\" { target *-*-* } 7 }\n /* { dg-begin-multiline-output \"\" }\n@@ -16,10 +16,10 @@ void test_2 (singed char e); // { dg-error \"21: variable or field 'test_2' decla\n               signed\n    { dg-end-multiline-output \"\" } */\n \n-void test_3 (car e); // { dg-error \"14: variable or field 'test_3' declared void\" }\n+void test_3 (car e); // { dg-error \"6: variable or field 'test_3' declared void\" }\n /* { dg-begin-multiline-output \"\" }\n  void test_3 (car e);\n-              ^~~\n+      ^~~~~~\n    { dg-end-multiline-output \"\" } */\n // { dg-message \"14: 'car' was not declared in this scope; did you mean 'char'\\\\?\" \"\" { target *-*-* } 19 }\n /* { dg-begin-multiline-output \"\" }"}]}