{"sha": "200baf7698a1006714af27f2bfba6fad5607efb2", "node_id": "C_kwDOANBUbNoAKDIwMGJhZjc2OThhMTAwNjcxNGFmMjdmMmJmYmE2ZmFkNTYwN2VmYjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-22T13:24:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-23T07:05:07Z"}, "message": "Refactor is_non_loop_exit_postdominating\n\nThat's a weird function in predicate analysis that currently looks like\n\n/* Return true if BB1 is postdominating BB2 and BB1 is not a loop exit\n   bb.  The loop exit bb check is simple and does not cover all cases.  */\nstatic bool\nis_non_loop_exit_postdominating (basic_block bb1, basic_block bb2)\n{\n  if (!dominated_by_p (CDI_POST_DOMINATORS, bb2, bb1))\n    return false;\n  if (single_pred_p (bb1) && !single_succ_p (bb2))\n    return false;\n  return true;\n}\n\nOne can refactor this to\n\n  return (dominated_by_p (CDI_POST_DOMINATORS, bb2, bb1)\n          && !(single_pred_p (bb1) && !single_succ_p (bb2)));\n\nNotable is that the comment refers to BB1 with respect to a loop\nexit but the test seems to be written with an exit edge bb1 -> bb2\nin mind.  None of the three callers are guaranteed to have bb1 and\nbb2 connected directly with an edge.\n\nThe patch now introduces a is_loop_exit function and inlines\nthe post-dominance check which makes the find_control_equiv_block\ncase simpler because the post-dominance check can be elided.\nIt also avoids the double negation in compute_control_dep_chain\nand makes it obvious this is the case where we do look at an edge.\nFor the main is_use_guarded API I chose to elide the loop exit\ntest, if the use block post-dominates the definition block of the\nPHI node the use is always unconditional.  I don't quite understand\nthe loop exit special-casing of the remaining two uses though.\n\n\t* gimple-predicate-analysis.cc (is_loop_exit): Split out\n\tfrom ...\n\t(is_non_loop_exit_postdominating): ... here.  Remove after\n\tinlining ...\n\t(find_control_equiv_block): ... here.\n\t(compute_control_dep_chain): ... and here.\n\t(predicate::is_use_guarded): Do not excempt loop exits\n\tfrom short-cutting the case of the use post-dominating the\n\tPHI definition.", "tree": {"sha": "5a5d8fa849ef085a3d17ef83aa87ebb00e1a2926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a5d8fa849ef085a3d17ef83aa87ebb00e1a2926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/200baf7698a1006714af27f2bfba6fad5607efb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200baf7698a1006714af27f2bfba6fad5607efb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200baf7698a1006714af27f2bfba6fad5607efb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200baf7698a1006714af27f2bfba6fad5607efb2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dcde45c2644df7d07cc89d646e59b68689ead3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcde45c2644df7d07cc89d646e59b68689ead3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcde45c2644df7d07cc89d646e59b68689ead3e"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "e8e2dbf70347584b50bbb06cdb76b4aa6cf803cc", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200baf7698a1006714af27f2bfba6fad5607efb2/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200baf7698a1006714af27f2bfba6fad5607efb2/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=200baf7698a1006714af27f2bfba6fad5607efb2", "patch": "@@ -46,19 +46,12 @@\n \n #define DEBUG_PREDICATE_ANALYZER 1\n \n-/* Return true if BB1 is postdominating BB2 and BB1 is not a loop exit\n-   bb.  The loop exit bb check is simple and does not cover all cases.  */\n+/* Return true if, when BB1 is postdominating BB2, BB1 is a loop exit.  */\n \n static bool\n-is_non_loop_exit_postdominating (basic_block bb1, basic_block bb2)\n+is_loop_exit (basic_block bb2, basic_block bb1)\n {\n-  if (!dominated_by_p (CDI_POST_DOMINATORS, bb2, bb1))\n-    return false;\n-\n-  if (single_pred_p (bb1) && !single_succ_p (bb2))\n-    return false;\n-\n-  return true;\n+  return single_pred_p (bb1) && !single_succ_p (bb2);\n }\n \n /* Find BB's closest postdominator that is its control equivalent (i.e.,\n@@ -70,7 +63,7 @@ find_control_equiv_block (basic_block bb)\n   basic_block pdom = get_immediate_dominator (CDI_POST_DOMINATORS, bb);\n \n   /* Skip the postdominating bb that is also a loop exit.  */\n-  if (!is_non_loop_exit_postdominating (pdom, bb))\n+  if (is_loop_exit (bb, pdom))\n     return NULL;\n \n   /* If the postdominator is dominated by BB, return it.  */\n@@ -1114,7 +1107,8 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n \n       basic_block cd_bb = e->dest;\n       cur_cd_chain.safe_push (e);\n-      while (!is_non_loop_exit_postdominating (cd_bb, dom_bb))\n+      while (!dominated_by_p (CDI_POST_DOMINATORS, dom_bb, cd_bb)\n+\t     || is_loop_exit (dom_bb, cd_bb))\n \t{\n \t  if (cd_bb == dep_bb)\n \t    {\n@@ -1885,7 +1879,7 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n      in the same bb.  */\n   predicate use_preds (def_bb, use_bb, m_eval);\n \n-  if (is_non_loop_exit_postdominating (use_bb, def_bb))\n+  if (dominated_by_p (CDI_POST_DOMINATORS, def_bb, use_bb))\n     {\n       if (is_empty ())\n \t{"}]}