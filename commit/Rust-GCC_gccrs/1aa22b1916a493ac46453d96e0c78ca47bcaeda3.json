{"sha": "1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhMjJiMTkxNmE0OTNhYzQ2NDUzZDk2ZTBjNzhjYTQ3YmNhZWRhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-17T14:43:08Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-20T16:14:56Z"}, "message": "c-family: Tighten vector handling in type_for_mode [PR94072]\n\nIn this PR we had a 512-bit VECTOR_TYPE whose mode is XImode\n(an integer mode used for four 128-bit vectors).  When trying\nto expand a zero constant for it, we hit code in expand_expr_real_1\nthat tries to use the associated integer type instead.  The code used\ntype_for_mode (XImode, 1) to get this integer type.\n\nHowever, the c-family implementation of type_for_mode checks for\nany registered built-in type that matches the mode and has the\nright signedness.  This meant that it could return a built-in\nvector type when given an integer mode (particularly if, as here,\nthe vector type isn't supported by the current subtarget and so\nTYPE_MODE != TYPE_MODE_RAW).  The expand code would then cycle\nendlessly trying to use this \"new\" type instead of the original\nvector type.\n\n2020-03-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/c-family/\n\tPR middle-end/94072\n\t* c-common.c (c_common_type_for_mode): Before using a registered\n\tbuilt-in type, check that the vectorness of the type matches\n\tthe vectorness of the mode.\n\ngcc/testsuite/\n\tPR middle-end/94072\n\t* gcc.target/aarch64/pr94072.c: New test.", "tree": {"sha": "0ea7e0d2da9a34f3b23eb384770101da82a67775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ea7e0d2da9a34f3b23eb384770101da82a67775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3562f81042e05d9bc82d6834cac761c9d9db0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3562f81042e05d9bc82d6834cac761c9d9db0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3562f81042e05d9bc82d6834cac761c9d9db0c8"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "3f195ebcc5d65c73798ecbe26ccd33e9defc5398", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "patch": "@@ -1,3 +1,10 @@\n+2020-03-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/94072\n+\t* c-common.c (c_common_type_for_mode): Before using a registered\n+\tbuilt-in type, check that the vectorness of the type matches\n+\tthe vectorness of the mode.\n+\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.c (resolve_overloaded_builtin): Fix up duplicated word"}, {"sha": "8e5a92438270f854ba12859ff756f1bcc9295812", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "patch": "@@ -2387,10 +2387,13 @@ c_common_type_for_mode (machine_mode mode, int unsignedp)\n     }\n \n   for (t = registered_builtin_types; t; t = TREE_CHAIN (t))\n-    if (TYPE_MODE (TREE_VALUE (t)) == mode\n-\t&& !!unsignedp == !!TYPE_UNSIGNED (TREE_VALUE (t)))\n-      return TREE_VALUE (t);\n-\n+    {\n+      tree type = TREE_VALUE (t);\n+      if (TYPE_MODE (type) == mode\n+\t  && VECTOR_TYPE_P (type) == VECTOR_MODE_P (mode)\n+\t  && !!unsignedp == !!TYPE_UNSIGNED (type))\n+\treturn type;\n+    }\n   return NULL_TREE;\n }\n "}, {"sha": "2408590cc51f02ea4927458d0626a233aecd767d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/94072\n+\t* gcc.target/aarch64/pr94072.c: New test.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "2aa72eb7a16f590194224b0ee393e4c6f844e83c", "filename": "gcc/testsuite/gcc.target/aarch64/pr94072.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94072.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa22b1916a493ac46453d96e0c78ca47bcaeda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94072.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94072.c?ref=1aa22b1916a493ac46453d96e0c78ca47bcaeda3", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-msve-vector-bits=512\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+void\n+foo (void)\n+{\n+  (int __attribute__ ((__vector_size__ (64)))){};\n+}"}]}