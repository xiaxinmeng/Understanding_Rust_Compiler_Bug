{"sha": "334e912a93187986aa51b980b30b50b42fa109c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0ZTkxMmE5MzE4Nzk4NmFhNTFiOTgwYjMwYjUwYjQyZmExMDljNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-09-18T20:21:03Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-09-18T20:21:03Z"}, "message": "re PR fortran/35945 (Complex module-based overloading fails)\n\n2008-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n       PR fortran/35945\n       * resolve.c (resolve_fl_variable_derived):  Remove derived type\n       comparison for use associated derived types.  Host association\n       of a derived type will not arise if there is a local derived type\n       whose use name is the same.\n\n       PR fortran/36700\n       * match.c (gfc_match_call):  Use the existing symbol even if\n       it is a function.\n\n2008-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n       PR fortran/35945\n       * gfortran.dg/host_assoc_types_2.f90: New test.\n\n       PR fortran/36700\n       * gfortran.dg/host_assoc_call_2.f90: New test.\n\nFrom-SVN: r140474", "tree": {"sha": "2632203ed364ae97ee9b947de350525a0cbd781e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2632203ed364ae97ee9b947de350525a0cbd781e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/334e912a93187986aa51b980b30b50b42fa109c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334e912a93187986aa51b980b30b50b42fa109c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334e912a93187986aa51b980b30b50b42fa109c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334e912a93187986aa51b980b30b50b42fa109c5/comments", "author": null, "committer": null, "parents": [{"sha": "47993132a0d2efb2135b952c0012642eef3a4974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47993132a0d2efb2135b952c0012642eef3a4974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47993132a0d2efb2135b952c0012642eef3a4974"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "c972097a67b8122746d099550db0f8eef6f35640", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -1,3 +1,15 @@\n+2008-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+       PR fortran/35945\n+       * resolve.c (resolve_fl_variable_derived):  Remove derived type\n+       comparison for use associated derived types.  Host association\n+       of a derived type will not arise if there is a local derived type\n+       whose use name is the same.\n+\n+       PR fortran/36700\n+       * match.c (gfc_match_call):  Use the existing symbol even if\n+       it is a function.\n+\n 2008-09-18  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37507"}, {"sha": "f7ff9bbdc3becce8b1996050cac16426ceed12ea", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -2589,9 +2589,12 @@ gfc_match_call (void)\n   if (sym->attr.flavor != FL_PROCEDURE && sym->ts.type == BT_DERIVED)\n     return match_typebound_call (st);\n \n-  /* If it does not seem to be callable...  */\n+  /* If it does not seem to be callable (include functions so that the\n+     right association is made.  They are thrown out in resolution.)\n+     ...  */\n   if (!sym->attr.generic\n-\t&& !sym->attr.subroutine)\n+\t&& !sym->attr.subroutine\n+\t&& !sym->attr.function)\n     {\n       if (!(sym->attr.external && !sym->attr.referenced))\n \t{"}, {"sha": "f8f2df972cc392c8dc23d5401f43919a416a3dab", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -7371,8 +7371,7 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n     {\n       gfc_symbol *s;\n       gfc_find_symbol (sym->ts.derived->name, sym->ns, 0, &s);\n-      if (s && (s->attr.flavor != FL_DERIVED\n-\t\t|| !gfc_compare_derived_types (s, sym->ts.derived)))\n+      if (s && s->attr.flavor != FL_DERIVED)\n \t{\n \t  gfc_error (\"The type '%s' cannot be host associated at %L \"\n \t\t     \"because it is blocked by an incompatible object \""}, {"sha": "ea13346e62c42607e899ef9b037ba317bb18591d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -1,3 +1,11 @@\n+2008-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+       PR fortran/35945\n+       * gfortran.dg/host_assoc_types_2.f90: New test.\n+\n+       PR fortran/36700\n+       * gfortran.dg/host_assoc_call_2.f90: New test.\n+\n 2008-09-18  DJ Delorie  <dj@redhat.com>\n \n \t* gcc.c-torture/execute/20060420-1.c: Fix alignment logic."}, {"sha": "a74f37343bb2c2d1185bcca78e9cd1deb287d08b", "filename": "gcc/testsuite/gfortran.dg/host_assoc_call_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_2.f90?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! Tests the fix for PR36700, in which the call to the function would\n+! cause an ICE.\n+!\n+! Contributed by <terry@chem.gu.se>\n+!\n+module Diatoms\n+  implicit none\n+contains\n+  function InitialDiatomicX () result(v4)    ! { dg-error \"has a type\" }\n+    real(kind = 8), dimension(4) :: v4\n+    v4 = 1\n+  end function InitialDiatomicX\n+  subroutine FindDiatomicPeriod\n+    call InitialDiatomicX ()    ! { dg-error \"which is not consistent with the CALL\" }\n+  end subroutine FindDiatomicPeriod\n+end module Diatoms\n+! { dg-final { cleanup-modules \"Diatoms\" } }"}, {"sha": "824a49592173b488236b943c231813329b345624", "filename": "gcc/testsuite/gfortran.dg/host_assoc_types_2.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_types_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334e912a93187986aa51b980b30b50b42fa109c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_types_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_types_2.f90?ref=334e912a93187986aa51b980b30b50b42fa109c5", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do compile }\n+! Tests the fix for PR33945, the host association of overloaded_type_s\n+! would be incorrectly blocked by the use associated overloaded_type.\n+!\n+! Contributed by Jonathan Hogg  <J.Hogg@rl.ac.uk>\n+!\n+module dtype\r\n+   implicit none\r\n+\r\n+   type overloaded_type\r\n+      double precision :: part\r\n+   end type\r\n+\r\n+   interface overloaded_sub\r\n+      module procedure overloaded_sub_d\r\n+   end interface\r\n+\r\n+contains\r\n+   subroutine overloaded_sub_d(otype)\r\n+      type(overloaded_type), intent(in) :: otype\r\n+\r\n+      print *, \"d type = \", otype%part\r\n+   end subroutine\r\n+end module\r\n+\r\n+module stype\r\n+   implicit none\r\n+\r\n+   type overloaded_type\r\n+      real :: part\r\n+   end type\r\n+\r\n+   interface overloaded_sub\r\n+      module procedure overloaded_sub_s\r\n+   end interface\r\n+\r\n+contains\r\n+   subroutine overloaded_sub_s(otype)\r\n+      type(overloaded_type), intent(in) :: otype\r\n+\r\n+      print *, \"s type = \", otype%part\r\n+   end subroutine\r\n+end module\r\n+\r\n+program test\r\n+   use stype, overloaded_type_s => overloaded_type\r\n+   use dtype, overloaded_type_d => overloaded_type\r\n+   implicit none\r\n+\r\n+   type(overloaded_type_s) :: sval\r\n+   type(overloaded_type_d) :: dval\r\n+\r\n+   sval%part = 1\r\n+   dval%part = 2\r\n+\r\n+   call fred(sval, dval)\r\n+\r\n+contains\r\n+   subroutine fred(sval, dval)\r\n+      use stype\r\n+\r\n+      type(overloaded_type_s), intent(in) :: sval  ! This caused an error\r\n+      type(overloaded_type_d), intent(in) :: dval\r\n+\r\n+      call overloaded_sub(sval)\r\n+      call overloaded_sub(dval)\r\n+   end subroutine\r\n+end program\r\n+! { dg-final { cleanup-modules \"stype dtype\" } }\r"}]}