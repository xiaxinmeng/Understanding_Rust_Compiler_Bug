{"sha": "c0ea284b1631ce545a5e5c0878a7df3422f4211a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlYTI4NGIxNjMxY2U1NDVhNWU1YzA4NzhhN2RmMzQyMmY0MjExYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-10T19:50:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-10T19:50:53Z"}, "message": "genrecog.c (find_operand): Handle 'V' format code.\n\n        * genrecog.c (find_operand): Handle 'V' format code.\n        (find_matching_operand): New.\n        (validate_pattern): Accept '=' for an in-out operand if there\n        is another operand with a matching constraint.\n\nFrom-SVN: r38175", "tree": {"sha": "dc7494e7a1d7e13ddb26f9159fe982343c92b8f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc7494e7a1d7e13ddb26f9159fe982343c92b8f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ea284b1631ce545a5e5c0878a7df3422f4211a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ea284b1631ce545a5e5c0878a7df3422f4211a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ea284b1631ce545a5e5c0878a7df3422f4211a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ea284b1631ce545a5e5c0878a7df3422f4211a/comments", "author": null, "committer": null, "parents": [{"sha": "e06d5f0b8a745a7913fa9b8cb4b4530f0602b062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06d5f0b8a745a7913fa9b8cb4b4530f0602b062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06d5f0b8a745a7913fa9b8cb4b4530f0602b062"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "25f1de51800a6cd0b3133f577c3a416c149b3719", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea284b1631ce545a5e5c0878a7df3422f4211a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea284b1631ce545a5e5c0878a7df3422f4211a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0ea284b1631ce545a5e5c0878a7df3422f4211a", "patch": "@@ -1,3 +1,13 @@\n+2000-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* genrecog.c (find_operand): Handle 'V' format code.\n+\t(find_matching_operand): New.\n+\t(validate_pattern): Accept '=' for an in-out operand if there\n+\tis another operand with a matching constraint.\n+\n+\t* config/i386/i386.md (andqi_ext_0_cc): Use matching constraint\n+\tfor op1 to op0.\n+\n 2000-12-10  Richard Henderson  <rth@redhat.com>\n \n \t* genrecog.c (validate_pattern) [STRICT_LOW_PART]: Fix thinko.\n@@ -30,16 +40,16 @@\n \n 2000-12-09  Neil Booth  <neilb@earthling.net>\n \n-        * cppfiles.c (NEVER_REREAD, DO_NOT_REREAD): Move from cpphash.h.\n-        * cpphash.h (NEVER_REREAD, DO_NOT_REREAD, ABSOLUTE_PATH): Delete.\n-        * cpplex.c (parse_identifier): Improve diagnostic.\n-        (_cpp_lex_token): Return unconditionally at the end of a directive.\n-        * cpplib.c (read_flag): Verify legality of each flag.\n-        (end_directive): Resotre pfile->skipping before skip_rest_of_line.\n-        (do_line): Use the new read_flag.\n-        * cppmacro.c (struct cpp_macro, parse_arg, replace_args,\n-        check_macro_redefinition, parse_params): Rename var_args to\n-        variadic.\n+\t* cppfiles.c (NEVER_REREAD, DO_NOT_REREAD): Move from cpphash.h.\n+\t* cpphash.h (NEVER_REREAD, DO_NOT_REREAD, ABSOLUTE_PATH): Delete.\n+\t* cpplex.c (parse_identifier): Improve diagnostic.\n+\t(_cpp_lex_token): Return unconditionally at the end of a directive.\n+\t* cpplib.c (read_flag): Verify legality of each flag.\n+\t(end_directive): Resotre pfile->skipping before skip_rest_of_line.\n+\t(do_line): Use the new read_flag.\n+\t* cppmacro.c (struct cpp_macro, parse_arg, replace_args,\n+\tcheck_macro_redefinition, parse_params): Rename var_args to\n+\tvariadic.\n \n 2000-12-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -130,7 +140,7 @@\n \n 2000-12-08  Brad Lucier <lucier@math.purdue.edu>\n \n-        * tradcpp.c (do_include): Make pointer differences 64-bit clean.\n+\t* tradcpp.c (do_include): Make pointer differences 64-bit clean.\n \n Fri Dec  8 08:23:29 2000  J\"orn Rennecke <amylaar@redhat.com>\n "}, {"sha": "795d5214bfbdf89292c6c132d6ef3653962ab125", "filename": "gcc/genrecog.c", "status": "modified", "additions": 79, "deletions": 10, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea284b1631ce545a5e5c0878a7df3422f4211a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea284b1631ce545a5e5c0878a7df3422f4211a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=c0ea284b1631ce545a5e5c0878a7df3422f4211a", "patch": "@@ -230,6 +230,8 @@ static struct decision_test *new_decision_test\n   PARAMS ((enum decision_type, struct decision_test ***));\n static rtx find_operand\n   PARAMS ((rtx, int));\n+static rtx find_matching_operand\n+  PARAMS ((rtx, int));\n static void validate_pattern\n   PARAMS ((rtx, rtx, rtx, int));\n static struct decision *add_to_sequence\n@@ -379,6 +381,11 @@ find_operand (pattern, n)\n \t    return r;\n \t  break;\n \n+\tcase 'V':\n+\t  if (! XVEC (pattern, i))\n+\t    break;\n+\t  /* FALLTHRU */\n+\n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (pattern, i); j++)\n \t    if ((r = find_operand (XVECEXP (pattern, i, j), n)) != NULL_RTX)\n@@ -396,6 +403,60 @@ find_operand (pattern, n)\n   return NULL;\n }\n \n+/* Search for and return operand M, such that it has a matching\n+   constraint for operand N.  */\n+\n+static rtx\n+find_matching_operand (pattern, n)\n+     rtx pattern;\n+     int n;\n+{\n+  const char *fmt;\n+  RTX_CODE code;\n+  int i, j, len;\n+  rtx r;\n+\n+  code = GET_CODE (pattern);\n+  if (code == MATCH_OPERAND\n+      && (XSTR (pattern, 2)[0] == '0' + n\n+\t  || (XSTR (pattern, 2)[0] == '%'\n+\t      && XSTR (pattern, 2)[1] == '0' + n)))\n+    return pattern;\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  len = GET_RTX_LENGTH (code);\n+  for (i = 0; i < len; i++)\n+    {\n+      switch (fmt[i])\n+\t{\n+\tcase 'e': case 'u':\n+\t  if ((r = find_matching_operand (XEXP (pattern, i), n)))\n+\t    return r;\n+\t  break;\n+\n+\tcase 'V':\n+\t  if (! XVEC (pattern, i))\n+\t    break;\n+\t  /* FALLTHRU */\n+\n+\tcase 'E':\n+\t  for (j = 0; j < XVECLEN (pattern, i); j++)\n+\t    if ((r = find_matching_operand (XVECEXP (pattern, i, j), n)))\n+\t      return r;\n+\t  break;\n+\n+\tcase 'i': case 'w': case '0': case 's':\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+\n+  return NULL;\n+}\n+\n+\n /* Check for various errors in patterns.  SET is nonnull for a destination,\n    and is the complete set pattern.  SET_CODE is '=' for normal sets, and\n    '+' within a context that requires in-out constraints.  */\n@@ -484,19 +545,27 @@ validate_pattern (pattern, insn, set, set_code)\n \t  }\n \n \t/* A MATCH_OPERAND that is a SET should have an output reload.  */\n-\tif (set && code == MATCH_OPERAND)\n+\tif (set && code == MATCH_OPERAND\n+\t    && XSTR (pattern, 2)[0] != '\\0')\n \t  {\n-\t    if (set_code == '+'\n-\t\t&& XSTR (pattern, 2)[0] != '\\0'\n-\t\t&& XSTR (pattern, 2)[0] != '+')\n+\t    if (set_code == '+')\n \t      {\n-\t\tmessage_with_line (pattern_lineno,\n-\t\t\t\t   \"operand %d missing in-out reload\",\n-\t\t\t\t   XINT (pattern, 0));\n-\t\terror_count++;\n+\t\tif (XSTR (pattern, 2)[0] == '+')\n+\t\t  ;\n+\t\t/* If we've only got an output reload for this operand,\n+\t\t   we'd better have a matching input operand.  */\n+\t\telse if (XSTR (pattern, 2)[0] == '='\n+\t\t\t && find_matching_operand (insn, XINT (pattern, 0)))\n+\t\t  ;\n+\t\telse\n+\t\t  {\n+\t\t    message_with_line (pattern_lineno,\n+\t\t\t\t       \"operand %d missing in-out reload\",\n+\t\t\t\t       XINT (pattern, 0));\n+\t\t    error_count++;\n+\t\t  }\n \t      }\n-\t    else if (XSTR (pattern, 2)[0] != '\\0'\n-\t\t     && XSTR (pattern, 2)[0] != '='\n+\t    else if (XSTR (pattern, 2)[0] != '='\n \t\t     && XSTR (pattern, 2)[0] != '+')\n \t      {\n \t\tmessage_with_line (pattern_lineno,"}]}