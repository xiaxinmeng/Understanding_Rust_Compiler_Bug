{"sha": "2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkYzIwMDA0ZjQ1N2UxMjczNWNlZWRhNWU0MmJhNjNjM2UxZjYwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T15:20:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T15:20:53Z"}, "message": "[multiple changes]\n\n2009-04-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* socket.c: Add more protections against S_resolvLib_ macros.\n\n2009-04-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting\n\n2009-04-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (New_Overloaded_Entity): New predicate\n\tIs_Overriding_Alias to handle properly types that inherit two homonym\n\toperations that have distinct dispatch table entries.\n\nFrom-SVN: r145681", "tree": {"sha": "26cdaa6a5a994a3cd95502cf2c6036e0c939a3f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26cdaa6a5a994a3cd95502cf2c6036e0c939a3f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/comments", "author": null, "committer": null, "parents": [{"sha": "06a16f58d6c14487c0598fe6f1c5cd68ba68301e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a16f58d6c14487c0598fe6f1c5cd68ba68301e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a16f58d6c14487c0598fe6f1c5cd68ba68301e"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "58df8e14c5d4e990b1a9b9952159eee1e9f796eb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "patch": "@@ -1,3 +1,17 @@\n+2009-04-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* socket.c: Add more protections against S_resolvLib_ macros.\n+\n+2009-04-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting\n+\n+2009-04-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): New predicate\n+\tIs_Overriding_Alias to handle properly types that inherit two homonym\n+\toperations that have distinct dispatch table entries.\n+\n 2009-04-07  Emmanuel Briot  <briot@adacore.com>\n \n \t* s-regexp.adb (Create_Mapping): Ignore excaped open parenthesis when"}, {"sha": "d0812ad2ca036c8392c61cdf3f8b16c6581c27ea", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "patch": "@@ -5517,7 +5517,7 @@ package body Sem_Attr is\n          --  an optimization, but it falls out essentially free, so why not.\n          --  Again we compute the variable Static for easy reference later\n          --  (note that no array attributes are static in Ada 83).\n-         --  we also need to set Static properly for subsequent legality checks\n+         --  We also need to set Static properly for subsequent legality checks\n          --  which might otherwise accept non-static constants in contexts\n          --  where they are not legal.\n "}, {"sha": "86793d2303db5dcfd9521cdb154ae4f591c65cd5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "patch": "@@ -3096,7 +3096,7 @@ package body Sem_Ch6 is\n       if Nkind (Decl) = N_Subprogram_Declaration\n         and then Present (Body_To_Inline (Decl))\n       then\n-         return;    --  Done already.\n+         return;    --  Done already\n \n       --  Functions that return unconstrained composite types require\n       --  secondary stack handling, and cannot currently be inlined, unless\n@@ -6473,6 +6473,15 @@ package body Sem_Ch6 is\n       --  set when freezing entities, so we must examine the place of the\n       --  declaration in the tree, and recognize wrapper packages as well.\n \n+      function Is_Overriding_Alias\n+        (Old_E : Entity_Id;\n+         New_E : Entity_Id) return Boolean;\n+      --  Check whether new subprogram and old subprogram are both inherited\n+      --  from subprograms that have distinct dispatch table entries. This can\n+      --  occur with derivations from instances with accidental homonyms.\n+      --  The function is conservative given that the converse is only true\n+      --  within instances that contain accidental overloadings.\n+\n       ------------------------------------\n       -- Check_For_Primitive_Subprogram --\n       ------------------------------------\n@@ -7027,6 +7036,24 @@ package body Sem_Ch6 is\n          end if;\n       end Is_Private_Declaration;\n \n+      --------------------------\n+      -- Is_Overriding_Alias --\n+      --------------------------\n+\n+      function Is_Overriding_Alias\n+        (Old_E : Entity_Id;\n+         New_E : Entity_Id) return Boolean\n+      is\n+         AO : constant Entity_Id := Alias (Old_E);\n+         AN : constant Entity_Id := Alias (New_E);\n+\n+      begin\n+         return Scope (AO) /= Scope (AN)\n+           or else No (DTC_Entity (AO))\n+           or else No (DTC_Entity (AN))\n+           or else DT_Position (AO) = DT_Position (AN);\n+      end Is_Overriding_Alias;\n+\n    --  Start of processing for New_Overloaded_Entity\n \n    begin\n@@ -7163,14 +7190,11 @@ package body Sem_Ch6 is\n \n                if Present (Alias (S))\n                  and then (No (Alias (E))\n-                            or else Is_Abstract_Subprogram (S)\n                             or else Comes_From_Source (E)\n+                            or else Is_Abstract_Subprogram (S)\n                             or else\n                               (Is_Dispatching_Operation (E)\n-                                and then Present (DTC_Entity (Alias (S)))\n-                                and then Present (DTC_Entity (Alias (E)))\n-                                and then DT_Position (Alias (S))\n-                                   = DT_Position (Alias (E))))\n+                                 and then Is_Overriding_Alias (E, S)))\n                  and then Ekind (E) /= E_Enumeration_Literal\n                then\n "}, {"sha": "cdb12456ad40a6222bae80102e2f157e5b415e0a", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddc20004f457e12735ceeda5e42ba63c3e1f60a/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "patch": "@@ -355,15 +355,20 @@ __gnat_get_h_errno (void) {\n #ifdef S_resolvLib_HOST_NOT_FOUND\n     case S_resolvLib_HOST_NOT_FOUND:\n #endif\n-    case S_hostLib_UNKNOWN_HOST:\n+#ifdef S_hostLib_HOST_NOT_FOUND\n     case S_hostLib_HOST_NOT_FOUND:\n+#endif\n+    case S_hostLib_UNKNOWN_HOST:\n       return HOST_NOT_FOUND;\n \n #ifdef S_resolvLib_TRY_AGAIN\n     case S_resolvLib_TRY_AGAIN:\n+      return TRY_AGAIN;\n #endif\n+#ifdef S_hostLib_TRY_AGAIN\n     case S_hostLib_TRY_AGAIN:\n       return TRY_AGAIN;\n+#endif\n \n #ifdef S_resolvLib_NO_RECOVERY\n     case S_resolvLib_NO_RECOVERY:\n@@ -377,8 +382,13 @@ __gnat_get_h_errno (void) {\n #ifdef S_resolvLib_INVALID_ADDRESS\n     case S_resolvLib_INVALID_ADDRESS:\n #endif\n-    case S_hostLib_INVALID_PARAMETER:\n+#ifdef S_hostLib_NO_RECOVERY\n     case S_hostLib_NO_RECOVERY:\n+#endif\n+#ifdef S_hostLib_NETDB_INTERNAL\n+    case S_hostLib_NETDB_INTERNAL:\n+#endif\n+    case S_hostLib_INVALID_PARAMETER:\n       return NO_RECOVERY;\n \n #ifdef S_resolvLib_NO_DATA"}]}