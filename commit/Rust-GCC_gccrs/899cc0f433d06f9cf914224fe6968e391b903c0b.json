{"sha": "899cc0f433d06f9cf914224fe6968e391b903c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5Y2MwZjQzM2QwNmY5Y2Y5MTQyMjRmZTY5NjhlMzkxYjkwM2MwYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-31T20:49:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-31T20:49:42Z"}, "message": "frv.c (frv_rtx_costs): Update forward declaration.\n\n\n\n\t* frv.c (frv_rtx_costs): Update forward declaration.\n\t* spu.c (spu_rtx_costs): Likewise.\n\t* pdp11.c: Include df.h\n\t(pdp11_output_function_epilogue): Use df_set_regs_ever_live.\n\t* m68hc11.c (m68hc11_gen_highpart): Fix call of gen_rtx_SUBREG.\n\t(m68hc11_rtx_costs_1): Fix call of rtx_cost.\n\t* iq2000.c (iq2000_address_cost): Add speed argument.\n\t(iq2000_rtx_costs): Likewise.\n\t* mn10300.c (mn10300_address_cost_1): Remove speed argument;\n\tupdate call of mn10300_address_cost.\n\t* mcore.c: Include df.h\n\t(mcore_rtx_costs): Update prototype.\n\t* score3.c: Include df.h\n\t(score3_rtx_costs): Remove speed argument.\n\t* score7.c: Include df.h\n\t(score7_address_cost): Remove speed argument.\n\t* score-protos.h (score_address_cost): Update prototype.\n\t* score.c: Include df.h\n\t(score_rtx_costs): Update call of costs functions.\n\t* v850.c (v850_rtx_costs): Add bool argument.\n\nFrom-SVN: r139843", "tree": {"sha": "212dea79b765386b3da5143e55e3a400579610b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/212dea79b765386b3da5143e55e3a400579610b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899cc0f433d06f9cf914224fe6968e391b903c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899cc0f433d06f9cf914224fe6968e391b903c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899cc0f433d06f9cf914224fe6968e391b903c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899cc0f433d06f9cf914224fe6968e391b903c0b/comments", "author": null, "committer": null, "parents": [{"sha": "cd6b7bc60d96bede7b4aa79495523ac997ab7c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6b7bc60d96bede7b4aa79495523ac997ab7c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6b7bc60d96bede7b4aa79495523ac997ab7c62"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "2fc2fe780322fe14973cffc3637cca9ef551a59f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -1,3 +1,26 @@\n+2008-08-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* frv.c (frv_rtx_costs): Update forward declaration.\n+\t* spu.c (spu_rtx_costs): Likewise.\n+\t* pdp11.c: Include df.h\n+\t(pdp11_output_function_epilogue): Use df_set_regs_ever_live.\n+\t* m68hc11.c (m68hc11_gen_highpart): Fix call of gen_rtx_SUBREG.\n+\t(m68hc11_rtx_costs_1): Fix call of rtx_cost.\n+\t* iq2000.c (iq2000_address_cost): Add speed argument.\n+\t(iq2000_rtx_costs): Likewise.\n+\t* mn10300.c (mn10300_address_cost_1): Remove speed argument;\n+\tupdate call of mn10300_address_cost.\n+\t* mcore.c: Include df.h\n+\t(mcore_rtx_costs): Update prototype.\n+\t* score3.c: Include df.h\n+\t(score3_rtx_costs): Remove speed argument.\n+\t* score7.c: Include df.h\n+\t(score7_address_cost): Remove speed argument.\n+\t* score-protos.h (score_address_cost): Update prototype.\n+\t* score.c: Include df.h\n+\t(score_rtx_costs): Update call of costs functions.\n+\t* v850.c (v850_rtx_costs): Add bool argument.\n+\n 2008-08-31  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_rtx_costs): Correct call to rtx_costs."}, {"sha": "1d0174cf757965fd54d6a96d59c9895eddb0d6ad", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -366,7 +366,7 @@ static void frv_setup_incoming_varargs\t\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t tree, int *, int);\n static rtx frv_expand_builtin_saveregs\t\t(void);\n static void frv_expand_builtin_va_start\t\t(tree, rtx);\n-static bool frv_rtx_costs\t\t\t(rtx, int, int, int*);\n+static bool frv_rtx_costs\t\t\t(rtx, int, int, int*, bool);\n static void frv_asm_out_constructor\t\t(rtx, int);\n static void frv_asm_out_destructor\t\t(rtx, int);\n static bool frv_function_symbol_referenced_p\t(rtx);"}, {"sha": "b8b1f41868e339733ee78eea71ad058f872ead3e", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -744,7 +744,7 @@ iq2000_move_1word (rtx operands[], rtx insn, int unsignedp)\n /* Provide the costs of an addressing mode that contains ADDR.  */\n \n static int\n-iq2000_address_cost (rtx addr, bool speec ATTRIBUTE_UNUSED)\n+iq2000_address_cost (rtx addr, bool speed)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -795,7 +795,7 @@ iq2000_address_cost (rtx addr, bool speec ATTRIBUTE_UNUSED)\n \t  case LABEL_REF:\n \t  case HIGH:\n \t  case LO_SUM:\n-\t    return iq2000_address_cost (plus1) + 1;\n+\t    return iq2000_address_cost (plus1, speed) + 1;\n \n \t  default:\n \t    break;\n@@ -3203,7 +3203,8 @@ print_operand (FILE *file, rtx op, int letter)\n }\n \n static bool\n-iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int * total, bool speed)\n+iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int * total,\n+\t\t  bool speed ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = GET_MODE (x);\n "}, {"sha": "6850157b33288ed5ed3a7d7291a880c961aaec72", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -1960,7 +1960,7 @@ m68hc11_gen_highpart (enum machine_mode mode, rtx x)\n   switch (GET_CODE (x))\n     {\n     case SUBREG:\n-      return gen_rtx_SUBREG (mode, XEXP (x, 0), XEXP (x, 1));\n+      return gen_rtx_SUBREG (mode, XEXP (x, 0), XINT (x, 1));\n     case REG:\n       if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n         return gen_rtx_REG (mode, REGNO (x));\n@@ -5335,7 +5335,8 @@ m68hc11_rtx_costs_1 (rtx x, enum rtx_code code,\n           + rtx_cost (XEXP (XEXP (x, 0), 0), code, !optimize_size)\n           + rtx_cost (XEXP (XEXP (x, 1), 0), code, !optimize_size);\n \n-      total = rtx_cost (XEXP (x, 0), code) + rtx_cost (XEXP (x, 1), code);\n+      total = rtx_cost (XEXP (x, 0), code, !optimize_size)\n+      \t      + rtx_cost (XEXP (x, 1), code, !optimize_size);\n       switch (mode)\n         {\n         case QImode:"}, {"sha": "cb789e1a54fe2a12e83e7b1256cfee4501678c93", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -1067,18 +1067,15 @@ extern enum reg_class m68hc11_index_reg_class;\n    local-alloc.c.  */\n \n \n-/* Internal macro, return 1 if REGNO is a valid base register.  */\n-#define REG_VALID_P(REGNO) ((REGNO) >= 0)\n-\n extern unsigned char m68hc11_reg_valid_for_base[FIRST_PSEUDO_REGISTER];\n #define REG_VALID_FOR_BASE_P(REGNO) \\\n-    (REG_VALID_P (REGNO) && (REGNO) < FIRST_PSEUDO_REGISTER \\\n+    ((REGNO) < FIRST_PSEUDO_REGISTER \\\n      && m68hc11_reg_valid_for_base[REGNO])\n \n /* Internal macro, return 1 if REGNO is a valid index register.  */\n extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n #define REG_VALID_FOR_INDEX_P(REGNO) \\\n-    (REG_VALID_P (REGNO) >= 0 && (REGNO) < FIRST_PSEUDO_REGISTER \\\n+    ((REGNO) < FIRST_PSEUDO_REGISTER \\\n      && m68hc11_reg_valid_for_index[REGNO])\n \n /* Internal macro, the nonstrict definition for REGNO_OK_FOR_BASE_P.  */"}, {"sha": "94ec826f005f10ede65953dd42f404ba6056ee1a", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -44,6 +44,7 @@\n #include \"toplev.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"df.h\"\n \n /* Maximum size we are allowed to grow the stack in a single operation.\n    If we want more, we must do it in increments of at most this size.\n@@ -143,7 +144,7 @@ static const char *mcore_strip_name_encoding\t(const char *);\n static int        mcore_const_costs            \t(rtx, RTX_CODE);\n static int        mcore_and_cost               \t(rtx);\n static int        mcore_ior_cost               \t(rtx);\n-static bool       mcore_rtx_costs\t\t(rtx, int, int, int *);\n+static bool       mcore_rtx_costs\t\t(rtx, int, int, int *, bool);\n static void       mcore_external_libcall\t(rtx);\n static bool       mcore_return_in_memory\t(const_tree, const_tree);\n static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,"}, {"sha": "f89e0751c4c90a680376267d004afbdc3752678f", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -1942,7 +1942,7 @@ legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n }\n \n static int\n-mn10300_address_cost_1 (rtx x, int *unsig, bool speed ATTRIBUTE_UNUSED)\n+mn10300_address_cost_1 (rtx x, int *unsig)\n {\n   switch (GET_CODE (x))\n     {\n@@ -1979,7 +1979,7 @@ mn10300_address_cost_1 (rtx x, int *unsig, bool speed ATTRIBUTE_UNUSED)\n     case EXPR_LIST:\n     case SUBREG:\n     case MEM:\n-      return mn10300_address_cost (XEXP (x, 0));\n+      return mn10300_address_cost (XEXP (x, 0), !optimize_size);\n \n     case ZERO_EXTEND:\n       *unsig = 1;"}, {"sha": "5d21430587a86929d1d7e82785e825721cc11ffe", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"df.h\"\n \n /*\n #define FPU_REG_P(X)\t((X)>=8 && (X)<14)\n@@ -376,7 +377,7 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n     if (frame_pointer_needed)\t\t\t\t\t\n     {\t\t\t\t\t\t\t\t\n \t/* hope this is safe - m68k does it also .... */\t\t\n-      df_regs_ever_live_p (FRAME_POINTER_REGNUM) = 0;\t\t\t\n+        df_set_regs_ever_live (FRAME_POINTER_REGNUM, false);\n \t\t\t\t\t\t\t\t\n \tfor (i =7, j = 0 ; i >= 0 ; i--)\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\t\t"}, {"sha": "972c9f72ce19526f4b9e7eb363165ee92c708339", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -39,7 +39,7 @@ extern const char * score_move (rtx *ops);\n extern bool score_unaligned_load (rtx* ops);\n extern bool score_unaligned_store (rtx* ops);\n extern bool score_block_move (rtx* ops);\n-extern int score_address_cost (rtx addr);\n+extern int score_address_cost (rtx addr, bool speed);\n extern rtx score_function_arg (const CUMULATIVE_ARGS *cum,\n                                enum machine_mode mode,\n                                tree type, int named);"}, {"sha": "9d0c7ddd1f3719f479418c61e5cb664cbcad0a2b", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -49,6 +49,7 @@\n #include \"langhooks.h\"\n #include \"score7.h\"\n #include \"score3.h\"\n+#include \"df.h\"\n \n #undef  TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START           score_asm_file_start\n@@ -573,9 +574,9 @@ score_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t\t bool speed ATTRIBUTE_UNUSED)\n {\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_rtx_costs (x, code, outer_code, total);\n+    return score7_rtx_costs (x, code, outer_code, total, speed);\n   else if (TARGET_SCORE3)\n-    return score3_rtx_costs (x, code, outer_code, total);\n+    return score3_rtx_costs (x, code, outer_code, total, speed);\n \n   gcc_unreachable ();\n }"}, {"sha": "4bfaae9504d2e7ad0d07461cace2a9450248c238", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -49,6 +49,7 @@\n #include \"langhooks.h\"\n #include \"cfglayout.h\"\n #include \"score3.h\"\n+#include \"df.h\"\n \n #define BITSET_P(VALUE, BIT)      (((VALUE) & (1L << (BIT))) != 0)\n #define INS_BUF_SZ                128\n@@ -1155,7 +1156,7 @@ score3_rtx_costs (rtx x, int code, int outer_code, int *total,\n \n /* Implement TARGET_ADDRESS_COST macro.  */\n int\n-score3_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+score3_address_cost (rtx addr)\n {\n   return score3_address_insns (addr, SImode);\n }"}, {"sha": "5d507d96c29f71e23ef8ad3e846c8ff909d72014", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -49,6 +49,7 @@\n #include \"langhooks.h\"\n #include \"cfglayout.h\"\n #include \"score7.h\"\n+#include \"df.h\"\n \n #define BITSET_P(VALUE, BIT)      (((VALUE) & (1L << (BIT))) != 0)\n #define INS_BUF_SZ                128\n@@ -1146,8 +1147,7 @@ score7_rtx_costs (rtx x, int code, int outer_code, int *total,\n \n /* Implement TARGET_ADDRESS_COST macro.  */\n int\n-score7_address_cost (rtx addr,\n-\t\t     bool speed ATTRIBUTE_UNUSED)\n+score7_address_cost (rtx addr)\n {\n   return score7_address_insns (addr, SImode);\n }"}, {"sha": "eaece4c1863d2afea7d6caf15a60bd694021d8de", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -126,7 +126,7 @@ static int mem_is_padded_component_ref (rtx x);\n static bool spu_assemble_integer (rtx x, unsigned int size, int aligned_p);\n static void spu_asm_globalize_label (FILE * file, const char *name);\n static unsigned char spu_rtx_costs (rtx x, int code, int outer_code,\n-\t\t\t\t    int *total);\n+\t\t\t\t    int *total, bool speed);\n static unsigned char spu_function_ok_for_sibcall (tree decl, tree exp);\n static void spu_init_libfuncs (void);\n static bool spu_return_in_memory (const_tree type, const_tree fntype);"}, {"sha": "ee72e82e4f90d4ed8984143fc2d3e1337aee3c46", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899cc0f433d06f9cf914224fe6968e391b903c0b/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=899cc0f433d06f9cf914224fe6968e391b903c0b", "patch": "@@ -53,7 +53,7 @@ static bool v850_handle_option       (size_t, const char *, int);\n static void const_double_split       (rtx, HOST_WIDE_INT *, HOST_WIDE_INT *);\n static int  const_costs_int          (HOST_WIDE_INT, int);\n static int  const_costs\t\t     (rtx, enum rtx_code);\n-static bool v850_rtx_costs\t     (rtx, int, int, int *);\n+static bool v850_rtx_costs\t     (rtx, int, int, int *, bool);\n static void substitute_ep_register   (rtx, rtx, int, int, rtx *, rtx *);\n static void v850_reorg\t\t     (void);\n static int  ep_memory_offset         (enum machine_mode, int);"}]}