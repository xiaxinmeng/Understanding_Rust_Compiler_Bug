{"sha": "19bf83a9a068f2d5293b63c9300f99172b2d278d", "node_id": "C_kwDOANBUbNoAKDE5YmY4M2E5YTA2OGYyZDUyOTNiNjNjOTMwMGY5OTE3MmIyZDI3OGQ", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-20T15:19:50Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-24T10:47:05Z"}, "message": "Darwin: Update rules for handling alignment of globals.\n\nThe current rule was too strict and has not been required since Darwin11.\n\nThis relaxes the constraint to allow up to 2^28 alignment for non-common\nentities.  Common is still restricted to a maximum aligment of 2^15.\n\nWhen the host is an older version of Darwin ( earlier that 11 ) then the\nexisting constraint is still applied.  Note that this is a host constraint\nnot a target one (so that a compilation on 10.7 targeting 10.6 is allowed\nto use a greater alignment than the tools on 10.6 support).  This matches\nthe behaviour of clang.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\t* config.gcc: Emit L2_MAX_OFILE_ALIGNMENT with suitable\n\tvalues for the host.\n\t* config/darwin.c (darwin_emit_common): Error for alignment\n\tvalues > 32768.\n\t* config/darwin.h (MAX_OFILE_ALIGNMENT): Rework to use the\n\tconfigured L2_MAX_OFILE_ALIGNMENT.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/darwin-aligned-globals.c: New test.\n\t* gcc.dg/darwin-comm-1.c: New test.\n\t* gcc.dg/attr-aligned.c: Amend for new alignment values on\n\tDarwin.\n\t* gcc.target/i386/pr89261.c: Likewise.", "tree": {"sha": "2413e5caabb730ef387a3dcbe758fff1ba0a35fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2413e5caabb730ef387a3dcbe758fff1ba0a35fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19bf83a9a068f2d5293b63c9300f99172b2d278d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19bf83a9a068f2d5293b63c9300f99172b2d278d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19bf83a9a068f2d5293b63c9300f99172b2d278d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19bf83a9a068f2d5293b63c9300f99172b2d278d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8381075ff3f5f5aefcd7027d7c5136a0e61e654a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8381075ff3f5f5aefcd7027d7c5136a0e61e654a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8381075ff3f5f5aefcd7027d7c5136a0e61e654a"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "294f3123e3823d85264005c5cba7fa691ab92b18", "filename": "gcc/config.gcc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -677,6 +677,20 @@ case ${target} in\n     macos_min=0\n   fi\n   def_ld64=85.2\n+  # Tools hosted on earlier versions of Darwin constrained all object\n+  # alignment to be 2^15 or smaller.  From Darwin11 (macOS 10.7) the\n+  # alignment of non-common is allowed to be up to 2^28.  Note that the\n+  #\u00a0larger alignment is permitted when targeting 10.6 from 10.7 so that\n+  #\u00a0the constraint only need be applied per host (and only if the host\n+  # is Darwin).\n+  case ${host} in\n+      *-*-darwin[4-9]* | *-*-darwin10*)\n+          tm_defines=\"$tm_defines L2_MAX_OFILE_ALIGNMENT=15U\"\n+          ;;\n+      *)\n+          tm_defines=\"$tm_defines L2_MAX_OFILE_ALIGNMENT=28U\"\n+          ;;\n+  esac\n   case ${target} in\n       # Darwin 4 to 19 correspond to macOS 10.0 to 10.15\n       *-*-darwin[4-9]* | *-*-darwin1[0-9]*)"}, {"sha": "5045b68e8afc341441311a5d30280c9352c0acd9", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -2558,7 +2558,6 @@ darwin_emit_common (FILE *fp, const char *name,\n     rounded = (size + (align-1)) & ~(align-1);\n \n   l2align = floor_log2 (align);\n-  gcc_assert (l2align <= L2_MAX_OFILE_ALIGNMENT);\n \n   in_section = comm_section;\n   /* We mustn't allow multiple public symbols to share an address when using\n@@ -2709,6 +2708,10 @@ darwin_asm_output_aligned_decl_common (FILE *fp, tree decl, const char *name,\n #ifdef DEBUG_DARWIN_MEM_ALLOCATORS\n fprintf (fp, \"# adcom: %s (%d,%d) decl=0x0\\n\", name, (int)size, (int)align);\n #endif\n+     /* Common variables are limited to a maximum alignment of 2^15.  */\n+      if (align > 32768)\n+\terror_at (UNKNOWN_LOCATION, \"common variables must have an alignment\"\n+\t\t  \" of 32678 or less\");\n       darwin_emit_common (fp, name, size, align);\n       return;\n     }\n@@ -2736,7 +2739,7 @@ fprintf (fp, \"# adcom: %s (%lld,%d) ro %d cst %d stat %d com %d pub %d\"\n     }\n \n   /* We shouldn't be messing with this if the decl has a section name.  */\n-  gcc_assert (DECL_SECTION_NAME (decl) == NULL);\n+  gcc_checking_assert (DECL_SECTION_NAME (decl) == NULL);\n \n   /* We would rather not have to check this here - but it seems that we might\n      be passed a decl that should be in coalesced space.  */\n@@ -2765,10 +2768,16 @@ fprintf (fp, \"# adcom: %s (%lld,%d) ro %d cst %d stat %d com %d pub %d\"\n \n   l2align = floor_log2 (align / BITS_PER_UNIT);\n   /* Check we aren't asking for more aligment than the platform allows.  */\n-  gcc_assert (l2align <= L2_MAX_OFILE_ALIGNMENT);\n+  gcc_checking_assert (l2align <= L2_MAX_OFILE_ALIGNMENT);\n \n   if (TREE_PUBLIC (decl) != 0)\n-    darwin_emit_common (fp, name, size, align);\n+    {\n+      /* Common variables are limited to a maximum alignment of 2^15.  */\n+      if (l2align > 15)\n+\terror_at (DECL_SOURCE_LOCATION (decl), \"common variables must have\"\n+\t\t  \" an alignment of 32678 or less\");\n+      darwin_emit_common (fp, name, size, align);\n+    }\n   else\n     darwin_emit_local_bss (fp, decl, name, size, l2align);\n }"}, {"sha": "d6f52e7dc3cf884eb0bbcfd045b29a5db2100685", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -873,13 +873,12 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n   if ((LOG) != 0)\t\t\t\\\n     fprintf (FILE, \"\\t%s\\t%d\\n\", ALIGN_ASM_OP, (LOG))\n \n-/* The maximum alignment which the object file format can support in\n-   bits.  For Mach-O, this is 2^15 bytes.  */\n+/* The maximum alignment which the object file format can support in bits\n+   which depends on the OS version and whether the object is a common\n+   variable.  */\n \n #undef\tMAX_OFILE_ALIGNMENT\n-#define MAX_OFILE_ALIGNMENT (0x8000 * 8)\n-\n-#define L2_MAX_OFILE_ALIGNMENT 15\n+#define MAX_OFILE_ALIGNMENT ((1U << L2_MAX_OFILE_ALIGNMENT) * 8U)\n \n /*  These are the three variants that emit referenced blank space.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\"}, {"sha": "a2e11c9618002a291f0a76131e6dc3a932c0fa7c", "filename": "gcc/testsuite/gcc.dg/attr-aligned.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-aligned.c?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -12,8 +12,12 @@\n #  define ALIGN_MAX_STATIC      0x1000\n    /* Excessive alignment for functions and objects with static storage\n       duration that's expected to trigger an error.  */\n-#elif __MACH__\n-#  define ALIGN_MAX_STATIC      0x8000\n+#elif __APPLE__\n+# if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1070\n+#   define ALIGN_MAX_STATIC      0x8000\n+# else\n+#   define ALIGN_MAX_STATIC      ALIGN_MAX_HARD\n+# endif\n #elif pdp11\n #  define ALIGN_MAX_STATIC      2\n /* Work around a pdp11 ICE (see PR target/87821).  */"}, {"sha": "18b71e7e3276713d598cdef4c0600da99ae3ae1a", "filename": "gcc/testsuite/gcc.dg/darwin-aligned-globals.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-aligned-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-aligned-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-aligned-globals.c?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-additional-options \"-fcommon\" } */\n+\n+/* Test alignment rules which differ for earlier hosts (so we must\n+   work on the principle that this test will be exercised by self-\n+   hosted compilers. */\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1070\n+#define align_OK (1ul << 28)\n+#define align_BAD (1ul << 29)\n+#else\n+#define align_OK (1ul << 15)\n+#define align_BAD (1ul << 16)\n+#endif\n+\n+/* All non common vars are allowed larger alignment on modern systems.  */\n+static int xn __attribute__ ((aligned (align_OK)));\n+static int xi __attribute__ ((aligned (align_OK))) = 5  ;\n+int gxi __attribute__ ((aligned (align_OK))) = 6 ;\n+\n+/* test that we detect bad cases.  */\n+static int yn __attribute__ ((aligned (align_BAD))); /* { dg-error {requested alignment .[0-9]+. exceeds object file maximum} } */\n+static int yi __attribute__ ((aligned (align_BAD))) = 5;  /* { dg-error {requested alignment .[0-9]+. exceeds object file maximum} } */\n+int yni __attribute__ ((aligned (align_BAD))) = 6;  /* { dg-error {requested alignment .[0-9]+. exceeds object file maximum} } */"}, {"sha": "46519984fd84f612fb172f6fdca8efa47da9af5b", "filename": "gcc/testsuite/gcc.dg/darwin-comm-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-comm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-comm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-comm-1.c?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target *-*-darwin[912]* } } */\n+/* { dg-options \"-fcommon\" } */\n+\n+/* In all cases, common has a max alignment of 2^15.  */\n+int badcommon __attribute__ ((aligned (65536))); /* { dg-error \"common variables must have an alignment\" } */"}, {"sha": "b599d49fd4887e823af1719bff65347983b8df82", "filename": "gcc/testsuite/gcc.target/i386/pr89261.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89261.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19bf83a9a068f2d5293b63c9300f99172b2d278d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89261.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89261.c?ref=19bf83a9a068f2d5293b63c9300f99172b2d278d", "patch": "@@ -5,6 +5,7 @@\n typedef double __v2df __attribute__ ((vector_size (16), aligned (1 << 28)));\n \n __v2df foo = { 1.0, 2.0 };\n-/* { dg-error {alignment of 'foo' is greater than maximum object file alignment 32768} \"\" { target *-*-darwin* } .-1 } */\n+/* { dg-error {alignment of 'foo' is greater than maximum object file alignment 32768} \"\" { target { *-*-darwin[89]*  *-*-darwin10* } } .-1 } */\n \n /* { dg-final { scan-assembler \"\\.align\\[ \\t]+268435456\" { target { ! *-*-darwin* } } } } */\n+/* { dg-final { scan-assembler \"\\.align\\[ \\t]+28\" { target { *-*-darwin1[1-9]* *-*-darwin2* } } } } */"}]}