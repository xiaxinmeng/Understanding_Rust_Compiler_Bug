{"sha": "f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "node_id": "C_kwDOANBUbNoAKGY4M2U3NmMzZjk5OGM4NzA4ZmUyZGRjYTE2YWUzZjMxN2MzOWMzN2E", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2023-02-18T04:43:34Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2023-02-23T22:31:48Z"}, "message": "xtensa: Eliminate unnecessary general-purpose reg-reg moves\n\nRegister-register move instructions that can be easily seen as\nunnecessary by the human eye may remain in the compiled result.\nFor example:\n\n/* example */\ndouble test(double a, double b) {\n  return __builtin_copysign(a, b);\n}\n\ntest:\n\tadd.n\ta3, a3, a3\n\textui\ta5, a5, 31, 1\n\tssai\t1\n\t\t\t\t;; Be in the same BB\n\tsrc\ta7, a5, a3\t;; Replacing the destination doesn't\n\t\t\t\t;;   violate any constraints of the\n\t\t\t\t;;   operands\n\t\t\t\t;; No CALL insns in this span\n\t\t\t\t;; Both A3 and A7 are irrelevant to\n\t\t\t\t;;   insns in this span\n\tmov.n\ta3, a7\t\t;; An unnecessary reg-reg move\n\t\t\t\t;; A7 is not used after this\n\tret.n\n\nThe last two instructions above, excluding the return instruction,\ncould be done like this:\n\n\tsrc\ta3, a5, a3\n\nThis symptom often occurs when handling DI/DFmode values with SImode\ninstructions.  This patch solves the above problem using peephole2\npattern.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.md: New peephole2 pattern that eliminates\n\tthe occurrence of general-purpose register used only once and for\n\ttransferring intermediate value.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/xtensa/elim_GP_regmove_0.c: New test.\n\t* gcc.target/xtensa/elim_GP_regmove_1.c: New test.", "tree": {"sha": "a943f505b0fc3fb12eceabf102c2d247407b238f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a943f505b0fc3fb12eceabf102c2d247407b238f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e4559305e6f1adaa1b2b59f645d54fd98e5bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e4559305e6f1adaa1b2b59f645d54fd98e5bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e4559305e6f1adaa1b2b59f645d54fd98e5bbe"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "cf25beb83d54a9d4c2371c29c5d2154ef3c0946a", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "patch": "@@ -3050,3 +3050,49 @@ FALLTHRU:;\n   operands[1] = GEN_INT (imm0);\n   operands[2] = GEN_INT (imm1);\n })\n+\n+(define_peephole2\n+  [(set (match_operand 0 \"register_operand\")\n+\t(match_operand 1 \"register_operand\"))]\n+  \"REG_NREGS (operands[0]) == 1 && GP_REG_P (REGNO (operands[0]))\n+   && REG_NREGS (operands[1]) == 1 && GP_REG_P (REGNO (operands[1]))\n+   && peep2_reg_dead_p (1, operands[1])\"\n+  [(const_int 0)]\n+{\n+  basic_block bb = BLOCK_FOR_INSN (curr_insn);\n+  rtx_insn *head = BB_HEAD (bb), *insn;\n+  rtx dest = operands[0], src = operands[1], pattern, t_dest, dest_orig;\n+  for (insn = PREV_INSN (curr_insn);\n+       insn && insn != head;\n+       insn = PREV_INSN (insn))\n+    if (CALL_P (insn))\n+      break;\n+    else if (INSN_P (insn))\n+      {\n+\tif (GET_CODE (pattern = PATTERN (insn)) == SET\n+\t    && REG_P (t_dest = SET_DEST (pattern))\n+\t    && REG_NREGS (t_dest) == 1\n+\t    && REGNO (t_dest) == REGNO (src))\n+\t{\n+\t  dest_orig = SET_DEST (pattern);\n+\t  SET_DEST (pattern) = gen_rtx_REG (GET_MODE (t_dest),\n+\t\t\t\t\t    REGNO (dest));\n+\t  extract_insn (insn);\n+\t  if (!constrain_operands (true, get_enabled_alternatives (insn)))\n+\t    {\n+\t      SET_DEST (pattern) = dest_orig;\n+\t      goto ABORT;\n+\t    }\n+\t  df_insn_rescan (insn);\n+\t  goto FALLTHRU;\n+\t}\n+\tif (reg_overlap_mentioned_p (dest, pattern)\n+\t    || reg_overlap_mentioned_p (src, pattern)\n+\t    || set_of (dest, insn)\n+\t    || set_of (src, insn))\n+\t  break;\n+      }\n+ABORT:\n+  FAIL;\n+FALLTHRU:;\n+})"}, {"sha": "5c195c357dc63c365545a4e96ebf3c6d7b055281", "filename": "gcc/testsuite/gcc.target/xtensa/elim_GP_regmove_0.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_0.c?ref=f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpeephole2\" } */\n+\n+/* can be processed */\n+double test0(double a, double b) {\n+  return __builtin_copysign(a, b);\n+}\n+\n+/* cannot be processed: due to violate '0' constraint of the 2nd source operand.  */\n+int test1(int a, int b) {\n+  int c;\n+  asm volatile (\"\" : \"=a\"(c) : \"r\"(a), \"0\"(b));\n+  return c;\n+}\n+\n+/* cannot be processed: due to violate '&' constraint of the destination operand.  */\n+int test2(int a) {\n+  int b;\n+  asm volatile (\"\" : \"=&a\"(b) : \"r\"(a));\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\t|mov.n\\t\" 2 } } */"}, {"sha": "a13ef818827e5cb47242720800b5f2ebc51df138", "filename": "gcc/testsuite/gcc.target/xtensa/elim_GP_regmove_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e76c3f998c8708fe2ddca16ae3f317c39c37a/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Felim_GP_regmove_1.c?ref=f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpeephole2 -mabi=windowed\" } */\n+\n+/* cannot be processed: due to violate 'a' constraint of the destination operand of the stack adjustment instruction.  */\n+void test(void) {\n+  int buffer[8192];\n+  asm volatile (\"\" : : \"m\"(buffer));\n+}\n+\n+/* { dg-final { scan-assembler-times \"movsp\" 1 } } */"}]}