{"sha": "5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwMjNiYWExZjg0OTZjMWM5YzE1ZjE0ZDYzZTk4MTMzMWQ4ZWEzYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2007-03-23T02:58:46Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2007-03-23T02:58:46Z"}, "message": "error.c (dump_expr): Handle dependent names that designate types.\n\n\t* error.c (dump_expr): Handle dependent names that designate types.\n\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Handle TYPENAME_TYPE.\n\nFrom-SVN: r123148", "tree": {"sha": "284f1f8b157dee2010417f98eb94317715e97b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/284f1f8b157dee2010417f98eb94317715e97b9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecee68026b5c9005dfb0c351fa1c5edcf44340fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecee68026b5c9005dfb0c351fa1c5edcf44340fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecee68026b5c9005dfb0c351fa1c5edcf44340fa"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "2a381230426d8c6aead1e62b88b9d20351ce3171", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "patch": "@@ -1,3 +1,8 @@\n+2007-03-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (dump_expr): Handle dependent names that designate types.\n+\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Handle TYPENAME_TYPE.\n+\n 2007-03-17  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cp-tree.def, parser.c, pt.c: Fix comment typos."}, {"sha": "ac75e1def8ef82b9b8360667eacf31b3b856a3b6", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "patch": "@@ -129,7 +129,9 @@ pp_cxx_template_id (cxx_pretty_printer *pp, tree t)\n   pp_cxx_end_template_argument_list (pp);\n }\n \n-/* unqualified-id:\n+/* Prints the unqualified part of the id-expression T.\n+\n+   unqualified-id:\n      identifier\n      operator-function-id\n      conversion-function-id\n@@ -204,6 +206,10 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n       pp_cxx_unqualified_id (pp, TEMPLATE_PARM_DECL (t));\n       break;\n \n+    case TYPENAME_TYPE:\n+      pp_cxx_unqualified_id (pp, TYPE_NAME (t));\n+      break;\n+\n     default:\n       pp_unsupported_tree (pp, t);\n       break;"}, {"sha": "27bcecf9ee477c54672ec59c976034975b351696", "filename": "gcc/cp/error.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "patch": "@@ -1987,6 +1987,24 @@ dump_expr (tree t, int flags)\n       pp_cxx_identifier (cxx_pp, \"...\");\n       break;\n \n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case ENUMERAL_TYPE:\n+    case REAL_TYPE:\n+    case VOID_TYPE:\n+    case BOOLEAN_TYPE:\n+    case INTEGER_TYPE:\n+    case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n+      pp_type_specifier_seq (cxx_pp, t);\n+      break;\n+\n+    case TYPENAME_TYPE:\n+      /* We get here when we want to print a dependent type as an\n+         id-expression, without any disambiguator decoration.  */\n+      pp_id_expression (cxx_pp, t);\n+      break;\n+\n       /*  This list is incomplete, but should suffice for now.\n \t  It is very important that `sorry' does not call\n \t  `report_error_function'.  That could cause an infinite loop.  */"}, {"sha": "41e7b52f9809d3f0a232c954a1721dee297eb658", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a023baa1f8496c1c9c15f14d63e981331d8ea3a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5a023baa1f8496c1c9c15f14d63e981331d8ea3a", "patch": "@@ -2054,26 +2054,26 @@ cp_parser_name_lookup_error (cp_parser* parser,\n   if (decl == error_mark_node)\n     {\n       if (parser->scope && parser->scope != global_namespace)\n-\terror (\"%<%D::%D%> has not been declared\",\n+\terror (\"%<%E::%E%> has not been declared\",\n \t       parser->scope, name);\n       else if (parser->scope == global_namespace)\n-\terror (\"%<::%D%> has not been declared\", name);\n+\terror (\"%<::%E%> has not been declared\", name);\n       else if (parser->object_scope\n \t       && !CLASS_TYPE_P (parser->object_scope))\n-\terror (\"request for member %qD in non-class type %qT\",\n+\terror (\"request for member %qE in non-class type %qT\",\n \t       name, parser->object_scope);\n       else if (parser->object_scope)\n-\terror (\"%<%T::%D%> has not been declared\",\n+\terror (\"%<%T::%E%> has not been declared\",\n \t       parser->object_scope, name);\n       else\n-\terror (\"%qD has not been declared\", name);\n+\terror (\"%qE has not been declared\", name);\n     }\n   else if (parser->scope && parser->scope != global_namespace)\n-    error (\"%<%D::%D%> %s\", parser->scope, name, desired);\n+    error (\"%<%E::%E%> %s\", parser->scope, name, desired);\n   else if (parser->scope == global_namespace)\n-    error (\"%<::%D%> %s\", name, desired);\n+    error (\"%<::%E%> %s\", name, desired);\n   else\n-    error (\"%qD %s\", name, desired);\n+    error (\"%qE %s\", name, desired);\n }\n \n /* If we are parsing tentatively, remember that an error has occurred\n@@ -12176,7 +12176,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t    /*only_current_p=*/false);\n \t      /* If that failed, the declarator is invalid.  */\n \t      if (type == error_mark_node)\n-\t\terror (\"%<%T::%D%> is not a type\",\n+\t\terror (\"%<%T::%E%> is not a type\",\n \t\t       TYPE_CONTEXT (qualifying_scope),\n \t\t       TYPE_IDENTIFIER (qualifying_scope));\n \t      qualifying_scope = type;"}]}