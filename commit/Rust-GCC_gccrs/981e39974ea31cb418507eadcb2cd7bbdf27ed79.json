{"sha": "981e39974ea31cb418507eadcb2cd7bbdf27ed79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxZTM5OTc0ZWEzMWNiNDE4NTA3ZWFkY2IyY2Q3YmJkZjI3ZWQ3OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-04T09:29:31Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-04T09:29:31Z"}, "message": "[Fortran] Fix column of %C diagnostic location\n\n        gcc/fortran/\n        * error (error_print, gfc_format_decoder): Fix off-by one issue with %C.\n\n        gcc/testsuite/\n        * gfortran.dg/use_without_only_1.f90: Update column num in dg-warning.\n\nFrom-SVN: r276567", "tree": {"sha": "0eea74af953348c7b5648931da79306b8a12f9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eea74af953348c7b5648931da79306b8a12f9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/981e39974ea31cb418507eadcb2cd7bbdf27ed79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981e39974ea31cb418507eadcb2cd7bbdf27ed79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981e39974ea31cb418507eadcb2cd7bbdf27ed79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981e39974ea31cb418507eadcb2cd7bbdf27ed79/comments", "author": null, "committer": null, "parents": [{"sha": "48528394eafa9d1db9f956570f910c76d429a3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48528394eafa9d1db9f956570f910c76d429a3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48528394eafa9d1db9f956570f910c76d429a3e5"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "196b40b950cb16f64a89bcefa727c00f8003b84a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=981e39974ea31cb418507eadcb2cd7bbdf27ed79", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* error (error_print, gfc_format_decoder): Fix off-by one issue with %C.\n+\n 2019-10-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91497\n@@ -54,7 +58,7 @@\n \tmessages instead of the original call to gfc_typename.\n \t* misc.c (gfc_typename): New function for gfc_expr *, use for where\n \tcharacter types are possible it can get the character length from\n-        gfc_expr for character literals.\n+\tgfc_expr for character literals.\n \t(gfc_dummy_typename): New functionfor gfc_typespec *, if no character\n \tlength is present the character type is assumed and the appropriate \n \tstring is return otherwise it calls gfc_typename for gfc_typespec *.\n@@ -88,10 +92,10 @@\n \ta subroutine reference.\n \t* resolve.c (resolve_function): BOZ cannot be an actual argument in\n \ta function reference.\n- \n+\n 2019-10-01  Jan Hubicka  <jh@suse.cz>\n \n-\t* module.c (load_commons): Initialize flags to 0 to silecne\n+\t* module.c (load_commons): Initialize flags to 0 to silence\n \t-Wmaybe-uninitialized warning.\n \t(read_module): Likewise for n and comp_name.\n "}, {"sha": "1019f17d73cd661545bbb762b82910812d6ce673", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=981e39974ea31cb418507eadcb2cd7bbdf27ed79", "patch": "@@ -618,12 +618,18 @@ error_print (const char *type, const char *format0, va_list argp)\n \t      {\n \t\tl2 = loc;\n \t\targ[pos].u.stringval = \"(2)\";\n+\t\t/* Point %C first offending character not the last good one. */\n+\t\tif (arg[pos].type == TYPE_CURRENTLOC)\n+\t\t  l2->nextc++;\n \t      }\n \t    else\n \t      {\n \t\tl1 = loc;\n \t\thave_l1 = 1;\n \t\targ[pos].u.stringval = \"(1)\";\n+\t\t/* Point %C first offending character not the last good one. */\n+\t\tif (arg[pos].type == TYPE_CURRENTLOC)\n+\t\t  l1->nextc++;\n \t      }\n \t    break;\n \n@@ -963,6 +969,9 @@ gfc_format_decoder (pretty_printer *pp, text_info *text, const char *spec,\n \t  loc = va_arg (*text->args_ptr, locus *);\n \tgcc_assert (loc->nextc - loc->lb->line >= 0);\n \tunsigned int offset = loc->nextc - loc->lb->line;\n+\tif (*spec == 'C')\n+\t  /* Point %C first offending character not the last good one. */\n+\t  offset++;\n \t/* If location[0] != UNKNOWN_LOCATION means that we already\n \t   processed one of %C/%L.  */\n \tint loc_num = text->get_location (0) == UNKNOWN_LOCATION ? 0 : 1;\n@@ -1401,7 +1410,7 @@ gfc_internal_error (const char *gmsgid, ...)\n void\n gfc_clear_error (void)\n {\n-  error_buffer.flag = 0;\n+  error_buffer.flag = false;\n   warnings_not_errors = false;\n   gfc_clear_pp_buffer (pp_error_buffer);\n }"}, {"sha": "b8c9f4cd663c9dbe0358aa06fe1fab1ecd046358", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=981e39974ea31cb418507eadcb2cd7bbdf27ed79", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/use_without_only_1.f90: Update column num in dg-warning.\n+\n 2019-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71504"}, {"sha": "ad64b206b7673e068117505da7d46fecde2d2186", "filename": "gcc/testsuite/gfortran.dg/use_without_only_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981e39974ea31cb418507eadcb2cd7bbdf27ed79/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90?ref=981e39974ea31cb418507eadcb2cd7bbdf27ed79", "patch": "@@ -6,16 +6,16 @@ MODULE foo\n END MODULE\n \n MODULE testmod\n-  USE foo ! { dg-warning \"6:has no ONLY qualifier\" }\n+  USE foo ! { dg-warning \"7:has no ONLY qualifier\" }\n   IMPLICIT NONE\n CONTAINS\n   SUBROUTINE S1\n-     USE foo ! { dg-warning \"9:has no ONLY qualifier\" }\n+     USE foo ! { dg-warning \"10:has no ONLY qualifier\" }\n   END SUBROUTINE S1\n   SUBROUTINE S2\n      USE foo, ONLY: bar \n   END SUBROUTINE\n   SUBROUTINE S3\n-     USE ISO_C_BINDING ! { dg-warning \"9:has no ONLY qualifier\" }\n+     USE ISO_C_BINDING ! { dg-warning \"10:has no ONLY qualifier\" }\n   END SUBROUTINE S3\n END MODULE"}]}