{"sha": "5ce0e197751a14209bb632fb8b5ed6375376de38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlMGUxOTc3NTFhMTQyMDliYjYzMmZiOGI1ZWQ2Mzc1Mzc2ZGUzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-04T13:57:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-04T13:57:27Z"}, "message": "re PR middle-end/35456 (Different results for inlined vs. non-inlined function)\n\n\tPR middle-end/35456\n\t* fold-const.c (fold_cond_expr_with_comparison): Prevent\n\ttransformations for modes that have signed zeros.\n\t* ifcvt.c (noce_try_abs): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR middle-end/35456\n\t* gcc.c-torture/execute/pr35456.c: New test.\n\nFrom-SVN: r132863", "tree": {"sha": "2b0fdb445e4a37df145f47915302d260202d1164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0fdb445e4a37df145f47915302d260202d1164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce0e197751a14209bb632fb8b5ed6375376de38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce0e197751a14209bb632fb8b5ed6375376de38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce0e197751a14209bb632fb8b5ed6375376de38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce0e197751a14209bb632fb8b5ed6375376de38/comments", "author": null, "committer": null, "parents": [{"sha": "e0898f4cedf01f4f96da684d329e35805a76d32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0898f4cedf01f4f96da684d329e35805a76d32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0898f4cedf01f4f96da684d329e35805a76d32d"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "4cbddb63a1c922075e158655b69f5e15d221c24b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ce0e197751a14209bb632fb8b5ed6375376de38", "patch": "@@ -1,3 +1,10 @@\n+2008-03-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/35456\n+\t* fold-const.c (fold_cond_expr_with_comparison): Prevent\n+\ttransformations for modes that have signed zeros.\n+\t* ifcvt.c (noce_try_abs): Ditto.\n+\n 2008-03-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/i386.c (override_options): Force\n@@ -251,7 +258,8 @@\n \tstruct rdg_vertex_info, rdg_vertex_for_stmt): New.\n \t(create_rdg_edge_for_ddr, create_rdg_vertices): Cleaned up.\n \t(stmts_from_loop): Skip LABEL_EXPR.\n-\t(hash_stmt_vertex_info, eq_stmt_vertex_info, hash_stmt_vertex_del): New.\n+\t(hash_stmt_vertex_info, eq_stmt_vertex_info, hash_stmt_vertex_del):\n+\tNew.\n \t(build_rdg): Initialize rdg->indices htab.\n \t(free_rdg, stores_from_loop, ref_base_address,\n \trdg_defs_used_in_other_loops_p, have_similar_memory_accesses,\n@@ -260,7 +268,8 @@\n \t* tree-data-ref.h: Depend on tree-chrec.h.\n \t(debug_data_dependence_relations, free_data_ref): Declared.\n \t(same_access_functions): ... here.\n-\t(ddr_is_anti_dependent, ddrs_have_anti_deps, ddr_dependence_level): New.\n+\t(ddr_is_anti_dependent, ddrs_have_anti_deps, ddr_dependence_level):\n+\tNew.\n \t(struct rdg_vertex): Add has_mem_write and has_mem_reads.\n \t(RDGV_HAS_MEM_WRITE, RDGV_HAS_MEM_READS, RDG_STMT,\n \tRDG_MEM_WRITE_STMT, RDG_MEM_READS_STMT): New.\n@@ -270,7 +279,8 @@\n \t(struct rdg_edge): Add level.\n \t(RDGE_LEVEL): New.\n \t(free_rdg, stores_from_loop, remove_similar_memory_refs,\n-\trdg_defs_used_in_other_loops_p, have_similar_memory_accesses): Declared.\n+\trdg_defs_used_in_other_loops_p, have_similar_memory_accesses):\n+\tDeclared.\n \t(rdg_has_similar_memory_accesses): New.\n \t* tree-vect-analyze.c: Remove unused static decls.\n \t* lambda.h (dependence_level): New."}, {"sha": "f6466f7a8301943375014f6f0a46b67ddba4d367", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5ce0e197751a14209bb632fb8b5ed6375376de38", "patch": "@@ -5072,9 +5072,10 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \n      Note that all these transformations are correct if A is\n      NaN, since the two alternatives (A and -A) are also NaNs.  */\n-  if ((FLOAT_TYPE_P (TREE_TYPE (arg01))\n-       ? real_zerop (arg01)\n-       : integer_zerop (arg01))\n+  if (!HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n+      && (FLOAT_TYPE_P (TREE_TYPE (arg01))\n+\t  ? real_zerop (arg01)\n+\t  : integer_zerop (arg01))\n       && ((TREE_CODE (arg2) == NEGATE_EXPR\n \t   && operand_equal_p (TREE_OPERAND (arg2, 0), arg1, 0))\n \t     /* In the case that A is of the form X-Y, '-A' (arg2) may\n@@ -5127,7 +5128,8 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n      both transformations are correct when A is NaN: A != 0\n      is then true, and A == 0 is false.  */\n \n-  if (integer_zerop (arg01) && integer_zerop (arg2))\n+  if (!HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n+      && integer_zerop (arg01) && integer_zerop (arg2))\n     {\n       if (comp_code == NE_EXPR)\n \treturn pedantic_non_lvalue (fold_convert (type, arg1));\n@@ -5161,7 +5163,8 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n      a number and A is not.  The conditions in the original\n      expressions will be false, so all four give B.  The min()\n      and max() versions would give a NaN instead.  */\n-  if (operand_equal_for_comparison_p (arg01, arg2, arg00)\n+  if (!HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n+      && operand_equal_for_comparison_p (arg01, arg2, arg00)\n       /* Avoid these transformations if the COND_EXPR may be used\n \t as an lvalue in the C++ front-end.  PR c++/19199.  */\n       && (in_gimple_form"}, {"sha": "cab4fbdf6b143a9b10c22ae2ce67f3879d84e056", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=5ce0e197751a14209bb632fb8b5ed6375376de38", "patch": "@@ -1738,6 +1738,10 @@ noce_try_abs (struct noce_if_info *if_info)\n   rtx cond, earliest, target, seq, a, b, c;\n   int negate;\n \n+  /* Reject modes with signed zeros.  */\n+  if (HONOR_SIGNED_ZEROS (GET_MODE (if_info->x)))\n+    return FALSE;\n+\n   /* Recognize A and B as constituting an ABS or NABS.  The canonical\n      form is a branch around the negation, taken when the object is the\n      first operand of a comparison against 0 that evaluates to true.  */"}, {"sha": "7b62ebf98a3261a97436890e71d3d2e23a8bf7f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ce0e197751a14209bb632fb8b5ed6375376de38", "patch": "@@ -1,3 +1,8 @@\n+2008-03-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/35456\n+\t* gcc.c-torture/execute/pr35456.c: New test.\n+\n 2008-03-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/i386/sse-10.c: Don't use"}, {"sha": "175a0b2abfa561a5a76e4a54ecd9104e89bdb753", "filename": "gcc/testsuite/gcc.c-torture/execute/pr35456.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr35456.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce0e197751a14209bb632fb8b5ed6375376de38/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr35456.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr35456.c?ref=5ce0e197751a14209bb632fb8b5ed6375376de38", "patch": "@@ -0,0 +1,21 @@\n+extern void abort (void);\n+\n+double\n+__attribute__ ((noinline))\n+not_fabs (double x)\n+{\n+  return x >= 0.0 ? x : -x;\n+}\n+\n+int main()\n+{\n+  double x = -0.0;\n+  double y;\n+\n+  y = not_fabs (x);\n+\n+  if (!__builtin_signbit (y))\n+    abort();\n+\n+  return 0;\n+}"}]}