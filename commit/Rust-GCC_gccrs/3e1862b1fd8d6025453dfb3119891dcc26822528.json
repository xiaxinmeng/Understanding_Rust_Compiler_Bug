{"sha": "3e1862b1fd8d6025453dfb3119891dcc26822528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxODYyYjFmZDhkNjAyNTQ1M2RmYjMxMTk4OTFkY2MyNjgyMjUyOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-10-20T14:13:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T14:13:02Z"}, "message": "sem_ch13.adb: Improve error recovery on illegal aspect.\n\n2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Improve error recovery on illegal aspect.\n\nFrom-SVN: r216472", "tree": {"sha": "ae95ee54c603974a35cb1beecc37ac02d9c6cffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae95ee54c603974a35cb1beecc37ac02d9c6cffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e1862b1fd8d6025453dfb3119891dcc26822528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1862b1fd8d6025453dfb3119891dcc26822528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1862b1fd8d6025453dfb3119891dcc26822528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1862b1fd8d6025453dfb3119891dcc26822528/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "f22d38bbd96376c39d1f41693bf2c34c4f678dfd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1862b1fd8d6025453dfb3119891dcc26822528/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1862b1fd8d6025453dfb3119891dcc26822528/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e1862b1fd8d6025453dfb3119891dcc26822528", "patch": "@@ -1,3 +1,7 @@\n+2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Improve error recovery on illegal aspect.\n+\n 2014-10-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* set_targ.adb (Write_Target_Dependent_Values, Write_Line):"}, {"sha": "8b716f47584b9f6fa6bb5b36968c80bcc6dfdc21", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1862b1fd8d6025453dfb3119891dcc26822528/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1862b1fd8d6025453dfb3119891dcc26822528/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3e1862b1fd8d6025453dfb3119891dcc26822528", "patch": "@@ -1119,33 +1119,39 @@ package body Sem_Ch13 is\n                case A_Id is\n \n                   --  For aspects whose expression is an optional Boolean, make\n-                  --  the corresponding pragma at the freezing point.\n+                  --  the corresponding pragma at the freeze point.\n \n-               when Boolean_Aspects      |\n-                    Library_Unit_Aspects =>\n-                  Make_Pragma_From_Boolean_Aspect (ASN);\n+                  when Boolean_Aspects      |\n+                       Library_Unit_Aspects =>\n+                     Make_Pragma_From_Boolean_Aspect (ASN);\n \n                   --  Special handling for aspects that don't correspond to\n                   --  pragmas/attributes.\n \n-               when Aspect_Default_Value           |\n-                    Aspect_Default_Component_Value =>\n-                  Analyze_Aspect_Default_Value (ASN);\n+                  when Aspect_Default_Value           |\n+                       Aspect_Default_Component_Value =>\n+                     Analyze_Aspect_Default_Value (ASN);\n \n                   --  Ditto for iterator aspects, because the corresponding\n                   --  attributes may not have been analyzed yet.\n \n-               when Aspect_Constant_Indexing |\n-                    Aspect_Variable_Indexing |\n-                    Aspect_Default_Iterator  |\n-                    Aspect_Iterator_Element  =>\n-                  Analyze (Expression (ASN));\n+                  when Aspect_Constant_Indexing |\n+                       Aspect_Variable_Indexing |\n+                       Aspect_Default_Iterator  |\n+                       Aspect_Iterator_Element  =>\n+                     Analyze (Expression (ASN));\n \n-               when Aspect_Iterable =>\n-                  Validate_Iterable_Aspect (E, ASN);\n+                     if Etype (Expression (ASN)) = Any_Type then\n+                        Error_Msg_NE\n+                          (\"\\aspect must be fully defined before & is frozen\",\n+                           ASN, E);\n+                     end if;\n \n-               when others =>\n-                  null;\n+                  when Aspect_Iterable =>\n+                     Validate_Iterable_Aspect (E, ASN);\n+\n+                  when others =>\n+                     null;\n                end case;\n \n                Ritem := Aspect_Rep_Item (ASN);\n@@ -3901,13 +3907,19 @@ package body Sem_Ch13 is\n             Ctrl := Etype (First_Formal (Subp));\n          end if;\n \n+         --  Type of formal may be the class-wide type, an access to such,\n+         --  or an incomplete view.\n+\n          if Ctrl = Ent\n            or else Ctrl = Class_Wide_Type (Ent)\n            or else\n              (Ekind (Ctrl) = E_Anonymous_Access_Type\n                and then (Designated_Type (Ctrl) = Ent\n                            or else\n                          Designated_Type (Ctrl) = Class_Wide_Type (Ent)))\n+           or else\n+             (Ekind (Ctrl) = E_Incomplete_Type\n+               and then Full_View (Ctrl) = Ent)\n          then\n             null;\n          else"}]}