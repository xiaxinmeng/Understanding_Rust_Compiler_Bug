{"sha": "021d6d542527de8cb266c098f36aa1b3e3675ea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxZDZkNTQyNTI3ZGU4Y2IyNjZjMDk4ZjM2YWExYjNlMzY3NWVhNw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim.kuvyrkov@linaro.org", "date": "2021-07-02T14:15:35Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "maxim.kuvyrkov@linaro.org", "date": "2021-07-02T14:41:21Z"}, "message": "Add description of how testsuite parallelization works\n\n... for the benefit of the next poor soul who will need to debug it.\n\n\tgcc/testsuite/\n\t* lib/gcc-defs.exp: Add a comment.", "tree": {"sha": "9d1df8ec925b51cbeb610f6cc2f4f28fd604e984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1df8ec925b51cbeb610f6cc2f4f28fd604e984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021d6d542527de8cb266c098f36aa1b3e3675ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021d6d542527de8cb266c098f36aa1b3e3675ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021d6d542527de8cb266c098f36aa1b3e3675ea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021d6d542527de8cb266c098f36aa1b3e3675ea7/comments", "author": {"login": "maxim-kuvyrkov", "id": 12545699, "node_id": "MDQ6VXNlcjEyNTQ1Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/12545699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim-kuvyrkov", "html_url": "https://github.com/maxim-kuvyrkov", "followers_url": "https://api.github.com/users/maxim-kuvyrkov/followers", "following_url": "https://api.github.com/users/maxim-kuvyrkov/following{/other_user}", "gists_url": "https://api.github.com/users/maxim-kuvyrkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim-kuvyrkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim-kuvyrkov/subscriptions", "organizations_url": "https://api.github.com/users/maxim-kuvyrkov/orgs", "repos_url": "https://api.github.com/users/maxim-kuvyrkov/repos", "events_url": "https://api.github.com/users/maxim-kuvyrkov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim-kuvyrkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maxim-kuvyrkov", "id": 12545699, "node_id": "MDQ6VXNlcjEyNTQ1Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/12545699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim-kuvyrkov", "html_url": "https://github.com/maxim-kuvyrkov", "followers_url": "https://api.github.com/users/maxim-kuvyrkov/followers", "following_url": "https://api.github.com/users/maxim-kuvyrkov/following{/other_user}", "gists_url": "https://api.github.com/users/maxim-kuvyrkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim-kuvyrkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim-kuvyrkov/subscriptions", "organizations_url": "https://api.github.com/users/maxim-kuvyrkov/orgs", "repos_url": "https://api.github.com/users/maxim-kuvyrkov/repos", "events_url": "https://api.github.com/users/maxim-kuvyrkov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim-kuvyrkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6fef2e1b6d7e8cea0c0489496cc8f96391200c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fef2e1b6d7e8cea0c0489496cc8f96391200c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fef2e1b6d7e8cea0c0489496cc8f96391200c6"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "d17308d0f8674330ba2726dcedd5afe47dbefcb6", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021d6d542527de8cb266c098f36aa1b3e3675ea7/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021d6d542527de8cb266c098f36aa1b3e3675ea7/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=021d6d542527de8cb266c098f36aa1b3e3675ea7", "patch": "@@ -176,6 +176,40 @@ if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\\n     global gcc_runtest_parallelize_dir\n     global gcc_runtest_parallelize_last\n \n+    # GCC testsuite is parallelised by starting N runtest processes -- each\n+    # with its own test directory.  These N runtest processes ALL go through\n+    # the relevant .exp and ALL attempt to run every test.  And they go\n+    # through the tests the same order -- this is important, and if there is\n+    # a bug that causes different runtest processes to enumerate the tests\n+    # differently, then things will break and some tests will be skipped, while\n+    # others will be ran several times.\n+    # So, just before a runtest processes runs a specific test it asks\n+    # \"runtest_file_p\" routine whether a particular test is part of\n+    # the requested testsuite.  We override this function so that it\n+    # returns \"yes\" to the first-arrived runtest process, and \"no\" to all\n+    # subsequent runtest processes -- this is implemented by creating a marker\n+    # file, which persist till the end of the test run.  We optimize this\n+    # a bit by batching 10 tests and using a single marker file for the batch.\n+    #\n+    # Note that the runtest processes all race each other to get to the next\n+    # test batch.  This means that batch allocation between testsuite runs\n+    # is very likely to change.\n+    #\n+    # To confirm or deny suspicion that tests are skipped or executed\n+    # multiple times due to runtest processes enumerating tests differently ...\n+    # 1. Uncomment the three below \"verbose -log gcc_parallel_test_run_p ...\"\n+    #    debug print-outs.\n+    # 2. Run the testsuite with \"-v\" added to RUNTESTFLAGS\n+    # 3. Extract debug print-outs with something like:\n+    #    for i in $(find -name \"*.log.sep\"); do\n+    #      grep gcc_parallel_test_run_p $i \\\n+    #        | sed -e \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\)/\\3 \\2/\" \\\n+    #        | sed -e \"s#\\(/testsuite/[a-z+]*\\)[0-9]*/#\\1N/#\" > $i.order\n+    #    done\n+    # 4. Compare debug print-outs produced by individual runtest processes:\n+    #    find -name \"*.log.sep.order\" | xargs md5sum | sort\n+    # 5. Check that MD5 hashes of all .order files of the same testsuite match\n+    #    and investigate if they don't.\n     set gcc_runtest_parallelize_counter 0\n     set gcc_runtest_parallelize_counter_minor 0\n     set gcc_runtest_parallelize_enable 1"}]}