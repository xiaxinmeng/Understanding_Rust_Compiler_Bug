{"sha": "acc3b6d90a6f069f15d57ae28d82262809d9d8bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjM2I2ZDkwYTZmMDY5ZjE1ZDU3YWUyOGQ4MjI2MjgwOWQ5ZDhiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-15T13:49:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-15T13:49:58Z"}, "message": "(pushdi): Allow \"i\" for operand 1.\n\n(extendqidi2): Improve 68000 code generation.\n(adddi_lshrdi_63): New pattern.\n\nFrom-SVN: r10988", "tree": {"sha": "7c9a954ccbd74bb46cbcb3b98fe35164904005a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c9a954ccbd74bb46cbcb3b98fe35164904005a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc3b6d90a6f069f15d57ae28d82262809d9d8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc3b6d90a6f069f15d57ae28d82262809d9d8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc3b6d90a6f069f15d57ae28d82262809d9d8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc3b6d90a6f069f15d57ae28d82262809d9d8bc/comments", "author": null, "committer": null, "parents": [{"sha": "046693f3e17162bce2075311e697c180563895c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046693f3e17162bce2075311e697c180563895c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046693f3e17162bce2075311e697c180563895c2"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "e8f58075d3ef98d7cee175f7d18d228130c3530b", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc3b6d90a6f069f15d57ae28d82262809d9d8bc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc3b6d90a6f069f15d57ae28d82262809d9d8bc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=acc3b6d90a6f069f15d57ae28d82262809d9d8bc", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Motorola 68000 Version\n-;;  Copyright (C) 1987, 1988, 1993, 1994, 1995 Free Software Foundation, Inc.\n+;;  Copyright (C) 1987, 88, 93, 94, 95, 1996 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -269,9 +269,9 @@\n   return output_move_double (operands);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"pushdi\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=m\")\n-\t(match_operand:DI 1 \"general_operand\" \"ro<>Fy\"))]\n+\t(match_operand:DI 1 \"general_operand\" \"ro<>Fyi\"))]\n   \"\"\n   \"*\n {\n@@ -1624,7 +1624,7 @@\n   if (TARGET_68020)\n     return \\\"move%.b %1,%2\\;extb%.l %2\\;smi %0\\;extb%.l %0\\\";\n   else\n-    return \\\"move%.b %1,%2\\;ext%.w %0\\;ext%.l %2\\;smi %0\\;ext%.w %0\\;ext%.l %0\\\";\n+    return \\\"move%.b %1,%2\\;ext%.w %0\\;ext%.l %2\\;move%.l %2,%0\\;smi %0\\\";\n }\")\n \n (define_insn \"extendhidi2\"\n@@ -1980,6 +1980,40 @@\n \f\n ;; add instructions\n \n+(define_insn \"adddi_lshrdi_63\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=d\")\n+    (plus:DI (lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"rm\")\n+            (const_int 63))\n+        (match_dup 1)))\n+   (clobber (match_scratch:SI 2 \"=d\"))]\n+  \"\"\n+  \"*\n+{\n+  operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  if (REG_P (operands[1]) && REGNO (operands[1]) == REGNO (operands[0]))\n+    return\n+    \\\"move%.l %1,%2\\;add%.l %2,%2\\;subx%.l %2,%2\\;sub%.l %2,%3\\;subx%.l %2,%0\\\";\n+  if (GET_CODE (operands[1]) == REG)\n+    operands[4] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+  else if (GET_CODE (XEXP (operands[1], 0)) == POST_INC\n+        || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n+    operands[4] = operands[1];\n+  else\n+    operands[4] = adj_offsettable_operand (operands[1], 4);\n+  if (GET_CODE (operands[1]) == MEM\n+   && GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n+    output_asm_insn (\\\"move%.l %4,%3\\\", operands);\n+  output_asm_insn (\\\"move%.l %1,%0\\;smi %2\\\", operands);\n+  if (TARGET_68020)\n+    output_asm_insn (\\\"extb%.l %2\\\", operands);\n+  else\n+    output_asm_insn (\\\"ext%.w %2\\;ext%.l %2\\\", operands);\n+  if (GET_CODE (operands[1]) != MEM\n+   || GET_CODE (XEXP (operands[1], 0)) != PRE_DEC)\n+    output_asm_insn (\\\"move%.l %4,%3\\\", operands);\n+  return \\\"sub%.l %2,%3\\;subx%.l %2,%0\\\";\n+}\")\n+\n (define_insn \"adddia_sexthishl32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"+a\")\n     (plus:DI (ashift:DI (sign_extend:DI"}]}