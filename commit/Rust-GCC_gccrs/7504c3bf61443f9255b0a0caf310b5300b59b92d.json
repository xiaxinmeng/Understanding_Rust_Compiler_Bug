{"sha": "7504c3bf61443f9255b0a0caf310b5300b59b92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwNGMzYmY2MTQ0M2Y5MjU1YjBhMGNhZjMxMGI1MzAwYjU5YjkyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-17T20:22:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-17T20:22:50Z"}, "message": "re PR sanitizer/85230 (asan: false positives in kernel on allocas)\n\n\tPR sanitizer/85230\n\t* asan.c (handle_builtin_stack_restore): Adjust comment.  Emit\n\t__asan_allocas_unpoison call and last_alloca_addr = new_sp before\n\t__builtin_stack_restore rather than after it.\n\t* builtins.c (expand_asan_emit_allocas_unpoison): Pass\n\targ1 + (virtual_dynamic_stack_rtx - stack_pointer_rtx) as second\n\targument instead of virtual_dynamic_stack_rtx.\n\nFrom-SVN: r259446", "tree": {"sha": "939b6b49b4bfab6a1d9f681469b8ac2b360bfc9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939b6b49b4bfab6a1d9f681469b8ac2b360bfc9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7504c3bf61443f9255b0a0caf310b5300b59b92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7504c3bf61443f9255b0a0caf310b5300b59b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7504c3bf61443f9255b0a0caf310b5300b59b92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7504c3bf61443f9255b0a0caf310b5300b59b92d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa4ec2cdff98cdeec085fa14af4267a51e4e1052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4ec2cdff98cdeec085fa14af4267a51e4e1052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4ec2cdff98cdeec085fa14af4267a51e4e1052"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "cce4d3ddb9b7cdee0767004ec496952910dc9f17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7504c3bf61443f9255b0a0caf310b5300b59b92d", "patch": "@@ -1,3 +1,13 @@\n+2018-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/85230\n+\t* asan.c (handle_builtin_stack_restore): Adjust comment.  Emit\n+\t__asan_allocas_unpoison call and last_alloca_addr = new_sp before\n+\t__builtin_stack_restore rather than after it.\n+\t* builtins.c (expand_asan_emit_allocas_unpoison): Pass\n+\targ1 + (virtual_dynamic_stack_rtx - stack_pointer_rtx) as second\n+\targument instead of virtual_dynamic_stack_rtx.\n+\n 2018-04-17  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_builtin_is_supported_p):"}, {"sha": "e71ab2cc710f572bb4324784f4e203228dc85273", "filename": "gcc/asan.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=7504c3bf61443f9255b0a0caf310b5300b59b92d", "patch": "@@ -554,14 +554,14 @@ get_last_alloca_addr ()\n   return last_alloca_addr;\n }\n \n-/* Insert __asan_allocas_unpoison (top, bottom) call after\n+/* Insert __asan_allocas_unpoison (top, bottom) call before\n    __builtin_stack_restore (new_sp) call.\n    The pseudocode of this routine should look like this:\n-     __builtin_stack_restore (new_sp);\n      top = last_alloca_addr;\n      bot = new_sp;\n      __asan_allocas_unpoison (top, bot);\n      last_alloca_addr = new_sp;\n+     __builtin_stack_restore (new_sp);\n    In general, we can't use new_sp as bot parameter because on some\n    architectures SP has non zero offset from dynamic stack area.  Moreover, on\n    some architectures this offset (STACK_DYNAMIC_OFFSET) becomes known for each\n@@ -570,9 +570,8 @@ get_last_alloca_addr ()\n    http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html#DYNAM-STACK.\n    To overcome the issue we use following trick: pass new_sp as a second\n    parameter to __asan_allocas_unpoison and rewrite it during expansion with\n-   virtual_dynamic_stack_rtx later in expand_asan_emit_allocas_unpoison\n-   function.\n-*/\n+   new_sp + (virtual_dynamic_stack_rtx - sp) later in\n+   expand_asan_emit_allocas_unpoison function.  */\n \n static void\n handle_builtin_stack_restore (gcall *call, gimple_stmt_iterator *iter)\n@@ -584,9 +583,9 @@ handle_builtin_stack_restore (gcall *call, gimple_stmt_iterator *iter)\n   tree restored_stack = gimple_call_arg (call, 0);\n   tree fn = builtin_decl_implicit (BUILT_IN_ASAN_ALLOCAS_UNPOISON);\n   gimple *g = gimple_build_call (fn, 2, last_alloca, restored_stack);\n-  gsi_insert_after (iter, g, GSI_NEW_STMT);\n+  gsi_insert_before (iter, g, GSI_SAME_STMT);\n   g = gimple_build_assign (last_alloca, restored_stack);\n-  gsi_insert_after (iter, g, GSI_NEW_STMT);\n+  gsi_insert_before (iter, g, GSI_SAME_STMT);\n }\n \n /* Deploy and poison redzones around __builtin_alloca call.  To do this, we"}, {"sha": "a71555e8198cc70e74616e9fcb83cb9e501afa6a", "filename": "gcc/builtins.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7504c3bf61443f9255b0a0caf310b5300b59b92d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7504c3bf61443f9255b0a0caf310b5300b59b92d", "patch": "@@ -5072,18 +5072,24 @@ expand_builtin_alloca (tree exp)\n   return result;\n }\n \n-/* Emit a call to __asan_allocas_unpoison call in EXP.  Replace second argument\n-   of the call with virtual_stack_dynamic_rtx because in asan pass we emit a\n-   dummy value into second parameter relying on this function to perform the\n-   change.  See motivation for this in comment to handle_builtin_stack_restore\n-   function.  */\n+/* Emit a call to __asan_allocas_unpoison call in EXP.  Add to second argument\n+   of the call virtual_stack_dynamic_rtx - stack_pointer_rtx, which is the\n+   STACK_DYNAMIC_OFFSET value.  See motivation for this in comment to\n+   handle_builtin_stack_restore function.  */\n \n static rtx\n expand_asan_emit_allocas_unpoison (tree exp)\n {\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n   rtx top = expand_expr (arg0, NULL_RTX, ptr_mode, EXPAND_NORMAL);\n-  rtx bot = convert_memory_address (ptr_mode, virtual_stack_dynamic_rtx);\n+  rtx bot = expand_expr (arg1, NULL_RTX, ptr_mode, EXPAND_NORMAL);\n+  rtx off = expand_simple_binop (Pmode, MINUS, virtual_stack_dynamic_rtx,\n+\t\t\t\t stack_pointer_rtx, NULL_RTX, 0,\n+\t\t\t\t OPTAB_LIB_WIDEN);\n+  off = convert_modes (ptr_mode, Pmode, off, 0);\n+  bot = expand_simple_binop (ptr_mode, PLUS, bot, off, NULL_RTX, 0,\n+\t\t\t     OPTAB_LIB_WIDEN);\n   rtx ret = init_one_libfunc (\"__asan_allocas_unpoison\");\n   ret = emit_library_call_value (ret, NULL_RTX, LCT_NORMAL, ptr_mode,\n \t\t\t\t top, ptr_mode, bot, ptr_mode);"}]}