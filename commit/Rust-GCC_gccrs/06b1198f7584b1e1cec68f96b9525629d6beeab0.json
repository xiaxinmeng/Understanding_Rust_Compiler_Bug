{"sha": "06b1198f7584b1e1cec68f96b9525629d6beeab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiMTE5OGY3NTg0YjFlMWNlYzY4Zjk2Yjk1MjU2MjlkNmJlZWFiMA==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-11-12T19:39:46Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2012-11-12T19:39:46Z"}, "message": "Use CSINC instead of CSEL to return 1 (AArch64)\n\nFrom-SVN: r193452", "tree": {"sha": "f26d4d6034bf6854c15c44c5e1e8ea6ec32a8cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26d4d6034bf6854c15c44c5e1e8ea6ec32a8cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b1198f7584b1e1cec68f96b9525629d6beeab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1198f7584b1e1cec68f96b9525629d6beeab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b1198f7584b1e1cec68f96b9525629d6beeab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1198f7584b1e1cec68f96b9525629d6beeab0/comments", "author": null, "committer": null, "parents": [{"sha": "f5313c63ba833a90e5685e5df7ccaa984dd68ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5313c63ba833a90e5685e5df7ccaa984dd68ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5313c63ba833a90e5685e5df7ccaa984dd68ccb"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "ac116172052d4a2296f3f472046bee702365bc1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -1,3 +1,11 @@\n+2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.md (cmov<mode>_insn): Emit CSINC when\n+\tone of the alternatives is constant 1.\n+\t* config/aarch64/constraints.md: New constraint.\n+\t* config/aarch64/predicates.md: Rename predicate\n+\taarch64_reg_zero_or_m1 to aarch64_reg_zero_or_m1_or_1.\n+\n 2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.md (*compare_neg<mode>): New pattern."}, {"sha": "a9a8b5f9c2a1abeaf3a3a8b4fdf934f31ab97d95", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -1885,19 +1885,23 @@\n )\n \n (define_insn \"*cmov<mode>_insn\"\n-  [(set (match_operand:ALLI 0 \"register_operand\" \"=r,r,r,r\")\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n \t(if_then_else:ALLI\n \t (match_operator 1 \"aarch64_comparison_operator\"\n \t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:ALLI 3 \"aarch64_reg_zero_or_m1\" \"rZ,rZ,UsM,UsM\")\n-\t (match_operand:ALLI 4 \"aarch64_reg_zero_or_m1\" \"rZ,UsM,rZ,UsM\")))]\n-  \"\"\n-  ;; Final alternative should be unreachable, but included for completeness\n+\t (match_operand:ALLI 3 \"aarch64_reg_zero_or_m1_or_1\" \"rZ,rZ,UsM,rZ,Ui1,UsM,Ui1\")\n+\t (match_operand:ALLI 4 \"aarch64_reg_zero_or_m1_or_1\" \"rZ,UsM,rZ,Ui1,rZ,UsM,Ui1\")))]\n+  \"!((operands[3] == const1_rtx && operands[4] == constm1_rtx)\n+     || (operands[3] == constm1_rtx && operands[4] == const1_rtx))\"\n+  ;; Final two alternatives should be unreachable, but included for completeness\n   \"@\n    csel\\\\t%<w>0, %<w>3, %<w>4, %m1\n    csinv\\\\t%<w>0, %<w>3, <w>zr, %m1\n    csinv\\\\t%<w>0, %<w>4, <w>zr, %M1\n-   mov\\\\t%<w>0, -1\"\n+   csinc\\\\t%<w>0, %<w>3, <w>zr, %m1\n+   csinc\\\\t%<w>0, %<w>4, <w>zr, %M1\n+   mov\\\\t%<w>0, -1\n+   mov\\\\t%<w>0, 1\"\n   [(set_attr \"v8type\" \"csel\")\n    (set_attr \"mode\" \"<MODE>\")]\n )"}, {"sha": "dae4b94b71a32487a059ed5616d4b94e11b405d2", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -102,6 +102,11 @@\n   A constraint that matches the immediate constant -1.\"\n   (match_test \"op == constm1_rtx\"))\n \n+(define_constraint \"Ui1\"\n+  \"@internal\n+  A constraint that matches the immediate constant +1.\"\n+  (match_test \"op == const1_rtx\"))\n+\n (define_constraint \"Ui3\"\n   \"@internal\n   A constraint that matches the integers 0...4.\""}, {"sha": "80f6ce2cb37141513b564aaa55aa63f2bc5d5c1b", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -31,11 +31,12 @@\n        (ior (match_operand 0 \"register_operand\")\n \t    (match_test \"op == const0_rtx\"))))\n \n-(define_predicate \"aarch64_reg_zero_or_m1\"\n+(define_predicate \"aarch64_reg_zero_or_m1_or_1\"\n   (and (match_code \"reg,subreg,const_int\")\n        (ior (match_operand 0 \"register_operand\")\n \t    (ior (match_test \"op == const0_rtx\")\n-\t\t (match_test \"op == constm1_rtx\")))))\n+\t\t (ior (match_test \"op == constm1_rtx\")\n+\t\t      (match_test \"op == const1_rtx\"))))))\n \n (define_predicate \"aarch64_fp_compare_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "9c933702cb331289e7f725dc6b66dd10e51f632c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -1,3 +1,7 @@\n+2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/csinc-2.c: New test.\n+\n 2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/cmn.c: New test."}, {"sha": "1b4eb7e72f51b757b8b2e01a09cdc509fb62c79a", "filename": "gcc/testsuite/gcc.target/aarch64/csinc-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1198f7584b1e1cec68f96b9525629d6beeab0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-2.c?ref=06b1198f7584b1e1cec68f96b9525629d6beeab0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  return (a < b) ? 1 : 7;\n+  /* { dg-final { scan-assembler \"csinc\\tw\\[0-9\\].*wzr\" } } */\n+}\n+\n+typedef long long s64;\n+\n+s64\n+foo2 (s64 a, s64 b)"}]}