{"sha": "f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkMmRlNGQwZGM2ZWI5NjFkMTJlYjE4ODhlMzg3ZGZiZGYzM2FlNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-20T20:53:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-20T20:53:52Z"}, "message": "h8300-protos.h: Add prototypes for incdec_operand and eqne_operator.\n\n\t* config/h8300/h8300-protos.h: Add prototypes for\n\tincdec_operand and eqne_operator.\n\t* config/h8300/h8300.c (incdec_operand): New.\n\t(eqne_operator): Likewise.\n\t* config/h8300/h8300.h (CONST_OK_FOR_M): Likewise.\n\t(CONST_OK_FOR_O): Likewise.\n\t(CONST_OK_FOR_LETTER_P): Use CONST_OK_FOR_M and\n\tCONST_OK_FOR_O.\n\t* config/h8300/h8300.md (UNSPEC_INCDEC): New.\n\t(addhi3_incdec): New.\n\t(addsi3_incdec): Likewise.\n\t(two peepholes): Likewise.\n\nFrom-SVN: r60375", "tree": {"sha": "169d6ebd254a2a3318a7ea9b59640a9ce9401741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169d6ebd254a2a3318a7ea9b59640a9ce9401741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/comments", "author": null, "committer": null, "parents": [{"sha": "b47900aa0b511c57af99f2a7c88063e108b46dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47900aa0b511c57af99f2a7c88063e108b46dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47900aa0b511c57af99f2a7c88063e108b46dbc"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "d7e51d71bd24c08ebd223183df59187ff7d11b5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "patch": "@@ -1,3 +1,18 @@\n+2002-12-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add prototypes for\n+\tincdec_operand and eqne_operator.\n+\t* config/h8300/h8300.c (incdec_operand): New.\n+\t(eqne_operator): Likewise.\n+\t* config/h8300/h8300.h (CONST_OK_FOR_M): Likewise.\n+\t(CONST_OK_FOR_O): Likewise.\n+\t(CONST_OK_FOR_LETTER_P): Use CONST_OK_FOR_M and\n+\tCONST_OK_FOR_O.\n+\t* config/h8300/h8300.md (UNSPEC_INCDEC): New.\n+\t(addhi3_incdec): New.\n+\t(addsi3_incdec): Likewise.\n+\t(two peepholes): Likewise.\n+\n 2002-12-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (dosize): Remove warnings."}, {"sha": "f56d8377ea9a0e585e7e671f3cac437b457089bc", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "patch": "@@ -59,8 +59,10 @@ extern int small_call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern int jump_address_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int incdec_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n+extern int eqne_operator PARAMS ((rtx, enum machine_mode));\n \n extern int h8300_eightbit_constant_address_p PARAMS ((rtx));\n extern int h8300_tiny_constant_address_p PARAMS ((rtx));"}, {"sha": "739728c69451f7b1ae8af19e4217a16ae257e965", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "patch": "@@ -1806,6 +1806,30 @@ notice_update_cc (body, insn)\n     }\n }\n \n+/* Return nonzero if X is a constant suitable for inc/dec.  */\n+\n+int\n+incdec_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && (CONST_OK_FOR_M (INTVAL (x))\n+\t      || CONST_OK_FOR_O (INTVAL (x))));\n+}\n+\n+/* Return nonzero if X is either EQ or NE.  */\n+\n+int\n+eqne_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+\n+  return (code == EQ || code == NE);\n+}\n+\n /* Recognize valid operators for bit instructions.  */\n \n int"}, {"sha": "aebc4f755ca2c7da0762bad2cf779a5dfbf06c81", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "patch": "@@ -466,16 +466,22 @@ enum reg_class {\n   (TARGET_H8300H || TARGET_H8300S\t\t\t\\\n    ? (VALUE) == 1 || (VALUE) == 2 || (VALUE) == 4\t\\\n    : (VALUE) == 1 || (VALUE) == 2)\n+#define CONST_OK_FOR_M(VALUE)\t\t\t\t\\\n+  ((VALUE) == 1 || (VALUE) == 2)\n #define CONST_OK_FOR_N(VALUE)\t\t\t\t\\\n   (TARGET_H8300H || TARGET_H8300S\t\t\t\\\n    ? (VALUE) == -1 || (VALUE) == -2 || (VALUE) == -4\t\\\n    : (VALUE) == -1 || (VALUE) == -2)\n+#define CONST_OK_FOR_O(VALUE)\t\t\t\t\\\n+  ((VALUE) == -1 || (VALUE) == -2)\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\\\n   ((C) == 'I' ? CONST_OK_FOR_I (VALUE) :\t\\\n    (C) == 'J' ? CONST_OK_FOR_J (VALUE) :\t\\\n    (C) == 'L' ? CONST_OK_FOR_L (VALUE) :\t\\\n+   (C) == 'M' ? CONST_OK_FOR_M (VALUE) :\t\\\n    (C) == 'N' ? CONST_OK_FOR_N (VALUE) :\t\\\n+   (C) == 'O' ? CONST_OK_FOR_O (VALUE) :\t\\\n    0)\n \n /* Similar, but for floating constants, and defining letters G and H."}, {"sha": "5bba952c0a57e78cc4d4adbfe439ad9b95f2863b", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "patch": "@@ -50,6 +50,9 @@\n ;; CONSTANTS\n ;; ----------------------------------------------------------------------\n \n+(define_constants\n+  [(UNSPEC_INCDEC\t0)])\n+\n (define_constants\n   [(SC_REG\t 3)\n    (FP_REG\t 6)\n@@ -794,6 +797,18 @@\n   [(set_attr \"length\" \"2,2,2,4,2\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,clobber,set_zn,set_zn\")])\n \n+(define_insn \"addhi3_incdec\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:HI [(match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t\t    (match_operand:HI 2 \"incdec_operand\" \"M,O\")]\n+\t\t   UNSPEC_INCDEC))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  \"@\n+   inc.w\t%2,%T0\n+   dec.w\t%G2,%T0\"\n+  [(set_attr \"length\" \"2,2\")\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n+\n (define_split\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(plus:HI (match_dup 0)\n@@ -834,6 +849,18 @@\n   [(set_attr \"length\" \"2,2,6,2\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,set_zn,set_zn\")])\n \n+(define_insn \"addsi3_incdec\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t    (match_operand:SI 2 \"incdec_operand\" \"M,O\")]\n+\t\t   UNSPEC_INCDEC))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  \"@\n+   inc.l\t%2,%S0\n+   dec.l\t%G2,%S0\"\n+  [(set_attr \"length\" \"2,2\")\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n+\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(plus:SI (match_dup 0)\n@@ -2784,3 +2811,64 @@\n \t(plus:SI (match_dup 0)\n \t\t (match_dup 1)))]\n   \"\")\n+\n+;; Turn\n+;;\n+;;   subs   #1,er4\n+;;   mov.w  r4,r4\n+;;   bne    .L2028\n+;;\n+;; into\n+;;\n+;;   dec.w  #1,r4\n+;;   bne    .L2028\n+\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(plus:HI (match_dup 0)\n+\t\t (match_operand 1 \"incdec_operand\" \"\")))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(unspec:HI [(match_dup 0)\n+\t\t    (match_dup 1)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"\")\n+\n+;; The SImode version of the previous pattern.\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (match_dup 0)\n+\t\t (match_operand 1 \"incdec_operand\" \"\")))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec:SI [(match_dup 0)\n+\t\t    (match_dup 1)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"\")"}]}