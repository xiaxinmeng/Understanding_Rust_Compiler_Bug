{"sha": "8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzOWY4YWViOWZlNzkxODU2YThiNGMyNzI1YzA2Y2Y3ZDBmMjNlNg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-08-28T00:04:04Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-08-28T00:04:04Z"}, "message": "make stack_slot_list a vec<rtx>\n\ngcc/ChangeLog:\n\n2016-08-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* emit-rtl.h (struct rtl_data): Make stack_slot_list a vector.\n\t* emit-rtl.c (unshare_all_rtl_1): Adjust.\n\t(unshare_all_rtl_again): Likewise.\n\t* function.c (assign_stack_local_1): Likewise.\n\t(assign_stack_temp_for_type): Likewise.\n\nFrom-SVN: r239801", "tree": {"sha": "4b1988c81c3db678ecd464b5bc3742a5f9eff054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b1988c81c3db678ecd464b5bc3742a5f9eff054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/comments", "author": null, "committer": null, "parents": [{"sha": "6f7eba349b7f2b140f163b772ba94b383d02d64e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7eba349b7f2b140f163b772ba94b383d02d64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7eba349b7f2b140f163b772ba94b383d02d64e"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "529ec91f2ea530f91ff19304b1931cbe3cba0e1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "patch": "@@ -1,3 +1,11 @@\n+2016-08-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* emit-rtl.h (struct rtl_data): Make stack_slot_list a vector.\n+\t* emit-rtl.c (unshare_all_rtl_1): Adjust.\n+\t(unshare_all_rtl_again): Likewise.\n+\t* function.c (assign_stack_local_1): Likewise.\n+\t(assign_stack_temp_for_type): Likewise.\n+\n 2016-08-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* cfgbuild.c (make_edges): Adjust."}, {"sha": "a72460892223add72e9c58547938978abe28614a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "patch": "@@ -2626,8 +2626,10 @@ unshare_all_rtl_1 (rtx_insn *insn)\n      This special care is necessary when the stack slot MEM does not\n      actually appear in the insn chain.  If it does appear, its address\n      is unshared from all else at that point.  */\n-  stack_slot_list = safe_as_a <rtx_expr_list *> (\n-\t\t      copy_rtx_if_shared (stack_slot_list));\n+  unsigned int i;\n+  rtx temp;\n+  FOR_EACH_VEC_SAFE_ELT (stack_slot_list, i, temp)\n+    (*stack_slot_list)[i] = copy_rtx_if_shared (temp);\n }\n \n /* Go through all the RTL insn bodies and copy any invalid shared\n@@ -2656,7 +2658,10 @@ unshare_all_rtl_again (rtx_insn *insn)\n   for (decl = DECL_ARGUMENTS (cfun->decl); decl; decl = DECL_CHAIN (decl))\n     set_used_flags (DECL_RTL (decl));\n \n-  reset_used_flags (stack_slot_list);\n+  rtx temp;\n+  unsigned int i;\n+  FOR_EACH_VEC_SAFE_ELT (stack_slot_list, i, temp)\n+    reset_used_flags (temp);\n \n   unshare_all_rtl_1 (insn);\n }"}, {"sha": "52c72b1eed2ebf30f668bf4692d2e6e137816aa1", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "patch": "@@ -104,7 +104,7 @@ struct GTY(()) rtl_data {\n \n   /* List (chain of EXPR_LISTs) of all stack slots in this function.\n      Made for the sake of unshare_all_rtl.  */\n-  rtx_expr_list *x_stack_slot_list;\n+  vec<rtx, va_gc> *x_stack_slot_list;\n \n   /* List of empty areas in the stack frame.  */\n   struct frame_space *frame_space_list;"}, {"sha": "53bad8736e9ef251347d23d40bc0ab767a979bc7", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8c39f8aeb9fe791856a8b4c2725c06cf7d0f23e6", "patch": "@@ -499,8 +499,7 @@ assign_stack_local_1 (machine_mode mode, HOST_WIDE_INT size,\n   set_mem_align (x, alignment_in_bits);\n   MEM_NOTRAP_P (x) = 1;\n \n-  stack_slot_list\n-    = gen_rtx_EXPR_LIST (VOIDmode, x, stack_slot_list);\n+  vec_safe_push (stack_slot_list, x);\n \n   if (frame_offset_overflow (frame_offset, current_function_decl))\n     frame_offset = 0;\n@@ -829,8 +828,7 @@ assign_stack_temp_for_type (machine_mode mode, HOST_WIDE_INT size,\n \t      p->type = best_p->type;\n \t      insert_slot_to_list (p, &avail_temp_slots);\n \n-\t      stack_slot_list = gen_rtx_EXPR_LIST (VOIDmode, p->slot,\n-\t\t\t\t\t\t   stack_slot_list);\n+\t      vec_safe_push (stack_slot_list, p->slot);\n \n \t      best_p->size = rounded_size;\n \t      best_p->full_size = rounded_size;\n@@ -902,7 +900,7 @@ assign_stack_temp_for_type (machine_mode mode, HOST_WIDE_INT size,\n \n   /* Create a new MEM rtx to avoid clobbering MEM flags of old slots.  */\n   slot = gen_rtx_MEM (mode, XEXP (p->slot, 0));\n-  stack_slot_list = gen_rtx_EXPR_LIST (VOIDmode, slot, stack_slot_list);\n+  vec_safe_push (stack_slot_list, slot);\n \n   /* If we know the alias set for the memory that will be used, use\n      it.  If there's no TYPE, then we don't know anything about the"}]}