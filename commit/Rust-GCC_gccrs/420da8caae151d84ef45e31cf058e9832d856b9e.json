{"sha": "420da8caae151d84ef45e31cf058e9832d856b9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwZGE4Y2FhZTE1MWQ4NGVmNDVlMzFjZjA1OGU5ODMyZDg1NmI5ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-11T14:53:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-11T14:53:20Z"}, "message": "tree-vectorizer.c (slpeel_add_loop_guard): Fix types.\n\n2008-09-11  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vectorizer.c (slpeel_add_loop_guard): Fix types.\n\t(set_prologue_iterations): Likewise.\n\t* tree-vect-transform.c (vect_create_addr_base_for_vector_ref):\n\tLikewise.\n\t(vect_update_init_of_dr): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Fix\n\ttype verification.\n\t* fold-const.c (fold_unary): Do not generate calculations\n\tin sub-types.\n\nFrom-SVN: r140291", "tree": {"sha": "9c89799f44ae4d4e96a1e79f7af70fca2353d8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c89799f44ae4d4e96a1e79f7af70fca2353d8c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/420da8caae151d84ef45e31cf058e9832d856b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420da8caae151d84ef45e31cf058e9832d856b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420da8caae151d84ef45e31cf058e9832d856b9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420da8caae151d84ef45e31cf058e9832d856b9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "308216549297c41fb602dced560fa1ed8af0f8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308216549297c41fb602dced560fa1ed8af0f8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308216549297c41fb602dced560fa1ed8af0f8f6"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "33de0138db08b747c059d38d0c0f6057cf62e31c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=420da8caae151d84ef45e31cf058e9832d856b9e", "patch": "@@ -1,3 +1,15 @@\n+2008-09-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.c (slpeel_add_loop_guard): Fix types.\n+\t(set_prologue_iterations): Likewise.\n+\t* tree-vect-transform.c (vect_create_addr_base_for_vector_ref):\n+\tLikewise.\n+\t(vect_update_init_of_dr): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Fix\n+\ttype verification.\n+\t* fold-const.c (fold_unary): Do not generate calculations\n+\tin sub-types.\n+\n 2008-09-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* dojump.c (do_jump) [BIT_AND_EXPR]: Move below.  Fall through to"}, {"sha": "2c822b561e2fe79e6f9b0e37bc61db2602d235d1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=420da8caae151d84ef45e31cf058e9832d856b9e", "patch": "@@ -7883,7 +7883,9 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t transformation effectively doesn't preserve non-maximal ranges.  */\n       if (TREE_CODE (type) == INTEGER_TYPE\n \t  && TREE_CODE (op0) == BIT_AND_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (op0, 1)) == INTEGER_CST)\n+\t  && TREE_CODE (TREE_OPERAND (op0, 1)) == INTEGER_CST\n+\t  /* Not if the conversion is to the sub-type.  */\n+\t  && TREE_TYPE (type) != TREE_TYPE (op0))\n \t{\n \t  tree and = op0;\n \t  tree and0 = TREE_OPERAND (and, 0), and1 = TREE_OPERAND (and, 1);"}, {"sha": "3513ee09e9f77a8997a5e3d63e781b189cf4b90e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=420da8caae151d84ef45e31cf058e9832d856b9e", "patch": "@@ -834,7 +834,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n   if (TREE_CODE (rhs2) == SSA_NAME\n       /* Avoid problems with IVopts creating PLUS_EXPRs with a\n \t different type than their operands.  */\n-      && useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (name)))\n+      && useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (def_rhs)))\n     return forward_propagate_addr_into_variable_array_index (rhs2, def_rhs,\n \t\t\t\t\t\t\t     use_stmt_gsi);\n   return false;"}, {"sha": "d69ce51814b7fe3f80e82490e189e939b29a342a", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=420da8caae151d84ef45e31cf058e9832d856b9e", "patch": "@@ -918,9 +918,10 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n   /* Create base_offset */\n-  base_offset = size_binop (PLUS_EXPR, base_offset, init);\n-  base_offset = fold_convert (sizetype, base_offset);\n-  dest = create_tmp_var (TREE_TYPE (base_offset), \"base_off\");\n+  base_offset = size_binop (PLUS_EXPR,\n+\t\t\t    fold_convert (sizetype, base_offset),\n+\t\t\t    fold_convert (sizetype, init));\n+  dest = create_tmp_var (sizetype, \"base_off\");\n   add_referenced_var (dest);\n   base_offset = force_gimple_operand (base_offset, &seq, true, dest);\n   gimple_seq_add_seq (new_stmt_list, seq);\n@@ -930,8 +931,9 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n       tree tmp = create_tmp_var (sizetype, \"offset\");\n \n       add_referenced_var (tmp);\n-      offset = fold_build2 (MULT_EXPR, TREE_TYPE (offset), offset, step);\n-      base_offset = fold_build2 (PLUS_EXPR, TREE_TYPE (base_offset),\n+      offset = fold_build2 (MULT_EXPR, sizetype,\n+\t\t\t    fold_convert (sizetype, offset), step);\n+      base_offset = fold_build2 (PLUS_EXPR, sizetype,\n \t\t\t\t base_offset, offset);\n       base_offset = force_gimple_operand (base_offset, &seq, false, tmp);\n       gimple_seq_add_seq (new_stmt_list, seq);\n@@ -7632,8 +7634,10 @@ vect_update_init_of_dr (struct data_reference *dr, tree niters)\n {\n   tree offset = DR_OFFSET (dr);\n       \n-  niters = fold_build2 (MULT_EXPR, TREE_TYPE (niters), niters, DR_STEP (dr));\n-  offset = fold_build2 (PLUS_EXPR, TREE_TYPE (offset), offset, niters);\n+  niters = fold_build2 (MULT_EXPR, sizetype,\n+\t\t\tfold_convert (sizetype, niters),\n+\t\t\tfold_convert (sizetype, DR_STEP (dr)));\n+  offset = fold_build2 (PLUS_EXPR, sizetype, offset, niters);\n   DR_OFFSET (dr) = offset;\n }\n "}, {"sha": "47821e89a9e558b02aa52ce627036633d1e872f9", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420da8caae151d84ef45e31cf058e9832d856b9e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=420da8caae151d84ef45e31cf058e9832d856b9e", "patch": "@@ -940,10 +940,9 @@ slpeel_add_loop_guard (basic_block guard_bb, tree cond, basic_block exit_bb,\n   enter_e->flags |= EDGE_FALSE_VALUE;\n   gsi = gsi_last_bb (guard_bb);\n \n-  cond =\n-    force_gimple_operand (cond, &gimplify_stmt_list, true,\n-\t\t\t  NULL_TREE);\n-  cond_stmt = gimple_build_cond (NE_EXPR, cond, integer_zero_node,\n+  cond = force_gimple_operand (cond, &gimplify_stmt_list, true, NULL_TREE);\n+  cond_stmt = gimple_build_cond (NE_EXPR,\n+\t\t\t\t cond, build_int_cst (TREE_TYPE (cond), 0),\n \t\t\t\t NULL_TREE, NULL_TREE);\n   if (gimplify_stmt_list)\n     gsi_insert_seq_after (&gsi, gimplify_stmt_list, GSI_NEW_STMT);\n@@ -1073,7 +1072,8 @@ set_prologue_iterations (basic_block bb_before_first_loop,\n     force_gimple_operand (cost_pre_condition, &gimplify_stmt_list,\n \t\t\t  true, NULL_TREE);\n   cond_stmt = gimple_build_cond (NE_EXPR, cost_pre_condition,\n-\t\t\t\t integer_zero_node, NULL_TREE, NULL_TREE);\n+\t\t\t\t build_int_cst (TREE_TYPE (cost_pre_condition),\n+\t\t\t\t\t\t0), NULL_TREE, NULL_TREE);\n \n   gsi = gsi_last_bb (cond_bb);\n   if (gimplify_stmt_list)"}]}