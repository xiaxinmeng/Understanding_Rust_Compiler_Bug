{"sha": "cc4029ee7987de113a4e55a243818dd754245345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0MDI5ZWU3OTg3ZGUxMTNhNGU1NWEyNDM4MThkZDc1NDI0NTM0NQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2013-09-08T23:41:38Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2013-09-08T23:41:38Z"}, "message": "Fix handling of very long asm statements in inliner\n\nAn auto generated program with a 6.4mio line asm statement gave\nwith 4.7 and 4.8:\n\nxxx.c:6400017:1: internal compiler error: in account_size_time, at\nipa-inline-analysis.c:601\n\nThe problem is that the inliner counts the number of lines in the asm\nstatement and multiplies that with a weight. With the weight this\noverflows 32bit signed int, and triggers an assert for negative time.\n\nFix this by limiting the number of lines to 1000 for asm cost\nestimation. The RTL backend also does similar multiplications for\njump shortening. I haven't tried to address this, but presumably\nit's less likely to result in a failure.\n\ngcc/:\n2013-09-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* tree-inline.c (estimate_num_insns): Limit asm cost to 1000.\n\nFrom-SVN: r202374", "tree": {"sha": "8ffb6df62f9e66b086cef2af05cda842981860ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffb6df62f9e66b086cef2af05cda842981860ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4029ee7987de113a4e55a243818dd754245345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4029ee7987de113a4e55a243818dd754245345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4029ee7987de113a4e55a243818dd754245345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4029ee7987de113a4e55a243818dd754245345/comments", "author": null, "committer": null, "parents": [{"sha": "41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "6f3e0b8a9f8af075603f7e33d28d8d72cae33f89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4029ee7987de113a4e55a243818dd754245345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4029ee7987de113a4e55a243818dd754245345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc4029ee7987de113a4e55a243818dd754245345", "patch": "@@ -1,3 +1,7 @@\n+2013-09-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* tree-inline.c (estimate_num_insns): Limit asm cost to 1000.\n+\n 2013-09-08  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (walk_polymorphic_call_targets): Fix inliner summary update."}, {"sha": "40eb3807119e132b459382536cc9dc0f34c9fa4e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4029ee7987de113a4e55a243818dd754245345/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4029ee7987de113a4e55a243818dd754245345/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cc4029ee7987de113a4e55a243818dd754245345", "patch": "@@ -3744,7 +3744,14 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n       return 0;\n \n     case GIMPLE_ASM:\n-      return asm_str_count (gimple_asm_string (stmt));\n+      {\n+\tint count = asm_str_count (gimple_asm_string (stmt));\n+\t/* 1000 means infinity. This avoids overflows later\n+\t   with very long asm statements.  */\n+\tif (count > 1000)\n+\t  count = 1000;\n+\treturn count;\n+      }\n \n     case GIMPLE_RESX:\n       /* This is either going to be an external function call with one"}]}