{"sha": "9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjYWI5MWM2ZmI2Yjk2Yzc3ZTFhYWZkNWVmMjQwYjk2NWM4OTdiMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-01T19:16:01Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-01T19:16:01Z"}, "message": "dependency.c (gfc_is_inside_range): Delete.\n\n\n\t* dependency.c (gfc_is_inside_range): Delete.\n\t(gfc_check_element_vs_section): Significant rewrite.\n\n\t* gfortran.dg/dependencency_17.f90: New test case.\n\nFrom-SVN: r112607", "tree": {"sha": "ad78eafeef59122c479f9d41d9f9949909ac0226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad78eafeef59122c479f9d41d9f9949909ac0226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/comments", "author": null, "committer": null, "parents": [{"sha": "d765523a64a47fde1e075bbefe592eb12b767ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d765523a64a47fde1e075bbefe592eb12b767ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d765523a64a47fde1e075bbefe592eb12b767ea1"}], "stats": {"total": 168, "additions": 122, "deletions": 46}, "files": [{"sha": "bbcb33cb641d8cdf7a061a2eb8164ef1630d2a2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "patch": "@@ -1,3 +1,8 @@\n+2006-04-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dependency.c (gfc_is_inside_range): Delete.\n+\t(gfc_check_element_vs_section): Significant rewrite.\n+\n 2006-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* dependency.c (gfc_dep_compare_expr): Strip parentheses and unary"}, {"sha": "f664ec0d0f89aa7b63284058dac292ceefdf30fe", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 101, "deletions": 46, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "patch": "@@ -858,70 +858,125 @@ gfc_check_section_vs_section (gfc_ref * lref, gfc_ref * rref, int n)\n }\n \n \n-/* Checks if the expr chk is inside the range left-right.\n-   Returns  GFC_DEP_NODEP if chk is outside the range,\n-   GFC_DEP_OVERLAP otherwise.\n-   Assumes left<=right.  */\n+/* Determines overlapping for a single element and a section.  */\n \n static gfc_dependency\n-gfc_is_inside_range (gfc_expr * chk, gfc_expr * left, gfc_expr * right)\n+gfc_check_element_vs_section( gfc_ref * lref, gfc_ref * rref, int n)\n {\n-  int l;\n-  int r;\n+  gfc_array_ref *ref;\n+  gfc_expr *elem;\n+  gfc_expr *start;\n+  gfc_expr *end;\n+  gfc_expr *stride;\n   int s;\n \n-  s = gfc_dep_compare_expr (left, right);\n-  if (s == -2)\n+  elem = lref->u.ar.start[n];\n+  if (!elem)\n     return GFC_DEP_OVERLAP;\n \n-  l = gfc_dep_compare_expr (chk, left);\n-  r = gfc_dep_compare_expr (chk, right);\n+  ref = &rref->u.ar;\n+  start = ref->start[n] ;\n+  end = ref->end[n] ;\n+  stride = ref->stride[n];\n+\n+  if (!start && IS_ARRAY_EXPLICIT (ref->as))\n+    start = ref->as->lower[n];\n+  if (!end && IS_ARRAY_EXPLICIT (ref->as))\n+    end = ref->as->upper[n];\n+\n+  /* Determine whether the stride is positive or negative.  */\n+  if (!stride)\n+    s = 1;\n+  else if (stride->expr_type == EXPR_CONSTANT\n+\t   && stride->ts.type == BT_INTEGER)\n+    s = mpz_sgn (stride->value.integer);\n+  else\n+    s = -2;\n \n-  /* Check for indeterminate relationships.  */\n-  if (l == -2 || r == -2 || s == -2)\n+  /* Stride should never be zero.  */\n+  if (s == 0)\n     return GFC_DEP_OVERLAP;\n \n+  /* Positive strides.  */\n   if (s == 1)\n     {\n-      /* When left>right we want to check for right <= chk <= left.  */\n-      if (l <= 0 || r >= 0)\n-\treturn GFC_DEP_OVERLAP;\n+      /* Check for elem < lower.  */\n+      if (start && gfc_dep_compare_expr (elem, start) == -1)\n+\treturn GFC_DEP_NODEP;\n+      /* Check for elem > upper.  */\n+      if (end && gfc_dep_compare_expr (elem, end) == 1)\n+\treturn GFC_DEP_NODEP;\n+\n+      if (start && end)\n+\t{\n+\t  s = gfc_dep_compare_expr (start, end);\n+\t  /* Check for an empty range.  */\n+\t  if (s == 1)\n+\t    return GFC_DEP_NODEP;\n+\t  if (s == 0 && gfc_dep_compare_expr (elem, start) == 0)\n+\t    return GFC_DEP_EQUAL;\n+\t}\n+    }\n+  /* Negative strides.  */\n+  else if (s == -1)\n+    {\n+      /* Check for elem > upper.  */\n+      if (end && gfc_dep_compare_expr (elem, start) == 1)\n+\treturn GFC_DEP_NODEP;\n+      /* Check for elem < lower.  */\n+      if (start && gfc_dep_compare_expr (elem, end) == -1)\n+\treturn GFC_DEP_NODEP;\n+\n+      if (start && end)\n+\t{\n+\t  s = gfc_dep_compare_expr (start, end);\n+\t  /* Check for an empty range.  */\n+\t  if (s == -1)\n+\t    return GFC_DEP_NODEP;\n+\t  if (s == 0 && gfc_dep_compare_expr (elem, start) == 0)\n+\t    return GFC_DEP_EQUAL;\n+\t}\n     }\n+  /* Unknown strides.  */\n   else\n     {\n-      /* Otherwise check for left <= chk <= right.  */\n-      if (l >= 0 || r <= 0)\n+      if (!start || !end)\n \treturn GFC_DEP_OVERLAP;\n+      s = gfc_dep_compare_expr (start, end);\n+      if (s == -2)\n+\treturn GFC_DEP_OVERLAP;\n+      /* Assume positive stride.  */\n+      if (s == -1)\n+\t{\n+\t  /* Check for elem < lower.  */\n+\t  if (gfc_dep_compare_expr (elem, start) == -1)\n+\t    return GFC_DEP_NODEP;\n+\t  /* Check for elem > upper.  */\n+\t  if (gfc_dep_compare_expr (elem, end) == 1)\n+\t    return GFC_DEP_NODEP;\n+\t}\n+      /* Assume negative stride.  */\n+      else if (s == 1)\n+\t{\n+\t  /* Check for elem > upper.  */\n+\t  if (gfc_dep_compare_expr (elem, start) == 1)\n+\t    return GFC_DEP_NODEP;\n+\t  /* Check for elem < lower.  */\n+\t  if (gfc_dep_compare_expr (elem, end) == -1)\n+\t    return GFC_DEP_NODEP;\n+\t}\n+      /* Equal bounds.  */\n+      else if (s == 0)\n+\t{\n+\t  s = gfc_dep_compare_expr (elem, start);\n+\t  if (s == 0)\n+\t    return GFC_DEP_EQUAL;\n+\t  if (s == 1 || s == -1)\n+\t    return GFC_DEP_NODEP;\n+\t}\n     }\n-  \n-  return GFC_DEP_NODEP;\n-}\n \n-\n-/* Determines overlapping for a single element and a section.  */\n-\n-static gfc_dependency\n-gfc_check_element_vs_section( gfc_ref * lref, gfc_ref * rref, int n)\n-{\n-  gfc_array_ref l_ar;\n-  gfc_array_ref r_ar;\n-  gfc_expr *l_start;\n-  gfc_expr *r_start;\n-  gfc_expr *r_end;\n-\n-  l_ar = lref->u.ar;\n-  r_ar = rref->u.ar;\n-  l_start = l_ar.start[n] ;\n-  r_start = r_ar.start[n] ;\n-  r_end = r_ar.end[n] ;\n-  if (NULL == r_start && IS_ARRAY_EXPLICIT (r_ar.as))\n-    r_start = r_ar.as->lower[n];\n-  if (NULL == r_end && IS_ARRAY_EXPLICIT (r_ar.as))\n-    r_end = r_ar.as->upper[n];\n-  if (NULL == r_start || NULL == r_end || l_start == NULL)\n-    return GFC_DEP_OVERLAP;\n-\n-  return gfc_is_inside_range (l_start, r_end, r_start);\n+  return GFC_DEP_OVERLAP;\n }\n \n "}, {"sha": "4c77dcb753c16012d5eb61febc019991afc94bf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "patch": "@@ -1,3 +1,7 @@\n+2006-04-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/dependencency_17.f90: New test case.\n+\n 2006-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/dependency_14.f90: New test case."}, {"sha": "06d15082c78a3edca63fe105fb79850728069279", "filename": "gcc/testsuite/gfortran.dg/dependency_17.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_17.f90?ref=9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a,i)\n+  integer, dimension (3,3,4) :: a\n+  integer :: i\n+\n+  where (a(1,1:2,1:3) .ne. 0)\n+    a(2:3,3,2:4) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}