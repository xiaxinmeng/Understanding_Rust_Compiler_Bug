{"sha": "0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NThkMmJjOGFhZmY1ZWZmYzNmZjY0ZDljMmEzOGIyY2I5ZDkyZQ==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2017-08-01T14:14:21Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-08-01T14:14:21Z"}, "message": "config.gcc (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7 as well as arm-wrs-vxworks.\n\n2017-08-01  Jerome Lambourg  <lambourg@adacore.com>\n           Doug Rupp  <rupp@adacore.com>\n           Olivier Hainque  <hainque@adacore.com>\n\n  \tgcc/\n   \t* config.gcc (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7 as\n   \twell as arm-wrs-vxworks. Update target_cpu_name from arm6 (arch v3) to\n   \tarm8 (arch v4).\n   \t* config/arm/vxworks.h (MAYBE_TARGET_BPABI_CPP_BUILTINS): New, helper\n   \tfor TARGET_OS_CPP_BUILTIN.\n   \t(TARGET_OS_CPP_BUILTIN): Invoke MAYBE_TARGET_BPABI_CPP_BUILTINS(),\n   \trefine CPU definitions for arm_arch5 and add those for arm_arch6 and\n   \tarm_arch7.\n    \t(MAYBE_ASM_ABI_SPEC): New, helper for SUBTARGET_EXTRA_ASM_SPEC,\n   \tpassing required abi options to the assembler for EABI configurations.\n   \t(EXTRA_CC1_SPEC): New macro, to help prevent the implicit production\n   \tof .text.hot and .text.unlikely sections for kernel modules when\n   \tusing ARM style exceptions.\n   \t(CC1_SPEC): Remove obsolete attempt at mimicking Diab toolchain\n   \toptions. Add EXTRA_CC1_SPEC.\n   \t(VXWORKS_ENDIAN_SPEC): Adjust comment and remove handling of Diab\n   \ttoolchain options.\n   \t(DWARF2_UNWIND_INFO): Redefine to handle the pre/post VxWorks 7\n   \ttransition.\n   \t(ARM_TARGET2_DWARF_FORMAT): Define.\n   \t* config/arm/t-vxworks: Adjust multilib control to removal of the\n   \tDiab command line options.\n\n   \tlibgcc/\n   \t* config.host (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7\n   \tas well as arm-wrs-vxworks.\n   \t* config/arm/t-vxworks7: New file.  Add unwind-arm-vxworks.c to\n   \tLIB2ADDEH.\n   \t* config/arm/unwind-arm-vxworks.c: New file. Provide dummy\n   \t__exidx_start and __exidx_end for downloadable modules.\n\n\nCo-Authored-By: Doug Rupp <rupp@adacore.com>\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r250781", "tree": {"sha": "bc44275bb0fc4db50807c07526cc60cd0ba18d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc44275bb0fc4db50807c07526cc60cd0ba18d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "363a06901524d9f2e60451e2ccb9322ca784570a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363a06901524d9f2e60451e2ccb9322ca784570a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363a06901524d9f2e60451e2ccb9322ca784570a"}], "stats": {"total": 192, "additions": 163, "deletions": 29}, "files": [{"sha": "a6661bb12d9f5f9102c250f51ea3d2d5c6781264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -1,3 +1,30 @@\n+2017-08-01  Jerome Lambourg  <lambourg@adacore.com>\n+            Doug Rupp  <rupp@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7 as\n+\twell as arm-wrs-vxworks. Update target_cpu_name from arm6 (arch v3) to\n+\tarm8 (arch v4).\n+\t* config/arm/vxworks.h (MAYBE_TARGET_BPABI_CPP_BUILTINS): New, helper\n+\tfor TARGET_OS_CPP_BUILTIN.\n+\t(TARGET_OS_CPP_BUILTIN): Invoke MAYBE_TARGET_BPABI_CPP_BUILTINS(),\n+\trefine CPU definitions for arm_arch5 and add those for arm_arch6 and\n+\tarm_arch7.\n+\t(MAYBE_ASM_ABI_SPEC): New, helper for SUBTARGET_EXTRA_ASM_SPEC,\n+\tpassing required abi options to the assembler for EABI configurations.\n+\t(EXTRA_CC1_SPEC): New macro, to help prevent the implicit production\n+\tof .text.hot and .text.unlikely sections for kernel modules when\n+\tusing ARM style exceptions.\n+\t(CC1_SPEC): Remove obsolete attempt at mimicking Diab toolchain\n+\toptions. Add EXTRA_CC1_SPEC.\n+\t(VXWORKS_ENDIAN_SPEC): Adjust comment and remove handling of Diab\n+\ttoolchain options.\n+\t(DWARF2_UNWIND_INFO): Redefine to handle the pre/post VxWorks 7\n+\ttransition.\n+\t(ARM_TARGET2_DWARF_FORMAT): Define.\n+\t* config/arm/t-vxworks: Adjust multilib control to removal of the\n+\tDiab command line options.\n+\n 2017-08-01  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/81561"}, {"sha": "60f3d0ba1410db92463bc9216e36fa481c06c38c", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -1059,11 +1059,23 @@ arc*-*-linux*)\n \tbig*)\ttm_file=\"arc/big.h ${tm_file}\"\n \tesac\n         ;;\n-arm-wrs-vxworks)\n-\ttm_file=\"elfos.h arm/elf.h arm/aout.h ${tm_file} vx-common.h vxworks.h arm/vxworks.h\"\n+arm-wrs-vxworks|arm-wrs-vxworks7)\n \textra_options=\"${extra_options} arm/vxworks.opt\"\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-vxworks\"\n-\ttarget_cpu_cname=\"arm6\"\n+        case $target in\n+\t*-vxworks7)\n+            # VxWorks7 on ARM adheres to the ARM Base Platform ABI\n+\t    tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t    tm_file=\"arm/bpabi.h ${tm_file}\"\n+\t    # The BPABI long long divmod functions return a 128-bit value in\n+\t    # registers r0-r3.\n+\t    need_64bit_hwint=yes\n+\t    default_use_cxa_atexit=yes\n+\t    ;;\n+        *)  ;;\n+        esac\n+        tm_file=\"elfos.h arm/elf.h arm/aout.h ${tm_file} vx-common.h vxworks.h arm/vxworks.h\"\n+\ttarget_cpu_cname=\"arm8\"\n \t;;\n arm*-*-freebsd*)                # ARM FreeBSD EABI\n \ttm_file=\"dbxelf.h elfos.h ${fbsd_tm_file} arm/elf.h\""}, {"sha": "0a3840ba8fee09b7e593cd35242f7c421e1798b6", "filename": "gcc/config/arm/t-vxworks", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig%2Farm%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig%2Farm%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxworks?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -16,9 +16,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS = \\\n-  mrtp fPIC \\\n-  t4/t4be/t4t/t4tbe/t5/t5be/t5t/t5tbe/tstrongarm/txscale/txscalebe\n-MULTILIB_MATCHES = fPIC=fpic\n-# Don't build -fPIC multilibs for kernel or Thumb code.\n-MULTILIB_EXCEPTIONS = fPIC* mrtp/fPIC/*t[45]t*\n+MULTILIB_OPTIONS = mrtp fPIC\n+\n+# -fPIC alone is not supported, only together with -mrtp\n+MULTILIB_EXCEPTIONS = fPIC"}, {"sha": "59f6282a0ea78a188cf8f3914980c7b791ee4ef1", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -26,7 +26,15 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/* TARGET_OS_CPP_BUILTINS, down to BPABI if defined.  */\n \n+#if defined (TARGET_BPABI_CPP_BUILTINS)\n+#define MAYBE_TARGET_BPABI_CPP_BUILTINS TARGET_BPABI_CPP_BUILTINS\n+#else\n+#define MAYBE_TARGET_BPABI_CPP_BUILTINS()\n+#endif\n+\n+#undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do {\t\t\t\t\t\t\\\n     if (TARGET_BIG_END)\t\t\t\t\\\n@@ -36,8 +44,29 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t\t\t\t\t\t\\\n     if (arm_arch_xscale)\t\t\t\\\n       builtin_define (\"CPU=XSCALE\");\t\t\\\n+    else if (arm_arch7)\t\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tif (!arm_arch_notm)\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH7M\");\t\\\n+\telse if (TARGET_THUMB)\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH7_T2\");\t\\\n+\telse\t\t\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH7\");\t\\\n+      }\t\t\t\t\t\t\\\n+    else if (arm_arch6)\t\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tif (TARGET_THUMB)\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH6_T\");\t\\\n+\telse\t\t\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH6\");\t\\\n+      }\t\t\t\t\t\t\\\n     else if (arm_arch5)\t\t\t\t\\\n-      builtin_define (\"CPU=ARMARCH5\");\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tif (TARGET_THUMB)\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH5_T\");\t\\\n+\telse\t\t\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH5\");\t\\\n+      }\t\t\t\t\t\t\\\n     else if (arm_arch4)\t\t\t\t\\\n       {\t\t\t\t\t\t\\\n \tif (TARGET_THUMB)\t\t\t\\\n@@ -46,6 +75,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t  builtin_define (\"CPU=ARMARCH4\");\t\\\n       }\t\t\t\t\t\t\\\n     VXWORKS_OS_CPP_BUILTINS ();\t\t\t\\\n+    MAYBE_TARGET_BPABI_CPP_BUILTINS ();\t\t\\\n   } while (0)\n \n #undef SUBTARGET_OVERRIDE_OPTIONS\n@@ -55,27 +85,32 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"-D__ELF__\" VXWORKS_ADDITIONAL_CPP_SPEC\n \n+/* .text.hot and .text.unlikely sections are badly handled by the\n+   VxWorks kernel mode loader for ARM style exceptions.  */\n+\n+#if ARM_UNWIND_INFO\n+#define EXTRA_CC1_SPEC \"%{!mrtp:-fno-reorder-functions}\"\n+#else\n+#define EXTRA_CC1_SPEC\n+#endif\n+\n #undef  CC1_SPEC\n-#define CC1_SPEC\t\t\t\t\t\t\t\\\n-\"%{tstrongarm:-mlittle-endian -mcpu=strongarm ;\t\t\t\t\\\n-   t4:        -mlittle-endian -march=armv4 ;\t\t\t\t\\\n-   t4be:      -mbig-endian -march=armv4 ;\t\t\t\t\\\n-   t4t:       -mthumb -mthumb-interwork -mlittle-endian -march=armv4t ;\t\\\n-   t4tbe:     -mthumb -mthumb-interwork -mbig-endian -march=armv4t ;\t\\\n-   t5:        -mlittle-endian -march=armv5 ;\t\t\t\t\\\n-   t5be:      -mbig-endian -march=armv5 ;\t\t\t\t\\\n-   t5t:       -mthumb -mthumb-interwork -mlittle-endian -march=armv5 ;\t\\\n-   t5tbe:     -mthumb -mthumb-interwork -mbig-endian -march=armv5 ;\t\\\n-   txscale:   -mlittle-endian -mcpu=xscale ;\t\t\t\t\\\n-   txscalebe: -mbig-endian -mcpu=xscale ;\t\t\t\t\\\n-            : -march=armv4}\"\n-\n-/* Pass -EB for big-endian targets.  */\n-#define VXWORKS_ENDIAN_SPEC \\\n-  \"%{mbig-endian|t4be|t4tbe|t5be|t5tbe|txscalebe:-EB}\"\n+#define CC1_SPEC \"\" EXTRA_CC1_SPEC\n+\n+/* Translate an explicit -mbig-endian as an explicit -EB to assembler\n+   and linker, and pass abi options matching the target expectations\n+   or command-line requests.  */\n+#define VXWORKS_ENDIAN_SPEC \"%{mbig-endian:-EB}\"\n+\n+#if defined (TARGET_BPABI_CPP_BUILTINS)\n+#define MAYBE_ASM_ABI_SPEC \\\n+  \"%{mabi=apcs-gnu|mabi=atpcs:-meabi=gnu;:-meabi=5}\" TARGET_FIX_V4BX_SPEC\n+#else\n+#define MAYBE_ASM_ABI_SPEC\n+#endif\n \n #undef SUBTARGET_EXTRA_ASM_SPEC\n-#define SUBTARGET_EXTRA_ASM_SPEC VXWORKS_ENDIAN_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC MAYBE_ASM_ABI_SPEC \" \" VXWORKS_ENDIAN_SPEC\n \n #undef LINK_SPEC\n #define LINK_SPEC VXWORKS_LINK_SPEC \" \" VXWORKS_ENDIAN_SPEC\n@@ -89,6 +124,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC VXWORKS_ENDFILE_SPEC\n \n+/* For exceptions, pre VX7 uses DWARF2 info, VX7 uses ARM unwinding.  */\n+#undef  DWARF2_UNWIND_INFO\n+#define DWARF2_UNWIND_INFO (!TARGET_VXWORKS7)\n+\n+#undef ARM_TARGET2_DWARF_FORMAT\n+#define ARM_TARGET2_DWARF_FORMAT \\\n+  (TARGET_VXWORKS_RTP ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n+\n /* There is no default multilib.  */\n #undef MULTILIB_DEFAULTS\n "}, {"sha": "14aed0b495ed2f0799db3a10dd63c8afad6a00af", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -1,3 +1,14 @@\n+2017-08-01  Jerome Lambourg  <lambourg@adacore.com>\n+            Doug Rupp  <rupp@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7\n+\tas well as arm-wrs-vxworks.\n+\t* config/arm/t-vxworks7: New file.  Add unwind-arm-vxworks.c to\n+\tLIB2ADDEH.\n+\t* config/arm/unwind-arm-vxworks.c: New file. Provide dummy\n+\t__exidx_start and __exidx_end for downloadable modules.\n+\n 2017-08-01  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/t-vxworks (LIBGCC2_INCLUDES): Start with -I. after -nostdinc."}, {"sha": "9556c77cddebf85a85ee06368a98148411ab5691", "filename": "libgcc/config.host", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -388,9 +388,18 @@ arc*-*-linux*)\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \textra_parts=\"$extra_parts crttls.o\"\n \t;;\n-arm-wrs-vxworks)\n+arm-wrs-vxworks|arm-wrs-vxworks7)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n+\tcase ${host} in\n+\t*-*-vxworks7)\n+\t  # Note that arm/t-bpabi will reset the LIB2ADDEH macro.\n+\t  # This is intentional.\n+\t  tmake_file=\"$tmake_file arm/t-bpabi arm/t-vxworks7\"\n+\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n+\t  unwind_header=config/arm/unwind-arm.h\n+\t  ;;\n+\tesac\n \t;;\n arm*-*-freebsd*)                # ARM FreeBSD EABI\n \ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix arm/t-elf\""}, {"sha": "bead3369a598fde34a8c03f561562eec1673471d", "filename": "libgcc/config/arm/t-vxworks7", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig%2Farm%2Ft-vxworks7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig%2Farm%2Ft-vxworks7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-vxworks7?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -0,0 +1 @@\n+LIB2ADDEH += $(srcdir)/config/arm/unwind-arm-vxworks.c"}, {"sha": "ed23ab9fc3c25f8871acc7ceb91f8e3be3e3bf9a", "filename": "libgcc/config/arm/unwind-arm-vxworks.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c?ref=0b458d2bc8aaff5effc3ff64d9c2a38b2cb9d92e", "patch": "@@ -0,0 +1,33 @@\n+/* Support for ARM EABI unwinding in VxWorks Downloadable Kernel Modules.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if defined(__vxworks) && !defined (__RTP__)\n+/* Vxworks for ARM uses __gnu_Unwind_Find_exidx to retrieve the exception\n+   table for downloadable kernel modules.  As those modules are only partially\n+   linked, the linker won't generate __exidx_start|end, but the two symbols\n+   are still used in alternate paths from unwind-arm-common.inc.\n+\n+   As we don't rely on them, but still need the symbols, we define dummy\n+   values here.  */\n+void *__exidx_start __attribute__((__visibility__ (\"hidden\")));\n+void *__exidx_end __attribute__((__visibility__ (\"hidden\")));\n+#endif"}]}