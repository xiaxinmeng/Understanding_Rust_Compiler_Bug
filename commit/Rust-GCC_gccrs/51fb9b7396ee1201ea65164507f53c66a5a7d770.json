{"sha": "51fb9b7396ee1201ea65164507f53c66a5a7d770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFmYjliNzM5NmVlMTIwMWVhNjUxNjQ1MDdmNTNjNjZhNWE3ZDc3MA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-11-21T11:45:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:45:44Z"}, "message": "frontend.adb (Frontend): Capture restrictions from config files\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* frontend.adb (Frontend): Capture restrictions from config files\n\t* lib-load.adb (Load_Unit): Save/set/restore restriction pragma\n\tinformation\n\t* lib-xref.adb (Generate_Reference): Fix handling of obsolescent\n\treferences. This was noticed during debugging, but it is not\n\tknown if it causes real bugs.\n\t* restrict.ads, restrict.adb: New routines to save/set/restore\n\tnon-partition-wide restrictions.\n\t* s-rident.ads: Comment changes for new handling of\n\tNo_Elaboration_Code\n\t* sem.adb (Sem): Save/Set/Restore non-partition-wide restrictions\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Remove incomplete\n\tattempt to save/restore non-partition-wide restrictions (now\n\tthis work is all done in Sem).\n\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n\tSpecial handling for restriction No_Elaboration_Code.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document new handling of restrictions pragmas.\n\nFrom-SVN: r181566", "tree": {"sha": "fb9bebfb673ba0712a1a7bf85196eb0f3f51c752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9bebfb673ba0712a1a7bf85196eb0f3f51c752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51fb9b7396ee1201ea65164507f53c66a5a7d770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fb9b7396ee1201ea65164507f53c66a5a7d770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fb9b7396ee1201ea65164507f53c66a5a7d770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fb9b7396ee1201ea65164507f53c66a5a7d770/comments", "author": null, "committer": null, "parents": [{"sha": "56272abec68769b5638003ec3227a8097a60b321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56272abec68769b5638003ec3227a8097a60b321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56272abec68769b5638003ec3227a8097a60b321"}], "stats": {"total": 350, "additions": 288, "deletions": 62}, "files": [{"sha": "75806a6de23c670536d51db5d139ce765bb8797c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -1,3 +1,26 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* frontend.adb (Frontend): Capture restrictions from config files\n+\t* lib-load.adb (Load_Unit): Save/set/restore restriction pragma\n+\tinformation\n+\t* lib-xref.adb (Generate_Reference): Fix handling of obsolescent\n+\treferences. This was noticed during debugging, but it is not\n+\tknown if it causes real bugs.\n+\t* restrict.ads, restrict.adb: New routines to save/set/restore\n+\tnon-partition-wide restrictions.\n+\t* s-rident.ads: Comment changes for new handling of\n+\tNo_Elaboration_Code\n+\t* sem.adb (Sem): Save/Set/Restore non-partition-wide restrictions\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Remove incomplete\n+\tattempt to save/restore non-partition-wide restrictions (now\n+\tthis work is all done in Sem).\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tSpecial handling for restriction No_Elaboration_Code.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document new handling of restrictions pragmas.\n+\n 2011-11-21  Pascal Obry  <obry@adacore.com>\n \n \t* s-taprop-linux.adb (Initialize_Lock): Do not allocate a cond"}, {"sha": "35e7d9e769b0ac4bcaacacd7f2cb8106ec400f03", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -226,6 +226,12 @@ begin\n       Opt.Suppress_Options := Scope_Suppress;\n    end;\n \n+   --  This is where we can capture the value of the compilation unit specific\n+   --  restrictions that have been set by the config pragma files (or from\n+   --  Targparm), for later restoration when processing e.g. subunits.\n+\n+   Save_Config_Cunit_Boolean_Restrictions;\n+\n    --  If there was a -gnatem switch, initialize the mappings of unit names to\n    --  file names and of file names to path names from the mapping file.\n "}, {"sha": "266aa7d8f1571f1e7800bcc77b4166ae4723e819", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -11805,7 +11805,7 @@ recognized by GNAT:\n @section Handling of Configuration Pragmas\n \n Configuration pragmas may either appear at the start of a compilation\n-unit, in which case they apply only to that unit, or they may apply to\n+unit, or they can appear in a configuration pragma file to apply to\n all compilations performed in a given compilation environment.\n \n GNAT also provides the @code{gnatchop} utility to provide an automatic\n@@ -11816,6 +11816,30 @@ However, for most purposes, it will be more convenient to edit the\n @file{gnat.adc} file that contains configuration pragmas directly,\n as described in the following section.\n \n+In the case of @code{Restrictions} pragmas appearing as configuration\n+pragmas in individual compilation units, the exact handling depends on\n+the type of restriction.\n+\n+Restrictions that require partition-wide consistency (like\n+@code{No_Tasking}) are\n+recognized wherever they appear\n+and can be freely inherited, e.g. from a with'ed unit to the with'ing\n+unit. This makes sense since the binder will in any case insist on seeing\n+consistent use, so any unit not conforming to any restrictions that are\n+anywhere in the partition will be rejected, and you might as well find\n+that out at compile time rather than at bind time.\n+\n+For restrictions that do not require partition-wide consistency, e.g.\n+SPARK or No_Implementation_Attributes, in general the restriction applies\n+only to the unit in which the pragma appears, and not to any other units.\n+\n+The exception is No_Elaboration_Code which always applies to the entire\n+object file from a compilation, i.e. to the body, spec, and all subunits.\n+This restriction can be specified in a configuration pragma file, or it\n+can be on the body and/or the spec (in eithe case it applies to all the\n+relevant units). It can appear on a subunit only if it has previously\n+appeared in the body of spec.\n+\n @node The Configuration Pragmas Files\n @section The Configuration Pragmas Files\n @cindex @file{gnat.adc}"}, {"sha": "0ac729ece6c4f209855e6bb7bd24e91008d548fa", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -359,9 +359,25 @@ package body Lib.Load is\n       Src_Ind      : Source_File_Index;\n       Save_PMES    : constant Boolean := Parsing_Main_Extended_Source;\n \n+      Save_Cunit_Restrictions : constant Save_Cunit_Boolean_Restrictions :=\n+                                  Cunit_Boolean_Restrictions_Save;\n+      --  Save current restrictions for restore at end\n+\n    begin\n       Parsing_Main_Extended_Source := PMES;\n \n+      --  Initialize restrictions to config restrictions for unit to load if\n+      --  it is part of the main extended source, otherwise reset them.\n+\n+      --  Note: it's a bit odd but PMES is False for subunits, which is why\n+      --  we have the OR here. Should be investigated some time???\n+\n+      if PMES or Subunit then\n+         Restore_Config_Cunit_Boolean_Restrictions;\n+      else\n+         Reset_Cunit_Boolean_Restrictions;\n+      end if;\n+\n       --  If renamings are allowed and we have a child unit name, then we\n       --  must first load the parent to deal with finding the real name.\n       --  Retain the with_clause that names the child, so that if it is\n@@ -782,6 +798,7 @@ package body Lib.Load is\n \n       <<Done>>\n       Parsing_Main_Extended_Source := Save_PMES;\n+      Cunit_Boolean_Restrictions_Restore (Save_Cunit_Restrictions);\n       return Unum;\n    end Load_Unit;\n "}, {"sha": "0e8337f70c6d1a734781e0d1c434104a898f0d82", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -577,14 +577,16 @@ package body Lib.Xref is\n       --  doing in such cases. For example the calls in Ada.Characters.Handling\n       --  to its own obsolescent subprograms are just fine.\n \n-      --  In any case we do not generate warnings within the extended source\n-      --  unit of the entity in question, since we assume the source unit\n-      --  itself knows what is going on (and for sure we do not want silly\n-      --  warnings, e.g. on the end line of an obsolescent procedure body).\n+      --  In any case we only generate warnings if we are in the extended main\n+      --  source unit, and the entity itself is not in the extended main source\n+      --  unit, since we assume the source unit itself knows what is going on\n+      --  (and for sure we do not want silly warnings, e.g. on the end line of\n+      --  an obsolescent procedure body).\n \n       if Is_Obsolescent (E)\n         and then not GNAT_Mode\n         and then not In_Extended_Main_Source_Unit (E)\n+        and then In_Extended_Main_Source_Unit (N)\n       then\n          Check_Restriction (No_Obsolescent_Features, N);\n "}, {"sha": "df2ec7a888c25160530aa3ce731193422ef810f5", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -41,6 +41,9 @@ with Uname;    use Uname;\n \n package body Restrict is\n \n+   Config_Cunit_Boolean_Restrictions : Save_Cunit_Boolean_Restrictions;\n+   --  Save compilation unit restrictions set by config pragma files\n+\n    Restricted_Profile_Result : Boolean := False;\n    --  This switch memoizes the result of Restricted_Profile function calls for\n    --  improved efficiency. Valid only if Restricted_Profile_Cached is True.\n@@ -100,6 +103,17 @@ package body Restrict is\n       end if;\n    end Abort_Allowed;\n \n+   ----------------------------------------\n+   -- Add_To_Config_Boolean_Restrictions --\n+   ----------------------------------------\n+\n+   procedure Add_To_Config_Boolean_Restrictions (R : Restriction_Id) is\n+   begin\n+      Config_Cunit_Boolean_Restrictions (R) := True;\n+   end Add_To_Config_Boolean_Restrictions;\n+   --  Add specified restriction to stored configuration boolean restrictions.\n+   --  This is used for handling the special case of No_Elaboration_Code.\n+\n    -------------------------\n    -- Check_Compiler_Unit --\n    -------------------------\n@@ -498,7 +512,9 @@ package body Restrict is\n \n       Update_Restrictions (Restrictions);\n \n-      --  If in main extended unit, update main restrictions as well\n+      --  If in main extended unit, update main restrictions as well. Note\n+      --  that as usual we check for Main_Unit explicitly to deal with the\n+      --  case of configuration pragma files.\n \n       if Current_Sem_Unit = Main_Unit\n         or else In_Extended_Main_Source_Unit (N)\n@@ -642,6 +658,16 @@ package body Restrict is\n       for J in Cunit_Boolean_Restrictions loop\n          Restrictions.Set (J) := R (J);\n       end loop;\n+\n+      --  If No_Elaboration_Code set in configuration restrictions, and we\n+      --  in the main extended source, then set it here now. This is part of\n+      --  the special processing for No_Elaboration_Code.\n+\n+      if In_Extended_Main_Source_Unit (Cunit_Entity (Current_Sem_Unit))\n+        and then Config_Cunit_Boolean_Restrictions (No_Elaboration_Code)\n+      then\n+         Restrictions.Set (No_Elaboration_Code) := True;\n+      end if;\n    end Cunit_Boolean_Restrictions_Restore;\n \n    -------------------------------------\n@@ -656,7 +682,6 @@ package body Restrict is\n    begin\n       for J in Cunit_Boolean_Restrictions loop\n          R (J) := Restrictions.Set (J);\n-         Restrictions.Set (J) := False;\n       end loop;\n \n       return R;\n@@ -772,6 +797,26 @@ package body Restrict is\n       return New_Name;\n    end Process_Restriction_Synonyms;\n \n+   --------------------------------------\n+   -- Reset_Cunit_Boolean_Restrictions --\n+   --------------------------------------\n+\n+   procedure Reset_Cunit_Boolean_Restrictions is\n+   begin\n+      for J in Cunit_Boolean_Restrictions loop\n+         Restrictions.Set (J) := False;\n+      end loop;\n+   end Reset_Cunit_Boolean_Restrictions;\n+\n+   -----------------------------------------------\n+   -- Restore_Config_Cunit_Boolean_Restrictions --\n+   -----------------------------------------------\n+\n+   procedure Restore_Config_Cunit_Boolean_Restrictions is\n+   begin\n+      Cunit_Boolean_Restrictions_Restore (Config_Cunit_Boolean_Restrictions);\n+   end Restore_Config_Cunit_Boolean_Restrictions;\n+\n    ------------------------\n    -- Restricted_Profile --\n    ------------------------\n@@ -1004,6 +1049,15 @@ package body Restrict is\n       end if;\n    end Same_Unit;\n \n+   --------------------------------------------\n+   -- Save_Config_Cunit_Boolean_Restrictions --\n+   --------------------------------------------\n+\n+   procedure Save_Config_Cunit_Boolean_Restrictions is\n+   begin\n+      Config_Cunit_Boolean_Restrictions := Cunit_Boolean_Restrictions_Save;\n+   end Save_Config_Cunit_Boolean_Restrictions;\n+\n    ------------------------------\n    -- Set_Hidden_Part_In_SPARK --\n    ------------------------------\n@@ -1070,23 +1124,6 @@ package body Restrict is\n       N : Node_Id)\n    is\n    begin\n-      --  Restriction No_Elaboration_Code must be enforced on a unit by unit\n-      --  basis. Hence, we avoid setting the restriction when processing an\n-      --  unit which is not the main one being compiled (or its corresponding\n-      --  spec). It can happen, for example, when processing an inlined body\n-      --  (the package containing the inlined subprogram is analyzed,\n-      --  including its pragma Restrictions).\n-\n-      --  This seems like a very nasty kludge??? This is not the only per unit\n-      --  restriction why is this treated specially ???\n-\n-      if R = No_Elaboration_Code\n-        and then Current_Sem_Unit /= Main_Unit\n-        and then Cunit (Current_Sem_Unit) /= Library_Unit (Cunit (Main_Unit))\n-      then\n-         return;\n-      end if;\n-\n       Restrictions.Set (R) := True;\n \n       if Restricted_Profile_Cached and Restricted_Profile_Result then"}, {"sha": "5d03f831267c1a97ddfd785e25a8d2e594c24557", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -71,10 +71,6 @@ package Restrict is\n    --  set if Restriction_Warnings is set, so this does not look like a\n    --  restriction to the binder.\n \n-   type Save_Cunit_Boolean_Restrictions is private;\n-   --  Type used for saving and restoring compilation unit restrictions.\n-   --  See Cunit_Boolean_Restrictions_[Save|Restore] subprograms.\n-\n    --  The following declarations establish a mapping between restriction\n    --  identifiers, and the names of corresponding restriction library units.\n \n@@ -312,22 +308,6 @@ package Restrict is\n    --  [Wide_]Wide_Character or [Wide_]Wide_String, then the restriction\n    --  violation is recorded, and an appropriate message given.\n \n-   function Cunit_Boolean_Restrictions_Save\n-     return Save_Cunit_Boolean_Restrictions;\n-   --  This function saves the compilation unit restriction settings, and\n-   --  resets them to False. This is used e.g. when compiling a with'ed\n-   --  unit to avoid incorrectly propagating restrictions. Note that it\n-   --  would not be wrong to also save and reset the partition restrictions,\n-   --  since the binder would catch inconsistencies, but actually it is a\n-   --  good thing to acquire restrictions from with'ed units if they are\n-   --  required to be partition wide, because it allows the restriction\n-   --  violation message to be given at compile time instead of link time.\n-\n-   procedure Cunit_Boolean_Restrictions_Restore\n-     (R : Save_Cunit_Boolean_Restrictions);\n-   --  This is the corresponding restore procedure to restore restrictions\n-   --  previously saved by Cunit_Boolean_Restrictions_Save.\n-\n    function Get_Restriction_Id\n      (N : Name_Id) return Restriction_Id;\n    --  Given an identifier name, determines if it is a valid restriction\n@@ -435,6 +415,71 @@ package Restrict is\n    --  Tests if tasking operations are allowed by the current restrictions\n    --  settings. For tasking to be allowed Max_Tasks must be non-zero.\n \n+   ----------------------------------------------\n+   -- Handling of Boolean Compilation Switches --\n+   ----------------------------------------------\n+\n+   --  The following declarations are used for proper saving and restoring of\n+   --  restrictions for separate compilation units. There are two cases:\n+\n+   --    For partition-wide restrictions, we just let the restrictions pragmas\n+   --    pile up, and we never reset them. We might as well detect what we can\n+   --    at compile time. If e.g. a with'ed unit has a restriction for one of\n+   --    the partition-wide restrictions, then the binder will enforce it on\n+   --    all units in the partition, including the unit with the WITH. Although\n+   --    it would not be wrong to leave this till bind time, we might as well\n+   --    flag it earlier at compile time.\n+\n+   --    For non-partition-wide restrictions, we have quite a different state\n+   --    of affairs. Here it would be quite wrong to carry a restriction from\n+   --    a with'ed unit to another with'ed unit, or from a package spec to the\n+   --    package body. This means that we have to reset these non-partition\n+   --    wide restrictions at the start of each separate compilation unit. For\n+   --    units in the extended main program, we need to reset them all to the\n+   --    values set by the configuration pragma file(s). For units not in the\n+   --    extended main program, e.g. with'ed units, we might as well reset all\n+   --    of these restrictions to off (False). The actual initial values will\n+   --    be taken from the config files active when those units are compiled\n+   --    as main units.\n+\n+   type Save_Cunit_Boolean_Restrictions is private;\n+   --  Type used for saving and restoring compilation unit restrictions.\n+\n+   function Cunit_Boolean_Restrictions_Save\n+     return Save_Cunit_Boolean_Restrictions;\n+   --  This function saves the compilation unit restriction settings, leaving\n+   --  then unchanged. This is used e.g. at the start of processing a context\n+   --  clause, so that the main unit restrictions can be restored after all\n+   --  the with'ed units have been processed.\n+\n+   procedure Cunit_Boolean_Restrictions_Restore\n+     (R : Save_Cunit_Boolean_Restrictions);\n+   --  This is the corresponding restore procedure to restore restrictions\n+   --  previously saved by Cunit_Boolean_Restrictions_Save. However it does\n+   --  not reset No_Elaboration_Code, this stays set if it was set before\n+   --  the call, and also if it is set before the call, then the Config\n+   --  setting is also updated to include this restriction. This is what\n+   --  implements the special handling of No_Elaboration_Code.\n+\n+   procedure Save_Config_Cunit_Boolean_Restrictions;\n+   --  This saves the current compilation unit restrictions in an internal\n+   --  variable, and leaves them unchanged. This is called immediately after\n+   --  processing the configuration file pragmas, to record the restrictions\n+   --  set by these configuration file pragmas.\n+\n+   procedure Restore_Config_Cunit_Boolean_Restrictions;\n+   --  This restores the value saved by the previous call to save config values\n+   --  saved by Save_Config_Cunit_Boolean_Restrictions. It is called at the\n+   --  start of processing a new unit that is part of the main sources (e.g.\n+   --  a package spec when the main unit is a package body).\n+\n+   procedure Reset_Cunit_Boolean_Restrictions;\n+   --  Turns off all non-partition-wide boolean restrictions\n+\n+   procedure Add_To_Config_Boolean_Restrictions (R : Restriction_Id);\n+   --  Add specified restriction to stored configuration boolean restrictions.\n+   --  This is used for handling the special case of No_Elaboration_Code.\n+\n private\n    type Save_Cunit_Boolean_Restrictions is\n      array (Cunit_Boolean_Restrictions) of Boolean;"}, {"sha": "d067f3d7f4feebe661195abec7806f180524d015", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -124,7 +124,15 @@ package System.Rident is\n \n       No_Default_Initialization,               -- GNAT\n \n-      --  The following cases do not require consistency checking\n+      --  The following cases do not require consistency checking and if used\n+      --  as a configuration pragma within a specific unit, apply only to that\n+      --  unit (e.g. if used in the package spec, do not apply to the body)\n+\n+      --  Note: No_Elaboration_Code is handled specially. Like the other\n+      --  non-partition-wide restrictions, it can only be set in a unit that\n+      --  is part of the extended main source unit (body/spec/subunits). But\n+      --  it is sticky, in that if it is found anywhere within any of these\n+      --  units, it applies to all units in this extended main source.\n \n       Immediate_Reclamation,                   -- (RM H.4(10))\n       No_Implementation_Aspect_Specifications, -- Ada 2012 AI-241\n@@ -202,7 +210,7 @@ package System.Rident is\n    --  Boolean restrictions that are not checked for partition consistency\n    --  and that thus apply only to the current unit. Note that for these\n    --  restrictions, the compiler does not apply restrictions found in\n-   --  with'ed units, parent specs etc. to the main unit.\n+   --  with'ed units, parent specs etc. to the main unit, and vice versa.\n \n    subtype All_Parameter_Restrictions is\n      Restriction_Id range"}, {"sha": "2a273609a09b9f4aca795ec46be86f152aab4943", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -35,6 +35,7 @@ with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Nlists;   use Nlists;\n with Output;   use Output;\n+with Restrict; use Restrict;\n with Sem_Attr; use Sem_Attr;\n with Sem_Ch2;  use Sem_Ch2;\n with Sem_Ch3;  use Sem_Ch3;\n@@ -1361,6 +1362,11 @@ package body Sem is\n       --  Variable used to save values of config switches while we analyze the\n       --  new unit, to be restored on exit for proper recursive behavior.\n \n+      Save_Cunit_Restrictions : Save_Cunit_Boolean_Restrictions;\n+      --  Used to save non-partition wide restrictions before processing new\n+      --  unit. All with'ed units are analyzed with config restrictions reset\n+      --  and we need to restore these saved values at the end.\n+\n       procedure Do_Analyze;\n       --  Procedure to analyze the compilation unit. This is called more than\n       --  once when the high level optimizer is activated.\n@@ -1442,11 +1448,27 @@ package body Sem is\n       In_Spec_Expression := False;\n \n       Set_Comes_From_Source_Default (False);\n+\n+      --  Save current config switches and reset then appropriately\n+\n       Save_Opt_Config_Switches (Save_Config_Switches);\n       Set_Opt_Config_Switches\n         (Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit)),\n          Current_Sem_Unit = Main_Unit);\n \n+      --  Save current non-partition-wide restrictions\n+\n+      Save_Cunit_Restrictions := Cunit_Boolean_Restrictions_Save;\n+\n+      --  For unit in main extended unit, we reset the configuration values\n+      --  for the non-partition-wide restrictions. For other units reset them.\n+\n+      if In_Extended_Main_Source_Unit (Comp_Unit) then\n+         Restore_Config_Cunit_Boolean_Restrictions;\n+      else\n+         Reset_Cunit_Boolean_Restrictions;\n+      end if;\n+\n       --  Only do analysis of unit that has not already been analyzed\n \n       if not Analyzed (Comp_Unit) then\n@@ -1511,6 +1533,11 @@ package body Sem is\n       Outer_Generic_Scope  := S_Outer_Gen_Scope;\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);\n+\n+      --  Deal with restore of restrictions\n+\n+      Cunit_Boolean_Restrictions_Restore (Save_Cunit_Restrictions);\n+\n       Expander_Mode_Restore;\n \n       if Debug_Unit_Walk then"}, {"sha": "e5afc1b8b2f3f40536726f82dc637f3ca6b4e58c", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -467,7 +467,6 @@ package body Sem_Ch10 is\n                --  generated with clauses or limited with clauses. Note that\n                --  we examine with clauses having pragmas Elaborate or\n                --  Elaborate_All applied to them due to cases such as:\n-               --\n \n                --     with Pack;\n                --     with Pack;\n@@ -725,7 +724,12 @@ package body Sem_Ch10 is\n             return;\n \n          else\n+            --  Analyze the package spec\n+\n             Semantics (Lib_Unit);\n+\n+            --  Check for unused with's\n+\n             Check_Unused_Withs (Get_Cunit_Unit_Number (Lib_Unit));\n \n             --  Verify that the library unit is a package declaration\n@@ -857,8 +861,6 @@ package body Sem_Ch10 is\n \n          declare\n             Save_Style_Check : constant Boolean := Style_Check;\n-            Save_C_Restrict  : constant Save_Cunit_Boolean_Restrictions :=\n-                                 Cunit_Boolean_Restrictions_Save;\n \n          begin\n             if not GNAT_Mode then\n@@ -867,8 +869,10 @@ package body Sem_Ch10 is\n \n             Semantics (Parent_Spec (Unit_Node));\n             Version_Update (N, Parent_Spec (Unit_Node));\n+\n+            --  Restore style check settings\n+\n             Style_Check := Save_Style_Check;\n-            Cunit_Boolean_Restrictions_Restore (Save_C_Restrict);\n          end;\n       end if;\n \n@@ -1052,8 +1056,6 @@ package body Sem_Ch10 is\n             Un    : Unit_Number_Type;\n \n             Save_Style_Check : constant Boolean := Style_Check;\n-            Save_C_Restrict  : constant Save_Cunit_Boolean_Restrictions :=\n-                                 Cunit_Boolean_Restrictions_Save;\n \n          begin\n             Item := First (Context_Items (N));\n@@ -1122,8 +1124,9 @@ package body Sem_Ch10 is\n                Next (Item);\n             end loop;\n \n+            --  Restore style checks settings\n+\n             Style_Check := Save_Style_Check;\n-            Cunit_Boolean_Restrictions_Restore (Save_C_Restrict);\n          end;\n       end if;\n \n@@ -1641,7 +1644,7 @@ package body Sem_Ch10 is\n       --  subunit, and that the current unit is one of its parents which was\n       --  being analyzed to provide the needed context for the analysis of the\n       --  subunit. In this case we analyze the subunit and continue with the\n-      --  parent, without looking a subsequent subunits.\n+      --  parent, without looking at subsequent subunits.\n \n       if Is_Loaded (Subunit_Name) then\n \n@@ -2351,7 +2354,6 @@ package body Sem_Ch10 is\n       --  warnings if we have this definite error.\n \n       Save_Style_Check : constant Boolean := Opt.Style_Check;\n-      Save_C_Restrict  : Save_Cunit_Boolean_Restrictions;\n \n    begin\n       U := Unit (Library_Unit (N));\n@@ -2388,10 +2390,6 @@ package body Sem_Ch10 is\n          end if;\n       end if;\n \n-      --  Save current restriction set, does not apply to with'ed unit\n-\n-      Save_C_Restrict := Cunit_Boolean_Restrictions_Save;\n-\n       --  Several actions are skipped for dummy packages (those supplied for\n       --  with's where no matching file could be found). Such packages are\n       --  identified by the Sloc value being set to No_Location.\n@@ -2591,10 +2589,9 @@ package body Sem_Ch10 is\n          end if;\n       end if;\n \n-      --  Restore style checks and restrictions\n+      --  Restore style checks\n \n       Style_Check := Save_Style_Check;\n-      Cunit_Boolean_Restrictions_Restore (Save_C_Restrict);\n \n       --  Record the reference, but do NOT set the unit as referenced, we want\n       --  to consider the unit as unreferenced if this is the only reference"}, {"sha": "14961cbb940e4daa6cebe67c632712e11465073e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51fb9b7396ee1201ea65164507f53c66a5a7d770/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=51fb9b7396ee1201ea65164507f53c66a5a7d770", "patch": "@@ -5350,6 +5350,46 @@ package body Sem_Prag is\n                   Check_Restriction (No_Implementation_Restrictions, Arg);\n                end if;\n \n+               --  Special processing for No_Elaboration_Code restriction\n+\n+               if R_Id = No_Elaboration_Code then\n+\n+                  --  Restriction is only recognized within a configuration\n+                  --  pragma file, or within a unit of the main extended\n+                  --  program. Note: the test for Main_Unit is needed to\n+                  --  properly include the case of configuration pragma files.\n+\n+                  if not (Current_Sem_Unit = Main_Unit\n+                           or else In_Extended_Main_Source_Unit (N))\n+                  then\n+                     return;\n+\n+                  --  Don't allow in a subunit unless already specified in\n+                  --  body or spec.\n+\n+                  elsif Nkind (Parent (N)) = N_Compilation_Unit\n+                    and then Nkind (Unit (Parent (N))) = N_Subunit\n+                    and then not Restriction_Active (No_Elaboration_Code)\n+                  then\n+                     Error_Msg_N\n+                       (\"invalid specification of \"\"No_Elaboration_Code\"\"\",\n+                        N);\n+                     Error_Msg_N\n+                       (\"\\restriction cannot be specified in a subunit\", N);\n+                     Error_Msg_N\n+                       (\"\\unless also specified in body or spec\", N);\n+                     return;\n+\n+                  --  If we have a No_Elaboration_Code pragma that we\n+                  --  accept, then it needs to be added to the configuration\n+                  --  restrcition set so that we get proper application to\n+                  --  other units in the main extended source as required.\n+\n+                  else\n+                     Add_To_Config_Boolean_Restrictions (No_Elaboration_Code);\n+                  end if;\n+               end if;\n+\n                --  If this is a warning, then set the warning unless we already\n                --  have a real restriction active (we never want a warning to\n                --  override a real restriction)."}]}