{"sha": "9a6c37e6ae520534993ef76dd45d016c8c86db21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2YzM3ZTZhZTUyMDUzNDk5M2VmNzZkZDQ1ZDAxNmM4Yzg2ZGIyMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-11T09:35:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-11T09:36:24Z"}, "message": "reassoc: Reassociate integral multiplies [PR95867]\n\nFor floating point multiply, we have nice code in reassoc to reassociate\nmultiplications to almost optimal sequence of as few multiplications as\npossible (or library call), but for integral types we just give up\nbecause there is no __builtin_powi* for those types.\n\nAs there is no library routine we could use, instead of adding new internal\ncall just to hold it temporarily and then lower to multiplications again,\nthis patch for the integral types calls into the sincos pass routine that\nexpands it into multiplications right away.\n\n2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/95867\n\t* tree-ssa-math-opts.h: New header.\n\t* tree-ssa-math-opts.c: Include tree-ssa-math-opts.h.\n\t(powi_as_mults): No longer static.  Use build_one_cst instead of\n\tbuild_real.  Formatting fix.\n\t* tree-ssa-reassoc.c: Include tree-ssa-math-opts.h.\n\t(attempt_builtin_powi): Handle multiplication reassociation without\n\tpowi_fndecl using powi_as_mults.\n\t(reassociate_bb): For integral types don't require\n\t-funsafe-math-optimizations to call attempt_builtin_powi.\n\n\t* gcc.dg/tree-ssa/pr95867.c: New test.", "tree": {"sha": "d0035483cb49261a3fcdf2b3122adb700f585f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0035483cb49261a3fcdf2b3122adb700f585f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a6c37e6ae520534993ef76dd45d016c8c86db21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6c37e6ae520534993ef76dd45d016c8c86db21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6c37e6ae520534993ef76dd45d016c8c86db21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6c37e6ae520534993ef76dd45d016c8c86db21/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9febe9e4be7812519258ea3ed4f38bbc1a61624b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9febe9e4be7812519258ea3ed4f38bbc1a61624b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9febe9e4be7812519258ea3ed4f38bbc1a61624b"}], "stats": {"total": 124, "additions": 102, "deletions": 22}, "files": [{"sha": "8ab369079ff3f11f6a230509cb4071af7d14e7b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95867.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95867.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95867.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95867.c?ref=9a6c37e6ae520534993ef76dd45d016c8c86db21", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/95867 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" \\\\* \" 13 \"optimized\" } } */\n+\n+#define A n * n * n * n * n * n * n * n\n+#define B A * A * A * A * A * A * A * A\n+#define C B * B * B * B * B * B * B * B\n+\n+unsigned\n+foo (unsigned n)\n+{\n+  return C * B * B * A * n * n * n * n * n;\n+}"}, {"sha": "74a16b66223d07726a898d9101d7f2af8777c603", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9a6c37e6ae520534993ef76dd45d016c8c86db21", "patch": "@@ -115,6 +115,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-eh.h\"\n #include \"targhooks.h\"\n #include \"domwalk.h\"\n+#include \"tree-ssa-math-opts.h\"\n \n /* This structure represents one basic block that either computes a\n    division, or is a common dominator for basic block that compute a\n@@ -1527,7 +1528,7 @@ powi_as_mults_1 (gimple_stmt_iterator *gsi, location_t loc, tree type,\n /* Convert ARG0**N to a tree of multiplications of ARG0 with itself.\n    This function needs to be kept in sync with powi_cost above.  */\n \n-static tree\n+tree\n powi_as_mults (gimple_stmt_iterator *gsi, location_t loc,\n \t       tree arg0, HOST_WIDE_INT n)\n {\n@@ -1536,9 +1537,9 @@ powi_as_mults (gimple_stmt_iterator *gsi, location_t loc,\n   tree target;\n \n   if (n == 0)\n-    return build_real (type, dconst1);\n+    return build_one_cst (type);\n \n-  memset (cache, 0,  sizeof (cache));\n+  memset (cache, 0, sizeof (cache));\n   cache[1] = arg0;\n \n   result = powi_as_mults_1 (gsi, loc, type, (n < 0) ? -n : n, cache);"}, {"sha": "37c666a121561bf0e6d5275dcc987731604bca01", "filename": "gcc/tree-ssa-math-opts.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-math-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-math-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.h?ref=9a6c37e6ae520534993ef76dd45d016c8c86db21", "patch": "@@ -0,0 +1,26 @@\n+/* Global, SSA-based optimizations using mathematical identities.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_MATH_OPTS_H\n+#define GCC_TREE_SSA_MATH_OPTS_H\n+\n+extern tree powi_as_mults (gimple_stmt_iterator *, location_t,\n+\t\t\t   tree, HOST_WIDE_INT);\n+\n+#endif  /* GCC_TREE_SSA_MATH_OPTS_H  */"}, {"sha": "b6a09e5d9aa045a8f263b0824258441cdfe8a7f7", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 58, "deletions": 19, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6c37e6ae520534993ef76dd45d016c8c86db21/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=9a6c37e6ae520534993ef76dd45d016c8c86db21", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"case-cfn-macros.h\"\n #include \"tree-ssa-reassoc.h\"\n+#include \"tree-ssa-math-opts.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based\n     on the LLVM pass of the same name (They do some things more/less\n@@ -5976,8 +5977,8 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n   gimple *mul_stmt, *pow_stmt;\n \n   /* Nothing to do if BUILT_IN_POWI doesn't exist for this type and\n-     target.  */\n-  if (!powi_fndecl)\n+     target, unless type is integral.  */\n+  if (!powi_fndecl && !INTEGRAL_TYPE_P (type))\n     return NULL_TREE;\n \n   /* Allocate the repeated factor vector.  */\n@@ -6086,14 +6087,33 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n \t    }\n \t  else\n \t    {\n-\t      iter_result = make_temp_ssa_name (type, NULL, \"reassocpow\");\n-\t      pow_stmt = gimple_build_call (powi_fndecl, 2, rf1->repr, \n-\t\t\t\t\t    build_int_cst (integer_type_node,\n-\t\t\t\t\t\t\t   power));\n-\t      gimple_call_set_lhs (pow_stmt, iter_result);\n-\t      gimple_set_location (pow_stmt, gimple_location (stmt));\n-\t      gimple_set_uid (pow_stmt, gimple_uid (stmt));\n-\t      gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n+\t      if (INTEGRAL_TYPE_P (type))\n+\t\t{\n+\t\t  gcc_assert (power > 1);\n+\t\t  gimple_stmt_iterator gsip = gsi;\n+\t\t  gsi_prev (&gsip);\n+\t\t  iter_result = powi_as_mults (&gsi, gimple_location (stmt),\n+\t\t\t\t\t       rf1->repr, power);\n+\t\t  gimple_stmt_iterator gsic = gsi;\n+\t\t  while (gsi_stmt (gsic) != gsi_stmt (gsip))\n+\t\t    {\n+\t\t      gimple_set_uid (gsi_stmt (gsic), gimple_uid (stmt));\n+\t\t      gimple_set_visited (gsi_stmt (gsic), true);\n+\t\t      gsi_prev (&gsic);\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  iter_result = make_temp_ssa_name (type, NULL, \"reassocpow\");\n+\t\t  pow_stmt\n+\t\t    = gimple_build_call (powi_fndecl, 2, rf1->repr,\n+\t\t\t\t\t build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\tpower));\n+\t\t  gimple_call_set_lhs (pow_stmt, iter_result);\n+\t\t  gimple_set_location (pow_stmt, gimple_location (stmt));\n+\t\t  gimple_set_uid (pow_stmt, gimple_uid (stmt));\n+\t\t  gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n+\t\t}\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n@@ -6188,14 +6208,32 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n \t  /* Form a call to __builtin_powi for the maximum product\n \t     just formed, raised to the power obtained earlier.  */\n \t  rf1 = &repeat_factor_vec[j];\n-\t  iter_result = make_temp_ssa_name (type, NULL, \"reassocpow\");\n-\t  pow_stmt = gimple_build_call (powi_fndecl, 2, rf1->repr, \n-\t\t\t\t\tbuild_int_cst (integer_type_node,\n-\t\t\t\t\t\t       power));\n-\t  gimple_call_set_lhs (pow_stmt, iter_result);\n-\t  gimple_set_location (pow_stmt, gimple_location (stmt));\n-\t  gimple_set_uid (pow_stmt, gimple_uid (stmt));\n-\t  gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n+\t  if (INTEGRAL_TYPE_P (type))\n+\t    {\n+\t      gcc_assert (power > 1);\n+\t      gimple_stmt_iterator gsip = gsi;\n+\t      gsi_prev (&gsip);\n+\t      iter_result = powi_as_mults (&gsi, gimple_location (stmt),\n+\t\t\t\t\t   rf1->repr, power);\n+\t      gimple_stmt_iterator gsic = gsi;\n+\t      while (gsi_stmt (gsic) != gsi_stmt (gsip))\n+\t\t{\n+\t\t  gimple_set_uid (gsi_stmt (gsic), gimple_uid (stmt));\n+\t\t  gimple_set_visited (gsi_stmt (gsic), true);\n+\t\t  gsi_prev (&gsic);\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      iter_result = make_temp_ssa_name (type, NULL, \"reassocpow\");\n+\t      pow_stmt = gimple_build_call (powi_fndecl, 2, rf1->repr,\n+\t\t\t\t\t    build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\t   power));\n+\t      gimple_call_set_lhs (pow_stmt, iter_result);\n+\t      gimple_set_location (pow_stmt, gimple_location (stmt));\n+\t      gimple_set_uid (pow_stmt, gimple_uid (stmt));\n+\t      gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n+\t    }\n \t}\n \n       /* If we previously formed at least one other builtin_powi call,\n@@ -6522,7 +6560,8 @@ reassociate_bb (basic_block bb)\n \t\t  attempt_builtin_copysign (&ops);\n \n \t\t  if (reassoc_insert_powi_p\n-\t\t      && flag_unsafe_math_optimizations)\n+\t\t      && (flag_unsafe_math_optimizations\n+\t\t\t  || (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))))\n \t\t    powi_result = attempt_builtin_powi (stmt, &ops);\n \t\t}\n "}]}