{"sha": "57d8e34e5353358671adf5ac00f2704664312823", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkOGUzNGU1MzUzMzU4NjcxYWRmNWFjMDBmMjcwNDY2NDMxMjgyMw==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2006-02-15T09:29:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:29:59Z"}, "message": "s-taprop-posix.adb, [...] (Create_Task): Remove task adjustment code.\n\n2006-02-13  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop-posix.adb, s-taprop-vxworks.adb, s-taprop-tru64.adb, \n\ts-taprop-lynxos.adb, s-taprop-irix.adb, s-taprop-hpux-dce.adb, \n\ts-taprop-linux.adb, s-taprop-solaris.adb,\n\ts-taprop-vms.adb (Create_Task): Remove task adjustment code. This\n\tadjustement is already done when calling this routine.\n\nFrom-SVN: r111026", "tree": {"sha": "09d900d2aba5ebd3960c5ca1bbb5429059b559b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09d900d2aba5ebd3960c5ca1bbb5429059b559b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d8e34e5353358671adf5ac00f2704664312823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d8e34e5353358671adf5ac00f2704664312823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d8e34e5353358671adf5ac00f2704664312823", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d8e34e5353358671adf5ac00f2704664312823/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dd5ad55ebf62c67008e1644fc03412c4aeff810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd5ad55ebf62c67008e1644fc03412c4aeff810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd5ad55ebf62c67008e1644fc03412c4aeff810"}], "stats": {"total": 191, "additions": 28, "deletions": 163}, "files": [{"sha": "b72a82c321c224499481ca4920ddb2fe08e3d342", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -779,24 +779,13 @@ package body System.Task_Primitives.Operations is\n       Priority   : System.Any_Priority;\n       Succeeded  : out Boolean)\n    is\n-      Attributes          : aliased pthread_attr_t;\n-      Adjusted_Stack_Size : Interfaces.C.size_t;\n-      Result              : Interfaces.C.int;\n+      Attributes : aliased pthread_attr_t;\n+      Result     : Interfaces.C.int;\n \n       function Thread_Body_Access is new\n         Unchecked_Conversion (System.Address, Thread_Body);\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n-\n       Result := pthread_attr_init (Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -806,7 +795,7 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := pthread_attr_setstacksize\n-        (Attributes'Access, Adjusted_Stack_Size);\n+        (Attributes'Access, Interfaces.C.size_t (Stack_Size));\n       pragma Assert (Result = 0);\n \n       --  Since the initial signal mask of a thread is inherited from the"}, {"sha": "8b048e4725723bf4d5684292bbc82d0ff246eba7", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,19 +60,6 @@ with System.OS_Primitives;\n with System.IO;\n --  used for Put_Line\n \n-with System.Parameters;\n---  used for Size_Type\n-\n-with System.Program_Info;\n---  used for Default_Task_Stack\n---           Default_Time_Slice\n---           Stack_Guard_Pages\n---           Pthread_Sched_Signal\n---           Pthread_Arena_Size\n-\n-with System.OS_Interface;\n---  used for various type, constant, and operations\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -763,10 +750,9 @@ package body System.Task_Primitives.Operations is\n    is\n       use System.Task_Info;\n \n-      Attributes          : aliased pthread_attr_t;\n-      Sched_Param         : aliased struct_sched_param;\n-      Adjusted_Stack_Size : Interfaces.C.size_t;\n-      Result              : Interfaces.C.int;\n+      Attributes  : aliased pthread_attr_t;\n+      Sched_Param : aliased struct_sched_param;\n+      Result      : Interfaces.C.int;\n \n       function Thread_Body_Access is new\n         Unchecked_Conversion (System.Address, Thread_Body);\n@@ -779,18 +765,6 @@ package body System.Task_Primitives.Operations is\n         (System.Task_Info.Thread_Scheduling_Policy, Interfaces.C.int);\n \n    begin\n-      if Stack_Size = System.Parameters.Unspecified_Size then\n-         Adjusted_Stack_Size :=\n-           Interfaces.C.size_t (System.Program_Info.Default_Task_Stack);\n-\n-      elsif Stack_Size < Size_Type (Minimum_Stack_Size) then\n-         Adjusted_Stack_Size :=\n-           Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n-\n       Result := pthread_attr_init (Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -804,7 +778,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n \n       Result := pthread_attr_setstacksize\n-        (Attributes'Access, Adjusted_Stack_Size);\n+        (Attributes'Access, Interfaces.C.size_t (Stack_Size));\n       pragma Assert (Result = 0);\n \n       if T.Common.Task_Info /= null then"}, {"sha": "6a3596ead63780bafa9ee7bca9977d566bb7fdb1", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,9 +44,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n@@ -745,22 +742,10 @@ package body System.Task_Primitives.Operations is\n       Priority   : System.Any_Priority;\n       Succeeded  : out Boolean)\n    is\n-      Adjusted_Stack_Size : Interfaces.C.size_t;\n-\n       Attributes : aliased pthread_attr_t;\n       Result     : Interfaces.C.int;\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n-\n       Result := pthread_attr_init (Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -771,7 +756,7 @@ package body System.Task_Primitives.Operations is\n \n       Result :=\n         pthread_attr_setstacksize\n-          (Attributes'Access, Adjusted_Stack_Size);\n+          (Attributes'Access, Interfaces.C.size_t (Stack_Size));\n       pragma Assert (Result = 0);\n \n       Result :="}, {"sha": "a9b4cbbb82399d5afa4e3e0f81aa6f1a5272560b", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,9 +59,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n@@ -869,15 +866,7 @@ package body System.Task_Primitives.Operations is\n       use System.Task_Info;\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n+      Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n \n       if Stack_Base_Available then\n "}, {"sha": "6195f242c7553d8d2afd5a79e10cb8313f218087", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -64,9 +64,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -892,15 +889,7 @@ package body System.Task_Primitives.Operations is\n       use System.Task_Info;\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n+      Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n \n       if Stack_Base_Available then\n          --  If Stack Checking is supported then allocate 2 additional pages:"}, {"sha": "aa816b6746b59b3b9900d140c5404ec2cdcf270e", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,9 +61,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with System.Task_Info;\n --  to initialize Task_Info for a C thread, in function Self\n \n@@ -981,11 +978,11 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Priority);\n \n-      Result     : Interfaces.C.int;\n+      Result              : Interfaces.C.int;\n       Adjusted_Stack_Size : Interfaces.C.size_t;\n-      Opts       : Interfaces.C.int := THR_DETACHED;\n+      Opts                : Interfaces.C.int := THR_DETACHED;\n \n-      Page_Size  : constant System.Parameters.Size_Type := 4096;\n+      Page_Size           : constant System.Parameters.Size_Type := 4096;\n       --  This constant is for reserving extra space at the\n       --  end of the stack, which can be used by the stack\n       --  checking as guard page. The idea is that we need\n@@ -995,18 +992,7 @@ package body System.Task_Primitives.Operations is\n       use System.Task_Info;\n \n    begin\n-      if Stack_Size = System.Parameters.Unspecified_Size then\n-         Adjusted_Stack_Size :=\n-           Interfaces.C.size_t (Default_Stack_Size + Page_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size :=\n-           Interfaces.C.size_t (Minimum_Stack_Size + Page_Size);\n-\n-      else\n-         Adjusted_Stack_Size :=\n-           Interfaces.C.size_t (Stack_Size + Page_Size);\n-      end if;\n+      Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size + Page_Size);\n \n       --  Since the initial signal mask of a thread is inherited from the\n       --  creator, and the Environment task has all its signals masked, we"}, {"sha": "d7e602a9e546a07f30488dc1eea38107fb8ba6aa", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,9 +61,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n@@ -780,20 +777,11 @@ package body System.Task_Primitives.Operations is\n       use System.Task_Info;\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n-\n       --  Account for the Yellow Zone (2 pages) and the guard page\n       --  right above. See Hide_Yellow_Zone for the rationale.\n \n-      Adjusted_Stack_Size := Adjusted_Stack_Size + 3 * Get_Page_Size;\n+      Adjusted_Stack_Size :=\n+        Interfaces.C.size_t (Stack_Size) + 3 * Get_Page_Size;\n \n       Result := pthread_attr_init (Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);"}, {"sha": "95a93b4fa25ce4b4ff381312a6eb57dc8592cf62", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,9 +50,6 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Parameters;\n---  used for Size_Type\n-\n with System.Soft_Links;\n --  used for Get_Exc_Stack_Addr\n \n@@ -766,24 +763,13 @@ package body System.Task_Primitives.Operations is\n       Priority   : System.Any_Priority;\n       Succeeded  : out Boolean)\n    is\n-      Attributes          : aliased pthread_attr_t;\n-      Adjusted_Stack_Size : Interfaces.C.size_t;\n-      Result              : Interfaces.C.int;\n+      Attributes : aliased pthread_attr_t;\n+      Result     : Interfaces.C.int;\n \n       function Thread_Body_Access is new\n         Unchecked_Conversion (System.Address, Thread_Body);\n \n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := Interfaces.C.size_t (Stack_Size);\n-      end if;\n-\n       --  Since the initial signal mask of a thread is inherited from the\n       --  creator, we need to set our local signal mask mask all signals\n       --  during the creation operation, to make sure the new thread is\n@@ -802,7 +788,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n \n       Result := pthread_attr_setstacksize\n-        (Attributes'Access, Adjusted_Stack_Size);\n+        (Attributes'Access, Interfaces.C.size_t (Stack_Size));\n       pragma Assert (Result = 0);\n \n       --  This call may be unnecessary, not sure. ???"}, {"sha": "56a02dda238137827d8f28b4cc704f42f64debb2", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d8e34e5353358671adf5ac00f2704664312823/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=57d8e34e5353358671adf5ac00f2704664312823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,11 +40,6 @@ pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n --  tasking operations. It causes infinite loops and other problems.\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n---           ATCB components and types\n-\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n@@ -54,12 +49,6 @@ with System.Interrupt_Management;\n --           Signal_ID\n --           Initialize_Interrupts\n \n-with System.OS_Interface;\n---  used for various type, constant, and operations\n-\n-with System.Parameters;\n---  used for Size_Type\n-\n with Interfaces.C;\n \n with Unchecked_Conversion;\n@@ -866,16 +855,6 @@ package body System.Task_Primitives.Operations is\n    is\n       Adjusted_Stack_Size : size_t;\n    begin\n-      if Stack_Size = Unspecified_Size then\n-         Adjusted_Stack_Size := size_t (Default_Stack_Size);\n-\n-      elsif Stack_Size < Minimum_Stack_Size then\n-         Adjusted_Stack_Size := size_t (Minimum_Stack_Size);\n-\n-      else\n-         Adjusted_Stack_Size := size_t (Stack_Size);\n-      end if;\n-\n       --  Ask for four extra bytes of stack space so that the ATCB pointer can\n       --  be stored below the stack limit, plus extra space for the frame of\n       --  Task_Wrapper. This is so the user gets the amount of stack requested\n@@ -890,7 +869,7 @@ package body System.Task_Primitives.Operations is\n       --  ??? - we should come back and visit this so we can set the task name\n       --        to something appropriate.\n \n-      Adjusted_Stack_Size := Adjusted_Stack_Size + 2048;\n+      Adjusted_Stack_Size := size_t (Stack_Size) + 2048;\n \n       --  Since the initial signal mask of a thread is inherited from the\n       --  creator, and the Environment task has all its signals masked, we do"}]}