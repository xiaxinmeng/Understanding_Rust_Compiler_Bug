{"sha": "87aee676f2abe6163710ed4d932eaf35e5de045c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhZWU2NzZmMmFiZTYxNjM3MTBlZDRkOTMyZWFmMzVlNWRlMDQ1Yw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2001-02-28T01:25:42Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2001-02-28T01:25:42Z"}, "message": "c-common.c (walk_stmt_tree): Visit the chain of the current tree even if walk_subtrees is 0.\n\n2001-02-27  Diego Novillo  <dnovillo@redhat.com>\n\n\t* c-common.c (walk_stmt_tree): Visit the chain of the current tree\n\teven if walk_subtrees is 0.\n\t* c-semantics.c (prune_unused_decls): Return a non-null value to\n\tstop traversing the tree chain.\n\nFrom-SVN: r40106", "tree": {"sha": "2a0e66e7640bbbce0aaeac010f6b08b76136f15c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0e66e7640bbbce0aaeac010f6b08b76136f15c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87aee676f2abe6163710ed4d932eaf35e5de045c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aee676f2abe6163710ed4d932eaf35e5de045c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87aee676f2abe6163710ed4d932eaf35e5de045c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aee676f2abe6163710ed4d932eaf35e5de045c/comments", "author": null, "committer": null, "parents": [{"sha": "67935d3f86b738dcd382bedbb4373de98e1f9759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67935d3f86b738dcd382bedbb4373de98e1f9759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67935d3f86b738dcd382bedbb4373de98e1f9759"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "7d4496a77152906ef2fb3c491244cd2e1745db4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87aee676f2abe6163710ed4d932eaf35e5de045c", "patch": "@@ -1,3 +1,10 @@\n+2001-02-27  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* c-common.c (walk_stmt_tree): Visit the chain of the current tree\n+\teven if walk_subtrees is 0.\n+\t* c-semantics.c (prune_unused_decls): Return a non-null value to\n+\tstop traversing the tree chain.\n+\n 2001-02-27  DJ Delorie  <dj@redhat.com>\n \n \t* config/m68k/m68k.c (output_function_prologue): Save the new CFA"}, {"sha": "3823405aedc66b53d95a10d039f656580492d0bf", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=87aee676f2abe6163710ed4d932eaf35e5de045c", "patch": "@@ -3797,25 +3797,25 @@ walk_stmt_tree (tp, func, data)\n   if (result)\n     return result;\n \n-  /* Even if we didn't, FUNC may have decided that there was nothing\n-     interesting below this point in the tree.  */\n-  if (!walk_subtrees)\n-    return NULL_TREE;\n-\n   /* FUNC may have modified the tree, recheck that we're looking at a\n      statement node.  */\n   code = TREE_CODE (*tp);\n   if (!statement_code_p (code))\n     return NULL_TREE;\n \n-  /* Walk over all the sub-trees of this operand.  Statement nodes never\n-     contain RTL, and we needn't worry about TARGET_EXPRs.  */\n-  len = TREE_CODE_LENGTH (code);\n-\n-  /* Go through the subtrees.  We need to do this in forward order so\n-     that the scope of a FOR_EXPR is handled properly.  */\n-  for (i = 0; i < len; ++i)\n-    WALK_SUBTREE (TREE_OPERAND (*tp, i));\n+  /* Visit the subtrees unless FUNC decided that there was nothing\n+     interesting below this point in the tree.  */\n+  if (walk_subtrees)\n+    {\n+      /* Walk over all the sub-trees of this operand.  Statement nodes\n+\t never contain RTL, and we needn't worry about TARGET_EXPRs.  */\n+      len = TREE_CODE_LENGTH (code);\n+\n+      /* Go through the subtrees.  We need to do this in forward order so\n+\t that the scope of a FOR_EXPR is handled properly.  */\n+      for (i = 0; i < len; ++i)\n+\tWALK_SUBTREE (TREE_OPERAND (*tp, i));\n+    }\n \n   /* Finally visit the chain.  This can be tail-recursion optimized if\n      we write it this way.  */"}, {"sha": "bf85f7fcc138b7778e8b37443d27a148391050ae", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aee676f2abe6163710ed4d932eaf35e5de045c/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=87aee676f2abe6163710ed4d932eaf35e5de045c", "patch": "@@ -151,10 +151,7 @@ prune_unused_decls (tp, walk_subtrees, data)\n   tree t = *tp;\n \n   if (t == NULL_TREE)\n-    {\n-      *walk_subtrees = 0;\n-      return NULL_TREE;\n-    }\n+    return (tree) 1;\n \n   if (TREE_CODE (t) == DECL_STMT)\n     {"}]}