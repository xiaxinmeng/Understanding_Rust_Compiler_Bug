{"sha": "daafa301e4b0c0528558092b711e26d93223d2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhZmEzMDFlNGIwYzA1Mjg1NTgwOTJiNzExZTI2ZDkzMjIzZDJjMA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-09-30T11:56:25Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-09-30T11:56:25Z"}, "message": "decl.c (pop_binding): Don't mess with nullifying binding->scope here.\n\n\t* decl.c (pop_binding): Don't mess with nullifying binding->scope\n\there.\n\t* name-lookup.c: Re-format.\n\t(cxx_binding_free): Nullify binding->scope.\n\nFrom-SVN: r71942", "tree": {"sha": "9daa86d6c77617d4dff5b975fe554e2b7aba9a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9daa86d6c77617d4dff5b975fe554e2b7aba9a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daafa301e4b0c0528558092b711e26d93223d2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daafa301e4b0c0528558092b711e26d93223d2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daafa301e4b0c0528558092b711e26d93223d2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daafa301e4b0c0528558092b711e26d93223d2c0/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fb1287933b10ce520a01e281854f4f8822af43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb1287933b10ce520a01e281854f4f8822af43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb1287933b10ce520a01e281854f4f8822af43a"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "25f58b0e07849bd75885cd10fd53bffbc2bc0b9a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=daafa301e4b0c0528558092b711e26d93223d2c0", "patch": "@@ -1,3 +1,10 @@\n+2003-09-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* decl.c (pop_binding): Don't mess with nullifying binding->scope\n+\there. \n+\t* name-lookup.c: Re-format.\n+\t(cxx_binding_free): Nullify binding->scope.\n+\n 2003-09-29  Jan Hubicka  <jh@suse.cz>\n \n \tPR C++/12047"}, {"sha": "17c36b1cfc8e921887794e6c08894f8aec1b9ad8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=daafa301e4b0c0528558092b711e26d93223d2c0", "patch": "@@ -1030,9 +1030,6 @@ pop_binding (tree id, tree decl)\n \n       /* Add it to the free list.  */\n       cxx_binding_free (binding);\n-\n-      /* Clear the SCOPE so the garbage collector doesn't walk it.  */\n-      binding->scope = NULL;\n     }\n }\n "}, {"sha": "386fb20ede03f475c08056a518e103f50932bfc9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daafa301e4b0c0528558092b711e26d93223d2c0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=daafa301e4b0c0528558092b711e26d93223d2c0", "patch": "@@ -32,12 +32,15 @@ Boston, MA 02111-1307, USA.  */\n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n    of 2.  */\n+\n #define ENTRY_INDEX(HASH, COUNT) (((HASH) >> 3) & ((COUNT) - 1))\n \n /* A free list of \"binding_entry\"s awaiting for re-use.  */\n+\n static GTY((deletable(\"\"))) binding_entry free_binding_entry = NULL;\n \n /* Create a binding_entry object for (NAME, TYPE).  */\n+\n static inline binding_entry\n binding_entry_make (tree name, tree type)\n {\n@@ -59,6 +62,7 @@ binding_entry_make (tree name, tree type)\n }\n \n /* Put ENTRY back on the free list.  */\n+\n static inline void\n binding_entry_free (binding_entry entry)\n {\n@@ -82,6 +86,7 @@ struct binding_table_s GTY(())\n };\n \n /* Construct TABLE with an initial CHAIN_COUNT.  */\n+\n static inline void\n binding_table_construct (binding_table table, size_t chain_count)\n {\n@@ -91,15 +96,18 @@ binding_table_construct (binding_table table, size_t chain_count)\n     (table->chain_count * sizeof (binding_entry));\n }\n \n-/* Free TABLE by making its entries ready for reuse.  */\n+/* Make TABLE's entries ready for reuse.  */\n+\n void\n binding_table_free (binding_table table)\n {\n   size_t i;\n+  size_t count;\n+\n   if (table == NULL)\n     return;\n \n-  for (i = 0; i < table->chain_count; ++i)\n+  for (i = 0, count = table->chain_count; i < count; ++i)\n     {\n       binding_entry temp = table->chain[i];\n       while (temp != NULL)\n@@ -109,12 +117,13 @@ binding_table_free (binding_table table)\n           entry->chain = NULL; \n           binding_entry_free (entry);\n         }\n-      table->chain[i] = temp;\n+      table->chain[i] = NULL;\n     }\n   table->entry_count = 0;\n }\n \n /* Allocate a table with CHAIN_COUNT, assumed to be a power of two.  */\n+\n binding_table\n binding_table_new (size_t chain_count)\n {\n@@ -125,6 +134,7 @@ binding_table_new (size_t chain_count)\n }\n \n /* Expand TABLE to twice its current chain_count.  */\n+\n static void\n binding_table_expand (binding_table table)\n {\n@@ -151,7 +161,8 @@ binding_table_expand (binding_table table)\n   table->entry_count = old_entry_count;\n }\n \n-/* Insert a binding for NAME to TYPe into TABLE.  */\n+/* Insert a binding for NAME to TYPE into TABLE.  */\n+\n void\n binding_table_insert (binding_table table, tree name, tree type)\n {\n@@ -168,6 +179,7 @@ binding_table_insert (binding_table table, tree name, tree type)\n }\n \n /* Return the binding_entry, if any, that maps NAME.  */\n+\n binding_entry\n binding_table_find (binding_table table, tree name)\n {\n@@ -180,7 +192,8 @@ binding_table_find (binding_table table, tree name)\n   return entry;\n }\n \n-/* Return the binding_entry, if any, that maps name to an anonymous type.  */\n+/* Return the binding_entry, if any, that maps NAME to an anonymous type.  */\n+\n tree\n binding_table_find_anon_type (binding_table table, tree name)\n {\n@@ -195,6 +208,7 @@ binding_table_find_anon_type (binding_table table, tree name)\n \n /* Return the binding_entry, if any, that has TYPE as target.  If NAME\n    is non-null, then set the domain and rehash that entry.  */\n+\n binding_entry\n binding_table_reverse_maybe_remap (binding_table table, tree type, tree name)\n {\n@@ -230,6 +244,7 @@ binding_table_reverse_maybe_remap (binding_table table, tree type, tree name)\n \n /* Remove from TABLE all entries that map to anonymous enums or\n    class-types.  */\n+\n void\n binding_table_remove_anonymous_types (binding_table table)\n {\n@@ -254,6 +269,7 @@ binding_table_remove_anonymous_types (binding_table table)\n }\n \n /* Apply PROC -- with DATA -- to all entries in TABLE.  */\n+\n void\n binding_table_foreach (binding_table table, bt_foreach_proc proc, void *data)\n {\n@@ -270,9 +286,11 @@ binding_table_foreach (binding_table table, bt_foreach_proc proc, void *data)\n \f\n \n /* A free list of \"cxx_binding\"s, connected by their PREVIOUS.  */\n+\n static GTY((deletable (\"\"))) cxx_binding *free_bindings;\n \n /* (GC)-allocate a binding object with VALUE and TYPE member initialized.  */\n+\n cxx_binding *\n cxx_binding_make (tree value, tree type)\n {\n@@ -293,9 +311,11 @@ cxx_binding_make (tree value, tree type)\n }\n \n /* Put BINDING back on the free list.  */\n+\n void\n cxx_binding_free (cxx_binding *binding)\n {\n+  binding->scope = NULL;\n   binding->previous = free_bindings;\n   free_bindings = binding;\n }\n@@ -402,6 +422,7 @@ find_binding (cxx_scope *scope, cxx_binding *binding)\n }\n \n /* Return the binding for NAME in SCOPE, if any.  Otherwise, return NULL.  */\n+\n cxx_binding *\n cxx_scope_find_binding_for_name (cxx_scope *scope, tree name)\n {"}]}