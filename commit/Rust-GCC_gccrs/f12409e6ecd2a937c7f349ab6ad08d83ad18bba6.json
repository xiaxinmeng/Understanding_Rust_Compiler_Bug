{"sha": "f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyNDA5ZTZlY2QyYTkzN2M3ZjM0OWFiNmFkMDhkODNhZDE4YmJhNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-03-03T19:36:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-03T19:36:20Z"}, "message": "re PR libstdc++/31031 (ostream ambiguous operator&&)\n\n2007-03-03  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/31031\n\t* include/bits/istream.tcc: Inhibit implicit instantiation of\n\tthe _M_insert helpers.\n\t* include/bits/ostream.tcc: Likewise for _M_extract.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n\t31031.cc: New.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/\n\t31031.cc: Likewise.\n\nFrom-SVN: r122513", "tree": {"sha": "425170a9373c560f908c61d06f8d0e158ad48809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/425170a9373c560f908c61d06f8d0e158ad48809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/comments", "author": null, "committer": null, "parents": [{"sha": "695d8830016f8ce038d7891230d36b9824751610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695d8830016f8ce038d7891230d36b9824751610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695d8830016f8ce038d7891230d36b9824751610"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "f181c4285fddd410b502c46dbbf0cad4b49d7642", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "patch": "@@ -1,3 +1,14 @@\n+2007-03-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/31031\n+\t* include/bits/istream.tcc: Inhibit implicit instantiation of\n+\tthe _M_insert helpers.\n+\t* include/bits/ostream.tcc: Likewise for _M_extract.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n+\t31031.cc: New.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/\n+\t31031.cc: Likewise.\n+\n 2007-03-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/debug/functions.h: Use cstddef."}, {"sha": "a2e564190daa255d815f40164fb490581e473847", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "patch": "@@ -999,6 +999,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template istream& operator>>(istream&, unsigned char*);\n   extern template istream& operator>>(istream&, signed char*);\n \n+  extern template istream& istream::_M_extract(unsigned short&);\n+  extern template istream& istream::_M_extract(unsigned int&);  \n+  extern template istream& istream::_M_extract(long&);\n+  extern template istream& istream::_M_extract(unsigned long&);\n+  extern template istream& istream::_M_extract(bool&);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  extern template istream& istream::_M_extract(long long&);\n+  extern template istream& istream::_M_extract(unsigned long long&);\n+#endif\n+  extern template istream& istream::_M_extract(float&);\n+  extern template istream& istream::_M_extract(double&);\n+  extern template istream& istream::_M_extract(long double&);\n+  extern template istream& istream::_M_extract(void*&);\n+\n   extern template class basic_iostream<char>;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -1007,6 +1021,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template wistream& operator>>(wistream&, wchar_t&);\n   extern template wistream& operator>>(wistream&, wchar_t*);\n \n+  extern template wistream& wistream::_M_extract(unsigned short&);\n+  extern template wistream& wistream::_M_extract(unsigned int&);  \n+  extern template wistream& wistream::_M_extract(long&);\n+  extern template wistream& wistream::_M_extract(unsigned long&);\n+  extern template wistream& wistream::_M_extract(bool&);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  extern template wistream& wistream::_M_extract(long long&);\n+  extern template wistream& wistream::_M_extract(unsigned long long&);\n+#endif\n+  extern template wistream& wistream::_M_extract(float&);\n+  extern template wistream& wistream::_M_extract(double&);\n+  extern template wistream& wistream::_M_extract(long double&);\n+  extern template wistream& wistream::_M_extract(void*&);\n+\n   extern template class basic_iostream<wchar_t>;\n #endif\n #endif"}, {"sha": "4d549655675931ef6a241aad00695ef5461a0237", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "patch": "@@ -365,6 +365,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template ostream& operator<<(ostream&, const unsigned char*);\n   extern template ostream& operator<<(ostream&, const signed char*);\n \n+  extern template ostream& ostream::_M_insert(long);\n+  extern template ostream& ostream::_M_insert(unsigned long);\n+  extern template ostream& ostream::_M_insert(bool);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  extern template ostream& ostream::_M_insert(long long);\n+  extern template ostream& ostream::_M_insert(unsigned long long);\n+#endif\n+  extern template ostream& ostream::_M_insert(double);\n+  extern template ostream& ostream::_M_insert(long double);\n+  extern template ostream& ostream::_M_insert(const void*);\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_ostream<wchar_t>;\n   extern template wostream& endl(wostream&);\n@@ -374,6 +385,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template wostream& operator<<(wostream&, char);\n   extern template wostream& operator<<(wostream&, const wchar_t*);\n   extern template wostream& operator<<(wostream&, const char*);\n+\n+  extern template wostream& wostream::_M_insert(long);\n+  extern template wostream& wostream::_M_insert(unsigned long);\n+  extern template wostream& wostream::_M_insert(bool);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  extern template wostream& wostream::_M_insert(long long);\n+  extern template wostream& wostream::_M_insert(unsigned long long);\n+#endif\n+  extern template wostream& wostream::_M_insert(double);\n+  extern template wostream& wostream::_M_insert(long double);\n+  extern template wostream& wostream::_M_insert(const void*);\n #endif\n #endif\n "}, {"sha": "255f76838bca620fcca28a29ec04918c33a2568f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/31031.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F31031.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F31031.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F31031.cc?ref=f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+\n+// 2007-03-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <iostream>\n+\n+class MyClass\n+{\n+  double x;\n+\n+public:\n+  MyClass(double X) : x(X) {}\n+  friend bool operator&&(int i, const MyClass& Z);\n+};\n+\n+inline bool\n+operator&&(int i, const MyClass& Z)\n+{ return int(Z.x) == i; }\n+\n+// libstdc++/31031\n+void test01()\n+{\n+  int k =3;\n+  MyClass X(3.1);\n+  std::ostringstream oss;\n+\n+  oss << (k && X);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c6e43ec9b649aaeb37ed030d7b785829fab6e14a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/31031.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F31031.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12409e6ecd2a937c7f349ab6ad08d83ad18bba6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F31031.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F31031.cc?ref=f12409e6ecd2a937c7f349ab6ad08d83ad18bba6", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+\n+// 2007-03-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <sstream>\n+\n+class MyClass\n+{\n+  double x;\n+\n+public:\n+  MyClass(double X) : x(X) {}\n+  friend bool operator&&(int i, const MyClass& Z);\n+};\n+\n+inline bool\n+operator&&(int i, const MyClass& Z)\n+{ return int(Z.x) == i; }\n+\n+// libstdc++/31031\n+void test01()\n+{\n+  int k =3;\n+  MyClass X(3.1);\n+  std::wostringstream oss;\n+\n+  oss << (k && X);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}