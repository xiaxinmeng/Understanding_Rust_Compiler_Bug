{"sha": "30c5a937e19ac28dbb6d023516af9c1b902614aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjNWE5MzdlMTlhYzI4ZGJiNmQwMjM1MTZhZjljMWI5MDI2MTRhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-04T10:47:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-04T10:47:08Z"}, "message": "re PR tree-optimization/64909 (Missed vectorization with bdver1)\n\n2015-04-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64909\n\tPR tree-optimization/65660\n\t* tree-vectorizer.h (vect_get_known_peeling_cost): Adjust\n\tto take a cost vector for scalar iteration cost.\n\t(vect_get_single_scalar_iteration_cost): Likewise.\n\t* tree-vect-loop.c (vect_get_single_scalar_iteration_cost):\n\tCompute the scalar iteration cost into a cost vector.\n\t(vect_get_known_peeling_cost): Use the scalar cost vector to\n\taccount for the cost of the peeled iterations.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vect-data-refs.c (vect_peeling_hash_get_lowest_cost):\n\tLikewise.\n\nFrom-SVN: r221866", "tree": {"sha": "ae57389dd5207eae838acff0fa8788c691c5dda5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae57389dd5207eae838acff0fa8788c691c5dda5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c5a937e19ac28dbb6d023516af9c1b902614aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c5a937e19ac28dbb6d023516af9c1b902614aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c5a937e19ac28dbb6d023516af9c1b902614aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c5a937e19ac28dbb6d023516af9c1b902614aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0da0c47dc5f7a2a8f8f8fad8c7e4d3d1bfeb37ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da0c47dc5f7a2a8f8f8fad8c7e4d3d1bfeb37ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da0c47dc5f7a2a8f8f8fad8c7e4d3d1bfeb37ea"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "d5d3aaa70a919f06c656f02d805c8be2ac193a31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c5a937e19ac28dbb6d023516af9c1b902614aa", "patch": "@@ -1,3 +1,18 @@\n+2015-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64909\n+\tPR tree-optimization/65660\n+\t* tree-vectorizer.h (vect_get_known_peeling_cost): Adjust\n+\tto take a cost vector for scalar iteration cost.\n+\t(vect_get_single_scalar_iteration_cost): Likewise.\n+\t* tree-vect-loop.c (vect_get_single_scalar_iteration_cost):\n+\tCompute the scalar iteration cost into a cost vector.\n+\t(vect_get_known_peeling_cost): Use the scalar cost vector to\n+\taccount for the cost of the peeled iterations.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vect-data-refs.c (vect_peeling_hash_get_lowest_cost):\n+\tLikewise.\n+\n 2015-04-04  Alan Modra  <amodra@gmail.com>\n \n \tPR target/65576"}, {"sha": "3913862eb6c946139d9cae9e61939de8ee76d716", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=30c5a937e19ac28dbb6d023516af9c1b902614aa", "patch": "@@ -1152,7 +1152,6 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n   vec<data_reference_p> datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n   struct data_reference *dr;\n   stmt_vector_for_cost prologue_cost_vec, body_cost_vec, epilogue_cost_vec;\n-  int single_iter_cost;\n \n   prologue_cost_vec.create (2);\n   body_cost_vec.create (2);\n@@ -1175,14 +1174,11 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n       SET_DR_MISALIGNMENT (dr, save_misalignment);\n     }\n \n-  single_iter_cost = vect_get_single_scalar_iteration_cost (loop_vinfo);\n+  auto_vec<stmt_info_for_cost> scalar_cost_vec;\n+  vect_get_single_scalar_iteration_cost (loop_vinfo, &scalar_cost_vec);\n   outside_cost += vect_get_known_peeling_cost\n     (loop_vinfo, elem->npeel, &dummy,\n-     /* ???  We use this cost as number of stmts with scalar_stmt cost,\n-\tthus divide by that.  This introduces rounding errors, thus better \n-\tintroduce a new cost kind (raw_cost?  scalar_iter_cost?). */\n-     single_iter_cost / vect_get_stmt_cost (scalar_stmt),\n-     &prologue_cost_vec, &epilogue_cost_vec);\n+     &scalar_cost_vec, &prologue_cost_vec, &epilogue_cost_vec);\n \n   /* Prologue and epilogue costs are added to the target model later.\n      These costs depend only on the scalar iteration cost, the"}, {"sha": "88ef251e91aa7045029f9253c42ac417480c8a30", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 52, "deletions": 31, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=30c5a937e19ac28dbb6d023516af9c1b902614aa", "patch": "@@ -2653,12 +2653,13 @@ vect_force_simple_reduction (loop_vec_info loop_info, gimple phi,\n \n /* Calculate the cost of one scalar iteration of the loop.  */\n int\n-vect_get_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n+vect_get_single_scalar_iteration_cost (loop_vec_info loop_vinfo,\n+\t\t\t\t       stmt_vector_for_cost *scalar_cost_vec)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n   int nbbs = loop->num_nodes, factor, scalar_single_iter_cost = 0;\n-  int innerloop_iters, i, stmt_cost;\n+  int innerloop_iters, i;\n \n   /* Count statements in scalar loop.  Using this as scalar cost for a single\n      iteration for now.\n@@ -2699,17 +2700,20 @@ vect_get_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n \t      && !STMT_VINFO_IN_PATTERN_P (stmt_info))\n             continue;\n \n+\t  vect_cost_for_stmt kind;\n           if (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt)))\n             {\n               if (DR_IS_READ (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt))))\n-               stmt_cost = vect_get_stmt_cost (scalar_load);\n+               kind = scalar_load;\n              else\n-               stmt_cost = vect_get_stmt_cost (scalar_store);\n+               kind = scalar_store;\n             }\n           else\n-            stmt_cost = vect_get_stmt_cost (scalar_stmt);\n+            kind = scalar_stmt;\n \n-          scalar_single_iter_cost += stmt_cost * factor;\n+\t  scalar_single_iter_cost\n+\t    += record_stmt_cost (scalar_cost_vec, factor, kind,\n+\t\t\t\t NULL, 0, vect_prologue);\n         }\n     }\n   return scalar_single_iter_cost;\n@@ -2719,7 +2723,7 @@ vect_get_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n int\n vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n                              int *peel_iters_epilogue,\n-                             int scalar_single_iter_cost,\n+                             stmt_vector_for_cost *scalar_cost_vec,\n \t\t\t     stmt_vector_for_cost *prologue_cost_vec,\n \t\t\t     stmt_vector_for_cost *epilogue_cost_vec)\n {\n@@ -2736,8 +2740,10 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n \n       /* If peeled iterations are known but number of scalar loop\n          iterations are unknown, count a taken branch per peeled loop.  */\n-      retval = record_stmt_cost (prologue_cost_vec, 2, cond_branch_taken,\n+      retval = record_stmt_cost (prologue_cost_vec, 1, cond_branch_taken,\n \t\t\t\t NULL, 0, vect_prologue);\n+      retval = record_stmt_cost (prologue_cost_vec, 1, cond_branch_taken,\n+\t\t\t\t NULL, 0, vect_epilogue);\n     }\n   else\n     {\n@@ -2751,14 +2757,21 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n         *peel_iters_epilogue = vf;\n     }\n \n+  stmt_info_for_cost *si;\n+  int j;\n   if (peel_iters_prologue)\n-    retval += record_stmt_cost (prologue_cost_vec,\n-\t\t\t\tpeel_iters_prologue * scalar_single_iter_cost,\n-\t\t\t\tscalar_stmt, NULL, 0, vect_prologue);\n+    FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n+      retval += record_stmt_cost (prologue_cost_vec,\n+\t\t\t\t  si->count * peel_iters_prologue,\n+\t\t\t\t  si->kind, NULL, si->misalign,\n+\t\t\t\t  vect_prologue);\n   if (*peel_iters_epilogue)\n-    retval += record_stmt_cost (epilogue_cost_vec,\n-\t\t\t\t*peel_iters_epilogue * scalar_single_iter_cost,\n-\t\t\t\tscalar_stmt, NULL, 0, vect_epilogue);\n+    FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n+      retval += record_stmt_cost (epilogue_cost_vec,\n+\t\t\t\t  si->count * *peel_iters_epilogue,\n+\t\t\t\t  si->kind, NULL, si->misalign,\n+\t\t\t\t  vect_epilogue);\n+\n   return retval;\n }\n \n@@ -2833,12 +2846,9 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n      TODO: Consider assigning different costs to different scalar\n      statements.  */\n \n-  scalar_single_iter_cost = vect_get_single_scalar_iteration_cost (loop_vinfo);\n-  /* ???  Below we use this cost as number of stmts with scalar_stmt cost,\n-     thus divide by that.  This introduces rounding errors, thus better\n-     introduce a new cost kind (raw_cost?  scalar_iter_cost?). */\n-  int scalar_single_iter_stmts\n-    = scalar_single_iter_cost / vect_get_stmt_cost (scalar_stmt);\n+  auto_vec<stmt_info_for_cost> scalar_cost_vec;\n+  scalar_single_iter_cost\n+     = vect_get_single_scalar_iteration_cost (loop_vinfo, &scalar_cost_vec);\n \n   /* Add additional cost for the peeled instructions in prologue and epilogue\n      loop.\n@@ -2866,18 +2876,29 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n          branch per peeled loop. Even if scalar loop iterations are known,\n          vector iterations are not known since peeled prologue iterations are\n          not known. Hence guards remain the same.  */\n-      (void) add_stmt_cost (target_cost_data, 2, cond_branch_taken,\n+      (void) add_stmt_cost (target_cost_data, 1, cond_branch_taken,\n \t\t\t    NULL, 0, vect_prologue);\n-      (void) add_stmt_cost (target_cost_data, 2, cond_branch_not_taken,\n+      (void) add_stmt_cost (target_cost_data, 1, cond_branch_not_taken,\n \t\t\t    NULL, 0, vect_prologue);\n-      /* FORNOW: Don't attempt to pass individual scalar instructions to\n-\t the model; just assume linear cost for scalar iterations.  */\n-      (void) add_stmt_cost (target_cost_data,\n-\t\t\t    peel_iters_prologue * scalar_single_iter_stmts,\n-\t\t\t    scalar_stmt, NULL, 0, vect_prologue);\n-      (void) add_stmt_cost (target_cost_data, \n-\t\t\t    peel_iters_epilogue * scalar_single_iter_stmts,\n-\t\t\t    scalar_stmt, NULL, 0, vect_epilogue);\n+      (void) add_stmt_cost (target_cost_data, 1, cond_branch_taken,\n+\t\t\t    NULL, 0, vect_epilogue);\n+      (void) add_stmt_cost (target_cost_data, 1, cond_branch_not_taken,\n+\t\t\t    NULL, 0, vect_epilogue);\n+      stmt_info_for_cost *si;\n+      int j;\n+      FOR_EACH_VEC_ELT (scalar_cost_vec, j, si)\n+\t{\n+\t  struct _stmt_vec_info *stmt_info\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t  (void) add_stmt_cost (target_cost_data,\n+\t\t\t\tsi->count * peel_iters_prologue,\n+\t\t\t\tsi->kind, stmt_info, si->misalign,\n+\t\t\t\tvect_prologue);\n+\t  (void) add_stmt_cost (target_cost_data,\n+\t\t\t\tsi->count * peel_iters_epilogue,\n+\t\t\t\tsi->kind, stmt_info, si->misalign,\n+\t\t\t\tvect_epilogue);\n+\t}\n     }\n   else\n     {\n@@ -2892,7 +2913,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n       (void) vect_get_known_peeling_cost (loop_vinfo, peel_iters_prologue,\n \t\t\t\t\t  &peel_iters_epilogue,\n-\t\t\t\t\t  scalar_single_iter_stmts,\n+\t\t\t\t\t  &scalar_cost_vec,\n \t\t\t\t\t  &prologue_cost_vec,\n \t\t\t\t\t  &epilogue_cost_vec);\n "}, {"sha": "66d592d523aa38c71abf4b2e24e620b115aecc86", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c5a937e19ac28dbb6d023516af9c1b902614aa/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=30c5a937e19ac28dbb6d023516af9c1b902614aa", "patch": "@@ -1101,10 +1101,12 @@ extern bool vectorizable_reduction (gimple, gimple_stmt_iterator *, gimple *,\n extern bool vectorizable_induction (gimple, gimple_stmt_iterator *, gimple *);\n extern tree get_initial_def_for_reduction (gimple, tree, tree *);\n extern int vect_min_worthwhile_factor (enum tree_code);\n-extern int vect_get_known_peeling_cost (loop_vec_info, int, int *, int,\n+extern int vect_get_known_peeling_cost (loop_vec_info, int, int *,\n+\t\t\t\t\tstmt_vector_for_cost *,\n \t\t\t\t\tstmt_vector_for_cost *,\n \t\t\t\t\tstmt_vector_for_cost *);\n-extern int vect_get_single_scalar_iteration_cost (loop_vec_info);\n+extern int vect_get_single_scalar_iteration_cost (loop_vec_info,\n+\t\t\t\t\t\t  stmt_vector_for_cost *);\n \n /* In tree-vect-slp.c.  */\n extern void vect_free_slp_instance (slp_instance);"}]}