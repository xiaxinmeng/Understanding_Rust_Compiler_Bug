{"sha": "a10b3cf14888c2778261cba92f52055716b6d69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwYjNjZjE0ODg4YzI3NzgyNjFjYmE5MmY1MjA1NTcxNmI2ZDY5ZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-07-30T14:10:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-07-30T14:10:32Z"}, "message": "i386: Update INCOMING_FRAME_SP_OFFSET for exception handler\n\nSince there is an extra error code passed to the exception handler,\nINCOMING_FRAME_SP_OFFSET is return address plus error code for the\nexception handler.  This patch updates INCOMING_FRAME_SP_OFFSET to\nthe correct value for the exception handler.\n\nThis patch exposed a bug in DWARF stack frame CFI generation, which\nassumes that INCOMING_FRAME_SP_OFFSET is the same for all functions:\n\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=81570\n\nIt sets and caches the incoming stack frame offset with the same\nINCOMING_FRAME_SP_OFFSET for all functions.  When there are both\nexception handler and normal function in the same input, the wrong\nincoming stack frame offset is used for exception handler or normal\nfunction, which leads to\n\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 error == 0x12345670\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 frame->ip == 0x12345671\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 frame->cs == 0x12345672\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 frame->flags == 0x12345673\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 frame->sp == 0x12345674\nFAIL: gcc.dg/guality/pr68037-1.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  line 33 frame->ss == 0x12345675\n\nWith the patch for PR 81570:\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-07/msg01851.html\n\napplied, there are no regressions on i686 and x86-64.\n\ngcc/\n\n\tPR target/79793\n\t* config/i386/i386.c (ix86_function_arg): Update arguments for\n\texception handler.\n\t(ix86_compute_frame_layout): Set the initial stack offset to\n\tINCOMING_FRAME_SP_OFFSET.  Update red-zone offset with\n\tINCOMING_FRAME_SP_OFFSET.\n\t(ix86_expand_epilogue): Don't pop the 'ERROR_CODE' off the\n\tstack before exception handler returns.\n\t* config/i386/i386.h (INCOMING_FRAME_SP_OFFSET): Add the\n\tthe 'ERROR_CODE' for exception handler.\n\ngcc/testsuite/\n\n\tPR target/79793\n\t* gcc.dg/guality/pr68037-1.c: Update gdb breakpoints.\n\t* gcc.target/i386/interrupt-5.c (interrupt_frame): New struct.\n\t(foo): Check the builtin return address against the return address\n\tin interrupt frame.\n\t* gcc.target/i386/pr79793-1.c: New test.\n\t* gcc.target/i386/pr79793-2.c: Likewise.\n\nFrom-SVN: r250721", "tree": {"sha": "7e4bfdd02ae4e0f45f56c368d05e2b0299cc39a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4bfdd02ae4e0f45f56c368d05e2b0299cc39a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10b3cf14888c2778261cba92f52055716b6d69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10b3cf14888c2778261cba92f52055716b6d69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10b3cf14888c2778261cba92f52055716b6d69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10b3cf14888c2778261cba92f52055716b6d69d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec1895c1f3567ada2256a82282f5cbf109e63e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1895c1f3567ada2256a82282f5cbf109e63e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1895c1f3567ada2256a82282f5cbf109e63e51"}], "stats": {"total": 124, "additions": 88, "deletions": 36}, "files": [{"sha": "5a2e5fac42cb1ad18e5c9305d6b6c8e8aba9c7e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -1,3 +1,16 @@\n+2017-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/79793\n+\t* config/i386/i386.c (ix86_function_arg): Update arguments for\n+\texception handler.\n+\t(ix86_compute_frame_layout): Set the initial stack offset to\n+\tINCOMING_FRAME_SP_OFFSET.  Update red-zone offset with\n+\tINCOMING_FRAME_SP_OFFSET.\n+\t(ix86_expand_epilogue): Don't pop the 'ERROR_CODE' off the\n+\tstack before exception handler returns.\n+\t* config/i386/i386.h (INCOMING_FRAME_SP_OFFSET): Add the\n+\tthe 'ERROR_CODE' for exception handler.\n+\n 2017-07-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (ASM_PRINTF_EXTENSIONS): New macro."}, {"sha": "47e2ae8ce2eb207d98ebbc1049de9046b7053cf2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -10421,25 +10421,22 @@ ix86_function_arg (cumulative_args_t cum_v, machine_mode omode,\n \t{\n \t  /* This is the pointer argument.  */\n \t  gcc_assert (TYPE_MODE (type) == Pmode);\n-\t  if (cfun->machine->func_type == TYPE_INTERRUPT)\n-\t    /* -WORD(AP) in the current frame in interrupt handler.  */\n-\t    arg = plus_constant (Pmode, arg_pointer_rtx,\n-\t\t\t\t -UNITS_PER_WORD);\n-\t  else\n-\t    /* (AP) in the current frame in exception handler.  */\n-\t    arg = arg_pointer_rtx;\n+\t  /* It is at -WORD(AP) in the current frame in interrupt and\n+\t     exception handlers.  */\n+\t  arg = plus_constant (Pmode, arg_pointer_rtx, -UNITS_PER_WORD);\n \t}\n       else\n \t{\n \t  gcc_assert (cfun->machine->func_type == TYPE_EXCEPTION\n \t\t      && TREE_CODE (type) == INTEGER_TYPE\n \t\t      && TYPE_MODE (type) == word_mode);\n-\t  /* The integer argument is the error code at -WORD(AP) in\n-\t     the current frame in exception handler.  */\n+\t  /* The error code is the word-mode integer argument at\n+\t     -2 * WORD(AP) in the current frame of the exception\n+\t     handler.  */\n \t  arg = gen_rtx_MEM (word_mode,\n \t\t\t     plus_constant (Pmode,\n \t\t\t\t\t    arg_pointer_rtx,\n-\t\t\t\t\t    -UNITS_PER_WORD));\n+\t\t\t\t\t    -2 * UNITS_PER_WORD));\n \t}\n       return arg;\n     }\n@@ -12914,8 +12911,8 @@ ix86_compute_frame_layout (void)\n \t  the registers need to be saved before allocating the frame.  */\n        && flag_stack_check != STATIC_BUILTIN_STACK_CHECK);\n \n-  /* Skip return address.  */\n-  offset = UNITS_PER_WORD;\n+  /* Skip return address and error code in exception handler.  */\n+  offset = INCOMING_FRAME_SP_OFFSET;\n \n   /* Skip pushed static chain.  */\n   if (ix86_static_chain_on_stack)\n@@ -15220,8 +15217,9 @@ ix86_expand_epilogue (int style)\n   m->fs.red_zone_offset = 0;\n   if (ix86_using_red_zone () && crtl->args.pops_args < 65536)\n     {\n-      /* The red-zone begins below the return address.  */\n-      m->fs.red_zone_offset = RED_ZONE_SIZE + UNITS_PER_WORD;\n+      /* The red-zone begins below return address and error code in\n+\t exception handler.  */\n+      m->fs.red_zone_offset = RED_ZONE_SIZE + INCOMING_FRAME_SP_OFFSET;\n \n       /* When the register save area is in the aligned portion of\n          the stack, determine the maximum runtime displacement that\n@@ -15516,18 +15514,7 @@ ix86_expand_epilogue (int style)\n     }\n \n   if (cfun->machine->func_type != TYPE_NORMAL)\n-    {\n-      /* Return with the \"IRET\" instruction from interrupt handler.\n-\t Pop the 'ERROR_CODE' off the stack before the 'IRET'\n-\t instruction in exception handler.  */\n-      if (cfun->machine->func_type == TYPE_EXCEPTION)\n-\t{\n-\t  rtx r = plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t UNITS_PER_WORD);\n-\t  emit_insn (gen_rtx_SET (stack_pointer_rtx, r));\n-\t}\n-      emit_jump_insn (gen_interrupt_return ());\n-    }\n+    emit_jump_insn (gen_interrupt_return ());\n   else if (crtl->args.pops_args && crtl->args.size)\n     {\n       rtx popc = GEN_INT (crtl->args.pops_args);"}, {"sha": "bdea37b73136e345ef77703994781fa360e07dab", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -2177,8 +2177,11 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n /* PC is dbx register 8; let's use that column for RA.  */\n #define DWARF_FRAME_RETURN_COLUMN \t(TARGET_64BIT ? 16 : 8)\n \n-/* Before the prologue, the top of the frame is at 4(%esp).  */\n-#define INCOMING_FRAME_SP_OFFSET UNITS_PER_WORD\n+/* Before the prologue, there are return address and error code for\n+   exception handler on the top of the frame.  */\n+#define INCOMING_FRAME_SP_OFFSET \\\n+  (cfun->machine->func_type == TYPE_EXCEPTION \\\n+   ? 2 * UNITS_PER_WORD : UNITS_PER_WORD)\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N)\t((N) <= DX_REG ? (N) : INVALID_REGNUM)"}, {"sha": "a6a378263c1bfe9152a64dc03db05257071851b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -1,3 +1,13 @@\n+2017-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/79793\n+\t* gcc.dg/guality/pr68037-1.c: Update gdb breakpoints.\n+\t* gcc.target/i386/interrupt-5.c (interrupt_frame): New struct.\n+\t(foo): Check the builtin return address against the return address\n+\tin interrupt frame.\n+\t* gcc.target/i386/pr79793-1.c: New test.\n+\t* gcc.target/i386/pr79793-2.c: Likewise.\n+\n 2017-07-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-c++-common/dump-ada-spec-7.c: New test."}, {"sha": "44cab58659f96e3c91632dac0a3e931e20cf820c", "filename": "gcc/testsuite/gcc.dg/guality/pr68037-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr68037-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr68037-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr68037-1.c?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -59,9 +59,9 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { gdb-test 31 \"error\" \"0x12345670\" } } */\n-/* { dg-final { gdb-test 31 \"frame->ip\" \"0x12345671\" } } */\n-/* { dg-final { gdb-test 31 \"frame->cs\" \"0x12345672\" } } */\n-/* { dg-final { gdb-test 31 \"frame->flags\" \"0x12345673\" } } */\n-/* { dg-final { gdb-test 31 \"frame->sp\" \"0x12345674\" } } */\n-/* { dg-final { gdb-test 31 \"frame->ss\" \"0x12345675\" } } */\n+/* { dg-final { gdb-test 33 \"error\" \"0x12345670\" } } */\n+/* { dg-final { gdb-test 33 \"frame->ip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 33 \"frame->cs\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 33 \"frame->flags\" \"0x12345673\" } } */\n+/* { dg-final { gdb-test 33 \"frame->sp\" \"0x12345674\" } } */\n+/* { dg-final { gdb-test 33 \"frame->ss\" \"0x12345675\" } } */"}, {"sha": "5742b6f474334af9fbe61c532c19485f1ee9df17", "filename": "gcc/testsuite/gcc.target/i386/interrupt-5.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-5.c?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -7,12 +7,21 @@ extern void link_error (void);\n \n typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n \n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n __attribute__ ((used, interrupt))\n void\n-foo (void *frame, uword_t error)\n+foo (struct interrupt_frame *frame, uword_t error)\n {\n   void *ra = __builtin_return_address (0);\n-  if ((uintptr_t) ra != (uintptr_t) error)\n+  if ((uintptr_t) ra != (uintptr_t) frame->ip)\n     link_error ();\n }\n "}, {"sha": "a382fe9c5e2cb92e8ea86ec0465a7822f2bfc582", "filename": "gcc/testsuite/gcc.target/i386/pr79793-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-1.c?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n+\n+void\n+ __attribute__ ((interrupt))\n+fn1 (void *frame)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  __builtin_ia32_fxsave64 (fxsave_region);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sub\\[lq\\]\\[\\t \\]*\\\\\\$400,\\[\\t \\]*%\\[re\\]sp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fxsave64\\[\\t \\]*-120\\\\(%\\[re\\]sp\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"add\\[lq\\]\\[\\t \\]*\\\\\\$400,\\[\\t \\]*%\\[re\\]sp\" 1 } } */"}, {"sha": "f6ae5aed33a005e12641fc4625ce152e3b933163", "filename": "gcc/testsuite/gcc.target/i386/pr79793-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10b3cf14888c2778261cba92f52055716b6d69d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79793-2.c?ref=a10b3cf14888c2778261cba92f52055716b6d69d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+void\n+ __attribute__ ((interrupt))\n+fn1 (void *frame, uword_t error)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  __builtin_ia32_fxsave64 (fxsave_region);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sub\\[lq\\]\\[\\t \\]*\\\\\\$392,\\[\\t \\]*%\\[re\\]sp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fxsave64\\[\\t \\]*-120\\\\(%\\[re\\]sp\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"add\\[lq\\]\\[\\t \\]*\\\\\\$400,\\[\\t \\]*%\\[re\\]sp\" 1 } } */"}]}