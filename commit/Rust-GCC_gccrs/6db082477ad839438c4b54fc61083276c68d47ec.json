{"sha": "6db082477ad839438c4b54fc61083276c68d47ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiMDgyNDc3YWQ4Mzk0MzhjNGI1NGZjNjEwODMyNzZjNjhkNDdlYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-11-07T09:04:31Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-11-09T20:20:01Z"}, "message": "libstdc++: Remove <debug/array>\n\nAdd _GLIBCXX_ASSERTIONS assert in normal std::array and remove __gnu_debug::array\nimplementation.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/array: Remove.\n\t* include/Makefile.am: Remove <debug/array>.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/functional: Adapt.\n\t* include/std/array: Move to _GLIBCXX_INLINE_VERSION namespace.\n\t* include/std/functional: Adapt.\n\t* include/std/span: Adapt.\n\t* testsuite/23_containers/array/debug/back1_neg.cc:\n\tRemove dg-require-debug-mode. Add -D_GLIBCXX_ASSERTIONS option.\n\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/front1_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/element_access/60497.cc\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n\tRemove.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "tree": {"sha": "f11262de46554e263d22f585467efd29b3cdcc01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f11262de46554e263d22f585467efd29b3cdcc01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db082477ad839438c4b54fc61083276c68d47ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db082477ad839438c4b54fc61083276c68d47ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db082477ad839438c4b54fc61083276c68d47ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db082477ad839438c4b54fc61083276c68d47ec/comments", "author": null, "committer": null, "parents": [{"sha": "83f1c165d2a2ebfba1164c730c0a65210fc4b285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f1c165d2a2ebfba1164c730c0a65210fc4b285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f1c165d2a2ebfba1164c730c0a65210fc4b285"}], "stats": {"total": 570, "additions": 48, "deletions": 522}, "files": [{"sha": "292d89da8ba7be0f639c6d34ae39a6d261f5afa5", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -856,7 +856,6 @@ endif\n debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n-\t${debug_srcdir}/array \\\n \t${debug_srcdir}/assertions.h \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\"}, {"sha": "fff444c69e866018fab729096ae58c3e990417bb", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -1195,7 +1195,6 @@ c_compatibility_builddir = .\n debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n-\t${debug_srcdir}/array \\\n \t${debug_srcdir}/assertions.h \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\"}, {"sha": "dd4044c9c7bc5f6126de0832db8a541ecab19c7e", "filename": "libstdc++-v3/include/debug/array", "status": "removed", "additions": 0, "deletions": 408, "changes": 408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=83f1c165d2a2ebfba1164c730c0a65210fc4b285", "patch": "@@ -1,408 +0,0 @@\n-// Debugging array implementation -*- C++ -*-\n-\n-// Copyright (C) 2012-2020 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file debug/array\n- *  This is a Standard C++ Library header.\n- */\n-\n-#ifndef _GLIBCXX_DEBUG_ARRAY\n-#define _GLIBCXX_DEBUG_ARRAY 1\n-\n-#pragma GCC system_header\n-\n-#include <array>\n-\n-#include <debug/formatter.h>\n-#include <debug/macros.h>\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-namespace __debug\n-{\n-  template<typename _Tp, std::size_t _Nm>\n-    struct array\n-    {\n-      typedef _Tp \t    \t\t\t      value_type;\n-      typedef value_type*\t\t\t      pointer;\n-      typedef const value_type*                       const_pointer;\n-      typedef value_type&                   \t      reference;\n-      typedef const value_type&             \t      const_reference;\n-      typedef value_type*                             iterator;\n-      typedef const value_type*                       const_iterator;\n-      typedef std::size_t                    \t      size_type;\n-      typedef std::ptrdiff_t                   \t      difference_type;\n-      typedef std::reverse_iterator<iterator>\t      reverse_iterator;\n-      typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n-\n-      // Support for zero-sized arrays mandatory.\n-      typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;\n-      typename _AT_Type::_Type                         _M_elems;\n-\n-      template<std::size_t _Size>\n-\tstruct _Array_check_subscript\n- \t{\n-\t  std::size_t size() { return _Size; }\n-\n-\t  _Array_check_subscript(std::size_t __index)\n-\t  { __glibcxx_check_subscript(__index); }\n-        };\n-\n-      template<std::size_t _Size>\n-\tstruct _Array_check_nonempty\n- \t{\n-\t  _GLIBCXX_NODISCARD bool empty() { return _Size == 0; }\n-\n-\t  _Array_check_nonempty()\n-\t  { __glibcxx_check_nonempty(); }\n-        };\n-\n-      // No explicit construct/copy/destroy for aggregate type.\n-\n-      // DR 776.\n-      _GLIBCXX20_CONSTEXPR void\n-      fill(const value_type& __u)\n-      { std::fill_n(begin(), size(), __u); }\n-\n-      _GLIBCXX20_CONSTEXPR void\n-      swap(array& __other)\n-      noexcept(_AT_Type::_Is_nothrow_swappable::value)\n-      { std::swap_ranges(begin(), end(), __other.begin()); }\n-\n-      // Iterators.\n-      _GLIBCXX17_CONSTEXPR iterator\n-      begin() noexcept\n-      { return iterator(data()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_iterator\n-      begin() const noexcept\n-      { return const_iterator(data()); }\n-\n-      _GLIBCXX17_CONSTEXPR iterator\n-      end() noexcept\n-      { return iterator(data() + _Nm); }\n-\n-      _GLIBCXX17_CONSTEXPR const_iterator\n-      end() const noexcept\n-      { return const_iterator(data() + _Nm); }\n-\n-      _GLIBCXX17_CONSTEXPR reverse_iterator\n-      rbegin() noexcept\n-      { return reverse_iterator(end()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n-      rbegin() const noexcept\n-      { return const_reverse_iterator(end()); }\n-\n-      _GLIBCXX17_CONSTEXPR reverse_iterator\n-      rend() noexcept\n-      { return reverse_iterator(begin()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n-      rend() const noexcept\n-      { return const_reverse_iterator(begin()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_iterator\n-      cbegin() const noexcept\n-      { return const_iterator(data()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_iterator\n-      cend() const noexcept\n-      { return const_iterator(data() + _Nm); }\n-\n-      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n-      crbegin() const noexcept\n-      { return const_reverse_iterator(end()); }\n-\n-      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n-      crend() const noexcept\n-      { return const_reverse_iterator(begin()); }\n-\n-      // Capacity.\n-      constexpr size_type\n-      size() const noexcept { return _Nm; }\n-\n-      constexpr size_type\n-      max_size() const noexcept { return _Nm; }\n-\n-      _GLIBCXX_NODISCARD constexpr bool\n-      empty() const noexcept { return size() == 0; }\n-\n-      // Element access.\n-      _GLIBCXX17_CONSTEXPR reference\n-      operator[](size_type __n) noexcept\n-      {\n-\t__glibcxx_check_subscript(__n);\n-\treturn _AT_Type::_S_ref(_M_elems, __n);\n-      }\n-\n-      constexpr const_reference\n-      operator[](size_type __n) const noexcept\n-      {\n-\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t : (_GLIBCXX_THROW_OR_ABORT(_Array_check_subscript<_Nm>(__n)),\n-\t    _AT_Type::_S_ref(_M_elems, 0));\n-      }\n-\n-      _GLIBCXX17_CONSTEXPR reference\n-      at(size_type __n)\n-      {\n-\tif (__n >= _Nm)\n-\t  std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n-\t\t\t\t\t    \">= _Nm (which is %zu)\"),\n-\t\t\t\t\t__n, _Nm);\n-\treturn _AT_Type::_S_ref(_M_elems, __n);\n-      }\n-\n-      constexpr const_reference\n-      at(size_type __n) const\n-      {\n-\t// Result of conditional expression must be an lvalue so use\n-\t// boolean ? lvalue : (throw-expr, lvalue)\n-\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t  : (std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n-\t\t\t\t\t       \">= _Nm (which is %zu)\"),\n-\t\t\t\t\t   __n, _Nm),\n-\t     _AT_Type::_S_ref(_M_elems, 0));\n-      }\n-\n-      _GLIBCXX17_CONSTEXPR reference\n-      front() noexcept\n-      {\n-\t__glibcxx_check_nonempty();\n-\treturn *begin();\n-      }\n-\n-      constexpr const_reference\n-      front() const noexcept\n-      {\n-\treturn _Nm ? _AT_Type::_S_ref(_M_elems, 0)\n-\t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n-\t     _AT_Type::_S_ref(_M_elems, 0));\n-      }\n-\n-      _GLIBCXX17_CONSTEXPR reference\n-      back() noexcept\n-      {\n-\t__glibcxx_check_nonempty();\n-\treturn _Nm ? *(end() - 1) : *end();\n-      }\n-\n-      constexpr const_reference\n-      back() const noexcept\n-      {\n-\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n-\t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n-\t     _AT_Type::_S_ref(_M_elems, 0));\n-      }\n-\n-      _GLIBCXX17_CONSTEXPR pointer\n-      data() noexcept\n-      { return _AT_Type::_S_ptr(_M_elems); }\n-\n-      _GLIBCXX17_CONSTEXPR const_pointer\n-      data() const noexcept\n-      { return _AT_Type::_S_ptr(_M_elems); }\n-    };\n-\n-#if __cpp_deduction_guides >= 201606\n-  template<typename _Tp, typename... _Up>\n-    array(_Tp, _Up...)\n-      -> array<std::enable_if_t<(std::is_same_v<_Tp, _Up> && ...), _Tp>,\n-\t       1 + sizeof...(_Up)>;\n-#endif\n-\n-  // Array comparisons.\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-    { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n-\n-#if __cpp_lib_three_way_comparison && __cpp_lib_concepts\n-  template<typename _Tp, size_t _Nm>\n-    constexpr __detail::__synth3way_t<_Tp>\n-    operator<=>(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n-    {\n-      if constexpr (_Nm && __is_byte<_Tp>::__value)\n-\treturn __builtin_memcmp(__a.data(), __b.data(), _Nm) <=> 0;\n-      else\n-\t{\n-\t  for (size_t __i = 0; __i < _Nm; ++__i)\n-\t    {\n-\t      auto __c = __detail::__synth3way(__a[__i], __b[__i]);\n-\t      if (__c != 0)\n-\t\treturn __c;\n-\t    }\n-\t}\n-      return strong_ordering::equal;\n-    }\n-#else\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-    { return !(__one == __two); }\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n-    {\n-      return std::lexicographical_compare(__a.begin(), __a.end(),\n-\t\t\t\t\t  __b.begin(), __b.end());\n-    }\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-    { return __two < __one; }\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-    { return !(__one > __two); }\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline bool\n-    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-    { return !(__one < __two); }\n-#endif // three_way_comparison && concepts\n-\n-  // Specialized algorithms.\n-\n-#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n-  template<typename _Tp, size_t _Nm>\n-    typename enable_if<\n-      !_GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type\n-    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;\n-#endif\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    _GLIBCXX20_CONSTEXPR\n-    inline void\n-    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n-    noexcept(noexcept(__one.swap(__two)))\n-    { __one.swap(__two); }\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr _Tp&\n-    get(array<_Tp, _Nm>& __arr) noexcept\n-    {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n-\t_S_ref(__arr._M_elems, _Int);\n-    }\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr _Tp&&\n-    get(array<_Tp, _Nm>&& __arr) noexcept\n-    {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return std::move(__debug::get<_Int>(__arr));\n-    }\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr const _Tp&\n-    get(const array<_Tp, _Nm>& __arr) noexcept\n-    {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n-\t_S_ref(__arr._M_elems, _Int);\n-    }\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr const _Tp&&\n-    get(const array<_Tp, _Nm>&& __arr) noexcept\n-    {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return std::move(__debug::get<_Int>(__arr));\n-    }\n-\n-#if __cplusplus > 201703L\n-#define __cpp_lib_to_array 201907L\n-\n-  template<bool _Move = false, typename _Tp, size_t... _Idx>\n-    constexpr array<remove_cv_t<_Tp>, sizeof...(_Idx)>\n-    __to_array(_Tp (&__a)[sizeof...(_Idx)], index_sequence<_Idx...>)\n-    {\n-      if constexpr (_Move)\n-\treturn {{std::move(__a[_Idx])...}};\n-      else\n-\treturn {{__a[_Idx]...}};\n-    }\n-\n-  template<typename _Tp, size_t _Nm>\n-    constexpr array<remove_cv_t<_Tp>, _Nm>\n-    to_array(_Tp (&__a)[_Nm])\n-    noexcept(is_nothrow_constructible_v<_Tp, _Tp&>)\n-    {\n-      static_assert(!is_array_v<_Tp>);\n-      static_assert(is_constructible_v<_Tp, _Tp&>);\n-      if constexpr (is_constructible_v<_Tp, _Tp&>)\n-\treturn __debug::__to_array(__a, make_index_sequence<_Nm>{});\n-      __builtin_unreachable(); // FIXME: see PR c++/91388\n-    }\n-\n-  template<typename _Tp, size_t _Nm>\n-    constexpr array<remove_cv_t<_Tp>, _Nm>\n-    to_array(_Tp (&&__a)[_Nm])\n-    noexcept(is_nothrow_move_constructible_v<_Tp>)\n-    {\n-      static_assert(!is_array_v<_Tp>);\n-      static_assert(is_move_constructible_v<_Tp>);\n-      if constexpr (is_move_constructible_v<_Tp>)\n-\treturn __debug::__to_array<1>(__a, make_index_sequence<_Nm>{});\n-      __builtin_unreachable(); // FIXME: see PR c++/91388\n-    }\n-#endif // C++20\n-\n-} // namespace __debug\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  // Tuple interface to class template array.\n-\n-  /// tuple_size\n-  template<typename _Tp, std::size_t _Nm>\n-    struct tuple_size<std::__debug::array<_Tp, _Nm>>\n-    : public integral_constant<std::size_t, _Nm> { };\n-\n-  /// tuple_element\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    struct tuple_element<_Int, std::__debug::array<_Tp, _Nm>>\n-    {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      typedef _Tp type;\n-    };\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    struct __is_tuple_like_impl<std::__debug::array<_Tp, _Nm>> : true_type\n-    { };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace std\n-\n-#endif // _GLIBCXX_DEBUG_ARRAY"}, {"sha": "df3bb9a618b639e39bac4d483623fc65b12eec02", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -127,7 +127,7 @@ inline namespace fundamentals_v1\n       template<typename _RAIter, typename _Unused>\n \t__boyer_moore_array_base(_RAIter __pat, size_t __patlen,\n \t\t\t\t _Unused&&, _Pred&& __pred)\n-\t: _M_bad_char{ _GLIBCXX_STD_C::array<_Tp, _Len>{}, std::move(__pred) }\n+\t: _M_bad_char{ std::array<_Tp, _Len>{}, std::move(__pred) }\n \t{\n \t  std::get<0>(_M_bad_char).fill(__patlen);\n \t  if (__patlen > 0)\n@@ -155,7 +155,7 @@ inline namespace fundamentals_v1\n       const _Pred&\n       _M_pred() const { return std::get<1>(_M_bad_char); }\n \n-      std::tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n+      std::tuple<std::array<_Tp, _Len>, _Pred> _M_bad_char;\n     };\n \n   // Use __boyer_moore_array_base when pattern consists of narrow characters"}, {"sha": "3c4c88a536e8a4767092f98aa5d2bcba1ef91d44", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -39,10 +39,11 @@\n #include <bits/functexcept.h>\n #include <bits/stl_algobase.h>\n #include <bits/range_access.h>\n+#include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, std::size_t _Nm>\n     struct __array_traits\n@@ -106,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n       // Support for zero-sized arrays mandatory.\n-      typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;\n+      typedef __array_traits<_Tp, _Nm> _AT_Type;\n       typename _AT_Type::_Type                         _M_elems;\n \n       // No explicit construct/copy/destroy for aggregate type.\n@@ -183,11 +184,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Element access.\n       _GLIBCXX17_CONSTEXPR reference\n       operator[](size_type __n) noexcept\n-      { return _AT_Type::_S_ref(_M_elems, __n); }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n+      }\n \n       constexpr const_reference\n       operator[](size_type __n) const noexcept\n-      { return _AT_Type::_S_ref(_M_elems, __n); }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n+      }\n \n       _GLIBCXX17_CONSTEXPR reference\n       at(size_type __n)\n@@ -213,19 +220,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n-      { return *begin(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *begin();\n+      }\n \n       constexpr const_reference\n       front() const noexcept\n-      { return _AT_Type::_S_ref(_M_elems, 0); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn _AT_Type::_S_ref(_M_elems, 0);\n+      }\n \n       _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n-      { return _Nm ? *(end() - 1) : *end(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn _Nm ? *(end() - 1) : *end();\n+      }\n \n       constexpr const_reference\n       back() const noexcept\n       {\n+\t__glibcxx_requires_nonempty();\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n  \t           : _AT_Type::_S_ref(_M_elems, 0);\n       }\n@@ -317,7 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n     // Constrained free swap overload, see p0185r1\n     typename enable_if<\n-      _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value\n+      __array_traits<_Tp, _Nm>::_Is_swappable::value\n     >::type\n #else\n     void\n@@ -329,7 +346,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n   template<typename _Tp, std::size_t _Nm>\n     typename enable_if<\n-      !_GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type\n+      !__array_traits<_Tp, _Nm>::_Is_swappable::value>::type\n     swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;\n #endif\n \n@@ -338,33 +355,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n-\t_S_ref(__arr._M_elems, _Int);\n+      return __array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     constexpr _Tp&&\n     get(array<_Tp, _Nm>&& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return std::move(_GLIBCXX_STD_C::get<_Int>(__arr));\n+      return std::move(std::get<_Int>(__arr));\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     constexpr const _Tp&\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n-\t_S_ref(__arr._M_elems, _Int);\n+      return __array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     constexpr const _Tp&&\n     get(const array<_Tp, _Nm>&& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"array index is within bounds\");\n-      return std::move(_GLIBCXX_STD_C::get<_Int>(__arr));\n+      return std::move(std::get<_Int>(__arr));\n     }\n \n #if __cplusplus > 201703L\n@@ -388,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       static_assert(!is_array_v<_Tp>);\n       static_assert(is_constructible_v<_Tp, _Tp&>);\n       if constexpr (is_constructible_v<_Tp, _Tp&>)\n-\treturn _GLIBCXX_STD_C::__to_array(__a, make_index_sequence<_Nm>{});\n+\treturn __to_array(__a, make_index_sequence<_Nm>{});\n       __builtin_unreachable(); // FIXME: see PR c++/91388\n     }\n \n@@ -400,18 +415,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       static_assert(!is_array_v<_Tp>);\n       static_assert(is_move_constructible_v<_Tp>);\n       if constexpr (is_move_constructible_v<_Tp>)\n-\treturn _GLIBCXX_STD_C::__to_array<1>(__a, make_index_sequence<_Nm>{});\n+\treturn __to_array<1>(__a, make_index_sequence<_Nm>{});\n       __builtin_unreachable(); // FIXME: see PR c++/91388\n     }\n #endif // C++20\n \n-_GLIBCXX_END_NAMESPACE_CONTAINER\n-} // namespace std\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // Tuple interface to class template array.\n \n   /// tuple_size\n@@ -420,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Partial specialization for std::array\n   template<typename _Tp, std::size_t _Nm>\n-    struct tuple_size<_GLIBCXX_STD_C::array<_Tp, _Nm>>\n+    struct tuple_size<array<_Tp, _Nm>>\n     : public integral_constant<std::size_t, _Nm> { };\n \n   /// tuple_element\n@@ -429,23 +437,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Partial specialization for std::array\n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    struct tuple_element<_Int, _GLIBCXX_STD_C::array<_Tp, _Nm>>\n+    struct tuple_element<_Int, array<_Tp, _Nm>>\n     {\n       static_assert(_Int < _Nm, \"index is out of bounds\");\n       typedef _Tp type;\n     };\n \n   template<typename _Tp, std::size_t _Nm>\n-    struct __is_tuple_like_impl<_GLIBCXX_STD_C::array<_Tp, _Nm>> : true_type\n+    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type\n     { };\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#ifdef _GLIBCXX_DEBUG\n-# include <debug/array>\n-#endif\n-\n #endif // C++11\n \n #endif // _GLIBCXX_ARRAY"}, {"sha": "06dcf948248e288d444ed9ba2fc4a40d00b5fc15", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -1066,7 +1066,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _RAIter, typename _Unused>\n \t__boyer_moore_array_base(_RAIter __pat, size_t __patlen,\n \t\t\t\t _Unused&&, _Pred&& __pred)\n-\t: _M_bad_char{ _GLIBCXX_STD_C::array<_Tp, _Len>{}, std::move(__pred) }\n+\t: _M_bad_char{ array<_Tp, _Len>{}, std::move(__pred) }\n \t{\n \t  std::get<0>(_M_bad_char).fill(__patlen);\n \t  if (__patlen > 0)\n@@ -1094,7 +1094,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _Pred&\n       _M_pred() const { return std::get<1>(_M_bad_char); }\n \n-      tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n+      tuple<array<_Tp, _Len>, _Pred> _M_bad_char;\n     };\n \n   // Use __boyer_moore_array_base when pattern consists of narrow characters"}, {"sha": "3d996fa0a1be3f024d15674a5d484bf48f898a1d", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -67,12 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct __is_std_array : false_type { };\n \n     template<typename _Tp, size_t _Num>\n-      struct __is_std_array<_GLIBCXX_STD_C::array<_Tp, _Num>> : true_type { };\n-\n-#ifdef _GLIBCXX_DEBUG\n-    template<typename _Tp, size_t _Num>\n-      struct __is_std_array<__debug::array<_Tp, _Num>> : true_type { };\n-#endif\n+      struct __is_std_array<std::array<_Tp, _Num>> : true_type { };\n \n     template<size_t _Extent>\n       class __extent_storage"}, {"sha": "8216dea3cfb88766a1177d3539c29ce2b254c0eb", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11 xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "b14a3ec8c043ddc30ca6a48654fe2c6181a307a3", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11 xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "c6871093d2a768a7da00bd30ad4a167f96608f60", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11 xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "e099e6eb46b10c3189698d96171b254cdb86c13e", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11 xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "3f1ea128902b8e05e44ac1e2504bcdf3ed65a642", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11  xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "4e93c8a7d689644b016af66ba6b16521a44d9ede", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n+// { dg-options \"-D_GLIBCXX_ASSERTIONS\" }\n // { dg-do run { target c++11 xfail *-*-* } }\n-// { dg-require-debug-mode \"\" }\n \n #include <array>\n "}, {"sha": "ff62427c6d7af29b728425be27ebb14b92138e42", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/60497.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2F60497.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2F60497.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2F60497.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -20,14 +20,10 @@\n // libstdc++/60497\n \n #include <array>\n-#include <debug/array>\n #include <memory>\n \n struct A;\n template<typename T> struct B { T t; };\n \n std::array<B<A>*, 1> a;\n auto b = std::get<0>(std::move(a));\n-\n-std::__debug::array<B<A>*, 1> c;\n-auto d = std::__debug::get<0>(std::move(c));"}, {"sha": "0a9525e965431dca11fed67c61f480f3521797fe", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=83f1c165d2a2ebfba1164c730c0a65210fc4b285", "patch": "@@ -1,32 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-// { dg-require-debug-mode \"\" }\n-\n-// Copyright (C) 2012-2020 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <array>\n-\n-std::array<int, 1> a{};\n-const std::array<int, 1> ca{};\n-\n-int n1 = std::get<1>(a);\n-int n2 = std::get<1>(std::move(a));\n-int n3 = std::get<1>(ca);\n-\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 315 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 324 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 332 }"}, {"sha": "88416cc661cfec0add67f697f95010de041433f3", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++11 } }\n-// { dg-require-normal-mode \"\" }\n \n // Copyright (C) 2012-2020 Free Software Foundation, Inc.\n //\n@@ -27,6 +26,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 340 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 349 }\n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 357 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 365 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 373 }"}, {"sha": "0bd5989c04a6c958de23f05dfdfe693c30fdca16", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f1c165d2a2ebfba1164c730c0a65210fc4b285/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=83f1c165d2a2ebfba1164c730c0a65210fc4b285", "patch": "@@ -1,25 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-// { dg-require-debug-mode \"\" }\n-\n-// Copyright (C) 2012-2020 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <array>\n-\n-typedef std::tuple_element<1, std::array<int, 1>>::type type;\n-\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 397 }"}, {"sha": "61c277c375d24b25f47ebac89ba823b7476a9ed2", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db082477ad839438c4b54fc61083276c68d47ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=6db082477ad839438c4b54fc61083276c68d47ec", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++11 } }\n-// { dg-require-normal-mode \"\" }\n \n // Copyright (C) 2012-2020 Free Software Foundation, Inc.\n //"}]}