{"sha": "6b36694859ea9f0951f329d55b60ecc70dba0c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzNjY5NDg1OWVhOWYwOTUxZjMyOWQ1NWI2MGVjYzcwZGJhMGM4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-21T15:41:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-21T15:41:13Z"}, "message": "re PR target/70296 (Incorrect handling of vector X; if X is function-like macro)\n\n\tPR target/70296\n\t* include/cpplib.h (cpp_fun_like_macro_p): New prototype.\n\t* macro.c (cpp_fun_like_macro_p): New function.\n\n\t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): If IDENT is\n\tfunction-like macro, peek following token(s) if it is followed\n\tby CPP_OPEN_PAREN token with optional padding in between, and\n\tif not, don't treat it like a macro.\n\n\t* gcc.target/powerpc/altivec-36.c: New test.\n\nFrom-SVN: r234371", "tree": {"sha": "b4a1dbbe62d9345281c8b712d8fa6dc58b6d2963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a1dbbe62d9345281c8b712d8fa6dc58b6d2963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b36694859ea9f0951f329d55b60ecc70dba0c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b36694859ea9f0951f329d55b60ecc70dba0c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b36694859ea9f0951f329d55b60ecc70dba0c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b36694859ea9f0951f329d55b60ecc70dba0c8b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c600d691f3b8151c76612984215983d852c3d903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c600d691f3b8151c76612984215983d852c3d903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c600d691f3b8151c76612984215983d852c3d903"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "0bc45fd34e140e27bc2bf331b5431ee718b19836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -1,3 +1,11 @@\n+2016-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70296\n+\t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): If IDENT is\n+\tfunction-like macro, peek following token(s) if it is followed\n+\tby CPP_OPEN_PAREN token with optional padding in between, and\n+\tif not, don't treat it like a macro.\n+\n 2016-03-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Alexander Monakov  <amonakov@ispras.ru>\n "}, {"sha": "ceb80b216bae6ac6c7a6edd0851f007df1990078", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -216,7 +216,21 @@ rs6000_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n       else if (ident && (ident != C_CPP_HASHNODE (__vector_keyword)))\n \t{\n \t  enum rid rid_code = (enum rid)(ident->rid_code);\n-\t  if (ident->type == NT_MACRO)\n+\t  enum node_type itype = ident->type;\n+\t  /* If there is a function-like macro, check if it is going to be\n+\t     invoked with or without arguments.  Without following ( treat\n+\t     it like non-macro, otherwise the following cpp_get_token eats\n+\t     what should be preserved.  */\n+\t  if (itype == NT_MACRO && cpp_fun_like_macro_p (ident))\n+\t    {\n+\t      int idx2 = idx;\n+\t      do\n+\t\ttok = cpp_peek_token (pfile, idx2++);\n+\t      while (tok->type == CPP_PADDING);\n+\t      if (tok->type != CPP_OPEN_PAREN)\n+\t\titype = NT_VOID;\n+\t    }\n+\t  if (itype == NT_MACRO)\n \t    {\n \t      do\n \t\t(void) cpp_get_token (pfile);"}, {"sha": "77fbafc0bcb7b1ec4d4c0819f9f577d496553e97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -1,3 +1,8 @@\n+2016-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70296\n+\t* gcc.target/powerpc/altivec-36.c: New test.\n+\n 2016-03-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70310"}, {"sha": "ce9e6a36b5de0f311045fc34c2a74d511d6cf691", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-36.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-36.c?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -0,0 +1,46 @@\n+/* PR target/70296 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -std=gnu11\" } */\n+\n+#define c(x) x\n+#define f(x)\n+#define i int\n+#define k\n+typedef int vector;\n+typedef vector int V;\n+vector int a;\n+vector b;\n+vector c(int) d;\n+vector c(e);\n+vector c;\n+vector f(int) int g;\n+vector f(int) h;\n+vector i j;\n+vector k int l;\n+vector k m;\n+#define int(x) x\n+vector int n;\n+vector int(int) o;\n+vector int(r);\n+#undef int\n+\n+void\n+foo ()\n+{\n+  V *p;\n+  p = &a;\n+  p = &d;\n+  p = &g;\n+  p = &j;\n+  p = &l;\n+  p = &n;\n+  p = &o;\n+  int *q;\n+  q = &b;\n+  q = &e;\n+  q = &c;\n+  q = &h;\n+  q = &m;\n+  q = &r;\n+}"}, {"sha": "2352b7d640b2663dd35b7f0d081ac53f32caacf0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -1,3 +1,9 @@\n+2016-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70296\n+\t* include/cpplib.h (cpp_fun_like_macro_p): New prototype.\n+\t* macro.c (cpp_fun_like_macro_p): New function.\n+\n 2016-03-15  Richard Henderson  <rth@redhat.com>\n \n \t* line-map.c (new_linemap): Make alloc_size a size_t."}, {"sha": "35b0375c09c6c7f6eebfcef045c3979febe53f7d", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -813,6 +813,7 @@ extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,\n extern const cpp_token *cpp_get_token (cpp_reader *);\n extern const cpp_token *cpp_get_token_with_location (cpp_reader *,\n \t\t\t\t\t\t     source_location *);\n+extern bool cpp_fun_like_macro_p (cpp_hashnode *);\n extern const unsigned char *cpp_macro_definition (cpp_reader *,\n \t\t\t\t\t\t  cpp_hashnode *);\n extern void _cpp_backup_tokens (cpp_reader *, unsigned int);"}, {"sha": "759fbe7f028c4299a2270d579d8d6da2b3200cd5", "filename": "libcpp/macro.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b36694859ea9f0951f329d55b60ecc70dba0c8b/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=6b36694859ea9f0951f329d55b60ecc70dba0c8b", "patch": "@@ -3301,6 +3301,15 @@ check_trad_stringification (cpp_reader *pfile, const cpp_macro *macro,\n     }\n }\n \n+/* Returns true of NODE is a function-like macro.  */\n+bool\n+cpp_fun_like_macro_p (cpp_hashnode *node)\n+{\n+  return (node->type == NT_MACRO\n+\t  && (node->flags & (NODE_BUILTIN | NODE_MACRO_ARG)) == 0\n+\t  && node->value.macro->fun_like);\n+}\n+\n /* Returns the name, arguments and expansion of a macro, in a format\n    suitable to be read back in again, and therefore also for DWARF 2\n    debugging info.  e.g. \"PASTE(X, Y) X ## Y\", or \"MACNAME EXPANSION\"."}]}