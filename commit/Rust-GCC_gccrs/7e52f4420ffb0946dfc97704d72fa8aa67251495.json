{"sha": "7e52f4420ffb0946dfc97704d72fa8aa67251495", "node_id": "C_kwDOANBUbNoAKDdlNTJmNDQyMGZmYjA5NDZkZmM5NzcwNGQ3MmZhOGFhNjcyNTE0OTU", "commit": {"author": {"name": "Vineet Gupta", "email": "vineetg@rivosinc.com", "date": "2023-03-01T19:53:15Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-05T09:27:13Z"}, "message": "RISC-V: costs: miscomputed shiftadd_cost triggering synth_mult [PR/108987]\n\nThis showed up as dynamic icount regression in SPEC 531.deepsjeng with upstream\ngcc (vs. gcc 12.2). gcc was resorting to synthetic multiply using shift+add(s)\neven when multiply had clear cost benefit.\n\n|00000000000133b8 <see(state_t*, int, int, int, int) [clone .constprop.0]+0x382>:\n|   133b8:\tsrl\ta3,a1,s6\n|   133bc:\tand\ta3,a3,s5\n|   133c0:\tslli\ta4,a3,0x9\n|   133c4:\tadd\ta4,a4,a3\n|   133c6:\tslli\ta4,a4,0x9\n|   133c8:\tadd\ta4,a4,a3\n|   133ca:\tslli\ta3,a4,0x1b\n|   133ce:\tadd\ta4,a4,a3\n\nvs. gcc 12 doing something lke below.\n\n|00000000000131c4 <see(state_t*, int, int, int, int) [clone .constprop.0]+0x35c>:\n|   131c4:\tld\ts1,8(sp)\n|   131c6:\tsrl\ta3,a1,s4\n|   131ca:\tand\ta3,a3,s11\n|   131ce:\tmul\ta3,a3,s1\n\nBisected this to f90cb39235c4 (\"RISC-V: costs: support shift-and-add in\nstrength-reduction\"). The intent was to optimize cost for\nshift-add-pow2-{1,2,3} corresponding to bitmanip insns SH*ADD, but ended\nup doing that for all shift values which seems to favor synthezing\nmultiply among others.\n\nThe bug itself is trivial, IN_RANGE() calling pow2p_hwi() which returns bool\nvs. exact_log2() returning power of 2.\n\nThis fix also requires update to the test introduced by the same commit\nwhich now generates MUL vs. synthesizing it.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_rtx_costs): Fixed IN_RANGE() to\n\tuse exact_log2().\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-shNadd-07.c: f2(i*783) now generates MUL vs.\n\t5 insn sh1add+slli+add+slli+sub.\n\t* gcc.target/riscv/pr108987.c: New test.\n\nSigned-off-by: Vineet Gupta <vineetg@rivosinc.com>\nReviewed-by: Philipp Tomsich <philipp.tomsich@vrull.eu>", "tree": {"sha": "fbfd7e8aeae5042b060fdf0e708e7f496edf9712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbfd7e8aeae5042b060fdf0e708e7f496edf9712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e52f4420ffb0946dfc97704d72fa8aa67251495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e52f4420ffb0946dfc97704d72fa8aa67251495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e52f4420ffb0946dfc97704d72fa8aa67251495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e52f4420ffb0946dfc97704d72fa8aa67251495/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7caa1ae5e451e780fbc4746a54e3f19d4f4304dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7caa1ae5e451e780fbc4746a54e3f19d4f4304dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7caa1ae5e451e780fbc4746a54e3f19d4f4304dc"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "befb9b498b7870c8ea8d16f47cc889a2eb60a36e", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=7e52f4420ffb0946dfc97704d72fa8aa67251495", "patch": "@@ -2527,7 +2527,8 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t  && GET_CODE (XEXP (x, 0)) == MULT\n \t  && REG_P (XEXP (XEXP (x, 0), 0))\n \t  && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n-\t  && IN_RANGE (pow2p_hwi (INTVAL (XEXP (XEXP (x, 0), 1))), 1, 3))\n+\t  && pow2p_hwi (INTVAL (XEXP (XEXP (x, 0), 1)))\n+\t  && IN_RANGE (exact_log2 (INTVAL (XEXP (XEXP (x, 0), 1))), 1, 3))\n \t{\n \t  *total = COSTS_N_INSNS (1);\n \t  return true;"}, {"sha": "6179c7e13a4516ab96674d6dec6e0360f451d824", "filename": "gcc/testsuite/gcc.target/riscv/pr108987.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr108987.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr108987.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr108987.c?ref=7e52f4420ffb0946dfc97704d72fa8aa67251495", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+\n+unsigned long long f5(unsigned long long i)\n+{\n+  return i * 0x0202020202020202ULL;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul\" 1 } } */"}, {"sha": "93da241c9b60e4fa6f70c806f1e3a815f90f20c1", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-07.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e52f4420ffb0946dfc97704d72fa8aa67251495/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-07.c?ref=7e52f4420ffb0946dfc97704d72fa8aa67251495", "patch": "@@ -26,6 +26,6 @@ f4 (unsigned long i)\n }\n \n /* { dg-final { scan-assembler-times \"sh2add\" 2 } } */\n-/* { dg-final { scan-assembler-times \"sh1add\" 2 } } */\n-/* { dg-final { scan-assembler-times \"slli\" 5 } } */\n-/* { dg-final { scan-assembler-times \"mul\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sh1add\" 1 } } */\n+/* { dg-final { scan-assembler-times \"slli\" 3 } } */\n+/* { dg-final { scan-assembler-times \"mul\" 2 } } */"}]}