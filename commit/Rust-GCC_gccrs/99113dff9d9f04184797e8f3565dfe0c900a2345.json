{"sha": "99113dff9d9f04184797e8f3565dfe0c900a2345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxMTNkZmY5ZDlmMDQxODQ3OTdlOGYzNTY1ZGZlMGM5MDBhMjM0NQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2013-02-01T20:26:24Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2013-02-01T20:26:24Z"}, "message": "re PR c++/54601 (AIX uses atexit which causes unloading of shared modules to break)\n\n        PR target/54601\nlibgcc/\n        * config.host (powerpc-ibm-aix[56789]): Add t-aix-cxa to tmake_file.\n        Add crtcxa to extra_parts.\n        * config/rs6000/exit.h: New file.\n        * config/rs6000/cxa_atexit.c: New file.\n        * config/rs6000/cxa_finalize.c: New file.\n        * config/rs6000/crtcxa.c: New file.\n        * config/rs6000/t-aix-cxa: New file.\n        * config/rs6000/libgcc-aix-cxa.ver: New file.\n\ngcc/\n        * configure.ac (cxa_atexit): Add AIX.\n        * configure: Regenerate.\n\n        * config/rs6000/aix61.h (STARTFILE_SPEC): Add crtcxa.o.\n\nFrom-SVN: r195675", "tree": {"sha": "30472f84083cf675f186689b2add871ca6d548f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30472f84083cf675f186689b2add871ca6d548f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99113dff9d9f04184797e8f3565dfe0c900a2345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99113dff9d9f04184797e8f3565dfe0c900a2345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99113dff9d9f04184797e8f3565dfe0c900a2345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99113dff9d9f04184797e8f3565dfe0c900a2345/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddd84654d90b8056c5aa1a5f164cb685db327aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd84654d90b8056c5aa1a5f164cb685db327aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd84654d90b8056c5aa1a5f164cb685db327aa0"}], "stats": {"total": 400, "additions": 396, "deletions": 4}, "files": [{"sha": "8af4967c718346a28004cfbb3cf1ebfdd9235576", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -1,3 +1,11 @@\n+2013-02-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/54601\n+\t* configure.ac (use_cxa_atexit): Add AIX.\n+\t* configure: Regenerate.\n+\n+\t* config/rs6000/aix61.h (STARTFILE_SPEC): Add crtcxa.o.\n+\n 2013-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/54793"}, {"sha": "42f4ba54a700970388cc8310f7090a3a7086f937", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -163,7 +163,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n    %{!maix64:\\\n      %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n-     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\\\n+   %{shared:crtcxa_s%O%s;:crtcxa%O%s}\"\n \n /* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n "}, {"sha": "d4f49bbeceb8d2bed6c0f7f01494364f276ac135", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -11136,6 +11136,9 @@ if test x$enable___cxa_atexit = xyes || \\\n       *-*-mingw32*)\n \tuse_cxa_atexit=yes\n \t;;\n+      powerpc-ibm-aix*)\n+\tuse_cxa_atexit=yes\n+\t;;\n       *)\n \tac_fn_c_check_func \"$LINENO\" \"__cxa_atexit\" \"ac_cv_func___cxa_atexit\"\n if test \"x$ac_cv_func___cxa_atexit\" = x\"\"yes; then :\n@@ -17825,7 +17828,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17828 \"configure\"\n+#line 17831 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17931,7 +17934,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17934 \"configure\"\n+#line 17937 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "811c296cb81c30d7224b76061858432f54cb60c6", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -1455,6 +1455,9 @@ if test x$enable___cxa_atexit = xyes || \\\n       *-*-mingw32*)\n \tuse_cxa_atexit=yes\n \t;;\n+      powerpc-ibm-aix*)\n+\tuse_cxa_atexit=yes\n+\t;;\n       *)\n \tAC_CHECK_FUNC(__cxa_atexit,[use_cxa_atexit=yes],\n \t  [echo \"__cxa_atexit can't be enabled on this target\"])"}, {"sha": "fc7ebd00d52e43f708dd3809163ab3f44e447bb8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -1,3 +1,15 @@\n+2013-02-01  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/54601\n+\t* config.host (powerpc-ibm-aix[56789]): Add t-aix-cxa to tmake_file.\n+\tAdd crtcxa to extra_parts.\n+\t* config/rs6000/exit.h: New file.\n+\t* config/rs6000/cxa_atexit.c: New file.\n+\t* config/rs6000/cxa_finalize.c: New file.\n+\t* config/rs6000/crtcxa.c: New file.\n+\t* config/rs6000/t-aix-cxa: New file.\n+\t* config/rs6000/libgcc-aix-cxa.ver: New file.\n+\n 2013-01-31  Nick Clifton  <nickc@redhat.com>\n \n \t* config/v850/lib1funcs.S: Add support for e3v5 architecture"}, {"sha": "ff2d6a4fe89c26f6fdb1f307ef63f73d88ce7054", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -899,7 +899,8 @@ rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n \t;;\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n-\ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble\"\n+\ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble rs6000/t-aix-cxa\"\n+\textra_parts=\"crtcxa.o crtcxa_s.o\"\n \t;;\n rl78-*-elf)\n \ttmake_file=\"$tm_file t-fdpbit rl78/t-rl78\""}, {"sha": "bff0d2c8884b6ea4cadaf6d025d6d4d58c5fb6d9", "filename": "libgcc/config/rs6000/crtcxa.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcrtcxa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcrtcxa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fcrtcxa.c?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,42 @@\n+/* __dso_handle initialization for AIX.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Written by David Edelsohn, IBM.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef SHARED\n+void *__dso_handle = &__dso_handle;\n+#else\n+void *__dso_handle = 0;\n+#endif\n+\n+extern void __cxa_finalize (void *);\n+\n+/* Add __cxa_finalize call to beginning of destructors list.  */\n+void __init_aix_libgcc_cxa_atexit (void) __attribute__ ((destructor (65535)));\n+\n+void\n+__init_aix_libgcc_cxa_atexit (void)\n+{\n+  __cxa_finalize (__dso_handle);\n+}\n+"}, {"sha": "91118ab7feecfbe572bbd76d6cf7f7d0a62d607d", "filename": "libgcc/config/rs6000/cxa_atexit.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcxa_atexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcxa_atexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fcxa_atexit.c?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,131 @@\n+/* Copyright (C) 1999-2013 Free Software Foundation, Inc.\n+\n+   NOTE: This source is derived from an old version taken from the GNU C\n+   Library (glibc).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+\n+#include \"exit.h\"\n+\n+#undef __cxa_atexit\n+\n+#define atomic_write_barrier() __asm__ (\"eieio\" ::: \"memory\")\n+\n+int\n+attribute_hidden\n+__internal_atexit (void (*func) (void *), void *arg, void *d,\n+\t\t   struct exit_function_list **listp)\n+{\n+  struct exit_function *new = __new_exitfn (listp);\n+\n+  if (new == NULL)\n+    return -1;\n+\n+#ifdef PTR_MANGLE\n+  PTR_MANGLE (func);\n+#endif\n+  new->func.cxa.fn = (void (*) (void *, int)) func;\n+  new->func.cxa.arg = arg;\n+  new->func.cxa.dso_handle = d;\n+  atomic_write_barrier ();\n+  new->flavor = ef_cxa;\n+  return 0;\n+}\n+\n+\n+/* Register a function to be called by exit or when a shared library\n+   is unloaded.  This function is only called from code generated by\n+   the C++ compiler.  */\n+int\n+__cxa_atexit (void (*func) (void *), void *arg, void *d)\n+{\n+  return __internal_atexit (func, arg, d, &__exit_funcs);\n+}\n+INTDEF(__cxa_atexit)\n+\n+\n+static struct exit_function_list initial;\n+struct exit_function_list *__exit_funcs = &initial;\n+uint64_t __new_exitfn_called;\n+\n+struct exit_function *\n+__new_exitfn (struct exit_function_list **listp)\n+{\n+  struct exit_function_list *p = NULL;\n+  struct exit_function_list *l;\n+  struct exit_function *r = NULL;\n+  size_t i = 0;\n+\n+  for (l = *listp; l != NULL; p = l, l = l->next)\n+    {\n+      for (i = l->idx; i > 0; --i)\n+\tif (l->fns[i - 1].flavor != ef_free)\n+\t  break;\n+\n+      if (i > 0)\n+\tbreak;\n+\n+      /* This block is completely unused.  */\n+      l->idx = 0;\n+    }\n+\n+  if (l == NULL || i == sizeof (l->fns) / sizeof (l->fns[0]))\n+    {\n+      /* The last entry in a block is used.  Use the first entry in\n+\t the previous block if it exists.  Otherwise create a new one.  */\n+      if (p == NULL)\n+\t{\n+\t  assert (l != NULL);\n+\t  p = (struct exit_function_list *)\n+\t    calloc (1, sizeof (struct exit_function_list));\n+\t  if (p != NULL)\n+\t    {\n+\t      p->next = *listp;\n+\t      *listp = p;\n+\t    }\n+\t}\n+\n+      if (p != NULL)\n+\t{\n+\t  r = &p->fns[0];\n+\t  p->idx = 1;\n+\t}\n+    }\n+  else\n+    {\n+      /* There is more room in the block.  */\n+      r = &l->fns[i];\n+      l->idx = i + 1;\n+    }\n+\n+  /* Mark entry as used, but we don't know the flavor now.  */\n+  if (r != NULL)\n+    {\n+      r->flavor = ef_us;\n+      ++__new_exitfn_called;\n+    }\n+\n+  return r;\n+}"}, {"sha": "623c6098b1be3cf6e3c21dc397c5744fc85c29c4", "filename": "libgcc/config/rs6000/cxa_finalize.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcxa_finalize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fcxa_finalize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fcxa_finalize.c?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,85 @@\n+/* Copyright (C) 1999-2013 Free Software Foundation, Inc.\n+\n+   NOTE: This source is derived from an old version taken from the GNU C\n+   Library (glibc).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+#include \"exit.h\"\n+\n+\n+static boolean_t\n+catomic_compare_and_exchange_bool_acq (long *mem, long newval, long oldval)\n+{\n+  return __atomic_compare_exchange (mem, &oldval, &newval, 0,\n+\t\t\t\t    __ATOMIC_ACQUIRE, __ATOMIC_ACQUIRE);\n+}\n+\n+/* If D is non-NULL, call all functions registered with `__cxa_atexit'\n+   with the same dso handle.  Otherwise, if D is NULL, call all of the\n+   registered handlers.  */\n+void\n+__cxa_finalize (void *d)\n+{\n+  struct exit_function_list *funcs;\n+\n+ restart:\n+  for (funcs = __exit_funcs; funcs; funcs = funcs->next)\n+    {\n+      struct exit_function *f;\n+\n+      for (f = &funcs->fns[funcs->idx - 1]; f >= &funcs->fns[0]; --f)\n+\t{\n+\t  void (*cxafn) (void *arg, int status);\n+\t  void *cxaarg;\n+\n+\t  if ((d == NULL || d == f->func.cxa.dso_handle)\n+\t      /* We don't want to run this cleanup more than once.  */\n+\t      && (cxafn = f->func.cxa.fn,\n+\t\t  cxaarg = f->func.cxa.arg,\n+\t\t  ! catomic_compare_and_exchange_bool_acq (&f->flavor, ef_free,\n+\t\t\t\t\t\t\t   ef_cxa)))\n+\t    {\n+\t      uint64_t check = __new_exitfn_called;\n+\n+#ifdef PTR_DEMANGLE\n+\t      PTR_DEMANGLE (cxafn);\n+#endif\n+\t      cxafn (cxaarg, 0);\n+\n+\t      /* It is possible that that last exit function registered\n+\t\t more exit functions.  Start the loop over.  */\n+\t      if (__builtin_expect (check != __new_exitfn_called, 0))\n+\t\tgoto restart;\n+\t    }\n+\t}\n+    }\n+\n+  /* Remove the registered fork handlers.  We do not have to\n+     unregister anything if the program is going to terminate anyway.  */\n+#ifdef UNREGISTER_ATFORK\n+  if (d != NULL)\n+    UNREGISTER_ATFORK (d);\n+#endif\n+}"}, {"sha": "079725270fd4f27ebc2437c5d34e153892ff5a19", "filename": "libgcc/config/rs6000/exit.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fexit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Fexit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fexit.h?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,92 @@\n+/* Copyright (C) 1991-2013 Free Software Foundation, Inc.\n+\n+Derived from exit.h in GNU C Library.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef\t_EXIT_H\n+#define _EXIT_H 1\n+\n+#define attribute_hidden\n+#define INTDEF(name)\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+\n+enum\n+{\n+  ef_free,\t/* `ef_free' MUST be zero!  */\n+  ef_us,\n+  ef_on,\n+  ef_at,\n+  ef_cxa\n+};\n+\n+struct exit_function\n+  {\n+    /* `flavour' should be of type of the `enum' above but since we need\n+       this element in an atomic operation we have to use `long int'.  */\n+    long int flavor;\n+    union\n+      {\n+\tvoid (*at) (void);\n+\tstruct\n+\t  {\n+\t    void (*fn) (int status, void *arg);\n+\t    void *arg;\n+\t  } on;\n+\tstruct\n+\t  {\n+\t    void (*fn) (void *arg, int status);\n+\t    void *arg;\n+\t    void *dso_handle;\n+\t  } cxa;\n+      } func;\n+  };\n+struct exit_function_list\n+  {\n+    struct exit_function_list *next;\n+    size_t idx;\n+    struct exit_function fns[32];\n+  };\n+extern struct exit_function_list *__exit_funcs attribute_hidden;\n+extern struct exit_function_list *__quick_exit_funcs attribute_hidden;\n+\n+extern struct exit_function *__new_exitfn (struct exit_function_list **listp);\n+extern uint64_t __new_exitfn_called attribute_hidden;\n+\n+extern void __run_exit_handlers (int status, struct exit_function_list **listp,\n+\t\t\t\t bool run_list_atexit)\n+  attribute_hidden __attribute__ ((__noreturn__));\n+\n+extern int __internal_atexit (void (*func) (void *), void *arg, void *d,\n+\t\t\t      struct exit_function_list **listp)\n+  attribute_hidden;\n+extern int __cxa_at_quick_exit (void (*func) (void *), void *d);\n+\n+extern int __cxa_atexit (void (*func) (void *), void *arg, void *d);\n+extern int __cxa_atexit_internal (void (*func) (void *), void *arg, void *d)\n+     attribute_hidden;\n+\n+extern void __cxa_finalize (void *d);\n+\n+#endif\t/* exit.h  */"}, {"sha": "083067d141bc4cf92b9dcc77f4f9192073c5c9c3", "filename": "libgcc/config/rs6000/libgcc-aix-cxa.ver", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,4 @@\n+GCC_4.8 {\n+  __cxa_atexit\n+  __cxa_finalize\n+}"}, {"sha": "4ef818558a7c503c45dc1645ece83cab2431f94b", "filename": "libgcc/config/rs6000/t-aix-cxa", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99113dff9d9f04184797e8f3565dfe0c900a2345/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa?ref=99113dff9d9f04184797e8f3565dfe0c900a2345", "patch": "@@ -0,0 +1,10 @@\n+LIB2ADDEH += $(srcdir)/config/rs6000/cxa_atexit.c \\\n+\t$(srcdir)/config/rs6000/cxa_finalize.c\n+\n+SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-aix-cxa.ver\n+\n+crtcxa.o: $(srcdir)/config/rs6000/crtcxa.c\n+\t$(crt_compile) -c $<\n+\n+crtcxa_s.o: $(srcdir)/config/rs6000/crtcxa.c\n+\t$(crt_compile) -DSHARED -c $<"}]}