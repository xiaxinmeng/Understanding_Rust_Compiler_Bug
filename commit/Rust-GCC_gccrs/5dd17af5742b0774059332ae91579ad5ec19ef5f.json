{"sha": "5dd17af5742b0774059332ae91579ad5ec19ef5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRkMTdhZjU3NDJiMDc3NDA1OTMzMmFlOTE1NzlhZDVlYzE5ZWY1Zg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-10-11T23:58:17Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-10-11T23:58:17Z"}, "message": "re PR fortran/20786 (Can't use AINT intrinsic with KIND parameter)\n\nPR fortran/20786\n* iresolve.c (gfc_resolve_aint, gfc_resolve_anint ): Type conversion\n  of the argument.\n\ngfortran.dg/aint_anint_1.f90: New test.\n\nFrom-SVN: r105276", "tree": {"sha": "e3a513c7daef9eda904a926588a408a02d90ea77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3a513c7daef9eda904a926588a408a02d90ea77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dd17af5742b0774059332ae91579ad5ec19ef5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd17af5742b0774059332ae91579ad5ec19ef5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dd17af5742b0774059332ae91579ad5ec19ef5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd17af5742b0774059332ae91579ad5ec19ef5f/comments", "author": null, "committer": null, "parents": [{"sha": "4bbae09f178ab7f11dbb4469604f347f615f686e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbae09f178ab7f11dbb4469604f347f615f686e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbae09f178ab7f11dbb4469604f347f615f686e"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "85b6ce8fafed698025f71cb3055d86314d107149", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5dd17af5742b0774059332ae91579ad5ec19ef5f", "patch": "@@ -1,3 +1,9 @@\n+2005-10-11  Steven G. Kargl <kargls@comcast.net>\n+\n+\tPR fortran/20786\n+\t*iresolve.c (gfc_resolve_aint, gfc_resolve_anint ): Type conversion \n+\tof the argument.\n+\n 2005-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* f95-lang.c (gfc_init_decl_processing): Initialize"}, {"sha": "6c23d4a2c74dbf857eb5790932cab1649dde5db1", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=5dd17af5742b0774059332ae91579ad5ec19ef5f", "patch": "@@ -105,9 +105,17 @@ gfc_resolve_aimag (gfc_expr * f, gfc_expr * x)\n void\n gfc_resolve_aint (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n+  gfc_typespec ts;\n+  \n   f->ts.type = a->ts.type;\n   f->ts.kind = (kind == NULL) ? a->ts.kind : mpz_get_si (kind->value.integer);\n \n+  if (a->ts.kind != f->ts.kind)\n+    {\n+      ts.type = f->ts.type;\n+      ts.kind = f->ts.kind;\n+      gfc_convert_type (a, &ts, 2);\n+    }\n   /* The resolved name is only used for specific intrinsics where\n      the return kind is the same as the arg kind.  */\n   f->value.function.name =\n@@ -143,9 +151,18 @@ gfc_resolve_all (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n void\n gfc_resolve_anint (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n+  gfc_typespec ts;\n+  \n   f->ts.type = a->ts.type;\n   f->ts.kind = (kind == NULL) ? a->ts.kind : mpz_get_si (kind->value.integer);\n \n+  if (a->ts.kind != f->ts.kind)\n+    {\n+      ts.type = f->ts.type;\n+      ts.kind = f->ts.kind;\n+      gfc_convert_type (a, &ts, 2);\n+    }\n+\n   /* The resolved name is only used for specific intrinsics where\n      the return kind is the same as the arg kind.  */\n   f->value.function.name ="}, {"sha": "340cfa36958474befb244b385ceff688788e6ac8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dd17af5742b0774059332ae91579ad5ec19ef5f", "patch": "@@ -1,3 +1,8 @@\n+2005-10-11  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/20786\n+\tgfortran.dg/aint_anint_1.f90: New test.\n+\n 2005-10-11  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR libgfortran/24313"}, {"sha": "179748c11909a41ded073d59b050cbfdb5aa3db4", "filename": "gcc/testsuite/gfortran.dg/aint_anint_1.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd17af5742b0774059332ae91579ad5ec19ef5f/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90?ref=5dd17af5742b0774059332ae91579ad5ec19ef5f", "patch": "@@ -0,0 +1,26 @@\n+program aint_anint_1\n+    \n+  implicit none\n+\n+  real(4) :: r = 42.7, r1, r2\n+  real(8) :: s = 42.7D0, s1, s2\n+\n+  r1 = aint(r)\n+  r2 = aint(r,kind=8)\n+  if (abs(r1 - r2) > 0.1) call abort()\n+\n+  r1 = anint(r)\n+  r2 = anint(r,kind=8)\n+  if (abs(r1 - r2) > 0.1) call abort()\n+\n+  s1 = aint(s)\n+  s2 = aint(s, kind=4)\n+  if (abs(s1 - s2) > 0.1) call abort()\n+\n+  s1 = anint(s)\n+  s2 = anint(s, kind=4)\n+  if (abs(s1 - s2) > 0.1) call abort()\n+\n+\n+end program aint_anint_1\n+"}]}