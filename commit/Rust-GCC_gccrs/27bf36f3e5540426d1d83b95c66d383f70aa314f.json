{"sha": "27bf36f3e5540426d1d83b95c66d383f70aa314f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZjM2ZjNlNTU0MDQyNmQxZDgzYjk1YzY2ZDM4M2Y3MGFhMzE0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T17:39:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T17:39:44Z"}, "message": "rx: Move SELECT_CC_MODE to function.\n\nRewrite to look at comparison codes, not arithmetic codes.\n\nFrom-SVN: r168915", "tree": {"sha": "20d7baac64c532024359cc3f911c5759c0798eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d7baac64c532024359cc3f911c5759c0798eda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27bf36f3e5540426d1d83b95c66d383f70aa314f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf36f3e5540426d1d83b95c66d383f70aa314f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bf36f3e5540426d1d83b95c66d383f70aa314f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf36f3e5540426d1d83b95c66d383f70aa314f/comments", "author": null, "committer": null, "parents": [{"sha": "999209d01b7a327359f0fd890a48b60c979d7eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999209d01b7a327359f0fd890a48b60c979d7eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999209d01b7a327359f0fd890a48b60c979d7eb7"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "3e94cc76c0998f2c1249657b1f968f6feed685cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27bf36f3e5540426d1d83b95c66d383f70aa314f", "patch": "@@ -1,3 +1,10 @@\n+2011-01-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rx/rx-modes.def (CC_F): New mode.\n+\t* config/rx/rx.c (rx_select_cc_mode): New.\n+\t* config/rx/rx.h (SELECT_CC_MODE): Use it.\n+\t* config/rx/rx-protos.h: Update.\n+\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n \t* except.c (dump_eh_tree): Fix stray ; after for statement."}, {"sha": "31e3225c677430097ca3e59f74de1314adcbcd24", "filename": "gcc/config/rx/rx-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-modes.def?ref=27bf36f3e5540426d1d83b95c66d383f70aa314f", "patch": "@@ -21,3 +21,5 @@\n CC_MODE (CC_ZS);\n CC_MODE (CC_ZSO);\n CC_MODE (CC_ZSC);\n+\n+CC_MODE (CC_F);\t\t/* fcmp */"}, {"sha": "c5b7b6cbf8e4fbb7daddf9388011859d28e489ba", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=27bf36f3e5540426d1d83b95c66d383f70aa314f", "patch": "@@ -24,6 +24,7 @@\n /* A few abbreviations to make the prototypes shorter.  */\n #define Mmode \tenum machine_mode\n #define Fargs\tCUMULATIVE_ARGS\n+#define Rcode\tenum rtx_code\n \f\n extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n@@ -40,6 +41,7 @@ extern bool\t\trx_is_legitimate_constant (rtx);\n extern bool \t\trx_is_mode_dependent_addr (rtx);\n extern bool\t\trx_is_restricted_memory_address (rtx, Mmode);\n extern void\t\trx_notice_update_cc (rtx body, rtx insn);\n+extern Mmode\t\trx_select_cc_mode (Rcode, rtx, rtx);\n #endif\n \n #endif /* GCC_RX_PROTOS_H */"}, {"sha": "b5a996ffd92295def8f112d17fe18c97dea37b95", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=27bf36f3e5540426d1d83b95c66d383f70aa314f", "patch": "@@ -2756,6 +2756,35 @@ rx_memory_move_cost (enum machine_mode mode, reg_class_t regclass, bool in)\n {\n   return 2 + memory_move_secondary_cost (mode, regclass, in);\n }\n+\n+/* Return the minimal CC mode needed to implement (CMP_CODE X Y).  */\n+\n+enum machine_mode\n+rx_select_cc_mode (enum rtx_code cmp_code, rtx x, rtx y ATTRIBUTE_UNUSED)\n+{\n+  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+    return CC_Fmode;\n+\n+  switch (cmp_code)\n+    {\n+    case EQ:\n+    case NE:\n+    case LT:\n+    case GE:\n+      return CC_ZSmode;\n+    case GT:\n+    case LE:\n+      return CC_ZSOmode;\n+    case GEU:\n+    case LTU:\n+    case GTU:\n+    case LEU:\n+      return CC_ZSCmode;\n+    default:\n+      return CCmode;\n+    }\n+}\n+\n \f\n #undef  TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE\t\trx_function_value"}, {"sha": "d26c80c0c79169b4b9cfebac0f0affbd78ed722d", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf36f3e5540426d1d83b95c66d383f70aa314f/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=27bf36f3e5540426d1d83b95c66d383f70aa314f", "patch": "@@ -624,12 +624,4 @@ extern int rx_float_compare_mode;\n #define BRANCH_COST(SPEED,PREDICT)       1\n #define REGISTER_MOVE_COST(MODE,FROM,TO) 2\n \n-#define SELECT_CC_MODE(OP,X,Y)\t\t\t\t\t\t\\\n-  (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT ? CC_ZSmode :\t\t\\\n-    (GET_CODE (X) == PLUS || GET_CODE (X) == MINUS ? CC_ZSCmode :\t\\\n-    (GET_CODE (X) == ABS ? CC_ZSOmode :\t\t\t\t\t\\\n-    (GET_CODE (X) == AND || GET_CODE (X) == NOT || GET_CODE (X) == IOR\t\\\n-     || GET_CODE (X) == XOR || GET_CODE (X) == ROTATE\t\t\t\\\n-     || GET_CODE (X) == ROTATERT || GET_CODE (X) == ASHIFTRT\t\t\\\n-     || GET_CODE (X) == LSHIFTRT || GET_CODE (X) == ASHIFT ? CC_ZSmode : \\\n-     CCmode))))\n+#define SELECT_CC_MODE(OP,X,Y)  rx_select_cc_mode(OP, X, Y)"}]}