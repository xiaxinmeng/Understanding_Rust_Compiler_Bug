{"sha": "759df569f189ce9e4d015c5b46ea5e2107923c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5ZGY1NjlmMTg5Y2U5ZTRkMDE1YzViNDZlYTVlMjEwNzkyM2M2OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-22T01:04:09Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-22T01:04:09Z"}, "message": "always define HAVE_conditional_move\n\ngcc/ChangeLog:\n\n2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* genconfig.c (main): Always define HAVE_conditional_move.\n\t* combine.c, expmed.c, expr.c, ifcvt.c, optabs.c, optabs.h,\n\ttoplev.c, tree-ssa-phiopt.c: Don't check if HAVE_conditional_move\n\tis defined.\n\nFrom-SVN: r223517", "tree": {"sha": "a37891e94f721c718315cb660f065ca1c6b6f94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a37891e94f721c718315cb660f065ca1c6b6f94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/759df569f189ce9e4d015c5b46ea5e2107923c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759df569f189ce9e4d015c5b46ea5e2107923c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759df569f189ce9e4d015c5b46ea5e2107923c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759df569f189ce9e4d015c5b46ea5e2107923c69/comments", "author": null, "committer": null, "parents": [{"sha": "3f393fc679e504e451bbe07cbc15bc013a5700f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f393fc679e504e451bbe07cbc15bc013a5700f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f393fc679e504e451bbe07cbc15bc013a5700f5"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "ac1933a0a9a00347954f40d306037d1f34ce9e23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -1,3 +1,10 @@\n+2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* genconfig.c (main): Always define HAVE_conditional_move.\n+\t* combine.c, expmed.c, expr.c, ifcvt.c, optabs.c, optabs.h,\n+\ttoplev.c, tree-ssa-phiopt.c: Don't check if HAVE_conditional_move\n+\tis defined.\n+\n 2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* combine.c, df-problems.c, df-scan.c, emit-rtl.c, reginfo.c,"}, {"sha": "3f96bbca4bf46909602aaed239bd14c9358ed01e", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -6818,7 +6818,7 @@ simplify_set (rtx x)\n       && (GET_CODE (XEXP (src, 0)) == EQ || GET_CODE (XEXP (src, 0)) == NE)\n       && XEXP (XEXP (src, 0), 1) == const0_rtx\n       && GET_MODE (src) == GET_MODE (XEXP (XEXP (src, 0), 0))\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n       && ! can_conditionally_move_p (GET_MODE (src))\n #endif\n       && (num_sign_bit_copies (XEXP (XEXP (src, 0), 0),"}, {"sha": "589a7a3d0e57ff4ef7d3e41f422238317c98c494", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -3797,7 +3797,7 @@ expand_sdiv_pow2 (machine_mode mode, rtx op0, HOST_WIDE_INT d)\n       return expand_shift (RSHIFT_EXPR, mode, temp, logd, NULL_RTX, 0);\n     }\n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n   if (BRANCH_COST (optimize_insn_for_speed_p (), false)\n       >= 2)\n     {\n@@ -5555,7 +5555,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t\t\t\t    target_mode);\n \t}\n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n       /* Try using a setcc instruction for ORDERED/UNORDERED, followed by a\n \t conditional move.  */\n       tem = emit_store_flag_1 (subtarget, first_code, op0, op1, mode, 0,"}, {"sha": "efbf9fb91498a9006954be52ee9d2a1c58592ad2", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -2423,7 +2423,7 @@ get_def_for_expr (tree name, enum tree_code code)\n   return def_stmt;\n }\n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n /* Return the defining gimple statement for SSA_NAME NAME if it is an\n    assigment and the class of the expresion on the RHS is CLASS.  Return\n    NULL otherwise.  */\n@@ -7517,7 +7517,7 @@ highest_pow2_factor_for_target (const_tree target, const_tree exp)\n   return MAX (factor, talign);\n }\n \f\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n /* Convert the tree comparison code TCODE to the rtl one where the\n    signedness is UNSIGNEDP.  */\n \n@@ -8021,7 +8021,7 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n \t\t\t      tree treeop1 ATTRIBUTE_UNUSED,\n \t\t\t      tree treeop2 ATTRIBUTE_UNUSED)\n {\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n   rtx insn;\n   rtx op00, op01, op1, op2;\n   enum rtx_code comparison_code;\n@@ -8892,7 +8892,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t    if (code == MIN_EXPR)\n \t      comparison_code = LT;\n \t  }\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n \t/* Use a conditional move if possible.  */\n \tif (can_conditionally_move_p (mode))\n \t  {"}, {"sha": "a3e5b3111ff7b43d5eed025bc4cfb6420974e56c", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -352,6 +352,8 @@ main (int argc, char **argv)\n \n   if (have_cmove_flag)\n     printf (\"#define HAVE_conditional_move 1\\n\");\n+  else\n+    printf (\"#define HAVE_conditional_move 0\\n\");\n \n   if (have_cond_exec_flag)\n     printf (\"#define HAVE_conditional_execution 1\\n\");"}, {"sha": "37117b7e5ef5ef2af441acd888addf4feef3b90e", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -72,9 +72,6 @@\n #include \"shrink-wrap.h\"\n #include \"ifcvt.h\"\n \n-#ifndef HAVE_conditional_move\n-#define HAVE_conditional_move 0\n-#endif\n #ifndef HAVE_incscc\n #define HAVE_incscc 0\n #endif\n@@ -1505,7 +1502,6 @@ noce_emit_cmove (struct noce_if_info *if_info, rtx x, enum rtx_code code,\n \treturn NULL_RTX;\n     }\n \n-#if HAVE_conditional_move\n   unsignedp = (code == LTU || code == GEU\n \t       || code == LEU || code == GTU);\n \n@@ -1562,13 +1558,6 @@ noce_emit_cmove (struct noce_if_info *if_info, rtx x, enum rtx_code code,\n     }\n   else\n     return NULL_RTX;\n-#else\n-  /* We'll never get here, as noce_process_if_block doesn't call the\n-     functions involved.  Ifdef code, however, should be discouraged\n-     because it leads to typos in the code not selected.  However,\n-     emit_conditional_move won't exist either.  */\n-  return NULL_RTX;\n-#endif\n }\n \n /* Try only simple constants and registers here.  More complex cases"}, {"sha": "7a791489c71c5e76ef031e1fd16eed0ace086ce8", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -929,7 +929,7 @@ expand_subword_shift (machine_mode op1_mode, optab binoptab,\n }\n \n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n /* Try implementing expand_doubleword_shift using conditional moves.\n    The shift is by < BITS_PER_WORD if (CMP_CODE CMP1 CMP2) is true,\n    otherwise it is by >= BITS_PER_WORD.  SUBWORD_OP1 and SUPERWORD_OP1\n@@ -1096,7 +1096,7 @@ expand_doubleword_shift (machine_mode op1_mode, optab binoptab,\n \t\t\t\t     unsignedp, methods, shift_mask);\n     }\n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n   /* Try using conditional moves to generate straight-line code.  */\n   {\n     rtx_insn *start = get_last_insn ();\n@@ -4518,7 +4518,7 @@ emit_indirect_jump (rtx loc ATTRIBUTE_UNUSED)\n #endif\n }\n \f\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n \n /* Emit a conditional move instruction if the machine supports one for that\n    condition and machine mode."}, {"sha": "ff45eb869936609545b335ca51a8b07d6c3d1310", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -364,7 +364,7 @@ extern void emit_indirect_jump (rtx);\n #error \"insn-config.h must be included before optabs.h\"\n #endif\n \n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n /* Emit a conditional move operation.  */\n rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, machine_mode,\n \t\t\t   rtx, rtx, machine_mode, int);"}, {"sha": "9be15d784e4e7422ad51d3aaf1adf4717088b392", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -1576,7 +1576,7 @@ process_options (void)\n     warning (0, \"var-tracking-assignments changes selective scheduling\");\n \n   if (flag_tree_cselim == AUTODETECT_VALUE)\n-#ifdef HAVE_conditional_move\n+#if HAVE_conditional_move\n     flag_tree_cselim = 1;\n #else\n     flag_tree_cselim = 0;"}, {"sha": "b8c77ab0816106b643dc101c9b68e53aee8d48c7", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759df569f189ce9e4d015c5b46ea5e2107923c69/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=759df569f189ce9e4d015c5b46ea5e2107923c69", "patch": "@@ -83,10 +83,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"tree-inline.h\"\n \n-#ifndef HAVE_conditional_move\n-#define HAVE_conditional_move (0)\n-#endif\n-\n static unsigned int tree_ssa_phiopt_worker (bool, bool);\n static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, gphi *, tree, tree);"}]}