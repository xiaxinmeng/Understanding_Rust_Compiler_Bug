{"sha": "c7b6c6cd4791c3003397feea31482c3d19419fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiNmM2Y2Q0NzkxYzMwMDMzOTdmZWVhMzE0ODJjM2QxOTQxOWZlMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-13T02:14:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-13T02:14:05Z"}, "message": "builtins.c (expand_builtin): Handle BUILT_IN_INDEX and BUILT_IN_RINDEX.\n\n\t* builtins.c (expand_builtin): Handle BUILT_IN_INDEX and\n\tBUILT_IN_RINDEX.  Add missing checks for BUILT_IN_STRCHR and\n\tBUILT_IN_STRRCHR.\n\n\t* builtins.def (BUILT_IN_INDEX, BUILT_IN_RINDEX): New entries.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare index and\n\trindex when nonansi builtins are allowed.\n\n\t* extend.texi (index, rindex): Document new builtins.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-3.c: Also test builtin rindex.\n\t* gcc.c-torture/execute/string-opt-4.c: Also test builtin index.\n\nFrom-SVN: r37416", "tree": {"sha": "e2619415f3516210288dc043ad4cdec1be4247a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2619415f3516210288dc043ad4cdec1be4247a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b6c6cd4791c3003397feea31482c3d19419fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b6c6cd4791c3003397feea31482c3d19419fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b6c6cd4791c3003397feea31482c3d19419fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b6c6cd4791c3003397feea31482c3d19419fe2/comments", "author": null, "committer": null, "parents": [{"sha": "34f6fbdb65c5e2a8ff1c6553592503532ef0141f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f6fbdb65c5e2a8ff1c6553592503532ef0141f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f6fbdb65c5e2a8ff1c6553592503532ef0141f"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "e27245a8c44f018d30e4b53880b8dc6f3cd26a08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -1,3 +1,16 @@\n+2000-11-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin): Handle BUILT_IN_INDEX and\n+\tBUILT_IN_RINDEX.  Add missing checks for BUILT_IN_STRCHR and\n+\tBUILT_IN_STRRCHR.\n+\n+\t* builtins.def (BUILT_IN_INDEX, BUILT_IN_RINDEX): New entries.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare index and\n+\trindex when nonansi builtins are allowed.\n+\n+\t* extend.texi (index, rindex): Document new builtins.\n+\n 2000-11-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* configure.in: Turn on libstdc++ V3 by default."}, {"sha": "68677b5295031d2a64f8ec2d6e97e09eb847c03a", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -2746,6 +2746,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_FSQRT || fcode == BUILT_IN_MEMSET\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n+\t  || fcode == BUILT_IN_INDEX || fcode == BUILT_IN_RINDEX\n+\t  || fcode == BUILT_IN_STRCHR || fcode == BUILT_IN_STRRCHR\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n \t  || fcode == BUILT_IN_STRSTR || fcode == BUILT_IN_STRPBRK\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n@@ -2888,12 +2890,14 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_INDEX:\n     case BUILT_IN_STRCHR:\n       target = expand_builtin_strchr (arglist, target, mode);\n       if (target)\n \treturn target;\n       break;\n \n+    case BUILT_IN_RINDEX:\n     case BUILT_IN_STRRCHR:\n       target = expand_builtin_strrchr (arglist, target, mode);\n       if (target)"}, {"sha": "1920282b280dcc72f03f60710f99e0565563e695", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -36,6 +36,8 @@ DEF_BUILTIN(BUILT_IN_MEMCMP)\n DEF_BUILTIN(BUILT_IN_MEMSET)\n DEF_BUILTIN(BUILT_IN_BZERO)\n DEF_BUILTIN(BUILT_IN_BCMP)\n+DEF_BUILTIN(BUILT_IN_INDEX)\n+DEF_BUILTIN(BUILT_IN_RINDEX)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)"}, {"sha": "fdc287581cc47316061f35456af4674af80b4b6d", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -5045,6 +5045,12 @@ c_common_nodes_and_builtins ()\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n \n+      temp = builtin_function (\"index\", string_ftype_string_int,\n+\t\t\t       BUILT_IN_INDEX, BUILT_IN_NORMAL, NULL_PTR);\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n+      temp = builtin_function (\"rindex\", string_ftype_string_int,\n+\t\t\t       BUILT_IN_RINDEX, BUILT_IN_NORMAL, NULL_PTR);\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n       /* The system prototypes for these functions have many\n \t variations, so don't specify parameters to avoid conflicts.\n \t The expand_* functions check the argument types anyway.  */\n@@ -5175,6 +5181,10 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_BZERO, BUILT_IN_NORMAL, \"bzero\");\n   builtin_function (\"__builtin_bcmp\", bcmp_ftype,\n \t\t    BUILT_IN_BCMP, BUILT_IN_NORMAL, \"bcmp\");\n+  builtin_function (\"__builtin_index\", string_ftype_string_int,\n+\t\t    BUILT_IN_INDEX, BUILT_IN_NORMAL, \"index\");\n+  builtin_function (\"__builtin_rindex\", string_ftype_string_int,\n+\t\t    BUILT_IN_RINDEX, BUILT_IN_NORMAL, \"rindex\");\n   builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n \t\t    BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n   builtin_function (\"__builtin_strstr\", string_ftype_string_string,"}, {"sha": "4f9bde737985a65f716ac236e29fc14c90b1f8b0", "filename": "gcc/extend.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -3247,12 +3247,14 @@ function as well.\n @findex fabsl\n @findex ffs\n @findex fputs\n+@findex index\n @findex labs\n @findex llabs\n @findex memcmp\n @findex memcpy\n @findex memset\n @findex printf\n+@findex rindex\n @findex sin\n @findex sinf\n @findex sinl\n@@ -3289,9 +3291,10 @@ and presumed not to return, but otherwise are not built in.\n @samp{-std=c89} or @samp{-std=c99}).\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n-@code{bzero}, and @code{ffs} may be handled as builtins.  Corresponding\n-versions @code{__builtin_alloca}, @code{__builtin_bcmp},\n-@code{__builtin_bzero}, and @code{__builtin_ffs} are also recognized in\n+@code{bzero}, @code{index}, @code{rindex} and @code{ffs} may be handled\n+as builtins.  Corresponding versions @code{__builtin_alloca},\n+@code{__builtin_bcmp}, @code{__builtin_bzero}, @code{__builtin_index},\n+@code{__builtin_rindex} and @code{__builtin_ffs} are also recognized in\n strict ISO C mode.\n \n The ISO C99 function @code{llabs} is handled as a builtin except in"}, {"sha": "53362e0b2a51dc41895a7d23b9091d40eb5556ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -1,3 +1,8 @@\n+2000-11-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/string-opt-3.c: Also test builtin rindex.\n+\t* gcc.c-torture/execute/string-opt-4.c: Also test builtin index.\n+\n 2000-11-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.brendan/err-msg8.C: Avoid capricious line-number issues with"}, {"sha": "a623451b2296758e8fd71824a9490756581b9ce9", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-3.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2000  Free Software Foundation.\n \n-   Ensure all expected transformations of builtin strlen, strcmp and strrchr\n-   occur and perform correctly.\n+   Ensure all expected transformations of builtin strlen, strcmp,\n+   strrchr and rindex occur and perform correctly.\n \n    Written by Jakub Jelinek, 11/7/2000.  */\n \n@@ -55,10 +55,22 @@ int main()\n     abort ();\n   if (x != 8)\n     abort ();\n+  /* For systems which don't have rindex, we test the __builtin_\n+     version to avoid spurious link failures at -O0.  We only need to\n+     test one case since everything is handled in the same code path\n+     as builtin strrchr.  */\n+  if (__builtin_rindex (\"hello\", 'z') != 0)\n+    abort ();\n \n   return 0;\n }\n \n+static char *\n+rindex (const char *s, int c)\n+{\n+  abort ();\n+}\n+\n #ifdef __OPTIMIZE__\n /* When optimizing, all the above cases should be transformed into\n    something else.  So any remaining calls to the original function"}, {"sha": "77c0950ff7e251fa22d42b67249bc8ed40d83755", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-4.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b6c6cd4791c3003397feea31482c3d19419fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-4.c?ref=c7b6c6cd4791c3003397feea31482c3d19419fe2", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2000  Free Software Foundation.\n \n-   Ensure all expected transformations of builtin strchr occur and\n-   perform correctly.\n+   Ensure all expected transformations of builtin strchr and index\n+   occur and perform correctly.\n \n    Written by Jakub Jelinek, 11/7/2000.  */\n \n@@ -20,10 +20,22 @@ int main()\n     abort ();\n   if (strchr (foo, '\\0')  != foo + 11)\n     abort ();\n+  /* For systems which don't have index, we test the __builtin_\n+     version to avoid spurious link failures at -O0.  We only need to\n+     test one case since everything is handled in the same code path\n+     as builtin strchr.  */\n+  if (__builtin_index (\"hello\", 'z')  != 0)\n+    abort ();\n \n   return 0;\n }\n \n+static char *\n+index (const char *s, int c)\n+{\n+  abort ();\n+}\n+\n #ifdef __OPTIMIZE__\n /* When optimizing, all the above cases should be transformed into\n    something else.  So any remaining calls to the original function"}]}