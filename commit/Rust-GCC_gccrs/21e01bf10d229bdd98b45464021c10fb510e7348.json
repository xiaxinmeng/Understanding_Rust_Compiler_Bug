{"sha": "21e01bf10d229bdd98b45464021c10fb510e7348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlMDFiZjEwZDIyOWJkZDk4YjQ1NDY0MDIxYzEwZmI1MTBlNzM0OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-03-21T14:42:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-03-21T14:42:48Z"}, "message": "optabs.h (enum optab_index): Add new OTI_lrint and OTI_llrint.\n\n\t* optabs.h (enum optab_index): Add new OTI_lrint and OTI_llrint.\n\t(lrint_optab, llrint_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize lrint_optab and llrint_optab.\n\t* genopinit.c (optabs): Implement lrint_optab using lrintsi2\n\tpattern and llrint_optab using llrintdi2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LRINT{,F,L}\n\tusing lrint_optab and BUILT_IN_LLRINT{,F,L} using llrint_optab.\n\t(expand_builtin): Expand BUILT_IN_LRINT{,F,L} and\n\tBUILT_IN_LLRINT{,F,L} using expand_builtin_mathfn if\n\tflag_unsafe_math_optimizations is set.\n\ntestsuite:\n\n\t* gcc.dg/builtins-46.c: Also check lrint* and llrint*.\n\nFrom-SVN: r96802", "tree": {"sha": "cadbf5733257cf185cf62deba3c619c718dc7138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cadbf5733257cf185cf62deba3c619c718dc7138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e01bf10d229bdd98b45464021c10fb510e7348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e01bf10d229bdd98b45464021c10fb510e7348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e01bf10d229bdd98b45464021c10fb510e7348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e01bf10d229bdd98b45464021c10fb510e7348/comments", "author": null, "committer": null, "parents": [{"sha": "14f02e731544e814ff3c250ea2e6e43140991ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f02e731544e814ff3c250ea2e6e43140991ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f02e731544e814ff3c250ea2e6e43140991ee3"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "05317acbbd06db353983b96764c57fc33fcb7a88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -1,3 +1,16 @@\n+2005-03-21  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_lrint and OTI_llrint.\n+\t(lrint_optab, llrint_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize lrint_optab and llrint_optab.\n+\t* genopinit.c (optabs): Implement lrint_optab using lrintsi2\n+\tpattern and llrint_optab using llrintdi2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LRINT{,F,L}\n+\tusing lrint_optab and BUILT_IN_LLRINT{,F,L} using llrint_optab.\n+\t(expand_builtin): Expand BUILT_IN_LRINT{,F,L} and\n+\tBUILT_IN_LLRINT{,F,L} using expand_builtin_mathfn if\n+\tflag_unsafe_math_optimizations is set.\n+\n 2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* combine.c (combine_simplify_rtx, simplify_if_then_else,"}, {"sha": "703fb3fceff83670e8c22c8bb2ef861f074a1d73", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -1758,6 +1758,14 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_RINTF:\n     case BUILT_IN_RINTL:\n       builtin_optab = rint_optab; break;\n+    case BUILT_IN_LRINT:\n+    case BUILT_IN_LRINTF:\n+    case BUILT_IN_LRINTL:\n+      builtin_optab = lrint_optab; break;\n+    case BUILT_IN_LLRINT:\n+    case BUILT_IN_LLRINTF:\n+    case BUILT_IN_LLRINTL:\n+      builtin_optab = llrint_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5261,6 +5269,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_RINT:\n     case BUILT_IN_RINTF:\n     case BUILT_IN_RINTL:\n+    case BUILT_IN_LRINT:\n+    case BUILT_IN_LRINTF:\n+    case BUILT_IN_LRINTL:\n+    case BUILT_IN_LLRINT:\n+    case BUILT_IN_LLRINTF:\n+    case BUILT_IN_LLRINTL:\n       target = expand_builtin_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "a71abb074d39b65a0d78523c77f1396b979ec99a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -124,6 +124,8 @@ static const char * const optabs[] =\n   \"btrunc_optab->handlers[$A].insn_code = CODE_FOR_$(btrunc$a2$)\",\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\",\n   \"rint_optab->handlers[$A].insn_code = CODE_FOR_$(rint$a2$)\",\n+  \"lrint_optab->handlers[$A].insn_code = CODE_FOR_$(lrint$a2$)\",\n+  \"llrint_optab->handlers[$A].insn_code = CODE_FOR_$(llrint$a2$)\",\n   \"sincos_optab->handlers[$A].insn_code = CODE_FOR_$(sincos$a3$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"asin_optab->handlers[$A].insn_code = CODE_FOR_$(asin$a2$)\","}, {"sha": "57c3339437b5e72ae3e8e6c35d453759983ce296", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -5033,6 +5033,8 @@ init_optabs (void)\n   btrunc_optab = init_optab (UNKNOWN);\n   nearbyint_optab = init_optab (UNKNOWN);\n   rint_optab = init_optab (UNKNOWN);\n+  lrint_optab = init_optab (UNKNOWN);\n+  llrint_optab = init_optab (UNKNOWN);\n   sincos_optab = init_optab (UNKNOWN);\n   sin_optab = init_optab (UNKNOWN);\n   asin_optab = init_optab (UNKNOWN);"}, {"sha": "92885643604c1ff23f9eb83c8a654dd9b3918cd5", "filename": "gcc/optabs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -191,6 +191,8 @@ enum optab_index\n   OTI_round,\n   OTI_nearbyint,\n   OTI_rint,\n+  OTI_lrint,\n+  OTI_llrint,\n   /* Tangent */\n   OTI_tan,\n   /* Inverse tangent */\n@@ -317,6 +319,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define round_optab (optab_table[OTI_round])\n #define nearbyint_optab (optab_table[OTI_nearbyint])\n #define rint_optab (optab_table[OTI_rint])\n+#define lrint_optab (optab_table[OTI_lrint])\n+#define llrint_optab (optab_table[OTI_llrint])\n #define tan_optab (optab_table[OTI_tan])\n #define atan_optab (optab_table[OTI_atan])\n #define copysign_optab (optab_table[OTI_copysign])"}, {"sha": "1dfc53b15d0fef5c7667b9a9f8022acd36852ada", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -1,3 +1,7 @@\n+2005-03-21  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-46.c: Also check lrint* and llrint*.\n+\n 2005-03-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* g++.dg/parse/crash25.C: Fix typo."}, {"sha": "3a955a56929c097e725ec09a1904df3dee81e7a0", "filename": "gcc/testsuite/gcc.dg/builtins-46.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e01bf10d229bdd98b45464021c10fb510e7348/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c?ref=21e01bf10d229bdd98b45464021c10fb510e7348", "patch": "@@ -1,6 +1,7 @@\n /* Copyright (C) 2004 Free Software Foundation.\n \n-   Check that rint, rintf, rintl, floor, floorf, floorl,\n+   Check that rint, rintf, rintl, lrint, lrintf, lrintl,\n+   llrint, llrintf, llrintl, floor, floorf, floorl,\n    ceil, ceilf, ceill, trunc, truncf, truncl,\n    nearbyint, nearbyintf and nearbyintl\n    built-in functions compile.\n@@ -11,18 +12,24 @@\n /* { dg-options \"-O2 -ffast-math\" } */\n \n extern double rint(double);\n+extern long int lrint(double);\n+extern long long int llrint(double);\n extern double floor(double);\n extern double ceil(double);\n extern double trunc(double);\n extern double nearbyint(double);\n \n extern float rintf(float);\n+extern long int lrintf(float);\n+extern long long int llrintf(float);\n extern float floorf(float);\n extern float ceilf(float);\n extern float truncf(float);\n extern float nearbyintf(float);\n \n extern long double rintl(long double);\n+extern long int lrintl(long double);\n+extern long long int llrintl(long double);\n extern long double floorl(long double);\n extern long double ceill(long double);\n extern long double truncl(long double);\n@@ -34,6 +41,16 @@ double test1(double x)\n   return rint(x);\n }\n \n+long int test11(double x)\n+{\n+  return lrint(x);\n+}\n+\n+long long int test12(double x)\n+{\n+  return llrint(x);\n+}\n+\n double test2(double x)\n {\n   return floor(x);\n@@ -59,6 +76,16 @@ float test1f(float x)\n   return rintf(x);\n }\n \n+long int test11f(float x)\n+{\n+  return lrintf(x);\n+}\n+\n+long long int test12f(float x)\n+{\n+  return llrintf(x);\n+}\n+\n float test2f(float x)\n {\n   return floorf(x);\n@@ -84,6 +111,16 @@ long double test1l(long double x)\n   return rintl(x);\n }\n \n+long int test11l(long double x)\n+{\n+  return lrintl(x);\n+}\n+\n+long long int test12l(long double x)\n+{\n+  return llrintl(x);\n+}\n+\n long double test2l(long double x)\n {\n   return floorl(x);"}]}