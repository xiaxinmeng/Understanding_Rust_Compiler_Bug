{"sha": "6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5MGUxOWFiN2VkNWM3MDk2MTFhMWQzNzQ2ZDBhZTlhZWZiOTIyMQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-06-24T00:49:07Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-06-24T00:49:07Z"}, "message": "s390-protos.h (s390_emit_compare): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_emit_compare): Add prototype.\n\t(s390_emit_jump): Likewise.\n\t* config/s390/s390.c (s390_emit_compare): New function.\n\t(s390_emit_jump): Likewise.\n\t* config/s390/s390.md (\"beq\", \"bne\", \"bgt\", \"bgtu\", \"blt\", \"bltu\",\n\t\"bge\", \"bgeu\", \"ble\", \"bleu\", \"bunordered\", \"bordered\", \"buneq\",\n\t\"bungt\", \"bunlt\", \"bunge\", \"bunle\", \"bltgt\"): Use s390_emit_compare\n\tand s390_emit_jump.\n\t(\"cjump\"): Remove, replace by ...\n\t(\"*cjump_64\", \"*cjump_31\"): ... these insns.  Improve length default.\n\t(\"icjump\", \"*icjump_64\", \"*icjump_31\"): Likewise.\n\t(\"trap\"): Fix type attribute.\n\t(\"conditional_trap\"): Use s390_emit_compare.\n\t(\"doloop_si\"): Remove, replace by ...\n\t(\"doloop_si64\", \"doloop_si31\"): ... these new insn_and_split.\n\tMerge existing splitter into insn_and_split.  Improve length default.\n\t(\"doloop_di\"): Merge with existing splitter into insn_and_split.\n\t(\"doloop\"): Adapt.\n\t(\"jump\"): Convert to expander.  Use s390_emit_jump.\n\t(\"*jump_64\", \"*jump_31\"): New insns.  Improve length default.\n\nFrom-SVN: r83574", "tree": {"sha": "0318a04fde24fc3a05fb5a5c060aaed733975968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0318a04fde24fc3a05fb5a5c060aaed733975968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/comments", "author": null, "committer": null, "parents": [{"sha": "44ee9aef7bf45d3170a6b44c907ee94c637f73f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ee9aef7bf45d3170a6b44c907ee94c637f73f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ee9aef7bf45d3170a6b44c907ee94c637f73f3"}], "stats": {"total": 517, "additions": 288, "deletions": 229}, "files": [{"sha": "8656a5f16885ad3f7c2447fac2b7e9bacd721e0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "patch": "@@ -1,3 +1,26 @@\n+2004-06-23  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_emit_compare): Add prototype.\n+\t(s390_emit_jump): Likewise.\n+\t* config/s390/s390.c (s390_emit_compare): New function.\n+\t(s390_emit_jump): Likewise.\n+\t* config/s390/s390.md (\"beq\", \"bne\", \"bgt\", \"bgtu\", \"blt\", \"bltu\",\n+\t\"bge\", \"bgeu\", \"ble\", \"bleu\", \"bunordered\", \"bordered\", \"buneq\",\n+\t\"bungt\", \"bunlt\", \"bunge\", \"bunle\", \"bltgt\"): Use s390_emit_compare\n+\tand s390_emit_jump.\n+\t(\"cjump\"): Remove, replace by ...\n+\t(\"*cjump_64\", \"*cjump_31\"): ... these insns.  Improve length default.\n+\t(\"icjump\", \"*icjump_64\", \"*icjump_31\"): Likewise.\n+\t(\"trap\"): Fix type attribute.\n+\t(\"conditional_trap\"): Use s390_emit_compare.\n+\t(\"doloop_si\"): Remove, replace by ...\n+\t(\"doloop_si64\", \"doloop_si31\"): ... these new insn_and_split.\n+\tMerge existing splitter into insn_and_split.  Improve length default.\n+\t(\"doloop_di\"): Merge with existing splitter into insn_and_split.\n+\t(\"doloop\"): Adapt.\n+\t(\"jump\"): Convert to expander.  Use s390_emit_jump.\n+\t(\"*jump_64\", \"*jump_31\"): New insns.  Improve length default.\n+\t\n 2004-06-23  Wu Yongwei  <adah@sh163.net>\n \n \t* gthr-win32.h (__GTHREAD_MUTEX_INIT_DEFAULT): Adjust."}, {"sha": "16faf39fe26752cb03389bda555cf8931f590d4c", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "patch": "@@ -52,6 +52,8 @@ extern enum machine_mode s390_tm_ccmode (rtx, rtx, int);\n extern enum machine_mode s390_select_ccmode (enum rtx_code, rtx, rtx);\n extern int s390_alc_comparison (rtx op, enum machine_mode mode);\n extern int s390_slb_comparison (rtx op, enum machine_mode mode);\n+extern rtx s390_emit_compare (enum rtx_code, rtx, rtx);\n+extern void s390_emit_jump (rtx, rtx);\n extern int symbolic_reference_mentioned_p (rtx);\n extern int tls_symbolic_reference_mentioned_p (rtx);\n extern int legitimate_la_operand_p (rtx);"}, {"sha": "21cf73e38e283164df77de9456fac905e40cc250", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "patch": "@@ -468,6 +468,36 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n     }\n }\n \n+/* Emit a compare instruction suitable to implement the comparison\n+   OP0 CODE OP1.  Return the correct condition RTL to be placed in\n+   the IF_THEN_ELSE of the conditional branch testing the result.  */\n+\n+rtx\n+s390_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n+{\n+  enum machine_mode mode = s390_select_ccmode (code, op0, op1);\n+  rtx cc = gen_rtx_REG (mode, CC_REGNUM);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, cc, gen_rtx_COMPARE (mode, op0, op1)));\n+  return gen_rtx_fmt_ee (code, VOIDmode, cc, const0_rtx);\n+}\n+\n+/* Emit a jump instruction to TARGET.  If COND is NULL_RTX, emit an\n+   unconditional jump, else a conditional jump under condition COND.  */\n+\n+void\n+s390_emit_jump (rtx target, rtx cond)\n+{\n+  rtx insn;\n+\n+  target = gen_rtx_LABEL_REF (VOIDmode, target);\n+  if (cond)\n+    target = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, target, pc_rtx);\n+\n+  insn = gen_rtx_SET (VOIDmode, pc_rtx, target);\n+  emit_jump_insn (insn);\n+}\n+\n /* Return nonzero if OP is a valid comparison operator\n    for an ALC condition in mode MODE.  */\n "}, {"sha": "b907d102cb5658c23f83415fed10ab8add75a407", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 233, "deletions": 229, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6590e19ab7ed5c709611a1d3746d0ae9aefb9221/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=6590e19ab7ed5c709611a1d3746d0ae9aefb9221", "patch": "@@ -6439,203 +6439,165 @@\n ;;\n \n (define_expand \"beq\"\n-  [(set (reg:CCZ 33) (compare:CCZ (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (eq (reg:CCZ 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (EQ, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bne\"\n-  [(set (reg:CCZ 33) (compare:CCZ (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ne (reg:CCZ 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (NE, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bgt\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (gt (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (GT, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bgtu\"\n-  [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (gtu (reg:CCU 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (GTU, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"blt\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (lt (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (LT, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bltu\"\n-  [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ltu (reg:CCU 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (LTU, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bge\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ge (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (GE, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bgeu\"\n-  [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (geu (reg:CCU 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (GEU, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"ble\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (le (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (LE, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bleu\"\n-  [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (leu (reg:CCU 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (LEU, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bunordered\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (unordered (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNORDERED, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bordered\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ordered (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (ORDERED, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"buneq\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (uneq (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n-  \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n-\n-(define_expand \"bungt\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ungt (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNEQ, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bunlt\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (unlt (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNLT, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n-(define_expand \"bunge\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (unge (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+(define_expand \"bungt\"\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNGT, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bunle\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (unle (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n+  \"\"\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNLE, s390_compare_op0, s390_compare_op1)); DONE;\")\n+\n+(define_expand \"bunge\"\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (UNGE, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n (define_expand \"bltgt\"\n-  [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n-   (set (pc)\n-        (if_then_else (ltgt (reg:CCS 33) (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n-  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n+  \"s390_emit_jump (operands[0],\n+    s390_emit_compare (LTGT, s390_compare_op0, s390_compare_op1)); DONE;\")\n \n \n ;;\n ;;- Conditional jump instructions.\n ;;\n \n-(define_insn \"cjump\"\n- [(set (pc)\n-       (if_then_else\n-         (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n-\t (pc)))]\n-  \"\"\n+(define_insn \"*cjump_64\"\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (label_ref (match_operand 0 \"\" \"\"))\n+          (pc)))]\n+  \"TARGET_CPU_ZARCH\"\n {\n   if (get_attr_length (insn) == 4)\n     return \"j%C1\\t%l0\";\n-  else if (TARGET_CPU_ZARCH)\n+  else\n     return \"jg%C1\\t%l0\";\n+}\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"type\"    \"branch\")\n+   (set (attr \"length\")\n+        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                      (const_int 4) (const_int 6)))])\n+\n+(define_insn \"*cjump_31\"\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (label_ref (match_operand 0 \"\" \"\"))\n+          (pc)))]\n+  \"!TARGET_CPU_ZARCH\"\n+{\n+  if (get_attr_length (insn) == 4)\n+    return \"j%C1\\t%l0\";\n   else\n     abort ();\n }\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")\n    (set (attr \"length\")\n-        (cond [(lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n-                (const_int 4)\n-               (ne (symbol_ref \"TARGET_CPU_ZARCH\") (const_int 0))\n-                 (const_int 6)\n-               (eq (symbol_ref \"flag_pic\") (const_int 0))\n-                 (const_int 6)] (const_int 8)))])\n+        (if_then_else (eq (symbol_ref \"flag_pic\") (const_int 0))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 6))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 8))))])\n \n (define_insn \"*cjump_long\"\n- [(set (pc)\n-       (if_then_else\n-         (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n-\t (match_operand 0 \"address_operand\" \"U\")\n-\t (pc)))]\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (match_operand 0 \"address_operand\" \"U\")\n+          (pc)))]\n   \"\"\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n@@ -6646,45 +6608,61 @@\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n-   (set_attr \"type\"    \"branch\")\n+   (set_attr \"type\"  \"branch\")\n    (set_attr \"atype\" \"agen\")])\n \n \n ;;\n ;;- Negated conditional jump instructions.\n ;;\n \n-(define_insn \"icjump\"\n- [(set (pc)\n-       (if_then_else\n-         (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n-         (pc)\n-\t (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n+(define_insn \"*icjump_64\"\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (pc)\n+          (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_CPU_ZARCH\"\n {\n   if (get_attr_length (insn) == 4)\n     return \"j%D1\\t%l0\";\n-  else if (TARGET_CPU_ZARCH)\n+  else\n     return \"jg%D1\\t%l0\";\n+}\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"type\"    \"branch\")\n+   (set (attr \"length\")\n+        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                      (const_int 4) (const_int 6)))])\n+\n+(define_insn \"*icjump_31\"\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (pc)\n+          (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"!TARGET_CPU_ZARCH\"\n+{\n+  if (get_attr_length (insn) == 4)\n+    return \"j%D1\\t%l0\";\n   else\n     abort ();\n }\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")\n    (set (attr \"length\")\n-        (cond [(lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n-                (const_int 4)\n-               (ne (symbol_ref \"TARGET_CPU_ZARCH\") (const_int 0))\n-                 (const_int 6)\n-               (eq (symbol_ref \"flag_pic\") (const_int 0))\n-                 (const_int 6)] (const_int 8)))])\n+        (if_then_else (eq (symbol_ref \"flag_pic\") (const_int 0))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 6))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 8))))])\n \n (define_insn \"*icjump_long\"\n- [(set (pc)\n-       (if_then_else\n-         (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n-         (pc)\n-\t (match_operand 0 \"address_operand\" \"U\")))]\n+  [(set (pc)\n+        (if_then_else\n+          (match_operator 1 \"comparison_operator\" [(reg 33) (const_int 0)])\n+          (pc)\n+          (match_operand 0 \"address_operand\" \"U\")))]\n   \"\"\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n@@ -6706,24 +6684,17 @@\n   [(trap_if (const_int 1) (const_int 0))]\n   \"\"\n   \"j\\t.+2\"\n-  [(set_attr \"op_type\" \"RX\")\n+  [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"  \"branch\")])\n \n (define_expand \"conditional_trap\"\n-  [(set (match_dup 2) (match_dup 3))\n-   (trap_if (match_operator 0 \"comparison_operator\"\n-\t\t\t    [(match_dup 2) (const_int 0)])\n-\t    (match_operand:SI 1 \"general_operand\" \"\"))]\n+  [(trap_if (match_operand 0 \"comparison_operator\" \"\")\n+\t    (match_operand 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-   enum machine_mode ccmode;\n-\n-   if (operands[1] != const0_rtx) FAIL;\n-\n-   ccmode = s390_select_ccmode (GET_CODE (operands[0]),\n-\t\t\t        s390_compare_op0, s390_compare_op1);\n-   operands[2] = gen_rtx_REG (ccmode, 33);\n-   operands[3] = gen_rtx_COMPARE (ccmode, s390_compare_op0, s390_compare_op1);\n+  if (operands[1] != const0_rtx) FAIL;\n+  operands[0] = s390_emit_compare (GET_CODE (operands[0]), \n+                                   s390_compare_op0, s390_compare_op1);\n })\n \n (define_insn \"*trap\"\n@@ -6748,8 +6719,10 @@\n    (use (match_operand 4 \"\" \"\"))]       ; label\n   \"\"\n {\n-  if (GET_MODE (operands[0]) == SImode)\n-    emit_jump_insn (gen_doloop_si (operands[4], operands[0], operands[0]));\n+  if (GET_MODE (operands[0]) == SImode && !TARGET_CPU_ZARCH)\n+    emit_jump_insn (gen_doloop_si31 (operands[4], operands[0], operands[0]));\n+  else if (GET_MODE (operands[0]) == SImode && TARGET_CPU_ZARCH)\n+    emit_jump_insn (gen_doloop_si64 (operands[4], operands[0], operands[0]));\n   else if (GET_MODE (operands[0]) == DImode && TARGET_64BIT)\n     emit_jump_insn (gen_doloop_di (operands[4], operands[0], operands[0]));\n   else\n@@ -6758,7 +6731,7 @@\n   DONE;\n })\n \n-(define_insn \"doloop_si\"\n+(define_insn_and_split \"doloop_si64\"\n   [(set (pc)\n         (if_then_else\n           (ne (match_operand:SI 1 \"register_operand\" \"d,d\")\n@@ -6769,26 +6742,75 @@\n         (plus:SI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:SI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"TARGET_CPU_ZARCH\"\n {\n   if (which_alternative != 0)\n     return \"#\";\n   else if (get_attr_length (insn) == 4)\n     return \"brct\\t%1,%l0\";\n-  else if (TARGET_CPU_ZARCH)\n+  else\n     return \"ahi\\t%1,-1\\;jgne\\t%l0\";\n+}\n+  \"&& reload_completed\n+   && (! REG_P (operands[2])\n+       || ! rtx_equal_p (operands[1], operands[2]))\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (reg:CCAN 33)\n+                   (compare:CCAN (plus:SI (match_dup 3) (const_int -1))\n+                                 (const_int 0)))\n+              (set (match_dup 3) (plus:SI (match_dup 3) (const_int -1)))])\n+   (set (match_dup 2) (match_dup 3))\n+   (set (pc) (if_then_else (ne (reg:CCAN 33) (const_int 0))\n+                           (label_ref (match_dup 0))\n+                           (pc)))]\n+  \"\"\n+  [(set_attr \"op_type\"  \"RI\")\n+   (set_attr \"type\"  \"branch\")\n+   (set (attr \"length\")\n+        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                      (const_int 4) (const_int 10)))])\n+\n+(define_insn_and_split \"doloop_si31\"\n+  [(set (pc)\n+        (if_then_else\n+          (ne (match_operand:SI 1 \"register_operand\" \"d,d\")\n+              (const_int 1))\n+          (label_ref (match_operand 0 \"\" \"\"))\n+          (pc)))\n+   (set (match_operand:SI 2 \"nonimmediate_operand\" \"=1,?*m*d\")\n+        (plus:SI (match_dup 1) (const_int -1)))\n+   (clobber (match_scratch:SI 3 \"=X,&d\"))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_CPU_ZARCH\"\n+{\n+  if (which_alternative != 0)\n+    return \"#\";\n+  else if (get_attr_length (insn) == 4)\n+    return \"brct\\t%1,%l0\";\n   else\n     abort ();\n }\n+  \"&& reload_completed\n+   && (! REG_P (operands[2])\n+       || ! rtx_equal_p (operands[1], operands[2]))\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (parallel [(set (reg:CCAN 33)\n+                   (compare:CCAN (plus:SI (match_dup 3) (const_int -1))\n+                                 (const_int 0)))\n+              (set (match_dup 3) (plus:SI (match_dup 3) (const_int -1)))])\n+   (set (match_dup 2) (match_dup 3))\n+   (set (pc) (if_then_else (ne (reg:CCAN 33) (const_int 0))\n+                           (label_ref (match_dup 0))\n+                           (pc)))]\n+  \"\"\n   [(set_attr \"op_type\"  \"RI\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n-        (cond [(lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n-                (const_int 4)\n-               (ne (symbol_ref \"TARGET_CPU_ZARCH\") (const_int 0))\n-                 (const_int 10)\n-               (eq (symbol_ref \"flag_pic\") (const_int 0))\n-                 (const_int 6)] (const_int 8)))])\n+        (if_then_else (eq (symbol_ref \"flag_pic\") (const_int 0))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 6))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 8))))])\n \n (define_insn \"*doloop_si_long\"\n   [(set (pc)\n@@ -6801,7 +6823,7 @@\n         (plus:SI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:SI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"!TARGET_CPU_ZARCH\"\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n     return \"bctr\\t%1,%0\";\n@@ -6814,31 +6836,7 @@\n    (set_attr \"type\"  \"branch\")\n    (set_attr \"atype\" \"agen\")])\n \n-(define_split\n-  [(set (pc)\n-        (if_then_else (ne (match_operand:SI 1 \"register_operand\" \"\")\n-                          (const_int 1))\n-                      (match_operand 0 \"\" \"\")\n-                      (pc)))\n-   (set (match_operand:SI 2 \"nonimmediate_operand\" \"\")\n-        (plus:SI (match_dup 1) (const_int -1)))\n-   (clobber (match_scratch:SI 3 \"\"))\n-   (clobber (reg:CC 33))]\n-  \"reload_completed\n-   && (! REG_P (operands[2])\n-       || ! rtx_equal_p (operands[1], operands[2]))\"\n-  [(set (match_dup 3) (match_dup 1))\n-   (parallel [(set (reg:CCAN 33)\n-                   (compare:CCAN (plus:SI (match_dup 3) (const_int -1))\n-                                 (const_int 0)))\n-              (set (match_dup 3) (plus:SI (match_dup 3) (const_int -1)))])\n-   (set (match_dup 2) (match_dup 3))\n-   (set (pc) (if_then_else (ne (reg:CCAN 33) (const_int 0))\n-                           (match_dup 0)\n-                           (pc)))]\n-  \"\")\n-\n-(define_insn \"doloop_di\"\n+(define_insn_and_split \"doloop_di\"\n   [(set (pc)\n         (if_then_else\n           (ne (match_operand:DI 1 \"register_operand\" \"d,d\")\n@@ -6858,23 +6856,7 @@\n   else\n     return \"aghi\\t%1,-1\\;jgne\\t%l0\";\n }\n-  [(set_attr \"op_type\"  \"RI\")\n-   (set_attr \"type\"  \"branch\")\n-   (set (attr \"length\")\n-        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n-                      (const_int 4) (const_int 10)))])\n-\n-(define_split\n-  [(set (pc)\n-        (if_then_else (ne (match_operand:DI 1 \"register_operand\" \"\")\n-                          (const_int 1))\n-                      (match_operand 0 \"\" \"\")\n-                      (pc)))\n-   (set (match_operand:DI 2 \"nonimmediate_operand\" \"\")\n-        (plus:DI (match_dup 1) (const_int -1)))\n-   (clobber (match_scratch:DI 3 \"\"))\n-   (clobber (reg:CC 33))]\n-  \"reload_completed\n+  \"&& reload_completed\n    && (! REG_P (operands[2])\n        || ! rtx_equal_p (operands[1], operands[2]))\"\n   [(set (match_dup 3) (match_dup 1))\n@@ -6884,9 +6866,14 @@\n               (set (match_dup 3) (plus:DI (match_dup 3) (const_int -1)))])\n    (set (match_dup 2) (match_dup 3))\n    (set (pc) (if_then_else (ne (reg:CCAN 33) (const_int 0))\n-                           (match_dup 0)\n+                           (label_ref (match_dup 0))\n                            (pc)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"op_type\"  \"RI\")\n+   (set_attr \"type\"  \"branch\")\n+   (set (attr \"length\")\n+        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                      (const_int 4) (const_int 10)))])\n \n ;;\n ;;- Unconditional jump instructions.\n@@ -6896,26 +6883,43 @@\n ; jump instruction pattern(s).\n ;\n \n-(define_insn \"jump\"\n-  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n+(define_expand \"jump\"\n+  [(match_operand 0 \"\" \"\")]\n   \"\"\n+  \"s390_emit_jump (operands[0], NULL_RTX); DONE;\")\n+\n+(define_insn \"*jump64\"\n+  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n+  \"TARGET_CPU_ZARCH\"\n {\n   if (get_attr_length (insn) == 4)\n     return \"j\\t%l0\";\n-  else if (TARGET_CPU_ZARCH)\n+  else\n     return \"jg\\t%l0\";\n+}\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"type\"  \"branch\")\n+   (set (attr \"length\")\n+        (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                      (const_int 4) (const_int 6)))])\n+\n+(define_insn \"*jump31\"\n+  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n+  \"!TARGET_CPU_ZARCH\"\n+{\n+  if (get_attr_length (insn) == 4)\n+    return \"j\\t%l0\";\n   else\n     abort ();\n }\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n-        (cond [(lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n-                (const_int 4)\n-               (ne (symbol_ref \"TARGET_CPU_ZARCH\") (const_int 0))\n-                 (const_int 6)\n-               (eq (symbol_ref \"flag_pic\") (const_int 0))\n-                 (const_int 6)] (const_int 8)))])\n+        (if_then_else (eq (symbol_ref \"flag_pic\") (const_int 0))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 6))\n+          (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n+                        (const_int 4) (const_int 8))))])\n \n ;\n ; indirect-jump instruction pattern(s)."}]}