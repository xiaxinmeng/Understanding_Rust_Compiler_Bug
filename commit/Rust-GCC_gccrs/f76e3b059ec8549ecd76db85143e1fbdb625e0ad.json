{"sha": "f76e3b059ec8549ecd76db85143e1fbdb625e0ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2ZTNiMDU5ZWM4NTQ5ZWNkNzZkYjg1MTQzZTFmYmRiNjI1ZTBhZA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-04-10T16:04:07Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-04-10T16:04:07Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r714", "tree": {"sha": "18cfdbab468b2f13a653802b28c151ada52c089e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18cfdbab468b2f13a653802b28c151ada52c089e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76e3b059ec8549ecd76db85143e1fbdb625e0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76e3b059ec8549ecd76db85143e1fbdb625e0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76e3b059ec8549ecd76db85143e1fbdb625e0ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76e3b059ec8549ecd76db85143e1fbdb625e0ad/comments", "author": null, "committer": null, "parents": [{"sha": "1f7da38ef9526fc6ce11d02c97d9c5db4448e46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7da38ef9526fc6ce11d02c97d9c5db4448e46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7da38ef9526fc6ce11d02c97d9c5db4448e46a"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "5d8027edbd48f670980ebe7edaa661e5df795c50", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76e3b059ec8549ecd76db85143e1fbdb625e0ad/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76e3b059ec8549ecd76db85143e1fbdb625e0ad/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f76e3b059ec8549ecd76db85143e1fbdb625e0ad", "patch": "@@ -3464,8 +3464,7 @@\n \t      (use (match_operand:SI 4 \"immediate_operand\" \"\"))\n \t      (clobber (match_dup 1))\n \t      (clobber (match_dup 2))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_dup 3))])]\n   \"\"\n   \"\n {\n@@ -3474,16 +3473,22 @@\n   operands[3] = copy_to_mode_reg (SImode, operands[3]);\n }\")\n \n+;; memcmp recognizers.  The `cmpsb' opcode does nothing if the count is\n+;; zero.  Emit extra code to make sure that a zero-length compare is EQ.\n+\n+;; ??? Most comparisons have a constant length, and it's therefore\n+;; possible to know that the length is non-zero, and to avoid the extra\n+;; code to handle zero-length compares.\n+\n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=q\")\n+  [(set (match_operand:QI 0 \"general_operand\" \"=&q\")\n \t(compare (mem:BLK (match_operand:SI 1 \"general_operand\" \"S\"))\n \t\t (mem:BLK (match_operand:SI 2 \"general_operand\" \"D\"))))\n    (use (match_operand:SI 3 \"general_operand\" \"c\"))\n    (use (match_operand:SI 4 \"immediate_operand\" \"i\"))\n    (clobber (match_dup 1))\n    (clobber (match_dup 2))\n-   (clobber (match_dup 3))\n-   (clobber (match_scratch:SI 5 \"=&r\"))]\n+   (clobber (match_dup 3))]\n   \"\"\n   \"*\n {\n@@ -3515,12 +3520,16 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_dup 0))\n    (clobber (match_dup 1))\n-   (clobber (match_dup 2))\n-   (clobber (match_scratch:SI 4 \"=&r\"))]\n+   (clobber (match_dup 2))]\n   \"\"\n   \"*\n {\n-  output_asm_insn (AS2 (xor%L4,%4,%4), operands);\n+  rtx xops[2];\n+\n+  xops[0] = gen_rtx (REG, QImode, 0);\n+  xops[1] = CONST0_RTX (QImode);\n+\n+  output_asm_insn (AS2 (test%B0,%1,%0), xops);\n   return \\\"repz\\;cmps%B2\\\";\n }\")\n "}]}