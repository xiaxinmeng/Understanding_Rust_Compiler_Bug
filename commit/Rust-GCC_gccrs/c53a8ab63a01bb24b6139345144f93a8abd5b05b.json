{"sha": "c53a8ab63a01bb24b6139345144f93a8abd5b05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzYThhYjYzYTAxYmIyNGI2MTM5MzQ1MTQ0ZjkzYThhYmQ1YjA1Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-25T01:51:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-25T01:51:02Z"}, "message": "Initial revision\n\nFrom-SVN: r831", "tree": {"sha": "7169d6ccc3c3a1959d23fd763ad2b9236748a5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7169d6ccc3c3a1959d23fd763ad2b9236748a5ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c53a8ab63a01bb24b6139345144f93a8abd5b05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53a8ab63a01bb24b6139345144f93a8abd5b05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c53a8ab63a01bb24b6139345144f93a8abd5b05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53a8ab63a01bb24b6139345144f93a8abd5b05b/comments", "author": null, "committer": null, "parents": [{"sha": "9c0022f6602e3c9d577466ffee468d67b69aa94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0022f6602e3c9d577466ffee468d67b69aa94e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0022f6602e3c9d577466ffee468d67b69aa94e"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "f53d540188090cab0601b643369a103c433d6768", "filename": "gcc/defaults.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53a8ab63a01bb24b6139345144f93a8abd5b05b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53a8ab63a01bb24b6139345144f93a8abd5b05b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c53a8ab63a01bb24b6139345144f93a8abd5b05b", "patch": "@@ -0,0 +1,64 @@\n+/* Definitions of various defaults for how to do assembler output\n+   (most of which are designed to be appropriate for GAS or for\n+   some BSD assembler).\n+\n+   Written by Ron Guilmette (rfg@ncd.com)\n+\n+Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* choose a reasonable default for ASM_OUTPUT_ASCII.  */\n+\n+#ifndef ASM_OUTPUT_ASCII\n+#define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n+  do {\t\t\t\t\t\t\t\t\t      \\\n+    FILE *_hide_asm_out_file = (MYFILE);\t\t\t\t      \\\n+    char *_hide_p = (char *) (MYSTRING);\t\t\t\t      \\\n+    int _hide_thissize = (MYLENGTH);\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n+      char *p = _hide_p;\t\t\t\t\t\t      \\\n+      int thissize = _hide_thissize;\t\t\t\t\t      \\\n+      int i;\t\t\t\t\t\t\t\t      \\\n+      fprintf (asm_out_file, \"\\t.ascii \\\"\");\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+      for (i = 0; i < thissize; i++)\t\t\t\t\t      \\\n+\t{\t\t\t\t\t\t\t\t      \\\n+\t  register int c = p[i];\t\t\t\t\t      \\\n+\t  if (c == '\\\"' || c == '\\\\')\t\t\t\t\t      \\\n+\t    putc ('\\\\', asm_out_file);\t\t\t\t\t      \\\n+\t  if (c >= ' ' && c < 0177)\t\t\t\t\t      \\\n+\t    putc (c, asm_out_file);\t\t\t\t\t      \\\n+\t  else\t\t\t\t\t\t\t\t      \\\n+\t    {\t\t\t\t\t\t\t\t      \\\n+\t      fprintf (asm_out_file, \"\\\\%o\", c);\t\t\t      \\\n+\t      /* After an octal-escape, if a digit follows,\t\t      \\\n+\t\t terminate one string constant and start another.\t      \\\n+\t\t The Vax assembler fails to stop reading the escape\t      \\\n+\t\t after three digits, so this is the only way we\t\t      \\\n+\t\t can get it to parse the data properly.  */\t\t      \\\n+\t      if (i < thissize - 1\t\t\t\t\t      \\\n+\t\t  && p[i + 1] >= '0' && p[i + 1] <= '9')\t\t      \\\n+\t\tfprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");\t\t      \\\n+\t  }\t\t\t\t\t\t\t\t      \\\n+\t}\t\t\t\t\t\t\t\t      \\\n+      fprintf (asm_out_file, \"\\\"\\n\");\t\t\t\t\t      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+  while (0)\n+#endif"}]}