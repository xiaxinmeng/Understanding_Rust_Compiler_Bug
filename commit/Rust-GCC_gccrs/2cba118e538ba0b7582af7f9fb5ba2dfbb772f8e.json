{"sha": "2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "node_id": "C_kwDOANBUbNoAKDJjYmExMThlNTM4YmEwYjc1ODJhZjdmOWZiNWJhMmRmYmI3NzJmOGU", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:15:07Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:15:07Z"}, "message": "aarch64: Make existing V2HF be usable.\n\nThe backend has an existing V2HFmode that is used by pairwise operations.\nThis mode was however never made fully functional.  Amongst other things it was\nnever declared as a vector type which made it unusable from the mid-end.\n\nIt's also lacking an implementation for load/stores so reload ICEs if this mode\nis every used.  This finishes the implementation by providing the above.\n\nNote that I have created a new iterator VHSDF_P instead of extending VHSDF\nbecause the previous iterator is used in far more things than just load/stores.\n\nIt's also used for instance in intrinsics and extending this would force me to\nprovide support for mangling the type while we never expose it through\nintrinsics.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (*aarch64_simd_movv2hf): New.\n\t(mov<mode>, movmisalign<mode>, aarch64_dup_lane<mode>,\n\taarch64_store_lane0<mode>, aarch64_simd_vec_set<mode>,\n\t@aarch64_simd_vec_copy_lane<mode>, vec_set<mode>,\n\treduc_<optab>_scal_<mode>, reduc_<fmaxmin>_scal_<mode>,\n\taarch64_reduc_<optab>_internal<mode>, aarch64_get_lane<mode>,\n\tvec_init<mode><Vel>, vec_extract<mode><Vel>): Support V2HF.\n\t(aarch64_simd_dupv2hf): New.\n\t* config/aarch64/aarch64.cc (aarch64_classify_vector_mode):\n\tAdd E_V2HFmode.\n\t* config/aarch64/iterators.md (VHSDF_P): New.\n\t(V2F, VMOVE, nunits, Vtype, Vmtype, Vetype, stype, VEL,\n\tVel, q, vp): Add V2HF.\n\t* config/arm/types.md (neon_fp_reduc_add_h): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/slp_1.c: Update testcase.", "tree": {"sha": "f688319ff5d5d4249083adc46bfef7c2707b9006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f688319ff5d5d4249083adc46bfef7c2707b9006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc94eaab008165698a1161c757db96fc701103a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc94eaab008165698a1161c757db96fc701103a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc94eaab008165698a1161c757db96fc701103a2"}], "stats": {"total": 135, "additions": 90, "deletions": 45}, "files": [{"sha": "c0e6164b3bde97c8ce1ebfae05aacb0409365f18", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "patch": "@@ -19,10 +19,10 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"nonimmediate_operand\")\n-\t(match_operand:VALL_F16 1 \"general_operand\"))]\n+  [(set (match_operand:VMOVE 0 \"nonimmediate_operand\")\n+\t(match_operand:VMOVE 1 \"general_operand\"))]\n   \"TARGET_FLOAT\"\n-  \"\n+{\n   /* Force the operand into a register if it is not an\n      immediate whose use can be replaced with xzr.\n      If the mode is 16 bytes wide, then we will be doing\n@@ -46,12 +46,11 @@\n       aarch64_expand_vector_init (operands[0], operands[1]);\n       DONE;\n     }\n-  \"\n-)\n+})\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"nonimmediate_operand\")\n-        (match_operand:VALL_F16 1 \"general_operand\"))]\n+  [(set (match_operand:VMOVE 0 \"nonimmediate_operand\")\n+        (match_operand:VMOVE 1 \"general_operand\"))]\n   \"TARGET_FLOAT && !STRICT_ALIGNMENT\"\n {\n   /* This pattern is not permitted to fail during expansion: if both arguments\n@@ -73,6 +72,16 @@\n   [(set_attr \"type\" \"neon_dup<q>, neon_from_gp<q>\")]\n )\n \n+(define_insn \"aarch64_simd_dupv2hf\"\n+  [(set (match_operand:V2HF 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:V2HF\n+\t  (match_operand:HF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   sli\\\\t%d0, %d0, 16\"\n+  [(set_attr \"type\" \"neon_shift_imm\")]\n+)\n+\n (define_insn \"aarch64_simd_dup<mode>\"\n   [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w,w\")\n \t(vec_duplicate:VDQF_F16\n@@ -85,10 +94,10 @@\n )\n \n (define_insn \"aarch64_dup_lane<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n-\t(vec_duplicate:VALL_F16\n+  [(set (match_operand:VMOVE 0 \"register_operand\" \"=w\")\n+\t(vec_duplicate:VMOVE\n \t  (vec_select:<VEL>\n-\t    (match_operand:VALL_F16 1 \"register_operand\" \"w\")\n+\t    (match_operand:VMOVE 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n           )))]\n   \"TARGET_SIMD\"\n@@ -150,6 +159,29 @@\n    (set_attr \"arch\" \"*,*,*,*,*,*,*,simd,*\")]\n )\n \n+(define_insn \"*aarch64_simd_movv2hf\"\n+  [(set (match_operand:V2HF 0 \"nonimmediate_operand\"\n+\t\t\"=w, m,  m,  w, ?r, ?w, ?r, w, w\")\n+\t(match_operand:V2HF 1 \"general_operand\"\n+\t\t\"m,  Dz, w,  w,  w,  r,  r, Dz, Dn\"))]\n+  \"TARGET_SIMD_F16INST\n+   && (register_operand (operands[0], V2HFmode)\n+       || aarch64_simd_reg_or_zero (operands[1], V2HFmode))\"\n+   \"@\n+    ldr\\\\t%s0, %1\n+    str\\\\twzr, %0\n+    str\\\\t%s1, %0\n+    mov\\\\t%0.2s[0], %1.2s[0]\n+    umov\\\\t%w0, %1.s[0]\n+    fmov\\\\t%s0, %w1\n+    mov\\\\t%w0, %w1\n+    movi\\\\t%d0, 0\n+    * return aarch64_output_simd_mov_immediate (operands[1], 32);\"\n+  [(set_attr \"type\" \"neon_load1_1reg, store_8, neon_store1_1reg,\\\n+\t\t     neon_logic, neon_to_gp, f_mcr,\\\n+\t\t     mov_reg, neon_move, neon_move\")]\n+)\n+\n (define_insn \"*aarch64_simd_mov<VQMOV:mode>\"\n   [(set (match_operand:VQMOV 0 \"nonimmediate_operand\"\n \t\t\"=w, Umn,  m,  w, ?r, ?w, ?r, w,  w\")\n@@ -193,7 +225,7 @@\n \n (define_insn \"aarch64_store_lane0<mode>\"\n   [(set (match_operand:<VEL> 0 \"memory_operand\" \"=m\")\n-\t(vec_select:<VEL> (match_operand:VALL_F16 1 \"register_operand\" \"w\")\n+\t(vec_select:<VEL> (match_operand:VMOVE 1 \"register_operand\" \"w\")\n \t\t\t(parallel [(match_operand 2 \"const_int_operand\" \"n\")])))]\n   \"TARGET_SIMD\n    && ENDIAN_LANE_N (<nunits>, INTVAL (operands[2])) == 0\"\n@@ -1058,11 +1090,11 @@\n )\n \n (define_insn \"aarch64_simd_vec_set<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_merge:VALL_F16\n-\t    (vec_duplicate:VALL_F16\n+  [(set (match_operand:VMOVE 0 \"register_operand\" \"=w,w,w\")\n+\t(vec_merge:VMOVE\n+\t    (vec_duplicate:VMOVE\n \t\t(match_operand:<VEL> 1 \"aarch64_simd_nonimmediate_operand\" \"w,?r,Utv\"))\n-\t    (match_operand:VALL_F16 3 \"register_operand\" \"0,0,0\")\n+\t    (match_operand:VMOVE 3 \"register_operand\" \"0,0,0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i,i,i\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -1084,14 +1116,14 @@\n )\n \n (define_insn \"@aarch64_simd_vec_copy_lane<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n-\t(vec_merge:VALL_F16\n-\t    (vec_duplicate:VALL_F16\n+  [(set (match_operand:VMOVE 0 \"register_operand\" \"=w\")\n+\t(vec_merge:VMOVE\n+\t    (vec_duplicate:VMOVE\n \t      (vec_select:<VEL>\n-\t\t(match_operand:VALL_F16 3 \"register_operand\" \"w\")\n+\t\t(match_operand:VMOVE 3 \"register_operand\" \"w\")\n \t\t(parallel\n \t\t  [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-\t    (match_operand:VALL_F16 1 \"register_operand\" \"0\")\n+\t    (match_operand:VMOVE 1 \"register_operand\" \"0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -1399,7 +1431,7 @@\n )\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VALL_F16 0 \"register_operand\")\n+  [(match_operand:VMOVE 0 \"register_operand\")\n    (match_operand:<VEL> 1 \"aarch64_simd_nonimmediate_operand\")\n    (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n@@ -3518,7 +3550,7 @@\n ;; gimple_fold'd to the IFN_REDUC_(MAX|MIN) function.  (This is FP smax/smin).\n (define_expand \"reduc_<optab>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n-   (unspec:<VEL> [(match_operand:VHSDF 1 \"register_operand\")]\n+   (unspec:<VEL> [(match_operand:VHSDF_P 1 \"register_operand\")]\n \t\t FMAXMINV)]\n   \"TARGET_SIMD\"\n   {\n@@ -3533,7 +3565,7 @@\n \n (define_expand \"reduc_<fmaxmin>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n-   (unspec:<VEL> [(match_operand:VHSDF 1 \"register_operand\")]\n+   (unspec:<VEL> [(match_operand:VHSDF_P 1 \"register_operand\")]\n \t\t FMAXMINNMV)]\n   \"TARGET_SIMD\"\n   {\n@@ -3577,8 +3609,8 @@\n )\n \n (define_insn \"aarch64_reduc_<optab>_internal<mode>\"\n- [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n-       (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n+ [(set (match_operand:VHSDF_P 0 \"register_operand\" \"=w\")\n+       (unspec:VHSDF_P [(match_operand:VHSDF_P 1 \"register_operand\" \"w\")]\n \t\t      FMAXMINV))]\n  \"TARGET_SIMD\"\n  \"<maxmin_uns_op><vp>\\\\t%<Vetype>0, %1.<Vtype>\"\n@@ -4223,7 +4255,7 @@\n (define_insn_and_split \"aarch64_get_lane<mode>\"\n   [(set (match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"=?r, w, Utv\")\n \t(vec_select:<VEL>\n-\t  (match_operand:VALL_F16 1 \"register_operand\" \"w, w, w\")\n+\t  (match_operand:VMOVE 1 \"register_operand\" \"w, w, w\")\n \t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i, i, i\")])))]\n   \"TARGET_SIMD\"\n   {\n@@ -8028,7 +8060,7 @@\n ;; Standard pattern name vec_init<mode><Vel>.\n \n (define_expand \"vec_init<mode><Vel>\"\n-  [(match_operand:VALL_F16 0 \"register_operand\")\n+  [(match_operand:VMOVE 0 \"register_operand\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_SIMD\"\n {\n@@ -8107,7 +8139,7 @@\n \n (define_expand \"vec_extract<mode><Vel>\"\n   [(match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\")\n-   (match_operand:VALL_F16 1 \"register_operand\")\n+   (match_operand:VMOVE 1 \"register_operand\")\n    (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {"}, {"sha": "fd92212f96a9062fa7a8182b55d9e03589e591cc", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "patch": "@@ -3634,6 +3634,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_V8BFmode:\n     case E_V4SFmode:\n     case E_V2DFmode:\n+    case E_V2HFmode:\n       return TARGET_FLOAT ? VEC_ADVSIMD : 0;\n \n     default:"}, {"sha": "d10cf93572ef173c92d6d256bd937c069ce04d3e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "patch": "@@ -160,6 +160,10 @@\n (define_mode_iterator VHSDF [(V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t     (V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t     V2SF V4SF V2DF])\n+;; Advanced SIMD Float modes suitable for reduction or pairwise operations\n+(define_mode_iterator VHSDF_P [(V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t       (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t       V2SF V4SF V2DF (V2HF \"TARGET_SIMD_F16INST\")])\n \n ;; Advanced SIMD Float modes, and DF.\n (define_mode_iterator VDQF_DF [V2SF V4SF V2DF DF])\n@@ -188,15 +192,22 @@\n (define_mode_iterator VALLF [V2SF V4SF V2DF SF DF])\n \n ;; Advanced SIMD Float modes with 2 elements.\n-(define_mode_iterator V2F [V2SF V2DF])\n+(define_mode_iterator V2F [V2SF V2DF V2HF])\n \n ;; All Advanced SIMD modes on which we support any arithmetic operations.\n (define_mode_iterator VALL [V8QI V16QI V4HI V8HI V2SI V4SI V2DI V2SF V4SF V2DF])\n \n-;; All Advanced SIMD modes suitable for moving, loading, and storing.\n+;; The set of all modes for which vld1 intrinsics are provided.\n (define_mode_iterator VALL_F16 [V8QI V16QI V4HI V8HI V2SI V4SI V2DI\n \t\t\t\tV4HF V8HF V4BF V8BF V2SF V4SF V2DF])\n \n+;; All Advanced SIMD modes suitable for moving, loading, and storing\n+;; including V2HF\n+(define_mode_iterator VMOVE [V8QI V16QI V4HI V8HI V2SI V4SI V2DI\n+\t\t\t     V4HF V8HF V4BF V8BF V2SF V4SF V2DF\n+\t\t\t     (V2HF \"TARGET_SIMD_F16INST\")])\n+\n+\n ;; The VALL_F16 modes except the 128-bit 2-element ones.\n (define_mode_iterator VALL_F16_NO_V2Q [V8QI V16QI V4HI V8HI V2SI V4SI\n \t\t\t\tV4HF V8HF V2SF V4SF])\n@@ -1079,7 +1090,7 @@\n \t\t\t  (V2SF \"2\") (V4SF \"4\")\n \t\t\t  (V1DF \"1\") (V2DF \"2\")\n \t\t\t  (DI \"1\") (DF \"1\")\n-\t\t\t  (V8DI \"8\")])\n+\t\t\t  (V8DI \"8\") (V2HF \"2\")])\n \n ;; Map a mode to the number of bits in it, if the size of the mode\n ;; is constant.\n@@ -1196,7 +1207,7 @@\n (define_mode_attr Vetype [(V8QI \"b\") (V16QI \"b\")\n \t\t\t  (V4HI \"h\") (V8HI  \"h\")\n \t\t\t  (V2SI \"s\") (V4SI  \"s\")\n-\t\t\t  (V2DI \"d\")\n+\t\t\t  (V2DI \"d\") (V2HF  \"h\")\n \t\t\t  (V4HF \"h\") (V8HF  \"h\")\n \t\t\t  (V2SF \"s\") (V4SF  \"s\")\n \t\t\t  (V2DF \"d\")\n@@ -1288,7 +1299,7 @@\n ;; more accurately.\n (define_mode_attr stype [(V8QI \"b\") (V16QI \"b\") (V4HI \"s\") (V8HI \"s\")\n \t\t\t (V2SI \"s\") (V4SI \"s\") (V2DI \"d\") (V4HF \"s\")\n-\t\t\t (V8HF \"s\") (V2SF \"s\") (V4SF \"s\") (V2DF \"d\")\n+\t\t\t (V8HF \"s\") (V2SF \"s\") (V4SF \"s\") (V2DF \"d\") (V2HF \"s\")\n \t\t\t (HF \"s\") (SF \"s\") (DF \"d\") (QI \"b\") (HI \"s\")\n \t\t\t (SI \"s\") (DI \"d\")])\n \n@@ -1363,8 +1374,8 @@\n \t\t       (V4HF \"HF\") (V8HF  \"HF\")\n \t\t       (V2SF \"SF\") (V4SF  \"SF\")\n \t\t       (DF   \"DF\") (V2DF  \"DF\")\n-\t\t       (SI   \"SI\") (HI    \"HI\")\n-\t\t       (QI   \"QI\")\n+\t\t       (SI   \"SI\") (V2HF  \"HF\")\n+\t\t       (QI   \"QI\") (HI    \"HI\")\n \t\t       (V4BF \"BF\") (V8BF \"BF\")\n \t\t       (VNx16QI \"QI\") (VNx8QI \"QI\") (VNx4QI \"QI\") (VNx2QI \"QI\")\n \t\t       (VNx8HI \"HI\") (VNx4HI \"HI\") (VNx2HI \"HI\")\n@@ -1384,7 +1395,7 @@\n \t\t       (V2SF \"sf\") (V4SF \"sf\")\n \t\t       (V2DF \"df\") (DF   \"df\")\n \t\t       (SI   \"si\") (HI   \"hi\")\n-\t\t       (QI   \"qi\")\n+\t\t       (QI   \"qi\") (V2HF \"hf\")\n \t\t       (V4BF \"bf\") (V8BF \"bf\")\n \t\t       (VNx16QI \"qi\") (VNx8QI \"qi\") (VNx4QI \"qi\") (VNx2QI \"qi\")\n \t\t       (VNx8HI \"hi\") (VNx4HI \"hi\") (VNx2HI \"hi\")\n@@ -1869,7 +1880,7 @@\n \t\t     (V4HF \"\") (V8HF \"_q\")\n \t\t     (V4BF \"\") (V8BF \"_q\")\n \t\t     (V2SF \"\") (V4SF  \"_q\")\n-\t\t\t       (V2DF  \"_q\")\n+\t\t     (V2HF \"\") (V2DF  \"_q\")\n \t\t     (QI \"\") (HI \"\") (SI \"\") (DI \"\") (HF \"\") (SF \"\") (DF \"\")\n \t\t     (V2x8QI \"\") (V2x16QI \"_q\")\n \t\t     (V2x4HI \"\") (V2x8HI \"_q\")\n@@ -1908,6 +1919,7 @@\n \t\t      (V2SI \"p\") (V4SI  \"v\")\n \t\t      (V2DI \"p\") (V2DF  \"p\")\n \t\t      (V2SF \"p\") (V4SF  \"v\")\n+\t\t      (V2HF \"p\")\n \t\t      (V4HF \"v\") (V8HF  \"v\")])\n \n (define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")"}, {"sha": "880353dbeedbac3df5e237d78fa90651d6a91d52", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "patch": "@@ -484,6 +484,7 @@\n ; neon_fp_minmax_s_q\n ; neon_fp_minmax_d\n ; neon_fp_minmax_d_q\n+; neon_fp_reduc_add_h\n ; neon_fp_reduc_add_s\n ; neon_fp_reduc_add_s_q\n ; neon_fp_reduc_add_d\n@@ -1034,6 +1035,7 @@\n   neon_fp_minmax_d,\\\n   neon_fp_minmax_d_q,\\\n \\\n+  neon_fp_reduc_add_h,\\\n   neon_fp_reduc_add_s,\\\n   neon_fp_reduc_add_s_q,\\\n   neon_fp_reduc_add_d,\\\n@@ -1258,8 +1260,8 @@\n           neon_fp_compare_d, neon_fp_compare_d_q, neon_fp_minmax_s,\\\n           neon_fp_minmax_s_q, neon_fp_minmax_d, neon_fp_minmax_d_q,\\\n           neon_fp_neg_s, neon_fp_neg_s_q, neon_fp_neg_d, neon_fp_neg_d_q,\\\n-          neon_fp_reduc_add_s, neon_fp_reduc_add_s_q, neon_fp_reduc_add_d,\\\n-          neon_fp_reduc_add_d_q, neon_fp_reduc_minmax_s,\n+          neon_fp_reduc_add_h, neon_fp_reduc_add_s, neon_fp_reduc_add_s_q,\\\n+          neon_fp_reduc_add_d, neon_fp_reduc_add_d_q, neon_fp_reduc_minmax_s,\\\n           neon_fp_reduc_minmax_s_q, neon_fp_reduc_minmax_d,\\\n           neon_fp_reduc_minmax_d_q,\\\n           neon_fp_cvt_narrow_s_q, neon_fp_cvt_narrow_d_q,\\"}, {"sha": "e6021c5a42748701e5326a5c387a39a0bbadc9e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c?ref=2cba118e538ba0b7582af7f9fb5ba2dfbb772f8e", "patch": "@@ -30,11 +30,9 @@ vec_slp_##TYPE (TYPE *restrict a, TYPE b, TYPE c, int n)\t\\\n TEST_ALL (VEC_PERM)\n \n /* We should use one DUP for each of the 8-, 16- and 32-bit types,\n-   although we currently use LD1RW for _Float16.  We should use two\n-   DUPs for each of the three 64-bit types.  */\n+   We should use two DUPs for each of the three 64-bit types.  */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, [hw]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, [sw]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tld1rw\\tz[0-9]+\\.s, } 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, [sw]} 3 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, [dx]} 9 } } */\n /* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n /* { dg-final { scan-assembler-not {\\tzip2\\t} } } */\n@@ -53,7 +51,7 @@ TEST_ALL (VEC_PERM)\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.s} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n /* { dg-final { scan-assembler-not {\\tldr} } } */\n-/* { dg-final { scan-assembler-times {\\tstr} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tstr\\th[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tstr} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\th[0-9]+} } } */\n \n /* { dg-final { scan-assembler-not {\\tuqdec} } } */"}]}