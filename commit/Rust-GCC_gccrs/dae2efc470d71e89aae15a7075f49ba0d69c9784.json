{"sha": "dae2efc470d71e89aae15a7075f49ba0d69c9784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlMmVmYzQ3MGQ3MWU4OWFhZTE1YTcwNzVmNDliYTBkNjljOTc4NA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2006-07-19T16:51:49Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2006-07-19T16:51:49Z"}, "message": "re PR libfortran/27919 (dot_product should be removed from the library)\n\n2006-07-19  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/27919\n\t* m4/dotprodc.m4: Remove.\n\t* m4/dotprodl.m4: Remove.\n\t* m4/dotprod.m4: Remove.\n\t* generated/dotprod_*.c: Remove.\n\t* Makefile.am: Remove any references to dot_product\n\timplementation.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r115593", "tree": {"sha": "4af8986c426444f4a49e25e5e9b5f88660d045ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af8986c426444f4a49e25e5e9b5f88660d045ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dae2efc470d71e89aae15a7075f49ba0d69c9784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae2efc470d71e89aae15a7075f49ba0d69c9784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae2efc470d71e89aae15a7075f49ba0d69c9784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae2efc470d71e89aae15a7075f49ba0d69c9784/comments", "author": null, "committer": null, "parents": [{"sha": "4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4841d432d7cf6b8afabd46058e7b25a9384d9d6f"}], "stats": {"total": 1582, "additions": 31, "deletions": 1551}, "files": [{"sha": "f7482b74fadaa63b3e40d715acb45759c689d294", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2efc470d71e89aae15a7075f49ba0d69c9784/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2efc470d71e89aae15a7075f49ba0d69c9784/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=dae2efc470d71e89aae15a7075f49ba0d69c9784", "patch": "@@ -270,26 +270,6 @@ generated/product_c8.c \\\n generated/product_c10.c \\\n generated/product_c16.c\n \n-i_dotprod_c= \\\n-generated/dotprod_i4.c \\\n-generated/dotprod_i8.c \\\n-generated/dotprod_i16.c \\\n-generated/dotprod_r4.c \\\n-generated/dotprod_r8.c \\\n-generated/dotprod_r10.c \\\n-generated/dotprod_r16.c\n-\n-i_dotprodl_c= \\\n-generated/dotprod_l4.c \\\n-generated/dotprod_l8.c \\\n-generated/dotprod_l16.c\n-\n-i_dotprodc_c= \\\n-generated/dotprod_c4.c \\\n-generated/dotprod_c8.c \\\n-generated/dotprod_c10.c \\\n-generated/dotprod_c16.c\n-\n i_matmul_c= \\\n generated/matmul_i4.c \\\n generated/matmul_i8.c \\\n@@ -434,15 +414,15 @@ generated/pow_c16_i16.c\n m4_files= m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/any.m4 m4/count.m4 m4/maxloc0.m4 m4/maxloc1.m4 m4/maxval.m4 \\\n     m4/minloc0.m4 m4/minloc1.m4 m4/minval.m4 m4/product.m4 m4/sum.m4 \\\n-    m4/dotprod.m4 m4/dotprodl.m4 m4/dotprodc.m4 m4/matmul.m4 m4/matmull.m4 \\\n+    m4/matmul.m4 m4/matmull.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n \n gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n-    $(i_product_c) $(i_sum_c) $(i_dotprod_c) $(i_dotprodl_c) $(i_dotprodc_c) \\\n+    $(i_product_c) $(i_sum_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n@@ -654,15 +634,6 @@ $(i_product_c): m4/product.m4 $(I_M4_DEPS1)\n $(i_sum_c): m4/sum.m4 $(I_M4_DEPS1)\n \tm4 -Dfile=$@ -I$(srcdir)/m4 sum.m4 > $(srcdir)/$@\n \n-$(i_dotprod_c): m4/dotprod.m4 $(I_M4_DEPS)\n-\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprod.m4 > $(srcdir)/$@\n-\n-$(i_dotprodl_c): m4/dotprodl.m4 $(I_M4_DEPS)\n-\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprodl.m4 > $(srcdir)/$@\n-\n-$(i_dotprodc_c): m4/dotprodc.m4 $(I_M4_DEPS)\n-\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprodc.m4 > $(srcdir)/$@\n-\n $(i_matmul_c): m4/matmul.m4 $(I_M4_DEPS)\n \tm4 -Dfile=$@ -I$(srcdir)/m4 matmul.m4 > $(srcdir)/$@\n "}, {"sha": "761e048e3f88cc3ecfa522a4e28d28dd8be860a9", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 29, "deletions": 105, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2efc470d71e89aae15a7075f49ba0d69c9784/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2efc470d71e89aae15a7075f49ba0d69c9784/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=dae2efc470d71e89aae15a7075f49ba0d69c9784", "patch": "@@ -112,40 +112,35 @@ am__objects_11 = product_i4.lo product_i8.lo product_i16.lo \\\n am__objects_12 = sum_i4.lo sum_i8.lo sum_i16.lo sum_r4.lo sum_r8.lo \\\n \tsum_r10.lo sum_r16.lo sum_c4.lo sum_c8.lo sum_c10.lo \\\n \tsum_c16.lo\n-am__objects_13 = dotprod_i4.lo dotprod_i8.lo dotprod_i16.lo \\\n-\tdotprod_r4.lo dotprod_r8.lo dotprod_r10.lo dotprod_r16.lo\n-am__objects_14 = dotprod_l4.lo dotprod_l8.lo dotprod_l16.lo\n-am__objects_15 = dotprod_c4.lo dotprod_c8.lo dotprod_c10.lo \\\n-\tdotprod_c16.lo\n-am__objects_16 = matmul_i4.lo matmul_i8.lo matmul_i16.lo matmul_r4.lo \\\n+am__objects_13 = matmul_i4.lo matmul_i8.lo matmul_i16.lo matmul_r4.lo \\\n \tmatmul_r8.lo matmul_r10.lo matmul_r16.lo matmul_c4.lo \\\n \tmatmul_c8.lo matmul_c10.lo matmul_c16.lo\n-am__objects_17 = matmul_l4.lo matmul_l8.lo matmul_l16.lo\n-am__objects_18 = transpose_i4.lo transpose_i8.lo transpose_i16.lo \\\n+am__objects_14 = matmul_l4.lo matmul_l8.lo matmul_l16.lo\n+am__objects_15 = transpose_i4.lo transpose_i8.lo transpose_i16.lo \\\n \ttranspose_r4.lo transpose_r8.lo transpose_r10.lo \\\n \ttranspose_r16.lo transpose_c4.lo transpose_c8.lo \\\n \ttranspose_c10.lo transpose_c16.lo\n-am__objects_19 = shape_i4.lo shape_i8.lo shape_i16.lo\n-am__objects_20 = eoshift1_4.lo eoshift1_8.lo eoshift1_16.lo\n-am__objects_21 = eoshift3_4.lo eoshift3_8.lo eoshift3_16.lo\n-am__objects_22 = cshift1_4.lo cshift1_8.lo cshift1_16.lo\n-am__objects_23 = reshape_i4.lo reshape_i8.lo reshape_i16.lo \\\n+am__objects_16 = shape_i4.lo shape_i8.lo shape_i16.lo\n+am__objects_17 = eoshift1_4.lo eoshift1_8.lo eoshift1_16.lo\n+am__objects_18 = eoshift3_4.lo eoshift3_8.lo eoshift3_16.lo\n+am__objects_19 = cshift1_4.lo cshift1_8.lo cshift1_16.lo\n+am__objects_20 = reshape_i4.lo reshape_i8.lo reshape_i16.lo \\\n \treshape_r4.lo reshape_r8.lo reshape_r10.lo reshape_r16.lo \\\n \treshape_c4.lo reshape_c8.lo reshape_c10.lo reshape_c16.lo\n-am__objects_24 = in_pack_i4.lo in_pack_i8.lo in_pack_i16.lo \\\n+am__objects_21 = in_pack_i4.lo in_pack_i8.lo in_pack_i16.lo \\\n \tin_pack_c4.lo in_pack_c8.lo in_pack_c10.lo in_pack_c16.lo\n-am__objects_25 = in_unpack_i4.lo in_unpack_i8.lo in_unpack_i16.lo \\\n+am__objects_22 = in_unpack_i4.lo in_unpack_i8.lo in_unpack_i16.lo \\\n \tin_unpack_c4.lo in_unpack_c8.lo in_unpack_c10.lo \\\n \tin_unpack_c16.lo\n-am__objects_26 = exponent_r4.lo exponent_r8.lo exponent_r10.lo \\\n+am__objects_23 = exponent_r4.lo exponent_r8.lo exponent_r10.lo \\\n \texponent_r16.lo\n-am__objects_27 = fraction_r4.lo fraction_r8.lo fraction_r10.lo \\\n+am__objects_24 = fraction_r4.lo fraction_r8.lo fraction_r10.lo \\\n \tfraction_r16.lo\n-am__objects_28 = nearest_r4.lo nearest_r8.lo nearest_r10.lo \\\n+am__objects_25 = nearest_r4.lo nearest_r8.lo nearest_r10.lo \\\n \tnearest_r16.lo\n-am__objects_29 = set_exponent_r4.lo set_exponent_r8.lo \\\n+am__objects_26 = set_exponent_r4.lo set_exponent_r8.lo \\\n \tset_exponent_r10.lo set_exponent_r16.lo\n-am__objects_30 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_r4_i4.lo \\\n+am__objects_27 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_r4_i4.lo \\\n \tpow_r8_i4.lo pow_r10_i4.lo pow_r16_i4.lo pow_c4_i4.lo \\\n \tpow_c8_i4.lo pow_c10_i4.lo pow_c16_i4.lo pow_i4_i8.lo \\\n \tpow_i8_i8.lo pow_i16_i8.lo pow_r4_i8.lo pow_r8_i8.lo \\\n@@ -154,20 +149,19 @@ am__objects_30 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_r4_i4.lo \\\n \tpow_i16_i16.lo pow_r4_i16.lo pow_r8_i16.lo pow_r10_i16.lo \\\n \tpow_r16_i16.lo pow_c4_i16.lo pow_c8_i16.lo pow_c10_i16.lo \\\n \tpow_c16_i16.lo\n-am__objects_31 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n+am__objects_28 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_5) $(am__objects_6) $(am__objects_7) \\\n \t$(am__objects_8) $(am__objects_9) $(am__objects_10) \\\n \t$(am__objects_11) $(am__objects_12) $(am__objects_13) \\\n \t$(am__objects_14) $(am__objects_15) $(am__objects_16) \\\n \t$(am__objects_17) $(am__objects_18) $(am__objects_19) \\\n \t$(am__objects_20) $(am__objects_21) $(am__objects_22) \\\n \t$(am__objects_23) $(am__objects_24) $(am__objects_25) \\\n-\t$(am__objects_26) $(am__objects_27) $(am__objects_28) \\\n-\t$(am__objects_29) $(am__objects_30)\n-am__objects_32 = close.lo file_pos.lo format.lo inquire.lo \\\n+\t$(am__objects_26) $(am__objects_27)\n+am__objects_29 = close.lo file_pos.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo size_from_kind.lo \\\n \ttransfer.lo unit.lo unix.lo write.lo\n-am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n+am__objects_30 = associated.lo abort.lo args.lo bessel.lo \\\n \tc99_functions.lo chdir.lo cpu_time.lo cshift0.lo ctime.lo \\\n \tdate_and_time.lo env.lo erf.lo eoshift0.lo eoshift2.lo \\\n \tetime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo gerror.lo \\\n@@ -180,8 +174,8 @@ am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tsystem_clock.lo time.lo transpose_generic.lo tty.lo umask.lo \\\n \tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo normalize.lo\n-am__objects_34 =\n-am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n+am__objects_31 =\n+am__objects_32 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n \t_abs_r10.lo _abs_r16.lo _exp_r4.lo _exp_r8.lo _exp_r10.lo \\\n \t_exp_r16.lo _exp_c4.lo _exp_c8.lo _exp_c10.lo _exp_c16.lo \\\n@@ -201,17 +195,17 @@ am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_conjg_c4.lo _conjg_c8.lo _conjg_c10.lo _conjg_c16.lo \\\n \t_aint_r4.lo _aint_r8.lo _aint_r10.lo _aint_r16.lo _anint_r4.lo \\\n \t_anint_r8.lo _anint_r10.lo _anint_r16.lo\n-am__objects_36 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n+am__objects_33 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_sign_r8.lo _sign_r10.lo _sign_r16.lo _dim_i4.lo _dim_i8.lo \\\n \t_dim_i16.lo _dim_r4.lo _dim_r8.lo _dim_r10.lo _dim_r16.lo \\\n \t_atan2_r4.lo _atan2_r8.lo _atan2_r10.lo _atan2_r16.lo \\\n \t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo \\\n \t_mod_r10.lo _mod_r16.lo\n-am__objects_37 = $(am__objects_35) $(am__objects_36) dprod_r8.lo \\\n+am__objects_34 = $(am__objects_32) $(am__objects_33) dprod_r8.lo \\\n \tf2c_specifics.lo\n-am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_31) \\\n-\t$(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n-\t$(am__objects_37)\n+am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_28) \\\n+\t$(am__objects_29) $(am__objects_30) $(am__objects_31) \\\n+\t$(am__objects_34)\n libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)\n libgfortranbegin_la_LIBADD =\n am_libgfortranbegin_la_OBJECTS = fmain.lo\n@@ -322,6 +316,7 @@ bindir = @bindir@\n build = @build@\n build_alias = @build_alias@\n build_cpu = @build_cpu@\n+build_libsubdir = @build_libsubdir@\n build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n@@ -619,26 +614,6 @@ generated/product_c8.c \\\n generated/product_c10.c \\\n generated/product_c16.c\n \n-i_dotprod_c = \\\n-generated/dotprod_i4.c \\\n-generated/dotprod_i8.c \\\n-generated/dotprod_i16.c \\\n-generated/dotprod_r4.c \\\n-generated/dotprod_r8.c \\\n-generated/dotprod_r10.c \\\n-generated/dotprod_r16.c\n-\n-i_dotprodl_c = \\\n-generated/dotprod_l4.c \\\n-generated/dotprod_l8.c \\\n-generated/dotprod_l16.c\n-\n-i_dotprodc_c = \\\n-generated/dotprod_c4.c \\\n-generated/dotprod_c8.c \\\n-generated/dotprod_c10.c \\\n-generated/dotprod_c16.c\n-\n i_matmul_c = \\\n generated/matmul_i4.c \\\n generated/matmul_i8.c \\\n@@ -783,15 +758,15 @@ generated/pow_c16_i16.c\n m4_files = m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/any.m4 m4/count.m4 m4/maxloc0.m4 m4/maxloc1.m4 m4/maxval.m4 \\\n     m4/minloc0.m4 m4/minloc1.m4 m4/minval.m4 m4/product.m4 m4/sum.m4 \\\n-    m4/dotprod.m4 m4/dotprodl.m4 m4/dotprodc.m4 m4/matmul.m4 m4/matmull.m4 \\\n+    m4/matmul.m4 m4/matmull.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n \n gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n-    $(i_product_c) $(i_sum_c) $(i_dotprod_c) $(i_dotprodl_c) $(i_dotprodc_c) \\\n+    $(i_product_c) $(i_sum_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n@@ -1850,48 +1825,6 @@ sum_c10.lo: generated/sum_c10.c\n sum_c16.lo: generated/sum_c16.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sum_c16.lo `test -f 'generated/sum_c16.c' || echo '$(srcdir)/'`generated/sum_c16.c\n \n-dotprod_i4.lo: generated/dotprod_i4.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_i4.lo `test -f 'generated/dotprod_i4.c' || echo '$(srcdir)/'`generated/dotprod_i4.c\n-\n-dotprod_i8.lo: generated/dotprod_i8.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_i8.lo `test -f 'generated/dotprod_i8.c' || echo '$(srcdir)/'`generated/dotprod_i8.c\n-\n-dotprod_i16.lo: generated/dotprod_i16.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_i16.lo `test -f 'generated/dotprod_i16.c' || echo '$(srcdir)/'`generated/dotprod_i16.c\n-\n-dotprod_r4.lo: generated/dotprod_r4.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_r4.lo `test -f 'generated/dotprod_r4.c' || echo '$(srcdir)/'`generated/dotprod_r4.c\n-\n-dotprod_r8.lo: generated/dotprod_r8.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_r8.lo `test -f 'generated/dotprod_r8.c' || echo '$(srcdir)/'`generated/dotprod_r8.c\n-\n-dotprod_r10.lo: generated/dotprod_r10.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_r10.lo `test -f 'generated/dotprod_r10.c' || echo '$(srcdir)/'`generated/dotprod_r10.c\n-\n-dotprod_r16.lo: generated/dotprod_r16.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_r16.lo `test -f 'generated/dotprod_r16.c' || echo '$(srcdir)/'`generated/dotprod_r16.c\n-\n-dotprod_l4.lo: generated/dotprod_l4.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_l4.lo `test -f 'generated/dotprod_l4.c' || echo '$(srcdir)/'`generated/dotprod_l4.c\n-\n-dotprod_l8.lo: generated/dotprod_l8.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_l8.lo `test -f 'generated/dotprod_l8.c' || echo '$(srcdir)/'`generated/dotprod_l8.c\n-\n-dotprod_l16.lo: generated/dotprod_l16.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_l16.lo `test -f 'generated/dotprod_l16.c' || echo '$(srcdir)/'`generated/dotprod_l16.c\n-\n-dotprod_c4.lo: generated/dotprod_c4.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_c4.lo `test -f 'generated/dotprod_c4.c' || echo '$(srcdir)/'`generated/dotprod_c4.c\n-\n-dotprod_c8.lo: generated/dotprod_c8.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_c8.lo `test -f 'generated/dotprod_c8.c' || echo '$(srcdir)/'`generated/dotprod_c8.c\n-\n-dotprod_c10.lo: generated/dotprod_c10.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_c10.lo `test -f 'generated/dotprod_c10.c' || echo '$(srcdir)/'`generated/dotprod_c10.c\n-\n-dotprod_c16.lo: generated/dotprod_c16.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dotprod_c16.lo `test -f 'generated/dotprod_c16.c' || echo '$(srcdir)/'`generated/dotprod_c16.c\n-\n matmul_i4.lo: generated/matmul_i4.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o matmul_i4.lo `test -f 'generated/matmul_i4.c' || echo '$(srcdir)/'`generated/matmul_i4.c\n \n@@ -2819,15 +2752,6 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n @MAINTAINER_MODE_TRUE@$(i_sum_c): m4/sum.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 sum.m4 > $(srcdir)/$@\n \n-@MAINTAINER_MODE_TRUE@$(i_dotprod_c): m4/dotprod.m4 $(I_M4_DEPS)\n-@MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprod.m4 > $(srcdir)/$@\n-\n-@MAINTAINER_MODE_TRUE@$(i_dotprodl_c): m4/dotprodl.m4 $(I_M4_DEPS)\n-@MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprodl.m4 > $(srcdir)/$@\n-\n-@MAINTAINER_MODE_TRUE@$(i_dotprodc_c): m4/dotprodc.m4 $(I_M4_DEPS)\n-@MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 dotprodc.m4 > $(srcdir)/$@\n-\n @MAINTAINER_MODE_TRUE@$(i_matmul_c): m4/matmul.m4 $(I_M4_DEPS)\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 matmul.m4 > $(srcdir)/$@\n "}, {"sha": "b68b0d3b5e6509013be586fb4e517d7ff2268f68", "filename": "libgfortran/generated/dotprod_c10.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c10.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,81 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-   and Feng Wang <fengwang@nudt.edu.cn>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_COMPLEX_10)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_COMPLEX_10 dot_product_c10 (gfc_array_c10 * const restrict a, \n-\tgfc_array_c10 * const restrict b);\n-export_proto(dot_product_c10);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_COMPLEX_10\n-dot_product_c10 (gfc_array_c10 * const restrict a, gfc_array_c10 * const restrict b)\n-{\n-  const GFC_COMPLEX_10 * restrict pa;\n-  const GFC_COMPLEX_10 * restrict pb;\n-  GFC_COMPLEX_10 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += __builtin_conjl (*pa) * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "82d5d49ea92e072cd572bbdd6d9542096a023c4e", "filename": "libgfortran/generated/dotprod_c16.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c16.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,81 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-   and Feng Wang <fengwang@nudt.edu.cn>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_COMPLEX_16)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_COMPLEX_16 dot_product_c16 (gfc_array_c16 * const restrict a, \n-\tgfc_array_c16 * const restrict b);\n-export_proto(dot_product_c16);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_COMPLEX_16\n-dot_product_c16 (gfc_array_c16 * const restrict a, gfc_array_c16 * const restrict b)\n-{\n-  const GFC_COMPLEX_16 * restrict pa;\n-  const GFC_COMPLEX_16 * restrict pb;\n-  GFC_COMPLEX_16 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += __builtin_conjl (*pa) * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "7f336234fe87b9ed3de299a9f09369e6fb021b8f", "filename": "libgfortran/generated/dotprod_c4.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c4.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,81 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-   and Feng Wang <fengwang@nudt.edu.cn>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_COMPLEX_4)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_COMPLEX_4 dot_product_c4 (gfc_array_c4 * const restrict a, \n-\tgfc_array_c4 * const restrict b);\n-export_proto(dot_product_c4);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_COMPLEX_4\n-dot_product_c4 (gfc_array_c4 * const restrict a, gfc_array_c4 * const restrict b)\n-{\n-  const GFC_COMPLEX_4 * restrict pa;\n-  const GFC_COMPLEX_4 * restrict pb;\n-  GFC_COMPLEX_4 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += __builtin_conjf (*pa) * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "df7738f381e162eeae4598f0e9dcf2c7382cb07b", "filename": "libgfortran/generated/dotprod_c8.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c8.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,81 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-   and Feng Wang <fengwang@nudt.edu.cn>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_COMPLEX_8)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_COMPLEX_8 dot_product_c8 (gfc_array_c8 * const restrict a, \n-\tgfc_array_c8 * const restrict b);\n-export_proto(dot_product_c8);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_COMPLEX_8\n-dot_product_c8 (gfc_array_c8 * const restrict a, gfc_array_c8 * const restrict b)\n-{\n-  const GFC_COMPLEX_8 * restrict pa;\n-  const GFC_COMPLEX_8 * restrict pb;\n-  GFC_COMPLEX_8 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += __builtin_conj (*pa) * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "292f078653806ff65a99aef71fa739433b8e0276", "filename": "libgfortran/generated/dotprod_i16.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_i16.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_INTEGER_16)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_INTEGER_16 dot_product_i16 (gfc_array_i16 * const restrict a, \n-\tgfc_array_i16 * const restrict b);\n-export_proto(dot_product_i16);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_INTEGER_16\n-dot_product_i16 (gfc_array_i16 * const restrict a, gfc_array_i16 * const restrict b)\n-{\n-  const GFC_INTEGER_16 * restrict pa;\n-  const GFC_INTEGER_16 * restrict pb;\n-  GFC_INTEGER_16 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "5a8dcd930fef5c42d8883c3c2f49d2449a9161e7", "filename": "libgfortran/generated/dotprod_i4.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_i4.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_INTEGER_4)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_INTEGER_4 dot_product_i4 (gfc_array_i4 * const restrict a, \n-\tgfc_array_i4 * const restrict b);\n-export_proto(dot_product_i4);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_INTEGER_4\n-dot_product_i4 (gfc_array_i4 * const restrict a, gfc_array_i4 * const restrict b)\n-{\n-  const GFC_INTEGER_4 * restrict pa;\n-  const GFC_INTEGER_4 * restrict pb;\n-  GFC_INTEGER_4 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "c03cbc311e9d3a021f53bcd30ae0a1922788a74c", "filename": "libgfortran/generated/dotprod_i8.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_i8.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_INTEGER_8)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_INTEGER_8 dot_product_i8 (gfc_array_i8 * const restrict a, \n-\tgfc_array_i8 * const restrict b);\n-export_proto(dot_product_i8);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_INTEGER_8\n-dot_product_i8 (gfc_array_i8 * const restrict a, gfc_array_i8 * const restrict b)\n-{\n-  const GFC_INTEGER_8 * restrict pa;\n-  const GFC_INTEGER_8 * restrict pb;\n-  GFC_INTEGER_8 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "c53b1bb7af5ae2956502a0fce67af99797d68d1b", "filename": "libgfortran/generated/dotprod_l16.c", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_l16.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,91 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_LOGICAL_16)\n-\n-extern GFC_LOGICAL_16 dot_product_l16 (gfc_array_l4 * const restrict, \n-\tgfc_array_l4 * const restrict);\n-export_proto(dot_product_l16);\n-\n-GFC_LOGICAL_16\n-dot_product_l16 (gfc_array_l4 * const restrict a, \n-\tgfc_array_l4 * const restrict b)\n-{\n-  const GFC_LOGICAL_4 * restrict pa;\n-  const GFC_LOGICAL_4 * restrict pb;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-\n-  pa = a->data;\n-  if (GFC_DESCRIPTOR_SIZE (a) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n-      pa = GFOR_POINTER_L8_TO_L4 (pa);\n-      astride <<= 1;\n-    }\n-  pb = b->data;\n-  if (GFC_DESCRIPTOR_SIZE (b) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n-      pb = GFOR_POINTER_L8_TO_L4 (pb);\n-      bstride <<= 1;\n-    }\n-\n-  while (count--)\n-    {\n-      if (*pa && *pb)\n-        return 1;\n-\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return 0;\n-}\n-\n-#endif"}, {"sha": "dcec980b564ec22da19f75b42a1137a8250ca7be", "filename": "libgfortran/generated/dotprod_l4.c", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_l4.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,91 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_LOGICAL_4)\n-\n-extern GFC_LOGICAL_4 dot_product_l4 (gfc_array_l4 * const restrict, \n-\tgfc_array_l4 * const restrict);\n-export_proto(dot_product_l4);\n-\n-GFC_LOGICAL_4\n-dot_product_l4 (gfc_array_l4 * const restrict a, \n-\tgfc_array_l4 * const restrict b)\n-{\n-  const GFC_LOGICAL_4 * restrict pa;\n-  const GFC_LOGICAL_4 * restrict pb;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-\n-  pa = a->data;\n-  if (GFC_DESCRIPTOR_SIZE (a) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n-      pa = GFOR_POINTER_L8_TO_L4 (pa);\n-      astride <<= 1;\n-    }\n-  pb = b->data;\n-  if (GFC_DESCRIPTOR_SIZE (b) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n-      pb = GFOR_POINTER_L8_TO_L4 (pb);\n-      bstride <<= 1;\n-    }\n-\n-  while (count--)\n-    {\n-      if (*pa && *pb)\n-        return 1;\n-\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return 0;\n-}\n-\n-#endif"}, {"sha": "b579f2ff9ed2e3c079eb472b92b5be36fd17533a", "filename": "libgfortran/generated/dotprod_l8.c", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_l8.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,91 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_LOGICAL_8)\n-\n-extern GFC_LOGICAL_8 dot_product_l8 (gfc_array_l4 * const restrict, \n-\tgfc_array_l4 * const restrict);\n-export_proto(dot_product_l8);\n-\n-GFC_LOGICAL_8\n-dot_product_l8 (gfc_array_l4 * const restrict a, \n-\tgfc_array_l4 * const restrict b)\n-{\n-  const GFC_LOGICAL_4 * restrict pa;\n-  const GFC_LOGICAL_4 * restrict pb;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-\n-  pa = a->data;\n-  if (GFC_DESCRIPTOR_SIZE (a) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n-      pa = GFOR_POINTER_L8_TO_L4 (pa);\n-      astride <<= 1;\n-    }\n-  pb = b->data;\n-  if (GFC_DESCRIPTOR_SIZE (b) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n-      pb = GFOR_POINTER_L8_TO_L4 (pb);\n-      bstride <<= 1;\n-    }\n-\n-  while (count--)\n-    {\n-      if (*pa && *pb)\n-        return 1;\n-\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return 0;\n-}\n-\n-#endif"}, {"sha": "e2160c796a209c157bfccc7a3f8f530721db6f80", "filename": "libgfortran/generated/dotprod_r10.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r10.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_REAL_10)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_REAL_10 dot_product_r10 (gfc_array_r10 * const restrict a, \n-\tgfc_array_r10 * const restrict b);\n-export_proto(dot_product_r10);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_REAL_10\n-dot_product_r10 (gfc_array_r10 * const restrict a, gfc_array_r10 * const restrict b)\n-{\n-  const GFC_REAL_10 * restrict pa;\n-  const GFC_REAL_10 * restrict pb;\n-  GFC_REAL_10 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "40edc497a0d4eda5f410c300a5ef3d407333cda9", "filename": "libgfortran/generated/dotprod_r16.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r16.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_REAL_16)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_REAL_16 dot_product_r16 (gfc_array_r16 * const restrict a, \n-\tgfc_array_r16 * const restrict b);\n-export_proto(dot_product_r16);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_REAL_16\n-dot_product_r16 (gfc_array_r16 * const restrict a, gfc_array_r16 * const restrict b)\n-{\n-  const GFC_REAL_16 * restrict pa;\n-  const GFC_REAL_16 * restrict pb;\n-  GFC_REAL_16 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "7fdc57fa0a58c71d82769f1116d2d79fab0d7672", "filename": "libgfortran/generated/dotprod_r4.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r4.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_REAL_4)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_REAL_4 dot_product_r4 (gfc_array_r4 * const restrict a, \n-\tgfc_array_r4 * const restrict b);\n-export_proto(dot_product_r4);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_REAL_4\n-dot_product_r4 (gfc_array_r4 * const restrict a, gfc_array_r4 * const restrict b)\n-{\n-  const GFC_REAL_4 * restrict pa;\n-  const GFC_REAL_4 * restrict pb;\n-  GFC_REAL_4 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "760407736c99850c99c15969f4cd7a554f91f8c2", "filename": "libgfortran/generated/dotprod_r8.c", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fgenerated%2Fdotprod_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r8.c?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,80 +0,0 @@\n-/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"\n-\n-#if defined (HAVE_GFC_REAL_8)\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern GFC_REAL_8 dot_product_r8 (gfc_array_r8 * const restrict a, \n-\tgfc_array_r8 * const restrict b);\n-export_proto(dot_product_r8);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-GFC_REAL_8\n-dot_product_r8 (gfc_array_r8 * const restrict a, gfc_array_r8 * const restrict b)\n-{\n-  const GFC_REAL_8 * restrict pa;\n-  const GFC_REAL_8 * restrict pb;\n-  GFC_REAL_8 res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "f46796e7e4951686298c8c554ba50e085ba07597", "filename": "libgfortran/m4/dotprod.m4", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprod.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprod.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprod.m4?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,82 +0,0 @@\n-`/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"'\n-include(iparm.m4)dnl\n-\n-`#if defined (HAVE_'rtype_name`)'\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern rtype_name dot_product_`'rtype_code (rtype * const restrict a, \n-\trtype * const restrict b);\n-export_proto(dot_product_`'rtype_code);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-rtype_name\n-dot_product_`'rtype_code (rtype * const restrict a, rtype * const restrict b)\n-{\n-  const rtype_name * restrict pa;\n-  const rtype_name * restrict pb;\n-  rtype_name res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-sinclude(`dotprod_asm_'rtype_code`.m4')dnl\n-\n-  while (count--)\n-    {\n-      res += *pa * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "415eebfe4a958e1dc9fa41c7f8fd8ec0412cd808", "filename": "libgfortran/m4/dotprodc.m4", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprodc.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprodc.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprodc.m4?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,84 +0,0 @@\n-`/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-   and Feng Wang <fengwang@nudt.edu.cn>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"'\n-include(iparm.m4)dnl\n-include(mtype.m4)dnl\n-\n-`#if defined (HAVE_'rtype_name`)'\n-\n-typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n-\n-extern rtype_name dot_product_`'rtype_code (rtype * const restrict a, \n-\trtype * const restrict b);\n-export_proto(dot_product_`'rtype_code);\n-\n-/* Both parameters will already have been converted to the result type.  */\n-rtype_name\n-dot_product_`'rtype_code (rtype * const restrict a, rtype * const restrict b)\n-{\n-  const rtype_name * restrict pa;\n-  const rtype_name * restrict pb;\n-  rtype_name res;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-  res = 0;\n-  pa = a->data;\n-  pb = b->data;\n-sinclude(`dotprod_asm_'rtype_code`.m4')dnl\n-\n-  while (count--)\n-    {\n-      res += __builtin_conj`'q (*pa) * *pb;\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return res;\n-}\n-\n-#endif"}, {"sha": "37c34673b0c07b0e8a8c0de8cc62deff6fc7b40a", "filename": "libgfortran/m4/dotprodl.m4", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprodl.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4841d432d7cf6b8afabd46058e7b25a9384d9d6f/libgfortran%2Fm4%2Fdotprodl.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprodl.m4?ref=4841d432d7cf6b8afabd46058e7b25a9384d9d6f", "patch": "@@ -1,92 +0,0 @@\n-`/* Implementation of the DOT_PRODUCT intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n-   Contributed by Paul Brook <paul@nowt.org>\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"libgfortran.h\"'\n-include(iparm.m4)dnl\n-\n-`#if defined (HAVE_'rtype_name`)'\n-\n-extern rtype_name dot_product_`'rtype_code (gfc_array_l4 * const restrict, \n-\tgfc_array_l4 * const restrict);\n-export_proto(dot_product_`'rtype_code);\n-\n-rtype_name\n-dot_product_`'rtype_code (gfc_array_l4 * const restrict a, \n-\tgfc_array_l4 * const restrict b)\n-{\n-  const GFC_LOGICAL_4 * restrict pa;\n-  const GFC_LOGICAL_4 * restrict pb;\n-  index_type count;\n-  index_type astride;\n-  index_type bstride;\n-\n-  assert (GFC_DESCRIPTOR_RANK (a) == 1\n-          && GFC_DESCRIPTOR_RANK (b) == 1);\n-\n-  if (a->dim[0].stride == 0)\n-    a->dim[0].stride = 1;\n-  if (b->dim[0].stride == 0)\n-    b->dim[0].stride = 1;\n-\n-  astride = a->dim[0].stride;\n-  bstride = b->dim[0].stride;\n-  count = a->dim[0].ubound + 1 - a->dim[0].lbound;\n-\n-  pa = a->data;\n-  if (GFC_DESCRIPTOR_SIZE (a) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n-      pa = GFOR_POINTER_L8_TO_L4 (pa);\n-      astride <<= 1;\n-    }\n-  pb = b->data;\n-  if (GFC_DESCRIPTOR_SIZE (b) != 4)\n-    {\n-      assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n-      pb = GFOR_POINTER_L8_TO_L4 (pb);\n-      bstride <<= 1;\n-    }\n-\n-  while (count--)\n-    {\n-      if (*pa && *pb)\n-        return 1;\n-\n-      pa += astride;\n-      pb += bstride;\n-    }\n-\n-  return 0;\n-}\n-\n-#endif"}]}