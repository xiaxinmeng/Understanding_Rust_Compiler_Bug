{"sha": "febb581c99239fc2aea70aa3647e941604568f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViYjU4MWM5OTIzOWZjMmFlYTcwYWEzNjQ3ZTk0MTYwNDU2OGYwNg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-08-14T08:44:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:44:14Z"}, "message": "s-taprop-linux.adb (Get_Stack_Attributes): New subprogram.\n\n2007-08-14  Olivier Hainque  <hainque@adacore.com>\n\n\t* s-taprop-linux.adb (Get_Stack_Attributes): New subprogram. Fetch the\n\tstack size and initial stack pointer value for a given task.\n\t(Enter_Task): Get the stack attributes of the task we are entering and\n\tlet the stack checking engine know about them.\n\n\t* s-stchop.adb, s-stchop.ads (Notify_Stack_Attributes): New subprogram.\n\tLet the stack-checking engine know about the initial sp value and stack\n\tsize associated with the current task.\n\t(Set_Stack_Info): If a stack base has been notified for the current\n\ttask, honor it. Fallback to the previous less accurate method otherwise.\n\n\t* s-stchop-vxworks.adb (Notify_Stack_Attributes): Dummy body.\n\nFrom-SVN: r127435", "tree": {"sha": "ab952ee805e9aed74a88701e2571302c7e3bcd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab952ee805e9aed74a88701e2571302c7e3bcd3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/febb581c99239fc2aea70aa3647e941604568f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febb581c99239fc2aea70aa3647e941604568f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febb581c99239fc2aea70aa3647e941604568f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febb581c99239fc2aea70aa3647e941604568f06/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2264f2d5402eae62020d5e7556fb1a5ebd28729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2264f2d5402eae62020d5e7556fb1a5ebd28729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2264f2d5402eae62020d5e7556fb1a5ebd28729"}], "stats": {"total": 153, "additions": 146, "deletions": 7}, "files": [{"sha": "8ff103267035dad29a556d29718a1fb79e46e9a2", "filename": "gcc/ada/s-stchop-vxworks.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop-vxworks.adb?ref=febb581c99239fc2aea70aa3647e941604568f06", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,6 +95,24 @@ package body System.Stack_Checking.Operations is\n       Cache := Null_Stack;\n    end Invalidate_Stack_Cache;\n \n+   -----------------------------\n+   -- Notify_Stack_Attributes --\n+   -----------------------------\n+\n+   procedure Notify_Stack_Attributes\n+     (Initial_SP : System.Address;\n+      Size       : System.Storage_Elements.Storage_Offset)\n+   is\n+      --  We retrieve the attributes directly from Set_Stack_Info below, so\n+      --  this implementation has nothing to do.\n+\n+      pragma Unreferenced (Initial_SP);\n+      pragma Unreferenced (Size);\n+\n+   begin\n+      null;\n+   end Notify_Stack_Attributes;\n+\n    --------------------\n    -- Set_Stack_Info --\n    --------------------\n@@ -120,7 +138,7 @@ package body System.Stack_Checking.Operations is\n       Task_Info : aliased OS_Stack_Info;\n \n    begin\n-      --  The order of steps 1 .. 3 is important, see specification.\n+      --  The order of steps 1 .. 3 is important, see specification\n \n       --  1) Get the Stack_Access value for the current task\n "}, {"sha": "aacdad9470825969760eb110b4fa41295c3fc08b", "filename": "gcc/ada/s-stchop.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop.adb?ref=febb581c99239fc2aea70aa3647e941604568f06", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,6 +86,26 @@ package body System.Stack_Checking.Operations is\n       Cache := Null_Stack;\n    end Invalidate_Stack_Cache;\n \n+   -----------------------------\n+   -- Notify_Stack_Attributes --\n+   -----------------------------\n+\n+   procedure Notify_Stack_Attributes\n+     (Initial_SP : System.Address;\n+      Size       : System.Storage_Elements.Storage_Offset)\n+   is\n+      My_Stack : constant Stack_Access := Soft_Links.Get_Stack_Info.all;\n+\n+      --  We piggyback on the 'Limit' field to store what will be used as the\n+      --  'Base' and leave the 'Size' alone to not interfere with the logic in\n+      --  Set_Stack_Info below.\n+\n+      pragma Unreferenced (Size);\n+\n+   begin\n+      My_Stack.Limit := Initial_SP;\n+   end Notify_Stack_Attributes;\n+\n    --------------------\n    -- Set_Stack_Info --\n    --------------------\n@@ -102,7 +122,7 @@ package body System.Stack_Checking.Operations is\n       Limit       : Integer;\n \n    begin\n-      --  The order of steps 1 .. 3 is important, see specification.\n+      --  The order of steps 1 .. 3 is important, see specification\n \n       --  1) Get the Stack_Access value for the current task\n \n@@ -131,7 +151,14 @@ package body System.Stack_Checking.Operations is\n             end if;\n          end if;\n \n-         My_Stack.Base := Frame_Address;\n+         --  If a stack base address has been registered, honor it.\n+         --  Fallback to the address of a local object otherwise.\n+\n+         if My_Stack.Limit /= System.Null_Address then\n+            My_Stack.Base := My_Stack.Limit;\n+         else\n+            My_Stack.Base := Frame_Address;\n+         end if;\n \n          if Stack_Grows_Down then\n "}, {"sha": "9c38fc98cd8b079c3e9e3774c1af1f3c4ae27420", "filename": "gcc/ada/s-stchop.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-stchop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop.ads?ref=febb581c99239fc2aea70aa3647e941604568f06", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,8 @@ pragma Polling (Off);\n --  Turn off polling, we do not want polling to take place during stack\n --  checking operations. It causes infinite loops and other problems.\n \n+with System.Storage_Elements;\n+\n package System.Stack_Checking.Operations is\n    pragma Preelaborate;\n \n@@ -59,6 +61,14 @@ package System.Stack_Checking.Operations is\n    function Stack_Check (Stack_Address : System.Address) return Stack_Access;\n    --  This version of Stack_Check should not be inlined\n \n+   procedure Notify_Stack_Attributes\n+     (Initial_SP : System.Address;\n+      Size       : System.Storage_Elements.Storage_Offset);\n+   --  Register Initial_SP as the initial stack pointer value for the current\n+   --  task when it starts and Size as the associated stack area size. This\n+   --  should be called once, after the soft-links have been initialized and\n+   --  prior to the first \"Stack_Check\" call.\n+\n private\n    Cache : aliased Stack_Access := Null_Stack;\n "}, {"sha": "4f5fe8f0bff15990de16f4afedc3dec05ad4eb31", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb581c99239fc2aea70aa3647e941604568f06/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=febb581c99239fc2aea70aa3647e941604568f06", "patch": "@@ -63,8 +63,9 @@ with System.Soft_Links;\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n+with System.Storage_Elements;\n with System.Stack_Checking.Operations;\n---  Used for Invalidate_Stack_Cache;\n+--  Used for Invalidate_Stack_Cache and Notify_Stack_Attributes;\n \n with Ada.Exceptions;\n --  used for Raise_Exception\n@@ -85,6 +86,7 @@ package body System.Task_Primitives.Operations is\n    use System.OS_Interface;\n    use System.Parameters;\n    use System.OS_Primitives;\n+   use System.Storage_Elements;\n \n    ----------------\n    -- Local Data --\n@@ -175,6 +177,13 @@ package body System.Task_Primitives.Operations is\n    function To_pthread_t is new Ada.Unchecked_Conversion\n      (unsigned_long, System.OS_Interface.pthread_t);\n \n+   procedure Get_Stack_Attributes\n+     (T    : Task_Id;\n+      ISP  : out System.Address;\n+      Size : out Storage_Offset);\n+   --  Fill ISP and Size with the Initial Stack Pointer value and the\n+   --  thread stack size for task T.\n+\n    -------------------\n    -- Abort_Handler --\n    -------------------\n@@ -705,6 +714,50 @@ package body System.Task_Primitives.Operations is\n       return T.Common.Current_Priority;\n    end Get_Priority;\n \n+   --------------------------\n+   -- Get_Stack_Attributes --\n+   --------------------------\n+\n+   procedure Get_Stack_Attributes\n+     (T    : Task_Id;\n+      ISP  : out System.Address;\n+      Size : out Storage_Offset)\n+   is\n+      function pthread_getattr_np\n+        (thread : pthread_t;\n+         attr   : System.Address) return Interfaces.C.int;\n+      pragma Import (C, pthread_getattr_np, \"pthread_getattr_np\");\n+\n+      function pthread_attr_getstack\n+        (attr : System.Address;\n+         base : System.Address;\n+         size : System.Address) return Interfaces.C.int;\n+      pragma Import (C, pthread_attr_getstack, \"pthread_attr_getstack\");\n+\n+      Result : Interfaces.C.int;\n+\n+      Attributes : aliased pthread_attr_t;\n+      Stack_Base : aliased System.Address;\n+      Stack_Size : aliased Storage_Offset;\n+\n+   begin\n+      Result :=\n+        pthread_getattr_np\n+          (T.Common.LL.Thread, Attributes'Address);\n+      pragma Assert (Result = 0);\n+\n+      Result :=\n+        pthread_attr_getstack\n+          (Attributes'Address, Stack_Base'Address, Stack_Size'Address);\n+      pragma Assert (Result = 0);\n+\n+      Result := pthread_attr_destroy (Attributes'Access);\n+      pragma Assert (Result = 0);\n+\n+      ISP  := Stack_Base + Stack_Size;\n+      Size := Stack_Size;\n+   end Get_Stack_Attributes;\n+\n    ----------------\n    -- Enter_Task --\n    ----------------\n@@ -726,6 +779,18 @@ package body System.Task_Primitives.Operations is\n       end loop;\n \n       Unlock_RTS;\n+\n+      --  Determine where the task stack starts, how large it is, and let the\n+      --  stack checking engine know about it.\n+\n+      declare\n+         Initial_SP : System.Address;\n+         Stack_Size : Storage_Offset;\n+      begin\n+         Get_Stack_Attributes (Self_ID, Initial_SP, Stack_Size);\n+         System.Stack_Checking.Operations.Notify_Stack_Attributes\n+           (Initial_SP, Stack_Size);\n+      end;\n    end Enter_Task;\n \n    --------------\n@@ -1141,6 +1206,25 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}]}