{"sha": "551064b16e9a308ebc279316494adc2763e48a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxMDY0YjE2ZTlhMzA4ZWJjMjc5MzE2NDk0YWRjMjc2M2U0OGE1ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T20:24:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T20:24:45Z"}, "message": "(fold): Handle CONJ_EXPR.\n\nFrom-SVN: r4938", "tree": {"sha": "1db7eacc135a8ed0f7727b7b6b08b9cf9c4391eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db7eacc135a8ed0f7727b7b6b08b9cf9c4391eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/551064b16e9a308ebc279316494adc2763e48a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551064b16e9a308ebc279316494adc2763e48a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/551064b16e9a308ebc279316494adc2763e48a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551064b16e9a308ebc279316494adc2763e48a5d/comments", "author": null, "committer": null, "parents": [{"sha": "cba389cdf9bd114a1f28bea0a4ca6b6036fecfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba389cdf9bd114a1f28bea0a4ca6b6036fecfba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba389cdf9bd114a1f28bea0a4ca6b6036fecfba"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "5b9d8511cbe0b7d5aa53ff162334f42fdac8ecbc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551064b16e9a308ebc279316494adc2763e48a5d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551064b16e9a308ebc279316494adc2763e48a5d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=551064b16e9a308ebc279316494adc2763e48a5d", "patch": "@@ -3485,6 +3485,30 @@ fold (expr)\n \treturn build1 (ABS_EXPR, type, TREE_OPERAND (arg0, 0));\n       return t;\n \n+    case CONJ_EXPR:\n+      if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n+\treturn arg0;\n+      else if (TREE_CODE (arg0) == COMPLEX_EXPR)\n+\treturn build (COMPLEX_EXPR, TREE_TYPE (arg0),\n+\t\t      TREE_OPERAND (arg0, 0),\n+\t\t      fold (build1 (NEGATE_EXPR,\n+\t\t\t\t    TREE_TYPE (TREE_TYPE (arg0)),\n+\t\t\t\t    TREE_OPERAND (arg0, 1))));\n+      else if (TREE_CODE (arg0) == COMPLEX_CST)\n+\treturn build_complex (TREE_OPERAND (arg0, 0),\n+\t\t\t      fold (build1 (NEGATE_EXPR,\n+\t\t\t\t\t    TREE_TYPE (TREE_TYPE (arg0)),\n+\t\t\t\t\t    TREE_OPERAND (arg0, 1))));\n+      else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n+\treturn fold (build (TREE_CODE (arg0), type,\n+\t\t\t    fold (build1 (CONJ_EXPR, type,\n+\t\t\t\t\t  TREE_OPERAND (arg0, 0))),\n+\t\t\t    fold (build1 (CONJ_EXPR,\n+\t\t\t\t\t  type, TREE_OPERAND (arg0, 1)))));\n+      else if (TREE_CODE (arg0) == CONJ_EXPR)\n+\treturn TREE_OPERAND (arg0, 0);\n+      return t;\n+\n     case BIT_NOT_EXPR:\n       if (wins)\n \t{"}]}