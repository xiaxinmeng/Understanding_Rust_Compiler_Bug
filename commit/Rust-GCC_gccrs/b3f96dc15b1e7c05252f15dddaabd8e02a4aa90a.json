{"sha": "b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmOTZkYzE1YjFlN2MwNTI1MmYxNWRkZGFhYmQ4ZTAyYTRhYTkwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T07:33:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T07:33:43Z"}, "message": "[multiple changes]\n\n2012-08-06  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body):\n\tUse of Known_Static_Esize instead of  Known_Esize and\n\tKnown_Static_RM_Size instead of Known_RM_Size in order to\n\tproperly call UI_To_Int. Don't check the size of the component\n\ttype in case of generic.\n\t* sem_ch9.adb (Allows_Lock_Free_Implementation):\n\tUse of Known_Static_Esize instead of Known_Esize and\n\tKnown_Static_RM_Size instead of Known_RM_Size in order to properly\n\tcall UI_To_Int. Don't check the size of the component type in\n\tcase of generic.\n\n2012-08-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Discrete_Range_Cond): Do not try to optimize on\n\tthe assumption that the type of an expression can always fit in\n\tthe target type of a conversion.\n\nFrom-SVN: r190156", "tree": {"sha": "788eee846b0d18dfe72c81fb18eb266c6f5fc50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/788eee846b0d18dfe72c81fb18eb266c6f5fc50e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/comments", "author": null, "committer": null, "parents": [{"sha": "d188799da66cba1ab66fb562c66b1dc4e4ab1a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d188799da66cba1ab66fb562c66b1dc4e4ab1a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d188799da66cba1ab66fb562c66b1dc4e4ab1a68"}], "stats": {"total": 140, "additions": 73, "deletions": 67}, "files": [{"sha": "f0336329a73696c5c79df9ddc322ecdbc4254892", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "patch": "@@ -1,3 +1,22 @@\n+2012-08-06  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body):\n+\tUse of Known_Static_Esize instead of  Known_Esize and\n+\tKnown_Static_RM_Size instead of Known_RM_Size in order to\n+\tproperly call UI_To_Int. Don't check the size of the component\n+\ttype in case of generic.\n+\t* sem_ch9.adb (Allows_Lock_Free_Implementation):\n+\tUse of Known_Static_Esize instead of Known_Esize and\n+\tKnown_Static_RM_Size instead of Known_RM_Size in order to properly\n+\tcall UI_To_Int. Don't check the size of the component type in\n+\tcase of generic.\n+\n+2012-08-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Discrete_Range_Cond): Do not try to optimize on\n+\tthe assumption that the type of an expression can always fit in\n+\tthe target type of a conversion.\n+\n 2012-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* bindusg.adb: Clarify file in -A lines."}, {"sha": "58cddfb67cd3203907da4b2eb88a18f1d8f768e4", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "patch": "@@ -6660,12 +6660,6 @@ package body Checks is\n             LB := New_Occurrence_Of (Discriminal (Entity (LB)), Loc);\n          end if;\n \n-         if Nkind (HB) = N_Identifier\n-           and then Ekind (Entity (HB)) = E_Discriminant\n-         then\n-            HB := New_Occurrence_Of (Discriminal (Entity (HB)), Loc);\n-         end if;\n-\n          Left_Opnd :=\n            Make_Op_Lt (Loc,\n              Left_Opnd  =>\n@@ -6677,28 +6671,10 @@ package body Checks is\n                  (Base_Type (Typ),\n                   Get_E_First_Or_Last (Loc, Typ, 0, Name_First)));\n \n-         if Base_Type (Typ) = Typ then\n-            return Left_Opnd;\n-\n-         elsif Compile_Time_Known_Value (High_Bound (Scalar_Range (Typ)))\n-            and then\n-               Compile_Time_Known_Value (High_Bound (Scalar_Range\n-                                                     (Base_Type (Typ))))\n+         if Nkind (HB) = N_Identifier\n+           and then Ekind (Entity (HB)) = E_Discriminant\n          then\n-            if Is_Floating_Point_Type (Typ) then\n-               if Expr_Value_R (High_Bound (Scalar_Range (Typ))) =\n-                  Expr_Value_R (High_Bound (Scalar_Range (Base_Type (Typ))))\n-               then\n-                  return Left_Opnd;\n-               end if;\n-\n-            else\n-               if Expr_Value (High_Bound (Scalar_Range (Typ))) =\n-                  Expr_Value (High_Bound (Scalar_Range (Base_Type (Typ))))\n-               then\n-                  return Left_Opnd;\n-               end if;\n-            end if;\n+            HB := New_Occurrence_Of (Discriminal (Entity (HB)), Loc);\n          end if;\n \n          Right_Opnd :="}, {"sha": "248984d89a94a7d94ec3ff460b27486663de77fe", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "patch": "@@ -3260,14 +3260,14 @@ package body Exp_Ch9 is\n          begin\n             --  Get the type size\n \n-            if Known_Esize (Comp_Type) then\n+            if Known_Static_Esize (Comp_Type) then\n                Typ_Size := UI_To_Int (Esize (Comp_Type));\n \n             --  If the Esize (Object_Size) is unknown at compile-time, look at\n             --  the RM_Size (Value_Size) since it may have been set by an\n             --  explicit representation clause.\n \n-            elsif Known_RM_Size (Comp_Type) then\n+            elsif Known_Static_RM_Size (Comp_Type) then\n                Typ_Size := UI_To_Int (RM_Size (Comp_Type));\n \n             --  Should not happen since this has already been checked in"}, {"sha": "1b34c03bc86066e9f2a183511e61dc70af532ba3", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 49, "deletions": 38, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=b3f96dc15b1e7c05252f15dddaabd8e02a4aa90a", "patch": "@@ -528,15 +528,17 @@ package body Sem_Ch9 is\n \n                         return Abandon;\n \n-                     --  Quantified expression restricted\n+                     --  Quantified expression restricted. Note that we have\n+                     --  to check the original node as well, since at this\n+                     --  stage, it may have been rewritten.\n \n                      elsif Kind = N_Quantified_Expression\n-                       or else Nkind (Original_Node (N)) =\n-                                 N_Quantified_Expression\n+                       or else\n+                         Nkind (Original_Node (N)) = N_Quantified_Expression\n                      then\n                         if Lock_Free_Given then\n-                           Error_Msg_N (\"quantified expression not allowed\",\n-                                        N);\n+                           Error_Msg_N\n+                             (\"quantified expression not allowed\", N);\n                            return Skip;\n                         end if;\n \n@@ -576,45 +578,54 @@ package body Sem_Ch9 is\n                              and then Is_List_Member (Comp_Decl)\n                              and then List_Containing (Comp_Decl) = Priv_Decls\n                            then\n-                              --  Make sure the protected component type has\n-                              --  size and alignment fields set at this point\n-                              --  whenever this is possible.\n+                              --  Skip generic types since, in that case, we\n+                              --  will not build a body anyway (in the generic\n+                              --  template), and the size in the template may\n+                              --  have a fake value.\n \n-                              Layout_Type (Comp_Type);\n+                              if not Is_Generic_Type (Comp_Type) then\n \n-                              --  Note that Known_Esize is used and not\n-                              --  Known_Static_Esize in order to capture the\n-                              --  errors properly at the instantiation point.\n+                                 --  Make sure the protected component type has\n+                                 --  size and alignment fields set at this\n+                                 --  point whenever this is possible.\n \n-                              if Known_Esize (Comp_Type) then\n-                                 Comp_Size := UI_To_Int (Esize (Comp_Type));\n+                                 Layout_Type (Comp_Type);\n \n-                              --  If the Esize (Object_Size) is unknown at\n-                              --  compile-time, look at the RM_Size\n-                              --  (Value_Size) since it may have been set by an\n-                              --  explicit representation clause.\n+                                 if Known_Static_Esize (Comp_Type) then\n+                                    Comp_Size := UI_To_Int (Esize (Comp_Type));\n \n-                              elsif Known_RM_Size (Comp_Type) then\n-                                 Comp_Size := UI_To_Int (RM_Size (Comp_Type));\n-                              end if;\n+                                 --  If the Esize (Object_Size) is unknown at\n+                                 --  compile-time, look at the RM_Size\n+                                 --  (Value_Size) since it may have been set by\n+                                 --  an explicit representation clause.\n+\n+                                 elsif Known_Static_RM_Size (Comp_Type) then\n+                                    Comp_Size :=\n+                                      UI_To_Int (RM_Size (Comp_Type));\n \n-                              --  Check that the size of the component is 8,\n-                              --  16, 32 or 64 bits.\n-\n-                              case Comp_Size is\n-                                 when 8 | 16 | 32 | 64 =>\n-                                    null;\n-                                 when others           =>\n-                                    if Lock_Free_Given then\n-                                       Error_Msg_NE\n-                                         (\"type of& must support atomic \" &\n-                                          \"operations\",\n-                                          N, Comp_Id);\n-                                       return Skip;\n-                                    end if;\n-\n-                                    return Abandon;\n-                              end case;\n+                                    --  Worrisome missing else raise PE???\n+                                 end if;\n+\n+                                 --  Check that the size of the component is 8,\n+                                 --  16, 32 or 64 bits.\n+\n+                                 --  What about AAMP here???\n+\n+                                 case Comp_Size is\n+                                    when 8 | 16 | 32 | 64 =>\n+                                       null;\n+                                    when others           =>\n+                                       if Lock_Free_Given then\n+                                          Error_Msg_NE\n+                                            (\"type of& must support atomic \" &\n+                                             \"operations\",\n+                                             N, Comp_Id);\n+                                          return Skip;\n+                                       end if;\n+\n+                                       return Abandon;\n+                                 end case;\n+                              end if;\n \n                               --  Check if another protected component has\n                               --  already been accessed by the subprogram body."}]}