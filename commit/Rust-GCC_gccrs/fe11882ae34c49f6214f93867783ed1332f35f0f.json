{"sha": "fe11882ae34c49f6214f93867783ed1332f35f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxMTg4MmFlMzRjNDlmNjIxNGY5Mzg2Nzc4M2VkMTMzMmYzNWYwZg==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-04-21T13:42:04Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-04-21T13:42:04Z"}, "message": "aarch64: Avoid duplicating bti j insns for jump tables [PR99988]\n\nThis patch fixes PR99988 which shows us generating large (> 250)\nsequences of back-to-back bti j instructions.\n\nThe fix is simply to avoid inserting bti j instructions at the target of\na jump table if we've already inserted one for a given label.\n\ngcc/ChangeLog:\n\n\tPR target/99988\n\t* config/aarch64/aarch64-bti-insert.c (aarch64_bti_j_insn_p): New.\n\t(rest_of_insert_bti): Avoid inserting duplicate bti j insns for\n\tjump table targets.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99988\n\t* gcc.target/aarch64/pr99988.c: New test.", "tree": {"sha": "390ceccf7db5838289ee1563448e33fc022f5a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390ceccf7db5838289ee1563448e33fc022f5a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe11882ae34c49f6214f93867783ed1332f35f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11882ae34c49f6214f93867783ed1332f35f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe11882ae34c49f6214f93867783ed1332f35f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11882ae34c49f6214f93867783ed1332f35f0f/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4bf1dd4398dc65d8fff8b9f5c67733729cee95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4bf1dd4398dc65d8fff8b9f5c67733729cee95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4bf1dd4398dc65d8fff8b9f5c67733729cee95"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "5d6bc169d6bb0cb743cd75209bfcdbfe9d77d932", "filename": "gcc/config/aarch64/aarch64-bti-insert.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe11882ae34c49f6214f93867783ed1332f35f0f/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe11882ae34c49f6214f93867783ed1332f35f0f/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c?ref=fe11882ae34c49f6214f93867783ed1332f35f0f", "patch": "@@ -120,6 +120,17 @@ aarch64_pac_insn_p (rtx x)\n   return false;\n }\n \n+/* Check if INSN is a BTI J insn.  */\n+static bool\n+aarch64_bti_j_insn_p (rtx_insn *insn)\n+{\n+  if (!insn || !INSN_P (insn))\n+    return false;\n+\n+  rtx pat = PATTERN (insn);\n+  return GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == UNSPECV_BTI_J;\n+}\n+\n /* Insert the BTI instruction.  */\n /* This is implemented as a late RTL pass that runs before branch\n    shortening and does the following.  */\n@@ -165,6 +176,10 @@ rest_of_insert_bti (void)\n \t\t  for (j = GET_NUM_ELEM (vec) - 1; j >= 0; --j)\n \t\t    {\n \t\t      label = as_a <rtx_insn *> (XEXP (RTVEC_ELT (vec, j), 0));\n+\t\t      rtx_insn *next = next_nonnote_nondebug_insn (label);\n+\t\t      if (aarch64_bti_j_insn_p (next))\n+\t\t\tcontinue;\n+\n \t\t      bti_insn = gen_bti_j ();\n \t\t      emit_insn_after (bti_insn, label);\n \t\t    }"}, {"sha": "2d87f41a7174799e6e759946ef2a46d280533359", "filename": "gcc/testsuite/gcc.target/aarch64/pr99988.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe11882ae34c49f6214f93867783ed1332f35f0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99988.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe11882ae34c49f6214f93867783ed1332f35f0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99988.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99988.c?ref=fe11882ae34c49f6214f93867783ed1332f35f0f", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbranch-protection=standard\" } */\n+/* { dg-final { scan-assembler-times {bti j} 13 } } */\n+int a;\n+int c();\n+int d();\n+int e();\n+int f();\n+int g();\n+void h() {\n+  switch (a) {\n+  case 0:\n+  case 56:\n+  case 57:\n+    break;\n+  case 58:\n+  case 59:\n+  case 61:\n+  case 62:\n+    c();\n+  case 64:\n+  case 63:\n+    d();\n+  case 66:\n+  case 65:\n+    d();\n+  case 68:\n+  case 67:\n+    d();\n+  case 69:\n+  case 70:\n+    d();\n+  case 71:\n+  case 72:\n+  case 88:\n+  case 87:\n+    d();\n+  case 90:\n+  case 89:\n+    d();\n+  case 92:\n+  case 1:\n+    d();\n+  case 93:\n+  case 73:\n+  case 4:\n+    e();\n+  case 76:\n+  case 5:\n+    f();\n+  case 7:\n+  case 8:\n+  case 84:\n+  case 85:\n+    break;\n+  case 6:\n+  case 299:\n+  case 9:\n+  case 80:\n+  case 2:\n+  case 3:\n+    e();\n+  default:\n+    g();\n+  }\n+}"}]}