{"sha": "e675f62571a8c234341b972a5edcd051a25d8367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3NWY2MjU3MWE4YzIzNDM0MWI5NzJhNWVkY2QwNTFhMjVkODM2Nw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-07-21T12:56:31Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-07-21T12:56:31Z"}, "message": "rs6000.h (PREDICATE_CODES): Add CONSTANT_P_RTX.\n\n        * rs6000.h (PREDICATE_CODES): Add CONSTANT_P_RTX.\n        * rs6000.md (movsi, movdi): Add CONSTANT_P_RTX.\n        * rs6000.c (short_cint_operand): Add CONSTANT_P_RTX.\n        (u_short_cint_operand): Same.\n        (reg_or_cint_operand): Same.\n        (logical_operand): Same.\n        (input_operand): Same.\n        (reg_or_short_operand): Use u_short_cint_operand.\n\nFrom-SVN: r21323", "tree": {"sha": "c5915ccf70b67da70cbba5044ea245ea102592c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5915ccf70b67da70cbba5044ea245ea102592c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e675f62571a8c234341b972a5edcd051a25d8367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e675f62571a8c234341b972a5edcd051a25d8367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e675f62571a8c234341b972a5edcd051a25d8367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e675f62571a8c234341b972a5edcd051a25d8367/comments", "author": null, "committer": null, "parents": [{"sha": "1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca2e73f35722fd6546bcb1e89a1d716d3d2c905"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "2cc234504217edcb3d77180f22395fc1402dbf91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e675f62571a8c234341b972a5edcd051a25d8367", "patch": "@@ -1,3 +1,14 @@\n+Tue Jul 21 15:49:31 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.h (PREDICATE_CODES): Add CONSTANT_P_RTX.\n+\t* rs6000.md (movsi, movdi): Add CONSTANT_P_RTX.\n+\t* rs6000.c (short_cint_operand): Add CONSTANT_P_RTX.\n+\t(u_short_cint_operand): Same.\n+\t(reg_or_cint_operand): Same.\n+\t(logical_operand): Same.\n+\t(input_operand): Same.\n+\t(reg_or_short_operand): Use u_short_cint_operand.\n+\n Tue Jul 21 08:56:42 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (fix_truncdfsi2, fix_truncsfsi2): Remove the define_expands,"}, {"sha": "98a223762bc90e52aee933f86e37633ecc04e3b2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e675f62571a8c234341b972a5edcd051a25d8367", "patch": "@@ -473,8 +473,9 @@ short_cint_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (op) == CONST_INT\n-\t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000);\n+  return ((GET_CODE (op) == CONST_INT\n+\t   && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000)\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n }\n \n /* Similar for a unsigned D field.  */\n@@ -484,8 +485,9 @@ u_short_cint_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (op) == CONST_INT\n-\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0);\n+  return ((GET_CODE (op) == CONST_INT\n+\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0)\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n }\n \n /* Return 1 if OP is a CONST_INT that cannot fit in a signed D field.  */\n@@ -561,11 +563,7 @@ reg_or_u_short_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  if (GET_CODE (op) == CONST_INT\n-      && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0)\n-    return 1;\n-\n-  return gpc_reg_operand (op, mode);\n+  return u_short_cint_operand (op, mode) || gpc_reg_operand (op, mode);\n }\n \n /* Return 1 is the operand is either a non-special register or ANY\n@@ -576,7 +574,9 @@ reg_or_cint_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-     return GET_CODE (op) == CONST_INT || gpc_reg_operand (op, mode);\n+     return (GET_CODE (op) == CONST_INT\n+\t     || GET_CODE (op) == CONSTANT_P_RTX\n+\t     || gpc_reg_operand (op, mode));\n }\n \n /* Return 1 if the operand is an operand that can be loaded via the GOT */\n@@ -860,7 +860,8 @@ logical_operand (op, mode)\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n \t      && ((INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0\n-\t\t  || (INTVAL (op) & 0xffff) == 0)));\n+\t\t  || (INTVAL (op) & 0xffff) == 0))\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -1094,7 +1095,9 @@ input_operand (op, mode)\n \n   /* Allow any integer constant.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n-      && (GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE))\n+      && (GET_CODE (op) == CONST_INT\n+\t  || GET_CODE (op) == CONSTANT_P_RTX\n+\t  || GET_CODE (op) == CONST_DOUBLE))\n     return 1;\n \n   /* For floating-point or multi-word mode, the only remaining valid type"}, {"sha": "3155a4ec6df19cb74bd4e582f41e7a7f1029d985", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e675f62571a8c234341b972a5edcd051a25d8367", "patch": "@@ -3109,15 +3109,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define the codes that are matched by predicates in rs6000.c.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\\\n-  {\"short_cint_operand\", {CONST_INT}},\t\t\t\t\\\n-  {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\\\n+  {\"short_cint_operand\", {CONST_INT, CONSTANT_P_RTX}},\t\t\\\n+  {\"u_short_cint_operand\", {CONST_INT, CONSTANT_P_RTX}},\t\\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"gpc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"cc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n+  {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"reg_or_u_short_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n-  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n+  {\"reg_or_u_short_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n   {\"got_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n   {\"got_no_const_operand\", {SYMBOL_REF, LABEL_REF}},\t\t\\\n   {\"easy_fp_constant\", {CONST_DOUBLE}},\t\t\t\t\\\n@@ -3126,19 +3126,21 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"volatile_mem_operand\", {MEM}},\t\t\t\t\\\n   {\"offsettable_addr_operand\", {REG, SUBREG, PLUS}},\t\t\\\n   {\"mem_or_easy_const_operand\", {SUBREG, MEM, CONST_DOUBLE}},\t\\\n-  {\"add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n   {\"non_add_cint_operand\", {CONST_INT}},\t\t\t\\\n-  {\"and_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n-  {\"and64_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE}},\t\\\n-  {\"logical_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n+  {\"and_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"and64_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX,\t\\\n+\t\t     CONST_DOUBLE}},\t\t\t\t\\\n+  {\"logical_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n   {\"non_logical_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"mask_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"mask64_operand\", {CONST_INT, CONST_DOUBLE}},\t\t\\\n   {\"count_register_operand\", {REG}},\t\t\t\t\\\n   {\"fpmem_operand\", {REG}},\t\t\t\t\t\\\n   {\"call_operand\", {SYMBOL_REF, REG}},\t\t\t\t\\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\\\n-  {\"input_operand\", {SUBREG, MEM, REG, CONST_INT, CONST_DOUBLE, SYMBOL_REF}}, \\\n+  {\"input_operand\", {SUBREG, MEM, REG, CONST_INT, CONSTANT_P_RTX, \\\n+\t\t     CONST_DOUBLE, SYMBOL_REF}}, \t\t\\\n   {\"load_multiple_operation\", {PARALLEL}},\t\t\t\\\n   {\"store_multiple_operation\", {PARALLEL}},\t\t\t\\\n   {\"branch_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\"}, {"sha": "5c3cda50a5065f09da441aa31e0171add724a246", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e675f62571a8c234341b972a5edcd051a25d8367/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e675f62571a8c234341b972a5edcd051a25d8367", "patch": "@@ -5415,7 +5415,8 @@\n       && !flag_pic\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != HIGH\n-      && GET_CODE (operands[1]) != CONST_INT)\n+      && GET_CODE (operands[1]) != CONST_INT\n+      && GET_CODE (operands[1]) != CONSTANT_P_RTX)\n     {\n       rtx target = (reload_completed || reload_in_progress)\n \t\t\t? operands[0] : gen_reg_rtx (SImode);\n@@ -5469,6 +5470,7 @@\n   if ((!TARGET_WINDOWS_NT || DEFAULT_ABI != ABI_NT)\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != CONST_INT\n+      && GET_CODE (operands[1]) != CONSTANT_P_RTX\n       && GET_CODE (operands[1]) != HIGH\n       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1]))\n     {\n@@ -6091,6 +6093,7 @@\n       && CONSTANT_P (operands[1])\n #if HOST_BITS_PER_WIDE_INT == 32\n       && GET_CODE (operands[1]) != CONST_INT\n+      && GET_CODE (operands[1]) != CONSTANT_P_RTX\n #endif\n       && ! easy_fp_constant (operands[1], DImode)\n       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1]))"}]}