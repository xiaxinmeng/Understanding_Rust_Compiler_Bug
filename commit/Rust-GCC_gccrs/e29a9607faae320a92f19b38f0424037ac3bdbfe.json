{"sha": "e29a9607faae320a92f19b38f0424037ac3bdbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5YTk2MDdmYWFlMzIwYTkyZjE5YjM4ZjA0MjQwMzdhYzNiZGJmZQ==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-09-07T18:17:55Z"}, "committer": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-09-07T18:17:55Z"}, "message": "bpf: Add new -mco-re option for BPF CO-RE\n\n-mco-re in the BPF backend enables code generation for the CO-RE usecase. LTO is\ndisabled for CO-RE compilations.\n\ngcc/ChangeLog:\n\n\t* config/bpf/bpf.c (bpf_option_override): For BPF backend, disable LTO\n\tsupport when compiling for CO-RE.\n\t* config/bpf/bpf.opt: Add new command line option -mco-re.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/bpf/core-lto-1.c: New test.", "tree": {"sha": "3e4433186b815b1871bd32d72dc1de30052f549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e4433186b815b1871bd32d72dc1de30052f549a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29a9607faae320a92f19b38f0424037ac3bdbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a9607faae320a92f19b38f0424037ac3bdbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29a9607faae320a92f19b38f0424037ac3bdbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a9607faae320a92f19b38f0424037ac3bdbfe/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053db9a49b00d422cd735bee4c0939b7ff07c40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053db9a49b00d422cd735bee4c0939b7ff07c40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053db9a49b00d422cd735bee4c0939b7ff07c40e"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7228978a3a95a2a297b18bf9e358e53560a7de6e", "filename": "gcc/config/bpf/bpf.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=e29a9607faae320a92f19b38f0424037ac3bdbfe", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"predict.h\"\n #include \"langhooks.h\"\n+#include \"flags.h\"\n \n /* Per-function machine data.  */\n struct GTY(()) machine_function\n@@ -158,6 +159,30 @@ bpf_option_override (void)\n {\n   /* Set the initializer for the per-function status structure.  */\n   init_machine_status = bpf_init_machine_status;\n+\n+  /* BPF CO-RE support requires BTF debug info generation.  */\n+  if (TARGET_BPF_CORE && !btf_debuginfo_p ())\n+    error (\"BPF CO-RE requires BTF debugging information, use %<-gbtf%>\");\n+\n+  /* To support the portability needs of BPF CO-RE approach, BTF debug\n+     information includes the BPF CO-RE relocations.  */\n+  if (TARGET_BPF_CORE)\n+    write_symbols |= BTF_WITH_CORE_DEBUG;\n+\n+  /* Unlike much of the other BTF debug information, the information necessary\n+     for CO-RE relocations is added to the CTF container by the BPF backend.\n+     Enabling LTO adds some complications in the generation of the BPF CO-RE\n+     relocations because if LTO is in effect, the relocations need to be\n+     generated late in the LTO link phase.  This poses a new challenge for the\n+     compiler to now provide means to combine the early BTF and late BTF CO-RE\n+     debug info, similar to DWARF debug info.  BTF/CO-RE debug info is not\n+     amenable to such a split generation and a later merging.\n+\n+     In any case, in absence of linker support for BTF sections at this time,\n+     it is acceptable to simply disallow LTO for BPF CO-RE compilations.  */\n+\n+  if (flag_lto && TARGET_BPF_CORE)\n+    sorry (\"BPF CO-RE does not support LTO\");\n }\n \n #undef TARGET_OPTION_OVERRIDE"}, {"sha": "4493067b987dc4372da8f2296b860fb2529d87d0", "filename": "gcc/config/bpf/bpf.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.opt?ref=e29a9607faae320a92f19b38f0424037ac3bdbfe", "patch": "@@ -127,3 +127,7 @@ Generate little-endian eBPF.\n mframe-limit=\n Target Joined RejectNegative UInteger IntegerRange(0, 32767) Var(bpf_frame_limit) Init(512)\n Set a hard limit for the size of each stack frame, in bytes.\n+\n+mco-re\n+Target Mask(BPF_CORE)\n+Generate all necessary information for BPF Compile Once - Run Everywhere."}, {"sha": "927de23671b57043481c1d22b0fb6b8d43830cf5", "filename": "gcc/testsuite/gcc.target/bpf/core-lto-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-lto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29a9607faae320a92f19b38f0424037ac3bdbfe/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-lto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-lto-1.c?ref=e29a9607faae320a92f19b38f0424037ac3bdbfe", "patch": "@@ -0,0 +1,9 @@\n+/* Test -mco-re with -flto.\n+  \n+   -mco-re is used to generate information for BPF CO-RE usecase. To support\n+   the generataion of the .BTF and .BTF.ext sections in GCC, -flto is disabled\n+   with -mco-re.  */\n+\n+/* { dg-do compile } */\n+/* { dg-message \"sorry, unimplemented: BPF CO-RE does not support LTO\" \"\" { target bpf-*-* } 0 } */\n+/* { dg-options \"-gbtf -mco-re -flto\" } */"}]}