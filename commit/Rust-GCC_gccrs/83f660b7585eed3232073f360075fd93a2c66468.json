{"sha": "83f660b7585eed3232073f360075fd93a2c66468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmNjYwYjc1ODVlZWQzMjMyMDczZjM2MDA3NWZkOTNhMmM2NjQ2OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-24T21:28:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-24T21:28:47Z"}, "message": "lex.c (handle_generic_pragma): Use token_buffer.\n\n\t* lex.c (handle_generic_pragma): Use token_buffer.\n\t* decl.c (check_tag_decl): Don't complain about null friend decl.\n\t* Make-lang.in (DEMANGLER_PROG): Move the output argumnts to the\n\tfirst position.\n\t* lex.c (check_newline): Use ISALPHA.\n\t(readescape): Use ISGRAPH.\n\t(yyerror): Use ISGRAPH.\n\t* search.c (get_abstract_virtuals): Do not use initial\n\tCLASSTYPE_ABSTRACT_VIRTUALS.\n\t* typeck2.c (abstract_virtuals_error): Show location of abstract\n\tdeclaration.\n\t* call.c (build_new_method_call): Use\n\tCLASSTYPE_ABSTRACT_VIRTUAL, rather than recalculate.\n\t* class.c (finish_struct_bits): Don't bother working out whether\n\tget_abstract_virtuals will do anything, just do it.\n\nFrom-SVN: r23836", "tree": {"sha": "c671d8df7a926ea7b362061650f0986fd82b4193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c671d8df7a926ea7b362061650f0986fd82b4193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f660b7585eed3232073f360075fd93a2c66468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f660b7585eed3232073f360075fd93a2c66468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f660b7585eed3232073f360075fd93a2c66468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f660b7585eed3232073f360075fd93a2c66468/comments", "author": null, "committer": null, "parents": [{"sha": "d1be3be36793cb20f6f2df953a9e795f6da2953e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1be3be36793cb20f6f2df953a9e795f6da2953e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1be3be36793cb20f6f2df953a9e795f6da2953e"}], "stats": {"total": 141, "additions": 76, "deletions": 65}, "files": [{"sha": "8a8c1696e5bf6f5104d92b4382f8bd72105b6544", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -1,3 +1,28 @@\n+1998-11-24  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (handle_generic_pragma): Use token_buffer.\n+\n+\t* decl.c (check_tag_decl): Don't complain about null friend decl.\n+\n+1998-11-24  Dave Pitts  <dpitts@cozx.com>\n+\n+\t* Make-lang.in (DEMANGLER_PROG): Move the output argumnts to the \n+\tfirst position.\n+\t* lex.c (check_newline): Use ISALPHA.\n+\t(readescape): Use ISGRAPH.\n+\t(yyerror): Use ISGRAPH.\n+\n+1998-11-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* search.c (get_abstract_virtuals): Do not use initial\n+\tCLASSTYPE_ABSTRACT_VIRTUALS.\n+\t* typeck2.c (abstract_virtuals_error): Show location of abstract\n+\tdeclaration.\n+\t* call.c (build_new_method_call): Use\n+\tCLASSTYPE_ABSTRACT_VIRTUAL, rather than recalculate.\n+\t* class.c (finish_struct_bits): Don't bother working out whether\n+\tget_abstract_virtuals will do anything, just do it.\n+\n 1998-11-24  Graham <grahams@rcp.co.uk>\n \n \t* typeck.c (build_component_ref): Remove unused statement."}, {"sha": "47b32d29599936c8fe93b2736df0e9dcd2595da7", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -109,8 +109,9 @@ cxxmain.o: $(srcdir)/../libiberty/cplus-dem.c demangle.h\n \t$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DVERSION=\\\"$(version)\\\" cxxmain.c\n \n+# Apparently OpenVM needs the -o to be at the beginning of the link line.\n $(DEMANGLER_PROG): cxxmain.o underscore.o getopt.o getopt1.o $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t$(CC) -o $@ $(ALL_CFLAGS) $(LDFLAGS) \\\n \t  cxxmain.o underscore.o getopt.o getopt1.o $(LIBS)\n \n CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \\"}, {"sha": "ef636e80210204e213683e0190dbabb695c7af73", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -3671,7 +3671,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       && instance == current_class_ref\n       && DECL_CONSTRUCTOR_P (current_function_decl)\n       && ! (flags & LOOKUP_NONVIRTUAL)\n-      && value_member (cand->fn, get_abstract_virtuals (basetype)))\n+      && value_member (cand->fn, CLASSTYPE_ABSTRACT_VIRTUALS (basetype)))\n     cp_error (\"abstract virtual `%#D' called from constructor\", cand->fn);\n   if (TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE\n       && is_dummy_object (instance_ptr))"}, {"sha": "a2e824478e812c39707c90c862ef77009cecff38", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -1964,24 +1964,15 @@ finish_struct_bits (t, max_has_virtual)\n \n   if (n_baseclasses && max_has_virtual)\n     {\n-      /* Done by `finish_struct' for classes without baseclasses.  */\n-      int might_have_abstract_virtuals = CLASSTYPE_ABSTRACT_VIRTUALS (t) != 0;\n-      tree binfos = TYPE_BINFO_BASETYPES (t);\n-      for (i = n_baseclasses-1; i >= 0; i--)\n-\t{\n-\t  might_have_abstract_virtuals\n-\t    |= (CLASSTYPE_ABSTRACT_VIRTUALS (BINFO_TYPE (TREE_VEC_ELT (binfos, i))) != 0);\n-\t  if (might_have_abstract_virtuals)\n-\t    break;\n-\t}\n-      if (might_have_abstract_virtuals)\n-\t{\n-\t  /* We use error_mark_node from override_one_vtable to signal\n-\t     an artificial abstract.  */\n-\t  if (CLASSTYPE_ABSTRACT_VIRTUALS (t) == error_mark_node)\n-\t    CLASSTYPE_ABSTRACT_VIRTUALS (t) = NULL_TREE;\n-\t  CLASSTYPE_ABSTRACT_VIRTUALS (t) = get_abstract_virtuals (t);\n-\t}\n+      /* for a class w/o baseclasses, `finish_struct' has set\n+       * CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by definition). Similarly\n+       * for a class who's base classes do not have vtables. When neither of\n+       * these is true, we might have removed abstract virtuals (by\n+       * providing a definition), added some (by declaring new ones), or\n+       * redeclared ones from a base class. We need to recalculate what's\n+       * really an abstract virtual at this point (by looking in the vtables).\n+       */\n+      CLASSTYPE_ABSTRACT_VIRTUALS (t) = get_abstract_virtuals (t);\n     }\n \n   if (n_baseclasses)"}, {"sha": "b21a7a9015627b9af8b30bfd06fe57a5798fb943", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -6462,6 +6462,7 @@ check_tag_decl (declspecs)\n      tree declspecs;\n {\n   int found_type = 0;\n+  int friendp = 0;\n   tree ob_modifier = NULL_TREE;\n   register tree link;\n   register tree t = NULL_TREE;\n@@ -6480,15 +6481,19 @@ check_tag_decl (declspecs)\n \t      t = value;\n \t    }\n \t}\n+      else if (value == ridpointers[(int) RID_FRIEND])\n+\t{\n+\t  friendp = 1;\n+\t  if (current_class_type == NULL_TREE\n+\t      || current_scope () != current_class_type)\n+\t    ob_modifier = value;\n+\t}\n       else if (value == ridpointers[(int) RID_STATIC]\n \t       || value == ridpointers[(int) RID_EXTERN]\n \t       || value == ridpointers[(int) RID_AUTO]\n \t       || value == ridpointers[(int) RID_REGISTER]\n \t       || value == ridpointers[(int) RID_INLINE]\n \t       || value == ridpointers[(int) RID_VIRTUAL]\n-\t       || (value == ridpointers[(int) RID_FRIEND]\n-\t\t   && (current_class_type == NULL_TREE\n-\t\t       || current_scope () != current_class_type))\n \t       || value == ridpointers[(int) RID_CONST]\n \t       || value == ridpointers[(int) RID_VOLATILE]\n \t       || value == ridpointers[(int) RID_EXPLICIT])\n@@ -6499,28 +6504,25 @@ check_tag_decl (declspecs)\n     error (\"multiple types in one declaration\");\n     \n   if (t == NULL_TREE)\n-    pedwarn (\"declaration does not declare anything\");\n-  else if (ANON_UNION_TYPE_P (t))\n-    return t;\n-  else\n     {\n-      /* Anonymous unions are objects, that's why we only check for\n-\t inappropriate specifiers in this branch.  */\n-\n-      if (ob_modifier)\n-\t{\n-\t  if (ob_modifier == ridpointers[(int) RID_INLINE]\n-\t      || ob_modifier == ridpointers[(int) RID_VIRTUAL])\n-\t    cp_error (\"`%D' can only be specified for functions\", ob_modifier);\n-\t  else if (ob_modifier == ridpointers[(int) RID_FRIEND])\n-\t    cp_error (\"`%D' can only be specified inside a class\", ob_modifier);\n-\t  else if (ob_modifier == ridpointers[(int) RID_EXPLICIT])\n-\t    cp_error (\"`%D' can only be specified for constructors\",\n-\t\t      ob_modifier);\n-\t  else\n-\t    cp_error (\"`%D' can only be specified for objects and functions\",\n-\t\t      ob_modifier);\n-\t}\n+      if (! friendp)\n+\tpedwarn (\"declaration does not declare anything\");\n+    }\n+  else if (ANON_UNION_TYPE_P (t))\n+    /* Anonymous unions are objects, so they can have specifiers.  */;\n+  else if (ob_modifier)\n+    {\n+      if (ob_modifier == ridpointers[(int) RID_INLINE]\n+\t  || ob_modifier == ridpointers[(int) RID_VIRTUAL])\n+\tcp_error (\"`%D' can only be specified for functions\", ob_modifier);\n+      else if (ob_modifier == ridpointers[(int) RID_FRIEND])\n+\tcp_error (\"`%D' can only be specified inside a class\", ob_modifier);\n+      else if (ob_modifier == ridpointers[(int) RID_EXPLICIT])\n+\tcp_error (\"`%D' can only be specified for constructors\",\n+\t\t  ob_modifier);\n+      else\n+\tcp_error (\"`%D' can only be specified for objects and functions\",\n+\t\t  ob_modifier);\n     }\n \n   return t;"}, {"sha": "461f73ea4bf1f2562cdf355c415a0889d277e4db", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -2295,7 +2295,7 @@ check_newline ()\n      it and ignore it; otherwise, ignore the line, with an error\n      if the word isn't `pragma'.  */\n \n-  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n+  if (ISALPHA (c))\n     {\n       if (c == 'p')\n \t{\n@@ -2780,7 +2780,7 @@ readescape (ignore_ptr)\n \tpedwarn (\"unknown escape sequence `\\\\%c'\", c);\n       return c;\n     }\n-  if (c >= 040 && c < 0177)\n+  if (ISGRAPH (c))\n     pedwarn (\"unknown escape sequence `\\\\%c'\", c);\n   else\n     pedwarn (\"unknown escape sequence: `\\\\' followed by char code 0x%x\", c);\n@@ -4776,7 +4776,7 @@ yyerror (string)\n     strcat (buf, \" before string constant\");\n   else if (token_buffer[0] == '\\'')\n     strcat (buf, \" before character constant\");\n-  else if (token_buffer[0] < 040 || (unsigned char) token_buffer[0] >= 0177)\n+  else if (!ISGRAPH (token_buffer[0]))\n     sprintf (buf + strlen (buf), \" before character 0%o\",\n \t     (unsigned char) token_buffer[0]);\n   else\n@@ -4999,29 +4999,21 @@ handle_generic_pragma (token)\n \t{\n \tcase IDENTIFIER:\n \tcase TYPENAME:\n-\tcase STRING:\n-\tcase CONSTANT:\n-\t  handle_pragma_token (IDENTIFIER_POINTER(yylval.ttype), yylval.ttype);\n-\t  break;\n-\tcase '(':\n-\t  handle_pragma_token (\"(\", NULL_TREE);\n-\t  break;\n-\tcase ')':\n-\t  handle_pragma_token (\")\", NULL_TREE);\n-\t  break;\n-\tcase ',':\n-\t  handle_pragma_token (\",\", NULL_TREE);\n-\t  break;\n-\tcase '=':\n-\t  handle_pragma_token (\"=\", NULL_TREE);\n+        case STRING:\n+        case CONSTANT:\n+\t  handle_pragma_token (token_buffer, yylval.ttype);\n \t  break;\n+\n \tcase LEFT_RIGHT:\n \t  handle_pragma_token (\"(\", NULL_TREE);\n \t  handle_pragma_token (\")\", NULL_TREE);\n \t  break;\n+\n \tcase END_OF_LINE:\n-\tdefault:\n \t  return handle_pragma_token (NULL_PTR, NULL_TREE);\n+\n+\tdefault:\n+\t  handle_pragma_token (token_buffer, NULL);\n \t}\n       \n       token = real_yylex ();"}, {"sha": "94fdbc28cee311ec63b38f85e12ec4fae0671aa5", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -1952,7 +1952,7 @@ get_abstract_virtuals (type)\n      tree type;\n {\n   tree vbases;\n-  tree abstract_virtuals = CLASSTYPE_ABSTRACT_VIRTUALS (type);\n+  tree abstract_virtuals = NULL;\n \n   /* First get all from non-virtual bases.  */\n   abstract_virtuals"}, {"sha": "b638f40ee19238027a67e85fcba88dcc9af5878f", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f660b7585eed3232073f360075fd93a2c66468/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=83f660b7585eed3232073f360075fd93a2c66468", "patch": "@@ -165,7 +165,7 @@ abstract_virtuals_error (decl, type)\n \n       error (\"  since the following virtual functions are abstract:\");\n       for (tu = u; tu; tu = TREE_CHAIN (tu))\n-\tcp_error (\"\\t%#D\", TREE_VALUE (tu));\n+\tcp_error_at (\"\\t%#D\", TREE_VALUE (tu));\n     }\n   else\n     cp_error (\"  since type `%T' has abstract virtual functions\", type);"}]}