{"sha": "5c88ea9456b266f202ee0a690b41f9a4e9558457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4OGVhOTQ1NmIyNjZmMjAyZWUwYTY5MGI0MWY5YTRlOTU1ODQ1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:35:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:35:07Z"}, "message": "Remove remaining uses of REAL_ARITHMETIC\n\nThis patch replaces all remaining uses of the old target macro\nREAL_ARITHMETIC with calls to the (now generic) real_arithmetic\nfunction.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/ada/\n\t* gcc-interface/trans.c (convert_with_check): Use real_arithmetic\n\tinstead of REAL_ARITHMETIC.\n\ngcc/\n\t* doc/tm.texi.in (REAL_ARITHMETIC): Delete.\n\t* doc/tm.texi: Regenerate.\n\t* real.h (REAL_ARITHMETIC): Delete.\n\t* config/i386/i386.c (ix86_expand_lround, ix86_expand_round)\n\t(ix86_expand_round_sse4): Use real_arithmetic instead of\n\tREAL_ARITHMETIC.\n\t* config/i386/sse.md (round<mode>2): Likewise.\n\t* rtl.h (rtx_to_tree_code): Likewise (in comment).\n\t* explow.c (rtx_to_tree_code): Likewise (in comment).\n\t* match.pd: Likewise.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n\t* tree-ssa-math-opts.c (representable_as_half_series_p): Likewise.\n\t(expand_pow_as_sqrts): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Remove code that\n\twas conditional on REAL_ARITHMETIC being undefined.\n\nFrom-SVN: r228476", "tree": {"sha": "931af8886409aa4886077746e7766455e9957e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/931af8886409aa4886077746e7766455e9957e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c88ea9456b266f202ee0a690b41f9a4e9558457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c88ea9456b266f202ee0a690b41f9a4e9558457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c88ea9456b266f202ee0a690b41f9a4e9558457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c88ea9456b266f202ee0a690b41f9a4e9558457/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4"}], "stats": {"total": 100, "additions": 40, "deletions": 60}, "files": [{"sha": "d2567008e55101ee10bd275232415895c995e99a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1,3 +1,21 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/tm.texi.in (REAL_ARITHMETIC): Delete.\n+\t* doc/tm.texi: Regenerate.\n+\t* real.h (REAL_ARITHMETIC): Delete.\n+\t* config/i386/i386.c (ix86_expand_lround, ix86_expand_round)\n+\t(ix86_expand_round_sse4): Use real_arithmetic instead of\n+\tREAL_ARITHMETIC.\n+\t* config/i386/sse.md (round<mode>2): Likewise.\n+\t* rtl.h (rtx_to_tree_code): Likewise (in comment).\n+\t* explow.c (rtx_to_tree_code): Likewise (in comment).\n+\t* match.pd: Likewise.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\t* tree-ssa-math-opts.c (representable_as_half_series_p): Likewise.\n+\t(expand_pow_as_sqrts): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Remove code that\n+\twas conditional on REAL_ARITHMETIC being undefined.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* doc/tm.texi.in (REAL_VALUES_LESS): Delete."}, {"sha": "7f4a55df86e14f80121c973d9dac362589d5f2f5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc-interface/trans.c (convert_with_check): Use real_arithmetic\n+\tinstead of REAL_ARITHMETIC.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc-interface/trans.c (convert_with_check): Use real_less instead"}, {"sha": "f1e2dcb41f07680296259412482b15636bf21ed8", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -9048,8 +9048,8 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n       /* Compute the exact value calc_type'Pred (0.5) at compile time.  */\n       fmt = REAL_MODE_FORMAT (TYPE_MODE (calc_type));\n       real_2expN (&half_minus_pred_half, -(fmt->p) - 1, TYPE_MODE (calc_type));\n-      REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf,\n-\t\t       half_minus_pred_half);\n+      real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf,\n+\t\t       &half_minus_pred_half);\n       gnu_pred_half = build_real (calc_type, pred_half);\n \n       /* If the input is strictly negative, subtract this value"}, {"sha": "44847b4d5ececf9b21c15b94d183c7d599035abd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -47538,7 +47538,7 @@ ix86_expand_lround (rtx op0, rtx op1)\n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n   real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n-  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);\n \n   /* adj = copysign (0.5, op1) */\n   adj = force_reg (mode, const_double_from_real_value (pred_half, mode));\n@@ -47952,7 +47952,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n   real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n-  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);\n \n   /* xa = xa + 0.5 */\n   half = force_reg (mode, const_double_from_real_value (pred_half, mode));\n@@ -48003,7 +48003,7 @@ ix86_expand_round_sse4 (rtx op0, rtx op1)\n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n   real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n-  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);\n   half = const_double_from_real_value (pred_half, mode);\n \n   /* e1 = copysign (0.5, op1) */"}, {"sha": "9b7a33840140fff433971bf5be16485b15ef8ff0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -14881,7 +14881,7 @@\n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (scalar_mode);\n   real_2expN (&half_minus_pred_half, -(fmt->p) - 1, scalar_mode);\n-  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);\n   half = const_double_from_real_value (pred_half, scalar_mode);\n \n   vec_half = ix86_build_const_vector (<MODE>mode, true, half);"}, {"sha": "72366b90dbf5e887d683b939c923f2ecc123065f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -9736,21 +9736,6 @@ Determines whether @var{x} represents infinity (positive or negative).\n Determines whether @var{x} represents a ``NaN'' (not-a-number).\n @end deftypefn\n \n-@deftypefn Macro void REAL_ARITHMETIC (REAL_VALUE_TYPE @var{output}, enum tree_code @var{code}, REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Calculates an arithmetic operation on the two floating point values\n-@var{x} and @var{y}, storing the result in @var{output} (which must be a\n-variable).\n-\n-The operation to be performed is specified by @var{code}.  Only the\n-following codes are supported: @code{PLUS_EXPR}, @code{MINUS_EXPR},\n-@code{MULT_EXPR}, @code{RDIV_EXPR}, @code{MAX_EXPR}, @code{MIN_EXPR}.\n-\n-If @code{REAL_ARITHMETIC} is asked to evaluate division by zero and the\n-target's floating point format cannot represent infinity, it will call\n-@code{abort}.  Callers should check for this situation first, using\n-@code{MODE_HAS_INFINITIES}.  @xref{Storage Layout}.\n-@end deftypefn\n-\n @deftypefn Macro REAL_VALUE_TYPE REAL_VALUE_NEGATE (REAL_VALUE_TYPE @var{x})\n Returns the negative of the floating point value @var{x}.\n @end deftypefn"}, {"sha": "d8d008703761ed67cc6ec711c9bffdba187060b9", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -7159,21 +7159,6 @@ Determines whether @var{x} represents infinity (positive or negative).\n Determines whether @var{x} represents a ``NaN'' (not-a-number).\n @end deftypefn\n \n-@deftypefn Macro void REAL_ARITHMETIC (REAL_VALUE_TYPE @var{output}, enum tree_code @var{code}, REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Calculates an arithmetic operation on the two floating point values\n-@var{x} and @var{y}, storing the result in @var{output} (which must be a\n-variable).\n-\n-The operation to be performed is specified by @var{code}.  Only the\n-following codes are supported: @code{PLUS_EXPR}, @code{MINUS_EXPR},\n-@code{MULT_EXPR}, @code{RDIV_EXPR}, @code{MAX_EXPR}, @code{MIN_EXPR}.\n-\n-If @code{REAL_ARITHMETIC} is asked to evaluate division by zero and the\n-target's floating point format cannot represent infinity, it will call\n-@code{abort}.  Callers should check for this situation first, using\n-@code{MODE_HAS_INFINITIES}.  @xref{Storage Layout}.\n-@end deftypefn\n-\n @deftypefn Macro REAL_VALUE_TYPE REAL_VALUE_NEGATE (REAL_VALUE_TYPE @var{x})\n Returns the negative of the floating point value @var{x}.\n @end deftypefn"}, {"sha": "807c9260bdb7ec62a91624f5875e725fac6f7aa4", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1900,7 +1900,7 @@ hard_libcall_value (machine_mode mode, rtx fun)\n }\n \n /* Look up the tree code for a given rtx code\n-   to provide the arithmetic operation for REAL_ARITHMETIC.\n+   to provide the arithmetic operation for real_arithmetic.\n    The function returns an int because the caller may not know\n    what `enum tree_code' means.  */\n "}, {"sha": "8842e047d50c0ec865f2e99926c32844a22a3a25", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1699,8 +1699,8 @@ along with GCC; see the file COPYING3.  If not see\n       (with\n        {\n          REAL_VALUE_TYPE c2;\n-\t REAL_ARITHMETIC (c2, MULT_EXPR,\n-\t\t\t  TREE_REAL_CST (@1), TREE_REAL_CST (@1));\n+\t real_arithmetic (&c2, MULT_EXPR,\n+\t\t\t  &TREE_REAL_CST (@1), &TREE_REAL_CST (@1));\n \t real_convert (&c2, TYPE_MODE (TREE_TYPE (@0)), &c2);\n        }\n        (if (REAL_VALUE_ISINF (c2))\n@@ -1714,8 +1714,8 @@ along with GCC; see the file COPYING3.  If not see\n       (with\n        {\n        \t REAL_VALUE_TYPE c2;\n-\t REAL_ARITHMETIC (c2, MULT_EXPR,\n-\t\t\t  TREE_REAL_CST (@1), TREE_REAL_CST (@1));\n+\t real_arithmetic (&c2, MULT_EXPR,\n+\t\t\t  &TREE_REAL_CST (@1), &TREE_REAL_CST (@1));\n \t real_convert (&c2, TYPE_MODE (TREE_TYPE (@0)), &c2);\n        }\n        (if (REAL_VALUE_ISINF (c2))"}, {"sha": "3fff0c572334f9a918302dcfb4774ec06192c09b", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -331,9 +331,6 @@ extern const struct real_format arm_half_format;\n /* ====================================================================== */\n /* Crap.  */\n \n-#define REAL_ARITHMETIC(value, code, d1, d2) \\\n-  real_arithmetic (&(value), code, &(d1), &(d2))\n-\n /* Determine whether a floating-point value X is infinite.  */\n #define REAL_VALUE_ISINF(x)\t\treal_isinf (&(x))\n "}, {"sha": "a592a1e038868f1e85bd36bd095cb2d093cf6cd0", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -3452,7 +3452,7 @@ extern int regstack_completed;\n extern int cse_not_expected;\n \n /* Translates rtx code to tree code, for those codes needed by\n-   REAL_ARITHMETIC.  The function returns an int because the caller may not\n+   real_arithmetic.  The function returns an int because the caller may not\n    know what `enum tree_code' means.  */\n \n extern int rtx_to_tree_code (enum rtx_code);"}, {"sha": "96eaae71324a30bc6d7ed09c32391b382b529e9b", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -3111,7 +3111,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      if (flag_reciprocal_math\n \t\t  && !real_equal (&d, &dconst0))\n \t\t{\n-\t\t  REAL_ARITHMETIC (d, RDIV_EXPR, dconst1, d);\n+\t\t  real_arithmetic (&d, RDIV_EXPR, &dconst1, &d);\n \t\t  tem = CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n \t\t  return simplify_gen_binary (MULT, mode, op0, tem);\n \t\t}"}, {"sha": "ce3f6a8a8b28076f1dc8681a3038ce13d66c4230", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1428,7 +1428,6 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \tif (TREE_OVERFLOW (node))\n \t  pp_string (pp, \" overflow\");\n \n-#if !defined(REAL_IS_NOT_DOUBLE) || defined(REAL_ARITHMETIC)\n \td = TREE_REAL_CST (node);\n \tif (REAL_VALUE_ISINF (d))\n \t  pp_string (pp, REAL_VALUE_NEGATIVE (d) ? \" -Inf\" : \" Inf\");\n@@ -1440,15 +1439,6 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \t    real_to_decimal (string, &d, sizeof (string), 0, 1);\n \t    pp_string (pp, string);\n \t  }\n-#else\n-\t{\n-\t  HOST_WIDE_INT i;\n-\t  unsigned char *p = (unsigned char *) &TREE_REAL_CST (node);\n-\t  pp_string (pp, \"0x\");\n-\t  for (i = 0; i < sizeof TREE_REAL_CST (node); i++)\n-\t    output_formatted_integer (pp, \"%02x\", *p++);\n-\t}\n-#endif\n \tbreak;\n       }\n "}, {"sha": "39c027ce54f0daa770ed5a8cf5e0d241da2829e1", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c88ea9456b266f202ee0a690b41f9a4e9558457/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=5c88ea9456b266f202ee0a690b41f9a4e9558457", "patch": "@@ -1140,7 +1140,7 @@ representable_as_half_series_p (REAL_VALUE_TYPE c, unsigned n,\n       REAL_VALUE_TYPE res;\n \n       /* If something inexact happened bail out now.  */\n-      if (REAL_ARITHMETIC (res, MINUS_EXPR, remainder, factor))\n+      if (real_arithmetic (&res, MINUS_EXPR, &remainder, &factor))\n \treturn false;\n \n       /* We have hit zero.  The number is representable as a sum\n@@ -1160,7 +1160,7 @@ representable_as_half_series_p (REAL_VALUE_TYPE c, unsigned n,\n       else\n \tinfo->factors[i] = false;\n \n-      REAL_ARITHMETIC (factor, MULT_EXPR, factor, dconsthalf);\n+      real_arithmetic (&factor, MULT_EXPR, &factor, &dconsthalf);\n     }\n   return false;\n }\n@@ -1317,7 +1317,7 @@ expand_pow_as_sqrts (gimple_stmt_iterator *gsi, location_t loc,\n   REAL_VALUE_TYPE frac_part;\n \n   real_floor (&whole_part, mode, &exp);\n-  REAL_ARITHMETIC (frac_part, MINUS_EXPR, exp, whole_part);\n+  real_arithmetic (&frac_part, MINUS_EXPR, &exp, &whole_part);\n \n \n   REAL_VALUE_TYPE ceil_whole = dconst0;\n@@ -1326,7 +1326,7 @@ expand_pow_as_sqrts (gimple_stmt_iterator *gsi, location_t loc,\n   if (neg_exp)\n     {\n       real_ceil (&ceil_whole, mode, &exp);\n-      REAL_ARITHMETIC (ceil_fract, MINUS_EXPR, ceil_whole, exp);\n+      real_arithmetic (&ceil_fract, MINUS_EXPR, &ceil_whole, &exp);\n     }\n \n   if (!representable_as_half_series_p (frac_part, max_depth, &synth_info))"}]}