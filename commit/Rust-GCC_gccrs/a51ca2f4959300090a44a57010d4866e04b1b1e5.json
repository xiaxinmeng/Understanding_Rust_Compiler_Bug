{"sha": "a51ca2f4959300090a44a57010d4866e04b1b1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxY2EyZjQ5NTkzMDAwOTBhNDRhNTcwMTBkNDg2NmUwNGIxYjFlNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-22T11:44:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-22T11:44:11Z"}, "message": "re PR middle-end/68046 (-ftrapv doesn't catch leaq-based overflows on x86-64)\n\n2015-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/68046\n\tPR middle-end/61893\n\t* optabs.c (emit_libcall_block_1): Allow a NULL_RTX equiv.\n\t(expand_binop): For -ftrapv optabs do not record an REG_EQUAL note.\n\t(expand_unop): Likewise.\n\n\t* gcc.dg/torture/ftrapv-2.c: New testcase.\n\nFrom-SVN: r229170", "tree": {"sha": "277387790bdb8a7475b00903c33cb056d7e6d36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277387790bdb8a7475b00903c33cb056d7e6d36d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51ca2f4959300090a44a57010d4866e04b1b1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51ca2f4959300090a44a57010d4866e04b1b1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51ca2f4959300090a44a57010d4866e04b1b1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51ca2f4959300090a44a57010d4866e04b1b1e5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08e99efb2e7b5638af23f6c2b54840e7a943e107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e99efb2e7b5638af23f6c2b54840e7a943e107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e99efb2e7b5638af23f6c2b54840e7a943e107"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "192360dc752d25fa40209f40598e50ad7f3bc565", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51ca2f4959300090a44a57010d4866e04b1b1e5", "patch": "@@ -1,3 +1,11 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68046\n+\tPR middle-end/61893\n+\t* optabs.c (emit_libcall_block_1): Allow a NULL_RTX equiv.\n+\t(expand_binop): For -ftrapv optabs do not record an REG_EQUAL note.\n+\t(expand_unop): Likewise.\n+\n 2015-10-22  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_addr_of_array_ref_difference): Properly"}, {"sha": "e1ac0b85e5e8130ee5d1854684a49b816ac46535", "filename": "gcc/optabs.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a51ca2f4959300090a44a57010d4866e04b1b1e5", "patch": "@@ -1748,11 +1748,12 @@ expand_binop (machine_mode mode, optab binoptab, rtx op0, rtx op1,\n       insns = get_insns ();\n       end_sequence ();\n \n+      bool trapv = trapv_binoptab_p (binoptab);\n       target = gen_reg_rtx (mode);\n       emit_libcall_block_1 (insns, target, value,\n-\t\t\t    gen_rtx_fmt_ee (optab_to_code (binoptab),\n-\t\t\t\t\t    mode, op0, op1),\n-\t\t\t    trapv_binoptab_p (binoptab));\n+\t\t\t    trapv ? NULL_RTX\n+\t\t\t    : gen_rtx_fmt_ee (optab_to_code (binoptab),\n+\t\t\t\t\t      mode, op0, op1), trapv);\n \n       return target;\n     }\n@@ -2880,13 +2881,19 @@ expand_unop (machine_mode mode, optab unoptab, rtx op0, rtx target,\n       end_sequence ();\n \n       target = gen_reg_rtx (outmode);\n-      eq_value = gen_rtx_fmt_e (optab_to_code (unoptab), mode, op0);\n-      if (GET_MODE_SIZE (outmode) < GET_MODE_SIZE (mode))\n-\teq_value = simplify_gen_unary (TRUNCATE, outmode, eq_value, mode);\n-      else if (GET_MODE_SIZE (outmode) > GET_MODE_SIZE (mode))\n-\teq_value = simplify_gen_unary (ZERO_EXTEND, outmode, eq_value, mode);\n-      emit_libcall_block_1 (insns, target, value, eq_value,\n-\t\t\t    trapv_unoptab_p (unoptab));\n+      bool trapv = trapv_unoptab_p (unoptab);\n+      if (trapv)\n+\teq_value = NULL_RTX;\n+      else\n+\t{\n+\t  eq_value = gen_rtx_fmt_e (optab_to_code (unoptab), mode, op0);\n+\t  if (GET_MODE_SIZE (outmode) < GET_MODE_SIZE (mode))\n+\t    eq_value = simplify_gen_unary (TRUNCATE, outmode, eq_value, mode);\n+\t  else if (GET_MODE_SIZE (outmode) > GET_MODE_SIZE (mode))\n+\t    eq_value = simplify_gen_unary (ZERO_EXTEND,\n+\t\t\t\t\t   outmode, eq_value, mode);\n+\t}\n+      emit_libcall_block_1 (insns, target, value, eq_value, trapv);\n \n       return target;\n     }\n@@ -3573,7 +3580,8 @@ emit_libcall_block_1 (rtx_insn *insns, rtx target, rtx result, rtx equiv,\n     }\n \n   last = emit_move_insn (target, result);\n-  set_dst_reg_note (last, REG_EQUAL, copy_rtx (equiv), target);\n+  if (equiv)\n+    set_dst_reg_note (last, REG_EQUAL, copy_rtx (equiv), target);\n \n   if (final_dest != target)\n     emit_move_insn (final_dest, target);"}, {"sha": "45a287f3ec149d7c3f58f309ffc591751b41fe2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a51ca2f4959300090a44a57010d4866e04b1b1e5", "patch": "@@ -1,3 +1,9 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68046\n+\tPR middle-end/61893\n+\t* gcc.dg/torture/ftrapv-2.c: New testcase.\n+\n 2015-10-22  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/68015"}, {"sha": "8065ee0461ae1ac463e37c3b46050f0f62fb0a12", "filename": "gcc/testsuite/gcc.dg/torture/ftrapv-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fftrapv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51ca2f4959300090a44a57010d4866e04b1b1e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fftrapv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fftrapv-2.c?ref=a51ca2f4959300090a44a57010d4866e04b1b1e5", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* With -flto this degenerates to constant folding which doesn't work.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+/* { dg-additional-options \"-ftrapv\" } */\n+/* { dg-require-effective-target trapping } */\n+/* { dg-require-fork unused } */\n+\n+#include <stdlib.h>\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+\n+/* Verify SImode operations properly trap.  PR middle-end/68046 */\n+\n+int i = 0x7fffffff;\n+\n+int main(void)\n+{\n+  pid_t child = fork ();\n+  int status = 0;\n+  if (child == 0)\n+    {\n+      volatile int x = i + 1 < i;\n+      exit (0);\n+    }\n+  else if (child == -1)\n+    return 0;\n+  if (wait (&status) == child \n+      && status == 0)\n+    abort ();\n+  return 0;\n+}"}]}