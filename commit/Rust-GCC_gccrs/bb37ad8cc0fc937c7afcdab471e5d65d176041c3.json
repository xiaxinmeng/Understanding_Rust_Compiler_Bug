{"sha": "bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzN2FkOGNjMGZjOTM3YzdhZmNkYWI0NzFlNWQ2NWQxNzYwNDFjMw==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-10-09T14:01:13Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-10-09T14:12:42Z"}, "message": "Don't keep strict_low_part in reloads for non-registers. [PR97313]\n\ngcc/ChangeLog:\n\n2020-10-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/97313\n\t* lra-constraints.c (match_reload): Don't keep strict_low_part in\n\treloads for non-registers.\n\ngcc/testsuite/ChangeLog:\n\n2020-10-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/97313\n\t* gcc.target/i386/pr97313.c: New.", "tree": {"sha": "a126d0293338cc16ceaadee8a11520a37ca6c63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a126d0293338cc16ceaadee8a11520a37ca6c63e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb37ad8cc0fc937c7afcdab471e5d65d176041c3/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c37d3bacbb2f8bbbe56ed53a9547d3be01b66b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c37d3bacbb2f8bbbe56ed53a9547d3be01b66b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c37d3bacbb2f8bbbe56ed53a9547d3be01b66b"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "f761d7dfe3c2350cf551ed3767fa7b31d432310d", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb37ad8cc0fc937c7afcdab471e5d65d176041c3/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb37ad8cc0fc937c7afcdab471e5d65d176041c3/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "patch": "@@ -1132,8 +1132,13 @@ match_reload (signed char out, signed char *ins, signed char *outs,\n   narrow_reload_pseudo_class (out_rtx, goal_class);\n   if (find_reg_note (curr_insn, REG_UNUSED, out_rtx) == NULL_RTX)\n     {\n+      reg = SUBREG_P (out_rtx) ? SUBREG_REG (out_rtx) : out_rtx;\n       start_sequence ();\n-      if (out >= 0 && curr_static_id->operand[out].strict_low)\n+      /* If we had strict_low_part, use it also in reload to keep other\n+\t parts unchanged but do it only for regs as strict_low_part\n+\t has no sense for memory and probably there is no insn pattern\n+\t to match the reload insn in memory case.  */\n+      if (out >= 0 && curr_static_id->operand[out].strict_low && REG_P (reg))\n \tout_rtx = gen_rtx_STRICT_LOW_PART (VOIDmode, out_rtx);\n       lra_emit_move (out_rtx, copy_rtx (new_out_reg));\n       emit_insn (*after);"}, {"sha": "ef93cf1cca8f41ea0962a2d0d4db9c8800073fc3", "filename": "gcc/testsuite/gcc.target/i386/pr97313.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb37ad8cc0fc937c7afcdab471e5d65d176041c3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97313.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb37ad8cc0fc937c7afcdab471e5d65d176041c3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97313.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97313.c?ref=bb37ad8cc0fc937c7afcdab471e5d65d176041c3", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fPIE\" } */\n+\n+typedef struct {\n+  int unspecified : 1;\n+  int secure : 1;\n+} MemTxAttrs;\n+\n+enum { MSCAllowNonSecure } tz_msc_read_pdata;\n+\n+int tz_msc_read_s_0;\n+int tz_msc_check();\n+int address_space_ldl_le();\n+\n+void tz_msc_read(MemTxAttrs attrs) {\n+  int as = tz_msc_read_s_0;\n+  long long data;\n+  switch (tz_msc_check()) {\n+  case MSCAllowNonSecure:\n+    attrs.secure = attrs.unspecified = 0;\n+    data = address_space_ldl_le(as, attrs);\n+  }\n+  tz_msc_read_pdata = data;\n+}"}]}