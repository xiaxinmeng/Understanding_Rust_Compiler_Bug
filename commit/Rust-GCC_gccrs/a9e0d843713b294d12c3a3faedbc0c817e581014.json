{"sha": "a9e0d843713b294d12c3a3faedbc0c817e581014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllMGQ4NDM3MTNiMjk0ZDEyYzNhM2ZhZWRiYzBjODE3ZTU4MTAxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-26T08:01:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-26T08:01:19Z"}, "message": "tree-cfg.c (execute_build_cfg): Build the loop tree.\n\n2013-03-26  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (execute_build_cfg): Build the loop tree.\n\t(pass_build_cfg): Provide PROP_loops.\n\t(move_sese_region_to_fn): Remove loops that are outlined into fn\n\tfor now.\n\t* tree-inline.c: Include cfgloop.h.\n\t(initialize_cfun): Do not drop PROP_loops.\n\t(copy_loops): New function.\n\t(copy_cfg_body): Copy loop structure.\n\t(tree_function_versioning): Initialize destination loop tree.\n\t* tree-ssa-loop.c (pass_tree_loop_init): Do not provide PROP_loops.\n\t(pass_parallelize_loops): Do IL verification.\n\t* loop-init.c (loop_optimizer_init): Fixup loops if required.\n\t* tree-optimize.c (execute_fixup_cfg): If we need to cleanup\n\tthe CFG make sure we fixup loops as well.\n\t* tree-ssa-tail-merge.c: Include cfgloop.h.\n\t(replace_block_by): When merging loop latches mark loops for fixup.\n\t* lto-streamer-out.c (output_struct_function_base): Drop\n\tPROP_loops for now.\n\t* tree-ssa-phiopt.c: Include tree-scalar-evolution.h.\n\t(tree_ssa_cs_elim): Initialize the loop optimizer and SCEV.\n\t* ipa-split.c: Include cfgloop.h.\n\t(split_function): Add the new return block to the loop tree root.\n\t* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Return\n\twhether we have removed the forwarder block.\n\t(merge_phi_nodes): If we removed a forwarder mark loops for fixup.\n\t* cfgloop.h (place_new_loop): Declare.\n\t* cfgloopmanip.c (place_new_loop): Export.\n\t* Makefile.in (asan.o): Add $(CFGLOOP_H) dependency.\n\t(tree-switch-conversion.o): Likewise.\n\t(tree-complex.o): Likewise.\n\t(tree-inline.o): Likewise.\n\t(tree-ssa-tailmerge.o): Likewise.\n\t(ipa-split.o): Likewise.\n\t(tree-ssa-phiopt.o): Add $(SCEV_H) dependency.\n\t(tree-ssa-copy.o): Likewise.\n\t* tree-switch-conversion.c: Include cfgloop.h\n\t(process_switch): If we emit a bit-test cascade, schedule loops\n\tfor fixup.\n\t* tree-complex.c: Include cfgloop.h.\n\t(expand_complex_div_wide): Properly add new basic-blocks to loops.\n\t* asan.c: Include cfgloop.h.\n\t(create_cond_insert_point): Properly add new basic-blocks to\n\tloops, schedule loop fixup.\n\t* cfgloop.c (verify_loop_structure): Check that looks are not\n\tmarked for fixup.\n\t* omp-low.c (expand_parallel_call): Properly add new basic-blocks\n\tto loops.\n\t(expand_omp_for_generic): Likewise.\n\t(expand_omp_sections): Likewise.\n\t(expand_omp_atomic_pipeline): Schedule loops for fixup.\n\t* tree-ssa-copy.c: Include tree-scalar-evolution.h.\n\t(fini_copy_prop): Disable DCE in substitute_and_fold if SCEV\n\tis initialized, not when loops are present.\n\t* tree-parloops.c (parallelize_loops): Remove checking here.\n\t* passes.c (init_optimization_passes): Schedule a copy-propagation\n\tpass before complete unrolling of inner loops.\n\n\t* gcc.dg/tree-prof/update-loopch.c: Revert last change.\n\t* gcc.dg/graphite/pr33766.c: Fix undefined behavior.\n\t* gcc.dg/pr53265.c: Remove XFAILs.\n\t* gcc.dg/tree-ssa/loop-38.c: Remove unreliable dump scanning.\n\t* gcc.dg/tree-ssa/pr21559.c: Change back to two expected jump threads.\n\nFrom-SVN: r198333", "tree": {"sha": "6dc72b0a543f5b83d0d65dbb0cb065eb0cb323b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc72b0a543f5b83d0d65dbb0cb065eb0cb323b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e0d843713b294d12c3a3faedbc0c817e581014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e0d843713b294d12c3a3faedbc0c817e581014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e0d843713b294d12c3a3faedbc0c817e581014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e0d843713b294d12c3a3faedbc0c817e581014/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2e836b2ac02b691a2085888d3a73d0296e93970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e836b2ac02b691a2085888d3a73d0296e93970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e836b2ac02b691a2085888d3a73d0296e93970"}], "stats": {"total": 323, "additions": 273, "deletions": 50}, "files": [{"sha": "e283c3dbff105da869207ba3c8f8c19e5528bab3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -1,3 +1,62 @@\n+2013-03-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (execute_build_cfg): Build the loop tree.\n+\t(pass_build_cfg): Provide PROP_loops.\n+\t(move_sese_region_to_fn): Remove loops that are outlined into fn\n+\tfor now.\n+\t* tree-inline.c: Include cfgloop.h.\n+\t(initialize_cfun): Do not drop PROP_loops.\n+\t(copy_loops): New function.\n+\t(copy_cfg_body): Copy loop structure.\n+\t(tree_function_versioning): Initialize destination loop tree.\n+\t* tree-ssa-loop.c (pass_tree_loop_init): Do not provide PROP_loops.\n+\t(pass_parallelize_loops): Do IL verification.\n+\t* loop-init.c (loop_optimizer_init): Fixup loops if required.\n+\t* tree-optimize.c (execute_fixup_cfg): If we need to cleanup\n+\tthe CFG make sure we fixup loops as well.\n+\t* tree-ssa-tail-merge.c: Include cfgloop.h.\n+\t(replace_block_by): When merging loop latches mark loops for fixup.\n+\t* lto-streamer-out.c (output_struct_function_base): Drop\n+\tPROP_loops for now.\n+\t* tree-ssa-phiopt.c: Include tree-scalar-evolution.h.\n+\t(tree_ssa_cs_elim): Initialize the loop optimizer and SCEV.\n+\t* ipa-split.c: Include cfgloop.h.\n+\t(split_function): Add the new return block to the loop tree root.\n+\t* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Return\n+\twhether we have removed the forwarder block.\n+\t(merge_phi_nodes): If we removed a forwarder mark loops for fixup.\n+\t* cfgloop.h (place_new_loop): Declare.\n+\t* cfgloopmanip.c (place_new_loop): Export.\n+\t* Makefile.in (asan.o): Add $(CFGLOOP_H) dependency.\n+\t(tree-switch-conversion.o): Likewise.\n+\t(tree-complex.o): Likewise.\n+\t(tree-inline.o): Likewise.\n+\t(tree-ssa-tailmerge.o): Likewise.\n+\t(ipa-split.o): Likewise.\n+\t(tree-ssa-phiopt.o): Add $(SCEV_H) dependency.\n+\t(tree-ssa-copy.o): Likewise.\n+\t* tree-switch-conversion.c: Include cfgloop.h\n+\t(process_switch): If we emit a bit-test cascade, schedule loops\n+\tfor fixup.\n+\t* tree-complex.c: Include cfgloop.h.\n+\t(expand_complex_div_wide): Properly add new basic-blocks to loops.\n+\t* asan.c: Include cfgloop.h.\n+\t(create_cond_insert_point): Properly add new basic-blocks to\n+\tloops, schedule loop fixup.\n+\t* cfgloop.c (verify_loop_structure): Check that looks are not\n+\tmarked for fixup.\n+\t* omp-low.c (expand_parallel_call): Properly add new basic-blocks\n+\tto loops.\n+\t(expand_omp_for_generic): Likewise.\n+\t(expand_omp_sections): Likewise.\n+\t(expand_omp_atomic_pipeline): Schedule loops for fixup.\n+\t* tree-ssa-copy.c: Include tree-scalar-evolution.h.\n+\t(fini_copy_prop): Disable DCE in substitute_and_fold if SCEV\n+\tis initialized, not when loops are present.\n+\t* tree-parloops.c (parallelize_loops): Remove checking here.\n+\t* passes.c (init_optimization_passes): Schedule a copy-propagation\n+\tpass before complete unrolling of inner loops.\n+\n 2013-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (toplev.o): Depend on diagnostic-color.h."}, {"sha": "36b0062a2f6c094190c2456cff56c436c010abd7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -2225,7 +2225,7 @@ tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TREE_H) \\\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n    $(HASHTAB_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n-   intl.h $(FUNCTION_H) $(GIMPLE_H) \\\n+   intl.h $(FUNCTION_H) $(GIMPLE_H) $(CFGLOOP_H) \\\n    debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h $(TREE_PASS_H) $(TARGET_H) \\\n    $(TREE_PRETTY_PRINT_H)\n@@ -2237,7 +2237,7 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\\n    $(DIAGNOSTIC_CORE_H) $(CGRAPH_H) $(TREE_INLINE_H) $(TREE_DUMP_H) $(GIMPLE_H)\n asan.o : asan.c asan.h $(CONFIG_H) $(SYSTEM_H) $(GIMPLE_H) \\\n-   output.h coretypes.h $(GIMPLE_PRETTY_PRINT_H) \\\n+   output.h coretypes.h $(GIMPLE_PRETTY_PRINT_H) $(CFGLOOP_H) \\\n    tree-iterator.h $(TREE_FLOW_H) $(TREE_PASS_H) \\\n    $(TARGET_H) $(EXPR_H) $(OPTABS_H) $(TM_P_H) langhooks.h \\\n    $(HASH_TABLE_H) alloc-pool.h\n@@ -2250,7 +2250,7 @@ tsan.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    tree-ssa-propagate.h\n tree-ssa-tail-merge.o: tree-ssa-tail-merge.c \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(BITMAP_H) \\\n-   $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n+   $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n    $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) $(TREE_DUMP_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_H) $(FUNCTION_H) tree-ssa-sccvn.h \\\n    $(CGRAPH_H) $(GIMPLE_PRETTY_PRINT_H) $(PARAMS_H)\n@@ -2314,14 +2314,14 @@ tree-ssa-phiopt.o : tree-ssa-phiopt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) langhooks.h $(FLAGS_H) \\\n    $(DIAGNOSTIC_H) pointer-set.h domwalk.h $(CFGLOOP_H) \\\n    $(TREE_DATA_REF_H) $(TREE_PRETTY_PRINT_H) $(GIMPLE_PRETTY_PRINT_H) \\\n-   insn-config.h $(EXPR_H) $(OPTABS_H)\n+   insn-config.h $(EXPR_H) $(OPTABS_H) $(SCEV_H)\n tree-nrv.o : tree-nrv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(FUNCTION_H) $(BASIC_BLOCK_H) $(FLAGS_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n    langhooks.h $(TREE_PRETTY_PRINT_H)\n tree-ssa-copy.o : tree-ssa-copy.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n-   $(FUNCTION_H) $(TM_H) coretypes.h \\\n+   $(FUNCTION_H) $(TM_H) coretypes.h $(SCEV_H) \\\n    $(BASIC_BLOCK_H) $(TREE_PASS_H) langhooks.h tree-ssa-propagate.h \\\n    $(FLAGS_H) $(CFGLOOP_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-propagate.o : tree-ssa-propagate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -2929,7 +2929,7 @@ ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(TREE_INLINE_H) $(PARAMS_H) $(TREE_PRETTY_PRINT_H) $(IPA_INLINE_H)\n ipa-split.o : ipa-split.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_FLOW_H) \\\n-   $(TREE_PASS_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TREE_DUMP_H) \\\n+   $(TREE_PASS_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TREE_DUMP_H) $(CFGLOOP_H) \\\n    $(TREE_INLINE_H) $(PARAMS_H) $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H)\n ipa-inline.o : ipa-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n@@ -3058,13 +3058,13 @@ tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h alloc-pool.h \\\n    $(DBGCNT_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-switch-conversion.o : tree-switch-conversion.c $(CONFIG_H) $(SYSTEM_H) \\\n     $(TREE_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n-    $(TM_H) coretypes.h $(GIMPLE_H) \\\n+    $(TM_H) coretypes.h $(GIMPLE_H) $(CFGLOOP_H) \\\n     $(TREE_PASS_H) $(FLAGS_H) $(EXPR_H) $(BASIC_BLOCK_H) \\\n     $(GGC_H) $(OBSTACK_H) $(PARAMS_H) $(CPPLIB_H) $(PARAMS_H) \\\n     $(GIMPLE_PRETTY_PRINT_H) langhooks.h\n tree-complex.o : tree-complex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(TM_H) $(FLAGS_H) $(TREE_FLOW_H) $(TREE_HASHER_H) $(GIMPLE_H) \\\n-    tree-iterator.h $(TREE_PASS_H) tree-ssa-propagate.h\n+    $(CFGLOOP_H) tree-iterator.h $(TREE_PASS_H) tree-ssa-propagate.h\n tree-emutls.o : tree-emutls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(GIMPLE_H) $(TREE_PASS_H) $(TREE_FLOW_H) $(CGRAPH_H) langhooks.h \\\n     $(TARGET_H) $(TARGET_DEF_H) tree-iterator.h"}, {"sha": "c068b8ca0f455b3e7e78fe2743ccb2ef9aef2646", "filename": "gcc/asan.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"hash-table.h\"\n #include \"alloc-pool.h\"\n+#include \"cfgloop.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -1220,6 +1221,11 @@ create_cond_insert_point (gimple_stmt_iterator *iter,\n   basic_block cond_bb = e->src;\n   basic_block fallthru_bb = e->dest;\n   basic_block then_bb = create_empty_bb (cond_bb);\n+  if (current_loops)\n+    {\n+      add_bb_to_loop (then_bb, cond_bb->loop_father);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n+    }\n \n   /* Set up the newly created 'then block'.  */\n   e = make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);"}, {"sha": "568b7a2a13d79ceaffef829ca67296748dea274f", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -1329,6 +1329,12 @@ verify_loop_structure (void)\n   bool dom_available = dom_info_available_p (CDI_DOMINATORS);\n   sbitmap visited;\n \n+  if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+    {\n+      error (\"loop verification on loop tree that needs fixup\");\n+      err = 1;\n+    }\n+\n   /* We need up-to-date dominators, compute or verify them.  */\n   if (!dom_available)\n     calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "948e80567340f0ac45a9f2833dcd45effa06b3eb", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -232,6 +232,7 @@ void rescan_loop_exit (edge, bool, bool);\n /* Loop data structure manipulation/querying.  */\n extern void flow_loop_tree_node_add (struct loop *, struct loop *);\n extern void flow_loop_tree_node_remove (struct loop *);\n+extern void place_new_loop (struct loop *);\n extern void add_loop (struct loop *, struct loop *);\n extern bool flow_loop_nested_p\t(const struct loop *, const struct loop *);\n extern bool flow_bb_inside_loop_p (const struct loop *, const_basic_block);"}, {"sha": "f2d6a3b7050490a694cbf4483b02d067d5ed5c27", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -410,7 +410,7 @@ remove_path (edge e)\n \n /* Creates place for a new LOOP in loops structure.  */\n \n-static void\n+void\n place_new_loop (struct loop *loop)\n {\n   loop->num = number_of_loops ();"}, {"sha": "107c7a90d95fb99cd59d41f2ae33413e08d67fb2", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -90,6 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"gimple-pretty-print.h\"\n #include \"ipa-inline.h\"\n+#include \"cfgloop.h\"\n \n /* Per basic block info.  */\n \n@@ -1131,6 +1132,8 @@ split_function (struct split_point *split_point)\n       e = make_edge (new_return_bb, EXIT_BLOCK_PTR, 0);\n       e->probability = REG_BR_PROB_BASE;\n       e->count = new_return_bb->count;\n+      if (current_loops)\n+\tadd_bb_to_loop (new_return_bb, current_loops->tree_root);\n       bitmap_set_bit (split_point->split_bbs, new_return_bb->index);\n     }\n   /* When we pass around the value, use existing return block.  */"}, {"sha": "664ff29dd5b89af91ad44873c81340c842f4f81a", "filename": "gcc/loop-init.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -91,16 +91,27 @@ loop_optimizer_init (unsigned flags)\n     }\n   else\n     {\n+      bool recorded_exits = loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS);\n+\n       gcc_assert (cfun->curr_properties & PROP_loops);\n \n       /* Ensure that the dominators are computed, like flow_loops_find does.  */\n       calculate_dominance_info (CDI_DOMINATORS);\n \n+      if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+\t{\n+\t  loops_state_clear (~0U);\n+\t  fix_loop_structure (NULL);\n+\t}\n+\n #ifdef ENABLE_CHECKING\n-      verify_loop_structure ();\n+      else\n+\tverify_loop_structure ();\n #endif\n \n       /* Clear all flags.  */\n+      if (recorded_exits)\n+\trelease_recorded_exits ();\n       loops_state_clear (~0U);\n     }\n "}, {"sha": "afb73f2b5b112625527f9dfb18b9fb3c4b7f2df8", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -733,8 +733,9 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   FOR_EACH_VEC_SAFE_ELT (fn->local_decls, i, t)\n     stream_write_tree (ob, t, true);\n \n-  /* Output current IL state of the function.  */\n-  streamer_write_uhwi (ob, fn->curr_properties);\n+  /* Output current IL state of the function.\n+     ???  We don't stream loops.  */\n+  streamer_write_uhwi (ob, fn->curr_properties & ~PROP_loops);\n \n   /* Write all the attributes for FN.  */\n   bp = bitpack_create (ob->main_stream);"}, {"sha": "eaeeaa5fe390940fac16025a5738bf186edba620", "filename": "gcc/omp-low.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -3056,6 +3056,11 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \n \t  make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n \t  make_edge (cond_bb, else_bb, EDGE_FALSE_VALUE);\n+\t  if (current_loops)\n+\t    {\n+\t      add_bb_to_loop (then_bb, cond_bb->loop_father);\n+\t      add_bb_to_loop (else_bb, cond_bb->loop_father);\n+\t    }\n \t  e_then = make_edge (then_bb, bb, EDGE_FALLTHRU);\n \t  e_else = make_edge (else_bb, bb, EDGE_FALLTHRU);\n \n@@ -4011,6 +4016,8 @@ expand_omp_for_generic (struct omp_region *region,\n \t      tree vtype = TREE_TYPE (fd->loops[i].v);\n \n \t      bb = create_empty_bb (last_bb);\n+\t      if (current_loops)\n+\t\tadd_bb_to_loop (bb, last_bb->loop_father);\n \t      gsi = gsi_start_bb (bb);\n \n \t      if (i < fd->collapse - 1)\n@@ -4114,6 +4121,8 @@ expand_omp_for_generic (struct omp_region *region,\n       remove_edge (e);\n \n       make_edge (cont_bb, l2_bb, EDGE_FALSE_VALUE);\n+      if (current_loops)\n+\tadd_bb_to_loop (l2_bb, cont_bb->loop_father);\n       if (fd->collapse > 1)\n \t{\n \t  e = find_edge (cont_bb, l1_bb);\n@@ -4902,6 +4911,8 @@ expand_omp_sections (struct omp_region *region)\n   t = gimple_block_label (default_bb);\n   u = build_case_label (NULL, NULL, t);\n   make_edge (l0_bb, default_bb, 0);\n+  if (current_loops)\n+    add_bb_to_loop (default_bb, l0_bb->loop_father);\n \n   stmt = gimple_build_switch (vmain, u, label_vec);\n   gsi_insert_after (&switch_si, stmt, GSI_SAME_STMT);\n@@ -5438,6 +5449,10 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   if (gimple_in_ssa_p (cfun))\n     update_ssa (TODO_update_ssa_no_phi);\n \n+  /* ???  The above could use loop construction primitives.  */\n+  if (current_loops)\n+    loops_state_set (LOOPS_NEED_FIXUP);\n+\n   return true;\n }\n "}, {"sha": "fd67ee6128ae5b83fc6fd2952fddda3de9f0011b", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -1397,6 +1397,7 @@ init_optimization_passes (void)\n \t They ensure memory accesses are not indirect wherever possible.  */\n       NEXT_PASS (pass_strip_predict_hints);\n       NEXT_PASS (pass_rename_ssa_copies);\n+      NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA"}, {"sha": "737ef4a926f4eff758386bcfd6e8c2c51f927291", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -1,3 +1,11 @@\n+2013-03-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-prof/update-loopch.c: Revert last change.\n+\t* gcc.dg/graphite/pr33766.c: Fix undefined behavior.\n+\t* gcc.dg/pr53265.c: Remove XFAILs.\n+\t* gcc.dg/tree-ssa/loop-38.c: Remove unreliable dump scanning.\n+\t* gcc.dg/tree-ssa/pr21559.c: Change back to two expected jump threads.\n+\n 2013-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/prune.exp: Add -fdiagnostics-color=never to TEST_ALWAYS_FLAGS."}, {"sha": "47d3dd40d6707edda37420c606e56e787929a44c", "filename": "gcc/testsuite/gcc.dg/graphite/pr33766.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr33766.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr33766.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr33766.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -4,16 +4,16 @@\n float\n fxt1_quantize_ALPHA1()\n {\n-        int j1;\n-        int i;\n-        float *tv;\n-        for (j1 = 1; j1; j1++) {\n-                float e;\n-                for (i = 1; i; i++)\n-                        e = tv[i];\n-                if (e)\n-                        i = j1;\n-        }\n-        return tv[i];\n+  int j1;\n+  int i;\n+  float *tv;\n+  for (j1 = 1; j1 < 2048; j1++) {\n+      float e;\n+      for (i = 1; i < 2048; i++)\n+\te = tv[i];\n+      if (e)\n+\ti = j1;\n+  }\n+  return tv[i];\n }\n "}, {"sha": "70164466b10c1c1516c40fc42c45fe320647ffd1", "filename": "gcc/testsuite/gcc.dg/pr53265.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -49,9 +49,9 @@ fn4 (void)\n   unsigned int *a[32], *o, i;\n \n   bar (a);\n-  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: containing loop\" \"\" { xfail *-*-* } } */\n+  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: containing loop\" \"\" } */\n     {\n-      o = a[i];\t/* { dg-warning \"invokes undefined behavior\" \"\" { xfail *-*-* } } */\n+      o = a[i];\t/* { dg-warning \"invokes undefined behavior\" \"\" } */\n       bar (o);\n     }\n }\n@@ -85,11 +85,11 @@ fn7 (void)\n {\n   int a[16], b, c;\n   bar (a);\n-  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"invokes undefined behavior\" \"\" { xfail *-*-* } } */\n+  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"invokes undefined behavior\" \"\" } */\n     baz (b);\n }\n \n-/* { dg-message \"note: containing loop\" \"\" { xfail *-*-* } 88 } */\n+/* { dg-message \"note: containing loop\" \"\" { target *-*-* } 88 } */\n \n const void *va, *vb, *vc, *vd, *ve;\n const void *vf[4];"}, {"sha": "cc06ea7396bdb57ab8c727c3795853ae1c54ccd7", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-loopch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -14,7 +14,7 @@ main ()\n /* Loop header copying will peel away the initial conditional, so the loop body\n    is once reached directly from entry point of function, rest via loopback\n    edge.  */\n-/* { dg-final-use { scan-ipa-dump \"loop depth 0, count 33334\" \"profile\"} } */\n+/* { dg-final-use { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n /* { dg-final-use { scan-tree-dump \"loop depth 1, count 33332\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n /* { dg-final-use { cleanup-ipa-dump \"profile\" } } */"}, {"sha": "714696e87ad38e70c3c97838249bca4f5c14e1a9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-38.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-38.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -13,6 +13,5 @@ t(int n)\n \tsum+=b[i];\n   return sum;\n }\n-/* { dg-final { scan-tree-dump \"Found better loop bound 11\" \"cunrolli\" } } */\n /* { dg-final { scan-tree-dump \"Loop 1 iterates at most 11 times\" \"cunrolli\" } } */\n /* { dg-final { cleanup-tree-dump \"cunrolli\" } } */"}, {"sha": "402c102d25922cac99644add8e83b3b357f37403", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -37,7 +37,7 @@ void foo (void)\n /* Second, we should thread the edge out of the loop via the break\n    statement.  We also realize that the final bytes == 0 test is useless,\n    and thread over it.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 2 \"vrp1\" } } */\n \n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n "}, {"sha": "cbbc5c76bae4d9998edf2be051746df1e194a1d6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -247,6 +247,8 @@ execute_build_cfg (void)\n       fprintf (dump_file, \"Scope blocks:\\n\");\n       dump_scope_blocks (dump_file, dump_flags);\n     }\n+  cleanup_tree_cfg ();\n+  loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n   return 0;\n }\n \n@@ -263,10 +265,10 @@ struct gimple_opt_pass pass_build_cfg =\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CFG,\t\t\t\t/* tv_id */\n   PROP_gimple_leh, \t\t\t/* properties_required */\n-  PROP_cfg,\t\t\t\t/* properties_provided */\n+  PROP_cfg | PROP_loops,\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts | TODO_cleanup_cfg  /* todo_flags_finish */\n+  TODO_verify_stmts\t\t\t/* todo_flags_finish */\n  }\n };\n \n@@ -6713,6 +6715,18 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   d.eh_map = eh_map;\n   d.remap_decls_p = true;\n \n+  /* Cancel all loops inside the SESE region.\n+     ???  We rely on loop fixup because loop structure is not 100%\n+     up-to-date when called from OMP lowering and thus cancel_loop_tree\n+     will not work.\n+     ???  Properly move loops to the outlined function.  */\n+  FOR_EACH_VEC_ELT (bbs, i, bb)\n+    if (bb->loop_father->header == bb)\n+      {\n+\tbb->loop_father->header = NULL;\n+\tbb->loop_father->latch = NULL;\n+\tloops_state_set (LOOPS_NEED_FIXUP);\n+      }\n   FOR_EACH_VEC_ELT (bbs, i, bb)\n     {\n       /* No need to update edge counts on the last block.  It has"}, {"sha": "3c69a7df23d3709bc0091f03224ec2585bdcb781", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -748,9 +748,10 @@ cleanup_tree_cfg (void)\n   return changed;\n }\n \n-/* Merge the PHI nodes at BB into those at BB's sole successor.  */\n+/* Tries to merge the PHI nodes at BB into those at BB's sole successor.\n+   Returns true if successful.  */\n \n-static void\n+static bool\n remove_forwarder_block_with_phi (basic_block bb)\n {\n   edge succ = single_succ_edge (bb);\n@@ -762,15 +763,15 @@ remove_forwarder_block_with_phi (basic_block bb)\n      However it may happen that the infinite loop is created\n      afterwards due to removal of forwarders.  */\n   if (dest == bb)\n-    return;\n+    return false;\n \n   /* If the destination block consists of a nonlocal label, do not\n      merge it.  */\n   label = first_stmt (dest);\n   if (label\n       && gimple_code (label) == GIMPLE_LABEL\n       && DECL_NONLOCAL (gimple_label_label (label)))\n-    return;\n+    return false;\n \n   /* Redirect each incoming edge to BB to DEST.  */\n   while (EDGE_COUNT (bb->preds) > 0)\n@@ -859,6 +860,8 @@ remove_forwarder_block_with_phi (basic_block bb)\n   /* Remove BB since all of BB's incoming edges have been redirected\n      to DEST.  */\n   delete_basic_block (bb);\n+\n+  return true;\n }\n \n /* This pass merges PHI nodes if one feeds into another.  For example,\n@@ -960,13 +963,20 @@ merge_phi_nodes (void)\n     }\n \n   /* Now let's drain WORKLIST.  */\n+  bool changed = false;\n   while (current != worklist)\n     {\n       bb = *--current;\n-      remove_forwarder_block_with_phi (bb);\n+      changed |= remove_forwarder_block_with_phi (bb);\n     }\n-\n   free (worklist);\n+\n+  /* Removing forwarder blocks can cause formerly irreducible loops\n+     to become reducible if we merged two entry blocks.  */\n+  if (changed\n+      && current_loops)\n+    loops_state_set (LOOPS_NEED_FIXUP);\n+\n   return 0;\n }\n "}, {"sha": "d43172be3bf2827753cf68a6cc895be0206f0576", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-hasher.h\"\n+#include \"cfgloop.h\"\n \n \n /* For each complex ssa name, a lattice value.  We're interested in finding\n@@ -1139,6 +1140,11 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n       make_edge (bb_cond, bb_false, EDGE_FALSE_VALUE);\n       make_edge (bb_true, bb_join, EDGE_FALLTHRU);\n       make_edge (bb_false, bb_join, EDGE_FALLTHRU);\n+      if (current_loops)\n+\t{\n+\t  add_bb_to_loop (bb_true, bb_cond->loop_father);\n+\t  add_bb_to_loop (bb_false, bb_cond->loop_father);\n+\t}\n \n       /* Update dominance info.  Note that bb_join's data was\n          updated by split_block.  */"}, {"sha": "c358cbef2a731e0ab9fa31a63bd1c66aeaf83547", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"tree-pass.h\"\n #include \"target.h\"\n+#include \"cfgloop.h\"\n \n #include \"rtl.h\"\t/* FIXME: For asm_str_count.  */\n \n@@ -2088,7 +2089,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n   cfun->static_chain_decl = src_cfun->static_chain_decl;\n   cfun->nonlocal_goto_save_area = src_cfun->nonlocal_goto_save_area;\n   cfun->function_end_locus = src_cfun->function_end_locus;\n-  cfun->curr_properties = src_cfun->curr_properties & ~PROP_loops;\n+  cfun->curr_properties = src_cfun->curr_properties;\n   cfun->last_verified = src_cfun->last_verified;\n   cfun->va_list_gpr_size = src_cfun->va_list_gpr_size;\n   cfun->va_list_fpr_size = src_cfun->va_list_fpr_size;\n@@ -2193,6 +2194,45 @@ maybe_move_debug_stmts_to_successors (copy_body_data *id, basic_block new_bb)\n     }\n }\n \n+/* Make a copy of the sub-loops of SRC_PARENT and place them\n+   as siblings of DEST_PARENT.  */\n+\n+static void\n+copy_loops (bitmap blocks_to_copy,\n+\t    struct loop *dest_parent, struct loop *src_parent)\n+{\n+  struct loop *src_loop = src_parent->inner;\n+  while (src_loop)\n+    {\n+      if (!blocks_to_copy\n+\t  || bitmap_bit_p (blocks_to_copy, src_loop->header->index))\n+\t{\n+\t  struct loop *dest_loop = alloc_loop ();\n+\n+\t  /* Assign the new loop its header and latch and associate\n+\t     those with the new loop.  */\n+\t  dest_loop->header = (basic_block)src_loop->header->aux;\n+\t  dest_loop->header->loop_father = dest_loop;\n+\t  if (src_loop->latch != NULL)\n+\t    {\n+\t      dest_loop->latch = (basic_block)src_loop->latch->aux;\n+\t      dest_loop->latch->loop_father = dest_loop;\n+\t    }\n+\n+\t  /* Copy loop meta-data.  */\n+\t  copy_loop_info (src_loop, dest_loop);\n+\n+\t  /* Finally place it into the loop array and the loop tree.  */\n+\t  place_new_loop (dest_loop);\n+\t  flow_loop_tree_node_add (dest_parent, dest_loop);\n+\n+\t  /* Recurse.  */\n+\t  copy_loops (blocks_to_copy, dest_loop, src_loop);\n+\t}\n+      src_loop = src_loop->next;\n+    }\n+}\n+\n /* Make a copy of the body of FN so that it can be inserted inline in\n    another function.  Walks FN via CFG, returns new fndecl.  */\n \n@@ -2270,6 +2310,7 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n \tbasic_block new_bb = copy_bb (id, bb, frequency_scale, count_scale);\n \tbb->aux = new_bb;\n \tnew_bb->aux = bb;\n+\tnew_bb->loop_father = entry_block_map->loop_father;\n       }\n \n   last = last_basic_block;\n@@ -2290,6 +2331,16 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n       e->count = incoming_count;\n     }\n \n+  /* Duplicate the loop tree, if available and wanted.  */\n+  if (id->src_cfun->x_current_loops != NULL\n+      && current_loops != NULL)\n+    {\n+      copy_loops (blocks_to_copy, entry_block_map->loop_father,\n+\t\t  id->src_cfun->x_current_loops->tree_root);\n+      /* Defer to cfgcleanup to update loop-father fields of basic-blocks.  */\n+      loops_state_set (LOOPS_NEED_FIXUP);\n+    }\n+\n   if (gimple_in_ssa_p (cfun))\n     FOR_ALL_BB_FN (bb, cfun_to_copy)\n       if (!blocks_to_copy\n@@ -5147,6 +5198,14 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t}\n     }\n \n+  /* Set up the destination functions loop tree.  */\n+  if (DECL_STRUCT_FUNCTION (old_decl)->x_current_loops)\n+    {\n+      cfun->curr_properties &= ~PROP_loops;\n+      loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+      cfun->curr_properties |= PROP_loops;\n+    }\n+\n   /* Copy the Function's body.  */\n   copy_body (&id, old_entry_block->count, REG_BR_PROB_BASE,\n \t     ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR, blocks_to_copy, new_entry);"}, {"sha": "d399d8a98c637f3392460fa21f56b0ed364cf841", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -204,6 +204,10 @@ execute_fixup_cfg (void)\n   if (dump_file)\n     gimple_dump_cfg (dump_file, dump_flags);\n \n+  if (current_loops\n+      && (todo & TODO_cleanup_cfg))\n+    loops_state_set (LOOPS_NEED_FIXUP);\n+\n   return todo;\n }\n "}, {"sha": "4a4b02b161c5ab87c029ab98dfdfa56bc944310a", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -2216,11 +2216,6 @@ parallelize_loops (void)\n       }\n       gen_parallel_loop (loop, reduction_list,\n \t\t\t n_threads, &niter_desc);\n-#ifdef ENABLE_CHECKING\n-      verify_flow_info ();\n-      verify_loop_structure ();\n-      verify_loop_closed_ssa (true);\n-#endif\n     }\n \n   free_stmt_vec_info_vec ();"}, {"sha": "f58f7b3a0ecabf8b7ef3e8fb50f86f2d5343d3b9", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n+#include \"tree-scalar-evolution.h\"\n \n /* This file implements the copy propagation pass and provides a\n    handful of interfaces for performing const/copy propagation and\n@@ -771,9 +772,8 @@ fini_copy_prop (void)\n \tduplicate_ssa_name_ptr_info (copy_of[i].value, SSA_NAME_PTR_INFO (var));\n     }\n \n-  /* Don't do DCE if we have loops.  That's the simplest way to not\n-     destroy the scev cache.  */\n-  substitute_and_fold (get_value, NULL, !current_loops);\n+  /* Don't do DCE if SCEV is initialized.  It would destroy the scev cache.  */\n+  substitute_and_fold (get_value, NULL, !scev_initialized_p ());\n \n   free (copy_of);\n }"}, {"sha": "ae5b500d1caa955296420a62a4c9095890338f28", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -93,7 +93,7 @@ struct gimple_opt_pass pass_tree_loop_init =\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_NONE,\t\t\t\t/* tv_id */\n   PROP_cfg,\t\t\t\t/* properties_required */\n-  PROP_loops,\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   0             \t\t\t/* todo_flags_finish */\n@@ -577,7 +577,7 @@ struct gimple_opt_pass pass_parallelize_loops =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0             \t\t\t/* todo_flags_finish */\n+  TODO_verify_flow\t\t\t/* todo_flags_finish */\n  }\n };\n "}, {"sha": "5e99678ac01caba423e2b312b533ea9c41ead449", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-config.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"tree-scalar-evolution.h\"\n \n #ifndef HAVE_conditional_move\n #define HAVE_conditional_move (0)\n@@ -242,7 +243,16 @@ tree_ssa_phiopt (void)\n static unsigned int\n tree_ssa_cs_elim (void)\n {\n-  return tree_ssa_phiopt_worker (true, false);\n+  unsigned todo;\n+  /* ???  We are not interested in loop related info, but the following\n+     will create it, ICEing as we didn't init loops with pre-headers.\n+     An interfacing issue of find_data_references_in_bb.  */\n+  loop_optimizer_init (LOOPS_NORMAL);\n+  scev_initialize ();\n+  todo = tree_ssa_phiopt_worker (true, false);\n+  scev_finalize ();\n+  loop_optimizer_finalize ();\n+  return todo;\n }\n \n /* Return the singleton PHI in the SEQ of PHIs for edges E0 and E1. */"}, {"sha": "f2ab744403a6e44909a348963e7e0d12679e228d", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -197,6 +197,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"tree-ssa-sccvn.h\"\n #include \"tree-dump.h\"\n+#include \"cfgloop.h\"\n \n /* ??? This currently runs as part of tree-ssa-pre.  Why is this not\n    a stand-alone GIMPLE pass?  */\n@@ -1459,6 +1460,17 @@ replace_block_by (basic_block bb1, basic_block bb2)\n   /* Mark the basic block as deleted.  */\n   mark_basic_block_deleted (bb1);\n \n+  /* ???  If we merge the loop preheader with the loop latch we are creating\n+     additional entries into the loop, eventually rotating it.\n+     Mark loops for fixup in this case.\n+     ???  This is a completely unwanted transform and will wreck most\n+     loops at this point - but with just not considering loop latches as\n+     merge candidates we fail to commonize the two loops in gcc.dg/pr50763.c.\n+     A better fix to avoid that regression is needed.  */\n+  if (current_loops\n+      && bb2->loop_father->latch == bb2)\n+    loops_state_set (LOOPS_NEED_FIXUP);\n+\n   /* Redirect the incoming edges of bb1 to bb2.  */\n   for (i = EDGE_COUNT (bb1->preds); i > 0 ; --i)\n     {"}, {"sha": "9ad7daf0689bc0aca63283abfdd8622201c9655e", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e0d843713b294d12c3a3faedbc0c817e581014/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=a9e0d843713b294d12c3a3faedbc0c817e581014", "patch": "@@ -36,6 +36,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-ssa-operands.h\"\n #include \"tree-pass.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"cfgloop.h\"\n \n /* ??? For lang_hooks.types.type_for_mode, but is there a word_mode\n    type in the GIMPLE type system that is language-independent?  */\n@@ -1351,6 +1352,8 @@ process_switch (gimple swtch)\n \t    fputs (\"  expanding as bit test is preferable\\n\", dump_file);\n \t  emit_case_bit_tests (swtch, info.index_expr,\n \t\t\t       info.range_min, info.range_size);\n+\t  if (current_loops)\n+\t    loops_state_set (LOOPS_NEED_FIXUP);\n \t  return NULL;\n \t}\n "}]}