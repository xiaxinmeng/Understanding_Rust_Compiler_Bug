{"sha": "d84b344a6c22cb816af1f204ff782b9f2e5166b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0YjM0NGE2YzIyY2I4MTZhZjFmMjA0ZmY3ODJiOWYyZTUxNjZiNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-09-20T08:41:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-09-20T08:41:55Z"}, "message": "re PR ada/37585 (undefined references at -O for ACATS c650001)\n\n\tPR ada/37585\n\t* gcc-interface/utils.c (create_subprog_decl): Disable inlining for\n\tinlined external functions if they contain a nested function not\n\tdeclared inline.\n\nFrom-SVN: r140511", "tree": {"sha": "01f17ee8aeb1ae30d0a5919e846d0bead70c7d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f17ee8aeb1ae30d0a5919e846d0bead70c7d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d84b344a6c22cb816af1f204ff782b9f2e5166b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84b344a6c22cb816af1f204ff782b9f2e5166b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84b344a6c22cb816af1f204ff782b9f2e5166b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84b344a6c22cb816af1f204ff782b9f2e5166b5/comments", "author": null, "committer": null, "parents": [{"sha": "398857e4fbe5915a0d9a946ed6db4ac5c693ed77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398857e4fbe5915a0d9a946ed6db4ac5c693ed77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398857e4fbe5915a0d9a946ed6db4ac5c693ed77"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "186a59466b42c87b872d4d9d93fc4889ccf4ad87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84b344a6c22cb816af1f204ff782b9f2e5166b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84b344a6c22cb816af1f204ff782b9f2e5166b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d84b344a6c22cb816af1f204ff782b9f2e5166b5", "patch": "@@ -1,3 +1,10 @@\n+2008-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/37585\n+\t* gcc-interface/utils.c (create_subprog_decl): Disable inlining for\n+\tinlined external functions if they contain a nested function not\n+\tdeclared inline.\n+\n 2008-09-18  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc-interface/utils.c (create_subprog_decl): Use DECL_DECLARED_INLINE_P."}, {"sha": "7f1bc7bebbb1af1fa6b7c3e3ec7fbe469bb67e08", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84b344a6c22cb816af1f204ff782b9f2e5166b5/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84b344a6c22cb816af1f204ff782b9f2e5166b5/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d84b344a6c22cb816af1f204ff782b9f2e5166b5", "patch": "@@ -1973,19 +1973,24 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n   tree return_type  = TREE_TYPE (subprog_type);\n   tree subprog_decl = build_decl (FUNCTION_DECL, subprog_name, subprog_type);\n \n-  /* If this is a function nested inside an inlined external function, it\n-     means we aren't going to compile the outer function unless it is\n-     actually inlined, so do the same for us.  */\n-  if (current_function_decl && DECL_DECLARED_INLINE_P (current_function_decl)\n+  /* If this is a non-inline function nested inside an inlined external\n+     function, we cannot honor both requests without cloning the nested\n+     function in the current unit since it is private to the other unit.\n+     We could inline the nested function as well but it's probably better\n+     to err on the side of too little inlining.  */\n+  if (!inline_flag\n+      && current_function_decl\n+      && DECL_DECLARED_INLINE_P (current_function_decl)\n       && DECL_EXTERNAL (current_function_decl))\n-    extern_flag = true;\n+    DECL_DECLARED_INLINE_P (current_function_decl) = 0;\n \n   DECL_EXTERNAL (subprog_decl)  = extern_flag;\n   TREE_PUBLIC (subprog_decl)    = public_flag;\n   TREE_STATIC (subprog_decl)\t= 1;\n   TREE_READONLY (subprog_decl)  = TYPE_READONLY (subprog_type);\n   TREE_THIS_VOLATILE (subprog_decl) = TYPE_VOLATILE (subprog_type);\n   TREE_SIDE_EFFECTS (subprog_decl) = TYPE_VOLATILE (subprog_type);\n+  DECL_DECLARED_INLINE_P (subprog_decl) = inline_flag;\n   DECL_ARGUMENTS (subprog_decl) = param_decl_list;\n   DECL_RESULT (subprog_decl)    = build_decl (RESULT_DECL, 0, return_type);\n   DECL_ARTIFICIAL (DECL_RESULT (subprog_decl)) = 1;\n@@ -2004,9 +2009,6 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n       DECL_BY_REFERENCE (result_decl) = 1;\n     }\n \n-  if (inline_flag)\n-    DECL_DECLARED_INLINE_P (subprog_decl) = 1;\n-\n   if (asm_name)\n     {\n       SET_DECL_ASSEMBLER_NAME (subprog_decl, asm_name);"}]}