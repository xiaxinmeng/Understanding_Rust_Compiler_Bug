{"sha": "df8992f8f3270619b200bd065b3da9de118efc77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4OTkyZjhmMzI3MDYxOWIyMDBiZDA2NWIzZGE5ZGUxMThlZmM3Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-27T22:19:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-27T22:19:59Z"}, "message": "haifa-sched.c (reemit_other_notes): New.\n\n        * haifa-sched.c (reemit_other_notes): New.\n        (schedule_block): Use it.\n        * sched-ebb.c (schedule_ebbs): Call remove_unnecessary_notes.\n        * sched-rgn.c (schedule_insns): Likewise.\n        * cfglayout.c (remove_scope_notes): Handle removing note at\n        the end of the insn chain.\n        * function.c (debug_find_var_in_block_tree): New.\n\n        * gcc.dg/debug-1.c, gcc.dg/debug-2.c: New.\n\nFrom-SVN: r48333", "tree": {"sha": "a7f9af2b63f2968b5377756f9c3886f53c2600dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f9af2b63f2968b5377756f9c3886f53c2600dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8992f8f3270619b200bd065b3da9de118efc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8992f8f3270619b200bd065b3da9de118efc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8992f8f3270619b200bd065b3da9de118efc77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8992f8f3270619b200bd065b3da9de118efc77/comments", "author": null, "committer": null, "parents": [{"sha": "bb2ae697ab610f10045da76435c9934d06dce608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2ae697ab610f10045da76435c9934d06dce608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2ae697ab610f10045da76435c9934d06dce608"}], "stats": {"total": 157, "additions": 138, "deletions": 19}, "files": [{"sha": "c6c6b921e2a884b9c51f249d3ed910f0e19ae195", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -1,3 +1,13 @@\n+2001-12-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* haifa-sched.c (reemit_other_notes): New.\n+\t(schedule_block): Use it.\n+\t* sched-ebb.c (schedule_ebbs): Call remove_unnecessary_notes.\n+\t* sched-rgn.c (schedule_insns): Likewise.\n+\t* cfglayout.c (remove_scope_notes): Handle removing note at\n+\tthe end of the insn chain.\n+\t* function.c (debug_find_var_in_block_tree): New.\n+\n 2001-12-27  Alan Modra  <amodra@bigpond.net.au>\n \t    David Edelsohn  <edelsohn@gnu.org>\n "}, {"sha": "e0adb53c71a9e203effe0dd59f92ddcd9f248793", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -540,7 +540,8 @@ remove_scope_notes ()\n \t  if (PREV_INSN (x))\n \t    {\n \t      NEXT_INSN (PREV_INSN (x)) = next;\n-\t      PREV_INSN (next) = PREV_INSN (x);\n+\t      if (next)\n+\t        PREV_INSN (next) = PREV_INSN (x);\n \n               NEXT_INSN (x) = NULL;\n               PREV_INSN (x) = NULL;"}, {"sha": "097aea44684ca8f830b160f4dbe98d2349948f0e", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -277,6 +277,7 @@ static void reorder_fix_fragments PARAMS ((tree));\n static tree blocks_nreverse\tPARAMS ((tree));\n static int all_blocks\t\tPARAMS ((tree, tree *));\n static tree *get_block_vector   PARAMS ((tree, int *));\n+extern tree debug_find_var_in_block_tree PARAMS ((tree, tree));\n /* We always define `record_insns' even if its not used so that we\n    can always export `prologue_epilogue_contains'.  */\n static void record_insns\tPARAMS ((rtx, varray_type *)) ATTRIBUTE_UNUSED;\n@@ -6051,6 +6052,29 @@ number_blocks (fn)\n \n   return;\n }\n+\n+/* If VAR is present in a subblock of BLOCK, return the subblock.  */\n+\n+tree\n+debug_find_var_in_block_tree (var, block)\n+     tree var;\n+     tree block;\n+{\n+  tree t;\n+\n+  for (t = BLOCK_VARS (block); t; t = TREE_CHAIN (t))\n+    if (t == var)\n+      return block;\n+\n+  for (t = BLOCK_SUBBLOCKS (block); t; t = TREE_CHAIN (t))\n+    {\n+      tree ret = debug_find_var_in_block_tree (var, t);\n+      if (ret)\n+\treturn ret;\n+    }\n+\n+  return NULL_TREE;\n+}\n \f\n /* Allocate a function structure and reset its contents to the defaults.  */\n "}, {"sha": "ca6cfbb1d4f542732342910e58f1a8313df6fbad", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -319,6 +319,7 @@ static void adjust_priority PARAMS ((rtx));\n static rtx unlink_other_notes PARAMS ((rtx, rtx));\n static rtx unlink_line_notes PARAMS ((rtx, rtx));\n static rtx reemit_notes PARAMS ((rtx, rtx));\n+static rtx reemit_other_notes PARAMS ((rtx, rtx));\n \n static rtx *ready_lastpos PARAMS ((struct ready_list *));\n static void ready_sort PARAMS ((struct ready_list *));\n@@ -1575,6 +1576,60 @@ reemit_notes (insn, last)\n   return retval;\n }\n \n+\n+/* NOTE_LIST is the end of a chain of notes previously found among the\n+   insns.  Insert them at the beginning of the insns.  Actually, insert\n+   NOTE_INSN_BLOCK_END notes at the end of the insns.  Doing otherwise\n+   tends to collapse lexical blocks into empty regions, which is somewhat\n+   less than useful.  */\n+/* ??? Ideally we'd mark each insn with the block it originated from,\n+   and preserve that information.  This requires some moderately\n+   sophisticated block reconstruction code, since block nestings must\n+   be preserved.  */\n+\n+static rtx\n+reemit_other_notes (head, tail)\n+     rtx head, tail;\n+{\n+  bool saw_block_beg = false;\n+\n+  while (note_list)\n+    {\n+      rtx note_tail = note_list;\n+      note_list = PREV_INSN (note_tail);\n+\n+      if (NOTE_LINE_NUMBER (note_tail) == NOTE_INSN_BLOCK_END\n+\t  /* We can only extend the lexical block while we havn't\n+\t     seen a BLOCK_BEG note.  Otherwise we risk mis-nesting\n+\t     the notes.  */\n+\t  && ! saw_block_beg)\n+\t{\n+\t  rtx insert_after = tail;\n+\t  if (GET_CODE (NEXT_INSN (tail)) == BARRIER)\n+\t    insert_after = NEXT_INSN (tail);\n+\n+\t  PREV_INSN (note_tail) = insert_after;\n+\t  NEXT_INSN (note_tail) = NEXT_INSN (insert_after);\n+\t  if (NEXT_INSN (insert_after))\n+\t    PREV_INSN (NEXT_INSN (insert_after)) = note_tail;\n+\t  NEXT_INSN (insert_after) = note_tail;\n+\t}\n+      else\n+\t{\n+\t  if (NOTE_LINE_NUMBER (note_tail) == NOTE_INSN_BLOCK_BEG)\n+\t    saw_block_beg = true;\n+\n+\t  PREV_INSN (note_tail) = PREV_INSN (head);\n+\t  NEXT_INSN (PREV_INSN (head)) = note_tail;\n+\t  NEXT_INSN (note_tail) = head;\n+\t  PREV_INSN (head) = note_tail;\n+\t  head = note_tail;\n+\t}\n+    }\n+\n+  return head;\n+}\n+\n /* Move INSN, and all insns which should be issued before it,\n    due to SCHED_GROUP_P flag.  Reemit notes if needed.\n \n@@ -1800,24 +1855,7 @@ schedule_block (b, rgn_n_insns)\n   head = NEXT_INSN (prev_head);\n   tail = last;\n \n-  /* Restore-other-notes: NOTE_LIST is the end of a chain of notes\n-     previously found among the insns.  Insert them at the beginning\n-     of the insns.  */\n-  if (note_list != 0)\n-    {\n-      rtx note_head = note_list;\n-\n-      while (PREV_INSN (note_head))\n-\t{\n-\t  note_head = PREV_INSN (note_head);\n-\t}\n-\n-      PREV_INSN (note_head) = PREV_INSN (head);\n-      NEXT_INSN (PREV_INSN (head)) = note_head;\n-      PREV_INSN (head) = note_list;\n-      NEXT_INSN (note_list) = head;\n-      head = note_head;\n-    }\n+  head = reemit_other_notes (head, tail);\n \n   /* Debugging.  */\n   if (sched_verbose)"}, {"sha": "13b9fe6602d0c0b0df6543f9f954ceed1db4a366", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -285,6 +285,10 @@ schedule_ebbs (dump_file)\n   if (n_basic_blocks == 0)\n     return;\n \n+  /* Remove lexical block notes for empty regions.  These get shuffled\n+     about during scheduling and confuse the debugging issue.  */\n+  remove_unnecessary_notes ();\n+\n   sched_init (dump_file);\n \n   current_sched_info = &ebb_sched_info;"}, {"sha": "6824204622132be195458c20fd547e95a9c49894", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -2896,6 +2896,10 @@ schedule_insns (dump_file)\n   if (n_basic_blocks == 0)\n     return;\n \n+  /* Remove lexical block notes for empty regions.  These get shuffled\n+     about during scheduling and confuse the debugging issue.  */\n+  remove_unnecessary_notes ();\n+\n   nr_inter = 0;\n   nr_spec = 0;\n "}, {"sha": "915a148a432aed7188b505b4100ce17ac6915d6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -1,3 +1,7 @@\n+2001-12-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/debug-1.c, gcc.dg/debug-2.c: New.\n+\n 2001-12-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/eh/ctor1.C: New test."}, {"sha": "1e53b14eb5c623f5f6bc2020802144ec17732120", "filename": "gcc/testsuite/gcc.dg/debug-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-1.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that the scheduler does not discard the lexical block.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -dA\" } */\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+\n+long foo(long p)\n+{\n+  {\n+    long xyzzy = 0;\n+    if (p)\n+      xyzzy = 2;\n+    return xyzzy;\n+  }\n+}"}, {"sha": "4305059ba7baf983163d3a69087052b0d76c493a", "filename": "gcc/testsuite/gcc.dg/debug-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8992f8f3270619b200bd065b3da9de118efc77/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug-2.c?ref=df8992f8f3270619b200bd065b3da9de118efc77", "patch": "@@ -0,0 +1,20 @@\n+/* Verify that the scheduler does not discard the lexical block.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -dA\" } */\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+\n+long foo(long p)\n+{\n+  if (1)\n+    {\n+      long xyzzy = 0;\n+      if (p)\n+        xyzzy = 2;\n+      return xyzzy;\n+    }\n+  else\n+    {\n+      int x = 0;\n+      return x;\n+    }\n+}"}]}