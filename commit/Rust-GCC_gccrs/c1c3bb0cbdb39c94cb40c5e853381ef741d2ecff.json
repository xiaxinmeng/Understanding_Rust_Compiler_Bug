{"sha": "c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjM2JiMGNiZGIzOWM5NGNiNDBjNWU4NTMzODFlZjc0MWQyZWNmZg==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2004-02-20T12:55:00Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2004-02-20T12:55:00Z"}, "message": "install.texi: Moved --disable-libgcj and --with-system-zlib documentation to new section for...\n\n\t* doc/install.texi: Moved --disable-libgcj and\n\t--with-system-zlib documentation to new section for\n\tJava-specific options.\n\tAdded explicit Cross-Compiler-Specific Options subheading.\n\tAdded section for Java-specific options.\n\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r78166", "tree": {"sha": "ef61b6c8c5d74d65d64a7fdbc20e939426704edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef61b6c8c5d74d65d64a7fdbc20e939426704edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff/comments", "author": null, "committer": null, "parents": [{"sha": "6e059adb240df3f9918401dbacca61c283e618ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e059adb240df3f9918401dbacca61c283e618ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e059adb240df3f9918401dbacca61c283e618ed"}], "stats": {"total": 170, "additions": 150, "deletions": 20}, "files": [{"sha": "0a8495525ba8e181a404bb4a27819508ffa7d70c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "patch": "@@ -1,3 +1,12 @@\n+2004-02-20  Mohan Embar  <gnustuff@thisiscool.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\n+\t* doc/install.texi: Moved --disable-libgcj and\n+\t--with-system-zlib documentation to new section for\n+\tJava-specific options.\n+\tAdded explicit Cross-Compiler-Specific Options subheading.\n+\tAdded section for Java-specific options.\n+\n 2004-02-20  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* doc/install.texi (Building the Ada compiler): Remove"}, {"sha": "45763ab12facdea94052eb6c73cad364f4364eb6", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 141, "deletions": 20, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c1c3bb0cbdb39c94cb40c5e853381ef741d2ecff", "patch": "@@ -554,6 +554,10 @@ GCC@.  A list of supported @var{options} follows; @samp{configure\n --help} may list other options, but those not listed below may not\n work and should not normally be used.\n \n+Note that each @option{--enable} option has a corresponding\n+@option{--disable} option and that each @option{--with} option has a\n+corresponding @option{--without} option.\n+\n @table @code\n @item --prefix=@var{dirname}\n Specify the toplevel installation\n@@ -1034,18 +1038,6 @@ be built.  This can be useful for debugging, or for compatibility with\n previous Ada build procedures, when it was required to explicitly\n do a @samp{make -C gcc gnatlib_and_tools}.\n \n-@item --disable-libgcj\n-Specify that the run-time libraries\n-used by GCJ should not be built.  This is useful in case you intend\n-to use GCJ with some other run-time, or you're going to install it\n-separately, or it just happens not to build on your particular\n-machine.  In general, if the Java front end is enabled, the GCJ\n-libraries will be enabled too, unless they're known to not work on\n-the target platform.  If GCJ is enabled but @samp{libgcj} isn't built, you\n-may need to port it; in this case, before modifying the top-level\n-@file{configure.in} so that @samp{libgcj} is enabled by default on this platform,\n-you may use @option{--enable-libgcj} to override the default.\n-\n @item --with-dwarf2\n Specify that the compiler should\n use DWARF 2 debugging information as the default.\n@@ -1139,10 +1131,6 @@ build procedure to use the host's @code{catgets} in this situation.\n Search for libiconv header files in @file{@var{dir}/include} and\n libiconv library files in @file{@var{dir}/lib}.\n \n-@item --with-system-zlib\n-Use installed zlib rather than that included with GCC@.  This option\n-only applies if the Java front end is being built.\n-\n @item --enable-obsolete\n Enable configuration for an obsoleted system.  If you attempt to\n configure GCC for a system (build, host, or target) which has been\n@@ -1154,7 +1142,8 @@ is removed entirely in the next major release, unless someone steps\n forward to maintain the port.\n @end table\n \n-Some options which only apply to building cross compilers:\n+@subheading Cross-Compiler-Specific Options\n+The following options only apply to building cross compilers.\n @table @code\n @item --with-sysroot\n @itemx --with-sysroot=@var{dir}\n@@ -1202,9 +1191,141 @@ omitted from @file{libgcc.a} on the assumption that it will be provided by\n @samp{newlib}.\n @end table\n \n-Note that each @option{--enable} option has a corresponding\n-@option{--disable} option and that each @option{--with} option has a\n-corresponding @option{--without} option.\n+@subheading Java-Specific Options\n+\n+The following option applies to the build of the Java front end.\n+\n+@table @code\n+@item --disable-libgcj\n+Specify that the run-time libraries\n+used by GCJ should not be built.  This is useful in case you intend\n+to use GCJ with some other run-time, or you're going to install it\n+separately, or it just happens not to build on your particular\n+machine.  In general, if the Java front end is enabled, the GCJ\n+libraries will be enabled too, unless they're known to not work on\n+the target platform.  If GCJ is enabled but @samp{libgcj} isn't built, you\n+may need to port it; in this case, before modifying the top-level\n+@file{configure.in} so that @samp{libgcj} is enabled by default on this platform,\n+you may use @option{--enable-libgcj} to override the default.\n+\n+@end table\n+\n+The following options apply to building @samp{libgcj}.\n+\n+@subsubheading General Options\n+\n+@table @code\n+@item --disable-getenv-properties\n+Don't set system properties from @env{GCJ_PROPERTIES}.\n+\n+@item --enable-hash-synchronization\n+Use a global hash table for monitor locks. Ordinarily,\n+@samp{libgcj}'s @samp{configure} script automatically makes\n+the correct choice for this option for your platform. Only use\n+this if you know you need the library to be configured differently.\n+\n+@item --enable-interpreter\n+Enable the Java interpreter. The interpreter is automatically\n+enabled by default on all platforms that support it. This option\n+is really only useful if you want to disable the interpreter\n+(using @option{--disable-interpreter}).\n+\n+@item --disable-java-net\n+Disable java.net. This disables the native part of java.net only,\n+using non-functional stubs for native method implementations.\n+\n+@item --disable-jvmpi\n+Disable JVMPI support.\n+\n+@item --with-ecos\n+Enable runtime eCos target support.\n+\n+@item --without-libffi\n+Don't use @samp{libffi}. This will disable the interpreter and JNI\n+support as well, as these require @samp{libffi} to work.\n+\n+@item --enable-libgcj-debug\n+Enable runtime debugging code.\n+\n+@item --enable-libgcj-multifile\n+If specified, causes all @file{.java} source files to be\n+compiled into @file{.class} files in one invocation of\n+@samp{gcj}. This can speed up build time, but is more\n+resource-intensive. If this option is unspecified or\n+disabled, @samp{gcj} is invoked once for each @file{.java}\n+file to compile into a @file{.class} file.\n+\n+@item --with-libiconv-prefix=DIR\n+Search for libiconv in @file{DIR/include} and @file{DIR/lib}.\n+\n+@item --enable-sjlj-exceptions\n+Force use of @code{builtin_setjmp} for exceptions. @samp{configure}\n+ordinarily picks the correct value based on the platform. Only use\n+this option if you are sure you need a different setting.\n+\n+@item --with-system-zlib\n+Use installed @samp{zlib} rather than that included with GCC@.\n+\n+@item --with-win32-nlsapi=ansi, unicows or unicode\n+Indicates how MinGW @samp{libgcj} translates between UNICODE\n+characters and the Win32 API.\n+@table @code\n+@item ansi\n+Use the single-byte @code{char} and the Win32 A functions natively,\n+translating to and from UNICODE when using these functions. If\n+unspecified, this is the default.\n+\n+@item unicows\n+Use the @code{WCHAR} and Win32 W functions natively. Adds\n+@code{-lunicows} to @file{libgcj.spec} to link with @samp{libunicows}.\n+@file{unicows.dll} needs to be deployed on Microsoft Windows 9X machines\n+running built executables. @file{libunicows.a}, an open-source\n+import library around Microsoft's @code{unicows.dll}, is obtained from\n+@uref{http://libunicows.sourceforge.net/}, which also gives details\n+on getting @file{unicows.dll} from Microsoft.\n+\n+@item unicode\n+Use the @code{WCHAR} and Win32 W functions natively. Does @emph{not}\n+add @code{-lunicows} to @file{libgcj.spec}. The built executables will\n+only run on Microsoft Windows NT and above.\n+@end table\n+@end table\n+\n+@subsubheading AWT-Specific Options\n+\n+@table @code\n+@item --with-x\n+Use the X Window System.\n+\n+@item --enable-java-awt=PEER(S)\n+Specifies the AWT peer library or libraries to build alongside\n+@samp{libgcj}. If this option is unspecified or disabled, AWT\n+will be non-functional. Current valid values are @option{gtk} and\n+@option{xlib}. Multiple libraries should be separated by a\n+comma (i.e. @option{--enable-java-awt=gtk,xlib}).\n+\n+@item --enable-gtk-cairo\n+Build the cairo Graphics2D implementation on GTK.\n+\n+@item --enable-java-gc=TYPE\n+Choose garbage collector. Defaults to @option{boehm} if unspecified.\n+\n+@item --disable-gtktest\n+Do not try to compile and run a test GTK+ program.\n+\n+@item --disable-glibtest\n+Do not try to compile and run a test GLIB program.\n+\n+@item --with-libart-prefix=PFX\n+Prefix where libart is installed (optional).\n+\n+@item --with-libart-exec-prefix=PFX\n+Exec prefix where libart is installed (optional).\n+\n+@item --disable-libarttest\n+Do not try to compile and run a test libart program.\n+\n+@end table\n \n @html\n <hr />"}]}