{"sha": "aa500b7a972aebff7375a093c2a7d90aad427b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1MDBiN2E5NzJhZWJmZjczNzVhMDkzYzJhN2Q5MGFhZDQyN2I2NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:24:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:24:31Z"}, "message": "[multiple changes]\n\n2013-10-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb: Remove Integrity_Level from the node usage list.\n\t(Has_Option): Update the implementation to match\n\tthe new terminology.\n\t(Has_Property): Renamed to Has_Option.\n\t(Integrity_Level): Removed.\n\t(Is_External_State): New routine.\n\t(Is_Input_Only_State): Use Has_Option to determine whether a state\n\tis Input_Only.\t(Is_Input_State): Renamed to Is_Input_Only_State.\n\t(Is_Output_Only_State): Use Has_Option to determine whether\n\ta state is Output_Only.\n\t(Is_Output_State): Renamed to\n\tIs_Output_Only_State.\n\t(Is_Volatile_State): Use Has_Option to determine whether a state is\n\tvolatile.\n\t(Set_Integrity_Level): Removed.\n\t(Write_Field8): Remove the entry for Integrity_Level.\n\t* einfo.ads: Remove Integrity_Level along with its documentation\n\tand usage in nodes.  Rename Is_Input_State to Is_Input_Only_State.\n\tRename Is_Output_State to Is_Output_Only_State.  Update the\n\tdocumentation of Is_Volatile_State.  Update the node structure of\n\tE_Abstract_Entity.\n\t(Integrity_Level): Removed along with pragma Inline.\n\t(Is_External_State): New routine.\n\t(Is_Input_State): Renamed to Is_Input_Only_State.\n\t(Is_Output_State): Renamed to Is_Output_Only_State.\n\t(Set_Integrity_Level): Removed along with pragma Inline.\n\t* sem_prag.adb (Analyze_Pragma): Update the checks regarding\n\tglobal items and abstract state modes. Update the implementation\n\tof pragma Abstract_State to reflect the new rules and terminology.\n\t* snames.ads-tmpl: Remove the predefined name for Integrity\n\tlevel. Add new predefined names for Input_Only, Non_Volatile,\n\tOutput_Only and Part_Of.\n\n2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): Do not generate a reference\n\twithin a _postcondition procedure: a proper source reference has\n\talready been generated when pre- analyzing the original aspect\n\tspecification, and the use of a formal in a pre/postcondition\n\tshould not count as a proper use in a subprogram body.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb (Why_Non_Static): Fix bomb for deferred constant\n\tcase\n\nFrom-SVN: r203360", "tree": {"sha": "23664dda4e4f7e9f55c014d1921b4a4be1954107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23664dda4e4f7e9f55c014d1921b4a4be1954107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa500b7a972aebff7375a093c2a7d90aad427b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa500b7a972aebff7375a093c2a7d90aad427b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa500b7a972aebff7375a093c2a7d90aad427b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa500b7a972aebff7375a093c2a7d90aad427b65/comments", "author": null, "committer": null, "parents": [{"sha": "e7f23f0645d60bad0ce49f0983f18f4e5d01a93e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f23f0645d60bad0ce49f0983f18f4e5d01a93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f23f0645d60bad0ce49f0983f18f4e5d01a93e"}], "stats": {"total": 370, "additions": 224, "deletions": 146}, "files": [{"sha": "6c2968415d95275357ece38292fc1ba5c031392f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -1,3 +1,51 @@\n+2013-10-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb: Remove Integrity_Level from the node usage list.\n+\t(Has_Option): Update the implementation to match\n+\tthe new terminology.\n+\t(Has_Property): Renamed to Has_Option.\n+\t(Integrity_Level): Removed.\n+\t(Is_External_State): New routine.\n+\t(Is_Input_Only_State): Use Has_Option to determine whether a state\n+\tis Input_Only.\t(Is_Input_State): Renamed to Is_Input_Only_State.\n+\t(Is_Output_Only_State): Use Has_Option to determine whether\n+\ta state is Output_Only.\n+\t(Is_Output_State): Renamed to\n+\tIs_Output_Only_State.\n+\t(Is_Volatile_State): Use Has_Option to determine whether a state is\n+\tvolatile.\n+\t(Set_Integrity_Level): Removed.\n+\t(Write_Field8): Remove the entry for Integrity_Level.\n+\t* einfo.ads: Remove Integrity_Level along with its documentation\n+\tand usage in nodes.  Rename Is_Input_State to Is_Input_Only_State.\n+\tRename Is_Output_State to Is_Output_Only_State.  Update the\n+\tdocumentation of Is_Volatile_State.  Update the node structure of\n+\tE_Abstract_Entity.\n+\t(Integrity_Level): Removed along with pragma Inline.\n+\t(Is_External_State): New routine.\n+\t(Is_Input_State): Renamed to Is_Input_Only_State.\n+\t(Is_Output_State): Renamed to Is_Output_Only_State.\n+\t(Set_Integrity_Level): Removed along with pragma Inline.\n+\t* sem_prag.adb (Analyze_Pragma): Update the checks regarding\n+\tglobal items and abstract state modes. Update the implementation\n+\tof pragma Abstract_State to reflect the new rules and terminology.\n+\t* snames.ads-tmpl: Remove the predefined name for Integrity\n+\tlevel. Add new predefined names for Input_Only, Non_Volatile,\n+\tOutput_Only and Part_Of.\n+\n+2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Do not generate a reference\n+\twithin a _postcondition procedure: a proper source reference has\n+\talready been generated when pre- analyzing the original aspect\n+\tspecification, and the use of a formal in a pre/postcondition\n+\tshould not count as a proper use in a subprogram body.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb (Why_Non_Static): Fix bomb for deferred constant\n+\tcase\n+\n 2013-10-10  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* aspects.adb: Add an entry for Aspect_Refined_Post in table"}, {"sha": "da7fa2d6b3a095919ee06221ab9b3b8341c927bd", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -76,7 +76,6 @@ package body Einfo is\n    --    Associated_Node_For_Itype       Node8\n    --    Dependent_Instances             Elist8\n    --    Hiding_Loop_Variable            Node8\n-   --    Integrity_Level                 Uint8\n    --    Mechanism                       Uint8 (but returns Mechanism_Type)\n    --    Normalized_First_Bit            Uint8\n    --    Postcondition_Proc              Node8\n@@ -584,11 +583,11 @@ package body Einfo is\n    -- Local subprograms --\n    -----------------------\n \n-   function Has_Property\n-     (State    : Entity_Id;\n-      Prop_Nam : Name_Id) return Boolean;\n-   --  Determine whether abstract state State has a particular property denoted\n-   --  by the name Prop_Nam.\n+   function Has_Option\n+     (State   : Entity_Id;\n+      Opt_Nam : Name_Id) return Boolean;\n+   --  Determine whether abstract state State has a particular option denoted\n+   --  by the name Opt_Nam.\n \n    ---------------\n    -- Float_Rep --\n@@ -600,40 +599,40 @@ package body Einfo is\n       return F'Val (UI_To_Int (Uint10 (Base_Type (Id))));\n    end Float_Rep;\n \n-   ------------------\n-   -- Has_Property --\n-   ------------------\n+   ----------------\n+   -- Has_Option --\n+   ----------------\n \n-   function Has_Property\n-     (State    : Entity_Id;\n-      Prop_Nam : Name_Id) return Boolean\n+   function Has_Option\n+     (State   : Entity_Id;\n+      Opt_Nam : Name_Id) return Boolean\n    is\n-      Par  : constant Node_Id := Parent (State);\n-      Prop : Node_Id;\n+      Par : constant Node_Id := Parent (State);\n+      Opt : Node_Id;\n \n    begin\n       pragma Assert (Ekind (State) = E_Abstract_State);\n \n-      --  States with properties appear as extension aggregates in the tree\n+      --  States with options appear as extension aggregates in the tree\n \n       if Nkind (Par) = N_Extension_Aggregate then\n-         if Prop_Nam = Name_Integrity then\n+         if Opt_Nam = Name_Part_Of then\n             return Present (Component_Associations (Par));\n \n          else\n-            Prop := First (Expressions (Par));\n-            while Present (Prop) loop\n-               if Chars (Prop) = Prop_Nam then\n+            Opt := First (Expressions (Par));\n+            while Present (Opt) loop\n+               if Chars (Opt) = Opt_Nam then\n                   return True;\n                end if;\n \n-               Next (Prop);\n+               Next (Opt);\n             end loop;\n          end if;\n       end if;\n \n       return False;\n-   end Has_Property;\n+   end Has_Option;\n \n    --------------------------------\n    -- Attribute Access Functions --\n@@ -1760,12 +1759,6 @@ package body Einfo is\n       return Node28 (Id);\n    end Initialization_Statements;\n \n-   function Integrity_Level (Id : E) return U is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      return Uint8 (Id);\n-   end Integrity_Level;\n-\n    function Inner_Instances (Id : E) return L is\n    begin\n       return Elist23 (Id);\n@@ -4386,12 +4379,6 @@ package body Einfo is\n       Set_Node28 (Id, V);\n    end Set_Initialization_Statements;\n \n-   procedure Set_Integrity_Level (Id : E; V : Uint) is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      Set_Uint8 (Id, V);\n-   end Set_Integrity_Level;\n-\n    procedure Set_Inner_Instances (Id : E; V : L) is\n    begin\n       Set_Elist23 (Id, V);\n@@ -6655,6 +6642,16 @@ package body Einfo is\n                   and then Is_Entity_Attribute_Name (Attribute_Name (N)));\n    end Is_Entity_Name;\n \n+   -----------------------\n+   -- Is_External_State --\n+   -----------------------\n+\n+   function Is_External_State (Id : E) return B is\n+   begin\n+      return\n+        Ekind (Id) = E_Abstract_State and then Has_Option (Id, Name_External);\n+   end Is_External_State;\n+\n    ------------------\n    -- Is_Finalizer --\n    ------------------\n@@ -6690,15 +6687,16 @@ package body Einfo is\n       end if;\n    end Is_Ghost_Subprogram;\n \n-   --------------------\n-   -- Is_Input_State --\n-   --------------------\n+   -------------------------\n+   -- Is_Input_Only_State --\n+   -------------------------\n \n-   function Is_Input_State (Id : E) return B is\n+   function Is_Input_Only_State (Id : E) return B is\n    begin\n       return\n-        Ekind (Id) = E_Abstract_State and then Has_Property (Id, Name_Input);\n-   end Is_Input_State;\n+        Ekind (Id) = E_Abstract_State\n+          and then Has_Option (Id, Name_Input_Only);\n+   end Is_Input_Only_State;\n \n    -------------------\n    -- Is_Null_State --\n@@ -6714,11 +6712,12 @@ package body Einfo is\n    -- Is_Output_State --\n    ---------------------\n \n-   function Is_Output_State (Id : E) return B is\n+   function Is_Output_Only_State (Id : E) return B is\n    begin\n       return\n-        Ekind (Id) = E_Abstract_State and then Has_Property (Id, Name_Output);\n-   end Is_Output_State;\n+        Ekind (Id) = E_Abstract_State\n+          and then Has_Option (Id, Name_Output_Only);\n+   end Is_Output_Only_State;\n \n    -----------------------------------\n    -- Is_Package_Or_Generic_Package --\n@@ -6867,7 +6866,7 @@ package body Einfo is\n    begin\n       return\n         Ekind (Id) = E_Abstract_State\n-          and then Has_Property (Id, Name_Volatile);\n+          and then Has_Option (Id, Name_Volatile);\n    end Is_Volatile_State;\n \n    ------------------------\n@@ -8281,9 +8280,6 @@ package body Einfo is\n          when E_Variable                                   =>\n             Write_Str (\"Hiding_Loop_Variable\");\n \n-         when E_Abstract_State                             =>\n-            Write_Str (\"Integrity_Level\");\n-\n          when Formal_Kind                                  |\n               E_Function                                   |\n               E_Subprogram_Body                            =>"}, {"sha": "b06026b11a4e188243c12a8b6db5277904eeb6aa", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -1969,11 +1969,6 @@ package Einfo is\n --       instantiated within the given generic. Used to diagnose circular\n --       instantiations.\n \n---    Integrity_Level (Uint8)\n---       Defined for E_Abstract_State entities. Contains the numerical value of\n---       the integrity level state property. A value of Uint_0 designates a non\n---       existent integrity.\n-\n --    Interface_Alias (Node25)\n --       Defined in subprograms that cover a primitive operation of an abstract\n --       interface type. Can be set only if the Is_Hidden flag is also set,\n@@ -2263,6 +2258,10 @@ package Einfo is\n --       and variables, but that may well change later on. Exceptions can only\n --       be exported in the OpenVMS and Java VM implementations of GNAT.\n \n+--    Is_External_State (synthesized)\n+--       Applies to all entities, true for abstract states that are subject to\n+--       option External.\n+\n --    Is_Finalizer (synthesized)\n --       Applies to all entities, true for procedures containing finalization\n --       code to process local or library level objects.\n@@ -2380,9 +2379,9 @@ package Einfo is\n --       inherited by their instances. It is also set on the body entities\n --       of inlined subprograms. See also Has_Pragma_Inline.\n \n---    Is_Input_State (synthesized)\n+--    Is_Input_Only_State (synthesized)\n --       Applies to all entities, true for abstract states that are subject to\n---       property Input.\n+--       option Input_Only.\n \n --    Is_Instantiated (Flag126)\n --       Defined in generic packages and generic subprograms. Set if the unit\n@@ -2613,9 +2612,9 @@ package Einfo is\n --       Applies to all entities, true for ordinary fixed point types and\n --       subtypes.\n \n---    Is_Output_State (synthesized)\n+--    Is_Output_Only_State (synthesized)\n --       Applies to all entities, true for abstract states that are subject to\n---       property Output.\n+--       option Output_Only.\n \n --    Is_Package_Or_Generic_Package (synthesized)\n --       Applies to all entities. True for packages and generic packages.\n@@ -2976,7 +2975,7 @@ package Einfo is\n \n --    Is_Volatile_State (synthesized)\n --       Applies to all entities, true for abstract states that are subject to\n---       property Volatile.\n+--       option Volatile.\n \n --    Is_Wrapper_Package (synthesized)\n --       Defined in package entities. Indicates that the package has been\n@@ -5093,11 +5092,11 @@ package Einfo is\n    ------------------------------------------\n \n    --  E_Abstract_State\n-   --    Integrity_Level                     (Uint8)\n    --    Refined_State                       (Node9)\n-   --    Is_Input_State                      (synth)\n+   --    Is_External_State                   (synth)\n+   --    Is_Input_Only_State                 (synth)\n    --    Is_Null_State                       (synth)\n-   --    Is_Output_State                     (synth)\n+   --    Is_Output_Only_State                (synth)\n    --    Is_Volatile_State                   (synth)\n \n    --  E_Access_Protected_Subprogram_Type\n@@ -6377,7 +6376,6 @@ package Einfo is\n    function In_Private_Part                     (Id : E) return B;\n    function In_Use                              (Id : E) return B;\n    function Initialization_Statements           (Id : E) return N;\n-   function Integrity_Level                     (Id : E) return U;\n    function Inner_Instances                     (Id : E) return L;\n    function Interface_Alias                     (Id : E) return E;\n    function Interface_Name                      (Id : E) return N;\n@@ -6680,12 +6678,13 @@ package Einfo is\n    function Is_Constant_Object                  (Id : E) return B;\n    function Is_Discriminal                      (Id : E) return B;\n    function Is_Dynamic_Scope                    (Id : E) return B;\n+   function Is_External_State                   (Id : E) return B;\n    function Is_Finalizer                        (Id : E) return B;\n    function Is_Ghost_Entity                     (Id : E) return B;\n    function Is_Ghost_Subprogram                 (Id : E) return B;\n-   function Is_Input_State                      (Id : E) return B;\n+   function Is_Input_Only_State                 (Id : E) return B;\n    function Is_Null_State                       (Id : E) return B;\n-   function Is_Output_State                     (Id : E) return B;\n+   function Is_Output_Only_State                (Id : E) return B;\n    function Is_Package_Or_Generic_Package       (Id : E) return B;\n    function Is_Prival                           (Id : E) return B;\n    function Is_Protected_Component              (Id : E) return B;\n@@ -6988,7 +6987,6 @@ package Einfo is\n    procedure Set_In_Private_Part                 (Id : E; V : B := True);\n    procedure Set_In_Use                          (Id : E; V : B := True);\n    procedure Set_Initialization_Statements       (Id : E; V : N);\n-   procedure Set_Integrity_Level                 (Id : E; V : U);\n    procedure Set_Inner_Instances                 (Id : E; V : L);\n    procedure Set_Interface_Alias                 (Id : E; V : E);\n    procedure Set_Interface_Name                  (Id : E; V : N);\n@@ -7696,7 +7694,6 @@ package Einfo is\n    pragma Inline (In_Package_Body);\n    pragma Inline (In_Private_Part);\n    pragma Inline (In_Use);\n-   pragma Inline (Integrity_Level);\n    pragma Inline (Inner_Instances);\n    pragma Inline (Interface_Alias);\n    pragma Inline (Interface_Name);\n@@ -8157,7 +8154,6 @@ package Einfo is\n    pragma Inline (Set_In_Private_Part);\n    pragma Inline (Set_In_Use);\n    pragma Inline (Set_Inner_Instances);\n-   pragma Inline (Set_Integrity_Level);\n    pragma Inline (Set_Interface_Alias);\n    pragma Inline (Set_Interface_Name);\n    pragma Inline (Set_Interfaces);"}, {"sha": "562b70922187e9ab94c44e855316f4cc5d4247cd", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -610,6 +610,15 @@ package body Lib.Xref is\n          Error_Msg_NE (\"& is only defined in Ada 2012?y?\", N, E);\n       end if;\n \n+      --  Do not generate references if we are within a postcondition sub-\n+      --  program, because the reference does not comes from source, and the\n+      --  pre-analysis of the aspect has already created an entry for the ali\n+      --  file at the proper source location.\n+\n+      if Chars (Current_Scope) = Name_uPostconditions then\n+         return;\n+      end if;\n+\n       --  Never collect references if not in main source unit. However, we omit\n       --  this test if Typ is 'e' or 'k', since these entries are structural,\n       --  and it is useful to have them in units that reference packages as"}, {"sha": "cd6634a305a55c4ca2641359d6b7416e19436bd7", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -5578,7 +5578,7 @@ package body Sem_Eval is\n                   then\n                      Error_Msg_N (\"\\aggregate (#) is never static\", N);\n \n-                  elsif not Is_Static_Expression (CV) then\n+                  elsif No (CV) or else not Is_Static_Expression (CV) then\n                      Error_Msg_NE\n                        (\"\\& is not a static constant (RM 4.9(5))\", N, E);\n                   end if;"}, {"sha": "e698d97ef11d50e11f9e9ff143c259b32f3b902f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 105, "deletions": 79, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -1463,27 +1463,27 @@ package body Sem_Prag is\n             --  valid choices. Perform mode- and usage-specific checks.\n \n             if Ekind (Item_Id) = E_Abstract_State\n-              and then Is_Volatile_State (Item_Id)\n+              and then Is_External_State (Item_Id)\n             then\n-               --  A global item of mode In_Out or Output cannot denote a\n-               --  volatile Input state.\n+               --  A global item of mode In_Out or Output cannot denote an\n+               --  external Input_Only state.\n \n-               if Is_Input_State (Item_Id)\n+               if Is_Input_Only_State (Item_Id)\n                  and then Nam_In (Global_Mode, Name_In_Out, Name_Output)\n                then\n                   Error_Msg_N\n                     (\"global item of mode In_Out or Output cannot reference \"\n-                     & \"Volatile Input state\", Item);\n+                     & \"External Input_Only state\", Item);\n \n-               --  A global item of mode In_Out or Input cannot reference a\n-               --  volatile Output state.\n+               --  A global item of mode In_Out or Input cannot reference an\n+               --  external Output_Only state.\n \n-               elsif Is_Output_State (Item_Id)\n+               elsif Is_Output_Only_State (Item_Id)\n                  and then Nam_In (Global_Mode, Name_In_Out, Name_Input)\n                then\n                   Error_Msg_N\n                     (\"global item of mode In_Out or Input cannot reference \"\n-                     & \"Volatile Output state\", Item);\n+                     & \"External Output_Only state\", Item);\n                end if;\n             end if;\n \n@@ -8417,19 +8417,21 @@ package body Sem_Prag is\n \n          --  ABSTRACT_STATE_LIST ::=\n          --    null\n-         --  | STATE_NAME_WITH_PROPERTIES {, STATE_NAME_WITH_PROPERTIES}\n+         --  | STATE_NAME_WITH_OPTIONS\n+         --  | (STATE_NAME_WITH_OPTIONS {, STATE_NAME_WITH_OPTIONS})\n \n-         --  STATE_NAME_WITH_PROPERTIES ::=\n-         --    STATE_NAME\n-         --  | (STATE_NAME with PROPERTY_LIST)\n+         --  STATE_NAME_WITH_OPTIONS ::=\n+         --    state_NAME\n+         --  | (state_NAME with OPTION_LIST)\n \n-         --  PROPERTY_LIST ::= PROPERTY {, PROPERTY}\n-         --  PROPERTY      ::= SIMPLE_PROPERTY | NAME_VALUE_PROPERTY\n+         --  OPTION_LIST ::= OPTION {, OPTION}\n \n-         --  SIMPLE_PROPERTY      ::= IDENTIFIER\n-         --  NAME_VALUE_PROPERTY  ::= IDENTIFIER => EXPRESSION\n+         --  OPTION ::= SIMPLE_OPTION | NAME_VALUE_OPTION\n \n-         --  STATE_NAME ::= DEFINING_IDENTIFIER\n+         --  SIMPLE_OPTION ::=\n+         --    External | Non_Volatile | Input_Only | Output_Only\n+\n+         --  NAME_VALUE_OPTION ::= Part_Of => abstract_state_NAME\n \n          when Pragma_Abstract_State => Abstract_State : declare\n             Pack_Id : Entity_Id;\n@@ -8449,46 +8451,47 @@ package body Sem_Prag is\n             ----------------------------\n \n             procedure Analyze_Abstract_State (State : Node_Id) is\n-               procedure Check_Duplicate_Property\n-                 (Prop   : Node_Id;\n+               procedure Check_Duplicate_Option\n+                 (Opt    : Node_Id;\n                   Status : in out Boolean);\n-               --  Flag Status denotes whether a particular property has been\n+               --  Flag Status denotes whether a particular option has been\n                --  seen while processing a state. This routine verifies that\n-               --  Prop is not a duplicate property and sets the flag Status.\n+               --  Opt is not a duplicate property and sets the flag Status.\n \n-               ------------------------------\n-               -- Check_Duplicate_Property --\n-               ------------------------------\n+               ----------------------------\n+               -- Check_Duplicate_Option --\n+               ----------------------------\n \n-               procedure Check_Duplicate_Property\n-                 (Prop   : Node_Id;\n+               procedure Check_Duplicate_Option\n+                 (Opt    : Node_Id;\n                   Status : in out Boolean)\n                is\n                begin\n                   if Status then\n-                     Error_Msg_N (\"duplicate state property\", Prop);\n+                     Error_Msg_N (\"duplicate state option\", Opt);\n                   end if;\n \n                   Status := True;\n-               end Check_Duplicate_Property;\n+               end Check_Duplicate_Option;\n \n                --  Local variables\n \n-               Errors  : constant Nat := Serious_Errors_Detected;\n-               Loc     : constant Source_Ptr := Sloc (State);\n-               Assoc   : Node_Id;\n-               Id      : Entity_Id;\n-               Is_Null : Boolean := False;\n-               Level   : Uint := Uint_0;\n-               Name    : Name_Id;\n-               Prop    : Node_Id;\n+               Errors    : constant Nat := Serious_Errors_Detected;\n+               Loc       : constant Source_Ptr := Sloc (State);\n+               Assoc     : Node_Id;\n+               Id        : Entity_Id;\n+               Is_Null   : Boolean := False;\n+               Name      : Name_Id;\n+               Opt       : Node_Id;\n+               Par_State : Node_Id;\n \n-               --  Flags used to verify the consistency of properties\n+               --  Flags used to verify the consistency of options\n \n-               Input_Seen     : Boolean := False;\n-               Integrity_Seen : Boolean := False;\n-               Output_Seen    : Boolean := False;\n-               Volatile_Seen  : Boolean := False;\n+               External_Seen     : Boolean := False;\n+               Input_Seen        : Boolean := False;\n+               Non_Volatile_Seen : Boolean := False;\n+               Output_Seen       : Boolean := False;\n+               Part_Of_Seen      : Boolean := False;\n \n             --  Start of processing for Analyze_Abstract_State\n \n@@ -8522,7 +8525,7 @@ package body Sem_Prag is\n                   Name := Chars (State);\n                   Non_Null_Seen := True;\n \n-               --  State declaration with various properties. This construct\n+               --  State declaration with various options. This construct\n                --  appears as an extension aggregate in the tree.\n \n                elsif Nkind (State) = N_Extension_Aggregate then\n@@ -8535,69 +8538,93 @@ package body Sem_Prag is\n                         Ancestor_Part (State));\n                   end if;\n \n-                  --  Process properties Input, Output and Volatile. Ensure\n-                  --  that none of them appear more than once.\n-\n-                  Prop := First (Expressions (State));\n-                  while Present (Prop) loop\n-                     if Nkind (Prop) = N_Identifier then\n-                        if Chars (Prop) = Name_Input then\n-                           Check_Duplicate_Property (Prop, Input_Seen);\n-                        elsif Chars (Prop) = Name_Output then\n-                           Check_Duplicate_Property (Prop, Output_Seen);\n-                        elsif Chars (Prop) = Name_Volatile then\n-                           Check_Duplicate_Property (Prop, Volatile_Seen);\n+                  --  Process options External, Input_Only, Output_Only and\n+                  --  Volatile. Ensure that none of them appear more than once.\n+\n+                  Opt := First (Expressions (State));\n+                  while Present (Opt) loop\n+                     if Nkind (Opt) = N_Identifier then\n+                        if Chars (Opt) = Name_External then\n+                           Check_Duplicate_Option (Opt, External_Seen);\n+                        elsif Chars (Opt) = Name_Input_Only then\n+                           Check_Duplicate_Option (Opt, Input_Seen);\n+                        elsif Chars (Opt) = Name_Output_Only then\n+                           Check_Duplicate_Option (Opt, Output_Seen);\n+                        elsif Chars (Opt) = Name_Non_Volatile then\n+                           Check_Duplicate_Option (Opt, Non_Volatile_Seen);\n+\n+                        --  Ensure that the abstract state component of option\n+                        --  Part_Of has not been omitted.\n+\n+                        elsif Chars (Opt) = Name_Part_Of then\n+                           Error_Msg_N\n+                             (\"option Part_Of requires an abstract state\",\n+                              Opt);\n                         else\n-                           Error_Msg_N (\"invalid state property\", Prop);\n+                           Error_Msg_N (\"invalid state option\", Opt);\n                         end if;\n                      else\n-                        Error_Msg_N (\"invalid state property\", Prop);\n+                        Error_Msg_N (\"invalid state option\", Opt);\n                      end if;\n \n-                     Next (Prop);\n+                     Next (Opt);\n                   end loop;\n \n-                  --  Volatile requires exactly one Input or Output\n+                  --  External requires exactly one Input_Only or Output_Only\n \n-                  if Volatile_Seen and then Input_Seen = Output_Seen then\n+                  if External_Seen and then Input_Seen = Output_Seen then\n                      Error_Msg_N\n-                       (\"property Volatile requires exactly one Input or \"\n-                        & \"Output\", State);\n+                       (\"option External requires exactly one option \"\n+                        & \"Input_Only or Output_Only\", State);\n                   end if;\n \n-                  --  Either Input or Output require Volatile\n+                  --  Either Input_Only or Output_Only require External\n \n                   if (Input_Seen or Output_Seen)\n-                    and then not Volatile_Seen\n+                    and then not External_Seen\n                   then\n                      Error_Msg_N\n-                       (\"properties Input and Output require Volatile\", State);\n+                       (\"options Input_Only and Output_Only require option \"\n+                        & \"External\", State);\n                   end if;\n \n-                  --  State property Integrity appears as a component\n-                  --  association.\n+                  --  Option Part_Of appears as a component association\n \n                   Assoc := First (Component_Associations (State));\n                   while Present (Assoc) loop\n-                     Prop := First (Choices (Assoc));\n-                     while Present (Prop) loop\n-                        if Nkind (Prop) = N_Identifier\n-                          and then Chars (Prop) = Name_Integrity\n+                     Opt := First (Choices (Assoc));\n+                     while Present (Opt) loop\n+                        if Nkind (Opt) = N_Identifier\n+                          and then Chars (Opt) = Name_Part_Of\n                         then\n-                           Check_Duplicate_Property (Prop, Integrity_Seen);\n+                           Check_Duplicate_Option (Opt, Part_Of_Seen);\n                         else\n-                           Error_Msg_N (\"invalid state property\", Prop);\n+                           Error_Msg_N (\"invalid state option\", Opt);\n                         end if;\n \n-                        Next (Prop);\n+                        Next (Opt);\n                      end loop;\n \n-                     if Nkind (Expression (Assoc)) = N_Integer_Literal then\n-                        Level := Intval (Expression (Assoc));\n+                     --  Part_Of must denote a parent state. Ensure that the\n+                     --  tree is not malformed by checking the expression of\n+                     --  the component association.\n+\n+                     Par_State := Expression (Assoc);\n+                     pragma Assert (Present (Par_State));\n+\n+                     Analyze (Par_State);\n+\n+                     --  Part_Of specified a legal state\n+\n+                     if Is_Entity_Name (Par_State)\n+                       and then Present (Entity (Par_State))\n+                       and then Ekind (Entity (Par_State)) = E_Abstract_State\n+                     then\n+                        null;\n                      else\n                         Error_Msg_N\n-                          (\"integrity level must be an integer literal\",\n-                           Expression (Assoc));\n+                         (\"option Part_Of must denote an abstract state\",\n+                          Par_State);\n                      end if;\n \n                      Next (Assoc);\n@@ -8624,7 +8651,6 @@ package body Sem_Prag is\n                Set_Parent            (Id, State);\n                Set_Ekind             (Id, E_Abstract_State);\n                Set_Etype             (Id, Standard_Void_Type);\n-               Set_Integrity_Level   (Id, Level);\n                Set_Refined_State     (Id, Empty);\n \n                --  Every non-null state must be nameable and resolvable the"}, {"sha": "9752d2b16f99724e0bf57309bfb7390ba1df8993", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa500b7a972aebff7375a093c2a7d90aad427b65/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=aa500b7a972aebff7375a093c2a7d90aad427b65", "patch": "@@ -713,7 +713,7 @@ package Snames is\n    Name_In_Out                         : constant Name_Id := N + $;\n    Name_Increases                      : constant Name_Id := N + $;\n    Name_Info                           : constant Name_Id := N + $;\n-   Name_Integrity                      : constant Name_Id := N + $;\n+   Name_Input_Only                     : constant Name_Id := N + $;\n    Name_Internal                       : constant Name_Id := N + $;\n    Name_Link_Name                      : constant Name_Id := N + $;\n    Name_Lowercase                      : constant Name_Id := N + $;\n@@ -747,10 +747,13 @@ package Snames is\n    Name_No_Unroll                      : constant Name_Id := N + $;\n    Name_No_Vector                      : constant Name_Id := N + $;\n    Name_Nominal                        : constant Name_Id := N + $;\n+   Name_Non_Volatile                   : constant Name_Id := N + $;\n    Name_On                             : constant Name_Id := N + $;\n    Name_Optional                       : constant Name_Id := N + $;\n+   Name_Output_Only                    : constant Name_Id := N + $;\n    Name_Policy                         : constant Name_Id := N + $;\n    Name_Parameter_Types                : constant Name_Id := N + $;\n+   Name_Part_Of                        : constant Name_Id := N + $;\n    Name_Reason                         : constant Name_Id := N + $;\n    Name_Reference                      : constant Name_Id := N + $;\n    Name_Requires                       : constant Name_Id := N + $;"}]}