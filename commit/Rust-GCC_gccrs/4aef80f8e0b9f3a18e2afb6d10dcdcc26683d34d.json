{"sha": "4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlZjgwZjhlMGI5ZjNhMThlMmFmYjZkMTBkY2RjYzI2NjgzZDM0ZA==", "commit": {"author": {"name": "Bud Davis", "email": "bdavis9659@comcast.net", "date": "2004-06-12T13:42:46Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-12T13:42:46Z"}, "message": "args.c: Implement GETARG and IARGC.\n\n\t* intrinsics/args.c: Implement GETARG and IARGC.\n\t* Makefile.am: Add it.\n\t* Makefile.in: Regenerate.\ntestsuite/\n\t* gfortran.fortran-torture/execute/getarg_1.f90: New test.\n\nFrom-SVN: r83027", "tree": {"sha": "9c48e29daf05d7e67525b21b88ec62b1f076a4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c48e29daf05d7e67525b21b88ec62b1f076a4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/comments", "author": null, "committer": null, "parents": [{"sha": "7b1b4aed94bc2787c2e8654bb7a678c56f96a214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1b4aed94bc2787c2e8654bb7a678c56f96a214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1b4aed94bc2787c2e8654bb7a678c56f96a214"}], "stats": {"total": 109, "additions": 106, "deletions": 3}, "files": [{"sha": "8b0096073438889cc1a793b986df83915a146a38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -1,3 +1,7 @@\n+2004-06-12  Bud Davis  <bdavis9659@comcast.net>\n+\n+\t* gfortran.fortran-torture/execute/getarg_1.f90: New test.\n+\n 2004-06-12  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR gfortran/12839"}, {"sha": "2d566862d2d7aff70e4b3ce58e71921ac85de8a3", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/getarg_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -0,0 +1,24 @@\n+! Check that getarg does somethig sensible.\n+program getarg_1\n+  CHARACTER*10 ARGS\n+  INTEGER*4 I\n+  I = 0\n+  CALL GETARG(I,ARGS)\n+  ! This should return the invoking command.  The actual value depends \n+  ! on the OS, but a blank string is wrong no matter what.\n+  ! ??? What about deep embedded systems?\n+  if (args.eq.'') call abort\n+  I = 1\n+  CALL GETARG(I,ARGS)\n+  if (args.ne.'') call abort\n+  I = -1\n+  CALL GETARG(I,ARGS)\n+  if (args.ne.'') call abort\n+  ! Assume we won't have been called with more that 4 args.\n+  I = 4\n+  CALL GETARG(I,ARGS)\n+  if (args.ne.'') call abort\n+  I = 1000\n+  CALL GETARG(I,ARGS)\n+  if (args.ne.'') call abort\n+end"}, {"sha": "6b3b4301024858c803526cbbba730de58f83cfed", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -1,14 +1,20 @@\n+2004-06-12  Bud Davis  <bdavis9659@comcast.net>\n+\n+\t* intrinsics/args.c: Implement GETARG and IARGC.\n+\t* Makefile.am: Add it.\n+\t* Makefile.in: Regenerate.\n+\n 2004-06-12  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR gfortran/12839\n-\t* io/write.c(write_float): format inf and nan IAW F2003.\n+\t* io/write.c(write_float): Format inf and nan IAW F2003.\n \n 2004-06-09  Bud Davis  <bdavis9659@comcaste.net>\n \n \tPR gfortran/14897\n \t* io/transfer.c (formatted_transfer): position is unique\n          for T and TL edit descriptors.\n- \t(data_transfer_init): set record length to size of internal\n+\t(data_transfer_init): set record length to size of internal\n          file.\n \n 2004-06-09  Bud Davis  <bdavis9659@comcast.net>"}, {"sha": "f77335d5f9c4c6f26cdc4f4c7f47834867d9ef2e", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -36,6 +36,7 @@ io/io.h\n gfor_helper_src= \\\n intrinsics/associated.c \\\n intrinsics/abort.c \\\n+intrinsics/args.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/eoshift0.c \\"}, {"sha": "9401231c684a5fba4851377612d524fe92fa5af1", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -118,7 +118,7 @@ am__objects_31 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n am__objects_32 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo rewind.lo transfer.lo \\\n \tunit.lo unix.lo write.lo\n-am__objects_33 = associated.lo abort.lo cpu_time.lo cshift0.lo \\\n+am__objects_33 = associated.lo abort.lo args.lo cpu_time.lo cshift0.lo \\\n \teoshift0.lo eoshift2.lo ishftc.lo pack_generic.lo size.lo \\\n \tspread_generic.lo string_intrinsics.lo random.lo \\\n \treshape_generic.lo reshape_packed.lo selected_kind.lo \\\n@@ -308,6 +308,7 @@ io/io.h\n gfor_helper_src = \\\n intrinsics/associated.c \\\n intrinsics/abort.c \\\n+intrinsics/args.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/eoshift0.c \\\n@@ -1973,6 +1974,15 @@ abort.obj: intrinsics/abort.c\n abort.lo: intrinsics/abort.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o abort.lo `test -f 'intrinsics/abort.c' || echo '$(srcdir)/'`intrinsics/abort.c\n \n+args.o: intrinsics/args.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o args.o `test -f 'intrinsics/args.c' || echo '$(srcdir)/'`intrinsics/args.c\n+\n+args.obj: intrinsics/args.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o args.obj `if test -f 'intrinsics/args.c'; then $(CYGPATH_W) 'intrinsics/args.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/args.c'; fi`\n+\n+args.lo: intrinsics/args.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o args.lo `test -f 'intrinsics/args.c' || echo '$(srcdir)/'`intrinsics/args.c\n+\n cpu_time.o: intrinsics/cpu_time.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cpu_time.o `test -f 'intrinsics/cpu_time.c' || echo '$(srcdir)/'`intrinsics/cpu_time.c\n "}, {"sha": "da684fd99d47a533616133ebdac237172a502067", "filename": "libgfortran/intrinsics/args.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2Fintrinsics%2Fargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d/libgfortran%2Fintrinsics%2Fargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fargs.c?ref=4aef80f8e0b9f3a18e2afb6d10dcdcc26683d34d", "patch": "@@ -0,0 +1,58 @@\n+/* Implementation of the IARG/ARGC intrinsic(s).\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#include <string.h>\n+#include \"libgfortran.h\"\n+\n+void \n+prefix(getarg) (GFC_INTEGER_4 *pos, char  *val, GFC_INTEGER_4 val_len)\n+{\n+  int argc;\n+  int arglen;\n+  char **argv;\n+\n+  get_args (&argc, &argv);\n+\n+  if (val_len < 1 || !val )\n+    return;   /* something is wrong , leave immediately */\n+  \n+  memset( val, ' ', val_len);\n+\n+  if ((*pos) + 1 <= argc  && *pos >=0 )\n+    {\n+      arglen = strlen (argv[*pos]);\n+      if (arglen > val_len)\n+\targlen = val_len;\n+      memcpy (val, argv[*pos], arglen);\n+    }\n+}\n+\n+GFC_INTEGER_4\n+prefix(iargc) ()\n+{\n+  int argc;\n+  char **argv;\n+\n+  get_args (&argc, &argv);\n+\n+  return argc;\n+} "}]}