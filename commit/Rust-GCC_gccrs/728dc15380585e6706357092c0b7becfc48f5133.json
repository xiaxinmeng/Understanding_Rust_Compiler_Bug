{"sha": "728dc15380585e6706357092c0b7becfc48f5133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4ZGMxNTM4MDU4NWU2NzA2MzU3MDkyYzBiN2JlY2ZjNDhmNTEzMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-24T15:01:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-24T15:01:32Z"}, "message": "[ARM][trivial] Use uppercase for code iterator names\n\n\t* config/arm/iterators.md (shiftable_ops): Rename to...\n\t(SHIFTABLE_OPS): ... This.  Update use in comments.\n\t(ior_xor): Rename to...\n\t(IOR_XOR): ... This.\n\t(vqh_ops): Rename to...\n\t(VQH_OPS): ... This.\n\t(vqhs_ops): Rename to...\n\t(VQHS_OPS): ... This.\n\t(rshifts): Rename to...\n\t(RSHIFTS): ... This.\n\t(returns): Rename to...\n\t(RETURNS): ... This.\n\t* config/arm/arm.md: Update uses of the above.\n\t* config/arm/neon.md: Likewise.\n\nFrom-SVN: r222416", "tree": {"sha": "aa3c4c75c6f613fc70037ed31b5abc9a21623c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa3c4c75c6f613fc70037ed31b5abc9a21623c1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/728dc15380585e6706357092c0b7becfc48f5133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728dc15380585e6706357092c0b7becfc48f5133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728dc15380585e6706357092c0b7becfc48f5133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728dc15380585e6706357092c0b7becfc48f5133/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e1bcce3711f5646ffc98652c20e988d55689041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1bcce3711f5646ffc98652c20e988d55689041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1bcce3711f5646ffc98652c20e988d55689041"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "9f7036f2392781d9d9fee170006af373e70cbc51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728dc15380585e6706357092c0b7becfc48f5133/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728dc15380585e6706357092c0b7becfc48f5133/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=728dc15380585e6706357092c0b7becfc48f5133", "patch": "@@ -1,3 +1,20 @@\n+2015-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/iterators.md (shiftable_ops): Rename to...\n+\t(SHIFTABLE_OPS): ... This.  Update use in comments.\n+\t(ior_xor): Rename to...\n+\t(IOR_XOR): ... This.\n+\t(vqh_ops): Rename to...\n+\t(VQH_OPS): ... This.\n+\t(vqhs_ops): Rename to...\n+\t(VQHS_OPS): ... This.\n+\t(rshifts): Rename to...\n+\t(RSHIFTS): ... This.\n+\t(returns): Rename to...\n+\t(RETURNS): ... This.\n+\t* config/arm/arm.md: Update uses of the above.\n+\t* config/arm/neon.md: Likewise.\n+\n 2014-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config.host (case ${host}): Add aarch64*-*-linux case."}, {"sha": "85d27d93a585673b3d93df637261e6682d9ec4f3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=728dc15380585e6706357092c0b7becfc48f5133", "patch": "@@ -5076,7 +5076,7 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(ior_xor:SI (and:SI (ashift:SI\n+\t(IOR_XOR:SI (and:SI (ashift:SI\n \t\t\t     (match_operand:SI 1 \"s_register_operand\" \"\")\n \t\t\t     (match_operand:SI 2 \"const_int_operand\" \"\"))\n \t\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))\n@@ -5088,7 +5088,7 @@\n        == (GET_MODE_MASK (GET_MODE (operands[5]))\n            & (GET_MODE_MASK (GET_MODE (operands[5]))\n \t      << (INTVAL (operands[2])))))\"\n-  [(set (match_dup 0) (ior_xor:SI (ashift:SI (match_dup 1) (match_dup 2))\n+  [(set (match_dup 0) (IOR_XOR:SI (ashift:SI (match_dup 1) (match_dup 2))\n \t\t\t\t  (match_dup 4)))\n    (set (match_dup 0) (zero_extend:SI (match_dup 5)))]\n   \"operands[5] = gen_lowpart (GET_MODE (operands[5]), operands[0]);\"\n@@ -7848,7 +7848,7 @@\n )\n \n (define_expand \"<return_str>return\"\n-  [(returns)]\n+  [(RETURNS)]\n   \"(TARGET_ARM || (TARGET_THUMB2\n                    && ARM_FUNC_TYPE (arm_current_func_type ()) == ARM_FT_NORMAL\n                    && !IS_STACKALIGN (arm_current_func_type ())))\n@@ -7886,7 +7886,7 @@\n   [(set (pc)\n         (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n-                      (returns)\n+                      (RETURNS)\n                       (pc)))]\n   \"TARGET_ARM  <return_cond_true>\"\n   \"*\n@@ -7909,7 +7909,7 @@\n         (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (pc)\n-\t\t      (returns)))]\n+\t\t      (RETURNS)))]\n   \"TARGET_ARM <return_cond_true>\"\n   \"*\n   {\n@@ -8243,7 +8243,7 @@\n \n (define_insn \"*<arith_shift_insn>_multsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(shiftable_ops:SI\n+\t(SHIFTABLE_OPS:SI\n \t (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t  (match_operand:SI 3 \"power_of_two_operand\" \"\"))\n \t (match_operand:SI 1 \"s_register_operand\" \"rk,<t2_binop0>\")))]\n@@ -8257,7 +8257,7 @@\n \n (define_insn \"*<arith_shift_insn>_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(shiftable_ops:SI\n+\t(SHIFTABLE_OPS:SI\n \t (match_operator:SI 2 \"shift_nomul_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n \t   (match_operand:SI 4 \"shift_amount_operand\" \"M,M,r\")])"}, {"sha": "1e7f3f17a8aff29baca783e839c9c844d23e21b3", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=728dc15380585e6706357092c0b7becfc48f5133", "patch": "@@ -191,34 +191,34 @@\n (define_code_iterator COMPARISONS [eq gt ge le lt])\n \n ;; A list of ...\n-(define_code_iterator ior_xor [ior xor])\n+(define_code_iterator IOR_XOR [ior xor])\n \n ;; Operations on two halves of a quadword vector.\n-(define_code_iterator vqh_ops [plus smin smax umin umax])\n+(define_code_iterator VQH_OPS [plus smin smax umin umax])\n \n ;; Operations on two halves of a quadword vector,\n ;; without unsigned variants (for use with *SFmode pattern).\n-(define_code_iterator vqhs_ops [plus smin smax])\n+(define_code_iterator VQHS_OPS [plus smin smax])\n \n ;; A list of widening operators\n (define_code_iterator SE [sign_extend zero_extend])\n \n ;; Right shifts\n-(define_code_iterator rshifts [ashiftrt lshiftrt])\n+(define_code_iterator RSHIFTS [ashiftrt lshiftrt])\n \n ;; Iterator for integer conversions\n (define_code_iterator FIXUORS [fix unsigned_fix])\n \n ;; Binary operators whose second operand can be shifted.\n-(define_code_iterator shiftable_ops [plus minus ior xor and])\n+(define_code_iterator SHIFTABLE_OPS [plus minus ior xor and])\n \n-;; plus and minus are the only shiftable_ops for which Thumb2 allows\n+;; plus and minus are the only SHIFTABLE_OPS for which Thumb2 allows\n ;; a stack pointer opoerand.  The minus operation is a candidate for an rsub\n ;; and hence only plus is supported.\n (define_code_attr t2_binop0\n   [(plus \"rk\") (minus \"r\") (ior \"r\") (xor \"r\") (and \"r\")])\n \n-;; The instruction to use when a shiftable_ops has a shift operation as\n+;; The instruction to use when a SHIFTABLE_OPS has a shift operation as\n ;; its first operand.\n (define_code_attr arith_shift_insn\n   [(plus \"add\") (minus \"rsb\") (ior \"orr\") (xor \"eor\") (and \"and\")])\n@@ -797,7 +797,7 @@\n                           (UNSPEC_SHA256H2 \"V4SI\") (UNSPEC_SHA256SU1 \"V4SI\")])\n \n ;; Both kinds of return insn.\n-(define_code_iterator returns [return simple_return])\n+(define_code_iterator RETURNS [return simple_return])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n (define_code_attr return_simple_p [(return \"false\") (simple_return \"true\")])\n (define_code_attr return_cond_false [(return \" && USE_RETURN_INSN (FALSE)\")"}, {"sha": "a48c39ba118a57f83bdf748421ce5993bccf3db2", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728dc15380585e6706357092c0b7becfc48f5133/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=728dc15380585e6706357092c0b7becfc48f5133", "patch": "@@ -1114,7 +1114,7 @@\n ;; lshrdi3_neon\n (define_insn_and_split \"<shift>di3_neon\"\n   [(set (match_operand:DI 0 \"s_register_operand\"\t     \"= w, w,?&r,?r,?w,?w\")\n-\t(rshifts:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, r,0w, w\")\n+\t(RSHIFTS:DI (match_operand:DI 1 \"s_register_operand\" \" 0w, w, 0r, r,0w, w\")\n \t\t    (match_operand:SI 2 \"reg_or_int_operand\" \"  r, i,  r, i, r, i\")))\n    (clobber (match_scratch:SI 3\t\t\t\t     \"=2r, X, &r, X,2r, X\"))\n    (clobber (match_scratch:SI 4\t\t\t\t     \"= X, X, &r, X, X, X\"))\n@@ -1267,7 +1267,7 @@\n \n (define_insn \"quad_halves_<code>v4si\"\n   [(set (match_operand:V2SI 0 \"s_register_operand\" \"=w\")\n-        (vqh_ops:V2SI\n+        (VQH_OPS:V2SI\n           (vec_select:V2SI (match_operand:V4SI 1 \"s_register_operand\" \"w\")\n                            (parallel [(const_int 0) (const_int 1)]))\n           (vec_select:V2SI (match_dup 1)\n@@ -1280,7 +1280,7 @@\n \n (define_insn \"quad_halves_<code>v4sf\"\n   [(set (match_operand:V2SF 0 \"s_register_operand\" \"=w\")\n-        (vqhs_ops:V2SF\n+        (VQHS_OPS:V2SF\n           (vec_select:V2SF (match_operand:V4SF 1 \"s_register_operand\" \"w\")\n                            (parallel [(const_int 0) (const_int 1)]))\n           (vec_select:V2SF (match_dup 1)\n@@ -1293,7 +1293,7 @@\n \n (define_insn \"quad_halves_<code>v8hi\"\n   [(set (match_operand:V4HI 0 \"s_register_operand\" \"+w\")\n-        (vqh_ops:V4HI\n+        (VQH_OPS:V4HI\n           (vec_select:V4HI (match_operand:V8HI 1 \"s_register_operand\" \"w\")\n                            (parallel [(const_int 0) (const_int 1)\n \t\t\t\t      (const_int 2) (const_int 3)]))\n@@ -1308,7 +1308,7 @@\n \n (define_insn \"quad_halves_<code>v16qi\"\n   [(set (match_operand:V8QI 0 \"s_register_operand\" \"+w\")\n-        (vqh_ops:V8QI\n+        (VQH_OPS:V8QI\n           (vec_select:V8QI (match_operand:V16QI 1 \"s_register_operand\" \"w\")\n                            (parallel [(const_int 0) (const_int 1)\n \t\t\t\t      (const_int 2) (const_int 3)"}]}