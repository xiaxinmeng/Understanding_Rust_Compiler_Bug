{"sha": "3545103fa4c2586796e1738b19ca8cb049998951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0NTEwM2ZhNGMyNTg2Nzk2ZTE3MzhiMTljYThjYjA0OTk5ODk1MQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-12-08T08:23:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:38:00Z"}, "message": "[Ada] Improve error message for ghost in predicate\n\ngcc/ada/\n\n\t* ghost.adb (Check_Ghost_Context): Add continuation message when\n\tin predicate.", "tree": {"sha": "738281ca30edab4433f8bd15436d0a9b7c051710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/738281ca30edab4433f8bd15436d0a9b7c051710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3545103fa4c2586796e1738b19ca8cb049998951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3545103fa4c2586796e1738b19ca8cb049998951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3545103fa4c2586796e1738b19ca8cb049998951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3545103fa4c2586796e1738b19ca8cb049998951/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75716ebc25bfb4a647b05d0b2443b5495dab425e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75716ebc25bfb4a647b05d0b2443b5495dab425e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75716ebc25bfb4a647b05d0b2443b5495dab425e"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "0311020414ee4315a51be2cef4a4f6a0fa84e84e", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3545103fa4c2586796e1738b19ca8cb049998951/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3545103fa4c2586796e1738b19ca8cb049998951/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=3545103fa4c2586796e1738b19ca8cb049998951", "patch": "@@ -159,6 +159,9 @@ package body Ghost is\n       --  Determine whether node Context denotes a Ghost-friendly context where\n       --  a Ghost entity can safely reside (SPARK RM 6.9(10)).\n \n+      function In_Aspect_Or_Pragma_Predicate (N : Node_Id) return Boolean;\n+      --  Return True iff N is enclosed in an aspect or pragma Predicate\n+\n       -------------------------\n       -- Is_OK_Ghost_Context --\n       -------------------------\n@@ -540,6 +543,40 @@ package body Ghost is\n          end if;\n       end Check_Ghost_Policy;\n \n+      -----------------------------------\n+      -- In_Aspect_Or_Pragma_Predicate --\n+      -----------------------------------\n+\n+      function In_Aspect_Or_Pragma_Predicate (N : Node_Id) return Boolean is\n+         Par : Node_Id := N;\n+      begin\n+         while Present (Par) loop\n+            if Nkind (Par) = N_Pragma\n+              and then Get_Pragma_Id (Par) = Pragma_Predicate\n+            then\n+               return True;\n+\n+            elsif Nkind (Par) = N_Aspect_Specification\n+              and then Same_Aspect (Get_Aspect_Id (Par), Aspect_Predicate)\n+            then\n+               return True;\n+\n+            --  Stop the search when it's clear it cannot be inside an aspect\n+            --  or pragma.\n+\n+            elsif Is_Declaration (Par)\n+              or else Is_Statement (Par)\n+              or else Is_Body (Par)\n+            then\n+               return False;\n+            end if;\n+\n+            Par := Parent (Par);\n+         end loop;\n+\n+         return False;\n+      end In_Aspect_Or_Pragma_Predicate;\n+\n    --  Start of processing for Check_Ghost_Context\n \n    begin\n@@ -555,6 +592,19 @@ package body Ghost is\n \n       else\n          Error_Msg_N (\"ghost entity cannot appear in this context\", Ghost_Ref);\n+\n+         --  When the Ghost entity appears in a pragma Predicate, explain the\n+         --  reason for this being illegal, and suggest a fix instead.\n+\n+         if In_Aspect_Or_Pragma_Predicate (Ghost_Ref) then\n+            Error_Msg_N\n+              (\"\\as predicates are checked in membership tests, \"\n+               & \"the type and its predicate must be both ghost\",\n+               Ghost_Ref);\n+            Error_Msg_N\n+              (\"\\either make the type ghost \"\n+               & \"or use a type invariant on a private type\", Ghost_Ref);\n+         end if;\n       end if;\n    end Check_Ghost_Context;\n "}]}