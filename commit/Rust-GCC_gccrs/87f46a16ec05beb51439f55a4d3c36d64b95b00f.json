{"sha": "87f46a16ec05beb51439f55a4d3c36d64b95b00f", "node_id": "C_kwDOANBUbNoAKDg3ZjQ2YTE2ZWMwNWJlYjUxNDM5ZjU1YTRkM2MzNmQ2NGI5NWIwMGY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-18T11:09:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-18T12:42:51Z"}, "message": "Fix builtin vs non-builtin partition merge in loop distribution\n\nWhen r7-6373-g40b6bff965d004 fixed a costing issue it failed to\nmake the logic symmetric which means that we now fuse\nnormal vs. builtin when the cost model says so but we don't fuse\nbuiltin vs. normal.  The following fixes that, also allowing\nthe cost model to decide to fuse two builtin partitions as otherwise\nan intermediate non-builtin can result in a partial merge as well.\n\n\t* tree-loop-distribution.cc (loop_distribution::distribute_loop):\n\tWhen computing cost-based merging do not disregard builtin\n\tclassified partitions in some cases.\n\n\t* gcc.dg/tree-ssa/ldist-24.c: XFAIL.\n\t* gcc.dg/tree-ssa/ldist-36.c: Adjust expected outcome.", "tree": {"sha": "a52b3bca598e579e167ef85c61260860aebb43a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52b3bca598e579e167ef85c61260860aebb43a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87f46a16ec05beb51439f55a4d3c36d64b95b00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f46a16ec05beb51439f55a4d3c36d64b95b00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f46a16ec05beb51439f55a4d3c36d64b95b00f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f46a16ec05beb51439f55a4d3c36d64b95b00f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8697735abaca3b3dfe8ae4188a086d1fd7048eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8697735abaca3b3dfe8ae4188a086d1fd7048eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8697735abaca3b3dfe8ae4188a086d1fd7048eb"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "2403a24293b778c163f6176f8e0e27f9607323dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-24.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-24.c?ref=87f46a16ec05beb51439f55a4d3c36d64b95b00f", "patch": "@@ -20,5 +20,6 @@ void foo ()\n       }\n }\n \n-/* { dg-final { scan-tree-dump \"generated memcpy\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump \"generated memset zero\" \"ldist\" } } */\n+/* The cost modeling does not consider WAR as beneficial to split.  */\n+/* { dg-final { scan-tree-dump \"generated memcpy\" \"ldist\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"generated memset zero\" \"ldist\" { xfail *-*-* } } } */"}, {"sha": "6d560060e09a89bff416ccf3348a4ba82e65b6be", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-36.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-36.c?ref=87f46a16ec05beb51439f55a4d3c36d64b95b00f", "patch": "@@ -25,4 +25,5 @@ foo (struct st * restrict p)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Loop nest . distributed: split to 0 loops and 3 library\" 1 \"ldist\" } } */\n+/* The cost modeling doesn't consider splitting a WAR re-use profitable.  */\n+/* { dg-final { scan-tree-dump-times \"Loop nest . distributed: split to 1 loops and 1 library\" 1 \"ldist\" } } */"}, {"sha": "0ee441c077d07c1192f74585f46206d1b5049971", "filename": "gcc/tree-loop-distribution.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftree-loop-distribution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f46a16ec05beb51439f55a4d3c36d64b95b00f/gcc%2Ftree-loop-distribution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.cc?ref=87f46a16ec05beb51439f55a4d3c36d64b95b00f", "patch": "@@ -3090,10 +3090,7 @@ loop_distribution::distribute_loop (class loop *loop,\n   for (i = 0; partitions.iterate (i, &into); ++i)\n     {\n       bool changed = false;\n-      if (partition_builtin_p (into) || into->kind == PKIND_PARTIAL_MEMSET)\n-\tcontinue;\n-      for (int j = i + 1;\n-\t   partitions.iterate (j, &partition); ++j)\n+      for (int j = i + 1; partitions.iterate (j, &partition); ++j)\n \t{\n \t  if (share_memory_accesses (rdg, into, partition))\n \t    {"}]}