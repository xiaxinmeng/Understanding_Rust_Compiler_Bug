{"sha": "033b71cea1b4098c37cfd67f3213c4a917caa495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzYjcxY2VhMWI0MDk4YzM3Y2ZkNjdmMzIxM2M0YTkxN2NhYTQ5NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-05T15:53:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-05T15:53:35Z"}, "message": "type_traits (_GLIBCXX_HAS_NESTED_TYPE): Add.\n\n2010-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (_GLIBCXX_HAS_NESTED_TYPE): Add.\n\t* include/std/functional (_Has_result_type_helper,\n\t_Has_result_type): Remove; use the above to define __has_result_type.\n\t* include/bits/stl_iterator_base_types.h: Use the above to define\n\t__has_iterator_category.\n\t* include/bits/allocator.h (__has_allocator_type): Use the above.\n\t* include/bits/cpp_type_traits.h (__has_iterator_category,\n\t__is_iterator): Remove.\n\nFrom-SVN: r164993", "tree": {"sha": "f737c1e38f42d8941932b0b3af63a2093d031a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f737c1e38f42d8941932b0b3af63a2093d031a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033b71cea1b4098c37cfd67f3213c4a917caa495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033b71cea1b4098c37cfd67f3213c4a917caa495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033b71cea1b4098c37cfd67f3213c4a917caa495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033b71cea1b4098c37cfd67f3213c4a917caa495/comments", "author": null, "committer": null, "parents": [{"sha": "0378450eec12cf5a84be9d06f5f388cc4b6d934f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0378450eec12cf5a84be9d06f5f388cc4b6d934f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0378450eec12cf5a84be9d06f5f388cc4b6d934f"}], "stats": {"total": 127, "additions": 50, "deletions": 77}, "files": [{"sha": "c38d7499d47df728b75f6ab7cf07519fea7b4755", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -1,3 +1,14 @@\n+2010-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (_GLIBCXX_HAS_NESTED_TYPE): Add.\n+\t* include/std/functional (_Has_result_type_helper,\n+\t_Has_result_type): Remove; use the above to define __has_result_type.\n+\t* include/bits/stl_iterator_base_types.h: Use the above to define\n+\t__has_iterator_category.\n+\t* include/bits/allocator.h (__has_allocator_type): Use the above.\n+\t* include/bits/cpp_type_traits.h (__has_iterator_category,\n+\t__is_iterator): Remove.\n+\n 2010-10-05  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "e73ab7ea5cd3525a8c1ee5e3d9b84df332e66c39", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -48,7 +48,7 @@\n #include <bits/c++allocator.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <type_traits>\n+#include <type_traits> // For _GLIBCXX_HAS_NESTED_TYPE\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -210,26 +210,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   static const allocator_arg_t allocator_arg = allocator_arg_t();\n \n-  template<typename _Tp>\n-    class __has_allocator_type\n-    : public __sfinae_types\n-    {\n-      template<typename _Up>\n-        struct _Wrap_type\n-\t{ };\n-\n-      template<typename _Up>\n-        static __one __test(_Wrap_type<typename _Up::allocator_type>*);\n-\n-      template<typename _Up>\n-        static __two __test(...);\n-\n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n+_GLIBCXX_HAS_NESTED_TYPE(allocator_type)\n \n   template<typename _Tp, typename _Alloc,\n-\t   bool = __has_allocator_type<_Tp>::__value>\n+\t   bool = __has_allocator_type<_Tp>::value>\n     struct __uses_allocator_helper\n     : public false_type { };\n "}, {"sha": "0d7b9ff09fcd0a384f3ee8ec62ae3788ee0686d6", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -414,34 +414,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n-  template<typename _Tp>\n-    class __has_iterator_category\n-    {\n-      typedef char __one;\n-      typedef struct { char __arr[2]; } __two;\n-\n-      template<typename _Up>\n-        struct _Wrap_type\n-\t{ };\n-\n-      template<typename _Up>\n-        static __one __test(_Wrap_type<typename _Up::iterator_category>*);\n-\n-      template<typename _Up>\n-        static __two __test(...);\n-\n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_iterator\n-    {\n-      enum { __value = (__has_iterator_category<_Tp>::__value\n-\t\t\t|| __is_pointer<_Tp>::__value) };\n-      typedef typename __truth_type<__value>::__type __type;\n-    };\n-\n _GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "7b1eafd128395418b613c416bfe62d005be96f64", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -65,7 +65,7 @@\n #include <bits/c++config.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-# include <bits/cpp_type_traits.h> // For __has_iterator_category\n+# include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -137,8 +137,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  provide tighter, more correct semantics.\n   */\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+_GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n+\n   template<typename _Iterator,\n-\t   bool = __has_iterator_category<_Iterator>::__value>\n+\t   bool = __has_iterator_category<_Iterator>::value>\n     struct __iterator_traits { };\n \n   template<typename _Iterator>"}, {"sha": "f781d9e0477a5d030bf1c989ee9701c2760b9e15", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -63,33 +63,7 @@ namespace std\n   template<typename _MemberPointer>\n     class _Mem_fn;\n \n-  /**\n-   *  Actual implementation of _Has_result_type, which uses SFINAE to\n-   *  determine if the type _Tp has a publicly-accessible member type\n-   *  result_type.\n-  */\n-  template<typename _Tp>\n-    class _Has_result_type_helper : __sfinae_types\n-    {\n-      template<typename _Up>\n-        struct _Wrap_type\n-\t{ };\n-\n-      template<typename _Up>\n-        static __one __test(_Wrap_type<typename _Up::result_type>*);\n-\n-      template<typename _Up>\n-        static __two __test(...);\n-\n-    public:\n-      static const bool value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-\n-  template<typename _Tp>\n-    struct _Has_result_type\n-    : integral_constant<bool,\n-\t      _Has_result_type_helper<typename remove_cv<_Tp>::type>::value>\n-    { };\n+_GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   /// If we have found a result_type, extract it.\n   template<bool _Has_result_type, typename _Functor>\n@@ -108,7 +82,7 @@ namespace std\n   */\n   template<typename _Functor>\n     struct _Weak_result_type_impl\n-    : _Maybe_get_result_type<_Has_result_type<_Functor>::value, _Functor>\n+    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>\n     { };\n \n   /// Retrieve the result type for a function type."}, {"sha": "cde741eb43a30dcee43f09c9b052ab40222ce8ef", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033b71cea1b4098c37cfd67f3213c4a917caa495/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=033b71cea1b4098c37cfd67f3213c4a917caa495", "patch": "@@ -696,6 +696,35 @@ namespace std\n         type;\n     };\n \n+  /**\n+   *  Use SFINAE to determine if the type _Tp has a publicly-accessible\n+   *  member type _NTYPE.\n+   */\n+#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE)                         \\\n+  template<typename _Tp>                                         \\\n+    class __has_##_NTYPE##_helper                                \\\n+    : __sfinae_types                                             \\\n+    {                                                            \\\n+      template<typename _Up>                                     \\\n+        struct _Wrap_type                                        \\\n+\t{ };                                                     \\\n+                                                                 \\\n+      template<typename _Up>                                     \\\n+        static __one __test(_Wrap_type<typename _Up::_NTYPE>*);  \\\n+                                                                 \\\n+      template<typename _Up>                                     \\\n+        static __two __test(...);                                \\\n+                                                                 \\\n+    public:                                                      \\\n+      static const bool value = sizeof(__test<_Tp>(0)) == 1;     \\\n+    };                                                           \\\n+                                                                 \\\n+  template<typename _Tp>                                         \\\n+    struct __has_##_NTYPE                                        \\\n+    : integral_constant<bool, __has_##_NTYPE##_helper            \\\n+\t\t\t<typename remove_cv<_Tp>::type>::value>  \\\n+    { };\n+\n   // @} group metaprogramming\n }\n "}]}