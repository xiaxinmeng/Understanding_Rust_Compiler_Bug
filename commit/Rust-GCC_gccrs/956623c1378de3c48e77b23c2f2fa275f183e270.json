{"sha": "956623c1378de3c48e77b23c2f2fa275f183e270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2NjIzYzEzNzhkZTNjNDhlNzdiMjNjMmYyZmEyNzVmMTgzZTI3MA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-11-03T10:47:04Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-11-03T10:47:04Z"}, "message": "re PR tree-optimization/60770 (disappearing clobbers)\n\n2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/60770\ngcc/\n\t* tree-into-ssa.c (rewrite_update_stmt): Return whether the\n\tstatement should be removed.\n\t(maybe_register_def): Likewise. Replace clobbers with default\n\tdefinitions.\n\t(rewrite_dom_walker::before_dom_children): Remove statement if\n\trewrite_update_stmt says so.\n\t* tree-ssa-live.c: Include tree-ssa.h.\n\t(set_var_live_on_entry): Do not mark undefined variables as live.\n\t(verify_live_on_entry): Do not check undefined variables.\n\t* tree-ssa.h (ssa_undefined_value_p): New parameter for the case\n\tof partially undefined variables.\n\t* tree-ssa.c (ssa_undefined_value_p): Likewise.\n\t(execute_update_addresses_taken): Do not drop clobbers.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/pr60770-1.c: New file.\n\nFrom-SVN: r217034", "tree": {"sha": "b8fffd826c781877806bce6555060851ee0637bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8fffd826c781877806bce6555060851ee0637bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/956623c1378de3c48e77b23c2f2fa275f183e270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956623c1378de3c48e77b23c2f2fa275f183e270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956623c1378de3c48e77b23c2f2fa275f183e270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956623c1378de3c48e77b23c2f2fa275f183e270/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b25b35c4ca7edf62118660048d5a7672653644f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25b35c4ca7edf62118660048d5a7672653644f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25b35c4ca7edf62118660048d5a7672653644f4"}], "stats": {"total": 106, "additions": 78, "deletions": 28}, "files": [{"sha": "41a4f57c799f7879af3d35bcc08fcfadc8e8cdfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -1,3 +1,20 @@\n+2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/60770\n+\t* tree-into-ssa.c (rewrite_update_stmt): Return whether the\n+\tstatement should be removed.\n+\t(maybe_register_def): Likewise. Replace clobbers with default\n+\tdefinitions.\n+\t(rewrite_dom_walker::before_dom_children): Remove statement if\n+\trewrite_update_stmt says so.\n+\t* tree-ssa-live.c: Include tree-ssa.h.\n+\t(set_var_live_on_entry): Do not mark undefined variables as live.\n+\t(verify_live_on_entry): Do not check undefined variables.\n+\t* tree-ssa.h (ssa_undefined_value_p): New parameter for the case\n+\tof partially undefined variables.\n+\t* tree-ssa.c (ssa_undefined_value_p): Likewise.\n+\t(execute_update_addresses_taken): Do not drop clobbers.\n+\n 2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/63666"}, {"sha": "7e97d61895f0599cb6ba388ccf10296cd72365b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -1,3 +1,8 @@\n+2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/60770\n+\t* gcc.dg/tree-ssa/pr60770-1.c: New file.\n+\n 2014-11-03  Jan Beulich  <jbeulich@suse.com>\n \n \t* gcc.target/i386/i386.exp: Extend option set to test"}, {"sha": "021d88430c4ac265e93d8931086216d2fae4b4b8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr60770-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr60770-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr60770-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr60770-1.c?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wall\" } */\n+\n+int f(int n){\n+  int*p;\n+  {\n+    int yyy=n;\n+    p=&yyy;\n+  }\n+  return *p; /* { dg-warning \"yyy\" } */\n+}"}, {"sha": "d86efe47504851c55b4883e5342854f379a1d056", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -1833,27 +1833,37 @@ maybe_replace_use_in_debug_stmt (use_operand_p use_p)\n /* If the operand pointed to by DEF_P is an SSA name in NEW_SSA_NAMES\n    or OLD_SSA_NAMES, or if it is a symbol marked for renaming,\n    register it as the current definition for the names replaced by\n-   DEF_P.  */\n+   DEF_P.  Returns whether the statement should be removed.  */\n \n-static inline void\n+static inline bool\n maybe_register_def (def_operand_p def_p, gimple stmt,\n \t\t    gimple_stmt_iterator gsi)\n {\n   tree def = DEF_FROM_PTR (def_p);\n   tree sym = DECL_P (def) ? def : SSA_NAME_VAR (def);\n+  bool to_delete = false;\n \n   /* If DEF is a naked symbol that needs renaming, create a new\n      name for it.  */\n   if (marked_for_renaming (sym))\n     {\n       if (DECL_P (def))\n \t{\n-\t  tree tracked_var;\n-\n-\t  def = make_ssa_name (def, stmt);\n+\t  if (gimple_clobber_p (stmt) && is_gimple_reg (sym))\n+\t    {\n+\t      gcc_checking_assert (TREE_CODE (sym) == VAR_DECL);\n+\t      /* Replace clobber stmts with a default def. This new use of a\n+\t\t default definition may make it look like SSA_NAMEs have\n+\t\t conflicting lifetimes, so we need special code to let them\n+\t\t coalesce properly.  */\n+\t      to_delete = true;\n+\t      def = get_or_create_ssa_default_def (cfun, sym);\n+\t    }\n+\t  else\n+\t    def = make_ssa_name (def, stmt);\n \t  SET_DEF (def_p, def);\n \n-\t  tracked_var = target_for_debug_bind (sym);\n+\t  tree tracked_var = target_for_debug_bind (sym);\n \t  if (tracked_var)\n \t    {\n \t      gimple note = gimple_build_debug_bind (tracked_var, def, stmt);\n@@ -1911,6 +1921,8 @@ maybe_register_def (def_operand_p def_p, gimple stmt,\n       if (is_old_name (def))\n \tregister_new_update_single (def, def);\n     }\n+\n+  return to_delete;\n }\n \n \n@@ -1919,9 +1931,9 @@ maybe_register_def (def_operand_p def_p, gimple stmt,\n    OLD_SSA_NAMES used by SI will be updated to their current reaching\n    definition.  Names in OLD_SSA_NAMES or NEW_SSA_NAMES defined by SI\n    will be registered as a new definition for their corresponding name\n-   in OLD_SSA_NAMES.  */\n+   in OLD_SSA_NAMES.  Returns whether STMT should be removed.  */\n \n-static void\n+static bool\n rewrite_update_stmt (gimple stmt, gimple_stmt_iterator gsi)\n {\n   use_operand_p use_p;\n@@ -1930,7 +1942,7 @@ rewrite_update_stmt (gimple stmt, gimple_stmt_iterator gsi)\n \n   /* Only update marked statements.  */\n   if (!rewrite_uses_p (stmt) && !register_defs_p (stmt))\n-    return;\n+    return false;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1981,9 +1993,12 @@ rewrite_update_stmt (gimple stmt, gimple_stmt_iterator gsi)\n   /* Register definitions of names in NEW_SSA_NAMES and OLD_SSA_NAMES.\n      Also register definitions for names whose underlying symbol is\n      marked for renaming.  */\n+  bool to_delete = false;\n   if (register_defs_p (stmt))\n     FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, iter, SSA_OP_ALL_DEFS)\n-      maybe_register_def (def_p, stmt, gsi);\n+      to_delete |= maybe_register_def (def_p, stmt, gsi);\n+\n+  return to_delete;\n }\n \n \n@@ -2149,8 +2164,11 @@ rewrite_update_dom_walker::before_dom_children (basic_block bb)\n   if (bitmap_bit_p (interesting_blocks, bb->index))\n     {\n       gcc_checking_assert (bitmap_bit_p (blocks_to_update, bb->index));\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-        rewrite_update_stmt (gsi_stmt (gsi), gsi);\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n+\tif (rewrite_update_stmt (gsi_stmt (gsi), gsi))\n+\t  gsi_remove (&gsi, true);\n+\telse\n+\t  gsi_next (&gsi);\n     }\n \n   /* Step 3.  Update PHI nodes.  */"}, {"sha": "22013e0ccdfb657d34ee391ad16b66c1935ee5a9", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"debug.h\"\n #include \"flags.h\"\n+#include \"tree-ssa.h\"\n \n #ifdef ENABLE_CHECKING\n static void  verify_live_on_entry (tree_live_info_p);\n@@ -1103,6 +1104,10 @@ set_var_live_on_entry (tree ssa_name, tree_live_info_p live)\n   else\n     def_bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n \n+  /* An undefined local variable does not need to be very alive.  */\n+  if (ssa_undefined_value_p (ssa_name, false))\n+    return;\n+\n   /* Visit each use of SSA_NAME and if it isn't in the same block as the def,\n      add it to the list of live on entry blocks.  */\n   FOR_EACH_IMM_USE_FAST (use, imm_iter, ssa_name)\n@@ -1439,6 +1444,11 @@ verify_live_on_entry (tree_live_info_p live)\n \t  else\n \t    if (d == var)\n \t      {\n+\t\t/* An undefined local variable does not need to be very\n+\t\t   alive.  */\n+\t\tif (ssa_undefined_value_p (var, false))\n+\t\t  continue;\n+\n \t\t/* The only way this var shouldn't be marked live on entry is\n \t\t   if it occurs in a PHI argument of the block.  */\n \t\tsize_t z;"}, {"sha": "25354617a18a596dc0996718b9093055f08c7d35", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -1188,10 +1188,11 @@ tree_ssa_strip_useless_type_conversions (tree exp)\n }\n \n \n-/* Return true if T, an SSA_NAME, has an undefined value.  */\n+/* Return true if T, an SSA_NAME, has an undefined value.  PARTIAL is what\n+   should be returned if the value is only partially undefined.  */\n \n bool\n-ssa_undefined_value_p (tree t)\n+ssa_undefined_value_p (tree t, bool partial)\n {\n   gimple def_stmt;\n   tree var = SSA_NAME_VAR (t);\n@@ -1215,7 +1216,7 @@ ssa_undefined_value_p (tree t)\n     return true;\n \n   /* Check if the complex was not only partially defined.  */\n-  if (is_gimple_assign (def_stmt)\n+  if (partial && is_gimple_assign (def_stmt)\n       && gimple_assign_rhs_code (def_stmt) == COMPLEX_EXPR)\n     {\n       tree rhs1, rhs2;\n@@ -1561,18 +1562,6 @@ execute_update_addresses_taken (void)\n \t\tif (gimple_assign_lhs (stmt) != lhs)\n \t\t  gimple_assign_set_lhs (stmt, lhs);\n \n-\t\t/* For var ={v} {CLOBBER}; where var lost\n-\t\t   TREE_ADDRESSABLE just remove the stmt.  */\n-\t\tif (DECL_P (lhs)\n-\t\t    && TREE_CLOBBER_P (rhs)\n-\t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (lhs)))\n-\t\t  {\n-\t\t    unlink_stmt_vdef (stmt);\n-      \t\t    gsi_remove (&gsi, true);\n-\t\t    release_defs (stmt);\n-\t\t    continue;\n-\t\t  }\n-\n \t\tif (gimple_assign_rhs1 (stmt) != rhs)\n \t\t  {\n \t\t    gimple_stmt_iterator gsi = gsi_for_stmt (stmt);"}, {"sha": "ed1ff6e713699bf0e77973081a54263596322f8d", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956623c1378de3c48e77b23c2f2fa275f183e270/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=956623c1378de3c48e77b23c2f2fa275f183e270", "patch": "@@ -51,7 +51,7 @@ extern void delete_tree_ssa (void);\n extern bool tree_ssa_useless_type_conversion (tree);\n extern tree tree_ssa_strip_useless_type_conversions (tree);\n \n-extern bool ssa_undefined_value_p (tree);\n+extern bool ssa_undefined_value_p (tree, bool = true);\n extern void execute_update_addresses_taken (void);\n \n /* Given an edge_var_map V, return the PHI arg definition.  */"}]}