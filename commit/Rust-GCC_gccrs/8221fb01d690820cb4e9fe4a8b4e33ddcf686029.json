{"sha": "8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyMWZiMDFkNjkwODIwY2I0ZTlmZTRhOGI0ZTMzZGRjZjY4NjAyOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-09T19:39:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-09T19:39:14Z"}, "message": "compiler: track //go:nointerface in export data\n    \n    The magic //go:nointerface comment, used for field tracking, was only\n    implemented for conversions to interface types in the same package.\n    Record it in the export data, so that it works as expected for types\n    imported from a different package.\n    \n    Reviewed-on: https://go-review.googlesource.com/93075\n\nFrom-SVN: r257540", "tree": {"sha": "a02a65515fd99462d3424ce0a5dda6b342833b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02a65515fd99462d3424ce0a5dda6b342833b75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/comments", "author": null, "committer": null, "parents": [{"sha": "0444aa9c0a3357707624263ec2fd13d8f156016e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0444aa9c0a3357707624263ec2fd13d8f156016e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0444aa9c0a3357707624263ec2fd13d8f156016e"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "3d73330d13d2ebdf3dbe919515d5268b718bfecd", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "patch": "@@ -1,4 +1,4 @@\n-7e94bac5676afc8188677c98ecb263c78c1a7f8d\n+89105404f94005ffa8e2b08df78015dc9ac91362\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "11ac33840707e580a3b11c06701fdb6ec5e3465a", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "patch": "@@ -5189,17 +5189,24 @@ Function::defer_stack(Location location)\n void\n Function::export_func(Export* exp, const std::string& name) const\n {\n-  Function::export_func_with_type(exp, name, this->type_);\n+  Function::export_func_with_type(exp, name, this->type_,\n+\t\t\t\t  this->is_method() && this->nointerface());\n }\n \n // Export a function with a type.\n \n void\n Function::export_func_with_type(Export* exp, const std::string& name,\n-\t\t\t\tconst Function_type* fntype)\n+\t\t\t\tconst Function_type* fntype, bool nointerface)\n {\n   exp->write_c_string(\"func \");\n \n+  if (nointerface)\n+    {\n+      go_assert(fntype->is_method());\n+      exp->write_c_string(\"/*nointerface*/ \");\n+    }\n+\n   if (fntype->is_method())\n     {\n       exp->write_c_string(\"(\");\n@@ -5280,10 +5287,21 @@ Function::import_func(Import* imp, std::string* pname,\n \t\t      Typed_identifier** preceiver,\n \t\t      Typed_identifier_list** pparameters,\n \t\t      Typed_identifier_list** presults,\n-\t\t      bool* is_varargs)\n+\t\t      bool* is_varargs,\n+\t\t      bool* nointerface)\n {\n   imp->require_c_string(\"func \");\n \n+  *nointerface = false;\n+  if (imp->match_c_string(\"/*\"))\n+    {\n+      imp->require_c_string(\"/*nointerface*/ \");\n+      *nointerface = true;\n+\n+      // Only a method can be nointerface.\n+      go_assert(imp->peek_char() == '(');\n+    }\n+\n   *preceiver = NULL;\n   if (imp->peek_char() == '(')\n     {\n@@ -6213,6 +6231,32 @@ Bindings_snapshot::check_goto_defs(Location loc, const Block* block,\n \n // Class Function_declaration.\n \n+// Whether this declares a method.\n+\n+bool\n+Function_declaration::is_method() const\n+{\n+  return this->fntype_->is_method();\n+}\n+\n+// Whether this method should not be included in the type descriptor.\n+\n+bool\n+Function_declaration::nointerface() const\n+{\n+  go_assert(this->is_method());\n+  return (this->pragmas_ & GOPRAGMA_NOINTERFACE) != 0;\n+}\n+\n+// Record that this method should not be included in the type\n+// descriptor.\n+\n+void\n+Function_declaration::set_nointerface()\n+{\n+  this->pragmas_ |= GOPRAGMA_NOINTERFACE;\n+}\n+\n // Return the function descriptor.\n \n Expression*"}, {"sha": "139df1785d45fa2ae12adfc6babbfaebf005ddf5", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "patch": "@@ -1476,13 +1476,14 @@ class Function\n   // Export a function with a type.\n   static void\n   export_func_with_type(Export*, const std::string& name,\n-\t\t\tconst Function_type*);\n+\t\t\tconst Function_type*, bool nointerface);\n \n   // Import a function.\n   static void\n   import_func(Import*, std::string* pname, Typed_identifier** receiver,\n \t      Typed_identifier_list** pparameters,\n-\t      Typed_identifier_list** presults, bool* is_varargs);\n+\t      Typed_identifier_list** presults, bool* is_varargs,\n+\t      bool* nointerface);\n \n  private:\n   // Type for mapping from label names to Label objects.\n@@ -1607,6 +1608,10 @@ class Function_declaration\n   location() const\n   { return this->location_; }\n \n+  // Return whether this function declaration is a method.\n+  bool\n+  is_method() const;\n+\n   const std::string&\n   asm_name() const\n   { return this->asm_name_; }\n@@ -1628,6 +1633,16 @@ class Function_declaration\n     this->pragmas_ = pragmas;\n   }\n \n+  // Whether this method should not be included in the type\n+  // descriptor.\n+  bool\n+  nointerface() const;\n+\n+  // Record that this method should not be included in the type\n+  // descriptor.\n+  void\n+  set_nointerface();\n+\n   // Return an expression for the function descriptor, given the named\n   // object for this function.  This may only be called for functions\n   // without a closure.  This will be an immutable struct with one\n@@ -1652,7 +1667,10 @@ class Function_declaration\n   // Export a function declaration.\n   void\n   export_func(Export* exp, const std::string& name) const\n-  { Function::export_func_with_type(exp, name, this->fntype_); }\n+  {\n+    Function::export_func_with_type(exp, name, this->fntype_,\n+\t\t\t\t    this->is_method() && this->nointerface());\n+  }\n \n   // Check that the types used in this declaration's signature are defined.\n   void"}, {"sha": "7e06a3c085047d9531434756e805302ba307d7ee", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "patch": "@@ -607,8 +607,9 @@ Import::import_func(Package* package)\n   Typed_identifier_list* parameters;\n   Typed_identifier_list* results;\n   bool is_varargs;\n+  bool nointerface;\n   Function::import_func(this, &name, &receiver,\n-\t\t\t&parameters, &results, &is_varargs);\n+\t\t\t&parameters, &results, &is_varargs, &nointerface);\n   Function_type *fntype = Type::make_function_type(receiver, parameters,\n \t\t\t\t\t\t   results, this->location_);\n   if (is_varargs)\n@@ -648,6 +649,10 @@ Import::import_func(Package* package)\n       if (this->add_to_globals_)\n \tthis->gogo_->add_dot_import_object(no);\n     }\n+\n+  if (nointerface)\n+    no->func_declaration_value()->set_nointerface();\n+\n   return no;\n }\n "}, {"sha": "40eccfcadcaf8b70a7b04abf55d7adf1a6c4faf9", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221fb01d690820cb4e9fe4a8b4e33ddcf686029/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8221fb01d690820cb4e9fe4a8b4e33ddcf686029", "patch": "@@ -9742,7 +9742,12 @@ bool\n Named_method::do_nointerface() const\n {\n   Named_object* no = this->named_object_;\n-  return no->is_function() && no->func_value()->nointerface();\n+  if (no->is_function())\n+    return no->func_value()->nointerface();\n+  else if (no->is_function_declaration())\n+    return no->func_declaration_value()->nointerface();\n+  else\n+    go_unreachable();\n }\n \n // Class Interface_method."}]}