{"sha": "35fdf04e91648740cbbff8087d7269fef02a678b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmZGYwNGU5MTY0ODc0MGNiYmZmODA4N2Q3MjY5ZmVmMDJhNjc4Yg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2005-01-20T22:15:25Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2005-01-20T22:15:25Z"}, "message": "sourcebuild.texi (Test Directives): New.\n\n2005-01-20  Janis Johnson  <janis187@us.ibm.com>\n\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n\n\t* doc/sourcebuild.texi (Test Directives): New.\n\nCo-Authored-By: Giovanni Bajo <giovannibajo@gcc.gnu.org>\n\nFrom-SVN: r93989", "tree": {"sha": "1e396c5b726e5747f56b1f8d4081663728fcdfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e396c5b726e5747f56b1f8d4081663728fcdfe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35fdf04e91648740cbbff8087d7269fef02a678b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fdf04e91648740cbbff8087d7269fef02a678b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fdf04e91648740cbbff8087d7269fef02a678b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fdf04e91648740cbbff8087d7269fef02a678b/comments", "author": null, "committer": null, "parents": [{"sha": "8ffeac67a786b8ccce5541f82c135de211412b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffeac67a786b8ccce5541f82c135de211412b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffeac67a786b8ccce5541f82c135de211412b67"}], "stats": {"total": 206, "additions": 206, "deletions": 0}, "files": [{"sha": "07b5d87f9910586d8430911088e9c0994eb2cd13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fdf04e91648740cbbff8087d7269fef02a678b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fdf04e91648740cbbff8087d7269fef02a678b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35fdf04e91648740cbbff8087d7269fef02a678b", "patch": "@@ -1,3 +1,8 @@\n+2005-01-20  Janis Johnson  <janis187@us.ibm.com>\n+\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* doc/sourcebuild.texi (Test Directives): New.\n+\n 2005-01-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* real.c (real_floor): Don't leave the result uninitialized when"}, {"sha": "604a64c980f67e84ebfebd369d8da724f89f3197", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fdf04e91648740cbbff8087d7269fef02a678b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fdf04e91648740cbbff8087d7269fef02a678b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=35fdf04e91648740cbbff8087d7269fef02a678b", "patch": "@@ -818,6 +818,7 @@ here; FIXME: document the others.\n \n @menu\n * Test Idioms::     Idioms used in testsuite code.\n+* Test Directives:: Directives used within DejaGnu tests.\n * Ada Tests::       The Ada language testsuites.\n * C Tests::         The C language testsuites.\n * libgcj Tests::    The Java library testsuites.\n@@ -905,6 +906,206 @@ unfortunately, the mechanisms for this differ by directory.\n \n FIXME: discuss non-C testsuites here.\n \n+@node Test Directives\n+@subsection Directives used within DejaGnu tests\n+\n+Test directives appear within comments in a test source file and begin\n+with @code{dg-}.  Some of these are defined within DegaGnu and others\n+are local to the GCC testsuite.\n+\n+The order in which test directives appear in a test can be important:\n+directives local to GCC sometimes override information used by the\n+DejaGnu directives, which know nothing about the GCC directives, so the\n+DejaGnu directives must precede GCC directives.\n+\n+Several test directives include selectors which are usually preceded by\n+the keyword @code{target} or @code{xfail}.  A selector is one or\n+more target triplets, possibly including wildcard characters, or else a\n+single effective-target keyword.  Depending on the context, the selector\n+specifies whether a test is skipped and reported as unsupported or is\n+expected to fail.  Use @samp{*-*-*} to match any target.\n+\n+Effective-target keywords are defined in @file{target-supports.exp} in\n+the GCC testsuite or, in the case of unusual effective targets that are\n+used only for a limited number of tests, in @file{.exp} files in the\n+same directory as the tests.  There is no mechanism to combine or negate\n+effective-target keywords.\n+\n+@table @code\n+@item @{ dg-do @var{do-what-keyword} [@{ target/xfail @var{selector} @}] @}\n+@var{do-what-keyword} specifies how the test is compiled and whether\n+it is executed.  It is one of:\n+\n+@table @code\n+@item preprocess\n+Compile with @option{-E} to run only the preprocessor.\n+@item assemble\n+Compile with @option{-S} to produce an assembly code file.\n+@item compile\n+Compile with @option{-c} to produce a relocatable object file.\n+@item link\n+Compile, assemble, and link to produce an executable file.\n+@item run\n+Produce and run an executable file, which is expected to return\n+an exit code of 0.\n+@end table\n+\n+The default is @code{compile}.  That can be overridden for a set of\n+tests by redefining @code{dg-do-what-default} within the @code{.exp}\n+file for those tests.\n+\n+If the directive includes the optional @samp{@{ target @var{selector} @}}\n+then the test is skipped unless the target system is included in the\n+list of target triplets or matches the effective-target keyword.\n+\n+If the directive includes the optional @samp{@{ xfail @var{selector} @}}\n+and the selector is met then the test is expected to fail.  For\n+@code{dg-do run}, execution is expected to fail but compilation\n+is expected to pass.\n+\n+@item @{ dg-options @var{options} [@{ target @var{selector} @}] @}\n+This DejaGnu directive provides a list of compiler options, to be used\n+if the target system matches @var{selector}, that replace the default\n+options used for this set of tests.\n+\n+@item @{ dg-skip-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+Skip the test if the test system is included in @var{selector} and if\n+each of the options in @var{include-opts} is in the set of options with\n+which the test would be compiled and if none of the options in\n+@var{exclude-opts} is in the set of options with which the test would be\n+compiled.\n+\n+Use @samp{\"*\"} for an empty @var{include-opts} list and @samp{\"\"} for\n+an empty @var{exclude-opts} list.\n+\n+@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+Expect the test to fail if the conditions (which are the same as for\n+@code{dg-skip-if}) are met.\n+\n+@item @{ dg-require-@var{support} args @}\n+Skip the test if the target does not provide the required support;\n+see @file{gcc-dg.exp} in the GCC testsuite for the actual directives.\n+These directives must appear after any @code{dg-do} directive in the test.\n+They require at least one argument, which can be an empty string if the\n+specific procedure does not examine the argument.\n+\n+@item @{ dg-require-effective-target @var{keyword} @}\n+Skip the test if the test target, including current multilib flags,\n+is not covered by the effective-target keyword.\n+This directive must appear after any @code{dg-do} directive in the test.\n+\n+@item @{ dg-error @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n+This DejaGnu directive appears on a source line that is expected to get\n+an error message, or else specifies the source line associated with the\n+message.  If there is no message for that line or if the text of that\n+message is not matched by @var{regexp} then the check fails and\n+@var{comment} is included in the @code{FAIL} message.  The check does\n+not look for the string @samp{\"error\"} unless it is part of @var{regexp}.\n+\n+@item @{ dg-warning @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n+This DejaGnu directive appears on a source line that is expected to get\n+a warning message, or else specifies the source line associated with the\n+message.  If there is no message for that line or if the text of that\n+message is not matched by @var{regexp} then the check fails and\n+@var{comment} is included in the @code{FAIL} message.  The check does\n+not look for the string @samp{\"warning\"} unless it is part of @var{regexp}.\n+\n+@item @{ dg-bogus @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n+This DejaGnu directive appears on a source line that should not get a\n+message matching @var{regexp}, or else specifies the source line\n+associated with the bogus message.  It is usually used with @samp{xfail}\n+to indicate that the message is a known problem for a particular set of\n+targets.\n+\n+@item @{ dg-excess-errors @var{comment} [@{ target/xfail @var{selector} @}] @}\n+This DejaGnu directive indicates that the test is expected to fail due\n+to compiler messages that are not handled by @option{dg-error},\n+@option{dg-warning} or @option{dg-bogus}.\n+\n+@item @{ dg-output @var{regexp} [@{ target/xfail @var{selector} @}] @}\n+This DejaGnu directive compares @var{regexp} to the combined output\n+that the test executable writes to @file{stdout} and @file{stderr}.\n+\n+@item @{ dg-prune-output @var{regexp} @}\n+Prune messages matching @var{regexp} from test output.\n+\n+@item @{ dg-additional-files \"@var{filelist}\" @}\n+Specify additional files, other than source files, that must be copied\n+to the system where the compiler runs.\n+\n+@item @{ dg-additional-sources \"@var{filelist}\" @}\n+Specify additional source files to appear in the compile line\n+following the main test file.\n+\n+@item @{ dg-final @{ @var{local-directive} @} @}\n+This DejaGnu directive is placed within a comment anywhere in the\n+source file and is processed after the test has been compiled and run.\n+Multiple @option{dg-final} commands are processed in the order in which\n+they appear in the source file.\n+\n+The GCC testsuite defines the following directives to be used within\n+@code{dg-final}.\n+\n+@table @code\n+@item scan-file @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regexp} matches text in @var{filename}.\n+\n+@item scan-file-not @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regexp} does not match text in @var{filename}.\n+\n+@item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n+Passes if @var{symbol} is defined as a hidden symbol in the test's\n+assembly output.\n+\n+@item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]\n+Passes if @var{symbol} is not defined as a hidden symbol in the test's\n+assembly output.\n+\n+@item scan-assembler-times @var{regex} @var{num} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} is matched exactly @var{num} times in the test's\n+assembler output.\n+\n+@item scan-assembler @var{regex} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} matches text in the test's assembler output.\n+\n+@item scan-assembler-not @var{regex} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} does not match text in the test's assembler output.\n+\n+@item scan-assembler-dem @var{regex} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} matches text in the test's demangled assembler output.\n+\n+@item scan-assembler-dem-not @var{regex} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} does not match text in the test's demangled assembler\n+output.\n+\n+@item scan-tree-dump-times @var{regex} @var{num} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} is found exactly @var{num} times in the dump file\n+with suffix @var{suffix}.\n+\n+@item scan-tree-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} matches text in the dump file with suffix @var{suffix}.\n+\n+@item scan-tree-dump-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} does not match text in the dump file with suffix\n+@var{suffix}.\n+\n+@item scan-tree-dump-dem @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} matches demangled text in the dump file with\n+suffix @var{suffix}.\n+\n+@item scan-tree-dump-dem-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]\n+Passes if @var{regex} does not match demangled text in the dump file with\n+suffix @var{suffix}.\n+\n+@item run-gcov @var{sourcefile}\n+Check line counts in @command{gcov} tests.\n+\n+@item run-gcov [branches] [calls] @{ @var{opts} @var{sourcefile} @}\n+Check branch and/or call counts, in addition to line counts, in\n+@command{gcov} tests.\n+@end table\n+@end table\n+\n @node Ada Tests\n @subsection Ada Language Testsuites\n "}]}