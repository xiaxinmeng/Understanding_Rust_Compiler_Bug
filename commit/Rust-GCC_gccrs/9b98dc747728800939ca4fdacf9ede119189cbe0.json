{"sha": "9b98dc747728800939ca4fdacf9ede119189cbe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5OGRjNzQ3NzI4ODAwOTM5Y2E0ZmRhY2Y5ZWRlMTE5MTg5Y2JlMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-03-18T01:25:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-03-18T01:25:57Z"}, "message": "h8300-protos.h: Add a prototype for byte_accesses_mergeable_p.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tbyte_accesses_mergeable_p.\n\t* config/h8300/h8300.c (byte_accesses_mergeable_p): New.\n\t* config/h8300/h8300.md (*iorhi3_two_qi_mem): Likewise.\n\t(a splitter): Likewise.\n\t(*iorsi3_ashift_16_ashift_24): Likewise.\n\t(*iorsi3_ashift_16_ashift_24_mem): Likewise.\n\nFrom-SVN: r64518", "tree": {"sha": "b054e1c08579f9e2760c11865684eb65c8a18968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b054e1c08579f9e2760c11865684eb65c8a18968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b98dc747728800939ca4fdacf9ede119189cbe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b98dc747728800939ca4fdacf9ede119189cbe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b98dc747728800939ca4fdacf9ede119189cbe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b98dc747728800939ca4fdacf9ede119189cbe0/comments", "author": null, "committer": null, "parents": [{"sha": "d4e9427174d2e180a5ae002d60acbfb7d199f35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e9427174d2e180a5ae002d60acbfb7d199f35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e9427174d2e180a5ae002d60acbfb7d199f35d"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "f54a2738a30e40c6574197777dfe288ecf0a20c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b98dc747728800939ca4fdacf9ede119189cbe0", "patch": "@@ -1,3 +1,13 @@\n+2003-03-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tbyte_accesses_mergeable_p.\n+\t* config/h8300/h8300.c (byte_accesses_mergeable_p): New.\n+\t* config/h8300/h8300.md (*iorhi3_two_qi_mem): Likewise.\n+\t(a splitter): Likewise.\n+\t(*iorsi3_ashift_16_ashift_24): Likewise.\n+\t(*iorsi3_ashift_16_ashift_24_mem): Likewise.\n+\n 2003-03-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* dwarf2asm.h: Delete obsolete comment."}, {"sha": "c0b6ad313105a402d324ca89fa98b624b413020f", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=9b98dc747728800939ca4fdacf9ede119189cbe0", "patch": "@@ -73,6 +73,7 @@ extern int iorxor_operator PARAMS ((rtx, enum machine_mode));\n \n extern int h8300_eightbit_constant_address_p PARAMS ((rtx));\n extern int h8300_tiny_constant_address_p PARAMS ((rtx));\n+extern int byte_accesses_mergeable_p PARAMS ((rtx, rtx));\n \n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx PARAMS ((int, rtx));"}, {"sha": "057d2ae2b2b0d03a779f871603c7fc2e42655857", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9b98dc747728800939ca4fdacf9ede119189cbe0", "patch": "@@ -4385,3 +4385,49 @@ h8300_tiny_constant_address_p (x)\n \t  || ((TARGET_H8300S && !TARGET_NORMAL_MODE)\n \t      && (IN_RANGE (addr, s1, s2) || IN_RANGE (addr, s3, s4))));\n }\n+\n+int\n+byte_accesses_mergeable_p (addr1, addr2)\n+     rtx addr1, addr2;\n+{\n+  HOST_WIDE_INT offset1, offset2;\n+  rtx reg1, reg2;\n+\n+  if (REG_P (addr1))\n+    {\n+      reg1 = addr1;\n+      offset1 = 0;\n+    }\n+  else if (GET_CODE (addr1) == PLUS\n+\t   && REG_P (XEXP (addr1, 0))\n+\t   && GET_CODE (XEXP (addr1, 1)) == CONST_INT)\n+    {\n+      reg1 = XEXP (addr1, 0);\n+      offset1 = INTVAL (XEXP (addr1, 1));\n+    }\n+  else\n+    return 0;\n+\n+  if (REG_P (addr2))\n+    {\n+      reg2 = addr2;\n+      offset2 = 0;\n+    }\n+  else if (GET_CODE (addr2) == PLUS\n+\t   && REG_P (XEXP (addr2, 0))\n+\t   && GET_CODE (XEXP (addr2, 1)) == CONST_INT)\n+    {\n+      reg2 = XEXP (addr2, 0);\n+      offset2 = INTVAL (XEXP (addr2, 1));\n+    }\n+  else\n+    return 0;\n+\n+  if (((reg1 == stack_pointer_rtx && reg2 == stack_pointer_rtx)\n+       || (reg1 == frame_pointer_rtx && reg2 == frame_pointer_rtx))\n+      && offset1 % 2 == 0\n+      && offset1 + 1 == offset2)\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "ccf3d6ea71d79236a01f5bacb191eee6ae9d2394", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b98dc747728800939ca4fdacf9ede119189cbe0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=9b98dc747728800939ca4fdacf9ede119189cbe0", "patch": "@@ -2887,6 +2887,28 @@\n   [(set_attr \"cc\" \"clobber\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"*iorhi3_two_qi_mem\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n+\t(ior:HI (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\"))\n+\t\t(ashift:HI (subreg:HI (match_operand:QI 2 \"memory_operand\" \"m\") 0)\n+\t\t\t   (const_int 8))))]\n+  \"\"\n+  \"mov.b\\\\t%X2,%t0\\;mov.b\\\\t%X1,%s0\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"16\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(ior:HI (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"\"))\n+\t\t(ashift:HI (subreg:HI (match_operand:QI 2 \"memory_operand\" \"\") 0)\n+\t\t\t   (const_int 8))))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && reload_completed\n+   && byte_accesses_mergeable_p (XEXP (operands[2], 0), XEXP (operands[1], 0))\"\n+  [(set (match_dup 0)\n+\t(match_dup 3))]\n+  \"operands[3] = gen_rtx_MEM (HImode, XEXP (operands[2], 0));\")\n+\n ;; ior:SI\n \n (define_insn \"*iorsi3_two_hi\"\n@@ -3042,6 +3064,46 @@\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn_and_split \"*iorsi3_ashift_16_ashift_24\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t   (const_int 16))\n+\t\t(ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 24))))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3)\n+        (ior:HI (ashift:HI (match_dup 4)\n+\t\t\t   (const_int 8))\n+\t\t(match_dup 3)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (ashift:SI (match_dup 0)\n+\t\t\t      (const_int 16)))\n+\t      (clobber (scratch:QI))])]\n+  \"operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\n+   operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));\")\n+\n+(define_insn_and_split \"*iorsi3_ashift_16_ashift_24_mem\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+\t(ior:SI (and:SI (ashift:SI (subreg:SI (match_operand:QI 1 \"memory_operand\" \"m\") 0)\n+\t\t\t\t   (const_int 16))\n+\t\t\t(const_int 16711680))\n+\t\t(ashift:SI (subreg:SI (match_operand:QI 2 \"memory_operand\" \"m\") 0)\n+\t\t\t   (const_int 24))))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3)\n+        (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t(ashift:HI (subreg:HI (match_dup 2) 0)\n+\t\t\t   (const_int 8))))\n+   (parallel [(set (match_dup 0)\n+\t\t   (ashift:SI (match_dup 0)\n+\t\t\t      (const_int 16)))\n+\t      (clobber (scratch:QI))])]\n+  \"operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\")\n+\n ;; Used to add the exponent of a float.\n \n (define_insn \"*addsi3_shift\""}]}