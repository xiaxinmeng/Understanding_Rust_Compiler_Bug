{"sha": "b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5Zjk4Zjk0ZDQ4YmU1ZmYxMDY0MzZiNWRkYzI4OWU3N2U5ZDdlNQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2006-01-30T17:35:37Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2006-01-30T17:35:37Z"}, "message": "global.c (find_reg): Only evict for global regs.\n\n        * global.c (find_reg): Only evict for global regs.\n        Take n_refs into account and dump more info.\n\nFrom-SVN: r110407", "tree": {"sha": "971179931822874f9d854efac2ef87a4f28e83f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/971179931822874f9d854efac2ef87a4f28e83f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39f98f94d48be5ff106436b5ddc289e77e9d7e5/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b1a6677a716307298abb22c2c0b191b69e5903e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1a6677a716307298abb22c2c0b191b69e5903e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1a6677a716307298abb22c2c0b191b69e5903e"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "8209ec63979aa0a5e11999f8c7b5038aabdad4e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39f98f94d48be5ff106436b5ddc289e77e9d7e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39f98f94d48be5ff106436b5ddc289e77e9d7e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "patch": "@@ -1,3 +1,8 @@\n+2006-01-30  Michael Matz  <matz@suse.de>\n+\n+\t* global.c (find_reg): Only evict for global regs.\n+\tTake n_refs into account and dump more info.\n+\n 2006-01-30  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR target/14798:"}, {"sha": "61fd9f7c2787c1ac0691b4ae9afccf5b9036af64", "filename": "gcc/global.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39f98f94d48be5ff106436b5ddc289e77e9d7e5/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39f98f94d48be5ff106436b5ddc289e77e9d7e5/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=b39f98f94d48be5ff106436b5ddc289e77e9d7e5", "patch": "@@ -1241,7 +1241,8 @@ find_reg (int num, HARD_REG_SET losers, int alt_regs_p, int accept_call_clobbere\n      so we can use it instead.  */\n   if (best_reg < 0 && !retrying\n       /* Let's not bother with multi-reg allocnos.  */\n-      && allocno[num].size == 1)\n+      && allocno[num].size == 1\n+      && REG_BASIC_BLOCK (allocno[num].reg) == REG_BLOCK_GLOBAL)\n     {\n       /* Count from the end, to find the least-used ones first.  */\n       for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n@@ -1278,16 +1279,29 @@ find_reg (int num, HARD_REG_SET losers, int alt_regs_p, int accept_call_clobbere\n \t\t variables so as to avoid excess precision problems that occur\n \t\t on an i386-unknown-sysv4.2 (unixware) host.  */\n \n-\t      double tmp1 = ((double) local_reg_freq[regno]\n+\t      double tmp1 = ((double) local_reg_freq[regno] * local_reg_n_refs[regno]\n \t\t\t    / local_reg_live_length[regno]);\n-\t      double tmp2 = ((double) allocno[num].freq\n+\t      double tmp2 = ((double) allocno[num].freq * allocno[num].n_refs\n \t\t\t     / allocno[num].live_length);\n \n \t      if (tmp1 < tmp2)\n \t\t{\n \t\t  /* Hard reg REGNO was used less in total by local regs\n \t\t     than it would be used by this one allocno!  */\n \t\t  int k;\n+\t\t  if (dump_file)\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Regno %d better for global %d, \",\n+\t\t      \t       regno, allocno[num].reg);\n+\t\t      fprintf (dump_file, \"fr:%d, ll:%d, nr:%d \",\n+\t\t\t       allocno[num].freq, allocno[num].live_length,\n+\t\t\t       allocno[num].n_refs);\n+\t\t      fprintf (dump_file, \"(was: fr:%d, ll:%d, nr:%d)\\n\",\n+\t\t\t       local_reg_freq[regno],\n+\t\t\t       local_reg_live_length[regno],\n+\t\t\t       local_reg_n_refs[regno]);\n+\t\t    }\n+\n \t\t  for (k = 0; k < max_regno; k++)\n \t\t    if (reg_renumber[k] >= 0)\n \t\t      {\n@@ -1296,7 +1310,12 @@ find_reg (int num, HARD_REG_SET losers, int alt_regs_p, int accept_call_clobbere\n \t\t\t  = r + hard_regno_nregs[r][PSEUDO_REGNO_MODE (k)];\n \n \t\t\tif (regno >= r && regno < endregno)\n-\t\t\t  reg_renumber[k] = -1;\n+\t\t\t  {\n+\t\t\t    if (dump_file)\n+\t\t\t      fprintf (dump_file,\n+\t\t\t\t       \"Local Reg %d now on stack\\n\", k);\n+\t\t\t    reg_renumber[k] = -1;\n+\t\t\t  }\n \t\t      }\n \n \t\t  best_reg = regno;"}]}