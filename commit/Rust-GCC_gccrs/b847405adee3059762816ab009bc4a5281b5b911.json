{"sha": "b847405adee3059762816ab009bc4a5281b5b911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0NzQwNWFkZWUzMDU5NzYyODE2YWIwMDliYzRhNTI4MWI1YjkxMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-07-12T13:51:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-07-12T13:51:00Z"}, "message": "allow EH to escape from GIMPLE_EH_ELSE ELSE block\n\nThe only preexisting use of GIMPLE_EH_ELSE, for transactional memory\ncommits, did not allow exceptions to escape from the ELSE path.  The\ntrick it uses to allow the ELSE path to see the propagating exception\ndoes not work very well if the exception cleanup raises further\nexceptions: the ELSE block is configured to handle exceptions in\nitself.  This confuses the heck out of CFG and EH cleanups.\n\nBasing the lowering context for the ELSE block on outer_state, rather\nthan this_state, gets us the expected enclosing handler.\n\n\nfor  gcc/ChangeLog\n\n\t* tree-eh.c (honor_protect_cleanup_actions): Use outer_\n\trather than this_state as the lowering context for the ELSE\n\tseq in a GIMPLE_EH_ELSE.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/gimplefe-44.c: New.\n\nFrom-SVN: r273444", "tree": {"sha": "3ae3db7d3fe556b1cb3773608d0c11f4e9fccf48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae3db7d3fe556b1cb3773608d0c11f4e9fccf48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b847405adee3059762816ab009bc4a5281b5b911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b847405adee3059762816ab009bc4a5281b5b911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b847405adee3059762816ab009bc4a5281b5b911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b847405adee3059762816ab009bc4a5281b5b911/comments", "author": null, "committer": null, "parents": [{"sha": "fdc1f34302906036637445455a53a09f25a4acfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc1f34302906036637445455a53a09f25a4acfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc1f34302906036637445455a53a09f25a4acfd"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "2d1d29f005c1f09fd544cc4e31b19620ba91ee4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b847405adee3059762816ab009bc4a5281b5b911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b847405adee3059762816ab009bc4a5281b5b911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b847405adee3059762816ab009bc4a5281b5b911", "patch": "@@ -1,3 +1,9 @@\n+2019-07-12  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* tree-eh.c (honor_protect_cleanup_actions): Use outer_\n+\trather than this_state as the lowering context for the ELSE\n+\tseq in a GIMPLE_EH_ELSE.\n+\n 2019-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* vector-builder.h (vector_builder::elt): Allow already-supplied"}, {"sha": "debec92a89fdc5a3a3fb1733e2624a7b1429f191", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b847405adee3059762816ab009bc4a5281b5b911", "patch": "@@ -1,5 +1,7 @@\n 2019-07-12  Alexandre Oliva <oliva@adacore.com>\n \n+\t* gcc.dg/gimplefe-44.c: New.\n+\n \t* gcc.dg/gimplefe-43.c: New.\n \n 2019-07-12  Richard Biener  <rguenther@suse.de>"}, {"sha": "a9a92b1701ec92ca703e10f72304dea2f1194d60", "filename": "gcc/testsuite/gcc.dg/gimplefe-44.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-44.c?ref=b847405adee3059762816ab009bc4a5281b5b911", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fexceptions -fgimple -fdump-tree-eh-eh\" } */\n+\n+void __GIMPLE foo()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  extern void might_throw1 ();\n+\t  might_throw1 ();\n+\t}\n+      finally\n+\t{\n+\t  extern void might_throw2 ();\n+\t  might_throw2 ();\n+\t}\n+      else\n+\t{\n+\t  extern void might_throw3 ();\n+\t  might_throw3 ();\n+\t}\n+    }\n+  finally\n+    {\n+      extern void might_throw4 ();\n+      might_throw4 ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \".LP 1. might_throw1\" \"eh\" } } */\n+/* { dg-final { scan-tree-dump \".LP 2. might_throw2\" \"eh\" } } */\n+/* { dg-final { scan-tree-dump \".LP 2. might_throw3\" \"eh\" } } */"}, {"sha": "5bb07e49d285918dba6017af32480523519ea561", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b847405adee3059762816ab009bc4a5281b5b911/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b847405adee3059762816ab009bc4a5281b5b911", "patch": "@@ -996,11 +996,14 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n       gimple_try_set_cleanup (tf->top_p, gimple_eh_else_n_body (eh_else));\n       finally = gimple_eh_else_e_body (eh_else);\n \n-      /* Let the ELSE see the exception that's being processed.  */\n-      eh_region save_ehp = this_state->ehp_region;\n-      this_state->ehp_region = this_state->cur_region;\n-      lower_eh_constructs_1 (this_state, &finally);\n-      this_state->ehp_region = save_ehp;\n+      /* Let the ELSE see the exception that's being processed, but\n+\t since the cleanup is outside the try block, process it with\n+\t outer_state, otherwise it may be used as a cleanup for\n+\t itself, and Bad Things (TM) ensue.  */\n+      eh_region save_ehp = outer_state->ehp_region;\n+      outer_state->ehp_region = this_state->cur_region;\n+      lower_eh_constructs_1 (outer_state, &finally);\n+      outer_state->ehp_region = save_ehp;\n     }\n   else\n     {"}]}