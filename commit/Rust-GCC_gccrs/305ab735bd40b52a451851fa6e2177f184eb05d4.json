{"sha": "305ab735bd40b52a451851fa6e2177f184eb05d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1YWI3MzViZDQwYjUyYTQ1MTg1MWZhNmUyMTc3ZjE4NGViMDVkNA==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-07-10T22:46:17Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-07-13T20:17:38Z"}, "message": "rs6000: add effective-target test ppc_mma_hw\n\nAdd a test for dejagnu to determine if execution of MMA instructions is\nsupported in the test environment. Add an execution test to make sure\nthat __builtin_cpu_supports(\"mma\") is true if we can execute MMA\ninstructions.\n\ngcc/testsuite/\n\n\t* lib/target-supports.exp (check_ppc_mma_hw_available):\n\tNew function.\n\t(is-effective-target): Add ppc_mma_hw.\n\t(is-effective-target-keyword): Add ppc_mma_hw.\n\t* gcc.target/powerpc/mma-supported.c: New file.\n\t* gcc.target/powerpc/mma-single-test.c: Require ppc_mma_hw.\n\t* gcc.target/powerpc/mma-double-test.c: Require ppc_mma_hw.", "tree": {"sha": "e987a6b897fd9d35d6dc39b3f50c966b300e354d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e987a6b897fd9d35d6dc39b3f50c966b300e354d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305ab735bd40b52a451851fa6e2177f184eb05d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305ab735bd40b52a451851fa6e2177f184eb05d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305ab735bd40b52a451851fa6e2177f184eb05d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305ab735bd40b52a451851fa6e2177f184eb05d4/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cba898481368ce16c6a2d30ef781a82dce27c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cba898481368ce16c6a2d30ef781a82dce27c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cba898481368ce16c6a2d30ef781a82dce27c55"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "ac84ae3000485064e2af06d0834c14a0dad36054", "filename": "gcc/testsuite/gcc.target/powerpc/mma-double-test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c?ref=305ab735bd40b52a451851fa6e2177f184eb05d4", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target power10_hw } */\n+/* { dg-require-effective-target ppc_mma_hw } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n \n #include <stdio.h>"}, {"sha": "15369a640258f1fb2ace22985824b20228c91ce3", "filename": "gcc/testsuite/gcc.target/powerpc/mma-single-test.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c?ref=305ab735bd40b52a451851fa6e2177f184eb05d4", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target power10_hw } */\n+/* { dg-require-effective-target ppc_mma_hw } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n \n #include <stdio.h>"}, {"sha": "92d9a7f468645ef82877813fbdece28fbdf0bef8", "filename": "gcc/testsuite/gcc.target/powerpc/mma-supported.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-supported.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-supported.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-supported.c?ref=305ab735bd40b52a451851fa6e2177f184eb05d4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ppc_mma_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+/* This test will only run when the ppc_mma_hw test passes.  If that\n+   test passes, then we expect to see that mma feature is supported.\n+   If this is not the case, then the test environment has problems. */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int\n+main (int argc, char *argv[])\n+{\n+#ifdef __BUILTIN_CPU_SUPPORTS__\n+  if ( !__builtin_cpu_supports (\"mma\"))\n+    {\n+#ifdef DEBUG      \n+      printf (\"Error: __builtin_cpu_supports says mma not supported, but ppc_mma_hw test passed.\\n\");\n+#endif\n+      abort();\n+    }\n+#endif\n+  exit (0);\n+}"}, {"sha": "2e4c696fdd1e08f3323b8940e054049829b822be", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305ab735bd40b52a451851fa6e2177f184eb05d4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=305ab735bd40b52a451851fa6e2177f184eb05d4", "patch": "@@ -2234,6 +2234,31 @@ proc check_power10_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports executing MMA instructions, 0 otherwise.\n+# Cache the result.  It is assumed that if a simulator does not support the\n+# MMA instructions, that it will generate an error and this test will fail.\n+\n+proc check_ppc_mma_hw_available { } {\n+    return [check_cached_effective_target ppc_mma_hw_available {\n+\tcheck_runtime_nocache ppc_mma_hw_available {\n+\t    #include <altivec.h>\n+\t    typedef double v4sf_t __attribute__ ((vector_size (16)));\n+\n+\t    int main()\n+\t    {\n+\t\t__vector_quad acc0;\n+\t\tv4sf_t result[4];\n+\t\tresult[0][0] = 1.0;\n+\t\t__builtin_mma_xxsetaccz (&acc0);\n+\t\t__builtin_mma_disassemble_acc (result, &acc0);\n+\t\tif (result[0][0] != 0.0)\n+\t\t   return 1;\n+\t\treturn 0;\n+\t    }\n+\t} \"-mcpu=power10\"\n+    }]\n+}\n+\n # Return 1 if the target supports executing __float128 on PowerPC via software\n # emulation, 0 otherwise.  Cache the result.\n \n@@ -7830,6 +7855,7 @@ proc is-effective-target { arg } {\n \t  \"ppc_float128_hw\" { set selected [check_ppc_float128_hw_available] }\n \t  \"ppc_recip_hw\"   { set selected [check_ppc_recip_hw_available] }\n \t  \"ppc_cpu_supports_hw\" { set selected [check_ppc_cpu_supports_hw_available] }\n+\t  \"ppc_mma_hw\"     { set selected [check_ppc_mma_hw_available] }\n \t  \"dfp_hw\"         { set selected [check_dfp_hw_available] }\n \t  \"htm_hw\"         { set selected [check_htm_hw_available] }\n \t  \"named_sections\" { set selected [check_named_sections_available] }\n@@ -7860,6 +7886,7 @@ proc is-effective-target-keyword { arg } {\n \t  \"ppc_float128_sw\" { return 1 }\n \t  \"ppc_float128_hw\" { return 1 }\n \t  \"ppc_recip_hw\"   { return 1 }\n+\t  \"ppc_mma_hw\"     { return 1 }\n \t  \"dfp_hw\"         { return 1 }\n \t  \"htm_hw\"         { return 1 }\n \t  \"named_sections\" { return 1 }"}]}