{"sha": "a1b8d8ffaebf75f8d9946838874202344c1ca858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiOGQ4ZmZhZWJmNzVmOGQ5OTQ2ODM4ODc0MjAyMzQ0YzFjYTg1OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-04T11:36:26Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-04T11:36:26Z"}, "message": "call.c (build_over_call): Make pedwarns about dropped qualifiers into full-fledged errors.\n\n\t* call.c (build_over_call): Make pedwarns about dropped qualifiers\n\tinto full-fledged errors.\n\t* cvt.c (convert_to_reference): Likewise.\n\t* typeck.c (convert_for_assignment): Likewise.\n\nFrom-SVN: r22809", "tree": {"sha": "a918f5ff0501fd2ebd617df5abd94f4c791d4bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a918f5ff0501fd2ebd617df5abd94f4c791d4bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b8d8ffaebf75f8d9946838874202344c1ca858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b8d8ffaebf75f8d9946838874202344c1ca858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b8d8ffaebf75f8d9946838874202344c1ca858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b8d8ffaebf75f8d9946838874202344c1ca858/comments", "author": null, "committer": null, "parents": [{"sha": "6396c3a579d5b7479af180e420844be8d63069c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6396c3a579d5b7479af180e420844be8d63069c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6396c3a579d5b7479af180e420844be8d63069c2"}], "stats": {"total": 119, "additions": 73, "deletions": 46}, "files": [{"sha": "ba552234ac476e40895386d8682446056757eca2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -1,5 +1,10 @@\n 1998-10-04  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* call.c (build_over_call): Make pedwarns about dropped qualifiers\n+\tinto full-fledged errors.\n+\t* cvt.c (convert_to_reference): Likewise.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\n \t* search.c (expand_upcast_vtables): In addition to unsetting \n \tTREE_READONLY, remove top-level const type qualifier.\n "}, {"sha": "808c11b4c2e9210ca7fdc2d73f54fe79b342902d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -3297,8 +3297,8 @@ build_over_call (cand, args, flags)\n \t  char *p = (dv && dc ? \"const and volatile\"\n \t\t              : dc ? \"const\" : dv ? \"volatile\" : \"\");\n \n-\t  cp_pedwarn (\"passing `%T' as `this' argument of `%#D' discards %s\",\n-\t\t      TREE_TYPE (argtype), fn, p);\n+\t  cp_error (\"passing `%T' as `this' argument of `%#D' discards %s\",\n+\t\t    TREE_TYPE (argtype), fn, p);\n \t}\n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n \t X is called for an object that is not of type X, or of a type"}, {"sha": "f2b41d80b141481beb19af069528df9dbb0f7385", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -450,24 +450,34 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n \t  tree ttl = TREE_TYPE (reftype);\n \t  tree ttr = lvalue_type (expr);\n \n-\t  if (! real_lvalue_p (expr) && ! TYPE_READONLY (ttl))\n+\t  /* [dcl.init.ref] says that if an rvalue is used to\n+\t     initialize a reference, then the reference must be to a\n+\t     non-volatile const type.  */\n+\t  if (! real_lvalue_p (expr)\n+\t      && (!TYPE_READONLY (ttl) || TYPE_VOLATILE (ttl)))\n \t    {\n-\t      if (decl)\n-\t\t/* Ensure semantics of [dcl.init.ref] */\n-\t\tcp_pedwarn (\"initialization of non-const reference `%#T' from rvalue `%T'\",\n-\t\t\t    reftype, intype);\n+\t      char* msg;\n+\n+\t      if (TYPE_VOLATILE (ttl) && decl)\n+\t\tmsg = \"initialization of volatile reference type `%#T'\";\n+\t      else if (TYPE_VOLATILE (ttl))\n+\t\tmsg = \"conversion to volatile reference type `%#T'\";\n+\t      else if (decl)\n+\t\tmsg = \"initialization of non-const reference type `%#T'\";\n \t      else\n-\t\tcp_pedwarn (\"conversion to non-const `%T' from rvalue `%T'\",\n-\t\t\t    reftype, intype);\n+\t\tmsg = \"conversion to non-const reference type `%#T'\";\n+\n+\t      cp_error (msg, reftype);\n+\t      cp_error (\"from rvalue of type `%T'\", intype);\n \t    }\n \t  else if (! (convtype & CONV_CONST))\n \t    {\n \t      if (! TYPE_READONLY (ttl) && TYPE_READONLY (ttr))\n-\t\tcp_pedwarn (\"conversion from `%T' to `%T' discards const\",\n-\t\t\t    ttr, reftype);\n+\t\tcp_error (\"conversion from `%T' to `%T' discards const\",\n+\t\t\t  ttr, reftype);\n \t      else if (! TYPE_VOLATILE (ttl) && TYPE_VOLATILE (ttr))\n-\t\tcp_pedwarn (\"conversion from `%T' to `%T' discards volatile\",\n-\t\t\t    ttr, reftype);\n+\t\tcp_error (\"conversion from `%T' to `%T' discards volatile\",\n+\t\t\t  ttr, reftype);\n \t    }\n \t}\n "}, {"sha": "9e2c12327439544a11cb55df8337d14877d1a49d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -6808,20 +6808,20 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t  if (! TYPE_READONLY (ttl) && TYPE_READONLY (ttr))\n \t    {\n \t      if (fndecl)\n-\t\tcp_pedwarn (\"passing `%T' as argument %P of `%D' discards const\",\n-\t\t\t    rhstype, parmnum, fndecl);\n+\t\tcp_error (\"passing `%T' as argument %P of `%D' discards const\",\n+\t\t\t  rhstype, parmnum, fndecl);\n \t      else\n-\t\tcp_pedwarn (\"%s to `%T' from `%T' discards const\",\n-\t\t\t    errtype, type, rhstype);\n+\t\tcp_error (\"%s to `%T' from `%T' discards const\",\n+\t\t\t  errtype, type, rhstype);\n \t    }\n \t  if (! TYPE_VOLATILE (ttl) && TYPE_VOLATILE (ttr))\n \t    {\n \t      if (fndecl)\n-\t\tcp_pedwarn (\"passing `%T' as argument %P of `%D' discards volatile\",\n-\t\t\t    rhstype, parmnum, fndecl);\n+\t\tcp_error (\"passing `%T' as argument %P of `%D' discards volatile\",\n+\t\t\t  rhstype, parmnum, fndecl);\n \t      else\n-\t\tcp_pedwarn (\"%s to `%T' from `%T' discards volatile\",\n-\t\t\t    errtype, type, rhstype);\n+\t\tcp_error (\"%s to `%T' from `%T' discards volatile\",\n+\t\t\t  errtype, type, rhstype);\n \t    }\n \t}\n \n@@ -6874,19 +6874,19 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t\t  if (string_conv_p (type, rhs, 1))\n \t\t    /* converting from string constant to char *, OK.  */;\n \t\t  else if (fndecl)\n-\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards const\",\n-\t\t\t\trhstype, parmnum, fndecl);\n+\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards const\",\n+\t\t\t      rhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards const\",\n+\t\t    cp_error (\"%s to `%T' from `%T' discards const\",\n \t\t\t\terrtype, type, rhstype);\n \t\t}\n \t      else if (! TYPE_VOLATILE (ttl) && TYPE_VOLATILE (ttr))\n \t\t{\n \t\t  if (fndecl)\n-\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards volatile\",\n+\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards volatile\",\n \t\t\t\trhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards volatile\",\n+\t\t    cp_error (\"%s to `%T' from `%T' discards volatile\",\n \t\t\t\terrtype, type, rhstype);\n \t\t}\n \t      else if (TREE_CODE (ttl) == TREE_CODE (ttr)\n@@ -6948,20 +6948,20 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t      if (const_parity)\n \t\t{\n \t\t  if (fndecl)\n-\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards const\",\n-\t\t\t\trhstype, parmnum, fndecl);\n+\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards const\",\n+\t\t\t      rhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards const\",\n+\t\t    cp_error (\"%s to `%T' from `%T' discards const\",\n \t\t\t\terrtype, type, rhstype);\n \t\t}\n \t      if (volatile_parity)\n \t\t{\n \t\t  if (fndecl)\n-\t\t    cp_pedwarn (\"passing `%T' as argument %P of `%D' discards volatile\",\n-\t\t\t\trhstype, parmnum, fndecl);\n+\t\t    cp_error (\"passing `%T' as argument %P of `%D' discards volatile\",\n+\t\t\t      rhstype, parmnum, fndecl);\n \t\t  else\n-\t\t    cp_pedwarn (\"%s to `%T' from `%T' discards volatile\",\n-\t\t\t\terrtype, type, rhstype);\n+\t\t    cp_error (\"%s to `%T' from `%T' discards volatile\",\n+\t\t\t      errtype, type, rhstype);\n \t\t}\n \t      if (unsigned_parity > 0)\n \t\t{"}, {"sha": "a19187295ecaddded5b9597a212f4f9ad3bae880", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -29,5 +29,5 @@ public:\n #include <string>\n \n class foo {public: foo () {}};\n-class bar {public: bar (foo& dflt);};\n+class bar {public: bar (const foo& dflt);};\n class baz: public bar {public: baz (): bar (foo ()) {}};"}, {"sha": "84ad6f4bf201e3ebe610b187b9e6e5e88f0755ae", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/reference1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -12,10 +12,10 @@\n extern \"C\" void printf (char *, ...); \n \n struct base {\n-\tint data_member;\n+\tmutable int data_member;\n \n \tbase () {}\n-\tvoid function_member ();\n+\tvoid function_member () const;\n };\n \n base base_object;\n@@ -26,7 +26,7 @@ int call_count = 0;\n \n int main ()\n {\n-\tbase& base_ref = base_returning_function ();\n+\tconst base& base_ref = base_returning_function ();\n \n \tbase_ref.function_member ();\n \tbase_ref.function_member ();\n@@ -48,6 +48,6 @@ base base_returning_function ()\n \treturn local_base_object;\n }\n \n-void base::function_member ()\n+void base::function_member () const\n {\n }"}, {"sha": "7d61b093edd9408c11d6cad59fff5427da154e7d", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p785.C", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp785.C?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -6883,7 +6883,8 @@ and this notice must be preserved on all copies.\n \n typedef void (*GctNameRefProcedure)(GctNameRef&);\n typedef GctNameRef  (*GctNameRefMapper)(GctNameRef&);\n-typedef GctNameRef  (*GctNameRefCombiner)(GctNameRef&, GctNameRef&);\n+typedef GctNameRef& (*GctNameRefCombiner)(const GctNameRef&, \n+\t\t\t\t\t  const GctNameRef&);\n typedef int  (*GctNameRefPredicate)(GctNameRef&);\n typedef int  (*GctNameRefComparator)(GctNameRef&, GctNameRef&);\n \n@@ -6916,11 +6917,11 @@ public:\n                         GctNameRefList();\n                         GctNameRefList(GctNameRef& head);\n                         GctNameRefList(GctNameRef& head, GctNameRefList& tl);\n-                        GctNameRefList(GctNameRefList& a);\n+                        GctNameRefList(const GctNameRefList& a);\n                         GctNameRefList(Pix p);\n                         ~GctNameRefList();\n \n-  GctNameRefList&              operator = (GctNameRefList& a);\n+  GctNameRefList&              operator = (const GctNameRefList& a);\n \n   int                   null();\n   int                   valid();\n@@ -7003,11 +7004,11 @@ inline void dereference(GctNameRefListNode* p)\n }\n \n \n-inline GctNameRefListNode* newGctNameRefListNode(GctNameRef& h)\n+inline GctNameRefListNode* newGctNameRefListNode(const GctNameRef& h)\n {\n   GctNameRefListNode* p = new GctNameRefListNode;\n   p->ref = 1;\n-  p->hd = h;\n+  p->hd = (GctNameRef&) h;\n   return p;\n }\n \n@@ -7048,9 +7049,10 @@ inline GctNameRefList::GctNameRefList(GctNameRef& head, GctNameRefList& tl)\n   reference(P->tl);\n }\n \n-inline GctNameRefList::GctNameRefList(GctNameRefList& a)\n+inline GctNameRefList::GctNameRefList(const GctNameRefList& a)\n {\n-  reference(a.P);\n+  GctNameRefList& gl = (GctNameRefList&) a;\n+  reference(gl.P);\n   P = a.P;\n }\n \n@@ -7151,7 +7153,7 @@ public:\n \n static init_NilGctNameRefListNode NilGctNameRefListNode_initializer;\n \n-GctNameRefList& GctNameRefList::operator = (GctNameRefList& a)\n+GctNameRefList& GctNameRefList::operator = (const GctNameRefList& a)\n {\n   reference(a.P);\n   dereference(P);"}, {"sha": "b6d82aa25ca4cddb23d4aee26b0cfa5e2ab53726", "filename": "gcc/testsuite/g++.old-deja/g++.other/ref1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b8d8ffaebf75f8d9946838874202344c1ca858/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fref1.C?ref=a1b8d8ffaebf75f8d9946838874202344c1ca858", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+\n+int f();\n+\n+void g()\n+{\n+  const int& i = f(); // OK\n+  int& j = f(); // ERROR - initialization of non-const reference \n+  const volatile int& k = f(); // ERROR - initialization of volatile ref\n+}"}]}