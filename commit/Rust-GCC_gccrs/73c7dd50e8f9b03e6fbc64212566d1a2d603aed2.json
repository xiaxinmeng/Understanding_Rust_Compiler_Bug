{"sha": "73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjN2RkNTBlOGY5YjAzZTZmYmM2NDIxMjU2NmQxYTJkNjAzYWVkMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-21T12:42:26Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-21T12:42:26Z"}, "message": "DateFormat.java, [...]: New versions from classpath.\n\n2003-06-21  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/DateFormat.java,\n\tjava/text/SimpleDateFormat.java,\n\tjava/util/Locale.java:\n\tNew versions from classpath.\n\nFrom-SVN: r68300", "tree": {"sha": "a6fa0c9f0fdd054674395836f55efab40ef19fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6fa0c9f0fdd054674395836f55efab40ef19fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/comments", "author": null, "committer": null, "parents": [{"sha": "5ee8128f1b139e4e1e6330acca7c014aee28abc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee8128f1b139e4e1e6330acca7c014aee28abc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee8128f1b139e4e1e6330acca7c014aee28abc7"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "2c847901c3013f268e7038c23452043d1f139099", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/DateFormat.java,\n+\tjava/text/SimpleDateFormat.java,\n+\tjava/util/Locale.java:\n+\tNew versions from classpath.\n+\n 2003-06-21  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/SpinnerModel.java:"}, {"sha": "df2b270e4f34d05456a66eb2d65aa56bba6931eb", "filename": "libjava/java/text/DateFormat.java", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Ftext%2FDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Ftext%2FDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormat.java?ref=73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "patch": "@@ -101,7 +101,7 @@ protected DateFormat ()\n    * <ul>\n    * <li>Is not <code>null</code>.\n    * <li>Is an instance of <code>DateFormat</code>.\n-   * <li>Has the same calendar and numberFormat field values as this object.\n+   * <li>Has the same numberFormat field value as this object.\n    * </ul>\n    *\n    * @param obj The object to test for equality against.\n@@ -111,10 +111,12 @@ protected DateFormat ()\n    */\n   public boolean equals (Object obj)\n   {\n-    if (! (obj instanceof DateFormat))\n+    if (!(obj instanceof DateFormat))\n       return false;\n+\n     DateFormat d = (DateFormat) obj;\n-    return calendar.equals(d.calendar) && numberFormat.equals(d.numberFormat);\n+\n+    return numberFormat.equals(d.numberFormat);\n   }\n \n   /**\n@@ -467,10 +469,10 @@ public TimeZone getTimeZone ()\n    */\n   public int hashCode ()\n   {\n-    int hash = calendar.hashCode();\n     if (numberFormat != null)\n-      hash ^= numberFormat.hashCode();\n-    return hash;\n+      return numberFormat.hashCode();\n+    else\n+      return 0;\n   }\n \n   /**"}, {"sha": "67523e1628d660825130144a24479c32d5a43949", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "patch": "@@ -384,10 +384,10 @@ public boolean equals(Object o)\n \n     SimpleDateFormat sdf = (SimpleDateFormat)o;\n \n-    if (!toPattern().equals(sdf.toPattern()))\n+    if (defaultCentury != sdf.defaultCentury)\n       return false;\n \n-    if (!get2DigitYearStart().equals(sdf.get2DigitYearStart()))\n+    if (!toPattern().equals(sdf.toPattern()))\n       return false;\n \n     if (!getDateFormatSymbols().equals(sdf.getDateFormatSymbols()))\n@@ -396,6 +396,17 @@ public boolean equals(Object o)\n     return true;\n   }\n \n+  /**\n+   * This method returns a hash value for this object.\n+   *\n+   * @return A hash value for this object.\n+   */\n+  public int hashCode()\n+  {\n+    return super.hashCode() ^ toPattern().hashCode() ^ defaultCentury ^\n+      getDateFormatSymbols().hashCode();\n+  }\n+\n \n   /**\n    * Formats the date input according to the format string in use,"}, {"sha": "431824f0c35935c53b45c526bdaf25c106fbdcea", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7dd50e8f9b03e6fbc64212566d1a2d603aed2/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=73c7dd50e8f9b03e6fbc64212566d1a2d603aed2", "patch": "@@ -231,9 +231,9 @@ public Locale(String language, String country, String variant)\n     // default locale.\n     if (defaultLocale != null)\n       {\n-        language = convertLanguage(language);\n-        country = country.toUpperCase();\n-        variant = variant.toUpperCase();\n+        language = convertLanguage(language).intern();\n+        country = country.toUpperCase().intern();\n+        variant = variant.toUpperCase().intern();\n       }\n     this.language = language;\n     this.country = country;\n@@ -436,7 +436,7 @@ else if (country.length() == 0 && variant.length() == 0)\n    */\n   public String getISO3Language()\n   {\n-    if (\"\".equals(language))\n+    if (language == \"\")\n       return \"\";\n     int index\n       = (\"aa,ab,af,am,ar,as,ay,az,ba,be,bg,bh,bi,bn,bo,br,ca,co,cs,cy,da,\"\n@@ -472,7 +472,7 @@ public String getISO3Language()\n    */\n   public String getISO3Country()\n   {\n-    if (\"\".equals(country))\n+    if (country == \"\")\n       return \"\";\n     int index\n       = (\"AD,AE,AF,AG,AI,AL,AM,AN,AO,AQ,AR,AS,AT,AU,AW,AZ,BA,BB,BD,BE,BF,\"\n@@ -729,9 +729,13 @@ public boolean equals(Object obj)\n       return false;\n     Locale l = (Locale) obj;\n \n-    return (language.equals(l.language)\n-            && country.equals(l.country)\n-            && variant.equals(l.variant));\n+    // ??? We might also want to add:\n+    //        hashCode() == l.hashCode()\n+    // But this is a synchronized method.  Is the overhead worth it?\n+    // Measure this to make a decision.\n+    return (language == l.language\n+            && country == l.country\n+            && variant == l.variant);\n   }\n \n   /**"}]}