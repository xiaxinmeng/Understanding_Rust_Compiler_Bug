{"sha": "40ada30a792dd7e6518118b83cacc03ff03ffc69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhZGEzMGE3OTJkZDdlNjUxODExOGI4M2NhY2MwM2ZmMDNmZmM2OQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-09-26T09:38:13Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-09-26T09:38:13Z"}, "message": "msp430.c (msp430_expand_epilogue): Fix compile time warning message.\n\n\t* config/msp430/msp430.c (msp430_expand_epilogue): Fix compile\n\ttime warning message.\n\t(msp430_print_operand_raw): Delete unused letter parameter.\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\t(msp430_print_operand_address): New function.\n\t(msp430_print_operand): Move address printing code from here to\n\tnew function.\n\t* config/msp430/msp430.md (movsipsi2): Add comment in generated\n\tassembler.\n\t(zero_extendpsisi2): Likewise.\n\t(extendpsisi2): New pattern.\n\t(andneghi3): New pattern.\n\nFrom-SVN: r202941", "tree": {"sha": "68612d8ca73ec611f134985ecb4c632dd435efdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68612d8ca73ec611f134985ecb4c632dd435efdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ada30a792dd7e6518118b83cacc03ff03ffc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ada30a792dd7e6518118b83cacc03ff03ffc69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ada30a792dd7e6518118b83cacc03ff03ffc69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ada30a792dd7e6518118b83cacc03ff03ffc69/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38e8f66392205d315970363059813572a89f1b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e8f66392205d315970363059813572a89f1b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e8f66392205d315970363059813572a89f1b8f"}], "stats": {"total": 162, "additions": 115, "deletions": 47}, "files": [{"sha": "b9d4c358bef27f66c514d952411d849a45c72547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40ada30a792dd7e6518118b83cacc03ff03ffc69", "patch": "@@ -1,3 +1,18 @@\n+2013-09-26  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/msp430.c (msp430_expand_epilogue): Fix compile\n+\ttime warning message.\n+\t(msp430_print_operand_raw): Delete unused letter parameter.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\t(msp430_print_operand_address): New function.\n+\t(msp430_print_operand): Move address printing code from here to\n+\tnew function.\n+\t* config/msp430/msp430.md (movsipsi2): Add comment in generated\n+\tassembler.\n+\t(zero_extendpsisi2): Likewise.\n+\t(extendpsisi2): New pattern.\n+\t(andneghi3): New pattern.\n+\n 2013-09-26  Yvan Roux  <yvan.roux@linaro.org>\n \n \t* config/aarch64/aarch64.opt (mlra): New option."}, {"sha": "ae6e6a91492d92e8aaf0f11a08b06c1360a35ac5", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=40ada30a792dd7e6518118b83cacc03ff03ffc69", "patch": "@@ -1291,7 +1291,7 @@ msp430_expand_epilogue (int is_eh)\n   if (cfun->machine->need_to_save [10])\n     {\n       /* Check for a helper function.  */\n-      helper_n = 7; /* for when the loop below never sees a match.  */\n+      helper_n = 7; /* For when the loop below never sees a match.  */\n       for (i = 9; i >= 4; i--)\n \tif (!cfun->machine->need_to_save [i])\n \t  {\n@@ -1354,7 +1354,7 @@ msp430_expand_epilogue (int is_eh)\n \t\t && ! is_critical_func ()\n \t\t && crtl->args.pretend_args_size == 0\n \t\t /* Calling the helper takes as many bytes as the POP;RET sequence.  */\n-\t\t && helper_n != 1\n+\t\t && helper_n > 1\n \t\t && !is_eh)\n \t  {\n \t    emit_insn (gen_epilogue_helper (GEN_INT (helper_n)));\n@@ -1494,7 +1494,7 @@ msp430_expand_helper (rtx *operands, const char *helper_name, bool const_variant\n       /* Note that the INTVAL is limited in value and length by the conditional above.  */\n       int len = strlen (helper_name) + 4;\n       helper_const = (char *) xmalloc (len);\n-      snprintf (helper_const, len, \"%s_%ld\", helper_name, (int) INTVAL (operands[2]));\n+      snprintf (helper_const, len, \"%s_%d\", helper_name, (int) INTVAL (operands[2]));\n     }\n \n   emit_move_insn (gen_rtx_REG (arg1mode, 12),\n@@ -1722,12 +1722,10 @@ msp430_output_labelref (FILE *file, const char *name)\n   fputs (name, file);\n }\n \n-#undef  TARGET_PRINT_OPERAND\n-#define TARGET_PRINT_OPERAND\t\tmsp430_print_operand\n+/* Common code for msp430_print_operand...  */\n \n-/* Common code for msp430_print_operand().  */\n static void\n-msp430_print_operand_raw (FILE * file, rtx op, int letter ATTRIBUTE_UNUSED)\n+msp430_print_operand_raw (FILE * file, rtx op)\n {\n   int i;\n \n@@ -1759,6 +1757,45 @@ msp430_print_operand_raw (FILE * file, rtx op, int letter ATTRIBUTE_UNUSED)\n     }\n }\n \n+#undef  TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS\tmsp430_print_operand_addr\n+\n+/* Output to stdio stream FILE the assembler syntax for an\n+   instruction operand that is a memory reference whose address\n+   is ADDR.  */\n+\n+static void\n+msp430_print_operand_addr (FILE * file, rtx addr)\n+{\n+  switch (GET_CODE (addr))\n+    {\n+    case PLUS:\n+      msp430_print_operand_raw (file, XEXP (addr, 1));\n+      gcc_assert (REG_P (XEXP (addr, 0)));\n+      fprintf (file, \"(%s)\", reg_names [REGNO (XEXP (addr, 0))]);\n+      return;\n+\n+    case REG:\n+      fprintf (file, \"@\");\n+      break;\n+\n+    case CONST:\n+    case CONST_INT:\n+    case SYMBOL_REF:\n+    case LABEL_REF:\n+      fprintf (file, \"&\");\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  msp430_print_operand_raw (file, addr);\n+}\n+\n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND\t\tmsp430_print_operand\n+\n static void\n msp430_print_operand (FILE * file, rtx op, int letter)\n {\n@@ -1803,7 +1840,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \tcase GT: fprintf (file, \"GE\"); break;\n \tcase LE: fprintf (file, \"L\"); break;\n \tdefault:\n-\t  msp430_print_operand_raw (file, op, letter);\n+\t  msp430_print_operand_raw (file, op);\n \t  break;\n \t}\n       return;\n@@ -1815,7 +1852,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \tcase GT: fprintf (file, \"L\"); break;\n \tcase LE: fprintf (file, \"GE\"); break;\n \tdefault:\n-\t  msp430_print_operand_raw (file, op, letter);\n+\t  msp430_print_operand_raw (file, op);\n \t  break;\n \t}\n       return;\n@@ -1897,38 +1934,18 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       fprintf (file, \"%d\",\n \t       msp430_initial_elimination_offset (ARG_POINTER_REGNUM, STACK_POINTER_REGNUM)\n \t        - 2);\n-      return ;\n+      return;\n     }\n \n   switch (GET_CODE (op))\n     {\n     case REG:\n-      msp430_print_operand_raw (file, op, letter);\n+      msp430_print_operand_raw (file, op);\n       break;\n \n     case MEM:\n       addr = XEXP (op, 0);\n-      switch (GET_CODE (addr))\n-\t{\n-\tcase REG:\n-\t  fprintf (file, \"@%s\", reg_names [REGNO (addr)]);\n-\t  break;\n-\tcase PLUS:\n-\t  msp430_print_operand_raw (file, XEXP (addr, 1), letter);\n-\t  fprintf (file, \"(%s)\", reg_names [REGNO (XEXP (addr, 0))]);\n-\t  break;\n-\tcase CONST:\n-\tcase CONST_INT:\n-\tcase SYMBOL_REF:\n-\tcase LABEL_REF:\n-\t  fprintf (file, \"&\");\n-\t  msp430_print_operand_raw (file, addr, letter);\n-\t  break;\n-\n-\tdefault:\n-\t  print_rtl (file, addr);\n-\t  break;\n-\t}\n+      msp430_print_operand_addr (file, addr);\n       break;\n \n     case CONST_INT:\n@@ -1937,7 +1954,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n     case LABEL_REF:\n       if (letter == 0)\n \tfprintf (file, \"#\");\n-      msp430_print_operand_raw (file, op, letter);\n+      msp430_print_operand_raw (file, op);\n       break;\n \n     case EQ: fprintf (file, \"EQ\"); break;\n@@ -1951,7 +1968,6 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       print_rtl (file, op);\n       break;\n     }\n-\n }\n \n \f"}, {"sha": "22a3953bf97c9fdcd8d29808680b840498d000b9", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ada30a792dd7e6518118b83cacc03ff03ffc69/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=40ada30a792dd7e6518118b83cacc03ff03ffc69", "patch": "@@ -190,8 +190,8 @@\n )\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(match_operand:SI 1 \"general_operand\"))]\n   \"\"\n   \"\"\n   )\n@@ -230,7 +230,7 @@\n   [(set (match_operand:PSI            0 \"register_operand\" \"=r\")\n \t(subreg:PSI (match_operand:SI 1 \"register_operand\" \"r\") 0))]\n   \"TARGET_LARGE\"\n-  \"PUSH.W %H1 { PUSH.W %1 { POPM.A #1, %0\"\n+  \"PUSH.W\\t%H1 { PUSH.W %L1 { POPM.A #1, %0 ; Move reg-pair %L1:%H1 into pointer %0\"\n )\n \n ;;------------------------------------------------------------\n@@ -326,8 +326,8 @@\n    ]\n   \"\"\n   \"@\n-   ADD %2, %1 ; cy\n-   ADD%X0 %2, %1 ; cy\"\n+   ADD\\t%2, %1 ; cy\n+   ADD%X0\\t%2, %1 ; cy\"\n   )\n \n (define_insn \"addhi3_cy_i\"\n@@ -341,8 +341,8 @@\n    ]\n   \"\"\n   \"@\n-   ADD %2, %1 ; cy\n-   ADD%X0 %2, %1 ; cy\"\n+   ADD\\t%2, %1 ; cy\n+   ADD%X0\\t%2, %1 ; cy\"\n   )\n \n ; Version of addhi that adds the carry, for SImode adds.\n@@ -354,8 +354,8 @@\n    ]\n   \"\"\n   \"@\n-   ADDC %2, %1\n-   ADDC%X0 %2, %1\"\n+   ADDC\\t%2, %1\n+   ADDC%X0\\t%2, %1\"\n   )\n \n ; Split an SImode add into two HImode adds, keeping track of the carry\n@@ -621,9 +621,30 @@\n          stored in the stack slot will be the value *after* the\n \t stack pointer has been decremented.  So allow for that\n \t here.  */\n-      return \\\"PUSHM.A #1, %1 { ADDX.W #4, @r1 { POPX.W %0 { POPX.W %H0\\\";\n+      return \\\"PUSHM.A\\t#1, %1 { ADDX.W #4, @r1 { POPX.W %L0 { POPX.W %H0 ; get stack pointer into %L0:%H0\\\";\n+    else\n+      return \\\"PUSHM.A\\t#1, %1 { POPX.W %L0 { POPX.W %H0 ; move pointer in %1 into reg-pair %L0:%H0\\\";\n+  \"\n+)\n+\n+;; We also need to be able to sign-extend pointer types (eg ptrdiff_t).\n+;; Since (we assume) pushing a 20-bit value onto the stack zero-extends\n+;; it, we use a different method here.\n+\n+(define_insn \"extendpsisi2\"\n+  [(set (match_operand:SI                  0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:PSI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_LARGE\"\n+  \"*\n+    /* The intention here is that we copy the bottom 16-bits of\n+       %1 into %L0 (zeroing the top four bits).  Then we copy the\n+       entire 20-bits of %1 into %H0 and then arithmetically shift\n+       it right by 16 bits, to get the top four bits of the pointer\n+       sign-extended in %H0.  */\n+    if (REGNO (operands[0]) == REGNO (operands[1]))\n+      return \\\"MOVX.A\\t%1, %H0 { MOV.W  %1, %L0 { RPT #16 { RRAX.A %H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n     else\n-      return \\\"PUSHM.A #1, %1 { POPX.W %0 { POPX.W %H0\\\";\n+      return \\\"MOV.W \\t%1, %L0 { MOVX.A %1, %H0 { RPT #16 { RRAX.A %H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n   \"\n )\n \n@@ -926,7 +947,7 @@\n \n (define_expand \"call\"\n   [(call:HI (match_operand 0 \"\")\n-\t (match_operand 1 \"\"))]\n+\t    (match_operand 1 \"\"))]\n   \"\"\n   \"\"\n )\n@@ -966,7 +987,7 @@\n ;; placeholder should get expanded into a regular-type epilogue that\n ;; also does the EH return.\n (define_expand \"eh_return\"\n-  [(match_operand:HI 0 \"\" \"\")]\n+  [(match_operand:HI 0 \"\")]\n   \"\"\n   \"msp430_expand_eh_return (operands[0]);\n    emit_jump_insn (gen_msp430_eh_epilogue ());\n@@ -1272,3 +1293,19 @@\n   \"\"\n   \"BIS.W\\t%0, %O0(SP)\"\n   )\n+\n+;; For some reason GCC is generating (set (reg) (and (neg (reg)) (int)))\n+;; very late on in the compilation and not splitting it into separate\n+;; instructions, so we provide a pattern to support it here.\n+(define_insn \"andneghi3\"\n+  [(set (match_operand:HI                 0 \"register_operand\" \"=r\")\n+\t(and:HI (neg:HI (match_operand:HI 1 \"register_operand\"  \"r\"))\n+\t\t(match_operand            2 \"immediate_operand\" \"n\")))]\n+  \"\"\n+  \"*\n+    if (REGNO (operands[0]) != REGNO (operands[1]))\n+      return \\\"MOV.W\\t%1, %0 { SUB.W #0, %0 { AND.W %2, %0\\\";\n+    else\n+      return \\\"SUB.W\\t#0, %0 { AND.W %2, %0\\\";\n+  \"\n+  )"}]}