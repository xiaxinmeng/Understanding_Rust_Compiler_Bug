{"sha": "efa9d8eef07e0abc9d073e004c95d2812d35f88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhOWQ4ZWVmMDdlMGFiYzlkMDczZTAwNGM5NWQyODEyZDM1Zjg4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-02T21:23:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-02T21:23:25Z"}, "message": "Improve smart pointer docs\n\n\t* include/bits/shared_ptr.h: Improve docs.\n\t* include/bits/shared_ptr_atomic.h: Likewise.\n\t* include/bits/unique_ptr.h: Likewise. Adjust whitespace.\n\nFrom-SVN: r270825", "tree": {"sha": "df400e79ce0b81fad442ecdbd82a3456801b7537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df400e79ce0b81fad442ecdbd82a3456801b7537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa9d8eef07e0abc9d073e004c95d2812d35f88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa9d8eef07e0abc9d073e004c95d2812d35f88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa9d8eef07e0abc9d073e004c95d2812d35f88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa9d8eef07e0abc9d073e004c95d2812d35f88a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4cb56a154dadb4e6357dedd5f1d3e523c858e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cb56a154dadb4e6357dedd5f1d3e523c858e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4cb56a154dadb4e6357dedd5f1d3e523c858e77"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "3fe61147d0735a8de9efa95f2c744d06ef8126a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=efa9d8eef07e0abc9d073e004c95d2812d35f88a", "patch": "@@ -1,5 +1,9 @@\n 2019-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/shared_ptr.h: Improve docs.\n+\t* include/bits/shared_ptr_atomic.h: Likewise.\n+\t* include/bits/unique_ptr.h: Likewise. Adjust whitespace.\n+\n \t* include/bits/basic_string.h: Fix iterator/index confusion in\n \tDoxygen comments.\n \t* include/bits/range_access.h: Fix Doxygen warnings."}, {"sha": "a38c19889737e691837fec0989419bc40f0e85fb", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=efa9d8eef07e0abc9d073e004c95d2812d35f88a", "patch": "@@ -82,6 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// 20.7.2.2.10 shared_ptr get_deleter\n+  /// @relates shared_ptr\n   template<typename _Del, typename _Tp>\n     inline _Del*\n     get_deleter(const shared_ptr<_Tp>& __p) noexcept\n@@ -96,8 +97,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @brief  A smart pointer with reference-counted copy semantics.\n    *\n-   *  The object pointed to is deleted when the last shared_ptr pointing to\n-   *  it is destroyed or reset.\n+   * A `shared_ptr` object is either empty or _owns_ a pointer passed\n+   * to the constructor. Copies of a `shared_ptr` share ownership of\n+   * the same pointer. When the last `shared_ptr` that owns the pointer\n+   * is destroyed or reset, the owned pointer is freed (either by `delete`\n+   * or by invoking a custom deleter that was passed to the constructor).\n+   *\n+   * A `shared_ptr` also stores another pointer, which is usually\n+   * (but not always) the same pointer as it owns. The stored pointer\n+   * can be retrieved by calling the `get()` member function.\n   */\n   template<typename _Tp>\n     class shared_ptr : public __shared_ptr<_Tp>\n@@ -370,6 +378,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class weak_ptr<_Tp>;\n     };\n \n+  /// @relates shared_ptr @{\n+\n #if __cpp_deduction_guides >= 201606\n   template<typename _Tp>\n     shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;\n@@ -480,12 +490,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(nullptr < __a); }\n \n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n+  /// Swap overload for shared_ptr\n   template<typename _Tp>\n     inline void\n     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n     { __a.swap(__b); }\n \n   // 20.7.2.2.9 shared_ptr casts.\n+  /// Convert type of `shared_ptr`, via `static_cast`\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     static_pointer_cast(const shared_ptr<_Up>& __r) noexcept\n@@ -494,6 +506,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));\n     }\n \n+  /// Convert type of `shared_ptr`, via `const_cast`\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     const_pointer_cast(const shared_ptr<_Up>& __r) noexcept\n@@ -502,6 +515,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));\n     }\n \n+  /// Convert type of `shared_ptr`, via `dynamic_cast`\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept\n@@ -512,7 +526,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _Sp();\n     }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n+  /// Convert type of `shared_ptr`, via `reinterpret_cast`\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept\n@@ -522,6 +537,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+  // @}\n+\n   /**\n    *  @brief  A smart pointer with weak semantics.\n    *\n@@ -601,6 +618,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // 20.7.2.3.6 weak_ptr specialized algorithms.\n+  /// Swap overload for weak_ptr\n+  /// @relates weak_ptr\n   template<typename _Tp>\n     inline void\n     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept\n@@ -617,12 +636,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// Partial specialization of owner_less for shared_ptr.\n+  /// @relates shared_ptr\n   template<typename _Tp>\n     struct owner_less<shared_ptr<_Tp>>\n     : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>\n     { };\n \n   /// Partial specialization of owner_less for weak_ptr.\n+  /// @relates weak_ptr\n   template<typename _Tp>\n     struct owner_less<weak_ptr<_Tp>>\n     : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>\n@@ -683,6 +704,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       mutable weak_ptr<_Tp>  _M_weak_this;\n     };\n \n+  /// @relates unique_ptr @{\n+\n   /**\n    *  @brief  Create an object that is owned by a shared_ptr.\n    *  @param  __a     An allocator.\n@@ -730,6 +753,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  // @} relates shared_ptr\n   // @} group pointer_abstractions\n \n #if __cplusplus >= 201703L"}, {"sha": "93c575a79f2730f0d64b6a453250215f0cc44c3f", "filename": "libstdc++-v3/include/bits/shared_ptr_atomic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h?ref=efa9d8eef07e0abc9d073e004c95d2812d35f88a", "patch": "@@ -40,6 +40,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @addtogroup pointer_abstractions\n    * @{\n    */\n+  /// @relates shared_ptr @{\n+\n+  /// @cond undocumented\n \n   struct _Sp_locker\n   {\n@@ -60,6 +63,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n+  /// @endcond\n+\n   /**\n    *  @brief  Report whether shared_ptr atomic operations are lock-free.\n    *  @param  __p A non-null pointer to a shared_ptr object.\n@@ -322,6 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   // @}\n \n+  // @} relates shared_ptr\n   // @} group pointer_abstractions\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "549db875783b99c66f0032f0635931264c39b2a5", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa9d8eef07e0abc9d073e004c95d2812d35f88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=efa9d8eef07e0abc9d073e004c95d2812d35f88a", "patch": "@@ -686,6 +686,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       unique_ptr& operator=(const unique_ptr&) = delete;\n     };\n \n+  /// @relates unique_ptr @{\n+\n   template<typename _Tp, typename _Dp>\n     inline\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n@@ -754,14 +756,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n-    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n-\t\t\t\t\t\t\t\t nullptr); }\n+    {\n+      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n+\t\t\t\t\t\t\t\t nullptr);\n+    }\n \n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n-    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n-\t\t\t\t\t\t\t\t __x.get()); }\n+    {\n+      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n+\t\t\t\t\t\t\t\t __x.get());\n+    }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n@@ -790,14 +796,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n-    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n-\t\t\t\t\t\t\t\t __x.get()); }\n+    {\n+      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n+\t\t\t\t\t\t\t\t __x.get());\n+    }\n \n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n-    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n-\t\t\t\t\t\t\t\t nullptr); }\n+    {\n+      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n+\t\t\t\t\t\t\t\t nullptr);\n+    }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n@@ -834,6 +844,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_make_unique 201304\n \n+  /// @cond undocumented\n+\n   template<typename _Tp>\n     struct _MakeUniq\n     { typedef unique_ptr<_Tp> __single_object; };\n@@ -846,6 +858,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _MakeUniq<_Tp[_Bound]>\n     { struct __invalid_type { }; };\n \n+  /// @endcond\n+\n   /// std::make_unique for single objects\n   template<typename _Tp, typename... _Args>\n     inline typename _MakeUniq<_Tp>::__single_object\n@@ -864,6 +878,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_unique(_Args&&...) = delete;\n #endif\n \n+  // @} relates unique_ptr\n   // @} group pointer_abstractions\n \n #if __cplusplus >= 201703L"}]}