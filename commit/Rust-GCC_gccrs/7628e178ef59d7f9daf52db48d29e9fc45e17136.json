{"sha": "7628e178ef59d7f9daf52db48d29e9fc45e17136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyOGUxNzhlZjU5ZDdmOWRhZjUyZGI0OGQyOWU5ZmM0NWUxNzEzNg==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-06-08T03:55:43Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-06-08T03:55:43Z"}, "message": "eh_alloc.cc: Ensure that required macros are defined before including gthr.h.\n\n\t* libsupc++/eh_alloc.cc: Ensure that required macros are\n\tdefined before including gthr.h.  Ensure that we get the\n\tversion of gthr.h for which we know how to provide a\n\tconfiguration.\n\t* libsupc++/eh_globals.cc: Likewise.  And, bring the threading\n\tcode path into line with the current EH model.  Use std, where\n\tappropriate.\n\nCo-Authored-By: John David Anglin <dave@hiauly1.hia.nrc.ca>\n\nFrom-SVN: r42999", "tree": {"sha": "6239388e1090fcbfc9935d11c77afe9563d5707f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6239388e1090fcbfc9935d11c77afe9563d5707f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7628e178ef59d7f9daf52db48d29e9fc45e17136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7628e178ef59d7f9daf52db48d29e9fc45e17136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7628e178ef59d7f9daf52db48d29e9fc45e17136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7628e178ef59d7f9daf52db48d29e9fc45e17136/comments", "author": null, "committer": null, "parents": [{"sha": "5e21803304ad8ecae564e1119508a45cc8705471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21803304ad8ecae564e1119508a45cc8705471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e21803304ad8ecae564e1119508a45cc8705471"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "724b5b9504e7ecf1cc15b7768bf501286e703223", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7628e178ef59d7f9daf52db48d29e9fc45e17136", "patch": "@@ -1,3 +1,14 @@\n+2001-06-07  Loren J. Rittle  <ljrittle@acm.org>\n+\t    John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* libsupc++/eh_alloc.cc: Ensure that required macros are\n+\tdefined before including gthr.h.  Ensure that we get the\n+\tversion of gthr.h for which we know how to provide a\n+\tconfiguration.\n+\t* libsupc++/eh_globals.cc: Likewise.  And, bring the threading\n+\tcode path into line with the current EH model.  Use std, where\n+\tappropriate.\n+\n 2001-06-07  Loren J. Rittle  <ljrittle@acm.org>\n \t    John David Anglin  <dave@hiauly1.hia.nrc.ca>\n "}, {"sha": "8b55d6c6083c19225cd1578d8ec1d99a46120077", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=7628e178ef59d7f9daf52db48d29e9fc45e17136", "patch": "@@ -35,7 +35,8 @@\n #include <cstring>\n #include <limits.h>\n #include \"unwind-cxx.h\"\n-#include \"gthr.h\"\n+#include \"bits/c++config.h\"\n+#include \"bits/gthr.h\"\n \n using namespace __cxxabiv1;\n "}, {"sha": "3033619b12a588a7c22b7e0bf1fe2ad268f55303", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7628e178ef59d7f9daf52db48d29e9fc45e17136/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=7628e178ef59d7f9daf52db48d29e9fc45e17136", "patch": "@@ -29,8 +29,10 @@\n \n \n #include <exception>\n+#include <cstdlib>\n #include \"unwind-cxx.h\"\n-#include \"gthr.h\"\n+#include \"bits/c++config.h\"\n+#include \"bits/gthr.h\"\n \n using namespace __cxxabiv1;\n \n@@ -47,7 +49,7 @@ get_globals_dtor (void *ptr)\n {\n   __gthread_key_dtor (globals_key, ptr);\n   if (ptr)\n-    free (ptr);\n+    std::free (ptr);\n }\n \n static void\n@@ -90,24 +92,20 @@ __cxa_get_globals ()\n     return &globals_static;\n \n   if (use_thread_key < 0)\n-    get_globals_init_once ();\n+    {\n+      get_globals_init_once ();\n+\n+      // Make sure use_thread_key got initialized.\n+      if (use_thread_key == 0)\n+\treturn &globals_static;\n+    }\n \n   g = (__cxa_eh_globals *) __gthread_getspecific (globals_key);\n   if (! g)\n     {\n-      static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n-\n-      // Make sure use_thread_key got initialized.  Some systems have\n-      // dummy thread routines in their libc that return a success.\n-      if (__gthread_once (&once, eh_threads_initialize) != 0\n-\t  || use_thread_key < 0)\n-\t{\n-\t  use_thread_key = 0;\n-\t  return &globals_static;\n-\t}\n-      \n-      if ((g = malloc (sizeof (__cxa_eh_globals))) == 0\n-\t  || __gthread_setspecific (eh_context_key, (void *) g) != 0)\n+      if ((g = (__cxa_eh_globals *)\n+\t   std::malloc (sizeof (__cxa_eh_globals))) == 0\n+\t  || __gthread_setspecific (globals_key, (void *) g) != 0)\n         std::terminate ();\n       g->caughtExceptions = 0;\n       g->uncaughtExceptions = 0;"}]}