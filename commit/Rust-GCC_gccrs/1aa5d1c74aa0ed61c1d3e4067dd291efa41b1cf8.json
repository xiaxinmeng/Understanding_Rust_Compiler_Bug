{"sha": "1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhNWQxYzc0YWEwZWQ2MWMxZDNlNDA2N2RkMjkxZWZhNDFiMWNmOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-01-24T13:38:10Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-01-24T13:38:10Z"}, "message": "+ * trans-mem.c (requires_barrier): Do not instrument thread local + variables and emit save/restore for them.\n\n+       * trans-mem.c (requires_barrier): Do not instrument thread local\n+       variables and emit save/restore for them.\n\n\nCo-Authored-By: Patrick Marlier <patrick.marlier@gmail.com>\n\nFrom-SVN: r183476", "tree": {"sha": "62ff220c08d544c8a6b59e2524b1fa34f424a684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ff220c08d544c8a6b59e2524b1fa34f424a684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c90089e6f24e5c3d31a1e70edbe1bbe14a2a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c90089e6f24e5c3d31a1e70edbe1bbe14a2a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c90089e6f24e5c3d31a1e70edbe1bbe14a2a61"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "4fb5057eb6a6cce96699236dcb291f706b3616d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "patch": "@@ -1,3 +1,9 @@\n+2012-01-24  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Patrick Marlier  <patrick.marlier@gmail.com>\n+\n+\t* trans-mem.c (requires_barrier): Do not instrument thread local\n+\tvariables and emit save/restore for them.\n+\n 2012-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51812"}, {"sha": "83a90fffb6ce299e9a69158ce3d0a94422f35755", "filename": "gcc/testsuite/gcc.dg/tm/threadlocal-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c?ref=1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -O -fdump-tree-tmedge\" } */\n+__thread int notshared = 0;\n+int shared = 0;\n+\n+int main()\n+{\n+  __transaction_atomic\n+    {\n+      notshared++;\n+      shared++;\n+    }\n+  return notshared + shared;\n+}\n+/* { dg-final { scan-tree-dump-times \"tm_save.\\[0-9_\\]+ = notshared\" 1 \"tmedge\" } } */\n+/* { dg-final { scan-tree-dump-times \"notshared = tm_save\" 1 \"tmedge\" } } */\n+/* { dg-final { cleanup-tree-dump \"tmedge\" } } */"}, {"sha": "06b1d8112bd67edee061f6c345695fab33d7bdfa", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=1aa5d1c74aa0ed61c1d3e4067dd291efa41b1cf8", "patch": "@@ -1,5 +1,5 @@\n /* Passes for transactional memory support.\n-   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1488,7 +1488,18 @@ requires_barrier (basic_block entry_block, tree x, gimple stmt)\n \t}\n \n       if (is_global_var (x))\n-\treturn !TREE_READONLY (x);\n+\t{\n+\t  if (DECL_THREAD_LOCAL_P (x))\n+\t    goto thread_local;\n+\t  if (DECL_HAS_VALUE_EXPR_P (x))\n+\t    {\n+\t      tree value = get_base_address (DECL_VALUE_EXPR (x));\n+\n+\t      if (value && DECL_P (value) && DECL_THREAD_LOCAL_P (value))\n+\t\tgoto thread_local;\n+\t    }\n+\t  return !TREE_READONLY (x);\n+\t}\n       if (/* FIXME: This condition should actually go below in the\n \t     tm_log_add() call, however is_call_clobbered() depends on\n \t     aliasing info which is not available during\n@@ -1498,17 +1509,14 @@ requires_barrier (basic_block entry_block, tree x, gimple stmt)\n \t     lower_sequence_tm altogether.  */\n \t  needs_to_live_in_memory (x))\n \treturn true;\n-      else\n-\t{\n-\t  /* For local memory that doesn't escape (aka thread private\n-\t     memory), we can either save the value at the beginning of\n-\t     the transaction and restore on restart, or call a tm\n-\t     function to dynamically save and restore on restart\n-\t     (ITM_L*).  */\n-\t  if (stmt)\n-\t    tm_log_add (entry_block, orig, stmt);\n-\t  return false;\n-\t}\n+    thread_local:\n+      /* For local memory that doesn't escape (aka thread private memory), \n+\t we can either save the value at the beginning of the transaction and\n+\t restore on restart, or call a tm function to dynamically save and\n+\t restore on restart (ITM_L*). */\n+      if (stmt)\n+\ttm_log_add (entry_block, orig, stmt);\n+      return false;\n \n     default:\n       return false;"}]}