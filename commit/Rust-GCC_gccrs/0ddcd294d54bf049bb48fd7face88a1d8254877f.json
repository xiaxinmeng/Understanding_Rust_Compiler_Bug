{"sha": "0ddcd294d54bf049bb48fd7face88a1d8254877f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkY2QyOTRkNTRiZjA0OWJiNDhmZDdmYWNlODhhMWQ4MjU0ODc3Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:02:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:02:28Z"}, "message": "poly_int: get_binfo_at_offset\n\nThis patch changes the offset parameter to get_binfo_at_offset\nfrom HOST_WIDE_INT to poly_int64.  This function probably doesn't\nneed to handle polynomial offsets in practice, but it's easy\nto do and avoids forcing the caller to check first.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree.h (get_binfo_at_offset): Take the offset as a poly_int64\n\trather than a HOST_WIDE_INT.\n\t* tree.c (get_binfo_at_offset): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255932", "tree": {"sha": "cab559861d82df23cb110c4a88e09d7c00fcea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab559861d82df23cb110c4a88e09d7c00fcea80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ddcd294d54bf049bb48fd7face88a1d8254877f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ddcd294d54bf049bb48fd7face88a1d8254877f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ddcd294d54bf049bb48fd7face88a1d8254877f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ddcd294d54bf049bb48fd7face88a1d8254877f/comments", "author": null, "committer": null, "parents": [{"sha": "f7ed31955b00970413b202e0b4c3144aeec136d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ed31955b00970413b202e0b4c3144aeec136d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ed31955b00970413b202e0b4c3144aeec136d5"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "9aa16a381a990f120729bdff19ad54b2a4355c87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ddcd294d54bf049bb48fd7face88a1d8254877f", "patch": "@@ -1,3 +1,11 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree.h (get_binfo_at_offset): Take the offset as a poly_int64\n+\trather than a HOST_WIDE_INT.\n+\t* tree.c (get_binfo_at_offset): Likewise.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "aa647de80141edc4ea3414787943e4ba00bd2816", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0ddcd294d54bf049bb48fd7face88a1d8254877f", "patch": "@@ -12351,7 +12351,7 @@ lookup_binfo_at_offset (tree binfo, tree type, HOST_WIDE_INT pos)\n    found, return, otherwise return NULL_TREE.  */\n \n tree\n-get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n+get_binfo_at_offset (tree binfo, poly_int64 offset, tree expected_type)\n {\n   tree type = BINFO_TYPE (binfo);\n \n@@ -12363,7 +12363,7 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \n       if (types_same_for_odr (type, expected_type))\n \t  return binfo;\n-      if (offset < 0)\n+      if (maybe_lt (offset, 0))\n \treturn NULL_TREE;\n \n       for (fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n@@ -12373,15 +12373,15 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \n \t  pos = int_bit_position (fld);\n \t  size = tree_to_uhwi (DECL_SIZE (fld));\n-\t  if (pos <= offset && (pos + size) > offset)\n+\t  if (known_in_range_p (offset, pos, size))\n \t    break;\n \t}\n       if (!fld || TREE_CODE (TREE_TYPE (fld)) != RECORD_TYPE)\n \treturn NULL_TREE;\n \n       /* Offset 0 indicates the primary base, whose vtable contents are\n \t represented in the binfo for the derived class.  */\n-      else if (offset != 0)\n+      else if (maybe_ne (offset, 0))\n \t{\n \t  tree found_binfo = NULL, base_binfo;\n \t  /* Offsets in BINFO are in bytes relative to the whole structure"}, {"sha": "aedd48d0e1841bbde0393da5d1e0bf9bde11228c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ddcd294d54bf049bb48fd7face88a1d8254877f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0ddcd294d54bf049bb48fd7face88a1d8254877f", "patch": "@@ -4856,7 +4856,7 @@ extern void tree_set_block (tree, tree);\n extern location_t *block_nonartificial_location (tree);\n extern location_t tree_nonartificial_location (tree);\n extern tree block_ultimate_origin (const_tree);\n-extern tree get_binfo_at_offset (tree, HOST_WIDE_INT, tree);\n+extern tree get_binfo_at_offset (tree, poly_int64, tree);\n extern bool virtual_method_call_p (const_tree);\n extern tree obj_type_ref_class (const_tree ref);\n extern bool types_same_for_odr (const_tree type1, const_tree type2,"}]}