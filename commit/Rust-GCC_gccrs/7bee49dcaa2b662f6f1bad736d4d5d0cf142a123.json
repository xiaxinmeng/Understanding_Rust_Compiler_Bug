{"sha": "7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlZTQ5ZGNhYTJiNjYyZjZmMWJhZDczNmQ0ZDVkMGNmMTQyYTEyMw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-09-07T16:48:18Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-09-07T16:48:18Z"}, "message": "data_1.f90: Fix integer oveflow in integer literal constant.\n\n2006-09-07  Steven G. Kargl  <kargls@comcast.net>\n\n\t* gfortran.fortran-torture/compile/data_1.f90: Fix integer oveflow\n\tin integer literal constant.\n  \t* gfortran.dg/enum_8.f90: Ditto.\n\t* gfortran.dg/g77/20030326-1.f: Ditto.\n\n2006-09-07  Steven G. Kargl  <kargls@comcast.net>\n\n\t* gfortran.h (gfc_integer_info): Eliminate max_int.\n\t* arith.c (gfc_arith_init_1): Remove initialization of max_int.\n\t(gfc_arith_done_1): Remove clearing of max_int.\n\t(gfc_check_integer_range): Fix range chekcing of overflow.\n\t* simplify.c (gfc_simplify_not): Construct mask that was max_int.\n\nFrom-SVN: r116753", "tree": {"sha": "4f1d503f946ad196afc135214a5ab73b0196136d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f1d503f946ad196afc135214a5ab73b0196136d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/comments", "author": null, "committer": null, "parents": [{"sha": "aa9ecf58cc2a846e1d18c163469dcab437ac8a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ecf58cc2a846e1d18c163469dcab437ac8a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9ecf58cc2a846e1d18c163469dcab437ac8a2e"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "a80892600a8efeaf50785d76a4f81bed08ce4fa1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -1,4 +1,12 @@\n-2006-09-05 Paul Thomas <pault@gcc.gnu.org>\n+2006-09-07  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.h (gfc_integer_info): Eliminate max_int.\n+\t* arith.c (gfc_arith_init_1): Remove initialization of max_int.\n+\t(gfc_arith_done_1): Remove clearing of max_int.\n+\t(gfc_check_integer_range): Fix range chekcing of overflow.\n+\t* simplify.c (gfc_simplify_not): Construct mask that was max_int.\n+\n+2006-09-05  Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/28908\n \t* gfortran.h : Restore the gfc_dt_list structure and reference"}, {"sha": "766169fa6e13d5bd0e23a5675feb07744d1f6e36", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -195,7 +195,7 @@ gfc_arith_init_1 (void)\n       /* These are the numbers that are actually representable by the\n          target.  For bases other than two, this needs to be changed.  */\n       if (int_info->radix != 2)\n-        gfc_internal_error (\"Fix min_int, max_int calculation\");\n+        gfc_internal_error (\"Fix min_int calculation\");\n \n       /* See PRs 13490 and 17912, related to integer ranges.\n          The pedantic_min_int exists for range checking when a program\n@@ -210,10 +210,6 @@ gfc_arith_init_1 (void)\n       mpz_init (int_info->min_int);\n       mpz_sub_ui (int_info->min_int, int_info->pedantic_min_int, 1);\n \n-      mpz_init (int_info->max_int);\n-      mpz_add (int_info->max_int, int_info->huge, int_info->huge);\n-      mpz_add_ui (int_info->max_int, int_info->max_int, 1);\n-\n       /* Range  */\n       mpfr_set_z (a, int_info->huge, GFC_RND_MODE);\n       mpfr_log10 (a, a, GFC_RND_MODE);\n@@ -321,7 +317,6 @@ gfc_arith_done_1 (void)\n   for (ip = gfc_integer_kinds; ip->kind; ip++)\n     {\n       mpz_clear (ip->min_int);\n-      mpz_clear (ip->max_int);\n       mpz_clear (ip->pedantic_min_int);\n       mpz_clear (ip->huge);\n     }\n@@ -356,7 +351,7 @@ gfc_check_integer_range (mpz_t p, int kind)\n     }\n \n   if (mpz_cmp (p, gfc_integer_kinds[i].min_int) < 0\n-      || mpz_cmp (p, gfc_integer_kinds[i].max_int) > 0)\n+      || mpz_cmp (p, gfc_integer_kinds[i].huge) > 0)\n     result = ARITH_OVERFLOW;\n \n   return result;"}, {"sha": "60a53335cfb825764a5fa81c602960d03853189b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -1299,7 +1299,7 @@ gfc_expr;\n typedef struct\n {\n   /* Values really representable by the target.  */\n-  mpz_t huge, pedantic_min_int, min_int, max_int;\n+  mpz_t huge, pedantic_min_int, min_int;\n \n   int kind, radix, digits, bit_size, range;\n "}, {"sha": "48d8e6beab948dacff9857e50c7ec9ec93ef3333", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -2590,6 +2590,7 @@ gfc_simplify_not (gfc_expr * e)\n {\n   gfc_expr *result;\n   int i;\n+  mpz_t mask;\n \n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -2599,15 +2600,20 @@ gfc_simplify_not (gfc_expr * e)\n   mpz_com (result->value.integer, e->value.integer);\n \n   /* Because of how GMP handles numbers, the result must be ANDed with\n-     the max_int mask.  For radices <> 2, this will require change.  */\n+     a mask.  For radices <> 2, this will require change.  */\n \n   i = gfc_validate_kind (BT_INTEGER, e->ts.kind, false);\n \n-  mpz_and (result->value.integer, result->value.integer,\n-\t   gfc_integer_kinds[i].max_int);\n+  mpz_init (mask);\n+  mpz_add (mask, gfc_integer_kinds[i].huge, gfc_integer_kinds[i].huge);\n+  mpz_add_ui (mask, mask, 1);\n+\n+  mpz_and (result->value.integer, result->value.integer, mask);\n \n   twos_complement (result->value.integer, gfc_integer_kinds[i].bit_size);\n \n+  mpz_clear (mask);\n+\n   return range_check (result, \"NOT\");\n }\n "}, {"sha": "86794ebf5d92a3dcd4f28c6b015462f4aa2ed0c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -1,3 +1,10 @@\n+2006-09-07  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.fortran-torture/compile/data_1.f90: Fix integer oveflow\n+\tin integer literal constant.\n+  \t* gfortran.dg/enum_8.f90: Ditto.\n+\t* gfortran.dg/g77/20030326-1.f: Ditto.\n+\n 2006-09-07  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* gfortran.fortran-torture/execute/intrinsic_set_exponent.f90: Fix"}, {"sha": "819c58708018bb3a531d96a9f7c6ec4584fdd5a6", "filename": "gcc/testsuite/gfortran.dg/enum_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_8.f90?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -5,7 +5,7 @@\n program main\n   implicit none\n   enum, bind (c)\n-    enumerator :: pp , qq = 4294967295, rr  ! { dg-error \"not initialized with integer\" }\n+    enumerator :: pp, qq = 4294967295, rr ! { dg-error \"too big for its kind\" }\n   end enum  ! { dg-error \"has no ENUMERATORS\" }\n \n   enum, bind (c)"}, {"sha": "4741fd7888c14aa72a614a191f36d4625452673b", "filename": "gcc/testsuite/gfortran.dg/g77/20030326-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -6,5 +6,5 @@\n ! For gfortran, see PR 13490\n !\n        integer c\n-       c = -2147483648 / (-1) ! { dg-warning \"outside symmetric range\" \"\" }\n+       c = -2147483648 / (-1) ! { dg-error \"too big for its kind\" \"\" }\n        end"}, {"sha": "b283909931d161200872ab8ef62ebbddd08a56f7", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/data_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fdata_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bee49dcaa2b662f6f1bad736d4d5d0cf142a123/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fdata_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fdata_1.f90?ref=7bee49dcaa2b662f6f1bad736d4d5d0cf142a123", "patch": "@@ -7,5 +7,5 @@\n END\n ! this tests the fix for PR 13940\n SUBROUTINE a\n-DATA i /x'f95f95f9'/\n+DATA i /z'f95f95'/\n END"}]}