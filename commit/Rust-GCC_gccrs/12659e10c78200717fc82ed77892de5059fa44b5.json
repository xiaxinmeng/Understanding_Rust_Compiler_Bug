{"sha": "12659e10c78200717fc82ed77892de5059fa44b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2NTllMTBjNzgyMDA3MTdmYzgyZWQ3Nzg5MmRlNTA1OWZhNDRiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-29T19:40:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-29T19:40:08Z"}, "message": "Instantiate default arguments/member initializers once.\n\n\t* init.c (get_nsdmi): Remember NSDMI instantiations.\n\t* parser.c (inject_this_parameter): Be more picky about\n\tcurrent_class_ptr.\n\t* pt.c (tsubst_copy): Simplify 'this' handling.\n\t(tsubst_default_argument): Remember default argument\n\tinstantiations.  Take parameter number.\n\t(tsubst_default_arguments): Pass it.\n\t* call.c (convert_default_arg): Likewise.\n\nFrom-SVN: r251422", "tree": {"sha": "c3ed1339329a54953fe39b9f37ba918d7b6880c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ed1339329a54953fe39b9f37ba918d7b6880c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12659e10c78200717fc82ed77892de5059fa44b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12659e10c78200717fc82ed77892de5059fa44b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12659e10c78200717fc82ed77892de5059fa44b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12659e10c78200717fc82ed77892de5059fa44b5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aeafba210c4796bde79d4d06e05c96a153b8fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeafba210c4796bde79d4d06e05c96a153b8fb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeafba210c4796bde79d4d06e05c96a153b8fb5"}], "stats": {"total": 143, "additions": 97, "deletions": 46}, "files": [{"sha": "308e13abba7d814f7d677caa3fff3bfe3fe7464c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -1,5 +1,15 @@\n 2017-08-29  Jason Merrill  <jason@redhat.com>\n \n+\tInstantiate default arguments/member initializers once.\n+\t* init.c (get_nsdmi): Remember NSDMI instantiations.\n+\t* parser.c (inject_this_parameter): Be more picky about\n+\tcurrent_class_ptr.\n+\t* pt.c (tsubst_copy): Simplify 'this' handling.\n+\t(tsubst_default_argument): Remember default argument\n+\tinstantiations.  Take parameter number.\n+\t(tsubst_default_arguments): Pass it.\n+\t* call.c (convert_default_arg): Likewise.\n+\n \tFix default argument conversion failure and SFINAE.\n \t* call.c (build_over_call): Check convert_default_arg result for\n \terror_mark_node."}, {"sha": "cfedd30cea35a18f58297ae6db23c1c81a1ee04d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -7282,7 +7282,7 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum,\n   push_defarg_context (fn);\n \n   if (fn && DECL_TEMPLATE_INFO (fn))\n-    arg = tsubst_default_argument (fn, type, arg, complain);\n+    arg = tsubst_default_argument (fn, parmnum, type, arg, complain);\n \n   /* Due to:\n "}, {"sha": "17e7aad08f68acea4eaadfbeebf20b66715b397b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -6465,7 +6465,7 @@ extern tree maybe_process_partial_specialization (tree);\n extern tree most_specialized_instantiation\t(tree);\n extern void print_candidates\t\t\t(tree);\n extern void instantiate_pending_templates\t(int);\n-extern tree tsubst_default_argument\t\t(tree, tree, tree,\n+extern tree tsubst_default_argument\t\t(tree, int, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree tsubst (tree, tree, tsubst_flags_t, tree);\n extern tree tsubst_copy_and_build\t\t(tree, tree, tsubst_flags_t,"}, {"sha": "56a5df87cb3222fd3d5bf76bd9ddc62e7e4a3bcb", "filename": "gcc/cp/init.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -535,38 +535,45 @@ perform_target_ctor (tree init)\n \n /* Return the non-static data initializer for FIELD_DECL MEMBER.  */\n \n+static GTY(()) hash_map<tree, tree> *nsdmi_inst;\n+\n tree\n get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n {\n   tree init;\n   tree save_ccp = current_class_ptr;\n   tree save_ccr = current_class_ref;\n   \n-  if (!in_ctor)\n-    {\n-      /* Use a PLACEHOLDER_EXPR when we don't have a 'this' parameter to\n-\t refer to; constexpr evaluation knows what to do with it.  */\n-      current_class_ref = build0 (PLACEHOLDER_EXPR, DECL_CONTEXT (member));\n-      current_class_ptr = build_address (current_class_ref);\n-    }\n-\n   if (DECL_LANG_SPECIFIC (member) && DECL_TEMPLATE_INFO (member))\n     {\n       init = DECL_INITIAL (DECL_TI_TEMPLATE (member));\n+      location_t expr_loc\n+\t= EXPR_LOC_OR_LOC (init, DECL_SOURCE_LOCATION (member));\n+      tree *slot;\n       if (TREE_CODE (init) == DEFAULT_ARG)\n \t/* Unparsed.  */;\n+      else if (nsdmi_inst && (slot = nsdmi_inst->get (member)))\n+\tinit = *slot;\n       /* Check recursive instantiation.  */\n       else if (DECL_INSTANTIATING_NSDMI_P (member))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"recursive instantiation of default member \"\n-\t\t   \"initializer for %qD\", member);\n+\t    error_at (expr_loc, \"recursive instantiation of default member \"\n+\t\t      \"initializer for %qD\", member);\n \t  init = error_mark_node;\n \t}\n       else\n \t{\n+\t  int un = cp_unevaluated_operand;\n+\t  cp_unevaluated_operand = 0;\n+\n+\t  location_t sloc = input_location;\n+\t  input_location = expr_loc;\n+\n \t  DECL_INSTANTIATING_NSDMI_P (member) = 1;\n \n+\t  inject_this_parameter (DECL_CONTEXT (member), TYPE_UNQUALIFIED);\n+\n \t  /* Do deferred instantiation of the NSDMI.  */\n \t  init = (tsubst_copy_and_build\n \t\t  (init, DECL_TI_ARGS (member),\n@@ -575,6 +582,16 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t  init = digest_nsdmi_init (member, init, complain);\n \t  \n \t  DECL_INSTANTIATING_NSDMI_P (member) = 0;\n+\n+\t  if (init != error_mark_node)\n+\t    {\n+\t      if (!nsdmi_inst)\n+\t\tnsdmi_inst = hash_map<tree,tree>::create_ggc (37);\n+\t      nsdmi_inst->put (member, init);\n+\t    }\n+\n+\t  input_location = sloc;\n+\t  cp_unevaluated_operand = un;\n \t}\n     }\n   else\n@@ -592,6 +609,19 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n       init = error_mark_node;\n     }\n \n+  if (in_ctor)\n+    {\n+      current_class_ptr = save_ccp;\n+      current_class_ref = save_ccr;\n+    }\n+  else\n+    {\n+      /* Use a PLACEHOLDER_EXPR when we don't have a 'this' parameter to\n+\t refer to; constexpr evaluation knows what to do with it.  */\n+      current_class_ref = build0 (PLACEHOLDER_EXPR, DECL_CONTEXT (member));\n+      current_class_ptr = build_address (current_class_ref);\n+    }\n+\n   /* Strip redundant TARGET_EXPR so we don't need to remap it, and\n      so the aggregate init code below will see a CONSTRUCTOR.  */\n   bool simple_target = (init && SIMPLE_TARGET_EXPR_P (init));"}, {"sha": "d66f1463efa2a3ab6ed8a78a7ed58172c750476f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -20715,7 +20715,9 @@ inject_this_parameter (tree ctype, cp_cv_quals quals)\n     {\n       /* We don't clear this between NSDMIs.  Is it already what we want?  */\n       tree type = TREE_TYPE (TREE_TYPE (current_class_ptr));\n-      if (same_type_ignoring_top_level_qualifiers_p (ctype, type)\n+      if (DECL_P (current_class_ptr)\n+\t  && DECL_CONTEXT (current_class_ptr) == NULL_TREE\n+\t  && same_type_ignoring_top_level_qualifiers_p (ctype, type)\n \t  && cp_type_quals (type) == quals)\n \treturn;\n     }"}, {"sha": "eec89dbce5b19dda91dcdfd6a4b5d1deeb278e2c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -12000,11 +12000,14 @@ tsubst_aggr_type (tree t,\n     }\n }\n \n+static GTY(()) hash_map<tree, tree> *defarg_inst;\n+\n /* Substitute into the default argument ARG (a default argument for\n    FN), which has the indicated TYPE.  */\n \n tree\n-tsubst_default_argument (tree fn, tree type, tree arg, tsubst_flags_t complain)\n+tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n+\t\t\t tsubst_flags_t complain)\n {\n   tree saved_class_ptr = NULL_TREE;\n   tree saved_class_ref = NULL_TREE;\n@@ -12014,6 +12017,17 @@ tsubst_default_argument (tree fn, tree type, tree arg, tsubst_flags_t complain)\n   if (TREE_CODE (arg) == DEFAULT_ARG)\n     return arg;\n \n+  tree parm = FUNCTION_FIRST_USER_PARM (fn);\n+  parm = chain_index (parmnum, parm);\n+  tree parmtype = TREE_TYPE (parm);\n+  if (DECL_BY_REFERENCE (parm))\n+    parmtype = TREE_TYPE (parmtype);\n+  gcc_assert (same_type_ignoring_top_level_qualifiers_p (type, parmtype));\n+\n+  tree *slot;\n+  if (defarg_inst && (slot = defarg_inst->get (parm)))\n+    return *slot;\n+\n   /* This default argument came from a template.  Instantiate the\n      default argument here, not in tsubst.  In the case of\n      something like:\n@@ -12066,6 +12080,13 @@ tsubst_default_argument (tree fn, tree type, tree arg, tsubst_flags_t complain)\n \n   pop_access_scope (fn);\n \n+  if (arg != error_mark_node && !cp_unevaluated_operand)\n+    {\n+      if (!defarg_inst)\n+\tdefarg_inst = hash_map<tree,tree>::create_ggc (37);\n+      defarg_inst->put (parm, arg);\n+    }\n+\n   return arg;\n }\n \n@@ -12087,11 +12108,12 @@ tsubst_default_arguments (tree fn, tsubst_flags_t complain)\n   if (DECL_CLONED_FUNCTION_P (fn))\n     return;\n \n+  int i = 0;\n   for (arg = TYPE_ARG_TYPES (TREE_TYPE (fn));\n        arg;\n-       arg = TREE_CHAIN (arg))\n+       arg = TREE_CHAIN (arg), ++i)\n     if (TREE_PURPOSE (arg))\n-      TREE_PURPOSE (arg) = tsubst_default_argument (fn,\n+      TREE_PURPOSE (arg) = tsubst_default_argument (fn, i,\n \t\t\t\t\t\t    TREE_VALUE (arg),\n \t\t\t\t\t\t    TREE_PURPOSE (arg),\n \t\t\t\t\t\t    complain);\n@@ -14499,13 +14521,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n       if (r == NULL_TREE)\n \t{\n-\t  /* We get here for a use of 'this' in an NSDMI as part of a\n-\t     constructor call or as part of an aggregate initialization.  */\n-\t  if (DECL_NAME (t) == this_identifier\n-\t      && ((current_function_decl\n-\t\t   && DECL_CONSTRUCTOR_P (current_function_decl))\n-\t\t  || (current_class_ref\n-\t\t      && TREE_CODE (current_class_ref) == PLACEHOLDER_EXPR)))\n+\t  /* We get here for a use of 'this' in an NSDMI.  */\n+\t  if (DECL_NAME (t) == this_identifier && current_class_ptr)\n \t    return current_class_ptr;\n \n \t  /* This can happen for a parameter name used later in a function"}, {"sha": "3d1c113d832a0d45fe12c365e286c86bad4fbe46", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-62155.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-62155.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-62155.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-62155.C?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -1,8 +1,8 @@\n // PR c++/62155\n // { dg-do compile { target c++11 } } \n \n-template <typename T> struct S { // { dg-error \"cannot convert\" }\n-  T i{[this] {}};\n+template <typename T> struct S {\n+  T i{[this] {}};\t\t// { dg-error \"cannot convert\" }\n };\n \n-S<int> s;                        // { dg-error \"cannot convert\" }\n+S<int> s;\t\t\t// { dg-message \"required\" }"}, {"sha": "ee39ab4b1698a702326e426b8d05613f7094c1fd", "filename": "gcc/testsuite/g++.dg/cpp1z/direct-enum-init1.C", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12659e10c78200717fc82ed77892de5059fa44b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C?ref=12659e10c78200717fc82ed77892de5059fa44b5", "patch": "@@ -140,11 +140,11 @@ struct U2\n template <int N>\n struct W2\n {\n-  A a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } .-2 }\n-  B b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } .-3 }\n-  C c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } .-4 }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-5 }\n-  D d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } .-6 }\n+  A a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } }\n+  B b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n+  C c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } }\n+\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-1 }\n+  D d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } }\n };\n \n template <typename H, typename I, typename J, typename K, typename L, typename M>\n@@ -208,11 +208,11 @@ struct U3\n template <typename H, typename I, typename J, typename K>\n struct W3\n {\n-  H a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } .-2 }\n-  I b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } .-3 }\n-  J c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } .-4 }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-5 }\n-  K d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } .-6 }\n+  H a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } }\n+  I b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n+  J c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } }\n+\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-1 }\n+  K d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } }\n };\n \n void\n@@ -221,17 +221,9 @@ test ()\n   foo2<0> ();\n   U2<0> u20;\n   U2<1> u21 (5);\n-  W2<0> w2;\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" }\n-\t\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } .-1 }\n-\t\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } .-2 }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-3 }\n-\t\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } .-4 }\n+  W2<0> w2;\t\t// { dg-message \"\" }\n   foo3<A, B, C, D, E, V> ();\n   U3<E> u30;\n   U3<E> u31 (5);\n-  W3<A, B, C, D> w3;\t// { dg-error \"invalid conversion from 'int' to 'A'\" }\n-\t\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } .-1 }\n-\t\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } .-2 }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-3 }\n-\t\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } .-4 }\n+  W3<A, B, C, D> w3;\t// { dg-message \"\" }\n }"}]}