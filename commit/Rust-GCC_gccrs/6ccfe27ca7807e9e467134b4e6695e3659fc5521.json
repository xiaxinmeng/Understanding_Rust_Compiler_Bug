{"sha": "6ccfe27ca7807e9e467134b4e6695e3659fc5521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNjZmUyN2NhNzgwN2U5ZTQ2NzEzNGI0ZTY2OTVlMzY1OWZjNTUyMQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-05-05T21:59:35Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-05-05T21:59:35Z"}, "message": "Makefile.in: (site.exp): Add ALT_CC_UNDER_TEST, add quotes around expanded variables.\n\n2003-05-05  Janis Johnson  <janis187@us.ibm.com>\n\n\t* Makefile.in: (site.exp): Add ALT_CC_UNDER_TEST, add quotes around\n\texpanded variables.\n\t* doc/sourcebuild.texi (C tests): Describe gcc.dg/compat tests.\ntestsuite:\n\t* lib/compat.exp (compat-execute): New argument.\n\t* g++.dg/compat/compat.exp: Pass new argument to compat-execute.\n\t* gcc.dg/compat: New test directory.\n\t* gcc.dg/compat/compat.exp: New expect script.\n\t* gcc.dg/compat/scalar-by-value-1_main.c: New test file.\n\t* gcc.dg/compat/scalar-by-value-1_x.c: New test file.\n\t* gcc.dg/compat/scalar-by-value-1_y.c: New test file.\n\t* gcc.dg/compat/scalar-by-value-2_main.c: New test file.\n\t* gcc.dg/compat/scalar-by-value-2_x.c: New test file.\n\t* gcc.dg/compat/scalar-by-value-2_y.c: New test file.\n\nFrom-SVN: r66506", "tree": {"sha": "0cbbf9c1ae26c70095f619b71905d53810520d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbbf9c1ae26c70095f619b71905d53810520d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ccfe27ca7807e9e467134b4e6695e3659fc5521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccfe27ca7807e9e467134b4e6695e3659fc5521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccfe27ca7807e9e467134b4e6695e3659fc5521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccfe27ca7807e9e467134b4e6695e3659fc5521/comments", "author": null, "committer": null, "parents": [{"sha": "10b6a27401cfaff93dbb479de0fea2e49bb6530a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b6a27401cfaff93dbb479de0fea2e49bb6530a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b6a27401cfaff93dbb479de0fea2e49bb6530a"}], "stats": {"total": 638, "additions": 624, "deletions": 14}, "files": [{"sha": "6ec2e92fec4dcc829103bd7f6921349084b2f5e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -1,3 +1,9 @@\n+2003-05-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* Makefile.in: (site.exp): Add ALT_CC_UNDER_TEST, add quotes around\n+\texpanded variables.\n+\t* doc/sourcebuild.texi (C tests): Describe gcc.dg/compat tests.\n+\n 2003-05-05  Zack Weinberg  <zack@codesourcery.com>\n \n \t* rtl.h (STRING_POOL_ADDRESS_P): Rename to DEFERRED_CONSTANT_P."}, {"sha": "b4abda7b9f4fc7a12008d69a9cc4571cb0088d44", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -3266,12 +3266,16 @@ site.exp: ./config.status Makefile\n \tfi\n \techo \"set tmpdir $(objdir)/testsuite\" >> ./tmp0\n \t@echo \"set srcdir \\\"\\$${srcdir}/testsuite\\\"\" >> ./tmp0\n+\t@if [ \"X$(ALT_CC_UNDER_TEST)\" != \"X\" ] ; then \\\n+\t  echo \"set ALT_CC_UNDER_TEST \\\"$(ALT_CC_UNDER_TEST)\\\"\" >> ./tmp0; \\\n+\telse true; \\\n+\tfi\n \t@if [ \"X$(ALT_CXX_UNDER_TEST)\" != \"X\" ] ; then \\\n-\t  echo \"set ALT_CXX_UNDER_TEST $(ALT_CXX_UNDER_TEST)\" >> ./tmp0; \\\n+\t  echo \"set ALT_CXX_UNDER_TEST \\\"$(ALT_CXX_UNDER_TEST)\\\"\" >> ./tmp0; \\\n \telse true; \\\n \tfi\n \t@if [ \"X$(COMPAT_OPTIONS)\" != \"X\" ] ; then \\\n-\t  echo \"set COMPAT_OPTIONS $(COMPAT_OPTIONS)\" >> ./tmp0; \\\n+\t  echo \"set COMPAT_OPTIONS \\\"$(COMPAT_OPTIONS)\\\"\" >> ./tmp0; \\\n \telse true; \\\n \tfi\n \t@echo \"## All variables above are generated by configure. Do Not Edit ##\" >> ./tmp0"}, {"sha": "9e0b1f2e930afced8487b49e216389f03955597e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -855,6 +855,10 @@ message texts are compared against expected texts or regular expressions\n given in comments.  These tests are run with the options @samp{-ansi -pedantic}\n unless other options are given in the test.  Except as noted below they\n are not run with multiple optimization options.\n+@item gcc.dg/compat\n+This subdirectory contains tests for binary compatibility using\n+@file{compat.exp}, which in turn uses the language-independent support\n+(@pxref{compat Testing, , Support for testing binary compatibility}).\n @item gcc.dg/cpp\n This subdirectory contains tests of the preprocessor.\n @item gcc.dg/debug"}, {"sha": "d684d49fa680d307cc415fc8c700aaaf567b4f93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -1,3 +1,16 @@\n+2003-05-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/compat.exp (compat-execute): New argument.\n+\t* g++.dg/compat/compat.exp: Pass new argument to compat-execute.\n+\t* gcc.dg/compat: New test directory.\n+\t* gcc.dg/compat/compat.exp: New expect script.\n+\t* gcc.dg/compat/scalar-by-value-1_main.c: New test file.\n+\t* gcc.dg/compat/scalar-by-value-1_x.c: New test file.\n+\t* gcc.dg/compat/scalar-by-value-1_y.c: New test file.\n+\t* gcc.dg/compat/scalar-by-value-2_main.c: New test file.\n+\t* gcc.dg/compat/scalar-by-value-2_x.c: New test file.\n+\t* gcc.dg/compat/scalar-by-value-2_y.c: New test file.\n+\n 2003-05-05  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.dg/const-elim-1.c, gcc.dg/const-elim-2.c: New testcases."}, {"sha": "f6c1bbdec7042bdd0408f596aa89ce5d87d04f44", "filename": "gcc/testsuite/g++.dg/compat/compat.exp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -105,6 +105,10 @@ set save_cxxflags $CXXFLAGS\n set save_always_cxxflags $ALWAYS_CXXFLAGS\n set save_ld_library_path $ld_library_path\n \n+# Define an identifier for use with this suite to avoid name conflicts\n+# with other compat tests running at the same time.\n+set sid \"cp_compat\"\n+\n # Find out whether there is an alternate compiler to test.  If the\n # variable is defined but is set to \"same\", that means we use the same\n # compiler twice, which is meaningful if the two parts of COMPAT_OPTIONS\n@@ -130,7 +134,7 @@ foreach src [lsort [find $srcdir/$subdir *_main.C]] {\n \tcontinue\n     }\n \n-    compat-execute $src $use_alt\n+    compat-execute $src $sid $use_alt\n }\n \n # Restore the original compiler under test."}, {"sha": "3d8b796f84d80754f52df760069c54090b6e33ca", "filename": "gcc/testsuite/gcc.dg/compat/compat.exp", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat.exp?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,105 @@\n+# Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+#\n+# This file was written by Janis Johnson, <janis187@us.ibm.com>\n+\n+\n+# Test interoperability of two compilers that follow the same ABI.\n+#\n+# Break simple tests into two pieces and see that they work when linked\n+# together.  If an alternate compiler is specified then the two main\n+# pieces of each test are compiled with different compilers.  The\n+# alternate compiler must be installed, and is specified by defining\n+# ALT_CC_UNDER_TEST in the environment.\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+global GCC_UNDER_TEST\n+\n+# Load procedures from common libraries. \n+load_lib standard.exp\n+load_lib gcc.exp\n+\n+#\n+# compat-use-alt-compiler -- make the alternate compiler the default\n+# \n+proc compat-use-alt-compiler { } {\n+    global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n+    global same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+    if { $same_alt == 0 } then {\n+\tset GCC_UNDER_TEST $ALT_CC_UNDER_TEST\n+    }\n+}\n+\n+#\n+# compat-use-tst-compiler -- make compiler under test the default\n+#\n+proc compat-use-tst-compiler { } {\n+    global GCC_UNDER_TEST save_gcc_under_test\n+    global same_alt\n+\n+    # We don't need to do this if the alternate compiler is actually\n+    # the same as the compiler under test.\n+\n+    if { $same_alt == 0 } then {\n+\tset GCC_UNDER_TEST $save_gcc_under_test\n+    }\n+}\n+\n+# Load the language-independent compabibility support procedures.\n+# This must be done after the compat-use-*-compiler definitions.\n+load_lib compat.exp\n+\n+gcc_init\n+\n+# Save variables for the C compiler under test, which each test will\n+# change a couple of times.  This must be done after calling gcc-init.\n+set save_gcc_under_test $GCC_UNDER_TEST\n+\n+# Define an identifier for use with this suite to avoid name conflicts\n+# with other compat tests running at the same time.\n+set sid \"c_compat\"\n+\n+# Find out whether there is an alternate compiler to test.  If the\n+# variable is defined but is set to \"same\", that means we use the same\n+# compiler twice, which is meaningful if the two parts of COMPAT_OPTIONS\n+# are different.\n+set use_alt 0\n+set same_alt 0\n+if [info exists ALT_CC_UNDER_TEST] then {\n+    set use_alt 1\n+    if [string match \"same\" $ALT_CC_UNDER_TEST] then {\n+\tset same_alt 1\n+    }\n+}\n+\n+# Main loop.\n+foreach src [lsort [find $srcdir/$subdir *_main.c]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    compat-execute $src $sid $use_alt\n+}\n+\n+# Restore the original compiler under test.\n+compat-use-tst-compiler"}, {"sha": "9e8a8f1b04ce6633d95b15b8a80452ae9329ca90", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-1_main.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_main.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,12 @@\n+/* Test passing scalars by value.  This test includes scalar types that\n+   are supported by va_arg.  */\n+\n+extern void scalar_by_value_1_x (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  scalar_by_value_1_x ();\n+  exit (0);\n+}"}, {"sha": "9ce16a0d50d8dfed3c67cd4d513f3176210dfd23", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-1_x.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_x.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,164 @@\n+#ifdef DBG\n+#include <stdio.h>\n+#define DEBUG_FPUTS(x) fputs (x, stdout)\n+#define DEBUG_DOT putc ('.', stdout)\n+#define DEBUG_NL putc ('\\n', stdout)\n+#else\n+#define DEBUG_FPUTS(x)\n+#define DEBUG_DOT\n+#define DEBUG_NL\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL) \t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16);\t\t\\\n+extern void testva##NAME (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v + INITVAL)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+\t      TYPE x05, TYPE x06, TYPE x07, TYPE x08)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##NAME (x01, g02##NAME, x02, g04##NAME,\t\t\t\\\n+\t      x03, g06##NAME, x04, g08##NAME,\t\t\t\\\n+\t      x05, g10##NAME, x06, g12##NAME,\t\t\t\\\n+\t      x07, g14##NAME, x08, g16##NAME);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test\");\t\t\t\t\t\\\n+  test##NAME (g01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t      g05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t      g09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t      g13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_FPUTS (\" testva\");\t\t\t\t\t\\\n+  testva##NAME (1,\t\t\t\t\t\t\\\n+\t\tg01##NAME);\t\t\t\t\t\\\n+  testva##NAME (2,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME);\t\t\t\t\\\n+  testva##NAME (3,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME);\t\t\\\n+  testva##NAME (4,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME);\t\\\n+  testva##NAME (5,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME);\t\t\t\t\t\\\n+  testva##NAME (6,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME);\t\t\t\t\\\n+  testva##NAME (7,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME);\t\t\\\n+  testva##NAME (8,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME);\t\\\n+  testva##NAME (9,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME);\t\t\t\t\t\\\n+  testva##NAME (10,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME);\t\t\t\t\\\n+  testva##NAME (11,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME);\t\t\\\n+  testva##NAME (12,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME);\t\\\n+  testva##NAME (13,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME);\t\t\t\t\t\\\n+  testva##NAME (14,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME);\t\t\t\t\\\n+  testva##NAME (15,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME);\t\t\\\n+  testva##NAME (16,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_FPUTS (\" test2\");\t\t\t\t\t\\\n+  test2_##NAME (g01##NAME, g03##NAME, g05##NAME, g07##NAME,\t\\\n+\t\tg09##NAME, g11##NAME, g13##NAME, g15##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+extern void abort (void);\n+\n+T(ui, unsigned int, 51)\n+T(si, int, (-55))\n+T(ul, unsigned long, 61)\n+T(sl, long, (-66))\n+T(ull, unsigned long long, 71)\n+T(sll, long long, (-77))\n+T(d, double, 91.0)\n+T(ld, long double, 92.0)\n+\n+#undef T\n+\n+void\n+scalar_by_value_1_x ()\n+{\n+#define T(NAME) testit##NAME ();\n+\n+T(ui)\n+T(si)\n+T(ul)\n+T(sl)\n+T(ull)\n+T(sll)\n+T(d)\n+T(ld)\n+\n+#undef T\n+}"}, {"sha": "2bc024446419afe5fef94906a75ac64e4ca4d45b", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-1_y.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-1_y.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,105 @@\n+#include <stdarg.h>\n+\n+#ifdef DBG\n+#include <stdio.h>\n+#define DEBUG_FPUTS(x) fputs (x, stdout)\n+#define DEBUG_DOT putc ('.', stdout)\n+#define DEBUG_NL putc ('\\n', stdout)\n+#else\n+#define DEBUG_FPUTS(x)\n+#define DEBUG_DOT\n+#define DEBUG_NL\n+#endif\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1);\t\t\t\t\t\\\n+  check##NAME (g02##NAME,  2);\t\t\t\t\t\\\n+  check##NAME (g03##NAME,  3);\t\t\t\t\t\\\n+  check##NAME (g04##NAME,  4);\t\t\t\t\t\\\n+  check##NAME (g05##NAME,  5);\t\t\t\t\t\\\n+  check##NAME (g06##NAME,  6);\t\t\t\t\t\\\n+  check##NAME (g07##NAME,  7);\t\t\t\t\t\\\n+  check##NAME (g08##NAME,  8);\t\t\t\t\t\\\n+  check##NAME (g09##NAME,  9);\t\t\t\t\t\\\n+  check##NAME (g10##NAME, 10);\t\t\t\t\t\\\n+  check##NAME (g11##NAME, 11);\t\t\t\t\t\\\n+  check##NAME (g12##NAME, 12);\t\t\t\t\t\\\n+  check##NAME (g13##NAME, 13);\t\t\t\t\t\\\n+  check##NAME (g14##NAME, 14);\t\t\t\t\t\\\n+  check##NAME (g15##NAME, 15);\t\t\t\t\t\\\n+  check##NAME (g16##NAME, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (x01,  1);\t\t\t\t\t\\\n+  check##NAME (x02,  2);\t\t\t\t\t\\\n+  check##NAME (x03,  3);\t\t\t\t\t\\\n+  check##NAME (x04,  4);\t\t\t\t\t\\\n+  check##NAME (x05,  5);\t\t\t\t\t\\\n+  check##NAME (x06,  6);\t\t\t\t\t\\\n+  check##NAME (x07,  7);\t\t\t\t\t\\\n+  check##NAME (x08,  8);\t\t\t\t\t\\\n+  check##NAME (x09,  9);\t\t\t\t\t\\\n+  check##NAME (x10, 10);\t\t\t\t\t\\\n+  check##NAME (x11, 11);\t\t\t\t\t\\\n+  check##NAME (x12, 12);\t\t\t\t\t\\\n+  check##NAME (x13, 13);\t\t\t\t\t\\\n+  check##NAME (x14, 14);\t\t\t\t\t\\\n+  check##NAME (x15, 15);\t\t\t\t\t\\\n+  check##NAME (x16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##NAME (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  DEBUG_DOT;\t\t\t\t\t\t\\\n+\t  check##NAME (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(ui, unsigned int, 51)\n+T(si, int, (-55))\n+T(ul, unsigned long, 61)\n+T(sl, long, (-66))\n+T(ull, unsigned long long, 71)\n+T(sll, long long, (-77))\n+T(d, double, 91.0)\n+T(ld, long double, 92.0)"}, {"sha": "93b64dfe19f73fd23968b6075e56562ef1002f58", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-2_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_main.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,14 @@\n+/* Test passing scalars by value.  This test includes scalar types that\n+   are not supported by va_arg; since they require casts to pass to a\n+   function with a variable argument list, testing them with variable\n+   arguments is not interesting.  */\n+\n+extern void scalar_by_value_2_x (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  scalar_by_value_2_x ();\n+  exit (0);\n+}"}, {"sha": "0b20f5f69062bf9682a620640bb30daa13b2a82a", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-2_x.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_x.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,102 @@\n+#ifdef DBG\n+#include <stdio.h>\n+#define DEBUG_FPUTS(x) fputs (x, stdout)\n+#define DEBUG_DOT putc ('.', stdout)\n+#define DEBUG_NL putc ('\\n', stdout)\n+#else\n+#define DEBUG_FPUTS(x)\n+#define DEBUG_DOT\n+#define DEBUG_NL\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL) \t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v + INITVAL)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+\t      TYPE x05, TYPE x06, TYPE x07, TYPE x08)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##NAME (x01, g02##NAME, x02, g04##NAME,\t\t\t\\\n+\t      x03, g06##NAME, x04, g08##NAME,\t\t\t\\\n+\t      x05, g10##NAME, x06, g12##NAME,\t\t\t\\\n+\t      x07, g14##NAME, x08, g16##NAME);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME);\t\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test\");\t\t\t\t\t\\\n+  test##NAME (g01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t      g05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t      g09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t      g13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_FPUTS (\" test2\");\t\t\t\t\t\\\n+  test2_##NAME (g01##NAME, g03##NAME, g05##NAME, g07##NAME,\t\\\n+\t\tg09##NAME, g11##NAME, g13##NAME, g15##NAME);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+extern void abort (void);\n+\n+T(c, char, 21)\n+T(uc, unsigned char, 22)\n+T(sc, signed char, (-33))\n+T(us, unsigned short, 41)\n+T(ss, short, (-44))\n+T(f, float, 90.0)\n+\n+#undef T\n+\n+void\n+scalar_by_value_2_x ()\n+{\n+#define T(NAME) testit##NAME ();\n+\n+T(c)\n+T(uc)\n+T(sc)\n+T(us)\n+T(ss)\n+T(f)\n+\n+#undef T\n+}"}, {"sha": "5b7933400bc635d3dba7839ed0fd89b6a263450c", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-2_y.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-2_y.c?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -0,0 +1,78 @@\n+#include <stdarg.h>\n+\n+#ifndef DBG\n+#include <stdio.h>\n+#define DEBUG_FPUTS(x) fputs (x, stdout)\n+#define DEBUG_DOT putc ('.', stdout)\n+#define DEBUG_NL putc ('\\n', stdout)\n+#else\n+#define DEBUG_FPUTS(x)\n+#define DEBUG_DOT\n+#define DEBUG_NL\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1);\t\t\t\t\t\\\n+  check##NAME (g02##NAME,  2);\t\t\t\t\t\\\n+  check##NAME (g03##NAME,  3);\t\t\t\t\t\\\n+  check##NAME (g04##NAME,  4);\t\t\t\t\t\\\n+  check##NAME (g05##NAME,  5);\t\t\t\t\t\\\n+  check##NAME (g06##NAME,  6);\t\t\t\t\t\\\n+  check##NAME (g07##NAME,  7);\t\t\t\t\t\\\n+  check##NAME (g08##NAME,  8);\t\t\t\t\t\\\n+  check##NAME (g09##NAME,  9);\t\t\t\t\t\\\n+  check##NAME (g10##NAME, 10);\t\t\t\t\t\\\n+  check##NAME (g11##NAME, 11);\t\t\t\t\t\\\n+  check##NAME (g12##NAME, 12);\t\t\t\t\t\\\n+  check##NAME (g13##NAME, 13);\t\t\t\t\t\\\n+  check##NAME (g14##NAME, 14);\t\t\t\t\t\\\n+  check##NAME (g15##NAME, 15);\t\t\t\t\t\\\n+  check##NAME (g16##NAME, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (x01,  1);\t\t\t\t\t\\\n+  check##NAME (x02,  2);\t\t\t\t\t\\\n+  check##NAME (x03,  3);\t\t\t\t\t\\\n+  check##NAME (x04,  4);\t\t\t\t\t\\\n+  check##NAME (x05,  5);\t\t\t\t\t\\\n+  check##NAME (x06,  6);\t\t\t\t\t\\\n+  check##NAME (x07,  7);\t\t\t\t\t\\\n+  check##NAME (x08,  8);\t\t\t\t\t\\\n+  check##NAME (x09,  9);\t\t\t\t\t\\\n+  check##NAME (x10, 10);\t\t\t\t\t\\\n+  check##NAME (x11, 11);\t\t\t\t\t\\\n+  check##NAME (x12, 12);\t\t\t\t\t\\\n+  check##NAME (x13, 13);\t\t\t\t\t\\\n+  check##NAME (x14, 14);\t\t\t\t\t\\\n+  check##NAME (x15, 15);\t\t\t\t\t\\\n+  check##NAME (x16, 16);\t\t\t\t\t\\\n+}\n+\n+T(c, char, 21)\n+T(uc, unsigned char, 22)\n+T(sc, signed char, (-33))\n+T(us, unsigned short, 41)\n+T(ss, short, (-44))\n+T(f, float, 90.0)"}, {"sha": "67d60ecd80c42d65c74bc73f2a7420bd3fccfc72", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccfe27ca7807e9e467134b4e6695e3659fc5521/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=6ccfe27ca7807e9e467134b4e6695e3659fc5521", "patch": "@@ -111,10 +111,11 @@ proc compat-run { testname objlist dest options optstr } {\n # compat-execute -- compile with compatible compilers\n #\n # SRC1 is the full pathname of the main file of the testcase.\n+# SID identifies a test suite in the names of temporary files.\n # USE_ALT is nonzero if we're using an alternate compiler as well as\n #   the compiler under test.\n #\n-proc compat-execute { src1 use_alt } {\n+proc compat-execute { src1 sid use_alt } {\n     global srcdir tmpdir\n     global option_list\n     global tool\n@@ -144,11 +145,11 @@ proc compat-execute { src1 use_alt } {\n     regsub \"_main\" $src1 \"_y\" src3\n \n     # Define the names of the object files.\n-    set obj1 \"main_tst.o\"\n-    set obj2_tst \"x_tst.o\"\n-    set obj2_alt \"x_alt.o\"\n-    set obj3_tst \"y_tst.o\"\n-    set obj3_alt \"y_alt.o\"\n+    regsub \"sid\" \"sid_main_tst.o\" $sid obj1\n+    regsub \"sid\" \"sid_x_tst.o\" $sid obj2_tst\n+    regsub \"sid\" \"sid_x_alt.o\" $sid obj2_alt\n+    regsub \"sid\" \"sid_y_tst.o\" $sid obj3_tst\n+    regsub \"sid\" \"sid_y_alt.o\" $sid obj3_alt\n \n     # Get the base name of this test, for use in messages.\n     regsub \"^$srcdir/?\" $src1 \"\" testcase\n@@ -181,10 +182,8 @@ proc compat-execute { src1 use_alt } {\n \n \tset tst_options \"\"\n \tset alt_options \"\"\n-\tif ![string match $extra_tool_flags \"\"] then {\n-\t    lappend tst_options \"additional_flags=$extra_tool_flags $tst_option\"\n-\t    lappend alt_options \"additional_flags=$extra_tool_flags $alt_option\"\n-\t}\n+\tlappend tst_options \"additional_flags=$extra_tool_flags $tst_option\"\n+\tlappend alt_options \"additional_flags=$extra_tool_flags $alt_option\"\n \n \t# There's a unique name for each executable we generate, based on\n \t# the set of options and how the pieces of the tests are compiled.\n@@ -228,7 +227,7 @@ proc compat-execute { src1 use_alt } {\n \t}\n \n \t# Clean up object files.\n-\tset files [glob -nocomplain *.o]\n+\tset files [glob -nocomplain ${sid}_*.o]\n \tif { $files != \"\" } {\n \t    foreach objfile $files {\n \t\tif { ![info exists gluefile] || $objfile != $gluefile } {"}]}