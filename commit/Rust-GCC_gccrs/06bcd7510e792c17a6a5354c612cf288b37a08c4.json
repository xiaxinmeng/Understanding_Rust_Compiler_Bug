{"sha": "06bcd7510e792c17a6a5354c612cf288b37a08c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiY2Q3NTEwZTc5MmMxN2E2YTUzNTRjNjEyY2YyODhiMzdhMDhjNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-16T14:47:31Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-16T14:47:31Z"}, "message": "re PR fortran/34008 (ICE in gfc_trans_call, at fortran/trans-stmt.c:389 on elemental assignment)\n\n2007-11-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34008\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Add check for\n\tINTENT_INOUT as well as INTENT_OUT.\n\t(gfc_trans_call): Remove redundant gcc_asserts in dependency\n\tcheck.\n\n2007-11-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34008\n\t* gfortran.dg/interface_assignment_3.f90.\n\nFrom-SVN: r130232", "tree": {"sha": "727b197952b036bc87e12eea803c0341debe75b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/727b197952b036bc87e12eea803c0341debe75b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bcd7510e792c17a6a5354c612cf288b37a08c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bcd7510e792c17a6a5354c612cf288b37a08c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bcd7510e792c17a6a5354c612cf288b37a08c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bcd7510e792c17a6a5354c612cf288b37a08c4/comments", "author": null, "committer": null, "parents": [{"sha": "99739a3e63eb906c77b8acdb76d4f40485eb56fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99739a3e63eb906c77b8acdb76d4f40485eb56fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99739a3e63eb906c77b8acdb76d4f40485eb56fe"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "fb94711be8a657e7859cb1c968c645333d6e69a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=06bcd7510e792c17a6a5354c612cf288b37a08c4", "patch": "@@ -1,9 +1,24 @@\n+2007-11-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34008\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Add check for\n+\tINTENT_INOUT as well as INTENT_OUT.\n+\t(gfc_trans_call): Remove redundant gcc_asserts in dependency\n+\tcheck.\n+\n 2007-11-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/33986\n \t* trans-array.c (gfc_conv_array_parameter ): Allow allocatable\n \tfunction results.\n \n+2007-11-15  Tobias Burnus  <burnus@net-b.de>\n+ \n+\tPR fortran/33917\n+\t* decl.c (match_procedure_decl): Pre-resolve interface.\n+\t* resolve.c (resolve_symbol): Reject interfaces later\n+\tdeclared in procedure statements.\n+\n 2007-11-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33162"}, {"sha": "ee176dcb75d35112dac3d761b1191aeea8b2d01a", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=06bcd7510e792c17a6a5354c612cf288b37a08c4", "patch": "@@ -246,8 +246,9 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n       fsym = formal ? formal->sym : NULL;\n       if (e->expr_type == EXPR_VARIABLE\n \t    && e->rank && fsym\n-\t    && fsym->attr.intent == INTENT_OUT\n-\t    && gfc_check_fncall_dependency (e, INTENT_OUT, sym, arg0))\n+\t    && fsym->attr.intent != INTENT_IN\n+\t    && gfc_check_fncall_dependency (e, fsym->attr.intent,\n+\t\t\t\t\t    sym, arg0))\n \t{\n \t  /* Make a local loopinfo for the temporary creation, so that\n \t     none of the other ss->info's have to be renormalized.  */\n@@ -380,14 +381,11 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n       gfc_copy_loopinfo_to_se (&loopse, &loop);\n       loopse.ss = ss;\n \n-      /* For operator assignment, we need to do dependency checking.  \n-\t We also check the intent of the parameters.  */\n+      /* For operator assignment, do dependency checking.  */\n       if (dependency_check)\n \t{\n \t  gfc_symbol *sym;\n \t  sym = code->resolved_sym;\n-\t  gcc_assert (sym->formal->sym->attr.intent == INTENT_OUT);\n-\t  gcc_assert (sym->formal->next->sym->attr.intent == INTENT_IN);\n \t  gfc_conv_elemental_dependencies (&se, &loopse, sym,\n \t\t\t\t\t   code->ext.actual);\n \t}"}, {"sha": "a2a1caad18f08eb29b2948e9f239c0b877d2a683", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06bcd7510e792c17a6a5354c612cf288b37a08c4", "patch": "@@ -1,3 +1,8 @@\n+2007-11-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34008\n+\t* gfortran.dg/interface_assignment_3.f90.\n+\n 2007-11-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33870"}, {"sha": "6b7881bd143aa28ff4dc0255edac9545fd176368", "filename": "gcc/testsuite/gfortran.dg/interface_assignment_3.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bcd7510e792c17a6a5354c612cf288b37a08c4/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_3.f90?ref=06bcd7510e792c17a6a5354c612cf288b37a08c4", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! Checks the fix for PR34008, in which INTENT(INOUT) was disallowed\n+! for the first argument of assign_m, whereas both INOUT and OUT\n+! should be allowed.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de> \n+!\n+module mo_memory\n+  implicit none\n+  type t_mi\n+     logical       :: alloc = .false.\n+  end type t_mi\n+  type t_m\n+     type(t_mi)    :: i                         ! meta data\n+     real, pointer :: ptr (:,:,:,:) => NULL ()\n+  end type t_m\n+\n+  interface assignment (=)\n+     module  procedure assign_m\n+  end interface\n+contains\n+  elemental subroutine assign_m (y, x)\n+    !---------------------------------------\n+    ! overwrite intrinsic assignment routine\n+    !---------------------------------------\n+    type (t_m), intent(inout) :: y\n+    type (t_m), intent(in)    :: x\n+    y% i = x% i\n+    if (y% i% alloc) y% ptr = x% ptr\n+  end subroutine assign_m\n+end module mo_memory\n+\n+module gfcbug74\n+  use mo_memory, only: t_m, assignment (=)\n+  implicit none\n+  type t_atm\n+     type(t_m) :: m(42)\n+  end type t_atm\n+contains\n+  subroutine assign_atm_to_atm (y, x)\n+    type (t_atm), intent(inout) :: y\n+    type (t_atm), intent(in)    :: x\n+    integer :: i\n+!   do i=1,42; y% m(i) = x% m(i); end do    ! Works\n+    y% m = x% m                             ! ICE\n+  end subroutine assign_atm_to_atm\n+end module gfcbug74\n+! { dg-final { cleanup-modules \"mo_memory gfcbug74\" } }\n+"}]}