{"sha": "5ae27cfaed756438a433459dcb6fd840c9e4112e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlMjdjZmFlZDc1NjQzOGE0MzM0NTlkY2I2ZmQ4NDBjOWU0MTEyZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-05-06T05:19:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-05-06T05:19:24Z"}, "message": "optabs.h (enum optab_index): Add new OTI_fmod and OTI_drem.\n\n        * optabs.h (enum optab_index): Add new OTI_fmod and OTI_drem.\n        (fmod_optab): Define corresponding macros.\n        * optabs.c (init_optabs): Initialize fmod_optab and drem_optab.\n        * genopinit.c (optabs): Implement fmod_optab and drem_optab\n        using fmod?f3 and drem?f3 patterns.\n        * builtins.c (expand_builtin_mathfn_2): Handle BUILT_IN_FMOD{,F,L}\n        using fmod_optab and BUILT_IN_DREM{,F,L} using drem_optab.\n        (expand_builtin): Expand BUILT_IN_FMOD{,F,L} and\n        BUILT_IN_DREM{,F,L} using expand_builtin_mathfn_2 if\n        flag_unsafe_math_optimizations is set.\n\n        * reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FPREM_F,\n        UNSPEC_FPREM_U, UNSPEC_FPREM1_F and UNSPEC_FPREM1_U.\n\n        * config/i386/i386.c (ix86_emit_fp_unordered_jump): New function.\n        * config/i386/i386-protos.h (ix86_emit_fp_unordered_jump):\n        Prototype here.\n        * config/i386/i386.md (UNSPEC_FPREM_F, UNSPEC_FPREM_U,\n        UNSPEC_FPREM1_F, UNSPEC_FPREM1_U): New unspecs to represent x87's\n        fprem and fprem1 instructions.\n        (*x86_fnstsw_1): Change input parameter to (reg:CCFP 18).\n        Rename insn definition to x86_fnstsw_1.\n        (fpremxf4, fprem1xf4): New patterns to implement fprem and fprem1\n        x87 instructions.\n        (fmodsf3, fmoddf3, fmodxf3): New expanders to implement fmodf, fmod\n        and fmodl built-ins as inline x87 intrinsics.\n        (dremsf3, dremdf3, dremxf3): New expanders to implement dremf, drem\n        and dreml built-ins as inline x87 intrinsics.\n\n        * testsuite/gcc.dg/builtins-40.c: New test.\n\nFrom-SVN: r81555", "tree": {"sha": "5689624daa1964552ad51ee6161ad703c40aa3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5689624daa1964552ad51ee6161ad703c40aa3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae27cfaed756438a433459dcb6fd840c9e4112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae27cfaed756438a433459dcb6fd840c9e4112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae27cfaed756438a433459dcb6fd840c9e4112e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae27cfaed756438a433459dcb6fd840c9e4112e/comments", "author": null, "committer": null, "parents": [{"sha": "cf9c6ca5e9cea1cf7ed6e36c3e4a4b89b6c89e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9c6ca5e9cea1cf7ed6e36c3e4a4b89b6c89e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9c6ca5e9cea1cf7ed6e36c3e4a4b89b6c89e85"}], "stats": {"total": 305, "additions": 303, "deletions": 2}, "files": [{"sha": "0159b7ae958b51f4f223900bb39d66a700813cad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -1,3 +1,34 @@\n+2004-05-05  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_fmod and OTI_drem.\n+\t(fmod_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize fmod_optab and drem_optab.\n+\t* genopinit.c (optabs): Implement fmod_optab and drem_optab\n+\tusing fmod?f3 and drem?f3 patterns.\n+\t* builtins.c (expand_builtin_mathfn_2): Handle BUILT_IN_FMOD{,F,L}\n+\tusing fmod_optab and BUILT_IN_DREM{,F,L} using drem_optab.\n+\t(expand_builtin): Expand BUILT_IN_FMOD{,F,L} and\n+\tBUILT_IN_DREM{,F,L} using expand_builtin_mathfn_2 if\n+\tflag_unsafe_math_optimizations is set.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FPREM_F,\n+\tUNSPEC_FPREM_U, UNSPEC_FPREM1_F and UNSPEC_FPREM1_U.\n+\n+\t* config/i386/i386.c (ix86_emit_fp_unordered_jump): New function.\n+\t* config/i386/i386-protos.h (ix86_emit_fp_unordered_jump):\n+\tPrototype here.\n+\t* config/i386/i386.md (UNSPEC_FPREM_F, UNSPEC_FPREM_U,\n+\tUNSPEC_FPREM1_F, UNSPEC_FPREM1_U): New unspecs to represent x87's\n+\tfprem and fprem1 instructions.\n+\t(*x86_fnstsw_1): Change input parameter to (reg:CCFP 18).\n+\tRename insn definition to x86_fnstsw_1.\n+\t(fpremxf4, fprem1xf4): New patterns to implement fprem and fprem1\n+\tx87 instructions.\n+\t(fmodsf3, fmoddf3, fmodxf3): New expanders to implement fmodf, fmod\n+\tand fmodl built-ins as inline x87 intrinsics.\n+\t(dremsf3, dremdf3, dremxf3): New expanders to implement dremf, drem\n+\tand dreml built-ins as inline x87 intrinsics.\n+\n 2004-05-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* reload1.c (inherit_piecemeal_p): Mark parameters potentially unused."}, {"sha": "612684262b563a650c5a4b55bce96512513abdf4", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -1793,6 +1793,14 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_ATAN2F:\n     case BUILT_IN_ATAN2L:\n       builtin_optab = atan2_optab; break;\n+    case BUILT_IN_FMOD:\n+    case BUILT_IN_FMODF:\n+    case BUILT_IN_FMODL:\n+      builtin_optab = fmod_optab; break;\n+    case BUILT_IN_DREM:\n+    case BUILT_IN_DREMF:\n+    case BUILT_IN_DREML:\n+      builtin_optab = drem_optab; break;\n     default:\n       abort ();\n     }\n@@ -5364,6 +5372,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_ATAN2:\n     case BUILT_IN_ATAN2F:\n     case BUILT_IN_ATAN2L:\n+    case BUILT_IN_FMOD:\n+    case BUILT_IN_FMODF:\n+    case BUILT_IN_FMODL:\n+    case BUILT_IN_DREM:\n+    case BUILT_IN_DREMF:\n+    case BUILT_IN_DREML:\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n       target = expand_builtin_mathfn_2 (exp, target, subtarget);"}, {"sha": "636d50b20e179db95915b265fabe8c7345571e1b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -182,6 +182,7 @@ extern bool ix86_fp_jump_nontrivial_p (enum rtx_code);\n extern void x86_order_regs_for_local_alloc (void);\n extern void x86_function_profiler (FILE *, int);\n extern void x86_emit_floatuns (rtx [2]);\n+extern void ix86_emit_fp_unordered_jump (rtx);\n \n extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n "}, {"sha": "a561d4fe0e1d06b32b918e3103bc53e4fedee78e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -15928,4 +15928,25 @@ output_387_reg_move (rtx insn, rtx *operands)\n   return \"fst\\t%y0\";\n }\n \n+/* Output code to perform a conditional jump to LABEL, if C2 flag in\n+   FP status register is set.  */\n+\n+void\n+ix86_emit_fp_unordered_jump (rtx label)\n+{\n+  rtx reg = gen_reg_rtx (HImode);\n+  rtx temp;\n+\n+  emit_insn (gen_x86_fnstsw_1 (reg));\n+  emit_insn (gen_x86_sahf_1 (reg));\n+  \n+  temp = gen_rtx_REG (CCmode, FLAGS_REG); \n+  temp = gen_rtx_UNORDERED (VOIDmode, temp, const0_rtx);\n+  temp = gen_rtx_IF_THEN_ELSE (VOIDmode, temp,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n+\t\t\t      pc_rtx);\n+  temp = gen_rtx_SET (VOIDmode, pc_rtx, temp);\n+  emit_jump_insn (temp);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "e5edad4d5d21d9238cc008c1cd2a323a0925ecbe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 172, "deletions": 2, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -129,6 +129,10 @@\n    (UNSPEC_XTRACT_EXP\t\t85)\n    (UNSPEC_FSCALE_FRACT\t\t86)\n    (UNSPEC_FSCALE_EXP\t\t87)\n+   (UNSPEC_FPREM_F\t\t88)\n+   (UNSPEC_FPREM_U\t\t89)\n+   (UNSPEC_FPREM1_F\t\t90)\n+   (UNSPEC_FPREM1_U\t\t91)\n \n    ; REP instruction\n    (UNSPEC_REP\t\t\t75)\n@@ -941,9 +945,9 @@\n ;; FP compares, step 2\n ;; Move the fpsw to ax.\n \n-(define_insn \"*x86_fnstsw_1\"\n+(define_insn \"x86_fnstsw_1\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(unspec:HI [(reg 18)] UNSPEC_FNSTSW))]\n+\t(unspec:HI [(reg:CCFP 18)] UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n   \"fnstsw\\t%0\"\n   [(set_attr \"length\" \"2\")\n@@ -14858,6 +14862,172 @@\n    (set_attr \"mode\" \"XF\")\n    (set_attr \"athlon_decode\" \"direct\")])\n \n+(define_insn \"fpremxf4\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 3 \"register_operand\" \"1\")]\n+\t\t   UNSPEC_FPREM_F))\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+\t(unspec:XF [(match_dup 2) (match_dup 3)]\n+\t\t   UNSPEC_FPREM_U))\n+   (set (reg:CCFP 18)\n+\t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fprem\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"fmodsf3\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))\n+   (use (match_operand:SF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn(gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn(gen_extendsfxf2 (op2, operands[2]));\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op1));\n+  DONE;\n+})\n+\n+(define_expand \"fmoddf3\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))\n+   (use (match_operand:DF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_extenddfxf2 (op2, operands[2]));\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op1));\n+  DONE;\n+})\n+\n+(define_expand \"fmodxf3\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))\n+   (use (match_operand:XF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fpremxf4 (operands[1], operands[2],\n+\t\t\t   operands[1], operands[2]));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_insn \"fprem1xf4\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 3 \"register_operand\" \"1\")]\n+\t\t   UNSPEC_FPREM1_F))\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+\t(unspec:XF [(match_dup 2) (match_dup 3)]\n+\t\t   UNSPEC_FPREM1_U))\n+   (set (reg:CCFP 18)\n+\t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fprem1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"dremsf3\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))\n+   (use (match_operand:SF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn(gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn(gen_extendsfxf2 (op2, operands[2]));\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op1));\n+  DONE;\n+})\n+\n+(define_expand \"dremdf3\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))\n+   (use (match_operand:DF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_extenddfxf2 (op2, operands[2]));\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op1));\n+  DONE;\n+})\n+\n+(define_expand \"dremxf3\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))\n+   (use (match_operand:XF 2 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  emit_label (label);\n+\n+  emit_insn (gen_fprem1xf4 (operands[1], operands[2],\n+\t\t\t    operands[1], operands[2]));\n+  ix86_emit_fp_unordered_jump (label);\n+\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_insn \"*sindf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]"}, {"sha": "307849adcdf0a4b35de27f011eb6fa23d1f2766b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -91,6 +91,8 @@ static const char * const optabs[] =\n   \"udivmod_optab->handlers[$A].insn_code = CODE_FOR_$(udivmod$a4$)\",\n   \"smod_optab->handlers[$A].insn_code = CODE_FOR_$(mod$a3$)\",\n   \"umod_optab->handlers[$A].insn_code = CODE_FOR_$(umod$a3$)\",\n+  \"fmod_optab->handlers[$A].insn_code = CODE_FOR_$(fmod$a3$)\",\n+  \"drem_optab->handlers[$A].insn_code = CODE_FOR_$(drem$a3$)\",\n   \"ftrunc_optab->handlers[$A].insn_code = CODE_FOR_$(ftrunc$F$a2$)\",\n   \"and_optab->handlers[$A].insn_code = CODE_FOR_$(and$a3$)\",\n   \"ior_optab->handlers[$A].insn_code = CODE_FOR_$(ior$a3$)\","}, {"sha": "719fbb434c65f5f56f097763b597e7b76eef8ccc", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -5328,6 +5328,8 @@ init_optabs (void)\n   udivmod_optab = init_optab (UNKNOWN);\n   smod_optab = init_optab (MOD);\n   umod_optab = init_optab (UMOD);\n+  fmod_optab = init_optab (UNKNOWN);\n+  drem_optab = init_optab (UNKNOWN);\n   ftrunc_optab = init_optab (UNKNOWN);\n   and_optab = init_optab (AND);\n   ior_optab = init_optab (IOR);"}, {"sha": "84d8957f22dfe381e92320a416c02dc28d3141a5", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -93,6 +93,9 @@ enum optab_index\n   /* Signed remainder */\n   OTI_smod,\n   OTI_umod,\n+  /* Floating point remainder functions */\n+  OTI_fmod,\n+  OTI_drem,\n   /* Convert float to integer in float fmt */\n   OTI_ftrunc,\n \n@@ -245,6 +248,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define udivmod_optab (optab_table[OTI_udivmod])\n #define smod_optab (optab_table[OTI_smod])\n #define umod_optab (optab_table[OTI_umod])\n+#define fmod_optab (optab_table[OTI_fmod])\n+#define drem_optab (optab_table[OTI_drem])\n #define ftrunc_optab (optab_table[OTI_ftrunc])\n #define and_optab (optab_table[OTI_and])\n #define ior_optab (optab_table[OTI_ior])"}, {"sha": "bab401ff0bd0ca22c0fc94e8baa4530845c5efe7", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -1779,6 +1779,8 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tbreak;\n \n \t      case UNSPEC_FSCALE_FRACT:\n+\t      case UNSPEC_FPREM_F:\n+\t      case UNSPEC_FPREM1_F:\n \t\t/* These insns operate on the top two stack slots.\n \t\t   first part of double input, double output insn.  */\n \n@@ -1808,6 +1810,8 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tbreak;\n \n \t      case UNSPEC_FSCALE_EXP:\n+\t      case UNSPEC_FPREM_U:\n+\t      case UNSPEC_FPREM1_U:\n \t\t/* These insns operate on the top two stack slots./\n \t\t   second part of double input, double output insn.  */\n "}, {"sha": "c08a35e68fc034fe8ddd05cdfec841d07df32f6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -1,3 +1,7 @@\n+2004-05-05  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-40.c: New test.\n+\t\n 2004-05-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.dg/torture/mips-hilo-2.c: Provide dummy __mips16 version."}, {"sha": "405c8723309af8c1ebb5c9443e065d0df1ff5afe", "filename": "gcc/testsuite/gcc.dg/builtins-40.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae27cfaed756438a433459dcb6fd840c9e4112e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c?ref=5ae27cfaed756438a433459dcb6fd840c9e4112e", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that fmod, fmodf, fmodl, drem, dremf and dreml\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 5th May 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double fmod(double, double);\n+extern double drem(double, double);\n+extern float fmodf(float, float);\n+extern float dremf(float, float);\n+extern long double fmodl(long double, long double);\n+extern long double dreml(long double, long double);\n+\n+\n+double test1(double x, double y)\n+{\n+  return fmod(x, y);\n+}\n+\n+double test2(double x, double y)\n+{\n+  return drem(x, y);\n+}\n+\n+float test1f(float x, float y)\n+{\n+  return fmodf(x, y);\n+}\n+\n+float test2f(float x, float y)\n+{\n+  return dremf(x, y);\n+}\n+\n+long double test1l(long double x, long double y)\n+{\n+  return fmodl(x, y);\n+}\n+\n+long double test2l(long double x, long double y)\n+{\n+  return dreml(x, y);\n+}"}]}