{"sha": "98a91a724e8f0377624353dcc4dc7e5d2875dc96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhOTFhNzI0ZThmMDM3NzYyNDM1M2RjYzRkYzdlNWQyODc1ZGM5Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-19T16:42:25Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-19T16:42:25Z"}, "message": "2003-06-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/DatagramChannelImpl.java\n\t(fd): Removed.\n\t(blocking): New member variable.\n\t(socket): Likewise.\n\t(DatagramChannelImpl): Throws IOException, initialize socket.\n\t(socket):Implemented.\n\t(implCloseSelectableChannel): Throws IOException, implemented.\n\t(implConfigureBlocking): Likewise.\n\t(connect): Likewise.\n\t(disconnect): Likewise.\n\t(isConnected): Likewise.\n\t(write): Likewise.\n\t(read): Likewise.\n\t(receive): Throws IOException.\n\t(send): Likewise.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(read): Implemented.\n\t(write): Implemented.\n\nFrom-SVN: r68208", "tree": {"sha": "2d17811875fd5e4fe910a6479ac643d3267cf0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d17811875fd5e4fe910a6479ac643d3267cf0eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98a91a724e8f0377624353dcc4dc7e5d2875dc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a91a724e8f0377624353dcc4dc7e5d2875dc96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a91a724e8f0377624353dcc4dc7e5d2875dc96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a91a724e8f0377624353dcc4dc7e5d2875dc96/comments", "author": null, "committer": null, "parents": [{"sha": "536a695f0454b7c12015e0ac94aaa7125e1df351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536a695f0454b7c12015e0ac94aaa7125e1df351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536a695f0454b7c12015e0ac94aaa7125e1df351"}], "stats": {"total": 162, "additions": 111, "deletions": 51}, "files": [{"sha": "1705d758b5a3f365f85e654aa65dddb40e2a260b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=98a91a724e8f0377624353dcc4dc7e5d2875dc96", "patch": "@@ -1,3 +1,24 @@\n+2003-06-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/DatagramChannelImpl.java\n+\t(fd): Removed.\n+\t(blocking): New member variable.\n+\t(socket): Likewise.\n+\t(DatagramChannelImpl): Throws IOException, initialize socket.\n+\t(socket):Implemented.\n+\t(implCloseSelectableChannel): Throws IOException, implemented.\n+\t(implConfigureBlocking): Likewise.\n+\t(connect): Likewise.\n+\t(disconnect): Likewise.\n+\t(isConnected): Likewise.\n+\t(write): Likewise.\n+\t(read): Likewise.\n+\t(receive): Throws IOException.\n+\t(send): Likewise.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(read): Implemented.\n+\t(write): Implemented.\n+\n 2003-06-19  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/JComponent.java,"}, {"sha": "dce7dabcdac6aad20d42ae86cc84f92b483f9fc9", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 69, "deletions": 27, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=98a91a724e8f0377624353dcc4dc7e5d2875dc96", "patch": "@@ -35,78 +35,120 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n+import java.io.IOException;\n import java.net.DatagramSocket;\n import java.net.SocketAddress;\n import java.nio.ByteBuffer;\n import java.nio.channels.DatagramChannel;\n+import java.nio.channels.NotYetConnectedException;\n import java.nio.channels.spi.SelectorProvider;\n \n public class DatagramChannelImpl extends DatagramChannel\n {\n-  int fd;\n-\n+  boolean blocking = false;\n+  DatagramSocket socket;\n+  \n   protected DatagramChannelImpl (SelectorProvider provider)\n+    throws IOException\n   {\n     super (provider);\n+    socket = new DatagramSocket ();\n   }\n     \n-  protected void implCloseSelectableChannel ()\n+  public DatagramSocket socket ()\n   {\n+    return socket;\n   }\n     \n-  protected void implConfigureBlocking (boolean block)\n+  protected void implCloseSelectableChannel ()\n+    throws IOException\n   {\n+    socket.close ();\n   }\n-\n-  public int write (ByteBuffer src)\n+    \n+  protected void implConfigureBlocking (boolean blocking)\n+    throws IOException\n   {\n-    return 0;\n+    this.blocking = blocking; // FIXME\n   }\n \n-  public long write (ByteBuffer[] srcs, int offset, int length)\n+  public DatagramChannel connect (SocketAddress remote)\n+    throws IOException\n   {\n-    return 0;\n+    socket.connect (remote);\n+    return this;\n   }\n-\n-  public int read (ByteBuffer dst)\n+    \n+  public DatagramChannel disconnect ()\n+    throws IOException\n   {\n-    return 0;\n+    socket.disconnect ();\n+    return this;\n   }\n     \n-  public DatagramChannel connect (SocketAddress remote)\n+  public boolean isConnected ()\n   {\n-    return null;\n+    return socket.isConnected ();\n   }\n     \n-  public DatagramChannel disconnect ()\n+  public int write (ByteBuffer src)\n+    throws IOException\n   {\n-    return null;\n-  }\n+    if (!isConnected ())\n+      throw new NotYetConnectedException ();\n     \n-  public boolean isConnected ()\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public long write (ByteBuffer[] srcs, int offset, int length)\n+    throws IOException\n   {\n-    return false;\n+    // FIXME: Should we throw an exception if offset and/or length\n+    // have wrong values ?\n+\n+    long result = 0;\n+\n+    for (int i = offset; i < offset + length; i++)\n+      result += write (srcs [i]);\n+\n+    return result;\n+  }\n+\n+  public int read (ByteBuffer dst)\n+    throws IOException\n+  {\n+    if (!isConnected ())\n+      throw new NotYetConnectedException ();\n+    \n+    throw new Error (\"Not implemented\");\n   }\n     \n   public long read (ByteBuffer[] dsts, int offset, int length)\n+    throws IOException\n   {\n-    return 0;\n+    // FIXME: Should we throw an exception if offset and/or length\n+    // have wrong values ?\n+\n+    long result = 0;\n+\n+    for (int i = offset; i < offset + length; i++)\n+      result += read (dsts [i]);\n+\n+    return result;\n   }\n     \n   public SocketAddress receive (ByteBuffer dst)\n+    throws IOException\n   {\n-    return null;\n+    throw new Error (\"Not implemented\");\n   }\n     \n   public int send (ByteBuffer src, SocketAddress target)\n+    throws IOException\n   {\n-    return 0;\n-  }\n-    \n-  public DatagramSocket socket ()\n-  {\n-    return null;\n+    throw new Error (\"Not implemented\");\n   }\n }"}, {"sha": "b721c6d7d5196da2821e33546d142f5b05dc346a", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a91a724e8f0377624353dcc4dc7e5d2875dc96/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=98a91a724e8f0377624353dcc4dc7e5d2875dc96", "patch": "@@ -118,22 +118,21 @@ public Socket socket ()\n \n   public int read (ByteBuffer dst) throws IOException\n   {\n+    byte[] data;\n     int bytes = 0;\n-    int len = 1024;\n-    byte[]b = new byte[len];\n+    int len = dst.remaining ();\n \t\n-    /*\n-    bytes = SocketRead(fd, b, 0, len);\n-    dst.put(b, 0, bytes);\n-\n-    if (bytes == 0)\n+    if (!dst.hasArray ())\n       {\n-        // we've hit eof ?\n-        return -1;\n+        data = new byte [len];\n+        dst.get (data, 0, len);\n       }\n-    */\n-\n-    return bytes;\n+    else\n+      {\n+        data = dst.array ();\n+      }\n+    \n+    return socket.getInputStream().read (data, 0, len);\n   }\n     \n   public long read (ByteBuffer[] dsts, int offset, int length)\n@@ -152,24 +151,22 @@ public long read (ByteBuffer[] dsts, int offset, int length)\n   public int write (ByteBuffer src)\n     throws IOException\n   {\n+    byte[] data;\n     int bytes = 0;\n-    int len = src.position();\n-\n-    /*\n-    if (src.hasArray ())\n+    int len = src.remaining ();\n+    \n+    if (!src.hasArray ())\n       {\n-        byte[] b = src.array ();\n-        bytes = SocketWrite (fd, b, 0, len);\n+        data = new byte [len];\n+        src.get (data, 0, len);\n       }\n     else\n       {\n-        byte[] b = new byte [len];\n-        src.get (b, 0, len);\n-        bytes = SocketWrite (fd, b, 0, len);\n+        data = src.array ();\n       }\n-    */\n-\t\t\n-    return bytes;\n+   \n+    socket.getOutputStream().write (data, 0, len);\n+    return len;\n   }\n \n   public long write (ByteBuffer[] srcs, int offset, int length)"}]}