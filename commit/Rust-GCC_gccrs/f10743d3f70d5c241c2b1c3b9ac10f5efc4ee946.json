{"sha": "f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwNzQzZDNmNzBkNWMyNDFjMmIxYzNiOWFjMTBmNWVmYzRlZTk0Ng==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2014-05-31T09:27:52Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2014-05-31T09:27:52Z"}, "message": "arm.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n\ngcc/\n\n2014-05-31  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* config/arm/arm.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n\t(arm_builtins) : Add ARM_BUILTIN_GET_FPSCR and ARM_BUILTIN_SET_FPSCR.\n\t(bdesc_2arg) : Add description for builtins __builtins_arm_set_fpscr\n\tand __builtins_arm_get_fpscr.\n\t(arm_init_builtins) : Initialize builtins __builtins_arm_set_fpscr and\n\t__builtins_arm_get_fpscr.\n\t(arm_expand_builtin) : Expand builtins __builtins_arm_set_fpscr and\n\t__builtins_arm_ldfpscr.\n\t(arm_atomic_assign_expand_fenv): New function.\n\t* config/arm/vfp.md (set_fpscr): New pattern.\n\t(get_fpscr) : Likewise.\n\t* config/arm/unspecs.md (unspecv): Add VUNSPEC_GET_FPSCR and\n\tVUNSPEC_SET_FPSCR.\n\t* doc/extend.texi (AARCH64 Built-in Functions) : Document\n\t__builtins_arm_set_fpscr, __builtins_arm_get_fpscr.\n\nFrom-SVN: r211103", "tree": {"sha": "1324b786e156a754a3d76997eea779e75ad0a361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1324b786e156a754a3d76997eea779e75ad0a361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/comments", "author": null, "committer": null, "parents": [{"sha": "cab421f485bcfb57ba793133ad55a64f6abe4c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab421f485bcfb57ba793133ad55a64f6abe4c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab421f485bcfb57ba793133ad55a64f6abe4c43"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "504fdfb74eb8eec1b241e0877d58e4387ea65f3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "patch": "@@ -1,3 +1,21 @@\n+2014-05-31  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* config/arm/arm.c (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n+\t(arm_builtins) : Add ARM_BUILTIN_GET_FPSCR and ARM_BUILTIN_SET_FPSCR.\n+\t(bdesc_2arg) : Add description for builtins __builtins_arm_set_fpscr\n+\tand __builtins_arm_get_fpscr.\n+\t(arm_init_builtins) : Initialize builtins __builtins_arm_set_fpscr and\n+\t__builtins_arm_get_fpscr.\n+\t(arm_expand_builtin) : Expand builtins __builtins_arm_set_fpscr and\n+\t__builtins_arm_ldfpscr.\n+\t(arm_atomic_assign_expand_fenv): New function.\n+\t* config/arm/vfp.md (set_fpscr): New pattern.\n+\t(get_fpscr) : Likewise.\n+\t* config/arm/unspecs.md (unspecv): Add VUNSPEC_GET_FPSCR and\n+\tVUNSPEC_SET_FPSCR.\n+\t* doc/extend.texi (AARCH64 Built-in Functions) : Document\n+\t__builtins_arm_set_fpscr, __builtins_arm_get_fpscr.\n+\n 2014-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* asan.c (report_error_func): Add SLOW_P argument, use"}, {"sha": "f8575b9de6a1610c51d9471d05d11279bc30316a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "patch": "@@ -60,6 +60,7 @@\n #include \"params.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\"\n+#include \"gimple-expr.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -95,6 +96,7 @@ static int thumb_far_jump_used_p (void);\n static bool thumb_force_lr_save (void);\n static unsigned arm_size_return_regs (void);\n static bool arm_assemble_integer (rtx, unsigned int, int);\n+static void arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update);\n static void arm_print_operand (FILE *, rtx, int);\n static void arm_print_operand_address (FILE *, rtx);\n static bool arm_print_operand_punct_valid_p (unsigned char code);\n@@ -586,6 +588,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE arm_mangle_type\n \n+#undef TARGET_ATOMIC_ASSIGN_EXPAND_FENV\n+#define TARGET_ATOMIC_ASSIGN_EXPAND_FENV arm_atomic_assign_expand_fenv\n+\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST arm_build_builtin_va_list\n #undef TARGET_EXPAND_BUILTIN_VA_START\n@@ -23476,6 +23481,9 @@ enum arm_builtins\n   ARM_BUILTIN_CRC32CH,\n   ARM_BUILTIN_CRC32CW,\n \n+  ARM_BUILTIN_GET_FPSCR,\n+  ARM_BUILTIN_SET_FPSCR,\n+\n #undef CRYPTO1\n #undef CRYPTO2\n #undef CRYPTO3\n@@ -24228,6 +24236,15 @@ static const struct builtin_description bdesc_2arg[] =\n   IWMMXT_BUILTIN2 (iwmmxt_wmacuz, WMACUZ)\n   IWMMXT_BUILTIN2 (iwmmxt_wmacsz, WMACSZ)\n \n+\n+#define FP_BUILTIN(L, U) \\\n+  {0, CODE_FOR_##L, \"__builtin_arm_\"#L, ARM_BUILTIN_##U, \\\n+   UNKNOWN, 0},\n+\n+  FP_BUILTIN (set_fpscr, GET_FPSCR)\n+  FP_BUILTIN (get_fpscr, SET_FPSCR)\n+#undef FP_BUILTIN\n+\n #define CRC32_BUILTIN(L, U) \\\n   {0, CODE_FOR_##L, \"__builtin_arm_\"#L, ARM_BUILTIN_##U, \\\n    UNKNOWN, 0},\n@@ -24742,6 +24759,21 @@ arm_init_builtins (void)\n \n   if (TARGET_CRC32)\n     arm_init_crc32_builtins ();\n+\n+  if (TARGET_VFP)\n+    {\n+      tree ftype_set_fpscr\n+\t= build_function_type_list (void_type_node, unsigned_type_node, NULL);\n+      tree ftype_get_fpscr\n+\t= build_function_type_list (unsigned_type_node, NULL);\n+\n+      arm_builtin_decls[ARM_BUILTIN_GET_FPSCR]\n+\t= add_builtin_function (\"__builtin_arm_ldfscr\", ftype_get_fpscr,\n+\t\t\t\tARM_BUILTIN_GET_FPSCR, BUILT_IN_MD, NULL, NULL_TREE);\n+      arm_builtin_decls[ARM_BUILTIN_SET_FPSCR]\n+\t= add_builtin_function (\"__builtin_arm_stfscr\", ftype_set_fpscr,\n+\t\t\t\tARM_BUILTIN_SET_FPSCR, BUILT_IN_MD, NULL, NULL_TREE);\n+    }\n }\n \n /* Return the ARM builtin for CODE.  */\n@@ -25447,6 +25479,25 @@ arm_expand_builtin (tree exp,\n \n   switch (fcode)\n     {\n+    case ARM_BUILTIN_GET_FPSCR:\n+    case ARM_BUILTIN_SET_FPSCR:\n+      if (fcode == ARM_BUILTIN_GET_FPSCR)\n+\t{\n+\t  icode = CODE_FOR_get_fpscr;\n+\t  target = gen_reg_rtx (SImode);\n+\t  pat = GEN_FCN (icode) (target);\n+\t}\n+      else\n+\t{\n+\t  target = NULL_RTX;\n+\t  icode = CODE_FOR_set_fpscr;\n+\t  arg0 = CALL_EXPR_ARG (exp, 0);\n+\t  op0 = expand_normal (arg0);\n+\t  pat = GEN_FCN (icode) (op0);\n+\t}\n+      emit_insn (pat);\n+      return target;\n+\n     case ARM_BUILTIN_TEXTRMSB:\n     case ARM_BUILTIN_TEXTRMUB:\n     case ARM_BUILTIN_TEXTRMSH:\n@@ -31383,4 +31434,73 @@ arm_const_not_ok_for_debug_p (rtx p)\n   return false;\n }\n \n+static void\n+arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n+{\n+  const unsigned ARM_FE_INVALID = 1;\n+  const unsigned ARM_FE_DIVBYZERO = 2;\n+  const unsigned ARM_FE_OVERFLOW = 4;\n+  const unsigned ARM_FE_UNDERFLOW = 8;\n+  const unsigned ARM_FE_INEXACT = 16;\n+  const unsigned HOST_WIDE_INT ARM_FE_ALL_EXCEPT = (ARM_FE_INVALID\n+\t\t\t\t\t\t    | ARM_FE_DIVBYZERO\n+\t\t\t\t\t\t    | ARM_FE_OVERFLOW\n+\t\t\t\t\t\t    | ARM_FE_UNDERFLOW\n+\t\t\t\t\t\t    | ARM_FE_INEXACT);\n+  const unsigned HOST_WIDE_INT ARM_FE_EXCEPT_SHIFT = 8;\n+  tree fenv_var, get_fpscr, set_fpscr, mask, ld_fenv, masked_fenv;\n+  tree new_fenv_var, reload_fenv, restore_fnenv;\n+  tree update_call, atomic_feraiseexcept, hold_fnclex;\n+\n+  if (!TARGET_VFP)\n+    return;\n+\n+  /* Generate the equivalent of :\n+       unsigned int fenv_var;\n+       fenv_var = __builtin_arm_get_fpscr ();\n+\n+       unsigned int masked_fenv;\n+       masked_fenv = fenv_var & mask;\n+\n+       __builtin_arm_set_fpscr (masked_fenv);  */\n+\n+  fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  get_fpscr = arm_builtin_decls[ARM_BUILTIN_GET_FPSCR];\n+  set_fpscr = arm_builtin_decls[ARM_BUILTIN_SET_FPSCR];\n+  mask = build_int_cst (unsigned_type_node,\n+\t\t\t~((ARM_FE_ALL_EXCEPT << ARM_FE_EXCEPT_SHIFT)\n+\t\t\t  | ARM_FE_ALL_EXCEPT));\n+  ld_fenv = build2 (MODIFY_EXPR, unsigned_type_node,\n+\t\t    fenv_var, build_call_expr (get_fpscr, 0));\n+  masked_fenv = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_var, mask);\n+  hold_fnclex = build_call_expr (set_fpscr, 1, masked_fenv);\n+  *hold = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t  build2 (COMPOUND_EXPR, void_type_node, masked_fenv, ld_fenv),\n+\t\t  hold_fnclex);\n+\n+  /* Store the value of masked_fenv to clear the exceptions:\n+     __builtin_arm_set_fpscr (masked_fenv);  */\n+\n+  *clear = build_call_expr (set_fpscr, 1, masked_fenv);\n+\n+  /* Generate the equivalent of :\n+       unsigned int new_fenv_var;\n+       new_fenv_var = __builtin_arm_get_fpscr ();\n+\n+       __builtin_arm_set_fpscr (fenv_var);\n+\n+       __atomic_feraiseexcept (new_fenv_var);  */\n+\n+  new_fenv_var = create_tmp_var (unsigned_type_node, NULL);\n+  reload_fenv = build2 (MODIFY_EXPR, unsigned_type_node, new_fenv_var,\n+\t\t\tbuild_call_expr (get_fpscr, 0));\n+  restore_fnenv = build_call_expr (set_fpscr, 1, fenv_var);\n+  atomic_feraiseexcept = builtin_decl_implicit (BUILT_IN_ATOMIC_FERAISEEXCEPT);\n+  update_call = build_call_expr (atomic_feraiseexcept, 1,\n+\t\t\t\t fold_convert (integer_type_node, new_fenv_var));\n+  *update = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t    reload_fenv, restore_fnenv), update_call);\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "147cb802d41cfa9451ca03eeac0ed1d9b6da2053", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "patch": "@@ -143,6 +143,8 @@\n   VUNSPEC_SLX\t\t; Represent a store-register-release-exclusive.\n   VUNSPEC_LDA\t\t; Represent a store-register-acquire.\n   VUNSPEC_STL\t\t; Represent a store-register-release.\n+  VUNSPEC_GET_FPSCR\t; Represent fetch of FPSCR content.\n+  VUNSPEC_SET_FPSCR\t; Represent assign of FPSCR content.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "a8b27bcf986868fdac1b825907f8c5384e7c1c79", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "patch": "@@ -1322,6 +1322,22 @@\n    (set_attr \"conds\" \"unconditional\")]\n )\n \n+;; Write Floating-point Status and Control Register.\n+(define_insn \"set_fpscr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] VUNSPEC_SET_FPSCR)]\n+  \"TARGET_VFP\"\n+  \"mcr\\\\tp10, 7, %0, cr1, cr0, 0\\\\t @SET_FPSCR\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+;; Read Floating-point Status and Control Register.\n+(define_insn \"get_fpscr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(const_int 0)] VUNSPEC_GET_FPSCR))]\n+  \"TARGET_VFP\"\n+  \"mrc\\\\tp10, 7, %0, cr1, cr0, 0\\\\t @GET_FPSCR\"\n+  [(set_attr \"type\" \"mrs\")])\n+\n+\n ;; Unimplemented insns:\n ;; fldm*\n ;; fstm*"}, {"sha": "23a7809063ed7c96aefb200efeacfd09e98cc6e3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f10743d3f70d5c241c2b1c3b9ac10f5efc4ee946", "patch": "@@ -9702,6 +9702,7 @@ instructions, but allow the compiler to schedule those calls.\n * ARM iWMMXt Built-in Functions::\n * ARM NEON Intrinsics::\n * ARM ACLE Intrinsics::\n+* ARM Floating Point Status and Control Intrinsics::\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n * FR-V Built-in Functions::\n@@ -10518,6 +10519,17 @@ the @option{-march=armv8-a+crc} switch is used:\n \n @include arm-acle-intrinsics.texi\n \n+@node ARM Floating Point Status and Control Intrinsics\n+@subsection ARM Floating Point Status and Control Intrinsics\n+\n+These built-in functions are available for the ARM family of\n+processors with floating-point unit.\n+\n+@smallexample\n+unsigned int __builtin_arm_get_fpscr ()\n+void __builtin_arm_set_fpscr (unsigned int)\n+@end smallexample\n+\n @node AVR Built-in Functions\n @subsection AVR Built-in Functions\n "}]}