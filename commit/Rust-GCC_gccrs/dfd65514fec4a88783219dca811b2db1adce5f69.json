{"sha": "dfd65514fec4a88783219dca811b2db1adce5f69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkNjU1MTRmZWM0YTg4NzgzMjE5ZGNhODExYjJkYjFhZGNlNWY2OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-02-28T16:16:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-02-28T16:16:22Z"}, "message": "re PR fortran/43205 (-finit-local-zero and -fno-automatic used together with large 2-dim variables take too long to compile)\n\n2010-02-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43205\n        * trans-expr.c (is_zero_initializer_p): Move up in the file.\n        (gfc_conv_initializer): Handle zero initializer as special case.\n\nFrom-SVN: r157123", "tree": {"sha": "a2c90c86c17c13464bf00f049446cd0aa120226f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2c90c86c17c13464bf00f049446cd0aa120226f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfd65514fec4a88783219dca811b2db1adce5f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd65514fec4a88783219dca811b2db1adce5f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd65514fec4a88783219dca811b2db1adce5f69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd65514fec4a88783219dca811b2db1adce5f69/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aad16db9136676b6caac26ff55d0d79cce54cecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad16db9136676b6caac26ff55d0d79cce54cecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad16db9136676b6caac26ff55d0d79cce54cecd"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "88fe30ee7a8f4ba546c77e483e5ddbe0a444942e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd65514fec4a88783219dca811b2db1adce5f69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd65514fec4a88783219dca811b2db1adce5f69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dfd65514fec4a88783219dca811b2db1adce5f69", "patch": "@@ -1,3 +1,9 @@\n+2010-02-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43205\n+\t* trans-expr.c (is_zero_initializer_p): Move up in the file.\n+\t(gfc_conv_initializer): Handle zero initializer as special case.\n+\n 2010-02-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43185"}, {"sha": "abc2a24318a943838b180b8817328cd424ac6915", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd65514fec4a88783219dca811b2db1adce5f69/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd65514fec4a88783219dca811b2db1adce5f69/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dfd65514fec4a88783219dca811b2db1adce5f69", "patch": "@@ -3910,6 +3910,43 @@ gfc_conv_function_expr (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Determine whether the given EXPR_CONSTANT is a zero initializer.  */\n+\n+static bool\n+is_zero_initializer_p (gfc_expr * expr)\n+{\n+  if (expr->expr_type != EXPR_CONSTANT)\n+    return false;\n+\n+  /* We ignore constants with prescribed memory representations for now.  */\n+  if (expr->representation.string)\n+    return false;\n+\n+  switch (expr->ts.type)\n+    {\n+    case BT_INTEGER:\n+      return mpz_cmp_si (expr->value.integer, 0) == 0;\n+\n+    case BT_REAL:\n+      return mpfr_zero_p (expr->value.real)\n+\t     && MPFR_SIGN (expr->value.real) >= 0;\n+\n+    case BT_LOGICAL:\n+      return expr->value.logical == 0;\n+\n+    case BT_COMPLEX:\n+      return mpfr_zero_p (mpc_realref (expr->value.complex))\n+\t     && MPFR_SIGN (mpc_realref (expr->value.complex)) >= 0\n+             && mpfr_zero_p (mpc_imagref (expr->value.complex))\n+\t     && MPFR_SIGN (mpc_imagref (expr->value.complex)) >= 0;\n+\n+    default:\n+      break;\n+    }\n+  return false;\n+}\n+\n+\n static void\n gfc_conv_array_constructor_expr (gfc_se * se, gfc_expr * expr)\n {\n@@ -3960,6 +3997,9 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n       /* Arrays need special handling.  */\n       if (pointer)\n \treturn gfc_build_null_descriptor (type);\n+      /* Special case assigning an array to zero.  */\n+      else if (is_zero_initializer_p (expr))\n+        return build_constructor (type, NULL);\n       else\n \treturn gfc_conv_array_initializer (type, expr);\n     }\n@@ -5061,41 +5101,6 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n   return gfc_finish_block (&se.pre);\n }\n \n-/* Determine whether the given EXPR_CONSTANT is a zero initializer.  */\n-\n-static bool\n-is_zero_initializer_p (gfc_expr * expr)\n-{\n-  if (expr->expr_type != EXPR_CONSTANT)\n-    return false;\n-\n-  /* We ignore constants with prescribed memory representations for now.  */\n-  if (expr->representation.string)\n-    return false;\n-\n-  switch (expr->ts.type)\n-    {\n-    case BT_INTEGER:\n-      return mpz_cmp_si (expr->value.integer, 0) == 0;\n-\n-    case BT_REAL:\n-      return mpfr_zero_p (expr->value.real)\n-\t     && MPFR_SIGN (expr->value.real) >= 0;\n-\n-    case BT_LOGICAL:\n-      return expr->value.logical == 0;\n-\n-    case BT_COMPLEX:\n-      return mpfr_zero_p (mpc_realref (expr->value.complex))\n-\t     && MPFR_SIGN (mpc_realref (expr->value.complex)) >= 0\n-             && mpfr_zero_p (mpc_imagref (expr->value.complex))\n-\t     && MPFR_SIGN (mpc_imagref (expr->value.complex)) >= 0;\n-\n-    default:\n-      break;\n-    }\n-  return false;\n-}\n \n /* Try to efficiently translate array(:) = 0.  Return NULL if this\n    can't be done.  */"}]}