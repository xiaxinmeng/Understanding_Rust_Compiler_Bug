{"sha": "e67bbd5da485d131c174d9a65669d3cb78057a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3YmJkNWRhNDg1ZDEzMWMxNzRkOWE2NTY2OWQzY2I3ODA1N2E4ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-17T14:33:13Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-17T14:33:13Z"}, "message": "re PR middle-end/81814 (Incorrect behaviour at -O0 (conditional operator))\n\n\tPR middle-end/81814\n\t* fold-const.c (operand_equal_for_comparison_p): Remove code that used\n\tto mimic what shorten_compare did.  Change the return type to bool.\n\t(fold_cond_expr_with_comparison): Update call to\n\toperand_equal_for_comparison_p.\n\t(fold_ternary_loc): Likewise.\n\n\t* gcc.dg/torture/pr81814.c: New test.\n\nFrom-SVN: r251152", "tree": {"sha": "2bb315814e48b34f5839a38ff5724c92b008680a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb315814e48b34f5839a38ff5724c92b008680a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e67bbd5da485d131c174d9a65669d3cb78057a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67bbd5da485d131c174d9a65669d3cb78057a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67bbd5da485d131c174d9a65669d3cb78057a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67bbd5da485d131c174d9a65669d3cb78057a8d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "909e448f672250610dd93204be3f9abe42748311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909e448f672250610dd93204be3f9abe42748311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909e448f672250610dd93204be3f9abe42748311"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "f8e24cd6e7a18e074e119a0355971ffe16d5688b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e67bbd5da485d131c174d9a65669d3cb78057a8d", "patch": "@@ -1,3 +1,12 @@\n+2017-08-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/81814\n+\t* fold-const.c (operand_equal_for_comparison_p): Remove code that used\n+\tto mimic what shorten_compare did.  Change the return type to bool.\n+\t(fold_cond_expr_with_comparison): Update call to\n+\toperand_equal_for_comparison_p.\n+\t(fold_ternary_loc): Likewise.\n+\n 2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \t* aarch64-simd.md (mov<mode>): No longer force zero immediate into"}, {"sha": "fef9b1a707a89b0b420f04e9dfdda6514510c226", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 50, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e67bbd5da485d131c174d9a65669d3cb78057a8d", "patch": "@@ -113,7 +113,6 @@ static tree negate_expr (tree);\n static tree associate_trees (location_t, tree, tree, enum tree_code, tree);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n-static int operand_equal_for_comparison_p (tree, tree, tree);\n static int twoval_comparison_p (tree, tree *, tree *, int *);\n static tree eval_subst (location_t, tree, tree, tree, tree, tree);\n static tree optimize_bit_field_compare (location_t, enum tree_code,\n@@ -3365,60 +3364,27 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n #undef OP_SAME_WITH_NULL\n }\n \f\n-/* Similar to operand_equal_p, but see if ARG0 might have been made by\n-   shorten_compare from ARG1 when ARG1 was being compared with OTHER.\n+/* Similar to operand_equal_p, but strip nops first.  */\n \n-   When in doubt, return 0.  */\n-\n-static int\n-operand_equal_for_comparison_p (tree arg0, tree arg1, tree other)\n+static bool\n+operand_equal_for_comparison_p (tree arg0, tree arg1)\n {\n-  int unsignedp1, unsignedpo;\n-  tree primarg0, primarg1, primother;\n-  unsigned int correct_width;\n-\n   if (operand_equal_p (arg0, arg1, 0))\n-    return 1;\n+    return true;\n \n   if (! INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n       || ! INTEGRAL_TYPE_P (TREE_TYPE (arg1)))\n-    return 0;\n+    return false;\n \n   /* Discard any conversions that don't change the modes of ARG0 and ARG1\n      and see if the inner values are the same.  This removes any\n      signedness comparison, which doesn't matter here.  */\n-  primarg0 = arg0, primarg1 = arg1;\n-  STRIP_NOPS (primarg0);\n-  STRIP_NOPS (primarg1);\n-  if (operand_equal_p (primarg0, primarg1, 0))\n-    return 1;\n-\n-  /* Duplicate what shorten_compare does to ARG1 and see if that gives the\n-     actual comparison operand, ARG0.\n-\n-     First throw away any conversions to wider types\n-     already present in the operands.  */\n-\n-  primarg1 = get_narrower (arg1, &unsignedp1);\n-  primother = get_narrower (other, &unsignedpo);\n-\n-  correct_width = TYPE_PRECISION (TREE_TYPE (arg1));\n-  if (unsignedp1 == unsignedpo\n-      && TYPE_PRECISION (TREE_TYPE (primarg1)) < correct_width\n-      && TYPE_PRECISION (TREE_TYPE (primother)) < correct_width)\n-    {\n-      tree type = TREE_TYPE (arg0);\n-\n-      /* Make sure shorter operand is extended the right way\n-\t to match the longer operand.  */\n-      primarg1 = fold_convert (signed_or_unsigned_type_for\n-\t\t\t       (unsignedp1, TREE_TYPE (primarg1)), primarg1);\n-\n-      if (operand_equal_p (arg0, fold_convert (type, primarg1), 0))\n-\treturn 1;\n-    }\n+  STRIP_NOPS (arg0);\n+  STRIP_NOPS (arg1);\n+  if (operand_equal_p (arg0, arg1, 0))\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \f\n /* See if ARG is an expression that is either a comparison or is performing\n@@ -5300,7 +5266,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n      expressions will be false, so all four give B.  The min()\n      and max() versions would give a NaN instead.  */\n   if (!HONOR_SIGNED_ZEROS (element_mode (type))\n-      && operand_equal_for_comparison_p (arg01, arg2, arg00)\n+      && operand_equal_for_comparison_p (arg01, arg2)\n       /* Avoid these transformations if the COND_EXPR may be used\n \t as an lvalue in the C++ front-end.  PR c++/19199.  */\n       && (in_gimple_form\n@@ -11357,8 +11323,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n          Also try swapping the arguments and inverting the conditional.  */\n       if (COMPARISON_CLASS_P (arg0)\n-\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t     arg1, TREE_OPERAND (arg0, 1))\n+\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0), arg1)\n \t  && !HONOR_SIGNED_ZEROS (element_mode (arg1)))\n \t{\n \t  tem = fold_cond_expr_with_comparison (loc, type, arg0, op1, op2);\n@@ -11367,9 +11332,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t}\n \n       if (COMPARISON_CLASS_P (arg0)\n-\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t     op2,\n-\t\t\t\t\t     TREE_OPERAND (arg0, 1))\n+\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0), op2)\n \t  && !HONOR_SIGNED_ZEROS (element_mode (op2)))\n \t{\n \t  location_t loc0 = expr_location_or (arg0, loc);"}, {"sha": "68962aca05a22f75bc7f38514063453abeecaa7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e67bbd5da485d131c174d9a65669d3cb78057a8d", "patch": "@@ -1,3 +1,8 @@\n+2017-08-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/81814\n+\t* gcc.dg/torture/pr81814.c: New test.\n+\n 2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \t* gcc.target/aarch64/simd/vect_str_zero.c: New testcase."}, {"sha": "aaf7c7f304173cf464d75436f76a57902db7d4bc", "filename": "gcc/testsuite/gcc.dg/torture/pr81814.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81814.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67bbd5da485d131c174d9a65669d3cb78057a8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81814.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81814.c?ref=e67bbd5da485d131c174d9a65669d3cb78057a8d", "patch": "@@ -0,0 +1,36 @@\n+/* PR middle-end/81814 */\n+/* { dg-do run } */\n+\n+int\n+main ()\n+{\n+  int i = 0x01000000;\n+  int a;\n+\n+  a = ((signed char) i) != 0 ? 0 : (unsigned long long int) i;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((signed short int) i) != 0 ? 0 : (unsigned long long int) i;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((unsigned short int) i) != 0 ? 0 : (unsigned long long int) i;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((unsigned char) i) != 0 ? 0 : (unsigned long long int) i;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((signed char) i) == 0 ? (unsigned long long int) i : 0;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((signed short int) i) == 0 ? (unsigned long long int) i : 0;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((unsigned short int) i) == 0 ? (unsigned long long int) i : 0;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+  a = ((unsigned char) i) == 0 ? (unsigned long long int) i : 0;\n+  if (a != 0x01000000)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}