{"sha": "359f25f8e224cb398a732d2e7b499d6e8385a007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5ZjI1ZjhlMjI0Y2IzOThhNzMyZDJlN2I0OTlkNmU4Mzg1YTAwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-05T07:50:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-05T07:50:07Z"}, "message": "Force IFN_LOAD/STORE_LANES operands to be memory (PR91577)\n\nThis patch uses the workaround Richi suggested in the PR: make\ndiscover_nonconstant_array_refs mark the source of an IFN_LOAD_LANES\ncall and the destination of an IFN_STORE_LANES call as addressable,\nso that they don't end up being REG rtxes during expansion.\n\nI had to move the discover_nonconstant_array_refs call outside the\ncurrently_expanding_to_rtl block since otherwise mark_addressable\njust queues the decision for later.\n\n2019-09-05  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/91577\n\t* cfgexpand.c (discover_nonconstant_array_refs): Force the source\n\tof an IFN_LOAD_LANES call and the destination of an IFN_STORE_LANES\n\tcall to be in memory.\n\t(pass_expand::execute): Call discover_nonconstant_array_refs before\n\tsetting currently_expanding_to_rtl.\n\ngcc/testsuite/\n\tPR middle-end/91577\n\t* gfortran.dg/pr91577.f90: New test, taken from temporary_1.f90.\n\nFrom-SVN: r275399", "tree": {"sha": "5109160ca8dba4f4958a7f6f70770e84d87df17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5109160ca8dba4f4958a7f6f70770e84d87df17d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/359f25f8e224cb398a732d2e7b499d6e8385a007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359f25f8e224cb398a732d2e7b499d6e8385a007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359f25f8e224cb398a732d2e7b499d6e8385a007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359f25f8e224cb398a732d2e7b499d6e8385a007/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efd9a01b59eec33ff0bbba585a6e92c5a0234ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd9a01b59eec33ff0bbba585a6e92c5a0234ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd9a01b59eec33ff0bbba585a6e92c5a0234ed4"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "ee8c2441bb73212625a2332b8395ae7965369521", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=359f25f8e224cb398a732d2e7b499d6e8385a007", "patch": "@@ -1,3 +1,12 @@\n+2019-09-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91577\n+\t* cfgexpand.c (discover_nonconstant_array_refs): Force the source\n+\tof an IFN_LOAD_LANES call and the destination of an IFN_STORE_LANES\n+\tcall to be in memory.\n+\t(pass_expand::execute): Call discover_nonconstant_array_refs before\n+\tsetting currently_expanding_to_rtl.\n+\n 2019-09-04  Caroline Tice  <cmtice@google.com>\n \n \t* opts.c (finish_options): Disallow -fvtable-verify and -flto to be"}, {"sha": "5a93447f520f1ea8b739249bfdfec56775c91f79", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=359f25f8e224cb398a732d2e7b499d6e8385a007", "patch": "@@ -6155,7 +6155,24 @@ discover_nonconstant_array_refs (void)\n       {\n \tgimple *stmt = gsi_stmt (gsi);\n \tif (!is_gimple_debug (stmt))\n-\t  walk_gimple_op (stmt, discover_nonconstant_array_refs_r, NULL);\n+\t  {\n+\t    walk_gimple_op (stmt, discover_nonconstant_array_refs_r, NULL);\n+\t    gcall *call = dyn_cast <gcall *> (stmt);\n+\t    if (call && gimple_call_internal_p (call))\n+\t      switch (gimple_call_internal_fn (call))\n+\t\t{\n+\t\tcase IFN_LOAD_LANES:\n+\t\t  /* The source must be a MEM.  */\n+\t\t  mark_addressable (gimple_call_arg (call, 0));\n+\t\t  break;\n+\t\tcase IFN_STORE_LANES:\n+\t\t  /* The destination must be a MEM.  */\n+\t\t  mark_addressable (gimple_call_lhs (call));\n+\t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t  }\n       }\n }\n \n@@ -6353,6 +6370,9 @@ pass_expand::execute (function *fun)\n \t    avoid_deep_ter_for_debug (gsi_stmt (gsi), 0);\n     }\n \n+  /* Mark arrays indexed with non-constant indices with TREE_ADDRESSABLE.  */\n+  discover_nonconstant_array_refs ();\n+\n   /* Make sure all values used by the optimization passes have sane\n      defaults.  */\n   reg_renumber = 0;\n@@ -6387,9 +6407,6 @@ pass_expand::execute (function *fun)\n      Also, final expects a note to appear there.  */\n   emit_note (NOTE_INSN_DELETED);\n \n-  /* Mark arrays indexed with non-constant indices with TREE_ADDRESSABLE.  */\n-  discover_nonconstant_array_refs ();\n-\n   targetm.expand_to_rtl_hook ();\n   crtl->init_stack_alignment ();\n   fun->cfg->max_jumptable_ents = 0;"}, {"sha": "ce3a385d3edcb08f6b9135bae7c4a6b3f67ad474", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=359f25f8e224cb398a732d2e7b499d6e8385a007", "patch": "@@ -1,3 +1,8 @@\n+2019-09-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91577\n+\t* gfortran.dg/pr91577.f90: New test, taken from temporary_1.f90.\n+\n 2019-09-04  Steven G. Kargl  <kargl@gcvc.gnu.org>\n \n \tPR fortran/91650"}, {"sha": "8c31d37432979111e6f685310625acf4964aae82", "filename": "gcc/testsuite/gfortran.dg/pr91577.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91577.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359f25f8e224cb398a732d2e7b499d6e8385a007/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91577.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91577.f90?ref=359f25f8e224cb398a732d2e7b499d6e8385a007", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-additional-options \"--param max-completely-peel-loop-nest-depth=1\" }\n+! PR 27662. Don't zero the first stride to indicate a temporary. It\n+! may be used later.\n+program pr27662\n+ implicit none\n+ real(kind=kind(1.0d0)), dimension (2, 2):: x, y, z;\n+ integer i, j\n+ x(1,1) = 1.d0\n+ x(2,1) = 0.d0\n+ x(1,2) = 0.d0\n+ x(2,2) = 1.d0\n+ z = matmul (x, transpose (test ()))\n+ do i = 1, size (x, 1)\n+   do j = 1, size (x, 2)\n+     if (x (i, j) .ne. z (i, j)) STOP 1\n+   end do\n+ end do\n+\n+contains\n+ function test () result (res)\n+   real(kind=kind(1.0d0)), dimension(2,2) :: res\n+   res(1,1) = 1.d0\n+   res(2,1) = 0.d0\n+   res(1,2) = 0.d0\n+   res(2,2) = 1.d0\n+ end function\n+end"}]}