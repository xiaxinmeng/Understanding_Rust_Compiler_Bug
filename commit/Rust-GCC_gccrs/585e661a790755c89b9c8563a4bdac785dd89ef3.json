{"sha": "585e661a790755c89b9c8563a4bdac785dd89ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1ZTY2MWE3OTA3NTVjODliOWM4NTYzYTRiZGFjNzg1ZGQ4OWVmMw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2002-08-28T21:41:55Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-28T21:41:55Z"}, "message": "c-common.c (builtin_define_type_precision): New function.\n\ngcc/\n 2002-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n * c-common.c (builtin_define_type_precision): New function.\n (cb_register_builtins): Use it.  Define __WCHAR_UNSIGNED__ is\n wchar_t is unsigned in C++.\n * doc/cpp.texi (Common Predefined Macros): Document\n __WCHAR_UNSIGNED__, __CHAR_BIT__, __WCHAR_BIT__, __SHRT_BIT__,\n __INT_BIT__, __LONG_BIT__, __LONG_LONG_BIT__, __FLOAT_BIT__,\n __DOUBLE_BIT__, __LONG_DOUBLE_BIT__.\n\nlibstdc++-v3/\n\n2002-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n\t    * include/std/std_limits.h (__glibcpp_char_bits,\n\t    __glibcpp_short_bits, __glibcpp_int_bits,\n\t    __glibcpp_long_bits,\n\t    __glibcpp_long_long_bits, __glibcpp_float_bits,\n\t    __glibcpp_double_bits, __glibcpp_long_double_bits):\n\t    Remove.  Use\n\t    compiler predifined macros.\n\t    (__glibcpp_wchar_t_is_signed): Define based on compiler\n\t    predefined\n\t    __WCHAR_UNSIGNED__.\n\nFrom-SVN: r56646", "tree": {"sha": "2b17511bd36a86a0261dcb0450d11f2c2c443f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b17511bd36a86a0261dcb0450d11f2c2c443f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585e661a790755c89b9c8563a4bdac785dd89ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585e661a790755c89b9c8563a4bdac785dd89ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585e661a790755c89b9c8563a4bdac785dd89ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585e661a790755c89b9c8563a4bdac785dd89ef3/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07ec1151808767a9b8c4bd3dcff336dd68bad454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ec1151808767a9b8c4bd3dcff336dd68bad454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ec1151808767a9b8c4bd3dcff336dd68bad454"}], "stats": {"total": 202, "additions": 119, "deletions": 83}, "files": [{"sha": "223d00de5adfec5a278429fe2b6cdc9fdb692239", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=585e661a790755c89b9c8563a4bdac785dd89ef3", "patch": "@@ -1,3 +1,13 @@\n+2002-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-common.c (builtin_define_type_precision): New function.\n+\t(cb_register_builtins): Use it.  Define __WCHAR_UNSIGNED__ is\n+\twchar_t is unsigned in C++.\n+\t* doc/cpp.texi (Common Predefined Macros): Document\n+\t__WCHAR_UNSIGNED__, __CHAR_BIT__, __WCHAR_BIT__, __SHRT_BIT__,\n+\t__INT_BIT__, __LONG_BIT__, __LONG_LONG_BIT__, __FLOAT_BIT__,\n+\t__DOUBLE_BIT__, __LONG_DOUBLE_BIT__.\n+\n 2002-08-28  Sylvain Pion <pion@cs.nyu.edu>\n \n \t* doc/invoke.texi (-Wreorder): Remove remaining pieces from the generic"}, {"sha": "45879917c1c3ae02d15ea3eef58093a3dac3e3c1", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=585e661a790755c89b9c8563a4bdac785dd89ef3", "patch": "@@ -760,9 +760,10 @@ static bool get_nonnull_operand\t\tPARAMS ((tree,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT *));\n void builtin_define_std PARAMS ((const char *));\n static void builtin_define_with_value PARAMS ((const char *, const char *,\n-\t\t\t\t\t       int));\n+                                               int));\n static void builtin_define_type_max PARAMS ((const char *, tree, int));\n static void cpp_define_data_format PARAMS ((cpp_reader *));\n+static void builtin_define_type_precision PARAMS ((const char *, tree));\n \n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n@@ -4765,6 +4766,17 @@ cpp_define_data_format (pfile)\n   builtin_define_with_value (\"__GCC_FLOAT_FORMAT__\", format, 0);\n }\n \n+/* Define NAME with value TYPE precision.  */\n+static void\n+builtin_define_type_precision (name, type)\n+     const char *name;\n+     tree type;\n+{\n+  char buf[8];\n+  sprintf (buf, \"%d\", (int) TYPE_PRECISION (type));\n+  builtin_define_with_value (name, buf, 0);\n+}\n+\n /* Hook that registers front end and target-specific built-ins.  */\n void\n cb_register_builtins (pfile)\n@@ -4807,11 +4819,16 @@ cb_register_builtins (pfile)\n   builtin_define_type_max (\"__LONG_MAX__\", long_integer_type_node, 1);\n   builtin_define_type_max (\"__LONG_LONG_MAX__\", long_long_integer_type_node, 2);\n \n-  {\n-    char buf[8];\n-    sprintf (buf, \"%d\", (int) TYPE_PRECISION (signed_char_type_node));\n-    builtin_define_with_value (\"__CHAR_BIT__\", buf, 0);\n-  }\n+  builtin_define_type_precision (\"__CHAR_BIT__\", char_type_node);\n+  builtin_define_type_precision (\"__WCHAR_BIT__\", wchar_type_node);\n+  builtin_define_type_precision (\"__SHRT_BIT__\", short_integer_type_node);\n+  builtin_define_type_precision (\"__INT_BIT__\", integer_type_node);\n+  builtin_define_type_precision (\"__LONG_BIT__\", long_integer_type_node);\n+  builtin_define_type_precision (\"__LONG_LONG_BIT__\",\n+                                 long_long_integer_type_node);\n+  builtin_define_type_precision (\"__FLOAT_BIT__\", float_type_node);\n+  builtin_define_type_precision (\"__DOUBLE_BIT__\", double_type_node);\n+  builtin_define_type_precision (\"__LONG_DOUBLE_BIT__\", long_double_type_node);\n \n   /* For use in assembly language.  */\n   builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n@@ -4849,6 +4866,9 @@ cb_register_builtins (pfile)\n   if (!flag_signed_char)\n     cpp_define (pfile, \"__CHAR_UNSIGNED__\");\n \n+  if (c_language == clk_cplusplus && TREE_UNSIGNED (wchar_type_node))\n+    cpp_define (pfile, \"__WCHAR_UNSIGNED__\");\n+\n   cpp_define_data_format (pfile);\n   \n   /* Make the choice of ObjC runtime visible to source code.  */"}, {"sha": "0770e418a83d64e9d002da85bcba50900b4f5f22", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585e661a790755c89b9c8563a4bdac785dd89ef3/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=585e661a790755c89b9c8563a4bdac785dd89ef3", "patch": "@@ -1972,6 +1972,10 @@ unsigned on the target machine.  It exists to cause the standard header\n file @file{limits.h} to work correctly.  You should not use this macro\n yourself; instead, refer to the standard macros defined in @file{limits.h}.\n \n+@item __WCHAR_UNSIGNED__\n+Like @code{__CHAR_UNSIGNED__}, this macro is defined if and only if the\n+data type @code{wchar_t} is unsigned and the front-end is in C++ mode.\n+\n @item __REGISTER_PREFIX__\n This macro expands to a single token (not a string constant) which is\n the prefix applied to CPU register names in assembly language for this\n@@ -2002,6 +2006,22 @@ typedefs, respectively.  They exist to make the standard header files\n these macros directly; instead, include the appropriate headers and use\n the typedefs.\n \n+@item __CHAR_BIT__\n+@itemx __WCHAR_BIT__\n+@itemx __SHRT_BIT__\n+@itemx __INT_BIT__\n+@itemx __LONG_BIT__\n+@itemx __LONG_LONG_BIT__\n+@itemx __FLOAT_BIT__\n+@itemx __DOUBLE_BIT__\n+@itemx __LONG_DOUBLE_BIT__\n+These macros are defined to the number of bits used in the\n+representation of the data types @code{char}, @code{wchar_t},\n+@code{short}, @code{int}, @code{long}, @code{long long}, @code{float},\n+@code{double} and @code{long double}.  They exist to make the standard\n+header given numerical limits work correctly.  You should not use\n+these macros directly; instead, include the appropriate headers.\n+\n @item __USING_SJLJ_EXCEPTIONS__\n This macro is defined, with value 1, if the compiler uses the old\n mechanism based on @code{setjmp} and @code{longjmp} for exception"}, {"sha": "0320356c578ba3650feee5f4c5053d354c82ccbe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585e661a790755c89b9c8563a4bdac785dd89ef3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585e661a790755c89b9c8563a4bdac785dd89ef3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=585e661a790755c89b9c8563a4bdac785dd89ef3", "patch": "@@ -1,3 +1,13 @@\n+2002-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/std/std_limits.h (__glibcpp_char_bits,\n+\t__glibcpp_short_bits, __glibcpp_int_bits, __glibcpp_long_bits,\n+\t__glibcpp_long_long_bits, __glibcpp_float_bits,\n+\t__glibcpp_double_bits, __glibcpp_long_double_bits): Remove.  Use\n+\tcompiler predifined macros.\n+\t(__glibcpp_wchar_t_is_signed): Define based on compiler predefined\n+\t__WCHAR_UNSIGNED__. \n+\n 2002-08-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* include/std/std_limits.h (__glibcpp_f32_infinity_bytes,"}, {"sha": "190cfdfa3ec0dac0f1526248344db56dece431a6", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 53, "deletions": 77, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585e661a790755c89b9c8563a4bdac785dd89ef3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585e661a790755c89b9c8563a4bdac785dd89ef3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=585e661a790755c89b9c8563a4bdac785dd89ef3", "patch": "@@ -77,44 +77,20 @@\n // definitions given here.\n //\n \n-// These values can be overridden in the target configuration file.\n-// The default values are appropriate for many 32-bit targets.\n-\n-#ifndef __glibcpp_char_bits\n-#  define __glibcpp_char_bits 8\n-#endif\n #ifdef __CHAR_UNSIGNED__\n #  define __glibcpp_plain_char_is_signed false\n #else\n #  define __glibcpp_plain_char_is_signed true\n #endif\n-#ifndef __glibcpp_short_bits\n-#  define __glibcpp_short_bits 16\n-#endif\n-#ifndef __glibcpp_int_bits\n-#  define __glibcpp_int_bits 32\n-#endif\n-#ifndef __glibcpp_long_bits\n-#  define __glibcpp_long_bits 32\n-#endif\n-#ifndef __glibcpp_wchar_t_bits\n-#  define __glibcpp_wchar_t_bits 32\n-#endif\n-#ifndef __glibcpp_wchar_t_is_signed\n+\n+#ifndef __WCHAR_UNSIGNED__\n+#  define __glibcpp_wchar_t_is_signed false\n+#else\n #  define __glibcpp_wchar_t_is_signed true\n #endif\n-#ifndef __glibcpp_long_long_bits\n-#  define __glibcpp_long_long_bits 64\n-#endif\n-#ifndef __glibcpp_float_bits\n-#  define __glibcpp_float_bits 32\n-#endif\n-#ifndef __glibcpp_double_bits\n-#  define __glibcpp_double_bits 64\n-#endif\n-#ifndef __glibcpp_long_double_bits\n-#  define __glibcpp_long_double_bits 128\n-#endif\n+\n+// These values can be overridden in the target configuration file.\n+// The default values are appropriate for many 32-bit targets.\n \n #ifndef __glibcpp_char_traps\n #  define __glibcpp_char_traps true\n@@ -430,7 +406,7 @@\n #ifndef __glibcpp_signed_char_is_modulo\n #  define __glibcpp_signed_char_is_modulo true\n #endif\n-#if __glibcpp_char_bits == 8\n+#if __CHAR_BIT__ == 8\n #  define __glibcpp_signed_char_min __glibcpp_s8_min\n #  define __glibcpp_signed_char_max __glibcpp_s8_max\n #  define __glibcpp_signed_char_digits __glibcpp_s8_digits\n@@ -439,7 +415,7 @@\n #  define __glibcpp_unsigned_char_max __glibcpp_u8_max\n #  define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n #  define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_char_bits == 16\n+#elif __CHAR_BIT__ == 16\n #  define __glibcpp_signed_char_min __glibcpp_s16_min\n #  define __glibcpp_signed_char_max __glibcpp_s16_max\n #  define __glibcpp_signed_char_digits __glibcpp_s16_digits\n@@ -448,7 +424,7 @@\n #  define __glibcpp_unsigned_char_max __glibcpp_u16_max\n #  define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n #  define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_char_bits == 32\n+#elif __CHAR_BIT__ == 32\n #  define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n #  define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n #  define __glibcpp_signed_char_digits __glibcpp_s32_digits\n@@ -457,7 +433,7 @@\n #  define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n #  define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n #  define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_char_bits == 64\n+#elif __CHAR_BIT__ == 64\n #  define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n #  define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n #  define __glibcpp_signed_char_digits __glibcpp_s64_digits\n@@ -489,7 +465,7 @@\n #ifndef __glibcpp_signed_short_is_modulo\n #  define __glibcpp_signed_short_is_modulo true\n #endif\n-#if __glibcpp_short_bits == 8\n+#if __SHRT_BIT__ == 8\n #  define __glibcpp_signed_short_min __glibcpp_s8_min\n #  define __glibcpp_signed_short_max __glibcpp_s8_max\n #  define __glibcpp_signed_short_digits __glibcpp_s8_digits\n@@ -498,7 +474,7 @@\n #  define __glibcpp_unsigned_short_max __glibcpp_u8_max\n #  define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n #  define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_short_bits == 16\n+#elif __SHRT_BIT__ == 16\n #  define __glibcpp_signed_short_min __glibcpp_s16_min\n #  define __glibcpp_signed_short_max __glibcpp_s16_max\n #  define __glibcpp_signed_short_digits __glibcpp_s16_digits\n@@ -507,7 +483,7 @@\n #  define __glibcpp_unsigned_short_max __glibcpp_u16_max\n #  define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n #  define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_short_bits == 32\n+#elif __SHRT_BIT__ == 32\n #  define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n #  define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n #  define __glibcpp_signed_short_digits __glibcpp_s32_digits\n@@ -516,7 +492,7 @@\n #  define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n #  define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n #  define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_short_bits == 64\n+#elif __SHRT_BIT__ == 64\n #  define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n #  define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n #  define __glibcpp_signed_short_digits __glibcpp_s64_digits\n@@ -536,7 +512,7 @@\n #ifndef __glibcpp_signed_int_is_modulo\n #  define __glibcpp_signed_int_is_modulo true\n #endif\n-#if __glibcpp_int_bits == 8\n+#if __INT_BIT__ == 8\n #  define __glibcpp_signed_int_min __glibcpp_s8_min\n #  define __glibcpp_signed_int_max __glibcpp_s8_max\n #  define __glibcpp_signed_int_digits __glibcpp_s8_digits\n@@ -545,7 +521,7 @@\n #  define __glibcpp_unsigned_int_max __glibcpp_u8_max\n #  define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n #  define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_int_bits == 16\n+#elif __INT_BIT__ == 16\n #  define __glibcpp_signed_int_min __glibcpp_s16_min\n #  define __glibcpp_signed_int_max __glibcpp_s16_max\n #  define __glibcpp_signed_int_digits __glibcpp_s16_digits\n@@ -554,7 +530,7 @@\n #  define __glibcpp_unsigned_int_max __glibcpp_u16_max\n #  define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n #  define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_int_bits == 32\n+#elif __INT_BIT__ == 32\n #  define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n #  define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n #  define __glibcpp_signed_int_digits __glibcpp_s32_digits\n@@ -563,7 +539,7 @@\n #  define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n #  define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n #  define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_int_bits == 64\n+#elif __INT_BIT__ == 64\n #  define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n #  define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n #  define __glibcpp_signed_int_digits __glibcpp_s64_digits\n@@ -583,7 +559,7 @@\n #ifndef __glibcpp_signed_long_is_modulo\n #  define __glibcpp_signed_long_is_modulo true\n #endif\n-#if __glibcpp_long_bits == 8\n+#if __LONG_BIT__ == 8\n #  define __glibcpp_signed_long_min __glibcpp_s8_min\n #  define __glibcpp_signed_long_max __glibcpp_s8_max\n #  define __glibcpp_signed_long_digits __glibcpp_s8_digits\n@@ -592,7 +568,7 @@\n #  define __glibcpp_unsigned_long_max __glibcpp_u8_max\n #  define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n #  define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_long_bits == 16\n+#elif __LONG_BIT__ == 16\n #  define __glibcpp_signed_long_min __glibcpp_s16_min\n #  define __glibcpp_signed_long_max __glibcpp_s16_max\n #  define __glibcpp_signed_long_digits __glibcpp_s16_digits\n@@ -601,7 +577,7 @@\n #  define __glibcpp_unsigned_long_max __glibcpp_u16_max\n #  define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n #  define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_long_bits == 32\n+#elif __LONG_BIT__ == 32\n #  define __glibcpp_signed_long_min __glibcpp_s32_min\n #  define __glibcpp_signed_long_max __glibcpp_s32_max\n #  define __glibcpp_signed_long_digits __glibcpp_s32_digits\n@@ -610,7 +586,7 @@\n #  define __glibcpp_unsigned_long_max __glibcpp_u32_max\n #  define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n #  define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_long_bits == 64\n+#elif __LONG_BIT__ == 64\n #  define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n #  define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n #  define __glibcpp_signed_long_digits __glibcpp_s64_digits\n@@ -630,7 +606,7 @@\n #ifndef __glibcpp_signed_long_long_is_modulo\n #  define __glibcpp_signed_long_long_is_modulo true\n #endif\n-#if __glibcpp_long_long_bits == 8\n+#if __LONG_LONG_BIT__ == 8\n #  define __glibcpp_signed_long_long_min __glibcpp_s8_min\n #  define __glibcpp_signed_long_long_max __glibcpp_s8_max\n #  define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n@@ -639,7 +615,7 @@\n #  define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n #  define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n #  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_long_long_bits == 16\n+#elif __LONG_LONG_BIT__ == 16\n #  define __glibcpp_signed_long_long_min __glibcpp_s16_min\n #  define __glibcpp_signed_long_long_max __glibcpp_s16_max\n #  define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n@@ -648,7 +624,7 @@\n #  define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n #  define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n #  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_long_long_bits == 32\n+#elif __LONG_LONG_BIT__ == 32\n #  define __glibcpp_signed_long_long_min __glibcpp_s32_min\n #  define __glibcpp_signed_long_long_max __glibcpp_s32_max\n #  define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n@@ -657,7 +633,7 @@\n #  define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n #  define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n #  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_long_long_bits == 64\n+#elif __LONG_LONG_BIT__ == 64\n #  define __glibcpp_signed_long_long_min __glibcpp_s64_min\n #  define __glibcpp_signed_long_long_max __glibcpp_s64_max\n #  define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n@@ -679,22 +655,22 @@\n #  define __glibcpp_wchar_t_is_modulo true\n #endif\n #if __glibcpp_wchar_t_is_signed\n-#  if __glibcpp_wchar_t_bits == 8\n+#  if __WCHAR_BIT__ == 8\n #    define __glibcpp_wchar_t_min __glibcpp_s8_min\n #    define __glibcpp_wchar_t_max __glibcpp_s8_max\n #    define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n-#  elif __glibcpp_wchar_t_bits == 16\n+#  elif __WCHAR_BIT__ == 16\n #    define __glibcpp_wchar_t_min __glibcpp_s16_min\n #    define __glibcpp_wchar_t_max __glibcpp_s16_max\n #    define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n-#  elif __glibcpp_wchar_t_bits == 32\n+#  elif __WCHAR_BIT__ == 32\n #    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n #    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n #    define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n-#  elif __glibcpp_wchar_t_bits == 64\n+#  elif __WCHAR_BIT__ == 64\n #    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n #    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n #    define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n@@ -703,22 +679,22 @@\n // You must define these macros in the configuration file.\n #  endif\n #else\n-#  if __glibcpp_wchar_t_bits == 8\n+#  if __WCHAR_BIT__ == 8\n #    define __glibcpp_wchar_t_min __glibcpp_u8_min\n #    define __glibcpp_wchar_t_max __glibcpp_u8_max\n #    define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n-#  elif __glibcpp_wchar_t_bits == 16\n+#  elif __WCHAR_BIT__ == 16\n #    define __glibcpp_wchar_t_min __glibcpp_u16_min\n #    define __glibcpp_wchar_t_max __glibcpp_u16_max\n #    define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n-#  elif __glibcpp_wchar_t_bits == 32\n+#  elif __WCHAR_BIT__ == 32\n #    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n #    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n #    define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n #    define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n-#  elif __glibcpp_wchar_t_bits == 64\n+#  elif __WCHAR_BIT__ == 64\n #    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n #    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n #    define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n@@ -731,7 +707,7 @@\n // float\n //\n \n-#if __glibcpp_float_bits == 32\n+#if __FLOAT_BIT__ == 32\n #  define __glibcpp_float_min __glibcpp_f32_min\n #  define __glibcpp_float_max __glibcpp_f32_max\n #  define __glibcpp_float_digits __glibcpp_f32_digits\n@@ -752,7 +728,7 @@\n #  define __glibcpp_float_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_float_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n-#elif __glibcpp_float_bits == 64\n+#elif __FLOAT_BIT__ == 64\n #  define __glibcpp_float_min __glibcpp_f64_min\n #  define __glibcpp_float_max __glibcpp_f64_max\n #  define __glibcpp_float_digits __glibcpp_f64_digits\n@@ -773,7 +749,7 @@\n #  define __glibcpp_float_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_float_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n-#elif __glibcpp_float_bits == 80\n+#elif __FLOAT_BIT__ == 80\n #  define __glibcpp_float_min __glibcpp_f80_min\n #  define __glibcpp_float_max __glibcpp_f80_max\n #  define __glibcpp_float_digits __glibcpp_f80_digits\n@@ -850,7 +826,7 @@\n \n // double\n \n-#if __glibcpp_double_bits == 32\n+#if __DOUBLE_BIT__ == 32\n #  define __glibcpp_double_min __glibcpp_f32_min\n #  define __glibcpp_double_max __glibcpp_f32_max\n #  define __glibcpp_double_digits __glibcpp_f32_digits\n@@ -871,7 +847,7 @@\n #  define __glibcpp_double_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n-#elif __glibcpp_double_bits == 64\n+#elif __DOUBLE_BIT__ == 64\n #  define __glibcpp_double_min __glibcpp_f64_min\n #  define __glibcpp_double_max __glibcpp_f64_max\n #  define __glibcpp_double_digits __glibcpp_f64_digits\n@@ -892,7 +868,7 @@\n #  define __glibcpp_double_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n-#elif __glibcpp_double_bits == 80\n+#elif __DOUBLE_BIT__ == 80\n #  define __glibcpp_double_min __glibcpp_f80_min\n #  define __glibcpp_double_max __glibcpp_f80_max\n #  define __glibcpp_double_digits __glibcpp_f80_digits\n@@ -969,7 +945,7 @@\n \n // long double\n \n-#if __glibcpp_long_double_bits == 32\n+#if __LONG_DOUBLE_BIT__ == 32\n #  define __glibcpp_long_double_min __glibcpp_f32_min\n #  define __glibcpp_long_double_max __glibcpp_f32_max\n #  define __glibcpp_long_double_digits __glibcpp_f32_digits\n@@ -990,7 +966,7 @@\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n-#elif __glibcpp_long_double_bits == 64\n+#elif __LONG_DOUBLE_BIT__ == 64\n #  define __glibcpp_long_double_min __glibcpp_f64_min\n #  define __glibcpp_long_double_max __glibcpp_f64_max\n #  define __glibcpp_long_double_digits __glibcpp_f64_digits\n@@ -1011,7 +987,7 @@\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n-#elif __glibcpp_long_double_bits == 80\n+#elif __LONG_DOUBLE_BIT__ == 80\n #  define __glibcpp_long_double_min __glibcpp_f80_min\n #  define __glibcpp_long_double_max __glibcpp_f80_max\n #  define __glibcpp_long_double_digits __glibcpp_f80_digits\n@@ -1032,7 +1008,7 @@\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f80_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n-#elif __glibcpp_long_double_bits == 96\n+#elif __LONG_DOUBLE_BIT__ == 96\n #  define __glibcpp_long_double_min __glibcpp_f96_min\n #  define __glibcpp_long_double_max __glibcpp_f96_max\n #  define __glibcpp_long_double_digits __glibcpp_f96_digits\n@@ -1053,7 +1029,7 @@\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f96_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f96_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n-#elif __glibcpp_long_double_bits == 128\n+#elif __LONG_DOUBLE_BIT__ == 128\n #  define __glibcpp_long_double_min __glibcpp_f128_min\n #  define __glibcpp_long_double_max __glibcpp_f128_max\n #  define __glibcpp_long_double_digits __glibcpp_f128_digits\n@@ -1136,37 +1112,37 @@ namespace std\n   // knows about better than we do.) -- Gaby\n   typedef unsigned char __glibcpp_byte;\n #define __glibcpp_word_bits 32\n-#if __glibcpp_char_bits == __glibcpp_word_bits\n+#if __CHAR_BIT__ == __glibcpp_word_bits\n #  define __glibcpp_word unsigned char\n-#elif __glibcpp_short_bits == __glibcpp_word_bits\n+#elif __SHRT_BIT__ == __glibcpp_word_bits\n #  define __glibcpp_word unsigned short  \n-#elif __glibcpp_int_bits == __glibcpp_word_bits\n+#elif __INT_BIT__ == __glibcpp_word_bits\n #  define __glibcpp_word unsigned int\n-#elif __glibcpp_long_bits == __glibcpp_word_bits\n+#elif __LONG_BIT__ == __glibcpp_word_bits\n #  define __glibcpp_word unsigned long\n #endif  \n \n   // Define storage types for the single, double and extended floating\n   // point data types.  Maybe we could avoid the conditional #defines by\n   // using the aligned_storage<> extension.  -- Gaby\n   typedef const\n-#if __glibcpp_float_bits % __glibcpp_word_bits == 0\n+#if __FLOAT_BIT__ % __glibcpp_word_bits == 0\n     __glibcpp_word __float_storage[sizeof (float) / sizeof (__glibcpp_word)]\n #else\n     __glibcpp_byte __float_storage[sizeof (float)]\n #endif  \n     __attribute__((__aligned__(__alignof__(float))));\n \n   typedef const\n-#if __glibcpp_double_bits % __glibcpp_word_bits == 0\n+#if __DOUBLE_BIT__ % __glibcpp_word_bits == 0\n     __glibcpp_word __double_storage[sizeof (double) / sizeof (__glibcpp_word)]\n #else\n     __glibcpp_byte __double_storage[sizeof (double)]\n #endif  \n     __attribute__((__aligned__(__alignof__(double))));\n \n   typedef const\n-#if __glibcpp_long_double_bits % __glibcpp_word_bits == 0\n+#if __LONG_DOUBLE_BIT__ % __glibcpp_word_bits == 0\n     __glibcpp_word __long_double_storage[sizeof (long double) / sizeof (__glibcpp_word)]\n #else\n     __glibcpp_byte __long_double_storage[sizeof (long double)]"}]}