{"sha": "ed730bcf610706e6b4760009dbe3440c7826b763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3MzBiY2Y2MTA3MDZlNmI0NzYwMDA5ZGJlMzQ0MGM3ODI2Yjc2Mw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-01-19T22:32:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-19T22:32:39Z"}, "message": "Makefile.in (typeck.o): Depend on insn-codes.h.\n\n        * Makefile.in (typeck.o): Depend on insn-codes.h.\n        * actions.c (chill_handle_multi_case_label): Initialize \"expr\".\n        * decl.c (poplevel): Initialize \"block_previously_created\".\n        * expr.c (chill_expand_expr): Initialize \"size0\" and \"size1\".\n        (fold_set_expr): Initialize \"buffer1\".\n        * inout.c (process_io_list): Initialize \"to_assign\".\n        (check_exprlist): Initialize \"result\".\n        * parse.c (expand_expr): Declare.\n        (parse_multi_dimension_case_action): Initialize \"end_case_label\".\n        * tasking.c (build_start_process): Initialize \"struct_type_node\".\n        * typeck.c (apply_chill_field_layout): Initialize \"word\".\n        (type_for_mode); Unconditionally cast RHS & LHS to ints to shut up\n        signed/unsigned comparison warning.\nKill remaining chill warnings.\n\nFrom-SVN: r24775", "tree": {"sha": "bd8b09b788f5dd8750d47d91f6e4ecb2f15e73da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8b09b788f5dd8750d47d91f6e4ecb2f15e73da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed730bcf610706e6b4760009dbe3440c7826b763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed730bcf610706e6b4760009dbe3440c7826b763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed730bcf610706e6b4760009dbe3440c7826b763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed730bcf610706e6b4760009dbe3440c7826b763/comments", "author": null, "committer": null, "parents": [{"sha": "6fbe9bd84020ce363a00acea4ad0d85766b2fb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbe9bd84020ce363a00acea4ad0d85766b2fb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbe9bd84020ce363a00acea4ad0d85766b2fb97"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "b4f5771bc5ad785f792e556d74497ac1938e180c", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,3 +1,19 @@\n+Tue Jan 19 23:24:36 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* Makefile.in (typeck.o): Depend on insn-codes.h.\n+\t* actions.c (chill_handle_multi_case_label): Initialize \"expr\".\n+\t* decl.c (poplevel): Initialize \"block_previously_created\".\n+\t* expr.c (chill_expand_expr): Initialize \"size0\" and \"size1\".\n+\t(fold_set_expr): Initialize \"buffer1\".\n+\t* inout.c (process_io_list): Initialize \"to_assign\".\n+\t(check_exprlist): Initialize \"result\".\n+\t* parse.c (expand_expr): Declare.\n+\t(parse_multi_dimension_case_action): Initialize \"end_case_label\".\n+\t* tasking.c (build_start_process): Initialize \"struct_type_node\".\n+\t* typeck.c (apply_chill_field_layout): Initialize \"word\".\n+\t(type_for_mode); Unconditionally cast RHS & LHS to ints to shut up\t\n+\tsigned/unsigned comparison warning.\n+\n Mon Jan 18 11:55:06 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ch-tree.h: Remove conflicting prototypes for pedwarn,"}, {"sha": "0d9fd777bb6c6987068d860d9a805ff85b57f2ba", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -312,8 +312,8 @@ tasking.o : tasking.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) \\\n tree.o : tree.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../system.h \\\n \t$(srcdir)/../toplev.h\n typeck.o : typeck.c $(CONFIG_H) $(CHILL_TREE_H) ../insn-codes.h \\\n-\t$(srcdir)/../expr.h $(srcdir)/../flags.h lex.h $(srcdir)/../system.h \\\n-\t$(srcdir)/../toplev.h\n+\t$(srcdir)/../expr.h ../insn-codes.h $(srcdir)/../flags.h lex.h \\\n+\t$(srcdir)/../system.h $(srcdir)/../toplev.h\n ch-version.o : ch-version.c\n ch-version.c : Makefile\n \techo 'char *gnuchill_version = \"$(GNUCHILL_VERSION)\";' > $@"}, {"sha": "132dbd0b7e82e34c78c491bb56e048a7f7b1be75", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Implement actions for CHILL.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n    Authors: Per Bothner, Bill Cox, Michael Tiemann, Michael North\n \n This file is part of GNU CC.\n@@ -1227,7 +1227,7 @@ static tree\n chill_handle_multi_case_label (selector, label)\n   tree selector, label;\n {\n-  tree expr;\n+  tree expr = NULL_TREE;\n \n   if (label == NULL_TREE || TREE_CODE (label) == ERROR_MARK)\n     return NULL_TREE;"}, {"sha": "137b6057dd0bcf9a71fbbd04f7ad7123d8d8e3b9", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for GNU CHILL compiler.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc. \n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc. \n    \n    This file is part of GNU CC.\n    \n@@ -2940,7 +2940,7 @@ poplevel (keep, reverse, functionbody)\n   tree subblocks;\n   tree block = 0;\n   tree decl;\n-  int block_previously_created;\n+  int block_previously_created = 0;\n \n   if (current_scope == NULL)\n     return error_mark_node;"}, {"sha": "5e689a21c291c216c2011a1d35975338a337975f", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,6 +1,6 @@\n /* Convert language-specific tree expression to rtl instructions,\n    for GNU CHILL compiler.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -317,7 +317,7 @@ chill_expand_expr (exp, target, tmode, modifier)\n       {\n \ttree exp0 = TREE_OPERAND (exp, 0);\n \ttree exp1 = TREE_OPERAND (exp, 1);\n-\trtx size0, size1;\n+\trtx size0 = NULL_RTX, size1 = NULL_RTX;\n \trtx targetx;\n \n \tif (TREE_CODE (exp1) == UNDEFINED_EXPR)\n@@ -3030,7 +3030,7 @@ fold_set_expr (code, op0, op1)\n      tree op0, op1;\n {\n   tree temp;\n-  char *buffer0, *buffer1, *bufferr;\n+  char *buffer0, *buffer1 = NULL, *bufferr;\n   int i, size0, size1, first_unused_bit;\n \n   if (! TREE_CONSTANT (op0) || TREE_CODE (op0) != CONSTRUCTOR)"}, {"sha": "bac22b412508ef326ddb5e8c9ea2b670a2d351c9", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Implement I/O-related actions for CHILL.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n    \n    This file is part of GNU CC.\n    \n@@ -3314,7 +3314,7 @@ process_io_list (exprlist, iolist_addr, iolist_length, iolist_rtx, do_read,\n \t}\n       else if (TREE_CODE (item_type) == BOOLEAN_TYPE)\n \t{\n-\t  tree to_assign;\n+\t  tree to_assign = NULL_TREE;\n \n \t  if (do_read && readonly)\n \t    {\n@@ -3834,7 +3834,7 @@ check_exprlist (code, exprlist, argnum, repetition)\n      int argnum;\n      unsigned long repetition;\n {\n-  tree expr, type, result;\n+  tree expr, type, result = NULL_TREE;\n \n   while (repetition--)\n     {"}, {"sha": "96026a105bac0c7c20c191bac8c69637e68bc2b6", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Parser for GNU CHILL (CCITT High-Level Language)  -*- C -*-\n-   Copyright (C) 1992, 1993, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -74,6 +74,11 @@ extern struct rtx_def* gen_label_rtx\t      PROTO((void));\n extern void emit_jump                         PROTO((struct rtx_def *));\n extern struct rtx_def* emit_label             PROTO((struct rtx_def *));\n \n+/* This is a hell of a lot easier than getting expr.h included in\n+   by parse.c.  */\n+extern struct rtx_def *expand_expr  \tPROTO((tree, struct rtx_def *,\n+\t\t\t\t\t       enum machine_mode, int));\n+\n static int parse_action\t\t\t\tPROTO((void));\n \n extern int  lineno;\n@@ -1671,7 +1676,7 @@ static void\n parse_multi_dimension_case_action (selector)\n      tree selector;\n {\n-  struct rtx_def *begin_test_label = 0, *end_case_label, *new_label;\n+  struct rtx_def *begin_test_label = 0, *end_case_label = 0, *new_label;\n   tree action_labels = NULL_TREE;\n   tree tests = NULL_TREE;\n   int  save_lineno = lineno;"}, {"sha": "8c3fabeffbc98ad8f5884038371bb04cc2e5841a", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Implement tasking-related actions for CHILL.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -515,7 +515,7 @@ build_start_process (process_name, copynum,\n \t\t     exprlist, optset)\n      tree process_name, copynum, exprlist, optset;\n {\n-  tree process_decl, struct_type_node;\n+  tree process_decl = NULL_TREE, struct_type_node = NULL_TREE;\n   tree result;\n   tree valtail, typetail;\n   tree tuple = NULL_TREE, actuallist = NULL_TREE;"}, {"sha": "8985476a1e8e12efa2e91e90c487bb7137f3b589", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed730bcf610706e6b4760009dbe3440c7826b763/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=ed730bcf610706e6b4760009dbe3440c7826b763", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for CHILL compiler.\n-   Copyright (C) 1992, 93, 1994, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 1994, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -3050,7 +3050,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n      int* next_struct_offset;\n {\n   tree layout, type, temp, what;\n-  int word, wordsize, start_bit, offset, length, natural_length;\n+  int word = 0, wordsize, start_bit, offset, length, natural_length;\n   int pos_error = 0;\n   int is_discrete;\n \n@@ -3860,51 +3860,51 @@ type_for_mode (mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n-  if (mode == TYPE_MODE (integer_type_node))\n+  if ((int)mode == (int)TYPE_MODE (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n \n-  if (mode == TYPE_MODE (signed_char_type_node))\n+  if ((int)mode == (int)TYPE_MODE (signed_char_type_node))\n     return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n \n-  if (mode == TYPE_MODE (short_integer_type_node))\n+  if ((int)mode == (int)TYPE_MODE (short_integer_type_node))\n     return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n \n-  if (mode == TYPE_MODE (long_integer_type_node))\n+  if ((int)mode == (int)TYPE_MODE (long_integer_type_node))\n     return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n \n-  if (mode == TYPE_MODE (long_long_integer_type_node))\n+  if ((int)mode == (int)TYPE_MODE (long_long_integer_type_node))\n     return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n \n-  if (mode == TYPE_MODE (intQI_type_node))\n+  if ((int)mode == (int)TYPE_MODE (intQI_type_node))\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n-  if (mode == TYPE_MODE (intHI_type_node))\n+  if ((int)mode == (int)TYPE_MODE (intHI_type_node))\n     return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n \n-  if (mode == TYPE_MODE (intSI_type_node))\n+  if ((int)mode == (int)TYPE_MODE (intSI_type_node))\n     return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n \n-  if (mode == TYPE_MODE (intDI_type_node))\n+  if ((int)mode == (int)TYPE_MODE (intDI_type_node))\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n-  if (mode == TYPE_MODE (intTI_type_node))\n+  if ((int)mode == (int)TYPE_MODE (intTI_type_node))\n     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n #endif\n \n-  if (mode == TYPE_MODE (float_type_node))\n+  if ((int)mode == (int)TYPE_MODE (float_type_node))\n     return float_type_node;\n \n-  if (mode == TYPE_MODE (double_type_node))\n+  if ((int)mode == (int)TYPE_MODE (double_type_node))\n     return double_type_node;\n \n-  if (mode == TYPE_MODE (long_double_type_node))\n+  if ((int)mode == (int)TYPE_MODE (long_double_type_node))\n     return long_double_type_node;\n \n-  if (mode == TYPE_MODE (build_pointer_type (char_type_node)))\n+  if ((int)mode == (int)TYPE_MODE (build_pointer_type (char_type_node)))\n     return build_pointer_type (char_type_node);\n \n-  if (mode == TYPE_MODE (build_pointer_type (integer_type_node)))\n+  if ((int)mode == (int)TYPE_MODE (build_pointer_type (integer_type_node)))\n     return build_pointer_type (integer_type_node);\n \n   return 0;"}]}