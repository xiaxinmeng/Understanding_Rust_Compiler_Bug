{"sha": "0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxNmRmNmEzZTNhNjNjMjc1YjFiODhiNjI5OGJjZGQ5N2U5YjJkNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-04-06T09:24:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:24:18Z"}, "message": "gnat_rm.texi, [...]: Add -gnatyl documentation Update 'Exception Handling Control' chapter which was...\n\n2007-04-06  Robert Dewar  <dewar@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Add -gnatyl documentation\n\tUpdate 'Exception Handling Control' chapter which was outdated.\n\tMinor fix to documentation of -gnatwq\n\tRemove section \"Adapting the Run Time to a New C++ Compiler\" because\n\tit is now obsolete.\n\tAdd passage on need of -nostart-files in some non-ada-main cases.\n\tDocument new switch -eS (/STANDARD_OUTPUT_FOR_COMMANDS) for gnatmake\n\tUpdate documentation about Interfacing with C++\n\tAdd documentation for new gnatmake switch -p\n\tAdd missing protocol part in URLs.\n\tDocument -gnatyA\n\tDocument pragma Compile_Time_Error\n\tAdd documentation for Object_Size indicating that stand alone\n\tobjects can have a larger size in some cases.\n\tAdd node for GNAT.Byte_Swapping, GNAT.SHA1\n\tUpdate reference to the Ravenscar profile.\n\tDocument pragma Unreferenced_Objects\n\n\t* gnat-style.texi: Fix typo\n\nFrom-SVN: r123584", "tree": {"sha": "7a33019154533a3a90f97836a9dfc43537626273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a33019154533a3a90f97836a9dfc43537626273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/comments", "author": null, "committer": null, "parents": [{"sha": "ecf8118f79943fc2959e334dfdba109524e0f300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf8118f79943fc2959e334dfdba109524e0f300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf8118f79943fc2959e334dfdba109524e0f300"}], "stats": {"total": 650, "additions": 493, "deletions": 157}, "files": [{"sha": "b18ea30895f2af2bd8a83caf5bb17fc02716eead", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "patch": "@@ -243,7 +243,7 @@ capitalized when used as @syntax{attribute_designator}.\n \n @itemize @bullet\n @item\n-A comment starts with @code{--} followed by two spaces).\n+A comment starts with @code{--} followed by two spaces.\n The only exception to this rule (i.e.@: one space is tolerated) is when the\n comment ends with a single space followed by @code{--}.\n It is also acceptable to have only one space between @code{--} and the start"}, {"sha": "88a2a552ae2c37500e4dd804aea49ccce465c952", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 166, "deletions": 90, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "patch": "@@ -107,6 +107,7 @@ Implementation Defined Pragmas\n * Pragma C_Pass_By_Copy::\n * Pragma Comment::\n * Pragma Common_Object::\n+* Pragma Compile_Time_Error::\n * Pragma Compile_Time_Warning::\n * Pragma Complete_Representation::\n * Pragma Complex_Representation::\n@@ -187,6 +188,7 @@ Implementation Defined Pragmas\n * Pragma Unimplemented_Unit::\n * Pragma Universal_Data::\n * Pragma Unreferenced::\n+* Pragma Unreferenced_Objects::\n * Pragma Unreserve_All_Interrupts::\n * Pragma Unsuppress::\n * Pragma Use_VADS_Size::\n@@ -258,6 +260,7 @@ The Implementation of Standard I/O\n * Wide_Wide_Text_IO::\n * Stream_IO::\n * Shared Files::\n+* Filenames encoding::\n * Open Modes::\n * Operations on C Streams::\n * Interfacing to C Streams::\n@@ -294,6 +297,7 @@ The GNAT Library\n * GNAT.Bubble_Sort (g-bubsor.ads)::\n * GNAT.Bubble_Sort_A (g-busora.ads)::\n * GNAT.Bubble_Sort_G (g-busorg.ads)::\n+* GNAT.Byte_Swapping (g-bytswa.ads)::\n * GNAT.Calendar (g-calend.ads)::\n * GNAT.Calendar.Time_IO (g-catiio.ads)::\n * GNAT.Case_Util (g-casuti.ads)::\n@@ -332,6 +336,7 @@ The GNAT Library\n * GNAT.Regpat (g-regpat.ads)::\n * GNAT.Secondary_Stack_Info (g-sestin.ads)::\n * GNAT.Semaphores (g-semaph.ads)::\n+* GNAT.SHA1 (g-sha1.ads)::\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n@@ -650,6 +655,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma C_Pass_By_Copy::\n * Pragma Comment::\n * Pragma Common_Object::\n+* Pragma Compile_Time_Error::\n * Pragma Compile_Time_Warning::\n * Pragma Complete_Representation::\n * Pragma Complex_Representation::\n@@ -730,6 +736,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Unimplemented_Unit::\n * Pragma Universal_Data::\n * Pragma Unreferenced::\n+* Pragma Unreferenced_Objects::\n * Pragma Unreserve_All_Interrupts::\n * Pragma Unsuppress::\n * Pragma Use_VADS_Size::\n@@ -1035,6 +1042,33 @@ support is available, then the code generator will issue a message\n indicating that the necessary attribute for implementation of this\n pragma is not available.\n \n+@node Pragma Compile_Time_Error\n+@unnumberedsec Pragma Compile_Time_Error\n+@findex Compile_Time_Error\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Compile_Time_Error\n+         (boolean_EXPRESSION, static_string_EXPRESSION);\n+@end smallexample\n+\n+@noindent\n+This pragma can be used to generate additional compile time\n+error messages. It\n+is particularly useful in generics, where errrs can be issued for\n+specific problematic instantiations. The first parameter is a boolean\n+expression. The pragma is effective only if the value of this expression\n+is known at compile time, and has the value True. The set of expressions\n+whose values are known at compile time includes all static boolean\n+expressions, and also other values which the compiler can determine\n+at compile time (e.g. the size of a record type set by an explicit\n+size representation clause, or the value of a variable which was\n+initialized to a constant and is known not to have been modified).\n+If these conditions are met, an error message is generated using\n+the value given as the second argument. This string value may contain\n+embedded ASCII.LF characters to break the message into multiple lines.\n+\n @node Pragma Compile_Time_Warning\n @unnumberedsec Pragma Compile_Time_Warning\n @findex Compile_Time_Warning\n@@ -1227,25 +1261,24 @@ pragma CPP_Class ([Entity =>] local_NAME);\n @end smallexample\n \n @noindent\n-The argument denotes an entity in the current declarative region\n-that is declared as a tagged or untagged record type.  It indicates that\n-the type corresponds to an externally declared C++ class type, and is to\n-be laid out the same way that C++ would lay out the type.\n-\n-If (and only if) the type is tagged, at least one component in the\n-record must be of type @code{Interfaces.CPP.Vtable_Ptr}, corresponding\n-to the C++ Vtable (or Vtables in the case of multiple inheritance) used\n-for dispatching.\n+The argument denotes an entity in the current declarative region that is\n+declared as a tagged record type. It indicates that the type corresponds\n+to an externally declared C++ class type, and is to be laid out the same\n+way that C++ would lay out the type.\n \n Types for which @code{CPP_Class} is specified do not have assignment or\n equality operators defined (such operations can be imported or declared\n-as subprograms as required).  Initialization is allowed only by\n-constructor functions (see pragma @code{CPP_Constructor}).\n+as subprograms as required). Initialization is allowed only by constructor\n+functions (see pragma @code{CPP_Constructor}).\n \n Pragma @code{CPP_Class} is intended primarily for automatic generation\n using an automatic binding generator tool.\n See @ref{Interfacing to C++} for related information.\n \n+Note: Pragma @code{CPP_Class} is currently obsolete. It is supported\n+for backward compatibility but its functionality is available\n+using pragma @code{Import} with @code{Convention} = @code{CPP}.\n+\n @node Pragma CPP_Constructor\n @unnumberedsec Pragma CPP_Constructor\n @cindex Interfacing with C++\n@@ -1254,16 +1287,18 @@ See @ref{Interfacing to C++} for related information.\n Syntax:\n \n @smallexample @c ada\n-pragma CPP_Constructor ([Entity =>] local_NAME);\n+pragma CPP_Constructor ([Entity =>] local_NAME\n+  [, [External_Name =>] static_string_EXPRESSION ]\n+  [, [Link_Name     =>] static_string_EXPRESSION ]);\n @end smallexample\n \n @noindent\n This pragma identifies an imported function (imported in the usual way\n-with pragma @code{Import}) as corresponding to a C++\n-constructor.  The argument is a name that must have been\n-previously mentioned in a pragma @code{Import}\n-with @code{Convention} = @code{CPP}, and must be of one of the following\n-forms:\n+with pragma @code{Import}) as corresponding to a C++ constructor. If\n+@code{External_Name} and @code{Link_Name} are not specified then the\n+@code{Entity} argument is a name that must have been previously mentioned\n+in a pragma @code{Import} with @code{Convention} = @code{CPP}. Such name\n+must be of one of the following forms:\n \n @itemize @bullet\n @item\n@@ -1325,69 +1360,19 @@ See @ref{Interfacing to C++} for more related information.\n @cindex Interfacing to C++\n @findex CPP_Virtual\n @noindent\n-Syntax:\n+This pragma is now obsolete has has no effect because GNAT generates\n+the same object layout than the G++ compiler.\n \n-@smallexample @c ada\n-pragma CPP_Virtual\n-     [Entity     =>] ENTITY,\n-  [, [Vtable_Ptr =>] vtable_ENTITY,]\n-  [, [Position   =>] static_integer_EXPRESSION]);\n-@end smallexample\n-\n-@noindent\n-This pragma serves the same function as pragma @code{Import} in that\n-case of a virtual function imported from C++.  The @var{Entity} argument\n-must be a\n-primitive subprogram of a tagged type to which pragma @code{CPP_Class}\n-applies.  The @var{Vtable_Ptr} argument specifies\n-the Vtable_Ptr component which contains the\n-entry for this virtual function.  The @var{Position} argument\n-is the sequential number\n-counting virtual functions for this Vtable starting at 1.\n-\n-The @code{Vtable_Ptr} and @code{Position} arguments may be omitted if\n-there is one Vtable_Ptr present (single inheritance case) and all\n-virtual functions are imported.  In that case the compiler can deduce both\n-these values.\n-\n-No @code{External_Name} or @code{Link_Name} arguments are required for a\n-virtual function, since it is always accessed indirectly via the\n-appropriate Vtable entry.\n-\n-Pragma @code{CPP_Virtual} is intended primarily for automatic generation\n-using an automatic binding generator tool.\n See @ref{Interfacing to C++} for related information.\n \n @node Pragma CPP_Vtable\n @unnumberedsec Pragma CPP_Vtable\n @cindex Interfacing with C++\n @findex CPP_Vtable\n @noindent\n-Syntax:\n+This pragma is now obsolete has has no effect because GNAT generates\n+the same object layout than the G++ compiler.\n \n-@smallexample @c ada\n-pragma CPP_Vtable (\n-  [Entity      =>] ENTITY,\n-  [Vtable_Ptr  =>] vtable_ENTITY,\n-  [Entry_Count =>] static_integer_EXPRESSION);\n-@end smallexample\n-\n-@noindent\n-Given a record to which the pragma @code{CPP_Class} applies,\n-this pragma can be specified for each component of type\n-@code{CPP.Interfaces.Vtable_Ptr}.\n-@var{Entity} is the tagged type, @var{Vtable_Ptr}\n-is the record field of type @code{Vtable_Ptr}, and @var{Entry_Count} is\n-the number of virtual functions on the C++ side.  Not all of these\n-functions need to be imported on the Ada side.\n-\n-You may omit the @code{CPP_Vtable} pragma if there is only one\n-@code{Vtable_Ptr} component in the record and all virtual functions are\n-imported on the Ada side (the default value for the entry count in this\n-case is simply the total number of virtual functions).\n-\n-Pragma @code{CPP_Vtable} is intended primarily for automatic generation\n-using an automatic binding generator tool.\n See @ref{Interfacing to C++} for related information.\n \n @node Pragma Debug\n@@ -3350,7 +3335,7 @@ This set of configuration pragmas and restrictions correspond to the\n definition of the ``Ravenscar Profile'' for limited tasking, devised and\n published by the @cite{International Real-Time Ada Workshop}, 1997,\n and whose most recent description is available at\n-@url{ftp://ftp.openravenscar.org/openravenscar/ravenscar00.pdf}.\n+@url{http://www-users.cs.york.ac.uk/~burns/ravenscar.ps}.\n \n The original definition of the profile was revised at subsequent IRTAW\n meetings. It has been included in the ISO\n@@ -4041,7 +4026,7 @@ equivalent to a C union. It was introduced as a GNAT implementation defined\n pragma in the GNAT Ada 95 mode. Ada 2005 includes an extended version of this\n pragma, making it language defined, and GNAT fully implements this extended\n version in all language modes (Ada 83, Ada 95, and Ada 2005). For full\n-details, consult the Ada 2005 RM, section 8.3.3.\n+details, consult the Ada 2005 RM, section B.3.3.\n \n @node Pragma Unimplemented_Unit\n @unnumberedsec Pragma Unimplemented_Unit\n@@ -4137,6 +4122,29 @@ mentioned in @code{with} clauses (similar to the usage of pragma\n @code{Elaborate_All}. The effect is to suppress warnings about unreferenced\n units.\n \n+@node Pragma Unreferenced_Objects\n+@unnumberedsec Pragma Unreferenced_Objects\n+@findex Unreferenced_Objects\n+@cindex Warnings, unreferenced\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Unreferenced_Objects (local_subtype_NAME @{, local_subtype_NAME@});\n+@end smallexample\n+\n+@noindent\n+This pragma signals that for the types or subtypes whose names are\n+listed, objects which are declared with one of these types or subtypes may\n+not be referenced, and if no references appear, no warnings are given.\n+\n+This is particularly useful for objects which are declared solely for their\n+initialization and finalization effect. Such variables are sometimes referred\n+to as RAII variables (Resource Acquisition Is Initialization). Using this\n+pragma on the relevant type (most typically a limited controlled type), the\n+compiler will automatically suppress unwanted warnings about these variables\n+not being referenced.\n+\n @node Pragma Unreserve_All_Interrupts\n @unnumberedsec Pragma Unreserve_All_Interrupts\n @findex Unreserve_All_Interrupts\n@@ -4358,9 +4366,13 @@ o   turn on warnings for address clause overlay\n O   turn off warnings for address clause overlay\n p   turn on warnings for ineffective pragma Inline\n P   turn off warnings for ineffective pragma Inline\n+q   turn on warnings for questionable missing parentheses\n+Q   turn off warnings for questionable missing parentheses\n r   turn on warnings for redundant construct\n R   turn off warnings for redundant construct\n s   suppress all warnings\n+t   turn on warnings for tracking deleted code\n+T   turn off warnings for tracking deleted code\n u   turn on warnings for unused entity\n U   turn off warnings for unused entity\n v   turn on warnings for unassigned variable\n@@ -5072,6 +5084,14 @@ by default be 32 bits (four bytes).  But objects of type\n @code{R2} will be only\n 8 bits (one byte), since @code{R2'Object_Size} has been set to 8.\n \n+Although @code{Object_Size} does properly reflect the default object size\n+value, it is not necessarily the case that all objects will be of this size\n+in a case where it is not specified explicitly. The compiler is free to\n+increase the size and alignment of stand alone objects to improve efficiency\n+of the generated code and sometimes does so in the case of large composite\n+objects. If the size of a stand alone object is critical to the\n+application, it should be specified explicitly.\n+\n @node Passed_By_Reference\n @unnumberedsec Passed_By_Reference\n @cindex Parameters, when passed by reference\n@@ -5401,10 +5421,6 @@ Affects semantics\n Affects semantics\n @item CPP_Constructor\n Affects semantics\n-@item CPP_Virtual\n-Affects semantics\n-@item CPP_Vtable\n-Affects semantics\n @item Debug\n Affects semantics\n @item Interface_Name\n@@ -6216,7 +6232,7 @@ convention.  Any declarations useful for interfacing to any language on\n the given hardware architecture should be provided directly in\n @code{Interfaces}.\n @end cartouche\n-Followed.  An additional package not defined\n+Followed. An additional package not defined\n in the Ada 95 Reference Manual is @code{Interfaces.CPP}, used\n for interfacing to C++.\n \n@@ -7970,7 +7986,7 @@ Allowed only for record types, like C, but also notes that record\n is to be passed by copy rather than reference.\n @item COBOL\n COBOL\n-@item CPP\n+@item C_Plus_Plus (or CPP)\n C++\n @item Default\n Treated the same as C\n@@ -8148,9 +8164,27 @@ Pos values.\n attribute.  See C.7.1(7).\n @end cartouche\n @noindent\n-The result of this attribute is an 8-digit hexadecimal string\n-representing the virtual address of the task control block.\n-\n+The result of this attribute is a string that identifies\n+the object or component that denotes a given task. If a variable Var has a task\n+type, the image for this task will have the form Var_XXXXXXXX, where the sufffix\n+is the hexadecimal representation of the virtual address of the corresponding\n+task control block. If the variable is an array of tasks, the image of each\n+task will have the form of an indexed component indicating the position of a\n+given task in the array, eg.  Group(5)_XXXXXXX. If the task is a\n+component of a record, the image of the task will have the form of a selected\n+component. These rules are fully recursive, so that the image of a task that\n+is a subcomponent of a composite object corresponds to the expression that\n+designates this task.\n+@noindent\n+If a task is created by an allocator, its image depends on the context. If the\n+allocator is part of an object declaration, the rules described above  are used\n+to construct its image, and this image is not affected by subsequent assignments. If the allocator appears within an expression, the image\n+includes only the name of the task type.\n+@noindent\n+If the configuration pragma Discard_Names is present, or if the restriction\n+No_Implicit_Heap_Allocation is in effect,  the image reduces to\n+the numeric suffix, that is to say the hexadecimal representation of the\n+virtual address of the control block of the task.\n @sp 1\n @cartouche\n @noindent\n@@ -11221,6 +11255,7 @@ these additional facilities are also described in this chapter.\n * Wide_Wide_Text_IO::\n * Stream_IO::\n * Shared Files::\n+* Filenames encoding::\n * Open Modes::\n * Operations on C Streams::\n * Interfacing to C Streams::\n@@ -11299,7 +11334,7 @@ there are two keywords defined.\n \n @smallexample\n SHARED=[YES|NO]\n-WCEM=[n|h|u|s\\e]\n+WCEM=[n|h|u|s|e|8|b]\n @end smallexample\n \n @noindent\n@@ -12060,6 +12095,28 @@ heterogeneous input-output.  Although this approach will work in GNAT if\n @samp{shared=yes} is specified, it is preferable in Ada 95 to use Stream_IO\n for this purpose (using the stream attributes)\n \n+@node Filenames encoding\n+@section Filenames encoding\n+\n+@noindent\n+An encoding form parameter can be used to specify the filename\n+encoding @samp{encoding=@var{xxx}}.\n+\n+@itemize @bullet\n+@item\n+If the form parameter @samp{encoding=utf8} appears in the form string, the\n+filename must be encoded in UTF-8.\n+\n+@item\n+If the form parameter @samp{encoding=8bits} appears in the form\n+string, the filename must be a standard 8bits string.\n+@end itemize\n+\n+In the absence of a @samp{encoding=@var{xxx}} form parameter, the\n+value UTF-8 is used. This encoding form parameter is only supported on\n+the Windows platform. On the other Operating Systems the runtime is\n+supporting UTF-8 natively.\n+\n @node Open Modes\n @section Open Modes\n \n@@ -12405,6 +12462,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Bubble_Sort (g-bubsor.ads)::\n * GNAT.Bubble_Sort_A (g-busora.ads)::\n * GNAT.Bubble_Sort_G (g-busorg.ads)::\n+* GNAT.Byte_Swapping (g-bytswa.ads)::\n * GNAT.Calendar (g-calend.ads)::\n * GNAT.Calendar.Time_IO (g-catiio.ads)::\n * GNAT.CRC32 (g-crc32.ads)::\n@@ -12443,6 +12501,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Regpat (g-regpat.ads)::\n * GNAT.Secondary_Stack_Info (g-sestin.ads)::\n * GNAT.Semaphores (g-semaph.ads)::\n+* GNAT.SHA1 (g-sha1.ads)::\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n@@ -12821,6 +12880,16 @@ are provided as generic parameters, this improves efficiency, especially\n if the procedures can be inlined, at the expense of duplicating code for\n multiple instantiations.\n \n+@node GNAT.Byte_Swapping (g-bytswa.ads)\n+@section @code{GNAT.Byte_Swapping} (@file{g-bytswa.ads})\n+@cindex @code{GNAT.Byte_Swapping} (@file{g-bytswa.ads})\n+@cindex Byte swapping\n+@cindex Endian\n+\n+@noindent\n+General routines for swapping the bytes in 2-, 4-, and 8-byte quantities.\n+Machine-specific implementations are available in some cases.\n+\n @node GNAT.Calendar (g-calend.ads)\n @section @code{GNAT.Calendar} (@file{g-calend.ads})\n @cindex @code{GNAT.Calendar} (@file{g-calend.ads})\n@@ -13247,6 +13316,14 @@ secondary stack.\n @noindent\n Provides classic counting and binary semaphores using protected types.\n \n+@node GNAT.SHA1 (g-sha1.ads)\n+@section @code{GNAT.SHA1} (@file{g-sha1.ads})\n+@cindex @code{GNAT.SHA1} (@file{g-sha1.ads})\n+@cindex Secure Hash Algorithm SHA-1\n+\n+@noindent\n+Implements the SHA-1 Secure Hash Algorithm as described in RFC 3174.\n+\n @node GNAT.Signals (g-signal.ads)\n @section @code{GNAT.Signals} (@file{g-signal.ads})\n @cindex @code{GNAT.Signals} (@file{g-signal.ads})\n@@ -13769,24 +13846,23 @@ tool, although it is possible to construct them by hand.  No suitable binding\n generator tool is supplied with GNAT though.\n \n Using these pragmas it is possible to achieve complete\n-inter-operability between Ada tagged types and C class definitions.\n+inter-operability between Ada tagged types and C++ class definitions.\n See @ref{Implementation Defined Pragmas}, for more details.\n \n @table @code\n @item pragma CPP_Class ([Entity =>] @var{local_NAME})\n The argument denotes an entity in the current declarative region that is\n-declared as a tagged or untagged record type.  It indicates that the type\n+declared as a tagged or untagged record type. It indicates that the type\n corresponds to an externally declared C++ class type, and is to be laid\n out the same way that C++ would lay out the type.\n \n+Note: Pragma @code{CPP_Class} is currently obsolete. It is supported\n+for backward compatibility but its functionality is available\n+using pragma @code{Import} with @code{Convention} = @code{CPP}.\n+\n @item pragma CPP_Constructor ([Entity =>] @var{local_NAME})\n This pragma identifies an imported function (imported in the usual way\n with pragma @code{Import}) as corresponding to a C++ constructor.\n-\n-@item pragma CPP_Vtable @dots{}\n-One @code{CPP_Vtable} pragma can be present for each component of type\n-@code{CPP.Interfaces.Vtable_Ptr} in a record to which pragma @code{CPP_Class}\n-applies.\n @end table\n \n @node Interfacing to COBOL"}, {"sha": "07fc22bb7e507062595a71d80d7fd54ae4155ac2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 326, "deletions": 66, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0916df6a3e3a63c275b1b88b6298bcdd97e9b2d4", "patch": "@@ -2920,6 +2920,12 @@ gnatlink unit2.ali main.o -o exec_file\n This procedure yields a binary executable called @file{exec_file}.\n @end enumerate\n \n+@noindent\n+Depending on the circumstances (for example when your non-Ada main object\n+does not provide symbol @code{main}), you may also need to instruct the\n+GNAT linker not to include the standard startup objects by passing the\n+@option{^-nostartfiles^/NOSTART_FILES^} switch to @command{gnatlink}.\n+\n @node Calling Conventions\n @subsection Calling Conventions\n @cindex Foreign Languages\n@@ -3028,7 +3034,7 @@ Equivalent to C.\n @findex C++\n @cindex Interfacing to C++\n @cindex Convention C++\n-@item CPP\n+@item C_Plus_Plus (or CPP)\n This stands for C++. For most purposes this is identical to C.\n See the separate description of the specialized GNAT pragmas relating to\n C++ interfacing for further details.\n@@ -3147,24 +3153,24 @@ with a new C++ compiler.\n * Interfacing to C++::\n * Linking a Mixed C++ & Ada Program::\n * A Simple Example::\n-* Adapting the Run Time to a New C++ Compiler::\n+* Interfacing with C++ at the Class Level::\n @end menu\n \n @node Interfacing to C++\n @subsection Interfacing to C++\n \n @noindent\n-GNAT supports interfacing with C++ compilers generating code that is\n-compatible with the standard Application Binary Interface of the given\n-platform.\n+GNAT supports interfacing with the G++ compiler (or any C++ compiler\n+generating code that is compatible with the G++ Application Binary\n+Interface ---see http://www.codesourcery.com/archives/cxx-abi).\n \n @noindent\n Interfacing can be done at 3 levels: simple data, subprograms, and\n classes. In the first two cases, GNAT offers a specific @var{Convention\n-CPP} that behaves exactly like @var{Convention C}. Usually, C++ mangles\n-the names of subprograms, and currently, GNAT does not provide any help\n-to solve the demangling problem. This problem can be addressed in two\n-ways:\n+C_Plus_Plus} (or @var{CPP}) that behaves exactly like @var{Convention C}.\n+Usually, C++ mangles the names of subprograms, and currently, GNAT does\n+not provide any help to solve the demangling problem. This problem can be\n+addressed in two ways:\n @itemize @bullet\n @item\n by modifying the C++ code in order to force a C convention using\n@@ -3177,8 +3183,8 @@ the pragma import.\n \n @noindent\n Interfacing at the class level can be achieved by using the GNAT specific\n-pragmas such as @code{CPP_Class} and @code{CPP_Virtual}. See the GNAT\n-Reference Manual for additional information.\n+pragmas such as @code{CPP_Constructor}. See the GNAT Reference Manual for\n+additional information.\n \n @node Linking a Mixed C++ & Ada Program\n @subsection Linking a Mixed C++ & Ada Program\n@@ -3377,9 +3383,11 @@ A::A(void)\n \n @b{end} Simple_Cpp_Interface;\n \n+@b{with} System;\n @b{package} Simple_Cpp_Interface @b{is}\n    @b{type} A @b{is} @b{limited}\n       @b{record}\n+         Vptr    : System.Address;\n          O_Value : Integer;\n          A_Value : Integer;\n       @b{end} @b{record};\n@@ -3394,22 +3402,240 @@ A::A(void)\n @b{end} Simple_Cpp_Interface;\n @end smallexample\n \n-@node Adapting the Run Time to a New C++ Compiler\n-@subsection Adapting the Run Time to a New C++ Compiler\n+@node Interfacing with C++ at the Class Level\n+@subsection Interfacing with C++ at the Class Level\n @noindent\n-GNAT offers the capability to derive Ada 95 tagged types directly from\n-preexisting C++ classes and . See ``Interfacing with C++'' in the\n-@cite{GNAT Reference Manual}. The mechanism used by GNAT for achieving\n-such a goal\n-has been made user configurable through a GNAT library unit\n-@code{Interfaces.CPP}. The default version of this file is adapted to\n-the GNU C++ compiler. Internal knowledge of the virtual\n-table layout used by the new C++ compiler is needed to configure\n-properly this unit. The Interface of this unit is known by the compiler\n-and cannot be changed except for the value of the constants defining the\n-characteristics of the virtual table: CPP_DT_Prologue_Size, CPP_DT_Entry_Size,\n-CPP_TSD_Prologue_Size, CPP_TSD_Entry_Size. Read comments in the source\n-of this unit for more details.\n+In this section we demonstrate the GNAT features for interfacing with\n+C++ by means of an example making use of Ada 2005 abstract interface\n+types. This example consists of a classification of animals; classes\n+have been used to model our main classification of animals, and\n+interfaces provide support for the management of secondary\n+classifications. We first demonstrate a case in which the types and\n+constructors are defined on the C++ side and imported from the Ada\n+side, and latter the reverse case.\n+\n+The root of our derivation will be the @code{Animal} class, with a\n+single private attribute (the @code{Age} of the animal) and two public\n+primitives to set and get the value of this attribute.\n+\n+@smallexample\n+@b{class} Animal @{\n+ @b{public}:\n+   @b{virtual} void Set_Age (int New_Age);\n+   @b{virtual} int Age ();\n+ @b{private}:\n+   int Age_Count;\n+@};\n+@end smallexample\n+\n+Abstract interface types are defined in C++ by means of classes with pure\n+virtual functions and no data members. In our example we will use two\n+interfaces that provide support for the common management of @code{Carnivore}\n+and @code{Domestic} animals:\n+\n+@smallexample\n+@b{class} Carnivore @{\n+@b{public}:\n+   @b{virtual} int Number_Of_Teeth () = 0;\n+@};\n+\n+@b{class} Domestic @{\n+@b{public}:\n+   @b{virtual void} Set_Owner (char* Name) = 0;\n+@};\n+@end smallexample\n+\n+Using these declarations, we can now say that a @code{Dog} is an animal that is\n+both Carnivore and Domestic, that is:\n+\n+@smallexample\n+@b{class} Dog : Animal, Carnivore, Domestic @{\n+ @b{public}:\n+   @b{virtual} int  Number_Of_Teeth ();\n+   @b{virtual} void Set_Owner (char* Name);\n+\n+   Dog(); // Constructor\n+ @b{private}:\n+   int  Tooth_Count;\n+   char *Owner;\n+@};\n+@end smallexample\n+\n+In the following examples we will assume that the previous declarations are\n+located in a file named @code{animals.h}. The following package demonstrates\n+how to import these C++ declarations from the Ada side:\n+\n+@smallexample\n+@b{with} Interfaces.C.Strings; @b{use} Interfaces.C.Strings;\n+@b{package} Animals @b{is}\n+  @b{type} Carnivore @b{is interface};\n+  @b{pragma} Convention (C_Plus_Plus, Carnivore);\n+  @b{function} Number_Of_Teeth (X : Carnivore)\n+     @b{return} Natural @b{is abstract};\n+\n+  @b{type} Domestic @b{is interface};\n+  @b{pragma} Convention (C_Plus_Plus, Set_Owner);\n+  @b{procedure} Set_Owner\n+    (X    : @b{in out} Domestic;\n+     Name : Chars_Ptr) @b{is abstract};\n+\n+  @b{type} Animal @b{is tagged record}\n+    Age : Natural := 0;\n+  @b{end record};\n+  @b{pragma} Import (C_Plus_Plus, Animal);\n+\n+  @b{procedure} Set_Age (X : @b{in out} Animal; Age : Integer);\n+  @b{pragma} Import (C_Plus_Plus, Set_Age);\n+\n+  @b{function} Age (X : Animal) @b{return} Integer;\n+  @b{pragma} Import (C_Plus_Plus, Age);\n+\n+  @b{type} Dog @b{is new} Animal @b{and} Carnivore @b{and} Domestic @b{with record}\n+    Tooth_Count : Natural;\n+    Owner       : String (1 .. 30);\n+  @b{end record};\n+  @b{pragma} Import (C_Plus_Plus, Dog);\n+\n+  @b{function} Number_Of_Teeth (A : Dog) @b{return} Integer;\n+  @b{pragma} Import (C_Plus_Plus, Number_Of_Teeth);\n+\n+  @b{procedure} Set_Owner (A : @b{in out} Dog; Name : Chars_Ptr);\n+  @b{pragma} Import (C_Plus_Plus, Set_Owner);\n+\n+  @b{function} New_Dog @b{return} Dog'Class;\n+  @b{pragma} CPP_Constructor (New_Dog);\n+  @b{pragma} Import (CPP, New_Dog, \"_ZN3DogC2Ev\");\n+@b{end} Animals;\n+@end smallexample\n+\n+Thanks to the compatibility between GNAT run-time structures and the C++ ABI,\n+interfacing with these C++ classes is easy. The only requirement is that all\n+the primitives and components must be declared exactly in the same order in\n+the two languages.\n+\n+Regarding the abstract interfaces, we must indicate to the GNAT compiler by\n+means of a @code{pragma Convention (C_Plus_Plus)}, the convention used to pass\n+the arguments to the called primitives will be the same as for C++. For the\n+imported classes we use @code{pragma Import} with convention @code{C_Plus_Plus}\n+to indicate that they have been defined on the C++ side; this is required\n+because the dispatch table associated with these tagged types will be built\n+in the C++ side and therefore will not contain the predefined Ada primitives\n+which Ada would otherwise expect.\n+\n+As the reader can see there is no need to indicate the C++ mangled names\n+associated with each subprogram because it is assumed that all the calls to\n+these primitives will be dispatching calls. The only exception is the\n+constructor, which must be registered with the compiler by means of\n+@code{pragma CPP_Constructor} and needs to provide its associated C++\n+mangled name because the Ada compiler generates direct calls to it.\n+\n+With the above packages we can now declare objects of type Dog on the Ada side\n+and dispatch calls to the corresponding subprograms on the C++ side. We can\n+also extend the tagged type Dog with further fields and primitives, and\n+override some of its C++ primitives on the Ada side. For example, here we have\n+a type derivation defined on the Ada side that inherits all the dispatching\n+primitives of the ancestor from the C++ side.\n+\n+@smallexample\n+@b{with} Animals; @b{use} Animals;\n+@b{package} Vaccinated_Animals @b{is}\n+  @b{type} Vaccinated_Dog @b{is new} Dog @b{with null record};\n+  @b{function} Vaccination_Expired (A : Vaccinated_Dog) @b{return} Boolean;\n+@b{end} Vaccinated_Animals;\n+@end smallexample\n+\n+It is important to note that, because of the ABI compatibility, the programmer\n+does not need to add any further information to indicate either the object\n+layout or the dispatch table entry associated with each dispatching operation.\n+\n+Now let us define all the types and constructors on the Ada side and export\n+them to C++, using the same hierarchy of our previous example:\n+\n+@smallexample\n+@b{with} Interfaces.C.Strings;\n+@b{use} Interfaces.C.Strings;\n+@b{package} Animals @b{is}\n+  @b{type} Carnivore @b{is interface};\n+  @b{pragma} Convention (C_Plus_Plus, Carnivore);\n+  @b{function} Number_Of_Teeth (X : Carnivore)\n+     @b{return} Natural @b{is abstract};\n+\n+  @b{type} Domestic @b{is interface};\n+  @b{pragma} Convention (C_Plus_Plus, Set_Owner);\n+  @b{procedure} Set_Owner\n+    (X    : @b{in out} Domestic;\n+     Name : Chars_Ptr) @b{is abstract};\n+\n+  @b{type} Animal @b{is tagged record}\n+    Age : Natural := 0;\n+  @b{end record};\n+  @b{pragma} Convention (C_Plus_Plus, Animal);\n+\n+  @b{procedure} Set_Age (X : @b{in out} Animal; Age : Integer);\n+  @b{pragma} Export (C_Plus_Plus, Set_Age);\n+\n+  @b{function} Age (X : Animal) @b{return} Integer;\n+  @b{pragma} Export (C_Plus_Plus, Age);\n+\n+  @b{type} Dog @b{is new} Animal @b{and} Carnivore @b{and} Domestic @b{with record}\n+    Tooth_Count : Natural;\n+    Owner       : String (1 .. 30);\n+  @b{end record};\n+  @b{pragma} Convention (C_Plus_Plus, Dog);\n+\n+  @b{function} Number_Of_Teeth (A : Dog) @b{return} Integer;\n+  @b{pragma} Export (C_Plus_Plus, Number_Of_Teeth);\n+\n+  @b{procedure} Set_Owner (A : @b{in out} Dog; Name : Chars_Ptr);\n+  @b{pragma} Export (C_Plus_Plus, Set_Owner);\n+\n+  @b{function} New_Dog @b{return} Dog'Class;\n+  @b{pragma} Export (C_Plus_Plus, New_Dog);\n+@b{end} Animals;\n+@end smallexample\n+\n+Compared with our previous example the only difference is the use of\n+@code{pragma Export} to indicate to the GNAT compiler that the primitives will\n+be available to C++. Thanks to the ABI compatibility, on the C++ side there is\n+nothing else to be done; as explained above, the only requirement is that all\n+the primitives and components are declared in exactly the same order.\n+\n+For completeness, let us see a brief C++ main program that uses the\n+declarations available in @code{animals.h} (presented in our first example) to\n+import and use the declarations from the Ada side, properly initializing and\n+finalizing the Ada run-time system along the way:\n+\n+@smallexample\n+@b{#include} \"animals.h\"\n+@b{#include} <iostream>\n+@b{using namespace} std;\n+\n+void Check_Carnivore (Carnivore *obj) @{ ... @}\n+void Check_Domestic (Domestic *obj)   @{ ... @}\n+void Check_Animal (Animal *obj)       @{ ... @}\n+void Check_Dog (Dog *obj)             @{ ... @}\n+\n+@b{extern} \"C\" @{\n+  void adainit (void);\n+  void adafinal (void);\n+  Dog* new_dog ();\n+@}\n+\n+void test ()\n+@{\n+  Dog *obj = new_dog();  // Ada constructor\n+  Check_Carnivore (obj); // Check secondary DT\n+  Check_Domestic (obj);  // Check secondary DT\n+  Check_Animal (obj);    // Check primary DT\n+  Check_Dog (obj);       // Check primary DT\n+@}\n+\n+int main ()\n+@{\n+  adainit ();  test();  adafinal ();\n+  return 0;\n+@}\n+@end smallexample\n \n @node Comparison between GNAT and C/C++ Compilation Models\n @section Comparison between GNAT and C/C++ Compilation Models\n@@ -3872,9 +4098,10 @@ Externals names are folded to all uppercase.\n Internal GNAT implementation mode. This should not be used for\n applications programs, it is intended only for use by the compiler\n and its run-time library. For documentation, see the GNAT sources.\n-Note that @option{-gnatg} implies @option{-gnatwu} so that warnings\n-are generated on unreferenced entities, and all warnings are treated\n-as errors.\n+Note that @option{-gnatg} implies @option{-gnatwae} so that all\n+standard warnings are turned on, and @option{-gnaty} so that all\n+standard style options are turned on. All warnings and style error\n+messages are treated as errors.\n \n @item -gnatG\n @cindex @option{-gnatG} (@command{gcc})\n@@ -4972,12 +5199,12 @@ request silently.\n @cindex Parentheses, warnings\n This switch activates warnings for cases where parentheses are not used and\n the result is potential ambiguity from a readers point of view. For example\n-(not a > b) when a and b are modular means (not (a) > b) and very likely the\n+(not a > b) when a and b are modular means ((not a) > b) and very likely the\n programmer intended (not (a > b)). Similarly (-x mod 5) means (-(x mod 5)) and\n quite likely ((-x) mod 5) was intended. In such situations it seems best to\n follow the rule of always parenthesizing to make the association clear, and\n this warning switch warns if such parentheses are not present. The default\n-is that these warnings are not given.\n+is that these warnings are given.\n This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwQ\n@@ -5099,7 +5326,6 @@ with a literal or S'Length. This is a case where the code is assuming that the\n low bound is one, which is in general not true (for example when a slice is\n passed). The default is that such warnings are generated.\n This warning can also be turned on using @option{-gnatwa}.\n-F\n \n @item -gnatwW\n @emph{Suppress warnings on wrong low bound assumption.}\n@@ -5542,6 +5768,13 @@ used as attributes names, must be written in mixed case, that is, the\n initial letter and any letter following an underscore must be uppercase.\n All other letters must be lowercase.\n \n+@item ^A^ARRAY_INDEXES^\n+@emph{Use of array index numbers in array attributes.}\n+If the ^letter A^word ARRAY_INDEXES^ appears in the string after\n+@option{-gnaty} then when using the array attributes First, Last, Range,\n+or Length, the index number must be omitted for one-dimensional arrays\n+and is required for multi-dimensional arrays.\n+\n @item ^b^BLANKS^\n @emph{Blanks not allowed at statement end.}\n If the ^letter b^word BLANKS^ appears in the string after @option{-gnaty} then\n@@ -5664,7 +5897,8 @@ option are more liberal than those in the Ada Reference Manual. First\n in the case of record declarations, it is permissible to put the\n @code{record} keyword on the same line as the @code{type} keyword, and\n then the @code{end} in @code{end record} must line up under @code{type}.\n-For example, either of the following two layouts is acceptable:\n+This is also permitted when the type declaration is split on two lines.\n+For example, any of the following three layouts is acceptable:\n \n @smallexample @c ada\n @cartouche\n@@ -5678,6 +5912,13 @@ type q is\n       a : integer;\n       b : integer;\n    end record;\n+\n+type q is\n+   record\n+      a : integer;\n+      b : integer;\n+end record;\n+\n @end cartouche\n @end smallexample\n \n@@ -5872,7 +6113,7 @@ The switch\n @ifclear vms\n @option{-gnaty} on its own (that is not\n followed by any letters or digits),\n-is equivalent to @code{gnaty3abcefhiklmnprst}, that is all checking\n+is equivalent to @code{gnaty3aAbcefhiklmnprst}, that is all checking\n options enabled with the exception of @option{-gnatyo},\n @option{-gnatyd}, @option{-gnatyu}, and @option{-gnatyx}.\n @end ifclear\n@@ -6197,7 +6438,7 @@ Although GNAT is primarily an Ada 95 compiler, it can be set to operate\n in Ada 2005 mode using this option. Although the new standard has not\n yet been issued (as of early 2005), many features have been discussed and\n approved in ``Ada Issues'' (AI's). For the text of these AI's, see\n-@url{www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs}. Included with GNAT\n+@url{http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs}. Included with GNAT\n releases is a file @file{features-ada0y} that describes the current set\n of implemented Ada 2005 features.\n \n@@ -6642,17 +6883,16 @@ to propagate an exception through a C/C++ code, the C/C++ code\n must be compiled with the @option{-funwind-tables} GCC's\n option.\n \n-The following switches can be used to control which of the\n+The following switches may be used to control which of the\n two exception handling methods is used.\n \n @table @option\n @c !sort!\n \n @item --RTS=sjlj\n @cindex @option{--RTS=sjlj} (@command{gnatmake})\n-This switch causes the setjmp/longjmp run-time to be used\n-for exception handling. If this is the default mechanism for the\n-target (see below), then this has no effect. If the default\n+This switch causes the setjmp/longjmp run-time (when available) to be used\n+for exception handling. If the default\n mechanism for the target is zero cost exceptions, then\n this switch can be used to modify this default, and must be\n used for all units in the partition.\n@@ -6666,12 +6906,12 @@ application is improved by favoring exception propagation.\n @cindex Zero Cost Exceptions\n This switch causes the zero cost approach to be used\n for exception handling. If this is the default mechanism for the\n-target (see below), then this has no effect. If the default\n+target (see below), then this switch is unneeded. If the default\n mechanism for the target is setjmp/longjmp exceptions, then\n this switch can be used to modify this default, and must be\n used for all units in the partition.\n This option can only be used if the zero cost approach\n-is available for the target in use (see below).\n+is available for the target in use, otherwise it will generate an error.\n @end table\n \n @noindent\n@@ -6680,18 +6920,6 @@ and @command{gnatbind}. Passing this option to @command{gnatmake}\n (@pxref{Switches for gnatmake}) will ensure the required consistency\n through the compilation and binding steps.\n \n-The @code{setjmp/longjmp} approach is available on all targets, while\n-the @code{zero cost} approach is available on selected targets.\n-To determine whether zero cost exceptions can be used for a\n-particular target, look at the private part of the file system.ads.\n-Either @code{GCC_ZCX_Support} or @code{Front_End_ZCX_Support} must\n-be True to use the zero cost approach. If both of these switches\n-are set to False, this means that zero cost exception handling\n-is not yet available for that target. The switch\n-@code{ZCX_By_Default} indicates the default approach. If this\n-switch is set to True, then the @code{zero cost} approach is\n-used by default.\n-\n @node Units to Sources Mapping Files\n @subsection Units to Sources Mapping Files\n \n@@ -8514,6 +8742,12 @@ This switch cannot be used when using a project file.\n Follow all symbolic links when processing project files.\n @end ifclear\n \n+@item ^-eS^/STANDARD_OUTPUT_FOR_COMMANDS^\n+@cindex @option{^-eS^/STANDARD_OUTPUT_FOR_COMMANDS^} (@command{gnatmake})\n+Output the commands for the compiler, the binder and the linker\n+on ^standard output^SYS$OUTPUT^,\n+instead of ^standard error^SYS$ERROR^.\n+\n @item ^-f^/FORCE_COMPILE^\n @cindex @option{^-f^/FORCE_COMPILE^} (@command{gnatmake})\n Force recompilations. Recompile all sources, even though some object\n@@ -8634,6 +8868,12 @@ for an executable file on the host system.\n This switch cannot be used when invoking @command{gnatmake} with several\n @file{file_names}.\n \n+@item ^-p or --create-missing-dirs^/CREATE_MISSING_DIRS^\n+@cindex @option{^-p^/CREATE_MISSING_DIRS^} (@command{gnatmake})\n+When using project files (^-P^/PROJECT_FILE=^@var{project}), create\n+automatically missing object directories, library directories and exec\n+directories.\n+\n @item ^-P^/PROJECT_FILE=^@var{project}\n @cindex @option{^-P^/PROJECT_FILE^} (@command{gnatmake})\n Use project file @var{project}. Only one such switch can be used.\n@@ -14965,6 +15205,13 @@ semantically legal.\n If this condition is not met, @command{gnatpp} will terminate with an\n error message; no output file will be generated.\n \n+If the source files presented to @command{gnatpp} contain\n+preprocessing directives, then the output file will\n+correspond to the generated source after all\n+preprocessing is carried out. There is no way\n+using @command{gnatpp} to obtain pretty printed files that\n+include the preprocessing directives.\n+\n If the compilation unit\n contained in the input source depends semantically upon units located\n outside the current directory, you have to provide the source search path\n@@ -16379,7 +16626,7 @@ maximal loop nesting level\n \n @noindent\n The McCabe complexity metrics are defined\n-in @url{www.mccabe.com/pdf/nist235r.pdf}\n+in @url{http://www.mccabe.com/pdf/nist235r.pdf}\n \n According to McCabe, both control statements and short-circuit control forms\n should be taken into account when computing cyclomatic complexity. For each\n@@ -19286,8 +19533,27 @@ quotation marks.\n @item -R@i{rule_id}\n Turn off the check for a specified rule\n \n+@cindex @option{-from} (@command{gnatcheck})\n+@item -from=@i{rule_option_filename}\n+Read the rule options from the text file @i{rule_option_filename}, referred as\n+``rule file'' below.\n+\n @end table\n \n+@noindent\n+A rule file is supposed to be a text file containing an arbitrary set of\n+rule options. The file may contain empty lines and Ada-style comments (comment\n+lines and end-of-line comments). The rule file have free format, that is,\n+you do not have to start a new rule option from the new line.\n+\n+A rule file may contain another @option{-from=@i{rule_option_filename}}\n+options, each of such options is replaced with the content of the\n+corresponding rule file during the rule files processing. In case if a\n+cycling is detected (that is, @i{rule_file_1} reads rule options from\n+@i{rule_file_2}, and  @i{rule_file_2} reads (directly or indirectly)\n+rule options from @i{rule_file_1}), the process of macro-expansions\n+of rule files is interrupted and a part of their content is ignored.\n+\n @node Add the Results of Compiler Checks to gnatcheck Output\n @section Add the Results of Compiler Checks to @command{gnatcheck} Output\n \n@@ -21717,10 +21983,6 @@ GNAT also supplies a number of implementation-defined pragmas as follows:\n \n @item  @code{CPP_DESTRUCTOR}\n \n-@item  @code{CPP_VIRTUAL}\n-\n-@item  @code{CPP_VTABLE}\n-\n @item  @code{DEBUG}\n \n @item  @code{EXTEND_SYSTEM}\n@@ -27615,16 +27877,14 @@ pragma Import (Stdcall, Get_Val, Link_Name => \"retrieve_val\");\n @end smallexample\n \n @noindent\n-then the imported routine is @code{retrieve_val@@4}, that is, there is no\n-trailing underscore but the appropriate @code{@@}@code{@i{nn}} is always\n-added at the end of the @code{Link_Name} by the compiler.\n+then the imported routine is @code{retrieve_val}, that is, there is no\n+decoration at all. No leading underscore and no Stdcall suffix\n+@code{@@}@code{@i{nn}}.\n \n @noindent\n-Note, that in some special cases a DLL's entry point name lacks a trailing\n-@code{@@}@code{@i{nn}} while the exported name generated for a call has it.\n-The @code{gnatdll} tool, which creates the import library for the DLL, is able\n-to handle those cases (@pxref{Using gnatdll} for the description of\n-the switches).\n+This is especially important as in some special cases a DLL's entry\n+point name lacks a trailing @code{@@}@code{@i{nn}} while the exported\n+name generated for a call has it.\n \n @noindent\n It is also possible to import variables defined in a DLL by using an"}]}