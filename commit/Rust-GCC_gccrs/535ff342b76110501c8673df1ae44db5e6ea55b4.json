{"sha": "535ff342b76110501c8673df1ae44db5e6ea55b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1ZmYzNDJiNzYxMTA1MDFjODY3M2RmMWFlNDRkYjVlNmVhNTViNA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2009-06-04T21:52:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-06-04T21:52:32Z"}, "message": "re PR fortran/37203 (Check ORDER= of RESHAPE)\n\ngcc/fortran/\n2009-06-04  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/37203\n        * check.c (gfc_check_reshape): Additional checks for the\n        SHAPE and ORDER arguments.\n        * simplify.c (gfc_simplify_reshape): Converted argument checks\n        to asserts.\n\ngcc/testsuite/\n2009-06-04  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/37203\n        * gfortran.dg/reshape_order_5.f90: New.\n        * gfortran.dg/reshape_shape_1.f90: New.\n\nFrom-SVN: r148190", "tree": {"sha": "2573fcb7934904f713efb009a145552958bc057d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2573fcb7934904f713efb009a145552958bc057d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535ff342b76110501c8673df1ae44db5e6ea55b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535ff342b76110501c8673df1ae44db5e6ea55b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535ff342b76110501c8673df1ae44db5e6ea55b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535ff342b76110501c8673df1ae44db5e6ea55b4/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efd767091881d2fb8df87536ec8ccf35d66c492c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd767091881d2fb8df87536ec8ccf35d66c492c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd767091881d2fb8df87536ec8ccf35d66c492c"}], "stats": {"total": 251, "additions": 160, "deletions": 91}, "files": [{"sha": "c93aa12861c0081b7c06e4d19772d09cb01e4141", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -1,3 +1,11 @@\n+2009-06-04  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/37203\n+\t* check.c (gfc_check_reshape): Additional checks for the\n+\tSHAPE and ORDER arguments.\n+\t* simplify.c (gfc_simplify_reshape): Converted argument checks\n+\tto asserts.\n+\n 2009-06-03  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.texi: Add mixed-language programming, mention"}, {"sha": "c4e33bb88a4154b7356e4eebb0bb35e7885043dd", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 100, "deletions": 5, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -2324,7 +2324,7 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n {\n   mpz_t size;\n   mpz_t nelems;\n-  int m;\n+  int shape_size;\n \n   if (array_check (source, 0) == FAILURE)\n     return FAILURE;\n@@ -2342,26 +2342,121 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n       return FAILURE;\n     }\n \n-  m = mpz_cmp_ui (size, GFC_MAX_DIMENSIONS);\n+  shape_size = mpz_get_ui (size);\n   mpz_clear (size);\n \n-  if (m > 0)\n+  if (shape_size <= 0)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L is empty\",\n+\t\t gfc_current_intrinsic_arg[1], gfc_current_intrinsic,\n+\t\t &shape->where);\n+      return FAILURE;\n+    }\n+  else if (shape_size > GFC_MAX_DIMENSIONS)\n     {\n       gfc_error (\"'shape' argument of 'reshape' intrinsic at %L has more \"\n \t\t \"than %d elements\", &shape->where, GFC_MAX_DIMENSIONS);\n       return FAILURE;\n     }\n+  else if (shape->expr_type == EXPR_ARRAY)\n+    {\n+      gfc_expr *e;\n+      int i, extent;\n+      for (i = 0; i < shape_size; ++i)\n+\t{\n+\t  e = gfc_get_array_element (shape, i);\n+\t  if (e->expr_type != EXPR_CONSTANT)\n+\t    {\n+\t      gfc_free_expr (e);\n+\t      continue;\n+\t    }\n+\n+\t  gfc_extract_int (e, &extent);\n+\t  if (extent < 0)\n+\t    {\n+\t      gfc_error (\"'%s' argument of '%s' intrinsic at %L has \"\n+\t\t\t \"negative element (%d)\", gfc_current_intrinsic_arg[1],\n+\t\t\t gfc_current_intrinsic, &e->where, extent);\n+\t      return FAILURE;\n+\t    }\n+\n+\t  gfc_free_expr (e);\n+\t}\n+    }\n \n   if (pad != NULL)\n     {\n       if (same_type_check (source, 0, pad, 2) == FAILURE)\n \treturn FAILURE;\n+\n       if (array_check (pad, 2) == FAILURE)\n \treturn FAILURE;\n     }\n \n-  if (order != NULL && array_check (order, 3) == FAILURE)\n-    return FAILURE;\n+  if (order != NULL)\n+    {\n+      if (array_check (order, 3) == FAILURE)\n+\treturn FAILURE;\n+\n+      if (type_check (order, 3, BT_INTEGER) == FAILURE)\n+\treturn FAILURE;\n+\n+      if (order->expr_type == EXPR_ARRAY)\n+\t{\n+\t  int i, order_size, dim, perm[GFC_MAX_DIMENSIONS];\n+\t  gfc_expr *e;\n+\n+\t  for (i = 0; i < GFC_MAX_DIMENSIONS; ++i)\n+\t    perm[i] = 0;\n+\n+\t  gfc_array_size (order, &size);\n+\t  order_size = mpz_get_ui (size);\n+\t  mpz_clear (size);\n+\n+\t  if (order_size != shape_size)\n+\t    {\n+\t      gfc_error (\"'%s' argument of '%s' intrinsic at %L \"\n+\t\t\t \"has wrong number of elements (%d/%d)\", \n+\t\t\t gfc_current_intrinsic_arg[3],\n+\t\t\t gfc_current_intrinsic, &order->where,\n+\t\t\t order_size, shape_size);\n+\t      return FAILURE;\n+\t    }\n+\n+\t  for (i = 1; i <= order_size; ++i)\n+\t    {\n+\t      e = gfc_get_array_element (order, i-1);\n+\t      if (e->expr_type != EXPR_CONSTANT)\n+\t\t{\n+\t\t  gfc_free_expr (e);\n+\t\t  continue;\n+\t\t}\n+\n+\t      gfc_extract_int (e, &dim);\n+\n+\t      if (dim < 1 || dim > order_size)\n+\t\t{\n+\t\t  gfc_error (\"'%s' argument of '%s' intrinsic at %L \"\n+\t\t\t     \"has out-of-range dimension (%d)\", \n+\t\t\t     gfc_current_intrinsic_arg[3],\n+\t\t\t     gfc_current_intrinsic, &e->where, dim);\n+\t\t  return FAILURE;\n+\t\t}\n+\n+\t      if (perm[dim-1] != 0)\n+\t\t{\n+\t\t  gfc_error (\"'%s' argument of '%s' intrinsic at %L has \"\n+\t\t\t     \"invalid permutation of dimensions (dimension \"\n+\t\t\t     \"'%d' duplicated)\", gfc_current_intrinsic_arg[3],\n+\t\t\t     gfc_current_intrinsic, &e->where, dim);\n+\t\t  return FAILURE;\n+\t\t}\n+\n+\t      perm[dim-1] = 1;\n+\t      gfc_free_expr (e);\n+\t    }\n+\t}\n+    }\n \n   if (pad == NULL && shape->expr_type == EXPR_ARRAY\n       && gfc_is_constant_expr (shape)"}, {"sha": "98df0edd9580449b3a1fb7a1eb22f94330886b07", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 16, "deletions": 86, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -3657,16 +3657,10 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n   gfc_expr *e;\n \n   /* Check that argument expression types are OK.  */\n-  if (!is_constant_array_expr (source))\n-    return NULL;\n-\n-  if (!is_constant_array_expr (shape_exp))\n-    return NULL;\n-\n-  if (!is_constant_array_expr (pad))\n-    return NULL;\n-\n-  if (!is_constant_array_expr (order_exp))\n+  if (!is_constant_array_expr (source)\n+      || !is_constant_array_expr (shape_exp)\n+      || !is_constant_array_expr (pad)\n+      || !is_constant_array_expr (order_exp))\n     return NULL;\n \n   /* Proceed with simplification, unpacking the array.  */\n@@ -3681,40 +3675,16 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n       if (e == NULL)\n \tbreak;\n \n-      if (gfc_extract_int (e, &shape[rank]) != NULL)\n-\t{\n-\t  gfc_error (\"Integer too large in shape specification at %L\",\n-\t\t     &e->where);\n-\t  gfc_free_expr (e);\n-\t  goto bad_reshape;\n-\t}\n+      gfc_extract_int (e, &shape[rank]);\n \n-      if (rank >= GFC_MAX_DIMENSIONS)\n-\t{\n-\t  gfc_error (\"Too many dimensions in shape specification for RESHAPE \"\n-\t\t     \"at %L\", &e->where);\n-\t  gfc_free_expr (e);\n-\t  goto bad_reshape;\n-\t}\n-\n-      if (shape[rank] < 0)\n-\t{\n-\t  gfc_error (\"Shape specification at %L cannot be negative\",\n-\t\t     &e->where);\n-\t  gfc_free_expr (e);\n-\t  goto bad_reshape;\n-\t}\n+      gcc_assert (rank >= 0 && rank < GFC_MAX_DIMENSIONS);\n+      gcc_assert (shape[rank] >= 0);\n \n       gfc_free_expr (e);\n       rank++;\n     }\n \n-  if (rank == 0)\n-    {\n-      gfc_error (\"Shape specification at %L cannot be the null array\",\n-\t\t &shape_exp->where);\n-      goto bad_reshape;\n-    }\n+  gcc_assert (rank > 0);\n \n   /* Now unpack the order array if present.  */\n   if (order_exp == NULL)\n@@ -3730,41 +3700,14 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n       for (i = 0; i < rank; i++)\n \t{\n \t  e = gfc_get_array_element (order_exp, i);\n-\t  if (e == NULL)\n-\t    {\n-\t      gfc_error (\"ORDER parameter of RESHAPE at %L is not the same \"\n-\t\t\t \"size as SHAPE parameter\", &order_exp->where);\n-\t      goto bad_reshape;\n-\t    }\n-\n-\t  if (gfc_extract_int (e, &order[i]) != NULL)\n-\t    {\n-\t      gfc_error (\"Error in ORDER parameter of RESHAPE at %L\",\n-\t\t\t &e->where);\n-\t      gfc_free_expr (e);\n-\t      goto bad_reshape;\n-\t    }\n-\n-\t  if (order[i] < 1 || order[i] > rank)\n-\t    {\n-\t      gfc_error (\"ORDER parameter of RESHAPE at %L is out of range\",\n-\t\t\t &e->where);\n-\t      gfc_free_expr (e);\n-\t      goto bad_reshape;\n-\t    }\n-\n-\t  order[i]--;\n-\n-\t  if (x[order[i]])\n-\t    {\n-\t      gfc_error (\"Invalid permutation in ORDER parameter at %L\",\n-\t\t\t &e->where);\n-\t      gfc_free_expr (e);\n-\t      goto bad_reshape;\n-\t    }\n+\t  gcc_assert (e);\n \n+\t  gfc_extract_int (e, &order[i]);\n \t  gfc_free_expr (e);\n \n+\t  gcc_assert (order[i] >= 1 && order[i] <= rank);\n+\t  order[i]--;\n+\t  gcc_assert (x[order[i]] == 0);\n \t  x[order[i]] = 1;\n \t}\n     }\n@@ -3812,18 +3755,13 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n \te = gfc_get_array_element (source, j);\n       else\n \t{\n-\t  j = j - nsource;\n-\n-\t  if (npad == 0)\n-\t    {\n-\t      gfc_error (\"PAD parameter required for short SOURCE parameter \"\n-\t\t\t \"at %L\", &source->where);\n-\t      goto bad_reshape;\n-\t    }\n+\t  gcc_assert (npad > 0);\n \n+\t  j = j - nsource;\n \t  j = j % npad;\n \t  e = gfc_get_array_element (pad, j);\n \t}\n+      gcc_assert (e);\n \n       if (head == NULL)\n \thead = tail = gfc_get_constructor ();\n@@ -3833,9 +3771,6 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n \t  tail = tail->next;\n \t}\n \n-      if (e == NULL)\n-\tgoto bad_reshape;\n-\n       tail->where = e->where;\n       tail->expr = e;\n \n@@ -3867,11 +3802,6 @@ gfc_simplify_reshape (gfc_expr *source, gfc_expr *shape_exp,\n   e->rank = rank;\n \n   return e;\n-\n-bad_reshape:\n-  gfc_free_constructor (head);\n-  mpz_clear (index);\n-  return &gfc_bad_expr;\n }\n \n "}, {"sha": "7f4aa6b3b3afbc846cccbccae5f720ba8d592c9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -1,3 +1,9 @@\n+2009-06-04  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/37203\n+\t* gfortran.dg/reshape_order_5.f90: New.\n+\t* gfortran.dg/reshape_shape_1.f90: New.\n+\n 2009-06-04  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/error38.C: Add pointer-to-typedef case."}, {"sha": "9c76b88839fc548fd5e6d627c3c1f1e1b3eeef32", "filename": "gcc/testsuite/gfortran.dg/reshape_order_5.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_order_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_order_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_order_5.f90?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do \"compile\" }\n+!\n+! PR fortran/37203 - check RESHAPE arguments\n+!\n+\n+  integer, dimension(6) :: source1 = (/ 1, 2, 3, 4, 5, 6 /)\n+  integer, dimension(2) :: shape1 = (/ 2, 5/)\n+  integer, dimension(2) :: pad1 = (/ 0, 0/)\n+  integer, dimension(2) :: t(2,5)\n+\n+  t = reshape(source1, shape1, pad1, (/2, 1/))        ! ok\n+  t = reshape(source1, shape1, pad1, (/2.1, 1.2/))    ! { dg-error \"must be INTEGER\" }\n+  t = reshape(source1, shape1, pad1, (/2, 2/))        ! { dg-error \"invalid permutation\" }\n+  t = reshape(source1, shape1, pad1, (/2, 3/))        ! { dg-error \"out-of-range dimension\" }\n+  t = reshape(source1, shape1, pad1, (/2/))           ! { dg-error \"wrong number of elements\" }\n+end"}, {"sha": "008c9a8e5c1f8cc4e008460a2deb56aae3c8b537", "filename": "gcc/testsuite/gfortran.dg/reshape_shape_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_shape_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535ff342b76110501c8673df1ae44db5e6ea55b4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_shape_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_shape_1.f90?ref=535ff342b76110501c8673df1ae44db5e6ea55b4", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do \"compile\" }\n+!\n+! PR fortran/37203 - check RESHAPE arguments\n+!\n+\n+  integer, dimension(6) :: source1 = (/ 1, 2, 3, 4, 5, 6 /)\n+  integer, dimension(2) :: pad1 = (/ 0, 0/)\n+  integer, dimension(2) :: t(2,5)\n+  integer :: i\n+\n+  t = reshape(source1, SHAPE(0), pad1, (/2, 1/))      ! { dg-error \"is empty\" }\n+  t = reshape(source1, (/(i,i=1,32)/), pad1, (/2, 1/))    ! { dg-error \"has more than\" }\n+  t = reshape(source1, (/ 2, -5/), pad1, (/2, 1/))    ! { dg-error \"negative element\" }\n+end"}]}