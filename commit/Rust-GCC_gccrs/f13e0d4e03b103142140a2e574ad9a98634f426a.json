{"sha": "f13e0d4e03b103142140a2e574ad9a98634f426a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzZTBkNGUwM2IxMDMxNDIxNDBhMmU1NzRhZDlhOTg2MzRmNDI2YQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-06-30T19:47:22Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-06-30T19:47:22Z"}, "message": "config.gcc [...]: Support --with-arch, --with-tune, and --with-mode configure options.\n\n\t* config.gcc [s390*-*-*]: Support --with-arch, --with-tune, and\n\t--with-mode configure options.\n\t* config/s390/s390.h (OPTION_DEFAULT_SPECS): Define.\n\t(DRIVER_SELF_SPECS): Define.\n\t* config/s390/linux.h (ASM_SPEC): Pass architecture mode and cpu\n\tarchitecture to assembler.\n\t(LINK_SPEC): Merge 31-bit and 64-bit variants.\n\t(LINK_ARCH31_SPEC, LINK_ARCH64_SPEC, EXTRA_SPECS): Remove.\n\t* config/s390/s390.c (override_options): New default rules for\n\tarchitecture mode and cpu architecture selection.\n\t* doc/invoke.texi (-mesa, -mzarch, -march, -mtune): Document\n\tnew default rules.\n\n\t* config/s390/s390.h (enum processor_type): Add PROCESSOR_2084_Z990.\n\t* config/s390/s390.md (attr \"cpu\"): Add \"z990\" processor type.\n\t* config/s390/s390.c (override_options): Add \"z990\" to\n\tprocessor_alias_table.\n\t* doc/invoke.texi (-march): Document \"z990\" processor type.\n\n\t* config/s390/s390.c (s390_tune_flags, s390_arch_flags): New variables.\n\t* config/s390/s390.h (s390_tune_flags, s390_arch_flags): Declare.\n\t(enum processor_flags, TARGET_CPU_IEEE_FLOAT, TARGET_CPU_ZARCH,\n\tTARGET_CPU_LONG_DISPLACEMENT, TARGET_LONG_DISPLACEMENT): New.\n\t* config/s390/s390.c (override_options): Replace enum pta_flags by\n\tenum processor_flags.  Fill in s390_tune_flags and s390_arch_flags.\n\n\t* config/s390/s390.c (s390_cpu): Rename to ...\n\t(s390_tune): ... this.\n\t* config/s390/s390.h (s390_cpu, s390_tune): Likewise.\n\t* config/s390/s390.c (s390_issue_rate, override_options): Likewise.\n\t* config/s390/s390.md (attr \"cpu\"): Likewise.\n\nFrom-SVN: r68736", "tree": {"sha": "d7081e2edcaaae25aaa2c0cdc2115d8f8931eae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7081e2edcaaae25aaa2c0cdc2115d8f8931eae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f13e0d4e03b103142140a2e574ad9a98634f426a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13e0d4e03b103142140a2e574ad9a98634f426a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13e0d4e03b103142140a2e574ad9a98634f426a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13e0d4e03b103142140a2e574ad9a98634f426a/comments", "author": null, "committer": null, "parents": [{"sha": "82a30d6f0fc7a660cf360fd7d6ee4512e21d4b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a30d6f0fc7a660cf360fd7d6ee4512e21d4b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a30d6f0fc7a660cf360fd7d6ee4512e21d4b29"}], "stats": {"total": 273, "additions": 173, "deletions": 100}, "files": [{"sha": "08be63ed9f5bd665a93ff0c6b20a75bb82459d71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -1,3 +1,37 @@\n+2003-06-30  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config.gcc [s390*-*-*]: Support --with-arch, --with-tune, and\n+\t--with-mode configure options.\n+\t* config/s390/s390.h (OPTION_DEFAULT_SPECS): Define.\n+\t(DRIVER_SELF_SPECS): Define.\n+\t* config/s390/linux.h (ASM_SPEC): Pass architecture mode and cpu\n+\tarchitecture to assembler.\n+\t(LINK_SPEC): Merge 31-bit and 64-bit variants.\n+\t(LINK_ARCH31_SPEC, LINK_ARCH64_SPEC, EXTRA_SPECS): Remove.\n+\t* config/s390/s390.c (override_options): New default rules for \n+\tarchitecture mode and cpu architecture selection.\n+\t* doc/invoke.texi (-mesa, -mzarch, -march, -mtune): Document\n+\tnew default rules.\n+\t\n+\t* config/s390/s390.h (enum processor_type): Add PROCESSOR_2084_Z990.\n+\t* config/s390/s390.md (attr \"cpu\"): Add \"z990\" processor type.\n+\t* config/s390/s390.c (override_options): Add \"z990\" to \n+\tprocessor_alias_table.\n+\t* doc/invoke.texi (-march): Document \"z990\" processor type.\n+\n+\t* config/s390/s390.c (s390_tune_flags, s390_arch_flags): New variables.\n+\t* config/s390/s390.h (s390_tune_flags, s390_arch_flags): Declare.\n+\t(enum processor_flags, TARGET_CPU_IEEE_FLOAT, TARGET_CPU_ZARCH,\n+\tTARGET_CPU_LONG_DISPLACEMENT, TARGET_LONG_DISPLACEMENT): New.\n+\t* config/s390/s390.c (override_options): Replace enum pta_flags by \n+\tenum processor_flags.  Fill in s390_tune_flags and s390_arch_flags.\n+\n+\t* config/s390/s390.c (s390_cpu): Rename to ...\n+\t(s390_tune): ... this.\n+\t* config/s390/s390.h (s390_cpu, s390_tune): Likewise.\n+\t* config/s390/s390.c (s390_issue_rate, override_options): Likewise.\n+\t* config/s390/s390.md (attr \"cpu\"): Likewise.\n+\n 2003-06-30  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-common.c (enum c_language_kind, flag_objc): Remove."}, {"sha": "688604cda323376ca0bcfccd0cd0c3553676915a", "filename": "gcc/config.gcc", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -2444,6 +2444,35 @@ then\n \t\tdone\n \t\t;;\n \n+\ts390*-*-*)\n+\t\tsupported_defaults=\"arch mode tune\"\n+\n+\t\tfor which in arch tune; do\n+\t\t\teval \"val=\\$with_$which\"\n+\t\t\tcase x$val in\n+\t\t\tx \\\n+\t\t\t| xg5 | xg6 | xz900 | xz990)\n+\t\t\t\t# OK\n+\t\t\t\t;;\n+\t\t\t*)\n+\t\t\t\techo \"Unknown cpu used in --with-$which=$val.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\tdone\n+\n+\t\tcase \"x$with_mode\" in\n+\t\tx \\\n+\t\t| xesa | xzarch)\n+\t\t\t# OK\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown architecture mode used in --with-mode=$with_mode.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\n \tsparc*-*-*)\n \t\tsupported_defaults=\"cpu float tune\"\n \n@@ -2608,7 +2637,7 @@ then\n \tesac\n \n \tt=\n-\tall_defaults=\"abi cpu arch tune schedule float\"\n+\tall_defaults=\"abi cpu arch tune schedule float mode\"\n \tfor option in $all_defaults\n \tdo\n \t\teval \"val=\\$with_$option\""}, {"sha": "511ede559df43dcf72e220c1d633e7accc341321", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -69,13 +69,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Target specific assembler settings.  */\n \n-#ifdef DEFAULT_TARGET_64BIT\n-#undef  ASM_SPEC\n-#define ASM_SPEC \"%{m31:-m31 -Aesa}\"\n-#else\n #undef  ASM_SPEC\n-#define ASM_SPEC \"%{m64:-m64 -Aesame}\"\n-#endif\n+#define ASM_SPEC \"%{m31&m64}%{mesa&mzarch}%{march=*}\"\n \n \n /* Target specific linker settings.  */\n@@ -86,40 +81,18 @@ Boston, MA 02111-1307, USA.  */\n #define MULTILIB_DEFAULTS { \"m31\" }\n #endif\n \n-#define LINK_ARCH31_SPEC \\\n-  \"-m elf_s390 \\\n-   %{shared:-shared} \\\n-   %{!shared: \\\n-      %{static:-static} \\\n-      %{!static: \\\n-\t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld.so.1}}}\"\n-\n-#define LINK_ARCH64_SPEC \\\n-  \"-m elf64_s390 \\\n+#undef  LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{m31:-m elf_s390}%{m64:-m elf64_s390} \\\n    %{shared:-shared} \\\n    %{!shared: \\\n       %{static:-static} \\\n       %{!static: \\\n \t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld64.so.1}}}\"\n-\n-#ifdef DEFAULT_TARGET_64BIT\n-#undef  LINK_SPEC\n-#define LINK_SPEC \"%{m31:%(link_arch31)} %{!m31:%(link_arch64)}\"\n-#else\n-#undef  LINK_SPEC\n-#define LINK_SPEC \"%{m64:%(link_arch64)} %{!m64:%(link_arch31)}\"\n-#endif\n-\n-\n-/* This macro defines names of additional specifications to put in the specs\n-   that can be used in various specifications like CC1_SPEC.  Its definition\n-   is an initializer with a subgrouping for each command option.  */\n+\t%{!dynamic-linker: \\\n+          %{m31:-dynamic-linker /lib/ld.so.1} \\\n+          %{m64:-dynamic-linker /lib/ld64.so.1}}}}\"\n \n-#define EXTRA_SPECS \\\n-  { \"link_arch31\",\tLINK_ARCH31_SPEC },\t\\\n-  { \"link_arch64\",\tLINK_ARCH64_SPEC },\t\\\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n "}, {"sha": "7e26ecf661f773ddc6edd076c20ea29da175f608", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 46, "deletions": 51, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -157,9 +157,11 @@ struct s390_address\n };\n \n /* Which cpu are we tuning for.  */\n-enum processor_type s390_cpu;\n+enum processor_type s390_tune;\n+enum processor_flags s390_tune_flags;\n /* Which instruction set architecture to use.  */\n enum processor_type s390_arch;\n+enum processor_flags s390_arch_flags;\n \n /* Strings to hold which cpu and instruction set architecture  to use.  */\n const char *s390_tune_string;\t\t/* for -mtune=<xxx> */\n@@ -925,22 +927,19 @@ void\n override_options ()\n {\n   int i;\n-  static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n-      const enum pta_flags\n-\t{\n-\t  PTA_IEEE_FLOAT = 1,\n-\t  PTA_ZARCH = 2\n-\t} flags;\n+      const enum processor_flags flags;\n     }\n   const processor_alias_table[] =\n     {\n-      {\"g5\", PROCESSOR_9672_G5, PTA_IEEE_FLOAT},\n-      {\"g6\", PROCESSOR_9672_G6, PTA_IEEE_FLOAT},\n-      {\"z900\", PROCESSOR_2064_Z900, PTA_IEEE_FLOAT | PTA_ZARCH},\n+      {\"g5\", PROCESSOR_9672_G5, PF_IEEE_FLOAT},\n+      {\"g6\", PROCESSOR_9672_G6, PF_IEEE_FLOAT},\n+      {\"z900\", PROCESSOR_2064_Z900, PF_IEEE_FLOAT | PF_ZARCH},\n+      {\"z990\", PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH \n+\t\t\t\t    | PF_LONG_DISPLACEMENT},\n     };\n \n   int const pta_size = ARRAY_SIZE (processor_alias_table);\n@@ -950,59 +949,55 @@ override_options ()\n \n   /* Set up function hooks.  */\n   init_machine_status = s390_init_machine_status;\n- \n-  /* Set cpu and arch, if only partially given.  */\n-  if (!s390_tune_string && s390_arch_string)\n-    s390_tune_string = s390_arch_string;\n-  if (!s390_tune_string)\n-    s390_tune_string = cpu_names [TARGET_64BIT ? TARGET_CPU_DEFAULT_2064\n-                                              :\tTARGET_CPU_DEFAULT_9672];\n+\n+  /* Architecture mode defaults according to ABI.  */\n+  if (!(target_flags_explicit & MASK_ZARCH))\n+    {\n+      if (TARGET_64BIT)\n+\ttarget_flags |= MASK_ZARCH;\n+      else\n+\ttarget_flags &= ~MASK_ZARCH;\n+    }\n+\n+  /* Determine processor architectural level.  */\n   if (!s390_arch_string)\n-#ifdef DEFAULT_TARGET_64BIT\n-    s390_arch_string = \"z900\";\n-#else\n-    s390_arch_string = \"g5\";\n-#endif\n+    s390_arch_string = TARGET_ZARCH? \"z900\" : \"g5\";\n \n   for (i = 0; i < pta_size; i++)\n     if (! strcmp (s390_arch_string, processor_alias_table[i].name))\n       {\n \ts390_arch = processor_alias_table[i].processor;\n-\t/* Default cpu tuning to the architecture.  */\n-\ts390_cpu = s390_arch;\n-     \n-\tif (!(processor_alias_table[i].flags & PTA_ZARCH) \n-            && TARGET_64BIT)\n-          error (\"64-bit ABI not supported on %s\", s390_arch_string);\n-\n-\tif (!(processor_alias_table[i].flags & PTA_ZARCH) \n-            && TARGET_ZARCH)\n-          error (\"z/Architecture not supported on %s\", s390_arch_string);\n-\n+\ts390_arch_flags = processor_alias_table[i].flags;\n \tbreak;\n       }\n-\n   if (i == pta_size)\n-    error (\"bad value (%s) for -march= switch\", s390_arch_string);\n+    error (\"Unknown cpu used in -march=%s.\", s390_arch_string);\n \n-  /* ESA implies 31 bit mode.  */\n-  if ((target_flags_explicit & MASK_ZARCH) && !TARGET_ZARCH)\n+  /* Determine processor to tune for.  */\n+  if (!s390_tune_string)\n     {\n-      if ((target_flags_explicit & MASK_64BIT) && TARGET_64BIT)\n-\terror (\"64-bit ABI not possible in ESA/390 mode\");\n-      else\n-\ttarget_flags &= ~MASK_64BIT;\n+      s390_tune = s390_arch;\n+      s390_tune_flags = s390_arch_flags;\n+      s390_tune_string = s390_arch_string;\n+    }\n+  else\n+    {\n+      for (i = 0; i < pta_size; i++)\n+\tif (! strcmp (s390_tune_string, processor_alias_table[i].name))\n+\t  {\n+\t    s390_tune = processor_alias_table[i].processor;\n+\t    s390_tune_flags = processor_alias_table[i].flags;\n+\t    break;\n+\t  }\n+      if (i == pta_size)\n+\terror (\"Unknown cpu used in -mtune=%s.\", s390_tune_string);\n     }\n \n-  for (i = 0; i < pta_size; i++)\n-    if (! strcmp (s390_tune_string, processor_alias_table[i].name))\n-      {\n-\ts390_cpu = processor_alias_table[i].processor;\n-\tbreak;\n-      }\n-\n-  if (i == pta_size)\n-    error (\"bad value (%s) for -mtune= switch\", s390_tune_string);\n+  /* Sanity checks.  */\n+  if (TARGET_ZARCH && !(s390_arch_flags & PF_ZARCH))\n+    error (\"z/Architecture mode not supported on %s.\", s390_arch_string);\n+  if (TARGET_64BIT && !TARGET_ZARCH)\n+    error (\"64-bit ABI not supported in ESA/390 mode.\");\n }\n \n /* Map for smallest class containing reg regno.  */\n@@ -3707,7 +3702,7 @@ s390_issue_rate ()\n static int\n s390_use_dfa_pipeline_interface ()\n {\n-  if (s390_cpu == PROCESSOR_2064_Z900)\n+  if (s390_tune == PROCESSOR_2064_Z900)\n     return 1;\n   return 0;\n "}, {"sha": "70128864d59503786e5ae20e236804f41c5e063f", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -37,19 +37,37 @@ enum processor_type\n   PROCESSOR_9672_G5,\t\t\n   PROCESSOR_9672_G6,\t\t\n   PROCESSOR_2064_Z900,\t\t\n+  PROCESSOR_2084_Z990,\n   PROCESSOR_max\n };\n \n-extern enum processor_type s390_cpu;\n+/* Optional architectural facilities supported by the processor.  */\n+\n+enum processor_flags\n+{\n+  PF_IEEE_FLOAT = 1,\n+  PF_ZARCH = 2,\n+  PF_LONG_DISPLACEMENT = 4\n+};\n+\n+extern enum processor_type s390_tune;\n+extern enum processor_flags s390_tune_flags;\n extern const char *s390_tune_string;\n \n extern enum processor_type s390_arch;\n+extern enum processor_flags s390_arch_flags;\n extern const char *s390_arch_string;\n \n-#define TARGET_CPU_DEFAULT_9672 0\n-#define TARGET_CPU_DEFAULT_2064 2\n+#define TARGET_CPU_IEEE_FLOAT \\\n+\t(s390_arch_flags & PF_IEEE_FLOAT)\n+#define TARGET_CPU_ZARCH \\\n+\t(s390_arch_flags & PF_ZARCH)\n+#define TARGET_CPU_LONG_DISPLACEMENT \\\n+\t(s390_arch_flags & PF_LONG_DISPLACEMENT)\n+\n+#define TARGET_LONG_DISPLACEMENT \\\n+       (TARGET_ZARCH && TARGET_CPU_LONG_DISPLACEMENT)\n \n-#define TARGET_CPU_DEFAULT_NAMES {\"g5\", \"g6\", \"z900\"}\n \n /* Run-time target specification.  */\n \n@@ -119,6 +137,25 @@ extern int target_flags;\n     N_(\"Generate code for given CPU\"), 0},                      \\\n }\n \n+/* Support for configure-time defaults.  */\n+#define OPTION_DEFAULT_SPECS \t\t\t\t\t\\\n+  { \"mode\", \"%{!mesa:%{!mzarch:-m%(VALUE)}}\" },\t\t\t\\\n+  { \"arch\", \"%{!march=*:-march=%(VALUE)}\" },\t\t\t\\\n+  { \"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }\n+\n+/* Defaulting rules.  */\n+#ifdef DEFAULT_TARGET_64BIT\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n+  \"%{!m31:%{!m64:-m64}}\",\t\t\t\t\t\\\n+  \"%{!mesa:%{!mzarch:%{m31:-mesa}%{m64:-mzarch}}}\",\t\t\\\n+  \"%{!march=*:%{mesa:-march=g5}%{mzarch:-march=z900}}\"\n+#else\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n+  \"%{!m31:%{!m64:-m31}}\",\t\t\t\t\t\\\n+  \"%{!mesa:%{!mzarch:%{m31:-mesa}%{m64:-mzarch}}}\",\t\t\\\n+  \"%{!march=*:%{mesa:-march=g5}%{mzarch:-march=z900}}\"\n+#endif\n+\n /* Target version string.  Overridden by the OS header.  */\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_VERSION fprintf (stderr, \" (zSeries)\");"}, {"sha": "d061d084833148d1fc7a1de1b84ff281681ab7f1", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -76,8 +76,8 @@\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in s390.h.\n \n-(define_attr \"cpu\" \"g5,g6,z900\"\n-  (const (symbol_ref \"s390_cpu\")))\n+(define_attr \"cpu\" \"g5,g6,z900,z990\"\n+  (const (symbol_ref \"s390_tune\")))\n \n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations."}, {"sha": "184a2d2ed2a285a36aa6ab6559392cef794775e7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13e0d4e03b103142140a2e574ad9a98634f426a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f13e0d4e03b103142140a2e574ad9a98634f426a", "patch": "@@ -10134,8 +10134,9 @@ instructions available on z/Architecture.\n When @option{-mesa} is specified, generate code using the \n instructions available on ESA/390. Note that @option{-mesa} is\n not possible with @option{-m64}.\n-For the @samp{s390} targets, the default is @option{-mesa}, \n-while the @samp{s390x} targets default to @option{-mzarch}.\n+When generating code compliant to the Linux for S/390 ABI,\n+the default is @option{-mesa}.  When generating code compliant\n+to the Linux for zSeries ABI, the default is @option{-mzarch}.\n \n @item -mmvcle\n @itemx -mno-mvcle\n@@ -10152,17 +10153,21 @@ use a @code{mvc} loop instead.  This is the default.\n Print (or do not print) additional debug information when compiling.\n The default is to not print debug information.\n \n-@item -march=@var{arch}\n+@item -march=@var{cpu-type}\n @opindex march\n-Generate code that will run on @var{arch}, which is the name of system\n+Generate code that will run on @var{cpu-type}, which is the name of a system\n representing a certain processor type. Possible values for\n-@var{cpu-type} are @samp{g5}, @samp{g6} and @samp{z900}. \n+@var{cpu-type} are @samp{g5}, @samp{g6}, @samp{z900}, and @samp{z990}.\n+When generating code using the instructions available on z/Architecture,\n+the default is @option{-march=z900}.  Otherwise, the default is\n+@option{-march=g5}.\n \n-@item -mtune=@var{arch}\n+@item -mtune=@var{cpu-type}\n @opindex mtune\n Tune to @var{cpu-type} everything applicable about the generated code,\n- except for the ABI and the set of available instructions. \n-The list of @var{arch} values is the same as for @option{-march}.\n+except for the ABI and the set of available instructions.\n+The list of @var{cpu-type} values is the same as for @option{-march}.\n+The default is the value used for @option{-march}.\n \n @end table\n "}]}