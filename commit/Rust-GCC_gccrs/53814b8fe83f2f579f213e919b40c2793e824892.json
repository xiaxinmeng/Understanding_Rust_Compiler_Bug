{"sha": "53814b8fe83f2f579f213e919b40c2793e824892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4MTRiOGZlODNmMmY1NzlmMjEzZTkxOWI0MGMyNzkzZTgyNDg5Mg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-07-10T22:37:16Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-10T22:37:16Z"}, "message": "re PR fortran/16336 (ICE with common block in module)\n\nPR fortran/16336\n* decl.c (gfc_match_save): Use-associated common block\ndoesn't collide.\n* gfortran.h (gfc_common_head): Add new field 'name'.\nFix typo in comment after #endif.\n* match.c (gfc_get_common): Add new argument from_common,\nmangle name if flag is set, fill in new field in structure\ngfc_common_head.\n(match_common): Set new arg in call to gfc_get_common,\nuse-associated common block doesn't collide.\n* match.h (gfc_get_common): Adapt prototype.\n* module.c (load_commons): Set new arg in call to\ngfc_get_common.\n* symbol.c (free_common_tree): New function.\n(gfc_free_namespace): Call new function.\n* trans-common.c (several functions): Remove argument\n'name', use name from gfc_common_head instead.\n\nFrom-SVN: r84476", "tree": {"sha": "71058c2b83b5ab95a6950a9d27dec8011f02a891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71058c2b83b5ab95a6950a9d27dec8011f02a891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53814b8fe83f2f579f213e919b40c2793e824892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53814b8fe83f2f579f213e919b40c2793e824892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53814b8fe83f2f579f213e919b40c2793e824892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53814b8fe83f2f579f213e919b40c2793e824892/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77dc410393bbfeb45f0e573d57eed83d6d18ad7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc410393bbfeb45f0e573d57eed83d6d18ad7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dc410393bbfeb45f0e573d57eed83d6d18ad7f"}], "stats": {"total": 126, "additions": 83, "deletions": 43}, "files": [{"sha": "1b39762b9676b9cf7a4dd5193b3017d669b6dae9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -1,3 +1,23 @@\n+2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\t\n+\tPR fortran/16336\n+\t* decl.c (gfc_match_save): Use-associated common block\n+\tdoesn't collide.\n+\t* gfortran.h (gfc_common_head): Add new field 'name'.\n+\tFix typo in comment after #endif.\n+\t* match.c (gfc_get_common): Add new argument from_common,\n+\tmangle name if flag is set, fill in new field in structure\n+\tgfc_common_head.\n+\t(match_common): Set new arg in call to gfc_get_common,\n+\tuse-associated common block doesn't collide.\n+\t* match.h (gfc_get_common): Adapt prototype.\n+\t* module.c (load_commons): Set new arg in call to\n+\tgfc_get_common.\n+\t* symbol.c (free_common_tree): New function.\n+\t(gfc_free_namespace): Call new function.\n+\t* trans-common.c (several functions): Remove argument\n+\t'name', use name from gfc_common_head instead.\n+\n 2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* expr.c (gfc_check_pointer_assign): Verify that rank of the LHS"}, {"sha": "3a78efc65609cbcac7a80f5e914b9ee30d5f09dd", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -2699,14 +2699,7 @@ gfc_match_save (void)\n       if (m == MATCH_NO)\n \tgoto syntax;\n \n-      c = gfc_get_common (n);\n-\n-      if (c->use_assoc) \n-\t{       \n-\t  gfc_error(\"COMMON block '%s' at %C is already USE associated\", n);\n-\t  return MATCH_ERROR;\n-\t}\n-\n+      c = gfc_get_common (n, 0);\n       c->saved = 1;\n \n       gfc_current_ns->seen_save = 1;"}, {"sha": "3ea8bb6431b3668a3e6718aebbaf83a476bfc09f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -678,6 +678,7 @@ typedef struct\n {\n   locus where;\n   int use_assoc, saved;\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_symbol *head;\n } \n gfc_common_head;\n@@ -1697,4 +1698,4 @@ void gfc_show_namespace (gfc_namespace *);\n /* parse.c */\n try gfc_parse_file (void);\n \n-#endif /* GFC_GFC_H  */\n+#endif /* GCC_GFORTRAN_H  */"}, {"sha": "040142f766ceef60c2402af0bc6a95a8ff95b576", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -2049,22 +2049,38 @@ gfc_match_call (void)\n \n \n /* Given a name, return a pointer to the common head structure,\n-   creating it if it does not exist.\n+   creating it if it does not exist. If FROM_MODULE is non-zero, we\n+   mangle the name so that it doesn't interfere with commons defined \n+   in the using namespace.\n    TODO: Add to global symbol tree.  */\n \n gfc_common_head *\n-gfc_get_common (char *name)\n+gfc_get_common (const char *name, int from_module)\n {\n   gfc_symtree *st;\n+  static int serial = 0;\n+  char mangled_name[GFC_MAX_SYMBOL_LEN+1];\n \n-  st = gfc_find_symtree (gfc_current_ns->common_root, name);\n-  if (st == NULL)\n-    st = gfc_new_symtree (&gfc_current_ns->common_root, name);\n+  if (from_module)\n+    {\n+      /* A use associated common block is only needed to correctly layout\n+\t the variables it contains.  */\n+      snprintf(mangled_name, GFC_MAX_SYMBOL_LEN, \"_%d_%s\", serial++, name);\n+      st = gfc_new_symtree (&gfc_current_ns->common_root, mangled_name);\n+    }\n+  else\n+    {\n+      st = gfc_find_symtree (gfc_current_ns->common_root, name);\n+\n+      if (st == NULL)\n+\tst = gfc_new_symtree (&gfc_current_ns->common_root, name);\n+    }\n \n   if (st->n.common == NULL)\n     {\n       st->n.common = gfc_get_common_head ();\n       st->n.common->where = gfc_current_locus;\n+      strcpy (st->n.common->name, name);\n     }\n \n   return st->n.common;\n@@ -2140,15 +2156,8 @@ gfc_match_common (void)\n \t}\n       else\n \t{\n-\t  t = gfc_get_common (name);\n+\t  t = gfc_get_common (name, 0);\n \t  head = &t->head;\n-\n-\t  if (t->use_assoc)\n-\t    {\n-\t      gfc_error (\"COMMON block '%s' at %C has already \"\n-\t\t\t \"been USE-associated\", name);\n-\t      goto cleanup;\n-\t    }\n \t}\n \n       if (*head == NULL)"}, {"sha": "032a6a310b95d175687ce94ae6f40a21948feab3", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -89,7 +89,7 @@ match gfc_match_forall (gfc_statement *);\n \n /* Other functions.  */\n \n-gfc_common_head *gfc_get_common (char *);\n+gfc_common_head *gfc_get_common (const char *, int);\n \n /* decl.c */\n "}, {"sha": "33f050b91dcaee3ee417876c25f3e08ea533c03e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -2825,7 +2825,7 @@ load_commons(void)\n       mio_lparen ();\n       mio_internal_string (name);\n \n-      p = gfc_get_common (name);\n+      p = gfc_get_common (name, 1);\n \n       mio_symbol_ref (&p->head);\n       mio_integer (&p->saved);"}, {"sha": "3159436eeb90d365aa9c88579c00d3133f4d6ff6", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -2139,6 +2139,22 @@ gfc_commit_symbols (void)\n }\n \n \n+/* Recursive function that deletes an entire tree and all the common\n+   head structures it points to.  */\n+\n+static void\n+free_common_tree (gfc_symtree * common_tree)\n+{\n+  if (common_tree == NULL)\n+    return;\n+\n+  free_common_tree (common_tree->left);\n+  free_common_tree (common_tree->right);\n+\n+  gfc_free (common_tree);\n+}  \n+\n+\n /* Recursive function that deletes an entire tree and all the user\n    operator nodes that it contains.  */\n \n@@ -2216,6 +2232,7 @@ gfc_free_namespace (gfc_namespace * ns)\n \n   free_sym_tree (ns->sym_root);\n   free_uop_tree (ns->uop_root);\n+  free_common_tree (ns->common_root);\n \n   for (cl = ns->cl_list; cl; cl = cl2)\n     {"}, {"sha": "7907020371e21085cf3a2370e02288fc480f635d", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53814b8fe83f2f579f213e919b40c2793e824892/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=53814b8fe83f2f579f213e919b40c2793e824892", "patch": "@@ -277,8 +277,7 @@ build_equiv_decl (tree union_type, bool is_init)\n /* Get storage for common block.  */\n \n static tree\n-build_common_decl (gfc_common_head *com, const char *name,\n-\t\t   tree union_type, bool is_init)\n+build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n {\n   gfc_symbol *common_sym;\n   tree decl;\n@@ -287,7 +286,7 @@ build_common_decl (gfc_common_head *com, const char *name,\n   if (gfc_common_ns == NULL)\n     gfc_common_ns = gfc_get_namespace (NULL);\n \n-  gfc_get_symbol (name, gfc_common_ns, &common_sym);\n+  gfc_get_symbol (com->name, gfc_common_ns, &common_sym);\n   decl = common_sym->backend_decl;\n \n   /* Update the size of this common block as needed.  */\n@@ -299,9 +298,9 @@ build_common_decl (gfc_common_head *com, const char *name,\n           /* Named common blocks of the same name shall be of the same size\n              in all scoping units of a program in which they appear, but\n              blank common blocks may be of different sizes.  */\n-          if (strcmp (name, BLANK_COMMON_NAME))\n+          if (strcmp (com->name, BLANK_COMMON_NAME))\n \t    gfc_warning (\"Named COMMON block '%s' at %L shall be of the \"\n-\t\t\t \"same size\", name, &com->where);\n+\t\t\t \"same size\", com->name, &com->where);\n           DECL_SIZE_UNIT (decl) = size;\n         }\n      }\n@@ -315,8 +314,8 @@ build_common_decl (gfc_common_head *com, const char *name,\n   /* If there is no backend_decl for the common block, build it.  */\n   if (decl == NULL_TREE)\n     {\n-      decl = build_decl (VAR_DECL, get_identifier (name), union_type);\n-      SET_DECL_ASSEMBLER_NAME (decl, gfc_sym_mangled_common_id (name));\n+      decl = build_decl (VAR_DECL, get_identifier (com->name), union_type);\n+      SET_DECL_ASSEMBLER_NAME (decl, gfc_sym_mangled_common_id (com->name));\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;\n       DECL_ALIGN (decl) = BIGGEST_ALIGNMENT;\n@@ -348,7 +347,7 @@ build_common_decl (gfc_common_head *com, const char *name,\n    backend declarations for all of the elements.  */\n \n static void\n-create_common (gfc_common_head *com, const char *name)\n+create_common (gfc_common_head *com)\n {\n   segment_info *s, *next_s;\n   tree union_type;\n@@ -377,7 +376,7 @@ create_common (gfc_common_head *com, const char *name)\n   finish_record_layout (rli, true);\n \n   if (com)\n-    decl = build_common_decl (com, name, union_type, is_init);\n+    decl = build_common_decl (com, union_type, is_init);\n   else\n     decl = build_equiv_decl (union_type, is_init);\n \n@@ -720,7 +719,7 @@ add_equivalences (void)\n    and all of the symbols equivalenced with that symbol.  */\n \n static void\n-new_segment (gfc_common_head *common, const char *name, gfc_symbol *sym)\n+new_segment (gfc_common_head *common, gfc_symbol *sym)\n {\n \n   current_segment = get_segment_info (sym, current_offset);\n@@ -733,8 +732,9 @@ new_segment (gfc_common_head *common, const char *name, gfc_symbol *sym)\n   add_equivalences ();\n \n   if (current_segment->offset < 0)\n-    gfc_error (\"The equivalence set for '%s' cause an invalid extension \"\n-\t       \"to COMMON '%s' at %L\", sym->name, name, &common->where);\n+    gfc_error (\"The equivalence set for '%s' cause an invalid \"\n+\t       \"extension to COMMON '%s' at %L\", sym->name,\n+\t       common->name, &common->where);\n \n   /* Add these to the common block.  */\n   current_common = add_segments (current_common, current_segment);\n@@ -770,7 +770,7 @@ finish_equivalences (gfc_namespace *ns)\n \t  v->offset -= min_offset;\n \n         current_common = current_segment;\n-        create_common (NULL, NULL);\n+        create_common (NULL);\n         break;\n       }\n }\n@@ -779,8 +779,7 @@ finish_equivalences (gfc_namespace *ns)\n /* Translate a single common block.  */\n \n static void\n-translate_common (gfc_common_head *common, const char *name,\n-\t\t  gfc_symbol *var_list)\n+translate_common (gfc_common_head *common, gfc_symbol *var_list)\n {\n   gfc_symbol *sym;\n \n@@ -791,10 +790,10 @@ translate_common (gfc_common_head *common, const char *name,\n   for (sym = var_list; sym; sym = sym->common_next)\n     {\n       if (! sym->equiv_built)\n-\tnew_segment (common, name, sym);\n+\tnew_segment (common, sym);\n     }\n \n-  create_common (common, name);\n+  create_common (common);\n }\n \n \n@@ -804,7 +803,7 @@ static void\n named_common (gfc_symtree *st)\n {\n \n-  translate_common (st->n.common, st->name, st->n.common->head);\n+  translate_common (st->n.common, st->n.common->head);\n }\n \n \n@@ -821,7 +820,8 @@ gfc_trans_common (gfc_namespace *ns)\n   if (ns->blank_common.head != NULL)\n     {\n       c = gfc_get_common_head ();\n-      translate_common (c, BLANK_COMMON_NAME, ns->blank_common.head);\n+      strcpy (c->name, BLANK_COMMON_NAME);\n+      translate_common (c, ns->blank_common.head);\n     }\n  \n   /* Translate all named common blocks.  */"}]}