{"sha": "61ad6db1bdb74c858da4a80c4454306c202e62f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhZDZkYjFiZGI3NGM4NThkYTRhODBjNDQ1NDMwNmMyMDJlNjJmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-11-22T09:16:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-11-22T09:16:02Z"}, "message": "ira-costs.c (find_allocno_class_costs): Work out the maximum allocno_costs value of the classees with the lowest...\n\ngcc/\n\t* ira-costs.c (find_allocno_class_costs): Work out the maximum\n\tallocno_costs value of the classees with the lowest total_costs\n\tvalue.  Use this to set ALLOCNO_COVER_CLASS_COST here...\n\t(setup_allocno_cover_class_and_costs): ...rather than here.\n\tUse the ALLOCNO_COVER_CLASS_COST for all registers in the\n\tpreferred class.\n\nFrom-SVN: r142117", "tree": {"sha": "824b6e3f916dc06005a343e383db4ae3ed0cd338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824b6e3f916dc06005a343e383db4ae3ed0cd338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ad6db1bdb74c858da4a80c4454306c202e62f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ad6db1bdb74c858da4a80c4454306c202e62f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ad6db1bdb74c858da4a80c4454306c202e62f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ad6db1bdb74c858da4a80c4454306c202e62f1/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6500984e4ea88768b338f05ac0e25de5f326c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6500984e4ea88768b338f05ac0e25de5f326c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6500984e4ea88768b338f05ac0e25de5f326c90"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "69635f64f3ad4342754e7d4c0142c684b8e77361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad6db1bdb74c858da4a80c4454306c202e62f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad6db1bdb74c858da4a80c4454306c202e62f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61ad6db1bdb74c858da4a80c4454306c202e62f1", "patch": "@@ -1,3 +1,12 @@\n+2008-11-22  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira-costs.c (find_allocno_class_costs): Work out the maximum\n+\tallocno_costs value of the classees with the lowest total_costs\n+\tvalue.  Use this to set ALLOCNO_COVER_CLASS_COST here...\n+\t(setup_allocno_cover_class_and_costs): ...rather than here.\n+\tUse the ALLOCNO_COVER_CLASS_COST for all registers in the\n+\tpreferred class.\n+\n 2008-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37323"}, {"sha": "3daeb075d34308aa019dfb3f12f03462eef2c8fd", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ad6db1bdb74c858da4a80c4454306c202e62f1/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ad6db1bdb74c858da4a80c4454306c202e62f1/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=61ad6db1bdb74c858da4a80c4454306c202e62f1", "patch": "@@ -1172,7 +1172,7 @@ find_allocno_class_costs (void)\n \t  ira_allocno_t a, parent_a;\n \t  int rclass, a_num, parent_a_num;\n \t  ira_loop_tree_node_t parent;\n-\t  int best_cost;\n+\t  int best_cost, allocno_cost;\n \t  enum reg_class best, alt_class, common_class;\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n \t  int inc_dec_p = false;\n@@ -1278,6 +1278,7 @@ find_allocno_class_costs (void)\n \t\t  /* Finding best class which is subset of the common\n \t\t     class.  */\n \t\t  best_cost = (1 << (HOST_BITS_PER_INT - 2)) - 1;\n+\t\t  allocno_cost = best_cost;\n \t\t  best = ALL_REGS;\n \t\t  for (k = 0; k < cost_classes_num; k++)\n \t\t    {\n@@ -1302,12 +1303,21 @@ find_allocno_class_costs (void)\n \t\t\t{\n \t\t\t  best_cost\n \t\t\t    = COSTS_OF_ALLOCNO (total_costs, a_num)->cost[k];\n+\t\t\t  allocno_cost\n+\t\t\t    = COSTS_OF_ALLOCNO (allocno_costs, a_num)->cost[k];\n \t\t\t  best = (enum reg_class) rclass;\n \t\t\t}\n \t\t      else if (COSTS_OF_ALLOCNO (total_costs, a_num)->cost[k]\n \t\t\t       == best_cost)\n-\t\t\tbest = ira_reg_class_union[best][rclass];\n+\t\t\t{\n+\t\t\t  best = ira_reg_class_union[best][rclass];\n+\t\t\t  allocno_cost\n+\t\t\t    = MAX (allocno_cost,\n+\t\t\t\t   COSTS_OF_ALLOCNO (allocno_costs,\n+\t\t\t\t\t\t     a_num)->cost[k]);\n+\t\t\t}\n \t\t    }\n+\t\t  ALLOCNO_COVER_CLASS_COST (a) = allocno_cost;\n \t\t}\n \t      if (internal_flag_ira_verbose > 2 && ira_dump_file != NULL\n \t\t  && (pass == 0 || allocno_pref[a_num] != best))\n@@ -1421,6 +1431,7 @@ setup_allocno_cover_class_and_costs (void)\n   int *reg_costs;\n   enum reg_class cover_class, rclass;\n   enum machine_mode mode;\n+  HARD_REG_SET *pref;\n   ira_allocno_t a;\n   ira_allocno_iterator ai;\n \n@@ -1435,10 +1446,7 @@ setup_allocno_cover_class_and_costs (void)\n       if (cover_class == NO_REGS)\n \tcontinue;\n       ALLOCNO_AVAILABLE_REGS_NUM (a) = ira_available_class_regs[cover_class];\n-      num = cost_class_nums[allocno_pref[i]];\n-      ira_assert (num >= 0);\n-      ALLOCNO_COVER_CLASS_COST (a)\n-\t= COSTS_OF_ALLOCNO (allocno_costs, i)->cost[num];\n+      pref = &reg_class_contents[allocno_pref[i]];\n       if (optimize && ALLOCNO_COVER_CLASS (a) != allocno_pref[i])\n \t{\n \t  n = ira_class_hard_regs_num[cover_class];\n@@ -1447,17 +1455,23 @@ setup_allocno_cover_class_and_costs (void)\n \t  for (j = n - 1; j >= 0; j--)\n \t    {\n \t      regno = ira_class_hard_regs[cover_class][j];\n-\t      rclass = REGNO_REG_CLASS (regno);\n-\t      num = cost_class_nums[rclass];\n-\t      if (num < 0)\n+\t      if (TEST_HARD_REG_BIT (*pref, regno))\n+\t\treg_costs[j] = ALLOCNO_COVER_CLASS_COST (a);\n+\t      else\n \t\t{\n-\t\t  /* The hard register class is not a cover class or a\n-\t\t     class not fully inside in a cover class -- use\n-\t\t     the allocno cover class.  */\n-\t\t  ira_assert (ira_hard_regno_cover_class[regno] == cover_class);\n-\t\t  num = cost_class_nums[cover_class];\n+\t\t  rclass = REGNO_REG_CLASS (regno);\n+\t\t  num = cost_class_nums[rclass];\n+\t\t  if (num < 0)\n+\t\t    {\n+\t\t      /* The hard register class is not a cover class or a\n+\t\t\t class not fully inside in a cover class -- use\n+\t\t\t the allocno cover class.  */\n+\t\t      ira_assert (ira_hard_regno_cover_class[regno]\n+\t\t\t\t  == cover_class);\n+\t\t      num = cost_class_nums[cover_class];\n+\t\t    }\n+\t\t  reg_costs[j] = COSTS_OF_ALLOCNO (allocno_costs, i)->cost[num];\n \t\t}\n-\t      reg_costs[j] = COSTS_OF_ALLOCNO (allocno_costs, i)->cost[num];\n \t    }\n \t}\n     }"}]}