{"sha": "469550eb04a94073a477be716178a36e9cfa4bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5NTUwZWIwNGE5NDA3M2E0NzdiZTcxNjE3OGEzNmU5Y2ZhNGJiOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-10T17:24:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-10T17:24:11Z"}, "message": "Fixes for libstdc++/1576\n\n\n\n2001-01-09  Benjamin Kosnik  <bkoz@redhat.com>\n\t                     <kainz@ilm.com>\n\n\tFixes for libstdc++/1576\n\t* src/stdstreams.cc: Initialize with NULL filebuf. Delete\n\tfile, move contents into....\n\t* src/ios.cc: ...Here. Put defines for iostreams objects and\n\tinitialization routines into one file to simplify DSO interaction.\n\t* include/bits/std_iostream.h: Touch.\n\t* include/bits/ios_base.h (_S_synched_with_stdio): Make static.\n\t* src/Makefile.am (sources): Remove stdstreams.cc.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r38871", "tree": {"sha": "107deb0232beda084443cf0e1e84b32fabb0d4e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107deb0232beda084443cf0e1e84b32fabb0d4e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469550eb04a94073a477be716178a36e9cfa4bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469550eb04a94073a477be716178a36e9cfa4bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469550eb04a94073a477be716178a36e9cfa4bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469550eb04a94073a477be716178a36e9cfa4bb9/comments", "author": null, "committer": null, "parents": [{"sha": "761491c8dc565cd85bfe7b59c41706b61faffd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761491c8dc565cd85bfe7b59c41706b61faffd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761491c8dc565cd85bfe7b59c41706b61faffd63"}], "stats": {"total": 163, "additions": 61, "deletions": 102}, "files": [{"sha": "1b41104e1377b21778722ff9d92a52c6ade5a15a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -1,11 +1,25 @@\n+2001-01-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\t                     <kainz@ilm.com>\n+\n+\tFixes for libstdc++/1576\n+\t* src/stdstreams.cc: Initialize with NULL filebuf. Delete\n+\tfile, move contents into....\n+\t* src/ios.cc: ...Here. Put defines for iostreams objects and\n+\tinitialization routines into one file to simplify DSO interaction.\n+\t* include/bits/std_iostream.h: Touch.\n+\t* include/bits/ios_base.h (_S_synched_with_stdio): Make static.\n+\t* src/Makefile.am (sources): Remove stdstreams.cc.\n+\t* src/Makefile.in: Regenerate.\n+\n 2001-01-10  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* tests_flags.in (check_directory): Fix typo.\n \n 2001-01-09  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n+\n          * include/bits/std_complex.h: Fix a typo.\n \n-2001-01-10  Loren J. Rittle  <ljrittle@acm.org>\n+2001-01-09  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* config/os/bsd/freebsd/bits/ctype_inline.h (is): (Make right\n \tcode path:) Remove magic constants and restructure to handle"}, {"sha": "6aea0429d7c9c07c1703469560b16c939bbdcf14", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -294,7 +294,7 @@ namespace std {\n       ~Init();\n     private:\n       static int \t_S_ios_base_init;\n-      bool\t\t_M_synced_with_stdio;\n+      static bool\t_S_synced_with_stdio;\n       filebuf* \t\t_M_cout;\n       filebuf* \t\t_M_cin;\n       filebuf* \t\t_M_cerr;"}, {"sha": "191e09d03ec25bc0f95901c970c31dbdfbc6d28f", "filename": "libstdc++-v3/include/bits/std_iostream.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -1,6 +1,6 @@\n // Standard iostream objects -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,8 +38,8 @@\n #include <bits/std_ostream.h>\n #include <bits/std_istream.h>\n \n-namespace std {\n-\n+namespace std \n+{\n   extern istream cin;\n   extern ostream cout;\n   extern ostream cerr;\n@@ -55,4 +55,6 @@ namespace std {\n   static ios_base::Init __ioinit;\n } // namespace std\n \n-#endif\t/* _CPP_IOSTREAM */\n+#endif\n+\n+"}, {"sha": "a6e15d1c0ebb315cc149ab1b0d61cebaeef16b39", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the src subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+## Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.61 2000/12/23 07:13:57 bkoz Exp $\n+## $Id: Makefile.am,v 1.62 2001/01/04 04:21:42 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -176,7 +176,7 @@ sources = \\\n \tlimitsMEMBERS.cc \\\n \tcomplex_io.cc \\\n \tstdexcept.cc bitset.cc \\\n-\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n+\tc++io.cc ios.cc strstream.cc \\\n \tlocale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n "}, {"sha": "df23ffb6e27f4744f0f27d913d538be6af080fb9", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -170,7 +170,7 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n@@ -258,9 +258,9 @@ libinst_wstring_la_LDFLAGS =\n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n libstdc___la_OBJECTS =  limitsMEMBERS.lo complex_io.lo stdexcept.lo \\\n-bitset.lo c++io.lo ios.lo stdstreams.lo strstream.lo locale.lo \\\n-localename.lo codecvt.lo locale-inst.lo stl-inst.lo misc-inst.lo \\\n-valarray-inst.lo string-inst.lo\n+bitset.lo c++io.lo ios.lo strstream.lo locale.lo localename.lo \\\n+codecvt.lo locale-inst.lo stl-inst.lo misc-inst.lo valarray-inst.lo \\\n+string-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "83ff7ca3aa5fbd234568dc9b41b369d81148a385", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469550eb04a94073a477be716178a36e9cfa4bb9/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=469550eb04a94073a477be716178a36e9cfa4bb9", "patch": "@@ -32,7 +32,8 @@\n //\n \n #include <bits/std_ios.h>\n-#include <bits/std_iostream.h>\n+#include <bits/std_ostream.h>\n+#include <bits/std_istream.h>\n #include <bits/std_fstream.h>\n \n namespace std \n@@ -104,9 +105,20 @@ namespace std\n   const ios_base::seekdir ios_base::cur;\n   const ios_base::seekdir ios_base::end;\n \n+  const int ios_base::_S_local_words;\n   int ios_base::Init::_S_ios_base_init = 0;\n+  bool ios_base::Init::_S_synced_with_stdio = true;\n \n-  const int ios_base::_S_local_words;\n+  istream cin(NULL);\n+  ostream cout(NULL);\n+  ostream cerr(NULL);\n+  ostream clog(NULL);\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  wistream wcin(NULL);\n+  wostream wcout(NULL);\n+  wostream wcerr(NULL);\n+  wostream wclog(NULL);\n+#endif\n \n   ios_base::failure::failure(const string& __str)\n   {\n@@ -126,40 +138,30 @@ namespace std\n     if (++_S_ios_base_init == 1)\n       {\n \t// NB: std_iostream.h creates the four standard files with\n-\t// default buffers. At this point, we swap out the default\n-\t// buffers for the properly-constructed ones, and dispose of\n-\t// the default buffers.\n-\tstreambuf* __old;\n+\t// NULL buffers. At this point, we swap out these placeholder\n+\t// objects for the properly-constructed ones\n        \t_M_cout = new filebuf(1, \"stdout\", ios_base::out);\n \t_M_cin = new filebuf(0, \"stdin\", ios_base::in);\n \t_M_cerr = new filebuf(2, \"stderr\", ios_base::out);\n-\t__old = cout.rdbuf(_M_cout);\n-\t__old->~streambuf();\n-\t__old = cin.rdbuf(_M_cin);\n-\t__old->~streambuf();\n+\tnew (&cout) ostream(_M_cout);\n+\tnew (&cin) istream(_M_cin);\n+\tnew (&cerr) ostream(_M_cerr);\n+\tnew (&clog) ostream(_M_cerr);\n \tcin.tie(&cout);\n-\t__old = cerr.rdbuf(_M_cerr);\n-\t__old->~streambuf();\n \tcerr.flags(ios_base::unitbuf);\n-\t__old = clog.rdbuf(_M_cerr);\n-\t__old->~streambuf();\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n-\twstreambuf* __wold;\n \t_M_wcout = new wfilebuf(1, \"stdout\", ios_base::out);\n \t_M_wcin = new wfilebuf(0, \"stdin\", ios_base::in);\n \t_M_wcerr = new wfilebuf(2, \"stderr\", ios_base::out);\n-\t__wold = wcout.rdbuf(_M_wcout);\n-\t__wold->~wstreambuf();\n-\t__wold = wcin.rdbuf(_M_wcin);\n-\t__wold->~wstreambuf();\n-\twcin.tie(&wcout);\n-\t__wold = wcerr.rdbuf(_M_wcerr);\n-\t__wold->~wstreambuf();\n+\tnew (&wcout) wostream(_M_wcout);\n+\tnew (&wcin) wistream(_M_wcin);\n+\tnew (&wcerr) wostream(_M_wcerr);\n+\tnew (&wclog) wostream(_M_wcerr);\n+\twcin.tie(&cout);\n \twcerr.flags(ios_base::unitbuf);\n-\t__wold = wclog.rdbuf(_M_wcerr);\n-\t__wold->~wstreambuf();\n #endif\n-\t_M_synced_with_stdio = true;\n+\tios_base::Init::_S_synced_with_stdio = true;\n       }\n   }\n \n@@ -314,13 +316,15 @@ namespace std\n   { \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n-    bool __ret = __ioinit._M_synced_with_stdio;\n+    bool __ret = ios_base::Init::_S_synced_with_stdio;\n #endif\n \n     // Turn off sync with C FILE* for cin, cout, cerr, clog iff\n     // currently synchronized.\n     if (!__sync && __ret)\n       {\n+#if 0\n+\t// no longer need to do this\n \t// Need to dispose of the buffers created at initialization.\n \t__ioinit._M_cout->~filebuf();\n \t__ioinit._M_cin->~filebuf();\n@@ -336,23 +340,10 @@ namespace std\n \tcerr.rdbuf(__ioinit._M_cerr);\n \tcerr.flags(ios_base::unitbuf);\n \tclog.rdbuf(__ioinit._M_cerr);\n+#endif\n #ifdef _GLIBCPP_USE_WCHAR_T\n-\t__ioinit._M_wcout->~wfilebuf();\n-\t__ioinit._M_wcin->~wfilebuf();\n-\t__ioinit._M_wcerr->~wfilebuf();\n-\t__ioinit._M_wcout = new wfilebuf();\n-\t__ioinit._M_wcin = new wfilebuf();\n-\t__ioinit._M_wcerr = new wfilebuf();\n-\t__ioinit._M_wcout->open(\"wstdout\", ios_base::out);\n-\t__ioinit._M_wcin->open(\"wstdin\", ios_base::in);\n-\t__ioinit._M_wcerr->open(\"wstderr\", ios_base::out);\n-\twcout.rdbuf(__ioinit._M_wcout);\n-\twcin.rdbuf(__ioinit._M_wcin);\n-\twcerr.rdbuf(__ioinit._M_wcerr);\n-\twcerr.flags(ios_base::unitbuf);\n-\twclog.rdbuf(__ioinit._M_wcerr);\n #endif\n-\t__ioinit._M_synced_with_stdio = false;\n+\tios_base::Init::_S_synced_with_stdio = false;\n       }\n     \n     return __ret; "}, {"sha": "cb69541cf94d771f561087b59cfe4396ac354de7", "filename": "libstdc++-v3/src/stdstreams.cc", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761491c8dc565cd85bfe7b59c41706b61faffd63/libstdc%2B%2B-v3%2Fsrc%2Fstdstreams.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761491c8dc565cd85bfe7b59c41706b61faffd63/libstdc%2B%2B-v3%2Fsrc%2Fstdstreams.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdstreams.cc?ref=761491c8dc565cd85bfe7b59c41706b61faffd63", "patch": "@@ -1,48 +0,0 @@\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_fstream.h>\n-\n-namespace std {\n-\n-  filebuf __cfileinit;\n-  istream cin(&__cfileinit);\n-  ostream cout(&__cfileinit);\n-  ostream cerr(&__cfileinit);\n-  ostream clog(&__cfileinit);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  wfilebuf __wfileinit;\n-  wistream wcin(&__wfileinit);\n-  wostream wcout(&__wfileinit);\n-  wostream wcerr(&__wfileinit);\n-  wostream wclog(&__wfileinit);\n-#endif\n- \n-} // std"}]}