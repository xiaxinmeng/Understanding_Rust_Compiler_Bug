{"sha": "20562de4dfb0e8e1b65ae6c157032a480a2529dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1NjJkZTRkZmIwZThlMWI2NWFlNmMxNTcwMzJhNDgwYTI1MjlkYw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-07-19T15:37:50Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2009-07-19T15:37:50Z"}, "message": "re PR fortran/40727 ([4.4] ICE gfc_simplify_dcmplx(): Bad type when passing BT_COMPLEX to cmplx)\n\n2009-07-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/40727\n\t* fortran/check.c (gfc_check_cmplx, gfc_check_dcmplx): Add check that\n\tthe optional second argument isn't of COMPLEX type.\n\n2009-07-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/40727\n\t* gfortran.dg/intrinsic_cmplx.f90: New test.\n\nFrom-SVN: r149793", "tree": {"sha": "4f7f11dc223e021f749985c70b616d51d4261ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f7f11dc223e021f749985c70b616d51d4261ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20562de4dfb0e8e1b65ae6c157032a480a2529dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20562de4dfb0e8e1b65ae6c157032a480a2529dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20562de4dfb0e8e1b65ae6c157032a480a2529dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20562de4dfb0e8e1b65ae6c157032a480a2529dc/comments", "author": null, "committer": null, "parents": [{"sha": "16bff92192676901670042cdce3fbd5f9c928fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bff92192676901670042cdce3fbd5f9c928fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16bff92192676901670042cdce3fbd5f9c928fc8"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "fcf194abc601a44601c1b7f1f0661bca0c2a70d5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=20562de4dfb0e8e1b65ae6c157032a480a2529dc", "patch": "@@ -1,3 +1,9 @@\n+2009-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/40727\n+\t* fortran/check.c (gfc_check_cmplx, gfc_check_dcmplx): Add check that\n+\tthe optional second argument isn't of COMPLEX type.\n+\n 2009-07-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/40401"}, {"sha": "e19f8124f09577f7f490f6409f006caf19d57935", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=20562de4dfb0e8e1b65ae6c157032a480a2529dc", "patch": "@@ -819,6 +819,15 @@ gfc_check_cmplx (gfc_expr *x, gfc_expr *y, gfc_expr *kind)\n \t\t     gfc_current_intrinsic, &y->where);\n \t  return FAILURE;\n \t}\n+\n+      if (y->ts.type == BT_COMPLEX)\n+\t{\n+\t  gfc_error (\"'%s' argument of '%s' intrinsic at %L must have a type \"\n+\t\t     \"of either REAL or INTEGER\", gfc_current_intrinsic_arg[1],\n+\t\t     gfc_current_intrinsic, &y->where);\n+\t  return FAILURE;\n+\t}\n+\n     }\n \n   if (kind_check (kind, 2, BT_COMPLEX) == FAILURE)\n@@ -977,6 +986,14 @@ gfc_check_dcmplx (gfc_expr *x, gfc_expr *y)\n \t\t     gfc_current_intrinsic, &y->where);\n \t  return FAILURE;\n \t}\n+\n+      if (y->ts.type == BT_COMPLEX)\n+\t{\n+\t  gfc_error (\"'%s' argument of '%s' intrinsic at %L must have a type \"\n+\t\t     \"of either REAL or INTEGER\", gfc_current_intrinsic_arg[1],\n+\t\t     gfc_current_intrinsic, &y->where);\n+\t  return FAILURE;\n+\t}\n     }\n \n   return SUCCESS;"}, {"sha": "a9cb57bc17211c6a5f81435384f6c094b0d08516", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20562de4dfb0e8e1b65ae6c157032a480a2529dc", "patch": "@@ -1,3 +1,8 @@\n+2009-07-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/40727\n+\t* gfortran.dg/intrinsic_cmplx.f90: New test.\n+\n 2009-07-19   Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/34670"}, {"sha": "744e77a85a441452b1a5214923d0ce4ab091d9a0", "filename": "gcc/testsuite/gfortran.dg/intrinsic_cmplx.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_cmplx.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20562de4dfb0e8e1b65ae6c157032a480a2529dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_cmplx.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_cmplx.f90?ref=20562de4dfb0e8e1b65ae6c157032a480a2529dc", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR fortran/40727\n+program test\n+  integer, parameter :: sp = kind(1.e0), dp = kind(1.d0)\n+  complex(sp) :: s\n+  complex(dp) :: d\n+  s =  cmplx(0.e0, cmplx(0.e0,0.e0)) ! { dg-error \"either REAL or INTEGER\" }\n+  d = dcmplx(0.d0, cmplx(0.d0,0.d0)) ! { dg-error \"either REAL or INTEGER\" }\n+end program test"}]}