{"sha": "9978052974a84e9666af3c1f69bdf599c43cd5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3ODA1Mjk3NGE4NGU5NjY2YWYzYzFmNjliZGY1OTljNDNjZDVkMA==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2001-09-07T18:14:20Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-09-07T18:14:20Z"}, "message": "ResourceBundle fixes\n\nFrom-SVN: r45472", "tree": {"sha": "1daa52ecfcdc9a367352e10098e5eaece7a0381e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1daa52ecfcdc9a367352e10098e5eaece7a0381e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9978052974a84e9666af3c1f69bdf599c43cd5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9978052974a84e9666af3c1f69bdf599c43cd5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9978052974a84e9666af3c1f69bdf599c43cd5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9978052974a84e9666af3c1f69bdf599c43cd5d0/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5660465a0bc5f6e820e56e650822e8316a6ee99c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5660465a0bc5f6e820e56e650822e8316a6ee99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5660465a0bc5f6e820e56e650822e8316a6ee99c"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "6d872b2731cc46ce38204a1d9ba289bbe23706d2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9978052974a84e9666af3c1f69bdf599c43cd5d0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9978052974a84e9666af3c1f69bdf599c43cd5d0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9978052974a84e9666af3c1f69bdf599c43cd5d0", "patch": "@@ -1,3 +1,11 @@\n+2001-09-06  Anthony Green  <green@redhat.com>\n+\n+\t* java/util/ResourceBundle.java (tryLocalBundle): Eliminate\n+\tredundant method calls.\n+\t(emptyLocale): New private member.\n+\t(tryBundle): Use emptyLocale.  Remove duplicate code.  Only cache\n+\texact matches.\n+\n 2001-09-06  Tom Tromey  <tromey@redhat.com>\n \n \t* java/text/RuleBasedCollator.java (clone): Rewrote."}, {"sha": "30f28a6d6851977ca9093b2f2b406fe000fdecb1", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9978052974a84e9666af3c1f69bdf599c43cd5d0/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9978052974a84e9666af3c1f69bdf599c43cd5d0/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=9978052974a84e9666af3c1f69bdf599c43cd5d0", "patch": "@@ -200,9 +200,15 @@ public static final ResourceBundle getBundle(String baseName,\n    * references to the resource bundle.  */\n   private static Map resourceBundleCache = new HashMap();\n \n+  /**\n+   * The `empty' locale is created once in order to optimize\n+   * tryBundle().  \n+   */\n+  private static final Locale emptyLocale = new Locale (\"\", \"\");\n+\n   /**\n    * Tries to load a class or a property file with the specified name.\n-   * @param name the name.\n+   * @param localizedName the name.\n    * @param locale the locale, that must be used exactly.\n    * @param classloader the classloader.\n    * @param bundle the back up (parent) bundle\n@@ -229,21 +235,24 @@ private static final ResourceBundle tryBundle(String localizedName,\n \t}\n     }\n \n+    // foundBundle holds exact matches for the localizedName resource\n+    // bundle, which may later be cached.\n+    ResourceBundle foundBundle = null;\n+\n     try\n       {\n \tjava.io.InputStream is;\n+\tfinal String resourceName =\n+\t  localizedName.replace('.', '/') + \".properties\";\n \tif (classloader == null)\n-\t  is = ClassLoader.getSystemResourceAsStream\n-\t    (localizedName.replace('.', '/') + \".properties\");\n+\t  is = ClassLoader.getSystemResourceAsStream (resourceName);\n \telse\n-\t  is = classloader.getResourceAsStream\n-\t    (localizedName.replace('.', '/') + \".properties\");\n+\t  is = classloader.getResourceAsStream (resourceName);\n \tif (is != null)\n \t  {\n-\t    ResourceBundle rb = new PropertyResourceBundle(is);\n-\t    rb.parent = bundle;\n-\t    rb.locale = locale;\n-\t    bundle = rb;\n+\t    foundBundle = new PropertyResourceBundle(is);\n+\t    foundBundle.parent = bundle;\n+\t    foundBundle.locale = locale;\n \t  }\n       }\n     catch (java.io.IOException ex)\n@@ -257,10 +266,9 @@ private static final ResourceBundle tryBundle(String localizedName,\n \t  rbClass = Class.forName(localizedName);\n \telse\n \t  rbClass = classloader.loadClass(localizedName);\n-\tResourceBundle rb = (ResourceBundle) rbClass.newInstance();\n-\trb.parent = bundle;\n-\trb.locale = locale;\n-\tbundle = rb;\n+\tfoundBundle = (ResourceBundle) rbClass.newInstance();\n+\tfoundBundle.parent = bundle;\n+\tfoundBundle.locale = locale;\n       }\n     catch (ClassNotFoundException ex)\n       {\n@@ -274,11 +282,10 @@ private static final ResourceBundle tryBundle(String localizedName,\n \t// XXX should we also ignore ClassCastException?\n       }\n \n-    // Put the bundle in the cache\n-    if (bundle != null)\n-      cache.put(localizedName, new SoftReference(bundle));\n+    if (foundBundle != null)\n+      cache.put(localizedName, new SoftReference(foundBundle));\n \n-    return bundle;\n+    return foundBundle != null ? foundBundle : bundle;\n   }\n \n   /**\n@@ -298,26 +305,31 @@ private static final ResourceBundle tryLocalBundle(String baseName,\n \t\t\t\t\t\t     ResourceBundle bundle,\n \t\t\t\t\t\t     HashMap cache)\n   {\n-    if (locale.getLanguage().length() > 0)\n+    final String language = locale.getLanguage();\n+\n+    if (language.length() > 0)\n       {\n-\tString name = baseName + \"_\" + locale.getLanguage();\n+\tfinal String country = locale.getCountry();\n+\tString name = baseName + \"_\" + language;\n \n-\tif (locale.getCountry().length() != 0)\n+\tif (country.length() != 0)\n \t  {\n \t    bundle = tryBundle(name,\n-\t\t\t       new Locale(locale.getLanguage(), \"\"),\n+\t\t\t       new Locale(language, \"\"),\n \t\t\t       classloader, bundle, cache);\n \n-\t    name += \"_\" + locale.getCountry();\n+\t    name += \"_\" + country;\n+\n+\t    final String variant = locale.getVariant();\n \n-\t    if (locale.getVariant().length() != 0)\n+\t    if (variant.length() != 0)\n \t      {\n \t\tbundle = tryBundle(name,\n-\t\t\t\t   new Locale(locale.getLanguage(),\n-\t\t\t\t\t      locale.getCountry()),\n+\t\t\t\t   new Locale(language,\n+\t\t\t\t\t      country),\n \t\t\t\t   classloader, bundle, cache);\n \n-\t\tname += \"_\" + locale.getVariant();\n+\t\tname += \"_\" + variant;\n \t      }\n \t  }\n \tbundle = tryBundle(name, locale, classloader, bundle, cache);\n@@ -367,14 +379,14 @@ public static final synchronized ResourceBundle getBundle(String baseName,\n \t  }\n       }\n \n-    ResourceBundle baseBundle = tryBundle(baseName, new Locale(\"\", \"\"),\n+    ResourceBundle baseBundle = tryBundle(baseName, emptyLocale,\n \t\t\t\t\t  classLoader, null, cache);\n     if (baseBundle == null)\n       // JDK says, that if one provides a bundle base_en_UK, one\n       // must also provide the bundles base_en and base.\n       // This implies that if there is no bundle for base, there\n       // is no bundle at all.\n-      throw new MissingResourceException(\"Bundle not found\", baseName, \"\");\n+      throw new MissingResourceException(\"Bundle \" + baseName + \" not found\", baseName, \"\");\n \n     // Now use the default locale.\n     ResourceBundle bundle = tryLocalBundle(baseName, locale,"}]}