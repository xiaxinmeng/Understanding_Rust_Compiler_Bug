{"sha": "74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwMzJmNDcxZGI3OWU5NmViODZhOWYyYmE0M2EzNmNhNmMxZGRjZg==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@msn.com", "date": "2015-09-08T22:18:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-09-08T22:18:11Z"}, "message": "Remove limit_scops\n\nThis patch removes graphite-scop-detection.c:limit_scops function and fix\nrelated issues arising because of that. The functionality limit_scop was added\nas an intermediate step to discard the loops which graphite could not\nhandle. Removing limit_scop required handling of different cases of loops and\nsurrounding code.  The scop is now larger so most test cases required 'number of\nscops detected' to be fixed. By increasing the size of scop we can now optimize\nloops which are 'siblings' of each other. This could enable loop fusion on a\nnumber of loops. Since in the graphite framework we mostly want to opimize\nloop-nests/adjacent-loops, we now discard scops with less than 2 loops. We\nalso discard scops without any data references.\n\nEssentially:\n - Remove limite_scops.\n - Only select scops when there are at least two loops (loop nest or, side by side).\n - Discard loops without data-refs.\n - Fix test cases.\n\nPasses bootstrap and reg-test.\n\ngcc/ChangeLog:\n\n2015-09-02  Aditya Kumar  <hiraditya@msn.com>\n            Sebastian Pop  <s.pop@samsung.com>\n\n        * graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n        Return the parameter if it was saved in corresponding\n        parameter_rename_map of the region.\n        (copy_def): Copy def from sese region to the newly created region.\n        (copy_internal_parameters): Copy all the internal parameters defined\n        within a region to the newly created region.\n        (graphite_regenerate_ast_isl): Copy parameters to the new region before\n        translating isl to gimple.\n        * graphite-scop-detection.c (graphite_can_represent_loop): Bail out if\n          the loop-nest does not have any data-references.\n        (build_graphite_scops): Create a scop only when there is at least one\n        loop inside it.\n        (contains_only_close_phi_nodes): Deleted.\n        (print_graphite_scop_statistics): Deleted\n        (print_graphite_statistics): Deleted\n        (limit_scops): Deleted.\n        (build_scops): Removed call to limit_scops.\n        * sese.c (new_sese): Construct.\n        (free_sese): Destruct.\n        (sese_add_exit_phis_edge): update_stmt after exit phi edge has been\n        added.\n        (set_rename): Pass sese region so that parameters inside the region can\n        be added to its parameter_rename_map.\n        (rename_uses): Pass sese region.\n        (graphite_copy_stmts_from_block): Do not copy parameters that have been\n        generated in the header of the scop. For each SSA_NAME in the\n        parameter_rename_map rename its usage.\n        (invariant_in_sese_p_rec): Return false if tree t is defined outside\n        sese region.\n        (scalar_evolution_in_region): If the tree t is invariant just return t.\n        * sese.h: Added a parameter renamne map (parameter_rename_map_t) to\n          struct sese to keep track of all the parameters which need renaming.\n        * tree-data-ref.c (loop_nest_has_data_refs): Check if a loop nest has\n          any data-refs.\n        * tree-data-ref.h: Declaration of loop_nest_has_data_refs.\n\ngcc/testsuite/ChangeLog:\n\n2015-09-02  Aditya Kumar  <hiraditya@msn.com>\n            Sebastian Pop  <s.pop@samsung.com>\n\n        * gcc.dg/graphite/block-0.c: Modifed test case to match current output.\n        * gcc.dg/graphite/block-1.c: Same.\n        * gcc.dg/graphite/block-5.c: Same.\n        * gcc.dg/graphite/block-6.c: Same.\n        * gcc.dg/graphite/interchange-1.c: Same.\n        * gcc.dg/graphite/interchange-10.c: Same.\n        * gcc.dg/graphite/interchange-11.c: Same.\n        * gcc.dg/graphite/interchange-13.c: Same.\n        * gcc.dg/graphite/interchange-14.c: Same.\n        * gcc.dg/graphite/interchange-3.c: Same.\n        * gcc.dg/graphite/interchange-4.c: Same.\n        * gcc.dg/graphite/interchange-7.c: Same.\n        * gcc.dg/graphite/interchange-8.c: Same.\n        * gcc.dg/graphite/interchange-9.c: Same.\n        * gcc.dg/graphite/isl-codegen-loop-dumping.c: Same.\n        * gcc.dg/graphite/pr35356-1.c (foo): Same.\n        * gcc.dg/graphite/pr37485.c: Same.\n        * gcc.dg/graphite/scop-0.c (int toto): Same.\n        * gcc.dg/graphite/scop-1.c: Same.\n        * gcc.dg/graphite/scop-10.c: Same.\n        * gcc.dg/graphite/scop-11.c: Same.\n        * gcc.dg/graphite/scop-12.c: Same.\n        * gcc.dg/graphite/scop-13.c: Same.\n        * gcc.dg/graphite/scop-16.c: Same.\n        * gcc.dg/graphite/scop-17.c: Same.\n        * gcc.dg/graphite/scop-18.c: Same.\n        * gcc.dg/graphite/scop-2.c: Same.\n        * gcc.dg/graphite/scop-21.c (int test): Same.\n        * gcc.dg/graphite/scop-22.c (void foo): Same.\n        * gcc.dg/graphite/scop-4.c: Same.\n        * gcc.dg/graphite/scop-5.c: Same.\n        * gcc.dg/graphite/scop-6.c: Same.\n        * gcc.dg/graphite/scop-7.c: Same.\n        * gcc.dg/graphite/scop-8.c: Same.\n        * gcc.dg/graphite/scop-9.c: Same.\n        * gcc.dg/graphite/scop-mvt.c (void mvt): Introduced dependency so that\n          data-refs remain inside the inner loop.\n        * gcc.dg/graphite/uns-block-1.c: Modifed test case to match o/p.\n        * gcc.dg/graphite/uns-interchange-14.c: Same.\n        * gcc.dg/graphite/uns-interchange-9.c: Same.\n        * gfortran.dg/graphite/interchange-3.f90\n\nlibgomp/ChangeLog:\n\n2015-09-04  Aditya Kumar  <hiraditya@msn.com>\n            Sebastian Pop  <s.pop@samsung.com>\n\n        * testsuite/libgomp.graphite/bounds.c (int foo): Modifed test case to\n          match o/p.\n        * testsuite/libgomp.graphite/force-parallel-1.c (void parloop): Same.\n        * testsuite/libgomp.graphite/force-parallel-4.c: Same.\n        * testsuite/libgomp.graphite/force-parallel-5.c: Same.\n        * testsuite/libgomp.graphite/force-parallel-7.c: Same.\n        * testsuite/libgomp.graphite/force-parallel-8.c: Same.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r227567", "tree": {"sha": "4ae633205ff90db31f378cc5d617287718e64532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ae633205ff90db31f378cc5d617287718e64532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71a678232eca441b374221d2544404e41fbe572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71a678232eca441b374221d2544404e41fbe572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71a678232eca441b374221d2544404e41fbe572"}], "stats": {"total": 596, "additions": 381, "deletions": 215}, "files": [{"sha": "dbd0bd6ad25db4006548f6209059d4d3cb2b53a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -1,3 +1,42 @@\n+2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n+\tReturn the parameter if it was saved in corresponding\n+\tparameter_rename_map of the region.\n+\t(copy_def): Copy def from sese region to the newly created region.\n+\t(copy_internal_parameters): Copy all the internal parameters defined\n+\twithin a region to the newly created region.\n+\t(graphite_regenerate_ast_isl): Copy parameters to the new region before\n+\ttranslating isl to gimple.\n+\t* graphite-scop-detection.c (graphite_can_represent_loop): Bail out if\n+\tthe loop-nest does not have any data-references.\n+\t(build_graphite_scops): Create a scop only when there is at least one\n+\tloop inside it.\n+\t(contains_only_close_phi_nodes): Deleted.\n+\t(print_graphite_scop_statistics): Deleted\n+\t(print_graphite_statistics): Deleted\n+\t(limit_scops): Deleted.\n+\t(build_scops): Removed call to limit_scops.\n+\t* sese.c (new_sese): Construct.\n+\t(free_sese): Destruct.\n+\t(sese_add_exit_phis_edge): update_stmt after exit phi edge has been\n+\tadded.\n+\t(set_rename): Pass sese region so that parameters inside the region can\n+\tbe added to its parameter_rename_map.\n+\t(rename_uses): Pass sese region.\n+\t(graphite_copy_stmts_from_block): Do not copy parameters that have been\n+\tgenerated in the header of the scop. For each SSA_NAME in the\n+\tparameter_rename_map rename its usage.\n+\t(invariant_in_sese_p_rec): Return false if tree t is defined outside\n+\tsese region.\n+\t(scalar_evolution_in_region): If the tree t is invariant just return t.\n+\t* sese.h: Added a parameter renamne map (parameter_rename_map_t) to\n+\tstruct sese to keep track of all the parameters which need renaming.\n+\t* tree-data-ref.c (loop_nest_has_data_refs): Check if a loop nest has\n+\tany data-refs.\n+\t* tree-data-ref.h: Declaration of loop_nest_has_data_refs.\n+\n 2015-09-08  Tom de Vries  <tom@codesourcery.com>\n \n \t* Makefile.in (generated_files): Add params.list."}, {"sha": "a8c99c3faad99e7ef46fbd3f2a10c2dc5e19750e", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -57,7 +57,9 @@ extern \"C\" {\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"gimple-ssa.h\"\n+#include \"tree-phinodes.h\"\n #include \"tree-into-ssa.h\"\n+#include \"ssa-iterators.h\"\n #include <map>\n #include \"graphite-isl-ast-to-gimple.h\"\n \n@@ -286,7 +288,12 @@ gcc_expression_from_isl_ast_expr_id (tree type,\n   gcc_assert (res != ip.end () &&\n \t      \"Could not map isl_id to tree expression\");\n   isl_ast_expr_free (expr_id);\n-  return fold_convert (type, res->second);\n+  tree t = res->second;\n+  tree *val = region->parameter_rename_map->get(t);\n+\n+  if (!val)\n+   val = &t;\n+  return fold_convert (type, *val);\n }\n \n /* Converts an isl_ast_expr_int expression E to a GCC expression tree of\n@@ -1063,6 +1070,69 @@ scop_to_isl_ast (scop_p scop, ivs_params &ip)\n   return ast_isl;\n }\n \n+/* Copy def from sese REGION to the newly created TO_REGION. TR is defined by\n+   DEF_STMT. GSI points to entry basic block of the TO_REGION.  */\n+\n+static void\n+copy_def(tree tr, gimple def_stmt, sese region, sese to_region, gimple_stmt_iterator *gsi)\n+{\n+  if (!defined_in_sese_p (tr, region))\n+    return;\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+\n+  FOR_EACH_SSA_USE_OPERAND (use_p, def_stmt, iter, SSA_OP_USE)\n+    {\n+      tree use_tr = USE_FROM_PTR (use_p);\n+\n+      /* Do not copy parameters that have been generated in the header of the\n+\t scop.  */\n+      if (region->parameter_rename_map->get(use_tr))\n+\tcontinue;\n+\n+      gimple def_of_use = SSA_NAME_DEF_STMT (use_tr);\n+      if (!def_of_use)\n+\tcontinue;\n+\n+      copy_def (use_tr, def_of_use, region, to_region, gsi);\n+    }\n+\n+  gimple copy = gimple_copy (def_stmt);\n+  gsi_insert_after (gsi, copy, GSI_NEW_STMT);\n+\n+  /* Create new names for all the definitions created by COPY and\n+     add replacement mappings for each new name.  */\n+  def_operand_p def_p;\n+  ssa_op_iter op_iter;\n+  FOR_EACH_SSA_DEF_OPERAND (def_p, copy, op_iter, SSA_OP_ALL_DEFS)\n+    {\n+      tree old_name = DEF_FROM_PTR (def_p);\n+      tree new_name = create_new_def_for (old_name, copy, def_p);\n+      region->parameter_rename_map->put(old_name, new_name);\n+    }\n+\n+  update_stmt (copy);\n+}\n+\n+static void\n+copy_internal_parameters(sese region, sese to_region)\n+{\n+  /* For all the parameters which definitino is in the if_region->false_region,\n+     insert code on true_region (if_region->true_region->entry). */\n+\n+  int i;\n+  tree tr;\n+  gimple_stmt_iterator gsi = gsi_start_bb(to_region->entry->dest);\n+\n+  FOR_EACH_VEC_ELT (region->params, i, tr)\n+    {\n+      // If def is not in region.\n+      gimple def_stmt = SSA_NAME_DEF_STMT (tr);\n+      if (def_stmt)\n+\tcopy_def (tr, def_stmt, region, to_region, &gsi);\n+    }\n+}\n+\n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for\n    the given SCOP.  Return true if code generation succeeded.\n \n@@ -1102,10 +1172,13 @@ graphite_regenerate_ast_isl (scop_p scop)\n \n   context_loop = SESE_ENTRY (region)->src->loop_father;\n \n-  translate_isl_ast_to_gimple t (region);\n+  /* Copy all the parameters which are defined in the region.  */\n+  copy_internal_parameters(if_region->false_region, if_region->true_region);\n \n-  t.translate_isl_ast (context_loop, root_node, if_region->true_region->entry,\n-\t\t     ip);\n+  translate_isl_ast_to_gimple t(region);\n+  edge e = single_succ_edge (if_region->true_region->entry->dest);\n+  split_edge (e);\n+  t.translate_isl_ast (context_loop, root_node, e, ip);\n \n   mark_virtual_operands_for_renaming (cfun);\n   update_ssa (TODO_update_ssa);"}, {"sha": "3ac56dedd04f4bf4b98b7c0273d6c7907069de66", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 22, "deletions": 151, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -472,6 +472,17 @@ graphite_can_represent_loop (basic_block scop_entry, loop_p loop)\n   tree niter;\n   struct tree_niter_desc niter_desc;\n \n+  if (!loop_nest_has_data_refs (loop))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"[scop-detection-fail] \");\n+\t  fprintf (dump_file, \"Loop %d does not have any data reference.\\n\",\n+\t\t   loop->num);\n+\t}\n+      return false;\n+    }\n+\n   /* FIXME: For the moment, graphite cannot be used on loops that\n      iterate using induction variables that wrap.  */\n \n@@ -1155,8 +1166,17 @@ build_graphite_scops (vec<sd_region> regions,\n       if (!exit)\n \tcontinue;\n \n-      scop = new_scop (new_sese (entry, exit));\n-      scops->safe_push (scop);\n+      sese sese_reg = new_sese (entry, exit);\n+      scop = new_scop (sese_reg);\n+\n+      build_sese_loop_nests (sese_reg);\n+\n+      /* Scops with one or no loops are not interesting.  */\n+      if (SESE_LOOP_NEST (sese_reg).length () > 1)\n+\tscops->safe_push (scop);\n+      else if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Discarded scop: %d loops\\n\",\n+\t\t SESE_LOOP_NEST (sese_reg).length ());\n \n       /* Are there overlapping SCoPs?  */\n #ifdef ENABLE_CHECKING\n@@ -1172,151 +1192,6 @@ build_graphite_scops (vec<sd_region> regions,\n     }\n }\n \n-/* Returns true when BB contains only close phi nodes.  */\n-\n-static bool\n-contains_only_close_phi_nodes (basic_block bb)\n-{\n-  gimple_stmt_iterator gsi;\n-\n-  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-    if (gimple_code (gsi_stmt (gsi)) != GIMPLE_LABEL)\n-      return false;\n-\n-  return true;\n-}\n-\n-/* Print statistics for SCOP to FILE.  */\n-\n-static void\n-print_graphite_scop_statistics (FILE* file, scop_p scop)\n-{\n-  long n_bbs = 0;\n-  long n_loops = 0;\n-  long n_stmts = 0;\n-  long n_conditions = 0;\n-  long n_p_bbs = 0;\n-  long n_p_loops = 0;\n-  long n_p_stmts = 0;\n-  long n_p_conditions = 0;\n-\n-  basic_block bb;\n-\n-  FOR_ALL_BB_FN (bb, cfun)\n-    {\n-      gimple_stmt_iterator psi;\n-      loop_p loop = bb->loop_father;\n-\n-      if (!bb_in_sese_p (bb, SCOP_REGION (scop)))\n-\tcontinue;\n-\n-      n_bbs++;\n-      n_p_bbs += bb->count;\n-\n-      if (EDGE_COUNT (bb->succs) > 1)\n-\t{\n-\t  n_conditions++;\n-\t  n_p_conditions += bb->count;\n-\t}\n-\n-      for (psi = gsi_start_bb (bb); !gsi_end_p (psi); gsi_next (&psi))\n-\t{\n-\t  n_stmts++;\n-\t  n_p_stmts += bb->count;\n-\t}\n-\n-      if (loop->header == bb && loop_in_sese_p (loop, SCOP_REGION (scop)))\n-\t{\n-\t  n_loops++;\n-\t  n_p_loops += bb->count;\n-\t}\n-\n-    }\n-\n-  fprintf (file, \"\\nBefore limit_scops SCoP statistics (\");\n-  fprintf (file, \"BBS:%ld, \", n_bbs);\n-  fprintf (file, \"LOOPS:%ld, \", n_loops);\n-  fprintf (file, \"CONDITIONS:%ld, \", n_conditions);\n-  fprintf (file, \"STMTS:%ld)\\n\", n_stmts);\n-  fprintf (file, \"\\nBefore limit_scops SCoP profiling statistics (\");\n-  fprintf (file, \"BBS:%ld, \", n_p_bbs);\n-  fprintf (file, \"LOOPS:%ld, \", n_p_loops);\n-  fprintf (file, \"CONDITIONS:%ld, \", n_p_conditions);\n-  fprintf (file, \"STMTS:%ld)\\n\", n_p_stmts);\n-}\n-\n-/* Print statistics for SCOPS to FILE.  */\n-\n-static void\n-print_graphite_statistics (FILE* file, vec<scop_p> scops)\n-{\n-  int i;\n-  scop_p scop;\n-\n-  FOR_EACH_VEC_ELT (scops, i, scop)\n-    print_graphite_scop_statistics (file, scop);\n-}\n-\n-/* We limit all SCoPs to SCoPs, that are completely surrounded by a loop.\n-\n-   Example:\n-\n-   for (i      |\n-     {         |\n-       for (j  |  SCoP 1\n-       for (k  |\n-     }         |\n-\n-   * SCoP frontier, as this line is not surrounded by any loop. *\n-\n-   for (l      |  SCoP 2\n-\n-   This is necessary as scalar evolution and parameter detection need a\n-   outermost loop to initialize parameters correctly.\n-\n-   TODO: FIX scalar evolution and parameter detection to allow more flexible\n-         SCoP frontiers.  */\n-\n-static void\n-limit_scops (vec<scop_p> *scops)\n-{\n-  auto_vec<sd_region, 3> regions;\n-\n-  int i;\n-  scop_p scop;\n-\n-  FOR_EACH_VEC_ELT (*scops, i, scop)\n-    {\n-      int j;\n-      loop_p loop;\n-      sese region = SCOP_REGION (scop);\n-      build_sese_loop_nests (region);\n-\n-      FOR_EACH_VEC_ELT (SESE_LOOP_NEST (region), j, loop)\n-        if (!loop_in_sese_p (loop_outer (loop), region)\n-\t    && single_exit (loop))\n-          {\n-\t    sd_region open_scop;\n-\t    open_scop.entry = loop->header;\n-\t    open_scop.exit = single_exit (loop)->dest;\n-\n-\t    /* This is a hack on top of the limit_scops hack.  The\n-\t       limit_scops hack should disappear all together.  */\n-\t    if (single_succ_p (open_scop.exit)\n-\t\t&& contains_only_close_phi_nodes (open_scop.exit))\n-\t      open_scop.exit = single_succ_edge (open_scop.exit)->dest;\n-\n-\t    regions.safe_push (open_scop);\n-\t  }\n-    }\n-\n-  free_scops (*scops);\n-  scops->create (3);\n-\n-  create_sese_edges (regions);\n-  build_graphite_scops (regions, scops);\n-}\n-\n /* Returns true when P1 and P2 are close phis with the same\n    argument.  */\n \n@@ -1501,10 +1376,6 @@ build_scops (vec<scop_p> *scops)\n   create_sese_edges (regions);\n   build_graphite_scops (regions, scops);\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    print_graphite_statistics (dump_file, *scops);\n-\n-  limit_scops (scops);\n   regions.release ();\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "3b716f54e1a9a2e0f63f4475ee7027f16f26b2c3", "filename": "gcc/sese.c", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -267,6 +267,7 @@ new_sese (edge entry, edge exit)\n   SESE_LOOP_NEST (region).create (3);\n   SESE_ADD_PARAMS (region) = true;\n   SESE_PARAMS (region).create (3);\n+  region->parameter_rename_map = new parameter_rename_map_t;\n \n   return region;\n }\n@@ -281,6 +282,8 @@ free_sese (sese region)\n \n   SESE_PARAMS (region).release ();\n   SESE_LOOP_NEST (region).release ();\n+  delete region->parameter_rename_map;\n+  region->parameter_rename_map = NULL;\n \n   XDELETE (region);\n }\n@@ -294,6 +297,7 @@ sese_add_exit_phis_edge (basic_block exit, tree use, edge false_e, edge true_e)\n   create_new_def_for (use, phi, gimple_phi_result_ptr (phi));\n   add_phi_arg (phi, use, false_e, UNKNOWN_LOCATION);\n   add_phi_arg (phi, use, true_e, UNKNOWN_LOCATION);\n+  update_stmt (phi);\n }\n \n /* Insert in the block BB phi nodes for variables defined in REGION\n@@ -373,12 +377,19 @@ get_rename (rename_map_type *rename_map, tree old_name)\n /* Register in RENAME_MAP the rename tuple (OLD_NAME, EXPR).  */\n \n static void\n-set_rename (rename_map_type *rename_map, tree old_name, tree expr)\n+set_rename (rename_map_type *rename_map, tree old_name, tree expr, sese region)\n {\n   if (old_name == expr)\n     return;\n \n   rename_map->put (old_name, expr);\n+\n+  tree t;\n+  int i;\n+  /* For a parameter of a scop we dont want to rename it.  */\n+  FOR_EACH_VEC_ELT (SESE_PARAMS (region), i, t)\n+    if (old_name == t)\n+      region->parameter_rename_map->put(old_name, expr);\n }\n \n /* Renames the scalar uses of the statement COPY, using the\n@@ -484,7 +495,7 @@ rename_uses (gimple copy, rename_map_type *rename_map,\n \t    recompute_tree_invariant_for_addr_expr (rhs);\n \t}\n \n-      set_rename (rename_map, old_name, new_expr);\n+      set_rename (rename_map, old_name, new_expr, region);\n     }\n \n   return changed;\n@@ -525,6 +536,14 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t  && scev_analyzable_p (lhs, region))\n \tcontinue;\n \n+      /* Do not copy parameters that have been generated in the header of the\n+\t scop.  */\n+      if (is_gimple_assign (stmt)\n+\t  && (lhs = gimple_assign_lhs (stmt))\n+\t  && TREE_CODE (lhs) == SSA_NAME\n+\t  && region->parameter_rename_map->get(lhs))\n+\tcontinue;\n+\n       /* Create a new copy of STMT and duplicate STMT's virtual\n \t operands.  */\n       copy = gimple_copy (stmt);\n@@ -539,7 +558,7 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n  \t{\n  \t  tree old_name = DEF_FROM_PTR (def_p);\n  \t  tree new_name = create_new_def_for (old_name, copy, def_p);\n-\t  set_rename (rename_map, old_name, new_name);\n+\t  set_rename (rename_map, old_name, new_name, region);\n  \t}\n \n       if (rename_uses (copy, rename_map, &gsi_tgt, region, loop, iv_map,\n@@ -549,6 +568,25 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t  fold_stmt_inplace (&gsi_tgt);\n \t}\n \n+      /* For each SSA_NAME in the parameter_rename_map rename their usage.  */\n+      ssa_op_iter iter;\n+      use_operand_p use_p;\n+      if (!is_gimple_debug (copy))\n+\tFOR_EACH_SSA_USE_OPERAND (use_p, copy, iter, SSA_OP_USE)\n+\t  {\n+\t    tree old_name = USE_FROM_PTR (use_p);\n+\n+\t    if (TREE_CODE (old_name) != SSA_NAME\n+\t\t|| SSA_NAME_IS_DEFAULT_DEF (old_name))\n+\t      continue;\n+\n+\t    tree *new_expr = region->parameter_rename_map->get (old_name);\n+\t    if (!new_expr)\n+\t      continue;\n+\n+\t    replace_exp (use_p, *new_expr);\n+\t  }\n+\n       update_stmt (copy);\n     }\n }\n@@ -722,6 +760,35 @@ set_ifsese_condition (ifsese if_region, tree condition)\n   gsi_insert_after (&gsi, cond_stmt, GSI_NEW_STMT);\n }\n \n+/* Return false if T is completely defined outside REGION.  */\n+\n+static bool\n+invariant_in_sese_p_rec (tree t, sese region)\n+{\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+  if (!defined_in_sese_p (t, region))\n+    return true;\n+\n+  gimple stmt = SSA_NAME_DEF_STMT (t);\n+\n+  if (gimple_code (stmt) == GIMPLE_PHI\n+      || gimple_code (stmt) == GIMPLE_CALL)\n+    return false;\n+\n+  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n+    {\n+      tree use = USE_FROM_PTR (use_p);\n+      if (!defined_in_sese_p (use, region))\n+\tcontinue;\n+\n+      if (!invariant_in_sese_p_rec (use, region))\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n /* Returns the scalar evolution of T in REGION.  Every variable that\n    is not defined in the REGION is considered a parameter.  */\n \n@@ -752,6 +819,9 @@ scalar_evolution_in_region (sese region, loop_p loop, tree t)\n       t = compute_overall_effect_of_inner_loop (def_loop, t);\n       return t;\n     }\n-  else\n-    return instantiate_scev (before, loop, t);\n+\n+  if (invariant_in_sese_p_rec (t, region))\n+    return t;\n+\n+  return instantiate_scev (before, loop, t);\n }"}, {"sha": "b025a4dd821c16c47cca43a7c6aa1530fa7210e7", "filename": "gcc/sese.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -22,6 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SESE_H\n #define GCC_SESE_H\n \n+typedef hash_map<tree, tree> parameter_rename_map_t;\n+\n /* A Single Entry, Single Exit region is a part of the CFG delimited\n    by two edges.  */\n typedef struct sese_s\n@@ -32,6 +34,9 @@ typedef struct sese_s\n   /* Parameters used within the SCOP.  */\n   vec<tree> params;\n \n+  /* Parameters to be renamed.  */\n+  parameter_rename_map_t *parameter_rename_map;\n+\n   /* Loops completely contained in the SCOP.  */\n   bitmap loops;\n   vec<loop_p> loop_nest;"}, {"sha": "7ba0c06ea440c636b8a042914c04dacc0bdb0a44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -1,3 +1,48 @@\n+2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gcc.dg/graphite/block-0.c: Modifed test case to match current output.\n+\t* gcc.dg/graphite/block-1.c: Same.\n+\t* gcc.dg/graphite/block-5.c: Same.\n+\t* gcc.dg/graphite/block-6.c: Same.\n+\t* gcc.dg/graphite/interchange-1.c: Same.\n+\t* gcc.dg/graphite/interchange-10.c: Same.\n+\t* gcc.dg/graphite/interchange-11.c: Same.\n+\t* gcc.dg/graphite/interchange-13.c: Same.\n+\t* gcc.dg/graphite/interchange-14.c: Same.\n+\t* gcc.dg/graphite/interchange-3.c: Same.\n+\t* gcc.dg/graphite/interchange-4.c: Same.\n+\t* gcc.dg/graphite/interchange-7.c: Same.\n+\t* gcc.dg/graphite/interchange-8.c: Same.\n+\t* gcc.dg/graphite/interchange-9.c: Same.\n+\t* gcc.dg/graphite/isl-codegen-loop-dumping.c: Same.\n+\t* gcc.dg/graphite/pr35356-1.c (foo): Same.\n+\t* gcc.dg/graphite/pr37485.c: Same.\n+\t* gcc.dg/graphite/scop-0.c (int toto): Same.\n+\t* gcc.dg/graphite/scop-1.c: Same.\n+\t* gcc.dg/graphite/scop-10.c: Same.\n+\t* gcc.dg/graphite/scop-11.c: Same.\n+\t* gcc.dg/graphite/scop-12.c: Same.\n+\t* gcc.dg/graphite/scop-13.c: Same.\n+\t* gcc.dg/graphite/scop-16.c: Same.\n+\t* gcc.dg/graphite/scop-17.c: Same.\n+\t* gcc.dg/graphite/scop-18.c: Same.\n+\t* gcc.dg/graphite/scop-2.c: Same.\n+\t* gcc.dg/graphite/scop-21.c (int test): Same.\n+\t* gcc.dg/graphite/scop-22.c (void foo): Same.\n+\t* gcc.dg/graphite/scop-4.c: Same.\n+\t* gcc.dg/graphite/scop-5.c: Same.\n+\t* gcc.dg/graphite/scop-6.c: Same.\n+\t* gcc.dg/graphite/scop-7.c: Same.\n+\t* gcc.dg/graphite/scop-8.c: Same.\n+\t* gcc.dg/graphite/scop-9.c: Same.\n+\t* gcc.dg/graphite/scop-mvt.c (void mvt): Introduced dependency so that\n+\tdata-refs remain inside the inner loop.\n+\t* gcc.dg/graphite/uns-block-1.c: Modifed test case to match o/p.\n+\t* gcc.dg/graphite/uns-interchange-14.c: Same.\n+\t* gcc.dg/graphite/uns-interchange-9.c: Same.\n+\t* gfortran.dg/graphite/interchange-3.f90\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR target/63870"}, {"sha": "24b3bd060a992d62b7e98235695c4ffa8c06f322", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -42,4 +42,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"not tiled\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"not tiled\" 2 \"graphite\" } } */"}, {"sha": "bb81a95d4212947b36e25aab0de213c284916423", "filename": "gcc/testsuite/gcc.dg/graphite/block-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -45,4 +45,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 6 \"graphite\" } } */"}, {"sha": "2f4b2f503b0bd674f0faab95a703117cb410fd1f", "filename": "gcc/testsuite/gcc.dg/graphite/block-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -53,4 +53,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */"}, {"sha": "36e9783d1510322b14c1717308c731c46674cc6f", "filename": "gcc/testsuite/gcc.dg/graphite/block-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -48,4 +48,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */"}, {"sha": "2c58ac21e982fc9190b4e4ae2cc7659185d34677", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -49,4 +49,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "9d486448d08004517dae464c02cf6f920db120fd", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -46,4 +46,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 6 \"graphite\" } } */"}, {"sha": "4f6918dc691c34687ad292196b35f48ee7b25af7", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -46,4 +46,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "c9ea048e482d8878f80d21dade14e0699c69a600", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -50,4 +50,4 @@ main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "151bfe71f1f0334122b5b510f5f7080996edea12", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -54,4 +54,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 7 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 6 \"graphite\" } } */"}, {"sha": "ebdeef7ea8ea006fa194953c9df224ab5912b4da", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -47,4 +47,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "9a50e7a0833ee285f59db335818f10d3e4929dfb", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -46,4 +46,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "e53d30e8cfe12be749c5c0e9f20ac1ba14aa494b", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -46,4 +46,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "c5e714175a0556939778b784489d5e9c8241cd07", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -82,4 +82,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 6 \"graphite\" } } */"}, {"sha": "44a5452213e0a39e04a07c6015d13dd8e61b3d80", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -44,4 +44,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */"}, {"sha": "70ac24c46d73b3a171170006b8bacea53ed61883", "filename": "gcc/testsuite/gcc.dg/graphite/isl-codegen-loop-dumping.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-codegen-loop-dumping.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-codegen-loop-dumping.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-codegen-loop-dumping.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -12,4 +12,6 @@ main (int n, int *a)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ISL AST generated by ISL: \\nfor \\\\(int c1 = 0; c1 < n - 1; c1 \\\\+= 1\\\\)\\n  for \\\\(int c3 = 0; c3 < n; c3 \\\\+= 1\\\\)\\n    S_4\\\\(c1, c3\\\\);\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"ISL AST generated by ISL: \\n\\\\{\\n  S_2\\\\();\\n  if \\\\(P_19 >= 1\\\\)\\n\n+    for \\\\(int c1 = 0; c1 < n - 1; c1 \\\\+= 1\\\\) \\\\{ \\n      for \\\\(int c3 = 0; c3 < n; c3 \\\\+= 1\\\\)\\n\n+        S_4\\\\(c1, c3\\\\); \\n      S_6\\\\(c1\\\\);\\n    \\\\}    \\n\\\\}\" 1 \"graphite\"} } */"}, {"sha": "7f0e8246e0301a67732f23a4f1fb2c5939904ed5", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -7,6 +7,10 @@ foo (int bar, int n, int k)\n {\n   int i;\n \n+  for (i = 0; i < n; i++)\n+    if (i == k)\n+      a[i] = bar;\n+\n   for (i = 0; i < n; i++)\n     if (i == k)\n       a[i] = bar;"}, {"sha": "47138d303afffbb5422b586c8cfec0b9b8d6bb29", "filename": "gcc/testsuite/gcc.dg/graphite/pr37485.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37485.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37485.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr37485.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -31,4 +31,4 @@ void fallbackSort ( UInt32* fmap,\n    AssertH ( j < 256, 1005 );\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */"}, {"sha": "abeabce98a8f07a650a8a8b4569c3423de1d8242", "filename": "gcc/testsuite/gcc.dg/graphite/scop-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-0.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -9,7 +9,7 @@ int toto()\n   int b[100];\n   int N = foo ();\n \n-  for (i = 0; i < 2*N+ 100; i++)\n+  for (i = 0; i < N+ 100; i++)\n     for (j = 0; j < 200; j++)\n       a[j][i] = a[j+1][10] + 2;\n "}, {"sha": "a569065d0956dd8b4c552bdcc2f72f352f77e908", "filename": "gcc/testsuite/gcc.dg/graphite/scop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -27,4 +27,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "39ed5d7ea7b19c4ce9b2124b0f4271da25cc4aea", "filename": "gcc/testsuite/gcc.dg/graphite/scop-10.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -12,8 +12,6 @@ int toto()\n         b[i+j] = b[i+j-1] + 2;\n \n       if (i * 2 == i + 8)\n-        bar ();\n-      else \n         {\n \t  for (j = 1; j < 100; j++)\n \t    b[i+j] = b[i+j-1] + 2;\n@@ -27,4 +25,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "97fe5393b37254132813a25094e90da5ac46be1e", "filename": "gcc/testsuite/gcc.dg/graphite/scop-11.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -10,7 +10,6 @@ int toto()\n       for (j = 0; j <= 20; j++)\n         a[j] = b + i;\n       b = 3;\n-      bar();\n     }\n   else \n     {\n@@ -28,4 +27,4 @@ int toto()\n   return a[b];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "68e120504889f35406fb4385bcf129f5766f0fc2", "filename": "gcc/testsuite/gcc.dg/graphite/scop-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-12.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -32,4 +32,4 @@ int toto()\n   return a[b];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 5\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 0\" 1 \"graphite\"} } */"}, {"sha": "53a17196d3ed0ed4ebbd49462c474233c6613227", "filename": "gcc/testsuite/gcc.dg/graphite/scop-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-13.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -37,4 +37,4 @@ int toto()\n   return a[b];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 0\" 1 \"graphite\"} } */"}, {"sha": "676817014b2a074e666b4de8399a5a873a92ef5e", "filename": "gcc/testsuite/gcc.dg/graphite/scop-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-16.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -21,4 +21,4 @@ int test ()\n       foo (a[i][j]); \n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "3c0d8804549eb03597846d07c00591029b7f1904", "filename": "gcc/testsuite/gcc.dg/graphite/scop-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-17.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -20,4 +20,4 @@ int test ()\n       foo (a[i][j]); \n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "3416304075d3b13d7b931192b518508f90df2174", "filename": "gcc/testsuite/gcc.dg/graphite/scop-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-18.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -22,4 +22,4 @@ void test (void)\n         A[i][j] = B[i][k] * C[k][j];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "fb1a4e7b692b139d243ad31e99d5c9e5d8b7f7a9", "filename": "gcc/testsuite/gcc.dg/graphite/scop-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-2.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -35,4 +35,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 4\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */"}, {"sha": "bd3f811d9d11d58a341993b5eab15eb1f103afb6", "filename": "gcc/testsuite/gcc.dg/graphite/scop-21.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -5,6 +5,9 @@ int test ()\n   int a[N+6];\n   int i;\n \n+  for (i = 0; i < N; i++)\n+    a[i] += 32;\n+\n   for (i = 0; i < N; i++)\n     {\n       a[i] = i + 12;"}, {"sha": "6ff5ccd5b56956c651be2b3aafe5ee69582282d5", "filename": "gcc/testsuite/gcc.dg/graphite/scop-22.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -6,6 +6,9 @@ void foo(int N, int *res)\n   double a, b;\n   double sum = 0.0;\n \n+  for (i = 0; i < N; i++)\n+    sum += u[i];\n+\n   for (i = 0; i < N; i++)\n     {\n       a = u[i];"}, {"sha": "4fb0e5ea47183cc02f71a8ff26fb8a63a319ab84", "filename": "gcc/testsuite/gcc.dg/graphite/scop-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -25,4 +25,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "8309257554cea439faffd21a3211e53cf084aba7", "filename": "gcc/testsuite/gcc.dg/graphite/scop-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-5.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -9,6 +9,8 @@ int toto()\n     {\n       for (j = 0; j <= 20; j++)\n         a[j] = b + i;\n+      for (j = 2; j <= 23; j++)\n+        a[j] = b + i;\n       b = 3;\n       bar();\n     }\n@@ -31,4 +33,4 @@ int toto()\n   return a[b];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */"}, {"sha": "1da486a2ddfbd041e0cf6cc5fed36a2bf8be5a5e", "filename": "gcc/testsuite/gcc.dg/graphite/scop-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-6.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -17,7 +17,6 @@ int toto()\n         {\n         for (k = 1; k < 100; k++)\n           b[i+k] = b[i+k-1] + 2;\n-        bar ();\n         }\n       \n       for (k = 1; k < 100; k++)\n@@ -27,4 +26,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "3e337d0c6036058ea2c9525cf705afcedd09bc70", "filename": "gcc/testsuite/gcc.dg/graphite/scop-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -13,7 +13,6 @@ int toto()\n \n       if (i * 2 == i + 8)\n \t{\n-\t  bar ();\n \t  for (j = 1; j < 100; j++)\n \t    b[i+j] = b[i+j-1] + 2;\n \t}\n@@ -27,4 +26,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 3\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "71d5c531fb833d6e08db7bfd53bd1aecd76492e2", "filename": "gcc/testsuite/gcc.dg/graphite/scop-8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -14,8 +14,7 @@ int toto()\n       if (i * 2 == i + 8)\n \t{\n \t  for (j = 1; j < 100; j++)\n-\t    if (bar ())\n-\t      b[i+j] = b[i+j-1] + 2;\n+\t    b[i+j] = b[i+j-1] + 2;\n \t}\n       else \n \ta[i][i] = 2;\n@@ -27,4 +26,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "93888728b0ddeceae78e65a036ee4f5b1912fbd0", "filename": "gcc/testsuite/gcc.dg/graphite/scop-9.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-9.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -12,8 +12,6 @@ int toto()\n         b[i+j] = b[i+j-1] + 2;\n \n       if (i * 2 == i + 8)\n-        bar ();\n-      else \n \ta[i][i] = 2;\n \n       for (k = 1; k < 100; k++)\n@@ -23,4 +21,4 @@ int toto()\n   return a[3][5] + b[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */"}, {"sha": "442a3a0bafa07189d40fd6a216bc5c8f1118d206", "filename": "gcc/testsuite/gcc.dg/graphite/scop-mvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-mvt.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -8,16 +8,16 @@ void mvt(long N) {\n \n     for (i=0; i<N; i++) {\n         for (j=0; j<N; j++) {\n-            x1[i] = x1[i] + a[i][j] * y_1[j];\n+            x1[j] = x1[j] + a[i][j] * y_1[j];\n         }\n     }\n     \n     for (i=0; i<N; i++) {\n         for (j=0; j<N; j++) {\n-            x2[i] = x2[i] + a[j][i] * y_2[j];\n+            x2[j] = x2[j] + a[j][i] * y_2[j];\n         }\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" } } */\n "}, {"sha": "64ca761c40c2477f4f18bcc62ded9f202665ca67", "filename": "gcc/testsuite/gcc.dg/graphite/uns-block-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -45,4 +45,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } } */"}, {"sha": "1679cc39997fc3f26caee00792cd37b254dab862", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -55,4 +55,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 6 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } } */"}, {"sha": "601169ec39e8e5f77e6b6ea5a80756cd1a3f4687", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -45,4 +45,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */"}, {"sha": "d401638ccc801ae8cacbca6467786499e19d828f", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -24,4 +24,4 @@ Program FOO\n \n end Program FOO\n \n-! { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } }\n+! { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } }"}, {"sha": "c0eab40b139e0a4ba345b89b37ebf2d454a62712", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -3927,6 +3927,49 @@ get_references_in_stmt (gimple stmt, vec<data_ref_loc, va_heap> *references)\n   return clobbers_memory;\n }\n \n+\n+/* Returns true if the loop-nest has any data reference.  */\n+\n+bool\n+loop_nest_has_data_refs (loop_p loop)\n+{\n+  basic_block *bbs = get_loop_body (loop);\n+  vec<data_ref_loc> references;\n+  references.create (3);\n+\n+  for (unsigned i = 0; i < loop->num_nodes; i++)\n+    {\n+      basic_block bb = bbs[i];\n+      gimple_stmt_iterator bsi;\n+\n+      for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (bsi);\n+\t  get_references_in_stmt (stmt, &references);\n+\t  if (references.length ())\n+\t    {\n+\t      free (bbs);\n+\t      references.release ();\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+  free (bbs);\n+  references.release ();\n+\n+  if (loop->inner)\n+    {\n+      loop = loop->inner;\n+      while (loop)\n+\t{\n+\t  if (loop_nest_has_data_refs (loop))\n+\t    return true;\n+\t  loop = loop->next;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Stores the data references in STMT to DATAREFS.  If there is an unanalyzable\n    reference, returns false, otherwise returns true.  NEST is the outermost\n    loop of the loop nest in which the references should be analyzed.  */"}, {"sha": "064843933f3da31f6e34228c661c8ddb15d52844", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -322,6 +322,7 @@ extern bool find_data_references_in_stmt (struct loop *, gimple,\n extern bool graphite_find_data_references_in_stmt (loop_p, loop_p, gimple,\n \t\t\t\t\t\t   vec<data_reference_p> *);\n tree find_data_references_in_loop (struct loop *, vec<data_reference_p> *);\n+bool loop_nest_has_data_refs (loop_p loop);\n struct data_reference *create_data_ref (loop_p, loop_p, tree, gimple, bool);\n extern bool find_loop_nest (struct loop *, vec<loop_p> *);\n extern struct data_dependence_relation *initialize_data_dependence_relation"}, {"sha": "29665c226e140574deeead2bc920fb6b841aaefa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -1,3 +1,14 @@\n+2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* testsuite/libgomp.graphite/bounds.c (int foo): Modifed test case to\n+\tmatch o/p.\n+\t* testsuite/libgomp.graphite/force-parallel-1.c (void parloop): Same.\n+\t* testsuite/libgomp.graphite/force-parallel-4.c: Same.\n+\t* testsuite/libgomp.graphite/force-parallel-5.c: Same.\n+\t* testsuite/libgomp.graphite/force-parallel-7.c: Same.\n+\t* testsuite/libgomp.graphite/force-parallel-8.c: Same.\n+\n 2015-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.tgt: Add missing ;; in between nvptx and rtems"}, {"sha": "3d2fd7aaec889512526370fbc1739ebed03e2f3e", "filename": "libgomp/testsuite/libgomp.graphite/bounds.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fbounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fbounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fbounds.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -3,6 +3,8 @@ int foo(int *a, int n)\n   int i;\n   for (i = 2; i < n; i++)\n     a[i] += a[i+1];\n+  for (i = 2; i < n; i++)\n+    a[i] += a[i+1];\n }\n \n /* Check that Graphite dependency checking notes the dependency.  */"}, {"sha": "0393356f9f2a38e852d7a639a8664065cf575236", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -6,6 +6,9 @@ void parloop (int N)\n {\n   int i;\n \n+  for (i = 0; i < N; i++)\n+    x[i] = i + 1;\n+\n   for (i = 0; i < N; i++)\n     x[i] = i + 3;\n \n@@ -24,5 +27,5 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 1 \"graphite\" } } */\n-/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 8 \"optimized\" } } */"}, {"sha": "b58883c377ae792a86e160e0fc994dadea9accb1", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -47,7 +47,6 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.0\" 4 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.1\" 4 \"optimized\" } } */"}, {"sha": "de31d6436f5d2959e61413fdb42c2f78eee92713", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -31,6 +31,6 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.0\" 4 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.1\" 4 \"optimized\" } } */"}, {"sha": "9d2b37cbd4beb935f4db35b33a1cac8ea9b5cc3c", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-7.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -31,5 +31,5 @@ int main (void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"3 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"5 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.0\" 4 \"optimized\" } } */"}, {"sha": "32ba5ab84efe4691c66f8bfe251efec561f1c023", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-8.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74032f471db79e96eb86a9f2ba43a36ca6c1ddcf/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c?ref=74032f471db79e96eb86a9f2ba43a36ca6c1ddcf", "patch": "@@ -43,8 +43,6 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 1 \"graphite\" } } */\n-/* { dg-final { scan-tree-dump-times \"3 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"5 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.0\" 4 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.1\" 4 \"optimized\" } } */"}]}