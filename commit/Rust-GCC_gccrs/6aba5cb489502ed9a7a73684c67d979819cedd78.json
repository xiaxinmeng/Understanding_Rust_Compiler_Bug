{"sha": "6aba5cb489502ed9a7a73684c67d979819cedd78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiYTVjYjQ4OTUwMmVkOWE3YTczNjg0YzY3ZDk3OTgxOWNlZGQ3OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-25T00:34:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-25T00:34:46Z"}, "message": "alpha: Cleanup sign extension patterns.\n\nDon't bother implementing sub-word sign-extensions for !BWX,\nsince we need to use DImode intermediates anyway.\n\nFrom-SVN: r171435", "tree": {"sha": "6f30b50e5b86698f8afa31186a2c7577bccc3990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f30b50e5b86698f8afa31186a2c7577bccc3990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aba5cb489502ed9a7a73684c67d979819cedd78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aba5cb489502ed9a7a73684c67d979819cedd78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aba5cb489502ed9a7a73684c67d979819cedd78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aba5cb489502ed9a7a73684c67d979819cedd78/comments", "author": null, "committer": null, "parents": [{"sha": "84ee3e269ab2dfa9d3044fe64eb7a80e70067d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ee3e269ab2dfa9d3044fe64eb7a80e70067d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ee3e269ab2dfa9d3044fe64eb7a80e70067d84"}], "stats": {"total": 224, "additions": 70, "deletions": 154}, "files": [{"sha": "160f4c09232ea6abd495513d5cb5a56fc222a695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aba5cb489502ed9a7a73684c67d979819cedd78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aba5cb489502ed9a7a73684c67d979819cedd78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aba5cb489502ed9a7a73684c67d979819cedd78", "patch": "@@ -1,3 +1,10 @@\n+2011-02-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (extendqihi2): Implement for BWX only.\n+\t(extendqisi2, extendhisi2): Likewise.\n+\t(extendqidi2): Simplify BWX/non-BWX expansions.\n+\t(extendhidi2): Similarly.\n+\n 2011-02-24  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (attribute isa): New."}, {"sha": "f37a5b3c306b509192aabb69135df4a46609cdc4", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 63, "deletions": 154, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aba5cb489502ed9a7a73684c67d979819cedd78/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aba5cb489502ed9a7a73684c67d979819cedd78/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=6aba5cb489502ed9a7a73684c67d979819cedd78", "patch": "@@ -1413,194 +1413,103 @@\n   \"sra %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_expand \"extendqihi2\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_operand:QI 1 \"some_operand\" \"\")\n-\t\t   (const_int 56)))\n-   (set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (const_int 56)))]\n-  \"\"\n-{\n-  if (TARGET_BWX)\n-    {\n-      emit_insn (gen_extendqihi2x (operands[0],\n-\t\t\t\t   force_reg (QImode, operands[1])));\n-      DONE;\n-    }\n-\n- /* If we have an unaligned MEM, extend to DImode (which we do\n-     specially) and then copy to the result.  */\n-  if (unaligned_memory_operand (operands[1], HImode))\n-    {\n-      rtx temp = gen_reg_rtx (DImode);\n-\n-      emit_insn (gen_extendqidi2 (temp, operands[1]));\n-      emit_move_insn (operands[0], gen_lowpart (HImode, temp));\n-      DONE;\n-    }\n-\n-  operands[0] = gen_lowpart (DImode, operands[0]);\n-  operands[1] = gen_lowpart (DImode, force_reg (QImode, operands[1]));\n-  operands[2] = gen_reg_rtx (DImode);\n-})\n-\n-(define_insn \"extendqidi2x\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+(define_insn \"extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"TARGET_BWX\"\n   \"sextb %1,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extendhidi2x\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_BWX\"\n-  \"sextw %1,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extendqisi2x\"\n+(define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"TARGET_BWX\"\n   \"sextb %1,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extendhisi2x\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_BWX\"\n-  \"sextw %1,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extendqihi2x\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_BWX\"\n-  \"sextb %1,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_expand \"extendqisi2\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_operand:QI 1 \"some_operand\" \"\")\n-\t\t   (const_int 56)))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (const_int 56)))]\n-  \"\"\n-{\n-  if (TARGET_BWX)\n-    {\n-      emit_insn (gen_extendqisi2x (operands[0],\n-\t\t\t\t   force_reg (QImode, operands[1])));\n-      DONE;\n-    }\n-\n-  /* If we have an unaligned MEM, extend to a DImode form of\n-     the result (which we do specially).  */\n-  if (unaligned_memory_operand (operands[1], QImode))\n-    {\n-      rtx temp = gen_reg_rtx (DImode);\n-\n-      emit_insn (gen_extendqidi2 (temp, operands[1]));\n-      emit_move_insn (operands[0], gen_lowpart (SImode, temp));\n-      DONE;\n-    }\n-\n-  operands[0] = gen_lowpart (DImode, operands[0]);\n-  operands[1] = gen_lowpart (DImode, force_reg (QImode, operands[1]));\n-  operands[2] = gen_reg_rtx (DImode);\n-})\n-\n (define_expand \"extendqidi2\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_operand:QI 1 \"some_operand\" \"\")\n-\t\t   (const_int 56)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (const_int 56)))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:QI 1 \"some_operand\" \"\")))]\n   \"\"\n {\n   if (TARGET_BWX)\n+    operands[1] = force_reg (QImode, operands[1]);\n+  else\n     {\n-      emit_insn (gen_extendqidi2x (operands[0],\n-\t\t\t\t   force_reg (QImode, operands[1])));\n-      DONE;\n-    }\n+      rtx x, t1, t2, i56;\n \n-  if (unaligned_memory_operand (operands[1], QImode))\n-    {\n-      rtx seq = gen_unaligned_extendqidi (operands[0], XEXP (operands[1], 0));\n-      alpha_set_memflags (seq, operands[1]);\n-      emit_insn (seq);\n-      DONE;\n-    }\n+      if (unaligned_memory_operand (operands[1], QImode))\n+\t{\n+\t  x = gen_unaligned_extendqidi (operands[0], XEXP (operands[1], 0));\n+\t  alpha_set_memflags (x, operands[1]);\n+\t  emit_insn (x);\n+\t  DONE;\n+\t}\n \n-  operands[1] = gen_lowpart (DImode, force_reg (QImode, operands[1]));\n-  operands[2] = gen_reg_rtx (DImode);\n-})\n+      t1 = gen_reg_rtx (DImode);\n+      t2 = gen_reg_rtx (DImode);\n+      i56 = GEN_INT (56);\n \n-(define_expand \"extendhisi2\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_operand:HI 1 \"some_operand\" \"\")\n-\t\t   (const_int 48)))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (const_int 48)))]\n-  \"\"\n-{\n-  if (TARGET_BWX)\n-    {\n-      emit_insn (gen_extendhisi2x (operands[0],\n-\t\t\t\t   force_reg (HImode, operands[1])));\n+      x = gen_lowpart (DImode, force_reg (QImode, operands[1]));\n+      emit_move_insn (t1, x);\n+      emit_insn (gen_ashldi3 (t2, t1, i56));\n+      emit_insn (gen_ashrdi3 (operands[0], t2, i56));\n       DONE;\n     }\n+})\n \n-  /* If we have an unaligned MEM, extend to a DImode form of\n-     the result (which we do specially).  */\n-  if (unaligned_memory_operand (operands[1], HImode))\n-    {\n-      rtx temp = gen_reg_rtx (DImode);\n-\n-      emit_insn (gen_extendhidi2 (temp, operands[1]));\n-      emit_move_insn (operands[0], gen_lowpart (SImode, temp));\n-      DONE;\n-    }\n+(define_insn \"*extendqidi2_bwx\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_BWX\"\n+  \"sextb %1,%0\"\n+  [(set_attr \"type\" \"shift\")])\n \n-  operands[0] = gen_lowpart (DImode, operands[0]);\n-  operands[1] = gen_lowpart (DImode, force_reg (HImode, operands[1]));\n-  operands[2] = gen_reg_rtx (DImode);\n-})\n+(define_insn \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_BWX\"\n+  \"sextw %1,%0\"\n+  [(set_attr \"type\" \"shift\")])\n \n (define_expand \"extendhidi2\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_operand:HI 1 \"some_operand\" \"\")\n-\t\t   (const_int 48)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (const_int 48)))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:HI 1 \"some_operand\" \"\")))]\n   \"\"\n {\n   if (TARGET_BWX)\n+    operands[1] = force_reg (HImode, operands[1]);\n+  else\n     {\n-      emit_insn (gen_extendhidi2x (operands[0],\n-\t\t\t\t   force_reg (HImode, operands[1])));\n-      DONE;\n-    }\n+      rtx x, t1, t2, i48;\n \n-  if (unaligned_memory_operand (operands[1], HImode))\n-    {\n-      rtx seq = gen_unaligned_extendhidi (operands[0], XEXP (operands[1], 0));\n+      if (unaligned_memory_operand (operands[1], HImode))\n+\t{\n+\t  x = gen_unaligned_extendhidi (operands[0], XEXP (operands[1], 0));\n+\t  alpha_set_memflags (x, operands[1]);\n+\t  emit_insn (x);\n+\t  DONE;\n+\t}\n \n-      alpha_set_memflags (seq, operands[1]);\n-      emit_insn (seq);\n+      t1 = gen_reg_rtx (DImode);\n+      t2 = gen_reg_rtx (DImode);\n+      i48 = GEN_INT (48);\n+\n+      x = gen_lowpart (DImode, force_reg (HImode, operands[1]));\n+      emit_move_insn (t1, x);\n+      emit_insn (gen_ashldi3 (t2, t1, i48));\n+      emit_insn (gen_ashrdi3 (operands[0], t2, i48));\n       DONE;\n     }\n-\n-  operands[1] = gen_lowpart (DImode, force_reg (HImode, operands[1]));\n-  operands[2] = gen_reg_rtx (DImode);\n })\n \n+(define_insn \"*extendhidi2_bwx\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_BWX\"\n+  \"sextw %1,%0\"\n+  [(set_attr \"type\" \"shift\")])\n+\n ;; Here's how we sign extend an unaligned byte and halfword.  Doing this\n ;; as a pattern saves one instruction.  The code is similar to that for\n ;; the unaligned loads (see below)."}]}