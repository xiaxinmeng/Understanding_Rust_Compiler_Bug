{"sha": "01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiMGFjYjc2MTAwMzJkNWY2YmIzMmNjNmVjZGE1OTU1Y2IwYzE4YQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-09-14T18:35:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-14T18:35:26Z"}, "message": "builtins.c (unterminated_array): Handle ARRAY_REF.\n\n\t* builtins.c (unterminated_array): Handle ARRAY_REF.\n\t(expand_builtin_stpcpy_1): Detect unterminated char arrays.\n\t* builtins.h (unterminated_array): Declare extern.\n\t* gimple-fold.c (gimple_fold_builtin_stpcpy): Detect unterminated\n\t  arrays.\n\t(gimple_fold_builtin_sprintf): Propagate NO_WARNING to transformed\n\tcalls.\n\n\t* gcc.dg/warn-stpcpy-no-nul.c: New test.\n\nFrom-SVN: r264328", "tree": {"sha": "3cfc9708ab0990085d890f7f087d045398095e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cfc9708ab0990085d890f7f087d045398095e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e08341bb0e026ef019a3b201ea26ecdc4a9233ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08341bb0e026ef019a3b201ea26ecdc4a9233ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08341bb0e026ef019a3b201ea26ecdc4a9233ea"}], "stats": {"total": 386, "additions": 380, "deletions": 6}, "files": [{"sha": "b9229e9fd2bd0820617a47bc3e4d37d6936e0219", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -1,3 +1,13 @@\n+2018-09-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (unterminated_array): Handle ARRAY_REF.\n+\t(expand_builtin_stpcpy_1): Detect unterminated char arrays.\n+\t* builtins.h (unterminated_array): Declare extern.\n+\t* gimple-fold.c (gimple_fold_builtin_stpcpy): Detect unterminated\n+\tarrays.\n+\t(gimple_fold_builtin_sprintf): Propagate NO_WARNING to transformed\n+\tcalls.\n+\n 2018-09-14  Martin Sebor  <msebor@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "b2b7ca30b17d39162d9cb3796037e13ddd483bbd", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -567,7 +567,7 @@ warn_string_no_nul (location_t loc, const char *fn, tree arg, tree decl)\n    the declaration of the object of which the array is a member or\n    element.  Otherwise return null.  */\n \n-static tree\n+tree\n unterminated_array (tree exp)\n {\n   if (TREE_CODE (exp) == SSA_NAME)\n@@ -578,7 +578,10 @@ unterminated_array (tree exp)\n \n       tree rhs1 = gimple_assign_rhs1 (stmt);\n       tree_code code = gimple_assign_rhs_code (stmt);\n-      if (code != POINTER_PLUS_EXPR)\n+      if (code == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == ARRAY_REF)\n+\trhs1 = rhs1;\n+      else if (code != POINTER_PLUS_EXPR)\n \treturn NULL_TREE;\n \n       exp = rhs1;\n@@ -3981,9 +3984,14 @@ expand_builtin_stpcpy_1 (tree exp, rtx target, machine_mode mode)\n \t compile-time, not an expression containing a string.  This is\n \t because the latter will potentially produce pessimized code\n \t when used to produce the return value.  */\n-      if (! c_getstr (src) || ! (len = c_strlen (src, 0)))\n+      tree nonstr = NULL_TREE;\n+      if (!c_getstr (src, NULL)\n+\t  || !(len = c_strlen (src, 0, &nonstr, 1)))\n \treturn expand_movstr (dst, src, target, /*endp=*/2);\n \n+      if (nonstr && !TREE_NO_WARNING (exp))\n+\twarn_string_no_nul (EXPR_LOCATION (exp), \"stpcpy\", src, nonstr);\n+\n       lenp1 = size_binop_loc (loc, PLUS_EXPR, len, ssize_int (1));\n       ret = expand_builtin_mempcpy_args (dst, src, lenp1,\n \t\t\t\t\t target, exp, /*endp=*/2);"}, {"sha": "45ad684cb52e4a8c5f79a66ac0f38133b6596fa2", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -104,6 +104,7 @@ extern internal_fn associated_internal_fn (tree);\n extern internal_fn replacement_internal_fn (gcall *);\n \n extern void warn_string_no_nul (location_t, const char *, tree, tree);\n+extern tree unterminated_array (tree);\n extern tree max_object_size ();\n \n #endif /* GCC_BUILTINS_H */"}, {"sha": "362ab59e9c00ec338fa3594db0186442df8b82f2", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -2798,7 +2798,7 @@ gimple_fold_builtin_stpcpy (gimple_stmt_iterator *gsi)\n   location_t loc = gimple_location (stmt);\n   tree dest = gimple_call_arg (stmt, 0);\n   tree src = gimple_call_arg (stmt, 1);\n-  tree fn, len, lenp1;\n+  tree fn, lenp1;\n \n   /* If the result is unused, replace stpcpy with strcpy.  */\n   if (gimple_call_lhs (stmt) == NULL_TREE)\n@@ -2811,10 +2811,25 @@ gimple_fold_builtin_stpcpy (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n-  len = c_strlen (src, 1);\n+  /* Set to non-null if ARG refers to an unterminated array.  */\n+  tree nonstr = NULL;\n+  tree len = c_strlen (src, 1, &nonstr, 1);\n   if (!len\n       || TREE_CODE (len) != INTEGER_CST)\n-    return false;\n+    {\n+      nonstr = unterminated_array (src);\n+      if (!nonstr)\n+\treturn false;\n+    }\n+\n+  if (nonstr)\n+    {\n+      /* Avoid folding calls with unterminated arrays.  */\n+      if (!gimple_no_warning_p (stmt))\n+\twarn_string_no_nul (loc, \"stpcpy\", src, nonstr);\n+      gimple_set_no_warning (stmt, true);\n+      return false;\n+    }\n \n   if (optimize_function_for_size_p (cfun)\n       /* If length is zero it's small enough.  */\n@@ -3077,6 +3092,12 @@ gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n \t 'format' is known to contain no % formats.  */\n       gimple_seq stmts = NULL;\n       gimple *repl = gimple_build_call (fn, 2, dest, fmt);\n+\n+      /* Propagate the NO_WARNING bit to avoid issuing the same\n+\t warning more than once.  */\n+      if (gimple_no_warning_p (stmt))\n+\tgimple_set_no_warning (repl, true);\n+\n       gimple_seq_add_stmt_without_update (&stmts, repl);\n       if (gimple_call_lhs (stmt))\n \t{\n@@ -3125,6 +3146,12 @@ gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n       /* Convert sprintf (str1, \"%s\", str2) into strcpy (str1, str2).  */\n       gimple_seq stmts = NULL;\n       gimple *repl = gimple_build_call (fn, 2, dest, orig);\n+\n+      /* Propagate the NO_WARNING bit to avoid issuing the same\n+\t warning more than once.  */\n+      if (gimple_no_warning_p (stmt))\n+\tgimple_set_no_warning (repl, true);\n+\n       gimple_seq_add_stmt_without_update (&stmts, repl);\n       if (gimple_call_lhs (stmt))\n \t{"}, {"sha": "36867ba0e500cd5663b7ef2f16e0f572cef86ca1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -1,3 +1,7 @@\n+2018-09-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/warn-stpcpy-no-nul.c: New test.\n+\n 2018-09-14  Martin Sebor  <msebor@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "78c4a7f92869d75e4ac13a637a4c955f162c5bce", "filename": "gcc/testsuite/gcc.dg/warn-stpcpy-no-nul.c", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b0acb7610032d5f6bb32cc6ecda5955cb0c18a/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c?ref=01b0acb7610032d5f6bb32cc6ecda5955cb0c18a", "patch": "@@ -0,0 +1,324 @@\n+/* PR tree-optimization/86552 - missing warning for reading past the end\n+   of non-string arrays\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wno-array-bounds -ftrack-macro-expansion=0\" } */\n+\n+extern char* stpcpy (char*, const char*);\n+\n+const char a[5] = \"12345\";   /* { dg-message \"declared here\" } */\n+\n+int v0 = 0;\n+int v1 = 1;\n+int v2 = 1;\n+int v3 = 1;\n+\n+void sink (char*, ...);\n+\n+#define T(str) sink (stpcpy (d, str))\n+\n+void test_one_dim_array (char *d)\n+{\n+  T (a);                /* { dg-warning \"argument missing terminating nul\" }  */\n+  T (&a[0]);            /* { dg-warning \"nul\" }  */\n+  T (&a[0] + 1);        /* { dg-warning \"nul\" }  */\n+  T (&a[1]);            /* { dg-warning \"nul\" }  */\n+\n+  int i0 = 0;\n+  int i1 = i0 + 1;\n+\n+  T (&a[i0]);           /* { dg-warning \"nul\" }  */\n+  T (&a[i0] + 1);       /* { dg-warning \"nul\" }  */\n+  T (&a[i1]);           /* { dg-warning \"nul\" }  */\n+\n+  T (&a[v0]);           /* { dg-warning \"nul\" }  */\n+  T (&a[v0] + 1);       /* { dg-warning \"nul\" }  */\n+  T (&a[v0] + v1);      /* { dg-warning \"nul\" }  */\n+}\n+\n+const char b[][5] = { /* { dg-message \"declared here\" } */\n+  \"12\", \"123\", \"1234\", \"54321\"\n+};\n+\n+void test_two_dim_array (char *d)\n+{\n+  int i0 = 0;\n+  int i1 = i0 + 1;\n+  int i2 = i1 + 1;\n+  int i3 = i2 + 1;\n+\n+  T (b[0]);\n+  T (b[1]);\n+  T (b[2]);\n+  T (b[3]);             /* { dg-warning \"nul\" }  */\n+  T (b[i0]);\n+  T (b[i1]);\n+  T (b[i2]);\n+  T (b[i3]);            /* { dg-warning \"nul\" }  */\n+  T (b[v0]);\n+  T (b[v3]);\n+\n+  T (&b[2][1]);\n+  T (&b[2][1] + 1);\n+  T (&b[2][v0]);\n+  T (&b[2][1] + v0);\n+\n+  T (&b[i2][i1]);\n+  T (&b[i2][i1] + i1);\n+  T (&b[i2][v0]);\n+  T (&b[i2][i1] + v0);\n+\n+  T (&b[3][1]);         /* { dg-warning \"nul\" }  */\n+  T (&b[3][1] + 1);     /* { dg-warning \"nul\" }  */\n+  T (&b[3][v0]);        /* { dg-warning \"nul\" }  */\n+  T (&b[3][1] + v0);    /* { dg-warning \"nul\" }  */\n+  T (&b[3][v0] + v1);   /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (&b[i3][i1]);       /* { dg-warning \"nul\" }  */\n+  T (&b[i3][i1] + i1);  /* { dg-warning \"nul\" }  */\n+  T (&b[i3][v0]);       /* { dg-warning \"nul\" }  */\n+  T (&b[i3][i1] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&b[i3][v0] + v1);  /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? \"\" : b[0]);\n+  T (v0 ? \"\" : b[1]);\n+  T (v0 ? \"\" : b[2]);\n+  T (v0 ? \"\" : b[3]);               /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? b[0] : \"\");\n+  T (v0 ? b[1] : \"\");\n+  T (v0 ? b[2] : \"\");\n+  T (v0 ? b[3] : \"\");               /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? \"1234\" : b[3]);           /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? b[3] : \"1234\");           /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? a : b[3]);                /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? b[0] : b[2]);\n+  T (v0 ? b[2] : b[3]);             /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? b[3] : b[2]);             /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? b[0] : &b[3][0] + 1);     /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? b[1] : &b[3][1] + v0);    /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  /* It's possible to detect the missing nul in the following two\n+     expressions but GCC doesn't do it yet.  */\n+  T (v0 ? &b[3][1] + v0 : b[2]);    /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? &b[3][v0] : &b[3][v1]);   /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+}\n+\n+struct A { char a[5], b[5]; };\n+\n+const struct A s = { \"1234\", \"12345\" };\n+\n+void test_struct_member (char *d)\n+{\n+  int i0 = 0;\n+  int i1 = i0 + 1;\n+\n+  T (s.a);\n+  T (&s.a[0]);\n+  T (&s.a[0] + 1);\n+  T (&s.a[0] + i0);\n+  T (&s.a[1]);\n+  T (&s.a[1] + 1);\n+  T (&s.a[1] + i0);\n+\n+  T (&s.a[i0]);\n+  T (&s.a[i0] + 1);\n+  T (&s.a[i0] + v0);\n+  T (&s.a[i1]);\n+  T (&s.a[i1] + 1);\n+  T (&s.a[i1] + v0);\n+\n+  T (s.a);\n+  T (&s.a[0]);\n+  T (&s.a[0] + 1);\n+  T (&s.a[0] + v0);\n+  T (&s.a[1]);\n+  T (&s.a[1] + 1);\n+  T (&s.a[1] + v0);\n+\n+  T (&s.a[i0]);\n+  T (&s.a[i0] + 1);\n+  T (&s.a[i0] + v0);\n+  T (&s.a[i1]);\n+  T (&s.a[i1] + 1);\n+  T (&s.a[i1] + v0);\n+\n+  T (&s.a[v0]);\n+  T (&s.a[v0] + 1);\n+  T (&s.a[v0] + v0);\n+  T (&s.a[v1]);\n+  T (&s.a[v1] + 1);\n+  T (&s.a[v1] + v0);\n+\n+  T (s.b);              /* { dg-warning \"nul\" }  */\n+  T (&s.b[0]);          /* { dg-warning \"nul\" }  */\n+  T (&s.b[0] + 1);      /* { dg-warning \"nul\" }  */\n+  T (&s.b[0] + i0);     /* { dg-warning \"nul\" }  */\n+  T (&s.b[1]);          /* { dg-warning \"nul\" }  */\n+  T (&s.b[1] + 1);      /* { dg-warning \"nul\" }  */\n+  T (&s.b[1] + i0);     /* { dg-warning \"nul\" }  */\n+\n+  T (s.b);              /* { dg-warning \"nul\" }  */\n+  T (&s.b[0]);          /* { dg-warning \"nul\" }  */\n+  T (&s.b[0] + 1);      /* { dg-warning \"nul\" }  */\n+  T (&s.b[0] + v0);     /* { dg-warning \"nul\" }  */\n+  T (&s.b[1]);          /* { dg-warning \"nul\" }  */\n+  T (&s.b[1] + 1);      /* { dg-warning \"nul\" }  */\n+  T (&s.b[1] + v0);     /* { dg-warning \"nul\" }  */\n+\n+  T (s.b);              /* { dg-warning \"nul\" }  */\n+  T (&s.b[v0]);         /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&s.b[v0] + 1);     /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&s.b[v0] + v0);    /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&s.b[v1]);         /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&s.b[v1] + 1);     /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&s.b[v1] + v0);    /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+}\n+\n+struct B { struct A a[2]; };\n+\n+const struct B ba[] = {\n+  { { { \"123\", \"12345\" }, { \"12345\", \"123\" } } },\n+  { { { \"12345\", \"123\" }, { \"123\", \"12345\" } } },\n+  { { { \"1\", \"12\" },      { \"123\", \"1234\" } } },\n+  { { { \"123\", \"1234\" },  { \"12345\", \"12\" } } }\n+};\n+\n+void test_array_of_structs (char *d)\n+{\n+  T (ba[0].a[0].a);\n+  T (&ba[0].a[0].a[0]);\n+  T (&ba[0].a[0].a[0] + 1);\n+  T (&ba[0].a[0].a[0] + v0);\n+  T (&ba[0].a[0].a[1]);\n+  T (&ba[0].a[0].a[1] + 1);\n+  T (&ba[0].a[0].a[1] + v0);\n+\n+  T (ba[0].a[0].b);           /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[0]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[0] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[0] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[1]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[1] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[0].b[1] + v0);  /* { dg-warning \"nul\" }  */\n+\n+  T (ba[0].a[1].a);           /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[0]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[0] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[0] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[1]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[1] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[0].a[1].a[1] + v0);  /* { dg-warning \"nul\" }  */\n+\n+  T (ba[0].a[1].b);\n+  T (&ba[0].a[1].b[0]);\n+  T (&ba[0].a[1].b[0] + 1);\n+  T (&ba[0].a[1].b[0] + v0);\n+  T (&ba[0].a[1].b[1]);\n+  T (&ba[0].a[1].b[1] + 1);\n+  T (&ba[0].a[1].b[1] + v0);\n+\n+\n+  T (ba[1].a[0].a);           /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[0]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[0] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[0] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[1]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[1] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[0].a[1] + v0);  /* { dg-warning \"nul\" }  */\n+\n+  T (ba[1].a[0].b);\n+  T (&ba[1].a[0].b[0]);\n+  T (&ba[1].a[0].b[0] + 1);\n+  T (&ba[1].a[0].b[0] + v0);\n+  T (&ba[1].a[0].b[1]);\n+  T (&ba[1].a[0].b[1] + 1);\n+  T (&ba[1].a[0].b[1] + v0);\n+\n+  T (ba[1].a[1].a);\n+  T (&ba[1].a[1].a[0]);\n+  T (&ba[1].a[1].a[0] + 1);\n+  T (&ba[1].a[1].a[0] + v0);\n+  T (&ba[1].a[1].a[1]);\n+  T (&ba[1].a[1].a[1] + 1);\n+  T (&ba[1].a[1].a[1] + v0);\n+\n+  T (ba[1].a[1].b);           /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[0]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[0] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[0] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[1]);       /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[1] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[1].a[1].b[1] + v0);  /* { dg-warning \"nul\" }  */\n+\n+\n+  T (ba[2].a[0].a);\n+  T (&ba[2].a[0].a[0]);\n+  T (&ba[2].a[0].a[0] + 1);\n+  T (&ba[2].a[0].a[0] + v0);\n+  T (&ba[2].a[0].a[1]);\n+  T (&ba[2].a[0].a[1] + 1);\n+  T (&ba[2].a[0].a[1] + v0);\n+\n+  T (ba[2].a[0].b);\n+  T (&ba[2].a[0].b[0]);\n+  T (&ba[2].a[0].b[0] + 1);\n+  T (&ba[2].a[0].b[0] + v0);\n+  T (&ba[2].a[0].b[1]);\n+  T (&ba[2].a[0].b[1] + 1);\n+  T (&ba[2].a[0].b[1] + v0);\n+\n+  T (ba[2].a[1].a);\n+  T (&ba[2].a[1].a[0]);\n+  T (&ba[2].a[1].a[0] + 1);\n+  T (&ba[2].a[1].a[0] + v0);\n+  T (&ba[2].a[1].a[1]);\n+  T (&ba[2].a[1].a[1] + 1);\n+  T (&ba[2].a[1].a[1] + v0);\n+\n+\n+  T (ba[3].a[0].a);\n+  T (&ba[3].a[0].a[0]);\n+  T (&ba[3].a[0].a[0] + 1);\n+  T (&ba[3].a[0].a[0] + v0);\n+  T (&ba[3].a[0].a[1]);\n+  T (&ba[3].a[0].a[1] + 1);\n+  T (&ba[3].a[0].a[1] + v0);\n+\n+  T (ba[3].a[0].b);\n+  T (&ba[3].a[0].b[0]);\n+  T (&ba[3].a[0].b[0] + 1);\n+  T (&ba[3].a[0].b[0] + v0);\n+  T (&ba[3].a[0].b[1]);\n+  T (&ba[3].a[0].b[1] + 1);\n+  T (&ba[3].a[0].b[1] + v0);\n+\n+  T (ba[3].a[1].a);           /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[0]);\t      /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[0] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[0] + v0);  /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[1]);\t      /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[1] + 1);   /* { dg-warning \"nul\" }  */\n+  T (&ba[3].a[1].a[1] + v0);  /* { dg-warning \"nul\" }  */\n+\n+  T (ba[3].a[1].b);\n+  T (&ba[3].a[1].b[0]);\t\n+  T (&ba[3].a[1].b[0] + 1);\n+  T (&ba[3].a[1].b[0] + v0);\n+  T (&ba[3].a[1].b[1]);\t\n+  T (&ba[3].a[1].b[1] + 1);\n+  T (&ba[3].a[1].b[1] + v0);\n+\n+\n+  T (v0 ? ba[0].a[0].a : ba[0].a[0].b);           /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? ba[0].a[0].a : ba[0].a[0].b);           /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? &ba[0].a[0].a[0] : &ba[3].a[1].a[0]);   /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (v0 ? &ba[3].a[1].a[1] :  ba[0].a[0].a);      /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+\n+  T (v0 ? ba[0].a[0].a : ba[0].a[1].b);\n+  T (v0 ? ba[0].a[1].b : ba[0].a[0].a);\n+}\n+\n+/* { dg-prune-output \" reading \\[1-9\\]\\[0-9\\]? bytes from a region \" } */"}]}