{"sha": "e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "node_id": "C_kwDOANBUbNoAKGU0ZmU2ZGJhOTBiODMxZGJkOGY1ZTIzMDQxYzVlMGU4YmRkNzUzMzI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-10T17:38:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-11T13:28:46Z"}, "message": "libstdc++: Optimize std::ostream inserters for single characters\n\nOn the libsdc++ mailing list Lewis Hyatt pointed out the performance\noverhead of using sputn in stream inserters, rather than writing\ndirectly to the streambuf's put area:\nhttps://gcc.gnu.org/pipermail/libstdc++/2021-July/052877.html\n\nAs Lewis noted, the standard explicitly requires a call to sputn for\ninserting a std::basic_string_view or std::basic_string.  But for\ninserting single characters or null-terminated strings it is more vague,\nand so we can improve performance by not using the __ostream_insert\nfunction.\n\nThis is a minimal change that avoids __ostream_insert for single\ncharacters. We can use the unformatted basic_ostream::put(charT)\nfunction when we don't need the additional effects of a formatted output\nfunction (i.e. padding and resetting the width). The put function will\ninsert into the buffer if possible, and only make a virtual call (to\noverflow) if the buffer is full.\n\nWe could also avoid sputn when inserting null-terminated character\nstrings, but that would require using a new function for inserting\nnull-terminated strings, so the existing code using sputn is still used\nfor basic_string and basic_string_view. My preference is to leave that\nfor now, and try to improve the standard. We could either remove the\nrequirement to call sputn, or allow sputn to write directly to the\nbuffer instead of calling xsputn.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ostream (operator<<(basic_ostream&, charT)):\n\tUse unformatted input if no padding is needed.\n\t(operator<<(basic_ostream<char>&, char)): Likewise.", "tree": {"sha": "e9757b17655a98468412868faf777a6f372933c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9757b17655a98468412868faf777a6f372933c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7317a46128a3572f39d1d8f96155111d00d9d229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317a46128a3572f39d1d8f96155111d00d9d229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7317a46128a3572f39d1d8f96155111d00d9d229"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "291ea40b35521de664789d4557416daadb11dc53", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=e4fe6dba90b831dbd8f5e23041c5e0e8bdd75332", "patch": "@@ -505,7 +505,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n-    { return __ostream_insert(__out, &__c, 1); }\n+    {\n+      if (__out.width() != 0)\n+\treturn __ostream_insert(__out, &__c, 1);\n+      __out.put(__c);\n+      return __out;\n+    }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n@@ -516,7 +521,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Traits>\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, char __c)\n-    { return __ostream_insert(__out, &__c, 1); }\n+    {\n+      if (__out.width() != 0)\n+\treturn __ostream_insert(__out, &__c, 1);\n+      __out.put(__c);\n+      return __out;\n+    }\n \n   // Signed and unsigned\n   template<typename _Traits>"}]}