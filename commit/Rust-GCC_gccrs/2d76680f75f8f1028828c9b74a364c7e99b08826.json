{"sha": "2d76680f75f8f1028828c9b74a364c7e99b08826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3NjY4MGY3NWY4ZjEwMjg4MjhjOWI3NGEzNjRjN2U5OWIwODgyNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-10-15T14:40:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-10-15T14:40:54Z"}, "message": "semantics.c (is_instantiation_of_constexpr, [...]): Moved definitions...\n\n2014-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* semantics.c (is_instantiation_of_constexpr, literal_type_p,\n\tensure_literal_type_for_constexpr_object,\n\tconstexpr_fundef_hasher::equal, constexpr_fundef_hasher::hash,\n\tretrieve_constexpr_fundef, is_valid_constexpr_fn,\n\tbuild_anon_member_initialization, build_data_member_initialization,\n\tcheck_constexpr_bind_expr_vars, check_constexpr_ctor_body_1,\n\tcheck_constexpr_ctor_body, sort_constexpr_mem_initializers,\n\tbuild_constexpr_constructor_member_initializers, constexpr_fn_retval,\n\tmassage_constexpr_body, cx_check_missing_mem_inits,\n\tregister_constexpr_fundef, explain_invalid_constexpr_fn,\n\tconstexpr_call_hasher::hash, constexpr_call_hasher::equal,\n\tmaybe_initialize_constexpr_call_table, get_function_named_in_call,\n\tget_nth_callarg, lookup_parameter_binding,\n\tcxx_eval_builtin_function_call, adjust_temp_type,\n\tcxx_bind_parameters_in_call, push_cx_call_context,\n\tpop_cx_call_context, cx_error_context, cxx_eval_call_expression,\n\treduced_constant_expression_p, verify_constant,\n\tcxx_eval_unary_expression, cxx_eval_binary_expression,\n\tcxx_eval_conditional_expression, cxx_eval_array_reference,\n\tcxx_eval_component_reference, cxx_eval_bit_field_ref,\n\tcxx_eval_logical_expression, base_field_constructor_elt, \n\tcxx_eval_bare_aggregate, cxx_eval_vec_init_1, cxx_eval_vec_init,\n\tcxx_fold_indirect_ref, cxx_eval_indirect_ref, non_const_var_error,\n\tcxx_eval_trinary_expression, var_in_constexpr_fn,\n\tcxx_eval_constant_expression, cxx_eval_outermost_constant_expr,\n\tis_sub_constant_expr, cxx_constant_value, maybe_constant_value,\n\tmaybe_constant_init, potential_constant_expression_1,\n\tpotential_constant_expression, potential_rvalue_constant_expression,\n\trequire_potential_constant_expression,\n\trequire_potential_rvalue_constant_expression): Moved definitions...\n\t* constexpr.c: ... here, new file.\n\t* Make-lang.in: Update.\n\t* config-lang.in: Likewise.\n\nFrom-SVN: r216263", "tree": {"sha": "f93e0e69fde042fd92f60d4a7d8e7bea5a6fa1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93e0e69fde042fd92f60d4a7d8e7bea5a6fa1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d76680f75f8f1028828c9b74a364c7e99b08826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d76680f75f8f1028828c9b74a364c7e99b08826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d76680f75f8f1028828c9b74a364c7e99b08826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d76680f75f8f1028828c9b74a364c7e99b08826/comments", "author": null, "committer": null, "parents": [{"sha": "5f83e90bb6f44cb079edf65b55f3caab34c42516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f83e90bb6f44cb079edf65b55f3caab34c42516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f83e90bb6f44cb079edf65b55f3caab34c42516"}], "stats": {"total": 6834, "additions": 3454, "deletions": 3380}, "files": [{"sha": "8b8d519f9464af0beeaafd518e6318b23993535f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d76680f75f8f1028828c9b74a364c7e99b08826", "patch": "@@ -1,3 +1,39 @@\n+2014-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* semantics.c (is_instantiation_of_constexpr, literal_type_p,\n+\tensure_literal_type_for_constexpr_object,\n+\tconstexpr_fundef_hasher::equal, constexpr_fundef_hasher::hash,\n+\tretrieve_constexpr_fundef, is_valid_constexpr_fn,\n+\tbuild_anon_member_initialization, build_data_member_initialization,\n+\tcheck_constexpr_bind_expr_vars, check_constexpr_ctor_body_1,\n+\tcheck_constexpr_ctor_body, sort_constexpr_mem_initializers,\n+\tbuild_constexpr_constructor_member_initializers, constexpr_fn_retval,\n+\tmassage_constexpr_body, cx_check_missing_mem_inits,\n+\tregister_constexpr_fundef, explain_invalid_constexpr_fn,\n+\tconstexpr_call_hasher::hash, constexpr_call_hasher::equal,\n+\tmaybe_initialize_constexpr_call_table, get_function_named_in_call,\n+\tget_nth_callarg, lookup_parameter_binding,\n+\tcxx_eval_builtin_function_call, adjust_temp_type,\n+\tcxx_bind_parameters_in_call, push_cx_call_context,\n+\tpop_cx_call_context, cx_error_context, cxx_eval_call_expression,\n+\treduced_constant_expression_p, verify_constant,\n+\tcxx_eval_unary_expression, cxx_eval_binary_expression,\n+\tcxx_eval_conditional_expression, cxx_eval_array_reference,\n+\tcxx_eval_component_reference, cxx_eval_bit_field_ref,\n+\tcxx_eval_logical_expression, base_field_constructor_elt, \n+\tcxx_eval_bare_aggregate, cxx_eval_vec_init_1, cxx_eval_vec_init,\n+\tcxx_fold_indirect_ref, cxx_eval_indirect_ref, non_const_var_error,\n+\tcxx_eval_trinary_expression, var_in_constexpr_fn,\n+\tcxx_eval_constant_expression, cxx_eval_outermost_constant_expr,\n+\tis_sub_constant_expr, cxx_constant_value, maybe_constant_value,\n+\tmaybe_constant_init, potential_constant_expression_1,\n+\tpotential_constant_expression, potential_rvalue_constant_expression,\n+\trequire_potential_constant_expression,\n+\trequire_potential_rvalue_constant_expression): Moved definitions...\n+\t* constexpr.c: ... here, new file.\n+\t* Make-lang.in: Update.\n+\t* config-lang.in: Likewise.\n+\n 2014-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63455"}, {"sha": "1c8fa6680960b51476c9c0dc7234c06e8cfc460c", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=2d76680f75f8f1028828c9b74a364c7e99b08826", "patch": "@@ -78,7 +78,7 @@ CXX_AND_OBJCXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/mangle.o cp/cp-objcp-common.o cp/name-lookup.o cp/cxx-pretty-print.o \\\n  cp/cp-cilkplus.o \\\n  cp/cp-gimplify.o cp/cp-array-notation.o cp/lambda.o \\\n- cp/vtable-class-hierarchy.o $(CXX_C_OBJS)\n+ cp/vtable-class-hierarchy.o cp/constexpr.o $(CXX_C_OBJS)\n \n # Language-specific object files for C++.\n CXX_OBJS = cp/cp-lang.o c-family/stub-objc.o $(CXX_AND_OBJCXX_OBJS)"}, {"sha": "7bdd89e57a0c5b35d9a495b52505b00bbe400faa", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=2d76680f75f8f1028828c9b74a364c7e99b08826", "patch": "@@ -29,4 +29,4 @@ compilers=\"cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3\"\n \n-gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c \\$(srcdir)/cp/vtable-class-hierarchy.c\"\n+gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c \\$(srcdir)/cp/vtable-class-hierarchy.c \\$(srcdir)/cp/constexpr.c\""}, {"sha": "30a5e08b55b89dd645e1acabd2d57b77bb119926", "filename": "gcc/cp/constexpr.c", "status": "added", "additions": 3391, "deletions": 0, "changes": 3391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=2d76680f75f8f1028828c9b74a364c7e99b08826"}, {"sha": "c450b5b909d830fa8f181bbcd05b6c00f28baf10", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2d76680f75f8f1028828c9b74a364c7e99b08826", "patch": "@@ -5834,23 +5834,7 @@ extern tree begin_handler\t\t\t(void);\n extern void finish_handler_parms\t\t(tree, tree);\n extern void finish_handler\t\t\t(tree);\n extern void finish_cleanup\t\t\t(tree, tree);\n-extern bool literal_type_p (tree);\n-extern tree register_constexpr_fundef (tree, tree);\n-extern bool check_constexpr_ctor_body (tree, tree, bool);\n-extern tree ensure_literal_type_for_constexpr_object (tree);\n-extern bool potential_constant_expression (tree);\n-extern bool potential_rvalue_constant_expression (tree);\n-extern bool require_potential_constant_expression (tree);\n-extern bool require_potential_rvalue_constant_expression (tree);\n-extern tree cxx_constant_value (tree);\n-extern tree maybe_constant_value (tree);\n-extern tree maybe_constant_init (tree);\n-extern bool is_sub_constant_expr (tree);\n-extern bool reduced_constant_expression_p (tree);\n-extern bool var_in_constexpr_fn (tree);\n-extern void explain_invalid_constexpr_fn (tree);\n-extern vec<tree> cx_error_context (void);\n-extern bool is_this_parameter (tree);\n+extern bool is_this_parameter                   (tree);\n \n enum {\n   BCS_NO_SCOPE = 1,\n@@ -6320,6 +6304,26 @@ extern bool cpp_validate_cilk_plus_loop\t\t(tree);\n extern tree expand_array_notation_exprs         (tree);\n bool cilkplus_an_triplet_types_ok_p             (location_t, tree, tree, tree,\n \t\t\t\t\t\t tree);\n+\n+/* In constexpr.c */\n+extern bool literal_type_p                      (tree);\n+extern tree register_constexpr_fundef           (tree, tree);\n+extern bool check_constexpr_ctor_body           (tree, tree, bool);\n+extern tree ensure_literal_type_for_constexpr_object (tree);\n+extern bool potential_constant_expression       (tree);\n+extern bool potential_rvalue_constant_expression (tree);\n+extern bool require_potential_constant_expression (tree);\n+extern bool require_potential_rvalue_constant_expression (tree);\n+extern tree cxx_constant_value                  (tree);\n+extern tree maybe_constant_value                (tree);\n+extern tree maybe_constant_init                 (tree);\n+extern bool is_sub_constant_expr                (tree);\n+extern bool reduced_constant_expression_p       (tree);\n+extern bool is_instantiation_of_constexpr       (tree);\n+extern bool var_in_constexpr_fn                 (tree);\n+extern void explain_invalid_constexpr_fn        (tree);\n+extern vec<tree> cx_error_context               (void);\n+\n /* In c-family/cilk.c */\n extern bool cilk_valid_spawn                    (tree);\n "}, {"sha": "0e675a3a3f231ffba7a2adcfcff9d1b179d57b76", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 3361, "changes": 3365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76680f75f8f1028828c9b74a364c7e99b08826/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2d76680f75f8f1028828c9b74a364c7e99b08826"}]}