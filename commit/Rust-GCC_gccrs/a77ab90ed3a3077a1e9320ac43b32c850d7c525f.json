{"sha": "a77ab90ed3a3077a1e9320ac43b32c850d7c525f", "node_id": "C_kwDOANBUbNoAKGE3N2FiOTBlZDNhMzA3N2ExZTkzMjBhYzQzYjMyYzg1MGQ3YzUyNWY", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-01-21T17:09:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:29Z"}, "message": "[Ada] Incorrect ineffective use type clause warning\n\nThis patch fixes an issue in the compiler whereby a use_type_clause\nincorrectly gets flagged as ineffective when the use of it comes after a\ngeneric package instantiation where the installation of private use\nclauses are required and one such clause references the same type.\n\ngcc/ada/\n\n\t* sem_ch8.adb (Use_One_Type): Remove code in charge of setting\n\tCurrent_Use_Clause when Id is known to be redundant, and modify\n\tthe printing of errors associated with redundant use type\n\tclauses so that line number gets included in more cases.", "tree": {"sha": "d2046761f32af2c72df09111c0cee3095440f7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2046761f32af2c72df09111c0cee3095440f7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a77ab90ed3a3077a1e9320ac43b32c850d7c525f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77ab90ed3a3077a1e9320ac43b32c850d7c525f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a77ab90ed3a3077a1e9320ac43b32c850d7c525f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77ab90ed3a3077a1e9320ac43b32c850d7c525f/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e6a22b54b0bfc78288c7ffb94ac6afad39ee7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e6a22b54b0bfc78288c7ffb94ac6afad39ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e6a22b54b0bfc78288c7ffb94ac6afad39ee7e"}], "stats": {"total": 181, "additions": 72, "deletions": 109}, "files": [{"sha": "1818778912102a63c3e2445fafe8c202a90efaa5", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 72, "deletions": 109, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77ab90ed3a3077a1e9320ac43b32c850d7c525f/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77ab90ed3a3077a1e9320ac43b32c850d7c525f/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a77ab90ed3a3077a1e9320ac43b32c850d7c525f", "patch": "@@ -10571,20 +10571,6 @@ package body Sem_Ch8 is\n       --  even if it is redundant at the place of the instantiation.\n \n       elsif Redundant_Use (Id) then\n-\n-         --  We must avoid incorrectly setting the Current_Use_Clause when we\n-         --  are working with a redundant clause that has already been linked\n-         --  in the Prev_Use_Clause chain, otherwise the chain will break.\n-\n-         if Present (Current_Use_Clause (T))\n-           and then Present (Prev_Use_Clause (Current_Use_Clause (T)))\n-           and then Parent (Id) = Prev_Use_Clause (Current_Use_Clause (T))\n-         then\n-            null;\n-         else\n-            Set_Current_Use_Clause (T, Parent (Id));\n-         end if;\n-\n          Set_Used_Operations (Parent (Id), New_Elmt_List);\n \n       --  If the subtype mark designates a subtype in a different package,\n@@ -10689,121 +10675,98 @@ package body Sem_Ch8 is\n                --  Start of processing for Use_Clause_Known\n \n                begin\n-                  --  If both current use_type_clause and the use_type_clause\n-                  --  for the type are at the compilation unit level, one of\n-                  --  the units must be an ancestor of the other, and the\n-                  --  warning belongs on the descendant.\n-\n-                  if Nkind (Parent (Clause1)) = N_Compilation_Unit\n-                       and then\n-                     Nkind (Parent (Clause2)) = N_Compilation_Unit\n-                  then\n-                     --  If the unit is a subprogram body that acts as spec,\n-                     --  the context clause is shared with the constructed\n-                     --  subprogram spec. Clearly there is no redundancy.\n-\n-                     if Clause1 = Clause2 then\n-                        return;\n-                     end if;\n+                  --  If the unit is a subprogram body that acts as spec, the\n+                  --  context clause is shared with the constructed subprogram\n+                  --  spec. Clearly there is no redundancy.\n \n-                     Unit1 := Unit (Parent (Clause1));\n-                     Unit2 := Unit (Parent (Clause2));\n+                  if Clause1 = Clause2 then\n+                     return;\n+                  end if;\n \n-                     --  If both clauses are on same unit, or one is the body\n-                     --  of the other, or one of them is in a subunit, report\n-                     --  redundancy on the later one.\n+                  Unit1 := Unit (Enclosing_Comp_Unit_Node (Clause1));\n+                  Unit2 := Unit (Enclosing_Comp_Unit_Node (Clause2));\n \n-                     if Unit1 = Unit2 or else Nkind (Unit1) = N_Subunit then\n-                        Error_Msg_Sloc := Sloc (Current_Use_Clause (T));\n-                        Error_Msg_NE -- CODEFIX\n-                          (\"& is already use-visible through previous \"\n-                           & \"use_type_clause #??\", Clause1, T);\n-                        return;\n-\n-                     elsif Nkind (Unit2) in N_Package_Body | N_Subprogram_Body\n-                       and then Nkind (Unit1) /= Nkind (Unit2)\n-                       and then Nkind (Unit1) /= N_Subunit\n-                     then\n-                        Error_Msg_Sloc := Sloc (Clause1);\n-                        Error_Msg_NE -- CODEFIX\n-                          (\"& is already use-visible through previous \"\n-                           & \"use_type_clause #??\", Current_Use_Clause (T), T);\n-                        return;\n-                     end if;\n+                  --  If both clauses are on same unit, or one is the body of\n+                  --  the other, or one of them is in a subunit, report\n+                  --  redundancy on the later one.\n \n-                     --  There is a redundant use_type_clause in a child unit.\n-                     --  Determine which of the units is more deeply nested.\n-                     --  If a unit is a package instance, retrieve the entity\n-                     --  and its scope from the instance spec.\n+                  if Unit1 = Unit2\n+                    or else Nkind (Unit1) = N_Subunit\n+                    or else\n+                      (Nkind (Unit2) in N_Package_Body | N_Subprogram_Body\n+                        and then Nkind (Unit1) /= Nkind (Unit2)\n+                        and then Nkind (Unit1) /= N_Subunit)\n+                  then\n+                     Error_Msg_Sloc := Sloc (Clause1);\n+                     Error_Msg_NE -- CODEFIX\n+                       (\"& is already use-visible through previous \"\n+                        & \"use_type_clause #??\", Clause2, T);\n+                     return;\n+                  end if;\n \n-                     Ent1 := Entity_Of_Unit (Unit1);\n-                     Ent2 := Entity_Of_Unit (Unit2);\n+                  --  There is a redundant use_type_clause in a child unit.\n+                  --  Determine which of the units is more deeply nested. If a\n+                  --  unit is a package instance, retrieve the entity and its\n+                  --  scope from the instance spec.\n \n-                     if Scope (Ent2) = Standard_Standard then\n-                        Error_Msg_Sloc := Sloc (Current_Use_Clause (T));\n-                        Err_No := Clause1;\n+                  Ent1 := Entity_Of_Unit (Unit1);\n+                  Ent2 := Entity_Of_Unit (Unit2);\n \n-                     elsif Scope (Ent1) = Standard_Standard then\n-                        Error_Msg_Sloc := Sloc (Id);\n-                        Err_No := Clause2;\n+                  if Scope (Ent2) = Standard_Standard then\n+                     Error_Msg_Sloc := Sloc (Clause2);\n+                     Err_No := Clause1;\n \n-                     --  If both units are child units, we determine which one\n-                     --  is the descendant by the scope distance to the\n-                     --  ultimate parent unit.\n+                  elsif Scope (Ent1) = Standard_Standard then\n+                     Error_Msg_Sloc := Sloc (Id);\n+                     Err_No := Clause2;\n \n-                     else\n-                        declare\n-                           S1 : Entity_Id;\n-                           S2 : Entity_Id;\n-\n-                        begin\n-                           S1 := Scope (Ent1);\n-                           S2 := Scope (Ent2);\n-                           while Present (S1)\n-                             and then Present (S2)\n-                             and then S1 /= Standard_Standard\n-                             and then S2 /= Standard_Standard\n-                           loop\n-                              S1 := Scope (S1);\n-                              S2 := Scope (S2);\n-                           end loop;\n+                  --  If both units are child units, we determine which one is\n+                  --  the descendant by the scope distance to the ultimate\n+                  --  parent unit.\n \n-                           if S1 = Standard_Standard then\n-                              Error_Msg_Sloc := Sloc (Id);\n-                              Err_No := Clause2;\n-                           else\n-                              Error_Msg_Sloc := Sloc (Current_Use_Clause (T));\n-                              Err_No := Clause1;\n-                           end if;\n-                        end;\n-                     end if;\n+                  else\n+                     declare\n+                        S1 : Entity_Id;\n+                        S2 : Entity_Id;\n \n-                     if Parent (Id) /= Err_No then\n-                        if Most_Descendant_Use_Clause\n-                             (Err_No, Parent (Id)) = Parent (Id)\n-                        then\n-                           Error_Msg_Sloc := Sloc (Err_No);\n-                           Err_No := Parent (Id);\n+                     begin\n+                        S1 := Scope (Ent1);\n+                        S2 := Scope (Ent2);\n+                        while Present (S1)\n+                          and then Present (S2)\n+                          and then S1 /= Standard_Standard\n+                          and then S2 /= Standard_Standard\n+                        loop\n+                           S1 := Scope (S1);\n+                           S2 := Scope (S2);\n+                        end loop;\n+\n+                        if S1 = Standard_Standard then\n+                           Error_Msg_Sloc := Sloc (Id);\n+                           Err_No := Clause2;\n+                        else\n+                           Error_Msg_Sloc := Sloc (Clause2);\n+                           Err_No := Clause1;\n                         end if;\n+                     end;\n+                  end if;\n \n-                        Error_Msg_NE -- CODEFIX\n-                          (\"& is already use-visible through previous \"\n-                           & \"use_type_clause #??\", Err_No, Id);\n+                  if Parent (Id) /= Err_No then\n+                     if Most_Descendant_Use_Clause\n+                          (Err_No, Parent (Id)) = Parent (Id)\n+                     then\n+                        Error_Msg_Sloc := Sloc (Err_No);\n+                        Err_No := Parent (Id);\n                      end if;\n \n-                  --  Case where current use_type_clause and use_type_clause\n-                  --  for the type are not both at the compilation unit level.\n-                  --  In this case we don't have location information.\n-\n-                  else\n                      Error_Msg_NE -- CODEFIX\n                        (\"& is already use-visible through previous \"\n-                        & \"use_type_clause??\", Id, T);\n+                        & \"use_type_clause #??\", Err_No, Id);\n                   end if;\n                end Use_Clause_Known;\n \n-            --  Here if Current_Use_Clause is not set for T, another case where\n-            --  we do not have the location information available.\n+            --  Here Current_Use_Clause is not set for T, so we do not have the\n+            --  location information available.\n \n             else\n                Error_Msg_NE -- CODEFIX"}]}