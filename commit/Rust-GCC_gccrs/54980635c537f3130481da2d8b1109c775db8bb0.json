{"sha": "54980635c537f3130481da2d8b1109c775db8bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5ODA2MzVjNTM3ZjMxMzA0ODFkYTJkOGIxMTA5Yzc3NWRiOGJiMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-26T16:40:59Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-29T15:01:58Z"}, "message": "c++: Check uniqueness of concepts/variable templates [PR94553]\n\nThis patch wraps up PR94553.  Variable template names have no C\ncompatibility implications so they should be unique in their\ndeclarative region.  It occurred to me that this applies to concepts\nas well.  This is not specified in [basic.scope.declarative]/4.2\nbut that seems like a bug in the standard.\n\nI couldn't use variable_template_p because that uses PRIMARY_TEMPLATE_P\nwhich uses DECL_PRIMARY_TEMPLATE and that might not have been set up yet\n(push_template_decl hasn't yet been called).  PRIMARY_TEMPLATE_P is\nimportant to distinguish between a variable template and a variable in a\nfunction template.  But I think we don't have to worry about that in\nduplicate_decls: a template declaration cannot appear at block scope,\nand additional checks in duplicate_decls suggest that it won't ever\nsee a TEMPLATE_DECL for a variable in a function template.  So\nchecking that the DECL_TEMPLATE_RESULT is a VAR_DECL seems to be fine.\nI could have added a default argument to variable_template_p too to\navoid checking PRIMARY_TEMPLATE_P but it didn't seem worth the effort.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94553\n\t* decl.c (duplicate_decls): Make sure a concept or a variable\n\ttemplate is unique in its declarative region.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94553\n\t* g++.dg/cpp1y/pr68578.C: Adjust dg-error.\n\t* g++.dg/cpp1y/var-templ66.C: New test.\n\t* g++.dg/cpp2a/concepts-redecl1.C: New test.", "tree": {"sha": "fa66658f274fc2274a323c83c1fc709fc3232a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa66658f274fc2274a323c83c1fc709fc3232a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54980635c537f3130481da2d8b1109c775db8bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54980635c537f3130481da2d8b1109c775db8bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54980635c537f3130481da2d8b1109c775db8bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54980635c537f3130481da2d8b1109c775db8bb0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1005f553d3543bb56dc6b9b34ee35455d697ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1005f553d3543bb56dc6b9b34ee35455d697ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1005f553d3543bb56dc6b9b34ee35455d697ca4"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "45c871af7415e86d722a723be72d47117f15c309", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=54980635c537f3130481da2d8b1109c775db8bb0", "patch": "@@ -1679,6 +1679,16 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       else if (DECL_TYPE_TEMPLATE_P (olddecl)\n \t       || DECL_TYPE_TEMPLATE_P (newdecl))\n \t/* Class template conflicts.  */;\n+      else if ((TREE_CODE (olddecl) == TEMPLATE_DECL\n+\t\t&& DECL_TEMPLATE_RESULT (olddecl)\n+\t\t&& TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == VAR_DECL)\n+\t       || (TREE_CODE (newdecl) == TEMPLATE_DECL\n+\t\t   && DECL_TEMPLATE_RESULT (newdecl)\n+\t\t   && TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) == VAR_DECL))\n+\t/* Variable template conflicts.  */;\n+      else if (concept_definition_p (olddecl)\n+\t       || concept_definition_p (newdecl))\n+\t/* Concept conflicts.  */;\n       else if ((TREE_CODE (newdecl) == FUNCTION_DECL\n \t\t&& DECL_FUNCTION_TEMPLATE_P (olddecl))\n \t       || (TREE_CODE (olddecl) == FUNCTION_DECL\n@@ -1701,7 +1711,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t      \" literal operator template\", newdecl);\n \t  else\n \t    return NULL_TREE;\n-\t  \n+\n \t  inform (olddecl_loc, \"previous declaration %q#D\", olddecl);\n \t  return error_mark_node;\n \t}"}, {"sha": "9b3898176f1e2c9fbb7e8e043d35817dfba2c2b2", "filename": "gcc/testsuite/g++.dg/cpp1y/pr68578.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C?ref=54980635c537f3130481da2d8b1109c775db8bb0", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++14 } }\n \n-template <typename> struct bar foo; template <> struct foo<>:  // { dg-error \"class template\" }\n+template <typename> struct bar foo; template <> struct foo<>:  // { dg-error \"class template|redeclared\" }\n // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "65cd3d9d31bef741be2bb968d11df04a93166bd3", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ66.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ66.C?ref=54980635c537f3130481da2d8b1109c775db8bb0", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/94553\n+// { dg-do compile { target c++14 } }\n+\n+struct C { };\n+template<typename> int C; // { dg-error \"different kind of entity\" }\n+template<typename> int D;\n+struct D { }; // { dg-error \"different kind of entity\" }"}, {"sha": "33cd778a318b84021d5bbe72acccc69a04037913", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-redecl1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-redecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54980635c537f3130481da2d8b1109c775db8bb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-redecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-redecl1.C?ref=54980635c537f3130481da2d8b1109c775db8bb0", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/94553\n+// { dg-do compile { target c++20 } }\n+\n+struct E { };\n+template<typename> concept E = false; // { dg-error \"different kind of entity\" }\n+template<typename> concept F = false;\n+struct F { }; // { dg-error \"different kind of entity\" }"}]}