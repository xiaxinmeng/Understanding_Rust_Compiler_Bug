{"sha": "1fe94b97e55fcbc14419a17b2a485fe4186619d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZlOTRiOTdlNTVmY2JjMTQ0MTlhMTdiMmE0ODVmZTQxODY2MTlkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-18T23:46:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-18T23:46:24Z"}, "message": "decl.c (delete_block): Remove.\n\n\t* decl.c (delete_block): Remove.\n\t* cp-tree.h: Remove the corresponding prototype.\n\nFrom-SVN: r93866", "tree": {"sha": "26ab1ba1a095d55ff32c5f39e1b8c339a1f3f77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ab1ba1a095d55ff32c5f39e1b8c339a1f3f77b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fe94b97e55fcbc14419a17b2a485fe4186619d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe94b97e55fcbc14419a17b2a485fe4186619d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe94b97e55fcbc14419a17b2a485fe4186619d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe94b97e55fcbc14419a17b2a485fe4186619d3/comments", "author": null, "committer": null, "parents": [{"sha": "8c96cd51c7156218a1b26da8d08885649d234aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c96cd51c7156218a1b26da8d08885649d234aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c96cd51c7156218a1b26da8d08885649d234aee"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "222a22cc66841fccf4868efba5418cf06127bcf7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1fe94b97e55fcbc14419a17b2a485fe4186619d3", "patch": "@@ -1,3 +1,8 @@\n+2005-01-18  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* decl.c (delete_block): Remove.\n+\t* cp-tree.h: Remove the corresponding prototype.\n+\n 2005-01-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/19472"}, {"sha": "6142e3686015eb25e5e49f52065bd5c7b374f8e4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1fe94b97e55fcbc14419a17b2a485fe4186619d3", "patch": "@@ -3750,7 +3750,6 @@ extern void cxx_pop_function_context\t\t(struct function *);\n extern void cxx_mark_function_context\t\t(struct function *);\n extern void maybe_push_cleanup_level (tree);\n extern void finish_scope                        (void);\n-extern void delete_block\t\t\t(tree);\n extern void add_block_current_level\t\t(tree);\n extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);"}, {"sha": "d72ecb9f2edbcaec7cdae5854e76ad83a336f683", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe94b97e55fcbc14419a17b2a485fe4186619d3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1fe94b97e55fcbc14419a17b2a485fe4186619d3", "patch": "@@ -742,29 +742,6 @@ poplevel (int keep, int reverse, int functionbody)\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, block);\n }\n \n-/* Delete the node BLOCK from the current binding level.\n-   This is used for the block inside a stmt expr ({...})\n-   so that the block can be reinserted where appropriate.  */\n-\n-void\n-delete_block (tree block)\n-{\n-  tree t;\n-  if (current_binding_level->blocks == block)\n-    current_binding_level->blocks = TREE_CHAIN (block);\n-  for (t = current_binding_level->blocks; t;)\n-    {\n-      if (TREE_CHAIN (t) == block)\n-\tTREE_CHAIN (t) = TREE_CHAIN (block);\n-      else\n-\tt = TREE_CHAIN (t);\n-    }\n-  TREE_CHAIN (block) = NULL_TREE;\n-  /* Clear TREE_USED which is always set by poplevel.\n-     The flag is set again if insert_block is called.  */\n-  TREE_USED (block) = 0;\n-}\n-\n /* Insert BLOCK at the end of the list of subblocks of the\n    current binding level.  This is used when a BIND_EXPR is expanded,\n    to handle the BLOCK node inside the BIND_EXPR.  */"}]}