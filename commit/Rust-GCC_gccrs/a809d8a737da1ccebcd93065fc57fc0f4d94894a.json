{"sha": "a809d8a737da1ccebcd93065fc57fc0f4d94894a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwOWQ4YTczN2RhMWNjZWJjZDkzMDY1ZmM1N2ZjMGY0ZDk0ODk0YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-02T21:11:32Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-03T22:20:56Z"}, "message": "c++: GC during late parsing collects live data [PR91416]\n\nComing back to\n<https://gcc.gnu.org/pipermail/gcc-patches/2019-August/527699.html>:\n\nThis is a crash that points to a GC problem.  Consider this test:\n\n  __attribute__ ((unused)) struct S {\n    S() { }\n  } s;\n\nWe're parsing a simple-declaration.  While parsing the decl specs, we parse\nthe attribute, which means creating a TREE_LIST using ggc_alloc_*.\n\nA function body is a complete-class context so when parsing the\nmember-specification of this class-specifier, we parse the bodies of the\nfunctions we'd queued in cp_parser_late_parsing_for_member.  This then\nleads to this call chain:\ncp_parser_function_definition_after_declarator -> expand_or_defer_fn ->\nexpand_or_defer_fn_1 -> maybe_clone_body -> expand_or_defer_fn ->\ncgraph_node::finalize_function -> ggc_collect.\n\nIn this test, the ggc_collect call collects the TREE_LIST we had\nallocated, and a crash duly ensues.\n\nI couldn't do what Richard suggested, that is, attach the attribute list\nto struct S, because we don't pass decl_specs from cp_parser_type_specifier\ndown to cp_parser_class_specifier.  Therefore I've attempted to do \"push the\ndecl_specifiers onto a vec that is a GC root\", except I couldn't really push\nthe decl_specifiers, because first I'd have to mark cp_decl_specifier_seq with\nGTY(()) and even that wouldn't be enough for me to be able to create\n\n  static GTY(()) vec<cp_decl_specifier_seq *, va_gc>\n\nBut here we only care about cp_decl_specifier_seq::attributes, so the\npatch is just this.  I've also extended the test so now we test a nested\nclass too.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91416\n\t* parser.c: Create a GC root for attributes in a decl specifier.\n\t(cp_parser_type_specifier): Push/pop ->attributes onto/from it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/91416\n\t* g++.dg/other/gc7.C: New test.", "tree": {"sha": "4effe88e7b3bbba078f3ec228682944b5e9f6a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4effe88e7b3bbba078f3ec228682944b5e9f6a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a809d8a737da1ccebcd93065fc57fc0f4d94894a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a809d8a737da1ccebcd93065fc57fc0f4d94894a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a809d8a737da1ccebcd93065fc57fc0f4d94894a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a809d8a737da1ccebcd93065fc57fc0f4d94894a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89bc1d4e7cdd0b2d012050134ad1d464ec357f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bc1d4e7cdd0b2d012050134ad1d464ec357f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bc1d4e7cdd0b2d012050134ad1d464ec357f0b"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "c915d6415dedd73606c78c31faa6344d03ed1b96", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a809d8a737da1ccebcd93065fc57fc0f4d94894a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a809d8a737da1ccebcd93065fc57fc0f4d94894a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a809d8a737da1ccebcd93065fc57fc0f4d94894a", "patch": "@@ -18346,6 +18346,11 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   --parser->num_template_parameter_lists;\n }\n \n+/* Preserve the attributes across a garbage collect (by making it a GC\n+   root), which can occur when parsing a member function.  */\n+\n+static GTY(()) vec<tree, va_gc> *cp_parser_decl_specs_attrs;\n+\n /* Parse a type-specifier.\n \n    type-specifier:\n@@ -18438,8 +18443,12 @@ cp_parser_type_specifier (cp_parser* parser,\n       /* Parse tentatively so that we can back up if we don't find a\n \t class-specifier.  */\n       cp_parser_parse_tentatively (parser);\n+      if (decl_specs->attributes)\n+\tvec_safe_push (cp_parser_decl_specs_attrs, decl_specs->attributes);\n       /* Look for the class-specifier.  */\n       type_spec = cp_parser_class_specifier (parser);\n+      if (decl_specs->attributes)\n+\tcp_parser_decl_specs_attrs->pop ();\n       invoke_plugin_callbacks (PLUGIN_FINISH_TYPE, type_spec);\n       /* If that worked, we're done.  */\n       if (cp_parser_parse_definitely (parser))"}, {"sha": "ab436bac72f1c093d164302d8ed8555f94a7aaf5", "filename": "gcc/testsuite/g++.dg/other/gc7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a809d8a737da1ccebcd93065fc57fc0f4d94894a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a809d8a737da1ccebcd93065fc57fc0f4d94894a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc7.C?ref=a809d8a737da1ccebcd93065fc57fc0f4d94894a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91416 - GC during late parsing collects live data.\n+// { dg-do compile }\n+// { dg-options \"--param ggc-min-heapsize=0 --param ggc-min-expand=0\" }\n+\n+__attribute__ ((unused)) struct S {\n+  S() { }\n+} s;\n+\n+__attribute__ ((unused)) struct X {\n+  void fn ()\n+  {\n+    __attribute__ ((unused)) struct N {\n+\tN() { }\n+    } n;\n+  }\n+} x;"}]}