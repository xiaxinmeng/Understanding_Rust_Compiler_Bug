{"sha": "3d78f2e96e29feaff7046c22fdc97aa58bee9688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3OGYyZTk2ZTI5ZmVhZmY3MDQ2YzIyZmRjOTdhYTU4YmVlOTY4OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-22T01:11:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-22T01:11:29Z"}, "message": "c-common.h (enum rid): Add RID_THREAD.\n\n        * c-common.h (enum rid): Add RID_THREAD.\n        * c-decl.c (start_decl): Do not set DECL_COMMON for tls variables.\n        (grokdeclarator): Grok __thread.\n        * c-parse.in (reswords): Add __thread.\n        (rid_to_yy): Add RID_THREAD.\n        * cp/lex.c (rid_to_yy): Add RID_THREAD.\n\n        * tree.h (DECL_THREAD_LOCAL): New.\n        (struct tree_decl): Add thread_local_flag.\n        * print-tree.c (print_node): Dump DECL_THREAD_LOCAL.\n        * tree.c (staticp): TLS variables are not static.\n\n        * target-def.h (TARGET_HAVE_TLS): New.\n        * target.h (have_tls): New.\n        * output.h (SECTION_TLS): New.\n        * varasm.c (assemble_variable): TLS variables can't be common for now.\n        (default_section_type_flags): Handle .tdata and .tbss.\n        (default_elf_asm_named_section): Handle SECTION_TLS.\n        (categorize_decl_for_section): Handle DECL_THREAD_LOCAL.\n\n        * flags.h (flag_tls_default): Declare.\n        * toplev.c (flag_tls_default): Define.\n        (display_help): Display help for it.\n        (decode_f_option): Set it.\n\n        * doc/extend.texi (Thread-Local): New node describing language-level\n        thread-local storage.\n        * doc/invoke.texi (-ftls-model): Document.\n\n        * fixinc/inclhack.def (thread_keyword): New.\n        * fixinc/fixincl.x: Rebuild.\n\nFrom-SVN: r53715", "tree": {"sha": "1d3e8e4b6c824cf31a86c19bd79a5a7767a5a468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3e8e4b6c824cf31a86c19bd79a5a7767a5a468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d78f2e96e29feaff7046c22fdc97aa58bee9688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78f2e96e29feaff7046c22fdc97aa58bee9688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d78f2e96e29feaff7046c22fdc97aa58bee9688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78f2e96e29feaff7046c22fdc97aa58bee9688/comments", "author": null, "committer": null, "parents": [{"sha": "f5eb2fc83e49d200496a62d29b3236c6cfd76a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eb2fc83e49d200496a62d29b3236c6cfd76a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5eb2fc83e49d200496a62d29b3236c6cfd76a91"}], "stats": {"total": 376, "additions": 327, "deletions": 49}, "files": [{"sha": "f6fc7d9862f1957a35a7d1e23063ba2d3d0fb911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1,3 +1,36 @@\n+2002-05-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.h (enum rid): Add RID_THREAD.\n+\t* c-decl.c (start_decl): Do not set DECL_COMMON for tls variables.\n+\t(grokdeclarator): Grok __thread.\n+\t* c-parse.in (reswords): Add __thread.\n+\t(rid_to_yy): Add RID_THREAD.\n+\n+\t* tree.h (DECL_THREAD_LOCAL): New.\n+\t(struct tree_decl): Add thread_local_flag.\n+\t* print-tree.c (print_node): Dump DECL_THREAD_LOCAL.\n+\t* tree.c (staticp): TLS variables are not static.\n+\n+\t* target-def.h (TARGET_HAVE_TLS): New.\n+\t* target.h (have_tls): New.\n+\t* output.h (SECTION_TLS): New.\n+\t* varasm.c (assemble_variable): TLS variables can't be common for now.\n+\t(default_section_type_flags): Handle .tdata and .tbss.\n+\t(default_elf_asm_named_section): Handle SECTION_TLS.\n+\t(categorize_decl_for_section): Handle DECL_THREAD_LOCAL.\n+\n+\t* flags.h (flag_tls_default): Declare.\n+\t* toplev.c (flag_tls_default): Define.\n+\t(display_help): Display help for it.\n+\t(decode_f_option): Set it.\n+\n+\t* doc/extend.texi (Thread-Local): New node describing language-level\n+\tthread-local storage.\n+\t* doc/invoke.texi (-ftls-model): Document.\n+\n+\t* fixinc/inclhack.def (thread_keyword): New.\n+\t* fixinc/fixincl.x: Rebuild.\n+\n 2002-05-21  Jeffrey A Law  <law@redhat.com>\n \n \t* i386.c (ix86_sched_reorder_ppro): Fix typo/thinko."}, {"sha": "320d03d8253dc70886ed68cd886e4d78d12a1234", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -58,7 +58,7 @@ enum rid\n   RID_VOLATILE, RID_SIGNED,  RID_AUTO,  RID_RESTRICT,\n \n   /* C extensions */\n-  RID_BOUNDED, RID_UNBOUNDED, RID_COMPLEX,\n+  RID_BOUNDED, RID_UNBOUNDED, RID_COMPLEX, RID_THREAD,\n \n   /* C++ */\n   RID_FRIEND, RID_VIRTUAL, RID_EXPLICIT, RID_EXPORT, RID_MUTABLE,"}, {"sha": "0890a2a58c42a8e6d8612e2d48a200f08355a144", "filename": "gcc/c-decl.c", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -3350,9 +3350,19 @@ start_decl (declarator, declspecs, initialized, attributes)\n   /* ANSI specifies that a tentative definition which is not merged with\n      a non-tentative definition behaves exactly like a definition with an\n      initializer equal to zero.  (Section 3.7.2)\n-     -fno-common gives strict ANSI behavior.  Usually you don't want it.\n-     This matters only for variables with external linkage.  */\n-  if (!initialized && (! flag_no_common || ! TREE_PUBLIC (decl)))\n+\n+     -fno-common gives strict ANSI behavior, though this tends to break\n+     a large body of code that grew up without this rule.\n+\n+     Thread-local variables are never common, since there's no entrenched\n+     body of code to break, and it allows more efficient variable references\n+     in the presense of dynamic linking.  */\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && !initialized\n+      && TREE_PUBLIC (decl)\n+      && !DECL_THREAD_LOCAL (decl)\n+      && !flag_no_common)\n     DECL_COMMON (decl) = 1;\n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n@@ -3933,7 +3943,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  enum rid i = C_RID_CODE (id);\n \t  if ((int) i <= (int) RID_LAST_MODIFIER)\n \t    {\n-\t      if (i == RID_LONG && (specbits & (1 << (int) i)))\n+\t      if (i == RID_LONG && (specbits & (1 << (int) RID_LONG)))\n \t\t{\n \t\t  if (longlong)\n \t\t    error (\"`long long long' is too long for GCC\");\n@@ -3947,6 +3957,19 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t}\n \t      else if (specbits & (1 << (int) i))\n \t\tpedwarn (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n+\n+\t      /* Diagnose \"__thread extern\".  Recall that this list\n+\t\t is in the reverse order seen in the text.  */\n+\t      if (i == RID_THREAD\n+\t\t  && (specbits & (1 << (int) RID_EXTERN\n+\t\t\t\t  | 1 << (int) RID_STATIC)))\n+\t\t{\n+\t\t  if (specbits & 1 << (int) RID_EXTERN)\n+\t\t    error (\"`__thread' before `extern'\");\n+\t\t  else\n+\t\t    error (\"`__thread' before `static'\");\n+\t\t}\n+\n \t      specbits |= 1 << (int) i;\n \t      goto found;\n \t    }\n@@ -4196,6 +4219,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     if (specbits & 1 << (int) RID_REGISTER) nclasses++;\n     if (specbits & 1 << (int) RID_TYPEDEF) nclasses++;\n \n+    /* \"static __thread\" and \"extern __thread\" are allowed.  */\n+    if ((specbits & (1 << (int) RID_THREAD\n+\t\t     | 1 << (int) RID_STATIC\n+\t\t     | 1 << (int) RID_EXTERN)) == (1 << (int) RID_THREAD))\n+      nclasses++;\n+\n     /* Warn about storage classes that are invalid for certain\n        kinds of declarations (parameters, typenames, etc.).  */\n \n@@ -4205,7 +4234,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t     && (specbits\n \t\t & ((1 << (int) RID_REGISTER)\n \t\t    | (1 << (int) RID_AUTO)\n-\t\t    | (1 << (int) RID_TYPEDEF))))\n+\t\t    | (1 << (int) RID_TYPEDEF)\n+\t\t    | (1 << (int) RID_THREAD))))\n       {\n \tif (specbits & 1 << (int) RID_AUTO\n \t    && (pedantic || current_binding_level == global_binding_level))\n@@ -4214,8 +4244,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  error (\"function definition declared `register'\");\n \tif (specbits & 1 << (int) RID_TYPEDEF)\n \t  error (\"function definition declared `typedef'\");\n+\tif (specbits & 1 << (int) RID_THREAD)\n+\t  error (\"function definition declared `__thread'\");\n \tspecbits &= ~((1 << (int) RID_TYPEDEF) | (1 << (int) RID_REGISTER)\n-\t\t      | (1 << (int) RID_AUTO));\n+\t\t      | (1 << (int) RID_AUTO) | (1 << (int) RID_THREAD));\n       }\n     else if (decl_context != NORMAL && nclasses > 0)\n       {\n@@ -4238,7 +4270,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t      }\n \t    specbits &= ~((1 << (int) RID_TYPEDEF) | (1 << (int) RID_REGISTER)\n \t\t\t  | (1 << (int) RID_AUTO) | (1 << (int) RID_STATIC)\n-\t\t\t  | (1 << (int) RID_EXTERN));\n+\t\t\t  | (1 << (int) RID_EXTERN) | (1 << (int) RID_THREAD));\n \t  }\n       }\n     else if (specbits & 1 << (int) RID_EXTERN && initialized && ! funcdef_flag)\n@@ -4249,12 +4281,25 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \telse\n \t  error (\"`%s' has both `extern' and initializer\", name);\n       }\n-    else if (specbits & 1 << (int) RID_EXTERN && funcdef_flag\n-\t     && current_binding_level != global_binding_level)\n-      error (\"nested function `%s' declared `extern'\", name);\n-    else if (current_binding_level == global_binding_level\n-\t     && specbits & (1 << (int) RID_AUTO))\n-      error (\"top-level declaration of `%s' specifies `auto'\", name);\n+    else if (current_binding_level == global_binding_level)\n+      {\n+\tif (specbits & 1 << (int) RID_AUTO)\n+\t  error (\"top-level declaration of `%s' specifies `auto'\", name);\n+      }\n+    else\n+      {\n+\tif (specbits & 1 << (int) RID_EXTERN && funcdef_flag)\n+\t  error (\"nested function `%s' declared `extern'\", name);\n+\telse if ((specbits & (1 << (int) RID_THREAD\n+\t\t\t       | 1 << (int) RID_EXTERN\n+\t\t\t       | 1 << (int) RID_STATIC))\n+\t\t == (1 << (int) RID_THREAD))\n+\t  {\n+\t    error (\"function-scope `%s' implicitly auto and declared `__thread'\",\n+\t\t   name);\n+\t    specbits &= ~(1 << (int) RID_THREAD);\n+\t  }\n+      }\n   }\n \n   /* Now figure out the structure of the declarator proper.\n@@ -4842,6 +4887,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  pedwarn (\"invalid storage class for function `%s'\", name);\n \tif (specbits & (1 << (int) RID_REGISTER))\n \t  error (\"invalid storage class for function `%s'\", name);\n+\tif (specbits & (1 << (int) RID_THREAD))\n+\t  error (\"invalid storage class for function `%s'\", name);\n \t/* Function declaration not at top level.\n \t   Storage classes other than `extern' are not allowed\n \t   and `extern' makes no difference.  */\n@@ -4934,22 +4981,32 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  pedwarn_with_decl (decl, \"variable `%s' declared `inline'\");\n \n \tDECL_EXTERNAL (decl) = extern_ref;\n+\n \t/* At top level, the presence of a `static' or `register' storage\n \t   class specifier, or the absence of all storage class specifiers\n \t   makes this declaration a definition (perhaps tentative).  Also,\n \t   the absence of both `static' and `register' makes it public.  */\n \tif (current_binding_level == global_binding_level)\n \t  {\n-\t    TREE_PUBLIC (decl)\n-\t      = !(specbits\n-\t\t  & ((1 << (int) RID_STATIC) | (1 << (int) RID_REGISTER)));\n-\t    TREE_STATIC (decl) = ! DECL_EXTERNAL (decl);\n+\t    TREE_PUBLIC (decl) = !(specbits & ((1 << (int) RID_STATIC)\n+\t\t\t\t\t       | (1 << (int) RID_REGISTER)));\n+\t    TREE_STATIC (decl) = !extern_ref;\n \t  }\n \t/* Not at top level, only `static' makes a static definition.  */\n \telse\n \t  {\n \t    TREE_STATIC (decl) = (specbits & (1 << (int) RID_STATIC)) != 0;\n-\t    TREE_PUBLIC (decl) = DECL_EXTERNAL (decl);\n+\t    TREE_PUBLIC (decl) = extern_ref;\n+\t  }\n+\n+\tif (specbits & 1 << (int) RID_THREAD)\n+\t  {\n+\t    if (targetm.have_tls)\n+\t      DECL_THREAD_LOCAL (decl) = 1;\n+\t    else\n+\t      /* A mere warning is sure to result in improper semantics\n+\t\t at runtime.  Don't bother to allow this to compile.  */\n+\t      error (\"thread-local storage not supported for this target\");\n \t  }\n       }\n "}, {"sha": "70bcb0ce8c94fabf628b5f480860c3c309e4ad19", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -3343,6 +3343,7 @@ static const struct resword reswords[] =\n   { \"__restrict__\",\tRID_RESTRICT,\t0 },\n   { \"__signed\",\t\tRID_SIGNED,\t0 },\n   { \"__signed__\",\tRID_SIGNED,\t0 },\n+  { \"__thread\",\t\tRID_THREAD,\t0 },\n   { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n   { \"__typeof__\",\tRID_TYPEOF,\t0 },\n   { \"__unbounded\",\tRID_UNBOUNDED,\t0 },\n@@ -3438,6 +3439,7 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_BOUNDED */\tTYPE_QUAL,\n   /* RID_UNBOUNDED */\tTYPE_QUAL,\n   /* RID_COMPLEX */\tTYPESPEC,\n+  /* RID_THREAD */\tSCSPEC,\n \n   /* C++ */\n   /* RID_FRIEND */\t0,"}, {"sha": "638154a75629cbf22715908722ceb9e2e81ad3ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1,3 +1,7 @@\n+2002-05-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* lex.c (rid_to_yy): Add RID_THREAD.\n+\n 2002-05-21  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* init.c (build_vec_init): Test for trivial copy-assignment when"}, {"sha": "a1f35d4965c61ad31d516372858c23a47e3bc22b", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -474,6 +474,7 @@ const short rid_to_yy[RID_MAX] =\n   /* RID_BOUNDED */\t0,\n   /* RID_UNBOUNDED */\t0,\n   /* RID_COMPLEX */\tTYPESPEC,\n+  /* RID_THREAD */\t0,\n \n   /* C++ */\n   /* RID_FRIEND */\tSCSPEC,"}, {"sha": "e37a66baa56017cbcdc9102fe640ce17accb350c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -432,6 +432,7 @@ extensions, accepted by GCC in C89 mode and in C++.\n * Target Builtins::     Built-in functions specific to particular targets.\n * Pragmas::             Pragmas accepted by GCC.\n * Unnamed Fields::      Unnamed struct/union fields within structs/unions.\n+* Thread-Local::        Per-thread variables.\n @end menu\n \n @node Statement Exprs\n@@ -6165,6 +6166,55 @@ It is ambiguous which @code{a} is being referred to with @samp{foo.a}.\n Such constructs are not supported and must be avoided.  In the future,\n such constructs may be detected and treated as compilation errors.\n \n+@node Thread-Local\n+@section Thread-Local Storage\n+@cindex Thread-Local Storage\n+@cindex TLS\n+@cindex __thread\n+\n+Thread-local storage (TLS) is a mechanism by which variables are\n+allocated such that there is one instance of the variable per extant\n+thread.  The run-time model GCC uses to implement this originates\n+in the IA-64 processor-specific ABI, but has since been migrated\n+to other processors as well.  It requires significant support from\n+the linker (@command{ld}), dynamic linker (@command{ld.so}), and\n+system libraries (@file{libc.so} and @file{libpthread.so}), so it\n+is not supported everywhere.\n+\n+At the user level, the extension is visible with a new storage\n+class keyword: @code{__thread}.  For example:\n+\n+@example\n+__thread int i;\n+extern __thread struct state s;\n+static __thread char *p;\n+@end example\n+\n+The @code{__thread} specifier may be used alone, with the @code{extern}\n+or @code{static} specifiers, but with no other storage class specifier.\n+When used with @code{extern} or @code{static}, @code{__thread} must appear\n+immediately after the other storage class specifier.\n+\n+The @code{__thread} specifier may be applied to any global, file-scoped\n+static, function-scoped static, or class-scoped static variable.  It may\n+not be applied to function-scoped automatic or class-scoped member variables.\n+\n+When the address-of operator is applied to a thread-local variable, it is\n+evaluated at run-time and returns the address of the current thread's\n+instance of that variable.  An address so obtained may be used by any\n+thread.  When a thread terminates, any pointers to thread-local variables\n+in that thread become invalid.\n+\n+No static initialization may refer to the address of a thread-local variable.\n+\n+In C++, a thread-local variable may not be initialized by a static\n+constructor.\n+\n+See @uref{http://people.redhat.com/drepper/tls.pdf,\n+ELF Handling For Thread-Local Storage} for a detailed explanation of\n+the four thread-local storage addressing models, and how the run-time\n+is expected to function.\n+\n @node C++ Extensions\n @chapter Extensions to the C++ Language\n @cindex extensions, C++ language"}, {"sha": "cedabdf5500e71995dc1579b59f5a8da779b58bd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -677,7 +677,7 @@ in the following sections.\n -fverbose-asm  -fpack-struct  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n -fargument-alias  -fargument-noalias @gol\n--fargument-noalias-global  -fleading-underscore}\n+-fargument-noalias-global  -fleading-underscore -ftls-model=@var{model}}\n @end table\n \n @menu\n@@ -9915,6 +9915,14 @@ is to help link with legacy assembly code.\n \n Be warned that you should know what you are doing when invoking this\n option, and that not all targets provide complete support for it.\n+\n+@item -ftls-model=@var{model}\n+Alter the thread-local storage model to be used (@pxref{Thread-Local}).\n+The @var{model} argument should be one of @code{global-dynamic},\n+@code{local-dynamic}, @code{initial-exec} or @code{local-exec}.\n+\n+The default without @option{-fpic} is @code{initial-exec}; with\n+@option{-fpic} the default is @code{global-dynamic}.\n @end table\n \n @c man end"}, {"sha": "b92714656981ea47cb0352f5cc6f2cb53a4cc8c8", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -5,7 +5,7 @@\n  * files which are fixed to work correctly with ANSI C and placed in a\n  * directory that GNU C will search.\n  *\n- * This file contains 145 fixup descriptions.\n+ * This file contains 146 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4566,6 +4566,40 @@ static const char* apzSysz_Stdlib_For_SunPatch[] = {\n     \"void *\\t%1(\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Thread_Keyword fix\n+ */\n+tSCC zThread_KeywordName[] =\n+     \"thread_keyword\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zThread_KeywordList[] =\n+  \"|bits/sigthread.h|pthread.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzThread_KeywordMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zThread_KeywordSelect0[] =\n+       \"__thread\";\n+\n+#define    THREAD_KEYWORD_TEST_CT  1\n+static tTestDesc aThread_KeywordTests[] = {\n+  { TT_EGREP,    zThread_KeywordSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Thread_Keyword\n+ */\n+static const char* apzThread_KeywordPatch[] = { \"sed\",\n+    \"-e\", \"s/\\\\([^a-z0-9_]\\\\)__thread\\\\([^a-z0-9_]\\\\)/\\\\1__thr\\\\2/g\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Tinfo_Cplusplus fix\n@@ -5672,9 +5706,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          152\n+#define REGEX_COUNT          153\n #define MACH_LIST_SIZE_LIMIT 279\n-#define FIX_COUNT            145\n+#define FIX_COUNT            146\n \n /*\n  *  Enumerate the fixes\n@@ -5796,6 +5830,7 @@ typedef enum {\n     SVR4_PROFIL_FIXIDX,\n     SYSV68_STRING_FIXIDX,\n     SYSZ_STDLIB_FOR_SUN_FIXIDX,\n+    THREAD_KEYWORD_FIXIDX,\n     TINFO_CPLUSPLUS_FIXIDX,\n     ULTRIX_ATEXIT_PARAM_FIXIDX,\n     ULTRIX_ATOF_PARAM_FIXIDX,\n@@ -6408,6 +6443,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SYSZ_STDLIB_FOR_SUN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSysz_Stdlib_For_SunTests,   apzSysz_Stdlib_For_SunPatch, 0 },\n \n+  {  zThread_KeywordName,    zThread_KeywordList,\n+     apzThread_KeywordMachs,\n+     THREAD_KEYWORD_TEST_CT, FD_MACH_ONLY,\n+     aThread_KeywordTests,   apzThread_KeywordPatch, 0 },\n+\n   {  zTinfo_CplusplusName,    zTinfo_CplusplusList,\n      apzTinfo_CplusplusMachs,\n      TINFO_CPLUSPLUS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "322a79d90b836efee9e981a3f908620168c9e64f", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1,4 +1,3 @@\n-\n /* -*- Mode: C -*-  */\n \n autogen definitions fixincl;\n@@ -2886,6 +2885,20 @@ fix = {\n };\n \n \n+/*\n+ * __thread is now a keyword.\n+ */\n+fix = {\n+    hackname\t= thread_keyword;\n+    files\t= \"pthread.h\";\n+    files\t= \"bits/sigthread.h\";\n+    select\t= \"pthread_t __thread\";\n+\n+    sed\t\t= \"s/pthread_t __thread\\\\([^a-z0-9_]\\\\)/pthread_t __thr\\\\1/\";\n+\n+    test_text\t= \"extern int pthread_kill (pthread_t __thread, int __signo);\";\n+};\n+\n /*\n  *  if the #if says _cplusplus, not the double underscore __cplusplus\n  *  that it should be"}, {"sha": "37f54d2cae50c7d5979205f6bb0680f7b34ae884", "filename": "gcc/flags.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -458,11 +458,22 @@ extern int flag_dump_unnumbered;\n \n extern int flag_pedantic_errors;\n \n-/* Nonzero means generate position-independent code.\n-   This is not fully implemented yet.  */\n+/* Nonzero means generate position-independent code.  1 vs 2 for a \n+   target-dependent \"small\" or \"large\" mode.  */\n \n extern int flag_pic;\n \n+/* Set to the default thread-local storage (tls) model to use.  */\n+\n+enum tls_model {\n+  TLS_MODEL_GLOBAL_DYNAMIC,\n+  TLS_MODEL_LOCAL_DYNAMIC,\n+  TLS_MODEL_INITIAL_EXEC,\n+  TLS_MODEL_LOCAL_EXEC\n+};\n+\n+extern enum tls_model flag_tls_default;\n+\n /* Nonzero means generate extra code for exception handling and enable\n    exception handling.  */\n "}, {"sha": "35229c3cf5db9130aab1fec1590a74c60d440161", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -507,7 +507,8 @@ extern void no_asm_to_stream PARAMS ((FILE *));\n #define SECTION_STRINGS  0x10000\t/* contains zero terminated strings without\n \t\t\t\t\t   embedded zeros */\n #define SECTION_OVERRIDE 0x20000\t/* allow override of default flags */\n-#define SECTION_MACH_DEP 0x40000\t/* subsequent bits reserved for target */\n+#define SECTION_TLS\t 0x40000\t/* contains thread-local storage */\n+#define SECTION_MACH_DEP 0x80000\t/* subsequent bits reserved for target */\n \n extern unsigned int get_named_section_flags PARAMS ((const char *));\n extern bool set_named_section_flags\tPARAMS ((const char *, unsigned int));"}, {"sha": "d9a5e41963a8cb4c2cd9b15f60ad280d2f55148b", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -352,6 +352,8 @@ print_node (file, prefix, node, indent)\n \n       if (TREE_CODE (node) == VAR_DECL && DECL_IN_TEXT_SECTION (node))\n \tfputs (\" in-text-section\", file);\n+      if (TREE_CODE (node) == VAR_DECL && DECL_THREAD_LOCAL (node))\n+\tfputs (\" thread-local\", file);\n \n       if (TREE_CODE (node) == PARM_DECL && DECL_TRANSPARENT_UNION (node))\n \tfputs (\" transparent-union\", file);"}, {"sha": "63fbead9875658f5fce3edd5fe4ef0aa0a01a803", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -110,6 +110,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HAVE_NAMED_SECTIONS false\n #endif\n \n+#ifndef TARGET_HAVE_TLS\n+#define TARGET_HAVE_TLS false\n+#endif\n+\n #ifndef TARGET_ASM_EXCEPTION_SECTION\n #define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n #endif\n@@ -244,6 +248,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_STRIP_NAME_ENCODING,\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n+  TARGET_HAVE_TLS\t\t\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "3d3b8dbad8b667254beb3d4c4e75d0be81773e56", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -256,6 +256,9 @@ struct gcc_target\n   /* True if \"native\" constructors and destructors are supported,\n      false if we're using collect2 for the job.  */\n   bool have_ctors_dtors;\n+\n+  /* True if thread-local storage is supported.  */\n+  bool have_tls;\n };\n \n extern struct gcc_target targetm;"}, {"sha": "a7e856b2d87d8df06c84d0c08dc4a2bc11af0403", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -685,12 +685,15 @@ int flag_shared_data;\n int flag_delayed_branch;\n \n /* Nonzero if we are compiling pure (sharable) code.\n-   Value is 1 if we are doing reasonable (i.e. simple\n-   offset into offset table) pic.  Value is 2 if we can\n-   only perform register offsets.  */\n+   Value is 1 if we are doing \"small\" pic; value is 2 if we're doing\n+   \"large\" pic.  */\n \n int flag_pic;\n \n+/* Set to the default thread-local storage (tls) model to use.  */\n+\n+enum tls_model flag_tls_default;\n+\n /* Nonzero means generate extra code for exception handling and enable\n    exception handling.  */\n \n@@ -3547,6 +3550,7 @@ display_help ()\n   printf (_(\"  -finline-limit=<number> Limits the size of inlined functions to <number>\\n\"));\n   printf (_(\"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\\n\"));\n   printf (_(\"  -fdiagnostics-show-location=[once | every-line] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\\n\"));\n+  printf (_(\"  -ftls-model=[global-dynamic | local-dynamic | initial-exec | local-exec] Indicates the default thread-local storage code generation model\\n\"));\n \n   for (i = ARRAY_SIZE (f_options); i--;)\n     {\n@@ -3825,6 +3829,19 @@ decode_f_option (arg)\n \t\t\t\t MAX_INLINE_INSNS);\n       set_param_value (\"max-inline-insns\", val);\n     }\n+  else if ((option_value = skip_leading_substring (arg, \"tls-model=\")))\n+    {\n+      if (strcmp (option_value, \"global-dynamic\") == 0)\n+\tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n+      else if (strcmp (option_value, \"local-dynamic\") == 0)\n+\tflag_tls_default = TLS_MODEL_LOCAL_DYNAMIC;\n+      else if (strcmp (option_value, \"initial-exec\") == 0)\n+\tflag_tls_default = TLS_MODEL_INITIAL_EXEC;\n+      else if (strcmp (option_value, \"local-exec\") == 0)\n+\tflag_tls_default = TLS_MODEL_LOCAL_EXEC;\n+      else\n+\twarning (\"`%s': unknown tls-model option\", arg - 2);\n+    }\n #ifdef INSN_SCHEDULING\n   else if ((option_value = skip_leading_substring (arg, \"sched-verbose=\")))\n     fix_sched_param (\"verbose\", option_value);"}, {"sha": "17731c82f235020e103c03119553d62e0e7fd2e3", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1349,12 +1349,13 @@ staticp (arg)\n     case FUNCTION_DECL:\n       /* Nested functions aren't static, since taking their address\n \t involves a trampoline.  */\n-      return (decl_function_context (arg) == 0 || DECL_NO_STATIC_CHAIN (arg))\n-\t&& ! DECL_NON_ADDR_CONST_P (arg);\n+      return ((decl_function_context (arg) == 0 || DECL_NO_STATIC_CHAIN (arg))\n+\t      && ! DECL_NON_ADDR_CONST_P (arg));\n \n     case VAR_DECL:\n-      return (TREE_STATIC (arg) || DECL_EXTERNAL (arg))\n-\t&& ! DECL_NON_ADDR_CONST_P (arg);\n+      return ((TREE_STATIC (arg) || DECL_EXTERNAL (arg))\n+\t      && ! DECL_THREAD_LOCAL (arg)\n+\t      && ! DECL_NON_ADDR_CONST_P (arg));\n \n     case CONSTRUCTOR:\n       return TREE_STATIC (arg);"}, {"sha": "e7163ea7e979d1418a924cccea7ac35c05a522d7", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1615,6 +1615,10 @@ struct tree_type\n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n #define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.uninlinable)\n \n+/* In a VAR_DECL, nonzero if the data should be allocated from \n+   thread-local storage.  */\n+#define DECL_THREAD_LOCAL(NODE) (VAR_DECL_CHECK (NODE)->decl.thread_local_flag)\n+\n /* In a FUNCTION_DECL, the saved representation of the body of the\n    entire function.  Usually a COMPOUND_STMT, but in C++ this may also\n    be a RETURN_INIT, CTOR_INITIALIZER, or TRY_BLOCK.  */\n@@ -1793,7 +1797,8 @@ struct tree_decl\n   unsigned non_addressable : 1;\n   unsigned user_align : 1;\n   unsigned uninlinable : 1;\n-  /* Three unused bits.  */\n+  unsigned thread_local_flag : 1;\n+  /* Two unused bits.  */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "3165b92f56c111835dbe7c9306691515bf276ea4", "filename": "gcc/varasm.c", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78f2e96e29feaff7046c22fdc97aa58bee9688/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3d78f2e96e29feaff7046c22fdc97aa58bee9688", "patch": "@@ -1586,19 +1586,28 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Handle uninitialized definitions.  */\n \n-  if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node\n-#if defined ASM_EMIT_BSS\n-       || (flag_zero_initialized_in_bss\n-\t   && initializer_zerop (DECL_INITIAL (decl)))\n-#endif\n-       )\n-      /* If the target can't output uninitialized but not common global data\n-\t in .bss, then we have to use .data.  */\n-#if ! defined ASM_EMIT_BSS\n-      && DECL_COMMON (decl)\n+  /* If the decl has been given an explicit section name, then it\n+     isn't common, and shouldn't be handled as such.  */\n+  if (DECL_SECTION_NAME (decl) || dont_output_data)\n+    ;\n+  /* We don't implement common thread-local data at present.  */\n+  else if (DECL_THREAD_LOCAL (decl))\n+    {\n+      if (DECL_COMMON (decl))\n+\tsorry (\"thread-local COMMON data not implemented\");\n+    }\n+#ifndef ASM_EMIT_BSS\n+  /* If the target can't output uninitialized but not common global data\n+     in .bss, then we have to use .data.  */\n+  /* ??? We should handle .bss via select_section mechanisms rather than\n+     via special target hooks.  That would eliminate this special case.  */\n+  else if (!DECL_COMMON (decl))\n+    ;\n #endif\n-      && DECL_SECTION_NAME (decl) == NULL_TREE\n-      && ! dont_output_data)\n+  else if (DECL_INITIAL (decl) == 0\n+\t   || DECL_INITIAL (decl) == error_mark_node\n+           || (flag_zero_initialized_in_bss\n+\t       && initializer_zerop (DECL_INITIAL (decl))))\n     {\n       unsigned HOST_WIDE_INT size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n       unsigned HOST_WIDE_INT rounded = size;\n@@ -5101,9 +5110,14 @@ default_section_type_flags (decl, name, reloc)\n       || strncmp (name, \".gnu.linkonce.b.\", 16) == 0\n       || strcmp (name, \".sbss\") == 0\n       || strncmp (name, \".sbss.\", 6) == 0\n-      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n+      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0\n+      || strcmp (name, \".tbss\") == 0)\n     flags |= SECTION_BSS;\n \n+  if (strcmp (name, \".tdata\") == 0\n+      || strcmp (name, \".tbss\") == 0)\n+    flags |= SECTION_TLS;\n+\n   return flags;\n }\n \n@@ -5146,6 +5160,8 @@ default_elf_asm_named_section (name, flags)\n     *f++ = 'M';\n   if (flags & SECTION_STRINGS)\n     *f++ = 'S';\n+  if (flags & SECTION_TLS)\n+    *f++ = 'T';\n   *f = '\\0';\n \n   if (flags & SECTION_BSS)\n@@ -5353,8 +5369,17 @@ categorize_decl_for_section (decl, reloc)\n   else\n     ret = SECCAT_RODATA;\n \n+  /* There are no read-only thread-local sections.  */\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n+    {\n+      if (ret == SECCAT_BSS)\n+\tret = SECCAT_TBSS;\n+      else\n+\tret = SECCAT_TDATA;\n+    }\n+\n   /* If the target uses small data sections, select it.  */\n-  if ((*targetm.in_small_data_p) (decl))\n+  else if ((*targetm.in_small_data_p) (decl))\n     {\n       if (ret == SECCAT_BSS)\n \tret = SECCAT_SBSS;"}]}