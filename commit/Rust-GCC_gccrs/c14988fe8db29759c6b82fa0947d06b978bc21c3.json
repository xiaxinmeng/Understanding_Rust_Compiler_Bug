{"sha": "c14988fe8db29759c6b82fa0947d06b978bc21c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0OTg4ZmU4ZGIyOTc1OWM2YjgyZmEwOTQ3ZDA2Yjk3OGJjMjFjMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-24T09:45:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-24T09:45:01Z"}, "message": "re PR middle-end/71762 (~X & Y to X < Y doesn't work for uninitialized values)\n\n2016-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/71762\n\t* match.pd ((~X & Y) -> X < Y, (X & ~Y) -> Y < X,\n\t(~X | Y) -> X <= Y, (X | ~Y) -> Y <= X): Remove.\n\n\t* gcc.dg/torture/pr71762-1.c: New testcase.\n\t* gcc.dg/torture/pr71762-2.c: Likewise.\n\t* gcc.dg/torture/pr71762-3.c: Likewise.\n\t* gcc.dg/tree-ssa/forwprop-28.c: XFAIL.\n\nFrom-SVN: r242822", "tree": {"sha": "65b152eb3a1d52bcaf5c31a5d23ba8d54eb53e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b152eb3a1d52bcaf5c31a5d23ba8d54eb53e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14988fe8db29759c6b82fa0947d06b978bc21c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14988fe8db29759c6b82fa0947d06b978bc21c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14988fe8db29759c6b82fa0947d06b978bc21c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14988fe8db29759c6b82fa0947d06b978bc21c3/comments", "author": null, "committer": null, "parents": [{"sha": "3884190f00c5817c09262fe188d623fb45ea03e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3884190f00c5817c09262fe188d623fb45ea03e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3884190f00c5817c09262fe188d623fb45ea03e6"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "aa70678f4cd4643b782fae9c79158357bfbab83c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-28.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14988fe8db29759c6b82fa0947d06b978bc21c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14988fe8db29759c6b82fa0947d06b978bc21c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c?ref=c14988fe8db29759c6b82fa0947d06b978bc21c3", "patch": "@@ -83,6 +83,8 @@ test_8 (int code)\n    to a ordered compare.  But the transform does not trigger if we transform\n    the negated code == 22 compare to code != 22 first.  It turns out if\n    we do that we even generate better code on x86 at least.  */\n+/* ???  As PR71762 notices this transform causes wrong-code issues in RTL\n+   with one uninitialized operand, thus it has been disabled.  */\n \n-/* { dg-final { scan-tree-dump-times \"simplified to if \\\\\\(\\[^ ]* \\[<>\\]\" 4 \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \"simplified to if \\\\\\(\\[^ ]* \\[<>\\]\" 4 \"forwprop1\" { xfail *-*-* } } } */\n "}]}