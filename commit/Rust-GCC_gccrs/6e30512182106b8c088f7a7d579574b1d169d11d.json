{"sha": "6e30512182106b8c088f7a7d579574b1d169d11d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzMDUxMjE4MjEwNmI4YzA4OGY3YTdkNTc5NTc0YjFkMTY5ZDExZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:39:17Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:39:17Z"}, "message": "(FUNCTION_VALUE): Use FUNCTION_VALUEX.\n\n(FUNCTION_VALUEX): New macro.\n\n(ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE)\n(ASM_OUTPUT_FLOAT_OPERAND, ASM_OUTPUT_DOUBLE_OPERAND):\nUse REAL_VALUE... macros.\n\nFrom-SVN: r3978", "tree": {"sha": "48f8c6fc47819b3ae1f28256342658d15817e3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f8c6fc47819b3ae1f28256342658d15817e3f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e30512182106b8c088f7a7d579574b1d169d11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e30512182106b8c088f7a7d579574b1d169d11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e30512182106b8c088f7a7d579574b1d169d11d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e30512182106b8c088f7a7d579574b1d169d11d/comments", "author": null, "committer": null, "parents": [{"sha": "0ef5dce6d81e7004bcf1a6784a561d93ce6a1700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef5dce6d81e7004bcf1a6784a561d93ce6a1700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef5dce6d81e7004bcf1a6784a561d93ce6a1700"}], "stats": {"total": 123, "additions": 85, "deletions": 38}, "files": [{"sha": "063f2abe5b8612585104049b915dd4f515b85161", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 85, "deletions": 38, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e30512182106b8c088f7a7d579574b1d169d11d/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e30512182106b8c088f7a7d579574b1d169d11d/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=6e30512182106b8c088f7a7d579574b1d169d11d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 1987, 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -165,55 +165,102 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Generate calls to memcpy, memcmp and memset.  */\n #define TARGET_MEM_FUNCTIONS\n \n+#define FUNCTION_VALUEX(MODE)\t\t\t\t\t\t    \\\n+  gen_rtx (REG, (MODE),\t\t\t\t\t\t\t    \\\n+\t   ((TARGET_68881\t\t\t\t\t\t    \\\n+\t     && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode)) \\\n+\t    ? 16 : 0))\n+\n+#undef FUNCTION_VALUE\n+#define FUNCTION_VALUE(VALTYPE,FUNC) FUNCTION_VALUEX (TYPE_MODE (VALTYPE))\n+\n /* This is how to output an assembler line defining a `double' constant.  */\n \n #undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.double 0r%s99e999\\n\", (VALUE) > 0 ? \"\" : \"-\");\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tunion { double d; long l[2];} t;\t\t\t\t\\\n-\tt.d = (VALUE);\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", t.l[0], t.l[1]); \\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.double 0r%.17g\\n\", VALUE);\t\t\t\\\n-  }\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\\\n+          fprintf (FILE, \"\\t.double 0r-99e999\\n\");\t\t\\\n+        else\t\t\t\t\t\t\t\\\n+          fprintf (FILE, \"\\t.double 0r99e999\\n\");\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\\\n+      { long l[2];\t\t\t\t\t\t\\\n+        REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), l);\t\t\\\n+\tfprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", l[0], l[1]); \\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      { char dstr[30];\t\t\t\t\t\t\\\n+        REAL_VALUE_TO_DECIMAL ((VALUE), \"%.17g\", dstr);\t\t\\\n+        fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    }\n \n /* This is how to output an assembler line defining a `float' constant.  */\n \n #undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.single 0r%s99e999\\n\", (VALUE) > 0 ? \"\" : \"-\");\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tunion { float f; long l;} t;\t\t\t\t\t\\\n-\tt.f = (VALUE);\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\", t.l);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.single 0r%.9g\\n\", VALUE);\t\t\t\\\n-  }\n+#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\\\n+          fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\\\n+        else\t\t\t\t\t\t\t\\\n+          fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\\\n+      { long l;\t\t\t\t\t\t\t\\\n+        REAL_VALUE_TO_TARGET_SINGLE ((VALUE), l);\t\t\\\n+        fprintf (FILE, \"\\t.long 0x%lx\\n\", l);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      { char dstr[30];\t\t\t\t\t\t\\\n+        REAL_VALUE_TO_DECIMAL ((VALUE), \"%.9g\", dstr);\t\t\\\n+        fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    }\n \n /* This is how to output an assembler lines defining floating operands.\n    There's no way to output a NaN's fraction, so we lose it.  */\n   \n #undef ASM_OUTPUT_FLOAT_OPERAND\n-#define ASM_OUTPUT_FLOAT_OPERAND(FILE,VALUE)\t\t\t\t\\\n-  (REAL_VALUE_ISINF ((VALUE))\t\t\t\t\t\t\\\n-   ? (asm_fprintf (FILE, \"%I0r%s99e999\", ((VALUE) > 0 ? \"\" : \"-\")), 0)\t\\\n-   : REAL_VALUE_MINUS_ZERO (VALUE)\t\t\t\t\t\\\n-   ? (asm_fprintf (FILE, \"%I0r-0.0\"), 0)\t\t\t\t\\\n-   : (asm_fprintf (FILE, \"%I0r%.9g\", (VALUE)), 0))\n+#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\t\\\n+ do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+            asm_fprintf (FILE, \"%I0r-99e999\");\t\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            asm_fprintf (FILE, \"%I0r99e999\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          asm_fprintf (FILE, \"%I0r-0.0\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.9g\", dstr);\t\t\\\n+          asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+    } while (0)\n \n #undef ASM_OUTPUT_DOUBLE_OPERAND\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n-  (REAL_VALUE_ISINF ((VALUE))\t\t\t\t\t\t\\\n-   ? (asm_fprintf (FILE, \"%I0r%s99e999\", ((VALUE) > 0 ? \"\" : \"-\")), 0)\t\\\n-   : REAL_VALUE_MINUS_ZERO (VALUE)\t\t\t\t\t\\\n-   ? (asm_fprintf (FILE, \"%I0r-0.0\"), 0)\t\t\t\t\\\n-   : (asm_fprintf (FILE, \"%I0r%.17g\", (VALUE)), 0))\n+ do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+            asm_fprintf (FILE, \"%I0r-99e999\");\t\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            asm_fprintf (FILE, \"%I0r99e999\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          asm_fprintf (FILE, \"%I0r-0.0\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.17g\", dstr);\t\t\\\n+          asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+    } while (0)"}]}