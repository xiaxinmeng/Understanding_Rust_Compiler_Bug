{"sha": "0976078c73f58e7350fcc0516618fdd7737c9696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3NjA3OGM3M2Y1OGU3MzUwZmNjMDUxNjYxOGZkZDc3MzdjOTY5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-13T08:22:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-13T08:22:03Z"}, "message": "function.c (pass_by_reference): New.\n\n        * function.c (pass_by_reference): New.\n        (assign_parm_find_data_types): Use it.\n        * calls.c (initialize_argument_information): Likewise.\n        (emit_library_call_value_1): Likewise.\n        * expr.h (FUNCTION_ARG_PASS_BY_REFERENCE): Remove.\n        * function.h (pass_by_reference): Declare.\nada/\n        * misc.c (default_pass_by_ref): Use pass_by_reference.\n\nFrom-SVN: r84607", "tree": {"sha": "9ce1ffbe5f574651dfe2baa17807ad50e4394b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ce1ffbe5f574651dfe2baa17807ad50e4394b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0976078c73f58e7350fcc0516618fdd7737c9696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976078c73f58e7350fcc0516618fdd7737c9696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0976078c73f58e7350fcc0516618fdd7737c9696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976078c73f58e7350fcc0516618fdd7737c9696/comments", "author": null, "committer": null, "parents": [{"sha": "fe9841365eb7e2908f9ba6b18a85910ee9024a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9841365eb7e2908f9ba6b18a85910ee9024a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9841365eb7e2908f9ba6b18a85910ee9024a54"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "2a73f888851e819cd2f1d15a8efab891cc8993c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -1,3 +1,12 @@\n+2004-07-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (pass_by_reference): New.\n+\t(assign_parm_find_data_types): Use it.\n+\t* calls.c (initialize_argument_information): Likewise.\n+\t(emit_library_call_value_1): Likewise.\n+\t* expr.h (FUNCTION_ARG_PASS_BY_REFERENCE): Remove.\n+\t* function.h (pass_by_reference): Declare.\n+\n 2004-07-13  Richard Henderson  <rth@redhat.com>\n \n \t* target-def.h (TARGET_MUST_PASS_IN_STACK): New."}, {"sha": "452ed38e6ffda9f7b0bccdcf44fb03ccfc36fe37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -1,3 +1,7 @@\n+2004-07-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* misc.c (default_pass_by_ref): Use pass_by_reference.\n+\n 2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* misc.c (LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_PUSHLEVEL,"}, {"sha": "37e6f17d1be65384e4ad85713b637b12d5ef7c8d", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -697,26 +697,26 @@ gnat_get_alias_set (tree type)\n int\n default_pass_by_ref (tree gnu_type)\n {\n-  CUMULATIVE_ARGS cum;\n-\n-  INIT_CUMULATIVE_ARGS (cum, NULL_TREE, NULL_RTX, 0, 2);\n-\n   /* We pass aggregates by reference if they are sufficiently large.  The\n      choice of constant here is somewhat arbitrary.  We also pass by\n      reference if the target machine would either pass or return by\n      reference.  Strictly speaking, we need only check the return if this\n      is an In Out parameter, but it's probably best to err on the side of\n      passing more things by reference.  */\n-  return (0\n-#ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n-\t  || FUNCTION_ARG_PASS_BY_REFERENCE (cum, TYPE_MODE (gnu_type),\n-\t\t\t\t\t     gnu_type, 1)\n-#endif\n-\t  || targetm.calls.return_in_memory (gnu_type, NULL_TREE)\n-\t  || (AGGREGATE_TYPE_P (gnu_type)\n-\t      && (! host_integerp (TYPE_SIZE (gnu_type), 1)\n-\t\t  || 0 < compare_tree_int (TYPE_SIZE (gnu_type),\n-\t\t\t\t\t   8 * TYPE_ALIGN (gnu_type)))));\n+\n+  if (pass_by_reference (NULL, TYPE_MODE (gnu_type), gnu_type, 1))\n+    return true;\n+\n+  if (targetm.calls.return_in_memory (gnu_type, NULL_TREE))\n+    return true;\n+  \n+  if (AGGREGATE_TYPE_P (gnu_type)\n+      && (! host_integerp (TYPE_SIZE (gnu_type), 1)\n+\t  || 0 < compare_tree_int (TYPE_SIZE (gnu_type),\n+\t\t\t\t   8 * TYPE_ALIGN (gnu_type))))\n+    return true;\n+\n+  return false;\n }\n \n /* GNU_TYPE is the type of a subprogram parameter.  Determine from the type if"}, {"sha": "88bac101ae8e4e9e77acfb504f2e65308c511292", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -974,11 +974,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t with those made by function.c.  */\n \n       /* See if this argument should be passed by invisible reference.  */\n-      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (type))\n-\t  || TREE_ADDRESSABLE (type)\n-\t  || FUNCTION_ARG_PASS_BY_REFERENCE (*args_so_far, TYPE_MODE (type),\n-\t\t\t\t\t     type, argpos < n_named_args)\n-\t  )\n+      if (pass_by_reference (args_so_far, TYPE_MODE (type),\n+\t\t\t     type, argpos < n_named_args))\n \t{\n \t  /* If we're compiling a thunk, pass through invisible\n              references instead of making a copy.  */\n@@ -3559,7 +3556,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t  && ! (CONSTANT_P (val) && LEGITIMATE_CONSTANT_P (val)))\n \tval = force_operand (val, NULL_RTX);\n \n-      if (FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, mode, NULL_TREE, 1))\n+      if (pass_by_reference (&args_so_far, mode, NULL_TREE, 1))\n \t{\n \t  rtx slot;\n \t  int must_copy = ! FUNCTION_ARG_CALLEE_COPIES (args_so_far, mode,"}, {"sha": "9a50410131ee97bcb3d8d8b9f577bbed118916fc", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -207,10 +207,6 @@ do {\t\t\t\t\t\t\t\\\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) 0\n #endif\n \n-#ifndef FUNCTION_ARG_PASS_BY_REFERENCE\n-#define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) 0\n-#endif\n-\n #ifndef FUNCTION_ARG_CALLEE_COPIES\n #define FUNCTION_ARG_CALLEE_COPIES(CUM, MODE, TYPE, NAMED) 0\n #endif"}, {"sha": "08b2e439bbce58a5bced777d261f36e00470ee71", "filename": "gcc/function.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -2026,6 +2026,33 @@ use_register_for_decl (tree decl)\n   return (optimize || DECL_REGISTER (decl));\n }\n \n+/* Return true if TYPE should be passed by invisible reference.  */\n+\n+bool\n+pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n+\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   tree type, bool named_arg ATTRIBUTE_UNUSED)\n+{\n+  if (type)\n+    {\n+      /* If this type contains non-trivial constructors, then it is\n+\t forbidden for the middle-end to create any new copies.  */\n+      if (TREE_ADDRESSABLE (type))\n+\treturn true;\n+\n+      /* If an object's size is dependent on itself, there's no way\n+\t to *not* pass by reference.  */\n+      if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (type)))\n+\treturn true;\n+    }\n+\n+#ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n+  return FUNCTION_ARG_PASS_BY_REFERENCE (*ca, mode, type, named_arg);\n+#else\n+  return false;\n+#endif\n+}\n+\n /* Structures to communicate between the subroutines of assign_parms.\n    The first holds data persistent across all parameters, the second\n    is cleared out for each parameter.  */\n@@ -2236,14 +2263,9 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n \t  && TYPE_TRANSPARENT_UNION (passed_type)))\n     passed_type = TREE_TYPE (TYPE_FIELDS (passed_type));\n \n-  /* See if this arg was passed by invisible reference.  It is if it is an\n-     object whose size depends on the contents of the object itself or if\n-     the machine requires these objects be passed that way.  */\n-  if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (passed_type))\n-      || TREE_ADDRESSABLE (passed_type)\n-      || FUNCTION_ARG_PASS_BY_REFERENCE (all->args_so_far, passed_mode,\n-\t\t\t\t\t passed_type, data->named_arg)\n-      )\n+  /* See if this arg was passed by invisible reference.  */\n+  if (pass_by_reference (&all->args_so_far, passed_mode,\n+\t\t\t passed_type, data->named_arg))\n     {\n       passed_type = nominal_type = build_pointer_type (passed_type);\n       data->passed_pointer = true;"}, {"sha": "5ac7731dacaadb08606c631ef27512ad082d6d8d", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976078c73f58e7350fcc0516618fdd7737c9696/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=0976078c73f58e7350fcc0516618fdd7737c9696", "patch": "@@ -556,4 +556,7 @@ extern void init_function_once (void);\n \n extern void do_warn_unused_parameter (tree);\n \n+extern bool pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t       tree, bool);\n+\n #endif  /* GCC_FUNCTION_H */"}]}