{"sha": "b8e773e9921904210cad1f396b2ab01ffdbc4b39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlNzczZTk5MjE5MDQyMTBjYWQxZjM5NmIyYWIwMWZmZGJjNGIzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-02T11:14:57Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-02T11:14:57Z"}, "message": "Break out ao_ref_init_from_ptr_and_range from ao_ref_init_from_ptr_and_size\n\n\t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_range): Break out from ...\n\t(ao_ref_init_from_ptr_and_size): ... here.", "tree": {"sha": "7dbfa1603376e6e57843232949168f13df4b6aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dbfa1603376e6e57843232949168f13df4b6aca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8e773e9921904210cad1f396b2ab01ffdbc4b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e773e9921904210cad1f396b2ab01ffdbc4b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e773e9921904210cad1f396b2ab01ffdbc4b39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e773e9921904210cad1f396b2ab01ffdbc4b39/comments", "author": null, "committer": null, "parents": [{"sha": "8d1cede1bb58dbb9ae1d24a7be5f111a07674363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1cede1bb58dbb9ae1d24a7be5f111a07674363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1cede1bb58dbb9ae1d24a7be5f111a07674363"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "9e5c3eee500a0d03aa98a6da70df17f4f0882329", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e773e9921904210cad1f396b2ab01ffdbc4b39/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e773e9921904210cad1f396b2ab01ffdbc4b39/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=b8e773e9921904210cad1f396b2ab01ffdbc4b39", "patch": "@@ -735,14 +735,21 @@ ao_ref_alias_set (ao_ref *ref)\n }\n \n /* Init an alias-oracle reference representation from a gimple pointer\n-   PTR and a gimple size SIZE in bytes.  If SIZE is NULL_TREE then the\n-   size is assumed to be unknown.  The access is assumed to be only\n-   to or after of the pointer target, not before it.  */\n+   PTR a range specified by OFFSET, SIZE and MAX_SIZE under the assumption\n+   that RANGE_KNOWN is set.\n \n-void\n-ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n+   The access is assumed to be only to or after of the pointer target adjusted\n+   by the offset, not before it (even in the case RANGE_KNOWN is false).  */\n+\n+static void\n+ao_ref_init_from_ptr_and_range (ao_ref *ref, tree ptr,\n+\t\t\t\tbool range_known,\n+\t\t\t\tpoly_int64 offset,\n+\t\t\t\tpoly_int64 size,\n+\t\t\t\tpoly_int64 max_size)\n {\n-  poly_int64 t, size_hwi, extra_offset = 0;\n+  poly_int64 t, extra_offset = 0;\n+\n   ref->ref = NULL_TREE;\n   if (TREE_CODE (ptr) == SSA_NAME)\n     {\n@@ -766,7 +773,7 @@ ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n \tref->offset = BITS_PER_UNIT * t;\n       else\n \t{\n-\t  size = NULL_TREE;\n+\t  range_known = false;\n \t  ref->offset = 0;\n \t  ref->base = get_base_address (TREE_OPERAND (ptr, 0));\n \t}\n@@ -778,18 +785,39 @@ ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n \t\t\t  ptr, null_pointer_node);\n       ref->offset = 0;\n     }\n-  ref->offset += extra_offset;\n-  if (size\n-      && poly_int_tree_p (size, &size_hwi)\n-      && coeffs_in_range_p (size_hwi, 0, HOST_WIDE_INT_MAX / BITS_PER_UNIT))\n-    ref->max_size = ref->size = size_hwi * BITS_PER_UNIT;\n+  ref->offset += extra_offset + offset;\n+  if (range_known)\n+    {\n+      ref->max_size = max_size;\n+      ref->size = size;\n+    }\n   else\n     ref->max_size = ref->size = -1;\n   ref->ref_alias_set = 0;\n   ref->base_alias_set = 0;\n   ref->volatile_p = false;\n }\n \n+/* Init an alias-oracle reference representation from a gimple pointer\n+   PTR and a gimple size SIZE in bytes.  If SIZE is NULL_TREE then the\n+   size is assumed to be unknown.  The access is assumed to be only\n+   to or after of the pointer target, not before it.  */\n+\n+void\n+ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n+{\n+  poly_int64 size_hwi;\n+  if (size\n+      && poly_int_tree_p (size, &size_hwi)\n+      && coeffs_in_range_p (size_hwi, 0, HOST_WIDE_INT_MAX / BITS_PER_UNIT))\n+    {\n+      size_hwi = size_hwi * BITS_PER_UNIT;\n+      ao_ref_init_from_ptr_and_range (ref, ptr, true, 0, size_hwi, size_hwi);\n+    }\n+  else\n+    ao_ref_init_from_ptr_and_range (ref, ptr, false, 0, -1, -1);\n+}\n+\n /* S1 and S2 are TYPE_SIZE or DECL_SIZE.  Compare them:\n    Return -1 if S1 < S2\n    Return 1 if S1 > S2"}]}