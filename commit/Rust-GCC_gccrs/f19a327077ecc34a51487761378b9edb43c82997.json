{"sha": "f19a327077ecc34a51487761378b9edb43c82997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE5YTMyNzA3N2VjYzM0YTUxNDg3NzYxMzc4YjllZGI0M2M4Mjk5Nw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-02T02:56:45Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:49Z"}, "message": "Support -fexcess-precision=16 which will enable FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when backend supports _Float16.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/misc.c (gnat_post_options): Issue an error for\n\t-fexcess-precision=16.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (excess_precision_mode_join): Update below comments.\n\t(c_ts18661_flt_eval_method): Set excess_precision_type to\n\tEXCESS_PRECISION_TYPE_FLOAT16 when -fexcess-precision=16.\n\t* c-cppbuiltin.c (cpp_atomic_builtins): Update below comments.\n\t(c_cpp_flt_eval_method_iec_559): Set excess_precision_type to\n\tEXCESS_PRECISION_TYPE_FLOAT16 when -fexcess-precision=16.\n\ngcc/ChangeLog:\n\n\t* common.opt: Support -fexcess-precision=16.\n\t* config/aarch64/aarch64.c (aarch64_excess_precision): Return\n\tFLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when\n\tEXCESS_PRECISION_TYPE_FLOAT16.\n\t* config/arm/arm.c (arm_excess_precision): Ditto.\n\t* config/i386/i386.c (ix86_get_excess_precision): Ditto.\n\t* config/m68k/m68k.c (m68k_excess_precision): Issue an error\n\twhen EXCESS_PRECISION_TYPE_FLOAT16.\n\t* config/s390/s390.c (s390_excess_precision): Ditto.\n\t* coretypes.h (enum excess_precision_type): Add\n\tEXCESS_PRECISION_TYPE_FLOAT16.\n\t* doc/tm.texi (TARGET_C_EXCESS_PRECISION): Update documents.\n\t* doc/tm.texi.in (TARGET_C_EXCESS_PRECISION): Ditto.\n\t* doc/extend.texi (Half-Precision): Document\n\t-fexcess-precision=16.\n\t* flag-types.h (enum excess_precision): Add\n\tEXCESS_PRECISION_FLOAT16.\n\t* target.def (excess_precision): Update document.\n\t* tree.c (excess_precision_type): Set excess_precision_type to\n\tEXCESS_PRECISION_FLOAT16 when -fexcess-precision=16.\n\ngcc/fortran/ChangeLog:\n\n\t* options.c (gfc_post_options): Issue an error for\n\t-fexcess-precision=16.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/float16-6.c: New test.\n\t* gcc.target/i386/float16-7.c: New test.", "tree": {"sha": "fd3b704957ec91abaa1ce10931e9afb969fe18c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd3b704957ec91abaa1ce10931e9afb969fe18c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f19a327077ecc34a51487761378b9edb43c82997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19a327077ecc34a51487761378b9edb43c82997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19a327077ecc34a51487761378b9edb43c82997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19a327077ecc34a51487761378b9edb43c82997/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a549a9a39a9bd92107667b99a67acbd7ef551323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a549a9a39a9bd92107667b99a67acbd7ef551323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a549a9a39a9bd92107667b99a67acbd7ef551323"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "96199bd4b63e3dced59e01ebc6dfb5507ac3ddfa", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -256,6 +256,9 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   /* Excess precision other than \"fast\" requires front-end support.  */\n   if (flag_excess_precision == EXCESS_PRECISION_STANDARD)\n     sorry (\"%<-fexcess-precision=standard%> for Ada\");\n+  else if (flag_excess_precision == EXCESS_PRECISION_FLOAT16)\n+    sorry (\"%<-fexcess-precision=16%> for Ada\");\n+\n   flag_excess_precision = EXCESS_PRECISION_FAST;\n \n   /* No psABI change warnings for Ada.  */"}, {"sha": "c6757f093ace3ea9741b2d5ee1226e157d67d11b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -8778,7 +8778,7 @@ excess_precision_mode_join (enum flt_eval_method x,\n \n    This relates to the effective excess precision seen by the user,\n    which is the join point of the precision the target requests for\n-   -fexcess-precision={standard,fast} and the implicit excess precision\n+   -fexcess-precision={standard,fast,16} and the implicit excess precision\n    the target uses.  */\n \n static enum flt_eval_method\n@@ -8790,7 +8790,9 @@ c_ts18661_flt_eval_method (void)\n   enum excess_precision_type flag_type\n     = (flag_excess_precision == EXCESS_PRECISION_STANDARD\n        ? EXCESS_PRECISION_TYPE_STANDARD\n-       : EXCESS_PRECISION_TYPE_FAST);\n+       : (flag_excess_precision == EXCESS_PRECISION_FLOAT16\n+\t  ? EXCESS_PRECISION_TYPE_FLOAT16\n+\t  : EXCESS_PRECISION_TYPE_FAST));\n \n   enum flt_eval_method requested\n     = targetm.c.excess_precision (flag_type);"}, {"sha": "48cbefd8bf8465c00e7f68a669bda1592e5d51ca", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -753,7 +753,7 @@ cpp_atomic_builtins (cpp_reader *pfile)\n /* Return TRUE if the implicit excess precision in which the back-end will\n    compute floating-point calculations is not more than the explicit\n    excess precision that the front-end will apply under\n-   -fexcess-precision=[standard|fast].\n+   -fexcess-precision=[standard|fast|16].\n \n    More intuitively, return TRUE if the excess precision proposed by the\n    front-end is the excess precision that will actually be used.  */\n@@ -764,7 +764,9 @@ c_cpp_flt_eval_method_iec_559 (void)\n   enum excess_precision_type front_end_ept\n     = (flag_excess_precision == EXCESS_PRECISION_STANDARD\n        ? EXCESS_PRECISION_TYPE_STANDARD\n-       : EXCESS_PRECISION_TYPE_FAST);\n+       : (flag_excess_precision == EXCESS_PRECISION_FLOAT16\n+\t  ? EXCESS_PRECISION_TYPE_FLOAT16\n+\t  : EXCESS_PRECISION_TYPE_FAST));\n \n   enum flt_eval_method back_end\n     = targetm.c.excess_precision (EXCESS_PRECISION_TYPE_IMPLICIT);"}, {"sha": "f103a7de004ba281bfa801a145288ad60a1c93de", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -1518,7 +1518,7 @@ Perform a number of minor, expensive optimizations.\n \n fexcess-precision=\n Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision) Init(EXCESS_PRECISION_DEFAULT) Optimization SetByCombined\n--fexcess-precision=[fast|standard]\tSpecify handling of excess floating-point precision.\n+-fexcess-precision=[fast|standard|16]\tSpecify handling of excess floating-point precision.\n \n Enum\n Name(excess_precision) Type(enum excess_precision) UnknownError(unknown excess precision style %qs)\n@@ -1529,6 +1529,9 @@ Enum(excess_precision) String(fast) Value(EXCESS_PRECISION_FAST)\n EnumValue\n Enum(excess_precision) String(standard) Value(EXCESS_PRECISION_STANDARD)\n \n+EnumValue\n+Enum(excess_precision) String(16) Value(EXCESS_PRECISION_FLOAT16)\n+\n ; Whether we permit the extended set of values for FLT_EVAL_METHOD\n ; introduced in ISO/IEC TS 18661-3, or limit ourselves to those in C99/C11.\n fpermitted-flt-eval-methods="}, {"sha": "1fbe9e0daa0ae8a9ac9b4502484f37a67ff25909", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -25045,6 +25045,7 @@ aarch64_excess_precision (enum excess_precision_type type)\n \t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n \t\t: FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n       case EXCESS_PRECISION_TYPE_IMPLICIT:\n+      case EXCESS_PRECISION_TYPE_FLOAT16:\n \treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n       default:\n \tgcc_unreachable ();"}, {"sha": "f1e628253d017a68211d9b577e39e12c38b52a13", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -25612,6 +25612,7 @@ arm_excess_precision (enum excess_precision_type type)\n \t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n \t\t: FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n       case EXCESS_PRECISION_TYPE_IMPLICIT:\n+      case EXCESS_PRECISION_TYPE_FLOAT16:\n \treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n       default:\n \tgcc_unreachable ();"}, {"sha": "210fc4234a3d95887ed41adc412a706ebff21d70", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -23599,6 +23599,11 @@ ix86_get_excess_precision (enum excess_precision_type type)\n \treturn (type == EXCESS_PRECISION_TYPE_STANDARD\n \t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT\n \t\t: FLT_EVAL_METHOD_UNPREDICTABLE);\n+      case EXCESS_PRECISION_TYPE_FLOAT16:\n+\tif (TARGET_80387\n+\t    && !(TARGET_SSE_MATH && TARGET_SSE))\n+\t  error (\"%<-fexcess-precision=16%> is not compatible with %<-mfpmath=387%>\");\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n       default:\n \tgcc_unreachable ();\n     }"}, {"sha": "0248eb719a886398ccad35a3fad44fdfef7a2cad", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -7115,6 +7115,9 @@ m68k_excess_precision (enum excess_precision_type type)\n \t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n \n \treturn FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE;\n+      case EXCESS_PRECISION_TYPE_FLOAT16:\n+\terror (\"%<-fexcess-precision=16%> is not supported on this target\");\n+\tbreak;\n       default:\n \tgcc_unreachable ();\n     }"}, {"sha": "54dd6332c3a4a3c17d2b31a92836807bc5f8e6a7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -16549,6 +16549,9 @@ s390_excess_precision (enum excess_precision_type type)\n \t   ensure consistency with the implementation in glibc, report that\n \t   float is evaluated to the range and precision of double.  */\n \treturn FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE;\n+      case EXCESS_PRECISION_TYPE_FLOAT16:\n+\terror (\"%<-fexcess-precision=16%> is not supported on this target\");\n+\tbreak;\n       default:\n \tgcc_unreachable ();\n     }"}, {"sha": "b4f530d57ac0a90522478ea0c693d55ca852eabe", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -425,7 +425,8 @@ enum excess_precision_type\n {\n   EXCESS_PRECISION_TYPE_IMPLICIT,\n   EXCESS_PRECISION_TYPE_STANDARD,\n-  EXCESS_PRECISION_TYPE_FAST\n+  EXCESS_PRECISION_TYPE_FAST,\n+  EXCESS_PRECISION_TYPE_FLOAT16\n };\n \n /* Level of size optimization.  */"}, {"sha": "f08238b6ca905b597dbd89ed1f6d476905b065ff", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -1160,7 +1160,8 @@ On x86 targets with SSE2 enabled, without @option{-mavx512fp16},\n software emulation and the @code{float} instructions. The default behavior\n for @code{FLT_EVAL_METHOD} is to keep the intermediate result of the operation\n as 32-bit precision. This may lead to inconsistent behavior between software\n-emulation and AVX512-FP16 instructions.\n+emulation and AVX512-FP16 instructions. Using @option{-fexcess-precision=16}\n+will force round back after each operation.\n \n @node Decimal Float\n @section Decimal Floating Types"}, {"sha": "be8148583d8571b0d035b1938db9d056bfd213a8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -982,20 +982,26 @@ Do not define this macro if it would never modify @var{m}.\n Return a value, with the same meaning as the C99 macro\n @code{FLT_EVAL_METHOD} that describes which excess precision should be\n applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\n-@code{EXCESS_PRECISION_TYPE_FAST}, or\n-@code{EXCESS_PRECISION_TYPE_STANDARD}.  For\n+@code{EXCESS_PRECISION_TYPE_FAST},\n+@code{EXCESS_PRECISION_TYPE_STANDARD}, or\n+@code{EXCESS_PRECISION_TYPE_FLOAT16}.  For\n @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\n precision and range operations will be implictly evaluated in regardless\n of the excess precision explicitly added.  For\n-@code{EXCESS_PRECISION_TYPE_STANDARD} and\n+@code{EXCESS_PRECISION_TYPE_STANDARD}, \n+@code{EXCESS_PRECISION_TYPE_FLOAT16}, and\n @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\n explicit excess precision that should be added depending on the\n value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\n Note that unpredictable explicit excess precision does not make sense,\n so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\n-when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\n+when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD},\n+@code{EXCESS_PRECISION_TYPE_FLOAT16} or\n @code{EXCESS_PRECISION_TYPE_FAST}.\n @end deftypefn\n+Return a value, with the same meaning as the C99 macro\n+@code{FLT_EVAL_METHOD} that describes which excess precision should be\n+applied.\n \n @deftypefn {Target Hook} machine_mode TARGET_PROMOTE_FUNCTION_MODE (const_tree @var{type}, machine_mode @var{mode}, int *@var{punsignedp}, const_tree @var{funtype}, int @var{for_return})\n Like @code{PROMOTE_MODE}, but it is applied to outgoing function arguments or"}, {"sha": "d088eee4afecdbb5575b0f4f796ac344e4449155", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -929,6 +929,9 @@ Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n @hook TARGET_C_EXCESS_PRECISION\n+Return a value, with the same meaning as the C99 macro\n+@code{FLT_EVAL_METHOD} that describes which excess precision should be\n+applied.\n \n @hook TARGET_PROMOTE_FUNCTION_MODE\n "}, {"sha": "45a2338d5f6ab2cf7334e5a43a037edbf06b6dbe", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -202,7 +202,8 @@ enum excess_precision\n {\n   EXCESS_PRECISION_DEFAULT,\n   EXCESS_PRECISION_FAST,\n-  EXCESS_PRECISION_STANDARD\n+  EXCESS_PRECISION_STANDARD,\n+  EXCESS_PRECISION_FLOAT16\n };\n \n /* The options for which values of FLT_EVAL_METHOD are permissible.  */"}, {"sha": "847e20e8829739ed5aefb1c00fa0a89c0914cdea", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -267,6 +267,9 @@ gfc_post_options (const char **pfilename)\n      support.  */\n   if (flag_excess_precision == EXCESS_PRECISION_STANDARD)\n     sorry (\"%<-fexcess-precision=standard%> for Fortran\");\n+  else if (flag_excess_precision == EXCESS_PRECISION_FLOAT16)\n+    sorry (\"%<-fexcess-precision=16%> for Fortran\");\n+\n   flag_excess_precision = EXCESS_PRECISION_FAST;\n \n   /* Fortran allows associative math - but we cannot reassociate if"}, {"sha": "bfa819609c21bd71c0cc585c01dba42534453f47", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -6225,18 +6225,21 @@ DEFHOOK\n  \"Return a value, with the same meaning as the C99 macro\\n\\\n @code{FLT_EVAL_METHOD} that describes which excess precision should be\\n\\\n applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\n\\\n-@code{EXCESS_PRECISION_TYPE_FAST}, or\\n\\\n-@code{EXCESS_PRECISION_TYPE_STANDARD}.  For\\n\\\n+@code{EXCESS_PRECISION_TYPE_FAST},\\n\\\n+@code{EXCESS_PRECISION_TYPE_STANDARD}, or\\n\\\n+@code{EXCESS_PRECISION_TYPE_FLOAT16}.  For\\n\\\n @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\\n\\\n precision and range operations will be implictly evaluated in regardless\\n\\\n of the excess precision explicitly added.  For\\n\\\n-@code{EXCESS_PRECISION_TYPE_STANDARD} and\\n\\\n+@code{EXCESS_PRECISION_TYPE_STANDARD}, \\n\\\n+@code{EXCESS_PRECISION_TYPE_FLOAT16}, and\\n\\\n @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\\n\\\n explicit excess precision that should be added depending on the\\n\\\n value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\\n\\\n Note that unpredictable explicit excess precision does not make sense,\\n\\\n so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\\n\\\n-when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\\n\\\n+when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD},\\n\\\n+@code{EXCESS_PRECISION_TYPE_FLOAT16} or\\n\\\n @code{EXCESS_PRECISION_TYPE_FAST}.\",\n  enum flt_eval_method, (enum excess_precision_type type),\n  default_excess_precision)"}, {"sha": "3d2503ce5e344fe1b351387761ba0ec3625cab78", "filename": "gcc/testsuite/gcc.target/i386/float16-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-6.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2 -mfpmath=sse -fdump-tree-gimple -fexcess-precision=16\" } */\n+/* { dg-final { scan-tree-dump-not \"\\\\(float\\\\)\" \"gimple\" } } */\n+_Float16\n+foo (_Float16 a, _Float16 b, _Float16 c)\n+{\n+  return a + b + c;\n+}"}, {"sha": "86641afeba92829782c0e87154473a6e1ad5e14f", "filename": "gcc/testsuite/gcc.target/i386/float16-7.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-7.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfpmath=387 -fexcess-precision=16\" } */\n+/* { dg-excess-errors \"'-fexcess-precision=16' is not compatible with '-mfpmath=387'\" } */\n+_Float16\n+foo (_Float16 a, _Float16 b)\n+{\n+  return a + b;/* { dg-error \"'-fexcess-precision=16' is not compatible with '-mfpmath=387'\" } */\n+}\n+"}, {"sha": "486cdb0e7c79855589cbfd6553d5dbb1a6c4571c", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19a327077ecc34a51487761378b9edb43c82997/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f19a327077ecc34a51487761378b9edb43c82997", "patch": "@@ -7637,7 +7637,8 @@ excess_precision_type (tree type)\n   enum excess_precision_type requested_type\n     = (flag_excess_precision == EXCESS_PRECISION_FAST\n        ? EXCESS_PRECISION_TYPE_FAST\n-       : EXCESS_PRECISION_TYPE_STANDARD);\n+       : (flag_excess_precision == EXCESS_PRECISION_FLOAT16\n+\t  ? EXCESS_PRECISION_TYPE_FLOAT16 :EXCESS_PRECISION_TYPE_STANDARD));\n \n   enum flt_eval_method target_flt_eval_method\n     = targetm.c.excess_precision (requested_type);"}]}