{"sha": "816fa80a8f1dd56131f17538216c7115be986833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2ZmE4MGE4ZjFkZDU2MTMxZjE3NTM4MjE2YzcxMTViZTk4NjgzMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2005-09-14T06:59:10Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2005-09-14T06:59:10Z"}, "message": "gimplify.c (gimplify_init_ctor_eval): Don't discard a zero-sized value if it has side-effects.\n\n\t* gimplify.c (gimplify_init_ctor_eval): Don't discard a zero-sized\n\tvalue if it has side-effects.\n\nFrom-SVN: r104262", "tree": {"sha": "7f9b5b00db380546a241d429669817f434f28c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9b5b00db380546a241d429669817f434f28c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/816fa80a8f1dd56131f17538216c7115be986833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816fa80a8f1dd56131f17538216c7115be986833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/816fa80a8f1dd56131f17538216c7115be986833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816fa80a8f1dd56131f17538216c7115be986833/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0df3cf7f04835666392eb1f8a99d9f4464ad6630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df3cf7f04835666392eb1f8a99d9f4464ad6630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df3cf7f04835666392eb1f8a99d9f4464ad6630"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "a0da84880ed70ce84246c84dd0eabe8c7ea4b460", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fa80a8f1dd56131f17538216c7115be986833/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fa80a8f1dd56131f17538216c7115be986833/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=816fa80a8f1dd56131f17538216c7115be986833", "patch": "@@ -1,3 +1,8 @@\n+2005-09-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gimplify.c (gimplify_init_ctor_eval): Don't discard a zero-sized\n+\tvalue if it has side-effects.\n+\n 2005-09-14  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/22068"}, {"sha": "cdb8a33e46dfdbfd9539ef08ceda2b341e6dca87", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fa80a8f1dd56131f17538216c7115be986833/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fa80a8f1dd56131f17538216c7115be986833/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=816fa80a8f1dd56131f17538216c7115be986833", "patch": "@@ -2576,7 +2576,12 @@ gimplify_init_ctor_eval (tree object, VEC(constructor_elt,gc) *elts,\n \t so we don't have to figure out what's missing ourselves.  */\n       gcc_assert (purpose);\n \n-      if (zero_sized_field_decl (purpose))\n+      /* Skip zero-sized fields, unless value has side-effects.  This can\n+\t happen with calls to functions returning a zero-sized type, which\n+\t we shouldn't discard.  As a number of downstream passes don't\n+\t expect sets of zero-sized fields, we rely on the gimplification of\n+\t the MODIFY_EXPR we make below to drop the assignment statement.  */\n+      if (! TREE_SIDE_EFFECTS (value) && zero_sized_field_decl (purpose))\n \tcontinue;\n \n       /* If we have a RANGE_EXPR, we have to build a loop to assign the"}]}