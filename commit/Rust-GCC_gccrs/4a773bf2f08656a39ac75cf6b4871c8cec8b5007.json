{"sha": "4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "node_id": "C_kwDOANBUbNoAKDRhNzczYmYyZjA4NjU2YTM5YWM3NWNmNmI0ODcxYzhjZWM4YjUwMDc", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-20T14:27:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-20T14:27:46Z"}, "message": "vect: Fix missed gather load opportunity\n\nWhile writing a testcase for PR106794, I noticed that we failed\nto vectorise the testcase in the patch for SVE.  The code that\nrecognises gather loads tries to optimise the point at which\nthe offset is calculated, to avoid unnecessary extensions or\ntruncations:\n\n\t  /* Don't include the conversion if the target is happy with\n\t     the current offset type.  */\n\nBut breaking only makes sense if we're at an SSA_NAME (which could\nthen be vectorised).  We shouldn't break on a conversion embedded\nin a generic expression.\n\ngcc/\n\t* tree-vect-data-refs.cc (vect_check_gather_scatter): Restrict\n\tearly-out optimisation to SSA_NAMEs.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-gather-5.c: New test.", "tree": {"sha": "c87f504a225db1aad3622c3d85caefeb29609843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87f504a225db1aad3622c3d85caefeb29609843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a773bf2f08656a39ac75cf6b4871c8cec8b5007/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e41e69ab2d85f6756d5217a3d87ada559691e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e41e69ab2d85f6756d5217a3d87ada559691e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e41e69ab2d85f6756d5217a3d87ada559691e0d"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "8b5074bba885bad5e7b5e9fedbf3fab41089b068", "filename": "gcc/testsuite/gcc.dg/vect/vect-gather-5.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a773bf2f08656a39ac75cf6b4871c8cec8b5007/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-gather-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a773bf2f08656a39ac75cf6b4871c8cec8b5007/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-gather-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-gather-5.c?ref=4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#ifdef __aarch64__\n+#pragma GCC target \"+sve\"\n+#endif\n+\n+long a[100], b[100], c[100];\n+\n+void g1 ()\n+{\n+  for (int i = 0; i < 100; i += 2)\n+    {\n+      c[i] += a[b[i]] + 1;\n+      c[i + 1] += a[b[i + 1]] + 2;\n+    }\n+}\n+\n+long g2 ()\n+{\n+  long res = 0;\n+  for (int i = 0; i < 100; i += 2)\n+    {\n+      res += a[b[i + 1]];\n+      res += a[b[i]];\n+    }\n+  return res;\n+}\n+\n+long g3 ()\n+{\n+  long res = 0;\n+  for (int i = 0; i < 100; i += 2)\n+    {\n+      res += a[b[i]];\n+      res += a[b[i + 1]];\n+    }\n+  return res;\n+}\n+\n+/* { dg-final { scan-tree-dump-times {add new stmt[^\\n]*GATHER_LOAD} 3 \"vect\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-tree-dump-not {add new stmt[^\\n]*VEC_PERM_EXPR} \"vect\" { target aarch64*-*-* } } } */"}, {"sha": "e03b50498d164144da3220df8ee5bcf4248db821", "filename": "gcc/tree-vect-data-refs.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a773bf2f08656a39ac75cf6b4871c8cec8b5007/gcc%2Ftree-vect-data-refs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a773bf2f08656a39ac75cf6b4871c8cec8b5007/gcc%2Ftree-vect-data-refs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.cc?ref=4a773bf2f08656a39ac75cf6b4871c8cec8b5007", "patch": "@@ -4151,6 +4151,7 @@ vect_check_gather_scatter (stmt_vec_info stmt_info, loop_vec_info loop_vinfo,\n \t  /* Don't include the conversion if the target is happy with\n \t     the current offset type.  */\n \t  if (use_ifn_p\n+\t      && TREE_CODE (off) == SSA_NAME\n \t      && !POINTER_TYPE_P (TREE_TYPE (off))\n \t      && vect_gather_scatter_fn_p (loop_vinfo, DR_IS_READ (dr),\n \t\t\t\t\t   masked_p, vectype, memory_type,"}]}