{"sha": "f0b883464c58cb2f3f521776e65008b1fa75f79e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiODgzNDY0YzU4Y2IyZjNmNTIxNzc2ZTY1MDA4YjFmYTc1Zjc5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-06T14:52:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-06T15:43:24Z"}, "message": "libstdc++: Fix doxygen markup for group close commands\n\nA change in Doxygen 1.8.16 means that \"// @}\" is no longer recognized by\nDoxygen, so doesn't close a @{ group. A \"///\" comment needs to be used.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_base.h: Fix doxygen group close.\n\t* include/bits/basic_ios.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/fs_dir.h: Likewise.\n\t* include/bits/fs_ops.h: Likewise.\n\t* include/bits/fs_path.h: Likewise.\n\t* include/bits/functional_hash.h: Likewise.\n\t* include/bits/gslice.h: Likewise.\n\t* include/bits/gslice_array.h: Likewise.\n\t* include/bits/hashtable_policy.h: Likewise.\n\t* include/bits/indirect_array.h: Likewise.\n\t* include/bits/locale_classes.h: Likewise.\n\t* include/bits/locale_facets.h: Likewise.\n\t* include/bits/locale_facets_nonio.h: Likewise.\n\t* include/bits/mask_array.h: Likewise.\n\t* include/bits/refwrap.h: Likewise.\n\t* include/bits/regex.h: Likewise.\n\t* include/bits/regex_automaton.h: Likewise.\n\t* include/bits/regex_compiler.h: Likewise.\n\t* include/bits/regex_constants.h: Likewise.\n\t* include/bits/regex_error.h: Likewise.\n\t* include/bits/regex_executor.h: Likewise.\n\t* include/bits/regex_scanner.h: Likewise.\n\t* include/bits/shared_ptr.h: Likewise.\n\t* include/bits/shared_ptr_atomic.h: Likewise.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/bits/slice_array.h: Likewise.\n\t* include/bits/specfun.h: Likewise.\n\t* include/bits/std_function.h: Likewise.\n\t* include/bits/std_mutex.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_iterator.h: Likewise.\n\t* include/bits/stl_iterator_base_types.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_numeric.h: Likewise.\n\t* include/bits/stl_pair.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_uninitialized.h: Likewise.\n\t* include/bits/stream_iterator.h: Likewise.\n\t* include/bits/streambuf_iterator.h: Likewise.\n\t* include/bits/unique_ptr.h: Likewise.\n\t* include/bits/unordered_map.h: Likewise.\n\t* include/bits/unordered_set.h: Likewise.\n\t* include/decimal/decimal: Likewise.\n\t* include/experimental/any: Likewise.\n\t* include/experimental/array: Likewise.\n\t* include/experimental/bits/fs_dir.h: Likewise.\n\t* include/experimental/bits/fs_fwd.h: Likewise.\n\t* include/experimental/bits/fs_ops.h: Likewise.\n\t* include/experimental/bits/fs_path.h: Likewise.\n\t* include/experimental/buffer: Likewise.\n\t* include/experimental/internet: Likewise.\n\t* include/experimental/optional: Likewise.\n\t* include/experimental/propagate_const: Likewise.\n\t* include/experimental/socket: Likewise.\n\t* include/ext/pb_ds/assoc_container.hpp: Likewise.\n\t* include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp: Likewise.\n\t* include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp: Likewise.\n\t* include/ext/pb_ds/detail/types_traits.hpp: Likewise.\n\t* include/ext/pb_ds/exception.hpp: Likewise.\n\t* include/ext/pb_ds/priority_queue.hpp: Likewise.\n\t* include/ext/pb_ds/tag_and_trait.hpp: Likewise.\n\t* include/ext/random: Likewise.\n\t* include/std/any: Likewise.\n\t* include/std/atomic: Likewise.\n\t* include/std/bitset: Likewise.\n\t* include/std/chrono: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/std/condition_variable: Likewise.\n\t* include/std/fstream: Likewise.\n\t* include/std/future: Likewise.\n\t* include/std/iostream: Likewise.\n\t* include/std/istream: Likewise.\n\t* include/std/mutex: Likewise.\n\t* include/std/numeric: Likewise.\n\t* include/std/ostream: Likewise.\n\t* include/std/ratio: Likewise.\n\t* include/std/shared_mutex: Likewise.\n\t* include/std/stdexcept: Likewise.\n\t* include/std/streambuf: Likewise.\n\t* include/std/system_error: Likewise.\n\t* include/std/thread: Likewise.\n\t* include/std/valarray: Likewise.\n\t* include/std/variant: Likewise.\n\t* include/tr1/cmath: Likewise.\n\t* include/tr1/regex: Likewise.\n\t* include/tr2/dynamic_bitset: Likewise.\n\t* libsupc++/atomic_lockfree_defines.h: Likewise.\n\t* libsupc++/exception: Likewise.\n\t* libsupc++/exception.h: Likewise.\n\t* libsupc++/exception_ptr.h: Likewise.\n\t* libsupc++/nested_exception.h: Likewise.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/tr1/regex:", "tree": {"sha": "f96b9f14540fad2648f8eb4a174037e93c3b48d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96b9f14540fad2648f8eb4a174037e93c3b48d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b883464c58cb2f3f521776e65008b1fa75f79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b883464c58cb2f3f521776e65008b1fa75f79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b883464c58cb2f3f521776e65008b1fa75f79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b883464c58cb2f3f521776e65008b1fa75f79e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbd51afaa4a3c116fb538d912b35e126be80b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbd51afaa4a3c116fb538d912b35e126be80b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbd51afaa4a3c116fb538d912b35e126be80b41"}], "stats": {"total": 1042, "additions": 522, "deletions": 520}, "files": [{"sha": "b75f61138a74a56b3d19a32fffdbb113a532b16a", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1942,7 +1942,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif // C++2a\n \n-  // @} group atomics\n+  /// @} group atomics\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "aac59ac2c156353c0677618a4a367ff22a87b015", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class basic_ios : public ios_base\n     {\n     public:\n-      //@{\n+      ///@{\n       /**\n        *  These are standard types.  They permit a standardized way of\n        *  referring to names of (or names dependent on) the template\n@@ -78,9 +78,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _Traits::pos_type             pos_type;\n       typedef typename _Traits::off_type             off_type;\n       typedef _Traits                                traits_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  These are non-standard types.\n       */\n@@ -89,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t     __num_put_type;\n       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >\n \t\t\t\t\t\t     __num_get_type;\n-      //@}\n+      ///@}\n \n       // Data members:\n     protected:\n@@ -106,7 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const __num_get_type*                          _M_num_get;\n \n     public:\n-      //@{\n+      ///@{\n       /**\n        *  @brief  The quick-and-easy status check.\n        *\n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       operator!() const\n       { return this->fail(); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Returns the error state of the stream buffer."}, {"sha": "e61746848f662eb8c0bd2fcd7f2fbd831225d08a", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1152,7 +1152,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       splice_after(const_iterator __pos, forward_list&,\n \t\t   const_iterator __before, const_iterator __last) noexcept\n       { _M_splice_after(__pos, __before, __last); }\n-      // @}\n+      /// @}\n \n     private:\n #if __cplusplus > 201703L"}, {"sha": "2674ca6b115c9e9661ad6e24a925b6429424df42", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -455,7 +455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline directory_iterator\n   end(directory_iterator) noexcept\n   { return directory_iterator(); }\n-  // @}\n+  /// @}\n \n   /// Iterator type for recursively traversing a directory hierarchy.\n   class recursive_directory_iterator\n@@ -553,11 +553,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline recursive_directory_iterator\n   end(recursive_directory_iterator) noexcept\n   { return recursive_directory_iterator(); }\n-  // @}\n+  /// @}\n \n _GLIBCXX_END_NAMESPACE_CXX11\n \n-  // @} group filesystem\n+  /// @} group filesystem\n } // namespace filesystem\n \n   // Use explicit instantiations of these types. Any inconsistency in the"}, {"sha": "a3851335f340f399e0a38f3bdf58c687f97229f6", "filename": "libstdc++-v3/include/bits/fs_ops.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -302,7 +302,7 @@ namespace filesystem\n   path weakly_canonical(const path& __p);\n   path weakly_canonical(const path& __p, error_code& __ec);\n \n-  // @} group filesystem\n+  /// @} group filesystem\n } // namespace filesystem\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "ad2518f414c65915bdf83acad045f83f16e2dc81", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1330,7 +1330,7 @@ namespace __detail\n     return _M_at_end == __rhs._M_at_end;\n   }\n \n-  // @} group filesystem\n+  /// @} group filesystem\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace filesystem\n "}, {"sha": "7be8ebfa2d319285dfb7fd5a90848e20769c7f18", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -270,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif\n \n-  // @} group hashes\n+  /// @} group hashes\n \n   // Hint about performance of hash functor. If not fast the hash-based\n   // containers will cache the hash code."}, {"sha": "ae2052bd355beaabf38c2601f5ad0a8bc9175321", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -177,7 +177,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return *this;\n   }\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "4f3309d842ee3f3b019a5ea10d976863da1fde30", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -215,7 +215,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "ad8a4ec5f07421ef6baa5a89806df980af5d5067", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1939,7 +1939,7 @@ namespace __detail\n       __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);\n     }\n \n- //@} hashtable-detail\n+ ///@} hashtable-detail\n } // namespace __detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "a3dc6059988c2666b4b26cc62c1d0880fbad415f", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -204,7 +204,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f939fddb24e9938aecf25e062c1ac28bb2898c65", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Cache>\n       friend struct __use_cache;\n \n-    //@{\n+    ///@{\n     /**\n      *  @brief  Category values.\n      *\n@@ -104,7 +104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static const category messages\t= 1L << 5;\n     static const category all\t\t= (ctype | numeric | collate |\n \t\t\t\t\t   time  | monetary | messages);\n-    //@}\n+    ///@}\n \n     // Construct/copy/destroy:\n \n@@ -649,11 +649,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n \n     protected:\n       // Underlying \"C\" library locale information saved from\n@@ -822,11 +822,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>\n     {\n     public:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT               char_type;\n       typedef basic_string<_CharT> string_type;\n-      //@}\n+      ///@}\n \n       explicit\n       collate_byname(const char* __s, size_t __refs = 0)"}, {"sha": "03724cf7d68a58e5e089131ea4fe1876f94e93c1", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1674,11 +1674,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n       typedef __numpunct_cache<_CharT>  __cache_type;\n \n     protected:\n@@ -1956,11 +1956,11 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef _InIter\t\t\titer_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\t\tid;\n@@ -2003,7 +2003,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t  ios_base::iostate& __err, bool& __v) const\n       { return this->do_get(__in, __end, __io, __err, __v); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric parsing.\n        *\n@@ -2066,9 +2066,9 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t  ios_base::iostate& __err, unsigned long long& __v)  const\n       { return this->do_get(__in, __end, __io, __err, __v); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric parsing.\n        *\n@@ -2109,7 +2109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       get(iter_type __in, iter_type __end, ios_base& __io,\n \t  ios_base::iostate& __err, long double& __v) const\n       { return this->do_get(__in, __end, __io, __err, __v); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Numeric parsing.\n@@ -2196,7 +2196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t  return __ret;\n \t}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric parsing.\n        *\n@@ -2290,7 +2290,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\n \t     long double&) const;\n #endif\n-      //@}\n+      ///@}\n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -2314,11 +2314,11 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\tchar_type;\n       typedef _OutIter\t\titer_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\tid;\n@@ -2352,7 +2352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const\n       { return this->do_put(__s, __io, __fill, __v); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric formatting.\n        *\n@@ -2409,9 +2409,9 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t  unsigned long long __v) const\n       { return this->do_put(__s, __io, __fill, __v); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric formatting.\n        *\n@@ -2461,7 +2461,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       put(iter_type __s, ios_base& __io, char_type __fill,\n \t  long double __v) const\n       { return this->do_put(__s, __io, __fill, __v); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Numeric formatting.\n@@ -2512,7 +2512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       virtual\n       ~num_put() { }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Numeric formatting.\n        *\n@@ -2577,7 +2577,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       virtual iter_type\n       do_put(iter_type, ios_base&, char_type, long double) const;\n #endif\n-      //@}\n+      ///@}\n     };\n \n   template <typename _CharT, typename _OutIter>"}, {"sha": "e518df9f4b6eea49d081ed452b41857c02993186", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -369,11 +369,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef _InIter\t\t\titer_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\t\tid;\n@@ -798,11 +798,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef _OutIter\t\t\titer_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\t\tid;\n@@ -1025,11 +1025,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n       typedef __moneypunct_cache<_CharT, _Intl>     __cache_type;\n \n     private:\n@@ -1201,7 +1201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       frac_digits() const\n       { return this->do_frac_digits(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Return pattern for money values.\n        *\n@@ -1240,7 +1240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       pattern\n       neg_format() const\n       { return this->do_neg_format(); }\n-      //@}\n+      ///@}\n \n     protected:\n       /// Destructor.\n@@ -1469,12 +1469,12 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef _InIter\t\t\titer_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\t\tid;\n@@ -1629,12 +1629,12 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n     class money_put : public locale::facet\n     {\n     public:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef _OutIter\t\t\titer_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n \n       /// Numpunct facet id.\n       static locale::id\t\t\tid;\n@@ -1816,11 +1816,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n       typedef _CharT\t\t\tchar_type;\n       typedef basic_string<_CharT>\tstring_type;\n-      //@}\n+      ///@}\n \n     protected:\n       // Underlying \"C\" library locale information saved from"}, {"sha": "3889bd151a64a8938764258a20732685d8967664", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -205,7 +205,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "adfbe21469313f4f6593b8cdf1a02a16b8ebb81b", "filename": "libstdc++-v3/include/bits/refwrap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -391,7 +391,7 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     cref(reference_wrapper<_Tp> __t) noexcept\n     { return { __t.get() }; }\n \n-  // @}\n+  /// @}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "4d331c82e74bb9f1ea284ab45f9e02ecca4e6d05", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -403,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @name Constants\n        * std [28.8.1](1)\n        */\n-      //@{\n+      ///@{\n       static constexpr flag_type icase = regex_constants::icase;\n       static constexpr flag_type nosubs = regex_constants::nosubs;\n       static constexpr flag_type optimize = regex_constants::optimize;\n@@ -414,7 +414,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static constexpr flag_type awk = regex_constants::awk;\n       static constexpr flag_type grep = regex_constants::grep;\n       static constexpr flag_type egrep = regex_constants::egrep;\n-      //@}\n+      ///@}\n \n       // [7.8.2] construct/copy/destroy\n       /**\n@@ -941,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       int\n       compare(const value_type* __s) const\n       { return this->_M_str().compare(__s); }\n-      // @}\n+      /// @}\n \n       /// @cond undocumented\n       // Non-standard, used by comparison operators\n@@ -1650,7 +1650,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t       const sub_match<_Bi_iter>& __m)\n     { return __os << __m.str(); }\n \n-  // @} relates sub_match\n+  /// @} relates sub_match\n \n   // [7.10] Class template match_results\n \n@@ -1704,7 +1704,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        * @name 28.10 Public Types\n        */\n-      //@{\n+      ///@{\n       typedef sub_match<_Bi_iter>\t\t\t   value_type;\n       typedef const value_type&\t\t\t\t   const_reference;\n       typedef value_type&\t\t\t\t   reference;\n@@ -1715,13 +1715,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       typedef _Alloc\t\t\t\t\t   allocator_type;\n       typedef typename __iter_traits::value_type \t   char_type;\n       typedef std::basic_string<char_type>\t\t   string_type;\n-      //@}\n+      ///@}\n \n     public:\n       /**\n        * @name 28.10.1 Construction, Copying, and Destruction\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Constructs a default %match_results container.\n@@ -1765,7 +1765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       ~match_results() = default;\n \n-      //@}\n+      ///@}\n \n       // 28.10.2, state:\n       /**\n@@ -1778,7 +1778,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        * @name 28.10.2 Size\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Gets the number of matches and submatches.\n@@ -1806,12 +1806,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       empty() const noexcept\n       { return size() == 0; }\n \n-      //@}\n+      ///@}\n \n       /**\n        * @name 28.10.4 Element Access\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Gets the length of the indicated submatch.\n@@ -1931,7 +1931,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       cend() const noexcept\n       { return this->end(); }\n \n-      //@}\n+      ///@}\n \n       /**\n        * @name 28.10.5 Formatting\n@@ -1941,7 +1941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * escape sequences accepted by these functions are determined by\n        * their @p flags parameter as documented above.\n        */\n-       //@{\n+       ///@{\n \n       /**\n        * @pre   ready() == true\n@@ -1992,12 +1992,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn __result;\n       }\n \n-      //@}\n+      ///@}\n \n       /**\n        * @name 28.10.6 Allocator\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Gets a copy of the allocator.\n@@ -2006,12 +2006,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       get_allocator() const noexcept\n       { return _Base_type::get_allocator(); }\n \n-      //@}\n+      ///@}\n \n       /**\n        * @name 28.10.7 Swap\n        */\n-       //@{\n+       ///@{\n \n       /**\n        * @brief Swaps the contents of two match_results.\n@@ -2023,7 +2023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_Base_type::swap(__that);\n \tswap(_M_begin, __that._M_begin);\n       }\n-      //@}\n+      ///@}\n \n     private:\n       template<typename, typename, typename>\n@@ -2150,7 +2150,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   /**\n    * @name Matching, Searching, and Replacing\n    */\n-  //@{\n+  ///@{\n \n   /**\n    * @brief Determines if there is a match between the regular expression @p e\n@@ -2612,7 +2612,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       return __result;\n     }\n \n-  //@}\n+  ///@}\n \n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n@@ -2975,7 +2975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;\n #endif\n \n-  //@} // group regex\n+  ///@} // group regex\n \n _GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "872a17fe8cbd15660adda81e8fc5a48a52101881", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -392,7 +392,7 @@ namespace __detail\n       _StateIdT _M_end;\n     };\n \n- //@} regex-detail\n+ ///@} regex-detail\n } // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "bf7dcc54dba0194455d824e2d22339df6dc9d6dd", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -552,7 +552,7 @@ namespace __detail\n #endif\n     };\n \n- //@} regex-detail\n+ ///@} regex-detail\n } // namespace __detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "340421a5abd092196461c9542e32958b7747792d", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -50,7 +50,7 @@ namespace regex_constants\n   /**\n    * @name 5.1 Regular Expression Syntax Options\n    */\n-  //@{\n+  ///@{\n   enum __syntax_option\n   {\n     _S_icase,\n@@ -216,7 +216,7 @@ namespace regex_constants\n   operator^=(syntax_option_type& __a, syntax_option_type __b)\n   { return __a = __a ^ __b; }\n \n-  //@}\n+  ///@}\n \n   /**\n    * @name 5.2 Matching Rules\n@@ -227,7 +227,7 @@ namespace regex_constants\n    * below for any bitmask elements set.\n    *\n    */\n-  //@{\n+  ///@{\n \n   enum __match_flag\n   {\n@@ -407,7 +407,7 @@ namespace regex_constants\n   operator^=(match_flag_type& __a, match_flag_type __b)\n   { return __a = __a ^ __b; }\n \n-  //@}\n+  ///@}\n } // namespace regex_constants\n /* @} */ // group regex\n "}, {"sha": "27593833544559bd1b03ec05cdab8d7d170ecd79", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -44,7 +44,7 @@ namespace regex_constants\n   /**\n    * @name 5.3 Error Types\n    */\n-  //@{\n+  ///@{\n \n   enum error_type\n     {\n@@ -119,7 +119,7 @@ namespace regex_constants\n    */\n   constexpr error_type error_stack(_S_error_stack);\n \n-  //@}\n+  ///@}\n } // namespace regex_constants\n \n   // [7.8] Class regex_error\n@@ -161,7 +161,7 @@ namespace regex_constants\n     friend void __throw_regex_error(regex_constants::error_type, const char*);\n   };\n \n-  //@} // group regex\n+  ///@} // group regex\n \n   void\n   __throw_regex_error(regex_constants::error_type __ecode);"}, {"sha": "4a641eeee6cf0ff7dff20ea839ea13accde6f10e", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -250,7 +250,7 @@ namespace __detail\n       bool                                                  _M_has_sol;\n     };\n \n- //@} regex-detail\n+ ///@} regex-detail\n } // namespace __detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "e810fa7dd3159e5f3af16cba7a75f1bdaeed1e2b", "filename": "libstdc++-v3/include/bits/regex_scanner.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -264,7 +264,7 @@ namespace __detail\n       void (_Scanner::* _M_eat_escape)();\n     };\n \n- //@} regex-detail\n+ ///@} regex-detail\n } // namespace __detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "ac4aa20b7943d8c751c0d81b5cd43110039a9a81", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -662,7 +662,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++20\n #endif // C++17\n \n-  // @}\n+  /// @}\n \n   /**\n    * @brief  A non-owning observer for a pointer owned by a shared_ptr\n@@ -889,8 +889,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  // @} relates shared_ptr\n-  // @} group pointer_abstractions\n+  /// @} relates shared_ptr\n+  /// @} group pointer_abstractions\n \n #if __cplusplus >= 201703L\n   namespace __detail::__variant"}, {"sha": "6e94d83c46d4f86ac2c0ddafe7c298f80cce61df", "filename": "libstdc++-v3/include/bits/shared_ptr_atomic.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     atomic_is_lock_free(const shared_ptr<_Tp>* __p)\n     { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }\n \n-  // @}\n+  /// @}\n \n   /**\n    *  @brief  Atomic load for shared_ptr objects.\n@@ -123,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline __shared_ptr<_Tp, _Lp>\n     atomic_load(const __shared_ptr<_Tp, _Lp>* __p)\n     { return std::atomic_load_explicit(__p, memory_order_seq_cst); }\n-  // @}\n+  /// @}\n \n   /**\n    *  @brief  Atomic store for shared_ptr objects.\n@@ -162,7 +162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)\n     { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }\n-  // @}\n+  /// @}\n \n   /**\n    *  @brief  Atomic exchange for shared_ptr objects.\n@@ -207,7 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::atomic_exchange_explicit(__p, std::move(__r),\n \t\t\t\t\t   memory_order_seq_cst);\n     }\n-  // @}\n+  /// @}\n \n   /**\n    *  @brief  Atomic compare-and-swap for shared_ptr objects.\n@@ -325,10 +325,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::atomic_compare_exchange_weak_explicit(__p, __v,\n \t  std::move(__w), memory_order_seq_cst, memory_order_seq_cst);\n     }\n-  // @}\n+  /// @}\n \n-  // @} relates shared_ptr\n-  // @} group pointer_abstractions\n+  /// @} relates shared_ptr\n+  /// @} group pointer_abstractions\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "8766b61fd8156e510ab15b5c69f66e17ef2b8776", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1328,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool\n \towner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n-      // @}\n+      /// @}\n \n     protected:\n       // This constructor is non-standard, it is used by allocate_shared."}, {"sha": "bdced19e789d3e8d53d50887de4708bc155a1612", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -276,7 +276,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "513ec3c24cda366c69c99d0f262524740874b1dd", "filename": "libstdc++-v3/include/bits/specfun.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1196,7 +1196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __detail::__sph_neumann<__type>(__n, __x);\n     }\n \n-  // @} group mathsf\n+  /// @} group mathsf\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n@@ -1380,7 +1380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::__detail::__hyperg<__type>(__a, __b, __c, __x);\n     }\n \n-  // @}\n+  /// @}\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n #endif // __STRICT_ANSI__"}, {"sha": "31eba2b822c254771889ccd5b13791f7fa968d2d", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -630,7 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  return nullptr;\n \t}\n-      // @}\n+      /// @}\n \n     private:\n       using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);"}, {"sha": "357c689143892e6a083ff6741c016854d9a999b1", "filename": "libstdc++-v3/include/bits/std_mutex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -241,7 +241,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       mutex_type&  _M_device;\n     };\n \n-  // @} group mutexes\n+  /// @} group mutexes\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n #endif // C++11"}, {"sha": "20c73b4fc3cf0b7b203dcbe887985508a6328474", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1838,7 +1838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       // called by the second initialize_dispatch above\n-      //@{\n+      ///@{\n       /**\n        *  @brief Fills the deque with whatever is in [first,last).\n        *  @param  __first  An input iterator.\n@@ -1859,7 +1859,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tvoid\n \t_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,\n \t\t\t    std::forward_iterator_tag);\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Fills the %deque with copies of value.\n@@ -1943,7 +1943,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n       }\n \n-      //@{\n+      ///@{\n       /// Helper functions for push_* and pop_*.\n #if __cplusplus < 201103L\n       void _M_push_back_aux(const value_type&);\n@@ -1960,7 +1960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void _M_pop_back_aux();\n \n       void _M_pop_front_aux();\n-      //@}\n+      ///@}\n \n       // Internal insert functions follow.  The *_aux functions do the actual\n       // insertion work when all shortcuts fail.\n@@ -2083,7 +2083,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_shrink_to_fit();\n #endif\n \n-      //@{\n+      ///@{\n       /// Memory-handling helpers for the previous internal insert functions.\n       iterator\n       _M_reserve_elements_at_front(size_type __n)\n@@ -2110,10 +2110,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       _M_new_elements_at_back(size_type __new_elements);\n-      //@}\n+      ///@}\n \n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Memory-handling helpers for the major %map.\n        *\n@@ -2139,7 +2139,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);\n-      //@}\n+      ///@}\n \n #if __cplusplus >= 201103L\n       // Constant-time, nothrow move assignment when source object's memory"}, {"sha": "dc8b101e8f815edd093f4c56972bab1da1dc468e", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -400,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { return __t.operator->(); }\n     };\n \n-  //@{\n+  ///@{\n   /**\n    *  @param  __x  A %reverse_iterator.\n    *  @param  __y  A %reverse_iterator.\n@@ -535,7 +535,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tconst reverse_iterator<_IteratorR>& __y)\n     { return __y.base() <=> __x.base(); }\n #endif // C++20\n-  //@}\n+  ///@}\n \n #if __cplusplus < 201103L\n   template<typename _Iterator>\n@@ -964,7 +964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return insert_iterator<_Container>(__x, __i); }\n #endif\n \n-  // @} group iterators\n+  /// @} group iterators\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n@@ -2245,7 +2245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif // C++20\n \n-  // @} group iterators\n+  /// @} group iterators\n \n   template<typename _Iterator>\n     auto"}, {"sha": "71cf41f866dcaefb8252a882d94ec964251a43d5", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -79,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @defgroup iterators Iterators\n    *  Abstractions for uniform iterating through various underlying types.\n   */\n-  //@{ \n+  ///@{\n \n   /**\n    *  @defgroup iterator_tags Iterator Tags\n@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are.  Different underlying algorithms can then be used based on the\n    *  different operations supported by different iterator types.\n   */\n-  //@{ \n+  ///@{\n   ///  Marking input iterators.\n   struct input_iterator_tag { };\n \n@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Contiguous iterators point to objects stored contiguously in memory.\n   struct contiguous_iterator_tag : public random_access_iterator_tag { };\n #endif\n-  //@}\n+  ///@}\n \n   /**\n    *  @brief  Common %iterator class.\n@@ -238,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __iterator_category(const _Iter&)\n     { return typename iterator_traits<_Iter>::iterator_category(); }\n \n-  //@}\n+  ///@}\n \n #if __cplusplus >= 201103L\n   template<typename _Iter>"}, {"sha": "535dbeb745a9861b6e118e2fdefd7536e8230645", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -816,7 +816,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tinsert(_Pair&& __x)\n \t{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }\n #endif\n-      // @}\n+      /// @}\n \n #if __cplusplus >= 201103L\n       /**\n@@ -878,7 +878,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t     std::forward<_Pair>(__x));\n \t}\n #endif\n-      // @}\n+      /// @}\n \n       /**\n        *  @brief Template function that attempts to insert a range of elements.\n@@ -1036,7 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_t.erase(__position); }\n-      // @}\n+      /// @}\n #else\n       /**\n        *  @brief Erases an element from a %map.\n@@ -1152,7 +1152,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // [23.3.1.3] map operations\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %map.\n        *  @param  __x  Key of (key, value) %pair to be located.\n@@ -1175,9 +1175,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n \t{ return _M_t._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %map.\n        *  @param  __x  Key of (key, value) %pair to be located.\n@@ -1200,9 +1200,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))\n \t{ return _M_t._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements with given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1221,10 +1221,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))\n \t{ return _M_t._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1239,10 +1239,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_t._M_find_tr(__x), void(), true)\n \t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -1265,9 +1265,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -1290,9 +1290,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -1310,9 +1310,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -1330,9 +1330,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1359,9 +1359,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n \t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1392,7 +1392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      _M_t._M_equal_range_tr(__x));\n \t}\n #endif\n-      //@}\n+      ///@}\n \n       template<typename _K1, typename _T1, typename _C1, typename _A1>\n \tfriend bool"}, {"sha": "8157981d0bcd3bac9a3ce6e2b6c63a86928481d7", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tinsert(_Pair&& __x)\n \t{ return _M_t._M_emplace_equal(std::forward<_Pair>(__x)); }\n #endif\n-      // @}\n+      /// @}\n \n       /**\n        *  @brief Inserts a std::pair into the %multimap.\n@@ -597,7 +597,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t    std::forward<_Pair>(__x));\n \t}\n #endif\n-      // @}\n+      /// @}\n \n       /**\n        *  @brief A template function that attempts to insert a range\n@@ -707,7 +707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_t.erase(__position); }\n-      // @}\n+      /// @}\n #else\n       /**\n        *  @brief Erases an element from a %multimap.\n@@ -827,7 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // multimap operations\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %multimap.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -849,9 +849,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n \t{ return _M_t._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %multimap.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -873,9 +873,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))\n \t{ return _M_t._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the number of elements with given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -891,10 +891,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))\n \t{ return _M_t._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -909,10 +909,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_t._M_find_tr(__x), void(), true)\n \t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -935,9 +935,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -960,9 +960,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -980,9 +980,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pair to be located.\n@@ -1000,9 +1000,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1027,9 +1027,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n \t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key of (key, value) pairs to be located.\n@@ -1058,7 +1058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      _M_t._M_equal_range_tr(__x));\n \t}\n #endif\n-      //@}\n+      ///@}\n \n       template<typename _K1, typename _T1, typename _C1, typename _A1>\n \tfriend bool"}, {"sha": "ef987600733e9ed98d71993a7ec10abf2493955c", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -720,7 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // multiset operations:\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the number of elements with given key.\n        *  @param  __x  Key of elements to be located.\n@@ -736,10 +736,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))\n \t{ return _M_t._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -754,12 +754,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_t._M_find_tr(__x), void(), true)\n \t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n-      //@}\n+      ///@}\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214.  set::find() missing const overload\n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %set.\n        *  @param  __x  Element to be located.\n@@ -792,9 +792,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator{_M_t._M_find_tr(__x)})\n \t{ return const_iterator{_M_t._M_find_tr(__x)}; }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -827,9 +827,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -857,9 +857,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -896,7 +896,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n \t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n       template<typename _K1, typename _C1, typename _A1>\n \tfriend bool"}, {"sha": "24aba081e05acb4ba1cf5a2efbe30ce9ea93ccbc", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -403,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       return ++__result;\n     }\n \n-  // @} group numeric_ops\n+  /// @} group numeric_ops\n \n #undef _GLIBCXX_MOVE_IF_20\n "}, {"sha": "70262f9508fe572388fc74e9b21b4256040503aa", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -542,7 +542,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif // __cplusplus >= 201103L\n \n-  // @} relates pair\n+  /// @} relates pair\n \n   /**\n    *  @brief A convenience wrapper for creating a pair from two objects."}, {"sha": "a9b9695bca83789311309abff695a7a4c208f1dc", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -115,14 +115,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       // typedefs:\n-      //@{\n+      ///@{\n       /// Public typedefs.\n       typedef _Key     key_type;\n       typedef _Key     value_type;\n       typedef _Compare key_compare;\n       typedef _Compare value_compare;\n       typedef _Alloc   allocator_type;\n-      //@}\n+      ///@}\n \n     private:\n       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n@@ -135,7 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;\n \n     public:\n-      //@{\n+      ///@{\n       ///  Iterator-related typedefs.\n       typedef typename _Alloc_traits::pointer\t\t pointer;\n       typedef typename _Alloc_traits::const_pointer\t const_pointer;\n@@ -150,7 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;\n       typedef typename _Rep_type::size_type\t\t size_type;\n       typedef typename _Rep_type::difference_type\t difference_type;\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201402L\n       using node_type = typename _Rep_type::node_type;\n@@ -735,7 +735,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // set operations:\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements.\n        *  @param  __x  Element to located.\n@@ -755,10 +755,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_t._M_count_tr(__x))\n \t{ return _M_t._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -773,12 +773,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_t._M_find_tr(__x), void(), true)\n \t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n-      //@}\n+      ///@}\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214.  set::find() missing const overload\n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in a %set.\n        *  @param  __x  Element to be located.\n@@ -811,9 +811,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator{_M_t._M_find_tr(__x)})\n \t{ return const_iterator{_M_t._M_find_tr(__x)}; }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -846,9 +846,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds the end of a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -876,9 +876,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n \t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -915,7 +915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n \t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n-      //@}\n+      ///@}\n \n       template<typename _K1, typename _C1, typename _A1>\n \tfriend bool"}, {"sha": "f7b24818fc4563aa6de295ff6313248377f8ef93", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1051,7 +1051,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @endcond\n #endif\n \n-  // @} group memory\n+  /// @} group memory\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "fd8920b8d01cb26af007df2482ba801c89cc3ab8", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -177,15 +177,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     public:\n-      //@{\n+      ///@{\n       /// Public typedef\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n #endif\n       typedef _CharT                         char_type;\n       typedef _Traits                        traits_type;\n       typedef basic_ostream<_CharT, _Traits> ostream_type;\n-      //@}\n+      ///@}\n \n     private:\n       ostream_type*\t_M_stream;\n@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return *this; }\n     };\n \n-  // @} group iterators\n+  /// @} group iterators\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "22af3fd59956b89435767bfc41034c252ca94868", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n #if __cplusplus < 201103L\n       typedef _CharT& reference; // Changed to _CharT by LWG 445\n@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _Traits::int_type\t\tint_type;\n       typedef basic_streambuf<_CharT, _Traits>\t\tstreambuf_type;\n       typedef basic_istream<_CharT, _Traits>\t\tistream_type;\n-      //@}\n+      ///@}\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     public:\n       // Types:\n-      //@{\n+      ///@{\n       /// Public typedefs\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Traits\t\t\t       traits_type;\n       typedef basic_streambuf<_CharT, _Traits> streambuf_type;\n       typedef basic_ostream<_CharT, _Traits>   ostream_type;\n-      //@}\n+      ///@}\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,"}, {"sha": "6e5537536e8769c1b250fcd6e14c9f57525a45fd", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -906,7 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return compare_three_way()(__x.get(), static_cast<pointer>(nullptr));\n     }\n #endif\n-  // @} relates unique_ptr\n+  /// @} relates unique_ptr\n \n   /// @cond undocumented\n   template<typename _Up, typename _Ptr = typename _Up::pointer,\n@@ -991,7 +991,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_unique_for_overwrite(_Args&&...) = delete;\n #endif // C++20\n \n-  // @} relates unique_ptr\n+  /// @} relates unique_ptr\n #endif // C++14\n \n #if __cplusplus > 201703L && __cpp_concepts\n@@ -1009,7 +1009,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif // C++20\n \n-  // @} group pointer_abstractions\n+  /// @} group pointer_abstractions\n \n #if __cplusplus >= 201703L\n   namespace __detail::__variant"}, {"sha": "2261e6685ea83141bc7e2f61b89388d52c982f7d", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -106,17 +106,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       // typedefs:\n-      //@{\n+      ///@{\n       /// Public typedefs.\n       typedef typename _Hashtable::key_type\tkey_type;\n       typedef typename _Hashtable::value_type\tvalue_type;\n       typedef typename _Hashtable::mapped_type\tmapped_type;\n       typedef typename _Hashtable::hasher\thasher;\n       typedef typename _Hashtable::key_equal\tkey_equal;\n       typedef typename _Hashtable::allocator_type allocator_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       ///  Iterator-related typedefs.\n       typedef typename _Hashtable::pointer\t\tpointer;\n       typedef typename _Hashtable::const_pointer\tconst_pointer;\n@@ -128,7 +128,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Hashtable::const_local_iterator\tconst_local_iterator;\n       typedef typename _Hashtable::size_type\t\tsize_type;\n       typedef typename _Hashtable::difference_type\tdifference_type;\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201402L\n       using node_type = typename _Hashtable::node_type;\n@@ -325,7 +325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       begin() noexcept\n       { return _M_h.begin(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %unordered_map.\n@@ -337,7 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       cbegin() const noexcept\n       { return _M_h.begin(); }\n-      //@}\n+      ///@}\n \n       /**\n        *  Returns a read/write iterator that points one past the last element in\n@@ -347,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       end() noexcept\n       { return _M_h.end(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points one past the last\n        *  element in the %unordered_map.\n@@ -359,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       cend() const noexcept\n       { return _M_h.end(); }\n-      //@}\n+      ///@}\n \n       // modifiers.\n \n@@ -529,7 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n #endif // C++17\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Attempts to insert a std::pair into the %unordered_map.\n \n@@ -562,9 +562,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t      pair<iterator, bool>>\n \tinsert(_Pair&& __x)\n         { return _M_h.emplace(std::forward<_Pair>(__x)); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Attempts to insert a std::pair into the %unordered_map.\n        *  @param  __hint  An iterator that serves as a hint as to where the\n@@ -600,7 +600,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>\n \tinsert(const_iterator __hint, _Pair&& __x)\n \t{ return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x)); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief A template function that attempts to insert a range of\n@@ -722,7 +722,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Erases an element from an %unordered_map.\n        *  @param  __position  An iterator pointing to the element to be erased.\n@@ -744,7 +744,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_h.erase(__position); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Erases elements according to the provided key.\n@@ -852,7 +852,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // lookup.\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in an %unordered_map.\n        *  @param  __x  Key to be located.\n@@ -885,9 +885,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) const -> decltype(_M_h._M_find_tr(__x))\n \t{ return _M_h._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements.\n        *  @param  __x  Key to count.\n@@ -907,10 +907,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_h._M_count_tr(__x))\n \t{ return _M_h._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -925,10 +925,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_h._M_find_tr(__x), void(), true)\n \t{ return _M_h._M_find_tr(__x) != _M_h.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -960,9 +960,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_equal_range_tr(__x))\n \t{ return _M_h._M_equal_range_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Subscript ( @c [] ) access to %unordered_map data.\n        *  @param  __k  The key for which data should be retrieved.\n@@ -982,9 +982,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       mapped_type&\n       operator[](key_type&& __k)\n       { return _M_h[std::move(__k)]; }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Access to %unordered_map data.\n        *  @param  __k  The key for which data should be retrieved.\n@@ -999,7 +999,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const mapped_type&\n       at(const key_type& __k) const\n       { return _M_h.at(__k); }\n-      //@}\n+      ///@}\n \n       // bucket interface.\n \n@@ -1041,7 +1041,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       begin(size_type __n)\n       { return _M_h.begin(__n); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to the first\n        *         bucket element.\n@@ -1055,7 +1055,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cbegin(size_type __n) const\n       { return _M_h.cbegin(__n); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Returns a read/write iterator pointing to one past the last\n@@ -1067,7 +1067,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       end(size_type __n)\n       { return _M_h.end(__n); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to one past\n        *         the last bucket elements.\n@@ -1081,7 +1081,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cend(size_type __n) const\n       { return _M_h.cend(__n); }\n-      //@}\n+      ///@}\n \n       // hash policy.\n \n@@ -1249,17 +1249,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       // typedefs:\n-      //@{\n+      ///@{\n       /// Public typedefs.\n       typedef typename _Hashtable::key_type\tkey_type;\n       typedef typename _Hashtable::value_type\tvalue_type;\n       typedef typename _Hashtable::mapped_type\tmapped_type;\n       typedef typename _Hashtable::hasher\thasher;\n       typedef typename _Hashtable::key_equal\tkey_equal;\n       typedef typename _Hashtable::allocator_type allocator_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       ///  Iterator-related typedefs.\n       typedef typename _Hashtable::pointer\t\tpointer;\n       typedef typename _Hashtable::const_pointer\tconst_pointer;\n@@ -1271,7 +1271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Hashtable::const_local_iterator\tconst_local_iterator;\n       typedef typename _Hashtable::size_type\t\tsize_type;\n       typedef typename _Hashtable::difference_type\tdifference_type;\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201402L\n       using node_type = typename _Hashtable::node_type;\n@@ -1467,7 +1467,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       begin() noexcept\n       { return _M_h.begin(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %unordered_multimap.\n@@ -1479,7 +1479,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       cbegin() const noexcept\n       { return _M_h.begin(); }\n-      //@}\n+      ///@}\n \n       /**\n        *  Returns a read/write iterator that points one past the last element in\n@@ -1489,7 +1489,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       end() noexcept\n       { return _M_h.end(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points one past the last\n        *  element in the %unordered_multimap.\n@@ -1501,7 +1501,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       cend() const noexcept\n       { return _M_h.end(); }\n-      //@}\n+      ///@}\n \n       // modifiers.\n \n@@ -1552,7 +1552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{ return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Inserts a std::pair into the %unordered_multimap.\n        *  @param __x Pair to be inserted (see std::make_pair for easy\n@@ -1574,9 +1574,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>\n \tinsert(_Pair&& __x)\n         { return _M_h.emplace(std::forward<_Pair>(__x)); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Inserts a std::pair into the %unordered_multimap.\n        *  @param  __hint  An iterator that serves as a hint as to where the\n@@ -1610,7 +1610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>\n \tinsert(const_iterator __hint, _Pair&& __x)\n         { return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x)); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief A template function that attempts to insert a range of\n@@ -1663,7 +1663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_h._M_reinsert_node_multi(__hint, std::move(__nh)); }\n #endif // C++17\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Erases an element from an %unordered_multimap.\n        *  @param  __position  An iterator pointing to the element to be erased.\n@@ -1685,7 +1685,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_h.erase(__position); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Erases elements according to the provided key.\n@@ -1795,7 +1795,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // lookup.\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in an %unordered_multimap.\n        *  @param  __x  Key to be located.\n@@ -1828,9 +1828,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tfind(const _Kt& __x) const -> decltype(_M_h._M_find_tr(__x))\n \t{ return _M_h._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements.\n        *  @param  __x  Key to count.\n@@ -1846,10 +1846,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_h._M_count_tr(__x))\n \t{ return _M_h._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -1864,10 +1864,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_h._M_find_tr(__x), void(), true)\n \t{ return _M_h._M_find_tr(__x) != _M_h.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -1897,7 +1897,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_equal_range_tr(__x))\n \t{ return _M_h._M_equal_range_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n       // bucket interface.\n \n@@ -1939,7 +1939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       begin(size_type __n)\n       { return _M_h.begin(__n); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to the first\n        *         bucket element.\n@@ -1953,7 +1953,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cbegin(size_type __n) const\n       { return _M_h.cbegin(__n); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Returns a read/write iterator pointing to one past the last\n@@ -1965,7 +1965,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       end(size_type __n)\n       { return _M_h.end(__n); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to one past\n        *         the last bucket elements.\n@@ -1979,7 +1979,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cend(size_type __n) const\n       { return _M_h.cend(__n); }\n-      //@}\n+      ///@}\n \n       // hash policy.\n "}, {"sha": "ac4a890d25a1e316c66719bada9d0c5e1d200833", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -101,16 +101,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       // typedefs:\n-      //@{\n+      ///@{\n       /// Public typedefs.\n       typedef typename _Hashtable::key_type\tkey_type;\n       typedef typename _Hashtable::value_type\tvalue_type;\n       typedef typename _Hashtable::hasher\thasher;\n       typedef typename _Hashtable::key_equal\tkey_equal;\n       typedef typename _Hashtable::allocator_type allocator_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       ///  Iterator-related typedefs.\n       typedef typename _Hashtable::pointer\t\tpointer;\n       typedef typename _Hashtable::const_pointer\tconst_pointer;\n@@ -122,7 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Hashtable::const_local_iterator\tconst_local_iterator;\n       typedef typename _Hashtable::size_type\t\tsize_type;\n       typedef typename _Hashtable::difference_type\tdifference_type;\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201402L\n       using node_type = typename _Hashtable::node_type;\n@@ -311,7 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // iterators.\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %unordered_set.\n@@ -323,9 +323,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       begin() const noexcept\n       { return _M_h.begin(); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points one past the last\n        *  element in the %unordered_set.\n@@ -337,7 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       end() const noexcept\n       { return _M_h.end(); }\n-      //@}\n+      ///@}\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n@@ -403,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{ return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Attempts to insert an element into the %unordered_set.\n        *  @param  __x  Element to be inserted.\n@@ -424,9 +424,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       { return _M_h.insert(std::move(__x)); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Attempts to insert an element into the %unordered_set.\n        *  @param  __hint  An iterator that serves as a hint as to where the\n@@ -453,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(const_iterator __hint, value_type&& __x)\n       { return _M_h.insert(__hint, std::move(__x)); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief A template function that attempts to insert a range of\n@@ -505,7 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_h._M_reinsert_node(std::move(__nh)).position; }\n #endif // C++17\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Erases an element from an %unordered_set.\n        *  @param  __position  An iterator pointing to the element to be erased.\n@@ -527,7 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_h.erase(__position); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Erases elements according to the provided key.\n@@ -634,7 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // lookup.\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in an %unordered_set.\n        *  @param  __x  Element to be located.\n@@ -669,9 +669,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_find_tr(__k))\n \t{ return _M_h._M_find_tr(__k); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements.\n        *  @param  __x  Element to located.\n@@ -692,10 +692,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_count_tr(__k))\n \t{ return _M_h._M_count_tr(__k); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -710,10 +710,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __k) const\n \t-> decltype(_M_h._M_find_tr(__k), void(), true)\n \t{ return _M_h._M_find_tr(__k) != _M_h.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -745,7 +745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_equal_range_tr(__k))\n \t{ return _M_h._M_equal_range_tr(__k); }\n #endif\n-      //@}\n+      ///@}\n \n       // bucket interface.\n \n@@ -777,7 +777,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bucket(const key_type& __key) const\n       { return _M_h.bucket(__key); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to the first\n        *         bucket element.\n@@ -795,9 +795,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cbegin(size_type __n) const\n       { return _M_h.cbegin(__n); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to one past\n        *         the last bucket elements.\n@@ -815,7 +815,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cend(size_type __n) const\n       { return _M_h.cend(__n); }\n-      //@}\n+      ///@}\n \n       // hash policy.\n \n@@ -967,16 +967,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       // typedefs:\n-      //@{\n+      ///@{\n       /// Public typedefs.\n       typedef typename _Hashtable::key_type\tkey_type;\n       typedef typename _Hashtable::value_type\tvalue_type;\n       typedef typename _Hashtable::hasher\thasher;\n       typedef typename _Hashtable::key_equal\tkey_equal;\n       typedef typename _Hashtable::allocator_type allocator_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       ///  Iterator-related typedefs.\n       typedef typename _Hashtable::pointer\t\tpointer;\n       typedef typename _Hashtable::const_pointer\tconst_pointer;\n@@ -988,7 +988,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Hashtable::const_local_iterator\tconst_local_iterator;\n       typedef typename _Hashtable::size_type\t\tsize_type;\n       typedef typename _Hashtable::difference_type\tdifference_type;\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201402L\n       using node_type = typename _Hashtable::node_type;\n@@ -1176,7 +1176,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // iterators.\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %unordered_multiset.\n@@ -1188,9 +1188,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       begin() const noexcept\n       { return _M_h.begin(); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  Returns a read-only (constant) iterator that points one past the last\n        *  element in the %unordered_multiset.\n@@ -1202,7 +1202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_iterator\n       end() const noexcept\n       { return _M_h.end(); }\n-      //@}\n+      ///@}\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n@@ -1256,7 +1256,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{ return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Inserts an element into the %unordered_multiset.\n        *  @param  __x  Element to be inserted.\n@@ -1271,9 +1271,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(value_type&& __x)\n       { return _M_h.insert(std::move(__x)); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Inserts an element into the %unordered_multiset.\n        *  @param  __hint  An iterator that serves as a hint as to where the\n@@ -1297,7 +1297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(const_iterator __hint, value_type&& __x)\n       { return _M_h.insert(__hint, std::move(__x)); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief A template function that inserts a range of elements.\n@@ -1348,7 +1348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_h._M_reinsert_node_multi(__hint, std::move(__nh)); }\n #endif // C++17\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Erases an element from an %unordered_multiset.\n        *  @param  __position  An iterator pointing to the element to be erased.\n@@ -1371,7 +1371,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       erase(iterator __position)\n       { return _M_h.erase(__position); }\n-      //@}\n+      ///@}\n \n \n       /**\n@@ -1484,7 +1484,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // lookup.\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Tries to locate an element in an %unordered_multiset.\n        *  @param  __x  Element to be located.\n@@ -1519,9 +1519,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_find_tr(__x))\n \t{ return _M_h._M_find_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds the number of elements.\n        *  @param  __x  Element to located.\n@@ -1537,10 +1537,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcount(const _Kt& __x) const -> decltype(_M_h._M_count_tr(__x))\n \t{ return _M_h._M_count_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n #if __cplusplus > 201703L\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Finds whether an element with the given key exists.\n        *  @param  __x  Key of elements to be located.\n@@ -1555,10 +1555,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tcontains(const _Kt& __x) const\n \t-> decltype(_M_h._M_find_tr(__x), void(), true)\n \t{ return _M_h._M_find_tr(__x) != _M_h.end(); }\n-      //@}\n+      ///@}\n #endif\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n        *  @param  __x  Key to be located.\n@@ -1588,7 +1588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t-> decltype(_M_h._M_equal_range_tr(__x))\n \t{ return _M_h._M_equal_range_tr(__x); }\n #endif\n-      //@}\n+      ///@}\n \n       // bucket interface.\n \n@@ -1620,7 +1620,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bucket(const key_type& __key) const\n       { return _M_h.bucket(__key); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to the first\n        *         bucket element.\n@@ -1638,9 +1638,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cbegin(size_type __n) const\n       { return _M_h.cbegin(__n); }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Returns a read-only (constant) iterator pointing to one past\n        *         the last bucket elements.\n@@ -1658,7 +1658,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_local_iterator\n       cend(size_type __n) const\n       { return _M_h.cend(__n); }\n-      //@}\n+      ///@}\n \n       // hash policy.\n "}, {"sha": "486f10966a90fe55df7a4d584608e474f13d83cd", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -484,7 +484,7 @@ namespace decimal\n \n #define _GLIBCXX_USE_DECIMAL_ 1\n } // namespace decimal\n-  // @} group decimal\n+  /// @} group decimal\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "3bb3e8c4a0a3a1a6ed96f420708dfee251619e85", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -412,7 +412,7 @@ inline namespace fundamentals_v1\n \treturn std::move(*__p);\n       __throw_bad_any_cast();\n     }\n-  // @}\n+  /// @}\n \n   /// @cond undocumented\n   template<typename _Tp>\n@@ -479,7 +479,7 @@ inline namespace fundamentals_v1\n \treturn static_cast<_ValueType*>(__any_caster<_ValueType>(__any));\n       return nullptr;\n     }\n-  // @}\n+  /// @}\n \n   template<typename _Tp>\n     void\n@@ -555,7 +555,7 @@ inline namespace fundamentals_v1\n       _S_manage(_Op, const any*, _Arg*) { }\n     };\n \n-  // @} group any\n+  /// @} group any\n } // namespace fundamentals_v1\n } // namespace experimental\n "}, {"sha": "a282190eb8244ca1260c089ff1e68959c9541135", "filename": "libstdc++-v3/include/experimental/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -104,7 +104,7 @@ template <typename _Tp, size_t _Nm>\n     return experimental::__to_array(__a, make_index_sequence<_Nm>{});\n   }\n \n-  // @} group make_array\n+  /// @} group make_array\n } // namespace fundamentals_v2\n } // namespace experimental\n "}, {"sha": "320de3deab21dde29f44ea5c2cb64bcef3dbde8f", "filename": "libstdc++-v3/include/experimental/bits/fs_dir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -351,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n _GLIBCXX_END_NAMESPACE_CXX11\n \n-  // @} group filesystem-ts\n+  /// @} group filesystem-ts\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental"}, {"sha": "2b0655d2a69c356c3d7a8fee8611873414fa403a", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -279,7 +279,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   bool is_regular_file(file_status) noexcept;\n   bool is_symlink(file_status) noexcept;\n \n-  // @} group filesystem-ts\n+  /// @} group filesystem-ts\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental"}, {"sha": "95e216849e853a50cabb959f7a5ef5af6dab3a4c", "filename": "libstdc++-v3/include/experimental/bits/fs_ops.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -288,7 +288,7 @@ inline namespace v1\n   path temp_directory_path();\n   path temp_directory_path(error_code& __ec);\n \n-  // @} group filesystem-ts\n+  /// @} group filesystem-ts\n } // namespace v1\n } // namespace filesystem\n } // namespace experimental"}, {"sha": "2df2bba3dcd32a24420199996371aaced0173fd5", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1275,7 +1275,7 @@ namespace __detail\n     return _M_at_end == __rhs._M_at_end;\n   }\n \n-  // @} group filesystem-ts\n+  /// @} group filesystem-ts\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace v1\n } // namespace filesystem"}, {"sha": "945dcb54d9f994a5fd2f7ab69c1f4daa16e70abe", "filename": "libstdc++-v3/include/experimental/buffer", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -172,7 +172,7 @@ inline namespace v1\n     buffer_sequence_end(const _Cont& __c) -> decltype(__c.end())\n     { return __c.end(); }\n \n-  // @}\n+  /// @}\n \n \n   /** @brief buffer type traits\n@@ -250,7 +250,7 @@ inline namespace v1\n   template<typename _Tp>\n     constexpr bool is_dynamic_buffer_v = is_dynamic_buffer<_Tp>::value;\n \n-  // @}\n+  /// @}\n \n   /// buffer size\n   template<typename _ConstBufferSequence>\n@@ -727,7 +727,7 @@ inline namespace v1\n       return net::read(__stream, __b, __completion_condition, __ec);\n     }\n \n-  // @}\n+  /// @}\n \n   /** @brief asynchronous read operations\n    * @{\n@@ -775,7 +775,7 @@ inline namespace v1\n \t\t\t     std::forward<_CompletionToken>(__token));\n     }\n \n-  // @}\n+  /// @}\n \n #if 0\n   /** @brief synchronous write operations:\n@@ -811,7 +811,7 @@ inline namespace v1\n     size_t write(_SyncWriteStream& __stream, _DynamicBuffer&& __b,\n                  _CompletionCondition __completion_condition, error_code& __ec);\n \n-  // @}\n+  /// @}\n \n   /** @brief asynchronous write operations\n    * @{\n@@ -839,7 +839,7 @@ inline namespace v1\n                        _CompletionCondition __completion_condition,\n                        _CompletionToken&& __token);\n \n-  // @}\n+  /// @}\n \n   /** @brief synchronous delimited read operations\n    * @{\n@@ -856,7 +856,7 @@ inline namespace v1\n     size_t read_until(_SyncReadStream& __s, _DynamicBuffer&& __b,\n                       string_view __delim, error_code& __ec);\n \n-  // @}\n+  /// @}\n \n   /** @brief asynchronous delimited read operations\n    * @{\n@@ -871,7 +871,7 @@ inline namespace v1\n                           _DynamicBuffer&& __b, string_view __delim,\n                           _CompletionToken&& __token);\n \n-  // @}\n+  /// @}\n \n #endif\n   /// @}"}, {"sha": "c79e6d4b2b32382f325bcd5862f77610302a1244", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -126,7 +126,7 @@ namespace ip\n   struct v4_mapped_t {};\n   constexpr v4_mapped_t v4_mapped;\n \n-  // @}\n+  /// @}\n \n   /// An IPv4 address.\n   class address_v4\n@@ -541,7 +541,7 @@ namespace ip\n   operator>=(const address_v4& __a, const address_v4& __b) noexcept\n   { return !(__a < __b); }\n \n-  // @}\n+  /// @}\n \n   /** ip::address_v6 comparisons\n    * @{\n@@ -585,7 +585,7 @@ namespace ip\n   operator>=(const address_v6& __a, const address_v6& __b) noexcept\n   { return !(__a < __b); }\n \n-  // @}\n+  /// @}\n \n   /** ip::address comparisons\n    * @{\n@@ -623,7 +623,7 @@ namespace ip\n   operator>=(const address& __a, const address& __b) noexcept\n   { return !(__a < __b); }\n \n-  // @}\n+  /// @}\n \n   /** ip::address_v4 creation\n    * @{\n@@ -695,7 +695,7 @@ namespace ip\n   make_address_v4(string_view __str)\n   { return make_address_v4(__str, __throw_on_error{\"make_address_v4\"}); }\n \n-  // @}\n+  /// @}\n \n   /** ip::address_v6 creation\n    * @{\n@@ -867,7 +867,7 @@ namespace ip\n   make_address_v6(string_view __str)\n   { return make_address_v6(__str, __throw_on_error{\"make_address_v6\"}); }\n \n-  // @}\n+  /// @}\n \n   /** ip::address creation\n    * @{\n@@ -912,7 +912,7 @@ namespace ip\n   make_address(string_view __str)\n   { return make_address(__str, __throw_on_error{\"make_address\"}); }\n \n-  // @}\n+  /// @}\n \n   /// ip::address I/O\n   template<typename _CharT, typename _Traits>\n@@ -1093,7 +1093,7 @@ namespace ip\n \n   using address_v4_range = basic_address_range<address_v4>;\n \n-  // @}\n+  /// @}\n \n   /** An IPv6 address range.\n    * @{\n@@ -1134,7 +1134,7 @@ namespace ip\n \n   using address_v6_range = basic_address_range<address_v6>;\n \n-  // @}\n+  /// @}\n \n   bool\n   operator==(const network_v4& __a, const network_v4& __b) noexcept;\n@@ -1307,7 +1307,7 @@ namespace ip\n   operator!=(const network_v4& __a, const network_v4& __b) noexcept\n   { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /** ip::network_v6 comparisons\n    * @{\n@@ -1324,7 +1324,7 @@ namespace ip\n   operator!=(const network_v6& __a, const network_v6& __b) noexcept\n   { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /** ip::network_v4 creation\n    * @{\n@@ -1356,7 +1356,7 @@ namespace ip\n   make_network_v4(string_view __str)\n   { return make_network_v4(__str, __throw_on_error{\"make_network_v4\"}); }\n \n-  // @}\n+  /// @}\n \n   /** ip::network_v6 creation\n    * @{\n@@ -1384,7 +1384,7 @@ namespace ip\n   make_network_v6(string_view __str)\n   { return make_network_v6(__str, __throw_on_error{\"make_network_v6\"}); }\n \n-  // @}\n+  /// @}\n \n   /// ip::network_v4 I/O\n   template<typename _CharT, typename _Traits>\n@@ -1566,7 +1566,7 @@ namespace ip\n \t       const basic_endpoint<_InternetProtocol>& __b)\n     { return !(__a < __b); }\n \n-  // @}\n+  /// @}\n \n   /// basic_endpoint I/O\n   template<typename _CharT, typename _Traits, typename _InternetProtocol>\n@@ -1640,7 +1640,7 @@ namespace ip\n \t       const basic_resolver_entry<_InternetProtocol>& __b)\n     { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /** Base class defining flags for name/address resolution.\n    * @{\n@@ -1706,7 +1706,7 @@ namespace ip\n \n   // TODO define resolver_base::flags static constants for C++14 mode\n \n-  // @}\n+  /// @}\n \n   /** Container for results of name/address resolution.\n    * @{\n@@ -1788,7 +1788,7 @@ namespace ip\n \t       const basic_resolver_results<_InternetProtocol>& __b)\n     { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /// Perform name/address resolution.\n   template<typename _InternetProtocol>\n@@ -2071,7 +2071,7 @@ namespace ip\n   host_name()\n   { return host_name(std::allocator<char>{}, __throw_on_error{\"host_name\"}); }\n \n-  // @}\n+  /// @}\n \n   /// The TCP byte-stream protocol.\n   class tcp\n@@ -2126,7 +2126,7 @@ namespace ip\n   operator!=(const tcp& __a, const tcp& __b)\n   { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /// The UDP datagram protocol.\n   class udp\n@@ -2165,7 +2165,7 @@ namespace ip\n   operator!=(const udp& __a, const udp& __b)\n   { return !(__a == __b); }\n \n-  // @}\n+  /// @}\n \n   /// Restrict a socket created for an IPv6 protocol to IPv6 only.\n   struct v6_only : __sockopt_crtp<v6_only, bool>\n@@ -2395,7 +2395,7 @@ namespace ip\n \n   } // namespace multicast\n \n-  // @}\n+  /// @}\n \n } // namespace ip\n } // namespace v1"}, {"sha": "ae2418f0500c7fd87e0eec9ce27d357b8c12fa6d", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -910,8 +910,8 @@ inline namespace fundamentals_v1\n     make_optional(_Tp&& __t)\n     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n \n-  // @} relates experimental::optional\n-  // @} group optional\n+  /// @} relates experimental::optional\n+  /// @} group optional\n } // namespace fundamentals_v1\n } // namespace experimental\n "}, {"sha": "0d03c13c5e1871223a039f99462229a00cc97a68", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -422,7 +422,7 @@ inline namespace fundamentals_v2\n       return __pt._M_t;\n     }\n \n-  // @} group propagate_const\n+  /// @} group propagate_const\n } // namespace fundamentals_v2\n } // namespace experimental\n "}, {"sha": "a5a23ed3c0621debda34834be1552e0ad5c79245", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -2265,7 +2265,7 @@ inline namespace v1\n       protocol_type _M_protocol;\n     };\n \n-  // @}\n+  /// @}\n \n   /** @brief Socket streams\n    * @{\n@@ -2436,7 +2436,7 @@ inline namespace v1\n       __streambuf_type _M_sb;\n     };\n \n-  // @}\n+  /// @}\n \n   /** @brief synchronous connect operations\n    * @{\n@@ -2557,7 +2557,7 @@ inline namespace v1\n \t\t\t  __ec);\n     }\n \n-  // @}\n+  /// @}\n \n   /** @brief asynchronous connect operations\n    * @{\n@@ -2607,11 +2607,11 @@ inline namespace v1\n \t\t\t\tforward<_CompletionToken>(__token));\n     }\n \n-  // @}\n+  /// @}\n \n #endif  // _GLIBCXX_HAVE_UNISTD_H\n \n-  // @}\n+  /// @}\n \n } // namespace v1\n } // namespace net"}, {"sha": "959d6242711bd6c7464b8709b0ee4b7ca6dcd80b", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -516,7 +516,7 @@ namespace __gnu_pbds\n     swap(gp_hash_table& other)\n     { base_type::swap(other); }\n   };\n-  //@} hash-based\n+  ///@} hash-based\n #undef PB_DS_GP_HASH_BASE\n \n \n@@ -780,7 +780,7 @@ namespace __gnu_pbds\n     swap(trie& other)\n     { base_type::swap(other); }\n   };\n-  //@} branch-based\n+  ///@} branch-based\n #undef PB_DS_TRIE_BASE\n #undef PB_DS_TRIE_NODE_AND_IT_TRAITS\n \n@@ -852,10 +852,10 @@ namespace __gnu_pbds\n     swap(list_update& other)\n     { base_type::swap(other); }\n   };\n-  //@} list-based\n+  ///@} list-based\n #undef PB_DS_LU_BASE\n \n-  // @} group containers-pbds\n+  /// @} group containers-pbds\n } // namespace __gnu_pbds\n \n #endif"}, {"sha": "c2f69f9228d354da4825a773e4fe131f47b3c9bc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -107,7 +107,7 @@ namespace __gnu_pbds\n \t/// Dispatched type.\n \ttypedef thin_heap<_VTp, Cmp_Fn, _Alloc> \t\ttype;\n       };\n-    //@} group pbds\n+    ///@} group pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "5ea9d9366c56a1fd751cf9929335872b81b021c6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -96,7 +96,7 @@ namespace __gnu_pbds\n     public:\n       typedef typename tree_metadata_helper<__node_u, null_update>::type type;\n     };\n-    //@}\n+    ///@}\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "34c78de97e9d3fd1a4b6fd7cf6ba628458d6d05f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -96,7 +96,7 @@ namespace __gnu_pbds\n     public:\n       typedef typename trie_metadata_helper<__node_u, null_update>::type type;\n     };\n-    //@}\n+    ///@}\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "0e6b5965e044ca046f9485f4ba44ffcc9ceeb47a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -191,7 +191,7 @@ namespace __gnu_pbds\n \tstore_extra\t\t\t       \tm_store_extra_indicator;\n \tno_throw_indicator \t\t \tm_no_throw_copies_indicator;\n     };\n-    //@}\n+    ///@}\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "1ba950920e83b00eac1f72255f7eb7f0c8718de1", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -87,7 +87,7 @@ namespace __gnu_pbds\n   inline void\n   __throw_resize_error()\n   { _GLIBCXX_THROW_OR_ABORT(resize_error()); }\n-  //@}\n+  ///@}\n } // namespace __gnu_pbds\n \n #endif"}, {"sha": "8ff1784cad24bd408ff0a54c61fde8d81e7b254a", "filename": "libstdc++-v3/include/ext/pb_ds/priority_queue.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -152,5 +152,5 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n } // namespace __gnu_pbds\n- //@} heap-based\n+ ///@} heap-based\n #endif"}, {"sha": "651c9c004a141c797fd5ee0d2f53290e292354d1", "filename": "libstdc++-v3/include/ext/pb_ds/tag_and_trait.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -113,7 +113,7 @@ namespace __gnu_pbds\n    */\n   struct range_invalidation_guarantee : public point_invalidation_guarantee\n   { };\n-  //@}\n+  ///@}\n \n \n   /**\n@@ -184,8 +184,8 @@ namespace __gnu_pbds\n \n   /// Thin heap.\n   struct thin_heap_tag : public priority_queue_tag { };\n-  //@}\n-  //@}\n+  ///@}\n+  ///@}\n \n \n   /**\n@@ -438,7 +438,7 @@ namespace __gnu_pbds\n \treverse_iteration = base_type::reverse_iteration\n       };\n   };\n-  //@}\n+  ///@}\n \n \n   namespace detail\n@@ -448,7 +448,7 @@ namespace __gnu_pbds\n \t     typename Policy_Tl = null_type>\n       struct container_base_dispatch;\n   } // namespace detail\n-  //@}\n+  ///@}\n } // namespace __gnu_pbds\n \n #endif"}, {"sha": "3fd3d9d2711adcdf6a2b9a27e17afd0c4d766e06", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1043,7 +1043,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_ndy(result_type(0), __p.sigma())\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -1295,7 +1295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_gd(__p.mu(), __p.omega() / __p.mu())\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -1540,7 +1540,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_ud()\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -1801,7 +1801,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_gd2(__p.nu(), __p.mu() / __p.nu())\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -2040,7 +2040,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      +1.5707963267948966192313216916397514L)\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -3303,7 +3303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_param(__p)\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state.\n@@ -3709,7 +3709,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_param(__p), _M_uosd()\n       { }\n \n-      // @}\n+      /// @}\n \n       /**\n        * @brief Resets the distribution state."}, {"sha": "391e43339a09bd5cea018a1145c385f53fad96ea", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -488,7 +488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn static_cast<_ValueType>(std::move(*__p));\n       __throw_bad_any_cast();\n     }\n-  // @}\n+  /// @}\n \n   /// @cond undocumented\n   template<typename _Tp>\n@@ -547,7 +547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return static_cast<_ValueType*>(__any_caster<_ValueType>(__any));\n       return nullptr;\n     }\n-  // @}\n+  /// @}\n \n   template<typename _Tp>\n     void"}, {"sha": "a77edcb3bff64fe6534b52c898c5c9c7f7307f41", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1637,7 +1637,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif // C++2a\n \n-  // @} group atomics\n+  /// @} group atomics\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "be3bdd70b12be4b9cfb70a154734dc3dc966a42b", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -961,7 +961,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       // 23.3.5.2 bitset operations:\n-      //@{\n+      ///@{\n       /**\n        *  Operations on bitsets.\n        *  @param  __rhs  A same-sized bitset.\n@@ -988,9 +988,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_do_xor(__rhs);\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  Operations on bitsets.\n        *  @param  __position  The number of places to shift.\n@@ -1022,9 +1022,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  this->_M_do_reset();\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  These versions of single-bit set, reset, flip, and test are\n        *  extensions from the SGI version.  They do no range checking.\n@@ -1065,7 +1065,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))\n \t\t!= static_cast<_WordT>(0)); }\n-      //@}\n+      ///@}\n \n       // Set, reset, and flip.\n       /**\n@@ -1144,7 +1144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator~() const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this).flip(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Array-indexing support.\n        *  @param  __position  Index into the %bitset.\n@@ -1166,7 +1166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _GLIBCXX_CONSTEXPR bool\n       operator[](size_t __position) const\n       { return _Unchecked_test(__position); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Returns a numerical interpretation of the %bitset.\n@@ -1300,7 +1300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       size() const _GLIBCXX_NOEXCEPT\n       { return _Nb; }\n \n-      //@{\n+      ///@{\n       /// These comparisons for equality/inequality are, well, @e bitwise.\n       bool\n       operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n@@ -1311,7 +1311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_equal(__rhs); }\n #endif\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Tests the value of a bit.\n@@ -1352,7 +1352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       none() const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_any(); }\n \n-      //@{\n+      ///@{\n       /// Self-explanatory.\n       bitset<_Nb>\n       operator<<(size_t __position) const _GLIBCXX_NOEXCEPT\n@@ -1361,7 +1361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bitset<_Nb>\n       operator>>(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) >>= __position; }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Finds the index of the first \"on\" bit.\n@@ -1421,7 +1421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n   // 23.3.5.3 bitset operations:\n-  //@{\n+  ///@{\n   /**\n    *  @brief  Global bitwise operations on bitsets.\n    *  @param  __x  A bitset.\n@@ -1456,9 +1456,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __result ^= __y;\n       return __result;\n     }\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   /**\n    *  @brief Global I/O operators for bitsets.\n    *\n@@ -1548,7 +1548,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       __x._M_copy_to_string(__tmp, __ct.widen('0'), __ct.widen('1'));\n       return __os << __tmp;\n     }\n-  //@}\n+  ///@}\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std"}, {"sha": "4631a727d73f2500f61c30f929497954c8651b1d", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -165,7 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct common_type<chrono::time_point<_Clock, _Duration>>\n     { using type = chrono::time_point<_Clock, _Duration>; };\n \n-  // @} group chrono\n+  /// @} group chrono\n \n   namespace chrono\n   {\n@@ -1070,7 +1070,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n-    // @}\n+    /// @}\n \n     // Clocks.\n \n@@ -3130,7 +3130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n #endif // C++20\n \n-    // @}\n+    /// @}\n   } // namespace chrono\n \n #if __cplusplus > 201103L"}, {"sha": "c2f6421e0b7633084d1b19149031196d2edfca37", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -325,7 +325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // Operators:\n-  //@{\n+  ///@{\n   ///  Return new complex value @a x plus @a y.\n   template<typename _Tp>\n     inline _GLIBCXX20_CONSTEXPR complex<_Tp>\n@@ -353,9 +353,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r += __x;\n       return __r;\n     }\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   ///  Return new complex value @a x minus @a y.\n   template<typename _Tp>\n     inline _GLIBCXX20_CONSTEXPR complex<_Tp>\n@@ -383,9 +383,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r += __x;\n       return __r;\n     }\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   ///  Return new complex value @a x times @a y.\n   template<typename _Tp>\n     inline _GLIBCXX20_CONSTEXPR complex<_Tp>\n@@ -413,9 +413,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r *= __x;\n       return __r;\n     }\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   ///  Return new complex value @a x divided by @a y.\n   template<typename _Tp>\n     inline _GLIBCXX20_CONSTEXPR complex<_Tp>\n@@ -443,7 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __r /= __y;\n       return __r;\n     }\n-  //@}\n+  ///@}\n \n   ///  Return @a x.\n   template<typename _Tp>\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator-(const complex<_Tp>& __x)\n     { return complex<_Tp>(-__x.real(), -__x.imag()); }\n \n-  //@{\n+  ///@{\n   ///  Return true if @a x is equal to @a y.\n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR bool\n@@ -474,9 +474,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _GLIBCXX_CONSTEXPR bool\n     operator==(const _Tp& __x, const complex<_Tp>& __y)\n     { return __x == __y.real() && _Tp() == __y.imag(); }\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   ///  Return false if @a x is equal to @a y.\n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR bool\n@@ -493,7 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const _Tp& __x, const complex<_Tp>& __y)\n     { return __x != __y.real() || _Tp() != __y.imag(); }\n #endif\n-  //@}\n+  ///@}\n \n   ///  Extraction operator for complex values.\n   template<typename _Tp, typename _CharT, class _Traits>\n@@ -1552,7 +1552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif\n \n-  // @} group complex_numbers\n+  /// @} group complex_numbers\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "fb9b7d3f02752cdc5df15602b7e62d16f97eb110", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -442,7 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   } // end inline namespace\n \n-  // @} group condition_variables\n+  /// @} group condition_variables\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "30fab82a84591c8b88acb67a6c9517b639cb6b38", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool                      _M_reading;\n       bool                      _M_writing;\n \n-      //@{\n+      ///@{\n       /**\n        *  Necessary bits for putback buffer management.\n        *\n@@ -170,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       char_type*\t\t_M_pback_cur_save;\n       char_type*\t\t_M_pback_end_save;\n       bool\t\t\t_M_pback_init;\n-      //@}\n+      ///@}\n \n       // Cached codecvt facet.\n       const __codecvt_type* \t_M_codecvt;"}, {"sha": "ef15fefa53c3ca038914c4952aea2cbf7344be25", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1774,7 +1774,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // _GLIBCXX_ASYNC_ABI_COMPAT\n #endif // _GLIBCXX_HAS_GTHREADS\n \n-  // @} group futures\n+  /// @} group futures\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "119005d7569f8c7b25af2ebbec3aa8db811f376b", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -56,7 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  startup and termination. For more information, see the section of the\n    *  manual linked to above.\n   */\n-  //@{\n+  ///@{\n   extern istream cin;\t\t/// Linked to standard input\n   extern ostream cout;\t\t/// Linked to standard output\n   extern ostream cerr;\t\t/// Linked to standard error (unbuffered)\n@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern wostream wcerr;\t/// Linked to standard error (unbuffered)\n   extern wostream wclog;\t/// Linked to standard error (buffered)\n #endif\n-  //@}\n+  ///@}\n \n   // For construction of filebuffers for cout, cin, cerr, clog et. al.\n   static ios_base::Init __ioinit;"}, {"sha": "1e5ebe4e88cd7316b9b7f61d2c1db65024f89e8c", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -107,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       class sentry;\n       friend class sentry;\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Interface for manipulators.\n        *\n@@ -133,9 +133,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__pf(*this);\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @name Extractors\n        *\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  be rethrown if badbit is set in the exceptions mask.\n       */\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Integer arithmetic extractors\n        *  @param  __n A variable of builtin integral type.\n@@ -199,9 +199,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator>>(unsigned long long& __n)\n       { return _M_extract(__n); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Floating point arithmetic extractors\n        *  @param  __f A variable of builtin floating point type.\n@@ -221,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __istream_type&\n       operator>>(long double& __f)\n       { return _M_extract(__f); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Basic arithmetic extractors\n@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       __istream_type&\n       operator>>(__streambuf_type* __sb);\n-      //@}\n+      ///@}\n \n       // [27.6.1.3] unformatted input\n       /**\n@@ -269,7 +269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       gcount() const\n       { return _M_gcount; }\n \n-      //@{\n+      ///@{\n       /**\n        *  @name Unformatted Input Functions\n        *\n@@ -600,7 +600,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       __istream_type&\n       seekg(off_type, ios_base::seekdir);\n-      //@}\n+      ///@}\n \n     protected:\n       basic_istream()\n@@ -735,7 +735,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_ok; }\n     };\n \n-  //@{\n+  ///@{\n   /**\n    *  @brief  Character extractors\n    *  @param  __in  An input stream.\n@@ -760,7 +760,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n     { return (__in >> reinterpret_cast<char&>(__c)); }\n-  //@}\n+  ///@}\n \n \n   template<typename _CharT, typename _Traits>\n@@ -769,7 +769,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   void __istream_extract(istream&, char*, streamsize);\n \n-  //@{\n+  ///@{\n   /**\n    *  @brief  Character string extractors\n    *  @param  __in  An input stream.\n@@ -852,7 +852,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>>(basic_istream<char, _Traits>& __in, signed char (&__s)[_Num])\n     { return __in >> reinterpret_cast<char(&)[_Num]>(__s); }\n #endif\n-  //@}\n+  ///@}\n \n   /**\n    *  @brief  Template class basic_iostream"}, {"sha": "d4c5d13f65407aca5ce8aa938ea7131dc6b28662", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -884,7 +884,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif // _GLIBCXX_HAS_GTHREADS\n \n-  // @} group mutexes\n+  /// @} group mutexes\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "f36c1f96b2e5b42498605fb54b863948098f02f0", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -712,7 +712,7 @@ namespace __detail\n       return __result;\n     }\n \n-  // @} group numeric_ops\n+  /// @} group numeric_ops\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "a70221f251353911ba3b5eed943ac8cfb0ad4af4", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -96,7 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       class sentry;\n       friend class sentry;\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Interface for manipulators.\n        *\n@@ -132,9 +132,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__pf(*this);\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @name Inserters\n        *\n@@ -153,7 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  be rethrown.\n       */\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief Integer arithmetic inserters\n        *  @param  __n A variable of builtin integral type.\n@@ -205,9 +205,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator<<(unsigned long long __n)\n       { return _M_insert(__n); }\n #endif\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Floating point arithmetic inserters\n        *  @param  __f A variable of builtin floating point type.\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __ostream_type&\n       operator<<(long double __f)\n       { return _M_insert(__f); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Pointer arithmetic inserters\n@@ -274,9 +274,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       __ostream_type&\n       operator<<(__streambuf_type* __sb);\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @name Unformatted Output Functions\n        *\n@@ -339,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       __ostream_type&\n       write(const char_type* __s, streamsize __n);\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Synchronizing the stream buffer.\n@@ -485,7 +485,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_ok; }\n     };\n \n-  //@{\n+  ///@{\n   /**\n    *  @brief  Character inserters\n    *  @param  __out  An output stream.\n@@ -568,9 +568,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<wchar_t, _Traits>&, char32_t) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T\n #endif // C++20\n-  //@}\n+  ///@}\n \n-  //@{\n+  ///@{\n   /**\n    *  @brief  String inserters\n    *  @param  __out  An output stream.\n@@ -664,7 +664,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<wchar_t, _Traits>&, const char32_t*) = delete;\n #endif // _GLIBCXX_USE_WCHAR_T\n #endif // C++20\n-  //@}\n+  ///@}\n \n   // Standard basic_ostream manipulators\n "}, {"sha": "ceee7d00c1230d7cbd6e5d7f5b6b5bf15e062dc1", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -567,7 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   typedef ratio<         1000000000000000, 1> peta;\n   typedef ratio<      1000000000000000000, 1> exa;\n \n-  // @} group ratio\n+  /// @} group ratio\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "edf6dcd0a3e8d78c30682cde5d6f57b02f626ce5", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -851,7 +851,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(shared_lock<_Mutex>& __x, shared_lock<_Mutex>& __y) noexcept\n     { __x.swap(__y); }\n \n-  // @} group mutexes\n+  /// @} group mutexes\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "5432d9033511fdfb8f7432ca5c289e66fe9ca646", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -299,7 +299,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual ~underflow_error() _GLIBCXX_NOTHROW;\n   };\n \n-  // @} group exceptions\n+  /// @} group exceptions\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "e213104c4f426e9c91523c49b2a9b96d7002433b", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -122,7 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class basic_streambuf\n     {\n     public:\n-      //@{\n+      ///@{\n       /**\n        *  These are standard types.  They permit a standardized way of\n        *  referring to names of (or names dependent on) the template\n@@ -133,12 +133,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /// This is a non-standard type.\n       typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n-      //@}\n+      ///@}\n \n       friend class basic_ios<char_type, traits_type>;\n       friend class basic_istream<char_type, traits_type>;\n@@ -232,7 +232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_buf_locale; }\n \n       // [27.5.2.2.2] buffer management and positioning\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Entry points for derived buffer functions.\n        *\n@@ -274,7 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       int\n       pubsync() { return this->sync(); }\n-      //@}\n+      ///@}\n \n       // [27.5.2.2.3] get area\n       /**\n@@ -472,7 +472,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n       // [27.5.2.3.1] get area access\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Access to the get area.\n        *\n@@ -491,7 +491,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       char_type*\n       egptr() const { return _M_in_end; }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Moving the read position.\n@@ -519,7 +519,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // [27.5.2.3.2] put area access\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Access to the put area.\n        *\n@@ -538,7 +538,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       char_type*\n       epptr() const { return _M_out_end; }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Moving the write position."}, {"sha": "8c10a89ab46326f118714a8288715c9d01613f7d", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -263,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n-  // @}\n+  /// @}\n \n   error_condition make_error_condition(errc) noexcept;\n "}, {"sha": "66738e1f68e7520405f1898b519c40d9521d714f", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -297,7 +297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n #endif // __cpp_lib_jthread\n \n-  // @} group threads\n+  /// @} group threads\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "ad3e14ebe52c6d09c7a8603b7a49e8193b8c218d", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -595,7 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _M_data[__i];\n     }\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n@@ -1245,7 +1245,7 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n     { return std::__addressof(__va[0]) + __va.size(); }\n #endif // C++11\n \n-  // @} group numeric_arrays\n+  /// @} group numeric_arrays\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1ef9b9725e23b5d36bd9278c568fa6cf0f8cbb4d", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file variant\n- *  This is the <variant> C++ Library header.\n+ *  This is the `<variant>` C++ Library header.\n  */\n \n #ifndef _GLIBCXX_VARIANT"}, {"sha": "9f3d0f0354bb1a99a812a11600a38d74e5a2c112", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -1057,7 +1057,7 @@ namespace tr1\n \n #endif // __cplusplus < 201103L\n \n-  // @}\n+  /// @}\n \n #endif /* _GLIBCXX_USE_C99_MATH_TR1 */\n \n@@ -1618,7 +1618,7 @@ namespace tr1\n       return __detail::__sph_neumann<__type>(__n, __x);\n     }\n \n-  // @} tr1_math_spec_func\n+  /// @} tr1_math_spec_func\n \n } // namespace tr1\n \n@@ -1698,7 +1698,7 @@ namespace tr1\n       return __detail::__hyperg<__type>(__a, __b, __c, __x);\n     }\n \n-  // @} tr1_math_spec_func\n+  /// @} tr1_math_spec_func\n \n } // namespace tr1\n "}, {"sha": "1cc163ad4b4babf4851e0caa1a148eba2cc3fb63", "filename": "libstdc++-v3/include/tr1/regex", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -53,7 +53,7 @@ namespace tr1\n  * @defgroup tr1_regex Regular Expressions\n  * A facility for performing regular expression pattern matching.\n  */\n- //@{\n+ ///@{\n \n /** @namespace std::regex_constants\n  *  @brief ISO C++ 0x entities sub namespace for regex.\n@@ -63,7 +63,7 @@ namespace regex_constants\n   /**\n    * @name 5.1 Regular Expression Syntax Options\n    */\n-  //@{\n+  ///@{\n   enum __syntax_option\n     {\n       _S_icase,\n@@ -174,7 +174,7 @@ namespace regex_constants\n    */\n   static const syntax_option_type egrep      = 1 << _S_egrep;\n \n-  //@}\n+  ///@}\n \n   /**\n    * @name 5.2 Matching Rules\n@@ -185,7 +185,7 @@ namespace regex_constants\n    * below for any bitmask elements set.\n    *\n    */\n-  //@{\n+  ///@{\n \n   enum __match_flag\n     {\n@@ -315,12 +315,12 @@ namespace regex_constants\n    */\n   static const match_flag_type format_first_only = 1 << _S_first_only;\n \n-  //@}\n+  ///@}\n \n   /**\n    * @name 5.3 Error Types\n    */\n-  //@{\n+  ///@{\n  \n   enum error_type\n     {\n@@ -396,7 +396,7 @@ namespace regex_constants\n    */\n   static const error_type error_stack(_S_error_stack);\n \n-  //@}\n+  ///@}\n }\n \n   // [7.8] Class regex_error\n@@ -735,7 +735,7 @@ namespace regex_constants\n        * @name Constants\n        * tr1 [7.8.1] std [28.8.1]\n        */\n-      //@{\n+      ///@{\n       static const regex_constants::syntax_option_type icase\n         = regex_constants::icase;\n       static const regex_constants::syntax_option_type nosubs\n@@ -756,7 +756,7 @@ namespace regex_constants\n         = regex_constants::grep;\n       static const regex_constants::syntax_option_type egrep\n         = regex_constants::egrep;\n-      //@}\n+      ///@}\n \n       // [7.8.2] construct/copy/destroy\n       /**\n@@ -1787,7 +1787,7 @@ namespace regex_constants\n       /**\n        * @name 10.? Public Types\n        */\n-      //@{\n+      ///@{\n       typedef sub_match<_Bi_iter>                             value_type;\n       typedef typename _Base_type::const_reference            const_reference;\n       typedef const_reference                                 reference;\n@@ -1799,13 +1799,13 @@ namespace regex_constants\n       typedef _Allocator                                      allocator_type;\n       typedef typename iterator_traits<_Bi_iter>::value_type  char_type;\n       typedef basic_string<char_type>                         string_type;\n-      //@}\n+      ///@}\n   \n     public:\n       /**\n        * @name 10.1 Construction, Copying, and Destruction\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Constructs a default %match_results container.\n@@ -1841,12 +1841,12 @@ namespace regex_constants\n       ~match_results()\n       { }\n       \n-      //@}\n+      ///@}\n \n       /**\n        * @name 10.2 Size\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Gets the number of matches and submatches.\n@@ -1874,12 +1874,12 @@ namespace regex_constants\n       empty() const\n       { return size() == 0; }\n       \n-      //@}\n+      ///@}\n \n       /**\n        * @name 10.3 Element Access\n        */\n-      //@{\n+      ///@{\n \n       /**\n        * @brief Gets the length of the indicated submatch.\n@@ -1988,7 +1988,7 @@ namespace regex_constants\n       { return _Base_type::end(); }\n #endif\n \n-      //@}\n+      ///@}\n \n       /**\n        * @name 10.4 Formatting\n@@ -1998,7 +1998,7 @@ namespace regex_constants\n        * and escape sequences accepted by these functions are\n        * determined by their @p flags parameter as documented above.\n        */\n-       //@{\n+       ///@{\n \n       /**\n        * @todo Implement this function.\n@@ -2017,12 +2017,12 @@ namespace regex_constants\n \t     regex_constants::match_flag_type __flags\n \t     = regex_constants::format_default) const;\n \n-      //@} \n+      ///@}\n \n       /**\n        * @name 10.5 Allocator\n        */\n-      //@{ \n+      ///@{ \n \n       /**\n        * @brief Gets a copy of the allocator.\n@@ -2031,12 +2031,12 @@ namespace regex_constants\n       //get_allocator() const;\n       using _Base_type::get_allocator;\n       \n-      //@} \n+      ///@}\n \n       /**\n        * @name 10.6 Swap\n        */\n-       //@{ \n+       ///@{ \n \n       /**\n        * @brief Swaps the contents of two match_results.\n@@ -2049,7 +2049,7 @@ namespace regex_constants\n \tstd::swap(_M_prefix,  __that._M_prefix);\n \tstd::swap(_M_suffix,  __that._M_suffix);\n       }\n-      //@} \n+      ///@}\n       \n     private:\n       bool       _M_matched;\n@@ -2105,7 +2105,7 @@ namespace regex_constants\n   /**\n    * @name Matching, Searching, and Replacing\n    */\n-  //@{\n+  ///@{\n \n   /**\n    * @brief Determines if there is a match between the regular expression @p e\n@@ -2432,7 +2432,7 @@ namespace regex_constants\n       return __result;\n     }\n \n-  //@}\n+  ///@}\n \n   // tr1 [7.12.1] std [28.12] Class template regex_iterator\n   /**\n@@ -2718,7 +2718,7 @@ namespace regex_constants\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;\n #endif\n   \n-  //@}\n+  ///@}\n }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "d0c6352637862325d923efa41f3a3ef8e1ebd1a2", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -748,7 +748,7 @@ namespace tr2\n \t}\n \n       // 23.3.5.2 dynamic_bitset operations:\n-      //@{\n+      ///@{\n       /**\n        *  @brief  Operations on dynamic_bitsets.\n        *  @param  __rhs  A same-sized dynamic_bitset.\n@@ -789,9 +789,9 @@ namespace tr2\n \tthis->_M_do_dif(__rhs);\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Operations on dynamic_bitsets.\n        *  @param  __pos The number of places to shift.\n@@ -823,7 +823,7 @@ namespace tr2\n \t  this->_M_do_reset();\n \treturn *this;\n       }\n-      //@}\n+      ///@}\n \n       // Set, reset, and flip.\n       /**\n@@ -905,7 +905,7 @@ namespace tr2\n       operator~() const\n       { return dynamic_bitset<_WordT, _Alloc>(*this).flip(); }\n \n-      //@{\n+      ///@{\n       /**\n        *  @brief  Array-indexing support.\n        *  @param  __pos  Index into the %dynamic_bitset.\n@@ -921,7 +921,7 @@ namespace tr2\n       const_reference\n       operator[](size_type __pos) const\n       { return _M_unchecked_test(__pos); }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief Returns a numerical interpretation of the %dynamic_bitset.\n@@ -1052,7 +1052,7 @@ namespace tr2\n       none() const\n       { return !this->_M_is_any(); }\n \n-      //@{\n+      ///@{\n       /// Self-explanatory.\n       dynamic_bitset\n       operator<<(size_type __pos) const\n@@ -1061,7 +1061,7 @@ namespace tr2\n       dynamic_bitset\n       operator>>(size_type __pos) const\n       { return dynamic_bitset(*this) >>= __pos; }\n-      //@}\n+      ///@}\n \n       /**\n        *  @brief  Finds the index of the first \"on\" bit.\n@@ -1115,7 +1115,7 @@ namespace tr2\n       }\n \n \n-  //@{\n+  ///@{\n   /// These comparisons for equality/inequality are, well, @e bitwise.\n \n   template<typename _WordT, typename _Alloc>\n@@ -1141,10 +1141,10 @@ namespace tr2\n     operator>=(const dynamic_bitset<_WordT, _Alloc>& __lhs,\n \t       const dynamic_bitset<_WordT, _Alloc>& __rhs)\n     { return !(__lhs < __rhs); }\n-  //@}\n+  ///@}\n \n   // 23.3.5.3 bitset operations:\n-  //@{\n+  ///@{\n   /**\n    *  @brief  Global bitwise operations on bitsets.\n    *  @param  __x  A bitset.\n@@ -1192,7 +1192,7 @@ namespace tr2\n       __result -= __y;\n       return __result;\n     }\n-  //@}\n+  ///@}\n \n   /// Stream output operator for dynamic_bitset.\n   template <typename _CharT, typename _Traits,"}, {"sha": "e91da6a0549faa05c572fdc0ec884cfa92541abe", "filename": "libstdc++-v3/libsupc++/atomic_lockfree_defines.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -61,6 +61,6 @@\n #define ATOMIC_POINTER_LOCK_FREE\t__GCC_ATOMIC_POINTER_LOCK_FREE\n #endif\n \n-// @} group atomics\n+/// @} group atomics\n \n #endif"}, {"sha": "7c6d90ec525f8c7f1c7cb51af5fc9395464ef71d", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -111,7 +111,7 @@ namespace std\n   int uncaught_exceptions() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n #endif\n \n-  // @} group exceptions\n+  /// @} group exceptions\n } // namespace std\n \n namespace __gnu_cxx"}, {"sha": "373ce3fef57bd0d9291606472fbf20fc96b6e10c", "filename": "libstdc++-v3/libsupc++/exception.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -45,7 +45,7 @@ namespace std\n    * @defgroup exceptions Exceptions\n    * @ingroup diagnostics\n    *\n-   * Classes and functions for reporting errors via exception classes.\n+   * Classes and functions for reporting errors via exceptions.\n    * @{\n    */\n \n@@ -75,6 +75,8 @@ namespace std\n     what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n   };\n \n+  /// @}\n+\n } // namespace std\n \n }"}, {"sha": "f9dffd565bf2b1cc6fee8e06a9f2d2e4e4adcb93", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -263,7 +263,7 @@ namespace std\n \n #undef _GLIBCXX_EH_PTR_USED\n \n-  // @} group exceptions\n+  /// @} group exceptions\n } // namespace std\n \n } // extern \"C++\""}, {"sha": "cfcd3e74f87ac50ac80142b5c7c314820d7ba66c", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b883464c58cb2f3f521776e65008b1fa75f79e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=f0b883464c58cb2f3f521776e65008b1fa75f79e", "patch": "@@ -159,7 +159,7 @@ namespace std\n     rethrow_if_nested(const _Ex& __ex)\n     { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }\n \n-  // @} group exceptions\n+  /// @} group exceptions\n } // namespace std\n \n } // extern \"C++\""}]}