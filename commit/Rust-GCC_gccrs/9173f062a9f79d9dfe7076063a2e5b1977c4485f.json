{"sha": "9173f062a9f79d9dfe7076063a2e5b1977c4485f", "node_id": "C_kwDOANBUbNoAKDkxNzNmMDYyYTlmNzlkOWRmZTcwNzYwNjNhMmU1YjE5NzdjNDQ4NWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-04T17:31:49Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-04T17:41:44Z"}, "message": "Add support for key = value pairs on -frust-cfg=\n\nThis adds in a basic parser to parse out key value pairs for the config\noption it needs to be tested poperly once the self-test framework is\nmerged in.\n\nFixes #889", "tree": {"sha": "060eff210529bcc37d7b184eff04d9359e88db3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/060eff210529bcc37d7b184eff04d9359e88db3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9173f062a9f79d9dfe7076063a2e5b1977c4485f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9173f062a9f79d9dfe7076063a2e5b1977c4485f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9173f062a9f79d9dfe7076063a2e5b1977c4485f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9173f062a9f79d9dfe7076063a2e5b1977c4485f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83bfbf0746c87b641754697a3c8e9f7a7cb08aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bfbf0746c87b641754697a3c8e9f7a7cb08aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83bfbf0746c87b641754697a3c8e9f7a7cb08aa9"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "0150a487c68cebcf413aff7f48a0f87bd4291c29", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9173f062a9f79d9dfe7076063a2e5b1977c4485f/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9173f062a9f79d9dfe7076063a2e5b1977c4485f/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=9173f062a9f79d9dfe7076063a2e5b1977c4485f", "patch": "@@ -394,11 +394,92 @@ Session::handle_option (\n }\n \n bool\n-Session::handle_cfg_option (const std::string &value)\n+Session::handle_cfg_option (const std::string &input)\n {\n-  // rustc doesn't seem to error on any duplicate key\n-  // TODO handle feature=bla and relevant error handling in parsing\n-  options.target_data.insert_key (value);\n+  std::string key;\n+  std::string value;\n+\n+  enum pstate\n+  {\n+    KEY,\n+    EQ,\n+    VAL,\n+    DONE,\n+    ERROR\n+  };\n+\n+  // FIXME\n+  // we need to use the GCC self_test framework to unit-test this its\n+  // likely got a bunch of bugs. This simple parser could be extracted to a\n+  // helper function to be more easily unit-tested or it could be tested via\n+  // checking what the target_options contain\n+  bool expect_quote = false;\n+  pstate s = KEY;\n+  for (const auto &ch : input)\n+    {\n+      if (ch == ' ')\n+\t{\n+\t  if (!key.empty ())\n+\t    s = EQ;\n+\t  else if (!value.empty ())\n+\t    s = DONE;\n+\t  else\n+\t    {\n+\t      s = ERROR;\n+\t      break;\n+\t    }\n+\t}\n+      else if (ch == '\"')\n+\t{\n+\t  expect_quote = !expect_quote;\n+\t}\n+      else if (ch == '=')\n+\t{\n+\t  if (key.empty ())\n+\t    {\n+\t      s = ERROR;\n+\t      break;\n+\t    }\n+\n+\t  s = VAL;\n+\t}\n+      else\n+\t{\n+\t  if (s == KEY)\n+\t    key.push_back (ch);\n+\t  else if (s == VAL)\n+\t    value.push_back (ch);\n+\t  else\n+\t    {\n+\t      s = ERROR;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (key.empty () && value.empty ())\n+    s = ERROR;\n+\n+  if (expect_quote)\n+    s = ERROR;\n+\n+  if (s == ERROR)\n+    {\n+      rust_error_at (Location (),\n+\t\t     \"invalid --frust-cfg= option expected %<key%> or \"\n+\t\t     \"key=%<value%> got %<%s%>\",\n+\t\t     input.c_str ());\n+      return false;\n+    }\n+\n+  if (value.empty ())\n+    {\n+      // rustc does not seem to error on dup key\n+      options.target_data.insert_key (key);\n+      return true;\n+    }\n+\n+  options.target_data.insert_key_value_pair (key, value);\n   return true;\n }\n "}, {"sha": "927c4974ff62714bb7e94aa8cc271cc6b9a6b12d", "filename": "gcc/testsuite/rust/compile/cfg5.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9173f062a9f79d9dfe7076063a2e5b1977c4485f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9173f062a9f79d9dfe7076063a2e5b1977c4485f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs?ref=9173f062a9f79d9dfe7076063a2e5b1977c4485f", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w -frust-cfg=A=B\" }\n+struct Foo;\n+impl Foo {\n+    #[cfg(A = \"B\")]\n+    fn test(&self) {}\n+}\n+\n+fn main() {\n+    let a = Foo;\n+    a.test();\n+}"}]}