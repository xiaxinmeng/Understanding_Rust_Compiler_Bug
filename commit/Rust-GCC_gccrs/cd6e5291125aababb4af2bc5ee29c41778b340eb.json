{"sha": "cd6e5291125aababb4af2bc5ee29c41778b340eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2ZTUyOTExMjVhYWJhYmI0YWYyYmM1ZWUyOWM0MTc3OGIzNDBlYg==", "commit": {"author": {"name": "Lars Brinkhoff", "email": "lars@nocrew.org", "date": "2001-07-24T09:13:19Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2001-07-24T09:13:19Z"}, "message": "rtl.texi (REG_POINTER): Document.\n\n\t* rtl.texi (REG_POINTER): Document.\n\t(Machine Modes): Document BImode, OImode, PQImode, PHImode,\n\tQFmode, HFmode, TQFmode, QCmode, and HCmode.\n\nFrom-SVN: r44292", "tree": {"sha": "4dc47dd6a3309e0bc0a54c2e6fb713d541dc3eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dc47dd6a3309e0bc0a54c2e6fb713d541dc3eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd6e5291125aababb4af2bc5ee29c41778b340eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6e5291125aababb4af2bc5ee29c41778b340eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6e5291125aababb4af2bc5ee29c41778b340eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6e5291125aababb4af2bc5ee29c41778b340eb/comments", "author": {"login": "larsbrinkhoff", "id": 775050, "node_id": "MDQ6VXNlcjc3NTA1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/775050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsbrinkhoff", "html_url": "https://github.com/larsbrinkhoff", "followers_url": "https://api.github.com/users/larsbrinkhoff/followers", "following_url": "https://api.github.com/users/larsbrinkhoff/following{/other_user}", "gists_url": "https://api.github.com/users/larsbrinkhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsbrinkhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsbrinkhoff/subscriptions", "organizations_url": "https://api.github.com/users/larsbrinkhoff/orgs", "repos_url": "https://api.github.com/users/larsbrinkhoff/repos", "events_url": "https://api.github.com/users/larsbrinkhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/larsbrinkhoff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f54a8510be3f690e7d90c52d57f7d0a9dd8dca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f54a8510be3f690e7d90c52d57f7d0a9dd8dca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f54a8510be3f690e7d90c52d57f7d0a9dd8dca8"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "4c73c8dfc3e82fb4681f35dd23d76fa69e3ef849", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6e5291125aababb4af2bc5ee29c41778b340eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6e5291125aababb4af2bc5ee29c41778b340eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd6e5291125aababb4af2bc5ee29c41778b340eb", "patch": "@@ -1,3 +1,9 @@\n+2001-07-24  lars brinkhoff  <lars@nocrew.org>\n+\n+\t* rtl.texi (REG_POINTER): Document.\n+\t(Machine Modes): Document BImode, OImode, PQImode, PHImode,\n+\tQFmode, HFmode, TQFmode, QCmode, and HCmode.\n+\n Tue Jul 24 10:49:40 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* flow.c (delete_noop_moves): Do not confuse libcall regions."}, {"sha": "e10c7b8c005649b61b442c6ec834e272ec436a01", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6e5291125aababb4af2bc5ee29c41778b340eb/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6e5291125aababb4af2bc5ee29c41778b340eb/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=cd6e5291125aababb4af2bc5ee29c41778b340eb", "patch": "@@ -430,6 +430,14 @@ The same hard register may be used also for collecting the values of\n functions called by this one, but @code{REG_FUNCTION_VALUE_P} is zero\n in this kind of use.\n \n+@cindex @samp{/f} in RTL dump\n+@findex REG_POINTER\n+@cindex @code{reg} and @samp{/f}\n+@cindex @code{frame_related}, in @code{reg}\n+@item REG_POINTER (@var{x})\n+Nonzero in a @code{reg} if the register holds a pointer.  Stored in the\n+@code{frame_related} field and printed as @samp{/f}.\n+\n @findex SUBREG_PROMOTED_VAR_P\n @cindex @code{subreg} and @samp{/s}\n @cindex @code{in_struct}, in @code{subreg}\n@@ -747,13 +755,28 @@ this is the right mode to use for certain pointers.\n @item OImode\n ``Octa Integer'' (?) mode represents a thirty-two-byte integer.\n \n+@findex QFmode\n+@item QFmode\n+``Quarter-Floating'' mode represents a quarter-precision (single byte)\n+floating point number.\n+\n+@findex HFmode\n+@item HFmode\n+``Half-Floating'' mode represents a half-precision (two byte) floating\n+point number.\n+\n+@findex TQFmode\n+@item TQFmode\n+``Three-Quarter-Floating'' (?) mode represents a three-quarter-precision\n+(three byte) floating point number.\n+\n @findex SFmode\n @item SFmode\n ``Single Floating'' mode represents a four byte floating point number.\n In the common case, of a processor with IEEE arithmetic and 8-bit bytes,\n this is a single-precision IEEE floating point number; it can also be\n used for double-precision (on processors with 16-bit bytes) and\n-single-precision Vax types.\n+single-precision VAX and IBM types.\n \n @findex DFmode\n @item DFmode\n@@ -796,14 +819,17 @@ For example, RTL expressions of code @code{const_int} have mode\n requires.  In debugging dumps of RTL, @code{VOIDmode} is expressed by\n the absence of any mode.\n \n+@findex QCmode\n+@findex HCmode\n @findex SCmode\n @findex DCmode\n @findex XCmode\n @findex TCmode\n-@item SCmode, DCmode, XCmode, TCmode\n+@item QCmode, HCmode, SCmode, DCmode, XCmode, TCmode\n These modes stand for a complex number represented as a pair of floating\n-point values.  The floating point values are in @code{SFmode},\n-@code{DFmode}, @code{XFmode}, and @code{TFmode}, respectively.\n+point values.  The floating point values are in @code{QFmode},\n+@code{HFmode}, @code{SFmode}, @code{DFmode}, @code{XFmode}, and\n+@code{TFmode}, respectively.\n \n @findex CQImode\n @findex CHImode\n@@ -841,16 +867,19 @@ mode classes are:\n @table @code\n @findex MODE_INT\n @item MODE_INT\n-Integer modes.  By default these are @code{QImode}, @code{HImode},\n-@code{SImode}, @code{DImode}, and @code{TImode}.\n+Integer modes.  By default these are @code{BImode}, @code{QImode},\n+@code{HImode}, @code{SImode}, @code{DImode}, @code{TImode}, and\n+@code{OImode}.\n \n @findex MODE_PARTIAL_INT\n @item MODE_PARTIAL_INT\n-The ``partial integer'' modes, @code{PSImode} and @code{PDImode}.\n+The ``partial integer'' modes, @code{PQImode}, @code{PHImode},\n+@code{PSImode} and @code{PDImode}.\n \n @findex MODE_FLOAT\n @item MODE_FLOAT\n-floating point modes.  By default these are @code{SFmode}, @code{DFmode},\n+Floating point modes.  By default these are @code{QFmode},\n+@code{HFmode}, @code{TQFmode}, @code{SFmode}, @code{DFmode},\n @code{XFmode} and @code{TFmode}.\n \n @findex MODE_COMPLEX_INT\n@@ -859,8 +888,9 @@ Complex integer modes.  (These are not currently implemented).\n \n @findex MODE_COMPLEX_FLOAT\n @item MODE_COMPLEX_FLOAT\n-Complex floating point modes.  By default these are @code{SCmode},\n-@code{DCmode}, @code{XCmode}, and @code{TCmode}.\n+Complex floating point modes.  By default these are @code{QCmode},\n+@code{HCmode}, @code{SCmode}, @code{DCmode}, @code{XCmode}, and\n+@code{TCmode}.\n \n @findex MODE_FUNCTION\n @item MODE_FUNCTION"}]}