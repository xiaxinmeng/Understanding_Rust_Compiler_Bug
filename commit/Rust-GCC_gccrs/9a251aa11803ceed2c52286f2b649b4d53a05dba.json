{"sha": "9a251aa11803ceed2c52286f2b649b4d53a05dba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyNTFhYTExODAzY2VlZDJjNTIyODZmMmI2NDliNGQ1M2EwNWRiYQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-14T12:44:19Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-14T12:44:19Z"}, "message": "re PR fortran/32594 (substring simplification leads to ICE)\n\n\tPR fortran/32594\n\n\t* trans-expr.c (gfc_conv_substring_expr): Only call\n\tgfc_conv_substring if expr->ref is not NULL.\n\t* expr.c (gfc_is_constant_expr): If e->ref is NULL, the substring\n\texpression might be a constant.\n\t(gfc_simplify_expr): Handle missing start and end, as well as\n\tmissing ref.\n\n\t* gfortran.dg/substr_5.f90: New test.\n\nFrom-SVN: r127478", "tree": {"sha": "8db602af3b13c045381240aefc6106c915111741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8db602af3b13c045381240aefc6106c915111741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a251aa11803ceed2c52286f2b649b4d53a05dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a251aa11803ceed2c52286f2b649b4d53a05dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a251aa11803ceed2c52286f2b649b4d53a05dba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a251aa11803ceed2c52286f2b649b4d53a05dba/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef0c8d982bff201b518d99a900e7f7434ed33c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef0c8d982bff201b518d99a900e7f7434ed33c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef0c8d982bff201b518d99a900e7f7434ed33c9"}], "stats": {"total": 90, "additions": 80, "deletions": 10}, "files": [{"sha": "0801212a37c75515f662694ff83b66107c91818c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a251aa11803ceed2c52286f2b649b4d53a05dba", "patch": "@@ -1,3 +1,13 @@\n+2007-08-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32594\n+\t* trans-expr.c (gfc_conv_substring_expr): Only call\n+\tgfc_conv_substring if expr->ref is not NULL.\n+\t* expr.c (gfc_is_constant_expr): If e->ref is NULL, the substring\n+\texpression might be a constant.\n+\t(gfc_simplify_expr): Handle missing start and end, as well as\n+\tmissing ref.\n+\n 2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32926"}, {"sha": "f0de19fa48ca95232fd28bccf2817b2c5f13df51", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=9a251aa11803ceed2c52286f2b649b4d53a05dba", "patch": "@@ -766,8 +766,8 @@ gfc_is_constant_expr (gfc_expr *e)\n       break;\n \n     case EXPR_SUBSTRING:\n-      rv = (gfc_is_constant_expr (e->ref->u.ss.start)\n-\t    && gfc_is_constant_expr (e->ref->u.ss.end));\n+      rv = e->ref == NULL || (gfc_is_constant_expr (e->ref->u.ss.start)\n+\t\t\t      && gfc_is_constant_expr (e->ref->u.ss.end));\n       break;\n \n     case EXPR_STRUCTURE:\n@@ -1542,9 +1542,19 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t  char *s;\n \t  int start, end;\n \n-\t  gfc_extract_int (p->ref->u.ss.start, &start);\n-\t  start--;  /* Convert from one-based to zero-based.  */\n-\t  gfc_extract_int (p->ref->u.ss.end, &end);\n+\t  if (p->ref && p->ref->u.ss.start)\n+\t    {\n+\t      gfc_extract_int (p->ref->u.ss.start, &start);\n+\t      start--;  /* Convert from one-based to zero-based.  */\n+\t    }\n+\t  else\n+\t    start = 0;\n+\n+\t  if (p->ref && p->ref->u.ss.end)\n+\t    gfc_extract_int (p->ref->u.ss.end, &end);\n+\t  else\n+\t    end = p->value.character.length;\n+\n \t  s = gfc_getmem (end - start + 2);\n \t  memcpy (s, p->value.character.string + start, end - start);\n \t  s[end - start + 1] = '\\0';  /* TODO: C-style string.  */"}, {"sha": "02bd91d286095c200440457ae3b04cbac33044b3", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9a251aa11803ceed2c52286f2b649b4d53a05dba", "patch": "@@ -3243,14 +3243,15 @@ gfc_conv_substring_expr (gfc_se * se, gfc_expr * expr)\n \n   ref = expr->ref;\n \n-  gcc_assert (ref->type == REF_SUBSTRING);\n+  gcc_assert (ref == NULL || ref->type == REF_SUBSTRING);\n \n-  se->expr = gfc_build_string_const(expr->value.character.length,\n-                                    expr->value.character.string);\n+  se->expr = gfc_build_string_const (expr->value.character.length,\n+\t\t\t\t     expr->value.character.string);\n   se->string_length = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (se->expr)));\n-  TYPE_STRING_FLAG (TREE_TYPE (se->expr))=1;\n+  TYPE_STRING_FLAG (TREE_TYPE (se->expr)) = 1;\n \n-  gfc_conv_substring(se,ref,expr->ts.kind,NULL,&expr->where);\n+  if (ref)\n+    gfc_conv_substring (se, ref, expr->ts.kind, NULL, &expr->where);\n }\n \n "}, {"sha": "827f4c4941231484638f18842e792844d0b3a4e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a251aa11803ceed2c52286f2b649b4d53a05dba", "patch": "@@ -1,3 +1,8 @@\n+2007-08-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32594\n+\t* gfortran.dg/substr_5.f90: New test.\n+\n 2007-08-14  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR c/30428"}, {"sha": "fb409ead9522a0711a35437947d35b5df063f0f9", "filename": "gcc/testsuite/gfortran.dg/substr_5.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a251aa11803ceed2c52286f2b649b4d53a05dba/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_5.f90?ref=9a251aa11803ceed2c52286f2b649b4d53a05dba", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+  character(*), parameter  :: chrs = '-+.0123456789eEdD'\n+  character(*), parameter  :: expr = '-+.0123456789eEdD'\n+  integer :: i\n+\n+  if (index(chrs(:), expr) /= 1) call abort\n+  if (index(chrs(14:), expr) /= 0) call abort\n+  if (index(chrs(:12), expr) /= 0) call abort\n+  if (index(chrs, expr(:)) /= 1) call abort\n+  if (index(chrs, expr(1:)) /= 1) call abort\n+  if (index(chrs, expr(:1)) /= 1) call abort\n+\n+  if (foo(expr) /= 1) call abort\n+  if (foo(expr) /= 1) call abort\n+  if (foo(expr) /= 1) call abort\n+  if (foo(expr(:)) /= 1) call abort\n+  if (foo(expr(1:)) /= 1) call abort\n+  if (foo(expr(:1)) /= 1) call abort\n+\n+  call bar(expr)\n+\n+contains\n+  subroutine bar(expr)\n+    character(*), intent(in) :: expr\n+    character(*), parameter  :: chrs = '-+.0123456789eEdD'\n+    integer :: foo\n+\n+    if (index(chrs(:), expr) /= 1) call abort\n+    if (index(chrs(14:), expr) /= 0) call abort\n+    if (index(chrs(:12), expr) /= 0) call abort\n+    if (index(chrs, expr(:)) /= 1) call abort\n+    if (index(chrs, expr(1:)) /= 1) call abort\n+    if (index(chrs, expr(:1)) /= 1) call abort\n+  end subroutine bar\n+\n+  integer function foo(expr)\n+    character(*), intent(in) :: expr\n+    character(*), parameter  :: chrs = '-+.0123456789eEdD'\n+\n+    foo = index(chrs, expr)\n+  end function foo\n+\n+end"}]}