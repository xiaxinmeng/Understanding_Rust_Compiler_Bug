{"sha": "e003ca80ce8c49aa90640dd03e82d5d3068164d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwM2NhODBjZThjNDlhYTkwNjQwZGQwM2U4MmQ1ZDMwNjgxNjRkMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-24T10:03:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-24T10:03:16Z"}, "message": "dbxout.c (dbxout_type_fields): Use HOST_WIDE_INT_PRINT_DEC appropriately.\n\nd\n        * dbxout.c (dbxout_type_fields): Use HOST_WIDE_INT_PRINT_DEC\n        appropriately.\n        (dbxout_type_method_1, dbxout_type): Likewise.\n        (print_int_cst_octal, print_octal, dbxout_symbol): Likewise.\n        (dbxout_type): Fix check for when to print a type range in\n        octal vs decimal.\n\nFrom-SVN: r19402", "tree": {"sha": "bd05663d0562f87fb7c9b74d9c654f6f8600b3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd05663d0562f87fb7c9b74d9c654f6f8600b3e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e003ca80ce8c49aa90640dd03e82d5d3068164d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e003ca80ce8c49aa90640dd03e82d5d3068164d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e003ca80ce8c49aa90640dd03e82d5d3068164d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e003ca80ce8c49aa90640dd03e82d5d3068164d3/comments", "author": null, "committer": null, "parents": [{"sha": "442f40184cbd2031b28e39cbe4f533db58cb540d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442f40184cbd2031b28e39cbe4f533db58cb540d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442f40184cbd2031b28e39cbe4f533db58cb540d"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "79c1ba774642359eaa0029bc7629172dec6d3075", "filename": "gcc/dbxout.c", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e003ca80ce8c49aa90640dd03e82d5d3068164d3/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e003ca80ce8c49aa90640dd03e82d5d3068164d3/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e003ca80ce8c49aa90640dd03e82d5d3068164d3", "patch": "@@ -662,8 +662,10 @@ dbxout_type_fields (type)\n \t      dbxout_type (DECL_FCONTEXT (tem), 0, 0);\n \t      fprintf (asmfile, \":\");\n \t      dbxout_type (TREE_TYPE (tem), 0, 0);\n-\t      fprintf (asmfile, \",%d;\",\n+\t      fputc (',', asmfile);\n+\t      fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t       TREE_INT_CST_LOW (DECL_FIELD_BITPOS (tem)));\n+\t      fputc (';', asmfile);\n \t      continue;\n \t    }\n \n@@ -712,9 +714,13 @@ dbxout_type_fields (type)\n \t    }\n \t  else if (TREE_CODE (DECL_FIELD_BITPOS (tem)) == INTEGER_CST)\n \t    {\n-\t      fprintf (asmfile, \",%d,%d;\",\n-\t\t       TREE_INT_CST_LOW (DECL_FIELD_BITPOS (tem)),\n+\t      fputc (',', asmfile);\n+\t      fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n+\t\t       TREE_INT_CST_LOW (DECL_FIELD_BITPOS (tem)));\n+\t      fputc (',', asmfile);\n+\t      fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t       TREE_INT_CST_LOW (DECL_SIZE (tem)));\n+\t      fputc (';', asmfile);\n \t    }\n \t  CHARS (23);\n \t}\n@@ -759,8 +765,9 @@ dbxout_type_method_1 (decl, debug_name)\n \t - (debug_name - IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl))));\n   if (DECL_VINDEX (decl))\n     {\n-      fprintf (asmfile, \"%d;\",\n+      fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t       TREE_INT_CST_LOW (DECL_VINDEX (decl)));\n+      fputc (';', asmfile);\n       dbxout_type (DECL_CONTEXT (decl), 0, 0);\n       fprintf (asmfile, \";\");\n       CHARS (8);\n@@ -1128,9 +1135,12 @@ dbxout_type (type, full, show_arg_types)\n \t  dbxout_type_index (type);\n \t  fprintf (asmfile, \";0;127;\");\n \t}\n+      /* This used to check if the type's precision was more than\n+\t HOST_BITS_PER_WIDE_INT.  That is wrong since gdb uses a\n+\t long (it has no concept of HOST_BITS_PER_WIDE_INT).  */\n       else if (use_gnu_debug_info_extensions\n \t       && (TYPE_PRECISION (type) > TYPE_PRECISION (integer_type_node)\n-\t\t   || TYPE_PRECISION (type) > HOST_BITS_PER_WIDE_INT))\n+\t\t   || TYPE_PRECISION (type) > HOST_BITS_PER_LONG))\n \t{\n \t  /* This used to say `r1' and we used to take care\n \t     to make sure that `int' was type number 1.  */\n@@ -1152,14 +1162,20 @@ dbxout_type (type, full, show_arg_types)\n \t to make sure that `int' was type number 1.  */\n       fprintf (asmfile, \"r\");\n       dbxout_type_index (integer_type_node);\n-      fprintf (asmfile, \";%d;0;\", int_size_in_bytes (type));\n+      fputc (';', asmfile);\n+      fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, int_size_in_bytes (type));\n+      fputs (\";0;\", asmfile);\n       CHARS (13);\n       break;\n \n     case CHAR_TYPE:\n       if (use_gnu_debug_info_extensions)\n-\tfprintf (asmfile, \"@s%d;-20;\",\n-\t\t BITS_PER_UNIT * int_size_in_bytes (type));\n+\t{\n+\t  fputs (\"@s\", asmfile);\n+\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n+\t\t   BITS_PER_UNIT * int_size_in_bytes (type));\n+\t  fputs (\";-20;\", asmfile);\n+\t}\n       else\n \t{\n \t  /* Output the type `char' as a subrange of itself.\n@@ -1173,8 +1189,12 @@ dbxout_type (type, full, show_arg_types)\n \n     case BOOLEAN_TYPE:\n       if (use_gnu_debug_info_extensions)\n-\tfprintf (asmfile, \"@s%d;-16;\",\n-\t\t BITS_PER_UNIT * int_size_in_bytes (type));\n+\t{\n+\t  fputs (\"@s\", asmfile);\n+\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n+\t\t   BITS_PER_UNIT * int_size_in_bytes (type));\n+\t  fputs (\";-16;\", asmfile);\n+\t}\n       else /* Define as enumeral type (False, True) */\n \tfprintf (asmfile, \"eFalse:0,True:1,;\");\n       CHARS (17);\n@@ -1193,15 +1213,18 @@ dbxout_type (type, full, show_arg_types)\n \t{\n \t  fprintf (asmfile, \"r\");\n \t  dbxout_type_index (type);\n-\t  fprintf (asmfile, \";%d;0;\",\n+\t  fputc (';', asmfile);\n+\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t   int_size_in_bytes (TREE_TYPE (type)));\n+\t  fputs (\";0;\", asmfile);\n \t  CHARS (12);\t\t/* The number is probably incorrect here.  */\n \t}\n       else\n \t{\n \t  /* Output a complex integer type as a structure,\n \t     pending some other way to do it.  */\n-\t  fprintf (asmfile, \"s%d\", int_size_in_bytes (type));\n+\t  fputc ('s', asmfile);\n+\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, int_size_in_bytes (type));\n \n \t  fprintf (asmfile, \"real:\");\n \t  CHARS (10);\n@@ -1223,8 +1246,10 @@ dbxout_type (type, full, show_arg_types)\n       if (use_gnu_debug_info_extensions)\n \t{\n \t  have_used_extensions = 1;\n-\t  fprintf (asmfile, \"@s%d;\",\n+\t  fputs (\"@s\", asmfile);\n+\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t   BITS_PER_UNIT * int_size_in_bytes (type));\n+\t  fputc (';', asmfile);\n \t  /* Check if a bitstring type, which in Chill is\n \t     different from a [power]set.  */\n \t  if (TYPE_STRING_FLAG (type))\n@@ -1310,7 +1335,8 @@ dbxout_type (type, full, show_arg_types)\n \t  }\n \n \t/* Identify record or union, and print its size.  */\n-\tfprintf (asmfile, (TREE_CODE (type) == RECORD_TYPE) ? \"s%d\" : \"u%d\",\n+\tfputc (((TREE_CODE (type) == RECORD_TYPE) ? 's' : 'u'), asmfile);\n+\tfprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t int_size_in_bytes (type));\n \n \tif (use_gnu_debug_info_extensions)\n@@ -1334,8 +1360,9 @@ dbxout_type (type, full, show_arg_types)\n \t\tputc (TREE_VIA_PUBLIC (child) ? '2'\n \t\t      : '0',\n \t\t      asmfile);\n-\t\tfprintf (asmfile, \"%d,\",\n+\t\tfprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t\t TREE_INT_CST_LOW (BINFO_OFFSET (child)) * BITS_PER_UNIT);\n+\t\tfputc (',', asmfile);\n \t\tCHARS (15);\n \t\tdbxout_type (BINFO_TYPE (child), 0, 0);\n \t\tputc (';', asmfile);\n@@ -1347,9 +1374,13 @@ dbxout_type (type, full, show_arg_types)\n \t\tdbxout_type_name (BINFO_TYPE (child));\n \t\tputc (':', asmfile);\n \t\tdbxout_type (BINFO_TYPE (child), full, 0);\n-\t\tfprintf (asmfile, \",%d,%d;\",\n-\t\t\t TREE_INT_CST_LOW (BINFO_OFFSET (child)) * BITS_PER_UNIT,\n+\t\tfputc (',', asmfile);\n+\t\tfprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n+\t\t\t TREE_INT_CST_LOW (BINFO_OFFSET (child)) * BITS_PER_UNIT);\n+\t\tfputc (',', asmfile);\n+\t\tfprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n \t\t\t TREE_INT_CST_LOW (DECL_SIZE (TYPE_NAME (BINFO_TYPE (child)))) * BITS_PER_UNIT);\n+\t\tfputc (';', asmfile);\n \t\tCHARS (20);\n \t      }\n \t  }\n@@ -1418,12 +1449,12 @@ dbxout_type (type, full, show_arg_types)\n \t{\n \t  fprintf (asmfile, \"%s:\", IDENTIFIER_POINTER (TREE_PURPOSE (tem)));\n \t  if (TREE_INT_CST_HIGH (TREE_VALUE (tem)) == 0)\n-\t    fprintf (asmfile, \"%lu\",\n-\t\t     (unsigned long) TREE_INT_CST_LOW (TREE_VALUE (tem)));\n+\t    fprintf (asmfile, HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t     TREE_INT_CST_LOW (TREE_VALUE (tem)));\n \t  else if (TREE_INT_CST_HIGH (TREE_VALUE (tem)) == -1\n \t\t   && TREE_INT_CST_LOW (TREE_VALUE (tem)) < 0)\n-\t    fprintf (asmfile, \"%ld\",\n-\t\t     (long) TREE_INT_CST_LOW (TREE_VALUE (tem)));\n+\t    fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC,\n+\t\t     TREE_INT_CST_LOW (TREE_VALUE (tem)));\n \t  else\n \t    print_int_cst_octal (TREE_VALUE (tem));\n \t  fprintf (asmfile, \",\");\n@@ -1560,7 +1591,7 @@ print_int_cst_octal (c)\n \t\t  << (HOST_BITS_PER_WIDE_INT / 3 * 3))\n \t\t - 1);\n \n-      fprintf (asmfile, \"%o%01o\", beg, middle);\n+      fprintf (asmfile, \"%o%01o\", (int)beg, (int)middle);\n       print_octal (end, HOST_BITS_PER_WIDE_INT / 3);\n     }\n }\n@@ -1573,7 +1604,7 @@ print_octal (value, digits)\n   int i;\n \n   for (i = digits - 1; i >= 0; i--)\n-    fprintf (asmfile, \"%01o\", ((value >> (3 * i)) & 7));\n+    fprintf (asmfile, \"%01o\", (int)((value >> (3 * i)) & 7));\n }\n \n /* Output the name of type TYPE, with no punctuation.\n@@ -1853,8 +1884,10 @@ dbxout_symbol (decl, local)\n #ifdef DBX_OUTPUT_CONSTANT_SYMBOL\n \t\t  DBX_OUTPUT_CONSTANT_SYMBOL (asmfile, name, ival);\n #else\n-\t\t  fprintf (asmfile, \"%s \\\"%s:c=i%d\\\",0x%x,0,0,0\\n\",\n-\t\t\t   ASM_STABS_OP, name, ival, N_LSYM);\n+\t\t  fprintf (asmfile, \"%s \\\"%s:c=i\", ASM_STABS_OP, name);\n+\n+\t\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, ival);\n+\t\t  fprintf (asmfile, \"\\\",0x%x,0,0,0\\n\", N_LSYM);\n #endif\n \t\t  return;\n \t\t}"}]}