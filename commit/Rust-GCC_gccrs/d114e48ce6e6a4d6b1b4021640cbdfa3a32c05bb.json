{"sha": "d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "node_id": "C_kwDOANBUbNoAKGQxMTRlNDhjZTZlNmE0ZDZiMWI0MDIxNjQwY2JkZmEzYTMyYzA1YmI", "commit": {"author": {"name": "Sebastien Lacoste", "email": "dev@graphman.fr", "date": "2022-06-23T11:28:51Z"}, "committer": {"name": "Sebastien Lacoste", "email": "dev@graphman.fr", "date": "2022-06-23T11:28:51Z"}, "message": "Add location to HIR::Type base class and remove from subclasses\n\nFixes #1256\n\nSigned-off-by: Sebastien Lacoste <dev@graphman.fr>", "tree": {"sha": "ba4b975cfec834c5bda7a9f35aa05a210a19c491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba4b975cfec834c5bda7a9f35aa05a210a19c491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/comments", "author": {"login": "graphman65", "id": 1569161, "node_id": "MDQ6VXNlcjE1NjkxNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1569161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graphman65", "html_url": "https://github.com/graphman65", "followers_url": "https://api.github.com/users/graphman65/followers", "following_url": "https://api.github.com/users/graphman65/following{/other_user}", "gists_url": "https://api.github.com/users/graphman65/gists{/gist_id}", "starred_url": "https://api.github.com/users/graphman65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graphman65/subscriptions", "organizations_url": "https://api.github.com/users/graphman65/orgs", "repos_url": "https://api.github.com/users/graphman65/repos", "events_url": "https://api.github.com/users/graphman65/events{/privacy}", "received_events_url": "https://api.github.com/users/graphman65/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graphman65", "id": 1569161, "node_id": "MDQ6VXNlcjE1NjkxNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1569161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graphman65", "html_url": "https://github.com/graphman65", "followers_url": "https://api.github.com/users/graphman65/followers", "following_url": "https://api.github.com/users/graphman65/following{/other_user}", "gists_url": "https://api.github.com/users/graphman65/gists{/gist_id}", "starred_url": "https://api.github.com/users/graphman65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graphman65/subscriptions", "organizations_url": "https://api.github.com/users/graphman65/orgs", "repos_url": "https://api.github.com/users/graphman65/repos", "events_url": "https://api.github.com/users/graphman65/events{/privacy}", "received_events_url": "https://api.github.com/users/graphman65/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f11672d760513256997f325da678016d13f677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f11672d760513256997f325da678016d13f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f11672d760513256997f325da678016d13f677"}], "stats": {"total": 174, "additions": 62, "deletions": 112}, "files": [{"sha": "637b8a5960bc4c17ceb91fe5caaa5a9faf944a68", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "patch": "@@ -623,7 +623,6 @@ class TypePath : public TypeNoBounds\n public:\n   bool has_opening_scope_resolution;\n   std::vector<std::unique_ptr<TypePathSegment> > segments;\n-  Location locus;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -660,16 +659,15 @@ class TypePath : public TypeNoBounds\n   TypePath (Analysis::NodeMapping mappings,\n \t    std::vector<std::unique_ptr<TypePathSegment> > segments,\n \t    Location locus, bool has_opening_scope_resolution = false)\n-    : TypeNoBounds (mappings),\n+    : TypeNoBounds (mappings, locus),\n       has_opening_scope_resolution (has_opening_scope_resolution),\n-      segments (std::move (segments)), locus (locus)\n+      segments (std::move (segments))\n   {}\n \n   // Copy constructor with vector clone\n   TypePath (TypePath const &other)\n-    : TypeNoBounds (other.mappings),\n-      has_opening_scope_resolution (other.has_opening_scope_resolution),\n-      locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus),\n+      has_opening_scope_resolution (other.has_opening_scope_resolution)\n   {\n     segments.reserve (other.segments.size ());\n     for (const auto &e : other.segments)\n@@ -703,8 +701,6 @@ class TypePath : public TypeNoBounds\n   // Creates a trait bound with a clone of this type path as its only element.\n   TraitBound *to_trait_bound (bool in_parens) const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n@@ -865,7 +861,6 @@ class QualifiedPathInType : public TypeNoBounds\n   QualifiedPathType path_type;\n   std::unique_ptr<TypePathSegment> associated_segment;\n   std::vector<std::unique_ptr<TypePathSegment> > segments;\n-  Location locus;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -888,18 +883,17 @@ class QualifiedPathInType : public TypeNoBounds\n     std::unique_ptr<TypePathSegment> associated_segment,\n     std::vector<std::unique_ptr<TypePathSegment> > path_segments,\n     Location locus = Location ())\n-    : TypeNoBounds (mappings), path_type (std::move (qual_path_type)),\n+    : TypeNoBounds (mappings, locus), path_type (std::move (qual_path_type)),\n       associated_segment (std::move (associated_segment)),\n-      segments (std::move (path_segments)), locus (locus)\n+      segments (std::move (path_segments))\n   {}\n \n   /* TODO: maybe make a shortcut constructor that has QualifiedPathType elements\n    * as params */\n \n   // Copy constructor with vector clone\n   QualifiedPathInType (QualifiedPathInType const &other)\n-    : TypeNoBounds (other.mappings), path_type (other.path_type),\n-      locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus), path_type (other.path_type)\n   {\n     segments.reserve (other.segments.size ());\n     for (const auto &e : other.segments)\n@@ -943,8 +937,6 @@ class QualifiedPathInType : public TypeNoBounds\n   {\n     return segments;\n   }\n-\n-  Location get_locus () { return locus; }\n };\n \n class SimplePathSegment"}, {"sha": "0d2e7436acc3a5b9140da750afccbdf7ec44aead", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 47, "deletions": 93, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "patch": "@@ -87,9 +87,7 @@ class ImplTraitType : public Type\n {\n   // TypeParamBounds type_param_bounds;\n   // inlined form\n-  std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds;\n-\n-  Location locus;\n+  std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -100,17 +98,15 @@ class ImplTraitType : public Type\n   }\n \n public:\n-  ImplTraitType (\n-    Analysis::NodeMapping mappings,\n-    std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n-    Location locus)\n-    : Type (mappings), type_param_bounds (std::move (type_param_bounds)),\n-      locus (locus)\n+  ImplTraitType (Analysis::NodeMapping mappings,\n+\t\t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n+\t\t Location locus)\n+    : Type (mappings, locus), type_param_bounds (std::move (type_param_bounds))\n   {}\n \n   // copy constructor with vector clone\n   ImplTraitType (ImplTraitType const &other)\n-    : Type (other.mappings), locus (other.locus)\n+    : Type (other.mappings, other.locus)\n   {\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n@@ -136,8 +132,6 @@ class ImplTraitType : public Type\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n };\n@@ -146,8 +140,7 @@ class ImplTraitType : public Type\n class TraitObjectType : public Type\n {\n   bool has_dyn;\n-  std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds;\n-  Location locus;\n+  std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -160,15 +153,15 @@ class TraitObjectType : public Type\n public:\n   TraitObjectType (\n     Analysis::NodeMapping mappings,\n-    std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n+    std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n     Location locus, bool is_dyn_dispatch)\n-    : Type (mappings), has_dyn (is_dyn_dispatch),\n-      type_param_bounds (std::move (type_param_bounds)), locus (locus)\n+    : Type (mappings, locus), has_dyn (is_dyn_dispatch),\n+      type_param_bounds (std::move (type_param_bounds))\n   {}\n \n   // copy constructor with vector clone\n   TraitObjectType (TraitObjectType const &other)\n-    : Type (other.mappings), has_dyn (other.has_dyn), locus (other.locus)\n+    : Type (other.mappings, other.locus), has_dyn (other.has_dyn)\n   {\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n@@ -194,17 +187,15 @@ class TraitObjectType : public Type\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n+  std::vector<std::unique_ptr<TypeParamBound>> &get_type_param_bounds ()\n   {\n     return type_param_bounds;\n   }\n \n-  const std::vector<std::unique_ptr<TypeParamBound> > &\n+  const std::vector<std::unique_ptr<TypeParamBound>> &\n   get_type_param_bounds () const\n   {\n     return type_param_bounds;\n@@ -215,7 +206,6 @@ class TraitObjectType : public Type\n class ParenthesisedType : public TypeNoBounds\n {\n   std::unique_ptr<Type> type_in_parens;\n-  Location locus;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -236,15 +226,15 @@ class ParenthesisedType : public TypeNoBounds\n   // Constructor uses Type pointer for polymorphism\n   ParenthesisedType (Analysis::NodeMapping mappings,\n \t\t     std::unique_ptr<Type> type_inside_parens, Location locus)\n-    : TypeNoBounds (mappings), type_in_parens (std::move (type_inside_parens)),\n-      locus (locus)\n+    : TypeNoBounds (mappings, locus),\n+      type_in_parens (std::move (type_inside_parens))\n   {}\n \n   /* Copy constructor uses custom deep copy method for type to preserve\n    * polymorphism */\n   ParenthesisedType (ParenthesisedType const &other)\n-    : TypeNoBounds (other.mappings),\n-      type_in_parens (other.type_in_parens->clone_type ()), locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus),\n+      type_in_parens (other.type_in_parens->clone_type ())\n   {}\n \n   // overload assignment operator to use custom clone method\n@@ -274,8 +264,6 @@ class ParenthesisedType : public TypeNoBounds\n     return type_in_parens->to_trait_bound (true);\n   }\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n };\n@@ -285,8 +273,6 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n {\n   TraitBound trait_bound;\n \n-  Location locus;\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -305,14 +291,11 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n public:\n   ImplTraitTypeOneBound (Analysis::NodeMapping mappings, TraitBound trait_bound,\n \t\t\t Location locus)\n-    : TypeNoBounds (mappings), trait_bound (std::move (trait_bound)),\n-      locus (locus)\n+    : TypeNoBounds (mappings, locus), trait_bound (std::move (trait_bound))\n   {}\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n };\n@@ -323,21 +306,20 @@ class TypePath; // definition moved to \"rust-path.h\"\n  * specific order */\n class TupleType : public TypeNoBounds\n {\n-  std::vector<std::unique_ptr<Type> > elems;\n-  Location locus;\n+  std::vector<std::unique_ptr<Type>> elems;\n \n public:\n   // Returns whether the tuple type is the unit type, i.e. has no elements.\n   bool is_unit_type () const { return elems.empty (); }\n \n   TupleType (Analysis::NodeMapping mappings,\n-\t     std::vector<std::unique_ptr<Type> > elems, Location locus)\n-    : TypeNoBounds (mappings), elems (std::move (elems)), locus (locus)\n+\t     std::vector<std::unique_ptr<Type>> elems, Location locus)\n+    : TypeNoBounds (mappings, locus), elems (std::move (elems))\n   {}\n \n   // copy constructor with vector clone\n   TupleType (TupleType const &other)\n-    : TypeNoBounds (other.mappings), locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus)\n   {\n     mappings = other.mappings;\n     elems.reserve (other.elems.size ());\n@@ -363,16 +345,11 @@ class TupleType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<Type> > &get_elems () { return elems; }\n-  const std::vector<std::unique_ptr<Type> > &get_elems () const\n-  {\n-    return elems;\n-  }\n+  std::vector<std::unique_ptr<Type>> &get_elems () { return elems; }\n+  const std::vector<std::unique_ptr<Type>> &get_elems () const { return elems; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -392,8 +369,6 @@ class TupleType : public TypeNoBounds\n  * Represented as \"!\". */\n class NeverType : public TypeNoBounds\n {\n-  Location locus;\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -408,13 +383,11 @@ class NeverType : public TypeNoBounds\n \n public:\n   NeverType (Analysis::NodeMapping mappings, Location locus)\n-    : TypeNoBounds (mappings), locus (locus)\n+    : TypeNoBounds (mappings, locus)\n   {}\n \n   std::string as_string () const override { return \"! (never type)\"; }\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n };\n@@ -425,19 +398,18 @@ class RawPointerType : public TypeNoBounds\n private:\n   Mutability mut;\n   std::unique_ptr<Type> type;\n-  Location locus;\n \n public:\n   // Constructor requires pointer for polymorphism reasons\n   RawPointerType (Analysis::NodeMapping mappings, Mutability mut,\n \t\t  std::unique_ptr<Type> type, Location locus)\n-    : TypeNoBounds (mappings), mut (mut), type (std::move (type)), locus (locus)\n+    : TypeNoBounds (mappings, locus), mut (mut), type (std::move (type))\n   {}\n \n   // Copy constructor calls custom polymorphic clone function\n   RawPointerType (RawPointerType const &other)\n-    : TypeNoBounds (other.mappings), mut (other.mut),\n-      type (other.type->clone_type ()), locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus), mut (other.mut),\n+      type (other.type->clone_type ())\n   {}\n \n   // overload assignment operator to use custom clone method\n@@ -456,8 +428,6 @@ class RawPointerType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n@@ -495,7 +465,6 @@ class ReferenceType : public TypeNoBounds\n \n   Mutability mut;\n   std::unique_ptr<Type> type;\n-  Location locus;\n \n public:\n   // Returns whether the reference is mutable or immutable.\n@@ -508,14 +477,14 @@ class ReferenceType : public TypeNoBounds\n   ReferenceType (Analysis::NodeMapping mappings, Mutability mut,\n \t\t std::unique_ptr<Type> type_no_bounds, Location locus,\n \t\t Lifetime lifetime)\n-    : TypeNoBounds (mappings), lifetime (std::move (lifetime)), mut (mut),\n-      type (std::move (type_no_bounds)), locus (locus)\n+    : TypeNoBounds (mappings, locus), lifetime (std::move (lifetime)),\n+      mut (mut), type (std::move (type_no_bounds))\n   {}\n \n   // Copy constructor with custom clone method\n   ReferenceType (ReferenceType const &other)\n-    : TypeNoBounds (other.mappings), lifetime (other.lifetime), mut (other.mut),\n-      type (other.type->clone_type ()), locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus), lifetime (other.lifetime),\n+      mut (other.mut), type (other.type->clone_type ())\n   {}\n \n   // Operator overload assignment operator to custom clone the unique pointer\n@@ -536,8 +505,6 @@ class ReferenceType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n@@ -568,20 +535,20 @@ class ArrayType : public TypeNoBounds\n {\n   std::unique_ptr<Type> elem_type;\n   std::unique_ptr<Expr> size;\n-  Location locus;\n \n public:\n   // Constructor requires pointers for polymorphism\n   ArrayType (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n \t     std::unique_ptr<Expr> array_size, Location locus)\n-    : TypeNoBounds (mappings), elem_type (std::move (type)),\n-      size (std::move (array_size)), locus (locus)\n+    : TypeNoBounds (mappings, locus), elem_type (std::move (type)),\n+      size (std::move (array_size))\n   {}\n \n   // Copy constructor requires deep copies of both unique pointers\n   ArrayType (ArrayType const &other)\n-    : TypeNoBounds (other.mappings), elem_type (other.elem_type->clone_type ()),\n-      size (other.size->clone_expr ()), locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus),\n+      elem_type (other.elem_type->clone_type ()),\n+      size (other.size->clone_expr ())\n   {}\n \n   // Overload assignment operator to deep copy pointers\n@@ -600,17 +567,13 @@ class ArrayType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n   Type *get_element_type () { return elem_type.get (); }\n \n   Expr *get_size_expr () { return size.get (); }\n \n-  Location &get_locus () { return locus; }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -629,19 +592,18 @@ class ArrayType : public TypeNoBounds\n class SliceType : public TypeNoBounds\n {\n   std::unique_ptr<Type> elem_type;\n-  Location locus;\n \n public:\n   // Constructor requires pointer for polymorphism\n   SliceType (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n \t     Location locus)\n-    : TypeNoBounds (mappings), elem_type (std::move (type)), locus (locus)\n+    : TypeNoBounds (mappings, locus), elem_type (std::move (type))\n   {}\n \n   // Copy constructor requires deep copy of Type smart pointer\n   SliceType (SliceType const &other)\n-    : TypeNoBounds (other.mappings), elem_type (other.elem_type->clone_type ()),\n-      locus (other.locus)\n+    : TypeNoBounds (other.mappings, other.locus),\n+      elem_type (other.elem_type->clone_type ())\n   {}\n \n   // Overload assignment operator to deep copy\n@@ -660,8 +622,6 @@ class SliceType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n@@ -684,8 +644,6 @@ class SliceType : public TypeNoBounds\n  * pattern) */\n class InferredType : public TypeNoBounds\n {\n-  Location locus;\n-\n   // e.g. Vec<_> = whatever\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -704,13 +662,11 @@ class InferredType : public TypeNoBounds\n \n public:\n   InferredType (Analysis::NodeMapping mappings, Location locus)\n-    : TypeNoBounds (mappings), locus (locus)\n+    : TypeNoBounds (mappings, locus)\n   {}\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n };\n@@ -804,8 +760,6 @@ class BareFunctionType : public TypeNoBounds\n \n   std::unique_ptr<Type> return_type; // inlined version\n \n-  Location locus;\n-\n public:\n   // Whether a return type is defined with the function.\n   bool has_return_type () const { return return_type != nullptr; }\n@@ -818,18 +772,20 @@ class BareFunctionType : public TypeNoBounds\n \t\t    FunctionQualifiers qualifiers,\n \t\t    std::vector<MaybeNamedParam> named_params, bool is_variadic,\n \t\t    std::unique_ptr<Type> type, Location locus)\n-    : TypeNoBounds (mappings), for_lifetimes (std::move (lifetime_params)),\n+    : TypeNoBounds (mappings, locus),\n+      for_lifetimes (std::move (lifetime_params)),\n       function_qualifiers (std::move (qualifiers)),\n       params (std::move (named_params)), is_variadic (is_variadic),\n-      return_type (std::move (type)), locus (locus)\n+      return_type (std::move (type))\n   {}\n \n   // Copy constructor with clone\n   BareFunctionType (BareFunctionType const &other)\n-    : TypeNoBounds (other.mappings), for_lifetimes (other.for_lifetimes),\n+    : TypeNoBounds (other.mappings, other.locus),\n+      for_lifetimes (other.for_lifetimes),\n       function_qualifiers (other.function_qualifiers), params (other.params),\n       is_variadic (other.is_variadic),\n-      return_type (other.return_type->clone_type ()), locus (other.locus)\n+      return_type (other.return_type->clone_type ())\n   {}\n \n   // Overload assignment operator to deep copy\n@@ -852,8 +808,6 @@ class BareFunctionType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n "}, {"sha": "c0a81e909d44874d3acb5ec5d5133c150379fe77", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=d114e48ce6e6a4d6b1b4021640cbdfa3a32c05bb", "patch": "@@ -478,16 +478,18 @@ class Type : public Node\n   virtual void accept_vis (HIRTypeVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_mappings () const { return mappings; }\n+  virtual Location get_locus () const { return locus; }\n \n protected:\n-  Type (Analysis::NodeMapping mappings) : mappings (mappings) {}\n+  Type (Analysis::NodeMapping mappings, Location locus)\n+    : mappings (mappings), locus (locus)\n+  {}\n \n   // Clone function implementation as pure virtual method\n   virtual Type *clone_type_impl () const = 0;\n \n   Analysis::NodeMapping mappings;\n-\n-  // FIXME: How do we get the location here for each type?\n+  Location locus;\n };\n \n // A type without parentheses? - abstract\n@@ -501,7 +503,9 @@ class TypeNoBounds : public Type\n   }\n \n protected:\n-  TypeNoBounds (Analysis::NodeMapping mappings) : Type (mappings) {}\n+  TypeNoBounds (Analysis::NodeMapping mappings, Location locus)\n+    : Type (mappings, locus)\n+  {}\n \n   // Clone function implementation as pure virtual method\n   virtual TypeNoBounds *clone_type_no_bounds_impl () const = 0;"}]}