{"sha": "5c8a37f81ef5f159d934db7e6169e995242240eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4YTM3ZjgxZWY1ZjE1OWQ5MzRkYjdlNjE2OWU5OTUyNDIyNDBlYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-22T03:07:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-22T03:07:13Z"}, "message": "Initial revision\n\nFrom-SVN: r228", "tree": {"sha": "8c211e53f9e3cd56b55b30d73c06431490bc3f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c211e53f9e3cd56b55b30d73c06431490bc3f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8a37f81ef5f159d934db7e6169e995242240eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a37f81ef5f159d934db7e6169e995242240eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8a37f81ef5f159d934db7e6169e995242240eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a37f81ef5f159d934db7e6169e995242240eb/comments", "author": null, "committer": null, "parents": [{"sha": "af62e7d65eba3474676670942ff0f8b3ea93ef8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af62e7d65eba3474676670942ff0f8b3ea93ef8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af62e7d65eba3474676670942ff0f8b3ea93ef8a"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "edaa1d0e90699a1fe1d05e9b28dddccf5eaa20a5", "filename": "gcc/config/i386/sysv3.h", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8a37f81ef5f159d934db7e6169e995242240eb/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8a37f81ef5f159d934db7e6169e995242240eb/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=5c8a37f81ef5f159d934db7e6169e995242240eb", "patch": "@@ -0,0 +1,127 @@\n+/* Definitions for Intel 386 running system V.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#include \"i386.h\"\n+\n+/* Use default settings for system V.3.  */\n+\n+#include \"svr3.h\"\n+\n+/* Use the ATT assembler syntax.\n+   This overrides at least one macro (ASM_OUTPUT_LABELREF) from svr3.h.  */\n+\n+#include \"att386.h\"\n+\n+/* By default, target has a 80387.  */\n+\n+#define TARGET_DEFAULT 1\n+\n+/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n+\n+#define STARTFILE_SPEC  \\\n+  \"%{pg:gcrt1.o%s}%{!pg:%{posix:%{p:mcrtp1.o%s}%{!p:crtp1.o%s}}%{!posix:%{p:mcrt1.o%s}%{!p:crt1.o%s}}} crtbegin.o%s\\\n+   %{p:-L/usr/lib/libp}%{pg:-L/usr/lib/libp}\"\n+\n+#define LIB_SPEC \"%{posix:-lcposix} %{shlib:-lc_s} -lc crtend.o%s crtn.o%s\"\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Di386\"\n+\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n+\n+/* Writing `int' for a bitfield forces int alignment for the structure.  */\n+\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n+\n+/* Don't write a `.optim' pseudo; this assembler doesn't handle them.  */\n+\n+#undef ASM_FILE_START_1\n+#define ASM_FILE_START_1(FILE)\n+\f\n+/* Machines that use the AT&T assembler syntax\n+   also return floating point values in an FP register.  */\n+/* Define how to find the value returned by a function.\n+   VALTYPE is the data type of the value (as a tree).\n+   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n+   otherwise, FUNC is 0.  */\n+\n+#define VALUE_REGNO(MODE) \\\n+  (((MODE) == SFmode || (MODE) == DFmode) ? FIRST_FLOAT_REG : 0)\n+\n+/* 1 if N is a possible register number for a function value. */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N)== FIRST_FLOAT_REG)\n+\n+#if 0 /* This symbol is expected to exist only on BSD,\n+\t and besides, it describes the host rather than the target.\n+\t It certainly does not belong here.  */\n+#ifndef MAXPATHLEN\n+#define MAXPATHLEN 1024\n+#endif\n+#endif\n+\n+/* longjmp may fail to restore the registers if called from the same\n+   function that called setjmp.  To compensate, the compiler avoids\n+   putting variables in registers in functions that use both setjmp\n+   and longjmp.  */\n+\n+#define NON_SAVING_SETJMP \\\n+  (current_function_calls_setjmp && current_function_calls_longjmp)\n+\n+/* longjmp may fail to restore the stack pointer if the saved frame\n+   pointer is the same as the caller's frame pointer.  Requiring a frame\n+   pointer in any function that calls setjmp or longjmp avoids this\n+   problem, unless setjmp and longjmp are called from the same function.\n+   Since a frame pointer will be required in such a function, it is OK\n+   that the stack pointer is not restored.  */\n+\n+#undef FRAME_POINTER_REQUIRED\n+#define FRAME_POINTER_REQUIRED \\\n+  (current_function_calls_setjmp || current_function_calls_longjmp)\n+\f\n+/* Define a few machine-specific details\n+   of the implementation of constructors.\n+\n+   CTORS_SECTION_ASM_OP should be defined to concatenate\n+   the macro INIT_SECTION_ASM_OP, a newline, and a push instruction\n+   to push a word containing 0 (or some equivalent of that).\n+\n+   ASM_OUTPUT_CONSTRUCTOR should be defined\n+   to push the address of the constructor.  */\n+\n+#undef INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP     \".section .init,\\\"x\\\"\"\n+\n+#define CTORS_SECTION_ASM_OP \\\n+  INIT_SECTION_ASM_OP \"\\n\"\t\\\n+  \"\\tpushl $0\\n\\t\"\t\t\\\n+  DATA_SECTION_ASM_OP\n+/* The reason we end with DATA_SECTION_ASM_OP is to prevent the\n+   initial and final table elements (see crtstuff.c) from getting into\n+   the .init section and causing a crash.  */\n+\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+  do {\t\t\t\t\t\t\\\n+    init_section ();\t\t\t\t\\\n+    fprintf (FILE, \"\\tpushl $\");\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)"}]}