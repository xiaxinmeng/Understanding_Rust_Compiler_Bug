{"sha": "bf751f40a851b4c792ef34d98c11c30d66cdc40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3NTFmNDBhODUxYjRjNzkyZWYzNGQ5OGMxMWMzMGQ2NmNkYzQwZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-03-09T09:14:05Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-03-09T09:14:05Z"}, "message": "Add oacc kernels test-cases in gfortran.dg/goacc\n\n2016-03-09  Tom de Vries  <tom@codesourcery.com>\n\n\t* gfortran.dg/goacc/kernels-loop-2.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-data-2.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-data-update.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-data.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop-n.f95: New test.\n\t* gfortran.dg/goacc/kernels-loop.f95: New test.\n\nFrom-SVN: r234077", "tree": {"sha": "368b48cf153ecb436a0b542c9b5bb424a0e4b614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368b48cf153ecb436a0b542c9b5bb424a0e4b614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf751f40a851b4c792ef34d98c11c30d66cdc40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf751f40a851b4c792ef34d98c11c30d66cdc40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf751f40a851b4c792ef34d98c11c30d66cdc40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf751f40a851b4c792ef34d98c11c30d66cdc40d/comments", "author": null, "committer": null, "parents": [{"sha": "b827e3fe5e190ba525a4d0f78de285c7a0f8bc79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b827e3fe5e190ba525a4d0f78de285c7a0f8bc79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b827e3fe5e190ba525a4d0f78de285c7a0f8bc79"}], "stats": {"total": 361, "additions": 361, "deletions": 0}, "files": [{"sha": "638d7ba12fbd4b068c2916b8bd064fd36704f12c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -1,3 +1,14 @@\n+2016-03-09  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/kernels-loop-2.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-data-2.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-data-enter-exit.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-data-update.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-data.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop-n.f95: New test.\n+\t* gfortran.dg/goacc/kernels-loop.f95: New test.\n+\n 2016-03-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/62096"}, {"sha": "5cc2e8b2df9433de65759cf363874bc4f620d5fc", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-2.f95", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,42 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc kernels copyout (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels copyout (b(0:n-1))\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }"}, {"sha": "d1bfc70c1344d105341bc4d2e527365b5f9fa0bf", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-2.f95", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,49 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc data copyout (a(0:n-1))\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+  !$acc end data\n+\n+  !$acc data copyout (b(0:n-1))\n+  !$acc kernels present (b(0:n-1))\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end kernels\n+  !$acc end data\n+\n+  !$acc data copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+  !$acc end data\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n+"}, {"sha": "feac7b2e529cf180f61bcae692ae7cb0cce012b2", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,48 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc enter data create (a(0:n-1))\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+  !$acc exit data copyout (a(0:n-1))\n+\n+  !$acc enter data create (b(0:n-1))\n+  !$acc kernels present (b(0:n-1))\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end kernels\n+  !$acc exit data copyout (b(0:n-1))\n+\n+  !$acc enter data copyin (a(0:n-1), b(0:n-1)) create (c(0:n-1))\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+  !$acc exit data copyout (c(0:n-1))\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }"}, {"sha": "632983febc4a0f20a2caacda741d5a64da0b1953", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-enter-exit.f95", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,46 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc enter data create (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels present (b(0:n-1))\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  !$acc exit data copyout (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }"}, {"sha": "41b0d965586f00893633dfa012f512bd5fc15745", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-update.f95", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,45 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc enter data create (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+\n+  !$acc update device (b(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  !$acc exit data copyout (a(0:n-1), c(0:n-1))\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }"}, {"sha": "3de205754199f94c76b9704aa05b719c2660dd94", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data.f95", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,46 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc data copyout (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels present (b(0:n-1))\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end kernels\n+\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  !$acc end data\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }"}, {"sha": "21e2e86316a0870c7787aeb111792ec143d69cec", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-n.f95", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,38 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+module test\n+contains\n+  subroutine foo(n)\n+    implicit none\n+    integer :: n\n+    integer, dimension (0:n-1) :: a, b, c\n+    integer                    :: i, ii\n+    do i = 0, n - 1\n+       a(i) = i * 2\n+    end do\n+\n+    do i = 0, n -1\n+       b(i) = i * 4\n+    end do\n+\n+    !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) \n+    do ii = 0, n - 1\n+       c(ii) = a(ii) + b(ii)\n+    end do\n+    !$acc end kernels\n+\n+    do i = 0, n - 1\n+       if (c(i) .ne. a(i) + b(i)) call abort\n+    end do\n+\n+  end subroutine foo\n+end module test\n+\n+! Check that only one loop is analyzed, and that it can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function __test_MOD_foo._omp_fn.0 \" 1 \"optimized\" } }"}, {"sha": "f7e14b421b7048055f48a2f9537c20f93239d8b2", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop.f95", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf751f40a851b4c792ef34d98c11c30d66cdc40d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95?ref=bf751f40a851b4c792ef34d98c11c30d66cdc40d", "patch": "@@ -0,0 +1,36 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only one loop is analyzed, and that it can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }"}]}