{"sha": "7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0MGY1Y2YwNGQ2ZWRjODI3NzdjNGVjYTBjNWI2MmJhZTc2ZWU3ZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-02-12T13:52:02Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-02-12T13:52:02Z"}, "message": "[ARM] [Churn] Comments on cost tables should have lower-case identifiers.\n\n\t* config/arm/aarch-cost-tables.h (generic_extra_costs): Fix\n\tidentifiers in comments.\n\t(cortexa53_extra_costs): Likewise.\n\t* config/arm/arm.c (cortexa9_extra_costs): Fix identifiers in\n\tcomments.\n\t(cortexa7_extra_costs): Likewise.\n\t(cortexa12_extra_costs): Likewise.\n\t(cortexa15_extra_costs): Likewise.\n\t(v7m_extra_costs): Likewise.\n\nFrom-SVN: r207721", "tree": {"sha": "97733664ab5cb49b156dc798bccc69877794d6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97733664ab5cb49b156dc798bccc69877794d6f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110"}], "stats": {"total": 978, "additions": 495, "deletions": 483}, "files": [{"sha": "fc720dc04bcfae700c2370839f411005692e1ba5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "patch": "@@ -1,3 +1,15 @@\n+2014-02-12  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/arm/aarch-cost-tables.h (generic_extra_costs): Fix\n+\tidentifiers in comments.\n+\t(cortexa53_extra_costs): Likewise.\n+\t* config/arm/arm.c (cortexa9_extra_costs): Fix identifiers in\n+\tcomments.\n+\t(cortexa7_extra_costs): Likewise.\n+\t(cortexa12_extra_costs): Likewise.\n+\t(cortexa15_extra_costs): Likewise.\n+\t(v7m_extra_costs): Likewise.\n+\n 2014-02-12  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60092"}, {"sha": "c30ea2f92164bf810e7f2141dafd0b807ea79276", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 138, "deletions": 138, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "patch": "@@ -26,199 +26,199 @@ const struct cpu_cost_table generic_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    0,\t\t\t/* Shift.  */\n-    COSTS_N_INSNS (1),\t/* Shift_reg.  */\n-    0,\t\t\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n-    0,\t\t\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    0,\t\t\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    0,\t\t\t/* Bfi.  */\n-    0,\t\t\t/* Bfx.  */\n-    0,\t\t\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    0,\t\t\t/* shift.  */\n+    COSTS_N_INSNS (1),\t/* shift_reg.  */\n+    0,\t\t\t/* arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift_reg.  */\n+    0,\t\t\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    0,\t\t\t/* bfi.  */\n+    0,\t\t\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n     COSTS_N_INSNS (1),\t/* non_exec.  */\n     false\t\t/* non_exec_costs_exec.  */\n   },\n   {\n     /* MULT SImode */\n     {\n-      COSTS_N_INSNS (2),\t/* Simple.  */\n-      COSTS_N_INSNS (1),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (3),\t/* Add.  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      COSTS_N_INSNS (8)\t\t/* Idiv.  */\n+      COSTS_N_INSNS (2),\t/* simple.  */\n+      COSTS_N_INSNS (1),\t/* flag_setting.  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (3),\t/* add.  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      COSTS_N_INSNS (8)\t\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      0,\t\t\t/* Add (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (2),\t/* Load.  */\n-    COSTS_N_INSNS (2),\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (3),\t/* Ldrd.  */\n-    COSTS_N_INSNS (2),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Loadf.  */\n-    COSTS_N_INSNS (3),\t/* Loadd.  */\n-    COSTS_N_INSNS (1),  /* Load_unaligned.  */\n-    COSTS_N_INSNS (2),\t/* Store.  */\n-    COSTS_N_INSNS (3),\t/* Strd.  */\n-    COSTS_N_INSNS (2),\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Storef.  */\n-    COSTS_N_INSNS (3),\t/* Stored.  */\n-    COSTS_N_INSNS (1)  /* Store_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* load.  */\n+    COSTS_N_INSNS (2),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (3),\t/* ldrd.  */\n+    COSTS_N_INSNS (2),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* loadf.  */\n+    COSTS_N_INSNS (3),\t/* loadd.  */\n+    COSTS_N_INSNS (1),  /* load_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* store.  */\n+    COSTS_N_INSNS (3),\t/* strd.  */\n+    COSTS_N_INSNS (2),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* storef.  */\n+    COSTS_N_INSNS (3),\t/* stored.  */\n+    COSTS_N_INSNS (1)  /* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (7),\t/* Div.  */\n-      COSTS_N_INSNS (2),\t/* Mult.  */\n-      COSTS_N_INSNS (3),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (3),\t/* Fma.  */\n-      COSTS_N_INSNS (1),\t/* Addsub.  */\n-      0,\t\t\t/* Fpconst.  */\n-      0,\t\t\t/* Neg.  */\n-      0,\t\t\t/* Compare.  */\n-      0,\t\t\t/* Widen.  */\n-      0,\t\t\t/* Narrow.  */\n-      0,\t\t\t/* Toint.  */\n-      0,\t\t\t/* Fromint.  */\n-      0\t\t\t\t/* Roundint.  */\n+      COSTS_N_INSNS (7),\t/* div.  */\n+      COSTS_N_INSNS (2),\t/* mult.  */\n+      COSTS_N_INSNS (3),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (3),\t/* fma.  */\n+      COSTS_N_INSNS (1),\t/* addsub.  */\n+      0,\t\t\t/* fpconst.  */\n+      0,\t\t\t/* neg.  */\n+      0,\t\t\t/* compare.  */\n+      0,\t\t\t/* widen.  */\n+      0,\t\t\t/* narrow.  */\n+      0,\t\t\t/* toint.  */\n+      0,\t\t\t/* fromint.  */\n+      0\t\t\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (15),\t/* Div.  */\n-      COSTS_N_INSNS (5),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      0,\t\t\t/* Fpconst.  */\n-      0,\t\t\t/* Neg.  */\n-      0,\t\t\t/* Compare.  */\n-      0,\t\t\t/* Widen.  */\n-      0,\t\t\t/* Narrow.  */\n-      0,\t\t\t/* Toint.  */\n-      0,\t\t\t/* Fromint.  */\n-      0\t\t\t\t/* Roundint.  */\n+      COSTS_N_INSNS (15),\t/* div.  */\n+      COSTS_N_INSNS (5),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      0,\t\t\t/* fpconst.  */\n+      0,\t\t\t/* neg.  */\n+      0,\t\t\t/* compare.  */\n+      0,\t\t\t/* widen.  */\n+      0,\t\t\t/* narrow.  */\n+      0,\t\t\t/* toint.  */\n+      0,\t\t\t/* fromint.  */\n+      0\t\t\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n \n const struct cpu_cost_table cortexa53_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    COSTS_N_INSNS (1),\t/* Shift.  */\n-    COSTS_N_INSNS (2),\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (2),\t/* Arith_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift.  */\n-    COSTS_N_INSNS (2),\t/* Log_shift_reg.  */\n-    0,\t\t\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    COSTS_N_INSNS (1),\t/* Bfi.  */\n-    COSTS_N_INSNS (1),\t/* Bfx.  */\n-    0,\t\t\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    COSTS_N_INSNS (1),\t/* shift.  */\n+    COSTS_N_INSNS (2),\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    COSTS_N_INSNS (2),\t/* arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* log_shift.  */\n+    COSTS_N_INSNS (2),\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    COSTS_N_INSNS (1),\t/* bfi.  */\n+    COSTS_N_INSNS (1),\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n   {\n     /* MULT SImode */\n     {\n-      COSTS_N_INSNS (1),\t/* Simple.  */\n-      COSTS_N_INSNS (2),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (1),\t/* Extend.  */\n-      COSTS_N_INSNS (1),\t/* Add.  */\n-      COSTS_N_INSNS (1),\t/* Extend_add.  */\n-      COSTS_N_INSNS (7)\t\t/* Idiv.  */\n+      COSTS_N_INSNS (1),\t/* simple.  */\n+      COSTS_N_INSNS (2),\t/* flag_setting.  */\n+      COSTS_N_INSNS (1),\t/* extend.  */\n+      COSTS_N_INSNS (1),\t/* add.  */\n+      COSTS_N_INSNS (1),\t/* extend_add.  */\n+      COSTS_N_INSNS (7)\t\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      COSTS_N_INSNS (2),\t/* Simple.  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (2),\t/* Add.  */\n-      COSTS_N_INSNS (2),\t/* Extend_add.  */\n-      COSTS_N_INSNS (15)\t/* Idiv.  */\n+      COSTS_N_INSNS (2),\t/* simple.  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (2),\t/* add.  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      COSTS_N_INSNS (15)\t/* idiv.  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (1),\t\t/* Load.  */\n-    COSTS_N_INSNS (1),\t\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (1),\t\t/* Ldrd.  */\n-    COSTS_N_INSNS (1),\t\t/* Ldm_1st.  */\n-    1,\t\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    2,\t\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (1),\t\t/* Loadf.  */\n-    COSTS_N_INSNS (1),\t\t/* Loadd.  */\n-    COSTS_N_INSNS (1),\t\t/* Load_unaligned.  */\n-    0,\t\t\t\t/* Store.  */\n-    0,\t\t\t\t/* Strd.  */\n-    0,\t\t\t\t/* Stm_1st.  */\n-    1,\t\t\t\t/* Stm_regs_per_insn_1st.  */\n-    2,\t\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    0,\t\t\t\t/* Storef.  */\n-    0,\t\t\t\t/* Stored.  */\n-    COSTS_N_INSNS (1)\t\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (1),\t\t/* load.  */\n+    COSTS_N_INSNS (1),\t\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (1),\t\t/* ldrd.  */\n+    COSTS_N_INSNS (1),\t\t/* ldm_1st.  */\n+    1,\t\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (1),\t\t/* loadf.  */\n+    COSTS_N_INSNS (1),\t\t/* loadd.  */\n+    COSTS_N_INSNS (1),\t\t/* load_unaligned.  */\n+    0,\t\t\t\t/* store.  */\n+    0,\t\t\t\t/* strd.  */\n+    0,\t\t\t\t/* stm_1st.  */\n+    1,\t\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    0,\t\t\t\t/* storef.  */\n+    0,\t\t\t\t/* stored.  */\n+    COSTS_N_INSNS (1)\t\t/* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (15),\t/* Div.  */\n-      COSTS_N_INSNS (3),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub. */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (1),\t/* Fpconst. */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (1),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (15),\t/* div.  */\n+      COSTS_N_INSNS (3),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub. */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (1),\t/* fpconst. */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (1),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (30),\t/* Div.  */\n-      COSTS_N_INSNS (3),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (1),\t/* Fpconst.  */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (1),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (30),\t/* div.  */\n+      COSTS_N_INSNS (3),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (1),\t/* fpconst.  */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (1),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n "}, {"sha": "b49f43e3ea1047a346e12c95ededfc315c191658", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 345, "deletions": 345, "changes": 690, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7b40f5cf04d6edc82777c4eca0c5b62bae76ee7e", "patch": "@@ -970,99 +970,99 @@ const struct cpu_cost_table cortexa9_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    0,\t\t\t/* Shift.  */\n-    COSTS_N_INSNS (1),\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (2),\t/* Arith_shift_reg.  */\n-    0,\t\t\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Extend.  */\n-    COSTS_N_INSNS (2),\t/* Extend_arith.  */\n-    COSTS_N_INSNS (1),\t/* Bfi.  */\n-    COSTS_N_INSNS (1),\t/* Bfx.  */\n-    0,\t\t\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    0,\t\t\t/* shift.  */\n+    COSTS_N_INSNS (1),\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    COSTS_N_INSNS (2),\t/* arith_shift_reg.  */\n+    0,\t\t\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* extend.  */\n+    COSTS_N_INSNS (2),\t/* extend_arith.  */\n+    COSTS_N_INSNS (1),\t/* bfi.  */\n+    COSTS_N_INSNS (1),\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n   {\n     /* MULT SImode */\n     {\n-      COSTS_N_INSNS (3),\t/* Simple.  */\n-      COSTS_N_INSNS (3),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (3),\t/* Add.  */\n-      COSTS_N_INSNS (2),\t/* Extend_add.  */\n-      COSTS_N_INSNS (30)\t/* Idiv.  No HW div on Cortex A9.  */\n+      COSTS_N_INSNS (3),\t/* simple.  */\n+      COSTS_N_INSNS (3),\t/* flag_setting.  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (3),\t/* add.  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      COSTS_N_INSNS (30)\t/* idiv.  No HW div on Cortex A9.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (4),\t/* Extend.  */\n-      0,\t\t\t/* Add (N/A).  */\n-      COSTS_N_INSNS (4),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (4),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (4),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (2),\t/* Load.  */\n-    COSTS_N_INSNS (2),\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (2),\t/* Ldrd.  */\n-    COSTS_N_INSNS (2),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (5),\t/* Loadf.  */\n-    COSTS_N_INSNS (5),\t/* Loadd.  */\n-    COSTS_N_INSNS (1),  /* Load_unaligned.  */\n-    COSTS_N_INSNS (2),\t/* Store.  */\n-    COSTS_N_INSNS (2),\t/* Strd.  */\n-    COSTS_N_INSNS (2),\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (1),\t/* Storef.  */\n-    COSTS_N_INSNS (1),\t/* Stored.  */\n-    COSTS_N_INSNS (1)\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* load.  */\n+    COSTS_N_INSNS (2),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (2),\t/* ldrd.  */\n+    COSTS_N_INSNS (2),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (5),\t/* loadf.  */\n+    COSTS_N_INSNS (5),\t/* loadd.  */\n+    COSTS_N_INSNS (1),  /* load_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* store.  */\n+    COSTS_N_INSNS (2),\t/* strd.  */\n+    COSTS_N_INSNS (2),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (1),\t/* storef.  */\n+    COSTS_N_INSNS (1),\t/* stored.  */\n+    COSTS_N_INSNS (1)\t/* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (14),\t/* Div.  */\n-      COSTS_N_INSNS (4),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub. */\n-      COSTS_N_INSNS (30),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (1),\t/* Fpconst.  */\n-      COSTS_N_INSNS (1),\t/* Neg.  */\n-      COSTS_N_INSNS (3),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (14),\t/* div.  */\n+      COSTS_N_INSNS (4),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub. */\n+      COSTS_N_INSNS (30),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (1),\t/* fpconst.  */\n+      COSTS_N_INSNS (1),\t/* neg.  */\n+      COSTS_N_INSNS (3),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (24),\t/* Div.  */\n-      COSTS_N_INSNS (5),\t/* Mult.  */\n-      COSTS_N_INSNS (8),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (30),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (1),\t/* Fpconst.  */\n-      COSTS_N_INSNS (1),\t/* Neg.  */\n-      COSTS_N_INSNS (3),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (24),\t/* div.  */\n+      COSTS_N_INSNS (5),\t/* mult.  */\n+      COSTS_N_INSNS (8),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (30),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (1),\t/* fpconst.  */\n+      COSTS_N_INSNS (1),\t/* neg.  */\n+      COSTS_N_INSNS (3),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n \n@@ -1071,400 +1071,400 @@ const struct cpu_cost_table cortexa7_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    COSTS_N_INSNS (1),\t/* Shift.  */\n-    COSTS_N_INSNS (1),\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    COSTS_N_INSNS (1),\t/* Bfi.  */\n-    COSTS_N_INSNS (1),\t/* Bfx.  */\n-    COSTS_N_INSNS (1),\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    COSTS_N_INSNS (1),\t/* shift.  */\n+    COSTS_N_INSNS (1),\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    COSTS_N_INSNS (1),\t/* bfi.  */\n+    COSTS_N_INSNS (1),\t/* bfx.  */\n+    COSTS_N_INSNS (1),\t/* clz.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n \n   {\n     /* MULT SImode */\n     {\n-      0,\t\t\t/* Simple.  */\n-      COSTS_N_INSNS (1),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (1),\t/* Extend.  */\n-      COSTS_N_INSNS (1),\t/* Add.  */\n-      COSTS_N_INSNS (1),\t/* Extend_add.  */\n-      COSTS_N_INSNS (7)\t\t/* Idiv.  */\n+      0,\t\t\t/* simple.  */\n+      COSTS_N_INSNS (1),\t/* flag_setting.  */\n+      COSTS_N_INSNS (1),\t/* extend.  */\n+      COSTS_N_INSNS (1),\t/* add.  */\n+      COSTS_N_INSNS (1),\t/* extend_add.  */\n+      COSTS_N_INSNS (7)\t\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (1),\t/* Extend.  */\n-      0,\t\t\t/* Add.  */\n-      COSTS_N_INSNS (2),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (1),\t/* extend.  */\n+      0,\t\t\t/* add.  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (1),\t/* Load.  */\n-    COSTS_N_INSNS (1),\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (3),\t/* Ldrd.  */\n-    COSTS_N_INSNS (1),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Loadf.  */\n-    COSTS_N_INSNS (2),\t/* Loadd.  */\n-    COSTS_N_INSNS (1),\t/* Load_unaligned.  */\n-    COSTS_N_INSNS (1),\t/* Store.  */\n-    COSTS_N_INSNS (3),\t/* Strd.  */\n-    COSTS_N_INSNS (1),\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Storef.  */\n-    COSTS_N_INSNS (2),\t/* Stored.  */\n-    COSTS_N_INSNS (1)\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (1),\t/* load.  */\n+    COSTS_N_INSNS (1),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (3),\t/* ldrd.  */\n+    COSTS_N_INSNS (1),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* loadf.  */\n+    COSTS_N_INSNS (2),\t/* loadd.  */\n+    COSTS_N_INSNS (1),\t/* load_unaligned.  */\n+    COSTS_N_INSNS (1),\t/* store.  */\n+    COSTS_N_INSNS (3),\t/* strd.  */\n+    COSTS_N_INSNS (1),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* storef.  */\n+    COSTS_N_INSNS (2),\t/* stored.  */\n+    COSTS_N_INSNS (1)\t/* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (15),\t/* Div.  */\n-      COSTS_N_INSNS (3),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub. */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (3),\t/* Fpconst.  */\n-      COSTS_N_INSNS (3),\t/* Neg.  */\n-      COSTS_N_INSNS (3),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (15),\t/* div.  */\n+      COSTS_N_INSNS (3),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub. */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (3),\t/* fpconst.  */\n+      COSTS_N_INSNS (3),\t/* neg.  */\n+      COSTS_N_INSNS (3),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (30),\t/* Div.  */\n-      COSTS_N_INSNS (6),\t/* Mult.  */\n-      COSTS_N_INSNS (10),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      COSTS_N_INSNS (3),\t/* Fpconst.  */\n-      COSTS_N_INSNS (3),\t/* Neg.  */\n-      COSTS_N_INSNS (3),\t/* Compare.  */\n-      COSTS_N_INSNS (3),\t/* Widen.  */\n-      COSTS_N_INSNS (3),\t/* Narrow.  */\n-      COSTS_N_INSNS (3),\t/* Toint.  */\n-      COSTS_N_INSNS (3),\t/* Fromint.  */\n-      COSTS_N_INSNS (3)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (30),\t/* div.  */\n+      COSTS_N_INSNS (6),\t/* mult.  */\n+      COSTS_N_INSNS (10),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      COSTS_N_INSNS (3),\t/* fpconst.  */\n+      COSTS_N_INSNS (3),\t/* neg.  */\n+      COSTS_N_INSNS (3),\t/* compare.  */\n+      COSTS_N_INSNS (3),\t/* widen.  */\n+      COSTS_N_INSNS (3),\t/* narrow.  */\n+      COSTS_N_INSNS (3),\t/* toint.  */\n+      COSTS_N_INSNS (3),\t/* fromint.  */\n+      COSTS_N_INSNS (3)\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n \n const struct cpu_cost_table cortexa12_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    0,\t\t\t/* Shift.  */\n-    COSTS_N_INSNS (1),\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    0,\t\t\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    0,\t\t\t/* Bfi.  */\n-    COSTS_N_INSNS (1),\t/* Bfx.  */\n-    COSTS_N_INSNS (1),\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    0,\t\t\t/* shift.  */\n+    COSTS_N_INSNS (1),\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    0,\t\t\t/* bfi.  */\n+    COSTS_N_INSNS (1),\t/* bfx.  */\n+    COSTS_N_INSNS (1),\t/* clz.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n   /* MULT SImode */\n   {\n     {\n-      COSTS_N_INSNS (2),\t/* Simple.  */\n-      COSTS_N_INSNS (3),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (3),\t/* Add.  */\n-      COSTS_N_INSNS (2),\t/* Extend_add.  */\n-      COSTS_N_INSNS (18)\t/* Idiv.  */\n+      COSTS_N_INSNS (2),\t/* simple.  */\n+      COSTS_N_INSNS (3),\t/* flag_setting.  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (3),\t/* add.  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      COSTS_N_INSNS (18)\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend.  */\n-      0,\t\t\t/* Add (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (3),\t/* Load.  */\n-    COSTS_N_INSNS (3),\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (3),\t/* Ldrd.  */\n-    COSTS_N_INSNS (3),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (3),\t/* Loadf.  */\n-    COSTS_N_INSNS (3),\t/* Loadd.  */\n-    0,\t\t\t/* Load_unaligned.  */\n-    0,\t\t\t/* Store.  */\n-    0,\t\t\t/* Strd.  */\n-    0,\t\t\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Storef.  */\n-    COSTS_N_INSNS (2),\t/* Stored.  */\n-    0\t\t\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (3),\t/* load.  */\n+    COSTS_N_INSNS (3),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (3),\t/* ldrd.  */\n+    COSTS_N_INSNS (3),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (3),\t/* loadf.  */\n+    COSTS_N_INSNS (3),\t/* loadd.  */\n+    0,\t\t\t/* load_unaligned.  */\n+    0,\t\t\t/* store.  */\n+    0,\t\t\t/* strd.  */\n+    0,\t\t\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* storef.  */\n+    COSTS_N_INSNS (2),\t/* stored.  */\n+    0\t\t\t/* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (17),\t/* Div.  */\n-      COSTS_N_INSNS (4),\t/* Mult.  */\n-      COSTS_N_INSNS (8),\t/* Mult_addsub. */\n-      COSTS_N_INSNS (8),\t/* Fma.  */\n-      COSTS_N_INSNS (4),\t/* Addsub.  */\n-      COSTS_N_INSNS (2),\t/* Fpconst. */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (2),\t/* Compare.  */\n-      COSTS_N_INSNS (4),\t/* Widen.  */\n-      COSTS_N_INSNS (4),\t/* Narrow.  */\n-      COSTS_N_INSNS (4),\t/* Toint.  */\n-      COSTS_N_INSNS (4),\t/* Fromint.  */\n-      COSTS_N_INSNS (4)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (17),\t/* div.  */\n+      COSTS_N_INSNS (4),\t/* mult.  */\n+      COSTS_N_INSNS (8),\t/* mult_addsub. */\n+      COSTS_N_INSNS (8),\t/* fma.  */\n+      COSTS_N_INSNS (4),\t/* addsub.  */\n+      COSTS_N_INSNS (2),\t/* fpconst. */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (2),\t/* compare.  */\n+      COSTS_N_INSNS (4),\t/* widen.  */\n+      COSTS_N_INSNS (4),\t/* narrow.  */\n+      COSTS_N_INSNS (4),\t/* toint.  */\n+      COSTS_N_INSNS (4),\t/* fromint.  */\n+      COSTS_N_INSNS (4)\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (31),\t/* Div.  */\n-      COSTS_N_INSNS (4),\t/* Mult.  */\n-      COSTS_N_INSNS (8),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (8),\t/* Fma.  */\n-      COSTS_N_INSNS (4),\t/* Addsub.  */\n-      COSTS_N_INSNS (2),\t/* Fpconst.  */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (2),\t/* Compare.  */\n-      COSTS_N_INSNS (4),\t/* Widen.  */\n-      COSTS_N_INSNS (4),\t/* Narrow.  */\n-      COSTS_N_INSNS (4),\t/* Toint.  */\n-      COSTS_N_INSNS (4),\t/* Fromint.  */\n-      COSTS_N_INSNS (4)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (31),\t/* div.  */\n+      COSTS_N_INSNS (4),\t/* mult.  */\n+      COSTS_N_INSNS (8),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (8),\t/* fma.  */\n+      COSTS_N_INSNS (4),\t/* addsub.  */\n+      COSTS_N_INSNS (2),\t/* fpconst.  */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (2),\t/* compare.  */\n+      COSTS_N_INSNS (4),\t/* widen.  */\n+      COSTS_N_INSNS (4),\t/* narrow.  */\n+      COSTS_N_INSNS (4),\t/* toint.  */\n+      COSTS_N_INSNS (4),\t/* fromint.  */\n+      COSTS_N_INSNS (4)\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n \n const struct cpu_cost_table cortexa15_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    0,\t\t\t/* Shift.  */\n-    0,\t\t\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    0,\t\t\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    COSTS_N_INSNS (1),\t/* Bfi.  */\n-    0,\t\t\t/* Bfx.  */\n-    0,\t\t\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    0,\t\t\t/* shift.  */\n+    0,\t\t\t/* shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    COSTS_N_INSNS (1),\t/* bfi.  */\n+    0,\t\t\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n     0,\t\t\t/* non_exec.  */\n     true\t\t/* non_exec_costs_exec.  */\n   },\n   /* MULT SImode */\n   {\n     {\n-      COSTS_N_INSNS (2),\t/* Simple.  */\n-      COSTS_N_INSNS (3),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (2),\t/* Add.  */\n-      COSTS_N_INSNS (2),\t/* Extend_add.  */\n-      COSTS_N_INSNS (18)\t/* Idiv.  */\n+      COSTS_N_INSNS (2),\t/* simple.  */\n+      COSTS_N_INSNS (3),\t/* flag_setting.  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (2),\t/* add.  */\n+      COSTS_N_INSNS (2),\t/* extend_add.  */\n+      COSTS_N_INSNS (18)\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend.  */\n-      0,\t\t\t/* Add (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (3),\t/* Load.  */\n-    COSTS_N_INSNS (3),\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (3),\t/* Ldrd.  */\n-    COSTS_N_INSNS (4),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (4),\t/* Loadf.  */\n-    COSTS_N_INSNS (4),\t/* Loadd.  */\n-    0,\t\t\t/* Load_unaligned.  */\n-    0,\t\t\t/* Store.  */\n-    0,\t\t\t/* Strd.  */\n-    COSTS_N_INSNS (1),\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    2,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    0,\t\t\t/* Storef.  */\n-    0,\t\t\t/* Stored.  */\n-    0\t\t\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (3),\t/* load.  */\n+    COSTS_N_INSNS (3),\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (3),\t/* ldrd.  */\n+    COSTS_N_INSNS (4),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    2,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),\t/* loadf.  */\n+    COSTS_N_INSNS (4),\t/* loadd.  */\n+    0,\t\t\t/* load_unaligned.  */\n+    0,\t\t\t/* store.  */\n+    0,\t\t\t/* strd.  */\n+    COSTS_N_INSNS (1),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    2,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    0,\t\t\t/* storef.  */\n+    0,\t\t\t/* stored.  */\n+    0\t\t\t/* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (17),\t/* Div.  */\n-      COSTS_N_INSNS (4),\t/* Mult.  */\n-      COSTS_N_INSNS (8),\t/* Mult_addsub. */\n-      COSTS_N_INSNS (8),\t/* Fma.  */\n-      COSTS_N_INSNS (4),\t/* Addsub.  */\n-      COSTS_N_INSNS (2),\t/* Fpconst. */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (5),\t/* Compare.  */\n-      COSTS_N_INSNS (4),\t/* Widen.  */\n-      COSTS_N_INSNS (4),\t/* Narrow.  */\n-      COSTS_N_INSNS (4),\t/* Toint.  */\n-      COSTS_N_INSNS (4),\t/* Fromint.  */\n-      COSTS_N_INSNS (4)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (17),\t/* div.  */\n+      COSTS_N_INSNS (4),\t/* mult.  */\n+      COSTS_N_INSNS (8),\t/* mult_addsub. */\n+      COSTS_N_INSNS (8),\t/* fma.  */\n+      COSTS_N_INSNS (4),\t/* addsub.  */\n+      COSTS_N_INSNS (2),\t/* fpconst. */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (5),\t/* compare.  */\n+      COSTS_N_INSNS (4),\t/* widen.  */\n+      COSTS_N_INSNS (4),\t/* narrow.  */\n+      COSTS_N_INSNS (4),\t/* toint.  */\n+      COSTS_N_INSNS (4),\t/* fromint.  */\n+      COSTS_N_INSNS (4)\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (31),\t/* Div.  */\n-      COSTS_N_INSNS (4),\t/* Mult.  */\n-      COSTS_N_INSNS (8),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (8),\t/* Fma.  */\n-      COSTS_N_INSNS (4),\t/* Addsub.  */\n-      COSTS_N_INSNS (2),\t/* Fpconst.  */\n-      COSTS_N_INSNS (2),\t/* Neg.  */\n-      COSTS_N_INSNS (2),\t/* Compare.  */\n-      COSTS_N_INSNS (4),\t/* Widen.  */\n-      COSTS_N_INSNS (4),\t/* Narrow.  */\n-      COSTS_N_INSNS (4),\t/* Toint.  */\n-      COSTS_N_INSNS (4),\t/* Fromint.  */\n-      COSTS_N_INSNS (4)\t\t/* Roundint.  */\n+      COSTS_N_INSNS (31),\t/* div.  */\n+      COSTS_N_INSNS (4),\t/* mult.  */\n+      COSTS_N_INSNS (8),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (8),\t/* fma.  */\n+      COSTS_N_INSNS (4),\t/* addsub.  */\n+      COSTS_N_INSNS (2),\t/* fpconst.  */\n+      COSTS_N_INSNS (2),\t/* neg.  */\n+      COSTS_N_INSNS (2),\t/* compare.  */\n+      COSTS_N_INSNS (4),\t/* widen.  */\n+      COSTS_N_INSNS (4),\t/* narrow.  */\n+      COSTS_N_INSNS (4),\t/* toint.  */\n+      COSTS_N_INSNS (4),\t/* fromint.  */\n+      COSTS_N_INSNS (4)\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n \n const struct cpu_cost_table v7m_extra_costs =\n {\n   /* ALU */\n   {\n-    0,\t\t\t/* Arith.  */\n-    0,\t\t\t/* Logical.  */\n-    0,\t\t\t/* Shift.  */\n-    0,\t\t\t/* Shift_reg.  */\n-    0,\t\t\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n-    0,\t\t\t/* Log_shift.  */\n-    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n-    0,\t\t\t/* Extend.  */\n-    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n-    0,\t\t\t/* Bfi.  */\n-    0,\t\t\t/* Bfx.  */\n-    0,\t\t\t/* Clz.  */\n+    0,\t\t\t/* arith.  */\n+    0,\t\t\t/* logical.  */\n+    0,\t\t\t/* shift.  */\n+    0,\t\t\t/* shift_reg.  */\n+    0,\t\t\t/* arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* arith_shift_reg.  */\n+    0,\t\t\t/* log_shift.  */\n+    COSTS_N_INSNS (1),\t/* log_shift_reg.  */\n+    0,\t\t\t/* extend.  */\n+    COSTS_N_INSNS (1),\t/* extend_arith.  */\n+    0,\t\t\t/* bfi.  */\n+    0,\t\t\t/* bfx.  */\n+    0,\t\t\t/* clz.  */\n     COSTS_N_INSNS (1),\t/* non_exec.  */\n     false\t\t/* non_exec_costs_exec.  */\n   },\n   {\n     /* MULT SImode */\n     {\n-      COSTS_N_INSNS (1),\t/* Simple.  */\n-      COSTS_N_INSNS (1),\t/* Flag_setting.  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      COSTS_N_INSNS (1),\t/* Add.  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      COSTS_N_INSNS (8)\t\t/* Idiv.  */\n+      COSTS_N_INSNS (1),\t/* simple.  */\n+      COSTS_N_INSNS (1),\t/* flag_setting.  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      COSTS_N_INSNS (1),\t/* add.  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      COSTS_N_INSNS (8)\t\t/* idiv.  */\n     },\n     /* MULT DImode */\n     {\n-      0,\t\t\t/* Simple (N/A).  */\n-      0,\t\t\t/* Flag_setting (N/A).  */\n-      COSTS_N_INSNS (2),\t/* Extend.  */\n-      0,\t\t\t/* Add (N/A).  */\n-      COSTS_N_INSNS (3),\t/* Extend_add.  */\n-      0\t\t\t\t/* Idiv (N/A).  */\n+      0,\t\t\t/* simple (N/A).  */\n+      0,\t\t\t/* flag_setting (N/A).  */\n+      COSTS_N_INSNS (2),\t/* extend.  */\n+      0,\t\t\t/* add (N/A).  */\n+      COSTS_N_INSNS (3),\t/* extend_add.  */\n+      0\t\t\t\t/* idiv (N/A).  */\n     }\n   },\n   /* LD/ST */\n   {\n-    COSTS_N_INSNS (2),\t/* Load.  */\n-    0,\t\t\t/* Load_sign_extend.  */\n-    COSTS_N_INSNS (3),\t/* Ldrd.  */\n-    COSTS_N_INSNS (2),\t/* Ldm_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n-    1,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Loadf.  */\n-    COSTS_N_INSNS (3),\t/* Loadd.  */\n-    COSTS_N_INSNS (1),  /* Load_unaligned.  */\n-    COSTS_N_INSNS (2),\t/* Store.  */\n-    COSTS_N_INSNS (3),\t/* Strd.  */\n-    COSTS_N_INSNS (2),\t/* Stm_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n-    1,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n-    COSTS_N_INSNS (2),\t/* Storef.  */\n-    COSTS_N_INSNS (3),\t/* Stored.  */\n-    COSTS_N_INSNS (1)  /* Store_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* load.  */\n+    0,\t\t\t/* load_sign_extend.  */\n+    COSTS_N_INSNS (3),\t/* ldrd.  */\n+    COSTS_N_INSNS (2),\t/* ldm_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_1st.  */\n+    1,\t\t\t/* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* loadf.  */\n+    COSTS_N_INSNS (3),\t/* loadd.  */\n+    COSTS_N_INSNS (1),  /* load_unaligned.  */\n+    COSTS_N_INSNS (2),\t/* store.  */\n+    COSTS_N_INSNS (3),\t/* strd.  */\n+    COSTS_N_INSNS (2),\t/* stm_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_1st.  */\n+    1,\t\t\t/* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),\t/* storef.  */\n+    COSTS_N_INSNS (3),\t/* stored.  */\n+    COSTS_N_INSNS (1)  /* store_unaligned.  */\n   },\n   {\n     /* FP SFmode */\n     {\n-      COSTS_N_INSNS (7),\t/* Div.  */\n-      COSTS_N_INSNS (2),\t/* Mult.  */\n-      COSTS_N_INSNS (5),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (3),\t/* Fma.  */\n-      COSTS_N_INSNS (1),\t/* Addsub.  */\n-      0,\t\t\t/* Fpconst.  */\n-      0,\t\t\t/* Neg.  */\n-      0,\t\t\t/* Compare.  */\n-      0,\t\t\t/* Widen.  */\n-      0,\t\t\t/* Narrow.  */\n-      0,\t\t\t/* Toint.  */\n-      0,\t\t\t/* Fromint.  */\n-      0\t\t\t\t/* Roundint.  */\n+      COSTS_N_INSNS (7),\t/* div.  */\n+      COSTS_N_INSNS (2),\t/* mult.  */\n+      COSTS_N_INSNS (5),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (3),\t/* fma.  */\n+      COSTS_N_INSNS (1),\t/* addsub.  */\n+      0,\t\t\t/* fpconst.  */\n+      0,\t\t\t/* neg.  */\n+      0,\t\t\t/* compare.  */\n+      0,\t\t\t/* widen.  */\n+      0,\t\t\t/* narrow.  */\n+      0,\t\t\t/* toint.  */\n+      0,\t\t\t/* fromint.  */\n+      0\t\t\t\t/* roundint.  */\n     },\n     /* FP DFmode */\n     {\n-      COSTS_N_INSNS (15),\t/* Div.  */\n-      COSTS_N_INSNS (5),\t/* Mult.  */\n-      COSTS_N_INSNS (7),\t/* Mult_addsub.  */\n-      COSTS_N_INSNS (7),\t/* Fma.  */\n-      COSTS_N_INSNS (3),\t/* Addsub.  */\n-      0,\t\t\t/* Fpconst.  */\n-      0,\t\t\t/* Neg.  */\n-      0,\t\t\t/* Compare.  */\n-      0,\t\t\t/* Widen.  */\n-      0,\t\t\t/* Narrow.  */\n-      0,\t\t\t/* Toint.  */\n-      0,\t\t\t/* Fromint.  */\n-      0\t\t\t\t/* Roundint.  */\n+      COSTS_N_INSNS (15),\t/* div.  */\n+      COSTS_N_INSNS (5),\t/* mult.  */\n+      COSTS_N_INSNS (7),\t/* mult_addsub.  */\n+      COSTS_N_INSNS (7),\t/* fma.  */\n+      COSTS_N_INSNS (3),\t/* addsub.  */\n+      0,\t\t\t/* fpconst.  */\n+      0,\t\t\t/* neg.  */\n+      0,\t\t\t/* compare.  */\n+      0,\t\t\t/* widen.  */\n+      0,\t\t\t/* narrow.  */\n+      0,\t\t\t/* toint.  */\n+      0,\t\t\t/* fromint.  */\n+      0\t\t\t\t/* roundint.  */\n     }\n   },\n   /* Vector */\n   {\n-    COSTS_N_INSNS (1)\t/* Alu.  */\n+    COSTS_N_INSNS (1)\t/* alu.  */\n   }\n };\n "}]}