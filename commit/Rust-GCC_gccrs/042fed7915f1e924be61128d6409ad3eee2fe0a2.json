{"sha": "042fed7915f1e924be61128d6409ad3eee2fe0a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyZmVkNzkxNWYxZTkyNGJlNjExMjhkNjQwOWFkM2VlZTJmZTBhMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-11-18T22:43:05Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-11-18T22:43:05Z"}, "message": "re PR fortran/38135 (RESHAPE gives wrong result)\n\n2008-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/38135\n\t* m4/reshape.m4:  Correct bounds checking when PAD is present.\n\tTreat PAD as if it were SOURCE when SOURCE is empty.\n\t* intrinsics/reshape_generic.c:  Likewise.\n\t* generated/reshape_c10.c Regenerated.\n\t* generated/reshape_c16.c Regenerated.\n\t* generated/reshape_c4.c Regenerated.\n\t* generated/reshape_c8.c Regenerated.\n\t* generated/reshape_i16.c Regenerated.\n\t* generated/reshape_i4.c Regenerated.\n\t* generated/reshape_i8.c Regenerated.\n\t* generated/reshape_r10.c Regenerated.\n\t* generated/reshape_r16.c Regenerated.\n\t* generated/reshape_r4.c Regenerated.\n\t* generated/reshape_r8.c Regenerated.\n\n2008-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/38135\n\t* gfortran.dg/reshape_pad_1.f90:  New test case.\n\nFrom-SVN: r141982", "tree": {"sha": "97cecaa39e4576d0bc34005844bc138cb8810cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cecaa39e4576d0bc34005844bc138cb8810cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/042fed7915f1e924be61128d6409ad3eee2fe0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/042fed7915f1e924be61128d6409ad3eee2fe0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/042fed7915f1e924be61128d6409ad3eee2fe0a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/042fed7915f1e924be61128d6409ad3eee2fe0a2/comments", "author": null, "committer": null, "parents": [{"sha": "7a401a0df37dd6d55bf20b75ddf977f1b14c98f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a401a0df37dd6d55bf20b75ddf977f1b14c98f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a401a0df37dd6d55bf20b75ddf977f1b14c98f7"}], "stats": {"total": 152, "additions": 100, "deletions": 52}, "files": [{"sha": "a2b30961fd4671c711ff14be089420a8bf5b1e52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -1,3 +1,8 @@\n+2008-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/38135\n+\t* gfortran.dg/reshape_pad_1.f90:  New test case.\n+\n 2008-11-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/37362"}, {"sha": "33afd89e5b36ea0808fec30b71d673faeeb56ca5", "filename": "gcc/testsuite/gfortran.dg/reshape_pad_1.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_pad_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_pad_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_pad_1.f90?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! PR 38135 - pad to RESHAPE didn't work correctly when SOURCE\n+! was an empty array.\n+\n+program main\n+  implicit none\n+  integer, parameter :: N = 3\n+  integer(kind=1) :: A1(N,N)\n+  integer(kind=1) :: b1(n+1)\n+  integer(kind=4) :: A4(n,n)\n+  integer(kind=4) :: b4(n+1)\n+  character(len=9) :: line\n+\n+  b1 = (/ 1, 2, 2, 2 /)\n+\n+  A1(1:N,1:N)=reshape(A1(1:0,1),(/N,N/),b1)\n+  write(unit=line,fmt='(100i1)') A1\n+  if (line .ne. \"122212221\") call abort\n+\n+  b4 = (/ 3, 4, 4, 4 /)\n+\n+  a4 = reshape(a4(:0,1),(/n,n/),b4)\n+  write(unit=line,fmt='(100i1)') a4\n+  if (line .ne. \"344434443\") call abort\n+end program main"}, {"sha": "95f526a5374d14c2561a6b1582b6d39f18465eec", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -1,3 +1,21 @@\n+2008-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/38135\n+\t* m4/reshape.m4:  Correct bounds checking when PAD is present.\n+\tTreat PAD as if it were SOURCE when SOURCE is empty.\n+\t* intrinsics/reshape_generic.c:  Likewise.\n+\t* generated/reshape_c10.c Regenerated.\n+\t* generated/reshape_c16.c Regenerated.\n+\t* generated/reshape_c4.c Regenerated.\n+\t* generated/reshape_c8.c Regenerated.\n+\t* generated/reshape_i16.c Regenerated.\n+\t* generated/reshape_i4.c Regenerated.\n+\t* generated/reshape_i8.c Regenerated.\n+\t* generated/reshape_r10.c Regenerated.\n+\t* generated/reshape_r16.c Regenerated.\n+\t* generated/reshape_r4.c Regenerated.\n+\t* generated/reshape_r8.c Regenerated.\n+\n 2008-11-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/38097"}, {"sha": "076ea592130dcbe261e0ca024360d6e98cd4bd20", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_10);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "968fb9c34ce88122f21f4cb9d847e2c82f491f68", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_16);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "00c95e7787cc4420044fbcfe7d4ff8ded8e5b529", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_4);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "9d355a51370cdef820a030e76c1b2dd77bba566c", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_8);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "2888511556974ca3214c206023c510715bee6006", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_16);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "021ecfbc314a43c55972fc1afd674a36972d749d", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_4);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "9a2ce8d45ddf98d6457f4cdf979fdc4bf84439bb", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_8);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "100173f70d0c10ea90f4cd8a013df37c0084ff87", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_REAL_10);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "8a344e0b6ba86c4223a7daf92a3603678dcce092", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_REAL_16);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "ea8c24a2b66ebf5d606e31174949619e6a158183", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_REAL_4);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "d8855e7874e60257cc93acca1a619b8262a4bf50", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -137,7 +137,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -262,16 +262,16 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (GFC_REAL_8);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}, {"sha": "04b87271e9b502838623f91f6774ead44c84ec50", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -126,7 +126,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -249,16 +249,16 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * size;\n+\t  sstride0 = pstride[0] * size;\n \t}\n     }\n "}, {"sha": "b7e321e3bb42a2dfd8ba940320b15030dad3dfb5", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042fed7915f1e924be61128d6409ad3eee2fe0a2/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=042fed7915f1e924be61128d6409ad3eee2fe0a2", "patch": "@@ -141,7 +141,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n       source_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n \n-      if (rs != source_extent)\n+      if (rs < source_extent || (rs > source_extent && !pad))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -266,16 +266,16 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n   if (sempty)\n     {\n-      /* Switch immediately to the pad array.  */\n+      /* Pretend we are using the pad array the first time around, too.  */\n       src = pptr;\n-      sptr = NULL;\n+      sptr = pptr;\n       sdim = pdim;\n       for (dim = 0; dim < pdim; dim++)\n \t{\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof ('rtype_name`);\n+\t  sstride0 = pstride[0];\n \t}\n     }\n "}]}