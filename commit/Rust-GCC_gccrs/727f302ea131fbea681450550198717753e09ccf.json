{"sha": "727f302ea131fbea681450550198717753e09ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3ZjMwMmVhMTMxZmJlYTY4MTQ1MDU1MDE5ODcxNzc1M2UwOWNjZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-06-14T21:26:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-06-14T21:26:33Z"}, "message": "tree-vrp.c (local_fold): Remove.\n\n        * tree-vrp.c (local_fold): Remove.\n        (simplify_using_ranges): Use fold_convert, not local_fold.  Tweak\n        DIV/MOD case slightly for readability.\n\nFrom-SVN: r100955", "tree": {"sha": "6f94ed6b70d7fbbb088dda9f4a7bb7cde1535afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f94ed6b70d7fbbb088dda9f4a7bb7cde1535afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/727f302ea131fbea681450550198717753e09ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727f302ea131fbea681450550198717753e09ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727f302ea131fbea681450550198717753e09ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727f302ea131fbea681450550198717753e09ccf/comments", "author": null, "committer": null, "parents": [{"sha": "5721f015bb5eb99c62db317eb76f6e8e0eadb6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5721f015bb5eb99c62db317eb76f6e8e0eadb6c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5721f015bb5eb99c62db317eb76f6e8e0eadb6c2"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "d566bff9409880b7c894f9e8ace8610605689dd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727f302ea131fbea681450550198717753e09ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727f302ea131fbea681450550198717753e09ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=727f302ea131fbea681450550198717753e09ccf", "patch": "@@ -1,3 +1,9 @@\n+2005-06-14  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (local_fold): Remove.\n+\t(simplify_using_ranges): Use fold_convert, not local_fold.  Tweak\n+\tDIV/MOD case slightly for readability.\n+\n 2005-06-14  Frank Ch. Eigler  <fche@redhat.com>\n \n \tPR mudflap/21023"}, {"sha": "24078a7cb77f68f8a8b067f49db0363a60ac3ca1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727f302ea131fbea681450550198717753e09ccf/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727f302ea131fbea681450550198717753e09ccf/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=727f302ea131fbea681450550198717753e09ccf", "patch": "@@ -94,21 +94,6 @@ static sbitmap blocks_visited;\n    of values that SSA name N_I may take.  */\n static value_range_t **vr_value;\n \n-/* Local version of fold that doesn't introduce cruft.  */\n-\n-static tree\n-local_fold (tree t)\n-{\n-  t = fold (t);\n-\n-  /* Strip away useless type conversions.  Both the NON_LVALUE_EXPR that\n-     may have been added by fold, and \"useless\" type conversions that might\n-     now be apparent due to propagation.  */\n-  STRIP_USELESS_TYPE_CONVERSION (t);\n-\n-  return t;\n-}\n-\n /* Given a comparison code, return its opposite.  Note that this is *not*\n    the same as inverting its truth value (invert_tree_comparison).  Here we\n    just want to literally flip the comparison around.\n@@ -3466,14 +3451,17 @@ simplify_using_ranges (void)\n \t\t      tree op1 = TREE_OPERAND (rhs, 1);\n \n \t\t      if (rhs_code == TRUNC_DIV_EXPR)\n-\t\t\tt = build (RSHIFT_EXPR, TREE_TYPE (op0), op0,\n-\t\t\t\t   build_int_cst (NULL_TREE, tree_log2 (op1)));\n+\t\t\t{\n+\t\t\t  t = build_int_cst (NULL_TREE, tree_log2 (op1));\n+\t\t\t  t = build (RSHIFT_EXPR, TREE_TYPE (op0), op0, t);\n+\t\t\t}\n \t\t      else\n-\t\t\tt = build (BIT_AND_EXPR, TREE_TYPE (op0), op0,\n-\t\t\t\t   local_fold (build (MINUS_EXPR,\n-\t\t\t\t\t\t      TREE_TYPE (op1),\n-\t\t\t\t\t\t      op1,\n-\t\t\t\t\t\t      integer_one_node)));\n+\t\t\t{\n+\t\t\t  t = build_int_cst (TREE_TYPE (op1), 1);\n+\t\t\t  t = int_const_binop (MINUS_EXPR, op1, t, 0);\n+\t\t\t  t = fold_convert (TREE_TYPE (op0), t);\n+\t\t\t  t = build2 (BIT_AND_EXPR, TREE_TYPE (op0), op0, t);\n+\t\t\t}\n \n \t\t      TREE_OPERAND (stmt, 1) = t;\n \t\t      update_stmt (stmt);"}]}