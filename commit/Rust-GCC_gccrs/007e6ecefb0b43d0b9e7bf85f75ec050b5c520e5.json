{"sha": "007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3ZTZlY2VmYjBiNDNkMGI5ZTdiZjg1Zjc1ZWMwNTBiNWM1MjBlNQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-07T15:32:41Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-08T12:57:25Z"}, "message": "lex: accept zero codepoints in strings\n\nZero characters (codepoints) are acceptable in strings. The current\nLexer::parse_string skipped such zero codepoints by accidents. The\nzero codepoint was also used as error/skip indicator, but that is only\ntrue if the third argument of utf8_escape_pair is true (yes, it is\ncalled pair, but is a triple).\n\nAdd a testcase that checks the (sub)strings are separated by zero\nchars. Since we cannot slice strings yet this uses extern \"C\"\nfunctions, printf and memchr.", "tree": {"sha": "2b6a956ccd18a9c4671d38c78bb6b29bdcde5a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6a956ccd18a9c4671d38c78bb6b29bdcde5a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5/comments", "author": null, "committer": null, "parents": [{"sha": "41e3fb5d2018690243a38c79a60fcc32eb73b013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3fb5d2018690243a38c79a60fcc32eb73b013"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "49b6b6d32a749693229a90017bf073d1d3c9b67f", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "patch": "@@ -1827,7 +1827,8 @@ Lexer::parse_string (Location loc)\n \t  else\n \t    length += std::get<1> (utf8_escape_pair);\n \n-\t  if (current_char32 != Codepoint (0))\n+\t  if (current_char32 != Codepoint (0)\n+\t      || !std::get<2> (utf8_escape_pair))\n \t    str += current_char32;\n \n \t  // required as parsing utf8 escape only changes current_char"}, {"sha": "e7fba0d1372a37a99719cefdacc17539dddea8de", "filename": "gcc/testsuite/rust/execute/torture/str-zero.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs?ref=007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-output \"bar foo baz foobar\\n\" } */\n+extern \"C\"\n+{\n+  fn printf(s: *const i8, ...);\n+  fn memchr(s: *const i8, c: u8, n: usize) -> *const i8;\n+}\n+\n+pub fn main () -> i32\n+{\n+  let f = \"%s %s %s %s\\n\\0\";\n+  let s = \"bar\\0\\\n+           foo\\\n+           \\x00\\\n+           baz\\u{0000}\\\n+           foobar\\0\";\n+  let cf = f as *const str as *const i8;\n+  let cs = s as *const str as *const i8;\n+  unsafe\n+    {\n+      let cs2 = memchr (cs, b'f', 5);\n+      let cs3 = memchr (cs2, b'b', 5);\n+      let cs4 = memchr (cs3, b'f', 5);\n+      printf (cf, cs, cs2, cs3, cs4);\n+    }\n+  0\n+}"}]}