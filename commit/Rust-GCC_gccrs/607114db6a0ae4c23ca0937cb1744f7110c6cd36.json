{"sha": "607114db6a0ae4c23ca0937cb1744f7110c6cd36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3MTE0ZGI2YTBhZTRjMjNjYTA5MzdjYjE3NDRmNzExMGM2Y2QzNg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2016-07-04T10:25:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:25:35Z"}, "message": "sem_type.adb, [...]: Minor reformatting and typo fix.\n\n2016-07-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_type.adb, einfo.ads, freeze.adb, exp_ch6.adb: Minor reformatting\n\tand typo fix.\n\nFrom-SVN: r237966", "tree": {"sha": "265397018d172e8a113a6083247052fa6c5731d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/265397018d172e8a113a6083247052fa6c5731d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/607114db6a0ae4c23ca0937cb1744f7110c6cd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607114db6a0ae4c23ca0937cb1744f7110c6cd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607114db6a0ae4c23ca0937cb1744f7110c6cd36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607114db6a0ae4c23ca0937cb1744f7110c6cd36/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c308e7620eccfbb8f0b5859aab351e3192d761c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c308e7620eccfbb8f0b5859aab351e3192d761c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c308e7620eccfbb8f0b5859aab351e3192d761c1"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "708b629a54b2dd531a72c1aa199c0b5dfc887ebe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=607114db6a0ae4c23ca0937cb1744f7110c6cd36", "patch": "@@ -1,3 +1,8 @@\n+2016-07-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_type.adb, einfo.ads, freeze.adb, exp_ch6.adb: Minor reformatting\n+\tand typo fix.\n+\n 2016-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb, sem_type.adb, sem_ch12.adb, xref_lib.adb,"}, {"sha": "e2a8d6115f1ea1c6002a308178c6378129d4ce67", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=607114db6a0ae4c23ca0937cb1744f7110c6cd36", "patch": "@@ -2288,7 +2288,7 @@ package Einfo is\n \n --    Is_Bit_Packed_Array (Flag122) [implementation base type only]\n --       Defined in all entities. This flag is set for a packed array type that\n---       is bit packed (i.e. the component size is known by the front end and\n+--       is bit-packed (i.e. the component size is known by the front end and\n --       is in the range 1-7, 9-15, 17-31, or 33-63). Is_Packed is always set\n --       if Is_Bit_Packed_Array is set, but it is possible for Is_Packed to be\n --       set without Is_Bit_Packed_Array if the component size is not known by\n@@ -2907,7 +2907,7 @@ package Einfo is\n --       out that the component size doesn't require packing, the Is_Packed\n --       flag gets turned off.\n \n---       In the bit packed array case (i.e. component size is known at compile\n+--       In the bit-packed array case (i.e. component size is known at compile\n --       time and is 1-7, 9-15, 17-31 or 33-63), Is_Bit_Packed_Array will be\n --       set once the array type is frozen.\n --\n@@ -2917,7 +2917,7 @@ package Einfo is\n --    Is_Packed_Array_Impl_Type (Flag138)\n --       Defined in all entities. This flag is set on the entity for the type\n --       used to implement a packed array (either a modular type or a subtype\n---       of Packed_Bytes{1,2,4} in the bit packed array case, a regular array\n+--       of Packed_Bytes{1,2,4} in the bit-packed array case, a regular array\n --       in the non-standard enumeration index case). It is set if and only\n --       if the type appears in the Packed_Array_Impl_Type field of some other\n --       entity. It is used by the back end to activate the special processing\n@@ -3731,10 +3731,10 @@ package Einfo is\n --    Packed_Array_Impl_Type (Node23)\n --       Defined in array types and subtypes, except for the string literal\n --       subtype case, if the corresponding type is packed and implemented\n---       specially (either bit packed or packed to eliminate holes in the\n+--       specially (either bit-packed or packed to eliminate holes in the\n --       non-contiguous enumeration index types). References the type used to\n --       represent the packed array, which is either a modular type for short\n---       static arrays or an array of System.Unsigned in the bit packed case,\n+--       static arrays or an array of System.Unsigned in the bit-packed case,\n --       or a regular array in the non-standard enumeration index case). Note\n --       that in some situations (internal types and references to fields of\n --       variant records), it is not always possible to construct this type in"}, {"sha": "cc593537892b9085a8432210aaf5bde937015553", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=607114db6a0ae4c23ca0937cb1744f7110c6cd36", "patch": "@@ -1834,7 +1834,7 @@ package body Exp_Ch6 is\n             then\n                Add_Call_By_Copy_Code;\n \n-            --  References to components of bit packed arrays are expanded\n+            --  References to components of bit-packed arrays are expanded\n             --  at this point, rather than at the point of analysis of the\n             --  actuals, to handle the expansion of the assignment to\n             --  [in] out parameters.\n@@ -1858,7 +1858,7 @@ package body Exp_Ch6 is\n             then\n                Add_Simple_Call_By_Copy_Code;\n \n-            --  References to slices of bit packed arrays are expanded\n+            --  References to slices of bit-packed arrays are expanded\n \n             elsif Is_Ref_To_Bit_Packed_Slice (Actual) then\n                Add_Call_By_Copy_Code;\n@@ -2038,7 +2038,7 @@ package body Exp_Ch6 is\n          --  Processing for IN parameters\n \n          else\n-            --  For IN parameters in the bit packed array case, we expand an\n+            --  For IN parameters in the bit-packed array case, we expand an\n             --  indexed component (the circuit in Exp_Ch4 deliberately left\n             --  indexed components appearing as actuals untouched, so that\n             --  the special processing above for the OUT and IN OUT cases\n@@ -2052,7 +2052,7 @@ package body Exp_Ch6 is\n                Reset_Packed_Prefix;\n                Expand_Packed_Element_Reference (Actual);\n \n-            --  If we have a reference to a bit packed array, we copy it, since\n+            --  If we have a reference to a bit-packed array, we copy it, since\n             --  the actual must be byte aligned.\n \n             --  Is this really necessary in all cases???"}, {"sha": "173eae8a5e9dc94aadb3e47b5a3faaf732bcf0a8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=607114db6a0ae4c23ca0937cb1744f7110c6cd36", "patch": "@@ -2779,7 +2779,7 @@ package body Freeze is\n \n          if Is_Bit_Packed_Array (Arr) then\n \n-            --  Check number of elements for bit packed arrays that come from\n+            --  Check number of elements for bit-packed arrays that come from\n             --  source and have compile time known ranges. The bit-packed\n             --  arrays circuitry does not support arrays with more than\n             --  Integer'Last + 1 elements, and when this restriction is\n@@ -2861,7 +2861,7 @@ package body Freeze is\n \n          --  If any of the index types was an enumeration type with a non-\n          --  standard rep clause, then we indicate that the array type is\n-         --  always packed (even if it is not bit packed).\n+         --  always packed (even if it is not bit-packed).\n \n          if Non_Standard_Enum then\n             Set_Has_Non_Standard_Rep (Base_Type (Arr));\n@@ -2870,7 +2870,7 @@ package body Freeze is\n \n          Set_Component_Alignment_If_Not_Set (Arr);\n \n-         --  If the array is packed and bit packed or packed to eliminate holes\n+         --  If the array is packed and bit-packed or packed to eliminate holes\n          --  in the non-contiguous enumeration index types, we must create the\n          --  packed array type to be used to actually implement the type. This\n          --  is only needed for real array types (not for string literal types,\n@@ -4329,7 +4329,7 @@ package body Freeze is\n          --  component clauses, where we must check the size. This is not done\n          --  till the freeze point since for fixed-point types, we do not know\n          --  the size until the type is frozen. Similar processing applies to\n-         --  bit packed arrays.\n+         --  bit-packed arrays.\n \n          if Is_First_Subtype (Rec) then\n             Comp := First_Component (Rec);"}, {"sha": "3bc27db937b30f325f1202d13c2de54a64be3ab0", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607114db6a0ae4c23ca0937cb1744f7110c6cd36/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=607114db6a0ae4c23ca0937cb1744f7110c6cd36", "patch": "@@ -1607,7 +1607,7 @@ package body Sem_Type is\n                   Act1 := Left_Opnd (N);\n                   Act2 := Right_Opnd (N);\n \n-                  --  Use the type of tye second formal, so as to include\n+                  --  Use the type of the second formal, so as to include\n                   --  exponentiation, where the exponent may be ambiguous and\n                   --  the result non-universal.\n "}]}