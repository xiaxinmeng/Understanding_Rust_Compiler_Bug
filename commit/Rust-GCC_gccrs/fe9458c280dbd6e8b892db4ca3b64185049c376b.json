{"sha": "fe9458c280dbd6e8b892db4ca3b64185049c376b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5NDU4YzI4MGRiZDZlOGI4OTJkYjRjYTNiNjQxODUwNDljMzc2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-12T15:00:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-12T15:00:41Z"}, "message": "Fix up flag_cunroll_grow_size handling in presence of optimize attr [PR96535]\n\nAs the testcase in the PR shows (not included in the patch, as\nit seems quite fragile to observe unrolling in the IL), the introduction of\nflag_cunroll_grow_size broke optimize attribute related to loop unrolling.\nThe problem is that the new option flag is set (if not set explicitly) only\nin process_options and in rs6000_option_override_internal (and there only if\nglobal_init_p).  So, this means that while it is Optimization option, it\nwill only be set based on the command line -funroll-loops/-O3/-fpeel-loops\nor -funroll-all-loops, which means that if command line does include any of\nthose, it is enabled even for functions that will through optimize attribute\nhave all of those disabled, and if command line does not include those,\nit will not be enabled for functions that will through optimize attribute\nhave any of those enabled.\n\nprocess_options is called just once, so IMHO it should be handling only\nnon-Optimization option adjustments (various other options suffer from that\ntoo, but as this is a regression from 10.1 on the 10 branch, changing those\nis not appropriate).  Similarly, rs6000_option_override_internal is called\nonly once (with global_init_p) and then for target attribute handling, but\nnot for optimize attribute handling.\n\nThis patch moves the unrolling related handling from process_options into\nfinish_options which is invoked whenever the options are being finalized,\nand the rs6000 specific parts into the override_options_after_change hook\nwhich is called for optimize attribute handling (and unfortunately also\nth cfun changes, but what the hook does is cheap) and I've added a call to\nthat from rs6000_override_options_internal, so it is also called on cmdline\nprocessing and for target attribute.\n\nFurthermore, it stops using AUTODETECT_VALUE, which can work only once,\nand instead uses the global_options_set.x_... flags.\n\n2020-08-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96535\n\t* toplev.c (process_options): Move flag_unroll_loops and\n\tflag_cunroll_grow_size handling from here to ...\n\t* opts.c (finish_options): ... here.  For flag_cunroll_grow_size,\n\tdon't check for AUTODETECT_VALUE, but instead check\n\topts_set->x_flag_cunroll_grow_size.\n\t* common.opt (funroll-completely-grow-size): Default to 0.\n\t* config/rs6000/rs6000.c (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE):\n\tRedefine.\n\t(rs6000_override_options_after_change): New function.\n\t(rs6000_option_override_internal): Call it.  Move there the\n\tflag_cunroll_grow_size, unroll_only_small_loops and\n\tflag_rename_registers handling.", "tree": {"sha": "9156a7d995e9daa69fbe8f8b98c8f918db9df51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9156a7d995e9daa69fbe8f8b98c8f918db9df51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9458c280dbd6e8b892db4ca3b64185049c376b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9458c280dbd6e8b892db4ca3b64185049c376b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9458c280dbd6e8b892db4ca3b64185049c376b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9458c280dbd6e8b892db4ca3b64185049c376b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12026e9dd19caee8ce2f53e703564480e9709d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12026e9dd19caee8ce2f53e703564480e9709d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12026e9dd19caee8ce2f53e703564480e9709d4"}], "stats": {"total": 82, "additions": 49, "deletions": 33}, "files": [{"sha": "084e28ee6172c3ecf2e05ed7d9e38e7da63b054e", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fe9458c280dbd6e8b892db4ca3b64185049c376b", "patch": "@@ -2884,7 +2884,7 @@ Common Report Var(flag_unroll_all_loops) Optimization\n Perform loop unrolling for all loops.\n \n funroll-completely-grow-size\n-Undocumented Var(flag_cunroll_grow_size) Init(2) Optimization\n+Undocumented Var(flag_cunroll_grow_size) Optimization\n ; Internal undocumented flag, allow size growth during complete unrolling\n \n ; Nonzero means that loop optimizer may assume that the induction variables"}, {"sha": "fe93cf6ff2b2fb46e3f6f49f9f657fc8f8bdb646", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fe9458c280dbd6e8b892db4ca3b64185049c376b", "patch": "@@ -1493,6 +1493,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE rs6000_promote_function_mode\n \n+#undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE rs6000_override_options_after_change\n+\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY rs6000_return_in_memory\n \n@@ -3420,6 +3423,34 @@ rs6000_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n   return NULL;\n }\n \n+/* This target function is similar to the hook TARGET_OPTION_OVERRIDE\n+   but is called when the optimize level is changed via an attribute or\n+   pragma or when it is reset at the end of the code affected by the\n+   attribute or pragma.  It is not called at the beginning of compilation\n+   when TARGET_OPTION_OVERRIDE is called so if you want to perform these\n+   actions then, you should have TARGET_OPTION_OVERRIDE call\n+   TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE.  */\n+\n+static void\n+rs6000_override_options_after_change (void)\n+{\n+  /* Explicit -funroll-loops turns -munroll-only-small-loops off, and\n+     turns -frename-registers on.  */\n+  if ((global_options_set.x_flag_unroll_loops && flag_unroll_loops)\n+       || (global_options_set.x_flag_unroll_all_loops\n+\t   && flag_unroll_all_loops))\n+    {\n+      if (!global_options_set.x_unroll_only_small_loops)\n+\tunroll_only_small_loops = 0;\n+      if (!global_options_set.x_flag_rename_registers)\n+\tflag_rename_registers = 1;\n+      if (!global_options_set.x_flag_cunroll_grow_size)\n+\tflag_cunroll_grow_size = 1;\n+    }\n+  else if (!global_options_set.x_flag_cunroll_grow_size)\n+    flag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n+}\n+\n /* Override command line options.\n \n    Combine build-specific configuration information with options\n@@ -4647,30 +4678,15 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t   param_sched_pressure_algorithm,\n \t\t\t   SCHED_PRESSURE_MODEL);\n \n-      /* Explicit -funroll-loops turns -munroll-only-small-loops off, and\n-\t turns -frename-registers on.  */\n-      if ((global_options_set.x_flag_unroll_loops && flag_unroll_loops)\n-\t   || (global_options_set.x_flag_unroll_all_loops\n-\t       && flag_unroll_all_loops))\n-\t{\n-\t  if (!global_options_set.x_unroll_only_small_loops)\n-\t    unroll_only_small_loops = 0;\n-\t  if (!global_options_set.x_flag_rename_registers)\n-\t    flag_rename_registers = 1;\n-\t  if (!global_options_set.x_flag_cunroll_grow_size)\n-\t    flag_cunroll_grow_size = 1;\n-\t}\n-      else\n-\tif (!global_options_set.x_flag_cunroll_grow_size)\n-\t  flag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n-\n       /* If using typedef char *va_list, signal that\n \t __builtin_va_start (&ap, 0) can be optimized to\n \t ap = __builtin_next_arg (0).  */\n       if (DEFAULT_ABI != ABI_V4)\n \ttargetm.expand_builtin_va_start = NULL;\n     }\n \n+  rs6000_override_options_after_change ();\n+\n   /* If not explicitly specified via option, decide whether to generate indexed\n      load/store instructions.  A value of -1 indicates that the\n      initial value of this variable has not been overwritten. During"}, {"sha": "c5c60581f70220a89289a59e5f4a6b1a282fd8b9", "filename": "gcc/opts.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fe9458c280dbd6e8b892db4ca3b64185049c376b", "patch": "@@ -1142,11 +1142,21 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Control IPA optimizations based on different -flive-patching level.  */\n   if (opts->x_flag_live_patching)\n-    {\n-      control_options_for_live_patching (opts, opts_set,\n-\t\t\t\t\t opts->x_flag_live_patching,\n-\t\t\t\t\t loc);\n-    }\n+    control_options_for_live_patching (opts, opts_set,\n+\t\t\t\t       opts->x_flag_live_patching,\n+\t\t\t\t       loc);\n+\n+  /* Unrolling all loops implies that standard loop unrolling must also\n+     be done.  */\n+  if (opts->x_flag_unroll_all_loops)\n+    opts->x_flag_unroll_loops = 1;\n+\n+  /* Allow cunroll to grow size accordingly.  */\n+  if (!opts_set->x_flag_cunroll_grow_size)\n+    opts->x_flag_cunroll_grow_size\n+      = (opts->x_flag_unroll_loops\n+         || opts->x_flag_peel_loops\n+         || opts->x_optimize >= 3);\n }\n \n #define LEFT_COLUMN\t27"}, {"sha": "07457d08c3aa6f50fb5b14c60541cfe623a1fdf4", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9458c280dbd6e8b892db4ca3b64185049c376b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fe9458c280dbd6e8b892db4ca3b64185049c376b", "patch": "@@ -1474,16 +1474,6 @@ process_options (void)\n       flag_abi_version = 2;\n     }\n \n-  /* Unrolling all loops implies that standard loop unrolling must also\n-     be done.  */\n-  if (flag_unroll_all_loops)\n-    flag_unroll_loops = 1;\n-\n-  /* Allow cunroll to grow size accordingly.  */\n-  if (flag_cunroll_grow_size == AUTODETECT_VALUE)\n-    flag_cunroll_grow_size\n-      = flag_unroll_loops || flag_peel_loops || optimize >= 3;\n-\n   /* web and rename-registers help when run after loop unrolling.  */\n   if (flag_web == AUTODETECT_VALUE)\n     flag_web = flag_unroll_loops;"}]}