{"sha": "46eefac471e2770398bfaa0a65ec1d1d02f4f756", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlZWZhYzQ3MWUyNzcwMzk4YmZhYTBhNjVlYzFkMWQwMmY0Zjc1Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-02T12:51:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-02T12:51:05Z"}, "message": "h8300.h: Fix comment typos.\n\n\t* config/h8300/h8300.h: Fix comment typos.\n\t* config/h8300/h8300.md: Likewise.\n\t* config/h8300/lib1funcs.asm: Likewise.\n\nFrom-SVN: r58748", "tree": {"sha": "c36df6f50a25f90134c20bd169f511418bf2f154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36df6f50a25f90134c20bd169f511418bf2f154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46eefac471e2770398bfaa0a65ec1d1d02f4f756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eefac471e2770398bfaa0a65ec1d1d02f4f756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eefac471e2770398bfaa0a65ec1d1d02f4f756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eefac471e2770398bfaa0a65ec1d1d02f4f756/comments", "author": null, "committer": null, "parents": [{"sha": "102b60d127548a679bd4f65f724c134964cedbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102b60d127548a679bd4f65f724c134964cedbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102b60d127548a679bd4f65f724c134964cedbf6"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "76133575f5bd298c53cd2d6fb8d25fd9d73fee3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46eefac471e2770398bfaa0a65ec1d1d02f4f756", "patch": "@@ -1,3 +1,9 @@\n+2002-11-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h: Fix comment typos.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/h8300/lib1funcs.asm: Likewise.\n+\n 2002-11-02  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \tRevert this change:"}, {"sha": "075ddb8bcb02202b32c6498779eead3e074a8b9a", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=46eefac471e2770398bfaa0a65ec1d1d02f4f756", "patch": "@@ -125,7 +125,7 @@ extern int target_flags;\n \n /* Align all values on the H8/300H the same way as the H8/300.  Specifically,\n    32 bit and larger values are aligned on 16 bit boundaries.\n-   This is all the hardware requires, but the default is 32 bits for the 300H.\n+   This is all the hardware requires, but the default is 32 bits for the H8/300H.\n    ??? Now watch someone add hardware floating point requiring 32 bit\n    alignment.  */\n #define TARGET_ALIGN_300 (target_flags & MASK_ALIGN_300)\n@@ -977,7 +977,7 @@ struct cum_arg\n #define Pmode (TARGET_H8300H || TARGET_H8300S ? SImode : HImode)\n \n /* ANSI C types.\n-   We use longs for the 300H because ints can be 16 or 32.\n+   We use longs for the H8/300H and the H8S because ints can be 16 or 32.\n    GCC requires SIZE_TYPE to be the same size as pointers.  */\n #define SIZE_TYPE (TARGET_H8300 ? \"unsigned int\" : \"long unsigned int\")\n #define PTRDIFF_TYPE (TARGET_H8300 ? \"int\" : \"long int\")"}, {"sha": "d794e44b111ae238ff53bde29c1327267e8b54c8", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=46eefac471e2770398bfaa0a65ec1d1d02f4f756", "patch": "@@ -1610,7 +1610,7 @@\n   [(set_attr \"length\" \"2,10\")\n    (set_attr \"cc\" \"set_znv,set_znv\")])\n \n-;; The compiler can synthesize a 300H variant of this which is\n+;; The compiler can synthesize a H8/300H variant of this which is\n ;; just as efficient as one that we'd create\n (define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -1672,7 +1672,7 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_znv\")])\n \n-;; The compiler can synthesize a 300H variant of this which is\n+;; The compiler can synthesize a H8/300H variant of this which is\n ;; just as efficient as one that we'd create\n (define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")"}, {"sha": "2f62572f225a41be3bb93dc369a413d3eb503c8e", "filename": "gcc/config/h8300/lib1funcs.asm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eefac471e2770398bfaa0a65ec1d1d02f4f756/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm?ref=46eefac471e2770398bfaa0a65ec1d1d02f4f756", "patch": "@@ -497,10 +497,10 @@ reti:\n \tPOPP\tS2P\n \trts\n \n-\t; takes A0/A1 numerator (A0P for 300H)\n-\t; A2/A3 denominator (A1P for 300H)\n-\t; returns A0/A1 quotient (A0P for 300H)\n-\t; S0/S1 remainder (S0P for 300H)\n+\t; takes A0/A1 numerator (A0P for H8/300H)\n+\t; A2/A3 denominator (A1P for H8/300H)\n+\t; returns A0/A1 quotient (A0P for H8/300H)\n+\t; S0/S1 remainder (S0P for H8/300H)\n \t; trashes S2\n \n #ifdef __H8300__"}]}