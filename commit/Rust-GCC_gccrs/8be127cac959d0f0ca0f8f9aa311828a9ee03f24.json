{"sha": "8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlMTI3Y2FjOTU5ZDBmMGNhMGY4ZjlhYTMxMTgyOGE5ZWUwM2YyNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-13T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-13T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "c43f4ad1671848598a9cdcdf882efb588d8148ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c43f4ad1671848598a9cdcdf882efb588d8148ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/comments", "author": null, "committer": null, "parents": [{"sha": "af66094d037793773eb8a49597866457f2f6a104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af66094d037793773eb8a49597866457f2f6a104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af66094d037793773eb8a49597866457f2f6a104"}], "stats": {"total": 471, "additions": 470, "deletions": 1}, "files": [{"sha": "27cbf29206b47e8baf6266389ba3baff148ffd0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,225 @@\n+2020-10-12  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* builtins.c (mathfn_built_in_type): Use CFN_ enumerators.\n+\n+2020-10-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97381\n+\t* gimple-range-gori.cc (gori_compute::compute_operand2_range): If a range cannot be\n+\tcalculated through operand 2, return false.\n+\n+2020-10-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97378\n+\t* range-op.cc (operator_trunc_mod::wi_fold): Return VARYING for mod by zero.\n+\n+2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi: Document -Wanalyzer-write-to-const and\n+\t-Wanalyzer-write-to-string-literal.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97342\n+\tPR middle-end/97023\n+\tPR middle-end/96384\n+\t* builtins.c (access_ref::access_ref): Initialize new member.  Use\n+\tnew enum.\n+\t(access_ref::size_remaining): Define new member function.\n+\t(inform_access): Handle expressions referencing objects.\n+\t(gimple_call_alloc_size): Call get_size_range instead of get_range.\n+\t(gimple_call_return_array): New function.\n+\t(get_range): Rename...\n+\t(get_offset_range): ...to this.  Improve detection of ranges from\n+\ttypes of expressions.\n+\t(gimple_call_return_array): Adjust calls to get_range per above.\n+\t(compute_objsize): Same.  Set maximum size or offset instead of\n+\tfailing for unknown objects and handle more kinds of expressions.\n+\t(compute_objsize): Call access_ref::size_remaining.\n+\t(compute_objsize): Have transitional wrapper fail for pointers\n+\tinto unknown objects.\n+\t(expand_builtin_strncmp): Call access_ref::size_remaining and\n+\thandle new cases.\n+\t* builtins.h (access_ref::size_remaining): Declare new member function.\n+\t(access_ref::set_max_size_range): Define new member function.\n+\t(access_ref::add_ofset, access_ref::add_max_ofset): Same.\n+\t(access_ref::add_base0): New data member.\n+\t* calls.c (get_size_range): Change argument type.  Handle new\n+\tcondition.\n+\t* calls.h (get_size_range): Adjust signature.\n+\t(enum size_range_flags): Define new type.\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): Correct\n+\targument to get_size_range.\n+\t* tree-ssa-strlen.c (get_range): Handle anti-ranges.\n+\t(maybe_warn_overflow): Check DECL_P before assuming it's one.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96511\n+\tPR middle-end/96384\n+\t* builtins.c (get_range): Return full range of type when neither\n+\tvalue nor its range is available.  Fail for ranges inverted due\n+\tto the signedness of offsets.\n+\t(compute_objsize): Handle more special array members.  Handle\n+\tPOINTER_PLUS_EXPR and VIEW_CONVERT_EXPR that come up in front end\n+\tcode.\n+\t(access_ref::offset_bounded): Define new member function.\n+\t* builtins.h (access_ref::eval): New data member.\n+\t(access_ref::offset_bounded): New member function.\n+\t(access_ref::offset_zero): New member function.\n+\t(compute_objsize): Declare a new overload.\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref): Use\n+\tenum special_array_member.\n+\t* tree.c (component_ref_size): Use special_array_member.\n+\t* tree.h (special_array_member): Define a new type.\n+\t(component_ref_size): Change signature.\n+\n+2020-10-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (modref_summaries): Remove field IPA.\n+\t(class modref_summary_lto): New global variable.\n+\t(class modref_summaries_lto): New.\n+\t(modref_summary::modref_summary): Remove loads_lto and stores_lto.\n+\t(modref_summary::~modref_summary): Remove loads_lto and stores_lto.\n+\t(modref_summary::useful_p): Do not use lto_useful.\n+\t(modref_records_lto): New typedef.\n+\t(struct modref_summary_lto): New type.\n+\t(modref_summary_lto::modref_summary_lto): New member function.\n+\t(modref_summary_lto::~modref_summary_lto): New member function.\n+\t(modref_summary_lto::useful_p): New member function.\n+\t(modref_summary::dump): Do not handle lto.\n+\t(modref_summary_lto::dump): New member function.\n+\t(get_modref_function_summary): Use optimization_summary.\n+\t(merge_call_side_effects): Use optimization_summary.\n+\t(analyze_call): Use optimization_summary.\n+\t(struct summary_ptrs): New struture.\n+\t(analyze_load): Update to handle separate lto and non-lto summaries.\n+\t(analyze_store): Likewise.\n+\t(analyze_stmt): Likewise.\n+\t(remove_summary): Break out from ...\n+\t(analyze_function): ... here; update to handle seprated summaries.\n+\t(modref_summaries::insert): Do not handle lto summary.\n+\t(modref_summaries_lto::insert): New member function.\n+\t(modref_summaries::duplicate): Do not handle lto summary.\n+\t(modref_summaries_lto::duplicate): New member function.\n+\t(read_modref_records): Expect nolto_ret or lto_ret to be NULL>\n+\t(modref_write): Write lto summary.\n+\t(read_section): Handle separated summaries.\n+\t(modref_read): Initialize separated summaries.\n+\t(modref_transform): Handle separated summaries.\n+\t(pass_modref::execute): Turn summary to optimization_summary; handle\n+\tseparate summaries.\n+\t(ignore_edge): Handle separate summaries.\n+\t(ipa_merge_modref_summary_after_inlining): Likewise.\n+\t(collapse_loads): Likewise.\n+\t(modref_propagate_in_scc): Likewise.\n+\t(pass_ipa_modref::execute): Likewise.\n+\t(ipa_modref_c_finalize): Likewise.\n+\t* ipa-modref.h (modref_records_lto): Remove typedef.\n+\t(struct modref_summary): Remove stores_lto, loads_lto and finished\n+\tfields; remove lto_useful_p member function.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_slp_analyze_instance_dependence):\n+\tUse SLP_TREE_REPRESENTATIVE.\n+\t* tree-vectorizer.h (_slp_tree::vertex): New member used\n+\tfor graphds interfacing.\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Allocate space\n+\tfor PHI SLP children.\n+\t(vect_analyze_slp_backedges): New function filling in SLP\n+\tnode children for PHIs that correspond to backedge values.\n+\t(vect_analyze_slp): Call vect_analyze_slp_backedges for the\n+\tgraph.\n+\t(vect_slp_analyze_node_operations): Deal with a cyclic graph.\n+\t(vect_schedule_slp_instance): Likewise.\n+\t(vect_schedule_slp): Likewise.\n+\t(slp_copy_subtree): Remove.\n+\t(vect_slp_rearrange_stmts): Likewise.\n+\t(vect_attempt_slp_rearrange_stmts): Likewise.\n+\t(vect_slp_build_vertices): New functions.\n+\t(vect_slp_permute): Likewise.\n+\t(vect_slp_perms_eq): Likewise.\n+\t(vect_optimize_slp): Remove special code to elide\n+\tpermutations with SLP reductions.  Implement generic\n+\tpermute optimization.\n+\n+2020-10-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.c (arm_preferred_simd_mode): Use E_FOOmode\n+\tinstead of FOOmode.\n+\n+2020-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/97079\n+\t* internal-fn.c (internal_fn_stored_value_index): Handle also\n+\t.MASK_STORE_LANES.\n+\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Bail\n+\tout for unsupported TREE_TYPE.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_bb_partition_graph_r): Use visited\n+\thash-map.\n+\t(vect_bb_partition_graph): Likewise.\n+\n+2020-10-12  Duan bo  <duanbo3@huawei.com>\n+\n+\tPR target/96757\n+\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Add\n+\tthe identification and handling of the dropped situation in the\n+\tcond expression processing phase.\n+\n+2020-10-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/invoke.texi (nvptx's -misa): Update default to sm_35.\n+\n+2020-10-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/97349\n+\t* config/aarch64/arm_neon.h (vdupq_n_p8, vdupq_n_p16,\n+\tvdupq_n_p64, vdupq_n_s8, vdupq_n_s16, vdupq_n_u8, vdupq_n_u16):\n+\tFix argument type.\n+\n+2020-10-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_build_signbit_mask): New\n+\tfunction.\n+\t* config/s390/s390.c (s390_contiguous_bitmask_vector_p):\n+\tBitcast the argument to an integral mode.\n+\t(s390_expand_vec_init): Do not call\n+\ts390_contiguous_bitmask_vector_p with a scalar argument.\n+\t(s390_build_signbit_mask): New function.\n+\t* config/s390/vector.md (copysign<mode>3): Use bitwise\n+\toperations.\n+\n+2020-10-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97371\n+\t* range-op.cc (operator_rshift::op1_range): Ignore shifts larger than\n+\tor equal to type precision.\n+\n+2020-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-modref.c (merge_call_side_effects): Clear modref_parm_map\n+\tfields in the vector.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Set matches to true\n+\tafter successful discovery but forced split.\n+\n+2020-10-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.opt (-msoft-stack-reserve-local): Rename to ...\n+\t(-msoft-stack-reserve-local=): ... this.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97357\n+\t* tree-ssa-loop-split.c (ssa_semi_invariant_p): Abnormal\n+\tSSA names are not semi invariant.\n+\n 2020-10-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.c (darwin_globalize_label): Make a subset of"}, {"sha": "4d019bc967267264f9dfb78bfc013e596d5aea1a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1 +1 @@\n-20201012\n+20201013"}, {"sha": "b8c8470903f06715d204bcd50e79c35e3ae8ff56", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,8 @@\n+2020-10-12  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* libgnat/a-ngelfu.ads (Sin, Cos): Make the single-argument\n+\tfunctions inline.\n+\n 2020-10-11  Alexandre Oliva  <oliva@adacore.com>\n \n \t* libgnat/a-numaux.ads: Make all imports Intrinsic."}, {"sha": "5930954dfcc72a2e0155c08fc17b2172848baee6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,58 @@\n+2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97258\n+\t* engine.cc (impl_region_model_context::on_escaped_function): New\n+\tvfunc.\n+\t(exploded_graph::add_function_entry): Use m_functions_with_enodes\n+\tto implement idempotency.\n+\t(add_any_callbacks): New.\n+\t(exploded_graph::build_initial_worklist): Use the above to find\n+\tcallbacks that are reachable from global initializers.\n+\t(exploded_graph::on_escaped_function): New.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::on_escaped_function): New decl.\n+\t(exploded_graph::on_escaped_function): New decl.\n+\t(exploded_graph::m_functions_with_enodes): New field.\n+\t* region-model-reachability.cc\n+\t(reachable_regions::reachable_regions): Replace \"store\" param with\n+\t\"model\" param; use it to initialize m_model.\n+\t(reachable_regions::add): When getting the svalue for the region,\n+\tcall get_store_value on the model rather than using an initial\n+\tvalue.\n+\t(reachable_regions::mark_escaped_clusters): Add ctxt param and\n+\tuse it to call on_escaped_function when a function_region escapes.\n+\t* region-model-reachability.h\n+\t(reachable_regions::reachable_regions): Replace \"store\" param with\n+\t\"model\" param.\n+\t(reachable_regions::mark_escaped_clusters): Add ctxt param.\n+\t(reachable_regions::m_model): New field.\n+\t* region-model.cc (region_model::handle_unrecognized_call): Update\n+\tfor change in reachable_regions ctor.\n+\t(region_model::handle_unrecognized_call): Pass ctxt to\n+\tmark_escaped_clusters.\n+\t(region_model::get_reachable_svalues): Update for change in\n+\treachable_regions ctor.\n+\t(region_model::get_initial_value_for_global): Read-only variables\n+\tkeep their initial values.\n+\t* region-model.h (region_model_context::on_escaped_function): New\n+\tvfunc.\n+\t(noop_region_model_context::on_escaped_function): New.\n+\n+2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.opt (Wanalyzer-write-to-const): New.\n+\t(Wanalyzer-write-to-string-literal): New.\n+\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n+\tCall check_for_writable_region.\n+\t(region_model::impl_call_memset): Likewise.\n+\t(region_model::impl_call_strcpy): Likewise.\n+\t* region-model.cc (class write_to_const_diagnostic): New.\n+\t(class write_to_string_literal_diagnostic): New.\n+\t(region_model::check_for_writable_region): New.\n+\t(region_model::set_value): Call check_for_writable_region.\n+\t* region-model.h (region_model::check_for_writable_region): New\n+\tdecl.\n+\n 2020-10-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97116"}, {"sha": "0fb4795f70b51ae45763fa5efc7c830c0728746e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,16 @@\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/97201\n+\t* error.c (dump_type_suffix): Handle both the C and C++ forms of\n+\tzero-length arrays.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96511\n+\tPR middle-end/96384\n+\t* init.c (warn_placement_new_too_small): Call builtin_objsize instead\n+\tof duplicating what it does.\n+\n 2020-10-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/96805"}, {"sha": "58a732f26b54375db3e703899c846aa1851971c6", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,13 @@\n+2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 70aabfb51\n+\n+2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 3a9790525\n+\t* d-target.cc (Target::isVectorTypeSupported): Adjust return codes for\n+\tinvalid size and invalid base type.\n+\n 2020-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/97002"}, {"sha": "18985fed4f02312bfe5846499ad4285a158b2d6a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,9 @@\n+2020-10-12  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96099\n+\t* decl.c (gfc_match_implicit): Check for numeric and logical\n+\ttypes.\n+\n 2020-10-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/47469"}, {"sha": "51108e501814dc80dfcd3a1d23dc5051c969f050", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,112 @@\n+2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97258\n+\t* gcc.dg/analyzer/callbacks-1.c: New test.\n+\t* gcc.dg/analyzer/callbacks-2.c: New test.\n+\t* gcc.dg/analyzer/callbacks-3.c: New test.\n+\n+2020-10-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97381.c: New test.\n+\n+2020-10-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97378.c: New test.\n+\n+2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/83347\n+\tPR middle-end/90404\n+\tPR analyzer/95007\n+\t* gcc.dg/analyzer/write-to-const-1.c: New test.\n+\t* gcc.dg/analyzer/write-to-string-literal-1.c: New test.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/97201\n+\t* g++.dg/warn/Wplacement-new-size-8.C: Adjust expected message.\n+\t* g++.dg/warn/Warray-bounds-10.C: New test.\n+\t* g++.dg/warn/Warray-bounds-11.C: New test.\n+\t* g++.dg/warn/Warray-bounds-12.C: New test.\n+\t* g++.dg/warn/Warray-bounds-13.C: New test.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97342\n+\tPR middle-end/97023\n+\tPR middle-end/96384\n+\t* c-c++-common/Wrestrict.c: Adjust comment.\n+\t* gcc.dg/Wstringop-overflow-34.c: Remove xfail.\n+\t* gcc.dg/Wstringop-overflow-43.c: Remove xfails.  Adjust regex patterns.\n+\t* gcc.dg/pr51683.c: Prune out expected warning.\n+\t* gcc.target/i386/pr60693.c: Same.\n+\t* g++.dg/warn/Wplacement-new-size-8.C: New test.\n+\t* gcc.dg/Wstringop-overflow-41.c: New test.\n+\t* gcc.dg/Wstringop-overflow-44.s: New test.\n+\t* gcc.dg/Wstringop-overflow-45.c: New test.\n+\t* gcc.dg/Wstringop-overflow-46.c: New test.\n+\t* gcc.dg/Wstringop-overflow-47.c: New test.\n+\t* gcc.dg/Wstringop-overflow-49.c: New test.\n+\t* gcc.dg/Wstringop-overflow-50.c: New test.\n+\t* gcc.dg/Wstringop-overflow-51.c: New test.\n+\t* gcc.dg/Wstringop-overflow-52.c: New test.\n+\t* gcc.dg/Wstringop-overflow-53.c: New test.\n+\t* gcc.dg/Wstringop-overflow-54.c: New test.\n+\t* gcc.dg/Wstringop-overflow-55.c: New test.\n+\t* gcc.dg/Wstringop-overread-5.c: New test.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96511\n+\tPR middle-end/96384\n+\t* g++.dg/init/strlen.C: Add expected warning.\n+\t* g++.dg/warn/Wplacement-new-size-1.C: Relax warnings.\n+\t* g++.dg/warn/Wplacement-new-size-2.C: Same.\n+\t* g++.dg/warn/Wplacement-new-size-6.C: Same.\n+\t* gcc.dg/Warray-bounds-58.c: Adjust\n+\t* gcc.dg/Wstringop-overflow-37.c: Same.\n+\t* g++.dg/warn/Wplacement-new-size-7.C: New test.\n+\n+2020-10-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR tree-optimization/97357\n+\t* gcc.dg/pr97357.c: Call setjmp instead of _setjmp.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-50.c: New testcase.\n+\t* gcc.dg/vect/bb-slp-51.c: Likewise.\n+\n+2020-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/97079\n+\t* gcc.target/aarch64/sve/pr97079.c: New test.\n+\n+2020-10-12  Duan bo  <duanbo3@huawei.com>\n+\n+\tPR target/96757\n+\t* gcc.target/aarch64/pr96757.c: New test.\n+\n+2020-10-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/97349\n+\t* gcc.target/aarch64/simd/pr97349.c: New test.\n+\n+2020-10-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97371.c: New test.\n+\n+2020-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97357\n+\t* gcc.dg/pr97357.c: New testcase.\n+\n+2020-10-12  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96099\n+\t* gfortran.dg/pr96099_1.f90: New test.\n+\t* gfortran.dg/pr96099_2.f90: New test.\n+\n 2020-10-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* obj-c++.dg/plugin/diagnostic-test-expressions-1.mm:"}, {"sha": "c736041bfde83a03e7d76899c22783c87f3ff620", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,13 @@\n+2020-10-12  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* libdruntime/config/mips/switchcontext.S [__mips_hard_float]:\n+\tUse L.D and S.D generic assembly instructions rather than LDC1\n+\tand SDC1 MIPS II hardware instructions.\n+\n+2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* testsuite/lib/libphobos.exp: Define tool_timeout, set to 600.\n+\n 2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/95680"}, {"sha": "5cd339384bd5005ad2cf30687b1e36045a0fff25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be127cac959d0f0ca0f8f9aa311828a9ee03f24/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8be127cac959d0f0ca0f8f9aa311828a9ee03f24", "patch": "@@ -1,3 +1,42 @@\n+2020-10-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (take_while_view::begin): Constrain the\n+\tconst overload further as per LWG 3450.\n+\t(take_while_view::end): Likewise.\n+\t* testsuite/std/ranges/adaptors/take_while.cc: Add test for LWG\n+\t3450.\n+\n+2020-10-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95322\n+\t* include/std/ranges (take_view::_CI): Define this alias\n+\ttemplate as per LWG 3449 and remove ...\n+\t(take_view::_Sentinel::_CI): ... this type alias.\n+\t(take_view::_Sentinel::operator==): Adjust use of _CI\n+\taccordingly.  Define a second overload that accepts an iterator\n+\tof the opposite constness as per LWG 3449.\n+\t(take_while_view::_Sentinel::operator==): Likewise.\n+\t* testsuite/std/ranges/adaptors/95322.cc: Add tests for LWG 3449.\n+\n+2020-10-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Update to Doxygen 1.8.20 format.\n+\n+2020-10-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Use __cplusplus=201703L\n+\tso that C++17 features are documented.\n+\n+2020-10-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algobase.h (copy, move, copy_backward)\n+\t(move_backward): Fix documentation for returned iterator.\n+\n+2020-10-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/97201\n+\t* libsupc++/new (operator new): Add attribute alloc_size and malloc.\n+\n 2020-10-11  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/os/aix/t-aix: Add complementary mode object file to"}]}