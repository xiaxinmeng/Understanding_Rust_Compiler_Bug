{"sha": "71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlZDNjMGM5YTM0NTg5OThiZGVkOGUyNDQzYzBhNjgwYzJlYjhjZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-25T14:52:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-25T14:52:57Z"}, "message": "libstdc++: Adjust static assertions in futures and promises [LWG 3466]\n\nAdd a static_assertions to check the result type is destructible, as in\nthe proposed resolution for LWG 3466 (which supersedes 3458).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/future (future, shared_future. promise): Add\n\tis_destructible assertion (LWG 3466). Adjust string-literal for\n\t!is_array and !is_function assertions.\n\t* testsuite/30_threads/future/requirements/lwg3458.cc: Check\n\ttypes with no accessible destructor. Adjust expected errors.\n\t* testsuite/30_threads/promise/requirements/lwg3466.cc:\n\tLikewise.\n\t* testsuite/30_threads/shared_future/requirements/lwg3458.cc:\n\tLikewise.", "tree": {"sha": "336a9eee4e2608b730baf5e190d306fe9dcbd0bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336a9eee4e2608b730baf5e190d306fe9dcbd0bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d5044b31f7bf94fcda4136b4ed87a5fee7735d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d5044b31f7bf94fcda4136b4ed87a5fee7735d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d5044b31f7bf94fcda4136b4ed87a5fee7735d"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "a7466a32e03538dd2bc6dd67014e4cb028c0612d", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "patch": "@@ -757,8 +757,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3458. Is shared_future intended to work with arrays or function types?\n-      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n-      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+      static_assert(!is_array<_Res>{}, \"result type must not be an array\");\n+      static_assert(!is_function<_Res>{}, \"result type must not be a function\");\n+      static_assert(is_destructible<_Res>{},\n+\t\t    \"result type must be destructible\");\n \n       friend class promise<_Res>;\n       template<typename> friend class packaged_task;\n@@ -892,8 +894,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3458. Is shared_future intended to work with arrays or function types?\n-      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n-      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+      static_assert(!is_array<_Res>{}, \"result type must not be an array\");\n+      static_assert(!is_function<_Res>{}, \"result type must not be a function\");\n+      static_assert(is_destructible<_Res>{},\n+\t\t    \"result type must be destructible\");\n \n       typedef __basic_future<_Res> _Base_type;\n \n@@ -1049,8 +1053,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3466: Specify the requirements for promise/future/[...] consistently\n-      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n-      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+      static_assert(!is_array<_Res>{}, \"result type must not be an array\");\n+      static_assert(!is_function<_Res>{}, \"result type must not be a function\");\n+      static_assert(is_destructible<_Res>{},\n+\t\t    \"result type must be destructible\");\n \n       typedef __future_base::_State_base \t_State;\n       typedef __future_base::_Result<_Res>\t_Res_type;"}, {"sha": "f26e17bd799a658cbf03563a48f257f9aeb87f45", "filename": "libstdc++-v3/testsuite/30_threads/future/requirements/lwg3458.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc?ref=71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "patch": "@@ -26,9 +26,18 @@ std::future<int(&)[1]> good;\n std::future<int(&)()> good2;\n \n std::future<int[1]> bad; // { dg-error \"here\" }\n-// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be an array\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"function returning an array\" }\n \n std::future<int()> bad2; // { dg-error \"here\" }\n-// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be a function\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"function returning a function\" }\n+\n+struct Indestructible { ~Indestructible() = delete; };\n+std::future<Indestructible> bad3; // { dg-error \"here\" }\n+// { dg-error \"result type must be destructible\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output {deleted function} }\n+\n+class PrivateDtor { public: PrivateDtor(); private: ~PrivateDtor(); };\n+std::future<PrivateDtor> bad4; // { dg-error \"here\" }\n+// { dg-prune-output {is private} }"}, {"sha": "71eb2603e83e0e21f016737249b67a100131806f", "filename": "libstdc++-v3/testsuite/30_threads/promise/requirements/lwg3466.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc?ref=71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "patch": "@@ -26,9 +26,18 @@ std::promise<int(&)[1]> good;\n std::promise<int(&)()> good2;\n \n std::promise<int[1]> bad; // { dg-error \"here\" }\n-// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be an array\" \"\" { target *-*-* } 0 }\n // { dg-prune-output {request for member '~int \\[1\\]'} }\n \n std::promise<int()> bad2; // { dg-error \"here\" }\n-// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be a function\" \"\" { target *-*-* } 0 }\n // { dg-prune-output {'sizeof \\(int\\(\\)\\)'} }\n+\n+struct Indestructible { ~Indestructible() = delete; };\n+std::promise<Indestructible> bad3; // { dg-error \"here\" }\n+// { dg-error \"result type must be destructible\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output {deleted function} }\n+\n+class PrivateDtor { public: PrivateDtor(); private: ~PrivateDtor(); };\n+std::promise<PrivateDtor> bad4; // { dg-error \"here\" }\n+// { dg-prune-output {is private} }"}, {"sha": "cf767698f40980373ec69e059541618007390cf1", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/requirements/lwg3458.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ed3c0c9a3458998bded8e2443c0a680c2eb8cd/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc?ref=71ed3c0c9a3458998bded8e2443c0a680c2eb8cd", "patch": "@@ -26,7 +26,16 @@ std::shared_future<int(&)[1]> good;\n std::shared_future<int(&)()> good2;\n \n std::shared_future<int[1]> bad; // { dg-error \"here\" }\n-// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be an array\" \"\" { target *-*-* } 0 }\n \n std::shared_future<int()> bad2; // { dg-error \"here\" }\n-// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }\n+// { dg-error \"result type must not be a function\" \"\" { target *-*-* } 0 }\n+\n+struct Indestructible { ~Indestructible() = delete; };\n+std::shared_future<Indestructible> bad3; // { dg-error \"here\" }\n+// { dg-error \"result type must be destructible\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output {deleted function} }\n+\n+class PrivateDtor { public: PrivateDtor(); private: ~PrivateDtor(); };\n+std::shared_future<PrivateDtor> bad4; // { dg-error \"here\" }\n+// { dg-prune-output {is private} }"}]}