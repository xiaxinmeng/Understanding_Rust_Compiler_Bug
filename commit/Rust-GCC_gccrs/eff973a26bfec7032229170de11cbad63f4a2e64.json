{"sha": "eff973a26bfec7032229170de11cbad63f4a2e64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmOTczYTI2YmZlYzcwMzIyMjkxNzBkZTExY2JhZDYzZjRhMmU2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-23T11:19:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-23T11:19:45Z"}, "message": "passes.def: Remove copy propagation passes run directly after CCP.\n\n2015-04-23  Richard Biener  <rguenther@suse.de>\n\n\t* passes.def: Remove copy propagation passes run directly after CCP.\n\t* tree-ssa-ccp.c (get_value_for_expr): Fall back to a COPY for\n\tSSA names.\n\t(ccp_visit_phi_node): Rework to handle first executable edge\n\tspecially.\n\nFrom-SVN: r222360", "tree": {"sha": "695e6e91c87bc902ddb01988f3b04645c1cc6cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/695e6e91c87bc902ddb01988f3b04645c1cc6cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff973a26bfec7032229170de11cbad63f4a2e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff973a26bfec7032229170de11cbad63f4a2e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff973a26bfec7032229170de11cbad63f4a2e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff973a26bfec7032229170de11cbad63f4a2e64/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4949e1d81641cab4c19c072674150e6a35296e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4949e1d81641cab4c19c072674150e6a35296e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4949e1d81641cab4c19c072674150e6a35296e0"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "6e2742837c0d22adea3d236aa44e73052e4ff698", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eff973a26bfec7032229170de11cbad63f4a2e64", "patch": "@@ -1,3 +1,11 @@\n+2015-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* passes.def: Remove copy propagation passes run directly after CCP.\n+\t* tree-ssa-ccp.c (get_value_for_expr): Fall back to a COPY for\n+\tSSA names.\n+\t(ccp_visit_phi_node): Rework to handle first executable edge\n+\tspecially.\n+\n 2015-04-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm.h (LEGITIMIZE_RELOAD_ADDRESS): Remove."}, {"sha": "6dce1419de12c32b3466ffe78b6c1276e6504a62", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=eff973a26bfec7032229170de11cbad63f4a2e64", "patch": "@@ -159,7 +159,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n-      NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_forwprop);\n@@ -211,7 +210,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n-      NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_cse_sincos);\n       NEXT_PASS (pass_optimize_bswap);\n       NEXT_PASS (pass_split_crit_edges);"}, {"sha": "b14c12d8b187f7c3ff275488fac9eea1bfc02d14", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff973a26bfec7032229170de11cbad63f4a2e64/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=eff973a26bfec7032229170de11cbad63f4a2e64", "patch": "@@ -539,9 +539,14 @@ set_lattice_value (tree var, ccp_prop_value_t new_val)\n   if (old_val->lattice_val != new_val.lattice_val\n       || (new_val.lattice_val == CONSTANT\n \t  && (TREE_CODE (new_val.value) != TREE_CODE (old_val->value)\n-\t      || simple_cst_equal (new_val.value, old_val->value) != 1\n \t      || (TREE_CODE (new_val.value) == INTEGER_CST\n-\t\t  && new_val.mask != old_val->mask))))\n+\t\t  && (new_val.mask != old_val->mask\n+\t\t      || (wi::bit_and_not (wi::to_widest (old_val->value),\n+\t\t\t\t\t   new_val.mask)\n+\t\t\t  != wi::bit_and_not (wi::to_widest (new_val.value),\n+\t\t\t\t\t      new_val.mask))))\n+\t      || (TREE_CODE (new_val.value) != INTEGER_CST\n+\t\t  && !operand_equal_p (new_val.value, old_val->value, 0)))))\n     {\n       /* ???  We would like to delay creation of INTEGER_CSTs from\n \t partially constants here.  */\n@@ -623,6 +628,15 @@ get_value_for_expr (tree expr, bool for_bits_p)\n \t  && val.lattice_val == CONSTANT\n \t  && TREE_CODE (val.value) == ADDR_EXPR)\n \tval = get_value_from_alignment (val.value);\n+      /* Fall back to a copy value.  */\n+      if (!for_bits_p\n+\t  && val.lattice_val == VARYING\n+\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (expr))\n+\t{\n+\t  val.lattice_val = CONSTANT;\n+\t  val.value = expr;\n+\t  val.mask = -1;\n+\t}\n     }\n   else if (is_gimple_min_invariant (expr)\n \t   && (!for_bits_p || TREE_CODE (expr) != ADDR_EXPR))\n@@ -1068,33 +1082,19 @@ static enum ssa_prop_result\n ccp_visit_phi_node (gphi *phi)\n {\n   unsigned i;\n-  ccp_prop_value_t *old_val, new_val;\n+  ccp_prop_value_t new_val;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"\\nVisiting PHI node: \");\n       print_gimple_stmt (dump_file, phi, 0, dump_flags);\n     }\n \n-  old_val = get_value (gimple_phi_result (phi));\n-  switch (old_val->lattice_val)\n-    {\n-    case VARYING:\n-      return SSA_PROP_VARYING;\n-\n-    case CONSTANT:\n-      new_val = *old_val;\n-      break;\n-\n-    case UNDEFINED:\n-      new_val.lattice_val = UNDEFINED;\n-      new_val.value = NULL_TREE;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n+  new_val.lattice_val = UNDEFINED;\n+  new_val.value = NULL_TREE;\n+  new_val.mask = 0;\n \n+  bool first = true;\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       /* Compute the meet operator over all the PHI arguments flowing\n@@ -1116,7 +1116,13 @@ ccp_visit_phi_node (gphi *phi)\n \t  tree arg = gimple_phi_arg (phi, i)->def;\n \t  ccp_prop_value_t arg_val = get_value_for_expr (arg, false);\n \n-\t  ccp_lattice_meet (gimple_bb (phi), &new_val, &arg_val);\n+\t  if (first)\n+\t    {\n+\t      new_val = arg_val;\n+\t      first = false;\n+\t    }\n+\t  else\n+\t    ccp_lattice_meet (gimple_bb (phi), &new_val, &arg_val);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {"}]}