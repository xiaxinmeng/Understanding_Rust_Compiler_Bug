{"sha": "b4b560332c6978dde1aafaff5cbca1a4347cd718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRiNTYwMzMyYzY5NzhkZGUxYWFmYWZmNWNiY2ExYTQzNDdjZDcxOA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-11-26T19:01:54Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-11-26T19:01:54Z"}, "message": "re PR c/23722 (bad error recovery with if blocks and else)\n\n2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/23722\n\t* c-parser.c (struct c_parser): New bit in_if_block.\n\t(c_parser_compound_statement_nostart): Handle unexpected 'else'\n\tkeyword.\n\t(c_parser_statement_after_labels): Set in_if_block to false while\n\tparsing.\n\t(c_parser_if_body): Don't call c_parser_statement_after_labels if\n\ta semicolon is found, just consume it. Don't call\n\tc_parser_statement_after_labels if an open brace is found, call\n\tc_parser_compound_statement instead.\n\t(c_parser_else_body): New.\n\t(c_parser_if_statement): Set in_if_block to true when parsing the\n\tbody of the 'if' statement. Use c_parser_else_body.\n\ntestsuite/\n\t* gcc.dg/cpp/19990413-1.c: Update.\n\t* gcc.dg/parse-else-error.c: New.\n\t* gcc.dg/parse-else-error-2.c: New.\n\t* gcc.dg/parse-else-error-3.c: New.\n\t* gcc.dg/parse-else-error-4.c: New.\n\nFrom-SVN: r130446", "tree": {"sha": "3aa88863b57e5e2d234313c7a65fb6d464e0d2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa88863b57e5e2d234313c7a65fb6d464e0d2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4b560332c6978dde1aafaff5cbca1a4347cd718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b560332c6978dde1aafaff5cbca1a4347cd718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b560332c6978dde1aafaff5cbca1a4347cd718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b560332c6978dde1aafaff5cbca1a4347cd718/comments", "author": null, "committer": null, "parents": [{"sha": "0e7edcd5ebda4d219143e42f6daaa9633779e71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7edcd5ebda4d219143e42f6daaa9633779e71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7edcd5ebda4d219143e42f6daaa9633779e71b"}], "stats": {"total": 151, "additions": 141, "deletions": 10}, "files": [{"sha": "d475e408985957505b3cfa2abdce64760b62ee1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -1,3 +1,19 @@\n+2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/23722\n+\t* c-parser.c (struct c_parser): New bit in_if_block.\n+\t(c_parser_compound_statement_nostart): Handle unexpected 'else'\n+\tkeyword.\n+\t(c_parser_statement_after_labels): Set in_if_block to false while\n+\tparsing.\n+\t(c_parser_if_body): Don't call c_parser_statement_after_labels if\n+\ta semicolon is found, just consume it. Don't call\n+\tc_parser_statement_after_labels if an open brace is found, call\n+\tc_parser_compound_statement instead.\n+\t(c_parser_else_body): New.\n+\t(c_parser_if_statement): Set in_if_block to true when parsing the\n+\tbody of the 'if' statement. Use c_parser_else_body.\n+\n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR 34081/C++"}, {"sha": "1e32b5b9d98c6381e8772d9eaa8bcd80c193e15c", "filename": "gcc/c-parser.c", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -280,6 +280,8 @@ typedef struct c_parser GTY(())\n   /* True if we're processing a pragma, and shouldn't automatically\n      consume CPP_PRAGMA_EOL.  */\n   BOOL_BITFIELD in_pragma : 1;\n+  /* True if we're parsing the outermost block of an if statement.  */\n+  BOOL_BITFIELD in_if_block : 1;\n   /* True if we want to lex an untranslated string.  */\n   BOOL_BITFIELD lex_untranslated_string : 1;\n   /* Objective-C specific parser/lexer information.  */\n@@ -3541,6 +3543,20 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  c_parser_error (parser, \"expected declaration or statement\");\n \t  return;\n \t}\n+      else if (c_parser_next_token_is_keyword (parser, RID_ELSE))\n+        {\n+          if (parser->in_if_block) \n+            {\n+              error (\"%H\"\"expected %<}%> before %<else%>\", &loc);\n+              return;\n+            }\n+          else \n+            {\n+              error (\"%H%<else%> without a previous %<if%>\", &loc);\n+              c_parser_consume_token (parser);\n+              continue;\n+            }\n+        }\n       else\n \t{\n \tstatement:\n@@ -3740,6 +3756,8 @@ c_parser_statement_after_labels (c_parser *parser)\n {\n   location_t loc = c_parser_peek_token (parser)->location;\n   tree stmt = NULL_TREE;\n+  bool in_if_block = parser->in_if_block;\n+  parser->in_if_block = false;\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_OPEN_BRACE:\n@@ -3873,6 +3891,8 @@ c_parser_statement_after_labels (c_parser *parser)\n      earlier?  */\n   if (stmt && CAN_HAVE_LOCATION_P (stmt))\n     SET_EXPR_LOCATION (stmt, loc);\n+\n+  parser->in_if_block = in_if_block;\n }\n \n /* Parse a parenthesized condition from an if, do or while statement.\n@@ -3906,11 +3926,13 @@ c_parser_c99_block_statement (c_parser *parser)\n   return c_end_compound_stmt (block, flag_isoc99);\n }\n \n-/* Parse the body of an if statement or the else half thereof.  This\n-   is just parsing a statement but (a) it is a block in C99, (b) we\n-   track whether the body is an if statement for the sake of\n-   -Wparentheses warnings, (c) we handle an empty body specially for\n-   the sake of -Wempty-body warnings.  */\n+/* Parse the body of an if statement.  This is just parsing a\n+   statement but (a) it is a block in C99, (b) we track whether the\n+   body is an if statement for the sake of -Wparentheses warnings, (c)\n+   we handle an empty body specially for the sake of -Wempty-body\n+   warnings, and (d) we call parser_compound_statement directly\n+   because c_parser_statement_after_labels resets\n+   parser->in_if_block.  */\n \n static tree\n c_parser_if_body (c_parser *parser, bool *if_p)\n@@ -3923,8 +3945,37 @@ c_parser_if_body (c_parser *parser, bool *if_p)\n     c_parser_label (parser);\n   *if_p = c_parser_next_token_is_keyword (parser, RID_IF);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n-    add_stmt (build_empty_stmt ());\n-  c_parser_statement_after_labels (parser);\n+    {\n+      add_stmt (build_empty_stmt ());\n+      c_parser_consume_token (parser);\n+    }\n+  else if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n+    add_stmt (c_parser_compound_statement (parser));\n+  else\n+    c_parser_statement_after_labels (parser);\n+  return c_end_compound_stmt (block, flag_isoc99);\n+}\n+\n+/* Parse the else body of an if statement.  This is just parsing a\n+   statement but (a) it is a block in C99, (b) we handle an empty body\n+   specially for the sake of -Wempty-body warnings.  */\n+\n+static tree\n+c_parser_else_body (c_parser *parser)\n+{\n+  tree block = c_begin_compound_stmt (flag_isoc99);\n+  while (c_parser_next_token_is_keyword (parser, RID_CASE)\n+\t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n+\t || (c_parser_next_token_is (parser, CPP_NAME)\n+\t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n+    c_parser_label (parser);\n+  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n+    {\n+      add_stmt (build_empty_stmt ());\n+      c_parser_consume_token (parser);\n+    }\n+  else \n+    c_parser_statement_after_labels (parser);\n   return c_end_compound_stmt (block, flag_isoc99);\n }\n \n@@ -3941,18 +3992,23 @@ c_parser_if_statement (c_parser *parser)\n   tree block;\n   location_t loc;\n   tree cond;\n-  bool first_if = false, second_if = false;\n+  bool first_if = false;\n   tree first_body, second_body;\n+  bool in_if_block;\n+\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_IF));\n   c_parser_consume_token (parser);\n   block = c_begin_compound_stmt (flag_isoc99);\n   loc = c_parser_peek_token (parser)->location;\n   cond = c_parser_paren_condition (parser);\n+  in_if_block = parser->in_if_block;\n+  parser->in_if_block = true;\n   first_body = c_parser_if_body (parser, &first_if);\n+  parser->in_if_block = in_if_block;\n   if (c_parser_next_token_is_keyword (parser, RID_ELSE))\n     {\n       c_parser_consume_token (parser);\n-      second_body = c_parser_if_body (parser, &second_if);\n+      second_body = c_parser_else_body (parser);\n     }\n   else\n     second_body = NULL_TREE;"}, {"sha": "5ca77e8a70e45dc7ba5e81bfb507eac6d4a455b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -1,3 +1,12 @@\n+2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/23722\n+\t* gcc.dg/cpp/19990413-1.c: Update.\n+\t* gcc.dg/parse-else-error.c: New.\n+\t* gcc.dg/parse-else-error-2.c: New.\n+\t* gcc.dg/parse-else-error-3.c: New.\n+\t* gcc.dg/parse-else-error-4.c: New.\n+\n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR 34081/C++"}, {"sha": "17d8441e8e6eb184435f88dc01c0fed4a4246b19", "filename": "gcc/testsuite/gcc.dg/cpp/19990413-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -9,5 +9,5 @@ func(void)\n {\n   FOO(i\n       = 4)\n-  else;  /* { dg-error \"parse error|syntax error|expected\" \"error on this line\" { target *-*-* } { 12 } } */ \n+  else;  /* { dg-error \"'else' without a previous 'if'\" \"error on this line\" { target *-*-* } { 12 } } */ \n }"}, {"sha": "ce59af3813e9a6c4e70eb93a0c9decfdb25f095c", "filename": "gcc/testsuite/gcc.dg/parse-else-error-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-2.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -0,0 +1,13 @@\n+/* PR 23722 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsyntax-only\" } */\n+int f()\n+{\n+  if (1)\n+    {\n+      return 1;\n+  else /* { dg-error \"expected .\\}. before 'else'\" } */\n+  {\n+      }\n+  }\n+} /* { dg-error \"expected identifier or '\\\\(' before .\\}. token\" } */"}, {"sha": "13666f595dd6ea3844199fe61e9268b05265a1af", "filename": "gcc/testsuite/gcc.dg/parse-else-error-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-3.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -0,0 +1,11 @@\n+/* PR 23722 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsyntax-only\" } */\n+int f()\n+{\n+\n+  else  /* { dg-error \"'else' without a previous 'if'\" } */\n+    {\n+      return 0;\n+    }\n+}"}, {"sha": "617c3f3e3f00cf0760cdbef1dd79a1d2f418e6e2", "filename": "gcc/testsuite/gcc.dg/parse-else-error-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error-4.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -0,0 +1,14 @@\n+/* PR 23722 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsyntax-only\" } */\n+int f()\n+{\n+  if (1)\n+    {\n+      return 1;\n+    }\n+  else \n+    {\n+      else; /* { dg-error \"'else' without a previous 'if'\" } */\n+    }\n+}"}, {"sha": "ca20bdf9ff6dc764d9a479010ff089e8d5fc8256", "filename": "gcc/testsuite/gcc.dg/parse-else-error.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b560332c6978dde1aafaff5cbca1a4347cd718/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-else-error.c?ref=b4b560332c6978dde1aafaff5cbca1a4347cd718", "patch": "@@ -0,0 +1,12 @@\n+/* PR 23722 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsyntax-only\" } */\n+int f()\n+{\n+  if (1)\n+  {\n+   return 1;\n+  else /* { dg-error \"expected .\\}. before 'else'\" } */\n+  {\n+  }\n+}"}]}