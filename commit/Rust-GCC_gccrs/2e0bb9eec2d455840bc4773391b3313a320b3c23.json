{"sha": "2e0bb9eec2d455840bc4773391b3313a320b3c23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwYmI5ZWVjMmQ0NTU4NDBiYzQ3NzMzOTFiMzMxM2EzMjBiM2MyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-01T13:41:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-01T13:57:53Z"}, "message": "c++: Completeness of typedef structs [PR 99294]\n\nWhen we read in a class definition, we use fixup_type_variants to\npropagate the now-completed fields of the class's TYPE to other\nvariants.  Unfortunately that doesn't propagate all of them, and in\nthis case we had a typedef to an (incomplete) instantiation.  That\ntypedef ended up with a VOIDmode, which blew up gimple expansion as\nthe type itself isn't VOID.  Without modules, that information is\npropagated in finalize_type_size when laying out the class.  But that\ndoesn't happen with stream-in -- we already know the layout.  There is\nalready some overlap between the two functions, now there's a bit\nmore.  In fixup_type_variants, I pay attention to the TYPE_NAME to\ndecide whether to override a user's TYPE_ALIGN -- variants of the\nmain-variant typedef just copy the main-variant.  Other variants\nrecalculate.  Overaligning is still permitted.\n\nI also added a TYPE_ALIGN_RAW accessor, and fixed a bug in the\nalignment streaming I noticed.  I did not refactor TYPE_ALIGN beyond\nusing the new accessor.  (It could be written as ((1 << align_raw) >>\n1), rather than use the conditional.)\n\n\tPR c++/99294\n\tgcc/\n\t* tree.h (TYPE_ALIGN_RAW): New accessor.\n\t(TYPE_ALIGN): Use it.\n\tgcc/cp/\n\t* class.c (fixup_type_variants): Propagate mode, precision,\n\talignment & emptiness.\n\t* module.cc (trees_out::type_node): Use TYPE_ALIGN_RAW.\n\t(trees_in::tree_node): Rematerialize alignment here.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99294.h: New.\n\t* g++.dg/modules/pr99294_a.C: New.\n\t* g++.dg/modules/pr99294_b.C: New.", "tree": {"sha": "5ab3d5239b505ddc775a421efbf05eee0b80e852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ab3d5239b505ddc775a421efbf05eee0b80e852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e0bb9eec2d455840bc4773391b3313a320b3c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0bb9eec2d455840bc4773391b3313a320b3c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0bb9eec2d455840bc4773391b3313a320b3c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0bb9eec2d455840bc4773391b3313a320b3c23/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150bde36c119eff4b8a74667c9d728d6a8a5e8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150bde36c119eff4b8a74667c9d728d6a8a5e8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150bde36c119eff4b8a74667c9d728d6a8a5e8a1"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "ea007e88e6e71b3a8255c1a93d14de592edcb12f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -2005,35 +2005,45 @@ determine_primary_bases (tree t)\n /* Update the variant types of T.  */\n \n void\n-fixup_type_variants (tree t)\n+fixup_type_variants (tree type)\n {\n-  tree variants;\n-\n-  if (!t)\n+  if (!type)\n     return;\n \n-  for (variants = TYPE_NEXT_VARIANT (t);\n-       variants;\n-       variants = TYPE_NEXT_VARIANT (variants))\n+  for (tree variant = TYPE_NEXT_VARIANT (type);\n+       variant;\n+       variant = TYPE_NEXT_VARIANT (variant))\n     {\n       /* These fields are in the _TYPE part of the node, not in\n \t the TYPE_LANG_SPECIFIC component, so they are not shared.  */\n-      TYPE_HAS_USER_CONSTRUCTOR (variants) = TYPE_HAS_USER_CONSTRUCTOR (t);\n-      TYPE_NEEDS_CONSTRUCTING (variants) = TYPE_NEEDS_CONSTRUCTING (t);\n-      TYPE_HAS_NONTRIVIAL_DESTRUCTOR (variants)\n-\t= TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t);\n+      TYPE_HAS_USER_CONSTRUCTOR (variant) = TYPE_HAS_USER_CONSTRUCTOR (type);\n+      TYPE_NEEDS_CONSTRUCTING (variant) = TYPE_NEEDS_CONSTRUCTING (type);\n+      TYPE_HAS_NONTRIVIAL_DESTRUCTOR (variant)\n+\t= TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type);\n \n-      TYPE_POLYMORPHIC_P (variants) = TYPE_POLYMORPHIC_P (t);\n-      CLASSTYPE_FINAL (variants) = CLASSTYPE_FINAL (t);\n+      TYPE_POLYMORPHIC_P (variant) = TYPE_POLYMORPHIC_P (type);\n+      CLASSTYPE_FINAL (variant) = CLASSTYPE_FINAL (type);\n \n-      TYPE_BINFO (variants) = TYPE_BINFO (t);\n+      TYPE_BINFO (variant) = TYPE_BINFO (type);\n \n       /* Copy whatever these are holding today.  */\n-      TYPE_VFIELD (variants) = TYPE_VFIELD (t);\n-      TYPE_FIELDS (variants) = TYPE_FIELDS (t);\n+      TYPE_VFIELD (variant) = TYPE_VFIELD (type);\n+      TYPE_FIELDS (variant) = TYPE_FIELDS (type);\n+\n+      TYPE_SIZE (variant) = TYPE_SIZE (type);\n+      TYPE_SIZE_UNIT (variant) = TYPE_SIZE_UNIT (type);\n+\n+      if (!TYPE_USER_ALIGN (variant)\n+\t  || TYPE_NAME (variant) == TYPE_NAME (type)\n+\t  || TYPE_ALIGN_RAW (variant) < TYPE_ALIGN_RAW (type))\n+\t{\n+\t  TYPE_ALIGN_RAW (variant) =  TYPE_ALIGN_RAW (type);\n+\t  TYPE_USER_ALIGN (variant) = TYPE_USER_ALIGN (type);\n+\t}\n \n-      TYPE_SIZE (variants) = TYPE_SIZE (t);\n-      TYPE_SIZE_UNIT (variants) = TYPE_SIZE_UNIT (t);\n+      TYPE_PRECISION (variant) = TYPE_PRECISION (type);\n+      TYPE_MODE_RAW (variant) = TYPE_MODE_RAW (type);\n+      TYPE_EMPTY_P (variant) = TYPE_EMPTY_P (type);\n     }\n }\n "}, {"sha": "369a02604fe84ba04621a8e1affbf60d982e94e1", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -8714,7 +8714,7 @@ trees_out::type_node (tree type)\n       else\n \t{\n \t  if (TYPE_USER_ALIGN (type))\n-\t    flags = exact_log2 (TYPE_ALIGN (type));\n+\t    flags = TYPE_ALIGN_RAW (type);\n \t}\n \n       if (streaming_p ())\n@@ -9510,7 +9510,7 @@ trees_in::tree_node (bool is_use)\n \t  }\n \telse\n \t  {\n-\t    res = build_aligned_type (res, 1u << flags);\n+\t    res = build_aligned_type (res, (1u << flags) >> 1);\n \t    TYPE_USER_ALIGN (res) = true;\n \t  }\n "}, {"sha": "757113c028379aebe1f7eaa885a67084938aed81", "filename": "gcc/testsuite/g++.dg/modules/pr99294.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294.h?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -0,0 +1,14 @@\n+\n+template <typename T>\n+class basic_string;\n+\n+typedef basic_string<char> string;\n+\n+template <typename T>\n+class basic_string\n+{\n+ public:\n+  string Frob ();\n+\n+  basic_string (int);\n+};"}, {"sha": "ac8b9a7de5b2b196b4b1e1e7af18798bcf4004c5", "filename": "gcc/testsuite/g++.dg/modules/pr99294_a.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_a.C?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -0,0 +1,18 @@\n+// PR 99294, ICE with -fno-module-lazy on class completeness\n+// { dg-additional-options -fmodules-ts }\n+\n+// The instantiation of the *definition* of basic_string is used in\n+// importers, *after* they have instantiated a declaration of it *and*\n+// created type variants.\n+\n+module;\n+\n+#include \"pr99294.h\"\n+\n+export module foo;\n+// { dg-module-cmi foo }\n+\n+export inline int greeter (string const &bob)\n+{\n+  return sizeof (bob); // instantiates string\n+}"}, {"sha": "30d14d10187a94288e4c3c1ae0170210cdb21186", "filename": "gcc/testsuite/g++.dg/modules/pr99294_b.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99294_b.C?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -0,0 +1,12 @@\n+// PR 99294, ICE with -fno-module-lazy on class completeness\n+// { dg-additional-options {-fmodules-ts -fno-module-lazy} }\n+\n+#include \"pr99294.h\"\n+import foo;\n+\n+string Quux ()\n+{\n+  return 1;\n+}\n+\n+// ICED complaining about Quux RETURN_DECL during gimple expand"}, {"sha": "f00ea2ef0af86fc292b4417b59b9483bd0b4dc6d", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0bb9eec2d455840bc4773391b3313a320b3c23/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2e0bb9eec2d455840bc4773391b3313a320b3c23", "patch": "@@ -2078,12 +2078,16 @@ extern tree vector_element_bits_tree (const_tree);\n    to this type.  */\n #define TYPE_ATTRIBUTES(NODE) (TYPE_CHECK (NODE)->type_common.attributes)\n \n+/* Raw access to the alignment field.  */\n+#define TYPE_ALIGN_RAW(NODE)\t\t\t\\\n+  (TYPE_CHECK (NODE)->type_common.align)\n+\n /* The alignment necessary for objects of this type.\n    The value is an int, measured in bits and must be a power of two.\n    We support also an \"alignment\" of zero.  */\n-#define TYPE_ALIGN(NODE) \\\n-    (TYPE_CHECK (NODE)->type_common.align \\\n-     ? ((unsigned)1) << ((NODE)->type_common.align - 1) : 0)\n+#define TYPE_ALIGN(NODE)\t\t\t\t\t\\\n+  (TYPE_ALIGN_RAW (NODE)\t\t\t\t\t\\\n+   ? ((unsigned)1) << (TYPE_ALIGN_RAW(NODE) - 1) : 0)\n \n /* Specify that TYPE_ALIGN(NODE) is X.  */\n #define SET_TYPE_ALIGN(NODE, X) \\"}]}