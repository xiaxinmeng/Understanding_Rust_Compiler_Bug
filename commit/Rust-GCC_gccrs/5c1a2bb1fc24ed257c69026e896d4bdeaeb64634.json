{"sha": "5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxYTJiYjFmYzI0ZWQyNTdjNjkwMjZlODk2ZDRiZGVhZWI2NDYzNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-08-25T21:44:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-08-25T21:44:20Z"}, "message": "bmmintrin.h: Replace by #error.\n\n\n\t* config/i386/bmmintrin.h: Replace by #error.\n\n\tRevert:\n\tMichael Meissner  <michael.meissner@amd.com>\n\tDwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n\tTony Linthicum  <tony.linthicum@amd.com>\n\n\t* config/i386/i386.h (TARGET_SSE5): New macro for SSE5.\n\t(TARGET_ROUND): New macro for the round/ptest instructions which\n\tare shared between SSE4.1 and SSE5.\n\t(OPTION_MASK_ISA_ROUND): Ditto.\n\t(OPTION_ISA_ROUND): Ditto.\n\t(TARGET_FUSED_MADD): New macro for -mfused-madd swtich.\n\t(TARGET_CPU_CPP_BUILTINS): Add SSE5 support.\n\n\t* config/i386/i386.opt (-msse5): New switch for SSE5 support.\n\t(-mfused-madd): New switch to give users control over whether the\n\tcompiler optimizes to use the multiply/add SSE5 instructions.\n\n\t* config/i386/i386.c (enum pta_flags): Add PTA_SSE5.\n\t(ix86_handle_option): Turn off 3dnow if -msse5.\n\t(override_options): Add SSE5 support.\n\t(print_operand): %Y prints comparison codes for SSE5 com/pcom\n\tinstructions.\n\t(ix86_expand_sse_movcc): Add SSE5 support.\n\t(ix86_expand_sse5_unpack): New function to use pperm to unpack a\n\tvector type to the next largest size.\n\t(ix86_expand_sse5_pack): New function to use pperm to pack a\n\tvector type to the next smallest size.\n\t(IX86_BUILTIN_FMADDSS): New for SSE5 intrinsic.\n\t(IX86_BUILTIN_FMADDSD): Ditto.\n\t(IX86_BUILTIN_FMADDPS): Ditto.\n\t(IX86_BUILTIN_FMADDPD): Ditto.\n\t(IX86_BUILTIN_FMSUBSS): Ditto.\n\t(IX86_BUILTIN_FMSUBSD): Ditto.\n\t(IX86_BUILTIN_FMSUBPS): Ditto.\n\t(IX86_BUILTIN_FMSUBPD): Ditto.\n\t(IX86_BUILTIN_FNMADDSS): Ditto.\n\t(IX86_BUILTIN_FNMADDSD): Ditto.\n\t(IX86_BUILTIN_FNMADDPS): Ditto.\n\t(IX86_BUILTIN_FNMADDPD): Ditto.\n\t(IX86_BUILTIN_FNMSUBSS): Ditto.\n\t(IX86_BUILTIN_FNMSUBSD): Ditto.\n\t(IX86_BUILTIN_FNMSUBPS): Ditto.\n\t(IX86_BUILTIN_FNMSUBPD): Ditto.\n\t(IX86_BUILTIN_PCMOV_V2DI): Ditto.\n\t(IX86_BUILTIN_PCMOV_V4SI): Ditto.\n\t(IX86_BUILTIN_PCMOV_V8HI): Ditto.\n\t(IX86_BUILTIN_PCMOV_V16QI): Ditto.\n\t(IX86_BUILTIN_PCMOV_V4SF): Ditto.\n\t(IX86_BUILTIN_PCMOV_V2DF): Ditto.\n\t(IX86_BUILTIN_PPERM): Ditto.\n\t(IX86_BUILTIN_PERMPS): Ditto.\n\t(IX86_BUILTIN_PERMPD): Ditto.\n\t(IX86_BUILTIN_PMACSSWW): Ditto.\n\t(IX86_BUILTIN_PMACSWW): Ditto.\n\t(IX86_BUILTIN_PMACSSWD): Ditto.\n\t(IX86_BUILTIN_PMACSWD): Ditto.\n\t(IX86_BUILTIN_PMACSSDD): Ditto.\n\t(IX86_BUILTIN_PMACSDD): Ditto.\n\t(IX86_BUILTIN_PMACSSDQL): Ditto.\n\t(IX86_BUILTIN_PMACSSDQH): Ditto.\n\t(IX86_BUILTIN_PMACSDQL): Ditto.\n\t(IX86_BUILTIN_PMACSDQH): Ditto.\n\t(IX86_BUILTIN_PMADCSSWD): Ditto.\n\t(IX86_BUILTIN_PMADCSWD): Ditto.\n\t(IX86_BUILTIN_PHADDBW): Ditto.\n\t(IX86_BUILTIN_PHADDBD): Ditto.\n\t(IX86_BUILTIN_PHADDBQ): Ditto.\n\t(IX86_BUILTIN_PHADDWD): Ditto.\n\t(IX86_BUILTIN_PHADDWQ): Ditto.\n\t(IX86_BUILTIN_PHADDDQ): Ditto.\n\t(IX86_BUILTIN_PHADDUBW): Ditto.\n\t(IX86_BUILTIN_PHADDUBD): Ditto.\n\t(IX86_BUILTIN_PHADDUBQ): Ditto.\n\t(IX86_BUILTIN_PHADDUWD): Ditto.\n\t(IX86_BUILTIN_PHADDUWQ): Ditto.\n\t(IX86_BUILTIN_PHADDUDQ): Ditto.\n\t(IX86_BUILTIN_PHSUBBW): Ditto.\n\t(IX86_BUILTIN_PHSUBWD): Ditto.\n\t(IX86_BUILTIN_PHSUBDQ): Ditto.\n\t(IX86_BUILTIN_PROTB): Ditto.\n\t(IX86_BUILTIN_PROTW): Ditto.\n\t(IX86_BUILTIN_PROTD): Ditto.\n\t(IX86_BUILTIN_PROTQ): Ditto.\n\t(IX86_BUILTIN_PROTB_IMM): Ditto.\n\t(IX86_BUILTIN_PROTW_IMM): Ditto.\n\t(IX86_BUILTIN_PROTD_IMM): Ditto.\n\t(IX86_BUILTIN_PROTQ_IMM): Ditto.\n\t(IX86_BUILTIN_PSHLB): Ditto.\n\t(IX86_BUILTIN_PSHLW): Ditto.\n\t(IX86_BUILTIN_PSHLD): Ditto.\n\t(IX86_BUILTIN_PSHLQ): Ditto.\n\t(IX86_BUILTIN_PSHAB): Ditto.\n\t(IX86_BUILTIN_PSHAW): Ditto.\n\t(IX86_BUILTIN_PSHAD): Ditto.\n\t(IX86_BUILTIN_PSHAQ): Ditto.\n\t(IX86_BUILTIN_FRCZSS): Ditto.\n\t(IX86_BUILTIN_FRCZSD): Ditto.\n\t(IX86_BUILTIN_FRCZPS): Ditto.\n\t(IX86_BUILTIN_FRCZPD): Ditto.\n\t(IX86_BUILTIN_CVTPH2PS): Ditto.\n\t(IX86_BUILTIN_CVTPS2PH): Ditto.\n\t(IX86_BUILTIN_COMEQSS): Ditto.\n\t(IX86_BUILTIN_COMNESS): Ditto.\n\t(IX86_BUILTIN_COMLTSS): Ditto.\n\t(IX86_BUILTIN_COMLESS): Ditto.\n\t(IX86_BUILTIN_COMGTSS): Ditto.\n\t(IX86_BUILTIN_COMGESS): Ditto.\n\t(IX86_BUILTIN_COMUEQSS): Ditto.\n\t(IX86_BUILTIN_COMUNESS): Ditto.\n\t(IX86_BUILTIN_COMULTSS): Ditto.\n\t(IX86_BUILTIN_COMULESS): Ditto.\n\t(IX86_BUILTIN_COMUGTSS): Ditto.\n\t(IX86_BUILTIN_COMUGESS): Ditto.\n\t(IX86_BUILTIN_COMORDSS): Ditto.\n\t(IX86_BUILTIN_COMUNORDSS): Ditto.\n\t(IX86_BUILTIN_COMFALSESS): Ditto.\n\t(IX86_BUILTIN_COMTRUESS): Ditto.\n\t(IX86_BUILTIN_COMEQSD): Ditto.\n\t(IX86_BUILTIN_COMNESD): Ditto.\n\t(IX86_BUILTIN_COMLTSD): Ditto.\n\t(IX86_BUILTIN_COMLESD): Ditto.\n\t(IX86_BUILTIN_COMGTSD): Ditto.\n\t(IX86_BUILTIN_COMGESD): Ditto.\n\t(IX86_BUILTIN_COMUEQSD): Ditto.\n\t(IX86_BUILTIN_COMUNESD): Ditto.\n\t(IX86_BUILTIN_COMULTSD): Ditto.\n\t(IX86_BUILTIN_COMULESD): Ditto.\n\t(IX86_BUILTIN_COMUGTSD): Ditto.\n\t(IX86_BUILTIN_COMUGESD): Ditto.\n\t(IX86_BUILTIN_COMORDSD): Ditto.\n\t(IX86_BUILTIN_COMUNORDSD): Ditto.\n\t(IX86_BUILTIN_COMFALSESD): Ditto.\n\t(IX86_BUILTIN_COMTRUESD): Ditto.\n\t(IX86_BUILTIN_COMEQPS): Ditto.\n\t(IX86_BUILTIN_COMNEPS): Ditto.\n\t(IX86_BUILTIN_COMLTPS): Ditto.\n\t(IX86_BUILTIN_COMLEPS): Ditto.\n\t(IX86_BUILTIN_COMGTPS): Ditto.\n\t(IX86_BUILTIN_COMGEPS): Ditto.\n\t(IX86_BUILTIN_COMUEQPS): Ditto.\n\t(IX86_BUILTIN_COMUNEPS): Ditto.\n\t(IX86_BUILTIN_COMULTPS): Ditto.\n\t(IX86_BUILTIN_COMULEPS): Ditto.\n\t(IX86_BUILTIN_COMUGTPS): Ditto.\n\t(IX86_BUILTIN_COMUGEPS): Ditto.\n\t(IX86_BUILTIN_COMORDPS): Ditto.\n\t(IX86_BUILTIN_COMUNORDPS): Ditto.\n\t(IX86_BUILTIN_COMFALSEPS): Ditto.\n\t(IX86_BUILTIN_COMTRUEPS): Ditto.\n\t(IX86_BUILTIN_COMEQPD): Ditto.\n\t(IX86_BUILTIN_COMNEPD): Ditto.\n\t(IX86_BUILTIN_COMLTPD): Ditto.\n\t(IX86_BUILTIN_COMLEPD): Ditto.\n\t(IX86_BUILTIN_COMGTPD): Ditto.\n\t(IX86_BUILTIN_COMGEPD): Ditto.\n\t(IX86_BUILTIN_COMUEQPD): Ditto.\n\t(IX86_BUILTIN_COMUNEPD): Ditto.\n\t(IX86_BUILTIN_COMULTPD): Ditto.\n\t(IX86_BUILTIN_COMULEPD): Ditto.\n\t(IX86_BUILTIN_COMUGTPD): Ditto.\n\t(IX86_BUILTIN_COMUGEPD): Ditto.\n\t(IX86_BUILTIN_COMORDPD): Ditto.\n\t(IX86_BUILTIN_COMUNORDPD): Ditto.\n\t(IX86_BUILTIN_COMFALSEPD): Ditto.\n\t(IX86_BUILTIN_COMTRUEPD): Ditto.\n\t(IX86_BUILTIN_PCOMEQUB): Ditto.\n\t(IX86_BUILTIN_PCOMNEUB): Ditto.\n\t(IX86_BUILTIN_PCOMLTUB): Ditto.\n\t(IX86_BUILTIN_PCOMLEUB): Ditto.\n\t(IX86_BUILTIN_PCOMGTUB): Ditto.\n\t(IX86_BUILTIN_PCOMGEUB): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEUB): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEUB): Ditto.\n\t(IX86_BUILTIN_PCOMEQUW): Ditto.\n\t(IX86_BUILTIN_PCOMNEUW): Ditto.\n\t(IX86_BUILTIN_PCOMLTUW): Ditto.\n\t(IX86_BUILTIN_PCOMLEUW): Ditto.\n\t(IX86_BUILTIN_PCOMGTUW): Ditto.\n\t(IX86_BUILTIN_PCOMGEUW): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEUW): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEUW): Ditto.\n\t(IX86_BUILTIN_PCOMEQUD): Ditto.\n\t(IX86_BUILTIN_PCOMNEUD): Ditto.\n\t(IX86_BUILTIN_PCOMLTUD): Ditto.\n\t(IX86_BUILTIN_PCOMLEUD): Ditto.\n\t(IX86_BUILTIN_PCOMGTUD): Ditto.\n\t(IX86_BUILTIN_PCOMGEUD): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEUD): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEUD): Ditto.\n\t(IX86_BUILTIN_PCOMEQUQ): Ditto.\n\t(IX86_BUILTIN_PCOMNEUQ): Ditto.\n\t(IX86_BUILTIN_PCOMLTUQ): Ditto.\n\t(IX86_BUILTIN_PCOMLEUQ): Ditto.\n\t(IX86_BUILTIN_PCOMGTUQ): Ditto.\n\t(IX86_BUILTIN_PCOMGEUQ): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEUQ): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEUQ): Ditto.\n\t(IX86_BUILTIN_PCOMEQB): Ditto.\n\t(IX86_BUILTIN_PCOMNEB): Ditto.\n\t(IX86_BUILTIN_PCOMLTB): Ditto.\n\t(IX86_BUILTIN_PCOMLEB): Ditto.\n\t(IX86_BUILTIN_PCOMGTB): Ditto.\n\t(IX86_BUILTIN_PCOMGEB): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEB): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEB): Ditto.\n\t(IX86_BUILTIN_PCOMEQW): Ditto.\n\t(IX86_BUILTIN_PCOMNEW): Ditto.\n\t(IX86_BUILTIN_PCOMLTW): Ditto.\n\t(IX86_BUILTIN_PCOMLEW): Ditto.\n\t(IX86_BUILTIN_PCOMGTW): Ditto.\n\t(IX86_BUILTIN_PCOMGEW): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEW): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEW): Ditto.\n\t(IX86_BUILTIN_PCOMEQD): Ditto.\n\t(IX86_BUILTIN_PCOMNED): Ditto.\n\t(IX86_BUILTIN_PCOMLTD): Ditto.\n\t(IX86_BUILTIN_PCOMLED): Ditto.\n\t(IX86_BUILTIN_PCOMGTD): Ditto.\n\t(IX86_BUILTIN_PCOMGED): Ditto.\n\t(IX86_BUILTIN_PCOMFALSED): Ditto.\n\t(IX86_BUILTIN_PCOMTRUED): Ditto.\n\t(IX86_BUILTIN_PCOMEQQ): Ditto.\n\t(IX86_BUILTIN_PCOMNEQ): Ditto.\n\t(IX86_BUILTIN_PCOMLTQ): Ditto.\n\t(IX86_BUILTIN_PCOMLEQ): Ditto.\n\t(IX86_BUILTIN_PCOMGTQ): Ditto.\n\t(IX86_BUILTIN_PCOMGEQ): Ditto.\n\t(IX86_BUILTIN_PCOMFALSEQ): Ditto.\n\t(IX86_BUILTIN_PCOMTRUEQ): Ditto.\n\t(enum multi_arg_type): New enum for describing the various SSE5\n\tintrinsic argument types.\n\t(bdesc_multi_arg): New table for SSE5 intrinsics.\n\t(ix86_init_mmx_sse_builtins): Add SSE5 intrinsic support.\n\t(ix86_expand_multi_arg_builtin): New function for creating SSE5\n\tintrinsics.\n\t(ix86_expand_builtin): Add SSE5 intrinsic support.\n\t(ix86_sse5_valid_op_p): New function to validate SSE5 3 and 4\n\toperand instructions.\n\t(ix86_expand_sse5_multiple_memory): New function to split the\n\tsecond memory reference from SSE5 instructions.\n\t(type_has_variadic_args_p): Delete in favor of stdarg_p.\n\t(ix86_return_pops_args): Use stdarg_p to determine if the function\n\thas variable arguments.\n\t(ix86_setup_incoming_varargs): Ditto.\n\t(x86_this_parameter): Ditto.\n\n\t* config/i386/i386-protos.h (ix86_expand_sse5_unpack): Add\n\tdeclaration.\n\t(ix86_expand_sse5_pack): Ditto.\n\t(ix86_sse5_valid_op_p): Ditto.\n\t(ix86_expand_sse5_multiple_memory): Ditto.\n\n\t* config/i386/i386.md (UNSPEC_SSE5_INTRINSIC): Add new UNSPEC\n\tconstant for SSE5 support.\n\t(UNSPEC_SSE5_UNSIGNED_CMP): Ditto.\n\t(UNSPEC_SSE5_TRUEFALSE): Ditto.\n\t(UNSPEC_SSE5_PERMUTE): Ditto.\n\t(UNSPEC_SSE5_ASHIFT): Ditto.\n\t(UNSPEC_SSE5_LSHIFT): Ditto.\n\t(UNSPEC_FRCZ): Ditto.\n\t(UNSPEC_CVTPH2PS): Ditto.\n\t(UNSPEC_CVTPS2PH): Ditto.\n\t(PCOM_FALSE): Add new constant for true/false SSE5 comparisons.\n\t(PCOM_TRUE): Ditto.\n\t(COM_FALSE_S): Ditto.\n\t(COM_FALSE_P): Ditto.\n\t(COM_TRUE_S): Ditto.\n\t(COM_TRUE_P): Ditto.\n\t(type attribute): Add ssemuladd, sseiadd1, ssecvt1, sse4arg types.\n\t(unit attribute): Add support for ssemuladd, ssecvt1, sseiadd1 sse4arg\n\ttypes.\n\t(memory attribute): Ditto.\n\t(sse4_1_round<mode>2): Use TARGET_ROUND instead of TARGET_SSE4_1.\n\tUse SSE4_1_ROUND_* constants instead of hard coded numbers.\n\t(rint<mode>2): Use TARGET_ROUND instead of TARGET_SSE4_1.\n\t(floor<mode>2): Ditto.\n\t(ceil<mode>2): Ditto.\n\t(btrunc<mode>2): Ditto.\n\t(nearbyintdf2): Ditto.\n\t(nearbyintsf2): Ditto.\n\t(sse_setccsf): Disable if SSE5.\n\t(sse_setccdf): Ditto.\n\t(sse5_setcc<mode>): New support for SSE5 conditional move.\n\t(sse5_pcmov_<mode>): Ditto.\n\n\t* config/i386/sse.md (SSEMODE1248): New mode iterator for SSE5.\n\t(SSEMODEF4): Ditto.\n\t(SSEMODEF2P): Ditto.\n\t(ssemodesuffixf4): New mode attribute for SSE5.\n\t(ssemodesuffixf2s): Ditto.\n\t(ssemodesuffixf2c): Ditto.\n\t(sserotatemax): Ditto.\n\t(ssescalarmode): Ditto.\n\t(sse_maskcmpv4sf3): Disable if SSE5.\n\t(sse_maskcmpv2df3): Ditto.\n\t(sse_vmmaskcmpv4sf3): Ditto.\n\t(sse5_fmadd<mode>4): Add SSE5 floating point multiply/add\n\tinstructions.\n\t(sse5_vmfmadd<mode>4): Ditto.\n\t(sse5_fmsub<mode>4): Ditto.\n\t(sse5_vmfmsub<mode>4): Ditto.\n\t(sse5_fnmadd<mode>4): Ditto.\n\t(sse5_vmfnmadd<mode>4): Ditto.\n\t(sse5_fnmsub<mode>4): Ditto.\n\t(sse5_vmfnmsub<mode>4): Ditto.\n\t(sse5i_fmadd<mode>4): Ditto.\n\t(sse5i_fmsub<mode>4): Ditto.\n\t(sse5i_fnmadd<mode>4): Ditto.\n\t(sse5i_fnmsub<mode>4): Ditto.\n\t(sse5i_vmfmadd<mode>4): Ditto.\n\t(sse5i_vmfmsub<mode>4): Ditto.\n\t(sse5i_vmfnmadd<mode>4): Ditto.\n\t(sse5i_vmfnmsub<mode>4): Ditto.\n\t(mulv16qi3): Add SSE5 support.\n\t(mulv4si3): Ditto.\n\t(sse5_mulv4si3): New insn for 32-bit multiply support on SSE5.\n\t(sse2_mulv4si3): Disable if SSE5.\n\t(sse4_1_roundpd): Use TARGET_ROUND instead of TARGET_SSE4_1.\n\t(sse4_1_roundps): Ditto.\n\t(sse4_1_roundsd): Ditto.\n\t(sse4_1_roundss): Ditto.\n\t(sse_maskcmpv4sf3): Disable if SSE5 so the SSE5 instruction will\n\tbe generated.\n\t(sse_maskcmpsf3): Ditto.\n\t(sse_vmmaskcmpv4sf3): Ditto.\n\t(sse2_maskcmpv2df3): Ditto.\n\t(sse2_maskcmpdf3): Ditto.\n\t(sse2_vmmaskcmpv2df3): Ditto.\n\t(sse2_eq<mode>3): Ditto.\n\t(sse2_gt<mode>3): Ditto.\n\t(sse5_pcmov_<mode>): Add SSE5 support.\n\t(vec_unpacku_hi_v16qi): Ditto.\n\t(vec_unpacks_hi_v16qi): Ditto.\n\t(vec_unpacku_lo_v16qi): Ditto.\n\t(vec_unpacks_lo_v16qi): Ditto.\n\t(vec_unpacku_hi_v8hi): Ditto.\n\t(vec_unpacks_hi_v8hi): Ditto.\n\t(vec_unpacku_lo_v8hi): Ditto.\n\t(vec_unpacks_lo_v8hi): Ditto.\n\t(vec_unpacku_hi_v4si): Ditto.\n\t(vec_unpacks_hi_v4si): Ditto.\n\t(vec_unpacku_lo_v4si): Ditto.\n\t(vec_unpacks_lo_v4si): Ditto.\n\t(sse5_pmacsww): New SSE5 intrinsic insn.\n\t(sse5_pmacssww): Ditto.\n\t(sse5_pmacsdd): Ditto.\n\t(sse5_pmacssdd): Ditto.\n\t(sse5_pmacssdql): Ditto.\n\t(sse5_pmacssdqh): Ditto.\n\t(sse5_pmacsdqh): Ditto.\n\t(sse5_pmacsswd): Ditto.\n\t(sse5_pmacswd): Ditto.\n\t(sse5_pmadcsswd): Ditto.\n\t(sse5_pmadcswd): Ditto.\n\t(sse5_pcmov_<move>): Conditional move support on SSE5.\n\t(sse5_phaddbw): New SSE5 intrinsic insn.\n\t(sse5_phaddbd): Ditto.\n\t(sse5_phaddbq): Ditto.\n\t(sse5_phaddwd): Ditto.\n\t(sse5_phaddwq): Ditto.\n\t(sse5_phadddq): Ditto.\n\t(sse5_phaddubw): Ditto.\n\t(sse5_phaddubd): Ditto.\n\t(sse5_phaddubq): Ditto.\n\t(sse5_phadduwd): Ditto.\n\t(sse5_phadduwq): Ditto.\n\t(sse5_phaddudq): Ditto.\n\t(sse5_phsubbw): Ditto.\n\t(sse5_phsubwd): Ditto.\n\t(sse5_phsubdq): Ditto.\n\t(sse5_pperm): Ditto.\n\t(sse5_pperm_sign_v16qi_v8hi): New insns for pack/unpack with SSE5.\n\t(sse5_pperm_zero_v16qi_v8hi): Ditto.\n\t(sse5_pperm_sign_v8hi_v4si): Ditto.\n\t(sse5_pperm_zero_v8hi_v4si): Ditto.\n\t(sse5_pperm_sign_v4si_v2di): Ditto.\n\t(sse5_pperm_sign_v4si_v2di): Ditto.\n\t(sse5_pperm_pack_v2di_v4si): Ditto.\n\t(sse5_pperm_pack_v4si_v8hi): Ditto.\n\t(sse5_pperm_pack_v8hi_v16qi): Ditto.\n\t(sse5_perm<mode>): New SSE5 intrinsic insn.\n\t(rotl<mode>3): Ditto.\n\t(sse5_rotl<mode>3): Ditto.\n\t(sse5_ashl<mode>3): Ditto.\n\t(sse5_lshl<mode>3): Ditto.\n\t(sse5_frcz<mode>2): Ditto.\n\t(sse5s_frcz<mode>2): Ditto.\n\t(sse5_cvtph2ps): Ditto.\n\t(sse5_cvtps2ph): Ditto.\n\t(sse5_vmmaskcmp<mode>3): Ditto.\n\t(sse5_com_tf<mode>3): Ditto.\n\t(sse5_maskcmp<mode>3): Ditto.\n\t(sse5_maskcmp_uns<mode>3): Ditto.\n\t(sse5_maskcmp_uns2<mode>3): Ditto.\n\t(sse5_pcom_tf<mode>3): Ditto.\n\t\n\t* config/i386/predicates.md (sse5_comparison_float_operator): New predicate to match the\n\tcomparison operators supported by the SSE5 com instruction.\n\t(ix86_comparison_int_operator): New predicate to match just the\n\tsigned int comparisons.\n\t(ix86_comparison_uns_operator): New predicate to match just the\n\tunsigned int comparisons.\n\n\t* doc/invoke.texi (-msse5): Add documentation.\n\t(-mfused-madd): Ditto.\n\n\t* doc/extend.texi (x86 intrinsics): Document new SSE5 intrinsics.\n\n\t* config.gcc (i[34567]86-*-*): Include bmmintrin.h and\n\tmmintrin-common.h.\n\t(x86_64-*-*): Ditto.\n\n\t* config/i386/cpuid.h (bit_SSE5): Define SSE5 bit.\n\n\t* config/i386/bmmintrin.h: New file, provide common x86 compiler\n\tintrinisics for SSE5.\n\n\t* config/i386/smmintrin.h: Move instructions shared with SSE5 to\n\tmmintrin-common.h.\n\n\t* config/i386/mmintrin-common.h: New file, to contain common\n\tinstructions between SSE4.1 and SSE5.\n\n\t* config/i386/netware.c (gen_stdcall_or_fastcall_decoration): Use\n\tFOREACH_FUNCTION_ARGS to iterate over the argument list.\n\t(gen_regparm_prefix): Ditto.\n\n\t* config/i386/winnt.c (gen_stdcall_or_fastcall_suffix): Use\n\tFOREACH_FUNCTION_ARGS to iterate over the argument list.  Use\n\tprototype_p to determine if a function is prototyped.\n\n\t* gcc.target/i386/sse5-shift1-vector.c\n\t* gcc.target/i386/isa-12.c\n\t* gcc.target/i386/isa-12.cgcc.target/i386/isa-12.c\n\t* gcc.target/i386/sse5-pcmov2.c\n\t* gcc.target/i386/isa-3.c\n\t* gcc.target/i386/sse5-shift2-vector.c\n\t* gcc.target/i386/isa-7.c\n\t* gcc.target/i386/funcspec-2.c\n\t* gcc.target/i386/sse5-haddX.c\n\t* gcc.target/i386/sse5-hadduX.c\n\t* gcc.target/i386/isa-9.c\n\t* gcc.target/i386/sse5-maccXX.c\n\t* gcc.target/i386/sse5-shift3-vector.c\n\t* gcc.target/i386/sse5-msubXX.c\n\t* gcc.target/i386/sse5-permpX.c\n\t* gcc.target/i386/sse5-check.h\n\t* gcc.target/i386/sse-12.c\n\t* gcc.target/i386/sse-11.c\n\t* gcc.target/i386/sse-10.c\n\t* gcc.target/i386/sse-13.c\n\t* gcc.target/i386/sse-14.c\n\t* gcc.target/i386/sse-22.c\n\t* gcc.target/i386/sse-2.c\n\t* gcc.target/i386/sse-13.c\n\t* gcc.target/i386/avx-2.c\n\t* gcc.target/i386/sse5-rotate1-vector.c\n\t* gcc.target/i386/isa-4.c\n\t* gcc.target/i386/sse5-hsubX.c\n\t* gcc.target/i386/sse5-pcmov.c\n\t* gcc.target/i386/sse5-fma.c\n\t* gcc.target/i386/isa-8.c\n\t* gcc.target/i386/sse5-rotate2-vector.c\n\t* gcc.target/i386/sse5-nmaccXX.c\n\t* gcc.target/i386/sse5-imul64-vector.c\n\t* gcc.target/i386/sse5-nmsubXX.c\n\t* gcc.target/i386/sse5-rotate3-vector.c\n\t* gcc.target/i386/sse5-fma-vector.c\n\t* gcc.target/i386/sse5-imul32widen-vector.c: Remove SSE5 related testcases\n\t* gcc.target/i386/sse5-ima-vector.c\n\n\t* gcc.target/i386/funcspec-8.c: Replace SSE5 by SSE4.\n\t* gcc.target/i386/funcspec-5.c: Remove SSE5.\n\t* gcc.target/i386/funcspec-6.c: Remove fused-add test.\n\t* gcc.target/i386/avx-1.c: Remove SSE5.\n\t* gcc.target/i386/avx-2.c: Remove SSE5.\n\t* g++.dg/other/i386-2.C: Replace SSE5 by SSE4A.\n\t* g++.dg/other/i386-3.C: Replace SSE5 by SSE4A.\n\t* g++.dg/other/i386-6.C: Replace SSE5 by SSE4A.\n\t* g++.dg/other/i386-5.C: Replace SSE5 by SSE4A.\n\nFrom-SVN: r151099", "tree": {"sha": "31aa9a759e717f600325b5c85792b49a0ec855c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31aa9a759e717f600325b5c85792b49a0ec855c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/comments", "author": null, "committer": null, "parents": [{"sha": "027c625ced58b2e001f32c2622de1c75533ac661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027c625ced58b2e001f32c2622de1c75533ac661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027c625ced58b2e001f32c2622de1c75533ac661"}], "stats": {"total": 8546, "additions": 634, "deletions": 7912}, "files": [{"sha": "b9dc80407d867ae821e4cc9b9283713ea04b765f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 435, "deletions": 0, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,3 +1,438 @@\n+2009-08-25 Jan Hubicka  <jh@suse.cz>\n+\n+\t* config/i386/bmmintrin.h: Replace by #error.\n+\n+\tRevert:\n+\tMichael Meissner  <michael.meissner@amd.com>\n+\tDwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n+\tTony Linthicum  <tony.linthicum@amd.com>\n+\n+\t* config/i386/i386.h (TARGET_SSE5): New macro for SSE5.\n+\t(TARGET_ROUND): New macro for the round/ptest instructions which\n+\tare shared between SSE4.1 and SSE5.\n+\t(OPTION_MASK_ISA_ROUND): Ditto.\n+\t(OPTION_ISA_ROUND): Ditto.\n+\t(TARGET_FUSED_MADD): New macro for -mfused-madd swtich.\n+\t(TARGET_CPU_CPP_BUILTINS): Add SSE5 support.\n+\n+\t* config/i386/i386.opt (-msse5): New switch for SSE5 support.\n+\t(-mfused-madd): New switch to give users control over whether the\n+\tcompiler optimizes to use the multiply/add SSE5 instructions.\n+\n+\t* config/i386/i386.c (enum pta_flags): Add PTA_SSE5.\n+\t(ix86_handle_option): Turn off 3dnow if -msse5.\n+\t(override_options): Add SSE5 support.\n+\t(print_operand): %Y prints comparison codes for SSE5 com/pcom\n+\tinstructions.\n+\t(ix86_expand_sse_movcc): Add SSE5 support.\n+\t(ix86_expand_sse5_unpack): New function to use pperm to unpack a\n+\tvector type to the next largest size.\n+\t(ix86_expand_sse5_pack): New function to use pperm to pack a\n+\tvector type to the next smallest size.\n+\t(IX86_BUILTIN_FMADDSS): New for SSE5 intrinsic.\n+\t(IX86_BUILTIN_FMADDSD): Ditto.\n+\t(IX86_BUILTIN_FMADDPS): Ditto.\n+\t(IX86_BUILTIN_FMADDPD): Ditto.\n+\t(IX86_BUILTIN_FMSUBSS): Ditto.\n+\t(IX86_BUILTIN_FMSUBSD): Ditto.\n+\t(IX86_BUILTIN_FMSUBPS): Ditto.\n+\t(IX86_BUILTIN_FMSUBPD): Ditto.\n+\t(IX86_BUILTIN_FNMADDSS): Ditto.\n+\t(IX86_BUILTIN_FNMADDSD): Ditto.\n+\t(IX86_BUILTIN_FNMADDPS): Ditto.\n+\t(IX86_BUILTIN_FNMADDPD): Ditto.\n+\t(IX86_BUILTIN_FNMSUBSS): Ditto.\n+\t(IX86_BUILTIN_FNMSUBSD): Ditto.\n+\t(IX86_BUILTIN_FNMSUBPS): Ditto.\n+\t(IX86_BUILTIN_FNMSUBPD): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V2DI): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V4SI): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V8HI): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V16QI): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V4SF): Ditto.\n+\t(IX86_BUILTIN_PCMOV_V2DF): Ditto.\n+\t(IX86_BUILTIN_PPERM): Ditto.\n+\t(IX86_BUILTIN_PERMPS): Ditto.\n+\t(IX86_BUILTIN_PERMPD): Ditto.\n+\t(IX86_BUILTIN_PMACSSWW): Ditto.\n+\t(IX86_BUILTIN_PMACSWW): Ditto.\n+\t(IX86_BUILTIN_PMACSSWD): Ditto.\n+\t(IX86_BUILTIN_PMACSWD): Ditto.\n+\t(IX86_BUILTIN_PMACSSDD): Ditto.\n+\t(IX86_BUILTIN_PMACSDD): Ditto.\n+\t(IX86_BUILTIN_PMACSSDQL): Ditto.\n+\t(IX86_BUILTIN_PMACSSDQH): Ditto.\n+\t(IX86_BUILTIN_PMACSDQL): Ditto.\n+\t(IX86_BUILTIN_PMACSDQH): Ditto.\n+\t(IX86_BUILTIN_PMADCSSWD): Ditto.\n+\t(IX86_BUILTIN_PMADCSWD): Ditto.\n+\t(IX86_BUILTIN_PHADDBW): Ditto.\n+\t(IX86_BUILTIN_PHADDBD): Ditto.\n+\t(IX86_BUILTIN_PHADDBQ): Ditto.\n+\t(IX86_BUILTIN_PHADDWD): Ditto.\n+\t(IX86_BUILTIN_PHADDWQ): Ditto.\n+\t(IX86_BUILTIN_PHADDDQ): Ditto.\n+\t(IX86_BUILTIN_PHADDUBW): Ditto.\n+\t(IX86_BUILTIN_PHADDUBD): Ditto.\n+\t(IX86_BUILTIN_PHADDUBQ): Ditto.\n+\t(IX86_BUILTIN_PHADDUWD): Ditto.\n+\t(IX86_BUILTIN_PHADDUWQ): Ditto.\n+\t(IX86_BUILTIN_PHADDUDQ): Ditto.\n+\t(IX86_BUILTIN_PHSUBBW): Ditto.\n+\t(IX86_BUILTIN_PHSUBWD): Ditto.\n+\t(IX86_BUILTIN_PHSUBDQ): Ditto.\n+\t(IX86_BUILTIN_PROTB): Ditto.\n+\t(IX86_BUILTIN_PROTW): Ditto.\n+\t(IX86_BUILTIN_PROTD): Ditto.\n+\t(IX86_BUILTIN_PROTQ): Ditto.\n+\t(IX86_BUILTIN_PROTB_IMM): Ditto.\n+\t(IX86_BUILTIN_PROTW_IMM): Ditto.\n+\t(IX86_BUILTIN_PROTD_IMM): Ditto.\n+\t(IX86_BUILTIN_PROTQ_IMM): Ditto.\n+\t(IX86_BUILTIN_PSHLB): Ditto.\n+\t(IX86_BUILTIN_PSHLW): Ditto.\n+\t(IX86_BUILTIN_PSHLD): Ditto.\n+\t(IX86_BUILTIN_PSHLQ): Ditto.\n+\t(IX86_BUILTIN_PSHAB): Ditto.\n+\t(IX86_BUILTIN_PSHAW): Ditto.\n+\t(IX86_BUILTIN_PSHAD): Ditto.\n+\t(IX86_BUILTIN_PSHAQ): Ditto.\n+\t(IX86_BUILTIN_FRCZSS): Ditto.\n+\t(IX86_BUILTIN_FRCZSD): Ditto.\n+\t(IX86_BUILTIN_FRCZPS): Ditto.\n+\t(IX86_BUILTIN_FRCZPD): Ditto.\n+\t(IX86_BUILTIN_CVTPH2PS): Ditto.\n+\t(IX86_BUILTIN_CVTPS2PH): Ditto.\n+\t(IX86_BUILTIN_COMEQSS): Ditto.\n+\t(IX86_BUILTIN_COMNESS): Ditto.\n+\t(IX86_BUILTIN_COMLTSS): Ditto.\n+\t(IX86_BUILTIN_COMLESS): Ditto.\n+\t(IX86_BUILTIN_COMGTSS): Ditto.\n+\t(IX86_BUILTIN_COMGESS): Ditto.\n+\t(IX86_BUILTIN_COMUEQSS): Ditto.\n+\t(IX86_BUILTIN_COMUNESS): Ditto.\n+\t(IX86_BUILTIN_COMULTSS): Ditto.\n+\t(IX86_BUILTIN_COMULESS): Ditto.\n+\t(IX86_BUILTIN_COMUGTSS): Ditto.\n+\t(IX86_BUILTIN_COMUGESS): Ditto.\n+\t(IX86_BUILTIN_COMORDSS): Ditto.\n+\t(IX86_BUILTIN_COMUNORDSS): Ditto.\n+\t(IX86_BUILTIN_COMFALSESS): Ditto.\n+\t(IX86_BUILTIN_COMTRUESS): Ditto.\n+\t(IX86_BUILTIN_COMEQSD): Ditto.\n+\t(IX86_BUILTIN_COMNESD): Ditto.\n+\t(IX86_BUILTIN_COMLTSD): Ditto.\n+\t(IX86_BUILTIN_COMLESD): Ditto.\n+\t(IX86_BUILTIN_COMGTSD): Ditto.\n+\t(IX86_BUILTIN_COMGESD): Ditto.\n+\t(IX86_BUILTIN_COMUEQSD): Ditto.\n+\t(IX86_BUILTIN_COMUNESD): Ditto.\n+\t(IX86_BUILTIN_COMULTSD): Ditto.\n+\t(IX86_BUILTIN_COMULESD): Ditto.\n+\t(IX86_BUILTIN_COMUGTSD): Ditto.\n+\t(IX86_BUILTIN_COMUGESD): Ditto.\n+\t(IX86_BUILTIN_COMORDSD): Ditto.\n+\t(IX86_BUILTIN_COMUNORDSD): Ditto.\n+\t(IX86_BUILTIN_COMFALSESD): Ditto.\n+\t(IX86_BUILTIN_COMTRUESD): Ditto.\n+\t(IX86_BUILTIN_COMEQPS): Ditto.\n+\t(IX86_BUILTIN_COMNEPS): Ditto.\n+\t(IX86_BUILTIN_COMLTPS): Ditto.\n+\t(IX86_BUILTIN_COMLEPS): Ditto.\n+\t(IX86_BUILTIN_COMGTPS): Ditto.\n+\t(IX86_BUILTIN_COMGEPS): Ditto.\n+\t(IX86_BUILTIN_COMUEQPS): Ditto.\n+\t(IX86_BUILTIN_COMUNEPS): Ditto.\n+\t(IX86_BUILTIN_COMULTPS): Ditto.\n+\t(IX86_BUILTIN_COMULEPS): Ditto.\n+\t(IX86_BUILTIN_COMUGTPS): Ditto.\n+\t(IX86_BUILTIN_COMUGEPS): Ditto.\n+\t(IX86_BUILTIN_COMORDPS): Ditto.\n+\t(IX86_BUILTIN_COMUNORDPS): Ditto.\n+\t(IX86_BUILTIN_COMFALSEPS): Ditto.\n+\t(IX86_BUILTIN_COMTRUEPS): Ditto.\n+\t(IX86_BUILTIN_COMEQPD): Ditto.\n+\t(IX86_BUILTIN_COMNEPD): Ditto.\n+\t(IX86_BUILTIN_COMLTPD): Ditto.\n+\t(IX86_BUILTIN_COMLEPD): Ditto.\n+\t(IX86_BUILTIN_COMGTPD): Ditto.\n+\t(IX86_BUILTIN_COMGEPD): Ditto.\n+\t(IX86_BUILTIN_COMUEQPD): Ditto.\n+\t(IX86_BUILTIN_COMUNEPD): Ditto.\n+\t(IX86_BUILTIN_COMULTPD): Ditto.\n+\t(IX86_BUILTIN_COMULEPD): Ditto.\n+\t(IX86_BUILTIN_COMUGTPD): Ditto.\n+\t(IX86_BUILTIN_COMUGEPD): Ditto.\n+\t(IX86_BUILTIN_COMORDPD): Ditto.\n+\t(IX86_BUILTIN_COMUNORDPD): Ditto.\n+\t(IX86_BUILTIN_COMFALSEPD): Ditto.\n+\t(IX86_BUILTIN_COMTRUEPD): Ditto.\n+\t(IX86_BUILTIN_PCOMEQUB): Ditto.\n+\t(IX86_BUILTIN_PCOMNEUB): Ditto.\n+\t(IX86_BUILTIN_PCOMLTUB): Ditto.\n+\t(IX86_BUILTIN_PCOMLEUB): Ditto.\n+\t(IX86_BUILTIN_PCOMGTUB): Ditto.\n+\t(IX86_BUILTIN_PCOMGEUB): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEUB): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEUB): Ditto.\n+\t(IX86_BUILTIN_PCOMEQUW): Ditto.\n+\t(IX86_BUILTIN_PCOMNEUW): Ditto.\n+\t(IX86_BUILTIN_PCOMLTUW): Ditto.\n+\t(IX86_BUILTIN_PCOMLEUW): Ditto.\n+\t(IX86_BUILTIN_PCOMGTUW): Ditto.\n+\t(IX86_BUILTIN_PCOMGEUW): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEUW): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEUW): Ditto.\n+\t(IX86_BUILTIN_PCOMEQUD): Ditto.\n+\t(IX86_BUILTIN_PCOMNEUD): Ditto.\n+\t(IX86_BUILTIN_PCOMLTUD): Ditto.\n+\t(IX86_BUILTIN_PCOMLEUD): Ditto.\n+\t(IX86_BUILTIN_PCOMGTUD): Ditto.\n+\t(IX86_BUILTIN_PCOMGEUD): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEUD): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEUD): Ditto.\n+\t(IX86_BUILTIN_PCOMEQUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMNEUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMLTUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMLEUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMGTUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMGEUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEUQ): Ditto.\n+\t(IX86_BUILTIN_PCOMEQB): Ditto.\n+\t(IX86_BUILTIN_PCOMNEB): Ditto.\n+\t(IX86_BUILTIN_PCOMLTB): Ditto.\n+\t(IX86_BUILTIN_PCOMLEB): Ditto.\n+\t(IX86_BUILTIN_PCOMGTB): Ditto.\n+\t(IX86_BUILTIN_PCOMGEB): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEB): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEB): Ditto.\n+\t(IX86_BUILTIN_PCOMEQW): Ditto.\n+\t(IX86_BUILTIN_PCOMNEW): Ditto.\n+\t(IX86_BUILTIN_PCOMLTW): Ditto.\n+\t(IX86_BUILTIN_PCOMLEW): Ditto.\n+\t(IX86_BUILTIN_PCOMGTW): Ditto.\n+\t(IX86_BUILTIN_PCOMGEW): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEW): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEW): Ditto.\n+\t(IX86_BUILTIN_PCOMEQD): Ditto.\n+\t(IX86_BUILTIN_PCOMNED): Ditto.\n+\t(IX86_BUILTIN_PCOMLTD): Ditto.\n+\t(IX86_BUILTIN_PCOMLED): Ditto.\n+\t(IX86_BUILTIN_PCOMGTD): Ditto.\n+\t(IX86_BUILTIN_PCOMGED): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSED): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUED): Ditto.\n+\t(IX86_BUILTIN_PCOMEQQ): Ditto.\n+\t(IX86_BUILTIN_PCOMNEQ): Ditto.\n+\t(IX86_BUILTIN_PCOMLTQ): Ditto.\n+\t(IX86_BUILTIN_PCOMLEQ): Ditto.\n+\t(IX86_BUILTIN_PCOMGTQ): Ditto.\n+\t(IX86_BUILTIN_PCOMGEQ): Ditto.\n+\t(IX86_BUILTIN_PCOMFALSEQ): Ditto.\n+\t(IX86_BUILTIN_PCOMTRUEQ): Ditto.\n+\t(enum multi_arg_type): New enum for describing the various SSE5\n+\tintrinsic argument types.\n+\t(bdesc_multi_arg): New table for SSE5 intrinsics.\n+\t(ix86_init_mmx_sse_builtins): Add SSE5 intrinsic support.\n+\t(ix86_expand_multi_arg_builtin): New function for creating SSE5\n+\tintrinsics.\n+\t(ix86_expand_builtin): Add SSE5 intrinsic support.\n+\t(ix86_sse5_valid_op_p): New function to validate SSE5 3 and 4\n+\toperand instructions.\n+\t(ix86_expand_sse5_multiple_memory): New function to split the\n+\tsecond memory reference from SSE5 instructions.\n+\t(type_has_variadic_args_p): Delete in favor of stdarg_p.\n+\t(ix86_return_pops_args): Use stdarg_p to determine if the function\n+\thas variable arguments.\n+\t(ix86_setup_incoming_varargs): Ditto.\n+\t(x86_this_parameter): Ditto.\n+\n+\t* config/i386/i386-protos.h (ix86_expand_sse5_unpack): Add\n+\tdeclaration.\n+\t(ix86_expand_sse5_pack): Ditto.\n+\t(ix86_sse5_valid_op_p): Ditto.\n+\t(ix86_expand_sse5_multiple_memory): Ditto.\n+\n+\t* config/i386/i386.md (UNSPEC_SSE5_INTRINSIC): Add new UNSPEC\n+\tconstant for SSE5 support.\n+\t(UNSPEC_SSE5_UNSIGNED_CMP): Ditto.\n+\t(UNSPEC_SSE5_TRUEFALSE): Ditto.\n+\t(UNSPEC_SSE5_PERMUTE): Ditto.\n+\t(UNSPEC_SSE5_ASHIFT): Ditto.\n+\t(UNSPEC_SSE5_LSHIFT): Ditto.\n+\t(UNSPEC_FRCZ): Ditto.\n+\t(UNSPEC_CVTPH2PS): Ditto.\n+\t(UNSPEC_CVTPS2PH): Ditto.\n+\t(PCOM_FALSE): Add new constant for true/false SSE5 comparisons.\n+\t(PCOM_TRUE): Ditto.\n+\t(COM_FALSE_S): Ditto.\n+\t(COM_FALSE_P): Ditto.\n+\t(COM_TRUE_S): Ditto.\n+\t(COM_TRUE_P): Ditto.\n+\t(type attribute): Add ssemuladd, sseiadd1, ssecvt1, sse4arg types.\n+\t(unit attribute): Add support for ssemuladd, ssecvt1, sseiadd1 sse4arg\n+\ttypes.\n+\t(memory attribute): Ditto.\n+\t(sse4_1_round<mode>2): Use TARGET_ROUND instead of TARGET_SSE4_1.\n+\tUse SSE4_1_ROUND_* constants instead of hard coded numbers.\n+\t(rint<mode>2): Use TARGET_ROUND instead of TARGET_SSE4_1.\n+\t(floor<mode>2): Ditto.\n+\t(ceil<mode>2): Ditto.\n+\t(btrunc<mode>2): Ditto.\n+\t(nearbyintdf2): Ditto.\n+\t(nearbyintsf2): Ditto.\n+\t(sse_setccsf): Disable if SSE5.\n+\t(sse_setccdf): Ditto.\n+\t(sse5_setcc<mode>): New support for SSE5 conditional move.\n+\t(sse5_pcmov_<mode>): Ditto.\n+\n+\t* config/i386/sse.md (SSEMODE1248): New mode iterator for SSE5.\n+\t(SSEMODEF4): Ditto.\n+\t(SSEMODEF2P): Ditto.\n+\t(ssemodesuffixf4): New mode attribute for SSE5.\n+\t(ssemodesuffixf2s): Ditto.\n+\t(ssemodesuffixf2c): Ditto.\n+\t(sserotatemax): Ditto.\n+\t(ssescalarmode): Ditto.\n+\t(sse_maskcmpv4sf3): Disable if SSE5.\n+\t(sse_maskcmpv2df3): Ditto.\n+\t(sse_vmmaskcmpv4sf3): Ditto.\n+\t(sse5_fmadd<mode>4): Add SSE5 floating point multiply/add\n+\tinstructions.\n+\t(sse5_vmfmadd<mode>4): Ditto.\n+\t(sse5_fmsub<mode>4): Ditto.\n+\t(sse5_vmfmsub<mode>4): Ditto.\n+\t(sse5_fnmadd<mode>4): Ditto.\n+\t(sse5_vmfnmadd<mode>4): Ditto.\n+\t(sse5_fnmsub<mode>4): Ditto.\n+\t(sse5_vmfnmsub<mode>4): Ditto.\n+\t(sse5i_fmadd<mode>4): Ditto.\n+\t(sse5i_fmsub<mode>4): Ditto.\n+\t(sse5i_fnmadd<mode>4): Ditto.\n+\t(sse5i_fnmsub<mode>4): Ditto.\n+\t(sse5i_vmfmadd<mode>4): Ditto.\n+\t(sse5i_vmfmsub<mode>4): Ditto.\n+\t(sse5i_vmfnmadd<mode>4): Ditto.\n+\t(sse5i_vmfnmsub<mode>4): Ditto.\n+\t(mulv16qi3): Add SSE5 support.\n+\t(mulv4si3): Ditto.\n+\t(sse5_mulv4si3): New insn for 32-bit multiply support on SSE5.\n+\t(sse2_mulv4si3): Disable if SSE5.\n+\t(sse4_1_roundpd): Use TARGET_ROUND instead of TARGET_SSE4_1.\n+\t(sse4_1_roundps): Ditto.\n+\t(sse4_1_roundsd): Ditto.\n+\t(sse4_1_roundss): Ditto.\n+\t(sse_maskcmpv4sf3): Disable if SSE5 so the SSE5 instruction will\n+\tbe generated.\n+\t(sse_maskcmpsf3): Ditto.\n+\t(sse_vmmaskcmpv4sf3): Ditto.\n+\t(sse2_maskcmpv2df3): Ditto.\n+\t(sse2_maskcmpdf3): Ditto.\n+\t(sse2_vmmaskcmpv2df3): Ditto.\n+\t(sse2_eq<mode>3): Ditto.\n+\t(sse2_gt<mode>3): Ditto.\n+\t(sse5_pcmov_<mode>): Add SSE5 support.\n+\t(vec_unpacku_hi_v16qi): Ditto.\n+\t(vec_unpacks_hi_v16qi): Ditto.\n+\t(vec_unpacku_lo_v16qi): Ditto.\n+\t(vec_unpacks_lo_v16qi): Ditto.\n+\t(vec_unpacku_hi_v8hi): Ditto.\n+\t(vec_unpacks_hi_v8hi): Ditto.\n+\t(vec_unpacku_lo_v8hi): Ditto.\n+\t(vec_unpacks_lo_v8hi): Ditto.\n+\t(vec_unpacku_hi_v4si): Ditto.\n+\t(vec_unpacks_hi_v4si): Ditto.\n+\t(vec_unpacku_lo_v4si): Ditto.\n+\t(vec_unpacks_lo_v4si): Ditto.\n+\t(sse5_pmacsww): New SSE5 intrinsic insn.\n+\t(sse5_pmacssww): Ditto.\n+\t(sse5_pmacsdd): Ditto.\n+\t(sse5_pmacssdd): Ditto.\n+\t(sse5_pmacssdql): Ditto.\n+\t(sse5_pmacssdqh): Ditto.\n+\t(sse5_pmacsdqh): Ditto.\n+\t(sse5_pmacsswd): Ditto.\n+\t(sse5_pmacswd): Ditto.\n+\t(sse5_pmadcsswd): Ditto.\n+\t(sse5_pmadcswd): Ditto.\n+\t(sse5_pcmov_<move>): Conditional move support on SSE5.\n+\t(sse5_phaddbw): New SSE5 intrinsic insn.\n+\t(sse5_phaddbd): Ditto.\n+\t(sse5_phaddbq): Ditto.\n+\t(sse5_phaddwd): Ditto.\n+\t(sse5_phaddwq): Ditto.\n+\t(sse5_phadddq): Ditto.\n+\t(sse5_phaddubw): Ditto.\n+\t(sse5_phaddubd): Ditto.\n+\t(sse5_phaddubq): Ditto.\n+\t(sse5_phadduwd): Ditto.\n+\t(sse5_phadduwq): Ditto.\n+\t(sse5_phaddudq): Ditto.\n+\t(sse5_phsubbw): Ditto.\n+\t(sse5_phsubwd): Ditto.\n+\t(sse5_phsubdq): Ditto.\n+\t(sse5_pperm): Ditto.\n+\t(sse5_pperm_sign_v16qi_v8hi): New insns for pack/unpack with SSE5.\n+\t(sse5_pperm_zero_v16qi_v8hi): Ditto.\n+\t(sse5_pperm_sign_v8hi_v4si): Ditto.\n+\t(sse5_pperm_zero_v8hi_v4si): Ditto.\n+\t(sse5_pperm_sign_v4si_v2di): Ditto.\n+\t(sse5_pperm_sign_v4si_v2di): Ditto.\n+\t(sse5_pperm_pack_v2di_v4si): Ditto.\n+\t(sse5_pperm_pack_v4si_v8hi): Ditto.\n+\t(sse5_pperm_pack_v8hi_v16qi): Ditto.\n+\t(sse5_perm<mode>): New SSE5 intrinsic insn.\n+\t(rotl<mode>3): Ditto.\n+\t(sse5_rotl<mode>3): Ditto.\n+\t(sse5_ashl<mode>3): Ditto.\n+\t(sse5_lshl<mode>3): Ditto.\n+\t(sse5_frcz<mode>2): Ditto.\n+\t(sse5s_frcz<mode>2): Ditto.\n+\t(sse5_cvtph2ps): Ditto.\n+\t(sse5_cvtps2ph): Ditto.\n+\t(sse5_vmmaskcmp<mode>3): Ditto.\n+\t(sse5_com_tf<mode>3): Ditto.\n+\t(sse5_maskcmp<mode>3): Ditto.\n+\t(sse5_maskcmp_uns<mode>3): Ditto.\n+\t(sse5_maskcmp_uns2<mode>3): Ditto.\n+\t(sse5_pcom_tf<mode>3): Ditto.\n+\t\n+\t* config/i386/predicates.md (sse5_comparison_float_operator): New predicate to match the\n+\tcomparison operators supported by the SSE5 com instruction.\n+\t(ix86_comparison_int_operator): New predicate to match just the\n+\tsigned int comparisons.\n+\t(ix86_comparison_uns_operator): New predicate to match just the\n+\tunsigned int comparisons.\n+\n+\t* doc/invoke.texi (-msse5): Add documentation.\n+\t(-mfused-madd): Ditto.\n+\n+\t* doc/extend.texi (x86 intrinsics): Document new SSE5 intrinsics.\n+\n+\t* config.gcc (i[34567]86-*-*): Include bmmintrin.h and\n+\tmmintrin-common.h.\n+\t(x86_64-*-*): Ditto.\n+\n+\t* config/i386/cpuid.h (bit_SSE5): Define SSE5 bit.\n+\n+\t* config/i386/bmmintrin.h: New file, provide common x86 compiler\n+\tintrinisics for SSE5.\n+\n+\t* config/i386/smmintrin.h: Move instructions shared with SSE5 to\n+\tmmintrin-common.h.\n+\n+\t* config/i386/mmintrin-common.h: New file, to contain common\n+\tinstructions between SSE4.1 and SSE5.\n+\n+\t* config/i386/netware.c (gen_stdcall_or_fastcall_decoration): Use\n+\tFOREACH_FUNCTION_ARGS to iterate over the argument list.\n+\t(gen_regparm_prefix): Ditto.\n+\n+\t* config/i386/winnt.c (gen_stdcall_or_fastcall_suffix): Use\n+\tFOREACH_FUNCTION_ARGS to iterate over the argument list.  Use\n+\tprototype_p to determine if a function is prototyped.\n+\n 2009-08-25 Ville Voutilainen <ville.voutilainen@gmail.com>\n \n \t* c-common.c (c_common_reswords) add the alignof keyword,"}, {"sha": "91d4e77424679722eb9eb45671217fb3b92d1a92", "filename": "gcc/config/i386/bmmintrin.h", "status": "modified", "additions": 1, "deletions": 1233, "changes": 1234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmmintrin.h?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -24,1238 +24,6 @@\n #ifndef _BMMINTRIN_H_INCLUDED\n #define _BMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE5__\n-# error \"SSE5 instruction set not enabled\"\n-#else\n-\n-/* We need definitions from the SSE4A, SSE3, SSE2 and SSE header files.  */\n-#include <ammintrin.h>\n-#include <mmintrin-common.h>\n-\n-/* Floating point multiply/add type instructions */\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fmaddps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_pd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fmaddpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_ss(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return  (__m128) __builtin_ia32_fmaddss ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_sd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fmaddsd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_msub_ps(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fmsubps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_msub_pd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fmsubpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_msub_ss(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fmsubss ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_msub_sd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fmsubsd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmacc_ps(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fnmaddps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmacc_pd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fnmaddpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmacc_ss(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fnmaddss ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmacc_sd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fnmaddsd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmsub_ps(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fnmsubps ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmsub_pd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fnmsubpd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmsub_ss(__m128 __A, __m128 __B, __m128 __C)\n-{\n-  return (__m128) __builtin_ia32_fnmsubss ((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_nmsub_sd(__m128d __A, __m128d __B, __m128d __C)\n-{\n-  return (__m128d) __builtin_ia32_fnmsubsd ((__v2df)__A, (__v2df)__B, (__v2df)__C);\n-}\n-\n-/* Integer multiply/add intructions. */\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_pmacssww ((__v8hi)__A,(__v8hi)__B, (__v8hi)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_pmacsww ((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccsd_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacsswd ((__v8hi)__A, (__v8hi)__B, (__v4si)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccd_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacswd ((__v8hi)__A, (__v8hi)__B, (__v4si)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccs_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacssdd ((__v4si)__A, (__v4si)__B, (__v4si)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macc_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacsdd ((__v4si)__A, (__v4si)__B, (__v4si)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccslo_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacssdql ((__v4si)__A, (__v4si)__B, (__v2di)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macclo_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacsdql ((__v4si)__A, (__v4si)__B, (__v2di)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maccshi_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacssdqh ((__v4si)__A, (__v4si)__B, (__v2di)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_macchi_epi32(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmacsdqh ((__v4si)__A, (__v4si)__B, (__v2di)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maddsd_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmadcsswd ((__v8hi)__A,(__v8hi)__B,(__v4si)__C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maddd_epi16(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pmadcswd ((__v8hi)__A,(__v8hi)__B,(__v4si)__C);\n-}\n-\n-/* Packed Integer Horizontal Add and Subtract */\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddw_epi8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddbw ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddd_epi8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddbd ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epi8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddbq ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddd_epi16(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddwd ((__v8hi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epi16(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddwq ((__v8hi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epi32(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phadddq ((__v4si)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddw_epu8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddubw ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddd_epu8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddubd ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epu8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddubq ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddd_epu16(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phadduwd ((__v8hi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epu16(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phadduwq ((__v8hi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_haddq_epu32(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phaddudq ((__v4si)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_hsubw_epi8(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phsubbw ((__v16qi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_hsubd_epi16(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phsubwd ((__v8hi)__A);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_hsubq_epi32(__m128i __A)\n-{\n-  return  (__m128i) __builtin_ia32_phsubdq ((__v4si)__A);\n-}\n-\n-/* Vector conditional move and permute */\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cmov_si128(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pcmov (__A, __B, __C);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_perm_epi8(__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return  (__m128i) __builtin_ia32_pperm ((__v16qi)__A, (__v16qi)__B, (__v16qi)__C);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_perm_ps(__m128 __A, __m128 __B, __m128i __C)\n-{\n-  return  (__m128) __builtin_ia32_permps ((__m128)__A, (__m128)__B, (__v16qi)__C);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_perm_pd(__m128d __A, __m128d __B, __m128i __C)\n-{\n-  return  (__m128d) __builtin_ia32_permpd ((__m128d)__A, (__m128d)__B, (__v16qi)__C);\n-}\n-\n-/* Packed Integer Rotates and Shifts */\n-\n-/* Rotates - Non-Immediate form */\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_rot_epi8(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_protb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_rot_epi16(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_protw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_rot_epi32(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_protd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_rot_epi64(__m128i __A,  __m128i __B)\n-{\n-  return (__m128i)  __builtin_ia32_protq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-\n-/* Rotates - Immediate form */\n-#ifdef __OPTIMIZE__\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_roti_epi8(__m128i __A, const int __B)\n-{\n-  return  (__m128i) __builtin_ia32_protbi ((__v16qi)__A, __B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_roti_epi16(__m128i __A, const int __B)\n-{\n-  return  (__m128i) __builtin_ia32_protwi ((__v8hi)__A, __B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_roti_epi32(__m128i __A, const int __B)\n-{\n-  return  (__m128i) __builtin_ia32_protdi ((__v4si)__A, __B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_roti_epi64(__m128i __A, const int __B)\n-{\n-  return  (__m128i) __builtin_ia32_protqi ((__v2di)__A, __B);\n-}\n-#else\n-#define _mm_roti_epi8(A, N) \\\n-  ((__m128i) __builtin_ia32_protbi ((__v16qi)(__m128i)(A), (int)(N)))\n-#define _mm_roti_epi16(A, N) \\\n-  ((__m128i) __builtin_ia32_protwi ((__v8hi)(__m128i)(A), (int)(N)))\n-#define _mm_roti_epi32(A, N) \\\n-  ((__m128i) __builtin_ia32_protdi ((__v4si)(__m128i)(A), (int)(N)))\n-#define _mm_roti_epi64(A, N) \\\n-  ((__m128i) __builtin_ia32_protqi ((__v2di)(__m128i)(A), (int)(N)))\n-#endif\n-\n-/* pshl */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_shl_epi8(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshlb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_shl_epi16(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshlw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_shl_epi32(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshld ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_shl_epi64(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshlq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-/* psha */\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_sha_epi8(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshab ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_sha_epi16(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshaw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_sha_epi32(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshad ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_sha_epi64(__m128i __A,  __m128i __B)\n-{\n-  return  (__m128i) __builtin_ia32_pshaq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-/* Compare and Predicate Generation */\n-\n-/* com (floating point, packed single) */\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_ps(__m128 __A, __m128 __B)\n-{\n-  return  (__m128) __builtin_ia32_comeqps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_ps(__m128 __A, __m128 __B)\n-{\n-  return  (__m128) __builtin_ia32_comltps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comleps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comunord_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comunordps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comuneqps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnlt_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comunltps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnle_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128)  __builtin_ia32_comunleps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comord_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comordps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comueq_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comueqps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnge_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comungeps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comngt_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comungtps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comfalseps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comoneq_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comneqps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comgeps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comgtps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_ps(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comtrueps ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-/* com (floating point, packed double) */\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comeqpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comltpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comlepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comunord_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunordpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comuneqpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnlt_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunltpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnle_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunlepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comord_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comordpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comueq_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comueqpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnge_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comungepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comngt_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comungtpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comfalsepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comoneq_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comneqpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comgepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comgtpd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_pd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comtruepd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-/* com (floating point, scalar single) */\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128)  __builtin_ia32_comeqss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comltss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comless ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comunord_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comunordss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comuneqss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnlt_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comunltss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnle_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comunless ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comord_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comordss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comueq_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comueqss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnge_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comungess ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comngt_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comungtss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comfalsess ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comoneq_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comneqss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comgess ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comgtss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_ss(__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_comtruess ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-/* com (floating point, scalar double) */\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comeqsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comltsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comlesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comunord_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunordsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comuneqsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnlt_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunltsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnle_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comunlesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comord_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comordsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comueq_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comueqsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comnge_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comungesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comngt_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comungtsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comfalsesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comoneq_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comneqsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comgesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comgtsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_sd(__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_comtruesd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-\n-/*pcom (integer, unsinged bytes) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomequb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomnequb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epu8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueub ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-/*pcom (integer, unsinged words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomequw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomnequw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epu16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueuw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-/*pcom (integer, unsinged double words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomequd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomnequd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epu32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueud ((__v4si)__A, (__v4si)__B);\n-}\n-\n-/*pcom (integer, unsinged quad words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomequq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomnequq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epu64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueuq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-/*pcom (integer, signed bytes) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomeqb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomneqb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epi8(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueb ((__v16qi)__A, (__v16qi)__B);\n-}\n-\n-/*pcom (integer, signed words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomlew ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgew ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomeqw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomneqw ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalsew ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epi16(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtruew ((__v8hi)__A, (__v8hi)__B);\n-}\n-\n-/*pcom (integer, signed double words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomled ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomged ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomeqd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomneqd ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalsed ((__v4si)__A, (__v4si)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epi32(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrued ((__v4si)__A, (__v4si)__B);\n-}\n-\n-/*pcom (integer, signed quad words) */\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comlt_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomltq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comle_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomleq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comgt_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgtq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comge_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomgeq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comeq_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomeqq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comneq_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomneqq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comfalse_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomfalseq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_comtrue_epi64(__m128i __A, __m128i __B)\n-{\n-  return (__m128i) __builtin_ia32_pcomtrueq ((__v2di)__A, (__v2di)__B);\n-}\n-\n-/* FRCZ */\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_frcz_ps (__m128 __A)\n-{\n-  return (__m128) __builtin_ia32_frczps ((__v4sf)__A);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_frcz_pd (__m128d __A)\n-{\n-  return (__m128d) __builtin_ia32_frczpd ((__v2df)__A);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_frcz_ss (__m128 __A, __m128 __B)\n-{\n-  return (__m128) __builtin_ia32_frczss ((__v4sf)__A, (__v4sf)__B);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_frcz_sd (__m128d __A, __m128d __B)\n-{\n-  return (__m128d) __builtin_ia32_frczsd ((__v2df)__A, (__v2df)__B);\n-}\n-\n-#endif /* __SSE5__ */\n+# error \"SSE5 instruction set removed from compiler\"\n \n #endif /* _BMMINTRIN_H_INCLUDED */"}, {"sha": "4c960e7d444507199c4d545a7220ceb2f2e1b8d2", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -230,8 +230,6 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__FMA__\");\n   if (isa_flag & OPTION_MASK_ISA_SSE4A)\n     def_or_undef (parse_in, \"__SSE4A__\");\n-  if (isa_flag & OPTION_MASK_ISA_SSE5)\n-    def_or_undef (parse_in, \"__SSE5__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "389fc3cddd7701d1c076a6bdb801e2fc01e7ca94", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -113,8 +113,6 @@ extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n extern void ix86_expand_sse_unpack (rtx[], bool, bool);\n extern void ix86_expand_sse4_unpack (rtx[], bool, bool);\n-extern void ix86_expand_sse5_unpack (rtx[], bool, bool);\n-extern void ix86_expand_sse5_pack (rtx[]);\n extern int ix86_expand_int_addcc (rtx[]);\n extern void ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);\n extern void x86_initialize_trampoline (rtx, rtx, rtx);\n@@ -216,9 +214,6 @@ extern void ix86_expand_vector_set (bool, rtx, rtx, int);\n extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc_v4sf (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n \n-extern bool ix86_sse5_valid_op_p (rtx [], rtx, int, bool, int, bool);\n-extern void ix86_expand_sse5_multiple_memory (rtx [], int, enum machine_mode);\n-\n /* In i386-c.c  */\n extern void ix86_target_macros (void);\n extern void ix86_register_pragmas (void);"}, {"sha": "3a12c27a2ea8cfb3253cd38237f87f68359901cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 101, "deletions": 1402, "changes": 1503, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1954,8 +1954,6 @@ static int ix86_isa_flags_explicit;\n \n #define OPTION_MASK_ISA_SSE4A_SET \\\n   (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_SSE3_SET)\n-#define OPTION_MASK_ISA_SSE5_SET \\\n-  (OPTION_MASK_ISA_SSE5 | OPTION_MASK_ISA_SSE4A_SET)\n \n /* AES and PCLMUL need SSE2 because they use xmm registers */\n #define OPTION_MASK_ISA_AES_SET \\\n@@ -2004,8 +2002,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_SSE4_UNSET OPTION_MASK_ISA_SSE4_1_UNSET\n \n #define OPTION_MASK_ISA_SSE4A_UNSET \\\n-  (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_SSE5_UNSET)\n-#define OPTION_MASK_ISA_SSE5_UNSET OPTION_MASK_ISA_SSE5\n+  (OPTION_MASK_ISA_SSE4A)\n #define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n@@ -2239,19 +2236,6 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n-    case OPT_msse5:\n-      if (value)\n-\t{\n-\t  ix86_isa_flags |= OPTION_MASK_ISA_SSE5_SET;\n-\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE5_SET;\n-\t}\n-      else\n-\t{\n-\t  ix86_isa_flags &= ~OPTION_MASK_ISA_SSE5_UNSET;\n-\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE5_UNSET;\n-\t}\n-      return true;\n-\n     case OPT_mabm:\n       if (value)\n \t{\n@@ -2374,12 +2358,11 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     int mask;\t\t\t/* isa mask options */\n   };\n \n-  /* This table is ordered so that options like -msse5 or -msse4.2 that imply\n+  /* This table is ordered so that options like -msse4.2 that imply\n      preceding options while match those first.  */\n   static struct ix86_target_opts isa_opts[] =\n   {\n     { \"-m64\",\t\tOPTION_MASK_ISA_64BIT },\n-    { \"-msse5\",\t\tOPTION_MASK_ISA_SSE5 },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n@@ -2413,7 +2396,6 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mms-bitfields\",\t\t\tMASK_MS_BITFIELD_LAYOUT },\n     { \"-mno-align-stringops\",\t\tMASK_NO_ALIGN_STRINGOPS },\n     { \"-mno-fancy-math-387\",\t\tMASK_NO_FANCY_MATH_387 },\n-    { \"-mno-fused-madd\",\t\tMASK_NO_FUSED_MADD },\n     { \"-mno-push-args\",\t\t\tMASK_NO_PUSH_ARGS },\n     { \"-mno-red-zone\",\t\t\tMASK_NO_RED_ZONE },\n     { \"-momit-leaf-frame-pointer\",\tMASK_OMIT_LEAF_FRAME_POINTER },\n@@ -2606,12 +2588,11 @@ override_options (bool main_args_p)\n       PTA_NO_SAHF = 1 << 13,\n       PTA_SSE4_1 = 1 << 14,\n       PTA_SSE4_2 = 1 << 15,\n-      PTA_SSE5 = 1 << 16,\n-      PTA_AES = 1 << 17,\n-      PTA_PCLMUL = 1 << 18,\n-      PTA_AVX = 1 << 19,\n-      PTA_FMA = 1 << 20,\n-      PTA_MOVBE = 1 << 21\n+      PTA_AES = 1 << 16,\n+      PTA_PCLMUL = 1 << 17,\n+      PTA_AVX = 1 << 18,\n+      PTA_FMA = 1 << 19,\n+      PTA_MOVBE = 1 << 20\n     };\n \n   static struct pta\n@@ -2954,9 +2935,6 @@ override_options (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_SSE4A\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE4A))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_SSE4A;\n-\tif (processor_alias_table[i].flags & PTA_SSE5\n-\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE5))\n-\t  ix86_isa_flags |= OPTION_MASK_ISA_SSE5;\n \tif (processor_alias_table[i].flags & PTA_ABM\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_ABM))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_ABM;\n@@ -3639,7 +3617,6 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     IX86_ATTR_ISA (\"sse4.1\",\tOPT_msse4_1),\n     IX86_ATTR_ISA (\"sse4.2\",\tOPT_msse4_2),\n     IX86_ATTR_ISA (\"sse4a\",\tOPT_msse4a),\n-    IX86_ATTR_ISA (\"sse5\",\tOPT_msse5),\n     IX86_ATTR_ISA (\"ssse3\",\tOPT_mssse3),\n \n     /* string options */\n@@ -3656,10 +3633,6 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n \t\t  OPT_mfancy_math_387,\n \t\t  MASK_NO_FANCY_MATH_387),\n \n-    IX86_ATTR_NO (\"fused-madd\",\n-\t\t  OPT_mfused_madd,\n-\t\t  MASK_NO_FUSED_MADD),\n-\n     IX86_ATTR_YES (\"ieee-fp\",\n \t\t   OPT_mieee_fp,\n \t\t   MASK_IEEE_FP),\n@@ -3932,8 +3905,8 @@ ix86_can_inline_p (tree caller, tree callee)\n       struct cl_target_option *caller_opts = TREE_TARGET_OPTION (caller_tree);\n       struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n \n-      /* Callee's isa options should a subset of the caller's, i.e. a SSE5 function\n-\t can inline a SSE2 function but a SSE2 function can't inline a SSE5\n+      /* Callee's isa options should a subset of the caller's, i.e. a SSE4 function\n+\t can inline a SSE2 function but a SSE2 function can't inline a SSE4\n \t function.  */\n       if ((caller_opts->ix86_isa_flags & callee_opts->ix86_isa_flags)\n \t  != callee_opts->ix86_isa_flags)\n@@ -11229,7 +11202,6 @@ get_some_local_dynamic_name (void)\n    X -- don't print any sort of PIC '@' suffix for a symbol.\n    & -- print some in-use local-dynamic symbol name.\n    H -- print a memory address offset by 8; used for sse high-parts\n-   Y -- print condition for SSE5 com* instruction.\n    + -- print a branch hint as 'cs' or 'ds' prefix\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n  */\n@@ -11647,61 +11619,6 @@ print_operand (FILE *file, rtx x, int code)\n \t    return;\n \t  }\n \n-\tcase 'Y':\n-\t  switch (GET_CODE (x))\n-\t    {\n-\t    case NE:\n-\t      fputs (\"neq\", file);\n-\t      break;\n-\t    case EQ:\n-\t      fputs (\"eq\", file);\n-\t      break;\n-\t    case GE:\n-\t    case GEU:\n-\t      fputs (INTEGRAL_MODE_P (GET_MODE (x)) ? \"ge\" : \"unlt\", file);\n-\t      break;\n-\t    case GT:\n-\t    case GTU:\n-\t      fputs (INTEGRAL_MODE_P (GET_MODE (x)) ? \"gt\" : \"unle\", file);\n-\t      break;\n-\t    case LE:\n-\t    case LEU:\n-\t      fputs (\"le\", file);\n-\t      break;\n-\t    case LT:\n-\t    case LTU:\n-\t      fputs (\"lt\", file);\n-\t      break;\n-\t    case UNORDERED:\n-\t      fputs (\"unord\", file);\n-\t      break;\n-\t    case ORDERED:\n-\t      fputs (\"ord\", file);\n-\t      break;\n-\t    case UNEQ:\n-\t      fputs (\"ueq\", file);\n-\t      break;\n-\t    case UNGE:\n-\t      fputs (\"nlt\", file);\n-\t      break;\n-\t    case UNGT:\n-\t      fputs (\"nle\", file);\n-\t      break;\n-\t    case UNLE:\n-\t      fputs (\"ule\", file);\n-\t      break;\n-\t    case UNLT:\n-\t      fputs (\"ult\", file);\n-\t      break;\n-\t    case LTGT:\n-\t      fputs (\"une\", file);\n-\t      break;\n-\t    default:\n-\t      output_operand_lossage (\"operand is not a condition code, invalid operand code 'D'\");\n-\t      return;\n-\t    }\n-\t  return;\n-\n \tcase ';':\n #if TARGET_MACHO\n \t  fputs (\" ; \", file);\n@@ -15911,14 +15828,6 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       x = gen_rtx_AND (mode, x, op_false);\n       emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n     }\n-  else if (TARGET_SSE5)\n-    {\n-      rtx pcmov = gen_rtx_SET (mode, dest,\n-\t\t\t       gen_rtx_IF_THEN_ELSE (mode, cmp,\n-\t\t\t\t\t\t     op_true,\n-\t\t\t\t\t\t     op_false));\n-      emit_insn (pcmov);\n-    }\n   else\n     {\n       op_true = force_reg (mode, op_true);\n@@ -16041,119 +15950,115 @@ ix86_expand_int_vcond (rtx operands[])\n   cop0 = operands[4];\n   cop1 = operands[5];\n \n-  /* SSE5 supports all of the comparisons on all vector int types.  */\n-  if (!TARGET_SSE5)\n+  /* Canonicalize the comparison to EQ, GT, GTU.  */\n+  switch (code)\n+    {\n+    case EQ:\n+    case GT:\n+    case GTU:\n+      break;\n+\n+    case NE:\n+    case LE:\n+    case LEU:\n+      code = reverse_condition (code);\n+      negate = true;\n+      break;\n+\n+    case GE:\n+    case GEU:\n+      code = reverse_condition (code);\n+      negate = true;\n+      /* FALLTHRU */\n+\n+    case LT:\n+    case LTU:\n+      code = swap_condition (code);\n+      x = cop0, cop0 = cop1, cop1 = x;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Only SSE4.1/SSE4.2 supports V2DImode.  */\n+  if (mode == V2DImode)\n     {\n-      /* Canonicalize the comparison to EQ, GT, GTU.  */\n       switch (code)\n \t{\n \tcase EQ:\n-\tcase GT:\n-\tcase GTU:\n-\t  break;\n-\n-\tcase NE:\n-\tcase LE:\n-\tcase LEU:\n-\t  code = reverse_condition (code);\n-\t  negate = true;\n+\t  /* SSE4.1 supports EQ.  */\n+\t  if (!TARGET_SSE4_1)\n+\t    return false;\n \t  break;\n \n-\tcase GE:\n-\tcase GEU:\n-\t  code = reverse_condition (code);\n-\t  negate = true;\n-\t  /* FALLTHRU */\n-\n-\tcase LT:\n-\tcase LTU:\n-\t  code = swap_condition (code);\n-\t  x = cop0, cop0 = cop1, cop1 = x;\n+\tcase GT:\n+\tcase GTU:\n+\t  /* SSE4.2 supports GT/GTU.  */\n+\t  if (!TARGET_SSE4_2)\n+\t    return false;\n \t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+    }\n \n-      /* Only SSE4.1/SSE4.2 supports V2DImode.  */\n-      if (mode == V2DImode)\n-\t{\n-\t  switch (code)\n-\t    {\n-\t    case EQ:\n-\t      /* SSE4.1 supports EQ.  */\n-\t      if (!TARGET_SSE4_1)\n-\t\treturn false;\n-\t      break;\n-\n-\t    case GT:\n-\t    case GTU:\n-\t      /* SSE4.2 supports GT/GTU.  */\n-\t      if (!TARGET_SSE4_2)\n-\t\treturn false;\n-\t      break;\n-\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t}\n+  /* Unsigned parallel compare is not supported by the hardware.  Play some\n+     tricks to turn this into a signed comparison against 0.  */\n+  if (code == GTU)\n+    {\n+      cop0 = force_reg (mode, cop0);\n \n-      /* Unsigned parallel compare is not supported by the hardware.  Play some\n-\t tricks to turn this into a signed comparison against 0.  */\n-      if (code == GTU)\n+      switch (mode)\n \t{\n-\t  cop0 = force_reg (mode, cop0);\n-\n-\t  switch (mode)\n-\t    {\n-\t    case V4SImode:\n-\t    case V2DImode:\n-\t      {\n-\t\trtx t1, t2, mask;\n-\n-\t\t/* Perform a parallel modulo subtraction.  */\n-\t\tt1 = gen_reg_rtx (mode);\n-\t\temit_insn ((mode == V4SImode\n-\t\t\t    ? gen_subv4si3\n-\t\t\t    : gen_subv2di3) (t1, cop0, cop1));\n-\n-\t\t/* Extract the original sign bit of op0.  */\n-\t\tmask = ix86_build_signbit_mask (GET_MODE_INNER (mode),\n-\t\t\t\t\t\ttrue, false);\n-\t\tt2 = gen_reg_rtx (mode);\n-\t\temit_insn ((mode == V4SImode\n-\t\t\t    ? gen_andv4si3\n-\t\t\t    : gen_andv2di3) (t2, cop0, mask));\n-\n-\t\t/* XOR it back into the result of the subtraction.  This results\n-\t\t   in the sign bit set iff we saw unsigned underflow.  */\n-\t\tx = gen_reg_rtx (mode);\n-\t\temit_insn ((mode == V4SImode\n-\t\t\t    ? gen_xorv4si3\n-\t\t\t    : gen_xorv2di3) (x, t1, t2));\n-\n-\t\tcode = GT;\n-\t      }\n-\t      break;\n-\n-\t    case V16QImode:\n-\t    case V8HImode:\n-\t      /* Perform a parallel unsigned saturating subtraction.  */\n-\t      x = gen_reg_rtx (mode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, x,\n-\t\t\t\t      gen_rtx_US_MINUS (mode, cop0, cop1)));\n+\tcase V4SImode:\n+\tcase V2DImode:\n+\t  {\n+\t    rtx t1, t2, mask;\n+\n+\t    /* Perform a parallel modulo subtraction.  */\n+\t    t1 = gen_reg_rtx (mode);\n+\t    emit_insn ((mode == V4SImode\n+\t\t\t? gen_subv4si3\n+\t\t\t: gen_subv2di3) (t1, cop0, cop1));\n+\n+\t    /* Extract the original sign bit of op0.  */\n+\t    mask = ix86_build_signbit_mask (GET_MODE_INNER (mode),\n+\t\t\t\t\t    true, false);\n+\t    t2 = gen_reg_rtx (mode);\n+\t    emit_insn ((mode == V4SImode\n+\t\t\t? gen_andv4si3\n+\t\t\t: gen_andv2di3) (t2, cop0, mask));\n+\n+\t    /* XOR it back into the result of the subtraction.  This results\n+\t       in the sign bit set iff we saw unsigned underflow.  */\n+\t    x = gen_reg_rtx (mode);\n+\t    emit_insn ((mode == V4SImode\n+\t\t\t? gen_xorv4si3\n+\t\t\t: gen_xorv2di3) (x, t1, t2));\n+\n+\t    code = GT;\n+\t  }\n+\t  break;\n \n-\t      code = EQ;\n-\t      negate = !negate;\n-\t      break;\n+\tcase V16QImode:\n+\tcase V8HImode:\n+\t  /* Perform a parallel unsigned saturating subtraction.  */\n+\t  x = gen_reg_rtx (mode);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, x,\n+\t\t\t\t  gen_rtx_US_MINUS (mode, cop0, cop1)));\n \n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n+\t  code = EQ;\n+\t  negate = !negate;\n+\t  break;\n \n-\t  cop0 = x;\n-\t  cop1 = CONST0_RTX (mode);\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n+\n+      cop0 = x;\n+      cop1 = CONST0_RTX (mode);\n     }\n \n   x = ix86_expand_sse_cmp (operands[0], code, cop0, cop1,\n@@ -16259,190 +16164,6 @@ ix86_expand_sse4_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n   emit_insn (unpack (dest, src));\n }\n \n-/* This function performs the same task as ix86_expand_sse_unpack,\n-   but with sse5 instructions.  */\n-\n-void\n-ix86_expand_sse5_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n-{\n-  enum machine_mode imode = GET_MODE (operands[1]);\n-  int pperm_bytes[16];\n-  int i;\n-  int h = (high_p) ? 8 : 0;\n-  int h2;\n-  int sign_extend;\n-  rtvec v = rtvec_alloc (16);\n-  rtvec vs;\n-  rtx x, p;\n-  rtx op0 = operands[0], op1 = operands[1];\n-\n-  switch (imode)\n-    {\n-    case V16QImode:\n-      vs = rtvec_alloc (8);\n-      h2 = (high_p) ? 8 : 0;\n-      for (i = 0; i < 8; i++)\n-\t{\n-\t  pperm_bytes[2*i+0] = PPERM_SRC | PPERM_SRC2 | i | h;\n-\t  pperm_bytes[2*i+1] = ((unsigned_p)\n-\t\t\t\t? PPERM_ZERO\n-\t\t\t\t: PPERM_SIGN | PPERM_SRC2 | i | h);\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      for (i = 0; i < 8; i++)\n-\tRTVEC_ELT (vs, i) = GEN_INT (i + h2);\n-\n-      p = gen_rtx_PARALLEL (VOIDmode, vs);\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      if (unsigned_p)\n-\temit_insn (gen_sse5_pperm_zero_v16qi_v8hi (op0, op1, p, x));\n-      else\n-\temit_insn (gen_sse5_pperm_sign_v16qi_v8hi (op0, op1, p, x));\n-      break;\n-\n-    case V8HImode:\n-      vs = rtvec_alloc (4);\n-      h2 = (high_p) ? 4 : 0;\n-      for (i = 0; i < 4; i++)\n-\t{\n-\t  sign_extend = ((unsigned_p)\n-\t\t\t ? PPERM_ZERO\n-\t\t\t : PPERM_SIGN | PPERM_SRC2 | ((2*i) + 1 + h));\n-\t  pperm_bytes[4*i+0] = PPERM_SRC | PPERM_SRC2 | ((2*i) + 0 + h);\n-\t  pperm_bytes[4*i+1] = PPERM_SRC | PPERM_SRC2 | ((2*i) + 1 + h);\n-\t  pperm_bytes[4*i+2] = sign_extend;\n-\t  pperm_bytes[4*i+3] = sign_extend;\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      for (i = 0; i < 4; i++)\n-\tRTVEC_ELT (vs, i) = GEN_INT (i + h2);\n-\n-      p = gen_rtx_PARALLEL (VOIDmode, vs);\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      if (unsigned_p)\n-\temit_insn (gen_sse5_pperm_zero_v8hi_v4si (op0, op1, p, x));\n-      else\n-\temit_insn (gen_sse5_pperm_sign_v8hi_v4si (op0, op1, p, x));\n-      break;\n-\n-    case V4SImode:\n-      vs = rtvec_alloc (2);\n-      h2 = (high_p) ? 2 : 0;\n-      for (i = 0; i < 2; i++)\n-\t{\n-\t  sign_extend = ((unsigned_p)\n-\t\t\t ? PPERM_ZERO\n-\t\t\t : PPERM_SIGN | PPERM_SRC2 | ((4*i) + 3 + h));\n-\t  pperm_bytes[8*i+0] = PPERM_SRC | PPERM_SRC2 | ((4*i) + 0 + h);\n-\t  pperm_bytes[8*i+1] = PPERM_SRC | PPERM_SRC2 | ((4*i) + 1 + h);\n-\t  pperm_bytes[8*i+2] = PPERM_SRC | PPERM_SRC2 | ((4*i) + 2 + h);\n-\t  pperm_bytes[8*i+3] = PPERM_SRC | PPERM_SRC2 | ((4*i) + 3 + h);\n-\t  pperm_bytes[8*i+4] = sign_extend;\n-\t  pperm_bytes[8*i+5] = sign_extend;\n-\t  pperm_bytes[8*i+6] = sign_extend;\n-\t  pperm_bytes[8*i+7] = sign_extend;\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      for (i = 0; i < 2; i++)\n-\tRTVEC_ELT (vs, i) = GEN_INT (i + h2);\n-\n-      p = gen_rtx_PARALLEL (VOIDmode, vs);\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      if (unsigned_p)\n-\temit_insn (gen_sse5_pperm_zero_v4si_v2di (op0, op1, p, x));\n-      else\n-\temit_insn (gen_sse5_pperm_sign_v4si_v2di (op0, op1, p, x));\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return;\n-}\n-\n-/* Pack the high bits from OPERANDS[1] and low bits from OPERANDS[2] into the\n-   next narrower integer vector type */\n-void\n-ix86_expand_sse5_pack (rtx operands[3])\n-{\n-  enum machine_mode imode = GET_MODE (operands[0]);\n-  int pperm_bytes[16];\n-  int i;\n-  rtvec v = rtvec_alloc (16);\n-  rtx x;\n-  rtx op0 = operands[0];\n-  rtx op1 = operands[1];\n-  rtx op2 = operands[2];\n-\n-  switch (imode)\n-    {\n-    case V16QImode:\n-      for (i = 0; i < 8; i++)\n-\t{\n-\t  pperm_bytes[i+0] = PPERM_SRC | PPERM_SRC1 | (i*2);\n-\t  pperm_bytes[i+8] = PPERM_SRC | PPERM_SRC2 | (i*2);\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      emit_insn (gen_sse5_pperm_pack_v8hi_v16qi (op0, op1, op2, x));\n-      break;\n-\n-    case V8HImode:\n-      for (i = 0; i < 4; i++)\n-\t{\n-\t  pperm_bytes[(2*i)+0] = PPERM_SRC | PPERM_SRC1 | ((i*4) + 0);\n-\t  pperm_bytes[(2*i)+1] = PPERM_SRC | PPERM_SRC1 | ((i*4) + 1);\n-\t  pperm_bytes[(2*i)+8] = PPERM_SRC | PPERM_SRC2 | ((i*4) + 0);\n-\t  pperm_bytes[(2*i)+9] = PPERM_SRC | PPERM_SRC2 | ((i*4) + 1);\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      emit_insn (gen_sse5_pperm_pack_v4si_v8hi (op0, op1, op2, x));\n-      break;\n-\n-    case V4SImode:\n-      for (i = 0; i < 2; i++)\n-\t{\n-\t  pperm_bytes[(4*i)+0]  = PPERM_SRC | PPERM_SRC1 | ((i*8) + 0);\n-\t  pperm_bytes[(4*i)+1]  = PPERM_SRC | PPERM_SRC1 | ((i*8) + 1);\n-\t  pperm_bytes[(4*i)+2]  = PPERM_SRC | PPERM_SRC1 | ((i*8) + 2);\n-\t  pperm_bytes[(4*i)+3]  = PPERM_SRC | PPERM_SRC1 | ((i*8) + 3);\n-\t  pperm_bytes[(4*i)+8]  = PPERM_SRC | PPERM_SRC2 | ((i*8) + 0);\n-\t  pperm_bytes[(4*i)+9]  = PPERM_SRC | PPERM_SRC2 | ((i*8) + 1);\n-\t  pperm_bytes[(4*i)+10] = PPERM_SRC | PPERM_SRC2 | ((i*8) + 2);\n-\t  pperm_bytes[(4*i)+11] = PPERM_SRC | PPERM_SRC2 | ((i*8) + 3);\n-\t}\n-\n-      for (i = 0; i < 16; i++)\n-\tRTVEC_ELT (v, i) = GEN_INT (pperm_bytes[i]);\n-\n-      x = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));\n-      emit_insn (gen_sse5_pperm_pack_v2di_v4si (op0, op1, op2, x));\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return;\n-}\n-\n /* Expand conditional increment or decrement using adb/sbb instructions.\n    The default case using setcc followed by the conditional move can be\n    done by generic code.  */\n@@ -20897,217 +20618,6 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CVTUDQ2PS,\n \n-  /* SSE5 instructions */\n-  IX86_BUILTIN_FMADDSS,\n-  IX86_BUILTIN_FMADDSD,\n-  IX86_BUILTIN_FMADDPS,\n-  IX86_BUILTIN_FMADDPD,\n-  IX86_BUILTIN_FMSUBSS,\n-  IX86_BUILTIN_FMSUBSD,\n-  IX86_BUILTIN_FMSUBPS,\n-  IX86_BUILTIN_FMSUBPD,\n-  IX86_BUILTIN_FNMADDSS,\n-  IX86_BUILTIN_FNMADDSD,\n-  IX86_BUILTIN_FNMADDPS,\n-  IX86_BUILTIN_FNMADDPD,\n-  IX86_BUILTIN_FNMSUBSS,\n-  IX86_BUILTIN_FNMSUBSD,\n-  IX86_BUILTIN_FNMSUBPS,\n-  IX86_BUILTIN_FNMSUBPD,\n-  IX86_BUILTIN_PCMOV,\n-  IX86_BUILTIN_PCMOV_V2DI,\n-  IX86_BUILTIN_PCMOV_V4SI,\n-  IX86_BUILTIN_PCMOV_V8HI,\n-  IX86_BUILTIN_PCMOV_V16QI,\n-  IX86_BUILTIN_PCMOV_V4SF,\n-  IX86_BUILTIN_PCMOV_V2DF,\n-  IX86_BUILTIN_PPERM,\n-  IX86_BUILTIN_PERMPS,\n-  IX86_BUILTIN_PERMPD,\n-  IX86_BUILTIN_PMACSSWW,\n-  IX86_BUILTIN_PMACSWW,\n-  IX86_BUILTIN_PMACSSWD,\n-  IX86_BUILTIN_PMACSWD,\n-  IX86_BUILTIN_PMACSSDD,\n-  IX86_BUILTIN_PMACSDD,\n-  IX86_BUILTIN_PMACSSDQL,\n-  IX86_BUILTIN_PMACSSDQH,\n-  IX86_BUILTIN_PMACSDQL,\n-  IX86_BUILTIN_PMACSDQH,\n-  IX86_BUILTIN_PMADCSSWD,\n-  IX86_BUILTIN_PMADCSWD,\n-  IX86_BUILTIN_PHADDBW,\n-  IX86_BUILTIN_PHADDBD,\n-  IX86_BUILTIN_PHADDBQ,\n-  IX86_BUILTIN_PHADDWD,\n-  IX86_BUILTIN_PHADDWQ,\n-  IX86_BUILTIN_PHADDDQ,\n-  IX86_BUILTIN_PHADDUBW,\n-  IX86_BUILTIN_PHADDUBD,\n-  IX86_BUILTIN_PHADDUBQ,\n-  IX86_BUILTIN_PHADDUWD,\n-  IX86_BUILTIN_PHADDUWQ,\n-  IX86_BUILTIN_PHADDUDQ,\n-  IX86_BUILTIN_PHSUBBW,\n-  IX86_BUILTIN_PHSUBWD,\n-  IX86_BUILTIN_PHSUBDQ,\n-  IX86_BUILTIN_PROTB,\n-  IX86_BUILTIN_PROTW,\n-  IX86_BUILTIN_PROTD,\n-  IX86_BUILTIN_PROTQ,\n-  IX86_BUILTIN_PROTB_IMM,\n-  IX86_BUILTIN_PROTW_IMM,\n-  IX86_BUILTIN_PROTD_IMM,\n-  IX86_BUILTIN_PROTQ_IMM,\n-  IX86_BUILTIN_PSHLB,\n-  IX86_BUILTIN_PSHLW,\n-  IX86_BUILTIN_PSHLD,\n-  IX86_BUILTIN_PSHLQ,\n-  IX86_BUILTIN_PSHAB,\n-  IX86_BUILTIN_PSHAW,\n-  IX86_BUILTIN_PSHAD,\n-  IX86_BUILTIN_PSHAQ,\n-  IX86_BUILTIN_FRCZSS,\n-  IX86_BUILTIN_FRCZSD,\n-  IX86_BUILTIN_FRCZPS,\n-  IX86_BUILTIN_FRCZPD,\n-  IX86_BUILTIN_CVTPH2PS,\n-  IX86_BUILTIN_CVTPS2PH,\n-\n-  IX86_BUILTIN_COMEQSS,\n-  IX86_BUILTIN_COMNESS,\n-  IX86_BUILTIN_COMLTSS,\n-  IX86_BUILTIN_COMLESS,\n-  IX86_BUILTIN_COMGTSS,\n-  IX86_BUILTIN_COMGESS,\n-  IX86_BUILTIN_COMUEQSS,\n-  IX86_BUILTIN_COMUNESS,\n-  IX86_BUILTIN_COMULTSS,\n-  IX86_BUILTIN_COMULESS,\n-  IX86_BUILTIN_COMUGTSS,\n-  IX86_BUILTIN_COMUGESS,\n-  IX86_BUILTIN_COMORDSS,\n-  IX86_BUILTIN_COMUNORDSS,\n-  IX86_BUILTIN_COMFALSESS,\n-  IX86_BUILTIN_COMTRUESS,\n-\n-  IX86_BUILTIN_COMEQSD,\n-  IX86_BUILTIN_COMNESD,\n-  IX86_BUILTIN_COMLTSD,\n-  IX86_BUILTIN_COMLESD,\n-  IX86_BUILTIN_COMGTSD,\n-  IX86_BUILTIN_COMGESD,\n-  IX86_BUILTIN_COMUEQSD,\n-  IX86_BUILTIN_COMUNESD,\n-  IX86_BUILTIN_COMULTSD,\n-  IX86_BUILTIN_COMULESD,\n-  IX86_BUILTIN_COMUGTSD,\n-  IX86_BUILTIN_COMUGESD,\n-  IX86_BUILTIN_COMORDSD,\n-  IX86_BUILTIN_COMUNORDSD,\n-  IX86_BUILTIN_COMFALSESD,\n-  IX86_BUILTIN_COMTRUESD,\n-\n-  IX86_BUILTIN_COMEQPS,\n-  IX86_BUILTIN_COMNEPS,\n-  IX86_BUILTIN_COMLTPS,\n-  IX86_BUILTIN_COMLEPS,\n-  IX86_BUILTIN_COMGTPS,\n-  IX86_BUILTIN_COMGEPS,\n-  IX86_BUILTIN_COMUEQPS,\n-  IX86_BUILTIN_COMUNEPS,\n-  IX86_BUILTIN_COMULTPS,\n-  IX86_BUILTIN_COMULEPS,\n-  IX86_BUILTIN_COMUGTPS,\n-  IX86_BUILTIN_COMUGEPS,\n-  IX86_BUILTIN_COMORDPS,\n-  IX86_BUILTIN_COMUNORDPS,\n-  IX86_BUILTIN_COMFALSEPS,\n-  IX86_BUILTIN_COMTRUEPS,\n-\n-  IX86_BUILTIN_COMEQPD,\n-  IX86_BUILTIN_COMNEPD,\n-  IX86_BUILTIN_COMLTPD,\n-  IX86_BUILTIN_COMLEPD,\n-  IX86_BUILTIN_COMGTPD,\n-  IX86_BUILTIN_COMGEPD,\n-  IX86_BUILTIN_COMUEQPD,\n-  IX86_BUILTIN_COMUNEPD,\n-  IX86_BUILTIN_COMULTPD,\n-  IX86_BUILTIN_COMULEPD,\n-  IX86_BUILTIN_COMUGTPD,\n-  IX86_BUILTIN_COMUGEPD,\n-  IX86_BUILTIN_COMORDPD,\n-  IX86_BUILTIN_COMUNORDPD,\n-  IX86_BUILTIN_COMFALSEPD,\n-  IX86_BUILTIN_COMTRUEPD,\n-\n-  IX86_BUILTIN_PCOMEQUB,\n-  IX86_BUILTIN_PCOMNEUB,\n-  IX86_BUILTIN_PCOMLTUB,\n-  IX86_BUILTIN_PCOMLEUB,\n-  IX86_BUILTIN_PCOMGTUB,\n-  IX86_BUILTIN_PCOMGEUB,\n-  IX86_BUILTIN_PCOMFALSEUB,\n-  IX86_BUILTIN_PCOMTRUEUB,\n-  IX86_BUILTIN_PCOMEQUW,\n-  IX86_BUILTIN_PCOMNEUW,\n-  IX86_BUILTIN_PCOMLTUW,\n-  IX86_BUILTIN_PCOMLEUW,\n-  IX86_BUILTIN_PCOMGTUW,\n-  IX86_BUILTIN_PCOMGEUW,\n-  IX86_BUILTIN_PCOMFALSEUW,\n-  IX86_BUILTIN_PCOMTRUEUW,\n-  IX86_BUILTIN_PCOMEQUD,\n-  IX86_BUILTIN_PCOMNEUD,\n-  IX86_BUILTIN_PCOMLTUD,\n-  IX86_BUILTIN_PCOMLEUD,\n-  IX86_BUILTIN_PCOMGTUD,\n-  IX86_BUILTIN_PCOMGEUD,\n-  IX86_BUILTIN_PCOMFALSEUD,\n-  IX86_BUILTIN_PCOMTRUEUD,\n-  IX86_BUILTIN_PCOMEQUQ,\n-  IX86_BUILTIN_PCOMNEUQ,\n-  IX86_BUILTIN_PCOMLTUQ,\n-  IX86_BUILTIN_PCOMLEUQ,\n-  IX86_BUILTIN_PCOMGTUQ,\n-  IX86_BUILTIN_PCOMGEUQ,\n-  IX86_BUILTIN_PCOMFALSEUQ,\n-  IX86_BUILTIN_PCOMTRUEUQ,\n-\n-  IX86_BUILTIN_PCOMEQB,\n-  IX86_BUILTIN_PCOMNEB,\n-  IX86_BUILTIN_PCOMLTB,\n-  IX86_BUILTIN_PCOMLEB,\n-  IX86_BUILTIN_PCOMGTB,\n-  IX86_BUILTIN_PCOMGEB,\n-  IX86_BUILTIN_PCOMFALSEB,\n-  IX86_BUILTIN_PCOMTRUEB,\n-  IX86_BUILTIN_PCOMEQW,\n-  IX86_BUILTIN_PCOMNEW,\n-  IX86_BUILTIN_PCOMLTW,\n-  IX86_BUILTIN_PCOMLEW,\n-  IX86_BUILTIN_PCOMGTW,\n-  IX86_BUILTIN_PCOMGEW,\n-  IX86_BUILTIN_PCOMFALSEW,\n-  IX86_BUILTIN_PCOMTRUEW,\n-  IX86_BUILTIN_PCOMEQD,\n-  IX86_BUILTIN_PCOMNED,\n-  IX86_BUILTIN_PCOMLTD,\n-  IX86_BUILTIN_PCOMLED,\n-  IX86_BUILTIN_PCOMGTD,\n-  IX86_BUILTIN_PCOMGED,\n-  IX86_BUILTIN_PCOMFALSED,\n-  IX86_BUILTIN_PCOMTRUED,\n-  IX86_BUILTIN_PCOMEQQ,\n-  IX86_BUILTIN_PCOMNEQ,\n-  IX86_BUILTIN_PCOMLTQ,\n-  IX86_BUILTIN_PCOMLEQ,\n-  IX86_BUILTIN_PCOMGTQ,\n-  IX86_BUILTIN_PCOMGEQ,\n-  IX86_BUILTIN_PCOMFALSEQ,\n-  IX86_BUILTIN_PCOMTRUEQ,\n-\n   IX86_BUILTIN_MAX\n };\n \n@@ -22031,7 +21541,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, \"__builtin_ia32_pmuldq128\", IX86_BUILTIN_PMULDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n \n-  /* SSE4.1 and SSE5 */\n+  /* SSE4.1 */\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_roundpd\", IX86_BUILTIN_ROUNDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_roundps\", IX86_BUILTIN_ROUNDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n@@ -22181,294 +21691,6 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movmskps256, \"__builtin_ia32_movmskps256\", IX86_BUILTIN_MOVMSKPS256, UNKNOWN, (int) INT_FTYPE_V8SF },\n };\n \n-/* SSE5 */\n-enum multi_arg_type {\n-  MULTI_ARG_UNKNOWN,\n-  MULTI_ARG_3_SF,\n-  MULTI_ARG_3_DF,\n-  MULTI_ARG_3_DI,\n-  MULTI_ARG_3_SI,\n-  MULTI_ARG_3_SI_DI,\n-  MULTI_ARG_3_HI,\n-  MULTI_ARG_3_HI_SI,\n-  MULTI_ARG_3_QI,\n-  MULTI_ARG_3_PERMPS,\n-  MULTI_ARG_3_PERMPD,\n-  MULTI_ARG_2_SF,\n-  MULTI_ARG_2_DF,\n-  MULTI_ARG_2_DI,\n-  MULTI_ARG_2_SI,\n-  MULTI_ARG_2_HI,\n-  MULTI_ARG_2_QI,\n-  MULTI_ARG_2_DI_IMM,\n-  MULTI_ARG_2_SI_IMM,\n-  MULTI_ARG_2_HI_IMM,\n-  MULTI_ARG_2_QI_IMM,\n-  MULTI_ARG_2_SF_CMP,\n-  MULTI_ARG_2_DF_CMP,\n-  MULTI_ARG_2_DI_CMP,\n-  MULTI_ARG_2_SI_CMP,\n-  MULTI_ARG_2_HI_CMP,\n-  MULTI_ARG_2_QI_CMP,\n-  MULTI_ARG_2_DI_TF,\n-  MULTI_ARG_2_SI_TF,\n-  MULTI_ARG_2_HI_TF,\n-  MULTI_ARG_2_QI_TF,\n-  MULTI_ARG_2_SF_TF,\n-  MULTI_ARG_2_DF_TF,\n-  MULTI_ARG_1_SF,\n-  MULTI_ARG_1_DF,\n-  MULTI_ARG_1_DI,\n-  MULTI_ARG_1_SI,\n-  MULTI_ARG_1_HI,\n-  MULTI_ARG_1_QI,\n-  MULTI_ARG_1_SI_DI,\n-  MULTI_ARG_1_HI_DI,\n-  MULTI_ARG_1_HI_SI,\n-  MULTI_ARG_1_QI_DI,\n-  MULTI_ARG_1_QI_SI,\n-  MULTI_ARG_1_QI_HI,\n-  MULTI_ARG_1_PH2PS,\n-  MULTI_ARG_1_PS2PH\n-};\n-\n-static const struct builtin_description bdesc_multi_arg[] =\n-{\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv4sf4,     \"__builtin_ia32_fmaddss\",    IX86_BUILTIN_FMADDSS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv2df4,     \"__builtin_ia32_fmaddsd\",    IX86_BUILTIN_FMADDSD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv4sf4,       \"__builtin_ia32_fmaddps\",    IX86_BUILTIN_FMADDPS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv2df4,       \"__builtin_ia32_fmaddpd\",    IX86_BUILTIN_FMADDPD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv4sf4,     \"__builtin_ia32_fmsubss\",    IX86_BUILTIN_FMSUBSS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv2df4,     \"__builtin_ia32_fmsubsd\",    IX86_BUILTIN_FMSUBSD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv4sf4,       \"__builtin_ia32_fmsubps\",    IX86_BUILTIN_FMSUBPS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv2df4,       \"__builtin_ia32_fmsubpd\",    IX86_BUILTIN_FMSUBPD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv4sf4,    \"__builtin_ia32_fnmaddss\",   IX86_BUILTIN_FNMADDSS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv2df4,    \"__builtin_ia32_fnmaddsd\",   IX86_BUILTIN_FNMADDSD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv4sf4,      \"__builtin_ia32_fnmaddps\",   IX86_BUILTIN_FNMADDPS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv2df4,      \"__builtin_ia32_fnmaddpd\",   IX86_BUILTIN_FNMADDPD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv4sf4,    \"__builtin_ia32_fnmsubss\",   IX86_BUILTIN_FNMSUBSS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv2df4,    \"__builtin_ia32_fnmsubsd\",   IX86_BUILTIN_FNMSUBSD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv4sf4,      \"__builtin_ia32_fnmsubps\",   IX86_BUILTIN_FNMSUBPS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv2df4,      \"__builtin_ia32_fnmsubpd\",   IX86_BUILTIN_FNMSUBPD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov\",      IX86_BUILTIN_PCMOV,\t UNKNOWN,      (int)MULTI_ARG_3_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov_v2di\", IX86_BUILTIN_PCMOV_V2DI, UNKNOWN,      (int)MULTI_ARG_3_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4si,        \"__builtin_ia32_pcmov_v4si\", IX86_BUILTIN_PCMOV_V4SI, UNKNOWN,      (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v8hi,        \"__builtin_ia32_pcmov_v8hi\", IX86_BUILTIN_PCMOV_V8HI, UNKNOWN,      (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v16qi,       \"__builtin_ia32_pcmov_v16qi\",IX86_BUILTIN_PCMOV_V16QI,UNKNOWN,      (int)MULTI_ARG_3_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2df,        \"__builtin_ia32_pcmov_v2df\", IX86_BUILTIN_PCMOV_V2DF, UNKNOWN,      (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4sf,        \"__builtin_ia32_pcmov_v4sf\", IX86_BUILTIN_PCMOV_V4SF, UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pperm,             \"__builtin_ia32_pperm\",      IX86_BUILTIN_PPERM,      UNKNOWN,      (int)MULTI_ARG_3_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv4sf,          \"__builtin_ia32_permps\",     IX86_BUILTIN_PERMPS,     UNKNOWN,      (int)MULTI_ARG_3_PERMPS },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv2df,          \"__builtin_ia32_permpd\",     IX86_BUILTIN_PERMPD,     UNKNOWN,      (int)MULTI_ARG_3_PERMPD },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssww,          \"__builtin_ia32_pmacssww\",   IX86_BUILTIN_PMACSSWW,   UNKNOWN,      (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsww,           \"__builtin_ia32_pmacsww\",    IX86_BUILTIN_PMACSWW,    UNKNOWN,      (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsswd,          \"__builtin_ia32_pmacsswd\",   IX86_BUILTIN_PMACSSWD,   UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacswd,           \"__builtin_ia32_pmacswd\",    IX86_BUILTIN_PMACSWD,    UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdd,          \"__builtin_ia32_pmacssdd\",   IX86_BUILTIN_PMACSSDD,   UNKNOWN,      (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdd,           \"__builtin_ia32_pmacsdd\",    IX86_BUILTIN_PMACSDD,    UNKNOWN,      (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdql,         \"__builtin_ia32_pmacssdql\",  IX86_BUILTIN_PMACSSDQL,  UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdqh,         \"__builtin_ia32_pmacssdqh\",  IX86_BUILTIN_PMACSSDQH,  UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdql,          \"__builtin_ia32_pmacsdql\",   IX86_BUILTIN_PMACSDQL,   UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdqh,          \"__builtin_ia32_pmacsdqh\",   IX86_BUILTIN_PMACSDQH,   UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcsswd,         \"__builtin_ia32_pmadcsswd\",  IX86_BUILTIN_PMADCSSWD,  UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcswd,          \"__builtin_ia32_pmadcswd\",   IX86_BUILTIN_PMADCSWD,   UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv2di3,        \"__builtin_ia32_protq\",      IX86_BUILTIN_PROTQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv4si3,        \"__builtin_ia32_protd\",      IX86_BUILTIN_PROTD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv8hi3,        \"__builtin_ia32_protw\",      IX86_BUILTIN_PROTW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv16qi3,       \"__builtin_ia32_protb\",      IX86_BUILTIN_PROTB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv2di3,         \"__builtin_ia32_protqi\",     IX86_BUILTIN_PROTQ_IMM,  UNKNOWN,      (int)MULTI_ARG_2_DI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv4si3,         \"__builtin_ia32_protdi\",     IX86_BUILTIN_PROTD_IMM,  UNKNOWN,      (int)MULTI_ARG_2_SI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv8hi3,         \"__builtin_ia32_protwi\",     IX86_BUILTIN_PROTW_IMM,  UNKNOWN,      (int)MULTI_ARG_2_HI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv16qi3,        \"__builtin_ia32_protbi\",     IX86_BUILTIN_PROTB_IMM,  UNKNOWN,      (int)MULTI_ARG_2_QI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv2di3,         \"__builtin_ia32_pshaq\",      IX86_BUILTIN_PSHAQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv4si3,         \"__builtin_ia32_pshad\",      IX86_BUILTIN_PSHAD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv8hi3,         \"__builtin_ia32_pshaw\",      IX86_BUILTIN_PSHAW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv16qi3,        \"__builtin_ia32_pshab\",      IX86_BUILTIN_PSHAB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv2di3,         \"__builtin_ia32_pshlq\",      IX86_BUILTIN_PSHLQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv4si3,         \"__builtin_ia32_pshld\",      IX86_BUILTIN_PSHLD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv8hi3,         \"__builtin_ia32_pshlw\",      IX86_BUILTIN_PSHLW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv16qi3,        \"__builtin_ia32_pshlb\",      IX86_BUILTIN_PSHLB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv4sf2,       \"__builtin_ia32_frczss\",     IX86_BUILTIN_FRCZSS,     UNKNOWN,      (int)MULTI_ARG_2_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv2df2,       \"__builtin_ia32_frczsd\",     IX86_BUILTIN_FRCZSD,     UNKNOWN,      (int)MULTI_ARG_2_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv4sf2,         \"__builtin_ia32_frczps\",     IX86_BUILTIN_FRCZPS,     UNKNOWN,      (int)MULTI_ARG_1_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv2df2,         \"__builtin_ia32_frczpd\",     IX86_BUILTIN_FRCZPD,     UNKNOWN,      (int)MULTI_ARG_1_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtph2ps,          \"__builtin_ia32_cvtph2ps\",   IX86_BUILTIN_CVTPH2PS,   UNKNOWN,      (int)MULTI_ARG_1_PH2PS },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtps2ph,          \"__builtin_ia32_cvtps2ph\",   IX86_BUILTIN_CVTPS2PH,   UNKNOWN,      (int)MULTI_ARG_1_PS2PH },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbw,           \"__builtin_ia32_phaddbw\",    IX86_BUILTIN_PHADDBW,    UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbd,           \"__builtin_ia32_phaddbd\",    IX86_BUILTIN_PHADDBD,    UNKNOWN,      (int)MULTI_ARG_1_QI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbq,           \"__builtin_ia32_phaddbq\",    IX86_BUILTIN_PHADDBQ,    UNKNOWN,      (int)MULTI_ARG_1_QI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwd,           \"__builtin_ia32_phaddwd\",    IX86_BUILTIN_PHADDWD,    UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwq,           \"__builtin_ia32_phaddwq\",    IX86_BUILTIN_PHADDWQ,    UNKNOWN,      (int)MULTI_ARG_1_HI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadddq,           \"__builtin_ia32_phadddq\",    IX86_BUILTIN_PHADDDQ,    UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubw,          \"__builtin_ia32_phaddubw\",   IX86_BUILTIN_PHADDUBW,   UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubd,          \"__builtin_ia32_phaddubd\",   IX86_BUILTIN_PHADDUBD,   UNKNOWN,      (int)MULTI_ARG_1_QI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubq,          \"__builtin_ia32_phaddubq\",   IX86_BUILTIN_PHADDUBQ,   UNKNOWN,      (int)MULTI_ARG_1_QI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwd,          \"__builtin_ia32_phadduwd\",   IX86_BUILTIN_PHADDUWD,   UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwq,          \"__builtin_ia32_phadduwq\",   IX86_BUILTIN_PHADDUWQ,   UNKNOWN,      (int)MULTI_ARG_1_HI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddudq,          \"__builtin_ia32_phaddudq\",   IX86_BUILTIN_PHADDUDQ,   UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubbw,           \"__builtin_ia32_phsubbw\",    IX86_BUILTIN_PHSUBBW,    UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubwd,           \"__builtin_ia32_phsubwd\",    IX86_BUILTIN_PHSUBWD,    UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubdq,           \"__builtin_ia32_phsubdq\",    IX86_BUILTIN_PHSUBDQ,    UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comeqss\",    IX86_BUILTIN_COMEQSS,    EQ,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comness\",    IX86_BUILTIN_COMNESS,    NE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comneqss\",   IX86_BUILTIN_COMNESS,    NE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comltss\",    IX86_BUILTIN_COMLTSS,    LT,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comless\",    IX86_BUILTIN_COMLESS,    LE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comgtss\",    IX86_BUILTIN_COMGTSS,    GT,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comgess\",    IX86_BUILTIN_COMGESS,    GE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comueqss\",   IX86_BUILTIN_COMUEQSS,   UNEQ,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comuness\",   IX86_BUILTIN_COMUNESS,   LTGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comuneqss\",  IX86_BUILTIN_COMUNESS,   LTGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comunltss\",  IX86_BUILTIN_COMULTSS,   UNLT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comunless\",  IX86_BUILTIN_COMULESS,   UNLE,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comungtss\",  IX86_BUILTIN_COMUGTSS,   UNGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comungess\",  IX86_BUILTIN_COMUGESS,   UNGE,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comordss\",   IX86_BUILTIN_COMORDSS,   ORDERED,      (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comunordss\", IX86_BUILTIN_COMUNORDSS, UNORDERED,    (int)MULTI_ARG_2_SF_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comeqsd\",    IX86_BUILTIN_COMEQSD,    EQ,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comnesd\",    IX86_BUILTIN_COMNESD,    NE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comneqsd\",   IX86_BUILTIN_COMNESD,    NE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comltsd\",    IX86_BUILTIN_COMLTSD,    LT,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comlesd\",    IX86_BUILTIN_COMLESD,    LE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comgtsd\",    IX86_BUILTIN_COMGTSD,    GT,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comgesd\",    IX86_BUILTIN_COMGESD,    GE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comueqsd\",   IX86_BUILTIN_COMUEQSD,   UNEQ,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comunesd\",   IX86_BUILTIN_COMUNESD,   LTGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comuneqsd\",  IX86_BUILTIN_COMUNESD,   LTGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comunltsd\",  IX86_BUILTIN_COMULTSD,   UNLT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comunlesd\",  IX86_BUILTIN_COMULESD,   UNLE,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comungtsd\",  IX86_BUILTIN_COMUGTSD,   UNGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comungesd\",  IX86_BUILTIN_COMUGESD,   UNGE,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comordsd\",   IX86_BUILTIN_COMORDSD,   ORDERED,      (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv2df3,    \"__builtin_ia32_comunordsd\", IX86_BUILTIN_COMUNORDSD, UNORDERED,    (int)MULTI_ARG_2_DF_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comeqps\",    IX86_BUILTIN_COMEQPS,    EQ,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comneps\",    IX86_BUILTIN_COMNEPS,    NE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comneqps\",   IX86_BUILTIN_COMNEPS,    NE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comltps\",    IX86_BUILTIN_COMLTPS,    LT,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comleps\",    IX86_BUILTIN_COMLEPS,    LE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comgtps\",    IX86_BUILTIN_COMGTPS,    GT,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comgeps\",    IX86_BUILTIN_COMGEPS,    GE,           (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comueqps\",   IX86_BUILTIN_COMUEQPS,   UNEQ,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comuneps\",   IX86_BUILTIN_COMUNEPS,   LTGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comuneqps\",  IX86_BUILTIN_COMUNEPS,   LTGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comunltps\",  IX86_BUILTIN_COMULTPS,   UNLT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comunleps\",  IX86_BUILTIN_COMULEPS,   UNLE,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comungtps\",  IX86_BUILTIN_COMUGTPS,   UNGT,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comungeps\",  IX86_BUILTIN_COMUGEPS,   UNGE,         (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comordps\",   IX86_BUILTIN_COMORDPS,   ORDERED,      (int)MULTI_ARG_2_SF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4sf3,      \"__builtin_ia32_comunordps\", IX86_BUILTIN_COMUNORDPS, UNORDERED,    (int)MULTI_ARG_2_SF_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comeqpd\",    IX86_BUILTIN_COMEQPD,    EQ,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comnepd\",    IX86_BUILTIN_COMNEPD,    NE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comneqpd\",   IX86_BUILTIN_COMNEPD,    NE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comltpd\",    IX86_BUILTIN_COMLTPD,    LT,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comlepd\",    IX86_BUILTIN_COMLEPD,    LE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comgtpd\",    IX86_BUILTIN_COMGTPD,    GT,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comgepd\",    IX86_BUILTIN_COMGEPD,    GE,           (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comueqpd\",   IX86_BUILTIN_COMUEQPD,   UNEQ,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comunepd\",   IX86_BUILTIN_COMUNEPD,   LTGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comuneqpd\",  IX86_BUILTIN_COMUNEPD,   LTGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comunltpd\",  IX86_BUILTIN_COMULTPD,   UNLT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comunlepd\",  IX86_BUILTIN_COMULEPD,   UNLE,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comungtpd\",  IX86_BUILTIN_COMUGTPD,   UNGT,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comungepd\",  IX86_BUILTIN_COMUGEPD,   UNGE,         (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comordpd\",   IX86_BUILTIN_COMORDPD,   ORDERED,      (int)MULTI_ARG_2_DF_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2df3,      \"__builtin_ia32_comunordpd\", IX86_BUILTIN_COMUNORDPD, UNORDERED,    (int)MULTI_ARG_2_DF_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomeqb\",    IX86_BUILTIN_PCOMEQB,    EQ,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomneb\",    IX86_BUILTIN_PCOMNEB,    NE,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomneqb\",   IX86_BUILTIN_PCOMNEB,    NE,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomltb\",    IX86_BUILTIN_PCOMLTB,    LT,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomleb\",    IX86_BUILTIN_PCOMLEB,    LE,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomgtb\",    IX86_BUILTIN_PCOMGTB,    GT,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv16qi3,     \"__builtin_ia32_pcomgeb\",    IX86_BUILTIN_PCOMGEB,    GE,           (int)MULTI_ARG_2_QI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomeqw\",    IX86_BUILTIN_PCOMEQW,    EQ,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomnew\",    IX86_BUILTIN_PCOMNEW,    NE,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomneqw\",   IX86_BUILTIN_PCOMNEW,    NE,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomltw\",    IX86_BUILTIN_PCOMLTW,    LT,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomlew\",    IX86_BUILTIN_PCOMLEW,    LE,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomgtw\",    IX86_BUILTIN_PCOMGTW,    GT,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv8hi3,      \"__builtin_ia32_pcomgew\",    IX86_BUILTIN_PCOMGEW,    GE,           (int)MULTI_ARG_2_HI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomeqd\",    IX86_BUILTIN_PCOMEQD,    EQ,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomned\",    IX86_BUILTIN_PCOMNED,    NE,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomneqd\",   IX86_BUILTIN_PCOMNED,    NE,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomltd\",    IX86_BUILTIN_PCOMLTD,    LT,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomled\",    IX86_BUILTIN_PCOMLED,    LE,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomgtd\",    IX86_BUILTIN_PCOMGTD,    GT,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv4si3,      \"__builtin_ia32_pcomged\",    IX86_BUILTIN_PCOMGED,    GE,           (int)MULTI_ARG_2_SI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomeqq\",    IX86_BUILTIN_PCOMEQQ,    EQ,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomneq\",    IX86_BUILTIN_PCOMNEQ,    NE,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomneqq\",   IX86_BUILTIN_PCOMNEQ,    NE,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomltq\",    IX86_BUILTIN_PCOMLTQ,    LT,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomleq\",    IX86_BUILTIN_PCOMLEQ,    LE,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomgtq\",    IX86_BUILTIN_PCOMGTQ,    GT,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmpv2di3,      \"__builtin_ia32_pcomgeq\",    IX86_BUILTIN_PCOMGEQ,    GE,           (int)MULTI_ARG_2_DI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v16qi3,\"__builtin_ia32_pcomequb\",   IX86_BUILTIN_PCOMEQUB,   EQ,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v16qi3,\"__builtin_ia32_pcomneub\",   IX86_BUILTIN_PCOMNEUB,   NE,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v16qi3,\"__builtin_ia32_pcomnequb\",  IX86_BUILTIN_PCOMNEUB,   NE,           (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv16qi3, \"__builtin_ia32_pcomltub\",   IX86_BUILTIN_PCOMLTUB,   LTU,          (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv16qi3, \"__builtin_ia32_pcomleub\",   IX86_BUILTIN_PCOMLEUB,   LEU,          (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv16qi3, \"__builtin_ia32_pcomgtub\",   IX86_BUILTIN_PCOMGTUB,   GTU,          (int)MULTI_ARG_2_QI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv16qi3, \"__builtin_ia32_pcomgeub\",   IX86_BUILTIN_PCOMGEUB,   GEU,          (int)MULTI_ARG_2_QI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v8hi3, \"__builtin_ia32_pcomequw\",   IX86_BUILTIN_PCOMEQUW,   EQ,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v8hi3, \"__builtin_ia32_pcomneuw\",   IX86_BUILTIN_PCOMNEUW,   NE,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v8hi3, \"__builtin_ia32_pcomnequw\",  IX86_BUILTIN_PCOMNEUW,   NE,           (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv8hi3,  \"__builtin_ia32_pcomltuw\",   IX86_BUILTIN_PCOMLTUW,   LTU,          (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv8hi3,  \"__builtin_ia32_pcomleuw\",   IX86_BUILTIN_PCOMLEUW,   LEU,          (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv8hi3,  \"__builtin_ia32_pcomgtuw\",   IX86_BUILTIN_PCOMGTUW,   GTU,          (int)MULTI_ARG_2_HI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv8hi3,  \"__builtin_ia32_pcomgeuw\",   IX86_BUILTIN_PCOMGEUW,   GEU,          (int)MULTI_ARG_2_HI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v4si3, \"__builtin_ia32_pcomequd\",   IX86_BUILTIN_PCOMEQUD,   EQ,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v4si3, \"__builtin_ia32_pcomneud\",   IX86_BUILTIN_PCOMNEUD,   NE,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v4si3, \"__builtin_ia32_pcomnequd\",  IX86_BUILTIN_PCOMNEUD,   NE,           (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv4si3,  \"__builtin_ia32_pcomltud\",   IX86_BUILTIN_PCOMLTUD,   LTU,          (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv4si3,  \"__builtin_ia32_pcomleud\",   IX86_BUILTIN_PCOMLEUD,   LEU,          (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv4si3,  \"__builtin_ia32_pcomgtud\",   IX86_BUILTIN_PCOMGTUD,   GTU,          (int)MULTI_ARG_2_SI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv4si3,  \"__builtin_ia32_pcomgeud\",   IX86_BUILTIN_PCOMGEUD,   GEU,          (int)MULTI_ARG_2_SI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v2di3, \"__builtin_ia32_pcomequq\",   IX86_BUILTIN_PCOMEQUQ,   EQ,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v2di3, \"__builtin_ia32_pcomneuq\",   IX86_BUILTIN_PCOMNEUQ,   NE,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_uns2v2di3, \"__builtin_ia32_pcomnequq\",  IX86_BUILTIN_PCOMNEUQ,   NE,           (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomltuq\",   IX86_BUILTIN_PCOMLTUQ,   LTU,          (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomleuq\",   IX86_BUILTIN_PCOMLEUQ,   LEU,          (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomgtuq\",   IX86_BUILTIN_PCOMGTUQ,   GTU,          (int)MULTI_ARG_2_DI_CMP },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomgeuq\",   IX86_BUILTIN_PCOMGEUQ,   GEU,          (int)MULTI_ARG_2_DI_CMP },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalsess\", IX86_BUILTIN_COMFALSESS, (enum rtx_code) COM_FALSE_S,  (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtruess\",  IX86_BUILTIN_COMTRUESS,  (enum rtx_code) COM_TRUE_S,   (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalseps\", IX86_BUILTIN_COMFALSEPS, (enum rtx_code) COM_FALSE_P,  (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtrueps\",  IX86_BUILTIN_COMTRUEPS,  (enum rtx_code) COM_TRUE_P,   (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsesd\", IX86_BUILTIN_COMFALSESD, (enum rtx_code) COM_FALSE_S,  (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruesd\",  IX86_BUILTIN_COMTRUESD,  (enum rtx_code) COM_TRUE_S,   (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsepd\", IX86_BUILTIN_COMFALSEPD, (enum rtx_code) COM_FALSE_P,  (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruepd\",  IX86_BUILTIN_COMTRUEPD,  (enum rtx_code) COM_TRUE_P,   (int)MULTI_ARG_2_DF_TF },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseb\", IX86_BUILTIN_PCOMFALSEB, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalsew\", IX86_BUILTIN_PCOMFALSEW, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalsed\", IX86_BUILTIN_PCOMFALSED, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseq\", IX86_BUILTIN_PCOMFALSEQ, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseub\",IX86_BUILTIN_PCOMFALSEUB,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalseuw\",IX86_BUILTIN_PCOMFALSEUW,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalseud\",IX86_BUILTIN_PCOMFALSEUD,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseuq\",IX86_BUILTIN_PCOMFALSEUQ,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueb\",  IX86_BUILTIN_PCOMTRUEB,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtruew\",  IX86_BUILTIN_PCOMTRUEW,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrued\",  IX86_BUILTIN_PCOMTRUED,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueq\",  IX86_BUILTIN_PCOMTRUEQ,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueub\", IX86_BUILTIN_PCOMTRUEUB, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtrueuw\", IX86_BUILTIN_PCOMTRUEUW, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrueud\", IX86_BUILTIN_PCOMTRUEUD, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueuq\", IX86_BUILTIN_PCOMTRUEUQ, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n-};\n \n /* Set up all the MMX/SSE builtins, even builtins for instructions that are not\n    in the current target ISA to allow the user to compile particular modules\n@@ -22848,88 +22070,6 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tinteger_type_node,\n \t\t\t\tNULL_TREE);\n \n-  /* SSE5 instructions */\n-  tree v2di_ftype_v2di_v2di_v2di\n-    = build_function_type_list (V2DI_type_node,\n-\t\t\t\tV2DI_type_node,\n-\t\t\t\tV2DI_type_node,\n-\t\t\t\tV2DI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v4si_ftype_v4si_v4si_v4si\n-    = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v4si_ftype_v4si_v4si_v2di\n-    = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tV2DI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v8hi_ftype_v8hi_v8hi_v8hi\n-    = build_function_type_list (V8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v8hi_ftype_v8hi_v8hi_v4si\n-    = build_function_type_list (V8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v2df_ftype_v2df_v2df_v16qi\n-    = build_function_type_list (V2DF_type_node,\n-\t\t\t\tV2DF_type_node,\n-\t\t\t\tV2DF_type_node,\n-\t\t\t\tV16QI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v4sf_ftype_v4sf_v4sf_v16qi\n-    = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4SF_type_node,\n-\t\t\t\tV4SF_type_node,\n-\t\t\t\tV16QI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v2di_ftype_v2di_si\n-    = build_function_type_list (V2DI_type_node,\n-\t\t\t\tV2DI_type_node,\n-\t\t\t\tinteger_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v4si_ftype_v4si_si\n-    = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SI_type_node,\n-\t\t\t\tinteger_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v8hi_ftype_v8hi_si\n-    = build_function_type_list (V8HI_type_node,\n-\t\t\t\tV8HI_type_node,\n-\t\t\t\tinteger_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v16qi_ftype_v16qi_si\n-    = build_function_type_list (V16QI_type_node,\n-\t\t\t\tV16QI_type_node,\n-\t\t\t\tinteger_type_node,\n-\t\t\t\tNULL_TREE);\n-  tree v4sf_ftype_v4hi\n-    = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4HI_type_node,\n-\t\t\t\tNULL_TREE);\n-\n-  tree v4hi_ftype_v4sf\n-    = build_function_type_list (V4HI_type_node,\n-\t\t\t\tV4SF_type_node,\n-\t\t\t\tNULL_TREE);\n \n   tree v2di_ftype_v2di\n     = build_function_type_list (V2DI_type_node, V2DI_type_node, NULL_TREE);\n@@ -23984,71 +23124,6 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\t    intQI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n   def_builtin_const (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_vec_set_v16qi\", ftype, IX86_BUILTIN_VEC_SET_V16QI);\n-\n-  /* Add SSE5 multi-arg argument instructions */\n-  for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n-    {\n-      tree mtype = NULL_TREE;\n-\n-      if (d->name == 0)\n-\tcontinue;\n-\n-      switch ((enum multi_arg_type)d->flag)\n-\t{\n-\tcase MULTI_ARG_3_SF:     mtype = v4sf_ftype_v4sf_v4sf_v4sf; \tbreak;\n-\tcase MULTI_ARG_3_DF:     mtype = v2df_ftype_v2df_v2df_v2df; \tbreak;\n-\tcase MULTI_ARG_3_DI:     mtype = v2di_ftype_v2di_v2di_v2di; \tbreak;\n-\tcase MULTI_ARG_3_SI:     mtype = v4si_ftype_v4si_v4si_v4si; \tbreak;\n-\tcase MULTI_ARG_3_SI_DI:  mtype = v4si_ftype_v4si_v4si_v2di; \tbreak;\n-\tcase MULTI_ARG_3_HI:     mtype = v8hi_ftype_v8hi_v8hi_v8hi; \tbreak;\n-\tcase MULTI_ARG_3_HI_SI:  mtype = v8hi_ftype_v8hi_v8hi_v4si; \tbreak;\n-\tcase MULTI_ARG_3_QI:     mtype = v16qi_ftype_v16qi_v16qi_v16qi; break;\n-\tcase MULTI_ARG_3_PERMPS: mtype = v4sf_ftype_v4sf_v4sf_v16qi; \tbreak;\n-\tcase MULTI_ARG_3_PERMPD: mtype = v2df_ftype_v2df_v2df_v16qi; \tbreak;\n-\tcase MULTI_ARG_2_SF:     mtype = v4sf_ftype_v4sf_v4sf;      \tbreak;\n-\tcase MULTI_ARG_2_DF:     mtype = v2df_ftype_v2df_v2df;      \tbreak;\n-\tcase MULTI_ARG_2_DI:     mtype = v2di_ftype_v2di_v2di;      \tbreak;\n-\tcase MULTI_ARG_2_SI:     mtype = v4si_ftype_v4si_v4si;      \tbreak;\n-\tcase MULTI_ARG_2_HI:     mtype = v8hi_ftype_v8hi_v8hi;      \tbreak;\n-\tcase MULTI_ARG_2_QI:     mtype = v16qi_ftype_v16qi_v16qi;      \tbreak;\n-\tcase MULTI_ARG_2_DI_IMM: mtype = v2di_ftype_v2di_si;        \tbreak;\n-\tcase MULTI_ARG_2_SI_IMM: mtype = v4si_ftype_v4si_si;        \tbreak;\n-\tcase MULTI_ARG_2_HI_IMM: mtype = v8hi_ftype_v8hi_si;        \tbreak;\n-\tcase MULTI_ARG_2_QI_IMM: mtype = v16qi_ftype_v16qi_si;        \tbreak;\n-\tcase MULTI_ARG_2_SF_CMP: mtype = v4sf_ftype_v4sf_v4sf;      \tbreak;\n-\tcase MULTI_ARG_2_DF_CMP: mtype = v2df_ftype_v2df_v2df;      \tbreak;\n-\tcase MULTI_ARG_2_DI_CMP: mtype = v2di_ftype_v2di_v2di;      \tbreak;\n-\tcase MULTI_ARG_2_SI_CMP: mtype = v4si_ftype_v4si_v4si;      \tbreak;\n-\tcase MULTI_ARG_2_HI_CMP: mtype = v8hi_ftype_v8hi_v8hi;      \tbreak;\n-\tcase MULTI_ARG_2_QI_CMP: mtype = v16qi_ftype_v16qi_v16qi;      \tbreak;\n-\tcase MULTI_ARG_2_SF_TF:  mtype = v4sf_ftype_v4sf_v4sf;      \tbreak;\n-\tcase MULTI_ARG_2_DF_TF:  mtype = v2df_ftype_v2df_v2df;      \tbreak;\n-\tcase MULTI_ARG_2_DI_TF:  mtype = v2di_ftype_v2di_v2di;      \tbreak;\n-\tcase MULTI_ARG_2_SI_TF:  mtype = v4si_ftype_v4si_v4si;      \tbreak;\n-\tcase MULTI_ARG_2_HI_TF:  mtype = v8hi_ftype_v8hi_v8hi;      \tbreak;\n-\tcase MULTI_ARG_2_QI_TF:  mtype = v16qi_ftype_v16qi_v16qi;      \tbreak;\n-\tcase MULTI_ARG_1_SF:     mtype = v4sf_ftype_v4sf;           \tbreak;\n-\tcase MULTI_ARG_1_DF:     mtype = v2df_ftype_v2df;           \tbreak;\n-\tcase MULTI_ARG_1_DI:     mtype = v2di_ftype_v2di;           \tbreak;\n-\tcase MULTI_ARG_1_SI:     mtype = v4si_ftype_v4si;           \tbreak;\n-\tcase MULTI_ARG_1_HI:     mtype = v8hi_ftype_v8hi;           \tbreak;\n-\tcase MULTI_ARG_1_QI:     mtype = v16qi_ftype_v16qi;           \tbreak;\n-\tcase MULTI_ARG_1_SI_DI:  mtype = v2di_ftype_v4si;           \tbreak;\n-\tcase MULTI_ARG_1_HI_DI:  mtype = v2di_ftype_v8hi;           \tbreak;\n-\tcase MULTI_ARG_1_HI_SI:  mtype = v4si_ftype_v8hi;           \tbreak;\n-\tcase MULTI_ARG_1_QI_DI:  mtype = v2di_ftype_v16qi;           \tbreak;\n-\tcase MULTI_ARG_1_QI_SI:  mtype = v4si_ftype_v16qi;           \tbreak;\n-\tcase MULTI_ARG_1_QI_HI:  mtype = v8hi_ftype_v16qi;           \tbreak;\n-\tcase MULTI_ARG_1_PH2PS:  mtype = v4sf_ftype_v4hi;\t\tbreak;\n-\tcase MULTI_ARG_1_PS2PH:  mtype = v4hi_ftype_v4sf;\t\tbreak;\n-\tcase MULTI_ARG_UNKNOWN:\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-      if (mtype)\n-\tdef_builtin_const (d->mask, d->name, mtype, d->code);\n-    }\n }\n \n /* Internal method for ix86_init_builtins.  */\n@@ -24221,182 +23296,6 @@ ix86_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n-/* Subroutine of ix86_expand_builtin to take care of 2-4 argument insns.  */\n-\n-static rtx\n-ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n-\t\t\t       enum multi_arg_type m_type,\n-\t\t\t       enum rtx_code sub_code)\n-{\n-  rtx pat;\n-  int i;\n-  int nargs;\n-  bool comparison_p = false;\n-  bool tf_p = false;\n-  bool last_arg_constant = false;\n-  int num_memory = 0;\n-  struct {\n-    rtx op;\n-    enum machine_mode mode;\n-  } args[4];\n-\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-\n-  switch (m_type)\n-    {\n-    case MULTI_ARG_3_SF:\n-    case MULTI_ARG_3_DF:\n-    case MULTI_ARG_3_DI:\n-    case MULTI_ARG_3_SI:\n-    case MULTI_ARG_3_SI_DI:\n-    case MULTI_ARG_3_HI:\n-    case MULTI_ARG_3_HI_SI:\n-    case MULTI_ARG_3_QI:\n-    case MULTI_ARG_3_PERMPS:\n-    case MULTI_ARG_3_PERMPD:\n-      nargs = 3;\n-      break;\n-\n-    case MULTI_ARG_2_SF:\n-    case MULTI_ARG_2_DF:\n-    case MULTI_ARG_2_DI:\n-    case MULTI_ARG_2_SI:\n-    case MULTI_ARG_2_HI:\n-    case MULTI_ARG_2_QI:\n-      nargs = 2;\n-      break;\n-\n-    case MULTI_ARG_2_DI_IMM:\n-    case MULTI_ARG_2_SI_IMM:\n-    case MULTI_ARG_2_HI_IMM:\n-    case MULTI_ARG_2_QI_IMM:\n-      nargs = 2;\n-      last_arg_constant = true;\n-      break;\n-\n-    case MULTI_ARG_1_SF:\n-    case MULTI_ARG_1_DF:\n-    case MULTI_ARG_1_DI:\n-    case MULTI_ARG_1_SI:\n-    case MULTI_ARG_1_HI:\n-    case MULTI_ARG_1_QI:\n-    case MULTI_ARG_1_SI_DI:\n-    case MULTI_ARG_1_HI_DI:\n-    case MULTI_ARG_1_HI_SI:\n-    case MULTI_ARG_1_QI_DI:\n-    case MULTI_ARG_1_QI_SI:\n-    case MULTI_ARG_1_QI_HI:\n-    case MULTI_ARG_1_PH2PS:\n-    case MULTI_ARG_1_PS2PH:\n-      nargs = 1;\n-      break;\n-\n-    case MULTI_ARG_2_SF_CMP:\n-    case MULTI_ARG_2_DF_CMP:\n-    case MULTI_ARG_2_DI_CMP:\n-    case MULTI_ARG_2_SI_CMP:\n-    case MULTI_ARG_2_HI_CMP:\n-    case MULTI_ARG_2_QI_CMP:\n-      nargs = 2;\n-      comparison_p = true;\n-      break;\n-\n-    case MULTI_ARG_2_SF_TF:\n-    case MULTI_ARG_2_DF_TF:\n-    case MULTI_ARG_2_DI_TF:\n-    case MULTI_ARG_2_SI_TF:\n-    case MULTI_ARG_2_HI_TF:\n-    case MULTI_ARG_2_QI_TF:\n-      nargs = 2;\n-      tf_p = true;\n-      break;\n-\n-    case MULTI_ARG_UNKNOWN:\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  if (optimize || !target\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-\n-  gcc_assert (nargs <= 4);\n-\n-  for (i = 0; i < nargs; i++)\n-    {\n-      tree arg = CALL_EXPR_ARG (exp, i);\n-      rtx op = expand_normal (arg);\n-      int adjust = (comparison_p) ? 1 : 0;\n-      enum machine_mode mode = insn_data[icode].operand[i+adjust+1].mode;\n-\n-      if (last_arg_constant && i == nargs-1)\n-\t{\n-\t  if (!CONST_INT_P (op))\n-\t    {\n-\t      error (\"last argument must be an immediate\");\n-\t      return gen_reg_rtx (tmode);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (VECTOR_MODE_P (mode))\n-\t    op = safe_vector_operand (op, mode);\n-\n-\t  /* If we aren't optimizing, only allow one memory operand to be\n-\t     generated.  */\n-\t  if (memory_operand (op, mode))\n-\t    num_memory++;\n-\n-\t  gcc_assert (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode);\n-\n-\t  if (optimize\n-\t      || ! (*insn_data[icode].operand[i+adjust+1].predicate) (op, mode)\n-\t      || num_memory > 1)\n-\t    op = force_reg (mode, op);\n-\t}\n-\n-      args[i].op = op;\n-      args[i].mode = mode;\n-    }\n-\n-  switch (nargs)\n-    {\n-    case 1:\n-      pat = GEN_FCN (icode) (target, args[0].op);\n-      break;\n-\n-    case 2:\n-      if (tf_p)\n-\tpat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n-\t\t\t       GEN_INT ((int)sub_code));\n-      else if (! comparison_p)\n-\tpat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n-      else\n-\t{\n-\t  rtx cmp_op = gen_rtx_fmt_ee (sub_code, GET_MODE (target),\n-\t\t\t\t       args[0].op,\n-\t\t\t\t       args[1].op);\n-\n-\t  pat = GEN_FCN (icode) (target, cmp_op, args[0].op, args[1].op);\n-\t}\n-      break;\n-\n-    case 3:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op, args[2].op);\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  if (! pat)\n-    return 0;\n-\n-  emit_insn (pat);\n-  return target;\n-}\n-\n /* Subroutine of ix86_expand_args_builtin to take care of scalar unop\n    insns with vec_merge.  */\n \n@@ -25666,12 +24565,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return ix86_expand_sse_pcmpistr (d, exp, target);\n \n-  for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n-    if (d->code == fcode)\n-      return ix86_expand_multi_arg_builtin (d->icode, exp, target,\n-\t\t\t\t\t    (enum multi_arg_type)d->flag,\n-\t\t\t\t\t    d->comparison);\n-\n   gcc_unreachable ();\n }\n \n@@ -30053,200 +28946,6 @@ ix86_expand_round (rtx operand0, rtx operand1)\n \n   emit_move_insn (operand0, res);\n }\n-\n-\f\n-/* Validate whether a SSE5 instruction is valid or not.\n-   OPERANDS is the array of operands.\n-   NUM is the number of operands.\n-   USES_OC0 is true if the instruction uses OC0 and provides 4 variants.\n-   NUM_MEMORY is the maximum number of memory operands to accept.  \n-   when COMMUTATIVE is set, operand 1 and 2 can be swapped.  */\n-\n-bool\n-ix86_sse5_valid_op_p (rtx operands[], rtx insn ATTRIBUTE_UNUSED, int num,\n-\t\t      bool uses_oc0, int num_memory, bool commutative)\n-{\n-  int mem_mask;\n-  int mem_count;\n-  int i;\n-\n-  /* Count the number of memory arguments */\n-  mem_mask = 0;\n-  mem_count = 0;\n-  for (i = 0; i < num; i++)\n-    {\n-      enum machine_mode mode = GET_MODE (operands[i]);\n-      if (register_operand (operands[i], mode))\n-\t;\n-\n-      else if (memory_operand (operands[i], mode))\n-\t{\n-\t  mem_mask |= (1 << i);\n-\t  mem_count++;\n-\t}\n-\n-      else\n-\t{\n-\t  rtx pattern = PATTERN (insn);\n-\n-\t  /* allow 0 for pcmov */\n-\t  if (GET_CODE (pattern) != SET\n-\t      || GET_CODE (SET_SRC (pattern)) != IF_THEN_ELSE\n-\t      || i < 2\n-\t      || operands[i] != CONST0_RTX (mode))\n-\t    return false;\n-\t}\n-    }\n-\n-  /* Special case pmacsdq{l,h} where we allow the 3rd argument to be\n-     a memory operation.  */\n-  if (num_memory < 0)\n-    {\n-      num_memory = -num_memory;\n-      if ((mem_mask & (1 << (num-1))) != 0)\n-\t{\n-\t  mem_mask &= ~(1 << (num-1));\n-\t  mem_count--;\n-\t}\n-    }\n-\n-  /* If there were no memory operations, allow the insn */\n-  if (mem_mask == 0)\n-    return true;\n-\n-  /* Do not allow the destination register to be a memory operand.  */\n-  else if (mem_mask & (1 << 0))\n-    return false;\n-\n-  /* If there are too many memory operations, disallow the instruction.  While\n-     the hardware only allows 1 memory reference, before register allocation\n-     for some insns, we allow two memory operations sometimes in order to allow\n-     code like the following to be optimized:\n-\n-\tfloat fmadd (float *a, float *b, float *c) { return (*a * *b) + *c; }\n-\n-    or similar cases that are vectorized into using the fmaddss\n-    instruction.  */\n-  else if (mem_count > num_memory)\n-    return false;\n-\n-  /* Don't allow more than one memory operation if not optimizing.  */\n-  else if (mem_count > 1 && !optimize)\n-    return false;\n-\n-  else if (num == 4 && mem_count == 1)\n-    {\n-      /* formats (destination is the first argument), example fmaddss:\n-\t xmm1, xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm1, xmm2/mem, xmm3\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\t xmm1, xmm2/mem, xmm3, xmm1 */\n-      if (uses_oc0)\n-\treturn ((mem_mask == (1 << 1))\n-\t\t|| (mem_mask == (1 << 2))\n-\t\t|| (mem_mask == (1 << 3)));\n-\n-      /* format, example pmacsdd:\n-\t xmm1, xmm2, xmm3/mem, xmm1 */\n-      if (commutative)\n-\treturn (mem_mask == (1 << 2) || mem_mask == (1 << 1));\n-      else\n-\treturn (mem_mask == (1 << 2));\n-    }\n-\n-  else if (num == 4 && num_memory == 2)\n-    {\n-      /* If there are two memory operations, we can load one of the memory ops\n-\t into the destination register.  This is for optimizing the\n-\t multiply/add ops, which the combiner has optimized both the multiply\n-\t and the add insns to have a memory operation.  We have to be careful\n-\t that the destination doesn't overlap with the inputs.  */\n-      rtx op0 = operands[0];\n-\n-      if (reg_mentioned_p (op0, operands[1])\n-\t  || reg_mentioned_p (op0, operands[2])\n-\t  || reg_mentioned_p (op0, operands[3]))\n-\treturn false;\n-\n-      /* formats (destination is the first argument), example fmaddss:\n-\t xmm1, xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm1, xmm2/mem, xmm3\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\t xmm1, xmm2/mem, xmm3, xmm1\n-\n-         For the oc0 case, we will load either operands[1] or operands[3] into\n-         operands[0], so any combination of 2 memory operands is ok.  */\n-      if (uses_oc0)\n-\treturn true;\n-\n-      /* format, example pmacsdd:\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\n-         For the integer multiply/add instructions be more restrictive and\n-         require operands[2] and operands[3] to be the memory operands.  */\n-      if (commutative)\n-\treturn (mem_mask == ((1 << 1) | (1 << 3)) || ((1 << 2) | (1 << 3)));\n-      else\n-\treturn (mem_mask == ((1 << 2) | (1 << 3)));\n-    }\n-\n-  else if (num == 3 && num_memory == 1)\n-    {\n-      /* formats, example protb:\n-\t xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm2/mem, xmm3 */\n-      if (uses_oc0)\n-\treturn ((mem_mask == (1 << 1)) || (mem_mask == (1 << 2)));\n-\n-      /* format, example comeq:\n-\t xmm1, xmm2, xmm3/mem */\n-      else\n-\treturn (mem_mask == (1 << 2));\n-    }\n-\n-  else\n-    gcc_unreachable ();\n-\n-  return false;\n-}\n-\n-\f\n-/* Fixup an SSE5 instruction that has 2 memory input references into a form the\n-   hardware will allow by using the destination register to load one of the\n-   memory operations.  Presently this is used by the multiply/add routines to\n-   allow 2 memory references.  */\n-\n-void\n-ix86_expand_sse5_multiple_memory (rtx operands[],\n-\t\t\t\t  int num,\n-\t\t\t\t  enum machine_mode mode)\n-{\n-  rtx op0 = operands[0];\n-  if (num != 4\n-      || memory_operand (op0, mode)\n-      || reg_mentioned_p (op0, operands[1])\n-      || reg_mentioned_p (op0, operands[2])\n-      || reg_mentioned_p (op0, operands[3]))\n-    gcc_unreachable ();\n-\n-  /* For 2 memory operands, pick either operands[1] or operands[3] to move into\n-     the destination register.  */\n-  if (memory_operand (operands[1], mode))\n-    {\n-      emit_move_insn (op0, operands[1]);\n-      operands[1] = op0;\n-    }\n-  else if (memory_operand (operands[3], mode))\n-    {\n-      emit_move_insn (op0, operands[3]);\n-      operands[3] = op0;\n-    }\n-  else\n-    gcc_unreachable ();\n-\n-  return;\n-}\n-\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ix86_attribute_table[] ="}, {"sha": "e898a651fc95e495886149465b869d240e14f24d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -54,7 +54,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX\tOPTION_ISA_AVX\n #define TARGET_FMA\tOPTION_ISA_FMA\n #define TARGET_SSE4A\tOPTION_ISA_SSE4A\n-#define TARGET_SSE5\tOPTION_ISA_SSE5\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n@@ -66,8 +65,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_CMPXCHG16B OPTION_ISA_CX16\n \n \n-/* SSE5 and SSE4.1 define the same round instructions */\n-#define\tOPTION_MASK_ISA_ROUND\t(OPTION_MASK_ISA_SSE4_1 | OPTION_MASK_ISA_SSE5)\n+/* SSE4.1 define round instructions */\n+#define\tOPTION_MASK_ISA_ROUND\t(OPTION_MASK_ISA_SSE4_1)\n #define\tOPTION_ISA_ROUND\t((ix86_isa_flags & OPTION_MASK_ISA_ROUND) != 0)\n \n #include \"config/vxworks-dummy.h\"\n@@ -542,6 +541,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n %<mcpu=* \\\n %{mintel-syntax:-masm=intel \\\n %n`-mintel-syntax' is deprecated. Use `-masm=intel' instead.\\n} \\\n+%{msse5:-mavx \\\n+%n'-msse5' was removed.\\n} \\\n+%{mfused-madd:-mavx \\\n+%n'-mfused-madd' was removed.\\n} \\\n %{mno-intel-syntax:-masm=att \\\n %n`-mno-intel-syntax' is deprecated. Use `-masm=att' instead.\\n}\"\n "}, {"sha": "26bbc9a52343db7b8e728283704bf54769ed3702", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -57,7 +57,6 @@\n ;; X -- don't print any sort of PIC '@' suffix for a symbol.\n ;; & -- print some in-use local-dynamic symbol name.\n ;; H -- print a memory address offset by 8; used for sse high-parts\n-;; Y -- print condition for SSE5 com* instruction.\n ;; + -- print a branch hint as 'cs' or 'ds' prefix\n ;; ; -- print a semicolon (after prefixes due to bug in older gas).\n \n@@ -196,15 +195,6 @@\n    (UNSPEC_PCMPESTR\t\t144)\n    (UNSPEC_PCMPISTR\t\t145)\n \n-   ;; For SSE5\n-   (UNSPEC_SSE5_INTRINSIC\t150)\n-   (UNSPEC_SSE5_UNSIGNED_CMP\t151)\n-   (UNSPEC_SSE5_TRUEFALSE\t152)\n-   (UNSPEC_SSE5_PERMUTE\t\t153)\n-   (UNSPEC_FRCZ\t\t\t154)\n-   (UNSPEC_CVTPH2PS\t\t155)\n-   (UNSPEC_CVTPS2PH\t\t156)\n-\n    ; For AES support\n    (UNSPEC_AESENC\t\t159)\n    (UNSPEC_AESENCLAST\t\t160)\n@@ -259,20 +249,6 @@\n    (COM_TRUE_P\t\t\t5)\n   ])\n \n-;; Constants used in the SSE5 pperm instruction\n-(define_constants\n-  [(PPERM_SRC\t\t\t0x00)\t/* copy source */\n-   (PPERM_INVERT\t\t0x20)\t/* invert source */\n-   (PPERM_REVERSE\t\t0x40)\t/* bit reverse source */\n-   (PPERM_REV_INV\t\t0x60)\t/* bit reverse & invert src */\n-   (PPERM_ZERO\t\t\t0x80)\t/* all 0's */\n-   (PPERM_ONES\t\t\t0xa0)\t/* all 1's */\n-   (PPERM_SIGN\t\t\t0xc0)\t/* propagate sign bit */\n-   (PPERM_INV_SIGN\t\t0xe0)\t/* invert & propagate sign */\n-   (PPERM_SRC1\t\t\t0x00)\t/* use first source byte */\n-   (PPERM_SRC2\t\t\t0x10)\t/* use second source byte */\n-   ])\n-\n ;; Registers by name.\n (define_constants\n   [(AX_REG\t\t\t 0)\n@@ -465,7 +441,7 @@\n \t]\n \t(const_int 0)))\n \n-;; There are also additional prefixes in 3DNOW, SSSE3 or SSE5.\n+;; There are also additional prefixes in 3DNOW, SSSE3.\n ;; ssemuladd,sse4arg default to 0f24/0f25 and DREX byte,\n ;; sseiadd1,ssecvt1 to 0f7a with no DREX byte.\n ;; 3DNOW has 0f0f prefix, SSSE3 and SSE4_{1,2} 0f38/0f3a.\n@@ -8879,8 +8855,6 @@\n     || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"\")\n \n-;; SSE5 scalar multiply/add instructions are defined in sse.md.\n-\n \f\n ;; Divide instructions\n \n@@ -14826,23 +14800,11 @@\n \t(match_operator:MODEF 1 \"sse_comparison_operator\"\n \t  [(match_operand:MODEF 2 \"register_operand\" \"0\")\n \t   (match_operand:MODEF 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && !TARGET_SSE5\"\n+  \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n   \"cmp%D1s<ssemodefsuffix>\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*sse5_setcc<mode>\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n-\t(match_operator:MODEF 1 \"sse5_comparison_float_operator\"\n-\t  [(match_operand:MODEF 2 \"register_operand\" \"x\")\n-\t   (match_operand:MODEF 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE5\"\n-  \"com%Y1s<ssemodefsuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n \f\n ;; Basic conditional jump instructions.\n ;; We ignore the overflow flag for signed branch instructions.\n@@ -20643,20 +20605,6 @@\n   [(set_attr \"type\" \"fcmov\")\n    (set_attr \"mode\" \"XF\")])\n \n-;; All moves in SSE5 pcmov instructions are 128 bits and hence we restrict\n-;; the scalar versions to have only XMM registers as operands.\n-\n-;; SSE5 conditional move\n-(define_insn \"*sse5_pcmov_<mode>\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:MODEF\n-\t  (match_operand:MODEF 1 \"register_operand\" \"x,0\")\n-\t  (match_operand:MODEF 2 \"register_operand\" \"0,x\")\n-\t  (match_operand:MODEF 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"pcmov\\t{%1, %3, %2, %0|%0, %2, %3, %1}\"\n-  [(set_attr \"type\" \"sse4arg\")])\n-\n ;; These versions of the min/max patterns are intentionally ignorant of\n ;; their behavior wrt -0.0 and NaN (via the commutative operand mark).\n ;; Since both the tree-level MAX_EXPR and the rtl-level SMAX operator"}, {"sha": "f23763b8cf6ab83ac058618d6012ec0ea6213635", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -244,15 +244,6 @@ mcld\n Target Report Mask(CLD) Save\n Generate cld instruction in the function prologue.\n \n-mno-fused-madd\n-Target RejectNegative Report Mask(NO_FUSED_MADD) Undocumented Save\n-\n-mfused-madd\n-Target Report InverseMask(NO_FUSED_MADD, FUSED_MADD) Save\n-Enable automatic generation of fused floating point multiply-add instructions\n-if the ISA supports such instructions.  The -mfused-madd option is on by\n-default.\n-\n ;; ISA support\n \n m32\n@@ -319,10 +310,6 @@ msse4a\n Target Report Mask(ISA_SSE4A) Var(ix86_isa_flags) VarExists Save\n Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation\n \n-msse5\n-Target Report Mask(ISA_SSE5) Var(ix86_isa_flags) VarExists Save\n-Support SSE5 built-in functions and code generation\n-\n mabm\n Target Report Mask(ISA_ABM) Var(ix86_isa_flags) VarExists Save\n Support code generation of Advanced Bit Manipulation (ABM) instructions."}, {"sha": "25fd6aa63926b744f2ea989716b2f81a471f83ea", "filename": "gcc/config/i386/mmintrin-common.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -21,14 +21,13 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Common definition of the ROUND and PTEST intrinsics that are shared\n-   between SSE4.1 and SSE5.  */\n+/* Common definition of the ROUND and PTEST intrinsics, SSE4.1.  */\n \n #ifndef _MMINTRIN_COMMON_H_INCLUDED\n #define _MMINTRIN_COMMON_H_INCLUDED\n \n-#if !defined(__SSE5__) && !defined(__SSE4_1__)\n-# error \"SSE5 or SSE4.1 instruction set not enabled\"\n+#if !defined(__SSE4_1__)\n+# error \"SSE4.1 instruction set not enabled\"\n #else\n \n /* Rounding mode macros. */\n@@ -150,6 +149,6 @@ _mm_round_ss (__m128 __D, __m128 __V, const int __M)\n #define _mm_floor_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_FLOOR)\n #define _mm_floor_ss(D, V) _mm_round_ss ((D), (V), _MM_FROUND_FLOOR)\n \n-#endif /* __SSE5__/__SSE4_1__ */\n+#endif /* __SSE4_1__ */\n \n #endif /* _MMINTRIN_COMMON_H_INCLUDED */"}, {"sha": "f9a4744d1de501ed82f6f94bd9323960c60587bc", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -988,12 +988,6 @@\n (define_predicate \"avx_comparison_float_operator\"\n   (match_code \"ne,eq,ge,gt,le,lt,unordered,ordered,uneq,unge,ungt,unle,unlt,ltgt\"))\n \n-;; Return 1 if OP is a comparison operator that can be issued by sse predicate\n-;; generation instructions\n-(define_predicate \"sse5_comparison_float_operator\"\n-  (and (match_test \"TARGET_SSE5\")\n-       (match_code \"ne,eq,ge,gt,le,lt,unordered,ordered,uneq,unge,ungt,unle,unlt,ltgt\")))\n-\n (define_predicate \"ix86_comparison_int_operator\"\n   (match_code \"ne,eq,ge,gt,le,lt\"))\n "}, {"sha": "2ddbbf551de85719f4edd01236723d75bfe5ce6e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 2400, "changes": 2412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -66,23 +66,19 @@\n \n ;; Modes handled by integer vcond pattern\n (define_mode_iterator SSEMODE124C8 [V16QI V8HI V4SI\n-\t\t\t\t    (V2DI \"TARGET_SSE4_2 || TARGET_SSE5\")])\n+\t\t\t\t    (V2DI \"TARGET_SSE4_2\")])\n \n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse [(SF \"sse\") (DF \"sse2\") (V4SF \"sse\") (V2DF \"sse2\")])\n \n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr ssevecsize [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")])\n \n-;; Mapping of the sse5 suffix\n+;; Mapping of the avx suffix\n (define_mode_attr ssemodesuffixf4 [(SF \"ss\") (DF \"sd\")\n \t\t\t\t   (V4SF \"ps\") (V2DF \"pd\")])\n-(define_mode_attr ssemodesuffixf2s [(SF \"ss\") (DF \"sd\")\n-\t\t\t\t    (V4SF \"ss\") (V2DF \"sd\")])\n-(define_mode_attr ssemodesuffixf2c [(V4SF \"s\") (V2DF \"d\")])\n \n-;; Mapping of the max integer size for sse5 rotate immediate constraint\n-(define_mode_attr sserotatemax [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n+(define_mode_attr ssemodesuffixf2c [(V4SF \"s\") (V2DF \"d\")])\n \n ;; Mapping of vector modes back to the scalar modes\n (define_mode_attr ssescalarmode [(V4SF \"SF\") (V2DF \"DF\")\n@@ -1453,8 +1449,7 @@\n \t(match_operator:SSEMODEF4 3 \"sse_comparison_operator\"\n \t\t[(match_operand:SSEMODEF4 1 \"register_operand\" \"0\")\n \t\t (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"xm\")]))]\n-  \"(SSE_FLOAT_MODE_P (<MODE>mode) || SSE_VEC_FLOAT_MODE_P (<MODE>mode))\n-   && !TARGET_SSE5\"\n+  \"(SSE_FLOAT_MODE_P (<MODE>mode) || SSE_VEC_FLOAT_MODE_P (<MODE>mode))\"\n   \"cmp%D3<ssemodesuffixf4>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -1468,7 +1463,7 @@\n \t\t (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")])\n \t (match_dup 1)\n \t (const_int 1)))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode) && !TARGET_SSE5\"\n+  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"cmp%D3s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -1664,563 +1659,6 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n \n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;;\n-;; SSE5 floating point multiply/accumulate instructions This includes the\n-;; scalar version of the instructions as well as the vector\n-;;\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-\n-;; In order to match (*a * *b) + *c, particularly when vectorizing, allow\n-;; combine to generate a multiply/add with two memory references.  We then\n-;; split this insn, into loading up the destination register with one of the\n-;; memory operations.  If we don't manage to split the insn, reload will\n-;; generate the appropriate moves.  The reason this is needed, is that combine\n-;; has already folded one of the memory references into both the multiply and\n-;; add insns, and it can't generate a new pseudo.  I.e.:\n-;;\t(set (reg1) (mem (addr1)))\n-;;\t(set (reg2) (mult (reg1) (mem (addr2))))\n-;;\t(set (reg3) (plus (reg2) (mem (addr3))))\n-\n-(define_insn \"sse5_fmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x,x\")\n-\t(plus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,0,0\")))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\"\n-  \"fmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Split fmadd with two memory operands into a load and the fmadd.\n-(define_split\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n-\t(plus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, <MODE>mode);\n-  emit_insn (gen_sse5_fmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n-})\n-\n-;; For the scalar operations, use operand1 for the upper words that aren't\n-;; modified, so restrict the forms that are generated.\n-;; Scalar version of fmadd\n-(define_insn \"sse5_vmfmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t (plus:SSEMODEF2P\n-\t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_dup 1)\n-\t (const_int 1)))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating multiply and subtract\n-;; Allow two memory operands the same as fmadd\n-(define_insn \"sse5_fmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x,x\")\n-\t(minus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,0,0\")))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\"\n-  \"fmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Split fmsub with two memory operands into a load and the fmsub.\n-(define_split\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n-\t(minus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, <MODE>mode);\n-  emit_insn (gen_sse5_fmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n-})\n-\n-;; For the scalar operations, use operand1 for the upper words that aren't\n-;; modified, so restrict the forms that are generated.\n-;; Scalar version of fmsub\n-(define_insn \"sse5_vmfmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t (minus:SSEMODEF2P\n-\t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_dup 1)\n-\t (const_int 1)))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"fmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating point negative multiply and add\n-;; Rewrite (- (a * b) + c) into the canonical form: c - (a * b)\n-;; Note operands are out of order to simplify call to ix86_sse5_valid_p\n-;; Allow two memory operands to help in optimizing.\n-(define_insn \"sse5_fnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x,x\")\n-\t(minus:SSEMODEF4\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,0,0\")\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\"\n-  \"fnmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Split fnmadd with two memory operands into a load and the fnmadd.\n-(define_split\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n-\t(minus:SSEMODEF4\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")\n-\t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, <MODE>mode);\n-  emit_insn (gen_sse5_fnmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]));\n-  DONE;\n-})\n-\n-;; For the scalar operations, use operand1 for the upper words that aren't\n-;; modified, so restrict the forms that are generated.\n-;; Scalar version of fnmadd\n-(define_insn \"sse5_vmfnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t (minus:SSEMODEF2P\n-\t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")\n-\t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\")))\n-\t (match_dup 1)\n-\t (const_int 1)))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fnmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating point negative multiply and subtract\n-;; Rewrite (- (a * b) - c) into the canonical form: ((-a) * b) - c\n-;; Allow 2 memory operands to help with optimization\n-(define_insn \"sse5_fnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x\")\n-\t(minus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (neg:SSEMODEF4\n-\t   (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"0,0\"))\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, false)\"\n-  \"fnmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Split fnmsub with two memory operands into a load and the fmsub.\n-(define_split\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n-\t(minus:SSEMODEF4\n-\t (mult:SSEMODEF4\n-\t  (neg:SSEMODEF4\n-\t   (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\"))\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, false)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, <MODE>mode);\n-  emit_insn (gen_sse5_fnmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]));\n-  DONE;\n-})\n-\n-;; For the scalar operations, use operand1 for the upper words that aren't\n-;; modified, so restrict the forms that are generated.\n-;; Scalar version of fnmsub\n-(define_insn \"sse5_vmfnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t (minus:SSEMODEF2P\n-\t  (mult:SSEMODEF2P\n-\t   (neg:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0\"))\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_dup 1)\n-\t (const_int 1)))]\n-  \"TARGET_SSE5 && TARGET_FUSED_MADD\n-   && ix86_sse5_valid_op_p (operands, insn, 4, true, 2, false)\"\n-  \"fnmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; The same instructions using an UNSPEC to allow the intrinsic to be used\n-;; even if the user used -mno-fused-madd\n-;; Parallel instructions.  During instruction generation, just default\n-;; to registers, and let combine later build the appropriate instruction.\n-(define_expand \"sse5i_fmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(plus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t    (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t   (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_fmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_fmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(plus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"sse5i_fmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t    (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t   (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_fmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_fmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Rewrite (- (a * b) + c) into the canonical form: c - (a * b)\n-;; Note operands are out of order to simplify call to ix86_sse5_valid_p\n-(define_expand \"sse5i_fnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 3 \"register_operand\" \"\")\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t    (match_operand:SSEMODEF2P 2 \"register_operand\" \"\")))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_fnmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_fnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x,0,0\")\n-\t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%0,0,x,xm\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm,xm,x\")))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fnmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Rewrite (- (a * b) - c) into the canonical form: ((-a) * b) - c\n-(define_expand \"sse5i_fnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (neg:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"\"))\n-\t    (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t   (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_fnmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_fnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(minus:SSEMODEF2P\n-\t   (mult:SSEMODEF2P\n-\t    (neg:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0,x,xm\"))\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"fnmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Scalar instructions\n-(define_expand \"sse5i_vmfmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (plus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t     (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t    (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))\n-\t   (match_dup 1)\n-\t   (const_int 0))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_vmfmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t  operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-;; For the scalar operations, use operand1 for the upper words that aren't\n-;; modified, so restrict the forms that are accepted.\n-(define_insn \"*sse5i_vmfmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (plus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t   (match_dup 0)\n-\t   (const_int 0))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"fmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<ssescalarmode>\")])\n-\n-(define_expand \"sse5i_vmfmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t     (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t    (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))\n-\t   (match_dup 0)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_vmfmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t  operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_vmfmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t   (match_dup 1)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"fmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<ssescalarmode>\")])\n-\n-;; Note operands are out of order to simplify call to ix86_sse5_valid_p\n-(define_expand \"sse5i_vmfnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 3 \"register_operand\" \"\")\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n-\t     (match_operand:SSEMODEF2P 2 \"register_operand\" \"\")))\n-\t   (match_dup 1)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_vmfnmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_vmfnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")\n-\t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%0,0\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\")))\n-\t   (match_dup 1)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, true)\"\n-  \"fnmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<ssescalarmode>\")])\n-\n-(define_expand \"sse5i_vmfnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 1 \"register_operand\" \"\"))\n-\t     (match_operand:SSEMODEF2P 2 \"register_operand\" \"\"))\n-\t    (match_operand:SSEMODEF2P 3 \"register_operand\" \"\"))\n-\t   (match_dup 1)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we have -mfused-madd, emit the normal insn rather than the UNSPEC */\n-  if (TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_sse5_vmfnmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*sse5i_vmfnmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(vec_merge:SSEMODEF2P\n-\t   (minus:SSEMODEF2P\n-\t    (mult:SSEMODEF2P\n-\t     (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 1 \"register_operand\" \"0,0\"))\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t   (match_dup 1)\n-\t   (const_int 1))]\n-\t UNSPEC_SSE5_INTRINSIC))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"fnmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<ssescalarmode>\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations\n@@ -4874,40 +4312,9 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  rtx t[12], op0, op[3];\n+  rtx t[12];\n   int i;\n \n-  if (TARGET_SSE5)\n-    {\n-      /* On SSE5, we can take advantage of the pperm instruction to pack and\n-\t unpack the bytes.  Unpack data such that we've got a source byte in\n-\t each low byte of each word.  We don't care what goes into the high\n-\t byte, so put 0 there.  */\n-      for (i = 0; i < 6; ++i)\n-        t[i] = gen_reg_rtx (V8HImode);\n-\n-      for (i = 0; i < 2; i++)\n-        {\n-          op[0] = t[i];\n-          op[1] = operands[i+1];\n-          ix86_expand_sse5_unpack (op, true, true);\t\t/* high bytes */\n-\n-          op[0] = t[i+2];\n-          ix86_expand_sse5_unpack (op, true, false);\t\t/* low bytes */\n-        }\n-\n-      /* Multiply words.  */\n-      emit_insn (gen_mulv8hi3 (t[4], t[0], t[1]));\t\t/* high bytes */\n-      emit_insn (gen_mulv8hi3 (t[5], t[2], t[3]));\t\t/* low  bytes */\n-\n-      /* Pack the low byte of each word back into a single xmm */\n-      op[0] = operands[0];\n-      op[1] = t[5];\n-      op[2] = t[4];\n-      ix86_expand_sse5_pack (op);\n-      DONE;\n-    }\n-\n   for (i = 0; i < 12; ++i)\n     t[i] = gen_reg_rtx (V16QImode);\n \n@@ -4938,8 +4345,7 @@\n   emit_insn (gen_sse2_punpckhbw (t[10], t[9], t[8]));\t/* ........ACEGIKMO */\n   emit_insn (gen_sse2_punpcklbw (t[11], t[9], t[8]));\t/* ........BDFHJLNP */\n \n-  op0 = operands[0];\n-  emit_insn (gen_sse2_punpcklbw (op0, t[11], t[10]));\t/* ABCDEFGHIJKLMNOP */\n+  emit_insn (gen_sse2_punpcklbw (operands[0], t[11], t[10]));\t/* ABCDEFGHIJKLMNOP */\n   DONE;\n })\n \n@@ -5272,7 +4678,7 @@\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  if (TARGET_SSE4_1 || TARGET_SSE5)\n+  if (TARGET_SSE4_1)\n     ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\n })\n \n@@ -5297,36 +4703,11 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; We don't have a straight 32-bit parallel multiply on SSE5, so fake it with a\n-;; multiply/add.  In general, we expect the define_split to occur before\n-;; register allocation, so we have to handle the corner case where the target\n-;; is the same as one of the inputs.\n-(define_insn_and_split \"*sse5_mulv4si3\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=&x\")\n-\t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"%x\")\n-\t\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE5\"\n-  \"#\"\n-  \"&& (reload_completed\n-       || (!reg_mentioned_p (operands[0], operands[1])\n-\t   && !reg_mentioned_p (operands[0], operands[2])))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V4SI (mult:V4SI (match_dup 1)\n-\t\t\t      (match_dup 2))\n-\t\t   (match_dup 0)))]\n-{\n-  operands[3] = CONST0_RTX (V4SImode);\n-}\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn_and_split \"*sse2_mulv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n \t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE4_1 && !TARGET_SSE5\n+  \"TARGET_SSE2 && !TARGET_SSE4_1\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -5388,42 +4769,6 @@\n   rtx t1, t2, t3, t4, t5, t6, thirtytwo;\n   rtx op0, op1, op2;\n \n-  if (TARGET_SSE5)\n-    {\n-      /* op1: A,B,C,D, op2: E,F,G,H */\n-      op0 = operands[0];\n-      op1 = gen_lowpart (V4SImode, operands[1]);\n-      op2 = gen_lowpart (V4SImode, operands[2]);\n-      t1 = gen_reg_rtx (V4SImode);\n-      t2 = gen_reg_rtx (V4SImode);\n-      t3 = gen_reg_rtx (V4SImode);\n-      t4 = gen_reg_rtx (V2DImode);\n-      t5 = gen_reg_rtx (V2DImode);\n-\n-      /* t1: B,A,D,C */\n-      emit_insn (gen_sse2_pshufd_1 (t1, op1,\n-\t\t\t\t    GEN_INT (1),\n-\t\t\t\t    GEN_INT (0),\n-\t\t\t\t    GEN_INT (3),\n-\t\t\t\t    GEN_INT (2)));\n-\n-      /* t2: 0 */\n-      emit_move_insn (t2, CONST0_RTX (V4SImode));\n-\n-      /* t3: (B*E),(A*F),(D*G),(C*H) */\n-      emit_insn (gen_sse5_pmacsdd (t3, t1, op2, t2));\n-\n-      /* t4: (B*E)+(A*F), (D*G)+(C*H) */\n-      emit_insn (gen_sse5_phadddq (t4, t3));\n-\n-      /* t5: ((B*E)+(A*F))<<32, ((D*G)+(C*H))<<32 */\n-      emit_insn (gen_ashlv2di3 (t5, t4, GEN_INT (32)));\n-\n-      /* op0: (((B*E)+(A*F))<<32)+(B*F), (((D*G)+(C*H))<<32)+(D*H) */\n-      emit_insn (gen_sse5_pmacsdql (op0, op1, op2, t5));\n-      DONE;\n-    }\n-\n   op0 = operands[0];\n   op1 = operands[1];\n   op2 = operands[2];\n@@ -5539,57 +4884,6 @@\n   DONE;\n })\n \n-(define_expand \"vec_widen_smult_hi_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n-   (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtx t1, t2;\n-\n-  t1 = gen_reg_rtx (V4SImode);\n-  t2 = gen_reg_rtx (V4SImode);\n-\n-  emit_insn (gen_sse2_pshufd_1 (t1, operands[1],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse2_pshufd_1 (t2, operands[2],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse5_mulv2div2di3_high (operands[0], t1, t2));\n-  DONE;\n-})\n-\n-(define_expand \"vec_widen_smult_lo_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n-   (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtx t1, t2;\n-\n-  t1 = gen_reg_rtx (V4SImode);\n-  t2 = gen_reg_rtx (V4SImode);\n-\n-  emit_insn (gen_sse2_pshufd_1 (t1, operands[1],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse2_pshufd_1 (t2, operands[2],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse5_mulv2div2di3_low (operands[0], t1, t2));\n-  DONE;\n-  DONE;\n-})\n-\n (define_expand \"vec_widen_umult_hi_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n    (match_operand:V4SI 1 \"register_operand\" \"\")\n@@ -5987,7 +5281,7 @@\n \t(eq:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE5\"\n+  \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n (define_insn \"*avx_eq<mode>3\"\n@@ -6010,7 +5304,7 @@\n \t(eq:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE5\n+  \"TARGET_SSE2\n    && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n   \"pcmpeq<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n@@ -6056,7 +5350,7 @@\n \t(gt:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"register_operand\" \"0\")\n \t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE5\"\n+  \"TARGET_SSE2\"\n   \"pcmpgt<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"1\")\n@@ -6275,12 +5569,6 @@\n {\n   rtx op1, op2, h1, l1, h2, l2, h3, l3;\n \n-  if (TARGET_SSE5)\n-    {\n-      ix86_expand_sse5_pack (operands);\n-      DONE;\t\n-    }\t\n- \n   op1 = gen_lowpart (V16QImode, operands[1]);\n   op2 = gen_lowpart (V16QImode, operands[2]);\n   h1 = gen_reg_rtx (V16QImode);\n@@ -6316,12 +5604,6 @@\n {\n   rtx op1, op2, h1, l1, h2, l2;\n \n-  if (TARGET_SSE5)\n-    {\n-      ix86_expand_sse5_pack (operands);\n-      DONE;\t\n-    }\t\n- \n   op1 = gen_lowpart (V8HImode, operands[1]);\n   op2 = gen_lowpart (V8HImode, operands[2]);\n   h1 = gen_reg_rtx (V8HImode);\n@@ -6351,12 +5633,6 @@\n {\n   rtx op1, op2, h1, l1;\n \n-  if (TARGET_SSE5)\n-    {\n-      ix86_expand_sse5_pack (operands);\n-      DONE;\t\n-    }\t\n- \n   op1 = gen_lowpart (V4SImode, operands[1]);\n   op2 = gen_lowpart (V4SImode, operands[2]);\n   h1 = gen_reg_rtx (V4SImode);\n@@ -7568,8 +6844,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, true);\n   else\n     ix86_expand_sse_unpack (operands, true, true);\n   DONE;\n@@ -7582,8 +6856,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, true);\n   else\n     ix86_expand_sse_unpack (operands, false, true);\n   DONE;\n@@ -7596,8 +6868,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, false);\n   else\n     ix86_expand_sse_unpack (operands, true, false);\n   DONE;\n@@ -7610,8 +6880,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, false);\n   else\n     ix86_expand_sse_unpack (operands, false, false);\n   DONE;\n@@ -7624,8 +6892,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, true);\n   else\n     ix86_expand_sse_unpack (operands, true, true);\n   DONE;\n@@ -7638,8 +6904,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, true);\n   else\n     ix86_expand_sse_unpack (operands, false, true);\n   DONE;\n@@ -7652,8 +6916,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, false);\n   else\n     ix86_expand_sse_unpack (operands, true, false);\n   DONE;\n@@ -7666,8 +6928,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, false);\n   else\n     ix86_expand_sse_unpack (operands, false, false);\n   DONE;\n@@ -7680,8 +6940,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, true);\n   else\n     ix86_expand_sse_unpack (operands, true, true);\n   DONE;\n@@ -7694,8 +6952,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, true);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, true);\n   else\n     ix86_expand_sse_unpack (operands, false, true);\n   DONE;\n@@ -7708,8 +6964,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, true, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, true, false);\n   else\n     ix86_expand_sse_unpack (operands, true, false);\n   DONE;\n@@ -7722,8 +6976,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_expand_sse4_unpack (operands, false, false);\n-  else if (TARGET_SSE5)\n-    ix86_expand_sse5_unpack (operands, false, false);\n   else\n     ix86_expand_sse_unpack (operands, false, false);\n   DONE;\n@@ -10176,1646 +9428,6 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;;\n-;; SSE5 instructions\n-;;\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-\n-;; SSE5 parallel integer multiply/add instructions.\n-;; Note the instruction does not allow the value being added to be a memory\n-;; operation.  However by pretending via the nonimmediate_operand predicate\n-;; that it does and splitting it later allows the following to be recognized:\n-;;\ta[i] = b[i] * c[i] + d[i];\n-(define_insn \"sse5_pmacsww\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x\")\n-        (plus:V8HI\n-\t (mult:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,xm\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,xm,x\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 2, true)\"\n-  \"@\n-   pmacsww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsww\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Split pmacsww with two memory operands into a load and the pmacsww.\n-(define_split\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:V8HI 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, false, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, V8HImode);\n-  emit_insn (gen_sse5_pmacsww (operands[0], operands[1], operands[2],\n-\t\t\t       operands[3]));\n-  DONE;\n-})\n-\n-(define_insn \"sse5_pmacssww\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x\")\n-        (ss_plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacssww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssww\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Note the instruction does not allow the value being added to be a memory\n-;; operation.  However by pretending via the nonimmediate_operand predicate\n-;; that it does and splitting it later allows the following to be recognized:\n-;;\ta[i] = b[i] * c[i] + d[i];\n-(define_insn \"sse5_pmacsdd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-        (plus:V4SI\n-\t (mult:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 2, true)\"\n-  \"@\n-   pmacsdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Split pmacsdd with two memory operands into a load and the pmacsdd.\n-(define_split\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-\t(plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE5\n-   && !ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\n-   && ix86_sse5_valid_op_p (operands, insn, 4, false, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n-{\n-  ix86_expand_sse5_multiple_memory (operands, 4, V4SImode);\n-  emit_insn (gen_sse5_pmacsdd (operands[0], operands[1], operands[2],\n-\t\t\t       operands[3]));\n-  DONE;\n-})\n-\n-(define_insn \"sse5_pmacssdd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-        (ss_plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacssdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmacssdql\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x,x\")\n-\t(ss_plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t (match_operand:V2DI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacssdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdql\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmacssdqh\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x,x\")\n-\t(ss_plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacssdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacssdqh\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmacsdql\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x,x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacsdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdql\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn_and_split \"*sse5_pmacsdql_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x,&x,&x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m,m,m\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, -1, true)\"\n-  \"#\"\n-  \"&& (reload_completed\n-       || (!reg_mentioned_p (operands[0], operands[1])\n-\t   && !reg_mentioned_p (operands[0], operands[2])))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_dup 0)))])\n-\n-;; We don't have a straight 32-bit parallel multiply and extend on SSE5, so\n-;; fake it with a multiply/add.  In general, we expect the define_split to\n-;; occur before register allocation, so we have to handle the corner case where\n-;; the target is the same as operands 1/2\n-(define_insn_and_split \"sse5_mulv2div2di3_low\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(mult:V2DI\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t      (parallel [(const_int 1)\n-\t\t\t (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 1)\n-\t\t\t (const_int 3)])))))]\n-  \"TARGET_SSE5\"\n-  \"#\"\n-  \"&& (reload_completed\n-       || (!reg_mentioned_p (operands[0], operands[1])\n-\t   && !reg_mentioned_p (operands[0], operands[2])))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_dup 0)))]\n-{\n-  operands[3] = CONST0_RTX (V2DImode);\n-}\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmacsdqh\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x,x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacsdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsdqh\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn_and_split \"*sse5_pmacsdqh_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x,&x,&x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m,m,m\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, -1, true)\"\n-  \"#\"\n-  \"&& (reload_completed\n-       || (!reg_mentioned_p (operands[0], operands[1])\n-\t   && !reg_mentioned_p (operands[0], operands[2])))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_dup 0)))])\n-\n-;; We don't have a straight 32-bit parallel multiply and extend on SSE5, so\n-;; fake it with a multiply/add.  In general, we expect the define_split to\n-;; occur before register allocation, so we have to handle the corner case where\n-;; the target is the same as either operands[1] or operands[2]\n-(define_insn_and_split \"sse5_mulv2div2di3_high\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(mult:V2DI\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t      (parallel [(const_int 0)\n-\t\t\t (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0)\n-\t\t\t (const_int 2)])))))]\n-  \"TARGET_SSE5\"\n-  \"#\"\n-  \"&& (reload_completed\n-       || (!reg_mentioned_p (operands[0], operands[1])\n-\t   && !reg_mentioned_p (operands[0], operands[2])))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_dup 0)))]\n-{\n-  operands[3] = CONST0_RTX (V2DImode);\n-}\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; SSE5 parallel integer multiply/add instructions for the intrinisics\n-(define_insn \"sse5_pmacsswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-\t(ss_plus:V4SI\n-\t (mult:V4SI\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)\n-\t\t       (const_int 5)\n-\t\t       (const_int 7)])))\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4HI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)\n-\t\t       (const_int 5)\n-\t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacsswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmacswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-\t(plus:V4SI\n-\t (mult:V4SI\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)\n-\t\t       (const_int 5)\n-\t\t       (const_int 7)])))\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4HI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)\n-\t\t       (const_int 5)\n-\t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmacswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmacswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmadcsswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-\t(ss_plus:V4SI\n-\t (plus:V4SI\n-\t  (mult:V4SI\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 2)\n-\t\t\t(const_int 4)\n-\t\t\t(const_int 6)])))\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 2)\n-\t\t\t(const_int 4)\n-\t\t\t(const_int 6)]))))\n-\t  (mult:V4SI\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 3)\n-\t\t\t(const_int 5)\n-\t\t\t(const_int 7)])))\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_dup 2)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 3)\n-\t\t\t(const_int 5)\n-\t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmadcsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmadcsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmadcsswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pmadcswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n-\t(plus:V4SI\n-\t (plus:V4SI\n-\t  (mult:V4SI\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,x,m\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 2)\n-\t\t\t(const_int 4)\n-\t\t\t(const_int 6)])))\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 2)\n-\t\t\t(const_int 4)\n-\t\t\t(const_int 6)]))))\n-\t  (mult:V4SI\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 3)\n-\t\t\t(const_int 5)\n-\t\t\t(const_int 7)])))\n-\t   (sign_extend:V4SI\n-\t    (vec_select:V4HI\n-\t     (match_dup 2)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 3)\n-\t\t\t(const_int 5)\n-\t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"0,0,0\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   pmadcswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmadcswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pmadcswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; SSE5 parallel XMM conditional moves\n-(define_insn \"sse5_pcmov_<mode>\"\n-  [(set (match_operand:SSEMODE 0 \"register_operand\" \"=x,x,x,x\")\n-\t(if_then_else:SSEMODE\n-\t  (match_operand:SSEMODE 3 \"nonimmediate_operand\" \"0,0,xm,x\")\n-\t  (match_operand:SSEMODE 1 \"vector_move_operand\" \"x,xm,0,0\")\n-\t  (match_operand:SSEMODE 2 \"vector_move_operand\" \"xm,x,x,xm\")))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"@\n-   pcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   pcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")])\n-\n-;; SSE5 horizontal add/subtract instructions\n-(define_insn \"sse5_phaddbw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(plus:V8HI\n-\t (sign_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)\n-\t\t      (const_int 8)\n-\t\t      (const_int 10)\n-\t\t      (const_int 12)\n-\t\t      (const_int 14)])))\n-\t (sign_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)\n-\t\t      (const_int 9)\n-\t\t      (const_int 11)\n-\t\t      (const_int 13)\n-\t\t      (const_int 15)])))))]\n-  \"TARGET_SSE5\"\n-  \"phaddbw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddbd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(plus:V4SI\n-\t (plus:V4SI\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 4)\n-\t\t       (const_int 8)\n-\t\t       (const_int 12)])))\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 5)\n-\t\t       (const_int 9)\n-\t\t       (const_int 13)]))))\n-\t (plus:V4SI\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 2)\n-\t\t       (const_int 6)\n-\t\t       (const_int 10)\n-\t\t       (const_int 14)])))\n-\t  (sign_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 3)\n-\t\t       (const_int 7)\n-\t\t       (const_int 11)\n-\t\t       (const_int 15)]))))))]\n-  \"TARGET_SSE5\"\n-  \"phaddbd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddbq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (plus:V2DI\n-\t  (plus:V2DI\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 4)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 5)]))))\n-\t  (plus:V2DI\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 2)\n-\t\t\t(const_int 6)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 3)\n-\t\t\t(const_int 7)])))))\n-\t (plus:V2DI\n-\t  (plus:V2DI\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 8)\n-\t\t\t(const_int 12)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 9)\n-\t\t\t(const_int 13)]))))\n-\t  (plus:V2DI\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 10)\n-\t\t\t(const_int 14)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 11)\n-\t\t\t(const_int 15)])))))))]\n-  \"TARGET_SSE5\"\n-  \"phaddbq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddwd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(plus:V4SI\n-\t (sign_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)])))\n-\t (sign_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)])))))]\n-  \"TARGET_SSE5\"\n-  \"phaddwd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddwq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (plus:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 4)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 5)]))))\n-\t (plus:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 2)\n-\t\t       (const_int 6)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 3)\n-\t\t       (const_int 7)]))))))]\n-  \"TARGET_SSE5\"\n-  \"phaddwq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phadddq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (sign_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)])))\n-\t (sign_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)])))))]\n-  \"TARGET_SSE5\"\n-  \"phadddq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddubw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(plus:V8HI\n-\t (zero_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)\n-\t\t      (const_int 8)\n-\t\t      (const_int 10)\n-\t\t      (const_int 12)\n-\t\t      (const_int 14)])))\n-\t (zero_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)\n-\t\t      (const_int 9)\n-\t\t      (const_int 11)\n-\t\t      (const_int 13)\n-\t\t      (const_int 15)])))))]\n-  \"TARGET_SSE5\"\n-  \"phaddubw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddubd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(plus:V4SI\n-\t (plus:V4SI\n-\t  (zero_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 4)\n-\t\t       (const_int 8)\n-\t\t       (const_int 12)])))\n-\t  (zero_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 5)\n-\t\t       (const_int 9)\n-\t\t       (const_int 13)]))))\n-\t (plus:V4SI\n-\t  (zero_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 2)\n-\t\t       (const_int 6)\n-\t\t       (const_int 10)\n-\t\t       (const_int 14)])))\n-\t  (zero_extend:V4SI\n-\t   (vec_select:V4QI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 3)\n-\t\t       (const_int 7)\n-\t\t       (const_int 11)\n-\t\t       (const_int 15)]))))))]\n-  \"TARGET_SSE5\"\n-  \"phaddubd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddubq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (plus:V2DI\n-\t  (plus:V2DI\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t     (parallel [(const_int 0)\n-\t\t\t(const_int 4)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 1)\n-\t\t\t(const_int 5)]))))\n-\t  (plus:V2DI\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 2)\n-\t\t\t(const_int 6)])))\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 3)\n-\t\t\t(const_int 7)])))))\n-\t (plus:V2DI\n-\t  (plus:V2DI\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 8)\n-\t\t\t(const_int 12)])))\n-\t   (sign_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 9)\n-\t\t\t(const_int 13)]))))\n-\t  (plus:V2DI\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 10)\n-\t\t\t(const_int 14)])))\n-\t   (zero_extend:V2DI\n-\t    (vec_select:V2QI\n-\t     (match_dup 1)\n-\t     (parallel [(const_int 11)\n-\t\t\t(const_int 15)])))))))]\n-  \"TARGET_SSE5\"\n-  \"phaddubq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phadduwd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(plus:V4SI\n-\t (zero_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)])))\n-\t (zero_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)])))))]\n-  \"TARGET_SSE5\"\n-  \"phadduwd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phadduwq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (plus:V2DI\n-\t  (zero_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 4)])))\n-\t  (zero_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 5)]))))\n-\t (plus:V2DI\n-\t  (zero_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 2)\n-\t\t       (const_int 6)])))\n-\t  (zero_extend:V2DI\n-\t   (vec_select:V2HI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 3)\n-\t\t       (const_int 7)]))))))]\n-  \"TARGET_SSE5\"\n-  \"phadduwq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phaddudq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(plus:V2DI\n-\t (zero_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)])))\n-\t (zero_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)])))))]\n-  \"TARGET_SSE5\"\n-  \"phaddudq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phsubbw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(minus:V8HI\n-\t (sign_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)\n-\t\t      (const_int 8)\n-\t\t      (const_int 10)\n-\t\t      (const_int 12)\n-\t\t      (const_int 14)])))\n-\t (sign_extend:V8HI\n-\t  (vec_select:V8QI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)\n-\t\t      (const_int 9)\n-\t\t      (const_int 11)\n-\t\t      (const_int 13)\n-\t\t      (const_int 15)])))))]\n-  \"TARGET_SSE5\"\n-  \"phsubbw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phsubwd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(minus:V4SI\n-\t (sign_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)\n-\t\t      (const_int 6)])))\n-\t (sign_extend:V4SI\n-\t  (vec_select:V4HI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)\n-\t\t      (const_int 5)\n-\t\t      (const_int 7)])))))]\n-  \"TARGET_SSE5\"\n-  \"phsubwd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-(define_insn \"sse5_phsubdq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(minus:V2DI\n-\t (sign_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n-\t   (parallel [(const_int 0)\n-\t\t      (const_int 2)])))\n-\t (sign_extend:V2DI\n-\t  (vec_select:V2SI\n-\t   (match_dup 1)\n-\t   (parallel [(const_int 1)\n-\t\t      (const_int 3)])))))]\n-  \"TARGET_SSE5\"\n-  \"phsubdq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseiadd1\")])\n-\n-;; SSE5 permute instructions\n-(define_insn \"sse5_pperm\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:V16QI\n-\t  [(match_operand:V16QI 1 \"nonimmediate_operand\" \"0,0,x,xm\")\n-\t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,xm,xm,x\")\n-\t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,0,0\")]\n-\t  UNSPEC_SSE5_PERMUTE))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"pperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; The following are for the various unpack insns which doesn't need the first\n-;; source operand, so we can just use the output operand for the first operand.\n-;; This allows either of the other two operands to be a memory operand.  We\n-;; can't just use the first operand as an argument to the normal pperm because\n-;; then an output only argument, suddenly becomes an input operand.\n-(define_insn \"sse5_pperm_zero_v16qi_v8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n-\t(zero_extend:V8HI\n-\t (vec_select:V8QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V16QImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_sign_v16qi_v8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n-\t(sign_extend:V8HI\n-\t (vec_select:V8QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V16QImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_zero_v8hi_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n-\t(zero_extend:V4SI\n-\t (vec_select:V4HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V8HImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_sign_v8hi_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n-\t(sign_extend:V4SI\n-\t (vec_select:V4HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V8HImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_zero_v4si_v2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n-\t(zero_extend:V2DI\n-\t (vec_select:V2SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V4SImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_sign_v4si_v2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n-\t(sign_extend:V2DI\n-\t (vec_select:V2SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm,x\")\n-\t  (match_operand 2 \"\" \"\"))))\t;; parallel with const_int's\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,xm\"))]\n-  \"TARGET_SSE5\n-   && (register_operand (operands[1], V4SImode)\n-       || register_operand (operands[2], V16QImode))\"\n-  \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; SSE5 pack instructions that combine two vectors into a smaller vector\n-(define_insn \"sse5_pperm_pack_v2di_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(vec_concat:V4SI\n-\t (truncate:V2SI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"0,0,x,xm\"))\n-\t (truncate:V2SI\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"pperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_pack_v4si_v8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(vec_concat:V8HI\n-\t (truncate:V4HI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"0,0,x,xm\"))\n-\t (truncate:V4HI\n-\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"pperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_pperm_pack_v8hi_v16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(vec_concat:V16QI\n-\t (truncate:V8QI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"0,0,x,xm\"))\n-\t (truncate:V8QI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,xm,xm,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,0,0\"))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"pperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Floating point permutation (permps, permpd)\n-(define_insn \"sse5_perm<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x,x,x\")\n-\t(unspec:SSEMODEF2P\n-\t [(match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"0,0,x,xm\")\n-\t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm,xm,x\")\n-\t  (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,0,0\")]\n-\t UNSPEC_SSE5_PERMUTE))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 4, true, 1, false)\"\n-  \"perm<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; SSE5 packed rotate instructions\n-(define_expand \"rotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-\t(rotate:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"\")\n-\t (match_operand:SI 2 \"general_operand\")))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we were given a scalar, convert it to parallel */\n-  if (! const_0_to_<sserotatemax>_operand (operands[2], SImode))\n-    {\n-      rtvec vs = rtvec_alloc (<ssescalarnum>);\n-      rtx par = gen_rtx_PARALLEL (<MODE>mode, vs);\n-      rtx reg = gen_reg_rtx (<MODE>mode);\n-      rtx op2 = operands[2];\n-      int i;\n-\n-      if (GET_MODE (op2) != <ssescalarmode>mode)\n-        {\n-\t  op2 = gen_reg_rtx (<ssescalarmode>mode);\n-\t  convert_move (op2, operands[2], false);\n-\t}\n-\n-      for (i = 0; i < <ssescalarnum>; i++)\n-\tRTVEC_ELT (vs, i) = op2;\n-\n-      emit_insn (gen_vec_init<mode> (reg, par));\n-      emit_insn (gen_sse5_vrotl<mode>3 (operands[0], operands[1], reg));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"rotr<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-\t(rotatert:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"\")\n-\t (match_operand:SI 2 \"general_operand\")))]\n-  \"TARGET_SSE5\"\n-{\n-  /* If we were given a scalar, convert it to parallel */\n-  if (! const_0_to_<sserotatemax>_operand (operands[2], SImode))\n-    {\n-      rtvec vs = rtvec_alloc (<ssescalarnum>);\n-      rtx par = gen_rtx_PARALLEL (<MODE>mode, vs);\n-      rtx neg = gen_reg_rtx (<MODE>mode);\n-      rtx reg = gen_reg_rtx (<MODE>mode);\n-      rtx op2 = operands[2];\n-      int i;\n-\n-      if (GET_MODE (op2) != <ssescalarmode>mode)\n-        {\n-\t  op2 = gen_reg_rtx (<ssescalarmode>mode);\n-\t  convert_move (op2, operands[2], false);\n-\t}\n-\n-      for (i = 0; i < <ssescalarnum>; i++)\n-\tRTVEC_ELT (vs, i) = op2;\n-\n-      emit_insn (gen_vec_init<mode> (reg, par));\n-      emit_insn (gen_neg<mode>2 (neg, reg));\n-      emit_insn (gen_sse5_vrotl<mode>3 (operands[0], operands[1], neg));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"sse5_rotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(rotate:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm\")\n-\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n-  \"TARGET_SSE5\"\n-  \"prot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_rotr<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(rotatert:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm\")\n-\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n-  \"TARGET_SSE5\"\n-{\n-  operands[3] = GEN_INT ((<ssescalarnum> * 8) - INTVAL (operands[2]));\n-  return \\\"prot<ssevecsize>\\t{%3, %1, %0|%0, %1, %3}\\\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"vrotr<mode>3\"\n-  [(match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtx reg = gen_reg_rtx (<MODE>mode);\n-  emit_insn (gen_neg<mode>2 (reg, operands[2]));\n-  emit_insn (gen_sse5_vrotl<mode>3 (operands[0], operands[1], reg));\n-  DONE;\n-})\n-\n-(define_expand \"vrotl<mode>3\"\n-  [(match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  emit_insn (gen_sse5_vrotl<mode>3 (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_insn \"sse5_vrotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm,x\")\n-\t  (const_int 0))\n-\t (rotate:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"x,xm\")\n-\t  (match_dup 2))\n-\t (rotatert:SSEMODE1248\n-\t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n-  \"prot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; SSE5 packed shift instructions.\n-;; FIXME: add V2DI back in\n-(define_expand \"vlshr<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtx neg = gen_reg_rtx (<MODE>mode);\n-  emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-  emit_insn (gen_sse5_lshl<mode>3 (operands[0], operands[1], neg));\n-  DONE;\n-})\n-\n-(define_expand \"vashr<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtx neg = gen_reg_rtx (<MODE>mode);\n-  emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-  emit_insn (gen_sse5_ashl<mode>3 (operands[0], operands[1], neg));\n-  DONE;\n-})\n-\n-(define_expand \"vashl<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  emit_insn (gen_sse5_ashl<mode>3 (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_insn \"sse5_ashl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm,x\")\n-\t  (const_int 0))\n-\t (ashift:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"x,xm\")\n-\t  (match_dup 2))\n-\t (ashiftrt:SSEMODE1248\n-\t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n-  \"psha<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_lshl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm,x\")\n-\t  (const_int 0))\n-\t (ashift:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"x,xm\")\n-\t  (match_dup 2))\n-\t (lshiftrt:SSEMODE1248\n-\t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n-  \"pshl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; SSE2 doesn't have some shift varients, so define versions for SSE5\n-(define_expand \"ashlv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n-  rtx reg = gen_reg_rtx (V16QImode);\n-  int i;\n-  for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = operands[2];\n-\n-  emit_insn (gen_vec_initv16qi (reg, par));\n-  emit_insn (gen_sse5_ashlv16qi3 (operands[0], operands[1], reg));\n-  DONE;\n-})\n-\n-(define_expand \"lshlv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n-  rtx reg = gen_reg_rtx (V16QImode);\n-  int i;\n-  for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = operands[2];\n-\n-  emit_insn (gen_vec_initv16qi (reg, par));\n-  emit_insn (gen_sse5_lshlv16qi3 (operands[0], operands[1], reg));\n-  DONE;\n-})\n-\n-(define_expand \"ashrv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n-  rtx reg = gen_reg_rtx (V16QImode);\n-  int i;\n-  rtx ele = ((CONST_INT_P (operands[2]))\n-\t     ? GEN_INT (- INTVAL (operands[2]))\n-\t     : operands[2]);\n-\n-  for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = ele;\n-\n-  emit_insn (gen_vec_initv16qi (reg, par));\n-\n-  if (!CONST_INT_P (operands[2]))\n-    {\n-      rtx neg = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_negv16qi2 (neg, reg));\n-      emit_insn (gen_sse5_ashlv16qi3 (operands[0], operands[1], neg));\n-    }\n-  else\n-    emit_insn (gen_sse5_ashlv16qi3 (operands[0], operands[1], reg));\n-\n-  DONE;\n-})\n-\n-(define_expand \"ashrv2di3\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V2DI 1 \"register_operand\" \"\")\n-   (match_operand:DI 2 \"nonmemory_operand\" \"\")]\n-  \"TARGET_SSE5\"\n-{\n-  rtvec vs = rtvec_alloc (2);\n-  rtx par = gen_rtx_PARALLEL (V2DImode, vs);\n-  rtx reg = gen_reg_rtx (V2DImode);\n-  rtx ele;\n-\n-  if (CONST_INT_P (operands[2]))\n-    ele = GEN_INT (- INTVAL (operands[2]));\n-  else if (GET_MODE (operands[2]) != DImode)\n-    {\n-      rtx move = gen_reg_rtx (DImode);\n-      ele = gen_reg_rtx (DImode);\n-      convert_move (move, operands[2], false);\n-      emit_insn (gen_negdi2 (ele, move));\n-    }\n-  else\n-    {\n-      ele = gen_reg_rtx (DImode);\n-      emit_insn (gen_negdi2 (ele, operands[2]));\n-    }\n-\n-  RTVEC_ELT (vs, 0) = ele;\n-  RTVEC_ELT (vs, 1) = ele;\n-  emit_insn (gen_vec_initv2di (reg, par));\n-  emit_insn (gen_sse5_ashlv2di3 (operands[0], operands[1], reg));\n-  DONE;\n-})\n-\n-;; SSE5 FRCZ support\n-;; parallel insns\n-(define_insn \"sse5_frcz<mode>2\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODEF2P\n-\t [(match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"xm\")]\n-\t UNSPEC_FRCZ))]\n-  \"TARGET_SSE5\"\n-  \"frcz<ssemodesuffixf4>\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; scalar insns\n-(define_insn \"sse5_vmfrcz<mode>2\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (unspec:SSEMODEF2P\n-\t   [(match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")]\n-\t   UNSPEC_FRCZ)\n-\t  (match_operand:SSEMODEF2P 1 \"register_operand\" \"0\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE5\"\n-  \"frcz<ssemodesuffixf2s>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"sse5_cvtph2ps\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(unspec:V4SF [(match_operand:V4HI 1 \"nonimmediate_operand\" \"xm\")]\n-\t\t     UNSPEC_CVTPH2PS))]\n-  \"TARGET_SSE5\"\n-  \"cvtph2ps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"V4SF\")])\n-\n-(define_insn \"sse5_cvtps2ph\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=xm\")\n-\t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")]\n-\t\t     UNSPEC_CVTPS2PH))]\n-  \"TARGET_SSE5\"\n-  \"cvtps2ph\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"V4SF\")])\n-\n-;; Scalar versions of the com instructions that use vector types that are\n-;; called from the intrinsics.  Unlike the the other s{s,d} instructions, the\n-;; com instructions fill in 0's in the upper bits instead of leaving them\n-;; unmodified, so we use const_vector of 0 instead of match_dup.\n-(define_expand \"sse5_vmmaskcmp<mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(vec_merge:SSEMODEF2P\n-\t (match_operator:SSEMODEF2P 1 \"sse5_comparison_float_operator\"\n-\t  [(match_operand:SSEMODEF2P 2 \"register_operand\" \"\")\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"\")])\n-\t (match_dup 4)\n-\t (const_int 1)))]\n-  \"TARGET_SSE5\"\n-{\n-  operands[4] = CONST0_RTX (<MODE>mode);\n-})\n-\n-(define_insn \"*sse5_vmmaskcmp<mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(vec_merge:SSEMODEF2P\n-\t (match_operator:SSEMODEF2P 1 \"sse5_comparison_float_operator\"\n-\t  [(match_operand:SSEMODEF2P 2 \"register_operand\" \"x\")\n-\t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm\")])\n-\t  (match_operand:SSEMODEF2P 4 \"\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE5\"\n-  \"com%Y1<ssemodesuffixf2s>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"<ssescalarmode>\")])\n-\n-;; We don't have a comparison operator that always returns true/false, so\n-;; handle comfalse and comtrue specially.\n-(define_insn \"sse5_com_tf<mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODEF2P\n-\t [(match_operand:SSEMODEF2P 1 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")\n-\t  (match_operand:SI 3 \"const_int_operand\" \"n\")]\n-\t UNSPEC_SSE5_TRUEFALSE))]\n-  \"TARGET_SSE5\"\n-{\n-  const char *ret = NULL;\n-\n-  switch (INTVAL (operands[3]))\n-    {\n-    case COM_FALSE_S:\n-      ret = \\\"comfalses<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\\\";\n-      break;\n-\n-    case COM_FALSE_P:\n-      ret = \\\"comfalsep<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\\\";\n-      break;\n-\n-    case COM_TRUE_S:\n-      ret = \\\"comfalses<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\\\";\n-      break;\n-\n-    case COM_TRUE_P:\n-      ret = \\\"comfalsep<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\\\";\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return ret;\n-}\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"sse5_maskcmp<mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(match_operator:SSEMODEF2P 1 \"sse5_comparison_float_operator\"\n-\t [(match_operand:SSEMODEF2P 2 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE5\"\n-  \"com%Y1<ssemodesuffixf4>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"sse5_maskcmp<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(match_operator:SSEMODE1248 1 \"ix86_comparison_int_operator\"\n-\t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE5\"\n-  \"pcom%Y1<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse5_maskcmp_uns<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(match_operator:SSEMODE1248 1 \"ix86_comparison_uns_operator\"\n-\t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE5\"\n-  \"pcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Version of pcom*u* that is called from the intrinsics that allows pcomequ*\n-;; and pcomneu* not to be converted to the signed ones in case somebody needs\n-;; the exact instruction generated for the intrinsic.\n-(define_insn \"sse5_maskcmp_uns2<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODE1248\n-\t [(match_operator:SSEMODE1248 1 \"ix86_comparison_uns_operator\"\n-\t  [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t   (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")])]\n-\t UNSPEC_SSE5_UNSIGNED_CMP))]\n-  \"TARGET_SSE5\"\n-  \"pcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; Pcomtrue and pcomfalse support.  These are useless instructions, but are\n-;; being added here to be complete.\n-(define_insn \"sse5_pcom_tf<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODE1248\n-\t  [(match_operand:SSEMODE1248 1 \"register_operand\" \"x\")\n-\t   (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 3 \"const_int_operand\" \"n\")]\n-\t  UNSPEC_SSE5_TRUEFALSE))]\n-  \"TARGET_SSE5\"\n-{\n-  return ((INTVAL (operands[3]) != 0)\n-\t  ? \"pcomtrue<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-\t  : \"pcomfalse<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\");\n-}\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"0\")\n-   (set_attr \"prefix_extra\" \"2\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*avx_aesenc\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"x\")"}, {"sha": "0ee51ba0f52f1aeff6aee94c3923c7c099a375ac", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -590,7 +590,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul @gol\n--msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n+-msse4a -m3dnow -mpopcnt -mabm @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -599,7 +599,7 @@ Objective-C and Objective-C++ Dialects}.\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n--mfused-madd -mno-fused-madd -msse2avx}\n+-msse2avx}\n \n @emph{IA-64 Options}\n @gccoptlist{-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n@@ -11641,8 +11641,6 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-pclmul\n @itemx -msse4a\n @itemx -mno-sse4a\n-@itemx -msse5\n-@itemx -mno-sse5\n @itemx -m3dnow\n @itemx -mno-3dnow\n @itemx -mpopcnt\n@@ -11656,7 +11654,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n-SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, SSE4A, SSE5, ABM or\n+SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, SSE4A, ABM or\n 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n@@ -11834,14 +11832,6 @@ segment to cover the entire TLS area.\n \n For systems that use GNU libc, the default is on.\n \n-@item -mfused-madd\n-@itemx -mno-fused-madd\n-@opindex mfused-madd\n-Enable automatic generation of fused floating point multiply-add instructions\n-if the ISA supports such instructions.  The -mfused-madd option is on by\n-default.  The fused multiply-add instructions have a different\n-rounding behavior compared to executing a multiply followed by an add.\n-\n @item -msse2avx\n @itemx -mno-sse2avx\n @opindex msse2avx"}, {"sha": "52ee0e2daa381fcbd4d3951d6f77d813ec7f5f62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,3 +1,55 @@\n+2009-08-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.target/i386/sse5-shift1-vector.c\n+\t* gcc.target/i386/isa-12.c\n+\t* gcc.target/i386/isa-12.cgcc.target/i386/isa-12.c\n+\t* gcc.target/i386/sse5-pcmov2.c\n+\t* gcc.target/i386/isa-3.c\n+\t* gcc.target/i386/sse5-shift2-vector.c\n+\t* gcc.target/i386/isa-7.c\n+\t* gcc.target/i386/funcspec-2.c\n+\t* gcc.target/i386/sse5-haddX.c\n+\t* gcc.target/i386/sse5-hadduX.c\n+\t* gcc.target/i386/isa-9.c\n+\t* gcc.target/i386/sse5-maccXX.c\n+\t* gcc.target/i386/sse5-shift3-vector.c\n+\t* gcc.target/i386/sse5-msubXX.c\n+\t* gcc.target/i386/sse5-permpX.c\n+\t* gcc.target/i386/sse5-check.h\n+\t* gcc.target/i386/sse-12.c\n+\t* gcc.target/i386/sse-11.c\n+\t* gcc.target/i386/sse-10.c\n+\t* gcc.target/i386/sse-13.c\n+\t* gcc.target/i386/sse-14.c\n+\t* gcc.target/i386/sse-22.c\n+\t* gcc.target/i386/sse-2.c\n+\t* gcc.target/i386/sse-13.c\n+\t* gcc.target/i386/avx-2.c\n+\t* gcc.target/i386/sse5-rotate1-vector.c\n+\t* gcc.target/i386/isa-4.c\n+\t* gcc.target/i386/sse5-hsubX.c\n+\t* gcc.target/i386/sse5-pcmov.c\n+\t* gcc.target/i386/sse5-fma.c\n+\t* gcc.target/i386/isa-8.c\n+\t* gcc.target/i386/sse5-rotate2-vector.c\n+\t* gcc.target/i386/sse5-nmaccXX.c\n+\t* gcc.target/i386/sse5-imul64-vector.c\n+\t* gcc.target/i386/sse5-nmsubXX.c\n+\t* gcc.target/i386/sse5-rotate3-vector.c\n+\t* gcc.target/i386/sse5-fma-vector.c\n+\t* gcc.target/i386/sse5-imul32widen-vector.c: Remove SSE5 related testcases\n+\t* gcc.target/i386/sse5-ima-vector.c\n+\n+\t* gcc.target/i386/funcspec-8.c: Replace SSE5 by SSE4.\n+\t* gcc.target/i386/funcspec-5.c: Remove SSE5.\n+\t* gcc.target/i386/funcspec-6.c: Remove fused-add test.\n+\t* gcc.target/i386/avx-1.c: Remove SSE5.\n+\t* gcc.target/i386/avx-2.c: Remove SSE5.\n+\t* g++.dg/other/i386-2.C: Replace SSE5 by SSE4A.\n+\t* g++.dg/other/i386-3.C: Replace SSE5 by SSE4A.\n+\t* g++.dg/other/i386-6.C: Replace SSE5 by SSE4A.\n+\t* g++.dg/other/i386-5.C: Replace SSE5 by SSE4A.\n+\n 2009-08-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/compile/limits-fndefn.c: Add dg-timeout-factor."}, {"sha": "3b051019dbc864c214e8986d7e45a4ac4cbef428", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,7 +1,7 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "377891dab687eaede17e4e5b945ea1606c8f319a", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,6 +1,6 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -fkeep-inline-functions.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n \n #include <x86intrin.h>"}, {"sha": "377891dab687eaede17e4e5b945ea1606c8f319a", "filename": "gcc/testsuite/g++.dg/other/i386-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,6 +1,6 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -fkeep-inline-functions.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n \n #include <x86intrin.h>"}, {"sha": "3b051019dbc864c214e8986d7e45a4ac4cbef428", "filename": "gcc/testsuite/g++.dg/other/i386-6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,7 +1,7 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "b9c3b465b9a3de4f2ccff12e0cfe740c41449a4c", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx  -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n@@ -127,13 +127,6 @@\n #define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n #define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n-/* bmmintrin.h */\n-#define __builtin_ia32_protbi(A, B) __builtin_ia32_protbi(A,1)\n-#define __builtin_ia32_protwi(A, B) __builtin_ia32_protwi(A,1)\n-#define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n-#define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n-\n #include <wmmintrin.h>\n-#include <bmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "cd5bb26c7cab075c0d237b65f2b19aea7e9fd72c", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse4a -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n@@ -13,8 +13,8 @@\n #define __inline\n \n #include <wmmintrin.h>\n-#include <bmmintrin.h>\n #include <immintrin.h>\n+#include <ammintrin.h>\n #include <mm3dnow.h>\n \n #define _CONCAT(x,y) x ## y\n@@ -161,8 +161,3 @@ test_1 (_mm_shuffle_pi16, __m64, __m64, 1)\n test_1 (_m_pshufw, __m64, __m64, 1)\n test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n \n-/* bmmintrin.h */\n-test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi32, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi64, __m128i, __m128i, 1)"}, {"sha": "e3628e3028569f16257c12476cd76e692085732c", "filename": "gcc/testsuite/gcc.target/i386/funcspec-2.c", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,99 +0,0 @@\n-/* Test whether using target specific options, we can generate SSE5 code.  */\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -march=k8\" } */\n-\n-extern void exit (int);\n-\n-#define SSE5_ATTR __attribute__((__target__(\"sse5,fused-madd\")))\n-extern float  flt_mul_add     (float a, float b, float c) SSE5_ATTR;\n-extern float  flt_mul_sub     (float a, float b, float c) SSE5_ATTR;\n-extern float  flt_neg_mul_add (float a, float b, float c) SSE5_ATTR;\n-extern float  flt_neg_mul_sub (float a, float b, float c) SSE5_ATTR;\n-\n-extern double dbl_mul_add     (double a, double b, double c) SSE5_ATTR;\n-extern double dbl_mul_sub     (double a, double b, double c) SSE5_ATTR;\n-extern double dbl_neg_mul_add (double a, double b, double c) SSE5_ATTR;\n-extern double dbl_neg_mul_sub (double a, double b, double c) SSE5_ATTR;\n-\n-float\n-flt_mul_add (float a, float b, float c)\n-{\n-  return (a * b) + c;\n-}\n-\n-double\n-dbl_mul_add (double a, double b, double c)\n-{\n-  return (a * b) + c;\n-}\n-\n-float\n-flt_mul_sub (float a, float b, float c)\n-{\n-  return (a * b) - c;\n-}\n-\n-double\n-dbl_mul_sub (double a, double b, double c)\n-{\n-  return (a * b) - c;\n-}\n-\n-float\n-flt_neg_mul_add (float a, float b, float c)\n-{\n-  return (-(a * b)) + c;\n-}\n-\n-double\n-dbl_neg_mul_add (double a, double b, double c)\n-{\n-  return (-(a * b)) + c;\n-}\n-\n-float\n-flt_neg_mul_sub (float a, float b, float c)\n-{\n-  return (-(a * b)) - c;\n-}\n-\n-double\n-dbl_neg_mul_sub (double a, double b, double c)\n-{\n-  return (-(a * b)) - c;\n-}\n-\n-float  f[10] = { 2, 3, 4 };\n-double d[10] = { 2, 3, 4 };\n-\n-int main ()\n-{\n-  f[3] = flt_mul_add (f[0], f[1], f[2]);\n-  f[4] = flt_mul_sub (f[0], f[1], f[2]);\n-  f[5] = flt_neg_mul_add (f[0], f[1], f[2]);\n-  f[6] = flt_neg_mul_sub (f[0], f[1], f[2]);\n-\n-  d[3] = dbl_mul_add (d[0], d[1], d[2]);\n-  d[4] = dbl_mul_sub (d[0], d[1], d[2]);\n-  d[5] = dbl_neg_mul_add (d[0], d[1], d[2]);\n-  d[6] = dbl_neg_mul_sub (d[0], d[1], d[2]);\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"fmaddss\" } } */\n-/* { dg-final { scan-assembler \"fmaddsd\" } } */\n-/* { dg-final { scan-assembler \"fmsubss\" } } */\n-/* { dg-final { scan-assembler \"fmsubsd\" } } */\n-/* { dg-final { scan-assembler \"fnmaddss\" } } */\n-/* { dg-final { scan-assembler \"fnmaddsd\" } } */\n-/* { dg-final { scan-assembler \"fnmsubss\" } } */\n-/* { dg-final { scan-assembler \"fnmsubsd\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_neg_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_neg_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_neg_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_neg_mul_sub\" } } */"}, {"sha": "d60f96aecdb2e1a863a056e39e63a75a042d746f", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -17,7 +17,6 @@ extern void test_sse4 (void)\t\t\t__attribute__((__target__(\"sse4\")));\n extern void test_sse4_1 (void)\t\t\t__attribute__((__target__(\"sse4.1\")));\n extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n-extern void test_sse5 (void)\t\t\t__attribute__((__target__(\"sse5\")));\n extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n@@ -34,7 +33,6 @@ extern void test_no_sse4 (void)\t\t\t__attribute__((__target__(\"no-sse4\")));\n extern void test_no_sse4_1 (void)\t\t__attribute__((__target__(\"no-sse4.1\")));\n extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n-extern void test_no_sse5 (void)\t\t\t__attribute__((__target__(\"no-sse5\")));\n extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n \n extern void test_arch_i386 (void)\t\t__attribute__((__target__(\"arch=i386\")));"}, {"sha": "7f46ad0c1b9c41c3dd8378897eee0f3b5e38320a", "filename": "gcc/testsuite/gcc.target/i386/funcspec-6.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -5,7 +5,6 @@\n \n extern void test_abm (void)\t\t\t__attribute__((__target__(\"abm\")));\n extern void test_aes (void)\t\t\t__attribute__((__target__(\"aes\")));\n-extern void test_fused_madd (void)\t\t__attribute__((__target__(\"fused-madd\")));\n extern void test_mmx (void)\t\t\t__attribute__((__target__(\"mmx\")));\n extern void test_pclmul (void)\t\t\t__attribute__((__target__(\"pclmul\")));\n extern void test_popcnt (void)\t\t\t__attribute__((__target__(\"popcnt\")));\n@@ -17,12 +16,10 @@ extern void test_sse4 (void)\t\t\t__attribute__((__target__(\"sse4\")));\n extern void test_sse4_1 (void)\t\t\t__attribute__((__target__(\"sse4.1\")));\n extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n-extern void test_sse5 (void)\t\t\t__attribute__((__target__(\"sse5\")));\n extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n-extern void test_no_fused_madd (void)\t\t__attribute__((__target__(\"no-fused-madd\")));\n extern void test_no_mmx (void)\t\t\t__attribute__((__target__(\"no-mmx\")));\n extern void test_no_pclmul (void)\t\t__attribute__((__target__(\"no-pclmul\")));\n extern void test_no_popcnt (void)\t\t__attribute__((__target__(\"no-popcnt\")));\n@@ -34,7 +31,6 @@ extern void test_no_sse4 (void)\t\t\t__attribute__((__target__(\"no-sse4\")));\n extern void test_no_sse4_1 (void)\t\t__attribute__((__target__(\"no-sse4.1\")));\n extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n-extern void test_no_sse5 (void)\t\t\t__attribute__((__target__(\"no-sse5\")));\n extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));"}, {"sha": "2b8bb6f4af606c76098043400941e7ee22489627", "filename": "gcc/testsuite/gcc.target/i386/funcspec-8.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -103,25 +103,6 @@ generic_insertq (__m128i a, __m128i b)\n   return __builtin_ia32_insertq (a, b);\t\t\t/* { dg-error \"needs isa option\" } */\n }\n \n-#ifdef __SSE5__\n-#error \"-msse5 should not be set for this test\"\n-#endif\n-\n-__m128d sse5_fmaddpd (__m128d a, __m128d b, __m128d c) __attribute__((__target__(\"sse5\")));\n-__m128d generic_fmaddpd (__m128d a, __m128d b, __m128d c);\n-\n-__m128d\n-sse5_fmaddpd  (__m128d a, __m128d b, __m128d c)\n-{\n-  return __builtin_ia32_fmaddpd (a, b, c);\n-}\n-\n-__m128d\n-generic_fmaddpd  (__m128d a, __m128d b, __m128d c)\n-{\n-  return __builtin_ia32_fmaddpd (a, b, c);\t\t/* { dg-error \"needs isa option\" } */\n-}\n-\n #ifdef __AES__\n #error \"-maes should not be set for this test\"\n #endif"}, {"sha": "aed619bff65966772ad39288f7c466ef9c18c043", "filename": "gcc/testsuite/gcc.target/i386/funcspec-9.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -4,15 +4,15 @@\n \n extern void exit (int);\n \n-#ifdef __SSE5__\n-#warning \"__SSE5__ should not be defined before #pragma GCC target.\"\n+#ifdef __SSE4A__\n+#warning \"__SSE4A__ should not be defined before #pragma GCC target.\"\n #endif\n \n #pragma GCC push_options\n-#pragma GCC target (\"sse5,fused-madd\")\n+#pragma GCC target (\"sse4a\")\n \n-#ifndef __SSE5__\n-#warning \"__SSE5__ should have be defined after #pragma GCC target.\"\n+#ifndef __SSE4A__\n+#warning \"__SSE4A__ should have be defined after #pragma GCC target.\"\n #endif\n \n float\n@@ -22,8 +22,8 @@ flt_mul_add (float a, float b, float c)\n }\n \n #pragma GCC pop_options\n-#ifdef __SSE5__\n-#warning \"__SSE5__ should not be defined after #pragma GCC pop target.\"\n+#ifdef __SSE4A__\n+#warning \"__SSE4A__ should not be defined after #pragma GCC pop target.\"\n #endif\n \n double\n@@ -32,5 +32,5 @@ dbl_mul_add (double a, double b, double c)\n   return (a * b) + c;\n }\n \n-/* { dg-final { scan-assembler \"fmaddss\" } } */\n+/* We used to generate fused-madd with SSE5 support, but don't do that anymore.  */\n /* { dg-final { scan-assembler \"addsd\" } } */"}, {"sha": "76fe355933527012777ba6d7865ad7e3630c2065", "filename": "gcc/testsuite/gcc.target/i386/isa-10.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-10.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse5 -mno-sse4\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "29688d5a78394d9b75fa7d6ff4b2e38e62f788ed", "filename": "gcc/testsuite/gcc.target/i386/isa-11.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-11.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse5 -mno-ssse3\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "4b7e2e2304aa267e7294d08cfda6b23d17abc261", "filename": "gcc/testsuite/gcc.target/i386/isa-12.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-12.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse5 -mno-sse3\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if defined __SSE4A__\n-  abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "ab623c4b19226e4e1c0c67892221a1d50f81aa06", "filename": "gcc/testsuite/gcc.target/i386/isa-13.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-13.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse5 -mno-sse2\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if defined __SSE2__\n-  abort ();\n-#endif\n-#if defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if defined __SSE4A__\n-  abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "09dda6d062c75ad81607a95f3eaab878fbc3de57", "filename": "gcc/testsuite/gcc.target/i386/isa-14.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-14.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse5 -mno-sse\" } */\n+/* { dg-options \"-march=x86-64 -msse4a -mno-sse\" } */\n \n extern void abort (void);\n \n@@ -26,9 +26,6 @@ main ()\n #endif\n #if defined __SSE4A__\n   abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n #endif\n   return 0;\n }"}, {"sha": "ebbef772d8ae2806e9289c4c3044b68c8b6e8718", "filename": "gcc/testsuite/gcc.target/i386/isa-2.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-2.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse4 -msse5\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if !defined __SSSE3__\n-  abort ();\n-#endif\n-#if !defined __SSE4_1__\n-  abort ();\n-#endif\n-#if !defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "c22954406cb0bdbcf3e982462d6f240bb3ce65ac", "filename": "gcc/testsuite/gcc.target/i386/isa-3.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-3.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=x86-64 -msse4 -msse5 -msse4a\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if !defined __SSSE3__\n-  abort ();\n-#endif\n-#if !defined __SSE4_1__\n-  abort ();\n-#endif\n-#if !defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "620369075d949e23ffb29ae872f67c641cc28141", "filename": "gcc/testsuite/gcc.target/i386/isa-4.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-4.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=core2 -msse5 -mno-sse4\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if !defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "76ea31ed25162d1ace0809f30f6aa6a614c13f6d", "filename": "gcc/testsuite/gcc.target/i386/isa-7.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-7.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=amdfam10 -msse5 -mno-sse4\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if !defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "fb37669dcea1adeed4654c60e387ba04e6033ef9", "filename": "gcc/testsuite/gcc.target/i386/isa-8.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-8.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=amdfam10 -msse5 -mno-sse4a\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if defined __SSE4A__\n-  abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "fefdef6a09c566ede5da4171366e68546d8611b7", "filename": "gcc/testsuite/gcc.target/i386/isa-9.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-9.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-march=amdfam10 -mno-sse5\" } */\n-\n-extern void abort (void);\n-\n-int\n-main ()\n-{\n-#if !defined __SSE__\n-  abort ();\n-#endif\n-#if !defined __SSE2__\n-  abort ();\n-#endif\n-#if !defined __SSE3__\n-  abort ();\n-#endif\n-#if defined __SSSE3__\n-  abort ();\n-#endif\n-#if defined __SSE4_1__\n-  abort ();\n-#endif\n-#if defined __SSE4_2__\n-  abort ();\n-#endif\n-#if !defined __SSE4A__\n-  abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n-#endif\n-  return 0;\n-}"}, {"sha": "5b484a207ff20bdf24e91ee4d999956aaecde3e5", "filename": "gcc/testsuite/gcc.target/i386/pr33524.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33524.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33524.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33524.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,25 +0,0 @@\n-/* Test that the compiler properly optimizes vector SI->DI conversions.  This\n-   was a bug in the initial SSE5 code.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-typedef long long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-union {\n-  signed   int   si[SIZE];\n-  signed   long  sl[SIZE];\n-  __m128i        align;\n-} a, b;\n-\n-void conv_sign_int_sign_long (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.sl[i] = b.si[i];\n-}\n-\n-/* { dg-final { scan-assembler \"pperm\" } } */"}, {"sha": "5e2173a8f6eac78d42d216c1cc1bbcd971a0ef5d", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,8 +0,0 @@\n-/* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n-   usable with -O -std=c89 -pedantic-errors.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n-\n-#include <x86intrin.h>\n-\n-int dummy;"}, {"sha": "8bfb9f866b45823d8d73b5d604171a99d73375cf", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,135 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n-\n-#include <mm_malloc.h>\n-\n-/* Test that the intrinsics compile with optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n-\n-#define extern\n-#define __inline\n-\n-/* Following intrinsics require immediate arguments. */\n-\n-/* ammintrin.h */\n-#define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n-#define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n-\n-/* immintrin.h */\n-#define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n-#define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n-#define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n-#define __builtin_ia32_shufpd256(X, Y, M) __builtin_ia32_shufpd256(X, Y, 1)\n-#define __builtin_ia32_shufps256(X, Y, M) __builtin_ia32_shufps256(X, Y, 1)\n-#define __builtin_ia32_cmpsd(X, Y, O) __builtin_ia32_cmpsd(X, Y, 1)\n-#define __builtin_ia32_cmpss(X, Y, O) __builtin_ia32_cmpss(X, Y, 1)\n-#define __builtin_ia32_cmppd(X, Y, O) __builtin_ia32_cmppd(X, Y, 1)\n-#define __builtin_ia32_cmpps(X, Y, O) __builtin_ia32_cmpps(X, Y, 1)\n-#define __builtin_ia32_cmppd256(X, Y, O) __builtin_ia32_cmppd256(X, Y, 1)\n-#define __builtin_ia32_cmpps256(X, Y, O) __builtin_ia32_cmpps256(X, Y, 1)\n-#define __builtin_ia32_vextractf128_pd256(X, N) __builtin_ia32_vextractf128_pd256(X, 1)\n-#define __builtin_ia32_vextractf128_ps256(X, N) __builtin_ia32_vextractf128_ps256(X, 1)\n-#define __builtin_ia32_vextractf128_si256(X, N) __builtin_ia32_vextractf128_si256(X, 1)\n-#define __builtin_ia32_vpermilpd(X, N) __builtin_ia32_vpermilpd(X, 1)\n-#define __builtin_ia32_vpermilpd256(X, N) __builtin_ia32_vpermilpd256(X, 1)\n-#define __builtin_ia32_vpermilps(X, N) __builtin_ia32_vpermilps(X, 1)\n-#define __builtin_ia32_vpermilps256(X, N) __builtin_ia32_vpermilps256(X, 1)\n-#define __builtin_ia32_vpermil2pd(X, Y, C, I) __builtin_ia32_vpermil2pd(X, Y, C, 1)\n-#define __builtin_ia32_vpermil2pd256(X, Y, C, I) __builtin_ia32_vpermil2pd256(X, Y, C, 1)\n-#define __builtin_ia32_vpermil2ps(X, Y, C, I) __builtin_ia32_vpermil2ps(X, Y, C, 1)\n-#define __builtin_ia32_vpermil2ps256(X, Y, C, I) __builtin_ia32_vpermil2ps256(X, Y, C, 1)\n-#define __builtin_ia32_vperm2f128_pd256(X, Y, C) __builtin_ia32_vperm2f128_pd256(X, Y, 1)\n-#define __builtin_ia32_vperm2f128_ps256(X, Y, C) __builtin_ia32_vperm2f128_ps256(X, Y, 1)\n-#define __builtin_ia32_vperm2f128_si256(X, Y, C) __builtin_ia32_vperm2f128_si256(X, Y, 1)\n-#define __builtin_ia32_vinsertf128_pd256(X, Y, C) __builtin_ia32_vinsertf128_pd256(X, Y, 1)\n-#define __builtin_ia32_vinsertf128_ps256(X, Y, C) __builtin_ia32_vinsertf128_ps256(X, Y, 1)\n-#define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n-#define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n-#define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n-\n-/* wmmintrin.h */\n-#define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n-#define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n-\n-/* mmintrin-common.h */\n-#define __builtin_ia32_roundpd(V, M) __builtin_ia32_roundpd(V, 1)\n-#define __builtin_ia32_roundsd(D, V, M) __builtin_ia32_roundsd(D, V, 1)\n-#define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n-#define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n-\n-/* smmintrin.h */\n-#define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n-#define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n-#define __builtin_ia32_blendpd(X, Y, M) __builtin_ia32_blendpd(X, Y, 1)\n-#define __builtin_ia32_dpps(X, Y, M) __builtin_ia32_dpps(X, Y, 1)\n-#define __builtin_ia32_dppd(X, Y, M) __builtin_ia32_dppd(X, Y, 1)\n-#define __builtin_ia32_insertps128(D, S, N) __builtin_ia32_insertps128(D, S, 1)\n-#define __builtin_ia32_vec_ext_v4sf(X, N) __builtin_ia32_vec_ext_v4sf(X, 1)\n-#define __builtin_ia32_vec_set_v16qi(D, S, N) __builtin_ia32_vec_set_v16qi(D, S, 1)\n-#define __builtin_ia32_vec_set_v4si(D, S, N) __builtin_ia32_vec_set_v4si(D, S, 1)\n-#define __builtin_ia32_vec_set_v2di(D, S, N) __builtin_ia32_vec_set_v2di(D, S, 1)\n-#define __builtin_ia32_vec_ext_v16qi(X, N) __builtin_ia32_vec_ext_v16qi(X, 1)\n-#define __builtin_ia32_vec_ext_v4si(X, N) __builtin_ia32_vec_ext_v4si(X, 1)\n-#define __builtin_ia32_vec_ext_v2di(X, N) __builtin_ia32_vec_ext_v2di(X, 1)\n-#define __builtin_ia32_mpsadbw128(X, Y, M) __builtin_ia32_mpsadbw128(X, Y, 1)\n-#define __builtin_ia32_pcmpistrm128(X, Y, M) \\\n-  __builtin_ia32_pcmpistrm128(X, Y, 1)\n-#define __builtin_ia32_pcmpistri128(X, Y, M) \\\n-  __builtin_ia32_pcmpistri128(X, Y, 1)\n-#define __builtin_ia32_pcmpestrm128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestrm128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpestri128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestri128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpistria128(X, Y, M) \\\n-  __builtin_ia32_pcmpistria128(X, Y, 1)\n-#define __builtin_ia32_pcmpistric128(X, Y, M) \\\n-  __builtin_ia32_pcmpistric128(X, Y, 1)\n-#define __builtin_ia32_pcmpistrio128(X, Y, M) \\\n-  __builtin_ia32_pcmpistrio128(X, Y, 1)\n-#define __builtin_ia32_pcmpistris128(X, Y, M) \\\n-  __builtin_ia32_pcmpistris128(X, Y, 1)\n-#define __builtin_ia32_pcmpistriz128(X, Y, M) \\\n-  __builtin_ia32_pcmpistriz128(X, Y, 1)\n-#define __builtin_ia32_pcmpestria128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestria128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpestric128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestric128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpestrio128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestrio128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpestris128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestris128(X, LX, Y, LY, 1)\n-#define __builtin_ia32_pcmpestriz128(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestriz128(X, LX, Y, LY, 1)\n-\n-/* tmmintrin.h */\n-#define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n-#define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n-\n-/* emmintrin.h */\n-#define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n-#define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n-#define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n-#define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n-#define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)\n-#define __builtin_ia32_vec_set_v8hi(A, D, N) \\\n-  __builtin_ia32_vec_set_v8hi(A, D, 0)\n-#define __builtin_ia32_vec_ext_v8hi(A, N) __builtin_ia32_vec_ext_v8hi(A, 0)\n-#define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n-\n-/* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n-#define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n-#define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n-  __builtin_ia32_vec_set_v4hi(A, D, 0)\n-#define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n-#define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n-\n-/* bmmintrin.h */\n-#define __builtin_ia32_protbi(A, B) __builtin_ia32_protbi(A,1)\n-#define __builtin_ia32_protwi(A, B) __builtin_ia32_protwi(A,1)\n-#define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n-#define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n-\n-#include <x86intrin.h>"}, {"sha": "67da6608a1e20928bf82f55572f0ad2164ed529b", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,164 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n-\n-#include <mm_malloc.h>\n-\n-/* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a,b}mmintrin.h  and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n-\n-#define extern\n-#define __inline\n-\n-#include <x86intrin.h>\n-\n-#define _CONCAT(x,y) x ## y\n-\n-#define test_1(func, type, op1_type, imm)\t\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n-  { return func (A, imm); }\n-\n-#define test_1x(func, type, op1_type, imm1, imm2)\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, int const I, int const L)\t\t\\\n-  { return func (A, imm1, imm2); }\n-\n-#define test_2(func, type, op1_type, op2_type, imm)\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B, int const I)\t\t\\\n-  { return func (A, B, imm); }\n-\n-#define test_2x(func, type, op1_type, op2_type, imm1, imm2)\t\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n-  { return func (A, B, imm1, imm2); }\n-\n-#define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n-\t\t\top3_type C, int const I)\t\t\t\\\n-  { return func (A, B, C, imm); }\n-\n-#define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n-\t\t\top3_type C, op4_type D, int const I)\t\t\\\n-  { return func (A, B, C, D, imm); }\n-\n-\n-/* Following intrinsics require immediate arguments.  They\n-   are defined as macros for non-optimized compilations. */\n-\n-/* ammintrin.h */\n-test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n-test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n-\n-/* immintrin.h */\n-test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n-test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n-test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)\n-test_2 (_mm256_shuffle_pd, __m256d, __m256d, __m256d, 1)\n-test_2 (_mm256_shuffle_ps, __m256, __m256, __m256, 1)\n-test_2 (_mm_cmp_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_cmp_ss, __m128, __m128, __m128, 1)\n-test_2 (_mm_cmp_pd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_cmp_ps, __m128, __m128, __m128, 1)\n-test_2 (_mm256_cmp_pd, __m256d, __m256d, __m256d, 1)\n-test_2 (_mm256_cmp_ps, __m256, __m256, __m256, 1)\n-test_1 (_mm256_extractf128_pd, __m128d, __m256d, 1)\n-test_1 (_mm256_extractf128_ps, __m128, __m256, 1)\n-test_1 (_mm256_extractf128_si256, __m128i, __m256i, 1)\n-test_1 (_mm256_extract_epi8, int, __m256i, 20)\n-test_1 (_mm256_extract_epi16, int, __m256i, 13)\n-test_1 (_mm256_extract_epi32, int, __m256i, 6)\n-#ifdef __x86_64__\n-test_1 (_mm256_extract_epi64, long long, __m256i, 2)\n-#endif\n-test_1 (_mm_permute_pd, __m128d, __m128d, 1)\n-test_1 (_mm256_permute_pd, __m256d, __m256d, 1)\n-test_1 (_mm_permute_ps, __m128, __m128, 1)\n-test_1 (_mm256_permute_ps, __m256, __m256, 1)\n-test_2 (_mm256_permute2f128_pd, __m256d, __m256d, __m256d, 1)\n-test_2 (_mm256_permute2f128_ps, __m256, __m256, __m256, 1)\n-test_2 (_mm256_permute2f128_si256, __m256i, __m256i, __m256i, 1)\n-test_2 (_mm256_insertf128_pd, __m256d, __m256d, __m128d, 1)\n-test_2 (_mm256_insertf128_ps, __m256, __m256, __m128, 1)\n-test_2 (_mm256_insertf128_si256, __m256i, __m256i, __m128i, 1)\n-test_2 (_mm256_insert_epi8, __m256i, __m256i, int, 30)\n-test_2 (_mm256_insert_epi16, __m256i, __m256i, int, 7)\n-test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n-#ifdef __x86_64__\n-test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n-#endif\n-test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n-test_1 (_mm256_round_ps, __m256, __m256, 1)\n-\n-/* wmmintrin.h */\n-test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n-test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n-\n-/* mmintrin-common.h */\n-test_1 (_mm_round_pd, __m128d, __m128d, 1)\n-test_1 (_mm_round_ps, __m128, __m128, 1)\n-test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n-\n-/* smmintrin.h */\n-test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n-test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_dp_ps, __m128, __m128, __m128, 1)\n-test_2 (_mm_dp_pd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_insert_ps, __m128, __m128, __m128, 1)\n-test_1 (_mm_extract_ps, int, __m128, 1)\n-test_2 (_mm_insert_epi8, __m128i, __m128i, int, 1)\n-test_2 (_mm_insert_epi32, __m128i, __m128i, int, 1)\n-#ifdef __x86_64__\n-test_2 (_mm_insert_epi64, __m128i, __m128i, long long, 1)\n-#endif\n-test_1 (_mm_extract_epi8, int, __m128i, 1)\n-test_1 (_mm_extract_epi32, int, __m128i, 1)\n-#ifdef __x86_64__\n-test_1 (_mm_extract_epi64, long long, __m128i, 1)\n-#endif\n-test_2 (_mm_mpsadbw_epu8, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrm, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistri, int, __m128i, __m128i, 1)\n-test_4 (_mm_cmpestrm, __m128i, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestri, int, __m128i, int, __m128i, int, 1)\n-test_2 (_mm_cmpistra, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrc, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistro, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrs, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrz, int, __m128i, __m128i, 1)\n-test_4 (_mm_cmpestra, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrc, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n-\n-/* tmmintrin.h */\n-test_2 (_mm_alignr_epi8, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n-\n-/* emmintrin.h */\n-test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n-test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n-test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n-test_1 (_mm_extract_epi16, int, __m128i, 1)\n-test_2 (_mm_insert_epi16, __m128i, __m128i, int, 1)\n-test_1 (_mm_shufflehi_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_shufflelo_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_shuffle_epi32, __m128i, __m128i, 1)\n-\n-/* xmmintrin.h */\n-test_2 (_mm_shuffle_ps, __m128, __m128, __m128, 1)\n-test_1 (_mm_extract_pi16, int, __m64, 1)\n-test_1 (_m_pextrw, int, __m64, 1)\n-test_2 (_mm_insert_pi16, __m64, __m64, int, 1)\n-test_2 (_m_pinsrw, __m64, __m64, int, 1)\n-test_1 (_mm_shuffle_pi16, __m64, __m64, 1)\n-test_1 (_m_pshufw, __m64, __m64, 1)\n-test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n-\n-/* bmmintrin.h */\n-test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi32, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi64, __m128i, __m128i, 1)"}, {"sha": "f530e54ec3040c82563af21c20dfc3645584737d", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,171 +0,0 @@\n-/* Same as sse-14, except converted to use #pragma GCC option.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration\" } */\n-\n-#include <mm_malloc.h>\n-\n-/* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a,b}mmintrin.h  and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n-\n-#define extern\n-#define __inline\n-\n-#define _CONCAT(x,y) x ## y\n-\n-#define test_1(func, type, op1_type, imm)\t\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n-  { return func (A, imm); }\n-\n-#define test_1x(func, type, op1_type, imm1, imm2)\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, int const I, int const L)\t\t\\\n-  { return func (A, imm1, imm2); }\n-\n-#define test_2(func, type, op1_type, op2_type, imm)\t\t\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B, int const I)\t\t\\\n-  { return func (A, B, imm); }\n-\n-#define test_2x(func, type, op1_type, op2_type, imm1, imm2)\t\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n-  { return func (A, B, imm1, imm2); }\n-\n-#define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n-  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n-\t\t\top3_type C, op4_type D, int const I)\t\t\\\n-  { return func (A, B, C, D, imm); }\n-\n-\n-#ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse5,aes,pclmul\")\n-#endif\n-\n-/* Following intrinsics require immediate arguments.  They\n-   are defined as macros for non-optimized compilations. */\n-\n-/* mmintrin.h (MMX).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx\")\n-#endif\n-#include <mmintrin.h>\n-\n-/* mm3dnow.h (3DNOW).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"3dnow\")\n-#endif\n-#include <mm3dnow.h>\n-\n-/* xmmintrin.h (SSE).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse\")\n-#endif\n-#include <xmmintrin.h>\n-test_2 (_mm_shuffle_ps, __m128, __m128, __m128, 1)\n-test_1 (_mm_extract_pi16, int, __m64, 1)\n-test_1 (_m_pextrw, int, __m64, 1)\n-test_2 (_mm_insert_pi16, __m64, __m64, int, 1)\n-test_2 (_m_pinsrw, __m64, __m64, int, 1)\n-test_1 (_mm_shuffle_pi16, __m64, __m64, 1)\n-test_1 (_m_pshufw, __m64, __m64, 1)\n-test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n-\n-/* emmintrin.h (SSE2).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse2\")\n-#endif\n-#include <emmintrin.h>\n-test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n-test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n-test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n-test_1 (_mm_extract_epi16, int, __m128i, 1)\n-test_2 (_mm_insert_epi16, __m128i, __m128i, int, 1)\n-test_1 (_mm_shufflehi_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_shufflelo_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_shuffle_epi32, __m128i, __m128i, 1)\n-\n-/* pmmintrin.h (SSE3).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse3\")\n-#endif\n-#include <pmmintrin.h>\n-\n-/* tmmintrin.h (SSSE3).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"ssse3\")\n-#endif\n-#include <tmmintrin.h>\n-test_2 (_mm_alignr_epi8, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n-\n-/* ammintrin.h (SSE4A).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a\")\n-#endif\n-#include <ammintrin.h>\n-test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n-test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n-\n-/* smmintrin.h (SSE4.1).  */\n-/* nmmintrin.h (SSE4.2).  */\n-/* Note, nmmintrin.h includes smmintrin.h, and smmintrin.h checks for the\n-   #ifdef.  So just set the option to SSE4.2.  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4.2\")\n-#endif\n-#include <nmmintrin.h>\n-test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n-test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_dp_ps, __m128, __m128, __m128, 1)\n-test_2 (_mm_dp_pd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_insert_ps, __m128, __m128, __m128, 1)\n-test_1 (_mm_extract_ps, int, __m128, 1)\n-test_2 (_mm_insert_epi8, __m128i, __m128i, int, 1)\n-test_2 (_mm_insert_epi32, __m128i, __m128i, int, 1)\n-#ifdef __x86_64__\n-test_2 (_mm_insert_epi64, __m128i, __m128i, long long, 1)\n-#endif\n-test_1 (_mm_extract_epi8, int, __m128i, 1)\n-test_1 (_mm_extract_epi32, int, __m128i, 1)\n-#ifdef __x86_64__\n-test_1 (_mm_extract_epi64, long long, __m128i, 1)\n-#endif\n-test_2 (_mm_mpsadbw_epu8, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrm, __m128i, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistri, int, __m128i, __m128i, 1)\n-test_4 (_mm_cmpestrm, __m128i, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestri, int, __m128i, int, __m128i, int, 1)\n-test_2 (_mm_cmpistra, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrc, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistro, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrs, int, __m128i, __m128i, 1)\n-test_2 (_mm_cmpistrz, int, __m128i, __m128i, 1)\n-test_4 (_mm_cmpestra, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrc, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n-test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n-\n-/* bmmintrin.h (SSE5).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse5\")\n-#endif\n-#include <bmmintrin.h>\n-test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi16, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi32, __m128i, __m128i, 1)\n-test_1 (_mm_roti_epi64, __m128i, __m128i, 1)\n-\n-/* wmmintrin.h (AES/PCLMUL).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"aes,pclmul\")\n-#endif\n-#include <wmmintrin.h>\n-test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n-test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n-\n-/* mmintrin-common.h */\n-test_1 (_mm_round_pd, __m128d, __m128d, 1)\n-test_1 (_mm_round_ps, __m128, __m128, 1)\n-test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_round_ss, __m128, __m128, __m128, 1)"}, {"sha": "44b2a0534cdb0526670a466c9ba5cc0cb8deb087", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -101,8 +101,7 @@\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n \n-#pragma GCC target (\"3dnow,sse4,sse5,aes,pclmul\")\n+#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul\")\n #include <wmmintrin.h>\n-#include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "e133ed884fa1beb6d3fc2c1a0f30837eacc25168", "filename": "gcc/testsuite/gcc.target/i386/sse5-check.h", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-check.h?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,20 +0,0 @@\n-#include <stdlib.h>\n-\n-#include \"cpuid.h\"\n-\n-static void sse5_test (void);\n-\n-int\n-main ()\n-{\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (0x80000001, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE5 test only if host has SSE5 support.  */\n-  if (ecx & bit_SSE5)\n-    sse5_test ();\n-\n-  exit (0);\n-}"}, {"sha": "ec6388f5a7a8afda9bc824c87789e8f840af0140", "filename": "gcc/testsuite/gcc.target/i386/sse5-fma-vector.c", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,93 +0,0 @@\n-/* Test that the compiler properly optimizes floating point multiply and add\n-   instructions vector into fmaddps on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -mfused-madd -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef float     __m128  __attribute__ ((__vector_size__ (16), __may_alias__));\n-typedef double    __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128 f_align;\n-  __m128d d_align;\n-  float f[SIZE];\n-  double d[SIZE];\n-} a, b, c, d;\n-\n-void\n-flt_mul_add (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.f[i] = (b.f[i] * c.f[i]) + d.f[i];\n-}\n-\n-void\n-dbl_mul_add (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.d[i] = (b.d[i] * c.d[i]) + d.d[i];\n-}\n-\n-void\n-flt_mul_sub (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.f[i] = (b.f[i] * c.f[i]) - d.f[i];\n-}\n-\n-void\n-dbl_mul_sub (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.d[i] = (b.d[i] * c.d[i]) - d.d[i];\n-}\n-\n-void\n-flt_neg_mul_add (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.f[i] = (-(b.f[i] * c.f[i])) + d.f[i];\n-}\n-\n-void\n-dbl_neg_mul_add (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.d[i] = (-(b.d[i] * c.d[i])) + d.d[i];\n-}\n-\n-int main ()\n-{\n-  flt_mul_add ();\n-  flt_mul_sub ();\n-  flt_neg_mul_add ();\n-\n-  dbl_mul_add ();\n-  dbl_mul_sub ();\n-  dbl_neg_mul_add ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"fmaddps\" } } */\n-/* { dg-final { scan-assembler \"fmaddpd\" } } */\n-/* { dg-final { scan-assembler \"fmsubps\" } } */\n-/* { dg-final { scan-assembler \"fmsubpd\" } } */\n-/* { dg-final { scan-assembler \"fnmaddps\" } } */\n-/* { dg-final { scan-assembler \"fnmaddpd\" } } */"}, {"sha": "d30e3166ea233e6cfbc697efdf85432cede7dad8", "filename": "gcc/testsuite/gcc.target/i386/sse5-fma.c", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-fma.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,82 +0,0 @@\n-/* Test that the compiler properly optimizes floating point multiply and add\n-   instructions into fmaddss, fmsubss, fnmaddss, fnmsubss on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -mfused-madd\" } */\n-\n-extern void exit (int);\n-\n-float\n-flt_mul_add (float a, float b, float c)\n-{\n-  return (a * b) + c;\n-}\n-\n-double\n-dbl_mul_add (double a, double b, double c)\n-{\n-  return (a * b) + c;\n-}\n-\n-float\n-flt_mul_sub (float a, float b, float c)\n-{\n-  return (a * b) - c;\n-}\n-\n-double\n-dbl_mul_sub (double a, double b, double c)\n-{\n-  return (a * b) - c;\n-}\n-\n-float\n-flt_neg_mul_add (float a, float b, float c)\n-{\n-  return (-(a * b)) + c;\n-}\n-\n-double\n-dbl_neg_mul_add (double a, double b, double c)\n-{\n-  return (-(a * b)) + c;\n-}\n-\n-float\n-flt_neg_mul_sub (float a, float b, float c)\n-{\n-  return (-(a * b)) - c;\n-}\n-\n-double\n-dbl_neg_mul_sub (double a, double b, double c)\n-{\n-  return (-(a * b)) - c;\n-}\n-\n-float  f[10] = { 2, 3, 4 };\n-double d[10] = { 2, 3, 4 };\n-\n-int main ()\n-{\n-  f[3] = flt_mul_add (f[0], f[1], f[2]);\n-  f[4] = flt_mul_sub (f[0], f[1], f[2]);\n-  f[5] = flt_neg_mul_add (f[0], f[1], f[2]);\n-  f[6] = flt_neg_mul_sub (f[0], f[1], f[2]);\n-\n-  d[3] = dbl_mul_add (d[0], d[1], d[2]);\n-  d[4] = dbl_mul_sub (d[0], d[1], d[2]);\n-  d[5] = dbl_neg_mul_add (d[0], d[1], d[2]);\n-  d[6] = dbl_neg_mul_sub (d[0], d[1], d[2]);\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"fmaddss\" } } */\n-/* { dg-final { scan-assembler \"fmaddsd\" } } */\n-/* { dg-final { scan-assembler \"fmsubss\" } } */\n-/* { dg-final { scan-assembler \"fmsubsd\" } } */\n-/* { dg-final { scan-assembler \"fnmaddss\" } } */\n-/* { dg-final { scan-assembler \"fnmaddsd\" } } */\n-/* { dg-final { scan-assembler \"fnmsubss\" } } */\n-/* { dg-final { scan-assembler \"fnmsubsd\" } } */"}, {"sha": "ff1f7fcc7fd5a416c7aed82a7cde9359480f70ee", "filename": "gcc/testsuite/gcc.target/i386/sse5-haddX.c", "status": "removed", "additions": 0, "deletions": 208, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-haddX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-haddX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-haddX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,208 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 10\n-\n-union\n-{\n-  __m128i x[NUM];\n-  signed char ssi[NUM * 16];\n-  short si[NUM * 8];\n-  int li[NUM * 4];\n-  long long lli[NUM * 2];\n-} dst, res, src1;\n-\n-static void\n-init_sbyte ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 16; i++)\n-    src1.ssi[i] = i;\n-}\n-\n-static void\n-init_sword ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 8; i++)\n-    src1.si[i] = i;\n-}\n-\n-\n-static void\n-init_sdword ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 4; i++)\n-    src1.li[i] = i;\n-}\n-\n-static int \n-check_sbyte2word ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 8; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.si[s] = src1.ssi[t] + src1.ssi[t + 1] ;\n-\t  if (res.si[s] != dst.si[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int \n-check_sbyte2dword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 4; j++)\n-\t{\n-\t  t = i + (4 * j);\n-\t  s = (i / 4) + j;\n-\t  res.li[s] = (src1.ssi[t] + src1.ssi[t + 1]) + (src1.ssi[t + 2]\n-\t              + src1.ssi[t + 3]); \n-\t  if (res.li[s] != dst.li[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_sbyte2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (8 * j);\n-\t  s = (i / 8) + j;\n-\t  res.lli[s] = ((src1.ssi[t] + src1.ssi[t + 1]) + (src1.ssi[t + 2] \n-\t\t       + src1.ssi[t + 3])) + ((src1.ssi[t + 4] + src1.ssi[t +5])\n-\t               + (src1.ssi[t + 6] + src1.ssi[t + 7])); \n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_sword2dword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n-    {\n-      for (j = 0; j < 4; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.li[s] = src1.si[t] + src1.si[t + 1] ;\n-\t  if (res.li[s] != dst.li[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int \n-check_sword2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 8; i = i + 8)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (4 * j);\n-\t  s = (i / 4) + j;\n-\t  res.lli[s] = (src1.si[t] + src1.si[t + 1]) + (src1.si[t + 2]\n-\t               + src1.si[t + 3]); \n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_dword2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.lli[s] = src1.li[t] + src1.li[t + 1] ;\n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check haddbw */\n-  init_sbyte ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddw_epi8 (src1.x[i]);\n-  \n-  if (check_sbyte2word())\n-  abort ();\n-  \n-  /* Check haddbd */\n-  for (i = 0; i < (NUM ); i++)\n-    dst.x[i] = _mm_haddd_epi8 (src1.x[i]);\n-  \n-  if (check_sbyte2dword())\n-    abort (); \n-  \n-  /* Check haddbq */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epi8 (src1.x[i]);\n-  \n-  if (check_sbyte2qword())\n-    abort ();\n-\n-  /* Check haddwd */\n-  init_sword ();\n-\n-  for (i = 0; i < (NUM ); i++)\n-    dst.x[i] = _mm_haddd_epi16 (src1.x[i]);\n-  \n-  if (check_sword2dword())\n-    abort (); \n-   \n-  /* Check haddbwq */\n- \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epi16 (src1.x[i]);\n-  \n-  if (check_sword2qword())\n-    abort ();\n- \n-  /* Check haddq */\n-  init_sdword ();\n-\n-    for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epi32 (src1.x[i]);\n-  \n-  if (check_dword2qword())\n-    abort ();\n-}"}, {"sha": "f2697443ec06309823e5ba5a712d79c3bdfda088", "filename": "gcc/testsuite/gcc.target/i386/sse5-hadduX.c", "status": "removed", "additions": 0, "deletions": 207, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hadduX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hadduX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hadduX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,207 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 10\n-\n-union\n-{\n-  __m128i x[NUM];\n-  unsigned char  ssi[NUM * 16];\n-  unsigned short si[NUM * 8];\n-  unsigned int li[NUM * 4];\n-  unsigned long long  lli[NUM * 2];\n-} dst, res, src1;\n-\n-static void\n-init_byte ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 16; i++)\n-    src1.ssi[i] = i;\n-}\n-\n-static void\n-init_word ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 8; i++)\n-    src1.si[i] = i;\n-}\n-\n-\n-static void\n-init_dword ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 4; i++)\n-    src1.li[i] = i;\n-}\n-\n-static int \n-check_byte2word ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 8; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.si[s] = src1.ssi[t] + src1.ssi[t + 1] ;\n-\t  if (res.si[s] != dst.si[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int \n-check_byte2dword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 4; j++)\n-\t{\n-\t  t = i + (4 * j);\n-\t  s = (i / 4) + j;\n-\t  res.li[s] = (src1.ssi[t] + src1.ssi[t + 1]) + (src1.ssi[t + 2]\n-\t              + src1.ssi[t + 3]); \n-\t  if (res.li[s] != dst.li[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_byte2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (8 * j);\n-\t  s = (i / 8) + j;\n-\t  res.lli[s] = ((src1.ssi[t] + src1.ssi[t + 1]) + (src1.ssi[t + 2] \n-\t\t       + src1.ssi[t + 3])) + ((src1.ssi[t + 4] + src1.ssi[t +5])\n-\t               + (src1.ssi[t + 6] + src1.ssi[t + 7])); \n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_word2dword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n-    {\n-      for (j = 0; j < 4; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.li[s] = src1.si[t] + src1.si[t + 1] ;\n-\t  if (res.li[s] != dst.li[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int \n-check_word2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 8; i = i + 8)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (4 * j);\n-\t  s = (i / 4) + j;\n-\t  res.lli[s] = (src1.si[t] + src1.si[t + 1]) + (src1.si[t + 2]\n-\t               + src1.si[t + 3]); \n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\n-\t}\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_dword2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.lli[s] = src1.li[t] + src1.li[t + 1] ;\n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check haddubw */\n-  init_byte ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddw_epu8 (src1.x[i]);\n-  \n-  if (check_byte2word())\n-  abort ();\n-  \n-  /* Check haddubd */\n-  for (i = 0; i < (NUM ); i++)\n-    dst.x[i] = _mm_haddd_epu8 (src1.x[i]);\n-  \n-  if (check_byte2dword())\n-    abort (); \n-  \n-  /* Check haddubq */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epu8 (src1.x[i]);\n-  \n-  if (check_byte2qword())\n-    abort ();\n-\n-  /* Check hadduwd */\n-  init_word ();\n-\n-  for (i = 0; i < (NUM ); i++)\n-    dst.x[i] = _mm_haddd_epu16 (src1.x[i]);\n-  \n-  if (check_word2dword())\n-    abort (); \n-   \n-  /* Check haddbuwq */\n- \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epu16 (src1.x[i]);\n-  \n-  if (check_word2qword())\n-    abort ();\n- \n-  /* Check hadudq */\n-  init_dword ();\n-    for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_haddq_epu32 (src1.x[i]);\n-  \n-  if (check_dword2qword())\n-    abort ();\n-}"}, {"sha": "4e2979e9c1018b0f30ee0658a0cac0ce8b7cbaaf", "filename": "gcc/testsuite/gcc.target/i386/sse5-hsubX.c", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hsubX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hsubX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-hsubX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,128 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 10\n-\n-union\n-{\n-  __m128i x[NUM];\n-  signed char ssi[NUM * 16];\n-  short si[NUM * 8];\n-  int li[NUM * 4];\n-  long long lli[NUM * 2];\n-} dst, res, src1;\n-\n-static void\n-init_sbyte ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 16; i++)\n-    src1.ssi[i] = i;\n-}\n-\n-static void\n-init_sword ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 8; i++)\n-    src1.si[i] = i;\n-}\n-\n-\n-static void\n-init_sdword ()\n-{\n-  int i;\n-  for (i=0; i < NUM * 4; i++)\n-    src1.li[i] = i;\n-}\n-\n-static int \n-check_sbyte2word ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < NUM * 16; i = i + 16)\n-    {\n-      for (j = 0; j < 8; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.si[s] = src1.ssi[t] - src1.ssi[t + 1] ;\n-\t  if (res.si[s] != dst.si[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int\n-check_sword2dword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n-    {\n-      for (j = 0; j < 4; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.li[s] = src1.si[t] - src1.si[t + 1] ;\n-\t  if (res.li[s] != dst.li[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static int\n-check_dword2qword ()\n-{\n-  int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n-    {\n-      for (j = 0; j < 2; j++)\n-\t{\n-\t  t = i + (2 * j);\n-\t  s = (i / 2) + j;\n-\t  res.lli[s] = src1.li[t] - src1.li[t + 1] ;\n-\t  if (res.lli[s] != dst.lli[s]) \n-\t    check_fails++;\t\n-\t}\n-    }\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check hsubbw */\n-  init_sbyte ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_hsubw_epi8 (src1.x[i]);\n-  \n-  if (check_sbyte2word())\n-  abort ();\n-  \n-\n-  /* Check hsubwd */\n-  init_sword ();\n-\n-  for (i = 0; i < (NUM ); i++)\n-    dst.x[i] = _mm_hsubd_epi16 (src1.x[i]);\n-  \n-  if (check_sword2dword())\n-    abort (); \n-   \n-   /* Check hsubdq */\n-  init_sdword ();\n-    for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_hsubq_epi32 (src1.x[i]);\n-  \n-  if (check_dword2qword())\n-    abort ();\n-}"}, {"sha": "f32b0a13d0a41c4660af7abc4d91ceb0f3661dd9", "filename": "gcc/testsuite/gcc.target/i386/sse5-ima-vector.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-ima-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-ima-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-ima-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* Test that the compiler properly optimizes vector 32-bit integer point\n-   multiply and add instructions vector into pmacsdd on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i align;\n-  int i[SIZE];\n-} a, b, c, d;\n-\n-void\n-int_mul_add (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.i[i] = (b.i[i] * c.i[i]) + d.i[i];\n-}\n-\n-int main ()\n-{\n-  int_mul_add ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pmacsdd\" } } */"}, {"sha": "ef29d081473f2f9c2ca886b32e997af8f64a316b", "filename": "gcc/testsuite/gcc.target/i386/sse5-imul32widen-vector.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul32widen-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul32widen-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul32widen-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,36 +0,0 @@\n-/* Test that the compiler properly optimizes floating point multiply and add\n-   instructions vector into pmacsdd/etc. on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  int i32[SIZE];\n-  long i64[SIZE];\n-} a, b, c, d;\n-\n-void\n-imul32_to_64 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.i64[i] = ((long)b.i32[i]) * ((long)c.i32[i]);\n-}\n-\n-int main ()\n-{\n-  imul32_to_64 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pmacsdql\" } } */\n-/* { dg-final { scan-assembler \"pmacsdqh\" } } */"}, {"sha": "06ad1d2e96e07a3997f702535fdd47e0c24ae95d", "filename": "gcc/testsuite/gcc.target/i386/sse5-imul64-vector.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul64-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul64-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-imul64-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,36 +0,0 @@\n-/* Test that the compiler properly optimizes floating point multiply and add\n-   instructions vector into pmacsdd/etc. on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  long i64[SIZE];\n-} a, b, c, d;\n-\n-void\n-imul64 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.i64[i] = b.i64[i] * c.i64[i];\n-}\n-\n-int main ()\n-{\n-  imul64 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pmacsdd\" } } */\n-/* { dg-final { scan-assembler \"phadddq\" } } */\n-/* { dg-final { scan-assembler \"pmacsdql\" } } */"}, {"sha": "c7bc5fe5f2f73b3201288ae03a7155c4d8f1633e", "filename": "gcc/testsuite/gcc.target/i386/sse5-maccXX.c", "status": "removed", "additions": 0, "deletions": 140, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-maccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-maccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-maccXX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,140 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 20\n-\n-union\n-{\n-  __m128 x[NUM];\n-  float f[NUM * 4];\n-  __m128d y[NUM];\n-  double d[NUM * 2];\n-} dst, res, src1, src2, src3;\n-\n-\n-/* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n-   product is not rounded, only the addition is rounded. */\n-\n-static void\n-init_maccps ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.f[i] = i;\n-      src2.f[i] = i + 10;\n-      src3.f[i] = i + 20;\n-    }\n-}\n-\n-static void\n-init_maccpd ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.d[i] = i;\n-      src2.d[i] = i + 10;\n-      src3.d[i] = i + 20;\n-    }\n-}\n-\n-static int\n-check_maccps ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    for (j = 0; j < 4; j++)\n-      {\n-\tres.f[i + j] = (src1.f[i + j] * src2.f[i + j]) + src3.f[i + j];\n-\tif (dst.f[i + j] != res.f[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-static int\n-check_maccpd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    for (j = 0; j < 2; j++)\n-      {\n-\tres.d[i + j] = (src1.d[i + j] * src2.d[i + j]) + src3.d[i + j];\n-\tif (dst.d[i + j] != res.d[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-\n-static int\n-check_maccss ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i= i + 4)\n-    {\n-      res.f[i] = (src1.f[i] * src2.f[i]) + src3.f[i];\n-      if (dst.f[i] != res.f[i]) \n-\tcheck_fails++;\n-    }\t\n-  return check_fails++;\n-}\n-\n-static int\n-check_maccsd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    {\n-      res.d[i] = (src1.d[i] * src2.d[i]) + src3.d[i];\n-      if (dst.d[i] != res.d[i]) \n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check maccps */\n-  init_maccps ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_macc_ps (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_maccps ()) \n-    abort ();\n-  \n-  /* check maccss */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_macc_ss (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_maccss ()) \n-    abort ();\n-  \n-  /* Check maccpd */\n-  init_maccpd ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_macc_pd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_maccpd ()) \n-    abort ();\n-  \n-  /* Check maccps */\n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_macc_sd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_maccsd ()) \n-    abort ();\n-  \n-}"}, {"sha": "22c34c7fdd807dff6038e8d16f355f83b41a33f3", "filename": "gcc/testsuite/gcc.target/i386/sse5-msubXX.c", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-msubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-msubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-msubXX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,139 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 20\n-\n-union\n-{\n-  __m128 x[NUM];\n-  float f[NUM * 4];\n-  __m128d y[NUM];\n-  double d[NUM * 2];\n-} dst, res, src1, src2, src3;\n-\n-/* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n-   product is not rounded, only the addition is rounded. */\n-\n-static void\n-init_msubps ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.f[i] = i;\n-      src2.f[i] = i + 10;\n-      src3.f[i] = i + 20;\n-    }\n-}\n-\n-static void\n-init_msubpd ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.d[i] = i;\n-      src2.d[i] = i + 10;\n-      src3.d[i] = i + 20;\n-    }\n-}\n-\n-static int\n-check_msubps ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    for (j = 0; j < 4; j++)\n-      {\n-\tres.f[i + j] = (src1.f[i + j] * src2.f[i + j]) - src3.f[i + j];\n-\tif (dst.f[i + j] != res.f[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-static int\n-check_msubpd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    for (j = 0; j < 2; j++)\n-      {\n-\tres.d[i + j] = (src1.d[i + j] * src2.d[i + j]) - src3.d[i + j];\n-\tif (dst.d[i + j] != res.d[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-\n-static int\n-check_msubss ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    {\n-      res.f[i] = (src1.f[i] * src2.f[i]) - src3.f[i];\n-      if (dst.f[i] != res.f[i]) \n-\tcheck_fails++;\n-    }\t\n-  return check_fails++;\n-}\n-\n-static int\n-check_msubsd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    {\n-      res.d[i] = (src1.d[i] * src2.d[i]) - src3.d[i];\n-      if (dst.d[i] != res.d[i]) \n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check msubps */\n-  init_msubps ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_msub_ps (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_msubps ()) \n-    abort ();\n-  \n-  /* check msubss */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_msub_ss (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_msubss ()) \n-    abort ();\n-  \n-  /* Check msubpd */\n-  init_msubpd ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_msub_pd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_msubpd ()) \n-    abort ();\n-  \n-  /* Check msubps */\n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_msub_sd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_msubsd ()) \n-    abort ();\n-  \n-}"}, {"sha": "0614977365137fdf9b7389bd4e77c47adca0df2d", "filename": "gcc/testsuite/gcc.target/i386/sse5-nmaccXX.c", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmaccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmaccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmaccXX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,139 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 20\n-\n-union\n-{\n-  __m128 x[NUM];\n-  float f[NUM * 4];\n-  __m128d y[NUM];\n-  double d[NUM * 2];\n-} dst, res, src1, src2, src3;\n-\n-/* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n-   product is not rounded, only the addition is rounded. */\n-\n-static void\n-init_nmaccps ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.f[i] = i;\n-      src2.f[i] = i + 10;\n-      src3.f[i] = i + 20;\n-    }\n-}\n-\n-static void\n-init_nmaccpd ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.d[i] = i;\n-      src2.d[i] = i + 10;\n-      src3.d[i] = i + 20;\n-    }\n-}\n-\n-static int\n-check_nmaccps ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    for (j = 0; j < 4; j++)\n-      {\n-\tres.f[i + j] = - (src1.f[i + j] * src2.f[i + j]) + src3.f[i + j];\n-\tif (dst.f[i + j] != res.f[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-static int\n-check_nmaccpd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    for (j = 0; j < 2; j++)\n-      {\n-\tres.d[i + j] = - (src1.d[i + j] * src2.d[i + j]) + src3.d[i + j];\n-\tif (dst.d[i + j] != res.d[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-\n-static int\n-check_nmaccss ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    {\n-      res.f[i] = - (src1.f[i] * src2.f[i]) + src3.f[i];\n-      if (dst.f[i] != res.f[i]) \n-\tcheck_fails++;\n-    }\t\n-  return check_fails++;\n-}\n-\n-static int\n-check_nmaccsd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    {\n-      res.d[i] = - (src1.d[i] * src2.d[i]) + src3.d[i];\n-      if (dst.d[i] != res.d[i]) \n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check nmaccps */\n-  init_nmaccps ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_nmacc_ps (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_nmaccps ()) \n-    abort ();\n-  \n-  /* check nmaccss */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_nmacc_ss (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_nmaccss ()) \n-    abort ();\n-  \n-  /* Check nmaccpd */\n-  init_nmaccpd ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_nmacc_pd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_nmaccpd ()) \n-    abort ();\n-  \n-  /* Check nmaccps */\n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_nmacc_sd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_nmaccsd ()) \n-    abort ();\n-  \n-}"}, {"sha": "b22684c6a5d115f586304037cefd7d7a610a9c10", "filename": "gcc/testsuite/gcc.target/i386/sse5-nmsubXX.c", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-nmsubXX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,139 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-#define NUM 20\n-\n-union\n-{\n-  __m128 x[NUM];\n-  float f[NUM * 4];\n-  __m128d y[NUM];\n-  double d[NUM * 2];\n-} dst, res, src1, src2, src3;\n-\n-/* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n-   product is not rounded, only the addition is rounded. */\n-\n-static void\n-init_nmsubps ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.f[i] = i;\n-      src2.f[i] = i + 10;\n-      src3.f[i] = i + 20;\n-    }\n-}\n-\n-static void\n-init_nmsubpd ()\n-{\n-  int i;\n-  for (i = 0; i < NUM * 4; i++)\n-    {\n-      src1.d[i] = i;\n-      src2.d[i] = i + 10;\n-      src3.d[i] = i + 20;\n-    }\n-}\n-\n-static int\n-check_nmsubps ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    for (j = 0; j < 4; j++)\n-      {\n-\tres.f[i + j] = - (src1.f[i + j] * src2.f[i + j]) - src3.f[i + j];\n-\tif (dst.f[i + j] != res.f[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-static int\n-check_nmsubpd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    for (j = 0; j < 2; j++)\n-      {\n-\tres.d[i + j] = - (src1.d[i + j] * src2.d[i + j]) - src3.d[i + j];\n-\tif (dst.d[i + j] != res.d[i + j]) \n-\t  check_fails++;\n-      }\n-  return check_fails++;\n-}\n-\n-\n-static int\n-check_nmsubss ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 4; i = i + 4)\n-    {\n-      res.f[i] = - (src1.f[i] * src2.f[i]) - src3.f[i];\n-      if (dst.f[i] != res.f[i]) \n-\tcheck_fails++;\n-    }\t\n-  return check_fails++;\n-}\n-\n-static int\n-check_nmsubsd ()\n-{\n-  int i, j, check_fails = 0;\n-  for (i = 0; i < NUM * 2; i = i + 2)\n-    {\n-      res.d[i] = - (src1.d[i] * src2.d[i]) - src3.d[i];\n-      if (dst.d[i] != res.d[i]) \n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  \n-  /* Check nmsubps */\n-  init_nmsubps ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_nmsub_ps (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_nmsubps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4], &src3.f[i * 4])) \n-    abort ();\n-  \n-  /* check nmsubss */\n-  for (i = 0; i < NUM; i++)\n-    dst.x[i] = _mm_nmsub_ss (src1.x[i], src2.x[i], src3.x[i]);\n-  \n-  if (check_nmsubss (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4], &src3.f[i * 4])) \n-    abort ();\n-  \n-  /* Check nmsubpd */\n-  init_nmsubpd ();\n-  \n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_nmsub_pd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_nmsubpd (&dst.y[i], &src1.d[i * 2], &src2.d[i * 2], &src3.d[i * 2])) \n-    abort ();\n-  \n-  /* Check nmsubps */\n-  for (i = 0; i < NUM; i++)\n-    dst.y[i] = _mm_nmsub_sd (src1.y[i], src2.y[i], src3.y[i]);\n-  \n-  if (check_nmsubsd (&dst.y[i], &src1.d[i * 2], &src2.d[i * 2], &src3.d[i * 2])) \n-    abort ();\n-  \n-}"}, {"sha": "f83b06b3392d6bb4c0c4500118d1dd48920d1515", "filename": "gcc/testsuite/gcc.target/i386/sse5-pcmov.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,23 +0,0 @@\n-/* Test that the compiler properly optimizes conditional floating point moves\n-   into the pcmov instruction on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-extern void exit (int);\n-\n-double dbl_test (double a, double b, double c, double d)\n-{\n-  return (a > b) ? c : d;\n-}\n-\n-double dbl_a = 1, dbl_b = 2, dbl_c = 3, dbl_d = 4, dbl_e;\n-\n-int main()\n-{\n-  dbl_e = dbl_test (dbl_a, dbl_b, dbl_c, dbl_d);\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pcmov\" } } */"}, {"sha": "6b174d66631bfa7fc27517c8a8cb164f0896769b", "filename": "gcc/testsuite/gcc.target/i386/sse5-pcmov2.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-pcmov2.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,23 +0,0 @@\n-/* Test that the compiler properly optimizes conditional floating point moves\n-   into the pcmov instruction on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-extern void exit (int);\n-\n-float flt_test (float a, float b, float c, float d)\n-{\n-  return (a > b) ? c : d;\n-}\n-\n-float flt_a = 1, flt_b = 2, flt_c = 3, flt_d = 4, flt_e;\n-\n-int main()\n-{\n-  flt_e = flt_test (flt_a, flt_b, flt_c, flt_d);\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pcmov\" } } */"}, {"sha": "cae30772531ac50e89b33f1ac57e854dfc8ff813", "filename": "gcc/testsuite/gcc.target/i386/sse5-permpX.c", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-permpX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-permpX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-permpX.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,120 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target sse5 } */\n-/* { dg-options \"-O2 -msse5\" } */\n-\n-#include \"sse5-check.h\"\n-\n-#include <bmmintrin.h>\n-#include <string.h>\n-\n-union\n-{\n-  __m128 x[2];\n-  __m128d y[2];\n-  __m128i z[2];\n-  float f[8];\n-  double d[4];\n-  int i[8];\n-  long li[4];\n-} dst, res, src1, src2, src3;\n-\n-\n-static void\n-init_ddata ()\n-{\n-  int i;\n-  for (i = 0; i < 4; i++)\n-    {\n-      src1.d[i] = i;\n-      src2.d[i] = i + 2;\n-    }\n- \n-  src3.li[0] = 3;\n-  src3.li[1] = 0;\n-  src3.li[2] = 1;\n-  src3.li[3] = 2;\n-\n-  res.d[0] = 3.0;\n-  res.d[1] = 0.0;\n-  res.d[2] = 3.0;\n-  res.d[3] = 4.0;\n-}\n-\n-\n-static void \n-init_fdata ()\n-{\n-  int i;\n-  for (i = 0; i < 8; i++)\n-    {\n-      src1.f[i] = i;\n-      src2.f[i] = i + 2;\n-    }\n-\n-  src3.i[0] = 7;\n-  src3.i[1] = 5;\n-  src3.i[2] = 1;\n-  src3.i[3] = 2;\n-  src3.i[4] = 0;\n-  src3.i[5] = 4;\n-  src3.i[6] = 3;\n-  src3.i[7] = 6; \n-\n-  res.f[0] = 5.0;\n-  res.f[1] = 3.0;\n-  res.f[2] = 1.0;\n-  res.f[3] = 2.0;\n-  res.f[4] = 4.0;\n-  res.f[5] = 6.0;\n-  res.f[6] = 7.0;\n-  res.f[7] = 8.0;\n-}\n-\n-static int\n-check_permpd ()\n-{\n-  int i, check_fails = 0;\n-\n-  for (i = 0; i < 4; i++)\n-    {\n-      if (res.d[i] != dst.d[i])\n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static int\n-check_permps ()\n-{\n-  int i, check_fails = 0;\n-\n-  for (i = 0; i < 8; i++)\n-    {\n-      if (res.f[i] != dst.f[i])\n-\tcheck_fails++;\n-    }\n-  return check_fails++;\n-}\n-\n-static void\n-sse5_test (void)\n-{\n-  int i;\n-  init_ddata();\n-\n-  for (i = 0; i < 2; i++)\n-    dst.y[i] = _mm_perm_pd (src1.y[i], src2.y[i], src3.z[i]);\n-  \n-  if (check_permpd ())\n-    abort ();\n-  \n-  init_fdata();\n-  \n-  for (i = 0; i < 2; i++)\n-    dst.x[i] = _mm_perm_ps (src1.x[i], src2.x[i], src3.z[i]);\n-   \n-  if (check_permps ())\n-    abort (); \n-}\n-\n-"}, {"sha": "0db9b9f790a0400e697043aadc638fe11a560ce2", "filename": "gcc/testsuite/gcc.target/i386/sse5-rotate1-vector.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate1-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate1-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate1-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,35 +0,0 @@\n-/* Test that the compiler properly optimizes vector rotate instructions vector\n-   into prot on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-left_rotate32 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.u32[i] = (b.u32[i] << ((sizeof (int) * 8) - 4)) | (b.u32[i] >> 4);\n-}\n-\n-int\n-main ()\n-{\n-  left_rotate32 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"protd\" } } */"}, {"sha": "4ea762a208ee79ec0fab3fb3fb12d33f3c4799f6", "filename": "gcc/testsuite/gcc.target/i386/sse5-rotate2-vector.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate2-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate2-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate2-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,35 +0,0 @@\n-/* Test that the compiler properly optimizes vector rotate instructions vector\n-   into prot on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-right_rotate32_b (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.u32[i] = (b.u32[i] >> ((sizeof (int) * 8) - 4)) | (b.u32[i] << 4);\n-}\n-\n-int\n-main ()\n-{\n-  right_rotate ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"prot\" } } */"}, {"sha": "de7272439ab44f5a21d08b731faf08c9a81ec026", "filename": "gcc/testsuite/gcc.target/i386/sse5-rotate3-vector.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate3-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate3-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-rotate3-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,34 +0,0 @@\n-/* Test that the compiler properly optimizes vector rotate instructions vector\n-   into prot on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-vector_rotate32 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.u32[i] = (b.u32[i] >> ((sizeof (int) * 8) - c.u32[i])) | (b.u32[i] << c.u32[i]);\n-}\n-\n-int main ()\n-{\n-  vector_rotate32 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"protd\" } } */"}, {"sha": "c1ce023263cf246c3c72ce362f8adc6d642ddf4c", "filename": "gcc/testsuite/gcc.target/i386/sse5-shift1-vector.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift1-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift1-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift1-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,35 +0,0 @@\n-/* Test that the compiler properly optimizes vector shift instructions into\n-   psha/pshl on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  int i32[SIZE];\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-left_shift32 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.i32[i] = b.i32[i] << c.i32[i];\n-}\n-\n-int main ()\n-{\n-  left_shfit32 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pshad\" } } */"}, {"sha": "c0d97bc3d4aba1159c2ada02d4918599c2b2fc91", "filename": "gcc/testsuite/gcc.target/i386/sse5-shift2-vector.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift2-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift2-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift2-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,35 +0,0 @@\n-/* Test that the compiler properly optimizes vector shift instructions into\n-   psha/pshl on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  int i32[SIZE];\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-right_sign_shift32 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.i32[i] = b.i32[i] >> c.i32[i];\n-}\n-\n-int main ()\n-{\n-  right_sign_shfit32 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pshad\" } } */"}, {"sha": "0027457e384c42dff7ef77a38728baa923123164", "filename": "gcc/testsuite/gcc.target/i386/sse5-shift3-vector.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift3-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027c625ced58b2e001f32c2622de1c75533ac661/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift3-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse5-shift3-vector.c?ref=027c625ced58b2e001f32c2622de1c75533ac661", "patch": "@@ -1,35 +0,0 @@\n-/* Test that the compiler properly optimizes vector shift instructions into\n-   psha/pshl on SSE5 systems.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -msse5 -ftree-vectorize\" } */\n-\n-extern void exit (int);\n-\n-typedef long __m128i  __attribute__ ((__vector_size__ (16), __may_alias__));\n-\n-#define SIZE 10240\n-\n-union {\n-  __m128i i_align;\n-  int i32[SIZE];\n-  unsigned u32[SIZE];\n-} a, b, c;\n-\n-void\n-right_uns_shift32 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < SIZE; i++)\n-    a.u32[i] = b.u32[i] >> c.i32[i];\n-}\n-\n-int main ()\n-{\n-  right_uns_shfit32 ();\n-  exit (0);\n-}\n-\n-/* { dg-final { scan-assembler \"pshld\" } } */"}, {"sha": "fdca662045bd89523e54fbf7e43a277f27bc90cd", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -2296,6 +2296,7 @@ remove_bb (basic_block bb)\n \t      if (gimple_in_ssa_p (cfun))\n \t\trelease_defs (stmt);\n \n+\t      unlink_stmt_vdef (stmt);\n \t      gsi_remove (&i, true);\n \t    }\n "}]}