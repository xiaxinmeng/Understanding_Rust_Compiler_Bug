{"sha": "003241bcaed0c6864d5dcc3ac101d3608f751fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzMjQxYmNhZWQwYzY4NjRkNWRjYzNhYzEwMWQzNjA4Zjc1MWZiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-12T09:38:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:01Z"}, "message": "[Ada] Small cleanup in the Expand_Image_Attribute procedure\n\ngcc/ada/\n\n\t* exp_imgv.adb (Is_User_Defined_Enumeration_Type): Delete.\n\t(Expand_Image_Attribute): Move inline expansion into normal flow of\n\tcontrol, move down declarations and remove superfluous processing.", "tree": {"sha": "1f41b76779417a30281cfcecaf72d04805486558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f41b76779417a30281cfcecaf72d04805486558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/003241bcaed0c6864d5dcc3ac101d3608f751fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003241bcaed0c6864d5dcc3ac101d3608f751fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003241bcaed0c6864d5dcc3ac101d3608f751fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003241bcaed0c6864d5dcc3ac101d3608f751fbc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c9f315a98df706275a23d46d0539294ff715edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9f315a98df706275a23d46d0539294ff715edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9f315a98df706275a23d46d0539294ff715edc"}], "stats": {"total": 121, "additions": 41, "deletions": 80}, "files": [{"sha": "c8d038411f0e48324b90c7038864ab201a46ad6e", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 41, "deletions": 80, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003241bcaed0c6864d5dcc3ac101d3608f751fbc/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003241bcaed0c6864d5dcc3ac101d3608f751fbc/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=003241bcaed0c6864d5dcc3ac101d3608f751fbc", "patch": "@@ -761,10 +761,6 @@ package body Exp_Imgv is\n       --  Expand attribute 'Image in user-defined enumeration types, avoiding\n       --  string copy.\n \n-      function Is_User_Defined_Enumeration_Type\n-        (Typ : Entity_Id) return Boolean;\n-      --  Return True if Typ is a user-defined enumeration type\n-\n       -----------------------------------\n       -- Expand_Standard_Boolean_Image --\n       -----------------------------------\n@@ -837,7 +833,7 @@ package body Exp_Imgv is\n              Name                =>\n                Make_If_Expression (Loc,\n                  Expressions => New_List (\n-                   Relocate_Node (Expr),\n+                   Duplicate_Subexpr (Expr),\n                    New_Occurrence_Of (T_Id, Loc),\n                    New_Occurrence_Of (F_Id, Loc)))));\n \n@@ -1005,20 +1001,6 @@ package body Exp_Imgv is\n          Analyze_And_Resolve (N, Standard_String);\n       end Expand_User_Defined_Enumeration_Image;\n \n-      --------------------------------------\n-      -- Is_User_Defined_Enumeration_Type --\n-      --------------------------------------\n-\n-      function Is_User_Defined_Enumeration_Type\n-        (Typ : Entity_Id) return Boolean is\n-      begin\n-         return Ekind (Typ) = E_Enumeration_Type\n-           and then Typ /= Standard_Boolean\n-           and then Typ /= Standard_Character\n-           and then Typ /= Standard_Wide_Character\n-           and then Typ /= Standard_Wide_Wide_Character;\n-      end Is_User_Defined_Enumeration_Type;\n-\n       --  Local variables\n \n       Enum_Case : Boolean;\n@@ -1060,46 +1042,6 @@ package body Exp_Imgv is\n          Rtyp := Underlying_Type (Base_Type (Ptyp));\n       end if;\n \n-      --  Use inline expansion for user-defined enumeration types for which\n-      --  the literal string entity has been built, and if -gnatd_x is not\n-      --  passed to the compiler. Otherwise the attribute will be expanded\n-      --  into a call to a routine in the runtime.\n-\n-      if Is_User_Defined_Enumeration_Type (Rtyp)\n-        and then Present (Lit_Strings (Rtyp))\n-        and then not Debug_Flag_Underscore_X\n-      then\n-         Expand_User_Defined_Enumeration_Image (Rtyp);\n-         return;\n-      end if;\n-\n-      --  Build declarations of Snn and Pnn to be inserted\n-\n-      Ins_List := New_List (\n-\n-         --  Snn : String (1 .. typ'Width);\n-\n-         Make_Object_Declaration (Loc,\n-            Defining_Identifier => Snn,\n-            Object_Definition   =>\n-              Make_Subtype_Indication (Loc,\n-                Subtype_Mark => New_Occurrence_Of (Standard_String, Loc),\n-                Constraint   =>\n-                  Make_Index_Or_Discriminant_Constraint (Loc,\n-                    Constraints => New_List (\n-                      Make_Range (Loc,\n-                        Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                        High_Bound =>\n-                          Make_Attribute_Reference (Loc,\n-                            Prefix         => New_Occurrence_Of (Rtyp, Loc),\n-                            Attribute_Name => Name_Width)))))),\n-\n-         --  Pnn : Natural;\n-\n-         Make_Object_Declaration (Loc,\n-           Defining_Identifier => Pnn,\n-           Object_Definition   => New_Occurrence_Of (Standard_Natural, Loc)));\n-\n       --  Set Imid (RE_Id of procedure to call), and Tent, target for the\n       --  type conversion of the first argument for all possibilities.\n \n@@ -1266,9 +1208,14 @@ package body Exp_Imgv is\n             Analyze_And_Resolve (N, Standard_String);\n             return;\n \n-         else\n-            --  Here for enumeration type case\n+         --  Use inline expansion if the -gnatd_x switch is not passed to the\n+         --  compiler. Otherwise expand into a call to the runtime.\n+\n+         elsif not Debug_Flag_Underscore_X then\n+            Expand_User_Defined_Enumeration_Image (Rtyp);\n+            return;\n \n+         else\n             Ttyp := Component_Type (Etype (Lit_Indexes (Rtyp)));\n \n             if Ttyp = Standard_Integer_8 then\n@@ -1295,25 +1242,11 @@ package body Exp_Imgv is\n       --  Build first argument for call\n \n       if Enum_Case then\n-         declare\n-            T : Entity_Id;\n-         begin\n-            --  In Ada 2020 we need the underlying type here, because 'Image is\n-            --  allowed on private types. We have already checked the version\n-            --  when resolving the attribute.\n-\n-            if Is_Private_Type (Ptyp) then\n-               T := Rtyp;\n-            else\n-               T := Ptyp;\n-            end if;\n-\n-            Arg_List := New_List (\n-              Make_Attribute_Reference (Loc,\n-                Attribute_Name => Name_Pos,\n-                Prefix         => New_Occurrence_Of (T, Loc),\n-                Expressions    => New_List (Expr)));\n-         end;\n+         Arg_List := New_List (\n+           Make_Attribute_Reference (Loc,\n+             Attribute_Name => Name_Pos,\n+             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n+             Expressions    => New_List (Expr)));\n \n       --  AI12-0020: Ada 2020 allows 'Image for all types, including private\n       --  types. If the full type is not a fixed-point type, then it is enough\n@@ -1325,6 +1258,7 @@ package body Exp_Imgv is\n       else\n          declare\n             Conv : Node_Id;\n+\n          begin\n             if Is_Private_Type (Etype (Expr)) then\n                if Is_Fixed_Point_Type (Rtyp) then\n@@ -1340,6 +1274,33 @@ package body Exp_Imgv is\n          end;\n       end if;\n \n+      --  Build declarations of Snn and Pnn to be inserted\n+\n+      Ins_List := New_List (\n+\n+         --  Snn : String (1 .. typ'Width);\n+\n+         Make_Object_Declaration (Loc,\n+            Defining_Identifier => Snn,\n+            Object_Definition   =>\n+              Make_Subtype_Indication (Loc,\n+                Subtype_Mark => New_Occurrence_Of (Standard_String, Loc),\n+                Constraint   =>\n+                  Make_Index_Or_Discriminant_Constraint (Loc,\n+                    Constraints => New_List (\n+                      Make_Range (Loc,\n+                        Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                        High_Bound =>\n+                          Make_Attribute_Reference (Loc,\n+                            Prefix         => New_Occurrence_Of (Rtyp, Loc),\n+                            Attribute_Name => Name_Width)))))),\n+\n+         --  Pnn : Natural;\n+\n+         Make_Object_Declaration (Loc,\n+           Defining_Identifier => Pnn,\n+           Object_Definition   => New_Occurrence_Of (Standard_Natural, Loc)));\n+\n       --  Append Snn, Pnn arguments\n \n       Append_To (Arg_List, New_Occurrence_Of (Snn, Loc));"}]}