{"sha": "74e6f14adb7057b29d361cc35c76f16663d1e649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlNmYxNGFkYjcwNTdiMjlkMzYxY2MzNWM3NmYxNjY2M2QxZTY0OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-08T15:37:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-08T15:37:43Z"}, "message": "runtime: get missing function name from symbol table\n    \n    If we trace back through code that has no debug info, as when calling\n    through C code compiled with -g0, we won't have a function name.\n    Try to fetch the function name using the symbol table.\n    \n    Adding the test case revealed that gotest failed to use the gccgo tag\n    when matching files, so add that.\n    \n    Reviewed-on: https://go-review.googlesource.com/92756\n\nFrom-SVN: r257495", "tree": {"sha": "f26b729ad50f3c18a319ff63f115f7eeb5c01eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26b729ad50f3c18a319ff63f115f7eeb5c01eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e6f14adb7057b29d361cc35c76f16663d1e649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6f14adb7057b29d361cc35c76f16663d1e649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e6f14adb7057b29d361cc35c76f16663d1e649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6f14adb7057b29d361cc35c76f16663d1e649/comments", "author": null, "committer": null, "parents": [{"sha": "080eaf7a88ee8039b6acf6c10394db18e9f34615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080eaf7a88ee8039b6acf6c10394db18e9f34615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080eaf7a88ee8039b6acf6c10394db18e9f34615"}], "stats": {"total": 219, "additions": 212, "deletions": 7}, "files": [{"sha": "edffc11eec10ea7e0db437567fbe9c6ef7c7cd60", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -1,4 +1,4 @@\n-2aa95f1499cf931ef8e95c7958463829276a0f2c\n+7e94bac5676afc8188677c98ecb263c78c1a7f8d\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c216e542ce88297e9822c3e251fc3469ea17e7ee", "filename": "libgo/go/runtime/crash_gccgo_test.go", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Fcrash_gccgo_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Fcrash_gccgo_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fcrash_gccgo_test.go?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build cgo,gccgo\n+\n+package runtime_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"internal/testenv\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"strings\"\n+\t\"testing\"\n+)\n+\n+func TestGccgoCrashTraceback(t *testing.T) {\n+\tt.Parallel()\n+\tgot := runTestProg(t, \"testprogcgo\", \"CrashTracebackGccgo\")\n+\tok := true\n+\tfor i := 1; i <= 3; i++ {\n+\t\tif !strings.Contains(got, fmt.Sprintf(\"CFunction%d\", i)) {\n+\t\t\tt.Errorf(\"missing C function CFunction%d\", i)\n+\t\t\tok = false\n+\t\t}\n+\t}\n+\tif !ok {\n+\t\tt.Log(got)\n+\t}\n+}\n+\n+func TestGccgoCrashTracebackNodebug(t *testing.T) {\n+\ttestenv.MustHaveGoBuild(t)\n+\tif os.Getenv(\"CC\") == \"\" {\n+\t\tt.Skip(\"no compiler in environment\")\n+\t}\n+\n+\tcc := strings.Fields(os.Getenv(\"CC\"))\n+\tcc = append(cc, \"-x\", \"c++\", \"-\")\n+\tout, _ := exec.Command(cc[0], cc[1:]...).CombinedOutput()\n+\tif bytes.Contains(out, []byte(\"error trying to exec 'cc1plus'\")) {\n+\t\tt.Skip(\"no C++ compiler\")\n+\t}\n+\tos.Setenv(\"CXX\", os.Getenv(\"CC\"))\n+\n+\tgot := runTestProg(t, \"testprogcxx\", \"CrashTracebackNodebug\")\n+\tok := true\n+\tfor i := 1; i <= 3; i++ {\n+\t\tif !strings.Contains(got, fmt.Sprintf(\"cxxFunction%d\", i)) {\n+\t\t\tt.Errorf(\"missing C++ function cxxFunction%d\", i)\n+\t\t\tok = false\n+\t\t}\n+\t}\n+\tif !ok {\n+\t\tt.Log(got)\n+\t}\n+}"}, {"sha": "83357fdd5d987357771b5bf45ab3223ad9c3ebcc", "filename": "libgo/go/runtime/testdata/testprogcgo/traceback_gccgo.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftraceback_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftraceback_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftraceback_gccgo.go?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build gccgo\n+\n+package main\n+\n+// This program will crash.\n+// We want the stack trace to include the C functions.\n+\n+/*\n+#cgo CFLAGS: -g -O0\n+\n+#include <stdint.h>\n+\n+char *p;\n+\n+static int CFunction3(void) {\n+\t*p = 0;\n+\treturn 0;\n+}\n+\n+static int CFunction2(void) {\n+\treturn CFunction3();\n+}\n+\n+static int CFunction1(void) {\n+\treturn CFunction2();\n+}\n+*/\n+import \"C\"\n+\n+func init() {\n+\tregister(\"CrashTracebackGccgo\", CrashTracebackGccgo)\n+}\n+\n+func CrashTracebackGccgo() {\n+\tC.CFunction1()\n+}"}, {"sha": "0ecab1079c622be356d239a5706c0e7d22ccc0ab", "filename": "libgo/go/runtime/testdata/testprogcxx/main.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Fmain.go?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+\n+var cmds = map[string]func(){}\n+\n+func register(name string, f func()) {\n+\tif cmds[name] != nil {\n+\t\tpanic(\"duplicate registration: \" + name)\n+\t}\n+\tcmds[name] = f\n+}\n+\n+func registerInit(name string, f func()) {\n+\tif len(os.Args) >= 2 && os.Args[1] == name {\n+\t\tf()\n+\t}\n+}\n+\n+func main() {\n+\tif len(os.Args) < 2 {\n+\t\tprintln(\"usage: \" + os.Args[0] + \" name-of-test\")\n+\t\treturn\n+\t}\n+\tf := cmds[os.Args[1]]\n+\tif f == nil {\n+\t\tprintln(\"unknown function: \" + os.Args[1])\n+\t\treturn\n+\t}\n+\tf()\n+}"}, {"sha": "d4bd26cf7682a5f4496b8fea6cf7f8881f2cb96f", "filename": "libgo/go/runtime/testdata/testprogcxx/traceback.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.cc?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+char *p;\n+\n+static int cxxFunction3() {\n+\t*p = 0;\n+\treturn 0;\n+}\n+\n+static int cxxFunction2() {\n+\treturn cxxFunction3();\n+}\n+\n+extern \"C\"\n+int cxxFunction1() {\n+\treturn cxxFunction2();\n+}"}, {"sha": "0e40ca8ffbb8b1a209ffc99136b4ad366bdbca23", "filename": "libgo/go/runtime/testdata/testprogcxx/traceback.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcxx%2Ftraceback.go?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// This program will crash.\n+// We want the stack trace to include the C++ functions,\n+// even though we compile with -g0.\n+\n+/*\n+#cgo CXXFLAGS: -g0 -O0\n+\n+extern int cxxFunction1(void);\n+*/\n+import \"C\"\n+\n+func init() {\n+\tregister(\"CrashTracebackNodebug\", CrashTracebackNodebug)\n+}\n+\n+func CrashTracebackNodebug() {\n+\tC.cxxFunction1()\n+}"}, {"sha": "590315376e379acc6acabb7ad805cafdb3f6c916", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -143,6 +143,20 @@ callback (void *data, uintptr_t pc, const char *filename, int lineno,\n   return arg->index >= arg->max;\n }\n \n+/* Syminfo callback.  */\n+\n+static void\n+syminfo_fnname_callback (void *data, uintptr_t pc __attribute__ ((unused)),\n+\t\t\t const char *symname,\n+\t\t\t uintptr_t address __attribute__ ((unused)),\n+\t\t\t uintptr_t size __attribute__ ((unused)))\n+{\n+  Location* locptr = (Location*) data;\n+\n+  if (symname != NULL)\n+    locptr->function = runtime_gostringnocopy ((const byte *) symname);\n+}\n+\n /* Error callback.  */\n \n static void\n@@ -179,15 +193,17 @@ int32\n runtime_callers (int32 skip, Location *locbuf, int32 m, bool keep_thunks)\n {\n   struct callers_data data;\n+  struct backtrace_state* state;\n+  int32 i;\n \n   data.locbuf = locbuf;\n   data.skip = skip + 1;\n   data.index = 0;\n   data.max = m;\n   data.keep_thunks = keep_thunks;\n+  state = __go_get_backtrace_state ();\n   runtime_xadd (&runtime_in_callers, 1);\n-  backtrace_full (__go_get_backtrace_state (), 0, callback, error_callback,\n-\t\t  &data);\n+  backtrace_full (state, 0, callback, error_callback, &data);\n   runtime_xadd (&runtime_in_callers, -1);\n \n   /* For some reason GCC sometimes loses the name of a thunk function\n@@ -204,6 +220,18 @@ runtime_callers (int32 skip, Location *locbuf, int32 m, bool keep_thunks)\n       --data.index;\n     }\n \n+  /* Try to use backtrace_syminfo to fill in any missing function\n+     names.  This can happen when tracing through an object which has\n+     no debug info; backtrace_syminfo will look at the symbol table to\n+     get the name.  This should only happen when tracing through code\n+     that is not written in Go and is not part of libgo.  */\n+  for (i = 0; i < data.index; ++i)\n+    {\n+      if (locbuf[i].function.len == 0 && locbuf[i].pc != 0)\n+\tbacktrace_syminfo (state, locbuf[i].pc, syminfo_fnname_callback,\n+\t\t\t   error_callback, &locbuf[i]);\n+    }\n+\n   return data.index;\n }\n "}, {"sha": "f978042cccc6b300ab2f3263379306f9af8b8aba", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e6f14adb7057b29d361cc35c76f16663d1e649/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=74e6f14adb7057b29d361cc35c76f16663d1e649", "patch": "@@ -348,18 +348,18 @@ x)\n \t\t\tfi\n \t\t\tmatch=false\n \t\t\t;;\n-\t\t    $goos | $goarch | cgo | go1.[0-9])\n+\t\t    $goos | $goarch | cgo | gccgo | go1.[0-9])\n \t\t\tmatch=true\n \t\t\t;;\n-\t\t    \"!\"$goos | \"!\"$goarch | \"!cgo\" | \"!\"go1.[0-9])\n+\t\t    \"!\"$goos | \"!\"$goarch | \"!cgo\" | \"!gccgo\" | \"!\"go1.[0-9])\n \t\t\t;;\n \t\t    *,*)\n \t\t\tcmatch=true\n \t\t\tfor ctag in `echo $tag | sed -e 's/,/ /g'`; do\n \t\t\t    case $ctag in\n-\t\t\t    $goos | $goarch | cgo | go1.[0-9])\n+\t\t\t    $goos | $goarch | cgo | gccgo | go1.[0-9])\n \t\t\t\t;;\n-\t\t\t    \"!\"$goos | \"!\"$goarch | \"!cgo\" | \"!\"go1.[0-9])\n+\t\t\t    \"!\"$goos | \"!\"$goarch | \"!cgo\" | \"!gccgo\" | \"!\"go1.[0-9])\n \t\t\t\tcmatch=false\n \t\t\t\t;;\n \t\t\t    \"!\"*)"}]}