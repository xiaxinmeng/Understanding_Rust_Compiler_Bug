{"sha": "e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzMzlkMGYzMzI4ZTNiYWUyMWU0NjBkZGU4MWJhNGJkY2ZjZDk1OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-29T14:49:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-29T14:49:14Z"}, "message": "optc-gen.awk: Generate global_options initializer instead of individual variables.\n\ngcc:\n\t* optc-gen.awk: Generate global_options initializer instead of\n\tindividual variables.  Add x_ prefix to names of structure\n\tmembers.\n\t* opth-gen.awk: Generate gcc_options structure.  Add x_ prefix to\n\tnames of structure members.\n\t* doc/tm.texi.in (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n\tHARD_FRAME_POINTER_IS_ARG_POINTER): Document.\n\t* doc/tm.texi: Regenerate.\n\t* alias.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n\t* builtins.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER.\n\t* c-parser.c (disable_extension_diagnostics,\n\trestore_extension_diagnostics): Update names of cpp_options\n\tmembers.\n\t* combine.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n\t* common.opt (fcompare-debug-second): Don't use Var.\n\t* config/alpha/alpha.h (target_flags): Remove.\n\t* config/arm/arm.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define.\n\t* config/bfin/bfin.h (target_flags): Remove.\n\t* config/cris/cris.h (target_flags): Remove.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Update names of\n\tcl_target_option members.\n\t* config/i386/i386.c (ix86_force_align_arg_pointer): Remove.\n\t(ix86_function_specific_print, ix86_valid_target_attribute_tree,\n\tix86_can_inline_p): Update names of cl_target_option members.\n\t* config/i386/i386.h (ix86_isa_flags): Remove.\n\t* config/lm32/lm32.h (target_flags): Remove.\n\t* config/mcore/mcore.h (mcore_stack_increment): Remove.\n\t* config/mcore/mcore.md (addsi3): Remove extern declaration of\n\tflag_omit_frame_pointer.\n\t* config/mep/mep.h (target_flags): Remove.\n\t* config/mips/mips.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define.\n\t* config/mmix/mmix.h (target_flags): Remove.\n\t* config/rs6000/rs6000.h (rs6000_xilinx_fpu, flag_pic,\n\tflag_expensive_optimizations): Remove.\n\t* config/s390/s390.h (flag_pic): Remove.\n\t* config/score/score-conv.h (target_flags): Remove.\n\t* config/sh/sh.h (sh_fixed_range_str): Remove.\n\t* config/spu/spu.h (target_flags, spu_fixed_range_string): Remove.\n\t* dbxout.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER\n\t* df-scan.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* diagnostic.c (diagnostic_initialize): Update names of\n\tdiagnostic_context members.\n\t* diagnostic.h (diagnostic_context): Rename inhibit_warnings and\n\twarn_system_headers.\n\t(diagnostic_report_warnings_p): Update for new names.\n\t* dwarf2out.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER\n\t* emit-rtl.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER and\n\tHARD_FRAME_POINTER_IS_ARG_POINTER.\n\t* flags.h (flag_compare_debug): Declare.\n\t* ira.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n\t* opts.c (flag_compare_debug): Define.\n\t(common_handle_option): Update names of diagnostic_context\n\tmembers.  Handle -fcompare-debug-second.\n\t(fast_math_flags_struct_set_p): Update names of cl_optimization\n\tmembers.\n\t* reginfo.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* regrename.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* reload.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* reload1.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* resource.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n\t* rtl.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define and use.\n\t* sel-sched.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n\t* stmt.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER.\n\ngcc/c-family:\n\t* c-common.c (c_cpp_error): Update names of diagnostic_context\n\tmembers.\n\t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): Update names of\n\tcl_optimization members.\n\t* c-opts.c (warning_as_error_callback, c_common_handle_option,\n\tsanitize_cpp_opts, finish_options): Update names of cpp_options\n\tmembers.\n\ngcc/fortran:\n\t* cpp.c (cpp_define_builtins): Update names of gfc_option_t\n\tmembers.\n\t(gfc_cpp_post_options): Update names of cpp_options members.\n\t(cb_cpp_error): Update names of diagnostic_context members.\n\t* f95-lang.c (gfc_init_builtin_functions): Update names of\n\tgfc_option_t members.\n\t* gfortran.h (gfc_option_t): Rename warn_conversion and\n\tflag_openmp.\n\t* intrinsic.c (gfc_convert_type_warn): Update names of\n\tgfc_option_t members.\n\t* options.c (gfc_init_options, gfc_post_options, set_Wall,\n\tgfc_handle_option): Update names of gfc_option_t members.\n\t* parse.c (next_free, next_fixed): Update names of gfc_option_t\n\tmembers.\n\t* scanner.c (pedantic): Remove extern declaration.\n\t(skip_free_comments, skip_fixed_comments, include_line): Update\n\tnames of gfc_option_t members.\n\t* trans-decl.c (gfc_generate_function_code): Update names of\n\tgfc_option_t members.\n\ngcc/java:\n\t* java-tree.h (flag_filelist_file, flag_assert, flag_jni,\n\tflag_force_classes_archive_check, flag_redundant, flag_newer,\n\tflag_use_divide_subroutine, flag_use_atomic_builtins,\n\tflag_use_boehm_gc, flag_hash_synchronization,\n\tflag_check_references, flag_optimize_sci, flag_indirect_classes,\n\tflag_indirect_dispatch, flag_store_check,\n\tflag_reduced_reflection): Remove.\n\t* jcf-dump.c (flag_newer): Remove.\n\t* jcf.h (quiet_flag): Remove.\n\t* parse.h (quiet_flag): Remove.\n\nlibcpp:\n\t* include/cpplib.h (cpp_options): Rename warn_deprecated,\n\twarn_traditional, warn_long_long and pedantic.\n\t* directives.c (directive_diagnostics, _cpp_handle_directive):\n\tUpdate names of cpp_options members.\n\t* expr.c (cpp_classify_number, eval_token): Update names of\n\tcpp_options members.\n\t* init.c (cpp_create_reader, post_options): Update names of\n\tcpp_options members.\n\t* internal.h (CPP_PEDANTIC, CPP_WTRADITIONAL): Update names of\n\tcpp_options members.\n\t* macro.c (parse_params): Update names of cpp_options members.\n\nFrom-SVN: r164723", "tree": {"sha": "7baf17d9e07b39bfc1d357b60f65c55dc3c60d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7baf17d9e07b39bfc1d357b60f65c55dc3c60d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66dfc61020cc45ec6f611de0671f316c840131ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dfc61020cc45ec6f611de0671f316c840131ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66dfc61020cc45ec6f611de0671f316c840131ee"}], "stats": {"total": 700, "additions": 419, "deletions": 281}, "files": [{"sha": "bcfabb636ac15f29c6329043d615540a775c76b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,3 +1,72 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* optc-gen.awk: Generate global_options initializer instead of\n+\tindividual variables.  Add x_ prefix to names of structure\n+\tmembers.\n+\t* opth-gen.awk: Generate gcc_options structure.  Add x_ prefix to\n+\tnames of structure members.\n+\t* doc/tm.texi.in (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* alias.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t* builtins.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER.\n+\t* c-parser.c (disable_extension_diagnostics,\n+\trestore_extension_diagnostics): Update names of cpp_options\n+\tmembers.\n+\t* combine.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t* common.opt (fcompare-debug-second): Don't use Var.\n+\t* config/alpha/alpha.h (target_flags): Remove.\n+\t* config/arm/arm.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define.\n+\t* config/bfin/bfin.h (target_flags): Remove.\n+\t* config/cris/cris.h (target_flags): Remove.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Update names of\n+\tcl_target_option members.\n+\t* config/i386/i386.c (ix86_force_align_arg_pointer): Remove.\n+\t(ix86_function_specific_print, ix86_valid_target_attribute_tree,\n+\tix86_can_inline_p): Update names of cl_target_option members.\n+\t* config/i386/i386.h (ix86_isa_flags): Remove.\n+\t* config/lm32/lm32.h (target_flags): Remove.\n+\t* config/mcore/mcore.h (mcore_stack_increment): Remove.\n+\t* config/mcore/mcore.md (addsi3): Remove extern declaration of\n+\tflag_omit_frame_pointer.\n+\t* config/mep/mep.h (target_flags): Remove.\n+\t* config/mips/mips.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define.\n+\t* config/mmix/mmix.h (target_flags): Remove.\n+\t* config/rs6000/rs6000.h (rs6000_xilinx_fpu, flag_pic,\n+\tflag_expensive_optimizations): Remove.\n+\t* config/s390/s390.h (flag_pic): Remove.\n+\t* config/score/score-conv.h (target_flags): Remove.\n+\t* config/sh/sh.h (sh_fixed_range_str): Remove.\n+\t* config/spu/spu.h (target_flags, spu_fixed_range_string): Remove.\n+\t* dbxout.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER\n+\t* df-scan.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* diagnostic.c (diagnostic_initialize): Update names of\n+\tdiagnostic_context members.\n+\t* diagnostic.h (diagnostic_context): Rename inhibit_warnings and\n+\twarn_system_headers.\n+\t(diagnostic_report_warnings_p): Update for new names.\n+\t* dwarf2out.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER\n+\t* emit-rtl.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER and\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER.\n+\t* flags.h (flag_compare_debug): Declare.\n+\t* ira.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t* opts.c (flag_compare_debug): Define.\n+\t(common_handle_option): Update names of diagnostic_context\n+\tmembers.  Handle -fcompare-debug-second.\n+\t(fast_math_flags_struct_set_p): Update names of cl_optimization\n+\tmembers.\n+\t* reginfo.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* regrename.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* reload.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* reload1.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* resource.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER.\n+\t* rtl.h (HARD_FRAME_POINTER_IS_FRAME_POINTER,\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER): Define and use.\n+\t* sel-sched.c: Use HARD_FRAME_POINTER_IS_FRAME_POINTER\n+\t* stmt.c: Use HARD_FRAME_POINTER_IS_ARG_POINTER.\n+\n 2010-09-29  Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \t* config/picochip/picochip.c (picochip_output_internal_label):"}, {"sha": "298f39b5434df3f27e78582375bebd872525d9d5", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -2688,7 +2688,7 @@ init_alias_target (void)\n     = gen_rtx_ADDRESS (Pmode, arg_pointer_rtx);\n   static_reg_base_value[FRAME_POINTER_REGNUM]\n     = gen_rtx_ADDRESS (Pmode, frame_pointer_rtx);\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n   static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n     = gen_rtx_ADDRESS (Pmode, hard_frame_pointer_rtx);\n #endif"}, {"sha": "4c3b1ae76a4146048f9eae4f15eea50f1edaba08", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -835,7 +835,7 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n       emit_clobber (hard_frame_pointer_rtx);\n     }\n \n-#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n   if (fixed_regs[ARG_POINTER_REGNUM])\n     {\n #ifdef ELIMINABLE_REGS"}, {"sha": "41b585f37293d8f3ab1e0b53342ee949e340c470", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,3 +1,13 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_cpp_error): Update names of diagnostic_context\n+\tmembers.\n+\t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): Update names of\n+\tcl_optimization members.\n+\t* c-opts.c (warning_as_error_callback, c_common_handle_option,\n+\tsanitize_cpp_opts, finish_options): Update names of cpp_options\n+\tmembers.\n+\n 2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-common.h (OBJC_IS_CXX_KEYWORD): New macro.  Updated comments."}, {"sha": "950573b64afb29d979747b5747319f9051e565fb", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -8311,15 +8311,15 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;\n-  bool save_warn_system_headers = global_dc->warn_system_headers;\n+  bool save_warn_system_headers = global_dc->dc_warn_system_headers;\n   bool ret;\n \n   switch (level)\n     {\n     case CPP_DL_WARNING_SYSHDR:\n       if (flag_no_output)\n \treturn false;\n-      global_dc->warn_system_headers = 1;\n+      global_dc->dc_warn_system_headers = 1;\n       /* Fall through.  */\n     case CPP_DL_WARNING:\n       if (flag_no_output)\n@@ -8356,7 +8356,7 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n                                     c_option_controlling_cpp_error (reason));\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n-    global_dc->warn_system_headers = save_warn_system_headers;\n+    global_dc->dc_warn_system_headers = save_warn_system_headers;\n   return ret;\n }\n "}, {"sha": "7fe299308e4534a07bc7636632c41de8e92285d4", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -514,14 +514,14 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n \n   /* Other target-independent built-ins determined by command-line\n      options.  */\n-  if (!prev->optimize_size && cur->optimize_size)\n+  if (!prev->x_optimize_size && cur->x_optimize_size)\n     cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n-  else if (prev->optimize_size && !cur->optimize_size)\n+  else if (prev->x_optimize_size && !cur->x_optimize_size)\n     cpp_undef (pfile, \"__OPTIMIZE_SIZE__\");\n \n-  if (!prev->optimize && cur->optimize)\n+  if (!prev->x_optimize && cur->x_optimize)\n     cpp_define (pfile, \"__OPTIMIZE__\");\n-  else if (prev->optimize && !cur->optimize)\n+  else if (prev->x_optimize && !cur->x_optimize)\n     cpp_undef (pfile, \"__OPTIMIZE__\");\n \n   prev_fast_math = fast_math_flags_struct_set_p (prev);\n@@ -531,17 +531,17 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n   else if (prev_fast_math && !cur_fast_math)\n     cpp_undef (pfile, \"__FAST_MATH__\");\n \n-  if (!prev->flag_signaling_nans && cur->flag_signaling_nans)\n+  if (!prev->x_flag_signaling_nans && cur->x_flag_signaling_nans)\n     cpp_define (pfile, \"__SUPPORT_SNAN__\");\n-  else if (prev->flag_signaling_nans && !cur->flag_signaling_nans)\n+  else if (prev->x_flag_signaling_nans && !cur->x_flag_signaling_nans)\n     cpp_undef (pfile, \"__SUPPORT_SNAN__\");\n \n-  if (!prev->flag_finite_math_only && cur->flag_finite_math_only)\n+  if (!prev->x_flag_finite_math_only && cur->x_flag_finite_math_only)\n     {\n       cpp_undef (pfile, \"__FINITE_MATH_ONLY__\");\n       cpp_define (pfile, \"__FINITE_MATH_ONLY__=1\");\n     }\n-  else if (!prev->flag_finite_math_only && cur->flag_finite_math_only)\n+  else if (!prev->x_flag_finite_math_only && cur->x_flag_finite_math_only)\n     {\n       cpp_undef (pfile, \"__FINITE_MATH_ONLY__\");\n       cpp_define (pfile, \"__FINITE_MATH_ONLY__=0\");"}, {"sha": "ea7227eab8b34ea9bae3df09c7ff92eedd7bad73", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -157,7 +157,7 @@ warning_as_error_callback (int option_index)\n \tbreak;\n \n       case OPT_Wdeprecated:\n-\tcpp_opts->warn_deprecated = 1;\n+\tcpp_opts->cpp_warn_deprecated = 1;\n \tbreak;\n \n       case OPT_Wcomment:\n@@ -173,11 +173,11 @@ warning_as_error_callback (int option_index)\n \tbreak;\n \n       case OPT_Wtraditional:\n-\tcpp_opts->warn_traditional = 1;\n+\tcpp_opts->cpp_warn_traditional = 1;\n \tbreak;\n \n       case OPT_Wlong_long:\n-\tcpp_opts->warn_long_long = 1;\n+\tcpp_opts->cpp_warn_long_long = 1;\n \tbreak;\n \n       case OPT_Wendif_labels:\n@@ -508,7 +508,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wdeprecated:\n-      cpp_opts->warn_deprecated = value;\n+      cpp_opts->cpp_warn_deprecated = value;\n       break;\n \n     case OPT_Wendif_labels:\n@@ -567,7 +567,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wtraditional:\n-      cpp_opts->warn_traditional = value;\n+      cpp_opts->cpp_warn_traditional = value;\n       break;\n \n     case OPT_Wtrigraphs:\n@@ -788,7 +788,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t is not overridden.  */\n     case OPT_pedantic_errors:\n     case OPT_pedantic:\n-      cpp_opts->pedantic = 1;\n+      cpp_opts->cpp_pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n       if (warn_pointer_sign == -1)\n \twarn_pointer_sign = 1;\n@@ -1314,7 +1314,7 @@ sanitize_cpp_opts (void)\n   if (warn_long_long == -1)\n     warn_long_long = ((pedantic || warn_traditional)\n \t\t      && (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n-  cpp_opts->warn_long_long = warn_long_long;\n+  cpp_opts->cpp_warn_long_long = warn_long_long;\n \n   /* Similarly with -Wno-variadic-macros.  No check for c99 here, since\n      this also turns off warnings about GCCs extension.  */\n@@ -1381,7 +1381,7 @@ finish_options (void)\n \t conflict with the specified standard, and since a strictly\n \t conforming program cannot contain a '$', we do not condition\n \t their acceptance on the -std= setting.  */\n-      cpp_opts->warn_dollars = (cpp_opts->pedantic && !cpp_opts->c99);\n+      cpp_opts->warn_dollars = (cpp_opts->cpp_pedantic && !cpp_opts->c99);\n \n       cb_file_change (parse_in,\n \t\t      linemap_add (line_table, LC_RENAME, 0,"}, {"sha": "aa266e218630da187ca14b8cf79f88e1cb18c1b7", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -884,11 +884,11 @@ disable_extension_diagnostics (void)\n \t     | (flag_iso << 3)\n \t     | (warn_long_long << 4)\n \t     | (warn_cxx_compat << 5));\n-  cpp_opts->pedantic = pedantic = 0;\n+  cpp_opts->cpp_pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n-  cpp_opts->warn_traditional = warn_traditional = 0;\n+  cpp_opts->cpp_warn_traditional = warn_traditional = 0;\n   flag_iso = 0;\n-  cpp_opts->warn_long_long = warn_long_long = 0;\n+  cpp_opts->cpp_warn_long_long = warn_long_long = 0;\n   warn_cxx_compat = 0;\n   return ret;\n }\n@@ -899,11 +899,11 @@ disable_extension_diagnostics (void)\n static inline void\n restore_extension_diagnostics (int flags)\n {\n-  cpp_opts->pedantic = pedantic = flags & 1;\n+  cpp_opts->cpp_pedantic = pedantic = flags & 1;\n   warn_pointer_arith = (flags >> 1) & 1;\n-  cpp_opts->warn_traditional = warn_traditional = (flags >> 2) & 1;\n+  cpp_opts->cpp_warn_traditional = warn_traditional = (flags >> 2) & 1;\n   flag_iso = (flags >> 3) & 1;\n-  cpp_opts->warn_long_long = warn_long_long = (flags >> 4) & 1;\n+  cpp_opts->cpp_warn_long_long = warn_long_long = (flags >> 4) & 1;\n   warn_cxx_compat = (flags >> 5) & 1;\n }\n "}, {"sha": "5bd4d6e517a738ec6d1b3a9ea0ca004c60632662", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -962,7 +962,7 @@ create_log_links (void)\n               /* Do not make the log link for frame pointer.  */\n               if ((regno == FRAME_POINTER_REGNUM\n                    && (! reload_completed || frame_pointer_needed))\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n                   || (regno == HARD_FRAME_POINTER_REGNUM\n                       && (! reload_completed || frame_pointer_needed))\n #endif\n@@ -2049,7 +2049,7 @@ combinable_i3pat (rtx i3, rtx *loc, rtx i2dest, rtx i1dest, rtx i0dest,\n \t  && REG_P (subdest)\n \t  && reg_referenced_p (subdest, PATTERN (i3))\n \t  && REGNO (subdest) != FRAME_POINTER_REGNUM\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t  && REGNO (subdest) != HARD_FRAME_POINTER_REGNUM\n #endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n@@ -12802,7 +12802,7 @@ mark_used_regs_combine (rtx x)\n \t{\n \t  /* None of this applies to the stack, frame or arg pointers.  */\n \t  if (regno == STACK_POINTER_REGNUM\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t      || regno == HARD_FRAME_POINTER_REGNUM\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM"}, {"sha": "8a65b93a487d40c95c08b146e81d8123eb6b4378", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -647,7 +647,7 @@ Common Driver JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)\n -fcompare-debug[=<opts>]\tCompile with and without e.g. -gtoggle, and compare the final-insns dump\n \n fcompare-debug-second\n-Common Driver RejectNegative Var(flag_compare_debug)\n+Common Driver RejectNegative\n Run only the second compilation of -fcompare-debug\n \n fconserve-stack"}, {"sha": "bdf31599d0747d93abd471f3cd1cba6afed455b6", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -144,8 +144,6 @@ enum alpha_fp_trap_mode\n   ALPHA_FPTM_SUI\t/* Software completion, w/underflow & inexact traps */\n };\n \n-extern int target_flags;\n-\n extern enum alpha_trap_precision alpha_tp;\n extern enum alpha_fp_rounding_mode alpha_fprm;\n extern enum alpha_fp_trap_mode alpha_fptm;"}, {"sha": "55442f55ad4ed1f3d8e7436bade31f2ae31b35d6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -989,6 +989,9 @@ extern int arm_structure_size_boundary;\n    ? ARM_HARD_FRAME_POINTER_REGNUM\t\t\\\n    : THUMB_HARD_FRAME_POINTER_REGNUM)\n \n+#define HARD_FRAME_POINTER_IS_FRAME_POINTER 0\n+#define HARD_FRAME_POINTER_IS_ARG_POINTER 0\n+\n #define FP_REGNUM\t                HARD_FRAME_POINTER_REGNUM\n \n /* Register to use for pushing function arguments.  */"}, {"sha": "11cc5cab71b64b7413489ca2c5f67ca6d06b1715", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -72,10 +72,6 @@ extern unsigned int bfin_workarounds;\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION fprintf (stderr, \" (BlackFin bfin)\")\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n /* Predefinition in the preprocessor for this target machine */\n #ifndef TARGET_CPU_CPP_BUILTINS\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\"}, {"sha": "cd4a22d23a3bbe3ed5367771c02ea5ce45ba0e82", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -280,9 +280,6 @@ extern int cris_cpu_version;\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* This needs to be at least 32 bits.  */\n-extern int target_flags;\n-\n /* Previously controlled by target_flags.  */\n #define TARGET_ELF 1\n "}, {"sha": "1993c624bf5926b1f3dad7d0b4b542e6ad5b5b33", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for macro/preprocessor support on the ia-32.\n-   Copyright (C) 2008, 2009\n+   Copyright (C) 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -297,8 +297,8 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   /* Figure out the previous/current isa, arch, tune and the differences.  */\n   prev_opt  = TREE_TARGET_OPTION (prev_tree);\n   cur_opt   = TREE_TARGET_OPTION (cur_tree);\n-  prev_isa  = prev_opt->ix86_isa_flags;\n-  cur_isa   = cur_opt->ix86_isa_flags;\n+  prev_isa  = prev_opt->x_ix86_isa_flags;\n+  cur_isa   = cur_opt->x_ix86_isa_flags;\n   diff_isa  = (prev_isa ^ cur_isa);\n   prev_arch = (enum processor_type) prev_opt->arch;\n   prev_tune = (enum processor_type) prev_opt->tune;"}, {"sha": "20775213aa465253081703a0e74da3df485de157", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1898,7 +1898,6 @@ int x86_prefetch_sse;\n static int ix86_regparm;\n \n /* -mstackrealign option */\n-extern int ix86_force_align_arg_pointer;\n static const char ix86_force_align_arg_pointer_string[]\n   = \"force_align_arg_pointer\";\n \n@@ -3860,7 +3859,7 @@ ix86_function_specific_print (FILE *file, int indent,\n \t\t\t      struct cl_target_option *ptr)\n {\n   char *target_string\n-    = ix86_target_string (ptr->ix86_isa_flags, ptr->target_flags,\n+    = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_target_flags,\n \t\t\t  NULL, NULL, NULL, false);\n \n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n@@ -4117,8 +4116,8 @@ ix86_valid_target_attribute_tree (tree args)\n      ix86_option_override_internal, and then save the options away.\n      The string options are are attribute options, and will be undone\n      when we copy the save structure.  */\n-  if (ix86_isa_flags != def->ix86_isa_flags\n-      || target_flags != def->target_flags\n+  if (ix86_isa_flags != def->x_ix86_isa_flags\n+      || target_flags != def->x_target_flags\n       || option_strings[IX86_FUNCTION_SPECIFIC_ARCH]\n       || option_strings[IX86_FUNCTION_SPECIFIC_TUNE]\n       || option_strings[IX86_FUNCTION_SPECIFIC_FPMATH])\n@@ -4235,12 +4234,12 @@ ix86_can_inline_p (tree caller, tree callee)\n       /* Callee's isa options should a subset of the caller's, i.e. a SSE4 function\n \t can inline a SSE2 function but a SSE2 function can't inline a SSE4\n \t function.  */\n-      if ((caller_opts->ix86_isa_flags & callee_opts->ix86_isa_flags)\n-\t  != callee_opts->ix86_isa_flags)\n+      if ((caller_opts->x_ix86_isa_flags & callee_opts->x_ix86_isa_flags)\n+\t  != callee_opts->x_ix86_isa_flags)\n \tret = false;\n \n       /* See if we have the same non-isa options.  */\n-      else if (caller_opts->target_flags != callee_opts->target_flags)\n+      else if (caller_opts->x_target_flags != callee_opts->x_target_flags)\n \tret = false;\n \n       /* See if arch, tune, etc. are the same.  */"}, {"sha": "62f35cae2ec40105eb4dfae1950c6c18ed925fae", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -447,8 +447,6 @@ extern int x86_prefetch_sse;\n #define TARGET_ANY_GNU_TLS\t(TARGET_GNU_TLS || TARGET_GNU2_TLS)\n #define TARGET_SUN_TLS\t\t0\n \n-extern int ix86_isa_flags;\n-\n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0\n #endif"}, {"sha": "f629d0fcf625172e072dcf1cff2df81417d26815", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -68,8 +68,6 @@\n #undef  LIB_SPEC\n #define LIB_SPEC \"%{!T*:-T sim.ld}\"\n \n-extern int target_flags;\n-\n /* Add -G xx support.  */\n \n #undef  SWITCH_TAKES_ARG"}, {"sha": "11047c91a21f292157ef71e81d51bbc47c11f74d", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -134,7 +134,6 @@ extern char * mcore_current_function_name;\n #define STACK_BOUNDARY  (TARGET_8ALIGN ? 64 : 32)\n \n /* Largest increment in UNITS we allow the stack to grow in a single operation.  */\n-extern int mcore_stack_increment;\n #define STACK_UNITS_MAXSTEP  4096\n \n /* Allocation boundary (in *bits*) for the code of a function.  */"}, {"sha": "532181db0cc66efc892b9afb61e80dde3afbe3af", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,5 +1,5 @@\n ;;  Machine description the Motorola MCore\n-;;  Copyright (C) 1993, 1999, 2000, 2004, 2005, 2007\n+;;  Copyright (C) 1993, 1999, 2000, 2004, 2005, 2007, 2009, 2010\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by Motorola.\n \n@@ -697,8 +697,6 @@\n   \"\"\n   \"\n {\n-  extern int flag_omit_frame_pointer;\n-\n   /* If this is an add to the frame pointer, then accept it as is so\n      that we can later fold in the fp/sp offset from frame pointer\n      elimination.  */"}, {"sha": "ad2cf306a5a0f1fcf1576ae540a597545cde371e", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -108,8 +108,6 @@ crtbegin.o%s\"\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-extern int target_flags;\n-\n /* Controlled by MeP-Integrator.  */\n #define TARGET_H1\t\t0\n "}, {"sha": "608c20961237e5312675b1b93909ad00ba7eaed2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1736,6 +1736,9 @@ enum mips_code_readable_setting {\n #define HARD_FRAME_POINTER_REGNUM \\\n   (TARGET_MIPS16 ? GP_REG_FIRST + 17 : GP_REG_FIRST + 30)\n \n+#define HARD_FRAME_POINTER_IS_FRAME_POINTER 0\n+#define HARD_FRAME_POINTER_IS_ARG_POINTER 0\n+\n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM (GP_REG_FIRST + 15)\n "}, {"sha": "b4fc856fbaaf7ae41026190977e959ac1a23a708", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -140,8 +140,6 @@ struct GTY(()) machine_function\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-extern int target_flags;\n-\n #define TARGET_DEFAULT \\\n  (MASK_BRANCH_PREDICT | MASK_BASE_ADDRESSES | MASK_USE_RETURN_INSN)\n "}, {"sha": "627e63890619ae0680b3f0c03943238145995bc7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -471,7 +471,6 @@ extern int rs6000_float_gprs;\n extern int rs6000_alignment_flags;\n extern const char *rs6000_sched_insert_nops_str;\n extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n-extern int rs6000_xilinx_fpu;\n \n /* Describe which vector unit to use for a given machine mode.  */\n enum rs6000_vector {\n@@ -2417,9 +2416,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* #define  MACHINE_no_sched_speculative_load */\n \n /* General flags.  */\n-extern int flag_pic;\n extern int optimize;\n-extern int flag_expensive_optimizations;\n extern int frame_pointer_needed;\n \n /* Classification of the builtin functions to properly set the declaration tree"}, {"sha": "8c8554f96e074a1813e83d690bbe7d8250ad1120", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -869,8 +869,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Position independent code.  */\n \n-extern int flag_pic;\n-\n #define PIC_OFFSET_TABLE_REGNUM (flag_pic ? 12 : INVALID_REGNUM)\n \n #define LEGITIMATE_PIC_OPERAND_P(X)  legitimate_pic_operand_p (X)"}, {"sha": "3a40090dbc9cc1d5c8ff64d0b99b9ed19afd9c6e", "filename": "gcc/config/score/score-conv.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fscore%2Fscore-conv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fscore%2Fscore-conv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-conv.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,5 +1,5 @@\n /* score-conv.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -20,8 +20,6 @@\n #ifndef GCC_SCORE_CONV_H\n #define GCC_SCORE_CONV_H\n \n-extern int target_flags;\n-\n #define GP_REG_FIRST                    0U\n #define GP_REG_LAST                     31U\n #define GP_REG_NUM                      (GP_REG_LAST - GP_REG_FIRST + 1U)"}, {"sha": "d196e39c07f49ed1adf7ceeac9180d7952f2a5a1", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -503,8 +503,6 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \n #define SUBTARGET_OVERRIDE_OPTIONS (void) 0\n \n-extern const char *sh_fixed_range_str;\n-\n \f\n /* Target machine storage layout.  */\n "}, {"sha": "9f72cb228f567a3eb1a556e622793334b78d8c03", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -24,9 +24,6 @@\n \n #define INIT_EXPANDERS spu_init_expanders()\n \n-extern int target_flags;\n-extern const char *spu_fixed_range_string;\n-\n /* Which processor to generate code or schedule for.  */\n enum processor_type\n {"}, {"sha": "e5396b2a1d84e774212d1e83984bd3cc19676157", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -3015,7 +3015,7 @@ dbxout_symbol_location (tree decl, tree type, const char *suffix, rtx home)\n \t       || (REG_P (XEXP (home, 0))\n \t\t   && REGNO (XEXP (home, 0)) != HARD_FRAME_POINTER_REGNUM\n \t\t   && REGNO (XEXP (home, 0)) != STACK_POINTER_REGNUM\n-#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n \t\t   && REGNO (XEXP (home, 0)) != ARG_POINTER_REGNUM\n #endif\n \t\t   )))\n@@ -3429,7 +3429,7 @@ dbxout_parms (tree parms)\n \t\t && REG_P (XEXP (DECL_RTL (parms), 0))\n \t\t && REGNO (XEXP (DECL_RTL (parms), 0)) != HARD_FRAME_POINTER_REGNUM\n \t\t && REGNO (XEXP (DECL_RTL (parms), 0)) != STACK_POINTER_REGNUM\n-#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n \t\t && REGNO (XEXP (DECL_RTL (parms), 0)) != ARG_POINTER_REGNUM\n #endif\n \t\t )"}, {"sha": "0b636e99ea8c768ba57a496b74b4232849948cbf", "filename": "gcc/df-scan.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -3406,7 +3406,7 @@ df_insn_refs_collect (struct df_collection_rec* collection_rec,\n                          regno_reg_rtx[FRAME_POINTER_REGNUM],\n                          NULL, bb, insn_info,\n                          DF_REF_REG_USE, 0);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n           df_ref_record (DF_REF_BASE, collection_rec,\n                          regno_reg_rtx[HARD_FRAME_POINTER_REGNUM],\n                          NULL, bb, insn_info,\n@@ -3604,7 +3604,7 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n \t reference of the frame pointer.  */\n       bitmap_set_bit (regular_block_artificial_uses, FRAME_POINTER_REGNUM);\n \n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       bitmap_set_bit (regular_block_artificial_uses, HARD_FRAME_POINTER_REGNUM);\n #endif\n \n@@ -3656,7 +3656,7 @@ df_get_eh_block_artificial_uses (bitmap eh_block_artificial_uses)\n       if (frame_pointer_needed)\n \t{\n \t  bitmap_set_bit (eh_block_artificial_uses, FRAME_POINTER_REGNUM);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t  bitmap_set_bit (eh_block_artificial_uses, HARD_FRAME_POINTER_REGNUM);\n #endif\n \t}\n@@ -3744,7 +3744,7 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n       /* Any reference to any pseudo before reload is a potential\n \t reference of the frame pointer.  */\n       bitmap_set_bit (entry_block_defs, FRAME_POINTER_REGNUM);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       /* If they are different, also mark the hard frame pointer as live.  */\n       if (!LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n \tbitmap_set_bit (entry_block_defs, HARD_FRAME_POINTER_REGNUM);\n@@ -3877,7 +3877,7 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n   if ((!reload_completed) || frame_pointer_needed)\n     {\n       bitmap_set_bit (exit_block_uses, FRAME_POINTER_REGNUM);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       /* If they are different, also mark the hard frame pointer as live.  */\n       if (!LOCAL_REGNO (HARD_FRAME_POINTER_REGNUM))\n \tbitmap_set_bit (exit_block_uses, HARD_FRAME_POINTER_REGNUM);"}, {"sha": "a057f8d8f48d3174a0933c182e0de4eaee8a9936", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -107,8 +107,8 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->permissive = false;\n   context->opt_permissive = 0;\n   context->fatal_errors = false;\n-  context->inhibit_warnings = false;\n-  context->warn_system_headers = false;\n+  context->dc_inhibit_warnings = false;\n+  context->dc_warn_system_headers = false;\n   context->internal_error = NULL;\n   diagnostic_starter (context) = default_diagnostic_starter;\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;"}, {"sha": "f91efc6e04d198290c33e324cf33c93f077051bd", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -124,10 +124,10 @@ struct diagnostic_context\n   bool fatal_errors;\n \n   /* True if all warnings should be disabled.  */\n-  bool inhibit_warnings;\n+  bool dc_inhibit_warnings;\n \n   /* True if warnings should be given in system headers.  */\n-  bool warn_system_headers;\n+  bool dc_warn_system_headers;\n \n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n@@ -230,8 +230,8 @@ extern diagnostic_context *global_dc;\n \n /* Returns nonzero if warnings should be emitted.  */\n #define diagnostic_report_warnings_p(DC, LOC)\t\t\t\t\\\n-  (!(DC)->inhibit_warnings\t\t\t\t\t\t\\\n-   && !(in_system_header_at (LOC) && !(DC)->warn_system_headers))\n+  (!(DC)->dc_inhibit_warnings\t\t\t\t\t\t\\\n+   && !(in_system_header_at (LOC) && !(DC)->dc_warn_system_headers))\n \n #define report_diagnostic(D) diagnostic_report_diagnostic (global_dc, D)\n "}, {"sha": "e1e095758ec891decef0d210216b73fa92c3a2aa", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -3643,6 +3643,22 @@ pointer register, then you must mark it as a fixed register according to\n (@pxref{Elimination}).\n @end defmac\n \n+@defmac HARD_FRAME_POINTER_IS_FRAME_POINTER\n+Define this to a preprocessor constant that is nonzero if\n+@code{hard_frame_pointer_rtx} and @code{frame_pointer_rtx} should be\n+the same.  The default definition is @samp{(HARD_FRAME_POINTER_REGNUM\n+== FRAME_POINTER_REGNUM)}; you only need to define this macro if that\n+definition is not suitable for use in preprocessor conditionals.\n+@end defmac\n+\n+@defmac HARD_FRAME_POINTER_IS_ARG_POINTER\n+Define this to a preprocessor constant that is nonzero if\n+@code{hard_frame_pointer_rtx} and @code{arg_pointer_rtx} should be the\n+same.  The default definition is @samp{(HARD_FRAME_POINTER_REGNUM ==\n+ARG_POINTER_REGNUM)}; you only need to define this macro if that\n+definition is not suitable for use in preprocessor conditionals.\n+@end defmac\n+\n @defmac RETURN_ADDRESS_POINTER_REGNUM\n The register number of the return address pointer register, which is used to\n access the current function's return address from the stack.  On some"}, {"sha": "cb22a05aa834de67aa69b7a595f1cadebef11262", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -3643,6 +3643,22 @@ pointer register, then you must mark it as a fixed register according to\n (@pxref{Elimination}).\n @end defmac\n \n+@defmac HARD_FRAME_POINTER_IS_FRAME_POINTER\n+Define this to a preprocessor constant that is nonzero if\n+@code{hard_frame_pointer_rtx} and @code{frame_pointer_rtx} should be\n+the same.  The default definition is @samp{(HARD_FRAME_POINTER_REGNUM\n+== FRAME_POINTER_REGNUM)}; you only need to define this macro if that\n+definition is not suitable for use in preprocessor conditionals.\n+@end defmac\n+\n+@defmac HARD_FRAME_POINTER_IS_ARG_POINTER\n+Define this to a preprocessor constant that is nonzero if\n+@code{hard_frame_pointer_rtx} and @code{arg_pointer_rtx} should be the\n+same.  The default definition is @samp{(HARD_FRAME_POINTER_REGNUM ==\n+ARG_POINTER_REGNUM)}; you only need to define this macro if that\n+definition is not suitable for use in preprocessor conditionals.\n+@end defmac\n+\n @defmac RETURN_ADDRESS_POINTER_REGNUM\n The register number of the return address pointer register, which is used to\n access the current function's return address from the stack.  On some"}, {"sha": "735a0c243cadfd8206662d27c3362f68918957d1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -16567,7 +16567,7 @@ rtl_for_decl_location (tree decl)\n \t       && (!REG_P (XEXP (rtl, 0))\n \t\t   || REGNO (XEXP (rtl, 0)) == HARD_FRAME_POINTER_REGNUM\n \t\t   || REGNO (XEXP (rtl, 0)) == STACK_POINTER_REGNUM\n-#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n \t\t   || REGNO (XEXP (rtl, 0)) == ARG_POINTER_REGNUM\n #endif\n \t\t     )"}, {"sha": "3115523fb8ca0122d1a65a42925f9baf82ba5a4b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -589,12 +589,12 @@ gen_rtx_REG (enum machine_mode mode, unsigned int regno)\n       if (regno == FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n \treturn frame_pointer_rtx;\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       if (regno == HARD_FRAME_POINTER_REGNUM\n \t  && (!reload_completed || frame_pointer_needed))\n \treturn hard_frame_pointer_rtx;\n #endif\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && HARD_FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && !HARD_FRAME_POINTER_IS_ARG_POINTER\n       if (regno == ARG_POINTER_REGNUM)\n \treturn arg_pointer_rtx;\n #endif"}, {"sha": "893daee6f370f0bda8070cec9c76a285258e6dee", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -77,6 +77,11 @@ extern void set_struct_debug_option (const char *value);\n    debugging information.  */\n extern bool use_gnu_debug_info_extensions;\n \n+/* Run the second compilation of -fcompare-debug.  Not defined using\n+   Var in common.opt because this is used in Ada code and so must be\n+   an actual variable not a macro.  */\n+extern int flag_compare_debug;\n+\n /* Enumerate visibility settings.  This is deliberately ordered from most\n    to least visibility.  */\n #ifndef SYMBOL_VISIBILITY_DEFINED"}, {"sha": "9114f1cd70c2ad0caac0f25ed1a19aabb4b15b86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,3 +1,25 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpp.c (cpp_define_builtins): Update names of gfc_option_t\n+\tmembers.\n+\t(gfc_cpp_post_options): Update names of cpp_options members.\n+\t(cb_cpp_error): Update names of diagnostic_context members.\n+\t* f95-lang.c (gfc_init_builtin_functions): Update names of\n+\tgfc_option_t members.\n+\t* gfortran.h (gfc_option_t): Rename warn_conversion and\n+\tflag_openmp.\n+\t* intrinsic.c (gfc_convert_type_warn): Update names of\n+\tgfc_option_t members.\n+\t* options.c (gfc_init_options, gfc_post_options, set_Wall,\n+\tgfc_handle_option): Update names of gfc_option_t members.\n+\t* parse.c (next_free, next_fixed): Update names of gfc_option_t\n+\tmembers.\n+\t* scanner.c (pedantic): Remove extern declaration.\n+\t(skip_free_comments, skip_fixed_comments, include_line): Update\n+\tnames of gfc_option_t members.\n+\t* trans-decl.c (gfc_generate_function_code): Update names of\n+\tgfc_option_t members.\n+\n 2010-09-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40569"}, {"sha": "908c92acc966f1bd6ec68dff42dce75361a26b36", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -176,7 +176,7 @@ cpp_define_builtins (cpp_reader *pfile)\n   cpp_define (pfile, \"__GFORTRAN__=1\");\n   cpp_define (pfile, \"_LANGUAGE_FORTRAN=1\");\n \n-  if (gfc_option.flag_openmp)\n+  if (gfc_option.gfc_flag_openmp)\n     cpp_define (pfile, \"_OPENMP=200805\");\n \n \n@@ -526,7 +526,7 @@ gfc_cpp_post_options (void)\n   cpp_option->traditional = 1;\n   cpp_option->cplusplus_comments = 0;\n \n-  cpp_option->pedantic = pedantic;\n+  cpp_option->cpp_pedantic = pedantic;\n \n   cpp_option->dollars_in_ident = gfc_option.flag_dollar_ok;\n   cpp_option->discard_comments = gfc_cpp_option.discard_comments;\n@@ -1075,13 +1075,13 @@ cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;\n-  bool save_warn_system_headers = global_dc->warn_system_headers;\n+  bool save_warn_system_headers = global_dc->dc_warn_system_headers;\n   bool ret;\n \n   switch (level)\n     {\n     case CPP_DL_WARNING_SYSHDR:\n-      global_dc->warn_system_headers = 1;\n+      global_dc->dc_warn_system_headers = 1;\n       /* Fall through.  */\n     case CPP_DL_WARNING:\n       dlevel = DK_WARNING;\n@@ -1112,7 +1112,7 @@ cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n     diagnostic_override_option_index (&diagnostic, OPT_Wcpp);\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n-    global_dc->warn_system_headers = save_warn_system_headers;\n+    global_dc->dc_warn_system_headers = save_warn_system_headers;\n   return ret;\n }\n "}, {"sha": "f222139d942680c26c430199f319a5a6843d475e", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1089,7 +1089,7 @@ gfc_init_builtin_functions (void)\n #include \"../sync-builtins.def\"\n #undef DEF_SYNC_BUILTIN\n \n-  if (gfc_option.flag_openmp || flag_tree_parallelize_loops)\n+  if (gfc_option.gfc_flag_openmp || flag_tree_parallelize_loops)\n     {\n #undef DEF_GOMP_BUILTIN\n #define DEF_GOMP_BUILTIN(code, name, type, attr) \\"}, {"sha": "a2287a5ca1e4d18f0c474c1cb998f5d1a055db49", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -2190,7 +2190,7 @@ typedef struct\n \n   int warn_aliasing;\n   int warn_ampersand;\n-  int warn_conversion;\n+  int gfc_warn_conversion;\n   int warn_conversion_extra;\n   int warn_implicit_interface;\n   int warn_implicit_procedure;\n@@ -2230,7 +2230,7 @@ typedef struct\n   int blas_matmul_limit;\n   int flag_cray_pointer;\n   int flag_d_lines;\n-  int flag_openmp;\n+  int gfc_flag_openmp;\n   int flag_sign_zero;\n   int flag_module_private;\n   int flag_recursive;"}, {"sha": "84547973d8c0059b57570d7ac0e7c0c117ed4df7", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -4320,7 +4320,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n \t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n \t\t\t     &expr->where);\n-\t  else if (gfc_option.warn_conversion\n+\t  else if (gfc_option.gfc_warn_conversion\n \t\t   && from_ts.kind > ts->kind)\n \t    gfc_warning_now (\"Possible change of value in conversion \"\n \t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n@@ -4333,7 +4333,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t  /* Conversion from REAL/COMPLEX to INTEGER or COMPLEX to REAL\n \t     usually comes with a loss of information, regardless of kinds.  */\n \t  if (gfc_option.warn_conversion_extra\n-\t      || gfc_option.warn_conversion)\n+\t      || gfc_option.gfc_warn_conversion)\n \t    gfc_warning_now (\"Possible change of value in conversion \"\n \t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n \t\t\t     gfc_typename (ts), &expr->where);\n@@ -4342,7 +4342,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t{\n \t  /* If HOLLERITH is involved, all bets are off.  */\n \t  if (gfc_option.warn_conversion_extra\n-\t      || gfc_option.warn_conversion)\n+\t      || gfc_option.gfc_warn_conversion)\n \t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n \t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n \t\t\t     &expr->where);"}, {"sha": "b36dd7283ecc839b38fb911c262be686680bb34d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -88,7 +88,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_ampersand = 0;\n   gfc_option.warn_character_truncation = 0;\n   gfc_option.warn_array_temp = 0;\n-  gfc_option.warn_conversion = 0;\n+  gfc_option.gfc_warn_conversion = 0;\n   gfc_option.warn_conversion_extra = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n@@ -129,7 +129,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.blas_matmul_limit = 30;\n   gfc_option.flag_cray_pointer = 0;\n   gfc_option.flag_d_lines = -1;\n-  gfc_option.flag_openmp = 0;\n+  gfc_option.gfc_flag_openmp = 0;\n   gfc_option.flag_sign_zero = 1;\n   gfc_option.flag_recursive = 0;\n   gfc_option.flag_init_integer = GFC_INIT_INTEGER_OFF;\n@@ -357,15 +357,15 @@ gfc_post_options (const char **pfilename)\n \t\t     gfc_option.flag_max_stack_var_size);\n   else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n     gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive\");\n-  else if (!gfc_option.flag_automatic && gfc_option.flag_openmp)\n+  else if (!gfc_option.flag_automatic && gfc_option.gfc_flag_openmp)\n     gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive implied by \"\n \t\t     \"-fopenmp\");\n   else if (gfc_option.flag_max_stack_var_size != -2\n \t   && gfc_option.flag_recursive)\n     gfc_warning_now (\"Flag -frecursive overwrites -fmax-stack-var-size=%d\",\n \t\t     gfc_option.flag_max_stack_var_size);\n   else if (gfc_option.flag_max_stack_var_size != -2\n-\t   && gfc_option.flag_openmp)\n+\t   && gfc_option.gfc_flag_openmp)\n     gfc_warning_now (\"Flag -fmax-stack-var-size=%d overwrites -frecursive \"\n \t\t     \"implied by -fopenmp\", \n \t\t     gfc_option.flag_max_stack_var_size);\n@@ -375,7 +375,7 @@ gfc_post_options (const char **pfilename)\n     gfc_option.flag_max_stack_var_size = -1;\n \n   /* Implied -frecursive; implemented as -fmax-stack-var-size=-1.  */\n-  if (gfc_option.flag_max_stack_var_size == -2 && gfc_option.flag_openmp\n+  if (gfc_option.flag_max_stack_var_size == -2 && gfc_option.gfc_flag_openmp\n       && gfc_option.flag_automatic)\n     {\n       gfc_option.flag_recursive = 1;\n@@ -419,7 +419,7 @@ set_Wall (int setting)\n {\n   gfc_option.warn_aliasing = setting;\n   gfc_option.warn_ampersand = setting;\n-  gfc_option.warn_conversion = setting;\n+  gfc_option.gfc_warn_conversion = setting;\n   gfc_option.warn_line_truncation = setting;\n   gfc_option.warn_surprising = setting;\n   gfc_option.warn_tabs = !setting;\n@@ -581,7 +581,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wconversion:\n-      gfc_option.warn_conversion = value;\n+      gfc_option.gfc_warn_conversion = value;\n       break;\n \n     case OPT_Wconversion_extra:\n@@ -707,7 +707,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_fopenmp:\n-      gfc_option.flag_openmp = value;\n+      gfc_option.gfc_flag_openmp = value;\n       break;\n \n     case OPT_ffree_line_length_none:"}, {"sha": "268e6afc0499cc47f6d0338a7c03401bb360de54", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -693,7 +693,7 @@ next_free (void)\n \t  return decode_gcc_attribute ();\n \n \t}\n-      else if (c == '$' && gfc_option.flag_openmp)\n+      else if (c == '$' && gfc_option.gfc_flag_openmp)\n \t{\n \t  int i;\n \n@@ -780,7 +780,7 @@ next_fixed (void)\n \n \t      return decode_gcc_attribute ();\n \t    }\n-\t  else if (c == '$' && gfc_option.flag_openmp)\n+\t  else if (c == '$' && gfc_option.gfc_flag_openmp)\n \t    {\n \t      for (i = 0; i < 4; i++, c = gfc_next_char_literal (0))\n \t\tgcc_assert ((char) gfc_wide_tolower (c) == \"$omp\"[i]);"}, {"sha": "c5d255d8d4b486feb7e750cfed281eeafeefc2a3", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Character scanner.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -76,8 +76,6 @@ const char *gfc_source_file;\n static FILE *gfc_src_file;\n static gfc_char_t *gfc_src_preprocessor_lines[2];\n \n-extern int pedantic;\n-\n static struct gfc_file_change\n {\n   const char *filename;\n@@ -747,7 +745,7 @@ skip_free_comments (void)\n \t     2) handle OpenMP conditional compilation, where\n \t\t!$ should be treated as 2 spaces (for initial lines\n \t\tonly if followed by space).  */\n-\t  if (gfc_option.flag_openmp && at_bol)\n+\t  if (gfc_option.gfc_flag_openmp && at_bol)\n \t    {\n \t      locus old_loc = gfc_current_locus;\n \t      if (next_char () == '$')\n@@ -873,7 +871,7 @@ skip_fixed_comments (void)\n \t      && continue_line < gfc_linebuf_linenum (gfc_current_locus.lb))\n \t    continue_line = gfc_linebuf_linenum (gfc_current_locus.lb);\n \n-\t  if (gfc_option.flag_openmp)\n+\t  if (gfc_option.gfc_flag_openmp)\n \t    {\n \t      if (next_char () == '$')\n \t\t{\n@@ -1814,7 +1812,7 @@ include_line (gfc_char_t *line)\n \n   c = line;\n \n-  if (gfc_option.flag_openmp)\n+  if (gfc_option.gfc_flag_openmp)\n     {\n       if (gfc_current_form == FORM_FREE)\n \t{"}, {"sha": "457e8f6e85140f49f985111d3fc3c5ac47a965f5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -4682,7 +4682,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   /* Reset recursion-check variable.  */\n   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION)\n \t && !is_recursive\n-\t && !gfc_option.flag_openmp\n+\t && !gfc_option.gfc_flag_openmp\n \t && recurcheckvar != NULL_TREE)\n     {\n       gfc_add_modify (&cleanup, recurcheckvar, boolean_false_node);"}, {"sha": "dbabd18d74e48a48df6b3f24df6dcfbe39e74693", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1389,7 +1389,7 @@ ira_setup_eliminable_regset (void)\n       else\n \tdf_set_regs_ever_live (eliminables[i].from, true);\n     }\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n   if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))\n     {\n       SET_HARD_REG_BIT (eliminable_regset, HARD_FRAME_POINTER_REGNUM);"}, {"sha": "9c9b103c037ce93bd6df2cf2d9e68363b61ea48e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,3 +1,16 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* java-tree.h (flag_filelist_file, flag_assert, flag_jni,\n+\tflag_force_classes_archive_check, flag_redundant, flag_newer,\n+\tflag_use_divide_subroutine, flag_use_atomic_builtins,\n+\tflag_use_boehm_gc, flag_hash_synchronization,\n+\tflag_check_references, flag_optimize_sci, flag_indirect_classes,\n+\tflag_indirect_dispatch, flag_store_check,\n+\tflag_reduced_reflection): Remove.\n+\t* jcf-dump.c (flag_newer): Remove.\n+\t* jcf.h (quiet_flag): Remove.\n+\t* parse.h (quiet_flag): Remove.\n+\n 2010-09-28  Richard Henderson  <rth@redhat.com>\n \n \t* lang.c: Include \"target.h\"."}, {"sha": "d7c9996c5cde8b82b497b8598cbe0ae9f2888bc4", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -112,64 +112,11 @@ struct JCF;\n /* The virtual offset symbol table. Used by the runtime to fill out\n    the otable. */\n \n-extern int flag_filelist_file;\n-\n-/* When nonzero, permit the use of the assert keyword.  */\n-\n-extern int flag_assert;\n-\n-/* When nonzero, assume all native functions are implemented with\n-   JNI, not CNI.  */\n-\n-extern int flag_jni;\n-\n-/* When nonzero, always check for a non gcj generated classes archive.  */\n-\n-extern int flag_force_classes_archive_check;\n-\n /* Resource name.  */\n extern const char *resource_name;\n \n /* Turned to 1 if -Wall was encountered. See lang.c for their meanings.  */\n extern int flag_wall;\n-extern int flag_redundant;\n-\n-/* When nonzero, warn when source file is newer than matching class\n-   file.  */\n-extern int flag_newer;\n-\n-/* When nonzero, call a library routine to do integer divisions. */\n-extern int flag_use_divide_subroutine;\n-\n-/* When nonzero, use atomic builtins. */\n-extern int flag_use_atomic_builtins;\n-\n-/* When nonzero, generate code for the Boehm GC.  */\n-extern int flag_use_boehm_gc;\n-\n-/* When nonzero, assume the runtime uses a hash table to map an\n-   object to its synchronization structure.  */\n-extern int flag_hash_synchronization;\n-\n-/* When nonzero, generate checks for references to NULL.  */\n-extern int flag_check_references;\n-\n-/* Used through STATIC_CLASS_INIT_OPT_P to check whether static\n-   initialization optimization should be performed.  */\n-extern int flag_optimize_sci;\n-\n-/* Generate instances of Class at runtime.  */\n-extern int flag_indirect_classes;\n-\n-/* When nonzero, use offset tables for virtual method calls\n-   in order to improve binary compatibility. */\n-extern int flag_indirect_dispatch;\n-\n-/* When zero, don't generate runtime array store checks. */\n-extern int flag_store_check;\n-\n-/* When nonzero, generate only a limited set of class meta-data. */\n-extern int flag_reduced_reflection;\n \n /* The Java .class file that provides main_class;  the main input file. */\n extern GTY(()) struct JCF * current_jcf;"}, {"sha": "9956c41cd43dea577b4593d441f351ad4f4f6816", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -76,10 +76,6 @@ int flag_print_fields = 1;\n int flag_print_methods = 1;\n int flag_print_attributes = 1;\n \n-/* When nonzero, warn when source file is newer than matching class\n-   file.  */\n-int flag_newer = 1;\n-\n /* Print names of classes that have a \"main\" method. */\n int flag_print_main = 0;\n "}, {"sha": "b066b2967c3791f7695d20f5b039fa0f917957d0", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Utility macros to read Java(TM) .class files and byte codes.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -274,7 +274,6 @@ extern const char *jcf_write_base_directory;\n \n /* Debug macros, for the front end */\n \n-extern int quiet_flag;\n #ifdef VERBOSE_SKELETON\n #undef SOURCE_FRONTEND_DEBUG\n #define SOURCE_FRONTEND_DEBUG(X)\t\t\t\t\\"}, {"sha": "28f431c40fdbac6ffe2e375d5132e736c87e87ca", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Language parser definitions for the GNU compiler for the Java(TM) language.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2010 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GCC.\n@@ -28,7 +28,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n /* Extern global variable declarations */\n extern struct obstack temporary_obstack;\n-extern int quiet_flag;\n \n #ifdef VERBOSE_SKELETON\n #undef SOURCE_FRONTEND_DEBUG"}, {"sha": "c43557b1b035ca51111ee4e653d4b284e7d2965e", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 64, "deletions": 46, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -85,8 +85,19 @@ print \"#endif /* GCC_DRIVER */\"\n print \"\"\n \n have_save = 0;\n+print \"struct gcc_options global_options =\\n{\"\n for (i = 0; i < n_extra_vars; i++) {\n-\tprint extra_vars[i] \";\"\n+\tvar = extra_vars[i]\n+\tinit = extra_vars[i]\n+\tif (var ~ \"=\" ) {\n+\t\tsub(\".*= *\", \"\", init)\n+\t\tsub(\" *=.*\", \"\", var)\n+\t\tsub(\"^.*[ *]\", \"\", var)\n+\t} else {\n+\t\tinit = \"0\"\n+\t}\n+\tvar_seen[var] = 1\n+\tprint \"  \" init \", /* \" var \" */\"\n }\n for (i = 0; i < n_opts; i++) {\n \tif (flag_set_p(\"Save\", flags[i]))\n@@ -96,24 +107,31 @@ for (i = 0; i < n_opts; i++) {\n \tif (name == \"\")\n \t\tcontinue;\n \n-\tif (flag_set_p(\"VarExists\", flags[i])) {\n-\t\tcontinue;\n-\t}\n-\telse {\n-\t\tinit = opt_args(\"Init\", flags[i])\n-\t\tif (init != \"\")\n-\t\t\tinit = \" = \" init;\n-\t\telse if (name in var_seen)\n-\t\t\tcontinue;\n+\tinit = opt_args(\"Init\", flags[i])\n+\tif (init != \"\") {\n+\t\tif (name in var_init && var_init[name] != init)\n+\t\t\tprint \"#error multiple initializers for \" name\n+\t\tvar_init[name] = init\n \t}\n+}\n+for (i = 0; i < n_opts; i++) {\n+\tname = var_name(flags[i]);\n+\tif (name == \"\")\n+\t\tcontinue;\n+\n+\tif (name in var_seen)\n+\t\tcontinue;\n+\n+\tif (name in var_init)\n+\t\tinit = var_init[name]\n+\telse\n+\t\tinit = \"0\"\n \n-\tprint \"/* Set by -\" opts[i] \".\"\n-\tprint \"   \" help[i] \"  */\"\n-\tprint var_type(flags[i]) name init \";\"\n-\tprint \"\"\n+\tprint \"  \" init \", /* \" name \" */\"\n \n \tvar_seen[name] = 1;\n }\n+print \"};\"\n \n print \"\"\n print \"/* Local state variables.  */\"\n@@ -332,19 +350,19 @@ for (i = 0; i < n_opt_char; i++) {\n \n print \"\";\n for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  ptr->\" var_opt_other[i] \" = \" var_opt_other[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_other[i] \" = \" var_opt_other[i] \";\";\n }\n \n for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  ptr->\" var_opt_int[i] \" = \" var_opt_int[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_int[i] \" = \" var_opt_int[i] \";\";\n }\n \n for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  ptr->\" var_opt_short[i] \" = \" var_opt_short[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_short[i] \" = \" var_opt_short[i] \";\";\n }\n \n for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  ptr->\" var_opt_char[i] \" = \" var_opt_char[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_char[i] \" = \" var_opt_char[i] \";\";\n }\n \n print \"}\";\n@@ -356,19 +374,19 @@ print \"cl_optimization_restore (struct cl_optimization *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  \" var_opt_other[i] \" = ptr->\" var_opt_other[i] \";\";\n+\tprint \"  \" var_opt_other[i] \" = ptr->x_\" var_opt_other[i] \";\";\n }\n \n for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  \" var_opt_int[i] \" = ptr->\" var_opt_int[i] \";\";\n+\tprint \"  \" var_opt_int[i] \" = ptr->x_\" var_opt_int[i] \";\";\n }\n \n for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  \" var_opt_short[i] \" = ptr->\" var_opt_short[i] \";\";\n+\tprint \"  \" var_opt_short[i] \" = ptr->x_\" var_opt_short[i] \";\";\n }\n \n for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  \" var_opt_char[i] \" = ptr->\" var_opt_char[i] \";\";\n+\tprint \"  \" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n }\n \n print \"  targetm.override_options_after_change ();\";\n@@ -384,38 +402,38 @@ print \"{\";\n \n print \"  fputs (\\\"\\\\n\\\", file);\";\n for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  if (ptr->\" var_opt_other[i] \")\";\n+\tprint \"  if (ptr->x_\" var_opt_other[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_other[i] \"\\\",\";\n-\tprint \"             (unsigned long)ptr->\" var_opt_other[i] \");\";\n+\tprint \"             (unsigned long)ptr->x_\" var_opt_other[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  if (ptr->\" var_opt_int[i] \")\";\n+\tprint \"  if (ptr->x_\" var_opt_int[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_int[i] \"\\\",\";\n-\tprint \"             ptr->\" var_opt_int[i] \");\";\n+\tprint \"             ptr->x_\" var_opt_int[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  if (ptr->\" var_opt_short[i] \")\";\n+\tprint \"  if (ptr->x_\" var_opt_short[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_short[i] \"\\\",\";\n-\tprint \"             ptr->\" var_opt_short[i] \");\";\n+\tprint \"             ptr->x_\" var_opt_short[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  if (ptr->\" var_opt_char[i] \")\";\n+\tprint \"  if (ptr->x_\" var_opt_char[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_char[i] \"\\\",\";\n-\tprint \"             ptr->\" var_opt_char[i] \");\";\n+\tprint \"             ptr->x_\" var_opt_char[i] \");\";\n \tprint \"\";\n }\n \n@@ -482,19 +500,19 @@ print \"    targetm.target_option.save (ptr);\";\n print \"\";\n \n for (i = 0; i < n_target_other; i++) {\n-\tprint \"  ptr->\" var_target_other[i] \" = \" var_target_other[i] \";\";\n+\tprint \"  ptr->x_\" var_target_other[i] \" = \" var_target_other[i] \";\";\n }\n \n for (i = 0; i < n_target_int; i++) {\n-\tprint \"  ptr->\" var_target_int[i] \" = \" var_target_int[i] \";\";\n+\tprint \"  ptr->x_\" var_target_int[i] \" = \" var_target_int[i] \";\";\n }\n \n for (i = 0; i < n_target_short; i++) {\n-\tprint \"  ptr->\" var_target_short[i] \" = \" var_target_short[i] \";\";\n+\tprint \"  ptr->x_\" var_target_short[i] \" = \" var_target_short[i] \";\";\n }\n \n for (i = 0; i < n_target_char; i++) {\n-\tprint \"  ptr->\" var_target_char[i] \" = \" var_target_char[i] \";\";\n+\tprint \"  ptr->x_\" var_target_char[i] \" = \" var_target_char[i] \";\";\n }\n \n print \"}\";\n@@ -506,19 +524,19 @@ print \"cl_target_option_restore (struct cl_target_option *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_target_other; i++) {\n-\tprint \"  \" var_target_other[i] \" = ptr->\" var_target_other[i] \";\";\n+\tprint \"  \" var_target_other[i] \" = ptr->x_\" var_target_other[i] \";\";\n }\n \n for (i = 0; i < n_target_int; i++) {\n-\tprint \"  \" var_target_int[i] \" = ptr->\" var_target_int[i] \";\";\n+\tprint \"  \" var_target_int[i] \" = ptr->x_\" var_target_int[i] \";\";\n }\n \n for (i = 0; i < n_target_short; i++) {\n-\tprint \"  \" var_target_short[i] \" = ptr->\" var_target_short[i] \";\";\n+\tprint \"  \" var_target_short[i] \" = ptr->x_\" var_target_short[i] \";\";\n }\n \n for (i = 0; i < n_target_char; i++) {\n-\tprint \"  \" var_target_char[i] \" = ptr->\" var_target_char[i] \";\";\n+\tprint \"  \" var_target_char[i] \" = ptr->x_\" var_target_char[i] \";\";\n }\n \n # This must occur after the normal variables in case the code depends on those\n@@ -539,38 +557,38 @@ print \"{\";\n \n print \"  fputs (\\\"\\\\n\\\", file);\";\n for (i = 0; i < n_target_other; i++) {\n-\tprint \"  if (ptr->\" var_target_other[i] \")\";\n+\tprint \"  if (ptr->x_\" var_target_other[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n-\tprint \"             (unsigned long)ptr->\" var_target_other[i] \");\";\n+\tprint \"             (unsigned long)ptr->x_\" var_target_other[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_target_int; i++) {\n-\tprint \"  if (ptr->\" var_target_int[i] \")\";\n+\tprint \"  if (ptr->x_\" var_target_int[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_int[i] \"\\\",\";\n-\tprint \"             ptr->\" var_target_int[i] \");\";\n+\tprint \"             ptr->x_\" var_target_int[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_target_short; i++) {\n-\tprint \"  if (ptr->\" var_target_short[i] \")\";\n+\tprint \"  if (ptr->x_\" var_target_short[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_short[i] \"\\\",\";\n-\tprint \"             ptr->\" var_target_short[i] \");\";\n+\tprint \"             ptr->x_\" var_target_short[i] \");\";\n \tprint \"\";\n }\n \n for (i = 0; i < n_target_char; i++) {\n-\tprint \"  if (ptr->\" var_target_char[i] \")\";\n+\tprint \"  if (ptr->x_\" var_target_char[i] \")\";\n \tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_char[i] \"\\\",\";\n-\tprint \"             ptr->\" var_target_char[i] \");\";\n+\tprint \"             ptr->x_\" var_target_char[i] \");\";\n \tprint \"\";\n }\n "}, {"sha": "c15babdb6db29a69fd401a043a553021e91a66e4", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -75,10 +75,25 @@ print \"\"\n \n have_save = 0;\n \n+print \"#ifndef GENERATOR_FILE\"\n+print \"struct gcc_options\\n{\"\n+print \"#endif\"\n+\n for (i = 0; i < n_extra_vars; i++) {\n \tvar = extra_vars[i]\n \tsub(\" *=.*\", \"\", var)\n-\tprint \"extern \" var \";\"\n+\torig_var = var\n+\tname = var\n+\ttype = var\n+\tsub(\"^.*[ *]\", \"\", name)\n+\tsub(\" *\" name \"$\", \"\", type)\n+\tvar_seen[name] = 1\n+\tprint \"#ifdef GENERATOR_FILE\"\n+\tprint \"extern \" orig_var \";\"\n+\tprint \"#else\"\n+\tprint \"  \" type \" x_\" name \";\"\n+\tprint \"#define \" name \" global_options.x_\" name\n+\tprint \"#endif\"\n }\n \n for (i = 0; i < n_opts; i++) {\n@@ -93,8 +108,17 @@ for (i = 0; i < n_opts; i++) {\n \t\tcontinue;\n \n \tvar_seen[name] = 1;\n+\tprint \"#ifdef GENERATOR_FILE\"\n \tprint \"extern \" var_type(flags[i]) name \";\"\n+\tprint \"#else\"\n+\tprint \"  \" var_type(flags[i]) \"x_\" name \";\"\n+\tprint \"#define \" name \" global_options.x_\" name\n+\tprint \"#endif\"\n }\n+print \"#ifndef GENERATOR_FILE\"\n+print \"};\"\n+print \"extern struct gcc_options global_options;\"\n+print \"#endif\"\n print \"\"\n \n # All of the optimization switches gathered together so they can be saved and restored.\n@@ -114,8 +138,8 @@ n_opt_char = 2;\n n_opt_short = 0;\n n_opt_int = 0;\n n_opt_other = 0;\n-var_opt_char[0] = \"unsigned char optimize\";\n-var_opt_char[1] = \"unsigned char optimize_size\";\n+var_opt_char[0] = \"unsigned char x_optimize\";\n+var_opt_char[1] = \"unsigned char x_optimize_size\";\n \n for (i = 0; i < n_opts; i++) {\n \tif (flag_set_p(\"Optimization\", flags[i])) {\n@@ -129,16 +153,16 @@ for (i = 0; i < n_opts; i++) {\n \t\tvar_opt_seen[name]++;\n \t\totype = var_type_struct(flags[i]);\n \t\tif (otype ~ \"^((un)?signed +)?int *$\")\n-\t\t\tvar_opt_int[n_opt_int++] = otype name;\n+\t\t\tvar_opt_int[n_opt_int++] = otype \"x_\" name;\n \n \t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n-\t\t\tvar_opt_short[n_opt_short++] = otype name;\n+\t\t\tvar_opt_short[n_opt_short++] = otype \"x_\" name;\n \n \t\telse if (otype ~ \"^((un)?signed +)?char *$\")\n-\t\t\tvar_opt_char[n_opt_char++] = otype name;\n+\t\t\tvar_opt_char[n_opt_char++] = otype \"x_\" name;\n \n \t\telse\n-\t\t\tvar_opt_other[n_opt_other++] = otype name;\n+\t\t\tvar_opt_other[n_opt_other++] = otype \"x_\" name;\n \t}\n }\n \n@@ -198,20 +222,20 @@ if (have_save) {\n \t\t\tvar_save_seen[name]++;\n \t\t\totype = var_type_struct(flags[i])\n \t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n-\t\t\t\tvar_target_int[n_target_int++] = otype name;\n+\t\t\t\tvar_target_int[n_target_int++] = otype \"x_\" name;\n \n \t\t\telse if (otype ~ \"^((un)?signed +)?short *$\")\n-\t\t\t\tvar_target_short[n_target_short++] = otype name;\n+\t\t\t\tvar_target_short[n_target_short++] = otype \"x_\" name;\n \n \t\t\telse if (otype ~ \"^((un)?signed +)?char *$\")\n-\t\t\t\tvar_target_char[n_target_char++] = otype name;\n+\t\t\t\tvar_target_char[n_target_char++] = otype \"x_\" name;\n \n \t\t\telse\n-\t\t\t\tvar_target_other[n_target_other++] = otype name;\n+\t\t\t\tvar_target_other[n_target_other++] = otype \"x_\" name;\n \t\t}\n \t}\n } else {\n-\tvar_target_int[n_target_int++] = \"int target_flags\";\n+\tvar_target_int[n_target_int++] = \"int x_target_flags\";\n }\n \n for (i = 0; i < n_target_other; i++) {"}, {"sha": "ff59fd2fa1290fa16224b1a0ca848c28e5748145", "filename": "gcc/opts.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -123,6 +123,11 @@ static enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS]\n static enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS]\n   = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY };\n \n+/* Run the second compilation of -fcompare-debug.  Not defined using\n+   Var in common.opt because this is used in Ada code and so must be\n+   an actual variable not a macro.  */\n+int flag_compare_debug;\n+\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n \n@@ -1635,7 +1640,7 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_Wsystem_headers:\n-      global_dc->warn_system_headers = value;\n+      global_dc->dc_warn_system_headers = value;\n       break;\n \n     case OPT_Wunused:\n@@ -1700,6 +1705,10 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       fix_register (arg, 0, 0);\n       break;\n \n+    case OPT_fcompare_debug_second:\n+      flag_compare_debug = value;\n+      break;\n+\n     case OPT_fdbg_cnt_:\n       dbg_cnt_process_opt (arg);\n       break;\n@@ -2083,7 +2092,7 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_w:\n-      global_dc->inhibit_warnings = true;\n+      global_dc->dc_inhibit_warnings = true;\n       break;\n \n     case OPT_fuse_linker_plugin:\n@@ -2186,11 +2195,11 @@ fast_math_flags_set_p (void)\n bool\n fast_math_flags_struct_set_p (struct cl_optimization *opt)\n {\n-  return (!opt->flag_trapping_math\n-\t  && opt->flag_unsafe_math_optimizations\n-\t  && opt->flag_finite_math_only\n-\t  && !opt->flag_signed_zeros\n-\t  && !opt->flag_errno_math);\n+  return (!opt->x_flag_trapping_math\n+\t  && opt->x_flag_unsafe_math_optimizations\n+\t  && opt->x_flag_finite_math_only\n+\t  && !opt->x_flag_signed_zeros\n+\t  && !opt->x_flag_errno_math);\n }\n \n /* Handle a debug output -g switch.  EXTENDED is true or false to support"}, {"sha": "c8192dec0e93a86eb41cc9457f1e30d2f18c280c", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,7 +1,7 @@\n /* Compute different info about registers.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996\n    1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009  Free Software Foundation, Inc.\n+   2009, 2010  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -487,7 +487,7 @@ init_reg_sets_1 (void)\n \t}\n       else if (i == FRAME_POINTER_REGNUM)\n \t;\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       else if (i == HARD_FRAME_POINTER_REGNUM)\n \t;\n #endif"}, {"sha": "2535ab74ab9b2a0c45bec9be099cb7122333f717", "filename": "gcc/regrename.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -200,7 +200,7 @@ regrename_optimize (void)\n       if (frame_pointer_needed)\n \t{\n \t  add_to_hard_reg_set (&unavailable, Pmode, FRAME_POINTER_REGNUM);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t  add_to_hard_reg_set (&unavailable, Pmode, HARD_FRAME_POINTER_REGNUM);\n #endif\n \t}\n@@ -233,7 +233,7 @@ regrename_optimize (void)\n #endif\n \n \t  if (fixed_regs[reg] || global_regs[reg]\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t      || (frame_pointer_needed && reg == HARD_FRAME_POINTER_REGNUM)\n #else\n \t      || (frame_pointer_needed && reg == FRAME_POINTER_REGNUM)"}, {"sha": "e396e2537af90ff3eb365f5d1f589596a131b591", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Search an insn for pseudo regs that must be in hard regs and are not.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -5157,7 +5157,7 @@ find_reloads_address (enum machine_mode mode, rtx *memrefloc, rtx ad,\n       if ((regno_ok_for_base_p (REGNO (operand), mode, inner_code,\n \t\t\t\tGET_CODE (addend))\n \t   || operand == frame_pointer_rtx\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t   || operand == hard_frame_pointer_rtx\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM"}, {"sha": "1024cf1688cadda812927b540887cba2cbee5a4c", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -831,7 +831,7 @@ reload (rtx first, int global)\n \tspill_hard_reg (from, 1);\n     }\n \n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n   if (frame_pointer_needed)\n     spill_hard_reg (HARD_FRAME_POINTER_REGNUM, 1);\n #endif\n@@ -3232,7 +3232,7 @@ eliminate_regs_in_insn (rtx insn, int replace)\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \tif (ep->from_rtx == SET_DEST (old_set) && ep->can_eliminate)\n \t  {\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t    /* If this is setting the frame pointer register to the\n \t       hardware frame pointer register and this is an elimination\n \t       that will be done (tested above), this insn is really"}, {"sha": "6a33ed0bf9dddadf42fc050a2ab7866909d198a4", "filename": "gcc/resource.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for computing resource usage of specific insns.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -335,7 +335,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n \t  if (frame_pointer_needed)\n \t    {\n \t      SET_HARD_REG_BIT (res->regs, FRAME_POINTER_REGNUM);\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n \t      SET_HARD_REG_BIT (res->regs, HARD_FRAME_POINTER_REGNUM);\n #endif\n \t    }\n@@ -1148,7 +1148,7 @@ init_resource_info (rtx epilogue_insn)\n   if (frame_pointer_needed)\n     {\n       SET_HARD_REG_BIT (end_of_function_needs.regs, FRAME_POINTER_REGNUM);\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       SET_HARD_REG_BIT (end_of_function_needs.regs, HARD_FRAME_POINTER_REGNUM);\n #endif\n       if (! EXIT_IGNORE_STACK"}, {"sha": "3aba473564289f133a81aacbb626417a371b7726", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1980,6 +1980,16 @@ extern GTY(()) rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];\n #define HARD_FRAME_POINTER_REGNUM FRAME_POINTER_REGNUM\n #endif\n \n+#ifndef HARD_FRAME_POINTER_IS_FRAME_POINTER\n+#define HARD_FRAME_POINTER_IS_FRAME_POINTER \\\n+  (HARD_FRAME_POINTER_REGNUM == FRAME_POINTER_REGNUM)\n+#endif\n+\n+#ifndef HARD_FRAME_POINTER_IS_ARG_POINTER\n+#define HARD_FRAME_POINTER_IS_ARG_POINTER \\\n+  (HARD_FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM)\n+#endif\n+\n /* Index labels for global_rtl.  */\n enum global_rtl_index\n {\n@@ -1993,13 +2003,13 @@ enum global_rtl_index\n #if FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM\n   GR_ARG_POINTER = GR_FRAME_POINTER,\n #endif\n-#if HARD_FRAME_POINTER_REGNUM == FRAME_POINTER_REGNUM\n+#if HARD_FRAME_POINTER_IS_FRAME_POINTER\n   GR_HARD_FRAME_POINTER = GR_FRAME_POINTER,\n #else\n   GR_HARD_FRAME_POINTER,\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-#if HARD_FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM\n+#if HARD_FRAME_POINTER_IS_ARG_POINTER\n   GR_ARG_POINTER = GR_HARD_FRAME_POINTER,\n #else\n   GR_ARG_POINTER,"}, {"sha": "0e0c7c82d1c01dcbf556a01ec53c21bb2b5da0e3", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1236,7 +1236,7 @@ mark_unavailable_hard_regs (def_t def, struct reg_rename *reg_rename_p,\n      frame pointer, or we could not discover its class.  */\n   if (fixed_regs[regno]\n       || global_regs[regno]\n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       || (frame_pointer_needed && regno == HARD_FRAME_POINTER_REGNUM)\n #else\n       || (frame_pointer_needed && regno == FRAME_POINTER_REGNUM)\n@@ -1263,7 +1263,7 @@ mark_unavailable_hard_regs (def_t def, struct reg_rename *reg_rename_p,\n \tSET_HARD_REG_BIT (reg_rename_p->unavailable_hard_regs,\n                           FRAME_POINTER_REGNUM + i);\n \n-#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n       for (i = hard_regno_nregs[HARD_FRAME_POINTER_REGNUM][Pmode]; i--;)\n \tSET_HARD_REG_BIT (reg_rename_p->unavailable_hard_regs,\n                           HARD_FRAME_POINTER_REGNUM + i);"}, {"sha": "21aab7aa0179ce3fae7af31bb850e60aa8bbe289", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1834,7 +1834,7 @@ expand_nl_goto_receiver (void)\n        decrementing fp by STARTING_FRAME_OFFSET.  */\n     emit_move_insn (virtual_stack_vars_rtx, hard_frame_pointer_rtx);\n \n-#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+#if !HARD_FRAME_POINTER_IS_ARG_POINTER\n   if (fixed_regs[ARG_POINTER_REGNUM])\n     {\n #ifdef ELIMINABLE_REGS"}, {"sha": "3b6f4fae9d8dfcc5505400f28f8fd14026cf26bb", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,3 +1,17 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (cpp_options): Rename warn_deprecated,\n+\twarn_traditional, warn_long_long and pedantic.\n+\t* directives.c (directive_diagnostics, _cpp_handle_directive):\n+\tUpdate names of cpp_options members.\n+\t* expr.c (cpp_classify_number, eval_token): Update names of\n+\tcpp_options members.\n+\t* init.c (cpp_create_reader, post_options): Update names of\n+\tcpp_options members.\n+\t* internal.h (CPP_PEDANTIC, CPP_WTRADITIONAL): Update names of\n+\tcpp_options members.\n+\t* macro.c (parse_params): Update names of cpp_options members.\n+\n 2010-09-15  Ian Lance Taylor  <iant@google.com>\n \n \t* init.c: Fix type name in comment."}, {"sha": "3d128554c122d1383973df7157a44787398f2394", "filename": "libcpp/directives.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -354,7 +354,7 @@ directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)\n \tcpp_error (pfile, CPP_DL_PEDWARN, \"#%s is a GCC extension\", dir->name);\n       else if (((dir->flags & DEPRECATED) != 0\n \t\t|| (dir == &dtable[T_IMPORT] && !CPP_OPTION (pfile, objc)))\n-\t       && CPP_OPTION (pfile, warn_deprecated))\n+\t       && CPP_OPTION (pfile, cpp_warn_deprecated))\n \tcpp_warning (pfile, CPP_W_DEPRECATED,\n                      \"#%s is a deprecated GCC extension\", dir->name);\n     }\n@@ -400,7 +400,7 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n \n   if (was_parsing_args)\n     {\n-      if (CPP_OPTION (pfile, pedantic))\n+      if (CPP_OPTION (pfile, cpp_pedantic))\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t     \"embedding a directive within macro arguments is not portable\");\n       pfile->state.parsing_args = 0;"}, {"sha": "d2fec2a56a6ec47a9a70da6ff579b25eb698df99", "filename": "libcpp/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -418,7 +418,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t{\n \t  int u_or_i = (result & (CPP_N_UNSIGNED|CPP_N_IMAGINARY));\n \t  int large = (result & CPP_N_WIDTH) == CPP_N_LARGE\n-\t\t       && CPP_OPTION (pfile, warn_long_long);\n+\t\t       && CPP_OPTION (pfile, cpp_warn_long_long);\n \n \t  if (u_or_i || large)\n \t    cpp_warning (pfile, large ? CPP_W_LONG_LONG : CPP_W_TRADITIONAL,\n@@ -427,7 +427,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t}\n \n       if ((result & CPP_N_WIDTH) == CPP_N_LARGE\n-\t  && CPP_OPTION (pfile, warn_long_long))\n+\t  && CPP_OPTION (pfile, cpp_warn_long_long))\n         {\n           const char *message = CPP_OPTION (pfile, cplusplus) \n \t\t                ? N_(\"use of C++0x long long integer constant\")\n@@ -814,7 +814,7 @@ eval_token (cpp_reader *pfile, const cpp_token *token)\n \t  if (CPP_PEDANTIC (pfile))\n \t    cpp_error (pfile, CPP_DL_PEDWARN,\n \t\t       \"assertions are a GCC extension\");\n-\t  else if (CPP_OPTION (pfile, warn_deprecated))\n+\t  else if (CPP_OPTION (pfile, cpp_warn_deprecated))\n \t    cpp_warning (pfile, CPP_W_DEPRECATED,\n \t\t         \"assertions are a deprecated extension\");\n \t}"}, {"sha": "7c39a83b8753312e7ded3ee92d46b2c11115fef4", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -319,7 +319,7 @@ struct cpp_options\n   unsigned char print_include_names;\n \n   /* Nonzero means complain about deprecated features.  */\n-  unsigned char warn_deprecated;\n+  unsigned char cpp_warn_deprecated;\n \n   /* Nonzero means warn if slash-star appears in a comment.  */\n   unsigned char warn_comments;\n@@ -336,10 +336,10 @@ struct cpp_options\n \n   /* Nonzero means warn about various incompatibilities with\n      traditional C.  */\n-  unsigned char warn_traditional;\n+  unsigned char cpp_warn_traditional;\n \n   /* Nonzero means warn about long long numeric constants.  */\n-  unsigned char warn_long_long;\n+  unsigned char cpp_warn_long_long;\n \n   /* Nonzero means warn about text after an #endif (or #else).  */\n   unsigned char warn_endif_labels;\n@@ -383,7 +383,7 @@ struct cpp_options\n   unsigned char std;\n \n   /* Nonzero means give all the error messages the ANSI standard requires.  */\n-  unsigned char pedantic;\n+  unsigned char cpp_pedantic;\n \n   /* Nonzero means we're looking at already preprocessed code, so don't\n      bother trying to do macro expansion and whatnot.  */"}, {"sha": "cfc16e8f8d4ef9da57caa4073722afa46fd06a65", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -160,8 +160,8 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   CPP_OPTION (pfile, operator_names) = 1;\n   CPP_OPTION (pfile, warn_trigraphs) = 2;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n-  CPP_OPTION (pfile, warn_deprecated) = 1;\n-  CPP_OPTION (pfile, warn_long_long) = 0;\n+  CPP_OPTION (pfile, cpp_warn_deprecated) = 1;\n+  CPP_OPTION (pfile, cpp_warn_long_long) = 0;\n   CPP_OPTION (pfile, dollars_in_ident) = 1;\n   CPP_OPTION (pfile, warn_dollars) = 1;\n   CPP_OPTION (pfile, warn_variadic_macros) = 1;\n@@ -698,7 +698,7 @@ post_options (cpp_reader *pfile)\n {\n   /* -Wtraditional is not useful in C++ mode.  */\n   if (CPP_OPTION (pfile, cplusplus))\n-    CPP_OPTION (pfile, warn_traditional) = 0;\n+    CPP_OPTION (pfile, cpp_warn_traditional) = 0;\n \n   /* Permanently disable macro expansion if we are rescanning\n      preprocessed text.  Read preprocesed source in ISO mode.  */"}, {"sha": "e0ac285d82c90a2ac8ec9aad2b0a9653d2e319c9", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,6 +1,6 @@\n /* Part of CPP library.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007,\n-   2008, 2009 Free Software Foundation, Inc.\n+   2008, 2009, 2010 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -526,8 +526,8 @@ cpp_in_system_header (cpp_reader *pfile)\n {\n   return pfile->buffer ? pfile->buffer->sysp : 0;\n }\n-#define CPP_PEDANTIC(PF) CPP_OPTION (PF, pedantic)\n-#define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, warn_traditional)\n+#define CPP_PEDANTIC(PF) CPP_OPTION (PF, cpp_pedantic)\n+#define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, cpp_warn_traditional)\n \n static inline int cpp_in_primary_file (cpp_reader *);\n static inline int"}, {"sha": "d9324a350efc29839f93a39b2f49ad257389cd09", "filename": "libcpp/macro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3339d0f3328e3bae21e460dde81ba4bdcfcd959/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "patch": "@@ -1,7 +1,7 @@\n /* Part of CPP library.  (Macro and #define handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1589,13 +1589,13 @@ parse_params (cpp_reader *pfile, cpp_macro *macro)\n \t\t\t\t   pfile->spec_nodes.n__VA_ARGS__);\n \t      pfile->state.va_args_ok = 1;\n \t      if (! CPP_OPTION (pfile, c99)\n-\t\t  && CPP_OPTION (pfile, pedantic)\n+\t\t  && CPP_OPTION (pfile, cpp_pedantic)\n \t\t  && CPP_OPTION (pfile, warn_variadic_macros))\n \t\tcpp_pedwarning\n                   (pfile, CPP_W_VARIADIC_MACROS,\n \t\t   \"anonymous variadic macros were introduced in C99\");\n \t    }\n-\t  else if (CPP_OPTION (pfile, pedantic)\n+\t  else if (CPP_OPTION (pfile, cpp_pedantic)\n \t\t   && CPP_OPTION (pfile, warn_variadic_macros))\n \t    cpp_pedwarning (pfile, CPP_W_VARIADIC_MACROS,\n \t\t            \"ISO C does not permit named variadic macros\");"}]}