{"sha": "3881dee9f01e9de110260ca5ee2be0a50d4e361b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4MWRlZTlmMDFlOWRlMTEwMjYwY2E1ZWUyYmUwYTUwZDRlMzYxYg==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2012-01-27T13:47:41Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2012-01-27T13:47:41Z"}, "message": "re PR middle-end/51389 (GCC uses up to 75GB of virtual memory)\n\n        PR middle-end/51389\n        * Makefile.in (tree-data-ref.o): Depend on $(PARAMS_H).\n        * tree-data-ref.h (find_data_references_in_loop): Remove declaration.\n        * tree-data-ref.c (find_data_references_in_loop): Make static.\n        (compute_all_dependences): Change return type to bool.  Bail out\n        for too many datarefs in a loop.  Move the hunk resetting the data\n        dependences vector from ...\n        (compute_data_dependences_for_loop): ... here.  Account for\n        compute_all_dependences returning false.\n        (compute_data_dependences_for_bb): Likewise.\n        * params.def (PARAM_LOOP_MAX_DATAREFS_FOR_DATADEPS): New param.\n        * doc/invoke.texi (loop-max-datarefs-for-datadeps): Document it.\n\nFrom-SVN: r183624", "tree": {"sha": "083a3f9c465c92d16c9531e2235042ab1fc90ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083a3f9c465c92d16c9531e2235042ab1fc90ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3881dee9f01e9de110260ca5ee2be0a50d4e361b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3881dee9f01e9de110260ca5ee2be0a50d4e361b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3881dee9f01e9de110260ca5ee2be0a50d4e361b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3881dee9f01e9de110260ca5ee2be0a50d4e361b/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "102344e274f23609bc9bc008ded4a6fd501e5549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102344e274f23609bc9bc008ded4a6fd501e5549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102344e274f23609bc9bc008ded4a6fd501e5549"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "fa0988664465427372fcac51c6ede2517c438e71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -1,3 +1,18 @@\n+2012-01-27  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR middle-end/51389\n+\t* Makefile.in (tree-data-ref.o): Depend on $(PARAMS_H).\n+\t* tree-data-ref.h (find_data_references_in_loop): Remove declaration.\n+\t* tree-data-ref.c (find_data_references_in_loop): Make static.\n+\t(compute_all_dependences): Change return type to bool.  Bail out\n+\tfor too many datarefs in a loop.  Move the hunk resetting the data\n+\tdependences vector from ...\n+\t(compute_data_dependences_for_loop): ... here.  Account for\n+\tcompute_all_dependences returning false.\n+\t(compute_data_dependences_for_bb): Likewise.\n+\t* params.def (PARAM_LOOP_MAX_DATAREFS_FOR_DATADEPS): New param.\n+\t* doc/invoke.texi (loop-max-datarefs-for-datadeps): Document it.\n+\n 2012-01-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51959"}, {"sha": "43295aa2729c43d272173027cbe7948ec7bef826", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -2598,7 +2598,7 @@ tree-scalar-evolution.o : tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_PASS_H) $(PARAMS_H) gt-tree-scalar-evolution.h\n tree-data-ref.o : tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    gimple-pretty-print.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n-   $(TREE_PASS_H) langhooks.h tree-affine.h\n+   $(TREE_PASS_H) langhooks.h tree-affine.h $(PARAMS_H)\n sese.o : sese.c sese.h $(CONFIG_H) $(SYSTEM_H) coretypes.h tree-pretty-print.h \\\n    $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) tree-pass.h value-prof.h\n graphite.o : graphite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) \\"}, {"sha": "622b2309d956587dacecd4562ce871a65172a0f0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -9115,6 +9115,13 @@ with more basic blocks than this parameter won't have loop invariant\n motion optimization performed on them.  The default value of the\n parameter is 1000 for -O1 and 10000 for -O2 and above.\n \n+@item loop-max-datarefs-for-datadeps\n+Building data dapendencies is expensive for very large loops.  This\n+parameter limits the number of data references in loops that are\n+considered for data dependence analysis.  These large loops will not\n+be handled then by the optimizations using loop data dependencies.\n+The default value is 1000.\n+\n @item max-vartrack-size\n Sets a maximum number of hash table slots to use during variable\n tracking dataflow analysis of any function.  If this limit is exceeded"}, {"sha": "d7cdd7b0e63ed15df9cebe462b59d6e9cbccad94", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -820,6 +820,12 @@ DEFPARAM (PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION,\n \t  \"maximum number of basic blocks per function to be analyzed by Graphite\",\n \t  100, 0, 0)\n \n+/* Avoid data dependence analysis on very large loops.  */\n+DEFPARAM (PARAM_LOOP_MAX_DATAREFS_FOR_DATADEPS,\n+\t  \"loop-max-datarefs-for-datadeps\",\n+\t  \"Maximum number of datarefs in loop for building loop data dependencies\",\n+\t  1000, 0, 0)\n+\n /* Avoid doing loop invariant motion on very large loops.  */\n \n DEFPARAM (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP,"}, {"sha": "b8dfa317f17aade6f4146231fe40ea56a3ff5a50", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -85,6 +85,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"tree-affine.h\"\n+#include \"params.h\"\n \n static struct datadep_stats\n {\n@@ -4134,9 +4135,10 @@ compute_affine_dependence (struct data_dependence_relation *ddr,\n /* Compute in DEPENDENCE_RELATIONS the data dependence graph for all\n    the data references in DATAREFS, in the LOOP_NEST.  When\n    COMPUTE_SELF_AND_RR is FALSE, don't compute read-read and self\n-   relations.  */\n+   relations.  Return true when successful, i.e. data references number\n+   is small enough to be handled.  */\n \n-void\n+bool\n compute_all_dependences (VEC (data_reference_p, heap) *datarefs,\n \t\t\t VEC (ddr_p, heap) **dependence_relations,\n \t\t\t VEC (loop_p, heap) *loop_nest,\n@@ -4146,6 +4148,18 @@ compute_all_dependences (VEC (data_reference_p, heap) *datarefs,\n   struct data_reference *a, *b;\n   unsigned int i, j;\n \n+  if ((int) VEC_length (data_reference_p, datarefs)\n+      > PARAM_VALUE (PARAM_LOOP_MAX_DATAREFS_FOR_DATADEPS))\n+    {\n+      struct data_dependence_relation *ddr;\n+\n+      /* Insert a single relation into dependence_relations:\n+\t chrec_dont_know.  */\n+      ddr = initialize_data_dependence_relation (NULL, NULL, loop_nest);\n+      VEC_safe_push (ddr_p, heap, *dependence_relations, ddr);\n+      return false;\n+    }\n+\n   FOR_EACH_VEC_ELT (data_reference_p, datarefs, i, a)\n     for (j = i + 1; VEC_iterate (data_reference_p, datarefs, j, b); j++)\n       if (DR_IS_WRITE (a) || DR_IS_WRITE (b) || compute_self_and_rr)\n@@ -4164,6 +4178,8 @@ compute_all_dependences (VEC (data_reference_p, heap) *datarefs,\n         if (loop_nest)\n    \t  compute_affine_dependence (ddr, VEC_index (loop_p, loop_nest, 0));\n       }\n+\n+  return true;\n }\n \n /* Stores the locations of memory references in STMT to REFERENCES.  Returns\n@@ -4338,7 +4354,7 @@ find_data_references_in_bb (struct loop *loop, basic_block bb,\n    TODO: This function should be made smarter so that it can handle address\n    arithmetic as if they were array accesses, etc.  */\n \n-tree\n+static tree\n find_data_references_in_loop (struct loop *loop,\n \t\t\t      VEC (data_reference_p, heap) **datarefs)\n {\n@@ -4427,19 +4443,10 @@ compute_data_dependences_for_loop (struct loop *loop,\n      dependences.  */\n   if (!loop\n       || !find_loop_nest (loop, loop_nest)\n-      || find_data_references_in_loop (loop, datarefs) == chrec_dont_know)\n-    {\n-      struct data_dependence_relation *ddr;\n-\n-      /* Insert a single relation into dependence_relations:\n-\t chrec_dont_know.  */\n-      ddr = initialize_data_dependence_relation (NULL, NULL, *loop_nest);\n-      VEC_safe_push (ddr_p, heap, *dependence_relations, ddr);\n-      res = false;\n-    }\n-  else\n-    compute_all_dependences (*datarefs, dependence_relations, *loop_nest,\n-\t\t\t     compute_self_and_read_read_dependences);\n+      || find_data_references_in_loop (loop, datarefs) == chrec_dont_know\n+      || !compute_all_dependences (*datarefs, dependence_relations, *loop_nest,\n+\t\t\t\t   compute_self_and_read_read_dependences))\n+    res = false;\n \n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n@@ -4507,9 +4514,8 @@ compute_data_dependences_for_bb (basic_block bb,\n   if (find_data_references_in_bb (NULL, bb, datarefs) == chrec_dont_know)\n     return false;\n \n-  compute_all_dependences (*datarefs, dependence_relations, NULL,\n-                           compute_self_and_read_read_dependences);\n-  return true;\n+  return compute_all_dependences (*datarefs, dependence_relations, NULL,\n+\t\t\t\t  compute_self_and_read_read_dependences);\n }\n \n /* Entry point (for testing only).  Analyze all the data references"}, {"sha": "df639ca6617ef2e0a112e7a52434567d6f46d130", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3881dee9f01e9de110260ca5ee2be0a50d4e361b/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=3881dee9f01e9de110260ca5ee2be0a50d4e361b", "patch": "@@ -394,8 +394,6 @@ extern bool compute_data_dependences_for_loop (struct loop *, bool,\n extern bool compute_data_dependences_for_bb (basic_block, bool,\n                                              VEC (data_reference_p, heap) **,\n                                              VEC (ddr_p, heap) **);\n-extern tree find_data_references_in_loop (struct loop *,\n-                                          VEC (data_reference_p, heap) **);\n extern void print_direction_vector (FILE *, lambda_vector, int);\n extern void print_dir_vectors (FILE *, VEC (lambda_vector, heap) *, int);\n extern void print_dist_vectors (FILE *, VEC (lambda_vector, heap) *, int);\n@@ -426,7 +424,7 @@ extern bool find_loop_nest (struct loop *, VEC (loop_p, heap) **);\n extern struct data_dependence_relation *initialize_data_dependence_relation\n      (struct data_reference *, struct data_reference *, VEC (loop_p, heap) *); \n extern void compute_self_dependence (struct data_dependence_relation *);\n-extern void compute_all_dependences (VEC (data_reference_p, heap) *,\n+extern bool compute_all_dependences (VEC (data_reference_p, heap) *,\n \t\t\t\t     VEC (ddr_p, heap) **, VEC (loop_p, heap) *,\n \t\t\t\t     bool);\n extern tree find_data_references_in_bb (struct loop *, basic_block,"}]}