{"sha": "53a66787c2365e213ecbe13a310ddf5292aafc55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhNjY3ODdjMjM2NWUyMTNlY2JlMTNhMzEwZGRmNTI5MmFhZmM1NQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-05-20T17:23:17Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-05-20T17:23:17Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1028", "tree": {"sha": "216db215cee3fc821a20ed67eb41514048624fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/216db215cee3fc821a20ed67eb41514048624fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53a66787c2365e213ecbe13a310ddf5292aafc55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a66787c2365e213ecbe13a310ddf5292aafc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a66787c2365e213ecbe13a310ddf5292aafc55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a66787c2365e213ecbe13a310ddf5292aafc55/comments", "author": null, "committer": null, "parents": [{"sha": "754a4d82e32c12735c84a4d786e0fe28bd1713b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754a4d82e32c12735c84a4d786e0fe28bd1713b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754a4d82e32c12735c84a4d786e0fe28bd1713b1"}], "stats": {"total": 281, "additions": 200, "deletions": 81}, "files": [{"sha": "fee9b813079c7927039ae4cd20a59f1b35ad6e98", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 200, "deletions": 81, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a66787c2365e213ecbe13a310ddf5292aafc55/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a66787c2365e213ecbe13a310ddf5292aafc55/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=53a66787c2365e213ecbe13a310ddf5292aafc55", "patch": "@@ -217,17 +217,17 @@\n (define_insn \"\"\n  [(set (reg:CCFP 0)\n        (match_operator:CCFP 2 \"comparison_operator\"\n-\t\t\t    [(match_operand:SF 0 \"register_operand\" \"fxy\")\n-\t\t\t     (match_operand:SF 1 \"register_operand\" \"fxy\")]))]\n+\t\t\t    [(match_operand:SF 0 \"register_operand\" \"fx\")\n+\t\t\t     (match_operand:SF 1 \"register_operand\" \"fx\")]))]\n  \"\"\n  \"fcmp,sgl,%Y2 %0,%1\"\n  [(set_attr \"type\" \"fpcc\")])\n \n (define_insn \"\"\n  [(set (reg:CCFP 0)\n        (match_operator:CCFP 2 \"comparison_operator\"\n-\t\t\t    [(match_operand:DF 0 \"register_operand\" \"fxy\")\n-\t\t\t     (match_operand:DF 1 \"register_operand\" \"fxy\")]))]\n+\t\t\t    [(match_operand:DF 0 \"register_operand\" \"fx\")\n+\t\t\t     (match_operand:DF 1 \"register_operand\" \"fx\")]))]\n  \"\"\n  \"fcmp,dbl,%Y2 %0,%1\"\n  [(set_attr \"type\" \"fpcc\")])\n@@ -709,8 +709,8 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"=r,r,Q,!r,!*f*x*y,!*f*x*y\")\n-\t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,!*f*x*y,!r,!*f*x*y\"))]\n+\t\t\t  \"=r,r,Q,!r,!*f*x,!*f*x\")\n+\t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,!*f*x*y,!r,!*f*x\"))]\n   \"\"\n   \"@\n    copy %r1,%0\n@@ -762,13 +762,24 @@\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,?*r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t (high:SI (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"addil L'%G2,%1\"\n+  \"@\n+   addil L'%G2,%1\n+   ldil L'%G2,%0\\;add %0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"1,2\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t (high:SI (match_operand 2 \"\" \"\"))))]\n+  \"reload_completed && REGNO (operands[0]) != 1\"\n+  [(set (match_dup 0) (high:SI (match_dup 2)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -799,7 +810,7 @@\n ;;; Experimental\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"fp_reg_operand\" \"*f*x*y\")\n+  [(set (match_operand:SI 0 \"fp_reg_operand\" \"*f*x\")\n \t(match_operand:SI 1 \"short_memory_operand\" \"T\"))]\n   \"\"\n   \"fldws%F1 %1,%0\"\n@@ -808,7 +819,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"short_memory_operand\" \"T\")\n-\t(match_operand:SI 1 \"fp_reg_operand\" \"*f*x*y\"))]\n+\t(match_operand:SI 1 \"fp_reg_operand\" \"*f*x\"))]\n   \"\"\n   \"fstws%F0 %1,%0\"\n   [(set_attr \"type\" \"fpstore\")\n@@ -949,7 +960,7 @@\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movdf pattern.\n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=?r,r,f\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=?r,r,fx\")\n \t(match_operand:DF 1 \"\" \"?E,G,m\"))]\n   \"GET_CODE (operands[1]) == CONST_DOUBLE\"\n   \"*\n@@ -979,9 +990,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"=fxy,r,Q,Q,fxy,&r,?fxy,?r\")\n+\t\t\t  \"=fx,r,Q,Q,fx,&r,?fx,?r\")\n \t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"fxy,r,fxy,r,Q,Q,r,fxy\"))]\n+\t\t\t  \"fx,r,fx,r,Q,Q,r,fx\"))]\n   \"\"\n   \"*\n {\n@@ -1002,11 +1013,47 @@\n     DONE;\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(high:DI (match_operand 1 \"\" \"\")))]\n+  \"check_pic (1)\"\n+  \"*\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+\n+  if (GET_CODE (op1) == CONST_INT)\n+    {\n+      operands[0] = operand_subword (op0, 1, 0, DImode);\n+      output_asm_insn (\\\"ldil L'%1,%0\\\", operands);\n+\n+      operands[0] = operand_subword (op0, 0, 0, DImode);\n+      if (INTVAL (op1) < 0)\n+\toutput_asm_insn (\\\"ldo -1(0),%0\\\", operands);\n+      else\n+\toutput_asm_insn (\\\"ldo 0(0),%0\\\", operands);\n+    }\n+  else if (GET_CODE (op1) == CONST_DOUBLE)\n+    {\n+      operands[0] = operand_subword (op0, 1, 0, DImode);\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (op1));\n+      output_asm_insn (\\\"ldil L'%1,%0\\\", operands);\n+\n+      operands[0] = operand_subword (op0, 0, 0, DImode);\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_HIGH (op1));\n+      output_asm_insn (singlemove_string (operands), operands);\n+    }\n+  else\n+    abort ();\n+}\"\n+  [(set_attr \"type\" \"move\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"=r,Q,&r,&r,*f*x*y,*f*x*y,*f*x*y,r,Q\")\n+\t\t\t  \"=r,Q,&r,&r,*f*x,*f*x,*f*x,r,Q\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t  \"r,r,Q,i,r,*f*x*y,Q,*f*x*y,*f*x*y\"))]\n+\t\t\t  \"r,r,Q,i,r,*f*x,Q,*f*x,*f*x\"))]\n   \"\"\n   \"*\n {\n@@ -1017,6 +1064,25 @@\n   [(set_attr \"type\" \"move,store,load,misc,multi,fpalu,fpload,multi,fpstore\")\n    (set_attr \"length\" \"2,3,3,3,3,2,3,3,3\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0,r\")\n+\t\t   (match_operand:DI 2 \"immediate_operand\" \"in,in\")))]\n+  \"\"\n+  \"*\n+{\n+  /* Don't output a 64 bit constant, since we can't trust the assembler to\n+     handle it correctly.  */\n+  if (GET_CODE (operands[2]) == CONST_DOUBLE)\n+    operands[2] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[2]));\n+  if (which_alternative == 1)\n+    output_asm_insn (\\\"copy %1,%0\\\", operands);\n+  return \\\"ldo R'%G2(%R1),%R0\\\";\n+}\"\n+  ;; Need to set length for this arith insn because operand2\n+  ;; is not an \"arith_operand\".\n+  [(set_attr \"length\" \"1,2\")])\n+\n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n@@ -1029,9 +1095,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"=fxy,r,r,fxy,fxy,r,Q,Q\")\n+\t\t\t  \"=fx,r,r,fx,fx,r,Q,Q\")\n \t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"fxy,r,!fxy,!r,Q,Q,fxy,r\"))]\n+\t\t\t  \"fx,r,!fx,!r,Q,Q,fx,r\"))]\n   \"\"\n   \"@\n    fcpy %1,%0\n@@ -1168,17 +1234,17 @@\n ;; Conversions between float and double.\n \n (define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n \t(float_extend:DF\n-\t (match_operand:SF 1 \"register_operand\" \"fxy\")))]\n+\t (match_operand:SF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fcnvff,sgl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"fxy\")))]\n+\t (match_operand:DF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fcnvff,dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n@@ -1195,16 +1261,16 @@\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general floatsisf2 pattern.\n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fxy\")\n+  [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"\"\n   \"* return output_floatsisf2 (operands);\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"3\")])\n \n (define_insn \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=fxy\")\n-\t(float:SF (match_operand:SI 1 \"register_operand\" \"fxyr\")))]\n+  [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"fxr\")))]\n   \"\"\n   \"* return output_floatsisf2 (operands);\"\n   [(set_attr \"type\" \"fpalu\")\n@@ -1214,16 +1280,16 @@\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general floatsidf2 pattern.\n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=fxy\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"\"\n   \"* return output_floatsidf2 (operands);\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"3\")])\n \n (define_insn \"floatsidf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=fxy\")\n-\t(float:DF (match_operand:SI 1 \"register_operand\" \"fxyr\")))]\n+  [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"fxr\")))]\n   \"\"\n   \"* return output_floatsidf2 (operands);\"\n   [(set_attr \"type\" \"fpalu\")\n@@ -1233,9 +1299,9 @@\n ;; Truncation is performed as part of the conversion.\n \n (define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,fxy\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"fxy,fxy\"))))\n-   (clobber (match_scratch:SI 2 \"=&fxy,X\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,fx\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"fx,fx\"))))\n+   (clobber (match_scratch:SI 2 \"=&fx,X\"))]\n   \"\"\n   \"@\n    fcnvfxt,sgl,sgl %1,%2\\;fstws %2,-16(30)\\;ldw -16(30),%0\n@@ -1244,9 +1310,9 @@\n    (set_attr \"length\" \"3,1\")])\n \n (define_insn \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,fxy\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"fxy,fxy\"))))\n-   (clobber (match_scratch:SI 2 \"=&fxy,X\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,fx\")\n+\t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"fx,fx\"))))\n+   (clobber (match_scratch:SI 2 \"=&fx,X\"))]\n   \"\"\n   \"@\n    fcnvfxt,dbl,sgl %1,%2\\;fstws %2,-16(30)\\;ldw -16(30),%0\n@@ -1283,16 +1349,6 @@\n   \"sub %R1,%R2,%R0\\;subb %1,%2,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-;(define_insn \"subsi3\"\n-;  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-;\t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"r,I,r\")\n-;\t\t  (match_operand:SI 2 \"arith_operand\" \"r,r,J\")))]\n-;  \"\"\n-;  \"@\n-;   sub %1,%2,%0\n-;   subi %1,%2,%0\n-;   ldo %n2(%1),%0\")\n-\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"r,I\")\n@@ -1644,107 +1700,107 @@\n ;; Floating point arithmetic instructions.\n \n (define_insn \"adddf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(plus:DF (match_operand:DF 1 \"register_operand\" \"fxy\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(plus:DF (match_operand:DF 1 \"register_operand\" \"fx\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fadd,dbl %1,%2,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"addsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(plus:SF (match_operand:SF 1 \"register_operand\" \"fxy\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(plus:SF (match_operand:SF 1 \"register_operand\" \"fx\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fadd,sgl %1,%2,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"subdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(minus:DF (match_operand:DF 1 \"register_operand\" \"fxy\")\n-\t\t  (match_operand:DF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(minus:DF (match_operand:DF 1 \"register_operand\" \"fx\")\n+\t\t  (match_operand:DF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsub,dbl %1,%2,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"subsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(minus:SF (match_operand:SF 1 \"register_operand\" \"fxy\")\n-\t\t  (match_operand:SF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(minus:SF (match_operand:SF 1 \"register_operand\" \"fx\")\n+\t\t  (match_operand:SF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsub,sgl %1,%2,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"muldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(mult:DF (match_operand:DF 1 \"register_operand\" \"fxy\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"fx\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fmpy,dbl %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"mulsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(mult:SF (match_operand:SF 1 \"register_operand\" \"fxy\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"fx\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fmpy,sgl %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(div:DF (match_operand:DF 1 \"register_operand\" \"fxy\")\n-\t\t(match_operand:DF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"fx\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fdiv,dbl %1,%2,%0\"\n   [(set_attr \"type\" \"fpdivdbl\")])\n \n (define_insn \"divsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(div:SF (match_operand:SF 1 \"register_operand\" \"fxy\")\n-\t\t(match_operand:SF 2 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(div:SF (match_operand:SF 1 \"register_operand\" \"fx\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fdiv,sgl %1,%2,%0\"\n   [(set_attr \"type\" \"fpdivsgl\")])\n \n (define_insn \"negdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(neg:DF (match_operand:DF 1 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsub,dbl 0,%1,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"negsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(neg:SF (match_operand:SF 1 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsub,sgl 0, %1,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"absdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fabs,dbl %0,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"abssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=fxy\")\n-\t(abs:SF (match_operand:SF 1 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fabs,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")])\n \n (define_insn \"sqrtdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=fxy\")\n-\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"fxy\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsqrt,dbl %1,%0\"\n   [(set_attr \"type\" \"fpsqrtdbl\")])\n \n (define_insn \"sqrtsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fsqrt,sgl %1,%0\"\n   [(set_attr \"type\" \"fpsqrtsgl\")])\n@@ -2110,6 +2166,69 @@\n   \"\"\n   \"dep %3,%2+%1-1,%1,%0\")\n \n+;; This insn is used for some loop tests, typically loops reversed when\n+;; strength reduction is used.  It is actually created when the instruction\n+;; combination phase combines the special loop test.  Since this insn\n+;; is both a jump insn and has an output, it must deal with it's own\n+;; reloads, hence the `m' constraints.  The `!' constraints direct reload\n+;; to not choose the register alternatives in the event a reload is needed.\n+\n+(define_insn \"decrement_and_branch_until_zero\"\n+  [(set (pc)\n+\t(if_then_else\n+\t  (ge (plus:SI (match_operand:SI 0 \"register_operand\" \"+!r,m\")\n+\t\t       (const_int -1))\n+\t      (const_int 0))\n+\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t  (pc)))\n+   (set (match_dup 0)\n+\t(plus:SI (match_dup 0)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:SI 2 \"=X,r\"))]\n+  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+\"*\n+{\n+  if (which_alternative == 0)\n+    if (get_attr_length (insn) == 1)\n+      return \\\"addib,>= -1,%0,%1%#\\\";\n+    else\n+      return \\\"addi,< -1,%0,%0\\;bl %1,0%#\\\";\n+  else\n+    {\n+      output_asm_insn (\\\"ldw %0,%2\\;ldo -1(%2),%2\\;stw %2,%0\\\", operands);\n+      if (get_attr_length (insn) == 4)\n+\treturn \\\"comb,> 0,%2,%1%#\\\";\n+      else\n+\treturn \\\"comclr,<= 0,%2,0\\;bl %1,0%#\\\";\n+    }\n+}\"\n+[(set_attr \"type\" \"cbranch\")\n+ (set (attr \"length\")\n+      (if_then_else (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t    (if_then_else (lt (abs (minus (match_dup 1)\n+\t\t\t\t\t\t  (plus (pc) (const_int 2))))\n+\t\t\t\t      (const_int 1023))\n+\t\t\t\t  (const_int 1)\n+\t\t\t\t  (const_int 2))\n+\t\t    (if_then_else (lt (match_dup 1)\n+\t\t\t\t      (pc))\n+\t\t\t\t  (if_then_else\n+\t\t\t\t   (lt (abs (minus (match_dup 1)\n+\t\t\t\t\t\t   (plus (pc)\n+\t\t\t\t\t\t\t (const_int 5))))\n+\t\t\t\t       (const_int 1023))\n+\t\t\t\t   (const_int 4)\n+\t\t\t\t   (const_int 5))\n+\t\t\t\t  (if_then_else\n+\t\t\t\t   (lt (abs (minus (match_dup 1)\n+\t\t\t\t\t\t   (plus (pc)\n+\t\t\t\t\t\t\t (const_int 2))))\n+\t\t\t\t       (const_int 1023))\n+\t\t\t\t   (const_int 4)\n+\t\t\t\t   (const_int 5)))))])\n+\n+\n+\n ;;- Local variables:\n ;;- mode:emacs-lisp\n ;;- comment-start: \";;- \""}]}