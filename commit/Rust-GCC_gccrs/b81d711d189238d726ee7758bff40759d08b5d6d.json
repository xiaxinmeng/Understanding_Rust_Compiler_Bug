{"sha": "b81d711d189238d726ee7758bff40759d08b5d6d", "node_id": "C_kwDOANBUbNoAKGI4MWQ3MTFkMTg5MjM4ZDcyNmVlNzc1OGJmZjQwNzU5ZDA4YjVkNmQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-06T13:00:45Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:05Z"}, "message": "RISC-V: Add vmulhsu.vv C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmulhsu_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmulhsu_vv_tumu-3.C: New test.", "tree": {"sha": "ec982b3ab35deb8bf63cddf32309cf29a1029bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec982b3ab35deb8bf63cddf32309cf29a1029bd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81d711d189238d726ee7758bff40759d08b5d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81d711d189238d726ee7758bff40759d08b5d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81d711d189238d726ee7758bff40759d08b5d6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81d711d189238d726ee7758bff40759d08b5d6d/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a792199d80d7a780b1ec506e29a282a66bd554f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a792199d80d7a780b1ec506e29a282a66bd554f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a792199d80d7a780b1ec506e29a282a66bd554f"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "7ba9ab0642a92d52d3b90125e63db66f785154ac", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-1.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmulhsu(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vbool1_t mask,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vbool2_t mask,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vbool4_t mask,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vbool64_t mask,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vbool32_t mask,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vbool16_t mask,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vbool8_t mask,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "09499dd661740170ec6fd22038bbcfb178a62173", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-2.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmulhsu(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vbool1_t mask,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vbool2_t mask,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vbool4_t mask,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vbool64_t mask,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vbool32_t mask,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vbool16_t mask,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vbool8_t mask,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ec4bec76dd3750962e671992c5b8d8c0a1181886", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv-3.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu(vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(op1,op2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmulhsu(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu(vbool8_t mask,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu(vbool4_t mask,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu(vbool2_t mask,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu(vbool1_t mask,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu(vbool16_t mask,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu(vbool8_t mask,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu(vbool4_t mask,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu(vbool2_t mask,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu(vbool32_t mask,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu(vbool16_t mask,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu(vbool8_t mask,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu(vbool4_t mask,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu(vbool64_t mask,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu(vbool32_t mask,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu(vbool16_t mask,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu(vbool8_t mask,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b3dd3c51102b3ac3ff081a28c68a0f8982b0b13a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-1.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "17849ee2f7b0375842eb2e9791ad4059f886d8ef", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-2.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7b7200abec90a2068861f5fd2b2b7b919221c7cd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_mu-3.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4220c3723b4964806512bb8b0bb503513192ef3c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-1.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "814b61c4e6e33d095785757648254a8a73c9f86c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-2.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "7662c94a9def15e435dceaeb65e7e9ccff973e7e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tu-3.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "f66b8e4ea387ba776f7275f183295bb195345e55", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-1.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ca91825c6cd45bacd0da67aabf982e3bfff05746", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-2.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5420852d494dc7707d823be62e47e296cdb7f7a3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tum-3.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "65eddd5d4e86549a8aa05b1eed2c75458b8a8169", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-1.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4fa9e98d0b6fd6c128d746a625e8228d6f89af7b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-2.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c05680f5acc74127354f74ffb4969e6d5247b56d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmulhsu_vv_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81d711d189238d726ee7758bff40759d08b5d6d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmulhsu_vv_tumu-3.C?ref=b81d711d189238d726ee7758bff40759d08b5d6d", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulhsu_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulhsu_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulhsu_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulhsu_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulhsu_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulhsu_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulhsu_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmulhsu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulhsu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}