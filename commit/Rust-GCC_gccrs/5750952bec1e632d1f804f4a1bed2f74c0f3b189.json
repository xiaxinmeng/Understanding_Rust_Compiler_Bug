{"sha": "5750952bec1e632d1f804f4a1bed2f74c0f3b189", "node_id": "C_kwDOANBUbNoAKDU3NTA5NTJiZWMxZTYzMmQxZjgwNGY0YTFiZWQyZjc0YzBmM2IxODk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-07T23:36:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-08T13:31:05Z"}, "message": "libstdc++: Fix filesystem::remove_all for Windows [PR104161]\n\nThe recursive_directory_iterator::__erase member was failing for\nWindows, because the entry._M_type value is always file_type::none\n(because _Dir_base::advance doesn't populate it for Windows) and\ntop.unlink uses fs::remove which sets an error using the\nsystem_category. That meant that ec.value() was a Windows error code and\nnot an errno value, so the comparisons to EPERM and EISDIR failed.\nInstead of depending on a specific Windows error code for attempting to\nremove a directory, just use directory_entry::refresh() to query the\ntype first. This doesn't avoid the TOCTTOU races with directory\nsymlinks, but we can't avoid them on Windows without openat and\nunlinkat, and creating symlinks requires admin privs on Windows anyway.\n\nThis also fixes the fs::remove_all(const path&) overload, which was\nsupposed to use the same logic as the other overload, but I forgot to\nchange it before my previous commit.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104161\n\t* src/c++17/fs_dir.cc (fs::recursive_directory_iterator::__erase):\n\t[i_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Refresh entry._M_type member,\n\tinstead of checking for errno values indicating a directory.\n\t* src/c++17/fs_ops.cc (fs::remove_all(const path&)): Use similar\n\tlogic to non-throwing overload.\n\t(fs::remove_all(const path&, error_code&)): Add comments.\n\t* src/filesystem/ops-common.h: Likewise.", "tree": {"sha": "3af6c6536fccae1c06adad8f1de8694d554e6dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af6c6536fccae1c06adad8f1de8694d554e6dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5750952bec1e632d1f804f4a1bed2f74c0f3b189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5750952bec1e632d1f804f4a1bed2f74c0f3b189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5750952bec1e632d1f804f4a1bed2f74c0f3b189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5750952bec1e632d1f804f4a1bed2f74c0f3b189/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decde11183bdccc46587d6614b75f3d56a2f2e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decde11183bdccc46587d6614b75f3d56a2f2e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decde11183bdccc46587d6614b75f3d56a2f2e4a"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "54f135d2baf95063574a2ff7648a88636a788d3f", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=5750952bec1e632d1f804f4a1bed2f74c0f3b189", "patch": "@@ -476,6 +476,16 @@ fs::recursive_directory_iterator::__erase(error_code* ecptr)\n     {\n       auto& top = _M_dirs->top();\n \n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+      // _Dir::unlink uses fs::remove which uses std::system_category() for\n+      // Windows errror codes, so we can't just check for EPERM and EISDIR.\n+      // Use directory_entry::refresh() here to check if we have a directory.\n+      // This can be a TOCTTOU race, but we don't have openat or unlinkat to\n+      // solve that on Windows, and generally don't support symlinks anyway.\n+      if (top.entry._M_type == file_type::none)\n+\ttop.entry.refresh();\n+#endif\n+\n       if (top.entry._M_type == file_type::directory)\n \t{\n \t  _Dir dir = top.open_subdir(skip_permission_denied, nofollow, ec);\n@@ -498,12 +508,13 @@ fs::recursive_directory_iterator::__erase(error_code* ecptr)\n \t}\n       else if (top.unlink(ec))\n \tbreak; // Success\n+#if ! _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       else if (top.entry._M_type == file_type::none)\n \t{\n \t  // We did not have a cached type, so it's possible that top.entry\n \t  // is actually a directory, and that's why the unlink above failed.\n #ifdef EPERM\n-\t  // POSIX.1-2017 says unlinking a directory returns EPERM,\n+\t  // POSIX.1-2017 says unlink on a directory returns EPERM,\n \t  // but LSB allows EISDIR too. Some targets don't even define EPERM.\n \t  if (ec.value() == EPERM || ec.value() == EISDIR)\n #else\n@@ -516,6 +527,7 @@ fs::recursive_directory_iterator::__erase(error_code* ecptr)\n \t      continue;\n \t    }\n \t}\n+#endif\n     }\n \n   if (!ec)"}, {"sha": "4552a730bf2e67d2c59550d82d1ad21029eee36a", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=5750952bec1e632d1f804f4a1bed2f74c0f3b189", "patch": "@@ -1280,21 +1280,36 @@ fs::remove(const path& p, error_code& ec) noexcept\n std::uintmax_t\n fs::remove_all(const path& p)\n {\n+  error_code ec;\n   uintmax_t count = 0;\n-  auto st = filesystem::status(p);\n-  if (!exists(st))\n-    return 0;\n-  if (is_directory(st))\n+  recursive_directory_iterator dir(p, directory_options{64|128}, ec);\n+  switch (ec.value()) // N.B. assumes ec.category() == std::generic_category()\n+  {\n+  case 0:\n+    // Iterate over the directory removing everything.\n     {\n-      recursive_directory_iterator dir(p, directory_options{64|128}), end;\n-      path failed;\n+      const recursive_directory_iterator end;\n       while (dir != end)\n \t{\n-\t  failed = dir->path();\n-\t  dir.__erase();\n+\t  dir.__erase(); // throws on error\n \t  ++count;\n \t}\n     }\n+    // Directory is empty now, will remove it below.\n+    break;\n+  case ENOENT:\n+    // Our work here is done.\n+    return 0;\n+  case ENOTDIR:\n+  case ELOOP:\n+    // Not a directory, will remove below.\n+    break;\n+  default:\n+    // An error occurred.\n+    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove all\", p, ec));\n+  }\n+\n+  // Remove p itself, which is either a non-directory or is now empty.\n   return count + fs::remove(p);\n }\n \n@@ -1303,11 +1318,12 @@ fs::remove_all(const path& p, error_code& ec)\n {\n   uintmax_t count = 0;\n   recursive_directory_iterator dir(p, directory_options{64|128}, ec);\n-  switch (ec.value())\n+  switch (ec.value()) // N.B. assumes ec.category() == std::generic_category()\n   {\n   case 0:\n+    // Iterate over the directory removing everything.\n     {\n-      recursive_directory_iterator end;\n+      const recursive_directory_iterator end;\n       while (dir != end)\n \t{\n \t  dir.__erase(&ec);\n@@ -1316,6 +1332,7 @@ fs::remove_all(const path& p, error_code& ec)\n \t  ++count;\n \t}\n     }\n+    // Directory is empty now, will remove it below.\n     break;\n   case ENOENT:\n     // Our work here is done.\n@@ -1329,6 +1346,7 @@ fs::remove_all(const path& p, error_code& ec)\n     // An error occurred.\n     return -1;\n   }\n+\n   // Remove p itself, which is either a non-directory or is now empty.\n   if (int last = fs::remove(p, ec); !ec)\n     return count + last;"}, {"sha": "978e87241541fec9d84f9fc2af20ac636ccb71c5", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5750952bec1e632d1f804f4a1bed2f74c0f3b189/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=5750952bec1e632d1f804f4a1bed2f74c0f3b189", "patch": "@@ -63,6 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __last_system_error() noexcept\n   {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    // N.B. use error_code::default_error_condition() to convert to generic.\n     return {(int)::GetLastError(), std::system_category()};\n #else\n     return {errno, std::generic_category()};"}]}