{"sha": "505ce5abd48385f1b415b6ed0aed80e5b378249c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1Y2U1YWJkNDgzODVmMWI0MTViNmVkMGFlZDgwZTViMzc4MjQ5Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-17T21:56:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-17T21:56:21Z"}, "message": "C++: -Wwrite-strings: use location of string constant\n\nConsider:\n\nextern int callee (const char *one, char *two, const char *three);\n\nint test ()\n{\n  return callee (\"first\", \"second\", \"third\");\n}\n\nfor which -Wwrite-strings was emitting:\n\nWwrite-strings.C: In function 'int test()':\nWwrite-strings.C:10:44: warning: ISO C++ forbids converting a string constant to 'char*' [-Wwrite-strings]\n10 |   return callee (\"first\", \"second\", \"third\");\n   |                                            ^\n\nThis patch fixes the warning so that it underlines the pertinent argument\nat the callsite:\n\nWwrite-strings.C: In function 'int test()':\nWwrite-strings.C:10:27: warning: ISO C++ forbids converting a string constant to 'char*' [-Wwrite-strings]\n10 |   return callee (\"first\", \"second\", \"third\");\n   |                           ^~~~~~~~\n\nIdeally we ought to also issue a \"note\" highlighting the pertinent\nparameter within the decl, but that's not readily available, so I'm\nsaving it for another patch.\n\ngcc/cp/ChangeLog:\n\t* typeck.c (string_conv_p): Extract location from EXP and use it\n\tin preference to input_location when issuing warnings.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/conversion/Wwrite-strings.C: New test.\n\nFrom-SVN: r263635", "tree": {"sha": "beb75700fa738bc1c04197dd61012336a42fd914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb75700fa738bc1c04197dd61012336a42fd914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505ce5abd48385f1b415b6ed0aed80e5b378249c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505ce5abd48385f1b415b6ed0aed80e5b378249c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505ce5abd48385f1b415b6ed0aed80e5b378249c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505ce5abd48385f1b415b6ed0aed80e5b378249c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bdea5282fffac0643c4111482e85cfa7c6f7e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bdea5282fffac0643c4111482e85cfa7c6f7e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bdea5282fffac0643c4111482e85cfa7c6f7e9f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "d8be93089b4c6e555d5acad45f84d4b795c51e2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=505ce5abd48385f1b415b6ed0aed80e5b378249c", "patch": "@@ -1,3 +1,8 @@\n+2018-08-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* typeck.c (string_conv_p): Extract location from EXP and use it\n+\tin preference to input_location when issuing warnings.\n+\n 2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* call.c: Include \"gcc-rich-location.h\"."}, {"sha": "8c13ae9b19ba18e18b7988a7ece16217d6c6732a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=505ce5abd48385f1b415b6ed0aed80e5b378249c", "patch": "@@ -2208,6 +2208,8 @@ string_conv_p (const_tree totype, const_tree exp, int warn)\n       && !same_type_p (t, wchar_type_node))\n     return 0;\n \n+  location_t loc = EXPR_LOC_OR_LOC (exp, input_location);\n+\n   STRIP_ANY_LOCATION_WRAPPER (exp);\n \n   if (TREE_CODE (exp) == STRING_CST)\n@@ -2230,13 +2232,13 @@ string_conv_p (const_tree totype, const_tree exp, int warn)\n   if (warn)\n     {\n       if (cxx_dialect >= cxx11)\n-\tpedwarn (input_location, OPT_Wwrite_strings,\n+\tpedwarn (loc, OPT_Wwrite_strings,\n \t\t \"ISO C++ forbids converting a string constant to %qT\",\n \t\t totype);\n       else\n-\twarning (OPT_Wwrite_strings,\n-\t\t \"deprecated conversion from string constant to %qT\",\n-\t\t totype);\n+\twarning_at (loc, OPT_Wwrite_strings,\n+\t\t    \"deprecated conversion from string constant to %qT\",\n+\t\t    totype);\n     }\n \n   return 1;"}, {"sha": "b8677d729bc371a5478652e86c3da3829afc3530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=505ce5abd48385f1b415b6ed0aed80e5b378249c", "patch": "@@ -1,3 +1,7 @@\n+2018-08-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/conversion/Wwrite-strings.C: New test.\n+\n 2018-08-17  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Xianmiao Qu  <xianmiao_qu@c-sky.com>"}, {"sha": "f6dbb1506994544f9f4ec160e88e4025306d2065", "filename": "gcc/testsuite/g++.dg/conversion/Wwrite-strings.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2FWwrite-strings.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505ce5abd48385f1b415b6ed0aed80e5b378249c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2FWwrite-strings.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2FWwrite-strings.C?ref=505ce5abd48385f1b415b6ed0aed80e5b378249c", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* Verify that -Wwrite-strings underlines the string literal in question.  */\n+\n+extern int callee (const char *one, char *two, const char *three);\n+\n+int test_1 ()\n+{\n+  return callee (\"first\", \"second\", \"third\"); // { dg-warning \"string constant to 'char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee (\"first\", \"second\", \"third\");\n+                           ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // TODO: underline the pertinent param in the decl of callee\n+}\n+\n+char *test_2 (void)\n+{\n+  return \"foo\"; // { dg-warning \"string constant to 'char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return \"foo\";\n+          ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}