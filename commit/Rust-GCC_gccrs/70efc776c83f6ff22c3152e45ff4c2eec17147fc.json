{"sha": "70efc776c83f6ff22c3152e45ff4c2eec17147fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlZmM3NzZjODNmNmZmMjJjMzE1MmU0NWZmNGMyZWVjMTcxNDdmYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-08T04:59:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-08T04:59:33Z"}, "message": "(finish_decl): Error if block-scope static var has incomplete type.\n\n(complete_array_type): Correctly set MAXINDEX to one less than array size.\n\nFrom-SVN: r5672", "tree": {"sha": "85a3065cf1116f574dd97c706a7e873bc7705765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a3065cf1116f574dd97c706a7e873bc7705765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70efc776c83f6ff22c3152e45ff4c2eec17147fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70efc776c83f6ff22c3152e45ff4c2eec17147fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70efc776c83f6ff22c3152e45ff4c2eec17147fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70efc776c83f6ff22c3152e45ff4c2eec17147fc/comments", "author": null, "committer": null, "parents": [{"sha": "2dca20cd247a5502fc1fe2f0d1e63a29c3b92ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dca20cd247a5502fc1fe2f0d1e63a29c3b92ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dca20cd247a5502fc1fe2f0d1e63a29c3b92ae3"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "f8a52a31e462be0f82535fc4605df7dc2b153211", "filename": "gcc/c-decl.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70efc776c83f6ff22c3152e45ff4c2eec17147fc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70efc776c83f6ff22c3152e45ff4c2eec17147fc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=70efc776c83f6ff22c3152e45ff4c2eec17147fc", "patch": "@@ -1294,39 +1294,33 @@ duplicate_decls (newdecl, olddecl)\n   if (TREE_CODE (olddecl) != TREE_CODE (newdecl))\n     {\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN (olddecl))\n+\t  && (DECL_BUILT_IN (olddecl)\n+\t      || DECL_BUILT_IN_NONANSI (olddecl)))\n \t{\n-\t  /* If you declare a built-in function name as static, the\n-\t     built-in definition is overridden,\n+\t  /* If you declare a built-in or predefined function name as static,\n+\t     the old definition is overridden,\n \t     but optionally warn this was a bad choice of name.  */\n \t  if (!TREE_PUBLIC (newdecl))\n \t    {\n-\t      if (warn_shadow)\n+\t      if (!warn_shadow)\n+\t\t;\n+\t      else if (DECL_BUILT_IN (olddecl))\n \t\twarning_with_decl (newdecl, \"shadowing built-in function `%s'\");\n+\t      else\n+\t\twarning_with_decl (newdecl, \"shadowing library function `%s'\");\n \t    }\n \t  /* Likewise, if the built-in is not ansi, then programs can\n \t     override it even globally without an error.  */\n+\t  else if (! DECL_BUILT_IN (olddecl))\n+\t    warning_with_decl (newdecl,\n+\t\t\t       \"library function `%s' declared as non-function\");\n+\n \t  else if (DECL_BUILT_IN_NONANSI (olddecl))\n \t    warning_with_decl (newdecl,\n \t\t\t       \"built-in function `%s' declared as non-function\");\n-\t  else\n-\t    error_with_decl (newdecl,\n-\t\t\t     \"built-in function `%s' declared as non-function\");\n-\t}\n-      else if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t       && DECL_BUILT_IN_NONANSI (olddecl))\n-\t{\n-\t  /* If overriding decl is static,\n-\t     optionally warn this was a bad choice of name.  */\n-\t  if (!TREE_PUBLIC (newdecl))\n-\t    {\n-\t      if (warn_shadow)\n-\t\twarning_with_decl (newdecl, \"shadowing library function `%s'\");\n-\t    }\n-\t  /* Otherwise, always warn.  */\n \t  else\n \t    warning_with_decl (newdecl,\n-\t\t\t       \"library function `%s' declared as non-function\");\n+\t\t\t     \"built-in function `%s' declared as non-function\");\n \t}\n       else\n \t{\n@@ -3474,9 +3468,11 @@ finish_decl (decl, init, asmspec_tree)\n \t      ?\n \t\t/* A static variable with an incomplete type\n \t\t   is an error if it is initialized.\n+\t\t   Also if it is not file scope.\n \t\t   Otherwise, let it through, but if it is not `extern'\n \t\t   then it may cause an error message later.  */\n-\t\tDECL_INITIAL (decl) != 0\n+\t\t(DECL_INITIAL (decl) != 0\n+\t\t || current_binding_level != global_binding_level)\n \t      :\n \t\t/* An automatic variable with an incomplete type\n \t\t   is an error.  */"}]}