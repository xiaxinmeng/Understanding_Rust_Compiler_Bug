{"sha": "58b475a2233630b1737bbdab986f08510d62cd3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiNDc1YTIyMzM2MzBiMTczN2JiZGFiOTg2ZjA4NTEwZDYyY2QzYQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-06-24T20:28:24Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-06-24T21:08:46Z"}, "message": "[PATCH, PR target/94954] Fix wrong codegen for vec_pack_to_short_fp32() builtin\n\nHi,\n  Fix codegen for builtin vec_pack_to_short_fp32.  This includes adding\na define_insn for xvcvsphp, and adding a new define_expand for\nconvert_4f32_8f16.\n\n2020-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\tPR target/94954\n\n\tgcc\n\t* config/rs6000/altivec.h (vec_pack_to_short_fp32): Update.\n\t* config/rs6000/altivec.md (UNSPEC_CONVERT_4F32_8F16): New unspec.\n\t(convert_4f32_8f16): New define_expand\n\t* config/rs6000/rs6000-builtin.def (convert_4f32_8f16): New builtin define\n\tand overload.\n\t* config/rs6000/rs6000-call.c (P9V_BUILTIN_VEC_CONVERT_4F32_8F16): New\n\toverloaded builtin entry.\n\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPHP): New unspec.\n\t(vsx_xvcvsphp): New define_insn.\n\n\tgcc/testsuite\n\t* gcc.target/powerpc/builtins-1-p9-runnable.c: Update.", "tree": {"sha": "6a94749a66f04fae864eca8cac91d2539fef17bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a94749a66f04fae864eca8cac91d2539fef17bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b475a2233630b1737bbdab986f08510d62cd3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b475a2233630b1737bbdab986f08510d62cd3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b475a2233630b1737bbdab986f08510d62cd3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b475a2233630b1737bbdab986f08510d62cd3a/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6506e23691a72e1e724977e8ee8b9f3db74015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6506e23691a72e1e724977e8ee8b9f3db74015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6506e23691a72e1e724977e8ee8b9f3db74015"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "bb1524f4a6793a192d36623387a5a950fad49382", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -433,7 +433,7 @@\n #define vec_first_match_or_eos_index __builtin_vec_first_match_or_eos_index\n #define vec_first_mismatch_index __builtin_vec_first_mismatch_index\n #define vec_first_mismatch_or_eos_index __builtin_vec_first_mismatch_or_eos_index\n-#define vec_pack_to_short_fp32 __builtin_vec_convert_4f32_8i16\n+#define vec_pack_to_short_fp32 __builtin_vec_convert_4f32_8f16\n #define vec_parity_lsbb __builtin_vec_vparity_lsbb\n #define vec_vctz __builtin_vec_vctz\n #define vec_cnttz __builtin_vec_vctz"}, {"sha": "2ce9227c765ad9545369fe723ddd672af245f9bc", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -80,6 +80,7 @@\n    UNSPEC_VUPKHPX\n    UNSPEC_VUPKLPX\n    UNSPEC_CONVERT_4F32_8I16\n+   UNSPEC_CONVERT_4F32_8F16\n    UNSPEC_DST\n    UNSPEC_DSTT\n    UNSPEC_DSTST\n@@ -3217,6 +3218,39 @@\n   DONE;\n })\n \n+\n+;; Convert two vector F32 to packed vector F16.\n+;; This builtin packs 32-bit floating-point values into a packed\n+;; 16-bit floating point values (stored in 16bit integer type).\n+;; (vector unsigned short r = vec_pack_to_short_fp32 (a, b);\n+;; The expected codegen for this builtin is\n+;;    xvcvsphp t, a\n+;;    xvcvsphp u, b\n+;;    if (little endian)\n+;;      vpkuwum r, t, u\n+;;    else\n+;;      vpkuwum r, u, t\n+\n+(define_expand \"convert_4f32_8f16\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8HI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_CONVERT_4F32_8F16))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx rtx_tmp_hi = gen_reg_rtx (V4SImode);\n+  rtx rtx_tmp_lo = gen_reg_rtx (V4SImode);\n+\n+  emit_insn (gen_vsx_xvcvsphp (rtx_tmp_hi, operands[1]));\n+  emit_insn (gen_vsx_xvcvsphp (rtx_tmp_lo, operands[2]));\n+  if (!BYTES_BIG_ENDIAN)\n+    emit_insn (gen_altivec_vpkuwum (operands[0], rtx_tmp_hi, rtx_tmp_lo));\n+  else\n+    emit_insn (gen_altivec_vpkuwum (operands[0], rtx_tmp_lo, rtx_tmp_hi));\n+  DONE;\n+})\n+\n+\n ;; Generate\n ;;    xxlxor/vxor SCRATCH0,SCRATCH0,SCRATCH0\n ;;    vsubu?m SCRATCH2,SCRATCH1,%1"}, {"sha": "363656ec05cc23ed66d20ef346a85b9ee4c616d0", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -2289,6 +2289,7 @@ BU_P8V_OVERLOAD_3 (VPERMXOR,   \"vpermxor\")\n BU_P9V_AV_2 (VSLV,\t\t\"vslv\",\t\t\tCONST, vslv)\n BU_P9V_AV_2 (VSRV,\t\t\"vsrv\",\t\t\tCONST, vsrv)\n BU_P9V_AV_2 (CONVERT_4F32_8I16, \"convert_4f32_8i16\", CONST, convert_4f32_8i16)\n+BU_P9V_AV_2 (CONVERT_4F32_8F16, \"convert_4f32_8f16\", CONST, convert_4f32_8f16)\n \n BU_P9V_AV_2 (VFIRSTMATCHINDEX_V16QI, \"first_match_index_v16qi\",\n \t     CONST, first_match_index_v16qi)\n@@ -2319,6 +2320,7 @@ BU_P9V_AV_2 (VFIRSTMISMATCHOREOSINDEX_V4SI, \"first_mismatch_or_eos_index_v4si\",\n BU_P9V_OVERLOAD_2 (VSLV,\t\"vslv\")\n BU_P9V_OVERLOAD_2 (VSRV,\t\"vsrv\")\n BU_P9V_OVERLOAD_2 (CONVERT_4F32_8I16, \"convert_4f32_8i16\")\n+BU_P9V_OVERLOAD_2 (CONVERT_4F32_8F16, \"convert_4f32_8f16\")\n \n /* 2 argument vector functions added in ISA 3.0 (power9). */\n BU_P9V_AV_2 (VADUB,\t\t\"vadub\",\t\tCONST,  vaduv16qi3)"}, {"sha": "d8b85347cc80706af117e88dc0ec18adac9c0e0f", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -1985,6 +1985,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { P9V_BUILTIN_VEC_CONVERT_4F32_8I16, P9V_BUILTIN_CONVERT_4F32_8I16,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+  { P9V_BUILTIN_VEC_CONVERT_4F32_8F16, P9V_BUILTIN_CONVERT_4F32_8F16,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n \n   { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V16QI,\n     RS6000_BTI_UINTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },"}, {"sha": "732a54842b61afd289bd00552335aa3a1536422b", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -299,6 +299,7 @@\n    UNSPEC_VSX_XVCVBF16SP\n    UNSPEC_VSX_XVCVSPBF16\n    UNSPEC_VSX_XVCVSPSXDS\n+   UNSPEC_VSX_XVCVSPHP\n    UNSPEC_VSX_VSLO\n    UNSPEC_VSX_EXTRACT\n    UNSPEC_VSX_SXEXPDP\n@@ -2187,6 +2188,15 @@\n   \"xvcvhpsp %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n+;; Generate xvcvsphp\n+(define_insn \"vsx_xvcvsphp\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n+\t\t     UNSPEC_VSX_XVCVSPHP))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xvcvsphp %x0,%x1\"\n+[(set_attr \"type\" \"vecfloat\")])\n+\n ;; xscvdpsp used for splat'ing a scalar to V4SF, knowing that the internal SF\n ;; format of scalars is actually DF.\n (define_insn \"vsx_xscvdpsp_scalar\""}, {"sha": "0e6eeff4b7e52105e8edb3103c0f48c7ee0b3a23", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-p9-runnable.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b475a2233630b1737bbdab986f08510d62cd3a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p9-runnable.c?ref=58b475a2233630b1737bbdab986f08510d62cd3a", "patch": "@@ -1,25 +1,50 @@\n-/* { dg-do run { target { powerpc*-*-linux* && { lp64 && p9vector_hw } } } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-do run { target { powerpc*-*-linux* && p9vector_hw } } } */\n+/* { dg-require-effective-target p9vector_hw } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n \n #include <altivec.h>\n+#include <stdio.h>\n \n void abort (void);\n \n int main() {\n   int i;\n   vector float vfa, vfb;\n-  vector unsigned short vur, vuexpt;\n+  vector unsigned short vresult, vexpected;\n \n-  vfa = (vector float){3.4, 5.0, 20.0, 50.9 };\n-  vfb = (vector float){10.0, 40.0, 70.0, 100.0 };\n-  vuexpt = (vector unsigned short){ 3, 5, 20, 50,\n-                                    10, 40, 70, 100};\n+  vfa = (vector float){0.4, 1.6, 20.0, 99.9 };\n+  vfb = (vector float){10.0, -2.0, 70.0, 999.0 };\n \n-  vur = vec_pack_to_short_fp32 (vfa, vfb);\n+  /* Expected results.  */\n+  vexpected = (vector unsigned short) { 0x3666, 0x3e66, 0x4d00, 0x563e,\n+\t\t\t\t\t0x4900, 0xc000, 0x5460, 0x63ce};\n+\n+/*\n+     vresult = vec_pack_to_short_fp32 (vfa, vfb);\n+  This built-in converts a pair of vector floats into a single vector of\n+  packed half-precision (F16) values.  The result type is a vector of\n+  signed shorts.\n+  The expected codegen for this builtin is\n+    xvcvsphp t, vfa\n+    xvcvsphp u, vfb\n+    if (little endian)\n+      vpkuwum vresult, t, u\n+    else\n+      vpkuwum vresult, u, t\n+*/\n+\n+  vresult = vec_pack_to_short_fp32 (vfa, vfb);\n+\n+#ifdef DEBUG\n+  for(i = 0; i< 4; i++) { printf(\"i=[%d] %f  \\n\",i,vfa[i]); }\n+  for(i = 0; i< 4; i++) { printf(\"i=[%d] %f  \\n\",i+4,vfb[i]); }\n+  for(i = 0; i< 8; i++) { printf(\"i=[%d] %d  \\n\",i,vresult[i]); }\n+#endif\n \n   for(i = 0; i< 8; i++) {\n-    if (vur[i] != vuexpt[i])\n+    if (vresult[i] != vexpected[i]) {\n+\tprintf(\"i=[%d] 0x%x != 0x%x \\n\",i,vresult[i],vexpected[i]);\n       abort();\n+    }\n   }\n }"}]}