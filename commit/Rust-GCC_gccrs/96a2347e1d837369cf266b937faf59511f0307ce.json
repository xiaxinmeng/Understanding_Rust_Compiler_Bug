{"sha": "96a2347e1d837369cf266b937faf59511f0307ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhMjM0N2UxZDgzNzM2OWNmMjY2YjkzN2ZhZjU5NTExZjAzMDdjZQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-20T05:03:25Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-20T05:03:25Z"}, "message": "sh.c (regno_reg_class): Add GENERAL_REGS for soft frame pointer.\n\n\t* config/sh/sh.c (regno_reg_class): Add GENERAL_REGS for\n\tsoft frame pointer.\n\t(sh_expand_prologue): Use hard_frame_pointer_rtx instead\n\tof frame_pointer_rtx.\n\t(sh_expand_epilogue): Likewise.\n\t(sh_set_return_address): Likewise.\n\t(initial_elimination_offset): Use HARD_FRAME_POINTER_REGNUM\n\tinstead of FRAME_POINTER_REGNUM if needed.  Add elimination\n\toffsets from FRAME_POINTER_REGNUM.\n\t* config/sh/sh.h (SH_REGISTER_NAMES_INITIALIZER): Add sfp.\n\t(sh_register_names): Add initializer for sfp.\n\t(GENERAL_OR_AP_REGISTER_P): Permit FRAME_POINTER_REGNUM.\n\t(VALID_REGISTER_P): Likewise.\n\t(FIRST_PSEUDO_REGISTER): Update.\n\t(DWARF_FRAME_REGISTERS): Define.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add sfp.\n\t(HARD_FRAME_POINTER_REGNUM): Define.\n\t(FRAME_POINTER_REGNUM): Redefine.\n\t(ELIMINABLE_REGS): Never eliminate to FRAME_POINTER_REGNUM,\n\tbut HARD_FRAME_POINTER_REGNUM instead.  Add eliminations\n\tfrom FRAME_POINTER_REGNUM.\n\t(CAN_ELIMINATE): Use HARD_FRAME_POINTER_REGNUM instead of\n\tFRAME_POINTER_REGNUM.\n\t(REG_CLASS_CONTENTS): Add sfp.\n\t(REG_ALLOC_ORDER): Likewise.\n\t(FRAME_GROWS_DOWNWARD): Set to 1.  Update comment.\n\t(GO_IF_LEGITIMATE_ADDRESS): Use hard_frame_pointer_rtx instead\n\tof frame_pointer_rtx.\n\t(LEGITIMIZE_RELOAD_ADDRESS): Likewise.\n\nFrom-SVN: r102187", "tree": {"sha": "ff2c9b1760f5089fcbdcdae862139ea4b667cf53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff2c9b1760f5089fcbdcdae862139ea4b667cf53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a2347e1d837369cf266b937faf59511f0307ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a2347e1d837369cf266b937faf59511f0307ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a2347e1d837369cf266b937faf59511f0307ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a2347e1d837369cf266b937faf59511f0307ce/comments", "author": null, "committer": null, "parents": [{"sha": "1ade5842af034a0f4e9d606b17ee3ea64375d78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ade5842af034a0f4e9d606b17ee3ea64375d78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ade5842af034a0f4e9d606b17ee3ea64375d78a"}], "stats": {"total": 112, "additions": 81, "deletions": 31}, "files": [{"sha": "97bd21cd8e857ad279a6c260173985ce3fdc9f7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96a2347e1d837369cf266b937faf59511f0307ce", "patch": "@@ -1,3 +1,35 @@\n+2005-07-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (regno_reg_class): Add GENERAL_REGS for\n+\tsoft frame pointer.\n+\t(sh_expand_prologue): Use hard_frame_pointer_rtx instead\n+\tof frame_pointer_rtx.\n+\t(sh_expand_epilogue): Likewise.\n+\t(sh_set_return_address): Likewise.\n+\t(initial_elimination_offset): Use HARD_FRAME_POINTER_REGNUM\n+\tinstead of FRAME_POINTER_REGNUM if needed.  Add elimination\n+\toffsets from FRAME_POINTER_REGNUM.\n+\t* config/sh/sh.h (SH_REGISTER_NAMES_INITIALIZER): Add sfp.\n+\t(sh_register_names): Add initializer for sfp.\n+\t(GENERAL_OR_AP_REGISTER_P): Permit FRAME_POINTER_REGNUM.\n+\t(VALID_REGISTER_P): Likewise.\n+\t(FIRST_PSEUDO_REGISTER): Update.\n+\t(DWARF_FRAME_REGISTERS): Define.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add sfp.\n+\t(HARD_FRAME_POINTER_REGNUM): Define.\n+\t(FRAME_POINTER_REGNUM): Redefine.\n+\t(ELIMINABLE_REGS): Never eliminate to FRAME_POINTER_REGNUM,\n+\tbut HARD_FRAME_POINTER_REGNUM instead.  Add eliminations\n+\tfrom FRAME_POINTER_REGNUM.\n+\t(CAN_ELIMINATE): Use HARD_FRAME_POINTER_REGNUM instead of\n+\tFRAME_POINTER_REGNUM.\n+\t(REG_CLASS_CONTENTS): Add sfp.\n+\t(REG_ALLOC_ORDER): Likewise.\n+\t(FRAME_GROWS_DOWNWARD): Set to 1.  Update comment.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Use hard_frame_pointer_rtx instead\n+\tof frame_pointer_rtx.\n+\t(LEGITIMIZE_RELOAD_ADDRESS): Likewise.\n+\n 2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* fold-const.c (tree_expr_nonnegative_p): Only return true for"}, {"sha": "c773f4edaeaf27a1bf4bb2852b6141c1e2651fb8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=96a2347e1d837369cf266b937faf59511f0307ce", "patch": "@@ -169,7 +169,7 @@ enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER] =\n   DF_REGS, DF_REGS, DF_REGS, DF_REGS,\n   NO_REGS, GENERAL_REGS, PR_REGS, T_REGS,\n   MAC_REGS, MAC_REGS, FPUL_REGS, FPSCR_REGS,\n-  GENERAL_REGS,\n+  GENERAL_REGS, GENERAL_REGS,\n };\n \n char sh_register_names[FIRST_PSEUDO_REGISTER] \\\n@@ -6004,7 +6004,7 @@ sh_expand_prologue (void)\n \t\t       stack_pointer_rtx, 0, NULL);\n \n   if (frame_pointer_needed)\n-    frame_insn (GEN_MOV (frame_pointer_rtx, stack_pointer_rtx));\n+    frame_insn (GEN_MOV (hard_frame_pointer_rtx, stack_pointer_rtx));\n \n   if (TARGET_SHCOMPACT\n       && (current_function_args_info.call_cookie & ~ CALL_COOKIE_RET_TRAMP(1)))\n@@ -6066,14 +6066,15 @@ sh_expand_epilogue (bool sibcall_p)\n \t when exception handling is enabled.  See PR/18032.  */\n       if (flag_exceptions)\n \temit_insn (gen_blockage ());\n-      output_stack_adjust (frame_size, frame_pointer_rtx, e, &live_regs_mask);\n+      output_stack_adjust (frame_size, hard_frame_pointer_rtx, e,\n+\t\t\t   &live_regs_mask);\n \n       /* We must avoid moving the stack pointer adjustment past code\n \t which reads from the local frame, else an interrupt could\n \t occur after the SP adjustment and clobber data in the local\n \t frame.  */\n       emit_insn (gen_blockage ());\n-      emit_insn (GEN_MOV (stack_pointer_rtx, frame_pointer_rtx));\n+      emit_insn (GEN_MOV (stack_pointer_rtx, hard_frame_pointer_rtx));\n     }\n   else if (frame_size)\n     {\n@@ -6350,7 +6351,7 @@ sh_set_return_address (rtx ra, rtx tmp)\n     pr_offset = rounded_frame_size (d);\n \n   emit_insn (GEN_MOV (tmp, GEN_INT (pr_offset)));\n-  emit_insn (GEN_ADD3 (tmp, tmp, frame_pointer_rtx));\n+  emit_insn (GEN_ADD3 (tmp, tmp, hard_frame_pointer_rtx));\n \n   tmp = gen_rtx_MEM (Pmode, tmp);\n   emit_insn (GEN_MOV (tmp, ra));\n@@ -7269,7 +7270,7 @@ initial_elimination_offset (int from, int to)\n \n   total_saved_regs_space = regs_saved + regs_saved_rounding;\n \n-  if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+  if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     return total_saved_regs_space + total_auto_space\n       + current_function_args_info.byref_regs * 8;\n \n@@ -7278,11 +7279,18 @@ initial_elimination_offset (int from, int to)\n       + current_function_args_info.byref_regs * 8;\n \n   /* Initial gap between fp and sp is 0.  */\n-  if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+  if (from == HARD_FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     return 0;\n \n+  if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    return rounded_frame_size (0);\n+\n+  if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n+    return rounded_frame_size (0);\n+\n   gcc_assert (from == RETURN_ADDRESS_POINTER_REGNUM\n-\t      && (to == FRAME_POINTER_REGNUM || to == STACK_POINTER_REGNUM));\n+\t      && (to == HARD_FRAME_POINTER_REGNUM\n+\t\t  || to == STACK_POINTER_REGNUM));\n   if (TARGET_SH5)\n     {\n       int n = total_saved_regs_space;"}, {"sha": "835f66922c5559c3b7c2b6601d58980ba506832a", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a2347e1d837369cf266b937faf59511f0307ce/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=96a2347e1d837369cf266b937faf59511f0307ce", "patch": "@@ -882,7 +882,7 @@ extern char sh_register_names[][MAX_REGISTER_NAME_LENGTH + 1];\n   \"tr0\",  \"tr1\",  \"tr2\",  \"tr3\",  \"tr4\",  \"tr5\",  \"tr6\",  \"tr7\", \t\\\n   \"xd0\",  \"xd2\",  \"xd4\",  \"xd6\",  \"xd8\",  \"xd10\", \"xd12\", \"xd14\",\t\\\n   \"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\",\t\\\n-  \"rap\"\t\t\t\t\t\t\t\t\t\\\n+  \"rap\",  \"sfp\"\t\t\t\t\t\t\t\t\\\n }\n \n #define REGNAMES_ARR_INDEX_1(index) \\\n@@ -907,7 +907,7 @@ extern char sh_register_names[][MAX_REGISTER_NAME_LENGTH + 1];\n   REGNAMES_ARR_INDEX_8 (128), \\\n   REGNAMES_ARR_INDEX_8 (136), \\\n   REGNAMES_ARR_INDEX_8 (144), \\\n-  REGNAMES_ARR_INDEX_1 (152) \\\n+  REGNAMES_ARR_INDEX_2 (152) \\\n }\n \n #define ADDREGNAMES_SIZE 32\n@@ -969,7 +969,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n \t    (unsigned HOST_WIDE_INT) LAST_GENERAL_REG)\n \n #define GENERAL_OR_AP_REGISTER_P(REGNO) \\\n-  (GENERAL_REGISTER_P (REGNO) || ((REGNO) == AP_REG))\n+  (GENERAL_REGISTER_P (REGNO) || ((REGNO) == AP_REG)\t\\\n+   || ((REGNO) == FRAME_POINTER_REGNUM))\n \n #define FP_REGISTER_P(REGNO) \\\n   ((int) (REGNO) >= FIRST_FP_REG && (int) (REGNO) <= LAST_FP_REG)\n@@ -999,6 +1000,7 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n #define VALID_REGISTER_P(REGNO) \\\n   (SHMEDIA_REGISTER_P (REGNO) || XD_REGISTER_P (REGNO) \\\n    || (REGNO) == AP_REG || (REGNO) == RAP_REG \\\n+   || (REGNO) == FRAME_POINTER_REGNUM \\\n    || (TARGET_SH1 && (SPECIAL_REGISTER_P (REGNO) || (REGNO) == PR_REG)) \\\n    || (TARGET_SH2E && (REGNO) == FPUL_REG))\n \n@@ -1011,7 +1013,10 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n    ? DImode \\\n    : SImode)\n \n-#define FIRST_PSEUDO_REGISTER 153\n+#define FIRST_PSEUDO_REGISTER 154\n+\n+/* Don't count soft frame pointer.  */\n+#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 1)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n@@ -1048,8 +1053,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n /*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n   1,      1,      1,      1,      1,      1,      0,      1,\t\t\\\n-/*\"rap\" */\t\t\t\t\t\t\t\t\\\n-  1,\t\t\t\t\t\t\t\t\t\\\n+/*\"rap\",  \"sfp\" */\t\t\t\t\t\t\t\\\n+  1,\t  1,\t\t\t\t\t\t\t\t\\\n }\n \n /* 1 for registers not available across function calls.\n@@ -1088,8 +1093,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,      1,      1,      1,      1,      1,      0,      0,\t\t\\\n /*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n   1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-/*\"rap\" */\t\t\t\t\t\t\t\t\\\n-  1,\t\t\t\t\t\t\t\t\t\\\n+/*\"rap\",  \"sfp\" */\t\t\t\t\t\t\t\\\n+  1,\t  1,\t\t\t\t\t\t\t\t\\\n }\n \n /* CONDITIONAL_REGISTER_USAGE might want to make a register call-used, yet\n@@ -1204,7 +1209,10 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n #define STACK_POINTER_REGNUM\tSP_REG\n \n /* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM\tFP_REG\n+#define HARD_FRAME_POINTER_REGNUM\tFP_REG\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM\t153\n \n /* Fake register that holds the address on the stack of the\n    current function's return address.  */\n@@ -1246,16 +1254,18 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n    of elimination fail.  */\n \n #define ELIMINABLE_REGS\t\t\t\t\t\t\\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+{{ HARD_FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\\\n  { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n- { RETURN_ADDRESS_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n  { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n- { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},}\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},}\n \n /* Given FROM and TO register numbers, say whether this elimination\n    is allowed.  */\n #define CAN_ELIMINATE(FROM, TO) \\\n-  (!((FROM) == FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED))\n+  (!((FROM) == HARD_FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED))\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n@@ -1380,7 +1390,7 @@ enum reg_class\n /* SIBCALL_REGS: Initialized in CONDITIONAL_REGISTER_USAGE.  */\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t\\\n /* GENERAL_REGS:  */\t\t\t\t\t\t\t\\\n-  { 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x01020000 },\t\\\n+  { 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x03020000 },\t\\\n /* FP0_REGS:  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000 },\t\\\n /* FP_REGS:  */\t\t\t\t\t\t\t\t\\\n@@ -1396,7 +1406,7 @@ enum reg_class\n /* TARGET_REGS:  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000ff },\t\\\n /* ALL_REGS:  */\t\t\t\t\t\t\t\\\n-  { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x01ffffff },\t\\\n+  { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x03ffffff },\t\\\n }\n \n /* The same information, inverted:\n@@ -1446,7 +1456,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    128,129,130,131,132,133,134,135, \\\n    /* Fixed registers */ \\\n     15, 16, 24, 25, 26, 27, 63,144, \\\n-   145,146,147,148,149,152 }\n+   145,146,147,148,149,152,153 }\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS \\\n@@ -1695,10 +1705,8 @@ extern enum reg_class reg_class_from_letter[];\n #define STACK_GROWS_DOWNWARD\n \n /*  Define this macro to non-zero if the addresses of local variable slots\n-    are at negative offsets from the frame pointer.\n-\n-    The SH only has positive indexes, so grow the frame up.  */\n-#define FRAME_GROWS_DOWNWARD 0\n+    are at negative offsets from the frame pointer.  */\n+#define FRAME_GROWS_DOWNWARD 1\n \n /* Offset from the frame pointer to the first local variable slot to\n    be allocated.  */\n@@ -2528,9 +2536,11 @@ struct sh_args {\n       if (GET_MODE_SIZE (MODE) <= 8 && BASE_REGISTER_RTX_P (xop0))\t\\\n \tGO_IF_LEGITIMATE_INDEX ((MODE), xop1, LABEL);\t\t\t\\\n       if ((ALLOW_INDEXED_ADDRESS || GET_MODE (X) == DImode\t\t\\\n-\t   || ((xop0 == stack_pointer_rtx || xop0 == frame_pointer_rtx)\t\\\n+\t   || ((xop0 == stack_pointer_rtx\t\t\t\t\\\n+\t\t|| xop0 == hard_frame_pointer_rtx)\t\t\t\\\n \t       && REG_P (xop1) && REGNO (xop1) == R0_REG)\t\t\\\n-\t   || ((xop1 == stack_pointer_rtx || xop1 == frame_pointer_rtx)\t\\\n+\t   || ((xop1 == stack_pointer_rtx\t\t\t\t\\\n+\t\t|| xop1 == hard_frame_pointer_rtx)\t\t\t\\\n \t       && REG_P (xop0) && REGNO (xop0) == R0_REG))\t\t\\\n \t  && ((!TARGET_SHMEDIA && GET_MODE_SIZE (MODE) <= 4)\t\t\\\n \t      || (TARGET_SHMEDIA && GET_MODE_SIZE (MODE) <= 8)\t\t\\\n@@ -2625,7 +2635,7 @@ struct sh_args {\n       && ! ((MODE) == PSImode && (TYPE) == RELOAD_FOR_INPUT_ADDRESS)\t\\\n       && (ALLOW_INDEXED_ADDRESS\t\t\t\t\t\t\\\n \t  || XEXP ((X), 0) == stack_pointer_rtx\t\t\t\t\\\n-\t  || XEXP ((X), 0) == frame_pointer_rtx))\t\t\t\\\n+\t  || XEXP ((X), 0) == hard_frame_pointer_rtx))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx index_rtx = XEXP (X, 1);\t\t\t\t\t\\\n       HOST_WIDE_INT offset = INTVAL (index_rtx), offset_base;\t\t\\"}]}