{"sha": "4e3f6d8529cfab76897fa4f1618409efdd468ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzZjZkODUyOWNmYWI3Njg5N2ZhNGYxNjE4NDA5ZWZkZDQ2OGFlNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-12-04T00:26:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-12-04T00:26:27Z"}, "message": "re PR c++/42266 ([C++0x] ICE with decltype and variadic templates)\n\n\tPR c++/42266\n\t* cvt.c (convert_from_reference): Do nothing if TREE_TYPE is null.\n\nFrom-SVN: r154964", "tree": {"sha": "e745476cee107dd96de085065c0ae190e6f0a213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e745476cee107dd96de085065c0ae190e6f0a213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3f6d8529cfab76897fa4f1618409efdd468ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3f6d8529cfab76897fa4f1618409efdd468ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3f6d8529cfab76897fa4f1618409efdd468ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3f6d8529cfab76897fa4f1618409efdd468ae7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8414ab11977b9f0bcff11491e98e733899afb072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8414ab11977b9f0bcff11491e98e733899afb072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8414ab11977b9f0bcff11491e98e733899afb072"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "deb59030bd00a88b7db8fdb1d6e21aad523b33f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e3f6d8529cfab76897fa4f1618409efdd468ae7", "patch": "@@ -1,3 +1,8 @@\n+2009-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42266\n+\t* cvt.c (convert_from_reference): Do nothing if TREE_TYPE is null.\n+\n 2009-12-03  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42217"}, {"sha": "6f3b56e43ce66469cb9ba2bb7315c36037f07e63", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=4e3f6d8529cfab76897fa4f1618409efdd468ae7", "patch": "@@ -506,7 +506,8 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n tree\n convert_from_reference (tree val)\n {\n-  if (TREE_CODE (TREE_TYPE (val)) == REFERENCE_TYPE)\n+  if (TREE_TYPE (val)\n+      && TREE_CODE (TREE_TYPE (val)) == REFERENCE_TYPE)\n     {\n       tree t = TREE_TYPE (TREE_TYPE (val));\n       tree ref = build1 (INDIRECT_REF, t, val);"}, {"sha": "ff7a355f451badcefe001582366d99625f36f452", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e3f6d8529cfab76897fa4f1618409efdd468ae7", "patch": "@@ -1,3 +1,8 @@\n+2009-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42266\n+\t* g++.dg/cpp0x/variadic97.C: New.\n+\n 2009-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/42049"}, {"sha": "a2070319ebd363d3528b93970b60f49ed79b5f46", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic97.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f6d8529cfab76897fa4f1618409efdd468ae7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C?ref=4e3f6d8529cfab76897fa4f1618409efdd468ae7", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/42266\n+// { dg-options -std=c++0x }\n+\n+template<typename... _Elements>\n+  class tuple;\n+\n+template<typename _Arg>\n+  class _Mu;\n+\n+template<typename _Signature>\n+  struct _Bind;\n+\n+template<typename _Functor, typename... _Bound_args>\n+  class _Bind<_Functor(_Bound_args...)>\n+  {\n+    template<typename... _Args, typename\n+             = decltype(_Functor()(_Mu<_Bound_args>()(_Bound_args(),\n+                                                      tuple<_Args...>())...) )>\n+      void __call() { }\n+  };\n+\n+template<typename _Functor, typename _Arg>\n+  _Bind<_Functor(_Arg)>\n+  bind(_Functor, _Arg) { }\n+\n+struct State\n+{\n+  bool ready() { return true; }\n+\n+  void f()\n+  {\n+    bind(&State::ready, this);\n+  }\n+};\n+"}]}