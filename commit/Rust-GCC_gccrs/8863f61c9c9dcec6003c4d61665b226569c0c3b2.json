{"sha": "8863f61c9c9dcec6003c4d61665b226569c0c3b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2M2Y2MWM5YzlkY2VjNjAwM2M0ZDYxNjY1YjIyNjU2OWMwYzNiMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-17T18:12:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-20T00:21:13Z"}, "message": "analyzer: ensure that all DejaGnu tests have unique names\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: Ensure that all\n\ttest names are unique.\n\t* gcc.dg/analyzer/attribute-nonnull.c: Likewise.\n\t* gcc.dg/analyzer/conditionals-notrans.c: Likewise.\n\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n\t* gcc.dg/analyzer/data-model-18.c: Likewise.\n\t* gcc.dg/analyzer/data-model-8.c: Likewise.\n\t* gcc.dg/analyzer/data-model-9.c: Likewise.\n\t* gcc.dg/analyzer/file-1.c: Likewise.\n\t* gcc.dg/analyzer/file-paths-1.c: Likewise.\n\t* gcc.dg/analyzer/loop-2.c: Likewise.\n\t* gcc.dg/analyzer/loop-2a.c: Likewise.\n\t* gcc.dg/analyzer/loop-4.c: Likewise.\n\t* gcc.dg/analyzer/loop.c: Likewise.\n\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n\t* gcc.dg/analyzer/malloc-2.c: Likewise.\n\t* gcc.dg/analyzer/malloc-ipa-10.c: Likewise.\n\t* gcc.dg/analyzer/malloc-ipa-2.c: Likewise.\n\t* gcc.dg/analyzer/malloc-macro-separate-events.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-1.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-2.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-3.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-4.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-5.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-7.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-9.c: Likewise.\n\t* gcc.dg/analyzer/operations.c: Likewise.\n\t* gcc.dg/analyzer/params.c: Likewise.\n\t* gcc.dg/analyzer/pattern-test-1.c: Likewise.\n\t* gcc.dg/analyzer/pattern-test-2.c: Likewise.\n\t* gcc.dg/analyzer/sensitive-1.c: Likewise.\n\t* gcc.dg/analyzer/switch.c: Likewise.\n\t* gcc.dg/analyzer/taint-1.c: Likewise.\n\t* gcc.dg/analyzer/unknown-fns.c: Likewise.", "tree": {"sha": "19ab9b40d3b481fbab842f401d578d4072cbc9d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ab9b40d3b481fbab842f401d578d4072cbc9d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8863f61c9c9dcec6003c4d61665b226569c0c3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8863f61c9c9dcec6003c4d61665b226569c0c3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8863f61c9c9dcec6003c4d61665b226569c0c3b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8863f61c9c9dcec6003c4d61665b226569c0c3b2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bec238768255acf0fe5b0993d05cf99f6331b79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec238768255acf0fe5b0993d05cf99f6331b79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec238768255acf0fe5b0993d05cf99f6331b79e"}], "stats": {"total": 501, "additions": 269, "deletions": 232}, "files": [{"sha": "96570a901868bdc33331b178f4eb1a8da5728a26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -1,3 +1,40 @@\n+2020-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: Ensure that all\n+\ttest names are unique.\n+\t* gcc.dg/analyzer/attribute-nonnull.c: Likewise.\n+\t* gcc.dg/analyzer/conditionals-notrans.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-18.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-8.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-9.c: Likewise.\n+\t* gcc.dg/analyzer/file-1.c: Likewise.\n+\t* gcc.dg/analyzer/file-paths-1.c: Likewise.\n+\t* gcc.dg/analyzer/loop-2.c: Likewise.\n+\t* gcc.dg/analyzer/loop-2a.c: Likewise.\n+\t* gcc.dg/analyzer/loop-4.c: Likewise.\n+\t* gcc.dg/analyzer/loop.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-2.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-ipa-10.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-ipa-2.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-macro-separate-events.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-1.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-2.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-3.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-4.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-5.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-7.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-9.c: Likewise.\n+\t* gcc.dg/analyzer/operations.c: Likewise.\n+\t* gcc.dg/analyzer/params.c: Likewise.\n+\t* gcc.dg/analyzer/pattern-test-1.c: Likewise.\n+\t* gcc.dg/analyzer/pattern-test-2.c: Likewise.\n+\t* gcc.dg/analyzer/sensitive-1.c: Likewise.\n+\t* gcc.dg/analyzer/switch.c: Likewise.\n+\t* gcc.dg/analyzer/taint-1.c: Likewise.\n+\t* gcc.dg/analyzer/unknown-fns.c: Likewise.\n+\n 2020-01-19  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/torture/pr26515.c (cris*-*-*): Conditionalize"}, {"sha": "53c046ed12f0af79dc7321be5d896a60ea0cd882", "filename": "gcc/testsuite/gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2FCVE-2005-1689-dedupe-issue.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -11,8 +11,8 @@ void\n recvauth_common(krb5_data inbuf)\n {\n   free(inbuf.data);\n-  free(inbuf.data); /* { dg-warning \"double-'free'\" } */\n-  /* { dg-message \"2 duplicates\" \"\" { target *-*-* } .-1 } */\n+  free(inbuf.data); /* { dg-warning \"double-'free'\" \"warning\" } */\n+  /* { dg-message \"2 duplicates\" \"duplicates notification\" { target *-*-* } .-1 } */\n }\n \n void krb5_recvauth(krb5_data inbuf)"}, {"sha": "e0bf1f4aa1cf8d57542834a8d971aeaf10865aac", "filename": "gcc/testsuite/gcc.dg/analyzer/attribute-nonnull.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -20,8 +20,8 @@ void test_1 (void *p, void *q, void *r)\n void test_1a (void *q, void *r)\n {\n   void *p = NULL;\n-  foo(p, q, r); /* { dg-warning \"use of NULL 'p' where non-null expected\" } */\n-  /* { dg-message \"argument 1 \\\\('p'\\\\) NULL where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  foo(p, q, r); /* { dg-warning \"use of NULL 'p' where non-null expected\" \"warning\" } */\n+  /* { dg-message \"argument 1 \\\\('p'\\\\) NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n }\n \n void test_2 (void *p, void *q, void *r)\n@@ -36,8 +36,8 @@ void test_3 (void *q, void *r)\n {\n   void *p = malloc(1024); /* { dg-message \"\\\\(1\\\\) this call could return NULL\" } */\n \n-  foo(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" } */\n-  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  foo(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" \"warning\" } */\n+  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n \n   foo(p, q, r);\n \n@@ -48,8 +48,8 @@ void test_4 (void *q, void *r)\n {\n   void *p = malloc(1024); /* { dg-message \"\\\\(1\\\\) this call could return NULL\" } */\n \n-  bar(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" } */\n-  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  bar(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" \"warning\" } */\n+  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n \n   bar(p, q, r);\n \n@@ -71,8 +71,8 @@ void test_5 (void *q, void *r)\n {\n   void *p = malloc(1024); /* { dg-message \"\\\\(1\\\\) this call could return NULL\" } */\n   bar_t cb = get_bar ();\n-  cb(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" } */\n-  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  cb(p, q, r); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" \"warning\" } */\n+  /* { dg-message \"argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n   /* TODO: do we want an event showing where cb is assigned \"bar\"?  */\n \n   cb(p, q, r);"}, {"sha": "3b6e28cf539014123cdc06cadb6eb77373dfd74f", "filename": "gcc/testsuite/gcc.dg/analyzer/conditionals-notrans.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -7,15 +7,15 @@ void test (int i, int j)\n     {\n       __analyzer_eval (i > 4); /* { dg-warning \"TRUE\" } */\n       __analyzer_eval (i <= 4); /* { dg-warning \"FALSE\" } */\n-      __analyzer_eval (i > 3); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i > 3); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \n       __analyzer_eval (i > 5); /* { dg-warning \"UNKNOWN\" } */\n-      __analyzer_eval (i != 3); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i != 3); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \n-      __analyzer_eval (i == 3); /* { dg-warning \"FALSE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 3); /* { dg-warning \"FALSE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \n       __analyzer_eval (i != 4); /* { dg-warning \"TRUE\" } */\n       __analyzer_eval (i == 4); /* { dg-warning \"FALSE\" } */\n@@ -33,8 +33,8 @@ void test (int i, int j)\n       else\n \t{\n \t  __analyzer_eval (j >= i); /* { dg-warning \"TRUE\" } */\n-\t  __analyzer_eval (j > 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-\t  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+\t  __analyzer_eval (j > 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+\t  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \t}\n     }\n   else\n@@ -43,21 +43,21 @@ void test (int i, int j)\n       __analyzer_eval (i <= 4); /* { dg-warning \"TRUE\" } */\n       __analyzer_eval (i > 3); /* { dg-warning \"UNKNOWN\" } */\n \n-      __analyzer_eval (i > 5); /* { dg-warning \"FALSE\" \"\" { xfail *-*-* } } */\n-\t  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i > 5); /* { dg-warning \"FALSE\" \"desired\" { xfail *-*-* } } */\n+\t  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n       __analyzer_eval (i != 3); /* { dg-warning \"UNKNOWN\" } */\n \n       __analyzer_eval (i == 3); /* { dg-warning \"UNKNOWN\" } */\n \n       __analyzer_eval (i != 4); /* { dg-warning \"UNKNOWN\" } */\n       __analyzer_eval (i == 4); /* { dg-warning \"UNKNOWN\" } */\n-      __analyzer_eval (i == 5); /* { dg-warning \"FALSE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n-      __analyzer_eval (i != 5); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 5); /* { dg-warning \"FALSE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i != 5); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n       __analyzer_eval (i < 5); /* { dg-warning \"TRUE\" } */\n-      __analyzer_eval (i <= 5); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i <= 5); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n     }\n }\n \n@@ -68,12 +68,12 @@ void test_2 (int i, int j, int k)\n       __analyzer_eval (i == k); /* { dg-warning \"UNKNOWN\" } */\n       if (j >= k)\n \t{\n-\t  __analyzer_eval (i >= k); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-\t  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+\t  __analyzer_eval (i >= k); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+\t  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \t  __analyzer_eval (i == k); /* { dg-warning \"UNKNOWN\" } */\n \t  if (k >= i)\n-\t    __analyzer_eval (i == k); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-\t  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+\t    __analyzer_eval (i == k); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+\t  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n \t}\n     }\n }\n@@ -101,8 +101,8 @@ void test_range_int_gt_lt (int i)\n {\n   if (i > 3)\n     if (i < 5)\n-      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }\n \n void test_range_float_gt_lt (float f)\n@@ -116,8 +116,8 @@ void test_range_int_ge_lt (int i)\n {\n   if (i >= 4)\n     if (i < 5)\n-      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }\n \n void test_range_float_ge_lt (float f)\n@@ -131,8 +131,8 @@ void test_range_int_gt_le (int i)\n {\n   if (i > 3)\n     if (i <= 4)\n-      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }\n \n void test_range_float_gt_le (float f)\n@@ -146,14 +146,14 @@ void test_range_int_ge_le (int i)\n {\n   if (i >= 4)\n     if (i <= 4)\n-      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (i == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }\n \n void test_range_float_ge_le (float f)\n {\n   if (f >= 4)\n     if (f <= 4)\n-      __analyzer_eval (f == 4); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+      __analyzer_eval (f == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }"}, {"sha": "3a0108d0b8c98079bc52ddb83bfa5e1f8b6d3bac", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -178,13 +178,13 @@ int test_12d (struct coord c)\n {\n   struct coord d;\n   d = c;\n-  __analyzer_eval (d.x == c.x); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (d.x == c.x); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"actual\" { target *-*-* } .-1 } */\n   /* TODO(xfail): c and d share the same unknown value of type \"coord\", but\n      attempts to access the fields lead to different unknown values.  */\n \n-  __analyzer_eval (d.y == c.y); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (d.y == c.y); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"actual\" { target *-*-* } .-1 } */\n   // TODO(xfail): likewise\n \n   __analyzer_eval (d.x == d.y); /* { dg-warning \"UNKNOWN\" } */\n@@ -222,8 +222,8 @@ void test_15 (const char *str)\n {\n   char ch = str[0];\n   __analyzer_eval (ch == 'a'); /* { dg-warning \"UNKNOWN\" } */\n-  __analyzer_eval (ch == str[0]); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (ch == str[0]); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n \n   ch = 'a';\n@@ -237,12 +237,12 @@ void test_16 (void)\n \n   __analyzer_eval (msg != NULL); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (msg[0] == 'h'); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (msg[0] == 'h'); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n \n-  __analyzer_eval (msg[1] == 'e'); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (msg[1] == 'e'); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n \n   __analyzer_eval (strlen (msg) == 11); /* { dg-warning \"TRUE\" } */\n@@ -260,12 +260,12 @@ void test_16_alt (void)\n \n   __analyzer_eval (msg != NULL); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (msg[0] == 'h'); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (msg[0] == 'h'); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n \n-  __analyzer_eval (msg[1] == 'e'); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (msg[1] == 'e'); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n \n   __analyzer_eval (strlen (msg) == 11); /* { dg-warning \"TRUE\" } */\n@@ -278,8 +278,8 @@ void test_16a (const char *msg)\n \n void test_16b (const char *msg)\n {\n-  __analyzer_eval (strlen (msg) == strlen (msg)); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (strlen (msg) == strlen (msg)); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n }\n \n@@ -472,8 +472,8 @@ void test_23 (struct foo *f, struct foo *g)\n   i = f->i + g->i;\n   j = f->i + g->i;\n   k = f->i * g->i;\n-  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail): we'd need to record that the two unknown values are both\n      the sum of the two unknown input values (and thus are the same); not\n      yet sure if we want arbitrary expression trees in the representation\n@@ -491,8 +491,8 @@ void test_24 (struct foo *f)\n   /* Overwriting a whole struct should invalidate our knowledge\n      about fields within it.  */\n   g = *f;\n-  __analyzer_eval (g.i == 42); /* { dg-warning \"UNKNOWN\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"TRUE\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (g.i == 42); /* { dg-warning \"UNKNOWN\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"TRUE\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n }\n \n@@ -508,8 +508,8 @@ void test_25 (struct foo *f)\n      source value should update our knowledge about fields within\n      the dest value.  */\n   g = *f;\n-  __analyzer_eval (g.i == 43); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"FALSE\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (g.i == 43); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"FALSE\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail)\n }\n \n@@ -526,11 +526,11 @@ void test_26 (struct coord *p, struct coord *q)\n      source value should update our knowledge about fields within\n      the dest value.  */\n   *p = *q;\n-  __analyzer_eval (p->x); /* { dg-warning \"UNKNOWN\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"TRUE\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p->x); /* { dg-warning \"UNKNOWN\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"TRUE\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): should have been overwritten\n-  __analyzer_eval (p->y == 17); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p->y == 17); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): should have been overwritten with q->y\n \n   __analyzer_eval (q->x); /* { dg-warning \"UNKNOWN\" } */\n@@ -540,29 +540,29 @@ void test_26 (struct coord *p, struct coord *q)\n void test_27 (struct coord *p)\n {\n   memset (p, 0, sizeof (struct coord));\n-  __analyzer_eval (p->x == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p->x == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n-  __analyzer_eval (p->y == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p->y == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n }\n \n void test_28 (struct coord *p)\n {\n   memset (p, 0, sizeof (struct coord) * 10);\n-  __analyzer_eval (p[0].x == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p[0].x == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n-  __analyzer_eval (p[0].y == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p[0].y == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n \n-  __analyzer_eval (p[9].x == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p[9].x == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n-  __analyzer_eval (p[9].y == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (p[9].y == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail):\n \n   __analyzer_eval (p[10].x == 0); /* { dg-warning \"UNKNOWN\" } */\n@@ -970,13 +970,13 @@ void test_44 (void)\n {\n   struct sbits bits;\n   bits.b0 = 1;\n-  __analyzer_eval (bits.b0 == 1); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"FALSE\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (bits.b0 == 1); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"FALSE\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): ^^^^\n \n   bits.b456 = 5;\n-  __analyzer_eval (bits.b456 == 5); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"FALSE\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (bits.b456 == 5); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"FALSE\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): ^^^^\n };\n \n@@ -994,13 +994,13 @@ void test_45 (void)\n {\n   struct ubits bits;\n   bits.b0 = 1;\n-  __analyzer_eval (bits.b0 == 1); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (bits.b0 == 1); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): ^^^^\n \n   bits.b456 = 5;\n-  __analyzer_eval (bits.b456 == 5); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (bits.b456 == 5); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   // TODO(xfail): ^^^^\n };\n \n@@ -1058,10 +1058,10 @@ void test_51 (struct coord c)\n {\n   struct coord d;\n   memcpy (&d, &c, sizeof (struct coord));\n-  __analyzer_eval (c.x == d.x); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n-  __analyzer_eval (c.y == d.y); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (c.x == d.x); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n+  __analyzer_eval (c.y == d.y); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n }\n \n struct big\n@@ -1073,8 +1073,8 @@ void test_52 (struct big b)\n {\n   struct big d;\n   memcpy (&d, &b, sizeof (struct big));\n-  __analyzer_eval (b.ia[0] == d.ia[0]); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (b.ia[0] == d.ia[0]); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n }\n \n void test_53 (const char *msg)"}, {"sha": "0a9ae9ff4d4921e8e565d2c133456b0db04a4fc8", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-18.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -16,7 +16,7 @@ void test (int *p, int i, int j)\n \n   __analyzer_eval (p[3] == 42); /* { dg-warning \"UNKNOWN\" } */\n   __analyzer_eval (p[i] == 17); /* { dg-warning \"TRUE\" } */\n-  __analyzer_eval (p[j] == 17); /* { dg-warning \"UNKNOWN\" \"\" { xfail *-*-* } } */\n-  /* { dg-bogus \"TRUE\" \"\" { xfail *-*-* } .-1 } */\n+  __analyzer_eval (p[j] == 17); /* { dg-warning \"UNKNOWN\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-bogus \"TRUE\" \"status quo\" { xfail *-*-* } .-1 } */\n   // FIXME(xfails) ^^^\n }"}, {"sha": "939b4c275d8a0baeaff791e248c6f7d9dcb5773e", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-8.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -21,6 +21,6 @@ void test (void)\n \n   struct base *bp = (struct base *)&s;\n \n-  __analyzer_eval (bp->i == 3); /* { dg-warning \"TRUE\"  \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (bp->i == 3); /* { dg-warning \"TRUE\"  \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n }"}, {"sha": "159bc612576cbdfd013b2bbceb237a78cbbf15ca", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-9.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-9.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -14,8 +14,8 @@ void test_1 (void)\n   struct foo *f = calloc (1, sizeof (struct foo));\n   if (f == NULL)\n     return;\n-  __analyzer_eval (f->i == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+  __analyzer_eval (f->i == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n   free (f);\n }\n \n@@ -27,7 +27,7 @@ void test_2 (void)\n   if (f == NULL)\n     return;\n   memset (f, 0, sizeof (struct foo));\n-  __analyzer_eval (f->i == 0); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-1 } */\n+  __analyzer_eval (f->i == 0); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n   free (f);\n }"}, {"sha": "f2b77b9db66012805d7dd9ff9d22999ff85674cd", "filename": "gcc/testsuite/gcc.dg/analyzer/file-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -7,10 +7,10 @@ test_1 (const char *path)\n   if (!f)\n     return;\n \n-  fclose (f); /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" } */\n-  /* { dg-message \"\\\\(5\\\\) first 'fclose' here\" \"\" { target *-*-* } .-1 } */\n-  fclose (f); /* { dg-warning \"double 'fclose' of FILE 'f'\" } */ \n-  /* { dg-message \"second 'fclose' here; first 'fclose' was at \\\\(5\\\\)\" \"\" { target *-*-* } .-1 } */\n+  fclose (f); /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" \"to here\" } */\n+  /* { dg-message \"\\\\(5\\\\) first 'fclose' here\" \"first fclose\" { target *-*-* } .-1 } */\n+  fclose (f); /* { dg-warning \"double 'fclose' of FILE 'f'\" \"warning\" } */ \n+  /* { dg-message \"second 'fclose' here; first 'fclose' was at \\\\(5\\\\)\" \"second fclose\" { target *-*-* } .-1 } */\n }\n \n void\n@@ -22,8 +22,8 @@ test_2 (const char *src, const char *dst)\n \n   FILE *f_out = fopen (src, \"w\");\n   if (!f_out)\n-    return; /* { dg-warning \"leak of FILE 'f_in'\" } */\n-  /* { dg-message \"\\\\(7\\\\) 'f_in' leaks here; was opened at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+    return; /* { dg-warning \"leak of FILE 'f_in'\" \"warning\" } */\n+  /* { dg-message \"\\\\(7\\\\) 'f_in' leaks here; was opened at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n \n   fclose (f_out);\n   fclose (f_in);"}, {"sha": "b284590ccc26257b1c48c96f56db04a56cafc4e0", "filename": "gcc/testsuite/gcc.dg/analyzer/file-paths-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -11,8 +11,8 @@ void f1 (const char *str)\n   while (fgets(buf, 10, fp) != NULL) /* { dg-message \"following 'false' branch\\\\.\\\\.\\\\.\" } */\n     {\n     }\n-} /* { dg-warning \"leak of FILE 'fp'\" } */\n-/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } .-1 } */\n+} /* { dg-warning \"leak of FILE 'fp'\" \"warning\" } */\n+/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"to here\" { target *-*-* } .-1 } */\n \n void f2(const char *str, int flag)\n {\n@@ -21,5 +21,5 @@ void f2(const char *str, int flag)\n \n   if (flag) /* { dg-message \"when 'flag == 0'\" } */\n     fclose(fp);\n-} /* { dg-warning \"leak of FILE 'fp'\" } */\n-/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } .-1 } */\n+} /* { dg-warning \"leak of FILE 'fp'\" \"warning\" } */\n+/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"to here\" { target *-*-* } .-1 } */"}, {"sha": "20728cb6dd3875f86fe25426420825476cf8fc46", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -29,8 +29,8 @@ void test(void)\n \n   __analyzer_eval (s.i >= 256); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (s.i == 256); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (s.i == 256); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): ideally it should figure out i == 256 at exit.  */\n \n   __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */"}, {"sha": "0b1de203f1207afd9f2ad5502afd04f7a0ddaa29", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-2a.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -14,9 +14,9 @@ void test(void)\n \n \n   for (u.i=0; u.i<256; u.i++) {\n-    __analyzer_eval (u.i < 256); /* { dg-warning \"TRUE\" } */\n-    /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } .-1 } */\n-    /* { dg-bogus \"UNKNOWN\" \"\" { xfail *-*-* } .-2 } */\n+    __analyzer_eval (u.i < 256); /* { dg-warning \"TRUE\" \"1st\" } */\n+    /* { dg-warning \"TRUE\" \"2nd\" { xfail *-*-* } .-1 } */\n+    /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-2 } */\n     /* (should report TRUE twice). */\n \n     __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n@@ -29,11 +29,11 @@ void test(void)\n       //__analyzer_eval (u.i >= 0); /* { d-todo-g-warning \"TRUE\" } */\n   }\n \n-  __analyzer_eval (u.i >= 256); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (u.i >= 256); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n \n-  __analyzer_eval (u.i == 256); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (u.i == 256); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): ideally it should figure out i == 256 at exit.  */\n \n   __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */"}, {"sha": "2ea44f5d18dbc039501b658f410528e2f5446c82", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-4.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -13,24 +13,24 @@ void test(void)\n \n   for (i=0; i<256; i++) {\n \n-    __analyzer_eval (i >= 0); /* { dg-warning \"TRUE\" } */\n-      /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i >= 0); /* { dg-warning \"TRUE\" \"true\" } */\n+      /* { dg-warning \"UNKNOWN\" \"unknown\" { target *-*-* } .-1 } */\n \n     __analyzer_eval (i < 256); /* { dg-warning \"TRUE\" } */\n \n     for (j=0; j<256; j++) {\n \n-      __analyzer_eval (j >= 0); /* { dg-warning \"TRUE\" } */\n-      /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+      __analyzer_eval (j >= 0); /* { dg-warning \"TRUE\" \"true\" } */\n+      /* { dg-warning \"UNKNOWN\" \"unknown\" { target *-*-* } .-1 } */\n \n       __analyzer_eval (j < 256); /* { dg-warning \"TRUE\" } */\n \n       __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n \n       for (k=0; k<256; k++) {\n \n-\t__analyzer_eval (k >= 0); /* { dg-warning \"TRUE\" } */\n-\t/* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+\t__analyzer_eval (k >= 0); /* { dg-warning \"TRUE\" \"true\" } */\n+\t/* { dg-warning \"UNKNOWN\" \"unknown\" { target *-*-* } .-1 } */\n \n \t__analyzer_eval (k < 256); /* { dg-warning \"TRUE\" } */\n "}, {"sha": "0fcc39316c415d3698224607194397a6fa06664c", "filename": "gcc/testsuite/gcc.dg/analyzer/loop.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -12,23 +12,23 @@ void test(void)\n       __analyzer_eval (i < 256); /* { dg-warning \"TRUE\" } */\n       /* (should report TRUE twice). */\n \n-      __analyzer_eval (i == 0); /* { dg-warning \"TRUE\" } */\n-      /* { dg-warning \"FALSE\" \"\" { xfail *-*-* } .-1 } */\n-      /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-2 } */\n+      __analyzer_eval (i == 0); /* { dg-warning \"TRUE\" \"1st\" } */\n+      /* { dg-warning \"FALSE\" \"2nd\" { xfail *-*-* } .-1 } */\n+      /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-2 } */\n       /* TODO(xfail^^^): ideally we ought to figure out i > 0 after 1st iteration.  */\n \n-      __analyzer_eval (i >= 0); /* { dg-warning \"TRUE\" } */\n-      /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-      /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-2 } */\n+      __analyzer_eval (i >= 0); /* { dg-warning \"TRUE\" \"1st\" } */\n+      /* { dg-warning \"TRUE\" \"2nd\" { xfail *-*-* } } */\n+      /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-2 } */\n       /* TODO(xfail^^^): ideally we ought to figure out i >= 0 for all iterations.  */\n \n       __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n   }\n \n   __analyzer_eval (i >= 256); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (i == 256); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (i == 256); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): it only figures out i >= 256, rather than i == 256.  */\n \n   __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */"}, {"sha": "6e9a014272e2e027a2f557096c9e3c130194cff8", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -474,8 +474,8 @@ test_41 (int flag)\n     buffer = NULL;\n   }\n \n-  buffer[0] = 'a'; /* { dg-warning \"dereference of possibly-NULL 'buffer'\" } */\n-  /* { dg-warning \"dereference of NULL 'buffer'\" \"\" { target *-*-* } .-1 } */\n+  buffer[0] = 'a'; /* { dg-warning \"dereference of possibly-NULL 'buffer'\" \"possibly-NULL\" } */\n+  /* { dg-warning \"dereference of NULL 'buffer'\" \"NULL\" { target *-*-* } .-1 } */\n \n   return buffer;\n }"}, {"sha": "bb93c53d3e0f155be989ed25cfa61d781eb0687a", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-2.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -9,15 +9,15 @@ extern char *strcpy(char *__restrict __dest, const char *__restrict __src)\n void test_1 (void)\n {\n   void *p = malloc (1024); /* { dg-message \"\\\\(1\\\\) this call could return NULL\" } */\n-  strcpy ((char *)p, \"hello world\"); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" } */\n-  /* { dg-message \"\\\\(2\\\\) argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  strcpy ((char *)p, \"hello world\"); /* { dg-warning \"use of possibly-NULL 'p' where non-null expected\" \"warning\" } */\n+  /* { dg-message \"\\\\(2\\\\) argument 1 \\\\('p'\\\\) from \\\\(1\\\\) could be NULL where non-null expected\" \"event\" { target *-*-* } .-1 } */\n   free (p);\n }\n \n int *test_2 (void)\n {\n   int *i = malloc (sizeof (int)); /* { dg-message \"\\\\(1\\\\) this call could return NULL\" } */\n-  *i = 42; /* { dg-warning \"dereference of possibly-NULL 'i'\" } */\n-  /* { dg-message \"\\\\(2\\\\) 'i' could be NULL: unchecked value from \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+  *i = 42; /* { dg-warning \"dereference of possibly-NULL 'i'\" \"warning\" } */\n+  /* { dg-message \"\\\\(2\\\\) 'i' could be NULL: unchecked value from \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n   return i; \n }"}, {"sha": "f3a5be51ff10d16d585a1bc84b79af2299c73cbe", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-ipa-10.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-10.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -1,12 +1,12 @@\n #include <stdlib.h>\n \n void\n-calls_free (void *victim) /* { dg-message \"\\\\(3\\\\) entry to 'calls_free'\" } */\n-/* { dg-message \"\\\\(7\\\\) entry to 'calls_free'\" \"\" { target *-*-* } .-1 } */\n+calls_free (void *victim) /* { dg-message \"\\\\(3\\\\) entry to 'calls_free'\" \"event 3\" } */\n+/* { dg-message \"\\\\(7\\\\) entry to 'calls_free'\" \"event 7\" { target *-*-* } .-1 } */\n {\n-  free (victim); /* { dg-warning \"double-'free' of 'victim'\" } */\n-  /* { dg-message \"\\\\(4\\\\) first 'free' here\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(4\\\\)\" \"\" { target *-*-* } .-2 } */\n+  free (victim); /* { dg-warning \"double-'free' of 'victim'\" \"warning\" } */\n+  /* { dg-message \"\\\\(4\\\\) first 'free' here\" \"event 4\" { target *-*-* } .-1 } */\n+  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(4\\\\)\" \"event 8\" { target *-*-* } .-2 } */\n \n   /* TODO: would this be better emitted at the callsite,\n      for such a simple wrapper?  */\n@@ -21,8 +21,8 @@ void test (void *ptr) /* { dg-message \"\\\\(1\\\\) entry to 'test'\" } */\n {\n   do_stuff ();\n \n-  calls_free (ptr); /* { dg-message \"\\\\(2\\\\) calling 'calls_free' from 'test'\" } */\n-  /* { dg-message \"\\\\(5\\\\) returning to 'test' from 'calls_free'\" \"\" { target *-*-* } .-1 } */\n+  calls_free (ptr); /* { dg-message \"\\\\(2\\\\) calling 'calls_free' from 'test'\" \"event 2\" } */\n+  /* { dg-message \"\\\\(5\\\\) returning to 'test' from 'calls_free'\" \"event 5\" { target *-*-* } .-1 } */\n \n   do_stuff ();\n "}, {"sha": "800dd63a031a068f544905b41741327638614183", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-ipa-2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-2.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -3,12 +3,12 @@\n #include <stdlib.h>\n \n void\n-calls_free (void *victim) /* { dg-message \"\\\\(3\\\\) entry to 'calls_free'\" } */\n-/* { dg-message \"\\\\(7\\\\) entry to 'calls_free'\" \"\" { target *-*-* } .-1 } */\n+calls_free (void *victim) /* { dg-message \"\\\\(3\\\\) entry to 'calls_free'\" \"event 3\" } */\n+/* { dg-message \"\\\\(7\\\\) entry to 'calls_free'\" \"event 7\" { target *-*-* } .-1 } */\n {\n-  free (victim); /* { dg-warning \"double-'free' of 'victim'\" } */\n-  /* { dg-message \"\\\\(4\\\\) first 'free' here\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(4\\\\)\" \"\" { target *-*-* } .-2 } */\n+  free (victim); /* { dg-warning \"double-'free' of 'victim'\" \"warning\" } */\n+  /* { dg-message \"\\\\(4\\\\) first 'free' here\" \"event 4\" { target *-*-* } .-1 } */\n+  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(4\\\\)\" \"event 8\" { target *-*-* } .-2 } */\n \n   /* TODO: would this be better emitted at the callsite,\n      for such a simple wrapper?  */\n@@ -20,8 +20,8 @@ void test (void *ptr) /* { dg-message \"\\\\(1\\\\) entry to 'test'\" } */\n {\n   do_stuff ();\n \n-  calls_free (ptr); /* { dg-message \"\\\\(2\\\\) calling 'calls_free' from 'test'\" } */\n-  /* { dg-message \"\\\\(5\\\\) returning to 'test' from 'calls_free'\" \"\" { target *-*-* } .-1 } */\n+  calls_free (ptr); /* { dg-message \"\\\\(2\\\\) calling 'calls_free' from 'test'\" \"event 2\" } */\n+  /* { dg-message \"\\\\(5\\\\) returning to 'test' from 'calls_free'\" \"event 5\" { target *-*-* } .-1 } */\n \n   do_stuff ();\n "}, {"sha": "c56419eeb5a5e1ea087406aa92fdd7b6f396a526", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-macro-separate-events.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-macro-separate-events.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-macro-separate-events.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-macro-separate-events.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -4,9 +4,9 @@\n \n #include \"malloc-macro.h\"\n \n-/* { dg-warning \"double-'free' of 'ptr'\" \"\" { target *-*-* } 2 } */\n-/* { dg-message \"first 'free' here\" \"\" { target *-*-* } 2 } */\n-/* { dg-message \"second 'free' here\" \"\" { target *-*-* } 2 } */\n+/* { dg-warning \"double-'free' of 'ptr'\" \"warning\" { target *-*-* } 2 } */\n+/* { dg-message \"first 'free' here\" \"1st free event\" { target *-*-* } 2 } */\n+/* { dg-message \"second 'free' here\" \"2nd free event\" { target *-*-* } 2 } */\n \n int test (void *ptr)\n {"}, {"sha": "0436928238c2cf6236fe9215f11daa716736331c", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -8,8 +8,8 @@ void test_1 (void)\n   free (ptr); /* { dg-line first_free } */\n   free (ptr); /* { dg-line second_free } */\n \n-  /* { dg-warning \"double-'free' of 'ptr'\"  \"\" { target *-*-* } second_free } */\n-  /* { dg-message \"\\\\(1\\\\) allocated here\" \"\" { target *-*-* } malloc } */\n-  /* { dg-message \"\\\\(2\\\\) first 'free' here\" \"\" { target *-*-* } first_free } */\n-  /* { dg-message \"\\\\(3\\\\) second 'free' here; first 'free' was at \\\\(2\\\\)\" \"\" { target *-*-* } second_free } */\n+  /* { dg-warning \"double-'free' of 'ptr'\"  \"warning\" { target *-*-* } second_free } */\n+  /* { dg-message \"\\\\(1\\\\) allocated here\" \"event 1\" { target *-*-* } malloc } */\n+  /* { dg-message \"\\\\(2\\\\) first 'free' here\" \"event 2\" { target *-*-* } first_free } */\n+  /* { dg-message \"\\\\(3\\\\) second 'free' here; first 'free' was at \\\\(2\\\\)\" \"event 3\" { target *-*-* } second_free } */\n }"}, {"sha": "27098da1996dbbbe0f6d6060936b5c6dcd132791", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-2.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -7,7 +7,7 @@ void test_2 (void *ptr)\n   free (ptr); /* { dg-line first_free } */\n   free (ptr); /* { dg-line second_free } */\n \n-  /* { dg-warning \"double-'free' of 'ptr'\"  \"\" { target *-*-* } second_free } */\n-  /* { dg-message \"\\\\(1\\\\) first 'free' here\" \"\" { target *-*-* } first_free } */\n-  /* { dg-message \"\\\\(2\\\\) second 'free' here; first 'free' was at \\\\(1\\\\)\" \"\" { target *-*-* } second_free } */\n+  /* { dg-warning \"double-'free' of 'ptr'\"  \"warning\" { target *-*-* } second_free } */\n+  /* { dg-message \"\\\\(1\\\\) first 'free' here\" \"event 1\" { target *-*-* } first_free } */\n+  /* { dg-message \"\\\\(2\\\\) second 'free' here; first 'free' was at \\\\(1\\\\)\" \"event 2\" { target *-*-* } second_free } */\n }"}, {"sha": "8f9e4cff6e2b26a95d054d2b36ac2ccf80e4fb16", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-3.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -8,7 +8,7 @@ int *test_3 (void)\n   *ptr = 42; /* { dg-line unchecked_deref } */\n   return ptr;\n \n-  /* { dg-warning \"dereference of possibly-NULL 'ptr'\" \"\" { target *-*-* } unchecked_deref } */\n-  /* { dg-message \"\\\\(1\\\\) this call could return NULL\" \"\" { target *-*-* } malloc } */\n-  /* { dg-message \"\\\\(2\\\\) 'ptr' could be NULL\" \"\" { target *-*-* } unchecked_deref } */\n+  /* { dg-warning \"dereference of possibly-NULL 'ptr'\" \"warning\" { target *-*-* } unchecked_deref } */\n+  /* { dg-message \"\\\\(1\\\\) this call could return NULL\" \"event 1\" { target *-*-* } malloc } */\n+  /* { dg-message \"\\\\(2\\\\) 'ptr' could be NULL\" \"event 2\" { target *-*-* } unchecked_deref } */\n }"}, {"sha": "7b7803eac45ad5cb48964ff51737e55aeee2ecc0", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-4.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-4.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -11,10 +11,10 @@ int *test_4 (void)\n     *ptr = 43; /* { dg-line on_null_ptr } */\n   return ptr;\n \n-  /* { dg-warning \"dereference of NULL 'ptr'\" \"\" { target *-*-* } on_null_ptr } */\n-  /* { dg-message \"\\\\(1\\\\) allocated here\" \"\" { target *-*-* } malloc } */\n-  /* { dg-message \"\\\\(2\\\\) assuming 'ptr' is NULL\" \"\" { target *-*-* } cond } */\n-  /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'ptr' is NULL\\\\)\\\\.\\\\.\\\\.\" \"\" { target *-*-* } cond } */\n-  /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } on_null_ptr } */\n-  /* { dg-message \"\\\\(5\\\\) dereference of NULL 'ptr'\" \"\" { target *-*-* } on_null_ptr } */\n+  /* { dg-warning \"dereference of NULL 'ptr'\" \"warning\" { target *-*-* } on_null_ptr } */\n+  /* { dg-message \"\\\\(1\\\\) allocated here\" \"event 1\" { target *-*-* } malloc } */\n+  /* { dg-message \"\\\\(2\\\\) assuming 'ptr' is NULL\" \"event 2\" { target *-*-* } cond } */\n+  /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'ptr' is NULL\\\\)\\\\.\\\\.\\\\.\" \"event 3\" { target *-*-* } cond } */\n+  /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" \"event 4\" { target *-*-* } on_null_ptr } */\n+  /* { dg-message \"\\\\(5\\\\) dereference of NULL 'ptr'\" \"event 5\" { target *-*-* } on_null_ptr } */\n }"}, {"sha": "ca8d22be7b0d21af470e7454bd2950924836e837", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-5.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-5.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -29,15 +29,15 @@ int test (const char *filename, int flag)\n   free (q);\n   return 0;\n \n-  /* { dg-warning \"double-'free' of 'p'\" \"\" { target *-*-* } second_free_of_p } */\n-  /* { dg-message \"\\\\(1\\\\) allocated here\" \"\" { target *-*-* } malloc_of_p } */\n-  /* { dg-message \"\\\\(2\\\\) assuming 'p' is non-NULL\" \"\" { target *-*-* } test_of_p } */\n-  /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'p' is non-NULL\\\\)\\\\.\\\\.\\\\.\" \"\" { target *-*-* } test_of_p } */\n-  /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } malloc_of_q } */\n-  /* { dg-message \"\\\\(5\\\\) following 'true' branch \\\\(when 'q' is NULL\\\\)\\\\.\\\\.\\\\.\" \"\" { target *-*-* } test_of_q } */\n-  /* { dg-message \"\\\\(6\\\\) \\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } first_free_of_p } */\n-  /* { dg-message \"\\\\(7\\\\) first 'free' here\" \"\" { target *-*-* } first_free_of_p } */\n-  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(7\\\\)\" \"\" { target *-*-* } second_free_of_p } */\n+  /* { dg-warning \"double-'free' of 'p'\" \"warning\" { target *-*-* } second_free_of_p } */\n+  /* { dg-message \"\\\\(1\\\\) allocated here\" \"event 1\" { target *-*-* } malloc_of_p } */\n+  /* { dg-message \"\\\\(2\\\\) assuming 'p' is non-NULL\" \"event 2\" { target *-*-* } test_of_p } */\n+  /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'p' is non-NULL\\\\)\\\\.\\\\.\\\\.\" \"event 3\" { target *-*-* } test_of_p } */\n+  /* { dg-message \"\\\\(4\\\\) \\\\.\\\\.\\\\.to here\" \"event 4\" { target *-*-* } malloc_of_q } */\n+  /* { dg-message \"\\\\(5\\\\) following 'true' branch \\\\(when 'q' is NULL\\\\)\\\\.\\\\.\\\\.\" \"event 5\" { target *-*-* } test_of_q } */\n+  /* { dg-message \"\\\\(6\\\\) \\\\.\\\\.\\\\.to here\" \"event 6\" { target *-*-* } first_free_of_p } */\n+  /* { dg-message \"\\\\(7\\\\) first 'free' here\" \"event 7\" { target *-*-* } first_free_of_p } */\n+  /* { dg-message \"\\\\(8\\\\) second 'free' here; first 'free' was at \\\\(7\\\\)\" \"event 8\" { target *-*-* } second_free_of_p } */\n \n   /* We don't care about the state changes to q.  */\n }"}, {"sha": "f6b99e35a43eaaac0c813164eb5f81660fccb19c", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-7.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -12,8 +12,8 @@ void test (void)\n   if (!q) /* { dg-message \"\\\\(2\\\\) following 'true' branch \\\\(when 'q' is NULL\\\\)\\\\.\\\\.\\\\.\" } */ \n     {\n       free (q); /* { dg-message \"\\\\(3\\\\) \\\\.\\\\.\\\\.to here\" } */ \n-      return; /* { dg-warning \"leak of 'p'\" } */ \n-      /* { dg-message \"\\\\(4\\\\) 'p' leaks here; was allocated at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+      return; /* { dg-warning \"leak of 'p'\" \"warning\" } */ \n+      /* { dg-message \"\\\\(4\\\\) 'p' leaks here; was allocated at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n     }\n   bar ();\n   free (q);"}, {"sha": "c5ff96e56448d856a6d176ae28aaef3337e6ac89", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-9.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -111,9 +111,9 @@ int test_3 (int x, int y)\n   if (y)\n     free (ptr); /* No double-'free' warning: we've already attempted\n \t\t   to dereference it above.  */\n-  return *ptr; /* { dg-warning \"use after 'free' of 'ptr'\" } */\n+  return *ptr; /* { dg-warning \"use after 'free' of 'ptr'\" \"use-after-free\" } */\n   // TODO: two warnings here:  one is from sm-malloc, the other from region model\n-  /* { dg-warning \"leak of 'ptr'\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"leak of 'ptr'\" \"leak\" { target *-*-* } .-2 } */\n }\n \n /* \"dereference of possibly-NULL 'ptr'\".  */"}, {"sha": "79e76bccc668f5e0b5b07c8b8993358c5ee624c4", "filename": "gcc/testsuite/gcc.dg/analyzer/operations.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Foperations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Foperations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Foperations.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -9,26 +9,26 @@ void test (int i, int j)\n \n     i += 3;\n \n-    __analyzer_eval (i > 45); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i > 45); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): do we really know this?  what about overflow?  */\n \n     i -= 1;\n \n-    __analyzer_eval (i > 44); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i > 44); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): do we really know this?  what about overflow?  */\n \n     i = 3 * i;\n \n-    __analyzer_eval (i > 132); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i > 132); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): do we really know this?  what about overflow?  */\n \n     i /= 2;\n \n-    __analyzer_eval (i > 66); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i > 66); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): do we really know this?  what about overflow?  */\n \n     /* We don't know anything about j, so we don't know anything about k: */\n@@ -37,8 +37,8 @@ void test (int i, int j)\n \n     /* However, we should now know that m > 67: */\n     m = i + 1;\n-    __analyzer_eval (m > 67); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (m > 67); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): do we really know this?  what about overflow?  */\n   }\n }"}, {"sha": "f8331ddc094b57f55df75758765b32d05a33d0bc", "filename": "gcc/testsuite/gcc.dg/analyzer/params.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -8,8 +8,8 @@ static int called_function(int j)\n \n   k = j - 1;\n \n-  __analyzer_eval (k > 3); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-  /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+  __analyzer_eval (k > 3); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail): we're not then updating based on the assignment.  */\n \n   return k;\n@@ -25,8 +25,8 @@ void test(int i)\n \n     i = called_function(i);\n \n-    __analyzer_eval (i > 3); /* { dg-warning \"TRUE\" \"\" { xfail *-*-* } } */\n-    /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+    __analyzer_eval (i > 3); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n+    /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n     /* TODO(xfail): we're not updating from the returned value.  */\n   }\n "}, {"sha": "1306f6de575befddc24facdf04439f60ee53fda9", "filename": "gcc/testsuite/gcc.dg/analyzer/pattern-test-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -7,8 +7,8 @@ extern void bar(void *);\n \n void test1(void *ptr)\n {\n-  if (ptr) { /* { dg-warning \"pattern match on 'ptr != 0'\" } */\n-  /* { dg-warning \"pattern match on 'ptr == 0'\" \"\" { target *-*-* } .-1 } */\n+  if (ptr) { /* { dg-warning \"pattern match on 'ptr != 0'\" \"ptr != 0\" } */\n+  /* { dg-warning \"pattern match on 'ptr == 0'\" \"ptr == 0\" { target *-*-* } .-1 } */\n     foo(ptr);\n   } else {\n     bar(ptr);\n@@ -21,8 +21,8 @@ void test_2 (void *p, void *q)\n     return;\n   foo(p);\n \n-  /* { dg-warning \"pattern match on 'p == 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on 'q == 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on 'p != 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on 'q != 0'\" \"\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'p == 0'\" \"p == 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'q == 0'\" \"q == 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'p != 0'\" \"p != 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'q != 0'\" \"q != 0\" { target *-*-* } cond_2 } */\n }"}, {"sha": "ffc06a2f87a471e842772248273bf8baa110f2b2", "filename": "gcc/testsuite/gcc.dg/analyzer/pattern-test-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -8,8 +8,8 @@ extern void bar(void *);\n \n void test1(void *ptr)\n {\n-  if (ptr) { /* { dg-warning \"pattern match on 'ptr != 0'\" } */\n-  /* { dg-warning \"pattern match on 'ptr == 0'\" \"\" { target *-*-* } .-1 } */\n+  if (ptr) { /* { dg-warning \"pattern match on 'ptr != 0'\" \"ptr != 0\" } */\n+  /* { dg-warning \"pattern match on 'ptr == 0'\" \"ptr == 0\" { target *-*-* } .-1 } */\n     foo(ptr);\n   } else {\n     bar(ptr);\n@@ -22,8 +22,8 @@ void test_2 (void *p, void *q)\n     return;\n   foo(p);\n \n-  /* { dg-warning \"pattern match on '<unknown> == 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on '<unknown> != 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on 'p != 0'\" \"\" { target *-*-* } cond_2 } */\n-  /* { dg-warning \"pattern match on 'q != 0'\" \"\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on '<unknown> == 0'\" \"<unknown> == 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on '<unknown> != 0'\" \"<unknown> != 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'p != 0'\" \"p != 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'q != 0'\" \"q != 0\" { target *-*-* } cond_2 } */\n }"}, {"sha": "8c6b60747840cd9486c73a5876508083e218d47e", "filename": "gcc/testsuite/gcc.dg/analyzer/sensitive-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsensitive-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsensitive-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsensitive-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -5,29 +5,29 @@\n char test_1 (FILE *logfile)\n {\n   char *password = getpass (\">\"); /* { dg-message \"\\\\(1\\\\) sensitive value acquired here\" } */\n-  fprintf (logfile, \"got password %s\\n\", password); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" } */\n-  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+  fprintf (logfile, \"got password %s\\n\", password); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" \"warning\" } */\n+  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n }\n \n char test_2 (FILE *logfile, int i)\n {\n   char *password = getpass (\">\"); /* { dg-message \"\\\\(1\\\\) sensitive value acquired here\" } */\n   fprintf (logfile, \"got password[%i]: %s\\n\", i, password); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" } */\n-  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n }\n \n char test_3 (FILE *logfile)\n {\n   char *password = getpass (\">\"); /* { dg-message \"\\\\(1\\\\) sensitive value acquired here\" } */\n-  printf (\"got password %s\\n\", password); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" } */\n-  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+  printf (\"got password %s\\n\", password); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" \"warning\" } */\n+  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n }\n \n char test_4 (FILE *logfile)\n {\n   char *password = getpass (\">\"); /* { dg-message \"\\\\(1\\\\) sensitive value acquired here\" } */\n-  fwrite (password, strlen (password), 1, logfile); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" } */\n-  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */\n+  fwrite (password, strlen (password), 1, logfile); /* { dg-warning \"sensitive value 'password' written to output file \\\\\\[CWE-532\\\\\\]\" \"warning\" } */\n+  /* { dg-message \"\\\\(2\\\\) sensitive value 'password' written to output file; acquired at \\\\(1\\\\)\" \"event\" { target *-*-* } .-1 } */\n }\n \n static void called_by_test_5 (const char *value)"}, {"sha": "870b00f8c03d4e98bea6f422bc33983073a8f425", "filename": "gcc/testsuite/gcc.dg/analyzer/switch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -19,8 +19,8 @@ void test (int i)\n       __analyzer_eval (i == 0); /* { dg-warning \"FALSE\" } */\n       __analyzer_eval (i == 2); /* { dg-warning \"UNKNOWN\" } */\n       __analyzer_eval (i == 3); /* { dg-warning \"FALSE\" } */\n-      __analyzer_eval (i == 4); /* { dg-warning \"FALSE\" \"\" { xfail *-*-* } } */\n-      /* { dg-warning \"UNKNOWN\" \"\" { target *-*-* } .-1 } */\n+      __analyzer_eval (i == 4); /* { dg-warning \"FALSE\" \"desired\" { xfail *-*-* } } */\n+      /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n       /* TODO(xfail^^^): we're only checking against endpoints of case\n \t ranges, not the insides.  */\n       __analyzer_eval (i == 5); /* { dg-warning \"FALSE\" } */"}, {"sha": "293ce2868195b011ba2a056749207f1ed8b48dcc", "filename": "gcc/testsuite/gcc.dg/analyzer/taint-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-1.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -12,14 +12,14 @@ char test_1(FILE *f)\n {\n   struct foo tmp;\n \n-  if (1 == fread(&tmp, sizeof(tmp), 1, f)) { /* { dg-message \"\\\\(1\\\\) 'tmp' gets an unchecked value here\" } */\n-                                             /* { dg-message \"\\\\(2\\\\) following 'true' branch\\\\.\\\\.\\\\.\" \"\" { target *-*-* } .-1 } */\n+  if (1 == fread(&tmp, sizeof(tmp), 1, f)) { /* { dg-message \"\\\\(1\\\\) 'tmp' gets an unchecked value here\" \"event 1\" } */\n+                                             /* { dg-message \"\\\\(2\\\\) following 'true' branch\\\\.\\\\.\\\\.\" \"event 2\" { target *-*-* } .-1 } */\n     /* BUG: the following array lookup trusts that the input data's index is\n        in the range 0 <= i < 256; otherwise it's accessing the stack */\n-    return tmp.buf[tmp.i]; // { dg-warning \"use of tainted value 'tmp.i' in array lookup without bounds checking\" } */\n-    /* { dg-message \"23: \\\\(3\\\\) \\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } .-1 } */\n-    /* { dg-message \"23: \\\\(4\\\\) 'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"\" { target *-*-* } .-2 } */\n-    /* { dg-message \"\\\\(5\\\\) use of tainted value 'tmp.i' in array lookup without bounds checking\" \"\" { target *-*-* } .-3 } */\n+    return tmp.buf[tmp.i]; // { dg-warning \"use of tainted value 'tmp.i' in array lookup without bounds checking\" \"warning\" } */\n+    /* { dg-message \"23: \\\\(3\\\\) \\\\.\\\\.\\\\.to here\" \"event 3\" { target *-*-* } .-1 } */\n+    /* { dg-message \"23: \\\\(4\\\\) 'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"event 4\" { target *-*-* } .-2 } */\n+    /* { dg-message \"\\\\(5\\\\) use of tainted value 'tmp.i' in array lookup without bounds checking\" \"event 5\" { target *-*-* } .-3 } */\n     \n     // TOOD: better messages for state changes\n   }\n@@ -50,8 +50,8 @@ char test_4(FILE *f)\n   struct foo tmp;\n \n   if (1 == fread(&tmp, sizeof(tmp), 1, f)) {\n-    if (tmp.i >= 0) { /* { dg-message \"'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" } */\n-      /* { dg-message \"'tmp.i' has its lower bound checked here\" \"\" { target *-*-* } .-1 } */\n+    if (tmp.i >= 0) { /* { dg-message \"'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"warning\" } */\n+      /* { dg-message \"'tmp.i' has its lower bound checked here\" \"event\" { target *-*-* } .-1 } */\n       return tmp.buf[tmp.i]; /* { dg-warning \"use of tainted value 'tmp.i' in array lookup without upper-bounds checking\" } */\n     }\n   }\n@@ -63,8 +63,8 @@ char test_5(FILE *f)\n   struct foo tmp;\n \n   if (1 == fread(&tmp, sizeof(tmp), 1, f)) {\n-    if (tmp.i < 256) { /* { dg-message \"'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" } */\n-      /* { dg-message \"'tmp.i' has its upper bound checked here\" \"\" { target *-*-* } .-1 } */\n+    if (tmp.i < 256) { /* { dg-message \"'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"warning\" } */\n+      /* { dg-message \"'tmp.i' has its upper bound checked here\" \"event\" { target *-*-* } .-1 } */\n       return tmp.buf[tmp.i]; /* { dg-warning \"use of tainted value 'tmp.i' in array lookup without lower-bounds checking\" } */\n     }\n   }"}, {"sha": "355c8b3d92ad73265b3acb8588aa1ce2a1d47871", "filename": "gcc/testsuite/gcc.dg/analyzer/unknown-fns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funknown-fns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8863f61c9c9dcec6003c4d61665b226569c0c3b2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funknown-fns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funknown-fns.c?ref=8863f61c9c9dcec6003c4d61665b226569c0c3b2", "patch": "@@ -75,8 +75,8 @@ void test_4a (void)\n   node_a.next = &node_b;\n   node_b.ptr = malloc (sizeof (int));\n   global_ptr = &node_a;\n-  *node_b.ptr = 42; /* { dg-warning \"possibly-NULL\" } */\n-  /* { dg-warning \"leak\" \"\" { target *-*-* } .-1 } */\n+  *node_b.ptr = 42; /* { dg-warning \"possibly-NULL\" \"possibly-NULL\" } */\n+  /* { dg-warning \"leak\" \"leak\" { target *-*-* } .-1 } */\n   /* FIXME: the above leak report is correct, but is reported at the wrong\n      location.  */\n } /* { dg-warning \"leak\" } */"}]}