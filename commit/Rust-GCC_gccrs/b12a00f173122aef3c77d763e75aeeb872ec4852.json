{"sha": "b12a00f173122aef3c77d763e75aeeb872ec4852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyYTAwZjE3MzEyMmFlZjNjNzdkNzYzZTc1YWVlYjg3MmVjNDg1Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-01-14T13:58:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-01-14T13:58:40Z"}, "message": "re PR target/7525 ([ARM/Thumb] long calls stubs only in one code section, cannot branch to them from other section)\n\nPR target/7525\n* arm.h (struct machine_function): Add call_via field.\n(thumb_call_via_label): Declare.\n* arm.c (thumb_call_via_label): New variable.\n(thumb_call_reg_needed): New variable.\n(arm_output_function_epilogue): For Thumb code, output any per-function\ncall-indirect trampolines.\n(thumb_call_via_reg): New function.\n(arm_file_end): New function.\n(TARGET_ASM_FILE_END): Call arm_file_end.\n(aof_file_end): Likewise.\n* arm-protos.h (thumb_call_via_reg): Declare.\n* arm.md (call_reg_thumb, call_value_reg_thumb): Call\nthumb_call_via_reg in normal case.\n\nFrom-SVN: r93641", "tree": {"sha": "021122a0957f4ba3b3891a5ebe57b512188180cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021122a0957f4ba3b3891a5ebe57b512188180cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12a00f173122aef3c77d763e75aeeb872ec4852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12a00f173122aef3c77d763e75aeeb872ec4852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12a00f173122aef3c77d763e75aeeb872ec4852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12a00f173122aef3c77d763e75aeeb872ec4852/comments", "author": null, "committer": null, "parents": [{"sha": "c224550fb5c90f7fb2b578507e837c77b7758d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c224550fb5c90f7fb2b578507e837c77b7758d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c224550fb5c90f7fb2b578507e837c77b7758d7d"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "7233c29222be1c2dd3307ff8186113f6954c07f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b12a00f173122aef3c77d763e75aeeb872ec4852", "patch": "@@ -1,3 +1,20 @@\n+2005-01-14  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/7525\n+\t* arm.h (struct machine_function): Add call_via field.\n+\t(thumb_call_via_label): Declare.\n+\t* arm.c (thumb_call_via_label): New variable.\n+\t(thumb_call_reg_needed): New variable.\n+\t(arm_output_function_epilogue): For Thumb code, output any per-function\n+\tcall-indirect trampolines.\n+\t(thumb_call_via_reg): New function.\n+\t(arm_file_end): New function.\n+\t(TARGET_ASM_FILE_END): Call arm_file_end.\n+\t(aof_file_end): Likewise.\n+\t* arm-protos.h (thumb_call_via_reg): Declare.\n+\t* arm.md (call_reg_thumb, call_value_reg_thumb): Call \n+\tthumb_call_via_reg in normal case.\n+\n 2005-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/19084"}, {"sha": "99c79231d78e53692fb5f2f8dfb51d9560c3b9d1", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b12a00f173122aef3c77d763e75aeeb872ec4852", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in arm.c and pe.c\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@arm.com)\n    Minor hacks by Nick Clifton (nickc@cygnus.com)\n@@ -150,6 +150,7 @@ extern int thumb_shiftable_const (unsigned HOST_WIDE_INT);\n extern void thumb_final_prescan_insn (rtx);\n extern const char *thumb_load_double_from_address (rtx *);\n extern const char *thumb_output_move_mem_multiple (int, rtx *);\n+extern const char *thumb_call_via_reg (rtx);\n extern void thumb_expand_movmemqi (rtx *);\n extern rtx *thumb_legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern int thumb_go_if_legitimate_address (enum machine_mode, rtx);"}, {"sha": "649fde3029996fdd7f2ec4781d0de6c3e4cb2995", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b12a00f173122aef3c77d763e75aeeb872ec4852", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004  Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -153,6 +153,9 @@ static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #ifndef ARM_PE\n static void arm_encode_section_info (tree, rtx, int);\n #endif\n+\n+static void arm_file_end (void);\n+\n #ifdef AOF_ASSEMBLER\n static void aof_globalize_label (FILE *, const char *);\n static void aof_dump_imports (FILE *);\n@@ -188,6 +191,9 @@ static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arm_attribute_table\n \n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END arm_file_end\n+\n #ifdef AOF_ASSEMBLER\n #undef  TARGET_ASM_BYTE_OP\n #define TARGET_ASM_BYTE_OP \"\\tDCB\\t\"\n@@ -366,6 +372,10 @@ const char * target_abi_name = NULL;\n const char * structure_size_string = NULL;\n int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n \n+/* Used for Thumb call_via trampolines.  */\n+rtx thumb_call_via_label[13];\n+static int thumb_call_reg_needed;\n+\n /* Bit values used to identify processor capabilities.  */\n #define FL_CO_PROC    (1 << 0)        /* Has external co-processor bus */\n #define FL_ARCH3M     (1 << 1)        /* Extended multiply */\n@@ -9600,6 +9610,23 @@ arm_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \n   if (TARGET_THUMB)\n     {\n+      int regno;\n+\n+      /* Emit any call-via-reg trampolines that are needed for v4t support\n+\t of call_reg and call_value_reg type insns.  */\n+      for (regno = 0; regno < SP_REGNUM; regno++)\n+\t{\n+\t  rtx label = cfun->machine->call_via[regno];\n+\n+\t  if (label != NULL)\n+\t    {\n+\t      function_section (current_function_decl);\n+\t      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t\t      CODE_LABEL_NUMBER (label));\n+\t      asm_fprintf (asm_out_file, \"\\tbx\\t%r\\n\", regno);\n+\t    }\n+\t}\n+\n       /* ??? Probably not safe to set this here, since it assumes that a\n \t function will be emitted as assembly immediately after we generate\n \t RTL for it.  This does not happen for inline functions.  */\n@@ -13652,6 +13679,37 @@ thumb_output_move_mem_multiple (int n, rtx *operands)\n   return \"\";\n }\n \n+/* Output a call-via instruction for thumb state.  */\n+const char *\n+thumb_call_via_reg (rtx reg)\n+{\n+  int regno = REGNO (reg);\n+  rtx *labelp;\n+\n+  gcc_assert (regno < SP_REGNUM);\n+\n+  /* If we are in the normal text section we can use a single instance\n+     per compilation unit.  If we are doing function sections, then we need\n+     an entry per section, since we can't rely on reachability.  */\n+  if (in_text_section ())\n+    {\n+      thumb_call_reg_needed = 1;\n+\n+      if (thumb_call_via_label[regno] == NULL)\n+\tthumb_call_via_label[regno] = gen_label_rtx ();\n+      labelp = thumb_call_via_label + regno;\n+    }\n+  else\n+    {\n+      if (cfun->machine->call_via[regno] == NULL)\n+\tcfun->machine->call_via[regno] = gen_label_rtx ();\n+      labelp = cfun->machine->call_via + regno;\n+    }\n+\n+  output_asm_insn (\"bl\\t%a0\", labelp);\n+  return \"\";\n+}\n+\n /* Routines for generating rtl.  */\n void\n thumb_expand_movmemqi (rtx *operands)\n@@ -13762,6 +13820,31 @@ arm_asm_output_labelref (FILE *stream, const char *name)\n     asm_fprintf (stream, \"%U%s\", name);\n }\n \n+static void\n+arm_file_end (void)\n+{\n+  int regno;\n+\n+  if (! thumb_call_reg_needed)\n+    return;\n+\n+  text_section ();\n+  asm_fprintf (asm_out_file, \"\\t.code 16\\n\");\n+  ASM_OUTPUT_ALIGN (asm_out_file, 1);\n+\n+  for (regno = 0; regno < SP_REGNUM; regno++)\n+    {\n+      rtx label = thumb_call_via_label[regno];\n+\n+      if (label != 0)\n+\t{\n+\t  targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (label));\n+\t  asm_fprintf (asm_out_file, \"\\tbx\\t%r\\n\", regno);\n+\t}\n+    }\n+}\n+\n rtx aof_pic_label;\n \n #ifdef AOF_ASSEMBLER\n@@ -13958,6 +14041,7 @@ aof_file_end (void)\n {\n   if (flag_pic)\n     aof_dump_pic_table (asm_out_file);\n+  arm_file_end ();\n   aof_dump_imports (asm_out_file);\n   fputs (\"\\tEND\\n\", asm_out_file);\n }"}, {"sha": "9e84626acbd18a21eeaf6cd8ecc1322335bd0903", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b12a00f173122aef3c77d763e75aeeb872ec4852", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -1703,9 +1703,16 @@ typedef struct machine_function GTY(())\n   /* Records if sibcalls are blocked because an argument\n      register is needed to preserve stack alignment.  */\n   int sibcall_blocked;\n+  /* Labels for per-function Thumb call-via stubs.  One per potential calling\n+     register.  We can never call via SP, LR or PC.  */\n+  rtx call_via[13];\n }\n machine_function;\n \n+/* As in the machine_function, a global set of call-via labels, for code \n+   that is in text_section().  */\n+extern GTY(()) rtx thumb_call_via_label[13];\n+\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the\n    type `int' suffices and can hold the number of bytes of argument so far.  */"}, {"sha": "7d8075ff7950e725a27e3f5346bb38854b07b4f9", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12a00f173122aef3c77d763e75aeeb872ec4852/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b12a00f173122aef3c77d763e75aeeb872ec4852", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for ARM for GNU compiler\n ;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000,\n-;;  2001, 2002, 2003 2004  Free Software Foundation, Inc.\n+;;  2001, 2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;  and Martin Simmons (@harleqn.co.uk).\n ;;  More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -7436,7 +7436,7 @@\n   \"*\n   {\n     if (!TARGET_CALLER_INTERWORKING)\n-      return \\\"bl\\\\t%__call_via_%0\\\";\n+      return thumb_call_via_reg (operands[0]);\n     else if (operands[1] == const0_rtx)\n       return \\\"bl\\\\t%__interwork_call_via_%0\\\";\n     else if (frame_pointer_needed)\n@@ -7530,7 +7530,7 @@\n   \"*\n   {\n     if (!TARGET_CALLER_INTERWORKING)\n-      return \\\"bl\\\\t%__call_via_%1\\\";\n+      return thumb_call_via_reg (operands[1]);\n     else if (operands[2] == const0_rtx)\n       return \\\"bl\\\\t%__interwork_call_via_%1\\\";\n     else if (frame_pointer_needed)"}]}