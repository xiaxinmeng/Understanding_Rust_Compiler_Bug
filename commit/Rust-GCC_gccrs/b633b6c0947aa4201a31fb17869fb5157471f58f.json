{"sha": "b633b6c0947aa4201a31fb17869fb5157471f58f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzM2I2YzA5NDdhYTQyMDFhMzFmYjE3ODY5ZmI1MTU3NDcxZjU4Zg==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "2000-04-24T23:57:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-04-24T23:57:46Z"}, "message": "gcc.c (load_specs): New static function.\n\n        * gcc.c (load_specs): New static function.\n        (read_specs): Use it.\n\nFrom-SVN: r33395", "tree": {"sha": "b2fc748df5fcea1eac4240247d3d1656aef106fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2fc748df5fcea1eac4240247d3d1656aef106fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b633b6c0947aa4201a31fb17869fb5157471f58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b633b6c0947aa4201a31fb17869fb5157471f58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b633b6c0947aa4201a31fb17869fb5157471f58f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b633b6c0947aa4201a31fb17869fb5157471f58f/comments", "author": null, "committer": null, "parents": [{"sha": "03bf1c28ac17199533dcab43432f1f0532ecfaaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bf1c28ac17199533dcab43432f1f0532ecfaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bf1c28ac17199533dcab43432f1f0532ecfaaa"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "a4bb17080c201dba3231a0963009a63915be9b54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b633b6c0947aa4201a31fb17869fb5157471f58f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b633b6c0947aa4201a31fb17869fb5157471f58f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b633b6c0947aa4201a31fb17869fb5157471f58f", "patch": "@@ -1,5 +1,8 @@\n Mon Apr 24 17:34:18 2000  Mumit Khan  <khan@xraylith.wisc.edu>\n \n+\t* gcc.c (load_specs): New static function.\n+\t(read_specs): Use it.\n+\n \t* gcc.c (lookup_compiler): Make multiple passes for case\n \tinsensitive filesystems.\n "}, {"sha": "7730482ea5385f16be772b0e74c6ee12e1e0941e", "filename": "gcc/gcc.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b633b6c0947aa4201a31fb17869fb5157471f58f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b633b6c0947aa4201a31fb17869fb5157471f58f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b633b6c0947aa4201a31fb17869fb5157471f58f", "patch": "@@ -1451,27 +1451,21 @@ store_arg (arg, delete_always, delete_failure)\n     record_temp_file (arg, delete_always, delete_failure);\n }\n \f\n-/* Read compilation specs from a file named FILENAME,\n-   replacing the default ones.\n+/* Load specs from a file name named FILENAME, replacing occurances of\n+   various different types of line-endings, \\r\\n, \\n\\r and just \\r, with \n+   a single \\n.  */\n \n-   A suffix which starts with `*' is a definition for\n-   one of the machine-specific sub-specs.  The \"suffix\" should be\n-   *asm, *cc1, *cpp, *link, *startfile, *signed_char, etc.\n-   The corresponding spec is stored in asm_spec, etc.,\n-   rather than in the `compilers' vector.\n-\n-   Anything invalid in the file is a fatal error.  */\n-\n-static void\n-read_specs (filename, main_p)\n+static char*\n+load_specs (filename)\n      const char *filename;\n-     int main_p;\n {\n   int desc;\n   int readlen;\n   struct stat statbuf;\n   char *buffer;\n-  register char *p;\n+  char *buffer_p;\n+  char *specs;\n+  char *specs_p;\n \n   if (verbose_flag)\n     notice (\"Reading specs from %s\\n\", filename);\n@@ -1491,6 +1485,51 @@ read_specs (filename, main_p)\n   buffer[readlen] = 0;\n   close (desc);\n \n+  specs = xmalloc (readlen + 1);\n+  specs_p = specs;\n+  for (buffer_p = buffer; buffer_p && *buffer_p; buffer_p++)\n+    {\n+      int skip = 0;\n+      char c = *buffer_p;\n+      if (c == '\\r')\n+        {\n+\t  if (buffer_p > buffer && *(buffer_p-1) == '\\n')\t/* \\n\\r */\n+\t    skip = 1;\n+\t  else if (*(buffer_p+1) == '\\n')\t\t\t/* \\r\\n */\n+\t    skip = 1;\n+\t  else\t\t\t\t\t\t\t/* \\r */\n+\t    c = '\\n';\n+\t}\n+      if (! skip)\n+\t*specs_p++ = c;\n+    }\n+  *specs_p = '\\0';\n+\n+  free (buffer);\n+  return (specs);\n+}\n+\n+/* Read compilation specs from a file named FILENAME,\n+   replacing the default ones.\n+\n+   A suffix which starts with `*' is a definition for\n+   one of the machine-specific sub-specs.  The \"suffix\" should be\n+   *asm, *cc1, *cpp, *link, *startfile, *signed_char, etc.\n+   The corresponding spec is stored in asm_spec, etc.,\n+   rather than in the `compilers' vector.\n+\n+   Anything invalid in the file is a fatal error.  */\n+\n+static void\n+read_specs (filename, main_p)\n+     const char *filename;\n+     int main_p;\n+{\n+  char *buffer;\n+  register char *p;\n+\n+  buffer = load_specs (filename);\n+\n   /* Scan BUFFER for specs, putting them in the vector.  */\n   p = buffer;\n   while (1)"}]}