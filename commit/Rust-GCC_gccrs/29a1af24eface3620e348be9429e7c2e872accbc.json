{"sha": "29a1af24eface3620e348be9429e7c2e872accbc", "node_id": "C_kwDOANBUbNoAKDI5YTFhZjI0ZWZhY2UzNjIwZTM0OGJlOTQyOWU3YzJlODcyYWNjYmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-05T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-05T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "cea2038d7d07ce613b0e4d1c92dcf9c661daf415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cea2038d7d07ce613b0e4d1c92dcf9c661daf415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a1af24eface3620e348be9429e7c2e872accbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a1af24eface3620e348be9429e7c2e872accbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a1af24eface3620e348be9429e7c2e872accbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a1af24eface3620e348be9429e7c2e872accbc/comments", "author": null, "committer": null, "parents": [{"sha": "a634928f5c8a281442ac8f5fb1636aed048ed72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a634928f5c8a281442ac8f5fb1636aed048ed72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a634928f5c8a281442ac8f5fb1636aed048ed72c"}], "stats": {"total": 1643, "additions": 1642, "deletions": 1}, "files": [{"sha": "5442f3fc836f9a64c8b46dadeda63fdd4c5e229e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,9 @@\n+2021-11-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_check_commit.py: Add -v option.\n+\t* gcc-changelog/git_commit.py: Print verbose diff for wrong\n+\tfilename.\n+\n 2021-11-02  Martin Liska  <mliska@suse.cz>\n \n \t* check-internal-format-escaping.py: Fix flake8 errors."}, {"sha": "fcbcc6f56688044731e42602bfabb839409e296f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1268, "deletions": 0, "changes": 1268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,1271 @@\n+2021-11-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.h (STACK_CHECK_MOVING_SP): New macro\n+\tdefinition.\n+\n+2021-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_general_gimple_fold_builtin): Add ashl, sshl, ushl, ashr,\n+\tashr_simd, lshr, lshr_simd.\n+\t* config/aarch64/aarch64-simd-builtins.def (lshr): Use USHIFTIMM.\n+\t* config/aarch64/arm_neon.h (vshr_n_u8, vshr_n_u16, vshr_n_u32,\n+\tvshrq_n_u8, vshrq_n_u16, vshrq_n_u32, vshrq_n_u64): Fix type hack.\n+\n+2021-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* match.pd: New negate+shift pattern.\n+\n+2021-11-04  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103079\n+\t* gimple-range-gori.cc (gimple_range_calc_op1): Treat undefined as\n+\tvarying.\n+\t(gimple_range_calc_op2): Ditto.\n+\n+2021-11-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* ipa-param-manipulation.h (class ipa_param_body_adjustments): New\n+\tmembers remap_with_debug_expressions, m_dead_ssa_debug_equiv,\n+\tm_dead_stmt_debug_equiv and prepare_debug_expressions.  Added\n+\tparameter to mark_dead_statements.\n+\t* ipa-param-manipulation.c: Include tree-phinodes.h and cfgexpand.h.\n+\t(ipa_param_body_adjustments::mark_dead_statements): New parameter\n+\tdebugstack, push into it all SSA names used in debug statements,\n+\tproduce m_dead_ssa_debug_equiv mapping for the removed param.\n+\t(replace_with_mapped_expr): New function.\n+\t(ipa_param_body_adjustments::remap_with_debug_expressions): Likewise.\n+\t(ipa_param_body_adjustments::prepare_debug_expressions): Likewise.\n+\t(ipa_param_body_adjustments::common_initialization): Gather and\n+\tprocecc SSA which will be removed but are in debug statements. Simplify.\n+\t(ipa_param_body_adjustments::ipa_param_body_adjustments): Initialize\n+\tnew members.\n+\t* tree-inline.c (remap_gimple_stmt): Create a debug bind when possible\n+\twhen avoiding a copy of an unnecessary statement.  Remap removed SSA\n+\tnames in existing debug statements.\n+\t(tree_function_versioning): Do not create DEBUG_EXPR_DECL for removed\n+\tparameters if we have already done so.\n+\n+2021-11-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103058\n+\t* gimple.c (gimple_call_static_chain_flags): Handle case when\n+\tnested function does not bind locally.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_function_value): Generate\n+\ta register rtx for Neon vector-tuple modes.\n+\t(aarch64_layout_arg): Likewise.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* lower-subreg.c (simple_move): Prevent decomposition if\n+\tmodes are not tieable.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (v2x8qi_UP): Define.\n+\t(v2x4hi_UP): Likewise.\n+\t(v2x4hf_UP): Likewise.\n+\t(v2x4bf_UP): Likewise.\n+\t(v2x2si_UP): Likewise.\n+\t(v2x2sf_UP): Likewise.\n+\t(v2x1di_UP): Likewise.\n+\t(v2x1df_UP): Likewise.\n+\t(v2x16qi_UP): Likewise.\n+\t(v2x8hi_UP): Likewise.\n+\t(v2x8hf_UP): Likewise.\n+\t(v2x8bf_UP): Likewise.\n+\t(v2x4si_UP): Likewise.\n+\t(v2x4sf_UP): Likewise.\n+\t(v2x2di_UP): Likewise.\n+\t(v2x2df_UP): Likewise.\n+\t(v3x8qi_UP): Likewise.\n+\t(v3x4hi_UP): Likewise.\n+\t(v3x4hf_UP): Likewise.\n+\t(v3x4bf_UP): Likewise.\n+\t(v3x2si_UP): Likewise.\n+\t(v3x2sf_UP): Likewise.\n+\t(v3x1di_UP): Likewise.\n+\t(v3x1df_UP): Likewise.\n+\t(v3x16qi_UP): Likewise.\n+\t(v3x8hi_UP): Likewise.\n+\t(v3x8hf_UP): Likewise.\n+\t(v3x8bf_UP): Likewise.\n+\t(v3x4si_UP): Likewise.\n+\t(v3x4sf_UP): Likewise.\n+\t(v3x2di_UP): Likewise.\n+\t(v3x2df_UP): Likewise.\n+\t(v4x8qi_UP): Likewise.\n+\t(v4x4hi_UP): Likewise.\n+\t(v4x4hf_UP): Likewise.\n+\t(v4x4bf_UP): Likewise.\n+\t(v4x2si_UP): Likewise.\n+\t(v4x2sf_UP): Likewise.\n+\t(v4x1di_UP): Likewise.\n+\t(v4x1df_UP): Likewise.\n+\t(v4x16qi_UP): Likewise.\n+\t(v4x8hi_UP): Likewise.\n+\t(v4x8hf_UP): Likewise.\n+\t(v4x8bf_UP): Likewise.\n+\t(v4x4si_UP): Likewise.\n+\t(v4x4sf_UP): Likewise.\n+\t(v4x2di_UP): Likewise.\n+\t(v4x2df_UP): Likewise.\n+\t(TYPES_GETREGP): Delete.\n+\t(TYPES_SETREGP): Likewise.\n+\t(TYPES_LOADSTRUCT_U): Define.\n+\t(TYPES_LOADSTRUCT_P): Likewise.\n+\t(TYPES_LOADSTRUCT_LANE_U): Likewise.\n+\t(TYPES_LOADSTRUCT_LANE_P): Likewise.\n+\t(TYPES_STORE1P): Move for consistency.\n+\t(TYPES_STORESTRUCT_U): Define.\n+\t(TYPES_STORESTRUCT_P): Likewise.\n+\t(TYPES_STORESTRUCT_LANE_U): Likewise.\n+\t(TYPES_STORESTRUCT_LANE_P): Likewise.\n+\t(aarch64_simd_tuple_types): Define.\n+\t(aarch64_lookup_simd_builtin_type): Handle tuple type lookup.\n+\t(aarch64_init_simd_builtin_functions): Update frontend lookup\n+\tfor builtin functions after handling arm_neon.h pragma.\n+\t(register_tuple_type): Manually set modes of single-integer\n+\ttuple types. Record tuple types.\n+\t* config/aarch64/aarch64-modes.def\n+\t(ADV_SIMD_D_REG_STRUCT_MODES): Define D-register tuple modes.\n+\t(ADV_SIMD_Q_REG_STRUCT_MODES): Define Q-register tuple modes.\n+\t(SVE_MODES): Give single-vector modes priority over vector-\n+\ttuple modes.\n+\t(VECTOR_MODES_WITH_PREFIX): Set partial-vector mode order to\n+\tbe after all single-vector modes.\n+\t* config/aarch64/aarch64-simd-builtins.def: Update builtin\n+\tgenerator macros to reflect modifications to the backend\n+\tpatterns.\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld2<mode>):\n+\tUse vector-tuple mode iterator and rename to...\n+\t(aarch64_simd_ld2<vstruct_elt>): This.\n+\t(aarch64_simd_ld2r<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_ld2r<vstruct_elt>): This.\n+\t(aarch64_vec_load_lanesoi_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(aarch64_vec_load_lanes<mode>_lane<vstruct_elt>): This.\n+\t(vec_load_lanesoi<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(vec_load_lanes<mode><vstruct_elt>): This.\n+\t(aarch64_simd_st2<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_st2<vstruct_elt>): This.\n+\t(aarch64_vec_store_lanesoi_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(aarch64_vec_store_lanes<mode>_lane<vstruct_elt>): This.\n+\t(vec_store_lanesoi<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(vec_store_lanes<mode><vstruct_elt>): This.\n+\t(aarch64_simd_ld3<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_ld3<vstruct_elt>): This.\n+\t(aarch64_simd_ld3r<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_ld3r<vstruct_elt>): This.\n+\t(aarch64_vec_load_lanesci_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(vec_load_lanesci<mode>): This.\n+\t(aarch64_simd_st3<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_st3<vstruct_elt>): This.\n+\t(aarch64_vec_store_lanesci_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(vec_store_lanesci<mode>): This.\n+\t(aarch64_simd_ld4<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_ld4<vstruct_elt>): This.\n+\t(aarch64_simd_ld4r<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_ld4r<vstruct_elt>): This.\n+\t(aarch64_vec_load_lanesxi_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(vec_load_lanesxi<mode>): This.\n+\t(aarch64_simd_st4<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_simd_st4<vstruct_elt>): This.\n+\t(aarch64_vec_store_lanesxi_lane<mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(vec_store_lanesxi<mode>): This.\n+\t(mov<mode>): Define for Neon vector-tuple modes.\n+\t(aarch64_ld1x3<VALLDIF:mode>): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_ld1x3<vstruct_elt>): This.\n+\t(aarch64_ld1_x3_<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld1_x3_<vstruct_elt>): This.\n+\t(aarch64_ld1x4<VALLDIF:mode>): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_ld1x4<vstruct_elt>): This.\n+\t(aarch64_ld1_x4_<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld1_x4_<vstruct_elt>): This.\n+\t(aarch64_st1x2<VALLDIF:mode>): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_st1x2<vstruct_elt>): This.\n+\t(aarch64_st1_x2_<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st1_x2_<vstruct_elt>): This.\n+\t(aarch64_st1x3<VALLDIF:mode>): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_st1x3<vstruct_elt>): This.\n+\t(aarch64_st1_x3_<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st1_x3_<vstruct_elt>): This.\n+\t(aarch64_st1x4<VALLDIF:mode>): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_st1x4<vstruct_elt>): This.\n+\t(aarch64_st1_x4_<mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st1_x4_<vstruct_elt>): This.\n+\t(*aarch64_mov<mode>): Define for vector-tuple modes.\n+\t(*aarch64_be_mov<mode>): Likewise.\n+\t(aarch64_ld<VSTRUCT:nregs>r<VALLDIF:mode>): Use vector-tuple\n+\tmode iterator and rename to...\n+\t(aarch64_ld<nregs>r<vstruct_elt>): This.\n+\t(aarch64_ld2<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld2<vstruct_elt>_dreg): This.\n+\t(aarch64_ld3<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld3<vstruct_elt>_dreg): This.\n+\t(aarch64_ld4<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld4<vstruct_elt>_dreg): This.\n+\t(aarch64_ld<VSTRUCT:nregs><VDC:mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(aarch64_ld<nregs><vstruct_elt>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(aarch64_ld<VSTRUCT:nregs><VQ:mode>): Use vector-tuple mode\n+\t(aarch64_ld1x2<VQ:mode>): Delete.\n+\t(aarch64_ld1x2<VDC:mode>): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_ld1x2<vstruct_elt>): This.\n+\t(aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>): Use vector-\n+\ttuple mode iterator and rename to...\n+\t(aarch64_ld<nregs>_lane<vstruct_elt>): This.\n+\t(aarch64_get_dreg<VSTRUCT:mode><VDC:mode>): Delete.\n+\t(aarch64_get_qreg<VSTRUCT:mode><VQ:mode>): Likewise.\n+\t(aarch64_st2<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st2<vstruct_elt>_dreg): This.\n+\t(aarch64_st3<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st3<vstruct_elt>_dreg): This.\n+\t(aarch64_st4<mode>_dreg): Use vector-tuple mode iterator and\n+\trename to...\n+\t(aarch64_st4<vstruct_elt>_dreg): This.\n+\t(aarch64_st<VSTRUCT:nregs><VDC:mode>): Use vector-tuple mode\n+\titerator and rename to...\n+\t(aarch64_st<nregs><vstruct_elt>): This.\n+\t(aarch64_st<VSTRUCT:nregs><VQ:mode>): Use vector-tuple mode\n+\titerator and rename to aarch64_st<nregs><vstruct_elt>.\n+\t(aarch64_st<VSTRUCT:nregs>_lane<VALLDIF:mode>): Use vector-\n+\ttuple mode iterator and rename to...\n+\t(aarch64_st<nregs>_lane<vstruct_elt>): This.\n+\t(aarch64_set_qreg<VSTRUCT:mode><VQ:mode>): Delete.\n+\t(aarch64_simd_ld1<mode>_x2): Use vector-tuple mode iterator\n+\tand rename to...\n+\t(aarch64_simd_ld1<vstruct_elt>_x2): This.\n+\t* config/aarch64/aarch64.c (aarch64_advsimd_struct_mode_p):\n+\tRefactor to include new vector-tuple modes.\n+\t(aarch64_classify_vector_mode): Add cases for new vector-\n+\ttuple modes.\n+\t(aarch64_advsimd_partial_struct_mode_p): Define.\n+\t(aarch64_advsimd_full_struct_mode_p): Likewise.\n+\t(aarch64_advsimd_vector_array_mode): Likewise.\n+\t(aarch64_sve_data_mode): Change location in file.\n+\t(aarch64_array_mode): Handle case of Neon vector-tuple modes.\n+\t(aarch64_hard_regno_nregs): Handle case of partial Neon\n+\tvector structures.\n+\t(aarch64_classify_address): Refactor to include handling of\n+\tNeon vector-tuple modes.\n+\t(aarch64_print_operand): Print \"d\" for \"%R\" for a partial\n+\tNeon vector structure.\n+\t(aarch64_expand_vec_perm_1): Use new vector-tuple mode.\n+\t(aarch64_modes_tieable_p): Prevent tieing Neon partial struct\n+\tmodes with scalar machines modes larger than 8 bytes.\n+\t(aarch64_can_change_mode_class): Don't allow changes between\n+\tpartial and full Neon vector-structure modes.\n+\t* config/aarch64/arm_neon.h (vst2_lane_f16): Use updated\n+\tbuiltin and remove boiler-plate code for opaque mode.\n+\t(vst2_lane_f32): Likewise.\n+\t(vst2_lane_f64): Likewise.\n+\t(vst2_lane_p8): Likewise.\n+\t(vst2_lane_p16): Likewise.\n+\t(vst2_lane_p64): Likewise.\n+\t(vst2_lane_s8): Likewise.\n+\t(vst2_lane_s16): Likewise.\n+\t(vst2_lane_s32): Likewise.\n+\t(vst2_lane_s64): Likewise.\n+\t(vst2_lane_u8): Likewise.\n+\t(vst2_lane_u16): Likewise.\n+\t(vst2_lane_u32): Likewise.\n+\t(vst2_lane_u64): Likewise.\n+\t(vst2q_lane_f16): Likewise.\n+\t(vst2q_lane_f32): Likewise.\n+\t(vst2q_lane_f64): Likewise.\n+\t(vst2q_lane_p8): Likewise.\n+\t(vst2q_lane_p16): Likewise.\n+\t(vst2q_lane_p64): Likewise.\n+\t(vst2q_lane_s8): Likewise.\n+\t(vst2q_lane_s16): Likewise.\n+\t(vst2q_lane_s32): Likewise.\n+\t(vst2q_lane_s64): Likewise.\n+\t(vst2q_lane_u8): Likewise.\n+\t(vst2q_lane_u16): Likewise.\n+\t(vst2q_lane_u32): Likewise.\n+\t(vst2q_lane_u64): Likewise.\n+\t(vst3_lane_f16): Likewise.\n+\t(vst3_lane_f32): Likewise.\n+\t(vst3_lane_f64): Likewise.\n+\t(vst3_lane_p8): Likewise.\n+\t(vst3_lane_p16): Likewise.\n+\t(vst3_lane_p64): Likewise.\n+\t(vst3_lane_s8): Likewise.\n+\t(vst3_lane_s16): Likewise.\n+\t(vst3_lane_s32): Likewise.\n+\t(vst3_lane_s64): Likewise.\n+\t(vst3_lane_u8): Likewise.\n+\t(vst3_lane_u16): Likewise.\n+\t(vst3_lane_u32): Likewise.\n+\t(vst3_lane_u64): Likewise.\n+\t(vst3q_lane_f16): Likewise.\n+\t(vst3q_lane_f32): Likewise.\n+\t(vst3q_lane_f64): Likewise.\n+\t(vst3q_lane_p8): Likewise.\n+\t(vst3q_lane_p16): Likewise.\n+\t(vst3q_lane_p64): Likewise.\n+\t(vst3q_lane_s8): Likewise.\n+\t(vst3q_lane_s16): Likewise.\n+\t(vst3q_lane_s32): Likewise.\n+\t(vst3q_lane_s64): Likewise.\n+\t(vst3q_lane_u8): Likewise.\n+\t(vst3q_lane_u16): Likewise.\n+\t(vst3q_lane_u32): Likewise.\n+\t(vst3q_lane_u64): Likewise.\n+\t(vst4_lane_f16): Likewise.\n+\t(vst4_lane_f32): Likewise.\n+\t(vst4_lane_f64): Likewise.\n+\t(vst4_lane_p8): Likewise.\n+\t(vst4_lane_p16): Likewise.\n+\t(vst4_lane_p64): Likewise.\n+\t(vst4_lane_s8): Likewise.\n+\t(vst4_lane_s16): Likewise.\n+\t(vst4_lane_s32): Likewise.\n+\t(vst4_lane_s64): Likewise.\n+\t(vst4_lane_u8): Likewise.\n+\t(vst4_lane_u16): Likewise.\n+\t(vst4_lane_u32): Likewise.\n+\t(vst4_lane_u64): Likewise.\n+\t(vst4q_lane_f16): Likewise.\n+\t(vst4q_lane_f32): Likewise.\n+\t(vst4q_lane_f64): Likewise.\n+\t(vst4q_lane_p8): Likewise.\n+\t(vst4q_lane_p16): Likewise.\n+\t(vst4q_lane_p64): Likewise.\n+\t(vst4q_lane_s8): Likewise.\n+\t(vst4q_lane_s16): Likewise.\n+\t(vst4q_lane_s32): Likewise.\n+\t(vst4q_lane_s64): Likewise.\n+\t(vst4q_lane_u8): Likewise.\n+\t(vst4q_lane_u16): Likewise.\n+\t(vst4q_lane_u32): Likewise.\n+\t(vst4q_lane_u64): Likewise.\n+\t(vtbl3_s8): Likewise.\n+\t(vtbl3_u8): Likewise.\n+\t(vtbl3_p8): Likewise.\n+\t(vtbl4_s8): Likewise.\n+\t(vtbl4_u8): Likewise.\n+\t(vtbl4_p8): Likewise.\n+\t(vld1_u8_x3): Likewise.\n+\t(vld1_s8_x3): Likewise.\n+\t(vld1_u16_x3): Likewise.\n+\t(vld1_s16_x3): Likewise.\n+\t(vld1_u32_x3): Likewise.\n+\t(vld1_s32_x3): Likewise.\n+\t(vld1_u64_x3): Likewise.\n+\t(vld1_s64_x3): Likewise.\n+\t(vld1_f16_x3): Likewise.\n+\t(vld1_f32_x3): Likewise.\n+\t(vld1_f64_x3): Likewise.\n+\t(vld1_p8_x3): Likewise.\n+\t(vld1_p16_x3): Likewise.\n+\t(vld1_p64_x3): Likewise.\n+\t(vld1q_u8_x3): Likewise.\n+\t(vld1q_s8_x3): Likewise.\n+\t(vld1q_u16_x3): Likewise.\n+\t(vld1q_s16_x3): Likewise.\n+\t(vld1q_u32_x3): Likewise.\n+\t(vld1q_s32_x3): Likewise.\n+\t(vld1q_u64_x3): Likewise.\n+\t(vld1q_s64_x3): Likewise.\n+\t(vld1q_f16_x3): Likewise.\n+\t(vld1q_f32_x3): Likewise.\n+\t(vld1q_f64_x3): Likewise.\n+\t(vld1q_p8_x3): Likewise.\n+\t(vld1q_p16_x3): Likewise.\n+\t(vld1q_p64_x3): Likewise.\n+\t(vld1_u8_x2): Likewise.\n+\t(vld1_s8_x2): Likewise.\n+\t(vld1_u16_x2): Likewise.\n+\t(vld1_s16_x2): Likewise.\n+\t(vld1_u32_x2): Likewise.\n+\t(vld1_s32_x2): Likewise.\n+\t(vld1_u64_x2): Likewise.\n+\t(vld1_s64_x2): Likewise.\n+\t(vld1_f16_x2): Likewise.\n+\t(vld1_f32_x2): Likewise.\n+\t(vld1_f64_x2): Likewise.\n+\t(vld1_p8_x2): Likewise.\n+\t(vld1_p16_x2): Likewise.\n+\t(vld1_p64_x2): Likewise.\n+\t(vld1q_u8_x2): Likewise.\n+\t(vld1q_s8_x2): Likewise.\n+\t(vld1q_u16_x2): Likewise.\n+\t(vld1q_s16_x2): Likewise.\n+\t(vld1q_u32_x2): Likewise.\n+\t(vld1q_s32_x2): Likewise.\n+\t(vld1q_u64_x2): Likewise.\n+\t(vld1q_s64_x2): Likewise.\n+\t(vld1q_f16_x2): Likewise.\n+\t(vld1q_f32_x2): Likewise.\n+\t(vld1q_f64_x2): Likewise.\n+\t(vld1q_p8_x2): Likewise.\n+\t(vld1q_p16_x2): Likewise.\n+\t(vld1q_p64_x2): Likewise.\n+\t(vld1_s8_x4): Likewise.\n+\t(vld1q_s8_x4): Likewise.\n+\t(vld1_s16_x4): Likewise.\n+\t(vld1q_s16_x4): Likewise.\n+\t(vld1_s32_x4): Likewise.\n+\t(vld1q_s32_x4): Likewise.\n+\t(vld1_u8_x4): Likewise.\n+\t(vld1q_u8_x4): Likewise.\n+\t(vld1_u16_x4): Likewise.\n+\t(vld1q_u16_x4): Likewise.\n+\t(vld1_u32_x4): Likewise.\n+\t(vld1q_u32_x4): Likewise.\n+\t(vld1_f16_x4): Likewise.\n+\t(vld1q_f16_x4): Likewise.\n+\t(vld1_f32_x4): Likewise.\n+\t(vld1q_f32_x4): Likewise.\n+\t(vld1_p8_x4): Likewise.\n+\t(vld1q_p8_x4): Likewise.\n+\t(vld1_p16_x4): Likewise.\n+\t(vld1q_p16_x4): Likewise.\n+\t(vld1_s64_x4): Likewise.\n+\t(vld1_u64_x4): Likewise.\n+\t(vld1_p64_x4): Likewise.\n+\t(vld1q_s64_x4): Likewise.\n+\t(vld1q_u64_x4): Likewise.\n+\t(vld1q_p64_x4): Likewise.\n+\t(vld1_f64_x4): Likewise.\n+\t(vld1q_f64_x4): Likewise.\n+\t(vld2_s64): Likewise.\n+\t(vld2_u64): Likewise.\n+\t(vld2_f64): Likewise.\n+\t(vld2_s8): Likewise.\n+\t(vld2_p8): Likewise.\n+\t(vld2_p64): Likewise.\n+\t(vld2_s16): Likewise.\n+\t(vld2_p16): Likewise.\n+\t(vld2_s32): Likewise.\n+\t(vld2_u8): Likewise.\n+\t(vld2_u16): Likewise.\n+\t(vld2_u32): Likewise.\n+\t(vld2_f16): Likewise.\n+\t(vld2_f32): Likewise.\n+\t(vld2q_s8): Likewise.\n+\t(vld2q_p8): Likewise.\n+\t(vld2q_s16): Likewise.\n+\t(vld2q_p16): Likewise.\n+\t(vld2q_p64): Likewise.\n+\t(vld2q_s32): Likewise.\n+\t(vld2q_s64): Likewise.\n+\t(vld2q_u8): Likewise.\n+\t(vld2q_u16): Likewise.\n+\t(vld2q_u32): Likewise.\n+\t(vld2q_u64): Likewise.\n+\t(vld2q_f16): Likewise.\n+\t(vld2q_f32): Likewise.\n+\t(vld2q_f64): Likewise.\n+\t(vld3_s64): Likewise.\n+\t(vld3_u64): Likewise.\n+\t(vld3_f64): Likewise.\n+\t(vld3_s8): Likewise.\n+\t(vld3_p8): Likewise.\n+\t(vld3_s16): Likewise.\n+\t(vld3_p16): Likewise.\n+\t(vld3_s32): Likewise.\n+\t(vld3_u8): Likewise.\n+\t(vld3_u16): Likewise.\n+\t(vld3_u32): Likewise.\n+\t(vld3_f16): Likewise.\n+\t(vld3_f32): Likewise.\n+\t(vld3_p64): Likewise.\n+\t(vld3q_s8): Likewise.\n+\t(vld3q_p8): Likewise.\n+\t(vld3q_s16): Likewise.\n+\t(vld3q_p16): Likewise.\n+\t(vld3q_s32): Likewise.\n+\t(vld3q_s64): Likewise.\n+\t(vld3q_u8): Likewise.\n+\t(vld3q_u16): Likewise.\n+\t(vld3q_u32): Likewise.\n+\t(vld3q_u64): Likewise.\n+\t(vld3q_f16): Likewise.\n+\t(vld3q_f32): Likewise.\n+\t(vld3q_f64): Likewise.\n+\t(vld3q_p64): Likewise.\n+\t(vld4_s64): Likewise.\n+\t(vld4_u64): Likewise.\n+\t(vld4_f64): Likewise.\n+\t(vld4_s8): Likewise.\n+\t(vld4_p8): Likewise.\n+\t(vld4_s16): Likewise.\n+\t(vld4_p16): Likewise.\n+\t(vld4_s32): Likewise.\n+\t(vld4_u8): Likewise.\n+\t(vld4_u16): Likewise.\n+\t(vld4_u32): Likewise.\n+\t(vld4_f16): Likewise.\n+\t(vld4_f32): Likewise.\n+\t(vld4_p64): Likewise.\n+\t(vld4q_s8): Likewise.\n+\t(vld4q_p8): Likewise.\n+\t(vld4q_s16): Likewise.\n+\t(vld4q_p16): Likewise.\n+\t(vld4q_s32): Likewise.\n+\t(vld4q_s64): Likewise.\n+\t(vld4q_u8): Likewise.\n+\t(vld4q_u16): Likewise.\n+\t(vld4q_u32): Likewise.\n+\t(vld4q_u64): Likewise.\n+\t(vld4q_f16): Likewise.\n+\t(vld4q_f32): Likewise.\n+\t(vld4q_f64): Likewise.\n+\t(vld4q_p64): Likewise.\n+\t(vld2_dup_s8): Likewise.\n+\t(vld2_dup_s16): Likewise.\n+\t(vld2_dup_s32): Likewise.\n+\t(vld2_dup_f16): Likewise.\n+\t(vld2_dup_f32): Likewise.\n+\t(vld2_dup_f64): Likewise.\n+\t(vld2_dup_u8): Likewise.\n+\t(vld2_dup_u16): Likewise.\n+\t(vld2_dup_u32): Likewise.\n+\t(vld2_dup_p8): Likewise.\n+\t(vld2_dup_p16): Likewise.\n+\t(vld2_dup_p64): Likewise.\n+\t(vld2_dup_s64): Likewise.\n+\t(vld2_dup_u64): Likewise.\n+\t(vld2q_dup_s8): Likewise.\n+\t(vld2q_dup_p8): Likewise.\n+\t(vld2q_dup_s16): Likewise.\n+\t(vld2q_dup_p16): Likewise.\n+\t(vld2q_dup_s32): Likewise.\n+\t(vld2q_dup_s64): Likewise.\n+\t(vld2q_dup_u8): Likewise.\n+\t(vld2q_dup_u16): Likewise.\n+\t(vld2q_dup_u32): Likewise.\n+\t(vld2q_dup_u64): Likewise.\n+\t(vld2q_dup_f16): Likewise.\n+\t(vld2q_dup_f32): Likewise.\n+\t(vld2q_dup_f64): Likewise.\n+\t(vld2q_dup_p64): Likewise.\n+\t(vld3_dup_s64): Likewise.\n+\t(vld3_dup_u64): Likewise.\n+\t(vld3_dup_f64): Likewise.\n+\t(vld3_dup_s8): Likewise.\n+\t(vld3_dup_p8): Likewise.\n+\t(vld3_dup_s16): Likewise.\n+\t(vld3_dup_p16): Likewise.\n+\t(vld3_dup_s32): Likewise.\n+\t(vld3_dup_u8): Likewise.\n+\t(vld3_dup_u16): Likewise.\n+\t(vld3_dup_u32): Likewise.\n+\t(vld3_dup_f16): Likewise.\n+\t(vld3_dup_f32): Likewise.\n+\t(vld3_dup_p64): Likewise.\n+\t(vld3q_dup_s8): Likewise.\n+\t(vld3q_dup_p8): Likewise.\n+\t(vld3q_dup_s16): Likewise.\n+\t(vld3q_dup_p16): Likewise.\n+\t(vld3q_dup_s32): Likewise.\n+\t(vld3q_dup_s64): Likewise.\n+\t(vld3q_dup_u8): Likewise.\n+\t(vld3q_dup_u16): Likewise.\n+\t(vld3q_dup_u32): Likewise.\n+\t(vld3q_dup_u64): Likewise.\n+\t(vld3q_dup_f16): Likewise.\n+\t(vld3q_dup_f32): Likewise.\n+\t(vld3q_dup_f64): Likewise.\n+\t(vld3q_dup_p64): Likewise.\n+\t(vld4_dup_s64): Likewise.\n+\t(vld4_dup_u64): Likewise.\n+\t(vld4_dup_f64): Likewise.\n+\t(vld4_dup_s8): Likewise.\n+\t(vld4_dup_p8): Likewise.\n+\t(vld4_dup_s16): Likewise.\n+\t(vld4_dup_p16): Likewise.\n+\t(vld4_dup_s32): Likewise.\n+\t(vld4_dup_u8): Likewise.\n+\t(vld4_dup_u16): Likewise.\n+\t(vld4_dup_u32): Likewise.\n+\t(vld4_dup_f16): Likewise.\n+\t(vld4_dup_f32): Likewise.\n+\t(vld4_dup_p64): Likewise.\n+\t(vld4q_dup_s8): Likewise.\n+\t(vld4q_dup_p8): Likewise.\n+\t(vld4q_dup_s16): Likewise.\n+\t(vld4q_dup_p16): Likewise.\n+\t(vld4q_dup_s32): Likewise.\n+\t(vld4q_dup_s64): Likewise.\n+\t(vld4q_dup_u8): Likewise.\n+\t(vld4q_dup_u16): Likewise.\n+\t(vld4q_dup_u32): Likewise.\n+\t(vld4q_dup_u64): Likewise.\n+\t(vld4q_dup_f16): Likewise.\n+\t(vld4q_dup_f32): Likewise.\n+\t(vld4q_dup_f64): Likewise.\n+\t(vld4q_dup_p64): Likewise.\n+\t(vld2_lane_u8): Likewise.\n+\t(vld2_lane_u16): Likewise.\n+\t(vld2_lane_u32): Likewise.\n+\t(vld2_lane_u64): Likewise.\n+\t(vld2_lane_s8): Likewise.\n+\t(vld2_lane_s16): Likewise.\n+\t(vld2_lane_s32): Likewise.\n+\t(vld2_lane_s64): Likewise.\n+\t(vld2_lane_f16): Likewise.\n+\t(vld2_lane_f32): Likewise.\n+\t(vld2_lane_f64): Likewise.\n+\t(vld2_lane_p8): Likewise.\n+\t(vld2_lane_p16): Likewise.\n+\t(vld2_lane_p64): Likewise.\n+\t(vld2q_lane_u8): Likewise.\n+\t(vld2q_lane_u16): Likewise.\n+\t(vld2q_lane_u32): Likewise.\n+\t(vld2q_lane_u64): Likewise.\n+\t(vld2q_lane_s8): Likewise.\n+\t(vld2q_lane_s16): Likewise.\n+\t(vld2q_lane_s32): Likewise.\n+\t(vld2q_lane_s64): Likewise.\n+\t(vld2q_lane_f16): Likewise.\n+\t(vld2q_lane_f32): Likewise.\n+\t(vld2q_lane_f64): Likewise.\n+\t(vld2q_lane_p8): Likewise.\n+\t(vld2q_lane_p16): Likewise.\n+\t(vld2q_lane_p64): Likewise.\n+\t(vld3_lane_u8): Likewise.\n+\t(vld3_lane_u16): Likewise.\n+\t(vld3_lane_u32): Likewise.\n+\t(vld3_lane_u64): Likewise.\n+\t(vld3_lane_s8): Likewise.\n+\t(vld3_lane_s16): Likewise.\n+\t(vld3_lane_s32): Likewise.\n+\t(vld3_lane_s64): Likewise.\n+\t(vld3_lane_f16): Likewise.\n+\t(vld3_lane_f32): Likewise.\n+\t(vld3_lane_f64): Likewise.\n+\t(vld3_lane_p8): Likewise.\n+\t(vld3_lane_p16): Likewise.\n+\t(vld3_lane_p64): Likewise.\n+\t(vld3q_lane_u8): Likewise.\n+\t(vld3q_lane_u16): Likewise.\n+\t(vld3q_lane_u32): Likewise.\n+\t(vld3q_lane_u64): Likewise.\n+\t(vld3q_lane_s8): Likewise.\n+\t(vld3q_lane_s16): Likewise.\n+\t(vld3q_lane_s32): Likewise.\n+\t(vld3q_lane_s64): Likewise.\n+\t(vld3q_lane_f16): Likewise.\n+\t(vld3q_lane_f32): Likewise.\n+\t(vld3q_lane_f64): Likewise.\n+\t(vld3q_lane_p8): Likewise.\n+\t(vld3q_lane_p16): Likewise.\n+\t(vld3q_lane_p64): Likewise.\n+\t(vld4_lane_u8): Likewise.\n+\t(vld4_lane_u16): Likewise.\n+\t(vld4_lane_u32): Likewise.\n+\t(vld4_lane_u64): Likewise.\n+\t(vld4_lane_s8): Likewise.\n+\t(vld4_lane_s16): Likewise.\n+\t(vld4_lane_s32): Likewise.\n+\t(vld4_lane_s64): Likewise.\n+\t(vld4_lane_f16): Likewise.\n+\t(vld4_lane_f32): Likewise.\n+\t(vld4_lane_f64): Likewise.\n+\t(vld4_lane_p8): Likewise.\n+\t(vld4_lane_p16): Likewise.\n+\t(vld4_lane_p64): Likewise.\n+\t(vld4q_lane_u8): Likewise.\n+\t(vld4q_lane_u16): Likewise.\n+\t(vld4q_lane_u32): Likewise.\n+\t(vld4q_lane_u64): Likewise.\n+\t(vld4q_lane_s8): Likewise.\n+\t(vld4q_lane_s16): Likewise.\n+\t(vld4q_lane_s32): Likewise.\n+\t(vld4q_lane_s64): Likewise.\n+\t(vld4q_lane_f16): Likewise.\n+\t(vld4q_lane_f32): Likewise.\n+\t(vld4q_lane_f64): Likewise.\n+\t(vld4q_lane_p8): Likewise.\n+\t(vld4q_lane_p16): Likewise.\n+\t(vld4q_lane_p64): Likewise.\n+\t(vqtbl2_s8): Likewise.\n+\t(vqtbl2_u8): Likewise.\n+\t(vqtbl2_p8): Likewise.\n+\t(vqtbl2q_s8): Likewise.\n+\t(vqtbl2q_u8): Likewise.\n+\t(vqtbl2q_p8): Likewise.\n+\t(vqtbl3_s8): Likewise.\n+\t(vqtbl3_u8): Likewise.\n+\t(vqtbl3_p8): Likewise.\n+\t(vqtbl3q_s8): Likewise.\n+\t(vqtbl3q_u8): Likewise.\n+\t(vqtbl3q_p8): Likewise.\n+\t(vqtbl4_s8): Likewise.\n+\t(vqtbl4_u8): Likewise.\n+\t(vqtbl4_p8): Likewise.\n+\t(vqtbl4q_s8): Likewise.\n+\t(vqtbl4q_u8): Likewise.\n+\t(vqtbl4q_p8): Likewise.\n+\t(vqtbx2_s8): Likewise.\n+\t(vqtbx2_u8): Likewise.\n+\t(vqtbx2_p8): Likewise.\n+\t(vqtbx2q_s8): Likewise.\n+\t(vqtbx2q_u8): Likewise.\n+\t(vqtbx2q_p8): Likewise.\n+\t(vqtbx3_s8): Likewise.\n+\t(vqtbx3_u8): Likewise.\n+\t(vqtbx3_p8): Likewise.\n+\t(vqtbx3q_s8): Likewise.\n+\t(vqtbx3q_u8): Likewise.\n+\t(vqtbx3q_p8): Likewise.\n+\t(vqtbx4_s8): Likewise.\n+\t(vqtbx4_u8): Likewise.\n+\t(vqtbx4_p8): Likewise.\n+\t(vqtbx4q_s8): Likewise.\n+\t(vqtbx4q_u8): Likewise.\n+\t(vqtbx4q_p8): Likewise.\n+\t(vst1_s64_x2): Likewise.\n+\t(vst1_u64_x2): Likewise.\n+\t(vst1_f64_x2): Likewise.\n+\t(vst1_s8_x2): Likewise.\n+\t(vst1_p8_x2): Likewise.\n+\t(vst1_s16_x2): Likewise.\n+\t(vst1_p16_x2): Likewise.\n+\t(vst1_s32_x2): Likewise.\n+\t(vst1_u8_x2): Likewise.\n+\t(vst1_u16_x2): Likewise.\n+\t(vst1_u32_x2): Likewise.\n+\t(vst1_f16_x2): Likewise.\n+\t(vst1_f32_x2): Likewise.\n+\t(vst1_p64_x2): Likewise.\n+\t(vst1q_s8_x2): Likewise.\n+\t(vst1q_p8_x2): Likewise.\n+\t(vst1q_s16_x2): Likewise.\n+\t(vst1q_p16_x2): Likewise.\n+\t(vst1q_s32_x2): Likewise.\n+\t(vst1q_s64_x2): Likewise.\n+\t(vst1q_u8_x2): Likewise.\n+\t(vst1q_u16_x2): Likewise.\n+\t(vst1q_u32_x2): Likewise.\n+\t(vst1q_u64_x2): Likewise.\n+\t(vst1q_f16_x2): Likewise.\n+\t(vst1q_f32_x2): Likewise.\n+\t(vst1q_f64_x2): Likewise.\n+\t(vst1q_p64_x2): Likewise.\n+\t(vst1_s64_x3): Likewise.\n+\t(vst1_u64_x3): Likewise.\n+\t(vst1_f64_x3): Likewise.\n+\t(vst1_s8_x3): Likewise.\n+\t(vst1_p8_x3): Likewise.\n+\t(vst1_s16_x3): Likewise.\n+\t(vst1_p16_x3): Likewise.\n+\t(vst1_s32_x3): Likewise.\n+\t(vst1_u8_x3): Likewise.\n+\t(vst1_u16_x3): Likewise.\n+\t(vst1_u32_x3): Likewise.\n+\t(vst1_f16_x3): Likewise.\n+\t(vst1_f32_x3): Likewise.\n+\t(vst1_p64_x3): Likewise.\n+\t(vst1q_s8_x3): Likewise.\n+\t(vst1q_p8_x3): Likewise.\n+\t(vst1q_s16_x3): Likewise.\n+\t(vst1q_p16_x3): Likewise.\n+\t(vst1q_s32_x3): Likewise.\n+\t(vst1q_s64_x3): Likewise.\n+\t(vst1q_u8_x3): Likewise.\n+\t(vst1q_u16_x3): Likewise.\n+\t(vst1q_u32_x3): Likewise.\n+\t(vst1q_u64_x3): Likewise.\n+\t(vst1q_f16_x3): Likewise.\n+\t(vst1q_f32_x3): Likewise.\n+\t(vst1q_f64_x3): Likewise.\n+\t(vst1q_p64_x3): Likewise.\n+\t(vst1_s8_x4): Likewise.\n+\t(vst1q_s8_x4): Likewise.\n+\t(vst1_s16_x4): Likewise.\n+\t(vst1q_s16_x4): Likewise.\n+\t(vst1_s32_x4): Likewise.\n+\t(vst1q_s32_x4): Likewise.\n+\t(vst1_u8_x4): Likewise.\n+\t(vst1q_u8_x4): Likewise.\n+\t(vst1_u16_x4): Likewise.\n+\t(vst1q_u16_x4): Likewise.\n+\t(vst1_u32_x4): Likewise.\n+\t(vst1q_u32_x4): Likewise.\n+\t(vst1_f16_x4): Likewise.\n+\t(vst1q_f16_x4): Likewise.\n+\t(vst1_f32_x4): Likewise.\n+\t(vst1q_f32_x4): Likewise.\n+\t(vst1_p8_x4): Likewise.\n+\t(vst1q_p8_x4): Likewise.\n+\t(vst1_p16_x4): Likewise.\n+\t(vst1q_p16_x4): Likewise.\n+\t(vst1_s64_x4): Likewise.\n+\t(vst1_u64_x4): Likewise.\n+\t(vst1_p64_x4): Likewise.\n+\t(vst1q_s64_x4): Likewise.\n+\t(vst1q_u64_x4): Likewise.\n+\t(vst1q_p64_x4): Likewise.\n+\t(vst1_f64_x4): Likewise.\n+\t(vst1q_f64_x4): Likewise.\n+\t(vst2_s64): Likewise.\n+\t(vst2_u64): Likewise.\n+\t(vst2_f64): Likewise.\n+\t(vst2_s8): Likewise.\n+\t(vst2_p8): Likewise.\n+\t(vst2_s16): Likewise.\n+\t(vst2_p16): Likewise.\n+\t(vst2_s32): Likewise.\n+\t(vst2_u8): Likewise.\n+\t(vst2_u16): Likewise.\n+\t(vst2_u32): Likewise.\n+\t(vst2_f16): Likewise.\n+\t(vst2_f32): Likewise.\n+\t(vst2_p64): Likewise.\n+\t(vst2q_s8): Likewise.\n+\t(vst2q_p8): Likewise.\n+\t(vst2q_s16): Likewise.\n+\t(vst2q_p16): Likewise.\n+\t(vst2q_s32): Likewise.\n+\t(vst2q_s64): Likewise.\n+\t(vst2q_u8): Likewise.\n+\t(vst2q_u16): Likewise.\n+\t(vst2q_u32): Likewise.\n+\t(vst2q_u64): Likewise.\n+\t(vst2q_f16): Likewise.\n+\t(vst2q_f32): Likewise.\n+\t(vst2q_f64): Likewise.\n+\t(vst2q_p64): Likewise.\n+\t(vst3_s64): Likewise.\n+\t(vst3_u64): Likewise.\n+\t(vst3_f64): Likewise.\n+\t(vst3_s8): Likewise.\n+\t(vst3_p8): Likewise.\n+\t(vst3_s16): Likewise.\n+\t(vst3_p16): Likewise.\n+\t(vst3_s32): Likewise.\n+\t(vst3_u8): Likewise.\n+\t(vst3_u16): Likewise.\n+\t(vst3_u32): Likewise.\n+\t(vst3_f16): Likewise.\n+\t(vst3_f32): Likewise.\n+\t(vst3_p64): Likewise.\n+\t(vst3q_s8): Likewise.\n+\t(vst3q_p8): Likewise.\n+\t(vst3q_s16): Likewise.\n+\t(vst3q_p16): Likewise.\n+\t(vst3q_s32): Likewise.\n+\t(vst3q_s64): Likewise.\n+\t(vst3q_u8): Likewise.\n+\t(vst3q_u16): Likewise.\n+\t(vst3q_u32): Likewise.\n+\t(vst3q_u64): Likewise.\n+\t(vst3q_f16): Likewise.\n+\t(vst3q_f32): Likewise.\n+\t(vst3q_f64): Likewise.\n+\t(vst3q_p64): Likewise.\n+\t(vst4_s64): Likewise.\n+\t(vst4_u64): Likewise.\n+\t(vst4_f64): Likewise.\n+\t(vst4_s8): Likewise.\n+\t(vst4_p8): Likewise.\n+\t(vst4_s16): Likewise.\n+\t(vst4_p16): Likewise.\n+\t(vst4_s32): Likewise.\n+\t(vst4_u8): Likewise.\n+\t(vst4_u16): Likewise.\n+\t(vst4_u32): Likewise.\n+\t(vst4_f16): Likewise.\n+\t(vst4_f32): Likewise.\n+\t(vst4_p64): Likewise.\n+\t(vst4q_s8): Likewise.\n+\t(vst4q_p8): Likewise.\n+\t(vst4q_s16): Likewise.\n+\t(vst4q_p16): Likewise.\n+\t(vst4q_s32): Likewise.\n+\t(vst4q_s64): Likewise.\n+\t(vst4q_u8): Likewise.\n+\t(vst4q_u16): Likewise.\n+\t(vst4q_u32): Likewise.\n+\t(vst4q_u64): Likewise.\n+\t(vst4q_f16): Likewise.\n+\t(vst4q_f32): Likewise.\n+\t(vst4q_f64): Likewise.\n+\t(vst4q_p64): Likewise.\n+\t(vtbx4_s8): Likewise.\n+\t(vtbx4_u8): Likewise.\n+\t(vtbx4_p8): Likewise.\n+\t(vld1_bf16_x2): Likewise.\n+\t(vld1q_bf16_x2): Likewise.\n+\t(vld1_bf16_x3): Likewise.\n+\t(vld1q_bf16_x3): Likewise.\n+\t(vld1_bf16_x4): Likewise.\n+\t(vld1q_bf16_x4): Likewise.\n+\t(vld2_bf16): Likewise.\n+\t(vld2q_bf16): Likewise.\n+\t(vld2_dup_bf16): Likewise.\n+\t(vld2q_dup_bf16): Likewise.\n+\t(vld3_bf16): Likewise.\n+\t(vld3q_bf16): Likewise.\n+\t(vld3_dup_bf16): Likewise.\n+\t(vld3q_dup_bf16): Likewise.\n+\t(vld4_bf16): Likewise.\n+\t(vld4q_bf16): Likewise.\n+\t(vld4_dup_bf16): Likewise.\n+\t(vld4q_dup_bf16): Likewise.\n+\t(vst1_bf16_x2): Likewise.\n+\t(vst1q_bf16_x2): Likewise.\n+\t(vst1_bf16_x3): Likewise.\n+\t(vst1q_bf16_x3): Likewise.\n+\t(vst1_bf16_x4): Likewise.\n+\t(vst1q_bf16_x4): Likewise.\n+\t(vst2_bf16): Likewise.\n+\t(vst2q_bf16): Likewise.\n+\t(vst3_bf16): Likewise.\n+\t(vst3q_bf16): Likewise.\n+\t(vst4_bf16): Likewise.\n+\t(vst4q_bf16): Likewise.\n+\t(vld2_lane_bf16): Likewise.\n+\t(vld2q_lane_bf16): Likewise.\n+\t(vld3_lane_bf16): Likewise.\n+\t(vld3q_lane_bf16): Likewise.\n+\t(vld4_lane_bf16): Likewise.\n+\t(vld4q_lane_bf16): Likewise.\n+\t(vst2_lane_bf16): Likewise.\n+\t(vst2q_lane_bf16): Likewise.\n+\t(vst3_lane_bf16): Likewise.\n+\t(vst3q_lane_bf16): Likewise.\n+\t(vst4_lane_bf16): Likewise.\n+\t(vst4q_lane_bf16): Likewise.\n+\t* config/aarch64/geniterators.sh: Modify iterator regex to\n+\tmatch new vector-tuple modes.\n+\t* config/aarch64/iterators.md (insn_count): Extend mode\n+\tattribute with vector-tuple type information.\n+\t(nregs): Likewise.\n+\t(Vendreg): Likewise.\n+\t(Vetype): Likewise.\n+\t(Vtype): Likewise.\n+\t(VSTRUCT_2D): New mode iterator.\n+\t(VSTRUCT_2DNX): Likewise.\n+\t(VSTRUCT_2DX): Likewise.\n+\t(VSTRUCT_2Q): Likewise.\n+\t(VSTRUCT_2QD): Likewise.\n+\t(VSTRUCT_3D): Likewise.\n+\t(VSTRUCT_3DNX): Likewise.\n+\t(VSTRUCT_3DX): Likewise.\n+\t(VSTRUCT_3Q): Likewise.\n+\t(VSTRUCT_3QD): Likewise.\n+\t(VSTRUCT_4D): Likewise.\n+\t(VSTRUCT_4DNX): Likewise.\n+\t(VSTRUCT_4DX): Likewise.\n+\t(VSTRUCT_4Q): Likewise.\n+\t(VSTRUCT_4QD): Likewise.\n+\t(VSTRUCT_D): Likewise.\n+\t(VSTRUCT_Q): Likewise.\n+\t(VSTRUCT_QD): Likewise.\n+\t(VSTRUCT_ELT): New mode attribute.\n+\t(vstruct_elt): Likewise.\n+\t* genmodes.c (VECTOR_MODE): Add default prefix and order\n+\tparameters.\n+\t(VECTOR_MODE_WITH_PREFIX): Define.\n+\t(make_vector_mode): Add mode prefix and order parameters.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* expmed.c (extract_bit_field_1): Ensure modes are tieable.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* expr.c (emit_group_load_1): Remove historic workaround.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_init_simd_builtins):\n+\tFactor out main loop to...\n+\t(aarch64_init_simd_builtin_functions): This new function.\n+\t(register_tuple_type): Define.\n+\t(aarch64_scalar_builtin_type_p): Define.\n+\t(handle_arm_neon_h): Define.\n+\t* config/aarch64/aarch64-c.c (aarch64_pragma_aarch64): Handle\n+\tpragma for arm_neon.h.\n+\t* config/aarch64/aarch64-protos.h (aarch64_advsimd_struct_mode_p):\n+\tDeclare.\n+\t(handle_arm_neon_h): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_advsimd_struct_mode_p):\n+\tRemove static modifier.\n+\t* config/aarch64/arm_neon.h (target): Remove Neon vector\n+\tstructure type definitions.\n+\n+2021-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102943\n+\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n+\tPrefer range_of_expr unless there are no statements in the BB.\n+\n+2021-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102943\n+\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n+\tAvoid duplicate calculation of paths.\n+\n+2021-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102943\n+\t* gimple-range-path.cc (path_range_query::compute_phi_relations):\n+\tOnly compute relations for SSA names in the import list.\n+\t(path_range_query::compute_outgoing_relations): Same.\n+\t* gimple-range-path.h (path_range_query::import_p): New.\n+\n+2021-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/103075\n+\t* simplify-rtx.c (exact_int_to_float_conversion_p): Return\n+\tfalse for a VOIDmode operand.\n+\n+2021-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs): Make member\n+\tvariables private and add \"m_\" to their names.  Remove is_loop.\n+\t(aarch64_record_potential_advsimd_unrolling): Replace with...\n+\t(aarch64_vector_costs::record_potential_advsimd_unrolling): ...this.\n+\t(aarch64_analyze_loop_vinfo): Replace with...\n+\t(aarch64_vector_costs::analyze_loop_vinfo): ...this.\n+\tMove initialization of (m_)vec_flags to add_stmt_cost.\n+\t(aarch64_analyze_bb_vinfo): Delete.\n+\t(aarch64_count_ops): Replace with...\n+\t(aarch64_vector_costs::count_ops): ...this.\n+\t(aarch64_vector_costs::add_stmt_cost): Set m_vec_flags,\n+\tusing m_costing_for_scalar to test whether we're costing\n+\tscalar or vector code.\n+\t(aarch64_adjust_body_cost_sve): Replace with...\n+\t(aarch64_vector_costs::adjust_body_cost_sve): ...this.\n+\t(aarch64_adjust_body_cost): Replace with...\n+\t(aarch64_vector_costs::adjust_body_cost): ...this.\n+\t(aarch64_vector_costs::finish_cost): Use m_vinfo instead of is_loop.\n+\n+2021-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (targetm.vectorize.init_cost): Replace with...\n+\t(targetm.vectorize.create_costs): ...this.\n+\t(targetm.vectorize.add_stmt_cost): Delete.\n+\t(targetm.vectorize.finish_cost): Likewise.\n+\t(targetm.vectorize.destroy_cost_data): Likewise.\n+\t* doc/tm.texi.in (TARGET_VECTORIZE_INIT_COST): Replace with...\n+\t(TARGET_VECTORIZE_CREATE_COSTS): ...this.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.\n+\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n+\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* tree-vectorizer.h (vec_info::vec_info): Remove target_cost_data\n+\tparameter.\n+\t(vec_info::target_cost_data): Change from a void * to a vector_costs *.\n+\t(vector_costs): New class.\n+\t(init_cost): Take a vec_info and return a vector_costs.\n+\t(dump_stmt_cost): Remove data parameter.\n+\t(add_stmt_cost): Replace vinfo and data parameters with a vector_costs.\n+\t(add_stmt_costs): Likewise.\n+\t(finish_cost): Replace data parameter with a vector_costs.\n+\t(destroy_cost_data): Delete.\n+\t* tree-vectorizer.c (dump_stmt_cost): Remove data argument and\n+\tdon't print it.\n+\t(vec_info::vec_info): Remove the target_cost_data parameter and\n+\tinitialize the member variable to null instead.\n+\t(vec_info::~vec_info): Delete target_cost_data instead of calling\n+\tdestroy_cost_data.\n+\t(vector_costs::add_stmt_cost): New function.\n+\t(vector_costs::finish_cost): Likewise.\n+\t(vector_costs::record_stmt_cost): Likewise.\n+\t(vector_costs::adjust_cost_for_freq): Likewise.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Update\n+\tcall to vec_info::vec_info.\n+\t(vect_compute_single_scalar_iteration_cost): Update after above\n+\tchanges to costing interface.\n+\t(vect_analyze_loop_operations): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t(vect_analyze_loop_2): Initialize LOOP_VINFO_TARGET_COST_DATA\n+\tat the start_over point, where it needs to be recreated after\n+\ttrying without slp.  Update retry code accordingly.\n+\t* tree-vect-slp.c (_bb_vec_info::_bb_vec_info): Update call\n+\tto vec_info::vec_info.\n+\t(vect_slp_analyze_operation): Update after above changes to costing\n+\tinterface.\n+\t(vect_bb_vectorization_profitable_p): Likewise.\n+\t* targhooks.h (default_init_cost): Replace with...\n+\t(default_vectorize_create_costs): ...this.\n+\t(default_add_stmt_cost): Delete.\n+\t(default_finish_cost, default_destroy_cost_data): Likewise.\n+\t* targhooks.c (default_init_cost): Replace with...\n+\t(default_vectorize_create_costs): ...this.\n+\t(default_add_stmt_cost): Delete, moving logic to vector_costs instead.\n+\t(default_finish_cost, default_destroy_cost_data): Delete.\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs): Inherit from\n+\tvector_costs.  Add a constructor.\n+\t(aarch64_init_cost): Replace with...\n+\t(aarch64_vectorize_create_costs): ...this.\n+\t(aarch64_add_stmt_cost): Replace with...\n+\t(aarch64_vector_costs::add_stmt_cost): ...this.  Use record_stmt_cost\n+\tto adjust the cost for inner loops.\n+\t(aarch64_finish_cost): Replace with...\n+\t(aarch64_vector_costs::finish_cost): ...this.\n+\t(aarch64_destroy_cost_data): Delete.\n+\t(TARGET_VECTORIZE_INIT_COST): Replace with...\n+\t(TARGET_VECTORIZE_CREATE_COSTS): ...this.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.\n+\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n+\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.\n+\t* config/i386/i386.c (ix86_vector_costs): New structure.\n+\t(ix86_init_cost): Replace with...\n+\t(ix86_vectorize_create_costs): ...this.\n+\t(ix86_add_stmt_cost): Replace with...\n+\t(ix86_vector_costs::add_stmt_cost): ...this.  Use adjust_cost_for_freq\n+\tto adjust the cost for inner loops.\n+\t(ix86_finish_cost, ix86_destroy_cost_data): Delete.\n+\t(TARGET_VECTORIZE_INIT_COST): Replace with...\n+\t(TARGET_VECTORIZE_CREATE_COSTS): ...this.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.\n+\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n+\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.\n+\t* config/rs6000/rs6000.c (TARGET_VECTORIZE_INIT_COST): Replace with...\n+\t(TARGET_VECTORIZE_CREATE_COSTS): ...this.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.\n+\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n+\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.\n+\t(rs6000_cost_data): Inherit from vector_costs.\n+\tAdd a constructor.  Drop loop_info, cost and costing_for_scalar\n+\tin favor of the corresponding vector_costs member variables.\n+\tAdd \"m_\" to the names of the remaining member variables and\n+\tinitialize them.\n+\t(rs6000_density_test): Replace with...\n+\t(rs6000_cost_data::density_test): ...this.\n+\t(rs6000_init_cost): Replace with...\n+\t(rs6000_vectorize_create_costs): ...this.\n+\t(rs6000_update_target_cost_per_stmt): Replace with...\n+\t(rs6000_cost_data::update_target_cost_per_stmt): ...this.\n+\t(rs6000_add_stmt_cost): Replace with...\n+\t(rs6000_cost_data::add_stmt_cost): ...this.  Use adjust_cost_for_freq\n+\tto adjust the cost for inner loops.\n+\t(rs6000_adjust_vect_cost_per_loop): Replace with...\n+\t(rs6000_cost_data::adjust_vect_cost_per_loop): ...this.\n+\t(rs6000_finish_cost): Replace with...\n+\t(rs6000_cost_data::finish_cost): ...this.  Group loop code\n+\tinto a single if statement and pass the loop_vinfo down to\n+\tsubroutines.\n+\t(rs6000_destroy_cost_data): Delete.\n+\n+2021-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103062\n+\tPR tree-optimization/103062\n+\t* value-pointer-equiv.cc (ssa_equiv_stack::ssa_equiv_stack):\n+\tIncrease size of allocation by 1.\n+\t(ssa_equiv_stack::push_replacement): Grow as needed.\n+\t(ssa_equiv_stack::get_replacement): Same.\n+\t(pointer_equiv_analyzer::pointer_equiv_analyzer): Same.\n+\t(pointer_equiv_analyzer::~pointer_equiv_analyzer): Remove delete.\n+\t(pointer_equiv_analyzer::set_global_equiv): Grow as needed.\n+\t(pointer_equiv_analyzer::get_equiv): Same.\n+\t(pointer_equiv_analyzer::get_equiv_expr): Remove const.\n+\t* value-pointer-equiv.h (class pointer_equiv_analyzer): Remove\n+\tconst markers.  Use auto_vec instead of tree *.\n+\n+2021-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_nary_op_insert_into): Remove always\n+\ttrue parameter and inline valueization.\n+\t(vn_nary_op_lookup_1): Inline valueization from ...\n+\t(vn_nary_op_compute_hash): ... here and remove it here.\n+\t* tree-ssa-pre.c (phi_translate_1): Do not valueize\n+\tbefore vn_nary_lookup_pieces.\n+\t(get_representative_for): Mark created SSA representatives\n+\tas visited.\n+\n+2021-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* simplify-rtx.c (simplify_context::simplify_gen_vec_select): Assert\n+\tthat the operand has a vector mode.  Use subreg_lowpart_offset\n+\tto test whether an index corresponds to the low part.\n+\n+2021-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* read-rtl.c: Remove dead !GENERATOR_FILE block.\n+\t* read-rtl-function.c (function_reader::consolidate_singletons):\n+\tGenerate canonical CONST_VECTORs.\n+\n+2021-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101989\n+\t* config/i386/predicates.md (reg_or_notreg_operand): Rename to ..\n+\t(regmem_or_bitnot_regmem_operand): .. and extend to handle\n+\tmemory_operand.\n+\t* config/i386/sse.md (*<avx512>_vpternlog<mode>_1): Force_reg\n+\tthe operands which are required to be register_operand.\n+\t(*<avx512>_vpternlog<mode>_2): Ditto.\n+\t(*<avx512>_vpternlog<mode>_3): Ditto.\n+\t(*<avx512>_vternlog<mode>_all): Disallow embeded broadcast for\n+\tvector HFmodes since it's not a real AVX512FP16 instruction.\n+\n+2021-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* match.pd: simplify (trunc)copysign((extend)a, (extend)b) to\n+\t.COPYSIGN (a,b) when a and b are same type as the truncation\n+\ttype and has less precision than extend type.\n+\n+2021-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/generic.texi: Update TARGET_MEM_REF and MEM_REF\n+\tdocumentation.\n+\n+2021-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/sse.md (VI2_AVX512VNNIBW): New mode iterator.\n+\t(VI1_AVX512VNNI): Likewise.\n+\t(SDOT_VPDP_SUF): New mode_attr.\n+\t(VI1SI): Likewise.\n+\t(vi1si): Likewise.\n+\t(sdot_prod<mode>): Use VI2_AVX512F iterator, expand to\n+\tvpdpwssd when VNNI targets available.\n+\t(usdot_prod<mode>): New expander for vector QImode.\n+\n+2021-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/amxtileintrin.h (_tile_loadd_internal): Add\n+\tparentheses to base and stride.\n+\t(_tile_stream_loadd_internal): Likewise.\n+\t(_tile_stored_internal): Likewise.\n+\n 2021-11-03  Maciej W. Rozycki  <macro@embecosm.com>\n \n \t* config/riscv/riscv.c (riscv_class_max_nregs): Swap the"}, {"sha": "b911d2a20470af7215fdd0b6d15f87526c7f9a33", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1 +1 @@\n-20211104\n+20211105"}, {"sha": "b43a7f3e2b353cfb150df8ff25c37c1835c00c5d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,8 @@\n+2021-11-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (sm_state_map::dump): Use default_tree_printer\n+\tas format decoder.\n+\n 2021-09-16  Maxim Blinov  <maxim.blinov@embecosm.com>\n \n \tPR bootstrap/102242"}, {"sha": "b980a8f861733b058045b9f0d1e7cb7f443f5f3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,16 @@\n+2021-11-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_array_conv): Use range-for.\n+\t(build_complex_conv): Likewise.\n+\t* constexpr.c (clear_no_implicit_zero)\n+\t(reduced_constant_expression_p): Likewise.\n+\t* decl.c (cp_complete_array_type): Likewise.\n+\t* decl2.c (mark_vtable_entries): Likewise.\n+\t* pt.c (iterative_hash_template_arg):\n+\t(invalid_tparm_referent_p, unify)\n+\t(type_dependent_expression_p): Likewise.\n+\t* typeck.c (build_ptrmemfunc_access_expr): Likewise.\n+\n 2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/103031"}, {"sha": "194f8bbff65902ff7721240060606e2ae7f1f2f7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,52 @@\n+2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.texi (Projects): Add bullet for helping with\n+\tincomplete standards compliance.\n+\t(Proposed Extensions): Delete section.\n+\n+2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* intrinsic.texi (Introduction to Intrinsics): Genericize\n+\treferences to standard versions.\n+\t* invoke.texi (-fall-intrinsics): Likewise.\n+\t(-fmax-identifier-length=): Likewise.\n+\n+2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.texi (Interoperability with C): Copy-editing.  Add\n+\tmore index entries.\n+\t(Intrinsic Types): Likewise.\n+\t(Derived Types and struct): Likewise.\n+\t(Interoperable Global Variables): Likewise.\n+\t(Interoperable Subroutines and Functions): Likewise.\n+\t(Working with C Pointers): Likewise.\n+\t(Further Interoperability of Fortran with C): Likewise.  Rewrite\n+\tto reflect that this is now fully supported by gfortran.\n+\n+2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.texi (About GNU Fortran): Consolidate material\n+\tformerly in other sections.  Copy-editing.\n+\t(Preprocessing and conditional compilation): Delete, moving\n+\tmost material to invoke.texi.\n+\t(GNU Fortran and G77): Delete.\n+\t(Project Status): Delete.\n+\t(Standards): Update.\n+\t(Fortran 95 status): Mention conditional compilation here.\n+\t(Fortran 2003 status): Rewrite to mention the 1 missing feature\n+\tinstead of all the ones implemented.\n+\t(Fortran 2008 status): Similarly for the 2 missing features.\n+\t(Fortran 2018 status): Rewrite to reflect completion of TS29113\n+\tfeature support.\n+\t* invoke.texi (Preprocessing Options): Move material formerly\n+\tin introductory chapter here.\n+\n+2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.texi (Standards): Move discussion of specific\n+\tstandard versions here....\n+\t(Fortran standards status): ...from here, and delete this node.\n+\n 2021-10-31  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* symbol.c (gfc_get_typebound_proc): Revert memcpy."}, {"sha": "6706dc633e3e4e76a361d4bfc13937bd6af5f427", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,178 @@\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-eh2.C: Add dg-warning for new\n+\tdeprecation warnings.\n+\t* g++.dg/cpp0x/noexcept06.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept07.C: Likewise.\n+\t* g++.dg/eh/forced3.C: Likewise.\n+\t* g++.dg/eh/unexpected1.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec1.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec2.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec3.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec4.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh33.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh34.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh50.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh51.C: Likewise.\n+\n+2021-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-1.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-2.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-3.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-4.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-5.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-6.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-7.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-8.c: New test.\n+\t* gcc.target/aarch64/signbit-2.c: New test.\n+\n+2021-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/signbit-2.c: New test.\n+\t* gcc.dg/signbit-3.c: New test.\n+\t* gcc.dg/signbit-4.c: New test.\n+\t* gcc.dg/signbit-5.c: New test.\n+\t* gcc.dg/signbit-6.c: New test.\n+\t* gcc.target/aarch64/signbit-1.c: New test.\n+\n+2021-11-04  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103079\n+\t* gcc.dg/pr103079.c: New.\n+\n+2021-11-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* gcc.dg/guality/ipa-sra-1.c: New test.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: New code\n+\tgeneration tests.\n+\n+2021-11-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_2.c:\n+\tRelax incorrect register number requirement.\n+\t* gcc.target/aarch64/sve/pcs/struct_3_256.c: Accept\n+\tequivalent codegen with fmov.\n+\n+2021-11-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/amxtile-3.c: Check leal/addl for x32.\n+\n+2021-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/103042\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-int.c: Update guards.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-long.c: Likewise.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-short.c: Likewise.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-int.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-long.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-short.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/complex-add-pattern-template.c: Likewise.\n+\t* gcc.dg/vect/complex/complex-add-template.c: Likewise.\n+\t* gcc.dg/vect/complex/complex-operations-run.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-double.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-half-float.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-byte.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-int.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-long.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-short.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-byte.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-int.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-long.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-short.c:\n+\tLikewise.\n+\n+2021-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/103075\n+\t* gcc.dg/pr103075.c: New testcase.\n+\n+2021-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103062\n+\t* gcc.dg/pr103062.c: New test.\n+\n+2021-11-04  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\t* gcc.dg/vect/pr101145_1.c: Update case.\n+\t* gcc.dg/vect/pr101145_2.c: Update case.\n+\t* gcc.dg/vect/pr101145_3.c: Update case.\n+\n+2021-11-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/asan/asan_test.C: Disable one warning.\n+\n+2021-11-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/rtl/aarch64/big-endian-cse-1.c: New test.\n+\n+2021-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr101989-3.c: New test.\n+\n+2021-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102464-copysign-1.c: New test.\n+\n+2021-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/vnni-auto-vectorize-1.c: New test.\n+\t* gcc.target/i386/vnni-auto-vectorize-2.c: Ditto.\n+\n+2021-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/amxtile-3.c: New test.\n+\n+2021-11-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/opt/pr102970.C: Only run in C++14 and up.\n+\n 2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/103031"}, {"sha": "3d87b0a5380100f84f32895ae8716218fb974e2f", "filename": "libffi/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,15 @@\n+2021-11-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.am (AM_CFLAGS): Add $(CET_FLAGS).\n+\t(AM_CCASFLAGS): Likewise.\n+\t* configure.ac (CET_FLAGS): Add GCC_CET_FLAGS and AC_SUBST.\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\t* include/Makefile.in: Likewise.\n+\t* man/Makefile.in: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2021-10-27  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Add commit 90454a90082."}, {"sha": "e48429eab9ec8fdd759f8406c208d4c4747e2f90", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,7 @@\n+2021-11-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update git revision.\n+\n 2021-10-08  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR sanitizer/102632"}, {"sha": "6d5c1ee5f4057ad40b05a8282b89aa6bea2a0faf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1af24eface3620e348be9429e7c2e872accbc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1af24eface3620e348be9429e7c2e872accbc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29a1af24eface3620e348be9429e7c2e872accbc", "patch": "@@ -1,3 +1,112 @@\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103086\n+\t* python/libstdcxx/v6/printers.py (_tuple_impl_get): New helper\n+\tfor accessing the tuple element stored in a _Tuple_impl node.\n+\t(tuple_get): New function for accessing a tuple element.\n+\t(unique_ptr_get): New function for accessing a unique_ptr.\n+\t(UniquePointerPrinter, StdPathPrinter): Use unique_ptr_get.\n+\t* python/libstdcxx/v6/xmethods.py (UniquePtrGetWorker): Cast\n+\ttuple to its base class before accessing _M_head_impl.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/evolution.xml: Document deprecations.\n+\t* doc/html/*: Regenerate.\n+\t* libsupc++/exception (unexpected_handler, unexpected)\n+\t(get_unexpected, set_unexpected): Add deprecated attribute.\n+\tDo not define without _GLIBCXX_USE_DEPRECATED for C++17 and up.\n+\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Disable\n+\tdeprecated warnings.\n+\t* libsupc++/eh_ptr.cc (std::rethrow_exception): Likewise.\n+\t* libsupc++/eh_terminate.cc: Likewise.\n+\t* libsupc++/eh_throw.cc (__cxa_init_primary_exception):\n+\tLikewise.\n+\t* libsupc++/unwind-cxx.h (struct __cxa_exception): Use\n+\tterminate_handler instead of unexpected_handler.\n+\t(struct __cxa_dependent_exception): Likewise.\n+\t(__unexpected): Likewise.\n+\t* testsuite/18_support/headers/exception/synopsis.cc: Add\n+\tdg-warning for deprecated warning.\n+\t* testsuite/18_support/exception_ptr/60612-unexpected.cc:\n+\tDisable deprecated warnings.\n+\t* testsuite/18_support/set_unexpected.cc: Likewise.\n+\t* testsuite/18_support/unexpected_handler.cc: Likewise.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/utility.h (__find_uniq_type_in_pack): Move\n+\tdefinition to here, ...\n+\t* include/std/tuple (__find_uniq_type_in_pack): ... from here.\n+\t* include/std/variant (__detail__variant::__index_of): Remove.\n+\t(__detail::__variant::__exactly_once): Define using\n+\t__find_uniq_type_in_pack instead of __index_of.\n+\t(get<T>, get_if<T>, variant::__index_of): Likewise.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_pair.h (tuple_size_v): Define partial\n+\tspecializations for std::pair.\n+\t* include/bits/utility.h (_Nth_type): Move definition here\n+\tand define primary template.\n+\t(tuple_size_v): Move definition here.\n+\t* include/std/array (tuple_size_v): Define partial\n+\tspecializations for std::array.\n+\t* include/std/tuple (tuple_size_v): Move primary template to\n+\t<bits/utility.h>.  Define partial specializations for\n+\tstd::tuple.\n+\t(tuple_element): Change definition to use _Nth_type.\n+\t* include/std/variant (_Nth_type): Move to <bits/utility.h>.\n+\t(variant_alternative, variant): Adjust qualification of\n+\t_Nth_type.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Prune\n+\tadditional errors from _Nth_type.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__detail::__variant::__emplace): New\n+\tfunction template.\n+\t(_Copy_assign_base::operator=): Reorder conditions to match\n+\tbulleted list of effects in the standard. Use __emplace instead\n+\tof _M_reset followed by _Construct.\n+\t(_Move_assign_base::operator=): Likewise.\n+\t(__construct_by_index): Remove.\n+\t(variant::emplace): Use __emplace instead of _M_reset followed\n+\tby __construct_by_index.\n+\t(variant::swap): Hoist valueless cases out of visitor. Use\n+\t__emplace to replace _M_reset followed by _Construct.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (_Nth_type): Define partial\n+\tspecializations to reduce number of instantiations.\n+\t(variant_size_v): Define partial specializations to avoid\n+\tinstantiations.\n+\t(variant_alternative): Use _Nth_type. Add static assert.\n+\t(__tuple_count, __tuple_count_v): Replace with ...\n+\t(__count): New variable template.\n+\t(_Variant_union): Add deleted constructor.\n+\t(variant::__to_type): Use _Nth_type.\n+\t(variant::emplace): Use _Nth_type. Add deleted overloads for\n+\tinvalid types and indices.\n+\n+2021-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102912\n+\t* include/std/variant (_Variant_storage::__index_of): Remove.\n+\t(__variant_construct_single): Remove.\n+\t(__variant_construct): Remove.\n+\t(_Copy_ctor_base::_Copy_ctor_base(const _Copy_ctor_base&)): Do\n+\tconstruction directly instead of using __variant_construct.\n+\t(_Move_ctor_base::_Move_ctor_base(_Move_ctor_base&&)): Likewise.\n+\t(_Move_ctor_base::_M_destructive_move()): Remove.\n+\t(_Move_ctor_base::_M_destructive_copy()): Remove.\n+\t(_Copy_assign_base::operator=(const _Copy_assign_base&)): Do\n+\tconstruction directly instead of using _M_destructive_copy.\n+\t(variant::swap): Do construction directly instead of using\n+\t_M_destructive_move.\n+\t* testsuite/20_util/variant/102912.cc: New test.\n+\n 2021-11-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/66742"}]}