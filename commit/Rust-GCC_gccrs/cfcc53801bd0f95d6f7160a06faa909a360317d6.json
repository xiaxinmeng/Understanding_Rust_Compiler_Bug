{"sha": "cfcc53801bd0f95d6f7160a06faa909a360317d6", "node_id": "C_kwDOANBUbNoAKGNmY2M1MzgwMWJkMGY5NWQ2ZjcxNjBhMDZmYWE5MDlhMzYwMzE3ZDY", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-01-25T13:32:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:24Z"}, "message": "[Ada] Fix indentation to follow uniform style across runtime units\n\ngcc/ada/\n\n\t* libgnat/s-valuei.adb: Fix indentation.\n\t* libgnat/s-valuei.ads: Same.", "tree": {"sha": "4d867a1c0f6af2531cb45d0232cbe893c69c1aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d867a1c0f6af2531cb45d0232cbe893c69c1aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfcc53801bd0f95d6f7160a06faa909a360317d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfcc53801bd0f95d6f7160a06faa909a360317d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfcc53801bd0f95d6f7160a06faa909a360317d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfcc53801bd0f95d6f7160a06faa909a360317d6/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "68d898448bf38fe2d11c1dc17869569c9760ca53", "filename": "gcc/ada/libgnat/s-valuei.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcc53801bd0f95d6f7160a06faa909a360317d6/gcc%2Fada%2Flibgnat%2Fs-valuei.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcc53801bd0f95d6f7160a06faa909a360317d6/gcc%2Fada%2Flibgnat%2Fs-valuei.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuei.adb?ref=cfcc53801bd0f95d6f7160a06faa909a360317d6", "patch": "@@ -63,6 +63,7 @@ package body System.Value_I is\n       Non_Blank : constant Positive :=\n         First_Non_Space_Ghost (Str, Ptr.all, Max)\n       with Ghost;\n+\n       Fst_Num   : constant Positive :=\n         (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n          else Non_Blank)\n@@ -127,10 +128,11 @@ package body System.Value_I is\n             Non_Blank : constant Positive := First_Non_Space_Ghost\n               (Str, Str'First, Str'Last)\n             with Ghost;\n+\n             Fst_Num   : constant Positive :=\n               (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n                else Non_Blank)\n-              with Ghost;\n+            with Ghost;\n          begin\n             pragma Assert\n               (Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Str'Last)));"}, {"sha": "a7e20abec651b2170b10b060ecf8dc4c76d1dda1", "filename": "gcc/ada/libgnat/s-valuei.ads", "status": "modified", "additions": 50, "deletions": 46, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcc53801bd0f95d6f7160a06faa909a360317d6/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcc53801bd0f95d6f7160a06faa909a360317d6/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuei.ads?ref=cfcc53801bd0f95d6f7160a06faa909a360317d6", "patch": "@@ -90,7 +90,8 @@ package System.Value_I is\n      (if Minus and then Uval = Uns (Int'Last) + 1 then Val = Int'First\n       elsif Minus then Val = -(Int (Uval))\n       else Val = Int (Uval))\n-   with Ghost,\n+   with\n+     Ghost,\n      Pre  => Uns_Is_Valid_Int (Minus, Uval),\n      Post => True;\n    --  Return True if Uval (or -Uval when Minus is True) is equal to Val\n@@ -101,8 +102,7 @@ package System.Value_I is\n       Max : Integer;\n       Res : out Int)\n    with\n-     Pre  =>\n-       Str'Last /= Positive'Last\n+     Pre  => Str'Last /= Positive'Last\n        --  Ptr.all .. Max is either an empty range, or a valid range in Str\n        and then (Ptr.all > Max\n                  or else (Ptr.all >= Str'First and then Max <= Str'Last))\n@@ -116,10 +116,10 @@ package System.Value_I is\n                else Non_Blank);\n           begin\n             Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Max))\n-            and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Max)\n-            and then Uns_Is_Valid_Int\n-              (Minus => Str (Non_Blank) = '-',\n-               Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max))),\n+              and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Max)\n+              and then Uns_Is_Valid_Int\n+                (Minus => Str (Non_Blank) = '-',\n+                 Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max))),\n     Post =>\n       (declare\n          Non_Blank : constant Positive := First_Non_Space_Ghost\n@@ -130,10 +130,10 @@ package System.Value_I is\n          Uval      : constant Uns :=\n             Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max);\n        begin\n-           Is_Int_Of_Uns (Minus => Str (Non_Blank) = '-',\n-                          Uval  => Uval,\n-                          Val   => Res)\n-             and then Ptr.all = Raw_Unsigned_Last_Ghost (Str, Fst_Num, Max));\n+         Is_Int_Of_Uns (Minus => Str (Non_Blank) = '-',\n+                        Uval  => Uval,\n+                        Val   => Res)\n+           and then Ptr.all = Raw_Unsigned_Last_Ghost (Str, Fst_Num, Max));\n    --  This procedure scans the string starting at Str (Ptr.all) for a valid\n    --  integer according to the syntax described in (RM 3.5(43)). The substring\n    --  scanned extends no further than Str (Max). There are three cases for the\n@@ -160,21 +160,23 @@ package System.Value_I is\n    --  is greater than Max as required in this case.\n \n    function Slide_To_1 (Str : String) return String\n-   with Ghost,\n-       Post =>\n-         Only_Space_Ghost (Str, Str'First, Str'Last) =\n+   with\n+     Ghost,\n+     Post =>\n+       Only_Space_Ghost (Str, Str'First, Str'Last) =\n          (for all J in Str'First .. Str'Last =>\n             Slide_To_1'Result (J - Str'First + 1) = ' ');\n    --  Slides Str so that it starts at 1\n \n    function Slide_If_Necessary (Str : String) return String is\n      (if Str'Last = Positive'Last then Slide_To_1 (Str) else Str)\n-   with Ghost,\n-       Post =>\n-         Only_Space_Ghost (Str, Str'First, Str'Last) =\n-         Only_Space_Ghost (Slide_If_Necessary'Result,\n-                           Slide_If_Necessary'Result'First,\n-                           Slide_If_Necessary'Result'Last);\n+   with\n+     Ghost,\n+     Post =>\n+       Only_Space_Ghost (Str, Str'First, Str'Last) =\n+       Only_Space_Ghost (Slide_If_Necessary'Result,\n+                         Slide_If_Necessary'Result'First,\n+                         Slide_If_Necessary'Result'Last);\n    --  If Str'Last = Positive'Last then slides Str so that it starts at 1\n \n    function Is_Integer_Ghost (Str : String) return Boolean is\n@@ -185,17 +187,18 @@ package System.Value_I is\n           (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1 else Non_Blank);\n       begin\n         Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Str'Last))\n-        and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Str'Last)\n-        and then\n-          Uns_Is_Valid_Int\n-            (Minus => Str (Non_Blank) = '-',\n-             Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Str'Last))\n-        and then Only_Space_Ghost\n-           (Str, Raw_Unsigned_Last_Ghost (Str, Fst_Num, Str'Last), Str'Last))\n-   with Ghost,\n-       Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n-         and then Str'Last /= Positive'Last,\n-       Post => True;\n+          and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Str'Last)\n+          and then\n+            Uns_Is_Valid_Int\n+              (Minus => Str (Non_Blank) = '-',\n+               Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Str'Last))\n+          and then Only_Space_Ghost\n+            (Str, Raw_Unsigned_Last_Ghost (Str, Fst_Num, Str'Last), Str'Last))\n+   with\n+     Ghost,\n+     Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+       and then Str'Last /= Positive'Last,\n+     Post => True;\n    --  Ghost function that determines if Str has the correct format for a\n    --  signed number, consisting in some blank characters, an optional\n    --  sign, a raw unsigned number which does not overflow and then some\n@@ -213,21 +216,22 @@ package System.Value_I is\n         Is_Int_Of_Uns (Minus => Str (Non_Blank) = '-',\n                        Uval  => Uval,\n                        Val   => Val))\n-   with Ghost,\n-       Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n-         and then Str'Last /= Positive'Last\n-         and then Is_Integer_Ghost (Str),\n-       Post => True;\n+   with\n+     Ghost,\n+     Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+       and then Str'Last /= Positive'Last\n+       and then Is_Integer_Ghost (Str),\n+     Post => True;\n    --  Ghost function that returns True if Val is the value corresponding to\n    --  the signed number represented by Str.\n \n    function Value_Integer (Str : String) return Int\n-   with Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n-     and then Str'Length /= Positive'Last\n-     and then Is_Integer_Ghost (Slide_If_Necessary (Str)),\n-     Post =>\n-         Is_Value_Integer_Ghost\n-           (Slide_If_Necessary (Str), Value_Integer'Result),\n+   with\n+     Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+       and then Str'Length /= Positive'Last\n+       and then Is_Integer_Ghost (Slide_If_Necessary (Str)),\n+     Post => Is_Value_Integer_Ghost\n+       (Slide_If_Necessary (Str), Value_Integer'Result),\n      Subprogram_Variant => (Decreases => Str'First);\n    --  Used in computing X'Value (Str) where X is a signed integer type whose\n    --  base range does not exceed the base range of Integer. Str is the string\n@@ -241,9 +245,9 @@ private\n    ----------------\n \n    function Slide_To_1 (Str : String) return String is\n-      (declare\n-         Res : constant String (1 .. Str'Length) := Str;\n-       begin\n-         Res);\n+     (declare\n+        Res : constant String (1 .. Str'Length) := Str;\n+      begin\n+        Res);\n \n end System.Value_I;"}]}