{"sha": "12efb1d75f459d7c69bfaededd398f9724ee67bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlZmIxZDc1ZjQ1OWQ3YzY5YmZhZWRlZGQzOThmOTcyNGVlNjdiYg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-28T07:54:04Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-28T07:54:04Z"}, "message": "Handle double reduction in parloops\n\n2015-07-28  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-parloops.c (reduc_stmt_res): New function.\n\t(initialize_reductions, add_field_for_reduction)\n\t(create_phi_for_local_result, create_loads_for_reductions)\n\t(create_stores_for_reduction, build_new_reduction): Handle case that\n\treduc_stmt is a phi.\n\t(gather_scalar_reductions): Allow double_reduc reductions.\n\n\t* gcc.dg/autopar/uns-outer-4.c: Remove xfail on scan for parallelizing\n\touter loop.\n\n\t* testsuite/libgomp.c/uns-outer-4.c: New test.\n\nFrom-SVN: r226300", "tree": {"sha": "c8e721d99e98b1d94dbde05660f4bbdccf11aa88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8e721d99e98b1d94dbde05660f4bbdccf11aa88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12efb1d75f459d7c69bfaededd398f9724ee67bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12efb1d75f459d7c69bfaededd398f9724ee67bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12efb1d75f459d7c69bfaededd398f9724ee67bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12efb1d75f459d7c69bfaededd398f9724ee67bb/comments", "author": null, "committer": null, "parents": [{"sha": "70b47b619938d465c89370bfc5bf1988cfd0415b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b47b619938d465c89370bfc5bf1988cfd0415b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b47b619938d465c89370bfc5bf1988cfd0415b"}], "stats": {"total": 133, "additions": 120, "deletions": 13}, "files": [{"sha": "3457af8266929337ca16650cab2936a2d3c60bb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -1,3 +1,12 @@\n+2015-07-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-parloops.c (reduc_stmt_res): New function.\n+\t(initialize_reductions, add_field_for_reduction)\n+\t(create_phi_for_local_result, create_loads_for_reductions)\n+\t(create_stores_for_reduction, build_new_reduction): Handle case that\n+\treduc_stmt is a phi.\n+\t(gather_scalar_reductions): Allow double_reduc reductions.\n+\n 2015-07-28  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_comparison): Remove equality folding"}, {"sha": "9c9d962ff42b6f33dd79147d88dcc2d1c675e770", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -1,3 +1,8 @@\n+2015-07-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.dg/autopar/uns-outer-4.c: Remove xfail on scan for parallelizing\n+\touter loop.\n+\n 2015-07-28  Luis Felipe Strano Moraes  <luis.strano@gmail.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "5eb67ea74fc1ccedabd64900324bfb2bd433a8e6", "filename": "gcc/testsuite/gcc.dg/autopar/uns-outer-4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -12,9 +12,7 @@ parloop (int N)\n   int i, j;\n   unsigned int sum;\n \n-  /* Double reduction is currently not supported, outer loop is not\n-     parallelized.  Inner reduction is detected, inner loop is\n-     parallelized.  */\n+  /* Double reduction is detected, outer loop is parallelized.  */\n   sum = 0;\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n@@ -23,5 +21,5 @@ parloop (int N)\n   g_sum = sum;\n }\n \n-/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */"}, {"sha": "b06265c4bb85686a1632df15a05c30a96f95a2b2", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -549,6 +549,14 @@ take_address_of (tree obj, tree type, edge entry,\n   return name;\n }\n \n+static tree\n+reduc_stmt_res (gimple stmt)\n+{\n+  return (gimple_code (stmt) == GIMPLE_PHI\n+\t  ? gimple_phi_result (stmt)\n+\t  : gimple_assign_lhs (stmt));\n+}\n+\n /* Callback for htab_traverse.  Create the initialization statement\n    for reduction described in SLOT, and place it at the preheader of\n    the loop described in DATA.  */\n@@ -575,7 +583,7 @@ initialize_reductions (reduction_info **slot, struct loop *loop)\n   c = build_omp_clause (gimple_location (reduc->reduc_stmt),\n \t\t\tOMP_CLAUSE_REDUCTION);\n   OMP_CLAUSE_REDUCTION_CODE (c) = reduc->reduction_code;\n-  OMP_CLAUSE_DECL (c) = SSA_NAME_VAR (gimple_assign_lhs (reduc->reduc_stmt));\n+  OMP_CLAUSE_DECL (c) = SSA_NAME_VAR (reduc_stmt_res (reduc->reduc_stmt));\n \n   init = omp_reduction_init (c, TREE_TYPE (bvar));\n   reduc->init = init;\n@@ -982,7 +990,7 @@ add_field_for_reduction (reduction_info **slot, tree type)\n {\n \n   struct reduction_info *const red = *slot;\n-  tree var = gimple_assign_lhs (red->reduc_stmt);\n+  tree var = reduc_stmt_res (red->reduc_stmt);\n   tree field = build_decl (gimple_location (red->reduc_stmt), FIELD_DECL,\n \t\t\t   SSA_NAME_IDENTIFIER (var), TREE_TYPE (var));\n \n@@ -1042,12 +1050,12 @@ create_phi_for_local_result (reduction_info **slot, struct loop *loop)\n     e = EDGE_PRED (store_bb, 1);\n   else\n     e = EDGE_PRED (store_bb, 0);\n-  local_res = copy_ssa_name (gimple_assign_lhs (reduc->reduc_stmt));\n+  tree lhs = reduc_stmt_res (reduc->reduc_stmt);\n+  local_res = copy_ssa_name (lhs);\n   locus = gimple_location (reduc->reduc_stmt);\n   new_phi = create_phi_node (local_res, store_bb);\n   add_phi_arg (new_phi, reduc->init, e, locus);\n-  add_phi_arg (new_phi, gimple_assign_lhs (reduc->reduc_stmt),\n-\t       FALLTHRU_EDGE (loop->latch), locus);\n+  add_phi_arg (new_phi, lhs, FALLTHRU_EDGE (loop->latch), locus);\n   reduc->new_phi = new_phi;\n \n   return 1;\n@@ -1140,7 +1148,7 @@ create_loads_for_reductions (reduction_info **slot, struct clsn_data *clsn_data)\n   struct reduction_info *const red = *slot;\n   gimple stmt;\n   gimple_stmt_iterator gsi;\n-  tree type = TREE_TYPE (gimple_assign_lhs (red->reduc_stmt));\n+  tree type = TREE_TYPE (reduc_stmt_res (red->reduc_stmt));\n   tree load_struct;\n   tree name;\n   tree x;\n@@ -1205,7 +1213,7 @@ create_stores_for_reduction (reduction_info **slot, struct clsn_data *clsn_data)\n   tree t;\n   gimple stmt;\n   gimple_stmt_iterator gsi;\n-  tree type = TREE_TYPE (gimple_assign_lhs (red->reduc_stmt));\n+  tree type = TREE_TYPE (reduc_stmt_res (red->reduc_stmt));\n \n   gsi = gsi_last_bb (clsn_data->store_bb);\n   t = build3 (COMPONENT_REF, type, clsn_data->store, red->field, NULL_TREE);\n@@ -2330,6 +2338,7 @@ build_new_reduction (reduction_info_table_type *reduction_list,\n {\n   reduction_info **slot;\n   struct reduction_info *new_reduction;\n+  enum tree_code reduction_code;\n \n   gcc_assert (reduc_stmt);\n \n@@ -2341,12 +2350,22 @@ build_new_reduction (reduction_info_table_type *reduction_list,\n       fprintf (dump_file, \"\\n\");\n     }\n \n+  if (gimple_code (reduc_stmt) == GIMPLE_PHI)\n+    {\n+      tree op1 = PHI_ARG_DEF (reduc_stmt, 0);\n+      gimple def1 = SSA_NAME_DEF_STMT (op1);\n+      reduction_code = gimple_assign_rhs_code (def1);\n+    }\n+\n+  else\n+    reduction_code = gimple_assign_rhs_code (reduc_stmt);\n+\n   new_reduction = XCNEW (struct reduction_info);\n \n   new_reduction->reduc_stmt = reduc_stmt;\n   new_reduction->reduc_phi = phi;\n   new_reduction->reduc_version = SSA_NAME_VERSION (gimple_phi_result (phi));\n-  new_reduction->reduction_code = gimple_assign_rhs_code (reduc_stmt);\n+  new_reduction->reduction_code = reduction_code;\n   slot = reduction_list->find_slot (new_reduction, INSERT);\n   *slot = new_reduction;\n }\n@@ -2368,6 +2387,8 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n {\n   gphi_iterator gsi;\n   loop_vec_info simple_loop_info;\n+  loop_vec_info simple_inner_loop_info = NULL;\n+  bool allow_double_reduc = true;\n \n   simple_loop_info = vect_analyze_loop_form (loop);\n   if (simple_loop_info == NULL)\n@@ -2389,12 +2410,46 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n       gimple reduc_stmt\n \t= vect_force_simple_reduction (simple_loop_info, phi, true,\n \t\t\t\t       &double_reduc, true);\n-      if (!reduc_stmt || double_reduc)\n+      if (!reduc_stmt)\n \tcontinue;\n \n+      if (double_reduc)\n+\t{\n+\t  if (!allow_double_reduc\n+\t      || loop->inner->inner != NULL)\n+\t    continue;\n+\n+\t  if (!simple_inner_loop_info)\n+\t    {\n+\t      simple_inner_loop_info = vect_analyze_loop_form (loop->inner);\n+\t      if (!simple_inner_loop_info)\n+\t\t{\n+\t\t  allow_double_reduc = false;\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\n+\t  use_operand_p use_p;\n+\t  gimple inner_stmt;\n+\t  bool single_use_p = single_imm_use (res, &use_p, &inner_stmt);\n+\t  gcc_assert (single_use_p);\n+\t  gphi *inner_phi = as_a <gphi *> (inner_stmt);\n+\t  if (simple_iv (loop->inner, loop->inner, PHI_RESULT (inner_phi),\n+\t\t\t &iv, true))\n+\t    continue;\n+\n+\t  gimple inner_reduc_stmt\n+\t    = vect_force_simple_reduction (simple_inner_loop_info, inner_phi,\n+\t\t\t\t\t   true, &double_reduc, true);\n+\t  gcc_assert (!double_reduc);\n+\t  if (inner_reduc_stmt == NULL)\n+\t    continue;\n+\t}\n+\n       build_new_reduction (reduction_list, reduc_stmt, phi);\n     }\n   destroy_loop_vec_info (simple_loop_info, true);\n+  destroy_loop_vec_info (simple_inner_loop_info, true);\n \n   /* As gimple_uid is used by the vectorizer in between vect_analyze_loop_form\n      and destroy_loop_vec_info, we can set gimple_uid of reduc_phi stmts"}, {"sha": "4c9f690a8e75a17e7d77d3b8020cc4f27d970bcd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -1,3 +1,7 @@\n+2015-07-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.c/uns-outer-4.c: New test.\n+\n 2015-07-24  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* testsuite/libgomp.c/pr66714.c: New test."}, {"sha": "cd646a54133ae7ac983eb912cdbea99d8f0efde9", "filename": "libgomp/testsuite/libgomp.c/uns-outer-4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12efb1d75f459d7c69bfaededd398f9724ee67bb/libgomp%2Ftestsuite%2Flibgomp.c%2Funs-outer-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12efb1d75f459d7c69bfaededd398f9724ee67bb/libgomp%2Ftestsuite%2Flibgomp.c%2Funs-outer-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Funs-outer-4.c?ref=12efb1d75f459d7c69bfaededd398f9724ee67bb", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=2\" } */\n+\n+void abort (void);\n+\n+unsigned int g_sum = 1;\n+\n+unsigned int x[500][500];\n+\n+void __attribute__((noinline,noclone))\n+parloop (int N)\n+{\n+  int i, j;\n+  unsigned int sum;\n+\n+  /* Double reduction is detected, outer loop is parallelized.  */\n+  sum = 0;\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      sum += x[i][j];\n+\n+  g_sum = sum;\n+}\n+\n+int\n+main (void)\n+{\n+  x[234][432] = 2;\n+\n+  parloop (500);\n+\n+  if (g_sum != 2)\n+    abort ();\n+\n+  return 0;\n+}"}]}