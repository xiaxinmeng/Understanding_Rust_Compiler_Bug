{"sha": "ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2NmRmN2FhMGQwZDcxYzIwZDYzNGI5MmIxYzBlNGMwNDY0MDM1MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-10T21:04:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-10T21:04:22Z"}, "message": "stl_function.h (bind1st, bind2nd): Rename __opr to __oper, as __opr is used internally by egcs.\n\n        * stl_function.h (bind1st, bind2nd): Rename __opr to __oper,\n        as __opr is used internally by egcs.\n        * stl_numeric.h (__power, power): Likewise.\n\n        * stl_algo.h (transform): Rename __opr to __oper, as __opr is used\n        internally by egcs.\n        Reported by Harri Porten <porten@tu-harburg.de>\n\nFrom-SVN: r34949", "tree": {"sha": "386519f804555e6f31db81b0d458e6d3b39ab52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386519f804555e6f31db81b0d458e6d3b39ab52e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/comments", "author": null, "committer": null, "parents": [{"sha": "ec039e3c262cc8f899997f2b7631031c39c96e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec039e3c262cc8f899997f2b7631031c39c96e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec039e3c262cc8f899997f2b7631031c39c96e3e"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "d4b7cc78caec9ca20467e12f82671629c28c4192", "filename": "libstdc++/stl/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2FChangeLog?ref=ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "patch": "@@ -1,3 +1,15 @@\n+2000-07-10  Martin v. L\ufffdwis (loewis@informatik.hu-berlin.de)\n+\n+\t* stl_function.h (bind1st, bind2nd): Rename __opr to __oper, \n+\tas __opr is used internally by egcs.\n+\t* stl_numeric.h (__power, power): Likewise.\n+\n+2000-07-10  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\t\n+\t* stl_algo.h (transform): Rename __opr to __oper, as __opr is used \n+\tinternally by egcs.\n+\tReported by Harri Porten <porten@tu-harburg.de>\n+\t\n 2000-01-19  Gabriel Dos Reis  <dosreis@cmla.ens-cachan.fr>\n \n \t* stl_iterator.h: Make it possible to use standard class"}, {"sha": "e9beaee15f11a5d01f85bdef3032a01265dcb7f1", "filename": "libstdc++/stl/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_algo.h?ref=ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "patch": "@@ -446,9 +446,9 @@ _ForwardIter2 swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,\n \n template <class _InputIter, class _OutputIter, class _UnaryOperation>\n _OutputIter transform(_InputIter __first, _InputIter __last,\n-                      _OutputIter __result, _UnaryOperation __opr) {\n+                      _OutputIter __result, _UnaryOperation __oper) {\n   for ( ; __first != __last; ++__first, ++__result)\n-    *__result = __opr(*__first);\n+    *__result = __oper(*__first);\n   return __result;\n }\n "}, {"sha": "a5a8486576e9aedfd09a452b6084b8e4de2c3619", "filename": "libstdc++/stl/stl_function.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_function.h?ref=ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "patch": "@@ -202,10 +202,10 @@ class binder1st\n \n template <class _Operation, class _Tp>\n inline binder1st<_Operation> \n-bind1st(const _Operation& __opr, const _Tp& __x) \n+bind1st(const _Operation& __oper, const _Tp& __x) \n {\n   typedef typename _Operation::first_argument_type _Arg1_type;\n-  return binder1st<_Operation>(__opr, _Arg1_type(__x));\n+  return binder1st<_Operation>(__oper, _Arg1_type(__x));\n }\n \n template <class _Operation> \n@@ -227,10 +227,10 @@ class binder2nd\n \n template <class _Operation, class _Tp>\n inline binder2nd<_Operation> \n-bind2nd(const _Operation& __opr, const _Tp& __x) \n+bind2nd(const _Operation& __oper, const _Tp& __x) \n {\n   typedef typename _Operation::second_argument_type _Arg2_type;\n-  return binder2nd<_Operation>(__opr, _Arg2_type(__x));\n+  return binder2nd<_Operation>(__oper, _Arg2_type(__x));\n }\n \n // unary_compose and binary_compose (extensions, not part of the standard)."}, {"sha": "392515a3d87d7311aa4c58c66d4f9d081031d6f2", "filename": "libstdc++/stl/stl_numeric.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad66df7aa0d0d71c20d634b92b1c0e4c04640351/libstdc%2B%2B%2Fstl%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_numeric.h?ref=ad66df7aa0d0d71c20d634b92b1c0e4c04640351", "patch": "@@ -177,22 +177,22 @@ adjacent_difference(_InputIterator __first, _InputIterator __last,\n \n  \n template <class _Tp, class _Integer, class _MonoidOperation>\n-_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)\n+_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __oper)\n {\n   if (__n == 0)\n-    return identity_element(__opr);\n+    return identity_element(__oper);\n   else {\n     while ((__n & 1) == 0) {\n       __n >>= 1;\n-      __x = __opr(__x, __x);\n+      __x = __oper(__x, __x);\n     }\n \n     _Tp __result = __x;\n     __n >>= 1;\n     while (__n != 0) {\n-      __x = __opr(__x, __x);\n+      __x = __oper(__x, __x);\n       if ((__n & 1) != 0)\n-        __result = __opr(__result, __x);\n+        __result = __oper(__result, __x);\n       __n >>= 1;\n     }\n     return __result;\n@@ -209,9 +209,9 @@ inline _Tp __power(_Tp __x, _Integer __n)\n // not part of the C++ standard.\n \n template <class _Tp, class _Integer, class _MonoidOperation>\n-inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __opr)\n+inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __oper)\n {\n-  return __power(__x, __n, __opr);\n+  return __power(__x, __n, __oper);\n }\n \n template <class _Tp, class _Integer>"}]}