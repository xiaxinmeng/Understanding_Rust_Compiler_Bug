{"sha": "5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "node_id": "C_kwDOANBUbNoAKDViN2E5NzUxZjU1YmNkYjdkOWE2OTM0NWUwMmY2MmFhYTcwMzVkNmI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-10T08:44:34Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-10T08:44:34Z"}, "message": "Avoid andb %dil when optimizing for size.\n\nThe simple test case below has the unfortunate property that on x86_64,\nit is larger when compiled with -Os than when compiled with -O2.\n\nint foo(char x)\n{\n  return (x & 123) != 0;\n}\n\nThe issue is x86's complex instruction encoding, where andb $XX,%dil\nrequires more bytes than andl $XX,%edi.  This patch adds logic to\ni386.md's *testqi_1_maybe_si and *andqi_2_maybe_si define_insn patterns\nto prefer the shorter SImode alternative when optimizing for size.\n\n2022-05-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\t    Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (*testqi_1_maybe_si): Prefer shorter SImode\n\talternative when optimizing for size and the immediate operand is\n\tconst_0_to_127_operand.\n\t(*andqi_2_maybe_si): Likewise.\n\t* config/i386/predicates.md (const_0_to_127_operand): New predicate.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/and-1.c: New test case.", "tree": {"sha": "d09f6d7423de293ca33821a440e5b0663f6b1406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d09f6d7423de293ca33821a440e5b0663f6b1406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3c7873a61019e993ee8b79e3695722b13cf945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c7873a61019e993ee8b79e3695722b13cf945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3c7873a61019e993ee8b79e3695722b13cf945"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "f9c06ff302a4ddfe381b899d08989a8127c2c4d0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "patch": "@@ -9502,14 +9502,14 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:QI\n-\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%qm,*a,qm,r\")\n-\t    (match_operand:QI 1 \"nonmemory_operand\" \"q,n,n,n\"))\n+\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%qm,qm,r\")\n+\t    (match_operand:QI 1 \"nonmemory_operand\" \"q,n,n\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn,\n \t\t      CONST_INT_P (operands[1])\n \t\t      && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\"\n {\n-  if (which_alternative == 3)\n+  if (get_attr_mode (insn) == MODE_SI)\n     {\n       if (CONST_INT_P (operands[1]) && INTVAL (operands[1]) < 0)\n \toperands[1] = GEN_INT (INTVAL (operands[1]) & 0xff);\n@@ -9518,8 +9518,16 @@\n   return \"test{b}\\t{%1, %0|%0, %1}\";\n }\n   [(set_attr \"type\" \"test\")\n-   (set_attr \"mode\" \"QI,QI,QI,SI\")\n-   (set_attr \"pent_pair\" \"uv,uv,np,np\")])\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"SI\")\n+\t    (and (match_test \"optimize_insn_for_size_p ()\")\n+\t\t (and (match_operand 0 \"ext_QIreg_operand\")\n+\t\t      (match_operand 1 \"const_0_to_127_operand\")))\n+\t      (const_string \"SI\")\n+\t   ]\n+\t   (const_string \"QI\")))\n+   (set_attr \"pent_pair\" \"uv,np,np\")])\n \n (define_insn \"*test<mode>_1\"\n   [(set (reg FLAGS_REG)\n@@ -10110,7 +10118,7 @@\n \t\t\t CONST_INT_P (operands[2])\n \t\t\t && INTVAL (operands[2]) >= 0 ? CCNOmode : CCZmode)\"\n {\n-  if (which_alternative == 2)\n+  if (get_attr_mode (insn) == MODE_SI)\n     {\n       if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) < 0)\n         operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n@@ -10119,7 +10127,15 @@\n   return \"and{b}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI,QI,SI\")\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"SI\")\n+\t    (and (match_test \"optimize_insn_for_size_p ()\")\n+\t\t (and (match_operand 0 \"ext_QIreg_operand\")\n+\t\t      (match_operand 2 \"const_0_to_127_operand\")))\n+\t      (const_string \"SI\")\n+\t   ]\n+\t   (const_string \"QI\")))\n    ;; Potential partial reg stall on alternative 2.\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"2\")"}, {"sha": "848a79a8d163c9371275c1a80286f7a086e50a24", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "patch": "@@ -906,6 +906,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 63)\")))\n \n+;; Match 0 to 127.\n+(define_predicate \"const_0_to_127_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 127)\")))\n+\n ;; Match 0 to 255.\n (define_predicate \"const_0_to_255_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "11890d8fba365b5ae355275dcd27bde067dfc84c", "filename": "gcc/testsuite/gcc.target/i386/and-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fand-1.c?ref=5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-Os\" } */\n+\n+int foo(char x)\n+{\n+  return (x & 123) != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"%dil\" } } */"}]}