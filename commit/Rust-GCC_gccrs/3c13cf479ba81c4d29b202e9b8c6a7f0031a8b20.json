{"sha": "3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxM2NmNDc5YmE4MWM0ZDI5YjIwMmU5YjhjNmE3ZjAwMzFhOGIyMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T18:01:29Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-29T15:10:13Z"}, "message": "d: Generate Object class if it doesn't exist during TypeInfo emission (PR101672)\n\nHaving a stub will prevent errors from occuring when compiling D code\nwith an empty object.d.  Though if it were to actually be used\nimplicitly then an error should occur.\n\n\tPR d/101672\n\ngcc/d/ChangeLog:\n\n\t* typeinfo.cc (make_frontend_typeinfo): Generate Object class if it\n\tdoesn't exist.\n\t(check_typeinfo_type): Don't warn if there's no location.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr100967.d: Update test.\n\t* gdc.dg/pr101672.d: New test.", "tree": {"sha": "605405e79ec6a68398e9a0013b22fc5a5d7862c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605405e79ec6a68398e9a0013b22fc5a5d7862c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "a1f0543d58e0e9e26bd7ff6bdefa20465c6086a8", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "patch": "@@ -205,12 +205,30 @@ make_frontend_typeinfo (Identifier *ident, ClassDeclaration *base = NULL)\n   if (!object_module->_scope)\n     object_module->importAll (NULL);\n \n+  /* Object class doesn't exist, create a stub one that will cause an error if\n+     used.  */\n+  Loc loc = (object_module->md) ? object_module->md->loc : object_module->loc;\n+  if (!base)\n+    {\n+      if (!ClassDeclaration::object)\n+\t{\n+\t  ClassDeclaration *object\n+\t    = ClassDeclaration::create (loc, Identifier::idPool (\"Object\"),\n+\t\t\t\t\tNULL, NULL, true);\n+\t  object->parent = object_module;\n+\t  object->members = new Dsymbols;\n+\t  object->storage_class |= STCtemp;\n+\t}\n+\n+      base = ClassDeclaration::object;\n+    }\n+\n   /* Assignment of global typeinfo variables is managed by the ClassDeclaration\n      constructor, so only need to new the declaration here.  */\n-  Loc loc = (object_module->md) ? object_module->md->loc : object_module->loc;\n   ClassDeclaration *tinfo = ClassDeclaration::create (loc, ident, NULL, NULL,\n \t\t\t\t\t\t      true);\n   tinfo->parent = object_module;\n+  tinfo->members = new Dsymbols;\n   dsymbolSemantic (tinfo, object_module->_scope);\n   tinfo->baseClass = base;\n   /* This is a compiler generated class, and shouldn't be mistaken for being\n@@ -1316,6 +1334,7 @@ class TypeInfoDeclVisitor : public Visitor\n     tree type = tinfo_types[get_typeinfo_kind (tid->tinfo)];\n     gcc_assert (type != NULL_TREE);\n \n+    /* Built-in typeinfo will be referenced as one-only.  */\n     tid->csym = declare_extern_var (ident, type);\n     DECL_LANG_SPECIFIC (tid->csym) = build_lang_decl (tid);\n \n@@ -1400,7 +1419,7 @@ check_typeinfo_type (const Loc &loc, Scope *sc)\n       /* If TypeInfo has not been declared, warn about each location once.  */\n       static Loc warnloc;\n \n-      if (!warnloc.equals (loc))\n+      if (loc.filename && !warnloc.equals (loc))\n \t{\n \t  error_at (make_location_t (loc),\n \t\t    \"%<object.TypeInfo%> could not be found, \""}, {"sha": "bb83c299cedce83cee34e04b8d3b059cbfa5695a", "filename": "gcc/testsuite/gdc.dg/pr100967.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d?ref=3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "patch": "@@ -1,7 +1,7 @@\n // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100967\n // { dg-do compile }\n \n-module object; // { dg-error \"class object.TypeInfo missing or corrupt object.d\" }\n+module object;\n \n extern(C) int main()\n {"}, {"sha": "292fd761fb13088d4b59ae550e42e0e5ed19c02d", "filename": "gcc/testsuite/gdc.dg/pr101672.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101672.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101672.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101672.d?ref=3c13cf479ba81c4d29b202e9b8c6a7f0031a8b20", "patch": "@@ -0,0 +1,19 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101672\n+// { dg-do compile }\n+\n+module object;\n+\n+interface I101672\n+{\n+    static int i101672;\n+}\n+\n+class A101672 : I101672 // { dg-error \"class object.A101672 missing or corrupt object.d\" }\n+{\n+    static int a101672;\n+}\n+\n+class B101672 : A101672\n+{\n+    static int b101672;\n+}"}]}