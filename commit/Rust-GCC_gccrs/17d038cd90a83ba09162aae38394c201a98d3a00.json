{"sha": "17d038cd90a83ba09162aae38394c201a98d3a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkMDM4Y2Q5MGE4M2JhMDkxNjJhYWUzODM5NGMyMDFhOThkM2EwMA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2012-01-04T14:20:17Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2012-01-04T14:20:17Z"}, "message": "re PR fortran/50981 ([OOP] Wrong-code for scalarizing ELEMENTAL call with absent OPTIONAL argument)\n\n\t\n\tPR fortran/50981\n\t* trans-array.h (gfc_walk_elemental_function_args): New argument.\n\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Update call.\n\t* trans-stmt.c (gfc_trans_call): Ditto.\n\t* trans-array.c (gfc_walk_function_expr): Ditto.\n\t(gfc_walk_elemental_function_args): Get the dummy argument list\n\tif possible.  Check that the dummy and the actual argument are both\n\toptional, and set can_be_null_ref accordingly.\n\n\t* gfortran.dg/elemental_optional_args_2.f90: New test.\n\nFrom-SVN: r182875", "tree": {"sha": "ad722f059b14f5e1e54d719a3bdc2d8bb9ad7ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad722f059b14f5e1e54d719a3bdc2d8bb9ad7ede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d038cd90a83ba09162aae38394c201a98d3a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d038cd90a83ba09162aae38394c201a98d3a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d038cd90a83ba09162aae38394c201a98d3a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d038cd90a83ba09162aae38394c201a98d3a00/comments", "author": null, "committer": null, "parents": [{"sha": "0192ef204cbc1b80a1da59dae7b275cb7de67c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0192ef204cbc1b80a1da59dae7b275cb7de67c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0192ef204cbc1b80a1da59dae7b275cb7de67c81"}], "stats": {"total": 144, "additions": 138, "deletions": 6}, "files": [{"sha": "895d200dc84694ded1412b255322d7e880577d85", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -1,3 +1,14 @@\n+2012-01-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/50981\n+\t* trans-array.h (gfc_walk_elemental_function_args): New argument.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Update call.\n+\t* trans-stmt.c (gfc_trans_call): Ditto.\n+\t* trans-array.c (gfc_walk_function_expr): Ditto.\n+\t(gfc_walk_elemental_function_args): Get the dummy argument list\n+\tif possible.  Check that the dummy and the actual argument are both\n+\toptional, and set can_be_null_ref accordingly.\n+\n 2012-01-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/50981"}, {"sha": "494721ee476584185439fee0a74b9baf8c0eda6e", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -8307,19 +8307,45 @@ gfc_reverse_ss (gfc_ss * ss)\n }\n \n \n-/* Walk the arguments of an elemental function.  */\n+/* Walk the arguments of an elemental function.\n+   PROC_EXPR is used to check whether an argument is permitted to be absent.  If\n+   it is NULL, we don't do the check and the argument is assumed to be present.\n+*/\n \n gfc_ss *\n gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n-\t\t\t\t  gfc_ss_type type)\n+\t\t\t\t  gfc_expr *proc_expr, gfc_ss_type type)\n {\n+  gfc_formal_arglist *dummy_arg;\n   int scalar;\n   gfc_ss *head;\n   gfc_ss *tail;\n   gfc_ss *newss;\n \n   head = gfc_ss_terminator;\n   tail = NULL;\n+\n+  if (proc_expr)\n+    {\n+      gfc_ref *ref;\n+\n+      /* Normal procedure case.  */\n+      dummy_arg = proc_expr->symtree->n.sym->formal;\n+\n+      /* Typebound procedure case.  */\n+      for (ref = proc_expr->ref; ref; ref = ref->next)\n+\t{\n+\t  if (ref->type == REF_COMPONENT\n+\t      && ref->u.c.component->attr.proc_pointer\n+\t      && ref->u.c.component->ts.interface)\n+\t    dummy_arg = ref->u.c.component->ts.interface->formal;\n+\t  else\n+\t    dummy_arg = NULL;\n+\t}\n+    }\n+  else\n+    dummy_arg = NULL;\n+\n   scalar = 1;\n   for (; arg; arg = arg->next)\n     {\n@@ -8333,6 +8359,13 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n \t  gcc_assert (type == GFC_SS_SCALAR || type == GFC_SS_REFERENCE);\n \t  newss = gfc_get_scalar_ss (head, arg->expr);\n \t  newss->info->type = type;\n+\n+\t  if (dummy_arg != NULL\n+\t      && dummy_arg->sym->attr.optional\n+\t      && arg->expr->symtree\n+\t      && arg->expr->symtree->n.sym->attr.optional\n+\t      && arg->expr->ref == NULL)\n+\t    newss->info->data.scalar.can_be_null_ref = true;\n \t}\n       else\n \tscalar = 0;\n@@ -8344,6 +8377,9 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n           while (tail->next != gfc_ss_terminator)\n             tail = tail->next;\n         }\n+\n+      if (dummy_arg != NULL)\n+\tdummy_arg = dummy_arg->next;\n     }\n \n   if (scalar)\n@@ -8393,7 +8429,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n      by reference.  */\n   if (sym->attr.elemental || (comp && comp->attr.elemental))\n     return gfc_walk_elemental_function_args (ss, expr->value.function.actual,\n-\t\t\t\t\t     GFC_SS_REFERENCE);\n+\t\t\t\t\t     expr, GFC_SS_REFERENCE);\n \n   /* Scalar functions are OK as these are evaluated outside the scalarization\n      loop.  Pass back and let the caller deal with it.  */"}, {"sha": "19cfac52b7f7ac4da3e5a7b6161f77e3979bb364", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -73,7 +73,7 @@ gfc_ss *gfc_walk_subexpr (gfc_ss *, gfc_expr *);\n gfc_ss *gfc_walk_array_ref (gfc_ss *, gfc_expr *, gfc_ref * ref);\n /* Walk the arguments of an elemental function.  */\n gfc_ss *gfc_walk_elemental_function_args (gfc_ss *, gfc_actual_arglist *,\n-\t\t\t\t\t  gfc_ss_type);\n+\t\t\t\t\t  gfc_expr *, gfc_ss_type);\n /* Walk an intrinsic function.  */\n gfc_ss *gfc_walk_intrinsic_function (gfc_ss *, gfc_expr *,\n \t\t\t\t     gfc_intrinsic_sym *);"}, {"sha": "0caa59d0bb47a6c633b1f2b2aa76464e119ba9d8", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -7149,7 +7149,7 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n \n   if (isym->elemental)\n     return gfc_walk_elemental_function_args (ss, expr->value.function.actual,\n-\t\t\t\t\t     GFC_SS_SCALAR);\n+\t\t\t\t\t     NULL, GFC_SS_SCALAR);\n \n   if (expr->rank == 0)\n     return ss;"}, {"sha": "92f7f43729bf20c45ba6829c3e4c792ccfb2008e", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -348,7 +348,8 @@ gfc_trans_call (gfc_code * code, bool dependency_check,\n \n   ss = gfc_ss_terminator;\n   if (code->resolved_sym->attr.elemental)\n-    ss = gfc_walk_elemental_function_args (ss, code->ext.actual, GFC_SS_REFERENCE);\n+    ss = gfc_walk_elemental_function_args (ss, code->ext.actual,\n+\t\t\t\t\t   code->expr1, GFC_SS_REFERENCE);\n \n   /* Is not an elemental subroutine call with array valued arguments.  */\n   if (ss == gfc_ss_terminator)"}, {"sha": "0982a9f35081bde734fa9b58247ec5357181b527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -1,3 +1,7 @@\n+2012-01-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.dg/elemental_optional_args_2.f90: New test.\n+\n 2012-01-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/49693"}, {"sha": "c09384a4fed7cd605e33bda3dce52fd22ed9ac70", "filename": "gcc/testsuite/gfortran.dg/elemental_optional_args_2.f90", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d038cd90a83ba09162aae38394c201a98d3a00/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_2.f90?ref=17d038cd90a83ba09162aae38394c201a98d3a00", "patch": "@@ -0,0 +1,80 @@\n+! { dg-do run }\n+!\n+! PR fortran/50981\n+! The program used to dereference a NULL pointer when trying to access\n+! an optional dummy argument to be passed to an elemental subprocedure.\n+!\n+! Original testcase from Andriy Kostyuk <kostyuk@fias.uni-frankfurt.de>\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+  REAL(KIND=8), DIMENSION(2) :: aa, rr\n+\n+  aa(1)=10.\n+  aa(2)=11.\n+\n+\n+  ! WRITE(*,*) 'Both f1 and ff work if the optional parameter is present:'\n+\n+  rr=f1(aa,1)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr=0\n+  rr=ff(aa,1)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+  ! WRITE(*,*) 'But only f1 works if the optional parameter is absent:'\n+\n+  rr=0\n+  rr=f1(aa)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr = 0\n+  rr=ff(aa)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+CONTAINS \n+\n+    ELEMENTAL REAL(KIND=8) FUNCTION ff(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a\n+      INTEGER, INTENT(IN), OPTIONAL :: b\n+      REAL(KIND=8), DIMENSION(2) :: ac\n+      ac(1)=a\n+      ac(2)=a**2\n+      ff=SUM(gg(ac,b))\n+    END FUNCTION ff\n+\n+    ELEMENTAL REAL(KIND=8) FUNCTION f1(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a\n+      INTEGER, INTENT(IN), OPTIONAL :: b\n+      REAL(KIND=8), DIMENSION(2) :: ac\n+      ac(1)=a\n+      ac(2)=a**2\n+      f1=gg(ac(1),b)+gg(ac(2),b) ! This is the same as in ff, but without using the elemental feature of gg\n+    END FUNCTION f1\n+\n+    ELEMENTAL REAL(KIND=8) FUNCTION gg(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a\n+      INTEGER, INTENT(IN), OPTIONAL :: b\n+      INTEGER ::b1\n+      IF(PRESENT(b)) THEN\n+        b1=b\n+      ELSE\n+        b1=1\n+      ENDIF\n+      gg=a**b1\n+    END FUNCTION gg\n+\n+\n+END PROGRAM test\n+\n+"}]}