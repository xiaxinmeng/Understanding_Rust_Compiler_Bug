{"sha": "73ebece382667f8b2d999676ba77bfd66eb2d9cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlYmVjZTM4MjY2N2Y4YjJkOTk5Njc2YmE3N2JmZDY2ZWIyZDljZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-01-29T12:33:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-29T12:33:32Z"}, "message": "PR libstdc++/83658 fix exception-safety in std::any::emplace\n\n\tPR libstdc++/83658\n\t* include/std/any (any::__do_emplace): Only set _M_manager after\n\tconstructing the contained object.\n\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust dg-error line.\n\t* testsuite/20_util/any/modifiers/83658.cc: New test.\n\nFrom-SVN: r257141", "tree": {"sha": "a079e590c2a734aab467f5fcf75a53220fff903a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a079e590c2a734aab467f5fcf75a53220fff903a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73ebece382667f8b2d999676ba77bfd66eb2d9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ebece382667f8b2d999676ba77bfd66eb2d9cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ebece382667f8b2d999676ba77bfd66eb2d9cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ebece382667f8b2d999676ba77bfd66eb2d9cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27837e0c35badaa19b418d460c0cf69012bc9f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27837e0c35badaa19b418d460c0cf69012bc9f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27837e0c35badaa19b418d460c0cf69012bc9f07"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "b54b34ca7ef5ae7754fecea44a226c008db35d98", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=73ebece382667f8b2d999676ba77bfd66eb2d9cd", "patch": "@@ -1,3 +1,11 @@\n+2018-01-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/83658\n+\t* include/std/any (any::__do_emplace): Only set _M_manager after\n+\tconstructing the contained object.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust dg-error line.\n+\t* testsuite/20_util/any/modifiers/83658.cc: New test.\n+\n 2018-01-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81076"}, {"sha": "466b7cac129a6c986f0ecfb94a1326b887ded02c", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=73ebece382667f8b2d999676ba77bfd66eb2d9cd", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief A type-safe container of any type.\n-   * \n+   *\n    *  An @c any object's state is either empty or it stores a contained object\n    *  of CopyConstructible type.\n    */\n@@ -114,8 +114,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void __do_emplace(_Args&&... __args)\n       {\n \treset();\n-\t_M_manager = &_Mgr::_S_manage;\n         _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+\t_M_manager = &_Mgr::_S_manage;\n       }\n \n     /// Emplace with an object created from @p __il and @p __args as\n@@ -125,8 +125,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void __do_emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n \treset();\n-\t_M_manager = &_Mgr::_S_manage;\n         _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+\t_M_manager = &_Mgr::_S_manage;\n       }\n \n   public:\n@@ -272,8 +272,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   _Decay<_ValueType>, _Args&&...>::type\n       emplace(_Args&&... __args)\n       {\n-\t__do_emplace<_Decay<_ValueType>>\n-\t  (std::forward<_Args>(__args)...);\n+\t__do_emplace<_Decay<_ValueType>>(std::forward<_Args>(__args)...);\n \tany::_Arg __arg;\n \tthis->_M_manager(any::_Op_access, this, &__arg);\n \treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n@@ -288,8 +287,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   _Args&&...>::type\n       emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n-\t__do_emplace<_Decay<_ValueType>, _Up>\n-\t  (__il, std::forward<_Args>(__args)...);\n+\t__do_emplace<_Decay<_ValueType>, _Up>(__il,\n+\t\t\t\t\t      std::forward<_Args>(__args)...);\n \tany::_Arg __arg;\n \tthis->_M_manager(any::_Op_access, this, &__arg);\n \treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n@@ -624,7 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// @}\n-  \n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "50a9a674c7847530e1170f60c993920118dcaedd", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=73ebece382667f8b2d999676ba77bfd66eb2d9cd", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 461 }\n+  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 460 }\n }"}, {"sha": "7c5acc636c82573e487af2a76d80be7aa45cd68f", "filename": "libstdc++-v3/testsuite/20_util/any/modifiers/83658.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F83658.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ebece382667f8b2d999676ba77bfd66eb2d9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F83658.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F83658.cc?ref=73ebece382667f8b2d999676ba77bfd66eb2d9cd", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <any>\n+#include <new>\n+#include <testsuite_hooks.h>\n+\n+struct E : std::bad_alloc { };\n+\n+struct X\n+{\n+    X() = default;\n+    X(std::initializer_list<int>) { }\n+\n+    // Prevents small-object optimization:\n+    X(const X&) noexcept(false) { }\n+\n+    static void* operator new(std::size_t) { throw E{}; }\n+    static void operator delete(void*, std::size_t) noexcept { }\n+};\n+\n+void\n+test01()\n+{\n+  std::any a;\n+  try\n+  {\n+    a.emplace<X>();\n+    VERIFY(false);\n+  }\n+  catch (const E&)\n+  {\n+    VERIFY( !a.has_value() );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  std::any a;\n+  try\n+  {\n+    a.emplace<X>(std::initializer_list<int>{});\n+    VERIFY(false);\n+  }\n+  catch (const E&)\n+  {\n+    VERIFY( !a.has_value() );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}