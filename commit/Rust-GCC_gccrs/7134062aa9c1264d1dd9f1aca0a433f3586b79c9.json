{"sha": "7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzNDA2MmFhOWMxMjY0ZDFkZDlmMWFjYTBhNDMzZjM1ODZiNzljOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:21:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:21:49Z"}, "message": "[multiple changes]\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb, exp_ch3.adb, s-stposu.adb, a-undesu.ads,\n\ta-undesu.adb: Minor reformatting.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Check_Premature_Freezing): When building a dispatch\n\ttable, accept an unfrozen untagged component if it is an actual for a\n\tformal incomplete type.\n\t* a-convec.ads, a-convec.adb: Instantiate Ada.Iterator_Interfaces to\n\tprovide new iterator forms over vectors.\n\tIntroduce type Iterator in package body to implement operations of\n\tReversible_Iterator interface.\n\t* a-iteint.ads: Make package pure so it is usable with new container\n\tpackages, that are categorized Remote_Types.\n\nFrom-SVN: r178211", "tree": {"sha": "296882c1f43d6414faa2e072d78fa56df8926f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/296882c1f43d6414faa2e072d78fa56df8926f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/comments", "author": null, "committer": null, "parents": [{"sha": "544d960a12742dbe8c8e9a968764d4502b239a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544d960a12742dbe8c8e9a968764d4502b239a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544d960a12742dbe8c8e9a968764d4502b239a26"}], "stats": {"total": 425, "additions": 359, "deletions": 66}, "files": [{"sha": "53f5eee019e3291fc7855ae108751235c1394309", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -1,3 +1,20 @@\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb, exp_ch3.adb, s-stposu.adb, a-undesu.ads,\n+\ta-undesu.adb: Minor reformatting.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Check_Premature_Freezing): When building a dispatch\n+\ttable, accept an unfrozen untagged component if it is an actual for a\n+\tformal incomplete type.\n+\t* a-convec.ads, a-convec.adb: Instantiate Ada.Iterator_Interfaces to\n+\tprovide new iterator forms over vectors.\n+\tIntroduce type Iterator in package body to implement operations of\n+\tReversible_Iterator interface.\n+\t* a-iteint.ads: Make package pure so it is usable with new container\n+\tpackages, that are categorized Remote_Types.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* a-exexpr-gcc.adb, a-synbar.adb, sem_ch13.adb: Minor reformatting."}, {"sha": "c9c022d26a407e1efd348b22831f8a4e6a421f8d", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 158, "deletions": 6, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,19 @@ package body Ada.Containers.Vectors is\n    procedure Free is\n      new Ada.Unchecked_Deallocation (Elements_Type, Elements_Access);\n \n+   type Iterator is new\n+     Vector_Iterator_Interfaces.Reversible_Iterator with record\n+      Container : Vector_Access;\n+      Index     : Index_Type;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+   overriding function Next  (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+   overriding function Previous (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+\n    ---------\n    -- \"&\" --\n    ---------\n@@ -786,6 +799,12 @@ package body Ada.Containers.Vectors is\n       return (Container'Unchecked_Access, Index_Type'First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Index_Type'First);\n+   begin\n+      return C;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -937,11 +956,7 @@ package body Ada.Containers.Vectors is\n \n    function Has_Element (Position : Cursor) return Boolean is\n    begin\n-      if Position.Container = null then\n-         return False;\n-      end if;\n-\n-      return Position.Index <= Position.Container.Last;\n+      return Position /= No_Element;\n    end Has_Element;\n \n    ------------\n@@ -2018,6 +2033,23 @@ package body Ada.Containers.Vectors is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Index_Type'First);\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      It : constant Iterator :=\n+             (Container'Unchecked_Access, Start.Index);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -2031,6 +2063,12 @@ package body Ada.Containers.Vectors is\n       return (Container'Unchecked_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Object.Container.Last);\n+   begin\n+      return C;\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -2138,6 +2176,17 @@ package body Ada.Containers.Vectors is\n       return No_Element;\n    end Next;\n \n+   function Next (Object : Iterator; Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Index = Object.Container.Last then\n+         return  No_Element;\n+\n+      else\n+         return (Object.Container, Position.Index + 1);\n+      end if;\n+   end Next;\n+\n    ----------\n    -- Next --\n    ----------\n@@ -2206,6 +2255,16 @@ package body Ada.Containers.Vectors is\n       return No_Element;\n    end Previous;\n \n+   function Previous (Object : Iterator; Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Index > Index_Type'First then\n+         return (Object.Container, Position.Index - 1);\n+      else\n+         return No_Element;\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -2287,6 +2346,83 @@ package body Ada.Containers.Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+       (Element =>\n+          Position.Container.Elements.EA (Position.Index)'Access);\n+   end Constant_Reference;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      if (Position) > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element => Container.Elements.EA (Position)'Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+        (Element => Position.Container.Elements.EA (Position.Index)'Access);\n+   end Reference;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type is\n+   begin\n+      if Position > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element => Container.Elements.EA (Position)'Access);\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -3117,4 +3253,20 @@ package body Ada.Containers.Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Vectors;"}, {"sha": "b185a743b1b33616c85de8e6df6d50e0b9f4cfe4", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 94, "deletions": 31, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -32,8 +32,8 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Finalization;\n-private with Ada.Streams;\n-\n+with Ada.Streams;\n+with Ada.Iterator_Interfaces;\n generic\n    type Index_Type is range <>;\n    type Element_Type is private;\n@@ -43,22 +43,43 @@ generic\n package Ada.Containers.Vectors is\n    pragma Preelaborate;\n    pragma Remote_Types;\n+   use Ada.Streams;\n \n    subtype Extended_Index is Index_Type'Base\n      range Index_Type'First - 1 ..\n            Index_Type'Min (Index_Type'Base'Last - 1, Index_Type'Last) + 1;\n \n    No_Index : constant Extended_Index := Extended_Index'First;\n \n-   type Vector is tagged private;\n+   type Vector is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n    pragma Preelaborable_Initialization (Vector);\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n+   No_Element : constant Cursor;\n \n-   Empty_Vector : constant Vector;\n+   function Has_Element (Position : Cursor) return Boolean;\n \n-   No_Element : constant Cursor;\n+   procedure Read\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : Cursor);\n+   for Cursor'Write use Write;\n+\n+   package Vector_Iterator_Interfaces is new\n+      Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n+   Empty_Vector : constant Vector;\n \n    overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n@@ -133,8 +154,55 @@ package Ada.Containers.Vectors is\n       Position  : Cursor;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n-   procedure Move (Target : in out Vector; Source : in out Vector);\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n \n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type;\n+\n+   procedure Move (Target : in out Vector; Source : in out Vector);\n    procedure Insert\n      (Container : in out Vector;\n       Before    : Extended_Index;\n@@ -278,8 +346,6 @@ package Ada.Containers.Vectors is\n      (Container : Vector;\n       Item      : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    procedure Iterate\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n@@ -288,6 +354,12 @@ package Ada.Containers.Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Forward_Iterator'class;\n+\n    generic\n       with function \"<\" (Left, Right : Element_Type) return Boolean is <>;\n    package Generic_Sorting is\n@@ -315,7 +387,7 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n-   type Elements_Array is array (Index_Type range <>) of Element_Type;\n+   type Elements_Array is array (Index_Type range <>) of aliased Element_Type;\n    function \"=\" (L, R : Elements_Array) return Boolean is abstract;\n \n    type Elements_Type (Last : Index_Type) is limited record\n@@ -333,11 +405,13 @@ private\n       Lock     : Natural := 0;\n    end record;\n \n-   overriding procedure Adjust (Container : in out Vector);\n-\n-   overriding procedure Finalize (Container : in out Vector);\n+   type Vector_Access is access constant Vector;\n+   for Vector_Access'Storage_Size use 0;\n \n-   use Ada.Streams;\n+   type Cursor is record\n+      Container   : Vector_Access;\n+      Index       : Index_Type := Index_Type'First;\n+   end record;\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n@@ -351,28 +425,17 @@ private\n \n    for Vector'Read use Read;\n \n-   type Vector_Access is access constant Vector;\n-   for Vector_Access'Storage_Size use 0;\n-\n-   type Cursor is record\n-      Container : Vector_Access;\n-      Index     : Index_Type := Index_Type'First;\n-   end record;\n-\n-   procedure Write\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : Cursor);\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n \n-   for Cursor'Write use Write;\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n \n-   procedure Read\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : out Cursor);\n+   overriding procedure Adjust (Container : in out Vector);\n \n-   for Cursor'Read use Read;\n+   overriding procedure Finalize (Container : in out Vector);\n \n+   No_Element   : constant Cursor := Cursor'(null, Index_Type'First);\n    Empty_Vector : constant Vector := (Controlled with null, No_Index, 0, 0);\n \n-   No_Element : constant Cursor := Cursor'(null, Index_Type'First);\n-\n end Ada.Containers.Vectors;"}, {"sha": "c6aaa768147deaba85bd1dc51a73d2e5c961a079", "filename": "gcc/ada/a-iteint.ads", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-iteint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-iteint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-iteint.ads?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -6,32 +6,45 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT.  In accordance with the copyright of that document, you can freely --\n--- copy and modify this specification,  provided that if you redistribute a --\n--- modified version,  any changes that you have made are clearly indicated. --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n generic\n-   type Cursor is private;\n-   No_Element : Cursor;\n-   pragma Unreferenced (No_Element);\n-\n+   type Cursor;\n+   with function Has_Element (Position : Cursor) return Boolean;\n package Ada.Iterator_Interfaces is\n-   type Forward_Iterator is limited interface;\n+   pragma Pure;\n \n+   type Forward_Iterator is limited interface;\n    function First (Object : Forward_Iterator) return Cursor is abstract;\n-\n    function Next\n-     (Object : Forward_Iterator;\n+     (Object   : Forward_Iterator;\n       Position : Cursor) return Cursor is abstract;\n-\n    type Reversible_Iterator is limited interface and Forward_Iterator;\n \n    function Last (Object : Reversible_Iterator) return Cursor is abstract;\n-\n    function Previous\n-     (Object : Reversible_Iterator;\n+     (Object   : Reversible_Iterator;\n       Position : Cursor) return Cursor is abstract;\n end Ada.Iterator_Interfaces;"}, {"sha": "d2bd292e1458c798b2c3e631f8bd2ec3381acc41", "filename": "gcc/ada/a-undesu.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-undesu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-undesu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-undesu.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -8,15 +8,27 @@\n --                                                                          --\n --            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT.  In accordance with the copyright of that document, you can freely --\n--- copy and modify this specification,  provided that if you redistribute a --\n--- modified version,  any changes that you have made are clearly indicated. --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  ??? What is the header version here, see a-uncdea.adb. No GPL?\n-\n with System.Storage_Pools.Subpools,\n      System.Storage_Pools.Subpools.Finalization;\n "}, {"sha": "666572530dd2b1a347b37f0e915e469578431bc2", "filename": "gcc/ada/a-undesu.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-undesu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fa-undesu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-undesu.ads?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -6,17 +6,13 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n---                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT.  In accordance with the copyright of that document, you can freely --\n -- copy and modify this specification,  provided that if you redistribute a --\n -- modified version,  any changes that you have made are clearly indicated. --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  ??? What is the header version here, see a-uncdea.ads. No GPL?\n-\n with System.Storage_Pools.Subpools;\n \n procedure Ada.Unchecked_Deallocate_Subpool"}, {"sha": "a7d382bf3d7a1c7484dca95a06e89e4f409beca7", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -5483,7 +5483,7 @@ package body Exp_Ch3 is\n                end if;\n \n             --  ??? Now that masters acts as heterogeneous lists, it might be\n-            --  worthed to revisit the global master approach.\n+            --  worthwhile to revisit the global master approach.\n \n             elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n               and then Needs_Finalization (Directly_Designated_Type (Comp_Typ))"}, {"sha": "3df1224e92b5577d1f16d51186b2e2c814b608f1", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -3698,6 +3698,46 @@ package body Exp_Disp is\n          Typ         : Entity_Id)\n       is\n          Comp : Entity_Id;\n+         function Is_Actual_For_Formal_Incomplete_Type (T : Entity_Id)\n+            return Boolean;\n+         --  In Ada2012, if a nested generic has an incomplete formal type, the\n+         --  actual may be (and usually is) a private type whose completion\n+         --  appears later. It is safe to build the dispatch table in this\n+         --  case, gigi will have full views available.\n+\n+         ------------------------------------------\n+         -- Is_Actual_For_Formal_Incomplete_Type --\n+         ------------------------------------------\n+\n+         function Is_Actual_For_Formal_Incomplete_Type (T : Entity_Id)\n+            return Boolean\n+         is\n+            Gen_Par : Entity_Id;\n+            F       : Node_Id;\n+         begin\n+            if not Is_Generic_Instance (Current_Scope)\n+              or else not Used_As_Generic_Actual (T)\n+            then\n+               return False;\n+\n+            else\n+               Gen_Par := Generic_Parent (Parent (Current_Scope));\n+            end if;\n+\n+            F :=\n+              First\n+                (Generic_Formal_Declarations\n+                     (Unit_Declaration_Node (Gen_Par)));\n+            while Present (F) loop\n+               if Ekind (Defining_Identifier (F)) = E_Incomplete_Type then\n+                  return True;\n+               end if;\n+\n+               Next (F);\n+            end loop;\n+\n+            return False;\n+         end Is_Actual_For_Formal_Incomplete_Type;\n \n       begin\n          if Present (N)\n@@ -3720,6 +3760,8 @@ package body Exp_Disp is\n             if not Is_Tagged_Type (Typ)\n               and then Present (Comp)\n               and then not Is_Frozen (Comp)\n+              and then\n+               not Is_Actual_For_Formal_Incomplete_Type (Comp)\n             then\n                Error_Msg_Sloc := Sloc (Subp);\n                Error_Msg_Node_2 := Subp;"}, {"sha": "e1ec4239e2e09aed67f9705f5ec9369217e1a286", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -8,10 +8,6 @@\n --                                                                          --\n --            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n -- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n@@ -259,6 +255,7 @@ package body System.Storage_Pools.Subpools is\n          --  object. This operation effectively hides the list header.\n \n          Addr := N_Addr + Header_And_Padding;\n+\n       else\n          Addr := N_Addr;\n       end if;\n@@ -346,6 +343,7 @@ package body System.Storage_Pools.Subpools is\n          --  hidden list header.\n \n          N_Size := Storage_Size + Header_And_Padding;\n+\n       else\n          N_Addr := Addr;\n          N_Size := Storage_Size;"}, {"sha": "165ce9f849bd57817e0fb5bece2e54747c3b7723", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134062aa9c1264d1dd9f1aca0a433f3586b79c9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "patch": "@@ -2348,7 +2348,7 @@ package body Sem_Ch6 is\n          --  the proper back-annotations.\n \n          if not Is_Frozen (Spec_Id)\n-           and then (Expander_Active or else ASIS_Mode)\n+           and then (Expander_Active or ASIS_Mode)\n          then\n             --  Force the generation of its freezing node to ensure proper\n             --  management of access types in the backend."}]}