{"sha": "ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmNTYzODZjMTRiYzZkYjVlNmQ1ZWI0MWU1OGRhODI1M2I2MTAyYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-14T08:32:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-14T08:32:25Z"}, "message": "tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Reset info at start.\n\n2015-10-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n\tReset info at start.\n\t(vect_analyze_group_access_1): Add debug print.\n\t* tree-vect-loop.c (vect_get_single_scalar_iteration_cost): Rename ...\n\t(vect_compute_single_scalar_iteration_cost): ... to this.\n\t(vect_analyze_loop_2): Adjust.\n\t* tree-vect-slp.c (struct _slp_oprnd_info): Move from ...\n\t* tree-vectorizer.h: ... here.\n\t(add_stmt_info_to_vec): Remove.\n\t* tree-vect-stmts.c (record_stmt_cost): Inline add_stmt_info_to_vec.\n\nFrom-SVN: r228806", "tree": {"sha": "61b148260abf3b7df84bf93f6cb3b0ccc38fe1e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b148260abf3b7df84bf93f6cb3b0ccc38fe1e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac8a1965363534d831c6b784bd69aa18b846402a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8a1965363534d831c6b784bd69aa18b846402a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8a1965363534d831c6b784bd69aa18b846402a"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "2dcb640a11fd82bb2129587dc23acab25a9d36ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -1,3 +1,16 @@\n+2015-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tReset info at start.\n+\t(vect_analyze_group_access_1): Add debug print.\n+\t* tree-vect-loop.c (vect_get_single_scalar_iteration_cost): Rename ...\n+\t(vect_compute_single_scalar_iteration_cost): ... to this.\n+\t(vect_analyze_loop_2): Adjust.\n+\t* tree-vect-slp.c (struct _slp_oprnd_info): Move from ...\n+\t* tree-vectorizer.h: ... here.\n+\t(add_stmt_info_to_vec): Remove.\n+\t* tree-vect-stmts.c (record_stmt_cost): Inline add_stmt_info_to_vec.\n+\n 2015-10-14  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* targhooks.c (default_target_option_pragma_parse): Do not warn if"}, {"sha": "c3db22fa87f435bd90c5e7d845b2fbf2f0ec0505", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -1352,6 +1352,10 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_enhance_data_refs_alignment ===\\n\");\n \n+  /* Reset data so we can safely be called multiple times.  */\n+  LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo).truncate (0);\n+  LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) = 0;\n+\n   /* While cost model enhancements are expected in the future, the high level\n      view of the code at this time is as follows:\n \n@@ -2151,6 +2155,10 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n                   return false;\n                 }\n \n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"Two or more load stmts share the same dr.\\n\");\n+\n               /* For load use the same data-ref load.  */\n               GROUP_SAME_DR_STMT (vinfo_for_stmt (next)) = prev;\n "}, {"sha": "e74fe9a8b5b357ed275db712097e1e201db9ebf0", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -1043,7 +1043,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n \n /* Calculate the cost of one scalar iteration of the loop.  */\n static void\n-vect_get_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n+vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n@@ -1739,7 +1739,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n     }\n \n   /* Compute the scalar iteration cost.  */\n-  vect_get_single_scalar_iteration_cost (loop_vinfo);\n+  vect_compute_single_scalar_iteration_cost (loop_vinfo);\n \n   /* This pass will decide on using loop versioning and/or loop peeling in\n      order to enhance the alignment of data references in the loop.  */"}, {"sha": "3cb06c51692cc2616a0634c902112e021866ab93", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -135,6 +135,23 @@ vect_create_new_slp_node (vec<gimple *> scalar_stmts)\n }\n \n \n+/* This structure is used in creation of an SLP tree.  Each instance\n+   corresponds to the same operand in a group of scalar stmts in an SLP\n+   node.  */\n+typedef struct _slp_oprnd_info\n+{\n+  /* Def-stmts for the operands.  */\n+  vec<gimple *> def_stmts;\n+  /* Information about the first statement, its vector def-type, type, the\n+     operand itself in case it's constant, and an indication if it's a pattern\n+     stmt.  */\n+  enum vect_def_type first_dt;\n+  tree first_op_type;\n+  bool first_pattern;\n+  bool second_pattern;\n+} *slp_oprnd_info;\n+\n+\n /* Allocate operands info for NOPS operands, and GROUP_SIZE def-stmts for each\n    operand.  */\n static vec<slp_oprnd_info> "}, {"sha": "337fab04af37f6389900d23bdf05e73df0a56d44", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -94,12 +94,12 @@ record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n   if (body_cost_vec)\n     {\n       tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n-      add_stmt_info_to_vec (body_cost_vec, count, kind,\n-\t\t\t    stmt_info ? STMT_VINFO_STMT (stmt_info) : NULL,\n-\t\t\t    misalign);\n+      stmt_info_for_cost si = { count, kind,\n+\t\t\t        stmt_info ? STMT_VINFO_STMT (stmt_info) : NULL,\n+\t\t\t\tmisalign };\n+      body_cost_vec->safe_push (si);\n       return (unsigned)\n \t(builtin_vectorization_cost (kind, vectype, misalign) * count);\n-\t \n     }\n   else\n     return add_stmt_cost (stmt_info->vinfo->target_cost_data,"}, {"sha": "945089930dc1bbd77703d20c90763a739e0d8799", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf56386c14bc6db5e6d5eb41e58da8253b6102a/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=ddf56386c14bc6db5e6d5eb41e58da8253b6102a", "patch": "@@ -73,21 +73,8 @@ struct stmt_info_for_cost {\n   int misalign;\n };\n \n-\n typedef vec<stmt_info_for_cost> stmt_vector_for_cost;\n \n-static inline void\n-add_stmt_info_to_vec (stmt_vector_for_cost *stmt_cost_vec, int count,\n-\t\t      enum vect_cost_for_stmt kind, gimple *stmt, int misalign)\n-{\n-  stmt_info_for_cost si;\n-  si.count = count;\n-  si.kind = kind;\n-  si.stmt = stmt;\n-  si.misalign = misalign;\n-  stmt_cost_vec->safe_push (si);\n-}\n-\n /************************************************************************\n   SLP\n  ************************************************************************/\n@@ -145,22 +132,6 @@ typedef struct _slp_instance {\n #define SLP_TREE_LOAD_PERMUTATION(S)             (S)->load_permutation\n #define SLP_TREE_TWO_OPERATORS(S)\t\t (S)->two_operators\n \n-/* This structure is used in creation of an SLP tree.  Each instance\n-   corresponds to the same operand in a group of scalar stmts in an SLP\n-   node.  */\n-typedef struct _slp_oprnd_info\n-{\n-  /* Def-stmts for the operands.  */\n-  vec<gimple *> def_stmts;\n-  /* Information about the first statement, its vector def-type, type, the\n-     operand itself in case it's constant, and an indication if it's a pattern\n-     stmt.  */\n-  enum vect_def_type first_dt;\n-  tree first_op_type;\n-  bool first_pattern;\n-  bool second_pattern;\n-} *slp_oprnd_info;\n-\n \n \n /* This struct is used to store the information of a data reference,"}]}