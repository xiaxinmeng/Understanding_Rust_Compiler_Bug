{"sha": "255388b8123b714d4bd91c6745dd811f9b4290fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1Mzg4YjgxMjNiNzE0ZDRiZDkxYzY3NDVkZDgxMWY5YjQyOTBmYg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-07-17T10:16:21Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-07-17T10:16:21Z"}, "message": "re PR fortran/66035 (gfortran ICE segfault)\n\ngcc/fortran/ChangeLog:\n\n2015-07-17  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/66035\n\t* trans-expr.c (alloc_scalar_allocatable_for_subcomponent_assignment):\n\tCompute the size to allocate for class and derived type objects\n\tcorreclty.\n\t(gfc_trans_subcomponent_assign): Only allocate memory for a\n\tcomponent when the object to assign is not an allocatable class\n\tobject (the memory is already present for allocatable class objects).\n\tFurthermore use copy_class_to_class for assigning the rhs to the\n\tcomponent (may happen for dummy class objects on the rhs).\n\n\ngcc/testsuite/ChangeLog:\n\n2015-07-17  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/66035\n\t* gfortran.dg/structure_constructor_13.f03: New test.\n\nFrom-SVN: r225928", "tree": {"sha": "49a9263a209920a6310307f5dd0042055857250c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49a9263a209920a6310307f5dd0042055857250c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255388b8123b714d4bd91c6745dd811f9b4290fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255388b8123b714d4bd91c6745dd811f9b4290fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255388b8123b714d4bd91c6745dd811f9b4290fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255388b8123b714d4bd91c6745dd811f9b4290fb/comments", "author": null, "committer": null, "parents": [{"sha": "0e1f8c6a90834987f63f911a86d78e40d5577e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1f8c6a90834987f63f911a86d78e40d5577e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1f8c6a90834987f63f911a86d78e40d5577e80"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "33b8cbbad72df4469050957c513a7fa6ebbdba79", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=255388b8123b714d4bd91c6745dd811f9b4290fb", "patch": "@@ -1,3 +1,15 @@\n+2015-07-17  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/66035\n+\t* trans-expr.c (alloc_scalar_allocatable_for_subcomponent_assignment):\n+\tCompute the size to allocate for class and derived type objects\n+\tcorreclty.\n+\t(gfc_trans_subcomponent_assign): Only allocate memory for a\n+\tcomponent when the object to assign is not an allocatable class\n+\tobject (the memory is already present for allocatable class objects).\n+\tFurthermore use copy_class_to_class for assigning the rhs to the\n+\tcomponent (may happen for dummy class objects on the rhs).\n+\n 2015-07-17  Mikael Morin  <mikael@gcc.gnu.org>\n \t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n "}, {"sha": "89b4dfd3443589a34eb268ff7525c6d02a20f716", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=255388b8123b714d4bd91c6745dd811f9b4290fb", "patch": "@@ -6969,6 +6969,29 @@ alloc_scalar_allocatable_for_subcomponent_assignment (stmtblock_t *block,\n \t\t\t\t       TREE_TYPE (tmp), tmp,\n \t\t\t\t       fold_convert (TREE_TYPE (tmp), size));\n     }\n+  else if (cm->ts.type == BT_CLASS)\n+    {\n+      gcc_assert (expr2->ts.type == BT_CLASS || expr2->ts.type == BT_DERIVED);\n+      if (expr2->ts.type == BT_DERIVED)\n+\t{\n+\t  tmp = gfc_get_symbol_decl (expr2->ts.u.derived);\n+\t  size = TYPE_SIZE_UNIT (tmp);\n+\t}\n+      else\n+\t{\n+\t  gfc_expr *e2vtab;\n+\t  gfc_se se;\n+\t  e2vtab = gfc_find_and_cut_at_last_class_ref (expr2);\n+\t  gfc_add_vptr_component (e2vtab);\n+\t  gfc_add_size_component (e2vtab);\n+\t  gfc_init_se (&se, NULL);\n+\t  gfc_conv_expr (&se, e2vtab);\n+\t  gfc_add_block_to_block (block, &se.pre);\n+\t  size = fold_convert (size_type_node, se.expr);\n+\t  gfc_free_expr (e2vtab);\n+\t}\n+      size_in_bytes = size;\n+    }\n   else\n     {\n       /* Otherwise use the length in bytes of the rhs.  */\n@@ -7096,7 +7119,8 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr,\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   else if (init && (cm->attr.allocatable\n-\t   || (cm->ts.type == BT_CLASS && CLASS_DATA (cm)->attr.allocatable)))\n+\t   || (cm->ts.type == BT_CLASS && CLASS_DATA (cm)->attr.allocatable\n+\t       && expr->ts.type != BT_CLASS)))\n     {\n       /* Take care about non-array allocatable components here.  The alloc_*\n \t routine below is motivated by the alloc_scalar_allocatable_for_"}, {"sha": "1311bf2b5f2dff6095b5313e7df388d6af1c1972", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=255388b8123b714d4bd91c6745dd811f9b4290fb", "patch": "@@ -1,3 +1,8 @@\n+2015-07-17  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/66035\n+\t* gfortran.dg/structure_constructor_13.f03: New test.\n+\n 2015-07-17  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/61831"}, {"sha": "c74e325ce895d413e5dfb46f1b6e28506ebf6d1b", "filename": "gcc/testsuite/gfortran.dg/structure_constructor_13.f03", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_13.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255388b8123b714d4bd91c6745dd811f9b4290fb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_13.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_13.f03?ref=255388b8123b714d4bd91c6745dd811f9b4290fb", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! Contributed by Melven Roehrig-Zoellner  <Melven.Roehrig-Zoellner@DLR.de>\n+! PR fortran/66035\n+\n+program test_pr66035\n+  type t\n+  end type t\n+  type w\n+    class(t), allocatable :: c\n+  end type w\n+\n+  type(t) :: o\n+\n+  call test(o)\n+contains\n+  subroutine test(o)\n+    class(t), intent(inout) :: o\n+    type(w), dimension(:), allocatable :: list\n+\n+    select type (o)\n+      class is (t)\n+        list = [w(o)] ! This caused an ICE\n+      class default\n+        call abort()\n+    end select\n+  end subroutine\n+end program"}]}