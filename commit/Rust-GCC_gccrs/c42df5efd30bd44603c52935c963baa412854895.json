{"sha": "c42df5efd30bd44603c52935c963baa412854895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyZGY1ZWZkMzBiZDQ0NjAzYzUyOTM1Yzk2M2JhYTQxMjg1NDg5NQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2012-08-22T02:21:17Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2012-08-22T02:21:17Z"}, "message": "mep.h (REG_CLASS_FROM_CONSTRAINT): Delete.\n\n\t* config/mep/mep.h (REG_CLASS_FROM_CONSTRAINT): Delete.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(CONSTRAINT_LEN, EXTRA_CONSTRAINT): Delete.\n\t* config/mep/mep.c (mep_reg_class_from_constraint): Delete.\n\t(mep_const_ok_for_letter_p, mep_extra_constraint): Delete.\n\t* config/mep/mep-protos.h (mep_reg_class_from_constraint): Delete.\n\t(mep_const_ok_for_letter_p, mep_extra_constraint): Delete.\n\nFrom-SVN: r190584", "tree": {"sha": "e858c0f6a4ea4776e8b9d2e37064daad7521a27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e858c0f6a4ea4776e8b9d2e37064daad7521a27e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42df5efd30bd44603c52935c963baa412854895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42df5efd30bd44603c52935c963baa412854895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42df5efd30bd44603c52935c963baa412854895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42df5efd30bd44603c52935c963baa412854895/comments", "author": null, "committer": null, "parents": [{"sha": "fd76ab9b083a312b7a584ef590077c4c18fcf641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd76ab9b083a312b7a584ef590077c4c18fcf641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd76ab9b083a312b7a584ef590077c4c18fcf641"}], "stats": {"total": 154, "additions": 10, "deletions": 144}, "files": [{"sha": "10af724eae665808a4f80dfd663ba4bf69f2a604", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42df5efd30bd44603c52935c963baa412854895/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42df5efd30bd44603c52935c963baa412854895/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c42df5efd30bd44603c52935c963baa412854895", "patch": "@@ -1,3 +1,13 @@\n+2012-08-21  Nathan Froyd  <froydnj@gcc.gnu.org>\n+\n+\t* config/mep/mep.h (REG_CLASS_FROM_CONSTRAINT): Delete.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(CONSTRAINT_LEN, EXTRA_CONSTRAINT): Delete.\n+\t* config/mep/mep.c (mep_reg_class_from_constraint): Delete.\n+\t(mep_const_ok_for_letter_p, mep_extra_constraint): Delete.\n+\t* config/mep/mep-protos.h (mep_reg_class_from_constraint): Delete.\n+\t(mep_const_ok_for_letter_p, mep_extra_constraint): Delete.\n+\n 2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (cmpeqdi_t, cmpgtdi_t, cmpgedi_t, cmpgeudi_t,"}, {"sha": "f0f349687411316b931062ebb865f4b76beecce6", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=c42df5efd30bd44603c52935c963baa412854895", "patch": "@@ -20,9 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern int mep_regno_reg_class (int);\n-extern int mep_reg_class_from_constraint (int, const char *);\n-extern bool mep_const_ok_for_letter_p (HOST_WIDE_INT, int);\n-extern bool mep_extra_constraint (rtx, int);\n extern rtx mep_mulr_source (rtx, rtx, rtx, rtx);\n extern bool mep_reuse_lo_p (rtx, rtx, rtx, bool);\n extern bool mep_use_post_modify_p (rtx, rtx, rtx);"}, {"sha": "5089e033316557e9257a35f7743f75ef8ad544e7", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=c42df5efd30bd44603c52935c963baa412854895", "patch": "@@ -596,132 +596,6 @@ mep_regno_reg_class (int regno)\n   return NO_REGS;\n }\n \n-#if 0\n-int\n-mep_reg_class_from_constraint (int c, const char *str)\n-{\n-  switch (c)\n-    {\n-    case 'a':\n-      return SP_REGS;\n-    case 'b':\n-      return TP_REGS;\n-    case 'c':\n-      return CONTROL_REGS;\n-    case 'd':\n-      return HILO_REGS;\n-    case 'e':\n-      {\n-\tswitch (str[1])\n-\t  {\n-\t  case 'm':\n-\t    return LOADABLE_CR_REGS;\n-\t  case 'x':\n-\t    return mep_have_copro_copro_moves_p ? CR_REGS : NO_REGS;\n-\t  case 'r':\n-\t    return mep_have_core_copro_moves_p ? CR_REGS : NO_REGS;\n-\t  default:\n-\t    return NO_REGS;\n-\t  }\n-      }\n-    case 'h':\n-      return HI_REGS;\n-    case 'j':\n-      return RPC_REGS;\n-    case 'l':\n-      return LO_REGS;\n-    case 't':\n-      return TPREL_REGS;\n-    case 'v':\n-      return GP_REGS;\n-    case 'x':\n-      return CR_REGS;\n-    case 'y':\n-      return CCR_REGS;\n-    case 'z':\n-      return R0_REGS;\n-\n-    case 'A':\n-    case 'B':\n-    case 'C':\n-    case 'D':\n-      {\n-\tenum reg_class which = c - 'A' + USER0_REGS;\n-\treturn (reg_class_size[which] > 0 ? which : NO_REGS);\n-      }\n-\n-    default:\n-      return NO_REGS;\n-    }\n-}\n-\n-bool\n-mep_const_ok_for_letter_p (HOST_WIDE_INT value, int c)\n-{\n-  switch (c)\n-    {\n-      case 'I': return value >= -32768 && value <      32768;\n-      case 'J': return value >=      0 && value <      65536;\n-      case 'K': return value >=      0 && value < 0x01000000;\n-      case 'L': return value >=    -32 && value <         32;\n-      case 'M': return value >=      0 && value <         32;\n-      case 'N': return value >=      0 && value <         16;\n-      case 'O':\n-\tif (value & 0xffff)\n-\t  return false;\n-\treturn value >= -2147483647-1 && value <= 2147483647;\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-bool\n-mep_extra_constraint (rtx value, int c)\n-{\n-  encode_pattern (value);\n-\n-  switch (c)\n-    {\n-    case 'R':\n-      /* For near symbols, like what call uses.  */\n-      if (GET_CODE (value) == REG)\n-\treturn 0;\n-      return mep_call_address_operand (value, GET_MODE (value));\n-\n-    case 'S':\n-      /* For signed 8-bit immediates.  */\n-      return (GET_CODE (value) == CONST_INT\n-\t      && INTVAL (value) >= -128\n-\t      && INTVAL (value) <= 127);\n-\n-    case 'T':\n-      /* For tp/gp relative symbol values.  */\n-      return (RTX_IS (\"u3s\") || RTX_IS (\"u2s\")\n-              || RTX_IS (\"+u3si\") || RTX_IS (\"+u2si\"));\n-\n-    case 'U':\n-      /* Non-absolute memories.  */\n-      return GET_CODE (value) == MEM && ! CONSTANT_P (XEXP (value, 0));\n-\n-    case 'W':\n-      /* %hi(sym) */\n-      return RTX_IS (\"Hs\");\n-\n-    case 'Y':\n-      /* Register indirect.  */\n-      return RTX_IS (\"mr\");\n-\n-    case 'Z':\n-      return mep_section_tag (value) == 'c' && RTX_IS (\"ms\");\n-    }\n-\n-  return false;\n-}\n-#endif\n-\n-#undef PASS\n-#undef FAIL\n-\n static bool\n const_in_range (rtx x, int minv, int maxv)\n {"}, {"sha": "9a382e68185b471ac45f3b66077aab34cc34289d", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42df5efd30bd44603c52935c963baa412854895/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=c42df5efd30bd44603c52935c963baa412854895", "patch": "@@ -408,11 +408,6 @@ enum reg_class\n #define BASE_REG_CLASS GENERAL_REGS\n #define INDEX_REG_CLASS GENERAL_REGS\n \n-#if 0\n-#define REG_CLASS_FROM_CONSTRAINT(CHAR, STRING) \\\n-\tmep_reg_class_from_constraint (CHAR, STRING)\n-#endif\n-\n #define REGNO_OK_FOR_BASE_P(NUM) (GR_REGNO_P (NUM) \\\n \t|| (NUM) == ARG_POINTER_REGNUM \\\n \t|| (NUM) >= FIRST_PSEUDO_REGISTER)\n@@ -428,16 +423,6 @@ enum reg_class\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\\n \tmep_secondary_memory_needed (CLASS1, CLASS2, MODE)\n \n-#if 0\n-#define CONST_OK_FOR_LETTER_P(VALUE, C) mep_const_ok_for_letter_p (VALUE, C)\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) 0\n-\n-#define CONSTRAINT_LEN(C, STR) \\\n-\t((C) == 'e' ? 2 : DEFAULT_CONSTRAINT_LEN (C, STR))\n-#define EXTRA_CONSTRAINT(VALUE, C) mep_extra_constraint (VALUE, C)\n-#endif\n-\n #define WANT_GCC_DECLARATIONS\n #include \"mep-intrin.h\"\n #undef WANT_GCC_DECLARATIONS"}]}