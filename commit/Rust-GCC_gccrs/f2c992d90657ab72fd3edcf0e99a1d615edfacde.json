{"sha": "f2c992d90657ab72fd3edcf0e99a1d615edfacde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjOTkyZDkwNjU3YWI3MmZkM2VkY2YwZTk5YTFkNjE1ZWRmYWNkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T07:51:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T07:51:56Z"}, "message": "[multiple changes]\n\n2012-08-06  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads: Define Aspect_Id_Exclude_No_Aspect.\n\t* par-ch13.adb, restrict.adb: Use Aspect_Id_Exclude_No_Aspect to\n\tsimplify code.\n\n2012-08-06  Yannick Moy  <moy@adacore.com>\n\n\t* gnat-style.texi: Update style guide for declarations.\n\n2012-08-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): In the case for 'Old,\n\tskip a special expansion which is not needed in Alfa mode.\n\n2012-08-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Do not perform\n\tan expansion of the iterator in Alfa mode.\n\nFrom-SVN: r190159", "tree": {"sha": "d291c113a8fc760226d95d8f4abb9bcb435b7a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d291c113a8fc760226d95d8f4abb9bcb435b7a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c992d90657ab72fd3edcf0e99a1d615edfacde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c992d90657ab72fd3edcf0e99a1d615edfacde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c992d90657ab72fd3edcf0e99a1d615edfacde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c992d90657ab72fd3edcf0e99a1d615edfacde/comments", "author": null, "committer": null, "parents": [{"sha": "a01da44af3b5bfe3426833961c2126448b576cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01da44af3b5bfe3426833961c2126448b576cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01da44af3b5bfe3426833961c2126448b576cb1"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "7c4419396443441197aaa1b85f05b5f459630f83", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -1,3 +1,23 @@\n+2012-08-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads: Define Aspect_Id_Exclude_No_Aspect.\n+\t* par-ch13.adb, restrict.adb: Use Aspect_Id_Exclude_No_Aspect to\n+\tsimplify code.\n+\n+2012-08-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat-style.texi: Update style guide for declarations.\n+\n+2012-08-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): In the case for 'Old,\n+\tskip a special expansion which is not needed in Alfa mode.\n+\n+2012-08-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Do not perform\n+\tan expansion of the iterator in Alfa mode.\n+\n 2012-08-06  Robert Dewar  <dewar@adacore.com>\n \n \t* s-oscons-tmplt.c, sem_ch9.adb, osint.adb: Minor reformatting."}, {"sha": "ebe71aec0c35f4b1487cea8c2e24d4e4269c9da6", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -184,6 +184,10 @@ package Aspects is\n \n       Aspect_Lock_Free);\n \n+   subtype Aspect_Id_Exclude_No_Aspect is\n+     Aspect_Id range Aspect_Id'Succ (No_Aspect) .. Aspect_Id'Last;\n+   --  Aspect_Id's excluding No_Aspect\n+\n    --  The following array indicates aspects that accept 'Class\n \n    Class_Aspect_OK : constant array (Aspect_Id) of Boolean :="}, {"sha": "63882afcecab3d3cde84da1d2e9d529e734ed398", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -7,14 +7,14 @@\n @c                                                                            o\n @c                     G N A T   C O D I N G   S T Y L E                      o\n @c                                                                            o\n-@c   GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   o\n+@c                     Copyright (C) 1992-2012, AdaCore                       o\n @c                                                                            o\n @c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n \n @setfilename gnat-style.info\n \n @copying\n-Copyright @copyright{} 1992-2008, Free Software Foundation, Inc.\n+Copyright @copyright{} 1992-2012, AdaCore\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or\n@@ -350,6 +350,24 @@ that give useful information instead.\n Local names can be shorter, because they are used only within\n one context, where comments explain their purpose.\n \n+@item\n+When starting a default expression on the line that follows the declaration\n+line, use 2 characters for indentation.\n+\n+@smallexample @c adanocomment\n+        Entity1 : Integer :=\n+          Function_Name (Parameters, For_Call);\n+@end smallexample\n+\n+@item\n+If a default expression needs to be continued on subsequent lines, the\n+continuations should be indented from the start of the expression.\n+\n+@smallexample @c adanocomment\n+        Entity1   : Integer := Long_Function_Name\n+                                 (parameters for call);\n+@end smallexample\n+\n @end itemize\n \n "}, {"sha": "72ca041e3c09fd6afe1f46c03aea020e674f48b6", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -187,10 +187,8 @@ package body Ch13 is\n \n             --  Check bad spelling\n \n-            for J in Aspect_Id loop\n-               if J /= No_Aspect and then\n-                  Is_Bad_Spelling_Of (Token_Name, Aspect_Names (J))\n-               then\n+            for J in Aspect_Id_Exclude_No_Aspect loop\n+               if Is_Bad_Spelling_Of (Token_Name, Aspect_Names (J)) then\n                   Error_Msg_Name_1 := Aspect_Names (J);\n                   Error_Msg_SC -- CODEFIX\n                     (\"\\possible misspelling of%\");"}, {"sha": "14ab452b47790451a84412204e1e31d8afcc01b5", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -1259,8 +1259,7 @@ package body Restrict is\n      (N       : Node_Id;\n       Warning : Boolean)\n    is\n-      A_Id : constant Aspect_Id := Get_Aspect_Id (Chars (N));\n-      pragma Assert (A_Id /= No_Aspect);\n+      A_Id : constant Aspect_Id_Exclude_No_Aspect := Get_Aspect_Id (Chars (N));\n \n    begin\n       No_Specification_Of_Aspects (A_Id) := Sloc (N);"}, {"sha": "35adaaf6a613d04c25f17d200b117ce622f135d5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -4034,7 +4034,13 @@ package body Sem_Attr is\n          --  enclosing subprogram. This is properly an expansion activity\n          --  but it has to be performed now to prevent out-of-order issues.\n \n-         if not Is_Entity_Name (P) then\n+         --  This expansion is both harmful and not needed in Alfa mode, since\n+         --  the formal verification backend relies on the types of nodes\n+         --  (hence is not robust w.r.t. a change to base type here), and does\n+         --  not suffer from the out-of-order issue described above. Thus, this\n+         --  expansion is skipped in Alfa mode.\n+\n+         if not Is_Entity_Name (P) and then not Alfa_Mode then\n             P_Type := Base_Type (P_Type);\n             Set_Etype (N, P_Type);\n             Set_Etype (P, P_Type);"}, {"sha": "f3df8c5c6ab9bdf57722fb528a03540425e533df", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c992d90657ab72fd3edcf0e99a1d615edfacde/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f2c992d90657ab72fd3edcf0e99a1d615edfacde", "patch": "@@ -1665,16 +1665,21 @@ package body Sem_Ch5 is\n       --  If the domain of iteration is an expression, create a declaration for\n       --  it, so that finalization actions are introduced outside of the loop.\n       --  The declaration must be a renaming because the body of the loop may\n-      --  assign to elements. When the context is a quantified expression, the\n-      --  renaming declaration is delayed until the expansion phase.\n+      --  assign to elements.\n \n       if not Is_Entity_Name (Iter_Name)\n+\n+        --  When the context is a quantified expression, the renaming\n+        --  declaration is delayed until the expansion phase if we are\n+        --  doing expansion.\n+\n         and then (Nkind (Parent (N)) /= N_Quantified_Expression\n+                   or else Operating_Mode = Check_Semantics)\n \n-                   --  The following two tests need comments ???\n+        --  Do not perform this expansion in Alfa mode, since the formal\n+        --  verification directly deals with the source form of the iterator.\n \n-                   or else Operating_Mode = Check_Semantics\n-                   or else Alfa_Mode)\n+        and then not Alfa_Mode\n       then\n          declare\n             Id   : constant Entity_Id := Make_Temporary (Loc, 'R', Iter_Name);\n@@ -1711,7 +1716,7 @@ package body Sem_Ch5 is\n       --  Container is an entity or an array with uncontrolled components, or\n       --  else it is a container iterator given by a function call, typically\n       --  called Iterate in the case of predefined containers, even though\n-      --  Iterate is not a reserved name. What matter is that the return type\n+      --  Iterate is not a reserved name. What matters is that the return type\n       --  of the function is an iterator type.\n \n       elsif Is_Entity_Name (Iter_Name) then"}]}