{"sha": "40eac643be6e8cca207b9ad8449bdc8d2b061179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlYWM2NDNiZTZlOGNjYTIwN2I5YWQ4NDQ5YmRjOGQyYjA2MTE3OQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-03-11T09:13:00Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-03-11T09:13:00Z"}, "message": "cppinit.c (struct pending option): Replace undef with a pointer to a directive handling routine.\n\n2000-03-11  Neil Booth  <NeilB@earthling.net>\n\n\t* cppinit.c (struct pending option): Replace undef with a\n\tpointer to a directive handling routine.\n\t(struct cpp_pending): Replace separate assert_ and define_\n\tlists with one directive_ list.\n\t(new_pending_define): Rename new_pending_directive. Extra\n\targument is the directive's handling routine.\n\t(handle_option): Update to use new_pending_directive.\n\nFrom-SVN: r32481", "tree": {"sha": "86b44b5c99c92cca9200b2b692d36f658a705fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86b44b5c99c92cca9200b2b692d36f658a705fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40eac643be6e8cca207b9ad8449bdc8d2b061179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40eac643be6e8cca207b9ad8449bdc8d2b061179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40eac643be6e8cca207b9ad8449bdc8d2b061179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40eac643be6e8cca207b9ad8449bdc8d2b061179/comments", "author": null, "committer": null, "parents": [{"sha": "1ef9f74981eaa09748cae61ca1ac445d708bc420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9f74981eaa09748cae61ca1ac445d708bc420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef9f74981eaa09748cae61ca1ac445d708bc420"}], "stats": {"total": 99, "additions": 35, "deletions": 64}, "files": [{"sha": "1b390957da26628fb30c230c5995980e2309a285", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eac643be6e8cca207b9ad8449bdc8d2b061179/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eac643be6e8cca207b9ad8449bdc8d2b061179/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40eac643be6e8cca207b9ad8449bdc8d2b061179", "patch": "@@ -1,3 +1,13 @@\n+2000-03-11  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppinit.c (struct pending option): Replace undef with a \n+\tpointer to a directive handling routine.\n+\t(struct cpp_pending): Replace separate assert_ and define_ \n+\tlists with one directive_ list.\n+\t(new_pending_define): Rename new_pending_directive. Extra\n+\targument is the directive's handling routine.\n+\t(handle_option): Update to use new_pending_directive.\n+\n 2000-03-11  Neil Booth  <NeilB@earthling.net>\n \n \t* cppfiles.c (file_cleanup, _cpp_find_include_file,"}, {"sha": "a800883e18844709e9bdd6bb1fb01695a8d13d3c", "filename": "gcc/cppinit.c", "status": "modified", "additions": 25, "deletions": 64, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40eac643be6e8cca207b9ad8449bdc8d2b061179/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40eac643be6e8cca207b9ad8449bdc8d2b061179/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=40eac643be6e8cca207b9ad8449bdc8d2b061179", "patch": "@@ -164,11 +164,13 @@ static const struct default_include include_defaults_array[]\n    for -include, one for -imacros.  `undef' is set for -U, clear for\n    -D, ignored for the others.\n    (Future: add an equivalent of -U for -A) */\n+\n+typedef void (* cl_directive_handler) (cpp_reader *, const char *);\n struct pending_option\n {\n   struct pending_option *next;\n   const char *arg;\n-  int undef;\n+  cl_directive_handler handler;\n };\n \n /* The `pending' structure accumulates all the options that are not\n@@ -177,8 +179,7 @@ struct pending_option\n    tail pointers for quick insertion. */\n struct cpp_pending\n {\n-  struct pending_option *define_head, *define_tail;\n-  struct pending_option *assert_head, *assert_tail;\n+  struct pending_option *directive_head, *directive_tail;\n \n   struct file_name_list *quote_head, *quote_tail;\n   struct file_name_list *brack_head, *brack_tail;\n@@ -216,8 +217,9 @@ static void merge_include_chains\tPARAMS ((struct cpp_options *));\n static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n-static void new_pending_define\t\tPARAMS ((struct cpp_options *,\n-\t\t\t\t\t\t const char *));\n+static void new_pending_directive\t\tPARAMS ((struct cpp_options *,\n+\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t cl_directive_handler));\n #ifdef HOST_EBCDIC\n static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n #endif\n@@ -919,32 +921,15 @@ cpp_start_read (pfile, fname)\n   initialize_builtins (pfile);\n \n   /* Do -U's, -D's and -A's in the order they were seen.  */\n-  p = opts->pending->define_head;\n+  p = opts->pending->directive_head;\n   while (p)\n     {\n-      if (p->undef)\n-\tcpp_undef (pfile, p->arg);\n-      else\n-\tcpp_define (pfile, p->arg);\n-\n+      p->handler (pfile, p->arg);\n       q = p->next;\n       free (p);\n       p = q;\n     }\n \n-  p = opts->pending->assert_head;\n-  while (p)\n-    {\n-      if (p->undef)\n-\tcpp_unassert (pfile, p->arg);\n-      else\n-\tcpp_assert (pfile, p->arg);\n-\n-      q = p->next;\n-      free (p);\n-      p = q;\n-    }\n-  \n   opts->done_initializing = 1;\n   CPP_BUFFER (pfile)->lineno = 1;\n \n@@ -1047,17 +1032,18 @@ cpp_finish (pfile)\n }\n \n static void\n-new_pending_define (opts, text)\n+new_pending_directive (opts, text, handler)\n      struct cpp_options *opts;\n      const char *text;\n+     cl_directive_handler handler;\n {\n   struct pending_option *o = (struct pending_option *)\n     xmalloc (sizeof (struct pending_option));\n \n   o->arg = text;\n   o->next = NULL;\n-  o->undef = 0;\n-  APPEND (opts->pending, define, o);\n+  o->handler = handler;\n+  APPEND (opts->pending, directive, o);\n }\n \n enum opt_code\n@@ -1339,7 +1325,7 @@ handle_option (pfile, argc, argv)\n \t  opts->print_include_names = 1;\n \t  break;\n \tcase OPT_D:\n-\t  new_pending_define (opts, arg);\n+\t  new_pending_directive (opts, arg, cpp_define);\n \t  break;\n \tcase OPT_pedantic_errors:\n \t  opts->pedantic_errors = 1;\n@@ -1375,7 +1361,7 @@ handle_option (pfile, argc, argv)\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n \t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t  opts->trigraphs = 1;\n-\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n+\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n \t  break;\n \tcase OPT_lang_cplusplus:\n \t  opts->cplusplus = 1, opts->cplusplus_comments = 1;\n@@ -1414,17 +1400,17 @@ handle_option (pfile, argc, argv)\n \tcase OPT_std_gnu99:\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n \t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n-\t  new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n+\t  new_pending_directive (opts, \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199409:\n-\t  new_pending_define (opts, \"__STDC_VERSION__=199409L\");\n+\t  new_pending_directive (opts, \"__STDC_VERSION__=199409L\", cpp_define);\n \t  /* Fall through */\n \tcase OPT_std_iso9899_1990:\n \tcase OPT_std_c89:\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n \t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t  opts->trigraphs = 1;\n-\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n+\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199x:\n \tcase OPT_std_iso9899_1999:\n@@ -1433,8 +1419,8 @@ handle_option (pfile, argc, argv)\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n \t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n \t  opts->trigraphs = 1;\n-\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n-\t  new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n+\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n+\t  new_pending_directive (opts, \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_o:\n \t  if (opts->out_fname != NULL)\n@@ -1521,15 +1507,7 @@ handle_option (pfile, argc, argv)\n \t  break;\n \tcase OPT_A:\n \t  if (strcmp (arg, \"-\"))\n- \t    {\n- \t      struct pending_option *o = (struct pending_option *)\n- \t\txmalloc (sizeof (struct pending_option));\n- \n-\t      o->arg = arg;\n- \t      o->next = NULL;\n- \t      o->undef = 0;\n- \t      APPEND (opts->pending, assert, o);\n-\t    }\n+\t    new_pending_directive (opts, arg, cpp_assert);\n \t  else\n \t    {\n \t      /* -A- eliminates all predefined macros and assertions.\n@@ -1538,36 +1516,19 @@ handle_option (pfile, argc, argv)\n \t\t that were passed automatically in from GCC.  */\n \t      struct pending_option *o1, *o2;\n \n-\t      o1 = opts->pending->define_head;\n-\t      while (o1)\n-\t\t{\n-\t\t  o2 = o1->next;\n-\t\t  free (o1);\n-\t\t  o1 = o2;\n-\t\t}\n-\t      o1 = opts->pending->assert_head;\n+\t      o1 = opts->pending->directive_head;\n \t      while (o1)\n \t\t{\n \t\t  o2 = o1->next;\n \t\t  free (o1);\n \t\t  o1 = o2;\n \t\t}\n-\t      opts->pending->assert_head = NULL;\n-\t      opts->pending->assert_tail = NULL;\n-\t      opts->pending->define_head = NULL;\n-\t      opts->pending->define_tail = NULL;\n+\t      opts->pending->directive_head = NULL;\n+\t      opts->pending->directive_tail = NULL;\n \t    }\n \t  break;\n \tcase OPT_U:\n-\t  {\n-\t    struct pending_option *o = (struct pending_option *)\n-\t      xmalloc (sizeof (struct pending_option));\n- \t  \n-\t    o->arg = arg;\n-\t    o->next = NULL;\n-\t    o->undef = 1;\n-\t    APPEND (opts->pending, define, o);\n-\t  }\n+\t  new_pending_directive (opts, arg, cpp_undef);\n \t  break;\n \tcase OPT_I:           /* Add directory to path for includes.  */\n \t  if (!strcmp (arg, \"-\"))"}]}