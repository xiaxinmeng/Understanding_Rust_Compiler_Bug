{"sha": "b9680369c3b870031120cda2a92511393e936538", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2ODAzNjljM2I4NzAwMzExMjBjZGEyYTkyNTExMzkzZTkzNjUzOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:15:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:15:25Z"}, "message": "Consistently use asm volatile (\"\" ::: \"memory\") in vect tests\n\nThe vectoriser tests used a combination of:\n\n1) if (impossible condition) abort ();\n2) volatile int x; ... *x = ...;\n3) asm volatile (\"\" ::: \"memory\");\n\nto prevent vectorisation of a set-up loop.  The problem with 1) is that\nthe compiler can often tell that the condition is false and optimise\nit away before vectorisation.\n\nThis was already happening in slp-perm-9.c, which is why the test was\nexpecting one loop to be vectorised even when the required permutes\nweren't supported.  It becomes a bigger problem with SVE, which is\nable to vectorise more set-up loops.\n\nThe point of this patch is therefore to replace 1) with something else.\n2) should work most of the time, but we don't usually treat non-volatile\naccesses as aliasing unrelated volatile accesses, so I think in principle\nwe could split the loop into one that does the set-up and one that does\nthe volatile accesses.  3) seems more robust because it's also a wild\nread and write.\n\nThe patch therefore tries to replace all instances of 1) and 2) with 3).\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/testsuite/\n\t* gcc.dg/vect/bb-slp-cond-1.c (main): Add an asm volatile\n\tto the set-up loop.\n\t* gcc.dg/vect/slp-perm-7.c (main): Prevent vectorisation with\n\tasm volatile (\"\" ::: \"memory\") instead of a conditional abort.\n\tUpdate the expected vector loop count accordingly.\n\t* gcc.dg/vect/slp-perm-9.c (main): Likewise.\n\t* gcc.dg/vect/bb-slp-1.c (main1): Prevent vectorisation with\n\tasm volatile (\"\" ::: \"memory\") instead of a conditional abort.\n\t* gcc.dg/vect/slp-23.c (main): Likewise,\n\t* gcc.dg/vect/slp-35.c (main): Likewise,\n\t* gcc.dg/vect/slp-37.c (main): Likewise,\n\t* gcc.dg/vect/slp-perm-4.c (main): Likewise.\n\t* gcc.dg/vect/bb-slp-24.c (foo): Likewise.  Remove dummy argument.\n\t(main): Update call accordingly.\n\t* gcc.dg/vect/bb-slp-25.c (foo, main): As for bb-slp-24.c.\n\t* gcc.dg/vect/bb-slp-26.c (foo, main): Likewise.\n\t* gcc.dg/vect/bb-slp-29.c (foo, main): Likewise.\n\t* gcc.dg/vect/no-vfa-vect-102.c (foo): Delete.\n\t(main): Don't initialize it.\n\t(main1): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n\tinstead of a conditional abort.\n\t* gcc.dg/vect/no-vfa-vect-102a.c (foo, main1, main): As for\n\tno-vfa-vect-102.c\n\t* gcc.dg/vect/vect-103.c (foo, main1, main): Likewise.\n\t* gcc.dg/vect/vect-104.c (foo, main1, main): Likewise.\n\t* gcc.dg/vect/pr42709.c (main1): Remove dummy argument.\n\tPrevent vectorisation with asm volatile (\"\" ::: \"memory\")\n\tinstead of a conditional abort.\n\t* gcc.dg/vect/slp-13-big-array.c (y): Delete.\n\t(main1): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n\tinstead of a conditional abort.\n\t* gcc.dg/vect/slp-3-big-array.c (y, main1): As for slp-13-big-array.c.\n\t* gcc.dg/vect/slp-34-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/slp-4-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/slp-multitypes-11-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-105.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-105-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-112-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-15-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-2-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-34-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-6-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-73-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-74-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-75-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-76-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-80-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-97-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-all-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-reduc-1char-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-reduc-2char-big-array.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-mult.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u16-i2.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u16-i4.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u16-mult.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u8-i2-gap.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c (y, main1):\n\tLikewise.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c (y, main1): Likewise.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c (y, main1):\n\tLikewise.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c (y, main1): Likewise.\n\t* gcc.dg/vect/slp-24.c (y): Delete.\n\t(main): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n\tinstead of a conditional abort.\n\t* gcc.dg/vect/slp-24-big-array.c (y, main): As for slp-24.c.\n\t* gcc.dg/vect/vect-98-big-array.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-bswap16.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-bswap32.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-bswap64.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-mult-char-ls.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-mult.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-same-dr.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u16-i2.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u16-i4.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u32-i4.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u32-i8.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i2-gap.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i2.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4-unknown.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-strided-u8-i8.c (y, main): Likewise.\n\t* gcc.dg/vect/vect-10-big-array.c (y): Delete.\n\t(foo): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n\tinstead of a conditional abort.\n\t* gcc.dg/vect/vect-double-reduc-6-big-array.c (y, foo): As for\n\tvect-10-big-array.c.\n\t* gcc.dg/vect/vect-reduc-pattern-1b-big-array.c (y, foo): Likewise.\n\t* gcc.dg/vect/vect-reduc-pattern-1c-big-array.c (y, foo): Likewise.\n\t* gcc.dg/vect/vect-reduc-pattern-2b-big-array.c (y, foo): Likewise.\n\t* gcc.dg/vect/vect-117.c (foo): Delete.\n\t(main): Don't initalize it.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254588", "tree": {"sha": "0e69384456b16ce1d3b4ece4dc808572d814aeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e69384456b16ce1d3b4ece4dc808572d814aeab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9680369c3b870031120cda2a92511393e936538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9680369c3b870031120cda2a92511393e936538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9680369c3b870031120cda2a92511393e936538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9680369c3b870031120cda2a92511393e936538/comments", "author": null, "committer": null, "parents": [{"sha": "67cc7a3007ec0ae7433bdb66bc9de5e306d2bdbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cc7a3007ec0ae7433bdb66bc9de5e306d2bdbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67cc7a3007ec0ae7433bdb66bc9de5e306d2bdbe"}], "stats": {"total": 535, "additions": 208, "deletions": 327}, "files": [{"sha": "c9a3fba3f14cbbf34bf4dc414d8f5caa4c818a02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -1,3 +1,105 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-cond-1.c (main): Add an asm volatile\n+\tto the set-up loop.\n+\t* gcc.dg/vect/slp-perm-7.c (main): Prevent vectorisation with\n+\tasm volatile (\"\" ::: \"memory\") instead of a conditional abort.\n+\tUpdate the expected vector loop count accordingly.\n+\t* gcc.dg/vect/slp-perm-9.c (main): Likewise.\n+\t* gcc.dg/vect/bb-slp-1.c (main1): Prevent vectorisation with\n+\tasm volatile (\"\" ::: \"memory\") instead of a conditional abort.\n+\t* gcc.dg/vect/slp-23.c (main): Likewise,\n+\t* gcc.dg/vect/slp-35.c (main): Likewise,\n+\t* gcc.dg/vect/slp-37.c (main): Likewise,\n+\t* gcc.dg/vect/slp-perm-4.c (main): Likewise.\n+\t* gcc.dg/vect/bb-slp-24.c (foo): Likewise.  Remove dummy argument.\n+\t(main): Update call accordingly.\n+\t* gcc.dg/vect/bb-slp-25.c (foo, main): As for bb-slp-24.c.\n+\t* gcc.dg/vect/bb-slp-26.c (foo, main): Likewise.\n+\t* gcc.dg/vect/bb-slp-29.c (foo, main): Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-102.c (foo): Delete.\n+\t(main): Don't initialize it.\n+\t(main1): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n+\tinstead of a conditional abort.\n+\t* gcc.dg/vect/no-vfa-vect-102a.c (foo, main1, main): As for\n+\tno-vfa-vect-102.c\n+\t* gcc.dg/vect/vect-103.c (foo, main1, main): Likewise.\n+\t* gcc.dg/vect/vect-104.c (foo, main1, main): Likewise.\n+\t* gcc.dg/vect/pr42709.c (main1): Remove dummy argument.\n+\tPrevent vectorisation with asm volatile (\"\" ::: \"memory\")\n+\tinstead of a conditional abort.\n+\t* gcc.dg/vect/slp-13-big-array.c (y): Delete.\n+\t(main1): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n+\tinstead of a conditional abort.\n+\t* gcc.dg/vect/slp-3-big-array.c (y, main1): As for slp-13-big-array.c.\n+\t* gcc.dg/vect/slp-34-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/slp-4-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/slp-multitypes-11-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-105.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-105-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-112-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-15-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-2-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-34-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-6-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-73-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-74-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-75-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-76-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-80-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-97-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-all-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-reduc-1char-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-reduc-2char-big-array.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-mult.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-i2.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-i4.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-mult.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i2-gap.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c (y, main1):\n+\tLikewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c (y, main1): Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c (y, main1):\n+\tLikewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c (y, main1): Likewise.\n+\t* gcc.dg/vect/slp-24.c (y): Delete.\n+\t(main): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n+\tinstead of a conditional abort.\n+\t* gcc.dg/vect/slp-24-big-array.c (y, main): As for slp-24.c.\n+\t* gcc.dg/vect/vect-98-big-array.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-bswap16.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-bswap32.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-bswap64.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-mult-char-ls.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-mult.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-same-dr.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u16-i2.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u16-i4.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u32-i4.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u32-i8.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i2-gap.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i2.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-unknown.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8.c (y, main): Likewise.\n+\t* gcc.dg/vect/vect-10-big-array.c (y): Delete.\n+\t(foo): Prevent vectorisation with asm volatile (\"\" ::: \"memory\")\n+\tinstead of a conditional abort.\n+\t* gcc.dg/vect/vect-double-reduc-6-big-array.c (y, foo): As for\n+\tvect-10-big-array.c.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b-big-array.c (y, foo): Likewise.\n+\t* gcc.dg/vect/vect-reduc-pattern-1c-big-array.c (y, foo): Likewise.\n+\t* gcc.dg/vect/vect-reduc-pattern-2b-big-array.c (y, foo): Likewise.\n+\t* gcc.dg/vect/vect-117.c (foo): Delete.\n+\t(main): Don't initalize it.\n+\n 2017-11-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/compile/pr82879.c: New testcase."}, {"sha": "f64514eeb844f1436f3d42a5f074393e3d860037", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-1.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -25,9 +25,7 @@ main1 (int dummy)\n       *pout++ = *pin++;\n       *pout++ = *pin++;\n       *pout++ = *pin++;\n-      /* Avoid loop vectorization.  */\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* check results: */ "}, {"sha": "d5b6bfbc4de180cb942275c5f1dbe24f45374eb6", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-24.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,7 +9,7 @@\n short src[N], dst[N];\n \n void foo (short * __restrict__ dst, short * __restrict__ src, int h,\n-          int stride, int dummy)\n+          int stride)\n {\n   int i;\n   h /= 8;\n@@ -25,8 +25,7 @@ void foo (short * __restrict__ dst, short * __restrict__ src, int h,\n       dst[7] += A*src[7];\n       dst += stride;\n       src += stride;\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n }\n \n@@ -43,7 +42,7 @@ int main (void)\n       src[i] = i;\n     }\n \n-  foo (dst, src, N, 8, 0);\n+  foo (dst, src, N, 8);\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "ec31329f3535576797adba796d45a36ab3fcb1b7", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-25.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,7 +9,8 @@\n \n short src[N], dst[N];\n \n-void foo (short * __restrict__ dst, short * __restrict__ src, int h, int stride, int dummy)\n+void foo (short * __restrict__ dst, short * __restrict__ src, int h,\n+\t  int stride)\n {\n   int i;\n   h /= 16;\n@@ -25,8 +26,7 @@ void foo (short * __restrict__ dst, short * __restrict__ src, int h, int stride,\n       dst[7] += A*src[7] + src[7+stride];\n       dst += 8;\n       src += 8;\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n    }\n }\n \n@@ -43,7 +43,7 @@ int main (void)\n        src[i] = i;\n     }\n \n-  foo (dst, src, N, 8, 0);\n+  foo (dst, src, N, 8);\n \n   for (i = 0; i < N/2; i++)\n     {"}, {"sha": "91b6cacd4c59bbd8b422adcdfab35a4a9e5730fa", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-26.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-26.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,7 @@\n char src[N], dst[N];\n \n void __attribute__((noinline,noclone))\n-foo (char * __restrict__ dst, char * __restrict__ src, int h,\n-     int stride, int dummy)\n+foo (char * __restrict__ dst, char * __restrict__ src, int h, int stride)\n {\n   int i;\n   h /= 16;\n@@ -27,8 +26,7 @@ foo (char * __restrict__ dst, char * __restrict__ src, int h,\n       dst[7] += A*src[7] + src[7+stride];\n       dst += 8;\n       src += 8;\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n    }\n }\n \n@@ -45,7 +43,7 @@ int main (void)\n        src[i] = i/8;\n     }\n \n-  foo (dst, src, N, 8, 0);\n+  foo (dst, src, N, 8);\n \n   for (i = 0; i < N/2; i++)\n     {"}, {"sha": "747896b034bab91612ce142091bb4e5c9aba553a", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-29.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,7 +9,8 @@\n \n short src[N], dst[N];\n \n-void foo (short * __restrict__ dst, short * __restrict__ src, int h, int stride, int dummy)\n+void foo (short * __restrict__ dst, short * __restrict__ src, int h,\n+\t  int stride)\n {\n   int i;\n   h /= 16;\n@@ -25,8 +26,7 @@ void foo (short * __restrict__ dst, short * __restrict__ src, int h, int stride,\n       dst[7] = A*src[7] + B*src[8];\n       dst += stride;\n       src += stride;\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n    }\n }\n \n@@ -43,7 +43,7 @@ int main (void)\n        src[i] = i;\n     }\n \n-  foo (dst, src, N, 8, 0);\n+  foo (dst, src, N, 8);\n \n   for (i = 0; i < N/2; i++)\n     {"}, {"sha": "2c4c36fea83b153161421285e1e61aa85935684d", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-cond-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -28,7 +28,10 @@ int main ()\n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    a[i] = i;\n+    {\n+      a[i] = i;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n \n   foo (a, 4);\n "}, {"sha": "230b93f0ed5ffeda6f25f71f76c8583390a9c2bf", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -14,7 +14,6 @@ struct extraction\n \n static int a[N] = {1,2,3,4,5,6,7,8,9};\n static int b[N] = {2,3,4,5,6,7,8,9,9};\n-volatile int foo;\n \n __attribute__ ((noinline))\n int main1 (int x, int y) {\n@@ -24,9 +23,8 @@ int main1 (int x, int y) {\n \n   for (i = 0; i < N; i++)\n     {\n-       p->a[i] = a[i];\n-       if (foo == 135)\n-\t abort (); /* to avoid vectorization  */\n+      p->a[i] = a[i];\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Not vectorizable: distance 1.  */\n@@ -48,7 +46,6 @@ int main (void)\n { \n   check_vect ();\n \n-  foo = 0;\n   return main1 (0, N);\n }\n "}, {"sha": "a8450a41c9be9ff42cd50c9db318461ce194aa52", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102a.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -14,7 +14,6 @@ struct extraction\n \n static int a[N] = {1,2,3,4,5,6,7,8,9};\n static int b[N] = {2,3,4,5,6,7,8,9,9};\n-volatile int foo;\n \n __attribute__ ((noinline))\n int main1 (int x, int y) {\n@@ -24,9 +23,8 @@ int main1 (int x, int y) {\n \n   for (i = 0; i < N; i++)\n     {\n-       p->a[i] = a[i];\n-       if (foo == 135)\n-\t abort (); /* to avoid vectorization  */\n+      p->a[i] = a[i];\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Not vectorizable: distance 1.  */\n@@ -48,7 +46,6 @@ int main (void)\n { \n   check_vect ();\n \n-  foo = 0;\n   return main1 (0, N);\n }\n "}, {"sha": "77818c4f0dd046cee813fd422192474ae780c077", "filename": "gcc/testsuite/gcc.dg/vect/pr42709.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr42709.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr42709.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr42709.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,7 +9,7 @@\n int *res[N];\n \n int\n-main1 (int *a, int *b, int *c, int *d, int dummy)\n+main1 (int *a, int *b, int *c, int *d)\n {\n   int i;\n \n@@ -19,8 +19,7 @@ main1 (int *a, int *b, int *c, int *d, int dummy)\n       res[i+1] = b + 16;\n       res[i+2] = c + 16;\n       res[i+3] = d + 16;\n-      if (dummy == 32)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n }\n "}, {"sha": "59781386254fb3cdd793099fa9b01a34cf198acb", "filename": "gcc/testsuite/gcc.dg/vect/slp-13-big-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,7 +4,6 @@\n #include \"tree-vect.h\"\n \n #define N 64\n-volatile int y = 0;\n \n int\n main1 ()\n@@ -18,8 +17,7 @@ main1 ()\n   for (i = 0; i < N*8; i++)\n     {\n       in[i] = in2[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Induction is SLPable.  */"}, {"sha": "0acb37e0076c5830a9feb4cf229f43430df00daf", "filename": "gcc/testsuite/gcc.dg/vect/slp-23.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -97,8 +97,7 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "abd3a878f1ac36a7c8cde58743496f79b71f4476", "filename": "gcc/testsuite/gcc.dg/vect/slp-24-big-array.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -15,7 +15,6 @@ typedef struct {\n unsigned char ub[N*2];\n unsigned char uc[N];\n \n-volatile int y = 0;\n unsigned char check_diff = 2;\n \n void\n@@ -69,13 +68,11 @@ int main (void)\n     ub[i] = (i%5 == 0)?i*3:i;\n     uc[i] = i;\n     check_diff += (unsigned char) (ub[i] - uc[i]);\n-    if (y) /* Avoid vectorization.  */\n-      abort ();\n+    asm volatile (\"\" ::: \"memory\");\n   }\n   for (; i < 2*N; i++) {\n     ub[i] = 0;\n-    if (y) /* Avoid vectorization.  */\n-      abort ();\n+    asm volatile (\"\" ::: \"memory\");\n   }\n \n   for (i = 0; i < N; i++)\n@@ -84,8 +81,7 @@ int main (void)\n       arr[i].b = i * 2 + 10;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   check_vect ();\n "}, {"sha": "a45ce7de71fa6a8595b611dd47507df4e91e3b36", "filename": "gcc/testsuite/gcc.dg/vect/slp-24.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n unsigned char ub[N*2] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n-volatile int y = 0;\n-\n void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *arr)\n {\n@@ -69,8 +67,7 @@ int main (void)\n       arr[i].b = i * 2 + 10;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   check_vect ();\n   "}, {"sha": "4cf0e7a0ece17204221c483bcac8fe9bdab3c85c", "filename": "gcc/testsuite/gcc.dg/vect/slp-3-big-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -6,7 +6,6 @@\n #define N 96\n \n unsigned short in[N*8];\n-volatile int y = 0;\n \n int\n main1 ()\n@@ -17,8 +16,7 @@ main1 ()\n   for (i = 0; i < N*8; i++)\n     {\n       in[i] = i&63;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "9e9c8207f7bbb0235e5864b529869b6db3768087", "filename": "gcc/testsuite/gcc.dg/vect/slp-34-big-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -7,7 +7,6 @@\n \n unsigned short in[N*8];\n unsigned short in2[N*8];\n-volatile int y = 0;\n \n int\n main1 ()\n@@ -19,8 +18,7 @@ main1 ()\n   for (i = 0; i < N*8; i++)\n     {\n       in[i] = in2[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* SLP with unrolling by 8.  */"}, {"sha": "76dd7456d89859108440eb0be2374215a16cfa57", "filename": "gcc/testsuite/gcc.dg/vect/slp-35.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-35.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -58,8 +58,7 @@ int main (void)\n       arr[i].c = 17;\n       arr[i].d = i+34;\n       arr[i].e = i * 3 + 5;\n-      if (arr[i].a == 178)\n-         abort(); \n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "b6a044dfd3ad814ea974b42a5698ab648c3b313c", "filename": "gcc/testsuite/gcc.dg/vect/slp-37.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -49,9 +49,7 @@ int main (void)\n       arr1[i].a = i;\n       arr1[i].b = i * 2;\n       arr1[i].c = (void *)arr1;\n-\n-      if (arr1[i].a == 178)\n-         abort(); \n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n "}, {"sha": "98ac3f1f2839c717d66c04ba4e0179d4497be33e", "filename": "gcc/testsuite/gcc.dg/vect/slp-4-big-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,7 +4,6 @@\n #include \"tree-vect.h\"\n \n #define N 128\n-volatile int y = 0;\n \n int\n main1 ()\n@@ -17,8 +16,7 @@ main1 ()\n   for (i = 0; i < N*8; i++)\n     {\n       in[i] = i;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "7793862f06fa9ebd44f8b0299f1f55297862b41b", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-11-big-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -13,7 +13,6 @@ struct s\n };\n \n char in[N*3];\n-volatile int y = 0;\n \n __attribute__ ((noinline)) int\n main1 ()\n@@ -24,8 +23,7 @@ main1 ()\n   for (i = 0; i < N; i++)\n     {\n       in[i] = i&127;\n-      if (y) /* Avoid vectorization.  */\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "c4e27f4d0ee9f3231e3ff22510dfd7fa65cbc435", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -68,10 +68,8 @@ int main (int argc, const char* argv[])\n   for (i = 0; i < N; i++)\n     {\n       input[i] = i%256;\n-      if (input[i] > 200)\n-        abort();\n       output[i] = 0;\n-      __asm__ volatile (\"\");\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   foo (input, output);"}, {"sha": "307d823d73a283c68a7cc0288b912166178da313", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-7.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -57,8 +57,7 @@ int main (int argc, const char* argv[])\n       input2[i] = i%256;\n       output[i] = 0;\n       output2[i] = 0;\n-      if (input[i] > 200)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   foo (input, output, input2, output2);\n@@ -70,7 +69,7 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm && {! vect_load_lanes } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"note: Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm && vect_load_lanes } } } } */"}, {"sha": "bbf9cae86866d4549248e5c6d1782f1e55b2c2c4", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -33,8 +33,7 @@ int main (int argc, const char* argv[])\n     {\n       input[i] = i;\n       output[i] = 0;\n-      if (input[i] > 256)\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N / 3; i++)\n@@ -54,8 +53,8 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { {! vect_perm } || {! vect_sizes_16B_8B } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target { { vect_perm } && { vect_sizes_16B_8B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\"  { target { {! vect_perm } || {! vect_sizes_16B_8B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { { vect_perm } && { vect_sizes_16B_8B } } } } } */\n /* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target vect_perm_short } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { {! vect_perm } || {! vect_sizes_32B_16B } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { { vect_perm } && { vect_sizes_32B_16B } } } } } */"}, {"sha": "f266ac8617c31fb523d5398a3d3b4a1d4b7b1472", "filename": "gcc/testsuite/gcc.dg/vect/vect-10-big-array.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -8,8 +8,6 @@ extern void abort (void);\n short a[N];\n short d[N];\n \n-volatile int y = 0;\n-\n int foo ()\n {\n   int i;\n@@ -19,10 +17,7 @@ int foo ()\n     {\n       b[i] = i*3;\n       c[i] = i;\n-\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Strided access pattern.  */"}, {"sha": "6ebb4e12bd46c88611ef698fb8baf9b7f03472c9", "filename": "gcc/testsuite/gcc.dg/vect/vect-103.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -15,7 +15,6 @@ struct extraction\n static int a[N] = {1,2,3,4,5,6,7,8,9};\n static int b[N] = {17,24,7,0,2,3,4,31,82};\n static int c[N] = {9,17,24,7,0,2,3,4,31};\n-volatile int foo;\n \n __attribute__ ((noinline))\n int main1 (int x, int y) {\n@@ -25,10 +24,9 @@ int main1 (int x, int y) {\n \n   for (i = 0; i < N; i++)\n     {\n-       p->a[i] = a[i];\n-       p->b[i] = b[i];\n-       if (foo == 135)\n-\t abort (); /* to avoid vectorization  */\n+      p->a[i] = a[i];\n+      p->b[i] = b[i];\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Vectorizable: distance > VF.  */\n@@ -50,7 +48,6 @@ int main (void)\n { \n   check_vect ();\n \n-  foo = 0;\n   return main1 (0, N);\n }\n "}, {"sha": "48c45d1d751af163751cfcfa965a8dbf979adeeb", "filename": "gcc/testsuite/gcc.dg/vect/vect-104.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,7 +16,6 @@ struct extraction\n static int a[N][N] = {{1,2,3},{4,5,6},{7,8,9}};\n static int b[N][N] = {{17,24,7},{0,2,3},{4,31,82}};\n static int c[N][N] = {{1,2,3},{4,5,5},{5,5,5}};\n-volatile int foo;\n \n __attribute__ ((noinline))\n int main1 (int x) {\n@@ -30,8 +29,7 @@ int main1 (int x) {\n      {\n        p->a[i][j] = a[i][j];\n        p->b[i][j] = b[i][j];\n-       if (foo == 135)\n-\t abort (); /* to avoid vectorization  */\n+       asm volatile (\"\" ::: \"memory\");\n      }\n    }\n \n@@ -60,7 +58,6 @@ int main (void)\n { \n   check_vect ();\n \n-  foo = 0;\n   return main1 (N);\n }\n "}, {"sha": "433565bfd4d3cea87abe23de29edbe8823054515", "filename": "gcc/testsuite/gcc.dg/vect/vect-105-big-array.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ static int a[N][N];\n static int b[N][N];\n static int c[N][N];\n \n-volatile int y;\n-\n __attribute__ ((noinline))\n int main1 (int x) {\n   int i,j, off;\n@@ -29,17 +27,15 @@ int main1 (int x) {\n      {\n        a[i][j] = (i*7 + j*17)%53;\n        b[i][j] = (i*11+ j*13)%41;\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n+       asm volatile (\"\" ::: \"memory\");\n      }\n    }\n   for (i = 0; i < N; i++)\n    {\n     for (j = 0; j < N; j++)\n      {\n        c[i][j] = a[i][j];\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n+       asm volatile (\"\" ::: \"memory\");\n      }\n    }\n   for (i = 1; i < N; i++)\n@@ -53,8 +49,7 @@ int main1 (int x) {\n \t*(&c[0][0]+x+i+j) = *(&b[0][0] + off - N*N);\n       else\n \t*(&c[0][0]+x+i+j) = *(&a[0][0] + off);\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   }\n \n@@ -64,10 +59,7 @@ int main1 (int x) {\n      {\n        p->a[i][j] = a[i][j];\n        p->b[i][j] = b[i][j];\n-       /* Because Y is volatile, the compiler cannot move this check out\n-\t  of the loop.  */\n-       if (y)\n-\t abort (); /* to avoid vectorization.  */\n+       asm volatile (\"\" ::: \"memory\");\n      }\n    }\n "}, {"sha": "0024457f9e275cd7dda9ed053119eccdfa6c7701", "filename": "gcc/testsuite/gcc.dg/vect/vect-105.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ static int a[N][N] = {{1,2,3,11},{4,5,6,12},{7,8,9,13},{34,45,67,83}};\n static int b[N][N] = {{17,28,15,23},{0,2,3,24},{4,31,82,25},{29,31,432,256}};\n static int c[N][N] = {{1,2,3,11},{4,9,13,34},{45,67,83,13},{34,45,67,83}};\n \n-volatile int y;\n-\n __attribute__ ((noinline))\n int main1 (int x) {\n   int i,j;\n@@ -30,10 +28,7 @@ int main1 (int x) {\n      {\n        p->a[i][j] = a[i][j];\n        p->b[i][j] = b[i][j];\n-       /* Because Y is volatile, the compiler cannot move this check out\n-\t  of the loop.  */\n-       if (y)\n-\t abort (); /* to avoid vectorization  */\n+       asm volatile (\"\" ::: \"memory\");\n      }\n    }\n "}, {"sha": "a99a590d9ac1d72f728c87858aed921818eefc93", "filename": "gcc/testsuite/gcc.dg/vect/vect-112-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -8,8 +8,6 @@\n char cb[N];\n char cc[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (void)\n {\n@@ -20,9 +18,7 @@ main1 (void)\n     cb[i] = i + 2;\n     cc[i] = i + 1;\n     check_diff += (cb[i] - cc[i]);\n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n+    asm volatile (\"\" ::: \"memory\");\n   }\n \n   /* Cross-iteration cycle.  */"}, {"sha": "22f8e01187272e2cfe445c66ca590f77923d4e95", "filename": "gcc/testsuite/gcc.dg/vect/vect-117.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-117.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -17,8 +17,6 @@ static  int c[N][N] = {{ 1, 2, 3, 4, 5},\n \t\t       {34,38,42,46,50},\n \t\t       {55,60,65,70,75}};\n \n-volatile int foo;\n-\n __attribute__ ((noinline))\n int main1 (int A[N][N], int n) \n {\n@@ -43,7 +41,6 @@ int main (void)\n \n   check_vect ();\n \n-  foo = 0;\n   main1 (a, N);\n \n   /* check results: */"}, {"sha": "5313eae598b4787e5294eefe87bf59f5a3581657", "filename": "gcc/testsuite/gcc.dg/vect/vect-15-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -5,8 +5,6 @@\n \n #define N 128\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -17,8 +15,7 @@ int main1 ()\n   for (i = 0; i <N; i++)\n     {\n       b[i] = i*3;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Not vectorizable yet (reverse access and forward access).  */"}, {"sha": "162cb54b58d17efc205778adc14e846be39afab1", "filename": "gcc/testsuite/gcc.dg/vect/vect-2-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,8 +9,6 @@\n char cb[N];\n char ca[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -19,9 +17,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n       cb[i] = i*3;\n-      /* To avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "0aa6d507a82f086056113157bc4b7ce0d5a87691", "filename": "gcc/testsuite/gcc.dg/vect/vect-34-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ struct {\n } s;\n char cb[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -20,9 +18,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n       cb[i] = i*3;\n-      /* To avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "c5de86b167a07ddf9043ae1ba77466ffd16765e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-6-big-array.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@ float e[N] = {0};\n float b[N];\n float c[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -25,17 +23,13 @@ int main1 ()\n       c[i] = i;\n       results1[i] = 0;\n       results2[i] = 0;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (i=0; i<N/2; i++)\n     {\n       results1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n       results2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N/2; i++)"}, {"sha": "1c9d1fdaf9a2bb4eee4e9e766e531b72a3ecef2c", "filename": "gcc/testsuite/gcc.dg/vect/vect-73-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -11,8 +11,6 @@ int ib[N];\n \n #define ia (ic+N)\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -21,8 +19,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n       ib[i] = i*3;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "ba1ae63bd57cd3347820d888045005a7d4d83f1a", "filename": "gcc/testsuite/gcc.dg/vect/vect-74-big-array.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -13,8 +13,6 @@ float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float b[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n float c[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc)\n {\n@@ -25,14 +23,12 @@ main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc\n     {\n       b[i] = i;\n       c[i] = 0.5 + i;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (; i < N+4; i++)\n     {\n       b[i] = i;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "26e27963795d312ed47699415919379819f51da0", "filename": "gcc/testsuite/gcc.dg/vect/vect-75-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@\n \n int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 (int *ib)\n {\n@@ -23,8 +21,7 @@ int main1 (int *ib)\n   for (i = OFF; i < N+OFF; i++)\n     {\n       ib[i] = ib[i%OFF]*(i/OFF);\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "5825cfc446468b16eff60fa2115bb1de4872654f", "filename": "gcc/testsuite/gcc.dg/vect/vect-76-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -13,8 +13,6 @@\n int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17};\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 (int *pib)\n {\n@@ -24,8 +22,7 @@ int main1 (int *pib)\n     {\n       ib[i] = ib[i%8]*(i/8);\n       ic[i] = ic[i%8]*(i/8);\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = OFF; i < N; i++)"}, {"sha": "0baf4d2859b679f7b20d6b5fc939b71ec2533fb4", "filename": "gcc/testsuite/gcc.dg/vect/vect-80-big-array.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -13,8 +13,6 @@ float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n {\n@@ -24,14 +22,12 @@ main1 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n     {\n       fb[i] = i;\n       fc[i] = 0.5+i;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (; i < N+4; i++)\n     {\n       fb[i] = i;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "977a9d57ed4795718722c83344c2efd761e6783e", "filename": "gcc/testsuite/gcc.dg/vect/vect-97-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -8,8 +8,6 @@\n char x[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 ()\n {\n@@ -21,8 +19,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n       cb[i] = i*3;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Check that datarefs analysis can determine that the access via pointer"}, {"sha": "61b749d4669386a890f5c2f5ba83d6e00d269b4f", "filename": "gcc/testsuite/gcc.dg/vect/vect-98-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,8 +9,6 @@\n \t\t\t a[8]*b[8]   + a[9]*b[9]   + a[10]*b[10] + a[11]*b[11] + \\\n \t\t\t a[12]*b[12] + a[13]*b[13] + a[14]*b[14] + a[15]*b[15])\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline))\n int main1 (int ia[][N])\n {\n@@ -41,9 +39,7 @@ int main (void)\n     for (j = 0; j < N; j++)\n       {\n         ia[i][j] = i + j + 1;\n-\t/* Avoid vectorization.  */\n-\tif (y)\n-\t  abort ();\n+\tasm volatile (\"\" ::: \"memory\");\n       }\n \n   check_vect ();"}, {"sha": "6eb9533a8bb17acf7f9e29bfaa7f7a7aca2dc221", "filename": "gcc/testsuite/gcc.dg/vect/vect-all-big-array.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -78,8 +78,6 @@ char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n char ca[N];\n short sa[N];\n \n-volatile int y = 0;\n-\n /* All of the loops below are currently vectorizable, except\n    initialization ones.  */\n \n@@ -101,8 +99,7 @@ main1 ()\n       fmul_results[i] = b[i] * c[i];\n       fresults1[i] = 0;\n       fresults2[i] = 0;\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* Test 1: copy chars.  */\n@@ -142,15 +139,13 @@ main1 ()\n     {\n       fresults1[i] = a[i];\n       fresults2[i] = e[i];\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   for (i = 0; i < N/2; i++)\n     {\n       fresults1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n       fresults2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   /* Test 4: access with offset.  */\n   for (i = 0; i < N/2; i++)"}, {"sha": "3c98b07e4259223fa8b0add09e7c7c19f3e38245", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap16.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,8 +4,6 @@\n \n #define N 128\n \n-volatile int y = 0;\n-\n static inline void\n vfoo16 (unsigned short int* a)\n {\n@@ -27,8 +25,7 @@ main (void)\n     {\n       arr[i] = i;\n       expect[i] = __builtin_bswap16 (i);\n-      if (y) /* Avoid vectorisation.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   vfoo16 (arr);"}, {"sha": "88d88b5f034153cb736391e4fc46a9b786ec28c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap32.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,8 +4,6 @@\n \n #define N 128\n \n-volatile int y = 0;\n-\n static inline void\n vfoo32 (unsigned int* a)\n {\n@@ -27,8 +25,7 @@ main (void)\n     {\n       arr[i] = i;\n       expect[i] = __builtin_bswap32 (i);\n-      if (y) /* Avoid vectorisation.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   vfoo32 (arr);"}, {"sha": "fd15d713c5d63db335e61c892c670b06ee9da25f", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap64.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,8 +4,6 @@\n \n #define N 128\n \n-volatile int y = 0;\n-\n static inline void\n vfoo64 (unsigned long long* a)\n {\n@@ -27,8 +25,7 @@ main (void)\n     {\n       arr[i] = i;\n       expect[i] = __builtin_bswap64 (i);\n-      if (y) /* Avoid vectorisation.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   vfoo64 (arr);"}, {"sha": "1d9dcdab5e9c09514a8427cd65c419e74962c9de", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-6-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,8 +9,6 @@ int in[2*K][K] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n int out[K];\n int check_result[K];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) void\n foo ()\n {\n@@ -24,9 +22,7 @@ foo ()\n         for (i = 0; i < K; i++)\n \t{\n           sum *= in[i+k][j];\n-\t  /* Avoid vectorization.  */\n-\t  if (y)\n-\t    abort ();\n+\t  asm volatile (\"\" ::: \"memory\");\n \t}\n       check_result[k] = sum;\n     }"}, {"sha": "e762f4890cc5792555c1f3de82d53068a52f3b47", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1char-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -9,8 +9,6 @@ unsigned char ub[N];\n unsigned char uc[N];\n unsigned char diff;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n {\n@@ -33,9 +31,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n     if (uc[i] < min_result)\n       min_result = uc[i];\n \n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n+    asm volatile (\"\" ::: \"memory\");\n   }\n   for (i = 0; i < N; i++) {\n     udiff += (unsigned char) (ub[i] - uc[i]);"}, {"sha": "e246ae7f3c6c8a64fdc682a224d924f387840b0c", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -4,7 +4,6 @@\n #include \"tree-vect.h\"\n \n #define N 256\n-volatile int y = 0;\n \n __attribute__ ((noinline))\n void main1 (signed char x, signed char max_result, signed char min_result)\n@@ -30,9 +29,7 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n       max_result = c[i];\n     if (c[i] < min_result)\n       min_result = c[i];\n-    /* Avoid vectorization.  */\n-    if (y)\n-      abort ();\n+    asm volatile (\"\" ::: \"memory\");\n   }\n \n   for (i = 0; i < N; i++) {"}, {"sha": "be03c7d011da3422d64f25d6a185c40ea8ab4d8a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -7,8 +7,6 @@\n unsigned char udata_ch[N];\n #define SUM N*(N-1)\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n foo ()\n {\n@@ -18,9 +16,7 @@ foo ()\n   for (i = 0; i < N; i++)\n     {\n       udata_ch[i] = i*2;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* widenning sum: sum chars into int.  */"}, {"sha": "c30c85ce911b945703ea972955972088214ea2b7", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -7,8 +7,6 @@\n unsigned char udata_ch[N];\n #define SUM N*(N-1)\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n foo ()\n {\n@@ -18,9 +16,7 @@ foo ()\n   for (i = 0; i < N; i++)\n     {\n       udata_ch[i] = i*2;\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* widenning sum: sum chars into short.  */"}, {"sha": "570e56a8c9b7c77e509f256d0fd1a371c9e39909", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b-big-array.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -6,8 +6,6 @@\n #define N 128\n signed char data_ch[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n foo ()\n {\n@@ -19,9 +17,7 @@ foo ()\n     {\n       data_ch[i] = i*2;\n       check_intsum += data_ch[i];\n-      /* Avoid vectorization.  */\n-      if (y)\n-\tabort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   /* widenning sum: sum chars into int.  */"}, {"sha": "da47a824cb6046dcd9808bd7bd80161dbc0531b5", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-mult.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -15,8 +15,6 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -34,8 +32,7 @@ main1 ()\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "d53b7669a6b50d6bc27e646d08af98ca6fd093e3", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-i2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned short b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -24,8 +22,7 @@ main1 ()\n     {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "37ff3abe97d60d9b968addaee7812cb0b05b6f44", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-i4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@ typedef struct {\n    unsigned short d;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -28,8 +26,7 @@ main1 ()\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "9237a9074deeb72c4d724771d5397d36593ced7c", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-mult.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned short b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -28,8 +26,7 @@ main1 ()\n       arr[i].a = i;\n       arr[i].b = i * 2;\n       iarr[i] = i * 3;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "f64a1347350a465b9e7a0c123fe2b5bcbc2bf860", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i2-gap.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned char b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -24,8 +22,7 @@ main1 ()\n     {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "2add5b489915cffda25f3c59b41bd1c44edf16ce", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -47,8 +45,7 @@ main1 ()\n       check_res[i].h = arr[i].f;\n       check_res[i].g = arr[i].f - arr[i].a;\n \n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "2b7a1a4bb77f4dce44958c50864a0a6ecac90c53", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -36,8 +34,7 @@ main1 ()\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "e487de8b4e7d8e092054a73b337a345ba00e4e02", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -52,8 +50,7 @@ main1 ()\n       check_res[i].h = arr[i].d;\n       check_res[i].g = u + t;\n \n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "0f3347e8bb2200f48927b21938e7ebd348a73ada", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -37,8 +35,7 @@ main1 ()\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "82727e595c166a52c8a1060339259ec7c39b594f", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-mult-char-ls.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -15,8 +15,6 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr, ii *iarr)\n {\n@@ -64,8 +62,7 @@ int main (void)\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   main1 (arr, iarr);"}, {"sha": "0fac615011601d45c64e83be1a6ec1e1af407192", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-mult.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -15,8 +15,6 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr, ii *iarr)\n {\n@@ -64,8 +62,7 @@ int main (void)\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   main1 (arr, iarr); "}, {"sha": "8c560480bc4eac50c381ed51cfbc6ccc696d0424", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-same-dr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@ typedef struct {\n \n s buffer1[N], buffer2[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s * __restrict__  pIn, s* __restrict__ pOut)\n {\n@@ -63,8 +61,7 @@ int main (void)\n       buffer1[i].b = i + 8;\n       buffer2[i].a = i * 3;\n       buffer2[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   check_vect ();"}, {"sha": "7d264f39c60d668927232a75fe3843dbee087aa5", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u16-i2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned short b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -48,8 +46,7 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "ee8ea0d666db4b7671cd3f788fc7f6056189f3da", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u16-i4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@ typedef struct {\n    unsigned short d;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -61,8 +59,7 @@ int main (void)\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "fe41dbd9cf452b9452084e988d48ede232f548bf", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u32-i4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -12,8 +12,6 @@ typedef struct {\n    int d;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -56,8 +54,7 @@ int main (void)\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "a88c0f08456cf278c4fa5a5b9b0a06900cb7c9be", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u32-i8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    int h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -70,8 +68,7 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "ab841205e4f5b3c0aea29f60045934e84644a6a7", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i2-gap.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned char b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -64,8 +62,7 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "0afd50db0b8de7758faf7f2bff14247a27a7ee38", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -10,8 +10,6 @@ typedef struct {\n    unsigned char b;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -47,8 +45,7 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "ef532251465e5b1eb16e820fc30844a7995b82a9", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -18,8 +18,6 @@ typedef struct {\n \n s check_res[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -83,8 +81,7 @@ int main (void)\n       check_res[i].h = arr[i].f;\n       check_res[i].g = arr[i].f - arr[i].b;\n \n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   main1 (arr);"}, {"sha": "04f18fbb591d9dc50d56b20bce99cb79903e5e27", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -71,8 +69,7 @@ int main (void)\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "28ba4170fbae845765f2c44fe4ed5c5617b71819", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -18,8 +18,6 @@ typedef struct {\n \n s check_res[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -105,8 +103,7 @@ int main (void)\n       check_res[i].h = arr[i].c;\n       check_res[i].g = arr[i].b + arr[i].c;\n \n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n   main1 (arr);\n "}, {"sha": "69b970ef33b9dd8834b10baf7085b88a0c441a46", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-unknown.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr, int n)\n {\n@@ -103,8 +101,7 @@ int main (void)\n       arr[i].f = 16;\n       arr[i].g = 3;\n       arr[i].h = 56;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr, N-2);"}, {"sha": "901b1a925bdc75b5fc9bd9e298e2d90208fd496d", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -91,8 +89,7 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "b703e636b49f8c7995c4c463b38b585f79acbdf2", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -18,8 +18,6 @@ typedef struct {\n \n s check_res[N];\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -93,8 +91,7 @@ int main (void)\n       check_res[i].h = arr[i].d;\n       check_res[i].g = u + t;\n \n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   main1 (arr);"}, {"sha": "764f10d0adaca01e664bb45dd4da59a0c3f8a2af", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -76,8 +74,7 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}, {"sha": "35bab79ce826ac663eabb1a1036ed7afd6d33e8b", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9680369c3b870031120cda2a92511393e936538/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c?ref=b9680369c3b870031120cda2a92511393e936538", "patch": "@@ -16,8 +16,6 @@ typedef struct {\n    unsigned char h;\n } s;\n \n-volatile int y = 0;\n-\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -78,8 +76,7 @@ int main (void)\n       arr[i].f = i + 5;\n       arr[i].g = i + 3;\n       arr[i].h = 67;\n-      if (y) /* Avoid vectorization.  */\n-        abort ();\n+      asm volatile (\"\" ::: \"memory\");\n     } \n \n   main1 (arr);"}]}