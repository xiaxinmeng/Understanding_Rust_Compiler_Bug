{"sha": "149ccdd45da46cb04df8efea654a52cf55573c87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5Y2NkZDQ1ZGE0NmNiMDRkZjhlZmVhNjU0YTUyY2Y1NTU3M2M4Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-04-18T20:23:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-04-18T20:23:05Z"}, "message": "cp-tree.h: Remove the prototype for insert_block.\n\n\t* cp-tree.h: Remove the prototype for insert_block.\n\t* decl.c (insert_block): Remove.\n\nFrom-SVN: r146326", "tree": {"sha": "be279cab9539493372eef347d7d03bea71d65f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be279cab9539493372eef347d7d03bea71d65f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149ccdd45da46cb04df8efea654a52cf55573c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149ccdd45da46cb04df8efea654a52cf55573c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149ccdd45da46cb04df8efea654a52cf55573c87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149ccdd45da46cb04df8efea654a52cf55573c87/comments", "author": null, "committer": null, "parents": [{"sha": "3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce6296587139c291f7f5c31dbdc30e9c2e1829f"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "bfa05e545d88721c65dc63bfcf0edcc2a0a63340", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=149ccdd45da46cb04df8efea654a52cf55573c87", "patch": "@@ -1,3 +1,8 @@\n+2009-04-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cp-tree.h: Remove the prototype for insert_block.\n+\t* decl.c (insert_block): Remove.\n+\n 2009-04-16  Ian Lance Taylor  <iant@google.com>\n \n \t* cp-tree.h (enum tsubst_flags): Rename from enum tsubst_flags_t."}, {"sha": "6637d4f32b8d921520d70767c9439a4010592e34", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=149ccdd45da46cb04df8efea654a52cf55573c87", "patch": "@@ -4307,7 +4307,6 @@ extern void adjust_clone_args\t\t\t(tree);\n \n /* decl.c */\n extern tree poplevel\t\t\t\t(int, int, int);\n-extern void insert_block\t\t\t(tree);\n extern tree pushdecl\t\t\t\t(tree);\n extern tree pushdecl_maybe_friend\t\t(tree, bool);\n extern void cxx_init_decl_processing\t\t(void);"}, {"sha": "cd550f224cb09512d71c1d0836be1fd34de04b65", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149ccdd45da46cb04df8efea654a52cf55573c87/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=149ccdd45da46cb04df8efea654a52cf55573c87", "patch": "@@ -783,18 +783,6 @@ poplevel (int keep, int reverse, int functionbody)\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, block);\n }\n \n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-\n-void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  current_binding_level->blocks\n-    = chainon (current_binding_level->blocks, block);\n-}\n-\n /* Walk all the namespaces contained NAMESPACE, including NAMESPACE\n    itself, calling F for each.  The DATA is passed to F as well.  */\n "}]}