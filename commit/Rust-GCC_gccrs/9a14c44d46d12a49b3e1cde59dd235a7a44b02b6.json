{"sha": "9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExNGM0NGQ0NmQxMmE0OWIzZTFjZGU1OWRkMjM1YTdhNDRiMDJiNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-12-07T20:29:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-12-07T20:29:22Z"}, "message": "re PR fortran/44352 (ICE in string_to_single_character)\n\n2010-12-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44352\n        * trans-expr.c (gfc_string_to_single_character): Return if not\n        POINTER_TYPE_P.\n        (gfc_trans_string_copy): gfc_build_addr_expr if src or dest is\n        not a pointer.\n        (gfc_trans_string_copy): Make sure the argument string type\n        has a string length, fix indention, and remove not needed\n        gfc_build_addr_expr.\n\n2010-12-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44352\n        * gfortran.dg/string_4.f90: New.\n\nFrom-SVN: r167569", "tree": {"sha": "e7e1fc5703a091effe8fea53af8030ecc6d89a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e1fc5703a091effe8fea53af8030ecc6d89a3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f28ca2b9991aad21f2ab96100bc51e2a7bf4cfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28ca2b9991aad21f2ab96100bc51e2a7bf4cfba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28ca2b9991aad21f2ab96100bc51e2a7bf4cfba"}], "stats": {"total": 114, "additions": 94, "deletions": 20}, "files": [{"sha": "957ee8be97c59f067df2ea6c7ae01093c44631c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "patch": "@@ -1,3 +1,14 @@\n+2010-12-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44352\n+\t* trans-expr.c (gfc_string_to_single_character): Return if not\n+\tPOINTER_TYPE_P.\n+\t(gfc_trans_string_copy): gfc_build_addr_expr if src or dest is\n+\tnot a pointer.\n+\t(gfc_trans_string_copy): Make sure the argument string type\n+\thas a string length, fix indention, and remove not needed\n+\tgfc_build_addr_expr.\n+\n 2010-12-04  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/46794"}, {"sha": "72a7c2c9015ec685b8cdc54c1ecf1dcd58513485", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "patch": "@@ -1438,9 +1438,9 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n tree\n gfc_string_to_single_character (tree len, tree str, int kind)\n {\n-  gcc_assert (POINTER_TYPE_P (TREE_TYPE (str)));\n \n-  if (!INTEGER_CST_P (len) || TREE_INT_CST_HIGH (len) != 0)\n+  if (!INTEGER_CST_P (len) || TREE_INT_CST_HIGH (len) != 0\n+      || !POINTER_TYPE_P (TREE_TYPE (str)))\n     return NULL_TREE;\n \n   if (TREE_INT_CST_LOW (len) == 1)\n@@ -3826,12 +3826,12 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n \t\t\t  fold_convert (size_type_node,\n \t\t\t\t\tTYPE_SIZE_UNIT (chartype)));\n \n-  if (dlength)\n+  if (dlength && POINTER_TYPE_P (TREE_TYPE (dest)))\n     dest = fold_convert (pvoid_type_node, dest);\n   else\n     dest = gfc_build_addr_expr (pvoid_type_node, dest);\n \n-  if (slength)\n+  if (slength && POINTER_TYPE_P (TREE_TYPE (src)))\n     src = fold_convert (pvoid_type_node, src);\n   else\n     src = gfc_build_addr_expr (pvoid_type_node, src);\n@@ -3906,35 +3906,42 @@ gfc_conv_statement_function (gfc_se * se, gfc_expr * expr)\n       gcc_assert (fargs->sym->attr.dimension == 0);\n       fsym = fargs->sym;\n \n-      /* Create a temporary to hold the value.  */\n-      type = gfc_typenode_for_spec (&fsym->ts);\n-      temp_vars[n] = gfc_create_var (type, fsym->name);\n-\n       if (fsym->ts.type == BT_CHARACTER)\n         {\n \t  /* Copy string arguments.  */\n-          tree arglen;\n+\t  tree arglen;\n \n-          gcc_assert (fsym->ts.u.cl && fsym->ts.u.cl->length\n+\t  gcc_assert (fsym->ts.u.cl && fsym->ts.u.cl->length\n \t\t      && fsym->ts.u.cl->length->expr_type == EXPR_CONSTANT);\n \n-          arglen = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n-          tmp = gfc_build_addr_expr (build_pointer_type (type),\n-\t\t\t\t     temp_vars[n]);\n+\t  /* Create a temporary to hold the value.  */\n+          if (fsym->ts.u.cl->backend_decl == NULL_TREE)\n+\t     fsym->ts.u.cl->backend_decl\n+\t\t= gfc_conv_constant_to_tree (fsym->ts.u.cl->length);\n \n-          gfc_conv_expr (&rse, args->expr);\n-          gfc_conv_string_parameter (&rse);\n-          gfc_add_block_to_block (&se->pre, &lse.pre);\n-          gfc_add_block_to_block (&se->pre, &rse.pre);\n+\t  type = gfc_get_character_type (fsym->ts.kind, fsym->ts.u.cl);\n+\t  temp_vars[n] = gfc_create_var (type, fsym->name);\n+\n+\t  arglen = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n+\n+\t  gfc_conv_expr (&rse, args->expr);\n+\t  gfc_conv_string_parameter (&rse);\n+\t  gfc_add_block_to_block (&se->pre, &lse.pre);\n+\t  gfc_add_block_to_block (&se->pre, &rse.pre);\n \n-\t  gfc_trans_string_copy (&se->pre, arglen, tmp, fsym->ts.kind,\n+\t  gfc_trans_string_copy (&se->pre, arglen, temp_vars[n], fsym->ts.kind,\n \t\t\t\t rse.string_length, rse.expr, fsym->ts.kind);\n-          gfc_add_block_to_block (&se->pre, &lse.post);\n-          gfc_add_block_to_block (&se->pre, &rse.post);\n+\t  gfc_add_block_to_block (&se->pre, &lse.post);\n+\t  gfc_add_block_to_block (&se->pre, &rse.post);\n         }\n       else\n         {\n           /* For everything else, just evaluate the expression.  */\n+\n+\t  /* Create a temporary to hold the value.  */\n+\t  type = gfc_typenode_for_spec (&fsym->ts);\n+\t  temp_vars[n] = gfc_create_var (type, fsym->name);\n+\n           gfc_conv_expr (&lse, args->expr);\n \n           gfc_add_block_to_block (&se->pre, &lse.pre);"}, {"sha": "c2016451054660868709e41bdea8c00628495a90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "patch": "@@ -1,3 +1,8 @@\n+2010-12-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44352\n+\t* gfortran.dg/string_4.f90: New.\n+\n 2010-12-07  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/44676"}, {"sha": "12f501bb9ab90c0871106f014d5ec960fafe9bde", "filename": "gcc/testsuite/gfortran.dg/string_4.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a14c44d46d12a49b3e1cde59dd235a7a44b02b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_4.f90?ref=9a14c44d46d12a49b3e1cde59dd235a7a44b02b6", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do compile }\n+! { dg-options \"\" }\n+! (options to disable warnings about statement functions etc.)\n+!\n+! PR fortran/44352\n+!\n+! Contributed by Vittorio Zecca\n+!\n+\n+      SUBROUTINE TEST1()\n+      implicit real*8 (a-h,o-z)\n+      character*32 ddname,stmtfnt1\n+      stmtfnt1(x)=   'h810 e=0.01         '\n+      ddname=stmtfnt1(0.d0)\n+      if (ddname /= \"h810 e=0.01\") call abort()\n+      END\n+\n+      SUBROUTINE TEST2()\n+      implicit none\n+      character(2)  :: ddname,stmtfnt2\n+      real :: x\n+      stmtfnt2(x)=   'x'\n+      ddname=stmtfnt2(0.0)\n+      if(ddname /= 'x') call abort()\n+      END\n+\n+      SUBROUTINE TEST3()\n+      implicit real*8 (a-h,o-z)\n+      character*32 ddname,dname\n+      character*2 :: c\n+      dname(c) = 'h810 e=0.01         '\n+      ddname=dname(\"w \")\n+      if (ddname /= \"h810 e=0.01\") call abort()\n+      END\n+\n+      SUBROUTINE TEST4()\n+      implicit real*8 (a-h,o-z)\n+      character*32 ddname,dname\n+      character*2 :: c\n+      dname(c) = 'h810 e=0.01         '\n+      c = 'aa'\n+      ddname=dname(\"w \")\n+      if (ddname /= \"h810 e=0.01\") call abort()\n+      if (c /= \"aa\") call abort()\n+      END\n+\n+      call test1()\n+      call test2()\n+      call test3()\n+      call test4()\n+      end"}]}