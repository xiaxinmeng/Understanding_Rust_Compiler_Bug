{"sha": "b7551676632af6f5641aaeb500acc566c4e20922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1NTE2NzY2MzJhZjZmNTY0MWFhZWI1MDBhY2M1NjZjNGUyMDkyMg==", "commit": {"author": {"name": "Doug Kwan", "email": "dougkwan@google.com", "date": "2009-03-28T11:10:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-28T11:10:06Z"}, "message": "Bring from lto-branch:\n\n\t2008-09-03  Doug Kwan  <dougkwan@google.com>\n\n\t* cgraphbuild.c (initialize_inline_failed): Use cgraph_inline_failed_t\n\tenums instead of reason strings.\n\t* cgraph.c (cgraph_create_edge): Same.\n\t(cgraph_inline_failed_string): New function.\n\t* cgraph.h (cgraph_inline_failed_t): New enum type.\n\t(cgraph_inline_failed_string): New prototype.\n\t(struct cgraph_edge): Change type of INLINED_FAILED from constant\n\tchar pointer to cgraph_inline_failed_t.\n\t(cgraph_inline_p): Adjust prototype to use cgraph_inline_failed_t.\n\t(cgraph_default_inline_p): Ditto.\n\t* gcc/cgraphunit.c (cgraph_inline_p): Change type of parameter REASON\n\tto cgraph_inline_failed_t pointer.\n\t* cif-code.def: New file.\n\t* ipa-inline.c (cgraph_mark_inline_edge): Use an enum instead of a\n\treason string.\n\t(cgraph_check_inline_limits): Change type of REASON to pointer to\n\tcgraph_inline_failed_t.  Replace reason strings with enums.\n\t(cgraph_default_inline_p): Ditto.\n\t(cgraph_recursive_inlining_p): Ditto.\n\t(update_caller_keys): Change type of FAILED_REASON to\n\tcgraph_inline_failed_t.\n\t(cgraph_set_inline_failed): Change type of REASON to pointer to\n\tcgraph_inline_failed_t.  Call cgraph_inline_failed_string to\n\tconvert enums to strings for text output.\n\t(cgraph_decide_inlining_of_small_function): Change FAILED_REASON\n\tto be of type cgraph_inline_failed_t.  Replace reason strings with\n\tenums.  Call cgraph_inline_failed_string to covert enums\n\tto strings for text output.\n\t(cgraph_decide_inlining): Replace reason strings with enums.\n\t(cgraph_decide_inlining_incrementally): Change type of FAILED_REASON\n\tto cgraph_inline_failed_t type.  Call cgraph_inline_failed_string\n\tfor text output.\n\t* tree-inline.c (expand_call_inline): Change type of REASON\n\tto cgraph_inline_failed_t.  Replace reason strings with enums.\n\tCall cgraph_inline_failed_string for text output.\n\t* Makefile.in (CGRAPH_H): Add cif-code.def to dependencies.\n\t(cgraph.o): Ditto.\n\nFrom-SVN: r145177", "tree": {"sha": "51f26aa885988f22866a2cb3adc740907c3223bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f26aa885988f22866a2cb3adc740907c3223bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7551676632af6f5641aaeb500acc566c4e20922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7551676632af6f5641aaeb500acc566c4e20922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7551676632af6f5641aaeb500acc566c4e20922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7551676632af6f5641aaeb500acc566c4e20922/comments", "author": {"login": "dougkwan", "id": 1399231, "node_id": "MDQ6VXNlcjEzOTkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1399231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dougkwan", "html_url": "https://github.com/dougkwan", "followers_url": "https://api.github.com/users/dougkwan/followers", "following_url": "https://api.github.com/users/dougkwan/following{/other_user}", "gists_url": "https://api.github.com/users/dougkwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dougkwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dougkwan/subscriptions", "organizations_url": "https://api.github.com/users/dougkwan/orgs", "repos_url": "https://api.github.com/users/dougkwan/repos", "events_url": "https://api.github.com/users/dougkwan/events{/privacy}", "received_events_url": "https://api.github.com/users/dougkwan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61a05df17ccd6fd0801571dae07309ca5236d9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a05df17ccd6fd0801571dae07309ca5236d9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a05df17ccd6fd0801571dae07309ca5236d9ec"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "48dbabffbed0e08485da3724f36cce70722d7a7e", "filename": "gcc/cif-code.def", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7551676632af6f5641aaeb500acc566c4e20922/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7551676632af6f5641aaeb500acc566c4e20922/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=b7551676632af6f5641aaeb500acc566c4e20922", "patch": "@@ -0,0 +1,86 @@\n+/* This file contains the definitions of the cgraph_inline_failed_t\n+   enums used in GCC.\n+\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+   Contributed by Doug Kwan <dougkwan@google.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* The format of this file is\n+   DEFCIFCODE(code, string).\n+\n+   Where symbol is the enumeration name without the ``''.\n+   The argument STRING is a explain the failure.  Except for OK,\n+   which is a NULL pointer.  */\n+\n+/* Inlining successful.  This must be the first code.  */\n+DEFCIFCODE(OK , NULL)\n+\n+/* Inlining failed for an unspecified reason.  */\n+DEFCIFCODE(UNSPECIFIED , \"\")\n+\n+/* Function has not be considered for inlining.  This is the code for\n+   functions that have not been rejected for inlining yet.  */\n+DEFCIFCODE(FUNCTION_NOT_CONSIDERED,\n+\t   N_(\"function not considered for inlining\"))\n+\n+/* Inlining failed owing to unavailable function body.  */\n+DEFCIFCODE(BODY_NOT_AVAILABLE, N_(\"function body not available\"))\n+\n+DEFCIFCODE(REDEFINED_EXTERN_INLINE,\n+           N_(\"redefined extern inline functions are not considered for \"\n+              \"inlining\"))\n+\n+/* Function is not inlinable.  */\n+DEFCIFCODE(FUNCTION_NOT_INLINABLE, N_(\"function not inlinable\"))\n+\n+/* Function is not an inlining candidate.  */\n+DEFCIFCODE(FUNCTION_NOT_INLINE_CANDIDATE, N_(\"function not inline candidate\"))\n+\n+/* Inlining failed because of various limit parameters.  */\n+DEFCIFCODE(LARGE_FUNCTION_GROWTH_LIMIT,\n+\t   N_(\"--param large-function-growth limit reached\"))\n+DEFCIFCODE(LARGE_STACK_FRAME_GROWTH_LIMIT,\n+\t   N_(\"--param large-stack-frame-growth limit reached\"))\n+DEFCIFCODE(MAX_INLINE_INSNS_SINGLE_LIMIT,\n+\t   N_(\"--param max-inline-insns-single limit reached\"))\n+DEFCIFCODE(MAX_INLINE_INSNS_AUTO_LIMIT,\n+\t   N_(\"--param max-inline-insns-auto limit reached\"))\n+DEFCIFCODE(INLINE_UNIT_GROWTH_LIMIT,\n+\t   N_(\"--param inline-unit-growth limit reached\")) \n+\n+/* Recursive inlining.  */\n+DEFCIFCODE(RECURSIVE_INLINING, N_(\"recursive inlining\"))\n+\n+/* Call is unlikely.  */\n+DEFCIFCODE(UNLIKELY_CALL, N_(\"call is unlikely and code size would grow\"))\n+\n+/* Function is not declared as an inline.  */\n+DEFCIFCODE(NOT_DECLARED_INLINED,\n+\t   N_(\"function not declared inline and code size would grow\"))\n+\n+/* Inlining suppressed due to size optimization.  */\n+DEFCIFCODE(OPTIMIZING_FOR_SIZE,\n+\t   N_(\"optimizing for size and code size would grow\"))\n+\n+/* Inlining failed because of mismatched options or arguments.  */\n+DEFCIFCODE(TARGET_OPTION_MISMATCH, N_(\"target specific option mismatch\"))\n+DEFCIFCODE(MISMATCHED_ARGUMENTS, N_(\"mismatched arguments\"))\n+\n+/* Call was originally indirect.  */\n+DEFCIFCODE(ORIGINALLY_INDIRECT_CALL,\n+\t   N_(\"originally indirect function call not considered for inlining\"))"}]}