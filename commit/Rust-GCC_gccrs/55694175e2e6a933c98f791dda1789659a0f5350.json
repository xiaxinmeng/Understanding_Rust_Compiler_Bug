{"sha": "55694175e2e6a933c98f791dda1789659a0f5350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2OTQxNzVlMmU2YTkzM2M5OGY3OTFkZGExNzg5NjU5YTBmNTM1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-02-19T19:03:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-02-19T19:03:19Z"}, "message": "re PR c++/60046 (internal compiler error: in nothrow_spec_p, at cp/except.c:1280)\n\n\tPR c++/60046\n\t* pt.c (maybe_instantiate_noexcept): Don't instantiate exception\n\tspec from template context.\n\nFrom-SVN: r207917", "tree": {"sha": "d736596d9a8a025098dc4310e105c51fd509dd4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d736596d9a8a025098dc4310e105c51fd509dd4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55694175e2e6a933c98f791dda1789659a0f5350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55694175e2e6a933c98f791dda1789659a0f5350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55694175e2e6a933c98f791dda1789659a0f5350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55694175e2e6a933c98f791dda1789659a0f5350/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c9f5f333ab764cc2e4cdde8d7da98a65a6d8498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9f5f333ab764cc2e4cdde8d7da98a65a6d8498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9f5f333ab764cc2e4cdde8d7da98a65a6d8498"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "9a2d44775f77da52f312c2b3c63591852ad8ceec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55694175e2e6a933c98f791dda1789659a0f5350", "patch": "@@ -1,3 +1,9 @@\n+2014-02-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60046\n+\t* pt.c (maybe_instantiate_noexcept): Don't instantiate exception\n+\tspec from template context.\n+\n 2014-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/56563"}, {"sha": "6477fce7aab36dd15ecb176ee95d557bef8c443c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=55694175e2e6a933c98f791dda1789659a0f5350", "patch": "@@ -19285,6 +19285,10 @@ maybe_instantiate_noexcept (tree fn)\n {\n   tree fntype, spec, noex, clone;\n \n+  /* Don't instantiate a noexcept-specification from template context.  */\n+  if (processing_template_decl)\n+    return;\n+\n   if (DECL_CLONED_FUNCTION_P (fn))\n     fn = DECL_CLONED_FUNCTION (fn);\n   fntype = TREE_TYPE (fn);"}, {"sha": "7aab0f43c4ea28ae8cc86ad6f7e703034c1bf543", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept22.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55694175e2e6a933c98f791dda1789659a0f5350/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept22.C?ref=55694175e2e6a933c98f791dda1789659a0f5350", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/60046\n+// { dg-require-effective-target c++11 }\n+\n+constexpr bool foo () { return noexcept (true); }\n+template <typename T>\n+struct V\n+{\n+  void bar (V &) noexcept (foo ()) {}\n+};\n+template <typename T>\n+struct W : public V <int>\n+{\n+  void bar (W &x) { V <int>::bar (x); }\n+};\n+\n+int\n+main ()\n+{\n+  W <int> a, b;\n+  a.bar (b);\n+}"}]}