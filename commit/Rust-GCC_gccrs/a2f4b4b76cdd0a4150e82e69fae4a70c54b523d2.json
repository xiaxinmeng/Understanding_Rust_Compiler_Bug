{"sha": "a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "node_id": "C_kwDOANBUbNoAKGEyZjRiNGI3NmNkZDBhNDE1MGU4MmU2OWZhZTRhNzBjNTRiNTIzZDI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-12-10T14:28:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-12-10T22:51:24Z"}, "message": "jit: set DECL_CONTEXT of RESULT_DECL [PR103562]\n\nlibgccjit was failing to set the DECL_CONTEXT of function RESULT_DECLs,\nleading to them failing to be properly handled by the inlining machinery.\nFixed thusly.\n\ngcc/jit/ChangeLog:\n\tPR jit/103562\n\t* jit-playback.c (gcc::jit::playback::context::new_function): Set\n\tDECL_CONTEXT of the result_decl.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/103562\n\t* jit.dg/all-non-failing-tests.h: Add comment about...\n\t* jit.dg/test-pr103562.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "0a5ba1d8d2be853797d6eb330d69e7fae5507499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5ba1d8d2be853797d6eb330d69e7fae5507499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2eee7b29ed2afbc7edea6f3da7e6c8f70b1a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2eee7b29ed2afbc7edea6f3da7e6c8f70b1a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2eee7b29ed2afbc7edea6f3da7e6c8f70b1a4e"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "783a037b11d23429eccd95ca57e1e317b732fcc8", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "patch": "@@ -473,6 +473,7 @@ new_function (location *loc,\n   DECL_ARTIFICIAL (resdecl) = 1;\n   DECL_IGNORED_P (resdecl) = 1;\n   DECL_RESULT (fndecl) = resdecl;\n+  DECL_CONTEXT (resdecl) = fndecl;\n \n   if (builtin_id)\n     {"}, {"sha": "3663f726a99a574b43609ec91569ea7858ee8afe", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "patch": "@@ -230,6 +230,9 @@\n #undef create_code\n #undef verify_code\n \n+/* test-pr103562.c: We don't add this one, since it touches\n+   the optimization level of the context as a whole.  */\n+\n /* test-pr66700-observing-write-through-ptr.c */\n #define create_code create_code_pr66700_observing_write_through_ptr\n #define verify_code verify_code_pr66700_observing_write_through_ptr"}, {"sha": "de361b96bd12da9059117fb0954173ff4d50ccf0", "filename": "gcc/testsuite/jit.dg/test-pr103562.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr103562.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr103562.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr103562.c?ref=a2f4b4b76cdd0a4150e82e69fae4a70c54b523d2", "patch": "@@ -0,0 +1,62 @@\n+#include <libgccjit.h>\n+#include \"harness.h\"\n+\n+struct my_struct { long a; long b; long c; };\n+\n+void create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+\t/* Create the equivalent of:\n+\t\tstruct my_struct { long a; long b; long c; };\n+\t\tstatic struct my_struct deref(struct my_struct *ptr) { return *ptr; } \n+\t\tlong get_a(struct my_struct *s) { return deref(s).a; }\n+\t   and compile it at -O1.  */\n+\tgcc_jit_context_set_int_option(ctxt, GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL, 1);\n+\n+\tgcc_jit_type *long_type = gcc_jit_context_get_type(ctxt, GCC_JIT_TYPE_LONG);\n+\tgcc_jit_field* fields[3] = {\n+\t\tgcc_jit_context_new_field(ctxt, NULL, long_type, \"a\"),\n+\t\tgcc_jit_context_new_field(ctxt, NULL, long_type, \"b\"),\n+\t\tgcc_jit_context_new_field(ctxt, NULL, long_type, \"c\"),\n+\t};\n+\tgcc_jit_struct *my_struct =\n+\t\tgcc_jit_context_new_struct_type(ctxt, NULL, \"my_struct\", 3, fields);\n+\tgcc_jit_type *my_struct_type = gcc_jit_struct_as_type(my_struct);\n+\tgcc_jit_type *my_struct_ptr_type = gcc_jit_type_get_pointer(my_struct_type);\n+\n+\t/* struct my_struct deref(struct my_struct *ptr) { return *ptr; } */\n+\tgcc_jit_param *param_deref =\n+\t\tgcc_jit_context_new_param(ctxt, NULL, my_struct_ptr_type, \"ptr\");\n+\tgcc_jit_function *func_deref = gcc_jit_context_new_function(\n+\t\tctxt, NULL, GCC_JIT_FUNCTION_INTERNAL,\n+\t\tmy_struct_type, \"deref\",\n+\t\t1, &param_deref,\n+\t\t0);\n+\tgcc_jit_block *blockDeref = gcc_jit_function_new_block(func_deref, NULL);\n+\tgcc_jit_block_end_with_return(\n+\t\tblockDeref, NULL,\n+\t\tgcc_jit_lvalue_as_rvalue(gcc_jit_rvalue_dereference(gcc_jit_param_as_rvalue(param_deref), NULL)));\n+\n+\t/* long get_a(struct my_struct *s) { return deref(s).a; } */\n+\tgcc_jit_param *param_get_a = gcc_jit_context_new_param(ctxt, NULL, my_struct_ptr_type, \"s\");\n+\tgcc_jit_function *func_get_a = gcc_jit_context_new_function(\n+\t\tctxt, NULL, GCC_JIT_FUNCTION_EXPORTED,\n+\t\tlong_type, \"get_a\",\n+\t\t1, &param_get_a,\n+\t\t0);\n+\tgcc_jit_block *block_get_a = gcc_jit_function_new_block(func_get_a, NULL);\n+\tgcc_jit_rvalue *argsForDeref[1] = {gcc_jit_param_as_rvalue(param_get_a)};\n+\tgcc_jit_rvalue *callDeref = gcc_jit_context_new_call(ctxt, NULL, func_deref, 1, argsForDeref);\n+\tgcc_jit_block_end_with_return(\n+\t\tblock_get_a, NULL,\n+\t\tgcc_jit_rvalue_access_field(callDeref, NULL, fields[0]));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef long(*fn_type) (struct my_struct*);\n+  fn_type get_a = (fn_type) gcc_jit_result_get_code(result, \"get_a\");\n+\n+  struct my_struct s = {1, 2, 3};\n+  CHECK_VALUE (get_a(&s), 1);\n+}"}]}