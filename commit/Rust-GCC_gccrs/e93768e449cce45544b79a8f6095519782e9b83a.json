{"sha": "e93768e449cce45544b79a8f6095519782e9b83a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzNzY4ZTQ0OWNjZTQ1NTQ0Yjc5YThmNjA5NTUxOTc4MmU5YjgzYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-21T20:24:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-21T20:24:19Z"}, "message": "bb-reorder.c: Use rtx_insn\n\ngcc/\n2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n\n\t* bb-reorder.c (copy_bb_p): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(get_uncond_jump_length): Likewise for locals \"label\", \"jump\".\n\t(fix_up_crossing_landing_pad): Likewise for locals \"new_label\",\n\t\"jump\", \"insn\".\n\t(add_labels_and_missing_jumps): Likewise for local \"new_jump\".\n\t(fix_up_fall_thru_edges): Likewise for local \"old_jump\".\n\t(find_jump_block): Likewise for local \"insn\".\n\t(fix_crossing_conditional_branches): Likewise for locals\n\t\"old_jump\", \"new_jump\".\n\t(fix_crossing_unconditional_branches): Likewise for locals\n\t\"last_insn\", \"indirect_jump_sequence\", \"jump_insn\", \"cur_insn\".\n\t(pass_duplicate_computed_gotos::execute): Likewise for local \"insn\".\n\nFrom-SVN: r214286", "tree": {"sha": "b906a89e4e36e7202c19c28c34c99528057c5888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b906a89e4e36e7202c19c28c34c99528057c5888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93768e449cce45544b79a8f6095519782e9b83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93768e449cce45544b79a8f6095519782e9b83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93768e449cce45544b79a8f6095519782e9b83a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93768e449cce45544b79a8f6095519782e9b83a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dfa938f4ad6f10eddfde517fdcd572eca34de70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa938f4ad6f10eddfde517fdcd572eca34de70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfa938f4ad6f10eddfde517fdcd572eca34de70"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "7376bf645430403b6572023f0fdbd3ee485f5d51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93768e449cce45544b79a8f6095519782e9b83a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93768e449cce45544b79a8f6095519782e9b83a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e93768e449cce45544b79a8f6095519782e9b83a", "patch": "@@ -1,3 +1,19 @@\n+2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* bb-reorder.c (copy_bb_p): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(get_uncond_jump_length): Likewise for locals \"label\", \"jump\".\n+\t(fix_up_crossing_landing_pad): Likewise for locals \"new_label\",\n+\t\"jump\", \"insn\".\n+\t(add_labels_and_missing_jumps): Likewise for local \"new_jump\".\n+\t(fix_up_fall_thru_edges): Likewise for local \"old_jump\".\n+\t(find_jump_block): Likewise for local \"insn\".\n+\t(fix_crossing_conditional_branches): Likewise for locals\n+\t\"old_jump\", \"new_jump\".\n+\t(fix_crossing_unconditional_branches): Likewise for locals\n+\t\"last_insn\", \"indirect_jump_sequence\", \"jump_insn\", \"cur_insn\".\n+\t(pass_duplicate_computed_gotos::execute): Likewise for local \"insn\".\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* auto-inc-dec.c (struct inc_insn): Strengthen field \"insn\" from"}, {"sha": "d00acf490ad0ebff37d2387ef88619fd209d595f", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93768e449cce45544b79a8f6095519782e9b83a/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93768e449cce45544b79a8f6095519782e9b83a/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=e93768e449cce45544b79a8f6095519782e9b83a", "patch": "@@ -1331,7 +1331,7 @@ copy_bb_p (const_basic_block bb, int code_may_grow)\n {\n   int size = 0;\n   int max_size = uncond_jump_length;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (!bb->frequency)\n     return false;\n@@ -1371,7 +1371,7 @@ copy_bb_p (const_basic_block bb, int code_may_grow)\n int\n get_uncond_jump_length (void)\n {\n-  rtx label, jump;\n+  rtx_insn *label, *jump;\n   int length;\n \n   label = emit_label_before (gen_label_rtx (), get_insns ());\n@@ -1393,7 +1393,8 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n {\n   eh_landing_pad new_lp;\n   basic_block new_bb, last_bb, post_bb;\n-  rtx new_label, jump, post_label;\n+  rtx_insn *new_label, *jump;\n+  rtx post_label;\n   unsigned new_partition;\n   edge_iterator ei;\n   edge e;\n@@ -1434,7 +1435,7 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n   for (ei = ei_start (old_bb->preds); (e = ei_safe_edge (ei)) != NULL; )\n     if (BB_PARTITION (e->src) == new_partition)\n       {\n-\trtx insn = BB_END (e->src);\n+\trtx_insn *insn = BB_END (e->src);\n \trtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n \n \tgcc_assert (note != NULL);\n@@ -1732,7 +1733,8 @@ add_labels_and_missing_jumps (vec<edge> crossing_edges)\n     {\n       basic_block src = e->src;\n       basic_block dest = e->dest;\n-      rtx label, new_jump;\n+      rtx label;\n+      rtx_insn *new_jump;\n \n       if (dest == EXIT_BLOCK_PTR_FOR_FN (cfun))\n \tcontinue;\n@@ -1789,7 +1791,7 @@ fix_up_fall_thru_edges (void)\n   edge e;\n   bool cond_jump_crosses;\n   int invert_worked;\n-  rtx old_jump;\n+  rtx_insn *old_jump;\n   rtx fall_thru_label;\n \n   FOR_EACH_BB_FN (cur_bb, cfun)\n@@ -1936,7 +1938,7 @@ find_jump_block (basic_block jump_dest)\n {\n   basic_block source_bb = NULL;\n   edge e;\n-  rtx insn;\n+  rtx_insn *insn;\n   edge_iterator ei;\n \n   FOR_EACH_EDGE (e, ei, jump_dest->preds)\n@@ -1986,7 +1988,7 @@ fix_crossing_conditional_branches (void)\n   edge succ2;\n   edge crossing_edge;\n   edge new_edge;\n-  rtx old_jump;\n+  rtx_insn *old_jump;\n   rtx set_src;\n   rtx old_label = NULL_RTX;\n   rtx new_label;\n@@ -2053,7 +2055,7 @@ fix_crossing_conditional_branches (void)\n \t      else\n \t\t{\n \t\t  basic_block last_bb;\n-\t\t  rtx new_jump;\n+\t\t  rtx_insn *new_jump;\n \n \t\t  /* Create new basic block to be dest for\n \t\t     conditional jump.  */\n@@ -2113,13 +2115,13 @@ static void\n fix_crossing_unconditional_branches (void)\n {\n   basic_block cur_bb;\n-  rtx last_insn;\n+  rtx_insn *last_insn;\n   rtx label;\n   rtx label_addr;\n-  rtx indirect_jump_sequence;\n-  rtx jump_insn = NULL_RTX;\n+  rtx_insn *indirect_jump_sequence;\n+  rtx_insn *jump_insn = NULL;\n   rtx new_reg;\n-  rtx cur_insn;\n+  rtx_insn *cur_insn;\n   edge succ;\n \n   FOR_EACH_BB_FN (cur_bb, cfun)\n@@ -2441,7 +2443,7 @@ pass_duplicate_computed_gotos::execute (function *fun)\n      mark it in the candidates.  */\n   FOR_EACH_BB_FN (bb, fun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       edge e;\n       edge_iterator ei;\n       int size, all_flags;"}]}