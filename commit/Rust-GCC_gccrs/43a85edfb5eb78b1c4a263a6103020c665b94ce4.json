{"sha": "43a85edfb5eb78b1c4a263a6103020c665b94ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhODVlZGZiNWViNzhiMWM0YTI2M2E2MTAzMDIwYzY2NWI5NGNlNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-23T23:36:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-23T23:36:34Z"}, "message": "sfinae47.C: New.\n\n2013-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/sfinae47.C: New.\n\nFrom-SVN: r200353", "tree": {"sha": "de251c5241471294506e59094ff6c95eeaa4e3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de251c5241471294506e59094ff6c95eeaa4e3d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43a85edfb5eb78b1c4a263a6103020c665b94ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a85edfb5eb78b1c4a263a6103020c665b94ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a85edfb5eb78b1c4a263a6103020c665b94ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a85edfb5eb78b1c4a263a6103020c665b94ce4/comments", "author": null, "committer": null, "parents": [{"sha": "b7df379fdf7114e5e38d419256907535988686d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7df379fdf7114e5e38d419256907535988686d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7df379fdf7114e5e38d419256907535988686d2"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "084a20f87907014c9bc91f31189a0c1e5d522e61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a85edfb5eb78b1c4a263a6103020c665b94ce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a85edfb5eb78b1c4a263a6103020c665b94ce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43a85edfb5eb78b1c4a263a6103020c665b94ce4", "patch": "@@ -1,3 +1,7 @@\n+2013-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/sfinae47.C: New.\n+\n 2013-06-23  Oleg Endo <olegendo@gcc.gnu.org>\n \n \tPR target/52483\n@@ -9,13 +13,13 @@\n \n 2013-06-23  Sriraman Tallam  <tmsriram@google.com>\n \n-\t* testsuite/gcc.target/i386/intrinsics_1.c: New test.\n-\t* testsuite/gcc.target/i386/intrinsics_2.c: Ditto.\n-\t* testsuite/gcc.target/i386/intrinsics_3.c: Ditto.\n-\t* testsuite/gcc.target/i386/intrinsics_4.c: Ditto.\n-\t* testsuite/gcc.target/i386/intrinsics_5.c: Ditto.\n-\t* testsuite/gcc.target/i386/intrinsics_6.c: Ditto.\n-\t* testsuite/gcc.target/i386/avx-1.c: Provide macros for builtins\n+\t* gcc.target/i386/intrinsics_1.c: New test.\n+\t* gcc.target/i386/intrinsics_2.c: Ditto.\n+\t* gcc.target/i386/intrinsics_3.c: Ditto.\n+\t* gcc.target/i386/intrinsics_4.c: Ditto.\n+\t* gcc.target/i386/intrinsics_5.c: Ditto.\n+\t* gcc.target/i386/intrinsics_6.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Provide macros for builtins\n \tneeding immediate arguments in f16cintrin.h and rtmintrin.h.\n \n 2013-06-21  Tobias Burnus  <burnus@net-b.de>"}, {"sha": "1058a2864c33e9dfdca89453c96a5cf686175506", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae47.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a85edfb5eb78b1c4a263a6103020c665b94ce4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a85edfb5eb78b1c4a263a6103020c665b94ce4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae47.C?ref=43a85edfb5eb78b1c4a263a6103020c665b94ce4", "patch": "@@ -0,0 +1,25 @@\n+// Source: Comment 16 of PR51213\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+T && declval();\n+\n+template <class T>\n+constexpr auto hasSize(int) -> decltype(declval<T&>().size(), bool())\n+{ return true; }\n+\n+template <class T>\n+constexpr bool hasSize(...)\n+{ return false; }\n+\n+struct A\n+{\n+  int size();\n+};\n+\n+struct B : private A\n+{\n+};\n+\n+static_assert(hasSize<A>(0),  \"A\");\n+static_assert(!hasSize<B>(0), \"B\");"}]}