{"sha": "ddda9d0f19611a053a759c415cc2f835c1051f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkYTlkMGYxOTYxMWEwNTNhNzU5YzQxNWNjMmY4MzVjMTA1MWYyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:35:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:35:01Z"}, "message": "checks.adb (Apply_Alignment_Check): Generate a warning if an object address is incompatible with its base type...\n\n\t* checks.adb (Apply_Alignment_Check): Generate a warning if an object\n\taddress is incompatible with its base type alignment constraints when\n\tthis can be decided statically.\n\nFrom-SVN: r92832", "tree": {"sha": "a12424801c50b7ad230a61217f9a9c0932fc0cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12424801c50b7ad230a61217f9a9c0932fc0cf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddda9d0f19611a053a759c415cc2f835c1051f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddda9d0f19611a053a759c415cc2f835c1051f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddda9d0f19611a053a759c415cc2f835c1051f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddda9d0f19611a053a759c415cc2f835c1051f22/comments", "author": null, "committer": null, "parents": [{"sha": "e6d50a9e9d71a8b5519de675e94e79e72be3a150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d50a9e9d71a8b5519de675e94e79e72be3a150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d50a9e9d71a8b5519de675e94e79e72be3a150"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "b26e4d981db46e41a304c82afaa640c1f8438a74", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddda9d0f19611a053a759c415cc2f835c1051f22/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddda9d0f19611a053a759c415cc2f835c1051f22/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=ddda9d0f19611a053a759c415cc2f835c1051f22", "patch": "@@ -467,7 +467,8 @@ package body Checks is\n    ---------------------------\n \n    procedure Apply_Alignment_Check (E : Entity_Id; N : Node_Id) is\n-      AC   : constant Node_Id := Address_Clause (E);\n+      AC   : constant Node_Id   := Address_Clause (E);\n+      Typ  : constant Entity_Id := Etype (E);\n       Expr : Node_Id;\n       Loc  : Source_Ptr;\n \n@@ -506,16 +507,28 @@ package body Checks is\n       --  value is unacceptable at compile time.\n \n       if Compile_Time_Known_Value (Expr)\n-        and then Known_Alignment (E)\n+        and then (Known_Alignment (E) or else Known_Alignment (Typ))\n       then\n-         if Expr_Value (Expr) mod Alignment (E) /= 0 then\n-            Insert_Action (N,\n-               Make_Raise_Program_Error (Loc,\n-                 Reason => PE_Misaligned_Address_Value));\n-            Error_Msg_NE\n-              (\"?specified address for& not \" &\n-               \"consistent with alignment ('R'M 13.3(27))\", Expr, E);\n-         end if;\n+         declare\n+            AL : Uint := Alignment (Typ);\n+\n+         begin\n+            --  The object alignment might be more restrictive than the\n+            --  type alignment.\n+\n+            if Known_Alignment (E) then\n+               AL := Alignment (E);\n+            end if;\n+\n+            if Expr_Value (Expr) mod AL /= 0 then\n+               Insert_Action (N,\n+                  Make_Raise_Program_Error (Loc,\n+                    Reason => PE_Misaligned_Address_Value));\n+               Error_Msg_NE\n+                 (\"?specified address for& not \" &\n+                  \"consistent with alignment ('R'M 13.3(27))\", Expr, E);\n+            end if;\n+         end;\n \n       --  Here we do not know if the value is acceptable, generate\n       --  code to raise PE if alignment is inappropriate.\n@@ -1807,7 +1820,7 @@ package body Checks is\n       --  we only do this for discrete types, and not fixed-point or\n       --  floating-point types.\n \n-      --  The additional less-precise tests below catch these cases.\n+      --  The additional less-precise tests below catch these cases\n \n       --  Note: skip this if we are given a source_typ, since the point\n       --  of supplying a Source_Typ is to stop us looking at the expression.\n@@ -3628,7 +3641,7 @@ package body Checks is\n       then\n          return;\n \n-      --  No check required on the left-hand side of an assignment.\n+      --  No check required on the left-hand side of an assignment\n \n       elsif Nkind (Parent (Expr)) = N_Assignment_Statement\n         and then Expr = Name (Parent (Expr))\n@@ -3887,7 +3900,7 @@ package body Checks is\n    --  Start of processing for Find_Check\n \n    begin\n-      --  Establish default, to avoid warnings from GCC.\n+      --  Establish default, to avoid warnings from GCC\n \n       Check_Num := 0;\n \n@@ -4256,7 +4269,7 @@ package body Checks is\n       --         ..\n       --       Source_Base_Type(Target_Type'Last))]\n \n-      --  The conversions will always work and need no check.\n+      --  The conversions will always work and need no check\n \n       elsif In_Subrange_Of (Target_Type, Source_Base_Type) then\n          Insert_Action (N,\n@@ -6259,14 +6272,15 @@ package body Checks is\n                         then\n                            null;\n \n-                        --  If null range, no check needed.\n+                           --  If null range, no check needed\n+\n                         elsif\n                           Compile_Time_Known_Value (High_Bound (Opnd_Index))\n                             and then\n                           Compile_Time_Known_Value (Low_Bound (Opnd_Index))\n                             and then\n-                             Expr_Value (High_Bound (Opnd_Index)) <\n-                                 Expr_Value (Low_Bound (Opnd_Index))\n+                              Expr_Value (High_Bound (Opnd_Index)) <\n+                                  Expr_Value (Low_Bound (Opnd_Index))\n                         then\n                            null;\n "}]}