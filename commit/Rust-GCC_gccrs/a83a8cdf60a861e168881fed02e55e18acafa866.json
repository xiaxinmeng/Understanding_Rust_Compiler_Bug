{"sha": "a83a8cdf60a861e168881fed02e55e18acafa866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzYThjZGY2MGE4NjFlMTY4ODgxZmVkMDJlNTVlMThhY2FmYTg2Ng==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-06-12T16:01:32Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-06-12T16:01:32Z"}, "message": "fold-vec-store-vec_xst-char.c: New.\n\n\n[testsuite]\n\n    2018-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-char.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-double.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-float.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-int.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-store-vec_xst-short.c: New.\n\nFrom-SVN: r261506", "tree": {"sha": "82e7314bda12837c31790b4de089abf868a68d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e7314bda12837c31790b4de089abf868a68d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a83a8cdf60a861e168881fed02e55e18acafa866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83a8cdf60a861e168881fed02e55e18acafa866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83a8cdf60a861e168881fed02e55e18acafa866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83a8cdf60a861e168881fed02e55e18acafa866/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "965fa640e8492d152af80d5f5413563dee63df10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965fa640e8492d152af80d5f5413563dee63df10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965fa640e8492d152af80d5f5413563dee63df10"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "bdd01afa80393e0b6ab459a4d7143d42c45f7a14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -1,3 +1,13 @@\n+2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-short.c: New.\n+\n+\n 2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-char.c: New."}, {"sha": "4f5930aa909b3142e98a97b940eb475545b8df62", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-char.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-char.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_xst with char\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed char, signed long long, signed char );\n+BUILD_VAR_TEST( test2,  vector signed char, signed int, signed char );\n+BUILD_CST_TEST( test3,  vector signed char, 12, signed char );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned char, signed long long, unsigned char );\n+BUILD_VAR_TEST( test5,  vector unsigned char, signed int, unsigned char );\n+BUILD_CST_TEST( test6,  vector unsigned char, 12, unsigned char );\n+\n+BUILD_VAR_TEST( test7,  vector signed char, signed long long, vector signed char );\n+BUILD_VAR_TEST( test8,  vector signed char, signed int, vector signed char );\n+BUILD_CST_TEST( test9,  vector signed char, 12, vector signed char );\n+\n+BUILD_VAR_TEST( test10, vector unsigned char, signed long long, vector unsigned char );\n+BUILD_VAR_TEST( test11, vector unsigned char, signed int, vector unsigned char );\n+BUILD_CST_TEST( test12, vector unsigned char, 12, vector unsigned char );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "511d5fe72998eecbda057329630e81321ea1bfa6", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-double.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-double.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that overloaded built-ins for vec_xst with double\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector double, signed long long, double );\n+BUILD_VAR_TEST( test2,  vector double, signed int, double );\n+BUILD_CST_TEST( test3,  vector double, 12, double );\n+\n+BUILD_VAR_TEST( test7,  vector double, signed long long, vector double );\n+BUILD_VAR_TEST( test8,  vector double, signed int, vector double );\n+BUILD_CST_TEST( test9,  vector double, 12, vector double );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 6 } } */"}, {"sha": "13e6cb6e7af2e7ee391f3080025e9bd7b395c952", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-float.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-float.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that overloaded built-ins for vec_xst with float\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector float, signed long long, float );\n+BUILD_VAR_TEST( test2,  vector float, signed int, float );\n+BUILD_CST_TEST( test3,  vector float, 12, float );\n+\n+BUILD_VAR_TEST( test7,  vector float, signed long long, vector float );\n+BUILD_VAR_TEST( test8,  vector float, signed int, vector float );\n+BUILD_CST_TEST( test9,  vector float, 12, vector float );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 6 } } */"}, {"sha": "fd6ff78509bbadcf6161376f66d43c3f4ef5d303", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-int.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-int.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_xst with int\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed int, signed long long, signed int );\n+BUILD_VAR_TEST( test2,  vector signed int, signed int, signed int );\n+BUILD_CST_TEST( test3,  vector signed int, 12, signed int );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned int, signed long long, unsigned int );\n+BUILD_VAR_TEST( test5,  vector unsigned int, signed int, unsigned int );\n+BUILD_CST_TEST( test6,  vector unsigned int, 12, unsigned int );\n+\n+BUILD_VAR_TEST( test7,  vector signed int, signed long long, vector signed int );\n+BUILD_VAR_TEST( test8,  vector signed int, signed int, vector signed int );\n+BUILD_CST_TEST( test9,  vector signed int, 12, vector signed int );\n+\n+BUILD_VAR_TEST( test10, vector unsigned int, signed long long, vector unsigned int );\n+BUILD_VAR_TEST( test11, vector unsigned int, signed int, vector unsigned int );\n+BUILD_CST_TEST( test12, vector unsigned int, 12, vector unsigned int );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "a669481b0d8d8e8ae0f8fae2218e890df5678f72", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-longlong.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-longlong.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_xst with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed long long, signed long long, signed long long );\n+BUILD_VAR_TEST( test2,  vector signed long long, signed int, signed long long );\n+BUILD_CST_TEST( test3,  vector signed long long, 12, signed long long );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned long long, signed long long, unsigned long long );\n+BUILD_VAR_TEST( test5,  vector unsigned long long, signed int, unsigned long long );\n+BUILD_CST_TEST( test6,  vector unsigned long long, 12, unsigned long long );\n+\n+BUILD_VAR_TEST( test7,  vector signed long long, signed long long, vector signed long long );\n+BUILD_VAR_TEST( test8,  vector signed long long, signed int, vector signed long long );\n+BUILD_CST_TEST( test9,  vector signed long long, 12, vector signed long long );\n+\n+BUILD_VAR_TEST( test10, vector unsigned long long, signed long long, vector unsigned long long );\n+BUILD_VAR_TEST( test11, vector unsigned long long, signed int, vector unsigned long long );\n+BUILD_CST_TEST( test12,  vector unsigned long long, 12, vector unsigned long long );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}, {"sha": "78eae57fb23ae0ee525732082366f89f58e55caa", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-store-vec_xst-short.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83a8cdf60a861e168881fed02e55e18acafa866/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-store-vec_xst-short.c?ref=a83a8cdf60a861e168881fed02e55e18acafa866", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_xst with short\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, VALUE, VAR_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VALUE value, VAR_OFFSET offset, SAVETO * saveto) \t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, offset, saveto);\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, VALUE, CST_OFFSET, SAVETO)\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (VALUE value, SAVETO * saveto) \t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\tvec_xst (value, CST_OFFSET, saveto);\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed short, signed long long, signed short );\n+BUILD_VAR_TEST( test2,  vector signed short, signed int, signed short );\n+BUILD_CST_TEST( test3,  vector signed short, 12, signed short );\n+\n+BUILD_VAR_TEST( test4,  vector unsigned short, signed long long, unsigned short );\n+BUILD_VAR_TEST( test5,  vector unsigned short, signed int, unsigned short );\n+BUILD_CST_TEST( test6,  vector unsigned short, 12, unsigned short );\n+\n+BUILD_VAR_TEST( test7,  vector signed short, signed long long, vector signed short );\n+BUILD_VAR_TEST( test8,  vector signed short, signed int, vector signed short );\n+BUILD_CST_TEST( test9,  vector signed short, 12, vector signed short );\n+\n+BUILD_VAR_TEST( test10, vector unsigned short, signed long long, vector unsigned short );\n+BUILD_VAR_TEST( test11, vector unsigned short, signed int, vector unsigned short );\n+BUILD_CST_TEST( test12, vector unsigned short, 12, vector unsigned short );\n+\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M|\\mstxvd2x\\M|\\mstxvx\\M|\\mstvx\\M} 12 } } */"}]}