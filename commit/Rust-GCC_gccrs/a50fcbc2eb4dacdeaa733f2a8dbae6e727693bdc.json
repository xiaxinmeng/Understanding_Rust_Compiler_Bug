{"sha": "a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "node_id": "C_kwDOANBUbNoAKGE1MGZjYmMyZWI0ZGFjZGVhYTczM2YyYThkYmFlNmU3Mjc2OTNiZGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-11T14:09:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T14:09:01Z"}, "message": "Merge #1017\n\n1017: attr-visitor: Split in its own source and header r=CohenArthur a=CohenArthur\n\nSplit up the 4000 lines rust-macro-expand.cc file containing the\r\nAttrVisitor class and the macro expander implementation\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "5e32d2dc432cfad238680a1728e5d3b1ec557c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e32d2dc432cfad238680a1728e5d3b1ec557c62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK1f9CRBK7hj4Ov3rIwAA/FQIAJ1vLEBjWhVQyHmfZVjo4qWm\nzakPwulIH+eM2affu7ddrM8EQssKKx7WhXiNnVa5frchMBws1OCOvu7sULzE6g8b\nyrsYHMzRfdvQNHg3WQWeNzmRSSrDD6lwzXg7W8YsXT011pVDI4P1zTpURPpSLmp6\nHYwIAF5LcAjzpRDdID9hoFWEmRbdkKS9M2hweiOeHXAVz7U2RbX7mnsMDDaG6bv2\n9XL9fqt3x8BSVQtN8Ee7XTlA1QHTM8eItiaqpb6C5By489chwvCYBEk+i9m86nI2\nCGZqJCmXt5CynjXplvQpfdHPO/e2l4L6EsTiDpi63IW+8ILeDvskyzrZlgg3k7U=\n=2moT\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e32d2dc432cfad238680a1728e5d3b1ec557c62\nparent e076823eda8f11425a705a191d686e9e48be2fc4\nparent 63a214618af996168c1bccbd596765a9af77ab18\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647007741 +0000\ncommitter GitHub <noreply@github.com> 1647007741 +0000\n\nMerge #1017\n\n1017: attr-visitor: Split in its own source and header r=CohenArthur a=CohenArthur\n\nSplit up the 4000 lines rust-macro-expand.cc file containing the\r\nAttrVisitor class and the macro expander implementation\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e076823eda8f11425a705a191d686e9e48be2fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e076823eda8f11425a705a191d686e9e48be2fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e076823eda8f11425a705a191d686e9e48be2fc4"}, {"sha": "63a214618af996168c1bccbd596765a9af77ab18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a214618af996168c1bccbd596765a9af77ab18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a214618af996168c1bccbd596765a9af77ab18"}], "stats": {"total": 6537, "additions": 3464, "deletions": 3073}, "files": [{"sha": "76a45e7c8eed19dbd926624050bd22cdd7a752f2", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "patch": "@@ -74,6 +74,7 @@ GRS_OBJS = \\\n     rust/rust-mangle.o \\\n     rust/rust-compile-resolve-path.o \\\n     rust/rust-macro-expand.o \\\n+    rust/rust-attribute-visitor.o \\\n     rust/rust-macro-invoc-lexer.o \\\n     rust/rust-macro-substitute-ctx.o \\\n     rust/rust-macro-builtins.o \\"}, {"sha": "8d57d959752e611084e6d766f6482463d3e61fe7", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "added", "additions": 3240, "deletions": 0, "changes": 3240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc"}, {"sha": "f6327d64d4649716b18c760e318017a701944d3e", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "patch": "@@ -0,0 +1,222 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-visitor.h\"\n+#include \"rust-macro-expand.h\"\n+\n+namespace Rust {\n+// Visitor used to expand attributes.\n+class AttrVisitor : public AST::ASTVisitor\n+{\n+private:\n+  MacroExpander &expander;\n+\n+public:\n+  AttrVisitor (MacroExpander &expander) : expander (expander) {}\n+\n+  void expand_struct_fields (std::vector<AST::StructField> &fields);\n+  void expand_tuple_fields (std::vector<AST::TupleField> &fields);\n+  void expand_function_params (std::vector<AST::FunctionParam> &params);\n+  void expand_generic_args (AST::GenericArgs &args);\n+  void expand_qualified_path_type (AST::QualifiedPathType &path_type);\n+  void expand_closure_params (std::vector<AST::ClosureParam> &params);\n+  void expand_self_param (AST::SelfParam &self_param);\n+  void expand_where_clause (AST::WhereClause &where_clause);\n+  void expand_trait_function_decl (AST::TraitFunctionDecl &decl);\n+  void expand_trait_method_decl (AST::TraitMethodDecl &decl);\n+\n+  template <typename T> void expand_pointer_allow_strip (T &values)\n+  {\n+    for (auto it = values.begin (); it != values.end ();)\n+      {\n+\tauto &value = *it;\n+\n+\t// mark for stripping if required\n+\tvalue->accept_vis (*this);\n+\n+\tif (value->is_marked_for_strip ())\n+\t  it = values.erase (it);\n+\telse\n+\t  ++it;\n+      }\n+  }\n+\n+  void visit (AST::Token &) override;\n+  void visit (AST::DelimTokenTree &) override;\n+  void visit (AST::AttrInputMetaItemContainer &) override;\n+  void visit (AST::IdentifierExpr &ident_expr) override;\n+  void visit (AST::Lifetime &) override;\n+  void visit (AST::LifetimeParam &) override;\n+\n+  void visit (AST::MacroInvocation &macro_invoc) override;\n+\n+  void visit (AST::PathInExpression &path) override;\n+  void visit (AST::TypePathSegment &) override;\n+  void visit (AST::TypePathSegmentGeneric &segment) override;\n+  void visit (AST::TypePathSegmentFunction &segment) override;\n+  void visit (AST::TypePath &path) override;\n+  void visit (AST::QualifiedPathInExpression &path) override;\n+  void visit (AST::QualifiedPathInType &path) override;\n+\n+  void visit (AST::LiteralExpr &expr) override;\n+  void visit (AST::AttrInputLiteral &) override;\n+  void visit (AST::MetaItemLitExpr &) override;\n+  void visit (AST::MetaItemPathLit &) override;\n+  void visit (AST::BorrowExpr &expr) override;\n+  void visit (AST::DereferenceExpr &expr) override;\n+  void visit (AST::ErrorPropagationExpr &expr) override;\n+  void visit (AST::NegationExpr &expr) override;\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override;\n+  void visit (AST::ComparisonExpr &expr) override;\n+  void visit (AST::LazyBooleanExpr &expr) override;\n+  void visit (AST::TypeCastExpr &expr) override;\n+  void visit (AST::AssignmentExpr &expr) override;\n+  void visit (AST::CompoundAssignmentExpr &expr) override;\n+  void visit (AST::GroupedExpr &expr) override;\n+  void visit (AST::ArrayElemsValues &elems) override;\n+  void visit (AST::ArrayElemsCopied &elems) override;\n+  void visit (AST::ArrayExpr &expr) override;\n+  void visit (AST::ArrayIndexExpr &expr) override;\n+  void visit (AST::TupleExpr &expr) override;\n+  void visit (AST::TupleIndexExpr &expr) override;\n+  void visit (AST::StructExprStruct &expr) override;\n+  void visit (AST::StructExprFieldIdentifier &) override;\n+  void visit (AST::StructExprFieldIdentifierValue &field) override;\n+\n+  void visit (AST::StructExprFieldIndexValue &field) override;\n+  void visit (AST::StructExprStructFields &expr) override;\n+  void visit (AST::StructExprStructBase &expr) override;\n+  void visit (AST::CallExpr &expr) override;\n+  void visit (AST::MethodCallExpr &expr) override;\n+  void visit (AST::FieldAccessExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+\n+  void visit (AST::BlockExpr &expr) override;\n+\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n+  void visit (AST::ContinueExpr &expr) override;\n+  void visit (AST::BreakExpr &expr) override;\n+  void visit (AST::RangeFromToExpr &expr) override;\n+  void visit (AST::RangeFromExpr &expr) override;\n+  void visit (AST::RangeToExpr &expr) override;\n+  void visit (AST::RangeFullExpr &) override;\n+  void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::RangeToInclExpr &expr) override;\n+  void visit (AST::ReturnExpr &expr) override;\n+  void visit (AST::UnsafeBlockExpr &expr) override;\n+  void visit (AST::LoopExpr &expr) override;\n+  void visit (AST::WhileLoopExpr &expr) override;\n+  void visit (AST::WhileLetLoopExpr &expr) override;\n+  void visit (AST::ForLoopExpr &expr) override;\n+  void visit (AST::IfExpr &expr) override;\n+  void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfExprConseqIf &expr) override;\n+  void visit (AST::IfExprConseqIfLet &expr) override;\n+  void visit (AST::IfLetExpr &expr) override;\n+  void visit (AST::IfLetExprConseqElse &expr) override;\n+  void visit (AST::IfLetExprConseqIf &expr) override;\n+  void visit (AST::IfLetExprConseqIfLet &expr) override;\n+  void visit (AST::MatchExpr &expr) override;\n+  void visit (AST::AwaitExpr &expr) override;\n+  void visit (AST::AsyncBlockExpr &expr) override;\n+  void visit (AST::TypeParam &param) override;\n+  void visit (AST::LifetimeWhereClauseItem &) override;\n+  void visit (AST::TypeBoundWhereClauseItem &item) override;\n+  void visit (AST::Method &method) override;\n+  void visit (AST::Module &module) override;\n+  void visit (AST::ExternCrate &crate) override;\n+  void visit (AST::UseTreeGlob &) override;\n+  void visit (AST::UseTreeList &) override;\n+  void visit (AST::UseTreeRebind &) override;\n+  void visit (AST::UseDeclaration &use_decl) override;\n+  void visit (AST::Function &function) override;\n+  void visit (AST::TypeAlias &type_alias) override;\n+  void visit (AST::StructStruct &struct_item) override;\n+  void visit (AST::TupleStruct &tuple_struct) override;\n+  void visit (AST::EnumItem &item) override;\n+  void visit (AST::EnumItemTuple &item) override;\n+  void visit (AST::EnumItemStruct &item) override;\n+  void visit (AST::EnumItemDiscriminant &item) override;\n+  void visit (AST::Enum &enum_item) override;\n+  void visit (AST::Union &union_item) override;\n+  void visit (AST::ConstantItem &const_item) override;\n+  void visit (AST::StaticItem &static_item) override;\n+  void visit (AST::TraitItemFunc &item) override;\n+  void visit (AST::TraitItemMethod &item) override;\n+  void visit (AST::TraitItemConst &item) override;\n+  void visit (AST::TraitItemType &item) override;\n+  void visit (AST::Trait &trait) override;\n+  void visit (AST::InherentImpl &impl) override;\n+  void visit (AST::TraitImpl &impl) override;\n+  void visit (AST::ExternalStaticItem &item) override;\n+  void visit (AST::ExternalFunctionItem &item) override;\n+  void visit (AST::ExternBlock &block) override;\n+\n+  // I don't think it would be possible to strip macros without expansion\n+  void visit (AST::MacroMatchFragment &) override;\n+  void visit (AST::MacroMatchRepetition &) override;\n+  void visit (AST::MacroMatcher &) override;\n+  void visit (AST::MacroRulesDefinition &rules_def) override;\n+  void visit (AST::MetaItemPath &) override;\n+  void visit (AST::MetaItemSeq &) override;\n+  void visit (AST::MetaWord &) override;\n+  void visit (AST::MetaNameValueStr &) override;\n+  void visit (AST::MetaListPaths &) override;\n+  void visit (AST::MetaListNameValueStr &) override;\n+  void visit (AST::LiteralPattern &) override;\n+  void visit (AST::IdentifierPattern &pattern) override;\n+  void visit (AST::WildcardPattern &) override;\n+  void visit (AST::RangePatternBoundLiteral &) override;\n+  void visit (AST::RangePatternBoundPath &bound) override;\n+  void visit (AST::RangePatternBoundQualPath &bound) override;\n+  void visit (AST::RangePattern &pattern) override;\n+  void visit (AST::ReferencePattern &pattern) override;\n+  void visit (AST::StructPatternFieldTuplePat &field) override;\n+  void visit (AST::StructPatternFieldIdentPat &field) override;\n+  void visit (AST::StructPatternFieldIdent &field) override;\n+  void visit (AST::StructPattern &pattern) override;\n+  void visit (AST::TupleStructItemsNoRange &tuple_items) override;\n+  void visit (AST::TupleStructItemsRange &tuple_items) override;\n+  void visit (AST::TupleStructPattern &pattern) override;\n+  void visit (AST::TuplePatternItemsMultiple &tuple_items) override;\n+  void visit (AST::TuplePatternItemsRanged &tuple_items) override;\n+  void visit (AST::TuplePattern &pattern) override;\n+  void visit (AST::GroupedPattern &pattern) override;\n+  void visit (AST::SlicePattern &pattern) override;\n+\n+  void visit (AST::EmptyStmt &) override;\n+  void visit (AST::LetStmt &stmt) override;\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n+  void visit (AST::ExprStmtWithBlock &stmt) override;\n+\n+  void visit (AST::TraitBound &bound) override;\n+  void visit (AST::ImplTraitType &type) override;\n+  void visit (AST::TraitObjectType &type) override;\n+  void visit (AST::ParenthesisedType &type) override;\n+  void visit (AST::ImplTraitTypeOneBound &type) override;\n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+  void visit (AST::TupleType &type) override;\n+  void visit (AST::NeverType &) override;\n+  void visit (AST::RawPointerType &type) override;\n+  void visit (AST::ReferenceType &type) override;\n+  void visit (AST::ArrayType &type) override;\n+  void visit (AST::SliceType &type) override;\n+  void visit (AST::InferredType &) override;\n+  void visit (AST::BareFunctionType &type) override;\n+};\n+} // namespace Rust"}, {"sha": "22ba1d8a292c6f3de5208d2f29a0ff367f727a23", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 1, "deletions": 3073, "changes": 3074, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc"}]}