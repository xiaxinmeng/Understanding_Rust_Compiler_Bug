{"sha": "d882fe5150fbbeb4e44d007bb4964e5b22373021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4MmZlNTE1MGZiYmViNGU0NGQwMDdiYjQ5NjRlNWIyMjM3MzAyMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-17T18:31:50Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-17T18:31:50Z"}, "message": "simplify-rtx.c (simplify_binary_operation): Recognize (compare (gt[u] (cc) 0) (lt[u] (cc) 0)).\n\n\t* simplify-rtx.c (simplify_binary_operation): Recognize\n\t   (compare (gt[u] (cc) 0) (lt[u] (cc) 0)).\n\t(simplify_ternary_operation):  Do not examine MODE_BITSIZE of\n\t   a CONST_INT, it will always be zero.\n\nFrom-SVN: r35098", "tree": {"sha": "686ae8c464a8aa900c031d14c4d56fe381b24133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/686ae8c464a8aa900c031d14c4d56fe381b24133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d882fe5150fbbeb4e44d007bb4964e5b22373021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d882fe5150fbbeb4e44d007bb4964e5b22373021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d882fe5150fbbeb4e44d007bb4964e5b22373021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d882fe5150fbbeb4e44d007bb4964e5b22373021/comments", "author": null, "committer": null, "parents": [{"sha": "29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "eafc3b8a3afa82efec780291daaadd3b85e18cbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882fe5150fbbeb4e44d007bb4964e5b22373021/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882fe5150fbbeb4e44d007bb4964e5b22373021/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d882fe5150fbbeb4e44d007bb4964e5b22373021", "patch": "@@ -1,3 +1,10 @@\n+2000-07-17  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* simplify-rtx.c (simplify_binary_operation): Recognize\n+\t   (compare (gt[u] (cc) 0) (lt[u] (cc) 0)).\n+\t(simplify_ternary_operation):  Do not examine MODE_BITSIZE of\n+\t   a CONST_INT, it will always be zero.\n+\n 2000-07-17  Chandrakala Chavva   <cchavva@cygnus.com>\n \n \t* loop.c (check_dbra_loop) : Return if more than one condition is "}, {"sha": "67f7babfc1ffd395b9e3c123fab119da0e3cebad", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882fe5150fbbeb4e44d007bb4964e5b22373021/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882fe5150fbbeb4e44d007bb4964e5b22373021/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d882fe5150fbbeb4e44d007bb4964e5b22373021", "patch": "@@ -948,11 +948,29 @@ simplify_binary_operation (code, mode, op0, op1)\n \t       || ! FLOAT_MODE_P (mode) || flag_fast_math)\n \t      && op1 == CONST0_RTX (mode))\n \t    return op0;\n+#endif\n+\n+\t  /* Convert (compare (gt (flags) 0) (lt (flags) 0)) to (flags).  */\n+\t  if (((GET_CODE (op0) == GT && GET_CODE (op1) == LT)\n+\t       || (GET_CODE (op0) == GTU && GET_CODE (op1) == LTU))\n+\t      && XEXP (op0, 1) == const0_rtx && XEXP (op1, 1) == const0_rtx)\n+\t    {\n+\t      rtx xop00 = XEXP (op0, 0);\n+\t      rtx xop10 = XEXP (op1, 0);\n+\n+#ifdef HAVE_cc0\n+\t      if (GET_CODE (xop00) == CC0 && GET_CODE (xop10) == CC0)\n #else\n-\t  /* Do nothing here.  */\n+\t      if (GET_CODE (xop00) == REG && GET_CODE (xop10) == REG\n+\t\t  && GET_MODE (xop00) == GET_MODE (xop10)\n+\t\t  && REGNO (xop00) == REGNO (xop10)\n+\t\t  && GET_MODE_CLASS (GET_MODE (xop00)) == MODE_CC\n+\t\t  && GET_MODE_CLASS (GET_MODE (xop10)) == MODE_CC)\n #endif\n-\t  break;\n-\t      \n+\t\treturn xop00;\n+\t    }\n+\n+\t  break;\t      \n \tcase MINUS:\n \t  /* None of these optimizations can be done for IEEE\n \t     floating point.  */\n@@ -1912,8 +1930,7 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n       if (GET_CODE (op0) == CONST_INT\n \t  && GET_CODE (op1) == CONST_INT\n \t  && GET_CODE (op2) == CONST_INT\n-\t  && ((unsigned) INTVAL (op1) + (unsigned) INTVAL (op2)\n-\t      <= GET_MODE_BITSIZE (op0_mode))\n+\t  && ((unsigned) INTVAL (op1) + (unsigned) INTVAL (op2) <= width)\n \t  && width <= (unsigned) HOST_BITS_PER_WIDE_INT)\n \t{\n \t  /* Extracting a bit-field from a constant */"}]}