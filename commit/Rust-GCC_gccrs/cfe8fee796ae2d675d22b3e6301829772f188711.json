{"sha": "cfe8fee796ae2d675d22b3e6301829772f188711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlOGZlZTc5NmFlMmQ2NzVkMjJiM2U2MzAxODI5NzcyZjE4ODcxMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-30T15:48:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-30T15:48:13Z"}, "message": "sparc: Convert to atomic_load/store.\n\n        * config/sparc/predicates.md (register_or_v9_zero_operand): New.\n        * config/sparc/sparc.md (UNSPEC_ATOMIC): New.\n        * config/sparc/sync.md (atomic_load<I>): New.\n        (atomic_loaddi_1, atomic_store<I>, atomic_storedi_1): New.\n\nFrom-SVN: r181849", "tree": {"sha": "31cbdf78dcce2a3a65b85460bdd36ad19c803e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31cbdf78dcce2a3a65b85460bdd36ad19c803e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfe8fee796ae2d675d22b3e6301829772f188711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe8fee796ae2d675d22b3e6301829772f188711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe8fee796ae2d675d22b3e6301829772f188711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe8fee796ae2d675d22b3e6301829772f188711/comments", "author": null, "committer": null, "parents": [{"sha": "9a7389088fea3d8ac2b2eac73a608da6e06c7d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7389088fea3d8ac2b2eac73a608da6e06c7d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7389088fea3d8ac2b2eac73a608da6e06c7d14"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "e48130eb0eee5b7ea4834f13c071c993beb4621f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfe8fee796ae2d675d22b3e6301829772f188711", "patch": "@@ -1,3 +1,10 @@\n+2011-11-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/predicates.md (register_or_v9_zero_operand): New.\n+\t* config/sparc/sparc.md (UNSPEC_ATOMIC): New.\n+\t* config/sparc/sync.md (atomic_load<I>): New.\n+\t(atomic_loaddi_1, atomic_store<I>, atomic_storedi_1): New.\n+\n 2011-11-30  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/predicates.md (zero_or_v7_operand): New."}, {"sha": "a9207beaadb1704655863d95b3061a7ce8014c0c", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=cfe8fee796ae2d675d22b3e6301829772f188711", "patch": "@@ -239,6 +239,11 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const_zero_operand\")))\n \n+(define_predicate \"register_or_v9_zero_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_test \"TARGET_V9\")\n+\t    (match_operand 0 \"const_zero_operand\"))))\n+\n ;; Return true if OP is either the zero constant, the all-ones\n ;; constant, or a register.\n (define_predicate \"register_or_zero_or_all_ones_operand\""}, {"sha": "37ac1701b69559ab1887322276edb7545d08f686", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=cfe8fee796ae2d675d22b3e6301829772f188711", "patch": "@@ -41,6 +41,7 @@\n    (UNSPEC_MOVE_GOTDATA\t\t19)\n \n    (UNSPEC_MEMBAR\t\t20)\n+   (UNSPEC_ATOMIC\t\t21)\n \n    (UNSPEC_TLSGD\t\t30)\n    (UNSPEC_TLSLDM\t\t31)"}, {"sha": "e2f45968666cafb864daa3d688bca63b64c0dd68", "filename": "gcc/config/sparc/sync.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe8fee796ae2d675d22b3e6301829772f188711/gcc%2Fconfig%2Fsparc%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsync.md?ref=cfe8fee796ae2d675d22b3e6301829772f188711", "patch": "@@ -102,6 +102,65 @@\n   \"membar\\t%1\"\n   [(set_attr \"type\" \"multi\")])\n \n+(define_expand \"atomic_load<mode>\"\n+  [(match_operand:I 0 \"register_operand\" \"\")\n+   (match_operand:I 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  \"\"\n+{\n+  enum memmodel model = (enum memmodel) INTVAL (operands[2]);\n+\n+  sparc_emit_membar_for_model (model, 1, 1);\n+\n+  if (TARGET_ARCH64 || <MODE>mode != DImode)\n+    emit_move_insn (operands[0], operands[1]);\n+  else\n+    emit_insn (gen_atomic_loaddi_1 (operands[0], operands[1]));\n+\n+  sparc_emit_membar_for_model (model, 1, 2);\n+  DONE;\n+})\n+\n+(define_insn \"atomic_loaddi_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=U,?*f\")\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m,m\")]\n+\t\t   UNSPEC_ATOMIC))]\n+  \"!TARGET_ARCH64\"\n+  \"ldd\\t%1, %0\"\n+  [(set_attr \"type\" \"load,fpload\")])\n+\n+(define_expand \"atomic_store<mode>\"\n+  [(match_operand:I 0 \"register_operand\" \"\")\n+   (match_operand:I 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  \"\"\n+{\n+  enum memmodel model = (enum memmodel) INTVAL (operands[2]);\n+\n+  sparc_emit_membar_for_model (model, 2, 1);\n+\n+  if (TARGET_ARCH64 || <MODE>mode != DImode)\n+    emit_move_insn (operands[0], operands[1]);\n+  else\n+    emit_insn (gen_atomic_storedi_1 (operands[0], operands[1]));\n+\n+  sparc_emit_membar_for_model (model, 2, 2);\n+  DONE;\n+})\n+\n+(define_insn \"atomic_storedi_1\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m,m,m\")\n+\t(unspec:DI\n+\t  [(match_operand:DI 1 \"register_or_v9_zero_operand\" \"J,U,?*f\")]\n+\t  UNSPEC_ATOMIC))]\n+  \"!TARGET_ARCH64\"\n+  \"@\n+   stx\\t%r1, %0\n+   std\\t%1, %0\n+   std\\t%1, %0\"\n+  [(set_attr \"type\" \"store,store,fpstore\")\n+   (set_attr \"cpu_feature\" \"v9,*,*\")])\n+\n ;;;;;;;;\n \n (define_expand \"sync_compare_and_swap<mode>\""}]}