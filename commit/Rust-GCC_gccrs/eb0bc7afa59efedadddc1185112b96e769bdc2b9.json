{"sha": "eb0bc7afa59efedadddc1185112b96e769bdc2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwYmM3YWZhNTllZmVkYWRkZGMxMTg1MTEyYjk2ZTc2OWJkYzJiOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-01-09T08:22:10Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-01-09T08:22:10Z"}, "message": "re PR tree-optimization/19224 (Endless loop compiling simple file: Bug in tree-scalar-evolution.c (instantiate_parameters_1)?)\n\n\tPR tree-optimization/19224\n\t* tree-scalar-evolution.c (get_instantiated_value,\n\tset_instantiated_value): New functions.\n\t(instantiate_parameters_1): Cache the results.\n\t(instantiate_parameters, resolve_mixers): Initialize and free\n\tthe cache.\n\nFrom-SVN: r93106", "tree": {"sha": "7853b5bcde0c58a9e06066133ad655a698e62b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7853b5bcde0c58a9e06066133ad655a698e62b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0bc7afa59efedadddc1185112b96e769bdc2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0bc7afa59efedadddc1185112b96e769bdc2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0bc7afa59efedadddc1185112b96e769bdc2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0bc7afa59efedadddc1185112b96e769bdc2b9/comments", "author": null, "committer": null, "parents": [{"sha": "d1c9ce9fcdfd347c301135726eaf7219b7df1e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c9ce9fcdfd347c301135726eaf7219b7df1e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c9ce9fcdfd347c301135726eaf7219b7df1e42"}], "stats": {"total": 134, "additions": 98, "deletions": 36}, "files": [{"sha": "5f6b14b25705312ed24bea35aae1d6bde31f4858", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0bc7afa59efedadddc1185112b96e769bdc2b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0bc7afa59efedadddc1185112b96e769bdc2b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb0bc7afa59efedadddc1185112b96e769bdc2b9", "patch": "@@ -1,3 +1,12 @@\n+2005-01-09  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/19224\n+\t* tree-scalar-evolution.c (get_instantiated_value,\n+\tset_instantiated_value): New functions.\n+\t(instantiate_parameters_1): Cache the results.\n+\t(instantiate_parameters, resolve_mixers): Initialize and free\n+\tthe cache.\n+\n 2005-01-08  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/i386/i386.md (addhi_4): Correct reference in comment."}, {"sha": "1ffeb0bd6c12233b2dc4a91f960a7fe7448d264a", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 89, "deletions": 36, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0bc7afa59efedadddc1185112b96e769bdc2b9/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0bc7afa59efedadddc1185112b96e769bdc2b9/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=eb0bc7afa59efedadddc1185112b96e769bdc2b9", "patch": "@@ -1888,19 +1888,55 @@ analyze_scalar_evolution_in_loop (struct loop *wrto_loop, struct loop *use_loop,\n     }\n }\n \n+/* Returns instantiated value for VERSION in CACHE.  */\n+\n+static tree\n+get_instantiated_value (htab_t cache, tree version)\n+{\n+  struct scev_info_str *info, pattern;\n+  \n+  pattern.var = version;\n+  info = htab_find (cache, &pattern);\n+\n+  if (info)\n+    return info->chrec;\n+  else\n+    return NULL_TREE;\n+}\n+\n+/* Sets instantiated value for VERSION to VAL in CACHE.  */\n+\n+static void\n+set_instantiated_value (htab_t cache, tree version, tree val)\n+{\n+  struct scev_info_str *info, pattern;\n+  PTR *slot;\n+  \n+  pattern.var = version;\n+  slot = htab_find_slot (cache, &pattern, INSERT);\n+\n+  if (*slot)\n+    info = *slot;\n+  else\n+    info = *slot = new_scev_info_str (version);\n+  info->chrec = val;\n+}\n+\n /* Analyze all the parameters of the chrec that were left under a symbolic form,\n    with respect to LOOP.  CHREC is the chrec to instantiate.  If\n    ALLOW_SUPERLOOP_CHRECS is true, replacing loop invariants with\n-   outer loop chrecs is done.  */\n+   outer loop chrecs is done.  CACHE is the cache of already instantiated\n+   values.  */\n \n static tree\n instantiate_parameters_1 (struct loop *loop, tree chrec,\n-\t\t\t  bool allow_superloop_chrecs)\n+\t\t\t  bool allow_superloop_chrecs,\n+\t\t\t  htab_t cache)\n {\n   tree res, op0, op1, op2;\n   basic_block def_bb;\n   struct loop *def_loop;\n-  \n+ \n   if (chrec == NULL_TREE\n       || automatically_generated_chrec_p (chrec))\n     return chrec;\n@@ -1920,71 +1956,82 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \t      && !flow_bb_inside_loop_p (loop, def_bb)))\n \treturn chrec;\n \n-      /* Don't instantiate the SSA_NAME if it is in a mixer\n+      /* We cache the value of instantiated variable to avoid exponential\n+\t time complexity due to reevaluations.  We also store the convenient\n+\t value in the cache in order to prevent infinite recursion -- we do\n+\t not want to instantiate the SSA_NAME if it is in a mixer\n \t structure.  This is used for avoiding the instantiation of\n \t recursively defined functions, such as: \n \n \t | a_2 -> {0, +, 1, +, a_2}_1  */\n-\t   \n+\n+      res = get_instantiated_value (cache, chrec);\n+      if (res)\n+\treturn res;\n+\n+      /* Store the convenient value for chrec in the structure.  If it\n+\t is defined outside of the loop, we may just leave it in symbolic\n+\t form, otherwise we need to admit that we do not know its behavior\n+\t inside the loop.  */\n+      res = !flow_bb_inside_loop_p (loop, def_bb) ? chrec : chrec_dont_know;\n+      set_instantiated_value (cache, chrec, res);\n+\n+      /* To make things even more complicated, instantiate_parameters_1\n+\t calls analyze_scalar_evolution that may call # of iterations\n+\t analysis that may in turn call instantiate_parameters_1 again.\n+\t To prevent the infinite recursion, keep also the bitmap of\n+\t ssa names that are being instantiated globally.  */\n       if (bitmap_bit_p (already_instantiated, SSA_NAME_VERSION (chrec)))\n-\t{\n-\t  if (!flow_bb_inside_loop_p (loop, def_bb))\n-\t    {\n-\t      /* We may keep the loop invariant in symbolic form.  */\n-\t      return chrec;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Something with unknown behavior in LOOP.  */\n-\t      return chrec_dont_know;\n-\t    }\n-\t}\n+\treturn res;\n \n       def_loop = find_common_loop (loop, def_bb->loop_father);\n \n       /* If the analysis yields a parametric chrec, instantiate the\n-\t result again.  Avoid the cyclic instantiation in mixers.  */\n+\t result again.  */\n       bitmap_set_bit (already_instantiated, SSA_NAME_VERSION (chrec));\n       res = analyze_scalar_evolution (def_loop, chrec);\n-      res = instantiate_parameters_1 (loop, res, allow_superloop_chrecs);\n+      res = instantiate_parameters_1 (loop, res, allow_superloop_chrecs, cache);\n       bitmap_clear_bit (already_instantiated, SSA_NAME_VERSION (chrec));\n+\n+      /* Store the correct value to the cache.  */\n+      set_instantiated_value (cache, chrec, res);\n       return res;\n \n     case POLYNOMIAL_CHREC:\n       op0 = instantiate_parameters_1 (loop, CHREC_LEFT (chrec),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, CHREC_RIGHT (chrec),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (CHREC_LEFT (chrec) != op0\n \t  || CHREC_RIGHT (chrec) != op1)\n \tchrec = build_polynomial_chrec (CHREC_VARIABLE (chrec), op0, op1);\n       return chrec;\n \n     case PLUS_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n       \tchrec = chrec_fold_plus (TREE_TYPE (chrec), op0, op1);\n       return chrec;\n \n     case MINUS_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n         chrec = chrec_fold_minus (TREE_TYPE (chrec), op0, op1);\n       return chrec;\n \n     case MULT_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n \tchrec = chrec_fold_multiply (TREE_TYPE (chrec), op0, op1);\n@@ -1994,7 +2041,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n     case CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (op0 == chrec_dont_know)\n         return chrec_dont_know;\n \n@@ -2017,11 +2064,11 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n     {\n     case 3:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op2 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 2),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (op0 == chrec_dont_know\n \t  || op1 == chrec_dont_know\n \t  || op2 == chrec_dont_know)\n@@ -2037,9 +2084,9 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \n     case 2:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       op1 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 1),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (op0 == chrec_dont_know\n \t  || op1 == chrec_dont_know)\n         return chrec_dont_know;\n@@ -2051,7 +2098,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \t    \n     case 1:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n-\t\t\t\t      allow_superloop_chrecs);\n+\t\t\t\t      allow_superloop_chrecs, cache);\n       if (op0 == chrec_dont_know)\n         return chrec_dont_know;\n       if (op0 == TREE_OPERAND (chrec, 0))\n@@ -2078,6 +2125,7 @@ instantiate_parameters (struct loop *loop,\n \t\t\ttree chrec)\n {\n   tree res;\n+  htab_t cache = htab_create (10, hash_scev_info, eq_scev_info, del_scev_info);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2088,14 +2136,16 @@ instantiate_parameters (struct loop *loop,\n       fprintf (dump_file, \")\\n\");\n     }\n  \n-  res = instantiate_parameters_1 (loop, chrec, true);\n+  res = instantiate_parameters_1 (loop, chrec, true, cache);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"  (res = \");\n       print_generic_expr (dump_file, res, 0);\n       fprintf (dump_file, \"))\\n\");\n     }\n+\n+  htab_delete (cache);\n   \n   return res;\n }\n@@ -2106,7 +2156,10 @@ instantiate_parameters (struct loop *loop,\n static tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n-  return instantiate_parameters_1 (loop, chrec, false);\n+  htab_t cache = htab_create (10, hash_scev_info, eq_scev_info, del_scev_info);\n+  tree ret = instantiate_parameters_1 (loop, chrec, false, cache);\n+  htab_delete (cache);\n+  return ret;\n }\n \n /* Entry point for the analysis of the number of iterations pass.  "}]}