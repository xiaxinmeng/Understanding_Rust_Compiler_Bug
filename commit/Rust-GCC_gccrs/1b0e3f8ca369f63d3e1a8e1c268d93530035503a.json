{"sha": "1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "node_id": "C_kwDOANBUbNoAKDFiMGUzZjhjYTM2OWY2M2QzZTFhOGUxYzI2OGQ5MzUzMDAzNTUwM2E", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-03T15:11:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-03T15:11:11Z"}, "message": "waccess: Fix two -Wnonnull warning issues [PR108986]\n\nThe following patch fixes 2 issues with the -Wnonnull warning.\n\nOne, fixed by the second hunk, is that the warning wording is bogus\nsince r11-3305, instead of printing\nwarning: argument 1 to \u2018int[static 7]\u2019 is null where non-null expected [-Wnonnull]\nit prints\nwarning: argument 1 to \u2018int[static 28]\u2019 is null where non-null expected [-Wnonnull]\naccess_size is measured in bytes, so obviously will be correct as array\nnumber of elements only if it is 1 byte element array.\nIn the function, access_nelts is either constant (if sizidx == -1) or\nwhen the array size is determined by some other parameter, I believe a value\npassed to that argument.\nLater on we query the range of it:\n      if (get_size_range (m_ptr_qry.rvals, access_nelts, stmt, sizrng, 1))\nwhich I bet must just return accesS_nelts in sizrng[0] and [1] if it is\nconstant.  access_size is later computed as:\n      tree access_size = NULL_TREE;\n      if (tree_int_cst_sgn (sizrng[0]) >= 0)\n        {\n          if (COMPLETE_TYPE_P (argtype))\n            {\n...\n                    wide_int minsize = wi::to_wide (sizrng[0], prec);\n                    minsize *= wi::to_wide (argsize, prec);\n                    access_size = wide_int_to_tree (sizetype, minsize);\n                  }\n            }\n          else\n            access_size = access_nelts;\n        }\nand immediately after this the code does:\n      if (integer_zerop (ptr))\n        {\n          if (sizidx >= 0 && tree_int_cst_sgn (sizrng[0]) > 0)\n            {\nsome other warning wording\n            }\n          else if (access_size && access.second.static_p)\n            {\nthis spot\n            }\n        }\nSo, because argtype is complete, access_size has been multiplied by\nargsize, but in case of this exact warning (\"this spot\" above)\nI believe access_nelts must be really constant, otherwise\n\"some other warning wording\" would handle it.  So, I think access_nelts\nis exactly what we want to print there.\n\nThe other problem is that since the introduction of -Wdangling-pointer\nin r12-6606, the pass has early and late instances and while lots of\nstuff in the pass is guarded on being done in the late pass only,\nthis particular function is not, furthermore it is emitting two different\nwarnings in a loop and already messes up with stuff like clearing\nwarning suppression for one of the warning (ugh!).  The end effect is\nthat we warn twice about the same problem, once in the early and once in\nthe late pass.  Now, e.g. with -O2 -Wall we warn just once, during the\nearly pass, as it is then optimized away, so I think just making this\nlate warning only wouldn't be best.  This patch instead returns early\nif either of the warnings is suppressed on the call stmt already.\nI think if one of the passes warned on it already (even if say on some other\nargument), then warning again (even on some other argument) is unnecessary,\nif both problems are visible in the same pass we'll still warn about both.\n\n2023-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/108986\n\t* gimple-ssa-warn-access.cc (pass_waccess::maybe_check_access_sizes):\n\tReturn immediately if OPT_Wnonnull or OPT_Wstringop_overflow_ is\n\tsuppressed on stmt.  For [static %E] warning, print access_nelts\n\trather than access_size.  Fix up comment wording.\n\n\t* gcc.dg/Wnonnull-8.c: New test.", "tree": {"sha": "64984cc3096c36eb4ab9fcfe67bae26c5f1292ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64984cc3096c36eb4ab9fcfe67bae26c5f1292ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0e3f8ca369f63d3e1a8e1c268d93530035503a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5adab2ae046bed0e2b72466f439f023f697433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5adab2ae046bed0e2b72466f439f023f697433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5adab2ae046bed0e2b72466f439f023f697433"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "a28fce172b5f9af6d19b15298aa3f63539219cf1", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0e3f8ca369f63d3e1a8e1c268d93530035503a/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0e3f8ca369f63d3e1a8e1c268d93530035503a/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "patch": "@@ -3318,6 +3318,10 @@ void\n pass_waccess::maybe_check_access_sizes (rdwr_map *rwm, tree fndecl, tree fntype,\n \t\t\t\t\tgimple *stmt)\n {\n+  if (warning_suppressed_p (stmt, OPT_Wnonnull)\n+      || warning_suppressed_p (stmt, OPT_Wstringop_overflow_))\n+    return;\n+\n   auto_diagnostic_group adg;\n \n   /* Set if a warning has been issued for any argument (used to decide\n@@ -3501,7 +3505,7 @@ pass_waccess::maybe_check_access_sizes (rdwr_map *rwm, tree fndecl, tree fntype,\n \t      if (warning_at (loc, OPT_Wnonnull,\n \t\t\t      \"argument %i to %<%T[static %E]%> \"\n \t\t\t      \"is null where non-null expected\",\n-\t\t\t      ptridx + 1, argtype, access_size))\n+\t\t\t      ptridx + 1, argtype, access_nelts))\n \t\targ_warned = OPT_Wnonnull;\n \t    }\n \n@@ -3593,7 +3597,7 @@ pass_waccess::maybe_check_access_sizes (rdwr_map *rwm, tree fndecl, tree fntype,\n \t\t\"in a call with type %qT\", fntype);\n     }\n \n-  /* Set the bit in case if was cleared and not set above.  */\n+  /* Set the bit in case it was cleared and not set above.  */\n   if (opt_warned != no_warning)\n     suppress_warning (stmt, opt_warned);\n }"}, {"sha": "02871a76689665741c22014476769f3aa7e5acca", "filename": "gcc/testsuite/gcc.dg/Wnonnull-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0e3f8ca369f63d3e1a8e1c268d93530035503a/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0e3f8ca369f63d3e1a8e1c268d93530035503a/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull-8.c?ref=1b0e3f8ca369f63d3e1a8e1c268d93530035503a", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/108986 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+void\n+foo (int a[static 7])\n+{\n+}\n+\n+int\n+main ()\n+{\n+  foo ((int *) 0);\t/* { dg-warning \"argument 1 to 'int\\\\\\[static 7\\\\\\]' is null where non-null expected\" } */\n+}"}]}