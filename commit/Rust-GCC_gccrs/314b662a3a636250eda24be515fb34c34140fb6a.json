{"sha": "314b662a3a636250eda24be515fb34c34140fb6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0YjY2MmEzYTYzNjI1MGVkYTI0YmU1MTVmYjM0YzM0MTQwZmI2YQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-04-19T13:29:29Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-04-19T13:29:29Z"}, "message": "re PR c/52977 (internal compiler error: Segmentation fault with `-x c-header' or `-x cxx-header' option)\n\n\tPR middle-end/52977\n\t* tree.h (VECTOR_CST_NELTS): Use part number of types again.\n\t(struct tree_vector): Adjust GTY length.\n\t* tree.c (make_vector_stat): Don't set VECTOR_CST_NELTS.\n\n\t* gengtype.c (struct walk_type_data): Add in_record_p and loopcounter\n\tmembers.\n\t(walk_type, <TYPE_POINTER, TYPE_ARRAY>): Handle case where our\n\tcaller emitted the length calulation already.\n\t(walk_type, <TYPE_UNION, TYPE_STRUCT>): Emit length calculations\n\nFrom-SVN: r186593", "tree": {"sha": "8f69ea3822d53cbb5ee137c295bc3fb2dec89d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f69ea3822d53cbb5ee137c295bc3fb2dec89d98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314b662a3a636250eda24be515fb34c34140fb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b662a3a636250eda24be515fb34c34140fb6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314b662a3a636250eda24be515fb34c34140fb6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b662a3a636250eda24be515fb34c34140fb6a/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c98ec605d9c9d2bbb6d431016ebe74a73f0a522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c98ec605d9c9d2bbb6d431016ebe74a73f0a522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c98ec605d9c9d2bbb6d431016ebe74a73f0a522"}], "stats": {"total": 112, "additions": 98, "deletions": 14}, "files": [{"sha": "1f27b62ad68e0086c5a110197fbeada8e23731cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314b662a3a636250eda24be515fb34c34140fb6a", "patch": "@@ -1,3 +1,17 @@\n+2012-04-19  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/52977\n+\t* tree.h (VECTOR_CST_NELTS): Use part number of types again.\n+\t(struct tree_vector): Adjust GTY length.\n+\t* tree.c (make_vector_stat): Don't set VECTOR_CST_NELTS.\n+\n+\t* gengtype.c (struct walk_type_data): Add in_record_p and loopcounter\n+\tmembers.\n+\t(walk_type, <TYPE_POINTER, TYPE_ARRAY>): Handle case where our\n+\tcaller emitted the length calulation already.\n+\t(walk_type, <TYPE_UNION, TYPE_STRUCT>): Emit length calculations\n+\tbefore handling any of the fields for structs.\n+\n 2012-04-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53031"}, {"sha": "abafaa9bc1236ba29abb62bac4b0a7fc542c346d", "filename": "gcc/gengtype.c", "status": "modified", "additions": 82, "deletions": 10, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=314b662a3a636250eda24be515fb34c34140fb6a", "patch": "@@ -2291,6 +2291,8 @@ struct walk_type_data\n   const char *reorder_fn;\n   bool needs_cast_p;\n   bool fn_wants_lvalue;\n+  bool in_record_p;\n+  int loopcounter;\n };\n \n /* Print a mangled name representing T to OF.  */\n@@ -2592,7 +2594,7 @@ walk_type (type_p t, struct walk_type_data *d)\n \t  }\n \telse\n \t  {\n-\t    int loopcounter = d->counter++;\n+\t    int loopcounter = d->loopcounter;\n \t    const char *oldval = d->val;\n \t    const char *oldprevval3 = d->prev_val[3];\n \t    char *newval;\n@@ -2602,7 +2604,10 @@ walk_type (type_p t, struct walk_type_data *d)\n \t    oprintf (d->of, \"%*ssize_t i%d;\\n\", d->indent, \"\", loopcounter);\n \t    oprintf (d->of, \"%*sfor (i%d = 0; i%d != (size_t)(\", d->indent,\n \t\t     \"\", loopcounter, loopcounter);\n-\t    output_escaped_param (d, length, \"length\");\n+\t    if (!d->in_record_p)\n+\t      output_escaped_param (d, length, \"length\");\n+\t    else\n+\t      oprintf (d->of, \"l%d\", loopcounter);\n \t    oprintf (d->of, \"); i%d++) {\\n\", loopcounter);\n \t    d->indent += 2;\n \t    d->val = newval = xasprintf (\"%s[i%d]\", oldval, loopcounter);\n@@ -2624,7 +2629,7 @@ walk_type (type_p t, struct walk_type_data *d)\n \n     case TYPE_ARRAY:\n       {\n-\tint loopcounter = d->counter++;\n+\tint loopcounter;\n \tconst char *oldval = d->val;\n \tchar *newval;\n \n@@ -2633,6 +2638,11 @@ walk_type (type_p t, struct walk_type_data *d)\n \tif (t->u.a.p->kind == TYPE_SCALAR)\n \t  break;\n \n+\tif (length)\n+\t  loopcounter = d->loopcounter;\n+\telse\n+\t  loopcounter = d->counter++;\n+\n \t/* When walking an array, compute the length and store it in a\n \t   local variable before walking the array elements, instead of\n \t   recomputing the length expression each time through the loop.\n@@ -2643,13 +2653,16 @@ walk_type (type_p t, struct walk_type_data *d)\n \toprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n \td->indent += 2;\n \toprintf (d->of, \"%*ssize_t i%d;\\n\", d->indent, \"\", loopcounter);\n-\toprintf (d->of, \"%*ssize_t l%d = (size_t)(\",\n-\t\t d->indent, \"\", loopcounter);\n-\tif (length)\n-\t  output_escaped_param (d, length, \"length\");\n-\telse\n-\t  oprintf (d->of, \"%s\", t->u.a.len);\n-\toprintf (d->of, \");\\n\");\n+\tif (!d->in_record_p || !length)\n+\t  {\n+\t    oprintf (d->of, \"%*ssize_t l%d = (size_t)(\",\n+\t\t     d->indent, \"\", loopcounter);\n+\t    if (length)\n+\t      output_escaped_param (d, length, \"length\");\n+\t    else\n+\t      oprintf (d->of, \"%s\", t->u.a.len);\n+\t    oprintf (d->of, \");\\n\");\n+\t  }\n \n \toprintf (d->of, \"%*sfor (i%d = 0; i%d != l%d; i%d++) {\\n\",\n \t\t d->indent, \"\",\n@@ -2678,6 +2691,9 @@ walk_type (type_p t, struct walk_type_data *d)\n \tconst int union_p = t->kind == TYPE_UNION;\n \tint seen_default_p = 0;\n \toptions_p o;\n+\tint lengths_seen = 0;\n+\tint endcounter;\n+\tbool any_length_seen = false;\n \n \tif (!t->u.s.line.file)\n \t  error_at_line (d->line, \"incomplete structure `%s'\", t->u.s.tag);\n@@ -2713,6 +2729,45 @@ walk_type (type_p t, struct walk_type_data *d)\n \t    d->indent += 2;\n \t    oprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n \t  }\n+\n+\tfor (f = t->u.s.fields; f; f = f->next)\n+\t  {\n+\t    options_p oo;\n+\t    int skip_p = 0;\n+\t    const char *fieldlength = NULL;\n+\n+\t    d->reorder_fn = NULL;\n+\t    for (oo = f->opt; oo; oo = oo->next)\n+\t      if (strcmp (oo->name, \"skip\") == 0)\n+\t\tskip_p = 1;\n+\t      else if (strcmp (oo->name, \"length\") == 0\n+\t\t       && oo->kind == OPTION_STRING)\n+\t\tfieldlength = oo->info.string;\n+\n+\t    if (skip_p)\n+\t      continue;\n+\t    if (fieldlength)\n+\t      {\n+\t        lengths_seen++;\n+\t\td->counter++;\n+\t\tif (!union_p)\n+\t\t  {\n+\t\t    if (!any_length_seen)\n+\t\t      {\n+\t\t\toprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n+\t\t\td->indent += 2;\n+\t\t      }\n+\t\t    any_length_seen = true;\n+\n+\t\t    oprintf (d->of, \"%*ssize_t l%d = (size_t)(\",\n+\t\t\t     d->indent, \"\", d->counter - 1);\n+\t\t    output_escaped_param (d, fieldlength, \"length\");\n+\t\t    oprintf (d->of, \");\\n\");\n+\t\t  }\n+\t      }\n+\t  }\n+\tendcounter = d->counter;\n+\n \tfor (f = t->u.s.fields; f; f = f->next)\n \t  {\n \t    options_p oo;\n@@ -2721,6 +2776,7 @@ walk_type (type_p t, struct walk_type_data *d)\n \t    int skip_p = 0;\n \t    int default_p = 0;\n \t    int use_param_p = 0;\n+\t    const char *fieldlength = NULL;\n \t    char *newval;\n \n \t    d->reorder_fn = NULL;\n@@ -2741,6 +2797,9 @@ walk_type (type_p t, struct walk_type_data *d)\n \t      else if (strncmp (oo->name, \"use_param\", 9) == 0\n \t\t       && (oo->name[9] == '\\0' || ISDIGIT (oo->name[9])))\n \t\tuse_param_p = 1;\n+\t      else if (strcmp (oo->name, \"length\") == 0\n+\t\t       && oo->kind == OPTION_STRING)\n+\t\tfieldlength = oo->info.string;\n \n \t    if (skip_p)\n \t      continue;\n@@ -2774,16 +2833,24 @@ walk_type (type_p t, struct walk_type_data *d)\n \t\t\t     \"field `%s' is missing `tag' or `default' option\",\n \t\t\t     f->name);\n \n+\t    if (fieldlength)\n+\t      {\n+\t\td->loopcounter = endcounter - lengths_seen--;\n+\t      }\n+\n \t    d->line = &f->line;\n \t    d->val = newval = xasprintf (\"%s%s%s\", oldval, dot, f->name);\n \t    d->opt = f->opt;\n \t    d->used_length = false;\n+\t    d->in_record_p = !union_p;\n \n \t    if (union_p && use_param_p && d->param == NULL)\n \t      oprintf (d->of, \"%*sgcc_unreachable ();\\n\", d->indent, \"\");\n \t    else\n \t      walk_type (f->type, d);\n \n+\t    d->in_record_p = false;\n+\n \t    free (newval);\n \n \t    if (union_p)\n@@ -2808,6 +2875,11 @@ walk_type (type_p t, struct walk_type_data *d)\n \t    oprintf (d->of, \"%*s}\\n\", d->indent, \"\");\n \t    d->indent -= 2;\n \t  }\n+\tif (any_length_seen)\n+\t  {\n+\t    d->indent -= 2;\n+\t    oprintf (d->of, \"%*s}\\n\", d->indent, \"\");\n+\t  }\n       }\n       break;\n "}, {"sha": "b0d52b2e0e9aa63f21a4deb7a24366b2c0202462", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=314b662a3a636250eda24be515fb34c34140fb6a", "patch": "@@ -1329,7 +1329,6 @@ make_vector_stat (unsigned len MEM_STAT_DECL)\n \n   TREE_SET_CODE (t, VECTOR_CST);\n   TREE_CONSTANT (t) = 1;\n-  VECTOR_CST_NELTS (t) = len;\n \n   return t;\n }"}, {"sha": "e719be2ed40772313f5210ca5c6b782996624799", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b662a3a636250eda24be515fb34c34140fb6a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=314b662a3a636250eda24be515fb34c34140fb6a", "patch": "@@ -1534,14 +1534,13 @@ struct GTY(()) tree_complex {\n };\n \n /* In a VECTOR_CST node.  */\n-#define VECTOR_CST_NELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.length)\n+#define VECTOR_CST_NELTS(NODE) (TYPE_VECTOR_SUBPARTS (TREE_TYPE (NODE)))\n #define VECTOR_CST_ELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.elts)\n #define VECTOR_CST_ELT(NODE,IDX) (VECTOR_CST_CHECK (NODE)->vector.elts[IDX])\n \n struct GTY(()) tree_vector {\n   struct tree_typed typed;\n-  unsigned length;\n-  tree GTY ((length (\"%h.length\"))) elts[1];\n+  tree GTY ((length (\"TYPE_VECTOR_SUBPARTS (TREE_TYPE ((tree)&%h))\"))) elts[1];\n };\n \f\n #include \"symtab.h\""}]}