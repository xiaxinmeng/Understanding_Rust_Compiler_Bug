{"sha": "57cfa172280fd4a79a1d4120b69054457100af94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjZmExNzIyODBmZDRhNzlhMWQ0MTIwYjY5MDU0NDU3MTAwYWY5NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-06T07:03:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-06T07:03:51Z"}, "message": "graphite-sese-to-poly.c (extract_affine): For casts increasing precision do not perform modulo reduction.\n\n2017-10-06  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-sese-to-poly.c (extract_affine): For casts increasing\n\tprecision do not perform modulo reduction.\n\nFrom-SVN: r253474", "tree": {"sha": "f24b47325d1cd7fdb4e31d19dc6b67267517b617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24b47325d1cd7fdb4e31d19dc6b67267517b617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cfa172280fd4a79a1d4120b69054457100af94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cfa172280fd4a79a1d4120b69054457100af94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cfa172280fd4a79a1d4120b69054457100af94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cfa172280fd4a79a1d4120b69054457100af94/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31bee964798d25ac83e513de6858b69c3a9624be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bee964798d25ac83e513de6858b69c3a9624be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bee964798d25ac83e513de6858b69c3a9624be"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "54ba096a161a3a60086af46815decda567fbc8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cfa172280fd4a79a1d4120b69054457100af94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cfa172280fd4a79a1d4120b69054457100af94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57cfa172280fd4a79a1d4120b69054457100af94", "patch": "@@ -1,3 +1,8 @@\n+2017-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-sese-to-poly.c (extract_affine): For casts increasing\n+\tprecision do not perform modulo reduction.\n+\n 2017-10-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82436"}, {"sha": "6cd5bc7c9d9a280c51e67e1cdc0ecda3145cd467", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cfa172280fd4a79a1d4120b69054457100af94/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cfa172280fd4a79a1d4120b69054457100af94/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=57cfa172280fd4a79a1d4120b69054457100af94", "patch": "@@ -299,11 +299,18 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       return res;\n \n     CASE_CONVERT:\n-      res = extract_affine (s, TREE_OPERAND (e, 0), space);\n-      /* signed values, even if overflow is undefined, get modulo-reduced.  */\n-      if (! TYPE_UNSIGNED (type))\n-\tres = wrap (res, TYPE_PRECISION (type) - 1);\n-      break;\n+      {\n+\ttree itype = TREE_TYPE (TREE_OPERAND (e, 0));\n+\tres = extract_affine (s, TREE_OPERAND (e, 0), space);\n+\t/* Signed values, even if overflow is undefined, get modulo-reduced.\n+\t   But only if not all values of the old type fit in the new.  */\n+\tif (! TYPE_UNSIGNED (type)\n+\t    && ((TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (e, 0)))\n+\t\t && TYPE_PRECISION (type) <= TYPE_PRECISION (itype))\n+\t\t|| TYPE_PRECISION (type) < TYPE_PRECISION (itype)))\n+\t  res = wrap (res, TYPE_PRECISION (type) - 1);\n+\tbreak;\n+      }\n \n     case NON_LVALUE_EXPR:\n       res = extract_affine (s, TREE_OPERAND (e, 0), space);"}]}