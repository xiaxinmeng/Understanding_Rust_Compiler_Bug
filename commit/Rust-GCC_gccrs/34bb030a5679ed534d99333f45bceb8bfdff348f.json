{"sha": "34bb030a5679ed534d99333f45bceb8bfdff348f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRiYjAzMGE1Njc5ZWQ1MzRkOTkzMzNmNDViY2ViOGJmZGZmMzQ4Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-10-23T15:20:38Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-10-23T15:20:38Z"}, "message": "rs6000.c (rs6000_register_move_cost): New function.\n\n        * config/rs6000/rs6000.c (rs6000_register_move_cost): New function.\n        (rs6000_memory_move_cost): New function.\n        * config/rs6000/rs6000-protos.h: Declare them.\n        * config/rs6000/rs6000.h: Use them.\n\nCo-Authored-By: Geoffrey Keating <geoffk@apple.com>\n\nFrom-SVN: r58453", "tree": {"sha": "4d40dadda3427c34b5d4cc20c0482b2a2c61eed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d40dadda3427c34b5d4cc20c0482b2a2c61eed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34bb030a5679ed534d99333f45bceb8bfdff348f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bb030a5679ed534d99333f45bceb8bfdff348f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34bb030a5679ed534d99333f45bceb8bfdff348f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bb030a5679ed534d99333f45bceb8bfdff348f/comments", "author": null, "committer": null, "parents": [{"sha": "1ab9ba628672d778d1ad8ee3e704a9b2db6f5ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab9ba628672d778d1ad8ee3e704a9b2db6f5ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab9ba628672d778d1ad8ee3e704a9b2db6f5ffb"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "2fd44c8c2b50b741c5762c99453798df5c3c7d2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34bb030a5679ed534d99333f45bceb8bfdff348f", "patch": "@@ -1,3 +1,11 @@\n+2002-10-23  David Edelsohn  <edelsohn@gnu.org>\n+\t    Geoff Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_register_move_cost): New function.\n+\t(rs6000_memory_move_cost): New function.\n+\t* config/rs6000/rs6000-protos.h: Declare them.\n+\t* config/rs6000/rs6000.h: Use them.\n+\n 2002-10-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* libgcc2.c (__udiv_w_sdiv): Use attribute ((always_inline)) when "}, {"sha": "53d819202fe30b3b2600f673bfe74fd777f8e50f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=34bb030a5679ed534d99333f45bceb8bfdff348f", "patch": "@@ -188,6 +188,10 @@ extern void rs6000_emit_epilogue PARAMS ((int));\n extern void debug_stack_info PARAMS ((rs6000_stack_t *));\n extern const char *output_isel PARAMS ((rtx *));\n extern int vrsave_operation PARAMS ((rtx, enum machine_mode));\n+extern int rs6000_register_move_cost PARAMS ((enum machine_mode,\n+\t\t\t\t\t      enum reg_class, enum reg_class));\n+extern int rs6000_memory_move_cost PARAMS ((enum machine_mode,\n+\t\t\t\t\t    enum reg_class, int));\n \n /* Declare functions in rs6000-c.c */\n "}, {"sha": "fe74ffda10cd3a106073484cf5669c176bf301c8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=34bb030a5679ed534d99333f45bceb8bfdff348f", "patch": "@@ -13236,3 +13236,61 @@ rs6000_binds_local_p (decl)\n {\n   return default_binds_local_p_1 (decl, flag_pic || rs6000_flag_pic);\n }\n+\n+/* A C expression returning the cost of moving data from a register of class\n+   CLASS1 to one of CLASS2.  */\n+\n+int\n+rs6000_register_move_cost (mode, from, to)\n+     enum machine_mode mode;\n+     enum reg_class from, to;\n+{\n+  /*  Moves from/to GENERAL_REGS.  */\n+  if (reg_classes_intersect_p (to, GENERAL_REGS)\n+      || reg_classes_intersect_p (from, GENERAL_REGS))\n+    {\n+      if (! reg_classes_intersect_p (to, GENERAL_REGS))\n+\tfrom = to;\n+\n+      if (from == FLOAT_REGS || from == ALTIVEC_REGS)\n+\treturn (rs6000_memory_move_cost (mode, from, 0)\n+\t\t+ rs6000_memory_move_cost (mode, GENERAL_REGS, 0));\n+\n+/* It's more expensive to move CR_REGS than CR0_REGS because of the shift...*/\n+      else if (from == CR_REGS)\n+\treturn 4;\n+\n+      else\n+/* A move will cost one instruction per GPR moved.  */\n+\treturn 2 * HARD_REGNO_NREGS (0, mode);\n+    }\n+\n+/* Moving between two similar registers is just one instruction.  */\n+  else if (reg_classes_intersect_p (to, from))\n+    return mode == TFmode ? 4 : 2;\n+\n+/* Everything else has to go through GENERAL_REGS.  */\n+  else\n+    return (rs6000_register_move_cost (mode, GENERAL_REGS, to) \n+\t    + rs6000_register_move_cost (mode, from, GENERAL_REGS));\n+}\n+\n+/* A C expressions returning the cost of moving data of MODE from a register to\n+   or from memory.  */\n+\n+int\n+rs6000_memory_move_cost (mode, class, in)\n+  enum machine_mode mode;\n+  enum reg_class class;\n+  int in ATTRIBUTE_UNUSED;\n+{\n+  if (reg_classes_intersect_p (class, GENERAL_REGS))\n+    return 4 * HARD_REGNO_NREGS (0, mode);\n+  else if (reg_classes_intersect_p (class, FLOAT_REGS))\n+    return 4 * HARD_REGNO_NREGS (32, mode);\n+  else if (reg_classes_intersect_p (class, ALTIVEC_REGS))\n+    return 4 * HARD_REGNO_NREGS (FIRST_ALTIVEC_REGNO, mode);\n+  else\n+    return 4 + rs6000_register_move_cost (mode, class, GENERAL_REGS);\n+}\n+"}, {"sha": "55805490d44ddc3eccdf991da0aa53aa3d790e88", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bb030a5679ed534d99333f45bceb8bfdff348f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=34bb030a5679ed534d99333f45bceb8bfdff348f", "patch": "@@ -926,35 +926,14 @@ extern int rs6000_default_long_calls;\n    : 1)\n \n /* A C expression returning the cost of moving data from a register of class\n-   CLASS1 to one of CLASS2.\n-\n-   On the RS/6000, copying between floating-point and fixed-point\n-   registers is expensive.  */\n-\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n-   ((CLASS1) == FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 2\t\\\n-   : (CLASS1) == FLOAT_REGS && (CLASS2) != FLOAT_REGS ? 10\t\\\n-   : (CLASS1) != FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 10\t\\\n-   : (CLASS1) == ALTIVEC_REGS && (CLASS2) != ALTIVEC_REGS ? 20\t\\\n-   : (CLASS1) != ALTIVEC_REGS && (CLASS2) == ALTIVEC_REGS ? 20\t\\\n-   : (((CLASS1) == SPECIAL_REGS || (CLASS1) == MQ_REGS\t\t\\\n-       || (CLASS1) == LINK_REGS || (CLASS1) == CTR_REGS\t\t\\\n-       || (CLASS1) == LINK_OR_CTR_REGS)\t\t\t\t\\\n-      && ((CLASS2) == SPECIAL_REGS || (CLASS2) == MQ_REGS\t\\\n-\t  || (CLASS2) == LINK_REGS || (CLASS2) == CTR_REGS\t\\\n-\t  || (CLASS2) == LINK_OR_CTR_REGS)) ? 10\t\t\\\n-   : 2)\n+   CLASS1 to one of CLASS2.  */\n \n-/* A C expressions returning the cost of moving data of MODE from a register to\n-   or from memory.\n+#define REGISTER_MOVE_COST rs6000_register_move_cost\n \n-   On the RS/6000, bump this up a bit.  */\n+/* A C expressions returning the cost of moving data of MODE from a register to\n+   or from memory.  */\n \n-#define MEMORY_MOVE_COST(MODE, CLASS, IN)\t\\\n-  ((GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n-    && (rs6000_cpu == PROCESSOR_RIOS1 || rs6000_cpu == PROCESSOR_PPC601) \\\n-    ? 3 : 2) \\\n-   + 4)\n+#define MEMORY_MOVE_COST rs6000_memory_move_cost\n \n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch."}]}