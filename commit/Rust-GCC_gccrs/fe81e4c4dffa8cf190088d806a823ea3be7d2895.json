{"sha": "fe81e4c4dffa8cf190088d806a823ea3be7d2895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4MWU0YzRkZmZhOGNmMTkwMDg4ZDgwNmE4MjNlYTNiZTdkMjg5NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-23T21:46:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-23T21:46:10Z"}, "message": "(yylex): Cast string literal to U_CHAR* for lookup() call.\n\nFrom-SVN: r13014", "tree": {"sha": "b0e09a8f2e08d4005cbe8cc4870f3f096ae34968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0e09a8f2e08d4005cbe8cc4870f3f096ae34968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe81e4c4dffa8cf190088d806a823ea3be7d2895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe81e4c4dffa8cf190088d806a823ea3be7d2895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe81e4c4dffa8cf190088d806a823ea3be7d2895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe81e4c4dffa8cf190088d806a823ea3be7d2895/comments", "author": null, "committer": null, "parents": [{"sha": "e1c84e1d7ac505468ec751adfca86ace9557f89f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c84e1d7ac505468ec751adfca86ace9557f89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c84e1d7ac505468ec751adfca86ace9557f89f"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "e5a39aea809c2212e38293579c3c1ae3c34bbbbf", "filename": "gcc/cexp.y", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe81e4c4dffa8cf190088d806a823ea3be7d2895/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe81e4c4dffa8cf190088d806a823ea3be7d2895/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=fe81e4c4dffa8cf190088d806a823ea3be7d2895", "patch": "@@ -738,7 +738,8 @@ yylex ()\n \t{\n \t  int num_bits = num_chars * width;\n \n-\t  if (lookup (\"__CHAR_UNSIGNED__\", sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n+\t  if (lookup ((U_CHAR *) \"__CHAR_UNSIGNED__\",\n+\t\t      sizeof (\"__CHAR_UNSIGNED__\") - 1, -1)\n \t      || ((result >> (num_bits - 1)) & 1) == 0)\n \t    yylval.integer.value\n \t      = result & (~ (unsigned HOST_WIDE_INT) 0"}]}