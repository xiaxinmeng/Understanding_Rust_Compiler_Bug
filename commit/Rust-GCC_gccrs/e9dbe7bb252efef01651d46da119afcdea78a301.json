{"sha": "e9dbe7bb252efef01651d46da119afcdea78a301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkYmU3YmIyNTJlZmVmMDE2NTFkNDZkYTExOWFmY2RlYTc4YTMwMQ==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2009-06-01T08:15:01Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2009-06-01T08:15:01Z"}, "message": "re PR tree-optimization/39129 (The meaning of 'BB' in \"too many BBs in loop\")\n\n\n\tPR tree-optimization/39129\n\t* tree-vect-loop-manip.c (conservative_cost_threshold): Change the \n\tprinted message.\n\t(vect_do_peeling_for_loop_bound): Use \n\tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n\t(vect_loop_versioning): Likewise.\n\t(vect_create_cond_for_alias_checks): Fix indentation.\n\t* tree-vectorizer.h (struct _loop_vec_info): Fix indentation of the \n\tmacros.\n\t(LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT): Define.\n\t(LOOP_REQUIRES_VERSIONING_FOR_ALIAS): Likewise.\n\t* tree-vect-loop.c (vect_analyze_loop_form): Change \"too many BBs\" to \n\t\"control flow in loop\".\n\t(vect_estimate_min_profitable_iters): Use \n\tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n\t(vect_create_data_ref_ptr): Don't mention array dimension in printing.\n\t* tree-vect-stmts.c (vectorizable_store): Replace the check that the \n\tstatement belongs to a group of strided accesses with the exact code \n\tcheck.\n\t(vectorizable_load): Likewise.\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Spell out \"basic block\".\n\t(vect_slp_analyze_bb, vect_slp_transform_bb): Likewise.\n\nFrom-SVN: r148036", "tree": {"sha": "456887f907250fda0da8266501593e5916fb59a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/456887f907250fda0da8266501593e5916fb59a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9dbe7bb252efef01651d46da119afcdea78a301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dbe7bb252efef01651d46da119afcdea78a301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9dbe7bb252efef01651d46da119afcdea78a301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dbe7bb252efef01651d46da119afcdea78a301/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7ad6c2d616aff70b3ad1b17bae0d9fd9ba0478a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ad6c2d616aff70b3ad1b17bae0d9fd9ba0478a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ad6c2d616aff70b3ad1b17bae0d9fd9ba0478a"}], "stats": {"total": 146, "additions": 91, "deletions": 55}, "files": [{"sha": "b99d92b98f3210c00941f119ade350ed69808301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -1,3 +1,31 @@\n+2009-06-01  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/39129\n+\t* tree-vect-loop-manip.c (conservative_cost_threshold): Change the \n+\tprinted message.\n+\t(vect_do_peeling_for_loop_bound): Use \n+\tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n+\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n+\t(vect_loop_versioning): Likewise.\n+\t(vect_create_cond_for_alias_checks): Fix indentation.\n+\t* tree-vectorizer.h (struct _loop_vec_info): Fix indentation of the \n+\tmacros.\n+\t(LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT): Define.\n+\t(LOOP_REQUIRES_VERSIONING_FOR_ALIAS): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_loop_form): Change \"too many BBs\" to \n+\t\"control flow in loop\".\n+\t(vect_estimate_min_profitable_iters): Use \n+\tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n+\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n+\t(vect_create_data_ref_ptr): Don't mention array dimension in printing.\n+\t* tree-vect-stmts.c (vectorizable_store): Replace the check that the \n+\tstatement belongs to a group of strided accesses with the exact code \n+\tcheck.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Spell out \"basic block\".\n+\t(vect_slp_analyze_bb, vect_slp_transform_bb): Likewise.\n+\n 2009-06-01  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config/freebsd-stdint.h: New file."}, {"sha": "3279d8c8f1e41ecb0fabf98571ae0bcc99811b5d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -1196,15 +1196,15 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \t}\n     }\n \n-  vect_versioning_for_alias_required =\n-    (VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)) > 0);\n+  vect_versioning_for_alias_required \n+    = LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo);\n \n   /* Temporarily, if versioning for alias is required, we disable peeling\n      until we support peeling and versioning.  Often peeling for alignment\n      will require peeling for loop-bound, which in turn requires that we\n      know how to adjust the loop ivs after the loop.  */\n   if (vect_versioning_for_alias_required\n-       || !vect_can_advance_ivs_p (loop_vinfo)\n+      || !vect_can_advance_ivs_p (loop_vinfo)\n       || !slpeel_can_duplicate_loop_p (loop, single_exit (loop)))\n     do_peeling = false;\n \n@@ -1366,7 +1366,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n         }\n       \n       /* Versioning requires at least one misaligned data reference.  */\n-      if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo)) == 0)\n+      if (!LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo))\n         do_versioning = false;\n       else if (!do_versioning)\n         VEC_truncate (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo), 0);\n@@ -2356,10 +2356,9 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n       tree data_ref_base = base_name;\n       fprintf (vect_dump, \"create vector-pointer variable to type: \");\n       print_generic_expr (vect_dump, vectype, TDF_SLIM);\n-      if (TREE_CODE (data_ref_base) == VAR_DECL)\n-        fprintf (vect_dump, \"  vectorizing a one dimensional array ref: \");\n-      else if (TREE_CODE (data_ref_base) == ARRAY_REF)\n-        fprintf (vect_dump, \"  vectorizing a multidimensional array ref: \");\n+      if (TREE_CODE (data_ref_base) == VAR_DECL \n+          || TREE_CODE (data_ref_base) == ARRAY_REF)\n+        fprintf (vect_dump, \"  vectorizing an array ref: \");\n       else if (TREE_CODE (data_ref_base) == COMPONENT_REF)\n         fprintf (vect_dump, \"  vectorizing a record based array ref: \");\n       else if (TREE_CODE (data_ref_base) == SSA_NAME)"}, {"sha": "eaf263c4270c8675c4878930f42741b5d9e9247b", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -1680,7 +1680,7 @@ conservative_cost_threshold (loop_vec_info loop_vinfo,\n     th = (unsigned) min_profitable_iters;\n \n   if (th && vect_print_dump_info (REPORT_COST))\n-    fprintf (vect_dump, \"Vectorization may not be profitable.\");\n+    fprintf (vect_dump, \"Profitability threshold is %u loop iterations.\", th);\n \n   return th;\n }\n@@ -1730,8 +1730,8 @@ vect_do_peeling_for_loop_bound (loop_vec_info loop_vinfo, tree *ratio,\n \n   /* If cost model check not done during versioning and \n      peeling for alignment.  */\n-  if (!VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo))\n-      && !VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo))\n+  if (!LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+      && !LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo)\n       && !LOOP_PEELING_FOR_ALIGNMENT (loop_vinfo)\n       && !cond_expr)\n     {\n@@ -2280,10 +2280,10 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n       else\n \t*cond_expr = part_cond_expr;\n     }\n-    if (vect_print_dump_info (REPORT_VECTORIZED_LOCATIONS))\n-      fprintf (vect_dump, \"created %u versioning for alias checks.\\n\",\n-               VEC_length (ddr_p, may_alias_ddrs));\n \n+  if (vect_print_dump_info (REPORT_VECTORIZED_LOCATIONS))\n+    fprintf (vect_dump, \"created %u versioning for alias checks.\\n\",\n+             VEC_length (ddr_p, may_alias_ddrs));\n }\n \n \n@@ -2339,11 +2339,11 @@ vect_loop_versioning (loop_vec_info loop_vinfo, bool do_versioning,\n   *cond_expr = force_gimple_operand (*cond_expr, cond_expr_stmt_list,\n \t\t\t\t     false, NULL_TREE);\n \n-  if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo)))\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo))\n       vect_create_cond_for_align_checks (loop_vinfo, cond_expr,\n \t\t\t\t\t cond_expr_stmt_list);\n \n-  if (VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     vect_create_cond_for_alias_checks (loop_vinfo, cond_expr,\n \t\t\t\t       cond_expr_stmt_list);\n "}, {"sha": "72de3d6441c6e1cec614ec9f9f72697521564834", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -846,7 +846,7 @@ vect_analyze_loop_form (struct loop *loop)\n       if (loop->num_nodes != 2)\n         {\n           if (vect_print_dump_info (REPORT_BAD_FORM_LOOPS))\n-            fprintf (vect_dump, \"not vectorized: too many BBs in loop.\");\n+            fprintf (vect_dump, \"not vectorized: control flow in loop.\");\n           return NULL;\n         }\n \n@@ -908,7 +908,7 @@ vect_analyze_loop_form (struct loop *loop)\n       if (loop->num_nodes != 5) \n         {\n \t  if (vect_print_dump_info (REPORT_BAD_FORM_LOOPS))\n-\t    fprintf (vect_dump, \"not vectorized: too many BBs in loop.\");\n+\t    fprintf (vect_dump, \"not vectorized: control flow in loop.\");\n \t  destroy_loop_vec_info (inner_loop_vinfo, true);\n \t  return NULL;\n         }\n@@ -1756,7 +1756,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n     }\n \n   /* Requires loop versioning tests to handle misalignment.  */\n-  if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo)))\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo))\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       vec_outside_cost +=\n@@ -1766,7 +1766,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n                  \"versioning to treat misalignment.\\n\");\n     }\n \n-  if (VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n+  /* Requires loop versioning with alias checks.  */\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       vec_outside_cost +=\n@@ -1776,11 +1777,9 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n                  \"versioning aliasing.\\n\");\n     }\n \n-  if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo))\n-      || VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n-    {\n-      vec_outside_cost += TARG_COND_TAKEN_BRANCH_COST;\n-    }\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+      || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n+    vec_outside_cost += TARG_COND_TAKEN_BRANCH_COST;\n \n   /* Count statements in scalar loop.  Using this as scalar cost for a single\n      iteration for now.\n@@ -1946,12 +1945,12 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n      decide whether to vectorize at compile time. Hence the scalar version\n      do not carry cost model guard costs.  */\n   if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-      || VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo))\n-      || VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n+      || LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+      || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     {\n       /* Cost model check occurs at versioning.  */\n-      if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo))\n-\t  || VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n+      if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+          || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n \tscalar_outside_cost += TARG_COND_NOT_TAKEN_BRANCH_COST;\n       else\n \t{\n@@ -3648,8 +3647,8 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n        || (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n \t   && LOOP_VINFO_INT_NITERS (loop_vinfo) % vectorization_factor != 0));\n \n-  if (VEC_length (gimple, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo))\n-      || VEC_length (ddr_p, LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo)))\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+      || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     vect_loop_versioning (loop_vinfo,\n \t\t\t  !do_peeling_for_loop_bound,\n \t\t\t  &cond_expr, &cond_expr_stmt_list);"}, {"sha": "1017847a5f1ff50d161ec948abb72536838c776b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -912,7 +912,8 @@ vect_analyze_slp_instance (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   if (unrolling_factor != 1 && !loop_vinfo)\n     {\n       if (vect_print_dump_info (REPORT_SLP))\n-        fprintf (vect_dump, \"Build SLP failed: unrolling required in BB SLP\");\n+        fprintf (vect_dump, \"Build SLP failed: unrolling required in basic\"\n+                            \" block SLP\");\n       \n       return false;\n     }\n@@ -1367,7 +1368,7 @@ vect_slp_analyze_bb (basic_block bb)\n     }\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n-    fprintf (vect_dump, \"BB will be vectorized using SLP\\n\");\n+    fprintf (vect_dump, \"Basic block will be vectorized using SLP\\n\");\n \n   return bb_vinfo;\n }\n@@ -2088,7 +2089,7 @@ vect_slp_transform_bb (basic_block bb)\n   update_ssa (TODO_update_ssa);\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n-    fprintf (vect_dump, \"BB VECTORIZED\\n\");\n+    fprintf (vect_dump, \"BASIC BLOCK VECTORIZED\\n\");\n \n   destroy_bb_vec_info (bb_vinfo);\n }"}, {"sha": "be6e2c6ec1831b2a0e81b114c77f4d41c8194eab", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -2903,7 +2903,9 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   scalar_dest = gimple_assign_lhs (stmt);\n   if (TREE_CODE (scalar_dest) != ARRAY_REF\n       && TREE_CODE (scalar_dest) != INDIRECT_REF\n-      && !STMT_VINFO_STRIDED_ACCESS (stmt_info))\n+      && TREE_CODE (scalar_dest) != COMPONENT_REF\n+      && TREE_CODE (scalar_dest) != IMAGPART_EXPR\n+      && TREE_CODE (scalar_dest) != REALPART_EXPR)\n     return false;\n \n   gcc_assert (gimple_assign_single_p (stmt));\n@@ -3285,7 +3287,9 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   code = gimple_assign_rhs_code (stmt);\n   if (code != ARRAY_REF\n       && code != INDIRECT_REF\n-      && !STMT_VINFO_STRIDED_ACCESS (stmt_info))\n+      && code != COMPONENT_REF\n+      && code != IMAGPART_EXPR\n+      && code != REALPART_EXPR)\n     return false;\n \n   if (!STMT_VINFO_DATA_REF (stmt_info))"}, {"sha": "c78e76853b601487cf0ebebaeb5d215f3aac5615", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9dbe7bb252efef01651d46da119afcdea78a301/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=e9dbe7bb252efef01651d46da119afcdea78a301", "patch": "@@ -239,33 +239,38 @@ typedef struct _loop_vec_info {\n } *loop_vec_info;\n \n /* Access Functions.  */\n-#define LOOP_VINFO_LOOP(L)            (L)->loop\n-#define LOOP_VINFO_BBS(L)             (L)->bbs\n-#define LOOP_VINFO_NITERS(L)          (L)->num_iters\n+#define LOOP_VINFO_LOOP(L)                 (L)->loop\n+#define LOOP_VINFO_BBS(L)                  (L)->bbs\n+#define LOOP_VINFO_NITERS(L)               (L)->num_iters\n /* Since LOOP_VINFO_NITERS can change after prologue peeling\n    retain total unchanged scalar loop iterations for cost model.  */\n-#define LOOP_VINFO_NITERS_UNCHANGED(L)          (L)->num_iters_unchanged\n-#define LOOP_VINFO_COST_MODEL_MIN_ITERS(L)\t(L)->min_profitable_iters\n-#define LOOP_VINFO_VECTORIZABLE_P(L)  (L)->vectorizable\n-#define LOOP_VINFO_VECT_FACTOR(L)     (L)->vectorization_factor\n-#define LOOP_VINFO_PTR_MASK(L)        (L)->ptr_mask\n-#define LOOP_VINFO_DATAREFS(L)        (L)->datarefs\n-#define LOOP_VINFO_DDRS(L)            (L)->ddrs\n-#define LOOP_VINFO_INT_NITERS(L)      (TREE_INT_CST_LOW ((L)->num_iters))\n-#define LOOP_PEELING_FOR_ALIGNMENT(L) (L)->peeling_for_alignment\n-#define LOOP_VINFO_UNALIGNED_DR(L)    (L)->unaligned_dr\n-#define LOOP_VINFO_MAY_MISALIGN_STMTS(L) (L)->may_misalign_stmts\n-#define LOOP_VINFO_LOC(L)             (L)->loop_line_number\n-#define LOOP_VINFO_MAY_ALIAS_DDRS(L)  (L)->may_alias_ddrs\n-#define LOOP_VINFO_STRIDED_STORES(L)  (L)->strided_stores\n-#define LOOP_VINFO_SLP_INSTANCES(L)   (L)->slp_instances\n+#define LOOP_VINFO_NITERS_UNCHANGED(L)     (L)->num_iters_unchanged\n+#define LOOP_VINFO_COST_MODEL_MIN_ITERS(L) (L)->min_profitable_iters\n+#define LOOP_VINFO_VECTORIZABLE_P(L)       (L)->vectorizable\n+#define LOOP_VINFO_VECT_FACTOR(L)          (L)->vectorization_factor\n+#define LOOP_VINFO_PTR_MASK(L)             (L)->ptr_mask\n+#define LOOP_VINFO_DATAREFS(L)             (L)->datarefs\n+#define LOOP_VINFO_DDRS(L)                 (L)->ddrs\n+#define LOOP_VINFO_INT_NITERS(L)           (TREE_INT_CST_LOW ((L)->num_iters))\n+#define LOOP_PEELING_FOR_ALIGNMENT(L)      (L)->peeling_for_alignment\n+#define LOOP_VINFO_UNALIGNED_DR(L)         (L)->unaligned_dr\n+#define LOOP_VINFO_MAY_MISALIGN_STMTS(L)   (L)->may_misalign_stmts\n+#define LOOP_VINFO_LOC(L)                  (L)->loop_line_number\n+#define LOOP_VINFO_MAY_ALIAS_DDRS(L)       (L)->may_alias_ddrs\n+#define LOOP_VINFO_STRIDED_STORES(L)       (L)->strided_stores\n+#define LOOP_VINFO_SLP_INSTANCES(L)        (L)->slp_instances\n #define LOOP_VINFO_SLP_UNROLLING_FACTOR(L) (L)->slp_unrolling_factor\n \n+#define LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT(L) \\\n+VEC_length (gimple, (L)->may_misalign_stmts) > 0\n+#define LOOP_REQUIRES_VERSIONING_FOR_ALIAS(L)     \\\n+VEC_length (ddr_p, (L)->may_alias_ddrs) > 0\n+\n #define NITERS_KNOWN_P(n)                     \\\n (host_integerp ((n),0)                        \\\n && TREE_INT_CST_LOW ((n)) > 0)\n \n-#define LOOP_VINFO_NITERS_KNOWN_P(L)                     \\\n+#define LOOP_VINFO_NITERS_KNOWN_P(L)          \\\n NITERS_KNOWN_P((L)->num_iters)\n \n static inline loop_vec_info"}]}