{"sha": "a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmMDUxZmUwYmMzNjM4YzdmMjg5YjhkMzRlMDIyY2JiN2Y4MjI4ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-11T16:52:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-11T16:52:47Z"}, "message": "vxworks-dummy.h (TARGET_VXWORKS): Define.\n\ngcc/\n\t* config/vxworks-dummy.h (TARGET_VXWORKS): Define.\n\t* config/vxworks.h (TARGET_VXWORKS): Override.\n\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Don't define\n\t\"mips\" if TARGET_VXWORKS.\n\nFrom-SVN: r127361", "tree": {"sha": "e180a2c0612e82e69dd834569c293bbbca8e9a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e180a2c0612e82e69dd834569c293bbbca8e9a14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/comments", "author": null, "committer": null, "parents": [{"sha": "3fb300196dd0d2ff04eddf6c53f825699fd6720a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb300196dd0d2ff04eddf6c53f825699fd6720a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb300196dd0d2ff04eddf6c53f825699fd6720a"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "8afb826970c33a0a594d56c93bee6f51cf140c44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "patch": "@@ -1,3 +1,10 @@\n+2007-08-11  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/vxworks-dummy.h (TARGET_VXWORKS): Define.\n+\t* config/vxworks.h (TARGET_VXWORKS): Override.\n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Don't define\n+\t\"mips\" if TARGET_VXWORKS.\n+\n 2007-08-11  Richard Sandiford  <richard@codesourcery.com>\n \n \t* calls.c (avoid_likely_spilled_reg): New function."}, {"sha": "564f8bc0a2d9df76ff395709e55c8fbf7d2756fb", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "patch": "@@ -357,9 +357,14 @@ extern enum mips_code_readable_setting mips_code_readable;\n       builtin_define (\"__mips__\");     \t\t\t\t\t\\\n       builtin_define (\"_mips\");\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* We do this here because __mips is defined below\t\t\\\n-\t and so we can't use builtin_define_std.  */\t\t\t\\\n-      if (!flag_iso)\t\t\t\t\t\t\t\\\n+      /* We do this here because __mips is defined below and so we\t\\\n+\t can't use builtin_define_std.  We don't ever want to define\t\\\n+\t \"mips\" for VxWorks because some of the VxWorks headers\t\t\\\n+\t construct include filenames from a root directory macro,\t\\\n+\t an architecture macro and a filename, where the architecture\t\\\n+\t macro expands to 'mips'.  If we define 'mips' to 1, the\t\\\n+\t architecture macro expands to 1 as well.  */\t\t\t\\\n+      if (!flag_iso && !TARGET_VXWORKS)\t\t\t\t\t\\\n \tbuiltin_define (\"mips\");\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (TARGET_64BIT)\t\t\t\t\t\t\t\\"}, {"sha": "f310d0808d33b71370d5e610fc243b04b965b5fa", "filename": "gcc/config/vxworks-dummy.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fvxworks-dummy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fvxworks-dummy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks-dummy.h?ref=a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "patch": "@@ -17,6 +17,11 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* True if we're targetting VxWorks.  */\n+#ifndef TARGET_VXWORKS\n+#define TARGET_VXWORKS 0\n+#endif\n+\n /* True if generating code for a VxWorks RTP.  */\n #ifndef TARGET_VXWORKS_RTP\n #define TARGET_VXWORKS_RTP false"}, {"sha": "322260d863a642a11e3f64982715b33a48ef89ef", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "patch": "@@ -20,6 +20,10 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Assert that we are targetting VxWorks.  */\n+#undef TARGET_VXWORKS\n+#define TARGET_VXWORKS 1\n+\n /* In kernel mode, VxWorks provides all the libraries itself, as well as\n    the functionality of startup files, etc.  In RTP mode, it behaves more\n    like a traditional Unix, with more external files.  Most of our specs"}]}