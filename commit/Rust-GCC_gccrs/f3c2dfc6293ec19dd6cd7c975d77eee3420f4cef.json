{"sha": "f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjMmRmYzYyOTNlYzE5ZGQ2Y2Q3Yzk3NWQ3N2VlZTM0MjBmNGNlZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-08-21T17:44:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-21T17:44:16Z"}, "message": "re PR c++/11551 (g++ accepts typedef as destructor name)\n\n\tPR c++/11551\n\t* parser.c (cp_parser_id_expression): Add declarator_p parameter.\n\t(cp_parser_primary_expression): Adjust call to\n\tcp_parser_id_expression.\n\t(cp_parser_unqualified_id): Complain about the use of\n\ttypedef-names in a destructor declarator.\n\t(cp_parser_postfix_expression): Adjust call to\n\tcp_parser_id_expression.\n\t(cp_parser_type_parameter): Likewise.\n\t(cp_parser_template_argument): Likewise.\n\t(cp_parser_declarator_id): Likewise.\n\n\tPR c++/11919\n\t* call.c (standard_conversion): Use same_type_p, not pointer\n\tequality, to compare types.\n\n\tPR c++/10762\n\t* parser.c (cp_parser_using_declaration): Check for invalid uses\n\tof template-ids here...\n\t* decl2.c (do_class_using_decl): ... rather than here.\n\n\tPR c++/11919\n\t* g++.dg/overload/prom1.C: New test.\n\n\tPR c++/11551\n\t* g++.dg/parse/dtor2.C: New test.\n\n\tPR c++/10762\n\t* g++.dg/parse/using2.C: New test.\n\nFrom-SVN: r70652", "tree": {"sha": "d85dca699dc8ee19c0f5824a3b1e39698708c6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85dca699dc8ee19c0f5824a3b1e39698708c6ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/comments", "author": null, "committer": null, "parents": [{"sha": "ca11c37c5d5a639edf9e4a7ac211bdd3df6d620f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca11c37c5d5a639edf9e4a7ac211bdd3df6d620f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca11c37c5d5a639edf9e4a7ac211bdd3df6d620f"}], "stats": {"total": 177, "additions": 127, "deletions": 50}, "files": [{"sha": "ec4f44458bd03b306d77e98a8eca534ac55a5667", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -1,3 +1,26 @@\n+2003-08-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11551\n+\t* parser.c (cp_parser_id_expression): Add declarator_p parameter.\n+\t(cp_parser_primary_expression): Adjust call to\n+\tcp_parser_id_expression.\n+\t(cp_parser_unqualified_id): Complain about the use of\n+\ttypedef-names in a destructor declarator.\n+\t(cp_parser_postfix_expression): Adjust call to\n+\tcp_parser_id_expression.\n+\t(cp_parser_type_parameter): Likewise.\n+\t(cp_parser_template_argument): Likewise.\n+\t(cp_parser_declarator_id): Likewise.\n+\n+\tPR c++/11919\n+\t* call.c (standard_conversion): Use same_type_p, not pointer\n+\tequality, to compare types.\n+\n+\tPR c++/10762\n+\t* parser.c (cp_parser_using_declaration): Check for invalid uses\n+\tof template-ids here...\n+\t* decl2.c (do_class_using_decl): ... rather than here.\n+\n 2003-08-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11834"}, {"sha": "a76d2ac022ab4154a9d348611d386f36b90f36be", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -795,7 +795,7 @@ standard_conversion (tree to, tree from, tree expr)\n       conv = build_conv (STD_CONV, to, conv);\n \n       /* Give this a better rank if it's a promotion.  */\n-      if (to == type_promotes_to (from)\n+      if (same_type_p (to, type_promotes_to (from))\n \t  && ICS_STD_RANK (TREE_OPERAND (conv, 0)) <= PROMO_RANK)\n \tICS_STD_RANK (conv) = PROMO_RANK;\n     }"}, {"sha": "4eb5c0e6daeaa04d92d514252c09b02875de5cc2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -4091,27 +4091,13 @@ do_class_using_decl (tree decl)\n       error (\"using-declaration cannot name destructor\");\n       return NULL_TREE;\n     }\n-  else if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n-    {\n-    template_id_error:;\n-      \n-      error (\"a using-declaration cannot specify a template-id\");\n-      return NULL_TREE;\n-    }\n   if (TREE_CODE (name) == TYPE_DECL)\n-    {\n-      if (CLASSTYPE_USE_TEMPLATE (TREE_TYPE (name)))\n-\tgoto template_id_error;\n-      name = DECL_NAME (name);\n-    }\n+    name = DECL_NAME (name);\n   else if (TREE_CODE (name) == TEMPLATE_DECL)\n      name = DECL_NAME (name);\n   else if (BASELINK_P (name))\n     {\n       tree fns = BASELINK_FUNCTIONS (name);\n-      \n-      if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n-\tgoto template_id_error;\n       name = DECL_NAME (get_first_fn (fns));\n     }\n "}, {"sha": "c177a6c778d7dbe4d6bf688abba0e5620335b63c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 70, "deletions": 34, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -1296,9 +1296,9 @@ static bool cp_parser_translation_unit\n static tree cp_parser_primary_expression\n   (cp_parser *, cp_id_kind *, tree *);\n static tree cp_parser_id_expression\n-  (cp_parser *, bool, bool, bool *);\n+  (cp_parser *, bool, bool, bool *, bool);\n static tree cp_parser_unqualified_id\n-  (cp_parser *, bool, bool);\n+  (cp_parser *, bool, bool, bool);\n static tree cp_parser_nested_name_specifier_opt\n   (cp_parser *, bool, bool, bool);\n static tree cp_parser_nested_name_specifier\n@@ -2398,7 +2398,8 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  = cp_parser_id_expression (parser, \n \t\t\t\t     /*template_keyword_p=*/false,\n \t\t\t\t     /*check_dependency_p=*/true,\n-\t\t\t\t     /*template_p=*/NULL);\n+\t\t\t\t     /*template_p=*/NULL,\n+\t\t\t\t     /*declarator_p=*/false);\n \tif (id_expression == error_mark_node)\n \t  return error_mark_node;\n \t/* If we have a template-id, then no further lookup is\n@@ -2495,13 +2496,17 @@ cp_parser_primary_expression (cp_parser *parser,\n \n    If *TEMPLATE_P is non-NULL, it is set to true iff the\n    `template' keyword is used to explicitly indicate that the entity\n-   named is a template.  */\n+   named is a template.  \n+\n+   If DECLARATOR_P is true, the id-expression is appearing as part of\n+   a declarator, rather than as part of an exprsesion.  */\n \n static tree\n cp_parser_id_expression (cp_parser *parser,\n \t\t\t bool template_keyword_p,\n \t\t\t bool check_dependency_p,\n-\t\t\t bool *template_p)\n+\t\t\t bool *template_p,\n+\t\t\t bool declarator_p)\n {\n   bool global_scope_p;\n   bool nested_name_specifier_p;\n@@ -2542,7 +2547,8 @@ cp_parser_id_expression (cp_parser *parser,\n       saved_qualifying_scope = parser->qualifying_scope;\n       /* Process the final unqualified-id.  */\n       unqualified_id = cp_parser_unqualified_id (parser, *template_p,\n-\t\t\t\t\t\t check_dependency_p);\n+\t\t\t\t\t\t check_dependency_p,\n+\t\t\t\t\t\t declarator_p);\n       /* Restore the SAVED_SCOPE for our caller.  */\n       parser->scope = saved_scope;\n       parser->object_scope = saved_object_scope;\n@@ -2597,7 +2603,8 @@ cp_parser_id_expression (cp_parser *parser,\n     }\n   else\n     return cp_parser_unqualified_id (parser, template_keyword_p,\n-\t\t\t\t     /*check_dependency_p=*/true);\n+\t\t\t\t     /*check_dependency_p=*/true,\n+\t\t\t\t     declarator_p);\n }\n \n /* Parse an unqualified-id.\n@@ -2618,12 +2625,15 @@ cp_parser_id_expression (cp_parser *parser,\n    BIT_NOT_EXPR is an IDENTIFIER_NODE for the class-name.  For the\n    other productions, see the documentation accompanying the\n    corresponding parsing functions.  If CHECK_DEPENDENCY_P is false,\n-   names are looked up in uninstantiated templates.  */\n+   names are looked up in uninstantiated templates.  If DECLARATOR_P\n+   is true, the unqualified-id is appearing as part of a declarator,\n+   rather than as part of an expression.  */\n \n static tree\n cp_parser_unqualified_id (cp_parser* parser, \n                           bool template_keyword_p,\n-\t\t\t  bool check_dependency_p)\n+\t\t\t  bool check_dependency_p,\n+\t\t\t  bool declarator_p)\n {\n   cp_token *token;\n \n@@ -2781,6 +2791,16 @@ cp_parser_unqualified_id (cp_parser* parser,\n \telse if (type_decl == error_mark_node)\n \t  return error_mark_node;\n \n+\t/* [class.dtor]\n+\n+\t   A typedef-name that names a class shall not be used as the\n+\t   identifier in the declarator for a destructor declaration.  */\n+\tif (declarator_p \n+\t    && !DECL_IMPLICIT_TYPEDEF_P (type_decl)\n+\t    && !DECL_SELF_REFERENCE_P (type_decl))\n+\t  error (\"typedef-name `%D' used as destructor declarator\",\n+\t\t type_decl);\n+\n \treturn build_nt (BIT_NOT_EXPR, TREE_TYPE (type_decl));\n       }\n \n@@ -3625,7 +3645,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t\tname = cp_parser_id_expression (parser,\n \t\t\t\t\t\ttemplate_p,\n \t\t\t\t\t\t/*check_dependency_p=*/true,\n-\t\t\t\t\t\t/*template_p=*/NULL);\n+\t\t\t\t\t\t/*template_p=*/NULL,\n+\t\t\t\t\t\t/*declarator_p=*/false);\n \t\t/* In general, build a SCOPE_REF if the member name is\n \t\t   qualified.  However, if the name was not dependent\n \t\t   and has already been resolved; there is no need to\n@@ -7386,7 +7407,8 @@ cp_parser_type_parameter (cp_parser* parser)\n \t      = cp_parser_id_expression (parser,\n \t\t\t\t\t /*template_keyword_p=*/false,\n \t\t\t\t\t /*check_dependency_p=*/true,\n-\t\t\t\t\t /*template_p=*/NULL);\n+\t\t\t\t\t /*template_p=*/NULL,\n+\t\t\t\t\t /*declarator_p=*/false);\n \t    /* Look up the name.  */\n \t    default_argument \n \t      = cp_parser_lookup_name_simple (parser, default_argument);\n@@ -7805,7 +7827,8 @@ cp_parser_template_argument (cp_parser* parser)\n   argument = cp_parser_id_expression (parser, \n \t\t\t\t      /*template_keyword_p=*/false,\n \t\t\t\t      /*check_dependency_p=*/true,\n-\t\t\t\t      &template_p);\n+\t\t\t\t      &template_p,\n+\t\t\t\t      /*declarator_p=*/false);\n   /* If the next token isn't a `,' or a `>', then this argument wasn't\n      really finished.  */\n   if (!cp_parser_next_token_ends_template_argument_p (parser))\n@@ -8992,35 +9015,47 @@ cp_parser_using_declaration (cp_parser* parser)\n   /* Parse the unqualified-id.  */\n   identifier = cp_parser_unqualified_id (parser, \n \t\t\t\t\t /*template_keyword_p=*/false,\n-\t\t\t\t\t /*check_dependency_p=*/true);\n+\t\t\t\t\t /*check_dependency_p=*/true,\n+\t\t\t\t\t /*declarator_p=*/true);\n \n   /* The function we call to handle a using-declaration is different\n      depending on what scope we are in.  */\n-  scope = current_scope ();\n-  if (scope && TYPE_P (scope))\n-    {\n-      /* Create the USING_DECL.  */\n-      decl = do_class_using_decl (build_nt (SCOPE_REF,\n-\t\t\t\t\t    parser->scope,\n-\t\t\t\t\t    identifier));\n-      /* Add it to the list of members in this class.  */\n-      finish_member_declaration (decl);\n-    }\n+  if (identifier == error_mark_node)\n+    ;\n+  else if (TREE_CODE (identifier) != IDENTIFIER_NODE\n+\t   && TREE_CODE (identifier) != BIT_NOT_EXPR)\n+    /* [namespace.udecl]\n+\n+       A using declaration shall not name a template-id.  */\n+    error (\"a template-id may not appear in a using-declaration\");\n   else\n     {\n-      decl = cp_parser_lookup_name_simple (parser, identifier);\n-      if (decl == error_mark_node)\n+      scope = current_scope ();\n+      if (scope && TYPE_P (scope))\n \t{\n-\t  if (parser->scope && parser->scope != global_namespace)\n-\t    error (\"`%D::%D' has not been declared\", \n-\t\t   parser->scope, identifier);\n-\t  else\n-\t    error (\"`::%D' has not been declared\", identifier);\n+\t  /* Create the USING_DECL.  */\n+\t  decl = do_class_using_decl (build_nt (SCOPE_REF,\n+\t\t\t\t\t\tparser->scope,\n+\t\t\t\t\t\tidentifier));\n+\t  /* Add it to the list of members in this class.  */\n+\t  finish_member_declaration (decl);\n \t}\n-      else if (scope)\n-\tdo_local_using_decl (decl);\n       else\n-\tdo_toplevel_using_decl (decl);\n+\t{\n+\t  decl = cp_parser_lookup_name_simple (parser, identifier);\n+\t  if (decl == error_mark_node)\n+\t    {\n+\t      if (parser->scope && parser->scope != global_namespace)\n+\t\terror (\"`%D::%D' has not been declared\", \n+\t\t       parser->scope, identifier);\n+\t      else\n+\t\terror (\"`::%D' has not been declared\", identifier);\n+\t    }\n+\t  else if (scope)\n+\t    do_local_using_decl (decl);\n+\t  else\n+\t    do_toplevel_using_decl (decl);\n+\t}\n     }\n \n   /* Look for the final `;'.  */\n@@ -10119,7 +10154,8 @@ cp_parser_declarator_id (cp_parser* parser)\n   id_expression = cp_parser_id_expression (parser,\n \t\t\t\t\t   /*template_keyword_p=*/false,\n \t\t\t\t\t   /*check_dependency_p=*/false,\n-\t\t\t\t\t   /*template_p=*/NULL);\n+\t\t\t\t\t   /*template_p=*/NULL,\n+\t\t\t\t\t   /*declarator_p=*/true);\n   /* If the name was qualified, create a SCOPE_REF to represent \n      that.  */\n   if (parser->scope)"}, {"sha": "6aa9a0a3a72419e8d66bb891ec7f500ef6ce7ab0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -1,3 +1,14 @@\n+2003-08-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11919\n+\t* g++.dg/overload/prom1.C: New test.\n+\n+\tPR c++/11551\n+\t* g++.dg/parse/dtor2.C: New test.\n+\n+\tPR c++/10762\n+\t* g++.dg/parse/using2.C: New test.\n+\n 2003-08-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR target/11805"}, {"sha": "9eb387dc43a8c68f03e7376d8f2c67cd2f3654a4", "filename": "gcc/testsuite/g++.dg/overload/prom1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fprom1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fprom1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fprom1.C?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -0,0 +1,9 @@\n+void foo(signed char) {}\n+typedef int bar;\n+void foo(bar) {}\n+\n+int main (int, char **) {\n+  char c;\n+  foo(c);\n+  return 0;\n+}"}, {"sha": "60e132b4a9be181b212667be15c813ae0c08ceb5", "filename": "gcc/testsuite/g++.dg/parse/dtor2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor2.C?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -0,0 +1,4 @@\n+struct A {\n+  typedef A A2;\n+  ~A2(); // { dg-error \"\" }\n+};"}, {"sha": "bfdb09f88332b9227ec4ca79295093fb2ea8d6bc", "filename": "gcc/testsuite/g++.dg/parse/using2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fusing2.C?ref=f3c2dfc6293ec19dd6cd7c975d77eee3420f4cef", "patch": "@@ -0,0 +1,8 @@\n+namespace N {\n+  template <typename T>\n+  struct foo {};\n+}\n+\n+int main() {\n+  using N::foo<double>; // { dg-error \"\" }\n+}"}]}