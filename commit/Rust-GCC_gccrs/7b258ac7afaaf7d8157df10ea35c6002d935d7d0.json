{"sha": "7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IyNThhYzdhZmFhZjdkODE1N2RmMTBlYTM1YzYwMDJkOTM1ZDdkMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-01T22:24:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-04T02:38:33Z"}, "message": "c++: subst failure in attribute argument [PR95192]\n\nAnother SFINAE issue: we weren't propagating substitution failure in\nattributes back up.  And tsubst_function_decl needs to check substitution\nbefore register_specialization.  I thought about moving the other error\nreturns up as well, but they aren't SFINAE cases, so they can stay where\nthey are.\n\nThis change caused pr84630.C to stop giving an error; this was because\npartial instantiation of the lambda failed silently, and before the change\nthat meant error_mark_node passed to decl_attributes, which complained about\nthere being an argument at all.  With the change the partial instantiation\nfails, but no error was ever given, because push_template_decl silently\nfailed if current_template_parms wasn't set.  So let's set c_t_p\nappropriately.  lambda-uneval13.C is a valid testcase to exercise this.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95192\n\t* pt.c (tsubst_attribute): Handle error.\n\t(apply_late_template_attributes): Return false on error.\n\t(tsubst_function_decl): Check its return value.\n\t(tsubst_decl): Likewise.\n\t(push_template_decl): Assert current_template_parms.\n\t(tsubst_template_decl): Set current_template_parms.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95192\n\t* g++.dg/cpp0x/pr84630.C: Call b().\n\t* g++.dg/cpp2a/lambda-uneval13.C: New test.\n\t* g++.dg/ext/attr-expr1.C: New test.", "tree": {"sha": "36614d6f4de83622d092a3b5813394ffa9ba807b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36614d6f4de83622d092a3b5813394ffa9ba807b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9faaa80776a3dd602b47555bc001ca9a6ac6b784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faaa80776a3dd602b47555bc001ca9a6ac6b784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faaa80776a3dd602b47555bc001ca9a6ac6b784"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "af7c67af29fcf695dba229d8d4db5107b94a0ce0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "patch": "@@ -11571,6 +11571,8 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n     val = tsubst_expr (val, args, complain, in_decl,\n \t\t       /*integral_constant_expression_p=*/false);\n \n+  if (val == error_mark_node)\n+    return error_mark_node;\n   if (val != TREE_VALUE (t))\n     return build_tree_list (TREE_PURPOSE (t), val);\n   return t;\n@@ -11617,9 +11619,10 @@ tsubst_attributes (tree attributes, tree args,\n \n /* Apply any attributes which had to be deferred until instantiation\n    time.  DECL_P, ATTRIBUTES and ATTR_FLAGS are as cplus_decl_attributes;\n-   ARGS, COMPLAIN, IN_DECL are as tsubst.  */\n+   ARGS, COMPLAIN, IN_DECL are as tsubst.  Returns true normally,\n+   false on error.  */\n \n-static void\n+static bool\n apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t\t\t\ttree args, tsubst_flags_t complain, tree in_decl)\n {\n@@ -11628,12 +11631,12 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n   tree *p;\n \n   if (attributes == NULL_TREE)\n-    return;\n+    return true;\n \n   if (DECL_P (*decl_p))\n     {\n       if (TREE_TYPE (*decl_p) == error_mark_node)\n-\treturn;\n+\treturn false;\n       p = &DECL_ATTRIBUTES (*decl_p);\n       /* DECL_ATTRIBUTES comes from copy_node in tsubst_decl, and is identical\n          to our attributes parameter.  */\n@@ -11668,9 +11671,11 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t  t = *p;\n \t  if (ATTR_IS_DEPENDENT (t))\n \t    {\n+\t      *q = tsubst_attribute (t, decl_p, args, complain, in_decl);\n+\t      if (*q == error_mark_node)\n+\t\treturn false;\n \t      *p = TREE_CHAIN (t);\n \t      TREE_CHAIN (t) = NULL_TREE;\n-\t      *q = tsubst_attribute (t, decl_p, args, complain, in_decl);\n \t      while (*q)\n \t\tq = &TREE_CHAIN (*q);\n \t    }\n@@ -11680,6 +11685,7 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \n       cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n     }\n+  return true;\n }\n \n /* The template TMPL is being instantiated with the template arguments TARGS.\n@@ -14048,6 +14054,10 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t\t\t     tsubst (DECL_FRIEND_CONTEXT (t),\n \t\t\t\t     args, complain, in_decl));\n \n+  if (!apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t       args, complain, in_decl))\n+    return error_mark_node;\n+\n   /* Set up the DECL_TEMPLATE_INFO for R.  There's no need to do\n      this in the special friend case mentioned above where\n      GEN_TMPL is NULL.  */\n@@ -14127,8 +14137,6 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n       && !processing_template_decl)\n     defaulted_late_check (r);\n \n-  apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n-\t\t\t\t  args, complain, in_decl);\n   if (flag_openmp)\n     if (tree attr = lookup_attribute (\"omp declare variant base\",\n \t\t\t\t      DECL_ATTRIBUTES (r)))\n@@ -14228,7 +14236,9 @@ tsubst_template_decl (tree t, tree args, tsubst_flags_t complain,\n   /* The template parameters for this new template are all the\n      template parameters for the old template, except the\n      outermost level of parameters.  */\n+  auto tparm_guard = make_temp_override (current_template_parms);\n   DECL_TEMPLATE_PARMS (r)\n+    = current_template_parms\n     = tsubst_template_parms (DECL_TEMPLATE_PARMS (t), args,\n \t\t\t     complain);\n \n@@ -14491,8 +14501,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n             if (!DECL_TEMPLATE_PARM_P (r))\n               DECL_ARG_TYPE (r) = type_passed_as (type);\n \n-\t    apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n-\t\t\t\t\t    args, complain, in_decl);\n+\t    if (!apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\t\t args, complain, in_decl))\n+\t      return error_mark_node;\n \n             /* Keep track of the first new parameter we\n                generate. That's what will be returned to the\n@@ -14581,8 +14592,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t       finish_member_declaration.  */\n \t    DECL_CHAIN (r) = NULL_TREE;\n \n-\t    apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n-\t\t\t\t\t    args, complain, in_decl);\n+\t    if (!apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\t\t args, complain, in_decl))\n+\t      return error_mark_node;\n \n \t    if (vec)\n \t      TREE_VEC_ELT (vec, i) = r;\n@@ -14901,9 +14913,10 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \tDECL_CHAIN (r) = NULL_TREE;\n \n-\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r),\n-\t\t\t\t\t/*flags=*/0,\n-\t\t\t\t\targs, complain, in_decl);\n+\tif (!apply_late_template_attributes (&r, DECL_ATTRIBUTES (r),\n+\t\t\t\t\t     /*flags=*/0,\n+\t\t\t\t\t     args, complain, in_decl))\n+\t  return error_mark_node;\n \n \t/* Preserve a typedef that names a type.  */\n \tif (is_typedef_decl (r) && type != error_mark_node)"}, {"sha": "7d6361b21ea924a615ede6b0ee8f13cc799168d3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr84630.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84630.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84630.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84630.C?ref=7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "patch": "@@ -5,3 +5,4 @@ template <typename...> struct c {\n   template <int> __attribute__((noinline([] {}))) int b();  // { dg-error \"wrong number of arguments\" }\n };\n c<> a;\n+int i = a.b<42>();"}, {"sha": "df908f0e8eac930d30cb7dc5ff648b383f2c2d42", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval13.C?ref=7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++20 } }\n+\n+template <class U> struct A\n+{\n+  template <class T> void spam(decltype([]{}) *s = nullptr) { }\n+};\n+\n+void foo()\n+{\n+  A<int>().spam<int>();\n+}"}, {"sha": "990e710e40ca395ab8d8eabc69ca0cfcec18dd5c", "filename": "gcc/testsuite/g++.dg/ext/attr-expr1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b258ac7afaaf7d8157df10ea35c6002d935d7d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-expr1.C?ref=7b258ac7afaaf7d8157df10ea35c6002d935d7d0", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/95192\n+\n+template<typename T>\n+__attribute__((assume_aligned(sizeof(int(T()))))) // { dg-message \"function type\" }\n+T *f();\n+\n+void test21() {\n+  void *p = f<void>()\t\t// { dg-error \"no match\" }\n+}"}]}