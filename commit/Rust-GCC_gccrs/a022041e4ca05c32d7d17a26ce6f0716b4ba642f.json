{"sha": "a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyMjA0MWU0Y2EwNWMzMmQ3ZDE3YTI2Y2U2ZjA3MTZiNGJhNjQyZg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-01-15T17:59:44Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-01-15T17:59:44Z"}, "message": "re PR c++/34314 (ICE on invalid code (with variadic templates): tree check: expected class \u2018type\u2019, have \u2018exceptional\u2019 (error_mark) in template_class_depth)\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/34314\n       * error.c (dump_simple_decl): Display ellipsis for template\n       non-type parameter packs.\n       (dump_decl): Display ellipsis for template type parameter packs.\n       (dump_template_decl): Display ellipsis for template template\n       parameter packs.\n       * pt.c (redeclare_class_template): When redeclaring a class\n       template, check for collisions between template parameters and\n       template parameter packs.\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/34314\n       * g++.dg/cpp0x/vt-34314.C: New.\n       * g++.dg/cpp0x/variadic79.C: Fix the error message to reflect\n       reality (the error message was wrong previously).\n\nFrom-SVN: r131546", "tree": {"sha": "511dc80030a709f965dd075fe6ce2d81b395e11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/511dc80030a709f965dd075fe6ce2d81b395e11d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c095a4f848959916b29dc626c2fd8120c0eedee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c095a4f848959916b29dc626c2fd8120c0eedee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c095a4f848959916b29dc626c2fd8120c0eedee7"}], "stats": {"total": 100, "additions": 92, "deletions": 8}, "files": [{"sha": "0b6ec64b5efae8c0654e121a6175fb355adef98b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "patch": "@@ -1,3 +1,15 @@\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/34314\n+       * error.c (dump_simple_decl): Display ellipsis for template\n+       non-type parameter packs.\n+       (dump_decl): Display ellipsis for template type parameter packs.\n+       (dump_template_decl): Display ellipsis for template template\n+       parameter packs.\n+       * pt.c (redeclare_class_template): When redeclaring a class\n+       template, check for collisions between template parameters and\n+       template parameter packs.\n+\n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n        PR c++/33964"}, {"sha": "b589fd2805ae7dbd05038347e215be09a313fc7f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "patch": "@@ -754,6 +754,10 @@ dump_simple_decl (tree t, tree type, int flags)\n \t  || TREE_CODE (DECL_INITIAL (t)) != TEMPLATE_PARM_INDEX))\n     dump_scope (CP_DECL_CONTEXT (t), flags);\n   flags &= ~TFF_UNQUALIFIED_NAME;\n+  if ((flags & TFF_DECL_SPECIFIERS)\n+      && DECL_TEMPLATE_PARM_P (t) \n+      && TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (t)))\n+    pp_identifier (cxx_pp, \"...\");\n   if (DECL_NAME (t))\n     dump_decl (DECL_NAME (t), flags);\n   else\n@@ -778,8 +782,14 @@ dump_decl (tree t, int flags)\n \t{\n \t  if ((flags & TFF_DECL_SPECIFIERS)\n \t      && TREE_CODE (TREE_TYPE (t)) == TEMPLATE_TYPE_PARM)\n-\t    /* Say `class T' not just `T'.  */\n-\t    pp_cxx_identifier (cxx_pp, \"class\");\n+\t    {\n+\t      /* Say `class T' not just `T'.  */\n+\t      pp_cxx_identifier (cxx_pp, \"class\");\n+\n+\t      /* Emit the `...' for a parameter pack.  */\n+\t      if (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (t)))\n+\t\tpp_cxx_identifier (cxx_pp, \"...\");\n+\t    }\n \n \t  dump_type (TREE_TYPE (t), flags);\n \t  break;\n@@ -1015,8 +1025,14 @@ dump_template_decl (tree t, int flags)\n       nreverse(orig_parms);\n \n       if (DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n-\t/* Say `template<arg> class TT' not just `template<arg> TT'.  */\n-\tpp_cxx_identifier (cxx_pp, \"class\");\n+\t{\n+\t  /* Say `template<arg> class TT' not just `template<arg> TT'.  */\n+\t  pp_cxx_identifier (cxx_pp, \"class\");\n+\n+\t  /* If this is a parameter pack, print the ellipsis.  */\n+\t  if (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (t)))\n+\t    pp_cxx_identifier (cxx_pp, \"...\");\n+\t}\n     }\n \n   if (TREE_CODE (DECL_TEMPLATE_RESULT (t)) == TYPE_DECL)"}, {"sha": "d364b20e9c568d03d0aa2e4a1c47296f3dacf7fd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "patch": "@@ -4193,9 +4193,15 @@ redeclare_class_template (tree type, tree parms)\n       /* TMPL_PARM and PARM can be either TYPE_DECL, PARM_DECL, or\n \t TEMPLATE_DECL.  */\n       if (tmpl_parm != error_mark_node\n-\t   && (TREE_CODE (tmpl_parm) != TREE_CODE (parm)\n-\t   || (TREE_CODE (tmpl_parm) != TYPE_DECL\n-\t       && !same_type_p (TREE_TYPE (tmpl_parm), TREE_TYPE (parm)))))\n+\t  && (TREE_CODE (tmpl_parm) != TREE_CODE (parm)\n+\t      || (TREE_CODE (tmpl_parm) != TYPE_DECL\n+\t\t  && !same_type_p (TREE_TYPE (tmpl_parm), TREE_TYPE (parm)))\n+\t      || (TREE_CODE (tmpl_parm) != PARM_DECL\n+\t\t  && (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (tmpl_parm))\n+\t\t      != TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (parm))))\n+\t      || (TREE_CODE (tmpl_parm) == PARM_DECL\n+\t\t  && (TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (tmpl_parm))\n+\t\t      != TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm))))))\n \t{\n \t  error (\"template parameter %q+#D\", tmpl_parm);\n \t  error (\"redeclared here as %q#D\", parm);"}, {"sha": "c6479e04fe50249e56c7be68ebf7c1d8295432bb", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic79.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C?ref=a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "patch": "@@ -4,4 +4,4 @@\n \n template<template<typename> class...> struct A;\n \n-template<template<typename...> class... B> struct A<B...> {}; // { dg-error \"mismatch|'template<class ...> class B ...'\" }\n+template<template<typename...> class... B> struct A<B...> {}; // { dg-error \"mismatch|'template<class ...> class ... B ...'\" }"}, {"sha": "4a935b367d6577d0c29838ffef9493acf1958f6b", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34314.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a022041e4ca05c32d7d17a26ce6f0716b4ba642f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34314.C?ref=a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename Fun, typename... Args> // { dg-error \"template parameter\" }\n+struct call;\n+\n+template<typename Fun, typename Arg0>\n+struct call // { dg-error \"redeclared here\" }\n+{\n+    template<typename Sig>\n+    struct result;\n+\n+    template<typename X, typename Y>\n+    struct result<X(Y)>\n+    {\n+        typedef X type;\n+    };\n+};\n+\n+\n+template<typename Fun, int... N> // { dg-error \"template parameter\" }\n+struct call2;\n+\n+template<typename Fun, int N>\n+struct call2 // { dg-error \"redeclared here\" }\n+{\n+    template<typename Sig>\n+    struct result;\n+\n+    template<typename X, typename Y>\n+    struct result<X(Y)>\n+    {\n+        typedef X type;\n+    };\n+};\n+\n+template<typename Fun, template<typename> class... TT> // { dg-error \"template parameter\" }\n+struct call3;\n+\n+template<typename Fun, template<typename> class TT>\n+struct call3 // { dg-error \"redeclared here\" }\n+{\n+    template<typename Sig>\n+    struct result;\n+\n+    template<typename X, typename Y>\n+    struct result<X(Y)>\n+    {\n+        typedef X type;\n+    };\n+};"}]}