{"sha": "adddc3471f52ea72f9602b0e716f7cdaee8665b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkZGMzNDcxZjUyZWE3MmY5NjAyYjBlNzE2ZjdjZGFlZTg2NjViNw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2012-11-26T03:22:15Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-11-26T03:22:15Z"}, "message": "re PR middle-end/55030 (gcc.c-torture/execute/builtins/memcpy-chk.c execution,  -Os (et al))\n\n\tPR middle-end/55030\n\t* builtins.c (expand_builtin_setjmp_receiver): Update comment\n\tregarding purpose of blockage.\n\t* emit-rtl.c [!HAVE_blockage] (gen_blockage): Similarly for\n\tthe head comment.\n\t* rtlanal.c (volatile_insn_p): Ditto.\n\t* doc/md.texi (blockage): Update similarly.  Change wording to\n\trequire one of two forms, rather than implying a wider choice.\n\t* cse.c (cse_insn): Where checking for blocking insns, use\n\tvolatile_insn_p instead of manual check for volatile ASM.\n\t* dse.c (scan_insn): Ditto.\n\t* cselib.c (cselib_process_insn): Ditto.\n\nFrom-SVN: r193802", "tree": {"sha": "b0f93ca1b6e40dba5a22539f21ca724539f77be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f93ca1b6e40dba5a22539f21ca724539f77be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adddc3471f52ea72f9602b0e716f7cdaee8665b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adddc3471f52ea72f9602b0e716f7cdaee8665b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adddc3471f52ea72f9602b0e716f7cdaee8665b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adddc3471f52ea72f9602b0e716f7cdaee8665b7/comments", "author": null, "committer": null, "parents": [{"sha": "15c115d38ec01e7f1205f18890ba7597eaef9f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c115d38ec01e7f1205f18890ba7597eaef9f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c115d38ec01e7f1205f18890ba7597eaef9f80"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "a682183fc7868036e34fa2c2d6f22cc47fb903f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -1,3 +1,18 @@\n+2012-11-26  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tPR middle-end/55030\n+\t* builtins.c (expand_builtin_setjmp_receiver): Update comment\n+\tregarding purpose of blockage.\n+\t* emit-rtl.c [!HAVE_blockage] (gen_blockage): Similarly for\n+\tthe head comment.\n+\t* rtlanal.c (volatile_insn_p): Ditto.\n+\t* doc/md.texi (blockage): Update similarly.  Change wording to\n+\trequire one of two forms, rather than implying a wider choice.\n+\t* cse.c (cse_insn): Where checking for blocking insns, use\n+\tvolatile_insn_p instead of manual check for volatile ASM.\n+\t* dse.c (scan_insn): Ditto.\n+\t* cselib.c (cselib_process_insn): Ditto.\n+\n 2012-11-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (<sse>_loadu<ssemodesuffix><avxsizesuffix>):"}, {"sha": "fb7b537ca2c4e487c2b91ef83497957dc7caa66c", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -951,7 +951,8 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n \n   /* We must not allow the code we just generated to be reordered by\n      scheduling.  Specifically, the update of the frame pointer must\n-     happen immediately, not later.  */\n+     happen immediately, not later.  Similarly, we must block\n+     (frame-related) register values to be used across this code.  */\n   emit_insn (gen_blockage ());\n }\n "}, {"sha": "ff91b9d93f54d8f8de178240221645428931a37c", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -5661,10 +5661,9 @@ cse_insn (rtx insn)\n \t  invalidate (XEXP (dest, 0), GET_MODE (dest));\n       }\n \n-  /* A volatile ASM invalidates everything.  */\n+  /* A volatile ASM or an UNSPEC_VOLATILE invalidates everything.  */\n   if (NONJUMP_INSN_P (insn)\n-      && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n-      && MEM_VOLATILE_P (PATTERN (insn)))\n+      && volatile_insn_p (PATTERN (insn)))\n     flush_hash_table ();\n \n   /* Don't cse over a call to setjmp; on some machines (eg VAX)"}, {"sha": "198be8a314938e78f19f6d96faaa289ddc7e92ef", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -2625,13 +2625,12 @@ cselib_process_insn (rtx insn)\n \n   cselib_current_insn = insn;\n \n-  /* Forget everything at a CODE_LABEL, a volatile asm, or a setjmp.  */\n+  /* Forget everything at a CODE_LABEL, a volatile insn, or a setjmp.  */\n   if (LABEL_P (insn)\n       || (CALL_P (insn)\n \t  && find_reg_note (insn, REG_SETJMP, NULL))\n       || (NONJUMP_INSN_P (insn)\n-\t  && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n-\t  && MEM_VOLATILE_P (PATTERN (insn))))\n+\t  && volatile_insn_p (PATTERN (insn))))\n     {\n       cselib_reset_table (next_uid);\n       cselib_current_insn = NULL_RTX;"}, {"sha": "4be4b55b3e2211c34291a82277f4d389e5b71864", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -5972,8 +5972,9 @@ the values of operands 1 and 2.\n @item @samp{blockage}\n \n This pattern defines a pseudo insn that prevents the instruction\n-scheduler from moving instructions across the boundary defined by the\n-blockage insn.  Normally an UNSPEC_VOLATILE pattern.\n+scheduler and other passes from moving instructions and using register\n+equivalences across the boundary defined by the blockage insn.\n+This needs to be an UNSPEC_VOLATILE pattern or a volatile ASM.\n \n @cindex @code{memory_barrier} instruction pattern\n @item @samp{memory_barrier}"}, {"sha": "f879adb859e5c5086148aac33f46b6a06f045f91", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -2522,8 +2522,7 @@ scan_insn (bb_info_t bb_info, rtx insn)\n   /* Cselib clears the table for this case, so we have to essentially\n      do the same.  */\n   if (NONJUMP_INSN_P (insn)\n-      && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n-      && MEM_VOLATILE_P (PATTERN (insn)))\n+      && volatile_insn_p (PATTERN (insn)))\n     {\n       add_wild_read (bb_info);\n       insn_info->cannot_delete = true;"}, {"sha": "a15be5194b381c1b6ffa49ddf51cd61a597d6b1b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -363,8 +363,8 @@ get_reg_attrs (tree decl, int offset)\n \n \n #if !HAVE_blockage\n-/* Generate an empty ASM_INPUT, which is used to block attempts to schedule\n-   across this insn. */\n+/* Generate an empty ASM_INPUT, which is used to block attempts to schedule,\n+   and to block register equivalences to be seen across this insn.  */\n \n rtx\n gen_blockage (void)"}, {"sha": "382648188ed86181cf54ba004cb73da2dc319ddb", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddc3471f52ea72f9602b0e716f7cdaee8665b7/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=adddc3471f52ea72f9602b0e716f7cdaee8665b7", "patch": "@@ -2082,8 +2082,8 @@ remove_node_from_expr_list (const_rtx node, rtx *listp)\n \f\n /* Nonzero if X contains any volatile instructions.  These are instructions\n    which may cause unpredictable machine state instructions, and thus no\n-   instructions should be moved or combined across them.  This includes\n-   only volatile asms and UNSPEC_VOLATILE instructions.  */\n+   instructions or register uses should be moved or combined across them.\n+   This includes only volatile asms and UNSPEC_VOLATILE instructions.  */\n \n int\n volatile_insn_p (const_rtx x)"}]}