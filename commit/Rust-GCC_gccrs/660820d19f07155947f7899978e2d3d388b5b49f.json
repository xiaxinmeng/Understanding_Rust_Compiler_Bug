{"sha": "660820d19f07155947f7899978e2d3d388b5b49f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwODIwZDE5ZjA3MTU1OTQ3Zjc4OTk5NzhlMmQzZDM4OGI1YjQ5Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-20T18:03:43Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-20T18:03:43Z"}, "message": "[multiple changes]\n\n2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.  Obvious updates\n        to gcc_alloc_xxx calls in hash_init and hash_class_name_enter to\n        get it to compile in the current trunk.\n\n        2006-01-27 Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4345837\n        * objc/objc-act.c (hash_class_name_enter): New.\n        (hash_class_name_lookup): New.\n        (objc_declare_alias): Enter alias name into hash table.\n        (objc_declare_class): Enter class name into hash table.\n        (objc_is_class_name): Do a hash look up of class name.\n        (hash_init): Initialize the two new hash tables.\n        * objc-act.h: Added cls_name_hash_list and als_name_hash_list\n        declarations, removed class_chain and alias_chain.\n\nFrom-SVN: r165732", "tree": {"sha": "87bc5f42a8a19de3dd8b57c61dbace636e78aeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87bc5f42a8a19de3dd8b57c61dbace636e78aeaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660820d19f07155947f7899978e2d3d388b5b49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660820d19f07155947f7899978e2d3d388b5b49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660820d19f07155947f7899978e2d3d388b5b49f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660820d19f07155947f7899978e2d3d388b5b49f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e335ae287bcac197da44809ca5aa7ef55d2afd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e335ae287bcac197da44809ca5aa7ef55d2afd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e335ae287bcac197da44809ca5aa7ef55d2afd4"}], "stats": {"total": 106, "additions": 91, "deletions": 15}, "files": [{"sha": "1bc94a22136b26ef68d644a19653d75e0fbea022", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=660820d19f07155947f7899978e2d3d388b5b49f", "patch": "@@ -1,3 +1,21 @@\n+2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.  Obvious updates\n+\tto gcc_alloc_xxx calls in hash_init and hash_class_name_enter to\n+\tget it to compile in the current trunk.\n+\n+\t2006-01-27 Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4345837\n+\t* objc/objc-act.c (hash_class_name_enter): New.\n+\t(hash_class_name_lookup): New.\n+\t(objc_declare_alias): Enter alias name into hash table.\n+\t(objc_declare_class): Enter class name into hash table.\n+\t(objc_is_class_name): Do a hash look up of class name.\n+\t(hash_init): Initialize the two new hash tables.\n+\t* objc-act.h: Added cls_name_hash_list and als_name_hash_list \n+\tdeclarations, removed class_chain and alias_chain.\t\n+\n 2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-lang.c (finish_file): Removed."}, {"sha": "219b80eaeb6d9812b0f2d52d97d3264e22199cc6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 70, "deletions": 11, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=660820d19f07155947f7899978e2d3d388b5b49f", "patch": "@@ -211,6 +211,14 @@ static const char *synth_id_with_class_suffix (const char *, tree);\n hash *nst_method_hash_list = 0;\n hash *cls_method_hash_list = 0;\n \n+/* Hash tables to manage the global pool of class names.  */\n+\n+hash *cls_name_hash_list = 0;\n+hash *als_name_hash_list = 0;\n+\n+static void hash_class_name_enter (hash *, tree, tree);\n+static hash hash_class_name_lookup (hash *, tree);\n+\n static hash hash_lookup (hash *, tree);\n static tree lookup_method (tree, tree);\n static tree lookup_method_static (tree, tree, int);\n@@ -3586,7 +3594,8 @@ objc_declare_alias (tree alias_ident, tree class_ident)\n #ifdef OBJCPLUS\n       pop_lang_context ();\n #endif\n-      alias_chain = tree_cons (underlying_class, alias_ident, alias_chain);\n+      hash_class_name_enter (als_name_hash_list, alias_ident, \n+\t\t\t     underlying_class);\n     }\n }\n \n@@ -3628,15 +3637,15 @@ objc_declare_class (tree ident_list)\n \t  record = xref_tag (RECORD_TYPE, ident);\n \t  INIT_TYPE_OBJC_INFO (record);\n \t  TYPE_OBJC_INTERFACE (record) = ident;\n-\t  class_chain = tree_cons (NULL_TREE, ident, class_chain);\n+\t  hash_class_name_enter (cls_name_hash_list, ident, NULL_TREE);\n \t}\n     }\n }\n \n tree\n objc_is_class_name (tree ident)\n {\n-  tree chain;\n+  hash target;\n \n   if (ident && TREE_CODE (ident) == IDENTIFIER_NODE\n       && identifier_global_value (ident))\n@@ -3661,16 +3670,15 @@ objc_is_class_name (tree ident)\n   if (lookup_interface (ident))\n     return ident;\n \n-  for (chain = class_chain; chain; chain = TREE_CHAIN (chain))\n-    {\n-      if (ident == TREE_VALUE (chain))\n-\treturn ident;\n-    }\n+  target = hash_class_name_lookup (cls_name_hash_list, ident);\n+  if (target)\n+    return target->key;\n \n-  for (chain = alias_chain; chain; chain = TREE_CHAIN (chain))\n+  target = hash_class_name_lookup (als_name_hash_list, ident);\n+  if (target)\n     {\n-      if (ident == TREE_VALUE (chain))\n-\treturn TREE_PURPOSE (chain);\n+      gcc_assert (target->list && target->list->value);\n+      return target->list->value;\n     }\n \n   return 0;\n@@ -7483,11 +7491,62 @@ hash_init (void)\n   nst_method_hash_list = ggc_alloc_cleared_vec_hash (SIZEHASHTABLE);\n   cls_method_hash_list = ggc_alloc_cleared_vec_hash (SIZEHASHTABLE);\n \n+  cls_name_hash_list = ggc_alloc_cleared_vec_hash (SIZEHASHTABLE);\n+  als_name_hash_list = ggc_alloc_cleared_vec_hash (SIZEHASHTABLE);\n+\n   /* Initialize the hash table used to hold the constant string objects.  */\n   string_htab = htab_create_ggc (31, string_hash,\n \t\t\t\t   string_eq, NULL);\n }\n \n+/* This routine adds sel_name to the hash list. sel_name  is a class or alias\n+   name for the class. If alias name, then value is its underlying class.\n+   If class, the value is NULL_TREE. */\n+\n+static void\n+hash_class_name_enter (hash *hashlist, tree sel_name, tree value)\n+{\n+  hash obj;\n+  int slot = hash_func (sel_name) % SIZEHASHTABLE;\n+\n+  obj = ggc_alloc_hashed_entry ();\n+  if (value != NULL_TREE)\n+    {\n+      /* Save the underlying class for the 'alias' in the hash table */\n+      attr obj_attr = ggc_alloc_hashed_attribute ();\n+      obj_attr->value = value;\n+      obj->list = obj_attr;\n+    }\n+  else\n+    obj->list = 0;\n+  obj->next = hashlist[slot];\n+  obj->key = sel_name;\n+\n+  hashlist[slot] = obj;         /* append to front */\n+\n+}\n+\n+/*\n+   Searches in the hash table looking for a match for class or alias name.\n+*/\n+\n+static hash\n+hash_class_name_lookup (hash *hashlist, tree sel_name)\n+{\n+  hash target;\n+\n+  target = hashlist[hash_func (sel_name) % SIZEHASHTABLE];\n+\n+  while (target)\n+    {\n+      if (sel_name == target->key)\n+\treturn target;\n+\n+      target = target->next;\n+    }\n+  return 0;\n+}\n+\n /* WARNING!!!!  hash_enter is called with a method, and will peek\n    inside to find its selector!  But hash_lookup is given a selector\n    directly, and looks for the selector that's inside the found"}, {"sha": "6c7204bcbd4ccbf1c0c9f7458ae28fc25d3223e9", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660820d19f07155947f7899978e2d3d388b5b49f/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=660820d19f07155947f7899978e2d3d388b5b49f", "patch": "@@ -156,6 +156,9 @@ struct GTY(()) hashed_entry {\n extern GTY ((length (\"SIZEHASHTABLE\"))) hash *nst_method_hash_list;\n extern GTY ((length (\"SIZEHASHTABLE\"))) hash *cls_method_hash_list;\n \n+extern GTY ((length (\"SIZEHASHTABLE\"))) hash *cls_name_hash_list;\n+extern GTY ((length (\"SIZEHASHTABLE\"))) hash *als_name_hash_list;\n+\n #define SIZEHASHTABLE\t\t257\n \n /* Objective-C/Objective-C++ @implementation list.  */\n@@ -200,8 +203,6 @@ enum objc_tree_index\n     OCTI_NST_TYPE,\n     OCTI_PROTO_TYPE,\n \n-    OCTI_CLS_CHAIN,\n-    OCTI_ALIAS_CHAIN,\n     OCTI_INTF_CHAIN,\n     OCTI_PROTO_CHAIN,\n     OCTI_IMPL_CHAIN,\n@@ -338,8 +339,6 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n \t(TREE_CODE (TYPE) == POINTER_TYPE\t\t\t\t\\\n \t && TREE_TYPE (TYPE) == objc_super_template)\n \n-#define class_chain\t\tobjc_global_trees[OCTI_CLS_CHAIN]\n-#define alias_chain\t\tobjc_global_trees[OCTI_ALIAS_CHAIN]\n #define interface_chain\t\tobjc_global_trees[OCTI_INTF_CHAIN]\n #define protocol_chain\t\tobjc_global_trees[OCTI_PROTO_CHAIN]\n #define implemented_classes\tobjc_global_trees[OCTI_IMPL_CHAIN]"}]}