{"sha": "1d87302a8e20c1f49dd37177ec869ee94abc11a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4NzMwMmE4ZTIwYzFmNDlkZDM3MTc3ZWM4NjllZTk0YWJjMTFhNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-03T22:46:23Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-05T20:57:22Z"}, "message": "c++: Add -Wexceptions warning option [PR97675]\n\nThis PR asks that we add a warning option for an existing (very old)\nwarning, so that it can be disabled selectively.  clang++ uses\n-Wexceptions for this, so I added this new option rather than using\ne.g. -Wnoexcept.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/97675\n\t* c.opt (Wexceptions): New option.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97675\n\t* except.c (check_handlers_1): Use OPT_Wexceptions for the\n\twarning.  Use inform for the second part of the warning.\n\ngcc/ChangeLog:\n\n\tPR c++/97675\n\t* doc/invoke.texi: Document -Wexceptions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97675\n\t* g++.old-deja/g++.eh/catch10.C: Adjust dg-warning.\n\t* g++.dg/warn/Wexceptions1.C: New test.\n\t* g++.dg/warn/Wexceptions2.C: New test.", "tree": {"sha": "f4ba979a14c37961427d82e77686667be8cb8be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ba979a14c37961427d82e77686667be8cb8be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d87302a8e20c1f49dd37177ec869ee94abc11a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d87302a8e20c1f49dd37177ec869ee94abc11a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d87302a8e20c1f49dd37177ec869ee94abc11a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d87302a8e20c1f49dd37177ec869ee94abc11a5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2003105b35f8fe8e074c055a718c8f484d9d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2003105b35f8fe8e074c055a718c8f484d9d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2003105b35f8fe8e074c055a718c8f484d9d32"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "ebd07cc805959d8fb80e04baaedadcceae9f95aa", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -579,6 +579,10 @@ Werror-implicit-function-declaration\n C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)\n This switch is deprecated; use -Werror=implicit-function-declaration instead.\n \n+Wexceptions\n+C++ ObjC++ Var(warn_exceptions) Init(1)\n+Warn when an exception handler is shadowed by another handler.\n+\n Wextra\n C ObjC C++ ObjC++ Warning\n ; in common.opt"}, {"sha": "985206f6a6496611cb863ba048f112720ceb2aa6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -975,11 +975,10 @@ check_handlers_1 (tree master, tree_stmt_iterator i)\n       tree handler = tsi_stmt (i);\n       if (TREE_TYPE (handler) && can_convert_eh (type, TREE_TYPE (handler)))\n \t{\n-\t  warning_at (EXPR_LOCATION (handler), 0,\n-\t\t      \"exception of type %qT will be caught\",\n-\t\t      TREE_TYPE (handler));\n-\t  warning_at (EXPR_LOCATION (master), 0,\n-\t\t      \"   by earlier handler for %qT\", type);\n+\t  if (warning_at (EXPR_LOCATION (handler), OPT_Wexceptions,\n+\t\t\t  \"exception of type %qT will be caught by earlier \"\n+\t\t\t  \"handler\", TREE_TYPE (handler)))\n+\t    inform (EXPR_LOCATION (master), \"for type %qT\", type);\n \t  break;\n \t}\n     }"}, {"sha": "32f90ef20229a1e0617e21fee89926f9cfff043e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -240,7 +240,7 @@ in the following sections.\n -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n -Wno-deprecated-enum-enum-conversion -Wno-deprecated-enum-float-conversion @gol\n--Weffc++  -Wextra-semi  -Wno-inaccessible-base @gol\n+-Weffc++  -Wno-exceptions -Wextra-semi  -Wno-inaccessible-base @gol\n -Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n -Wno-invalid-offsetof  -Wno-literal-suffix  -Wmismatched-tags @gol\n -Wmultiple-inheritance  -Wnamespaces  -Wnarrowing @gol\n@@ -3739,6 +3739,12 @@ When selecting this option, be aware that the standard library\n headers do not obey all of these guidelines; use @samp{grep -v}\n to filter out those warnings.\n \n+@item -Wno-exceptions @r{(C++ and Objective-C++ only)}\n+@opindex Wexceptions\n+@opindex Wno-exceptions\n+Disable the warning about the case when an exception handler is shadowed by\n+another handler, which can point out a wrong ordering of exception handlers.\n+\n @item -Wstrict-null-sentinel @r{(C++ and Objective-C++ only)}\n @opindex Wstrict-null-sentinel\n @opindex Wno-strict-null-sentinel"}, {"sha": "af140fd0dc2cae32253add756aaa649dd3d5158e", "filename": "gcc/testsuite/g++.dg/warn/Wexceptions1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions1.C?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/97675\n+\n+struct Base { };\n+struct Child : Base { };\n+int main() {\n+    try { throw Child(); }\n+    catch (Base const&) { }\n+    catch (Child const&) { } // { dg-warning \"exception of type .Child. will be caught by earlier handler\" }\n+}"}, {"sha": "07c5155ac06e3f77ad25c81f8c812563acc39230", "filename": "gcc/testsuite/g++.dg/warn/Wexceptions2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions2.C?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/97675\n+// { dg-additional-options -Wno-exceptions }\n+\n+struct Base { };\n+struct Child : Base { };\n+int main() {\n+    try { throw Child(); }\n+    catch (Base const&) { }\n+    catch (Child const&) { } // { dg-bogus \"exception of type .Child. will be caught by earlier handler\" }\n+}"}, {"sha": "7cc609645a23099d73219b0bf403cd41b89c9526", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catch10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d87302a8e20c1f49dd37177ec869ee94abc11a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch10.C?ref=1d87302a8e20c1f49dd37177ec869ee94abc11a5", "patch": "@@ -13,8 +13,8 @@ void g()\n   catch (A*) { }\n \n   try { f(); }\n-  catch (A*) { }\t\t// { dg-warning \"\" } A* before B*\n-  catch (B*) { }\t\t// { dg-warning \"\" } A* before B*\n+  catch (A*) { }\t\t// { dg-message \"for type\" } A* before B*\n+  catch (B*) { }\t\t// { dg-warning \"will be caught\" } A* before B*\n \n   try { f(); }\n   catch (A*) { }"}]}