{"sha": "d3d50a6185a224de3fb02c157cbf447f839d18e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkNTBhNjE4NWEyMjRkZTNmYjAyYzE1N2NiZjQ0N2Y4MzlkMThlNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-22T19:19:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-22T19:19:55Z"}, "message": "N3648\n\n\t* parser.c (cp_parser_lambda_introducer): Make lambda capture init\n\tpedwarn unconditional except in C++1y mode.\n\nFrom-SVN: r198156", "tree": {"sha": "1ad698dc021c903b74e8c2bd661327f9c6bd9cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad698dc021c903b74e8c2bd661327f9c6bd9cdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3d50a6185a224de3fb02c157cbf447f839d18e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d50a6185a224de3fb02c157cbf447f839d18e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3d50a6185a224de3fb02c157cbf447f839d18e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d50a6185a224de3fb02c157cbf447f839d18e6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e361d18df77ed06994441e0b0d0c33409ede5b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e361d18df77ed06994441e0b0d0c33409ede5b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e361d18df77ed06994441e0b0d0c33409ede5b63"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "34f207f364b0801be77c0309a86a0a2b678db9f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -1,5 +1,9 @@\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n+\tN3648\n+\t* parser.c (cp_parser_lambda_introducer): Make lambda capture init\n+\tpedwarn unconditional except in C++1y mode.\n+\n \t* semantics.c (potential_constant_expression_1): Don't crash on\n \t'this' in NSDMI.\n "}, {"sha": "1fbc9bd0a25806fc1776063846839c7e69da2be3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -8518,9 +8518,10 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t{\n \t  /* An explicit expression exists.  */\n \t  cp_lexer_consume_token (parser->lexer);\n-          pedwarn (input_location, OPT_Wpedantic,\n-                   \"ISO C++ does not allow initializers \"\n-                   \"in lambda expression capture lists\");\n+\t  if (cxx_dialect < cxx1y)\n+\t    pedwarn (input_location, 0,\n+\t\t     \"lambda capture initializers \"\n+\t\t     \"only available with -std=c++1y or -std=gnu++1y\");\n \t  capture_init_expr = cp_parser_assignment_expression (parser,\n \t\t\t\t\t\t\t       /*cast_p=*/true,\n \t\t\t\t\t\t\t       &idk);"}, {"sha": "03c94e95981fb9930e10d09ea06c5928697fa2bf", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-init.C", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-init.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-init.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-init.C?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -1,8 +0,0 @@\n-// Test for the explicit initializer extension\n-// { dg-options \"-std=c++0x\" }\n-\n-int main()\n-{\n-  int j = [i = 2]{sizeof(i); return i;}();\n-  return (j != 2);\n-}"}, {"sha": "1181a80364755b33ee25f9f127d68addb80fe33e", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-deduce-mult.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -1,7 +1,7 @@\n // Testcase for an extension to allow return type deduction when the lambda\n // contains more than just a single return-statement.\n \n-// { dg-options -std=c++0x }\n+// { dg-options -std=c++1y }\n // { dg-do run }\n \n bool b;", "previous_filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-deduce-ext.C"}, {"sha": "a4436422483365a6039736b41b9ccb299c8af1d7", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -0,0 +1,8 @@\n+// Test for the explicit initializer extension of C++1y\n+// { dg-options \"-std=c++1y\" }\n+\n+int main()\n+{\n+  int j = [i = 2]{sizeof(i); return i;}();\n+  return (j != 2);\n+}"}, {"sha": "6411fca90bad478508aeb59f7729d5366863259a", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -0,0 +1,13 @@\n+// N3648: capture init\n+// { dg-options \"-std=c++1y -w\" }\n+// { dg-do run }\n+\n+int main()\n+{\n+  int x = 41;\n+  auto r = [x = x+1]{ return x; }();\n+  if (r != 42) __builtin_abort();\n+\n+  static auto *p = &r;\n+  [&x=r]{ if (&x != p) __builtin_abort(); }();\n+}"}, {"sha": "068621dac2266463752d84abd81f857e8da39c64", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -0,0 +1,13 @@\n+// N3648: redundancy and capture init\n+// { dg-options \"-std=c++1y -pedantic-errors\" }\n+\n+int main()\n+{\n+  int x = 42;\n+  [=,x]{};\t\t\t// { dg-error \"redundant\" }\n+  [=,&x]{};\n+  [&,&x]{};\t\t\t// { dg-error \"redundant\" }\n+  [&,x]{};\n+  [=,x=24]{};\n+  [&,&r=x]{};\n+}"}, {"sha": "9044be68771dd89fb6e8237e7de8d89b017bf28e", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -0,0 +1,11 @@\n+// N3648: capture init at non-block scope\n+// { dg-options \"-std=c++1y -w\" }\n+// { dg-do run }\n+\n+int i = 42;\n+int j = [x=i]{ return x; }();\n+\n+int main()\n+{\n+  if (j != 42) __builtin_abort();\n+}"}, {"sha": "da4ea37061cdbeb84d25e3cf57554cddb16ae6bb", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d50a6185a224de3fb02c157cbf447f839d18e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C?ref=d3d50a6185a224de3fb02c157cbf447f839d18e6", "patch": "@@ -0,0 +1,14 @@\n+// N3648: capture init example from paper\n+// { dg-options \"-std=c++1y\" }\n+// { dg-do run }\n+\n+int x = 4;\n+auto y = [&r = x, x = x+1]()->int {\n+  r += 2;\n+  return x+2;\n+}();  // Updates ::x to 6, and initializes y to 7.\n+\n+int main()\n+{\n+  if (x != 6 || y != 7) __builtin_abort();\n+}"}]}