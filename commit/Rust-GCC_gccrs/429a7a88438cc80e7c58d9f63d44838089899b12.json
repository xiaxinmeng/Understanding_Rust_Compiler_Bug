{"sha": "429a7a88438cc80e7c58d9f63d44838089899b12", "node_id": "C_kwDOANBUbNoAKDQyOWE3YTg4NDM4Y2M4MGU3YzU4ZDlmNjNkNDQ4MzgwODk4OTliMTI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-03-28T16:16:34Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-03-30T18:17:10Z"}, "message": "Add recursive GORI recompuations with a depth limit.\n\n\tPR tree-optimization/109154\n\tgcc/\n\t* gimple-range-gori.cc (gori_compute::may_recompute_p): Add depth limit.\n\t* gimple-range-gori.h (may_recompute_p): Add depth param.\n\t* params.opt (ranger-recompute-depth): New param.\n\n\tgcc/testsuite/\n\t* gcc.dg/Walloca-13.c: Remove bogus warning that is now fixed.", "tree": {"sha": "f2389e2d862854ed2a3ee0d466b24ffad589a116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2389e2d862854ed2a3ee0d466b24ffad589a116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429a7a88438cc80e7c58d9f63d44838089899b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429a7a88438cc80e7c58d9f63d44838089899b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429a7a88438cc80e7c58d9f63d44838089899b12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429a7a88438cc80e7c58d9f63d44838089899b12/comments", "author": null, "committer": null, "parents": [{"sha": "a23b33a1bdeff7bc2289d9ebb7cb7b7ec0a605f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23b33a1bdeff7bc2289d9ebb7cb7b7ec0a605f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23b33a1bdeff7bc2289d9ebb7cb7b7ec0a605f5"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "e44d271fedb3eea181cf22aaa6b95878a4f61cdc", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=429a7a88438cc80e7c58d9f63d44838089899b12", "patch": "@@ -1308,7 +1308,7 @@ gori_compute::compute_operand1_and_operand2_range (vrange &r,\n // direct dependent is exported, it may also change the computed value of NAME.\n \n bool\n-gori_compute::may_recompute_p (tree name, basic_block bb)\n+gori_compute::may_recompute_p (tree name, basic_block bb, int depth)\n {\n   tree dep1 = depend1 (name);\n   tree dep2 = depend2 (name);\n@@ -1322,22 +1322,36 @@ gori_compute::may_recompute_p (tree name, basic_block bb)\n   if (is_a<gphi *> (s) || gimple_has_side_effects (s))\n     return false;\n \n-  // If edge is specified, check if NAME can be recalculated on that edge.\n-  if (bb)\n-    return ((is_export_p (dep1, bb))\n-\t    || (dep2 && is_export_p (dep2, bb)));\n+  if (!dep2)\n+    {\n+      // -1 indicates a default param, convert it to the real default.\n+      if (depth == -1)\n+\t{\n+\t  depth = (int)param_ranger_recompute_depth;\n+\t  gcc_checking_assert (depth >= 1);\n+\t}\n \n-  return (is_export_p (dep1)) || (dep2 && is_export_p (dep2));\n+      bool res = (bb ? is_export_p (dep1, bb) : is_export_p (dep1));\n+      if (res || depth <= 1)\n+\treturn res;\n+      // Check another level of recomputation.\n+      return may_recompute_p (dep1, bb, --depth);\n+    }\n+  // Two dependencies terminate the depth of the search.\n+  if (bb)\n+    return is_export_p (dep1, bb) || is_export_p (dep2, bb);\n+  else\n+    return is_export_p (dep1) || is_export_p (dep2);\n }\n \n // Return TRUE if NAME can be recomputed on edge E.  If any direct dependent\n // is exported on edge E, it may change the computed value of NAME.\n \n bool\n-gori_compute::may_recompute_p (tree name, edge e)\n+gori_compute::may_recompute_p (tree name, edge e, int depth)\n {\n   gcc_checking_assert (e);\n-  return may_recompute_p (name, e->src);\n+  return may_recompute_p (name, e->src, depth);\n }\n \n "}, {"sha": "3ea4b45595b5300fee70405f3c87406a90e04486", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=429a7a88438cc80e7c58d9f63d44838089899b12", "patch": "@@ -172,8 +172,8 @@ class gori_compute : public gori_map\n   bool refine_using_relation (tree op1, vrange &op1_range,\n \t\t\t      tree op2, vrange &op2_range,\n \t\t\t      fur_source &src, relation_kind k);\n-  bool may_recompute_p (tree name, edge e);\n-  bool may_recompute_p (tree name, basic_block bb = NULL);\n+  bool may_recompute_p (tree name, edge e, int depth = -1);\n+  bool may_recompute_p (tree name, basic_block bb = NULL, int depth = -1);\n   bool compute_operand_range_switch (vrange &r, gswitch *s, const vrange &lhs,\n \t\t\t\t     tree name, fur_source &src);\n   bool compute_operand1_range (vrange &r, gimple_range_op_handler &handler,"}, {"sha": "aecc01c6adfcb4bbca5eb16145214b9ac5c47430", "filename": "gcc/params.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=429a7a88438cc80e7c58d9f63d44838089899b12", "patch": "@@ -908,6 +908,11 @@ Common Joined UInteger Var(param_ranger_logical_depth) Init(6) IntegerRange(1, 9\n Maximum depth of logical expression evaluation ranger will look through when\n evaluating outgoing edge ranges.\n \n+-param=ranger-recompute-depth=\n+Common Joined UInteger Var(param_ranger_recompute_depth) Init(5) IntegerRange(1, 100) Param Optimization\n+Maximum depth of instruction chains to consider for recomputation in the\n+outgoing range calculator.\n+\n -param=relation-block-limit=\n Common Joined UInteger Var(param_relation_block_limit) Init(200) IntegerRange(0, 9999) Param Optimization\n Maximum number of relations the oracle will register in a basic block."}, {"sha": "d3af0c503996ddbece25dbdc96e45aa586ee4b9a", "filename": "gcc/testsuite/gcc.dg/Walloca-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429a7a88438cc80e7c58d9f63d44838089899b12/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-13.c?ref=429a7a88438cc80e7c58d9f63d44838089899b12", "patch": "@@ -8,5 +8,5 @@ void g (int *p, int *q)\n {\n   __SIZE_TYPE__ n = (__SIZE_TYPE__)(p - q);\n   if (n < 100)\n-    f (__builtin_alloca (n)); // { dg-bogus \"may be too large\" \"\" { xfail { *-*-* } } }\n+    f (__builtin_alloca (n));\n }"}]}