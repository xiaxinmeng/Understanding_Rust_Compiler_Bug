{"sha": "546c093ec5f84f1659723329061c47070a9956ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2YzA5M2VjNWY4NGYxNjU5NzIzMzI5MDYxYzQ3MDcwYTk5NTZlZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-13T23:00:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-13T23:00:35Z"}, "message": "cfgrtl.c (purge_dead_edges): Handle abnormal call edges created by non-local gotos.\n\n        * cfgrtl.c (purge_dead_edges): Handle abnormal call edges created\n        by non-local gotos.\n        * recog.c (peephole2_optimize): Likewise.\n\nFrom-SVN: r53438", "tree": {"sha": "5f32b69c8a701e1b7a8f5a41ad0369d83f86c15c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f32b69c8a701e1b7a8f5a41ad0369d83f86c15c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/546c093ec5f84f1659723329061c47070a9956ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546c093ec5f84f1659723329061c47070a9956ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546c093ec5f84f1659723329061c47070a9956ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546c093ec5f84f1659723329061c47070a9956ef/comments", "author": null, "committer": null, "parents": [{"sha": "bde5348670f9371fb8eff9ae1b4c91a1903074a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde5348670f9371fb8eff9ae1b4c91a1903074a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde5348670f9371fb8eff9ae1b4c91a1903074a6"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "8b32f16721db8210571fa417c187a70a6d757e18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546c093ec5f84f1659723329061c47070a9956ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546c093ec5f84f1659723329061c47070a9956ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=546c093ec5f84f1659723329061c47070a9956ef", "patch": "@@ -1,3 +1,9 @@\n+2002-05-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfgrtl.c (purge_dead_edges): Handle abnormal call edges created\n+\tby non-local gotos.\n+\t* recog.c (peephole2_optimize): Likewise.\n+\n 2002-05-13  Andris Pavenis  <pavenis@lanet.lv>\n \n \t* cppfiles.c (open_file): Change mode (DJGPP only) of redirected"}, {"sha": "9a6661d7e615388fa7bbca3a67ca74a362894b52", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546c093ec5f84f1659723329061c47070a9956ef/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546c093ec5f84f1659723329061c47070a9956ef/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=546c093ec5f84f1659723329061c47070a9956ef", "patch": "@@ -2131,19 +2131,29 @@ purge_dead_edges (bb)\n \tremove_note (insn, note);\n     }\n \n-  /* Cleanup abnormal edges caused by throwing insns that have been\n-     eliminated.  */\n-  if (! can_throw_internal (bb->end))\n-    for (e = bb->succ; e; e = next)\n-      {\n-\tnext = e->succ_next;\n-\tif (e->flags & EDGE_EH)\n-\t  {\n-\t    remove_edge (e);\n-\t    bb->flags |= BB_DIRTY;\n-\t    purged = true;\n-\t  }\n-      }\n+  /* Cleanup abnormal edges caused by exceptions or non-local gotos.  */\n+  for (e = bb->succ; e; e = next)\n+    {\n+      next = e->succ_next;\n+      if (e->flags & EDGE_EH)\n+\t{\n+\t  if (can_throw_internal (bb->end))\n+\t    continue;\n+\t}\n+      else if (e->flags & EDGE_ABNORMAL_CALL)\n+\t{\n+\t  if (GET_CODE (bb->end) == CALL_INSN\n+\t      && (! (note = find_reg_note (insn, REG_EH_REGION, NULL))\n+\t\t  || INTVAL (XEXP (note, 0)) >= 0))\n+\t    continue;\n+\t}\n+      else\n+\tcontinue;\n+\n+      remove_edge (e);\n+      bb->flags |= BB_DIRTY;\n+      purged = true;\n+    }\n \n   if (GET_CODE (insn) == JUMP_INSN)\n     {"}, {"sha": "c3dbee29ee7c44bdc24527c59da55ad79add4db1", "filename": "gcc/recog.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546c093ec5f84f1659723329061c47070a9956ef/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546c093ec5f84f1659723329061c47070a9956ef/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=546c093ec5f84f1659723329061c47070a9956ef", "patch": "@@ -3051,6 +3051,7 @@ peephole2_optimize (dump_file)\n \t      rtx try, before_try, x;\n \t      int match_len;\n \t      rtx note;\n+\t      bool was_call = false;\n \n \t      /* Record this insn.  */\n \t      if (--peep2_current < 0)\n@@ -3077,6 +3078,7 @@ peephole2_optimize (dump_file)\n \t\t      old_insn = peep2_insn_data[j].insn;\n \t\t      if (GET_CODE (old_insn) != CALL_INSN)\n \t\t\tcontinue;\n+\t\t      was_call = true;\n \n \t\t      new_insn = NULL_RTX;\n \t\t      if (GET_CODE (try) == SEQUENCE)\n@@ -3140,13 +3142,13 @@ peephole2_optimize (dump_file)\n \t\t  delete_insn_chain (insn, peep2_insn_data[i].insn);\n \n \t\t  /* Re-insert the EH_REGION notes.  */\n-\t\t  if (note)\n+\t\t  if (note || (was_call && nonlocal_goto_handler_labels))\n \t\t    {\n \t\t      edge eh_edge;\n \n \t\t      for (eh_edge = bb->succ; eh_edge\n \t\t\t   ; eh_edge = eh_edge->succ_next)\n-\t\t\tif (eh_edge->flags & EDGE_EH)\n+\t\t\tif (eh_edge->flags & (EDGE_EH | EDGE_ABNORMAL_CALL))\n \t\t\t  break;\n \n \t\t      for (x = try ; x != before_try ; x = PREV_INSN (x))\n@@ -3155,18 +3157,20 @@ peephole2_optimize (dump_file)\n \t\t\t\t&& may_trap_p (PATTERN (x))\n \t\t\t\t&& !find_reg_note (x, REG_EH_REGION, NULL)))\n \t\t\t  {\n-\t\t\t    REG_NOTES (x)\n-\t\t\t      = gen_rtx_EXPR_LIST (REG_EH_REGION,\n-\t\t\t\t\t\t   XEXP (note, 0),\n-\t\t\t\t\t\t   REG_NOTES (x));\n+\t\t\t    if (note)\n+\t\t\t      REG_NOTES (x)\n+\t\t\t        = gen_rtx_EXPR_LIST (REG_EH_REGION,\n+\t\t\t\t\t\t     XEXP (note, 0),\n+\t\t\t\t\t\t     REG_NOTES (x));\n \n \t\t\t    if (x != bb->end && eh_edge)\n \t\t\t      {\n \t\t\t\tedge nfte, nehe;\n \t\t\t\tint flags;\n \n \t\t\t\tnfte = split_block (bb, x);\n-\t\t\t\tflags = EDGE_EH | EDGE_ABNORMAL;\n+\t\t\t\tflags = (eh_edge->flags\n+\t\t\t\t\t & (EDGE_EH | EDGE_ABNORMAL));\n \t\t\t\tif (GET_CODE (x) == CALL_INSN)\n \t\t\t\t  flags |= EDGE_ABNORMAL_CALL;\n \t\t\t\tnehe = make_edge (nfte->src, eh_edge->dest,"}]}