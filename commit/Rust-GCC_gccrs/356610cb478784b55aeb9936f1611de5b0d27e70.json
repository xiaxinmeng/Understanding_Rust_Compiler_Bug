{"sha": "356610cb478784b55aeb9936f1611de5b0d27e70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2NjEwY2I0Nzg3ODRiNTVhZWI5OTM2ZjE2MTFkZTViMGQyN2U3MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-10-25T09:21:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-10-25T09:21:11Z"}, "message": "re PR rtl-optimization/58831 (wrong code at -O2 and -O3 on x86_64-linux-gnu in 64-bit mode)\n\n\tPR rtl-optimization/58831\n\t* alias.c (init_alias_analysis): At the beginning of each iteration, set\n\tthe reg_seen[N] bit if static_reg_base_value[N] is non-null.\n\nFrom-SVN: r204055", "tree": {"sha": "3eae639e031fb1f449c90e31952e47635f27c796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eae639e031fb1f449c90e31952e47635f27c796"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356610cb478784b55aeb9936f1611de5b0d27e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356610cb478784b55aeb9936f1611de5b0d27e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356610cb478784b55aeb9936f1611de5b0d27e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356610cb478784b55aeb9936f1611de5b0d27e70/comments", "author": null, "committer": null, "parents": [{"sha": "2e30c7fbc4eb5a58caae9fd2ed1cd05b60bdcec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e30c7fbc4eb5a58caae9fd2ed1cd05b60bdcec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e30c7fbc4eb5a58caae9fd2ed1cd05b60bdcec5"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "1c7bc5436d9645aec407b1ab58138e56c7340f5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356610cb478784b55aeb9936f1611de5b0d27e70", "patch": "@@ -1,3 +1,9 @@\n+2013-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/58831\n+\t* alias.c (init_alias_analysis): At the beginning of each iteration, set\n+\tthe reg_seen[N] bit if static_reg_base_value[N] is non-null.\n+\n 2013-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* recog.c (search_ofs): New static variable moved from..."}, {"sha": "1736169b476f0c9052fc587851d1ed5ec81e0479", "filename": "gcc/alias.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=356610cb478784b55aeb9936f1611de5b0d27e70", "patch": "@@ -2975,16 +2975,13 @@ init_alias_analysis (void)\n       /* Wipe the reg_seen array clean.  */\n       bitmap_clear (reg_seen);\n \n-      /* Mark all hard registers which may contain an address.\n-\t The stack, frame and argument pointers may contain an address.\n-\t An argument register which can hold a Pmode value may contain\n-\t an address even if it is not in BASE_REGS.\n-\n-\t The address expression is VOIDmode for an argument and\n-\t Pmode for other registers.  */\n-\n-      memcpy (new_reg_base_value, static_reg_base_value,\n-\t      FIRST_PSEUDO_REGISTER * sizeof (rtx));\n+      /* Initialize the alias information for this pass.  */\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (static_reg_base_value[i])\n+\t  {\n+\t    new_reg_base_value[i] = static_reg_base_value[i];\n+\t    bitmap_set_bit (reg_seen, i);\n+\t  }\n \n       /* Walk the insns adding values to the new_reg_base_value array.  */\n       for (i = 0; i < rpo_cnt; i++)"}, {"sha": "5ba87b5597a58a3d536cc9b091693198672f6527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=356610cb478784b55aeb9936f1611de5b0d27e70", "patch": "@@ -1,4 +1,8 @@\n-2013-10-24  Nick Clifton  <nickc@redhat.com>\n+2013-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/pr58831.c: New test.\n+\n+2013-10-25  Nick Clifton  <nickc@redhat.com>\n \n \t* c-c++-common/pr57793.c: Add expected error messages for\n \ttargets with small integers."}, {"sha": "a40cd54d2229755492634942c66ff7af24c2dafb", "filename": "gcc/testsuite/gcc.c-torture/execute/pr58831.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58831.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356610cb478784b55aeb9936f1611de5b0d27e70/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58831.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58831.c?ref=356610cb478784b55aeb9936f1611de5b0d27e70", "patch": "@@ -0,0 +1,40 @@\n+#include <assert.h>\n+\n+int a, *b, c, d, f, **i, p, q, *r;\n+short o, j;\n+\n+static int __attribute__((noinline, noclone))\n+fn1 (int *p1, int **p2)\n+{\n+  int **e = &b;\n+  for (; p; p++)\n+    *p1 = 1;\n+  *e = *p2 = &d;\n+\n+  assert (r);\n+\n+  return c;\n+}\n+\n+static int ** __attribute__((noinline, noclone))\n+fn2 (void)\n+{\n+  for (f = 0; f != 42; f++)\n+    {\n+      int *g[3] = {0, 0, 0};\n+      for (o = 0; o; o--)\n+        for (; a > 1;)\n+          {\n+            int **h[1] = { &g[2] };\n+          }\n+    }\n+  return &r;\n+}\n+\n+int\n+main (void)\n+{\n+  i = fn2 ();\n+  fn1 (b, i);\n+  return 0;\n+}"}]}