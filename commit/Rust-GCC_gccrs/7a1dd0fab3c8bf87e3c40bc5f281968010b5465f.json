{"sha": "7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExZGQwZmFiM2M4YmY4N2UzYzQwYmM1ZjI4MTk2ODAxMGI1NDY1Zg==", "commit": {"author": {"name": "Sterling Augustine", "email": "saugustine@google.com", "date": "2013-10-22T19:01:26Z"}, "committer": {"name": "Sterling Augustine", "email": "sterling@gcc.gnu.org", "date": "2013-10-22T19:01:26Z"}, "message": "Add new option -ggnu-pubnames.\n\n2013-10-22  Sterling Augustine  <saugustine@google.com>\n\n\t* doc/invoke.texi: Document -ggnu-pubnames.\n\t* common.opt: Add new option -ggnu-pubnames and modify -gpubnames\n\tlogic.\n\t* dwarf2out.c: Include gdb/gdb-index.h.\n\t(DEBUG_PUBNAMES_SECTION, DEBUG_PUBTYPES_SECTION): Handle\n\tdebug_generate_pub_sections.\n\t(is_java, output_pubtables, output_pubname): New functions.\n\t(include_pubname_in_output): Handle debug_generate_pub_sections at\n\tlevel 2.\n\t(size_of_pubnames): Use new local space_for_flags based on\n\tdebug_generate_pub_sections.\n\t(output_pubnames): Unify pubnames and pubtypes output logic.\n\tGenericize comments.  Call output_pubname.\n\t(dwarf2out_finish): Move logic to output_pubnames and call it.\n\nFrom-SVN: r203936", "tree": {"sha": "ceef264b6494cfe1fff48bbe4839ccf4a9d0693c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceef264b6494cfe1fff48bbe4839ccf4a9d0693c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/comments", "author": {"login": "Sterling-Augustine", "id": 56981066, "node_id": "MDQ6VXNlcjU2OTgxMDY2", "avatar_url": "https://avatars.githubusercontent.com/u/56981066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sterling-Augustine", "html_url": "https://github.com/Sterling-Augustine", "followers_url": "https://api.github.com/users/Sterling-Augustine/followers", "following_url": "https://api.github.com/users/Sterling-Augustine/following{/other_user}", "gists_url": "https://api.github.com/users/Sterling-Augustine/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sterling-Augustine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sterling-Augustine/subscriptions", "organizations_url": "https://api.github.com/users/Sterling-Augustine/orgs", "repos_url": "https://api.github.com/users/Sterling-Augustine/repos", "events_url": "https://api.github.com/users/Sterling-Augustine/events{/privacy}", "received_events_url": "https://api.github.com/users/Sterling-Augustine/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae93484ede1edb8ade7d16d8ac95fda8944aae4"}], "stats": {"total": 175, "additions": 148, "deletions": 27}, "files": [{"sha": "ec28a1ac8d39cd96e960ed5d5a4a49d8fba95343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "patch": "@@ -1,3 +1,20 @@\n+2013-10-22  Sterling Augustine  <saugustine@google.com>\n+\n+\t* doc/invoke.texi: Document -ggnu-pubnames.\n+\t* common.opt: Add new option -ggnu-pubnames and modify -gpubnames\n+\tlogic.\n+\t* dwarf2out.c: Include gdb/gdb-index.h.\n+\t(DEBUG_PUBNAMES_SECTION, DEBUG_PUBTYPES_SECTION): Handle\n+\tdebug_generate_pub_sections.\n+\t(is_java, output_pubtables, output_pubname): New functions.\n+\t(include_pubname_in_output): Handle debug_generate_pub_sections at\n+\tlevel 2.\n+\t(size_of_pubnames): Use new local space_for_flags based on\n+\tdebug_generate_pub_sections.\n+\t(output_pubnames): Unify pubnames and pubtypes output logic.\n+\tGenericize comments.  Call output_pubname.\n+\t(dwarf2out_finish): Move logic to output_pubnames and call it.\n+\n 2013-10-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/58779"}, {"sha": "deeb3f20a3bc2e5b5a426d7ab02c6aa5a97ced14", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "patch": "@@ -2412,13 +2412,17 @@ Common JoinedOrMissing\n Generate debug information in default extended format\n \n gno-pubnames\n-Common RejectNegative Var(debug_generate_pub_sections, 0) Init(-1)\n+Common Negative(gpubnames) Var(debug_generate_pub_sections, 0) Init(-1)\n Don't generate DWARF pubnames and pubtypes sections.\n \n gpubnames\n-Common RejectNegative Var(debug_generate_pub_sections, 1)\n+Common Negative(ggnu-pubnames) Var(debug_generate_pub_sections, 1)\n Generate DWARF pubnames and pubtypes sections.\n \n+ggnu-pubnames\n+Common Negative(gno-pubnames) Var(debug_generate_pub_sections, 2)\n+Generate DWARF pubnames and pubtypes sections with GNU extensions.\n+\n gno-record-gcc-switches\n Common RejectNegative Var(dwarf_record_gcc_switches,0) Init(1)\n Don't record gcc command line switches in DWARF DW_AT_producer."}, {"sha": "46a2b18e1b0e1d168c224906ff92565f9215581a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "patch": "@@ -5087,6 +5087,12 @@ possible.\n @opindex gpubnames\n Generate dwarf .debug_pubnames and .debug_pubtypes sections.\n \n+@item -ggnu-pubnames\n+@opindex ggnu-pubnames\n+Generate .debug_pubnames and .debug_pubtypes sections in a format\n+suitable for conversion into a GDB@ index.  This option is only useful\n+with a linker that can produce GDB@ index version 7.\n+\n @item -gstabs\n @opindex gstabs\n Produce debugging information in stabs format (if that is supported),"}, {"sha": "0239d6ad62be989075d7586bdbcf6b920be0e8aa", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 119, "deletions": 25, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1dd0fab3c8bf87e3c40bc5f281968010b5465f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7a1dd0fab3c8bf87e3c40bc5f281968010b5465f", "patch": "@@ -93,6 +93,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"opts.h\"\n #include \"tree-dfa.h\"\n+#include \"gdb/gdb-index.h\"\n \n static void dwarf2out_source_line (unsigned int, const char *, int, bool);\n static rtx last_var_location_insn;\n@@ -3323,10 +3324,14 @@ new_addr_loc_descr (rtx addr, enum dtprel_bool dtprel)\n #define DEBUG_DWO_LOC_SECTION  \".debug_loc.dwo\"\n #endif\n #ifndef DEBUG_PUBNAMES_SECTION\n-#define DEBUG_PUBNAMES_SECTION\t\".debug_pubnames\"\n+#define DEBUG_PUBNAMES_SECTION\t\\\n+  ((debug_generate_pub_sections == 2) \\\n+   ? \".debug_gnu_pubnames\" : \".debug_pubnames\")\n #endif\n #ifndef DEBUG_PUBTYPES_SECTION\n-#define DEBUG_PUBTYPES_SECTION\t\".debug_pubtypes\"\n+#define DEBUG_PUBTYPES_SECTION\t\\\n+  ((debug_generate_pub_sections == 2) \\\n+   ? \".debug_gnu_pubtypes\" : \".debug_pubtypes\")\n #endif\n #define DEBUG_NORM_STR_OFFSETS_SECTION \".debug_str_offsets\"\n #define DEBUG_DWO_STR_OFFSETS_SECTION \".debug_str_offsets.dwo\"\n@@ -4569,6 +4574,16 @@ is_cxx (void)\n   return lang == DW_LANG_C_plus_plus || lang == DW_LANG_ObjC_plus_plus;\n }\n \n+/* Return TRUE if the language is Java.  */\n+\n+static inline bool\n+is_java (void)\n+{\n+  unsigned int lang = get_AT_unsigned (comp_unit_die (), DW_AT_language);\n+\n+  return lang == DW_LANG_Java;\n+}\n+\n /* Return TRUE if the language is Fortran.  */\n \n static inline bool\n@@ -7960,6 +7975,12 @@ unmark_all_dies (dw_die_ref die)\n static bool\n include_pubname_in_output (vec<pubname_entry, va_gc> *table, pubname_entry *p)\n {\n+  /* By limiting gnu pubnames to definitions only, gold can generate a\n+     gdb index without entries for declarations, which don't include\n+     enough information to be useful.  */\n+  if (debug_generate_pub_sections == 2 && is_declaration_die (p->die))\n+    return false;\n+\n   if (table == pubname_table)\n     {\n       /* Enumerator names are part of the pubname table, but the\n@@ -7989,11 +8010,12 @@ size_of_pubnames (vec<pubname_entry, va_gc> *names)\n   unsigned long size;\n   unsigned i;\n   pubname_ref p;\n+  int space_for_flags = (debug_generate_pub_sections == 2) ? 1 : 0;\n \n   size = DWARF_PUBNAMES_HEADER_SIZE;\n   FOR_EACH_VEC_ELT (*names, i, p)\n     if (include_pubname_in_output (names, p))\n-      size += strlen (p->name) + DWARF_OFFSET_SIZE + 1;\n+      size += strlen (p->name) + DWARF_OFFSET_SIZE + 1 + space_for_flags;\n \n   size += DWARF_OFFSET_SIZE;\n   return size;\n@@ -9146,6 +9168,76 @@ add_pubtype (tree decl, dw_die_ref die)\n     }\n }\n \n+/* Output a single entry in the pubnames table.  */\n+\n+static void\n+output_pubname (dw_offset die_offset, pubname_entry *entry)\n+{\n+  dw_die_ref die = entry->die;\n+  int is_static = get_AT_flag (die, DW_AT_external) ? 0 : 1;\n+\n+  dw2_asm_output_data (DWARF_OFFSET_SIZE, die_offset, \"DIE offset\");\n+\n+  if (debug_generate_pub_sections == 2)\n+    {\n+      /* This logic follows gdb's method for determining the value of the flag\n+         byte.  */\n+      uint32_t flags = GDB_INDEX_SYMBOL_KIND_NONE;\n+      switch (die->die_tag)\n+      {\n+        case DW_TAG_typedef:\n+        case DW_TAG_base_type:\n+        case DW_TAG_subrange_type:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags, GDB_INDEX_SYMBOL_KIND_TYPE);\n+          GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n+          break;\n+        case DW_TAG_enumerator:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n+                                          GDB_INDEX_SYMBOL_KIND_VARIABLE);\n+          if (!is_cxx () && !is_java ())\n+            GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n+          break;\n+        case DW_TAG_subprogram:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n+                                          GDB_INDEX_SYMBOL_KIND_FUNCTION);\n+          if (!is_ada ())\n+            GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, is_static);\n+          break;\n+        case DW_TAG_constant:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n+                                          GDB_INDEX_SYMBOL_KIND_VARIABLE);\n+          GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, is_static);\n+          break;\n+        case DW_TAG_variable:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags,\n+                                          GDB_INDEX_SYMBOL_KIND_VARIABLE);\n+          GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, is_static);\n+          break;\n+        case DW_TAG_namespace:\n+        case DW_TAG_imported_declaration:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags, GDB_INDEX_SYMBOL_KIND_TYPE);\n+          break;\n+        case DW_TAG_class_type:\n+        case DW_TAG_interface_type:\n+        case DW_TAG_structure_type:\n+        case DW_TAG_union_type:\n+        case DW_TAG_enumeration_type:\n+          GDB_INDEX_SYMBOL_KIND_SET_VALUE(flags, GDB_INDEX_SYMBOL_KIND_TYPE);\n+          if (!is_cxx () && !is_java ())\n+\t    GDB_INDEX_SYMBOL_STATIC_SET_VALUE(flags, 1);\n+          break;\n+        default:\n+          /* An unusual tag.  Leave the flag-byte empty.  */\n+          break;\n+      }\n+      dw2_asm_output_data (1, flags >> GDB_INDEX_CU_BITSIZE,\n+                           \"GDB-index flags\");\n+    }\n+\n+  dw2_asm_output_nstring (entry->name, -1, \"external name\");\n+}\n+\n+\n /* Output the public names table used to speed up access to externally\n    visible names; or the public types table used to find type definitions.  */\n \n@@ -9156,23 +9248,14 @@ output_pubnames (vec<pubname_entry, va_gc> *names)\n   unsigned long pubnames_length = size_of_pubnames (names);\n   pubname_ref pub;\n \n-  if (!want_pubnames () || !info_section_emitted)\n-    return;\n-  if (names == pubname_table)\n-    switch_to_section (debug_pubnames_section);\n-  else\n-    switch_to_section (debug_pubtypes_section);\n   if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n     dw2_asm_output_data (4, 0xffffffff,\n       \"Initial length escape value indicating 64-bit DWARF extension\");\n-  if (names == pubname_table)\n-    dw2_asm_output_data (DWARF_OFFSET_SIZE, pubnames_length,\n-\t\t\t \"Length of Public Names Info\");\n-  else\n-    dw2_asm_output_data (DWARF_OFFSET_SIZE, pubnames_length,\n-\t\t\t \"Length of Public Type Names Info\");\n-  /* Version number for pubnames/pubtypes is still 2, even in DWARF3.  */\n+  dw2_asm_output_data (DWARF_OFFSET_SIZE, pubnames_length, \"Pub Info Length\");\n+\n+  /* Version number for pubnames/pubtypes is independent of dwarf version.  */\n   dw2_asm_output_data (2, 2, \"DWARF Version\");\n+\n   if (dwarf_split_debug_info)\n     dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_info_section_label,\n                            debug_skeleton_info_section,\n@@ -9208,15 +9291,31 @@ output_pubnames (vec<pubname_entry, va_gc> *names)\n \t\t\t      : 0);\n \t    }\n \n-\t  dw2_asm_output_data (DWARF_OFFSET_SIZE, die_offset, \"DIE offset\");\n-\n-\t  dw2_asm_output_nstring (pub->name, -1, \"external name\");\n+          output_pubname (die_offset, pub);\n \t}\n     }\n \n   dw2_asm_output_data (DWARF_OFFSET_SIZE, 0, NULL);\n }\n \n+/* Output public names and types tables if necessary.  */\n+\n+static void\n+output_pubtables (void)\n+{\n+  if (!want_pubnames () || !info_section_emitted)\n+    return;\n+\n+  switch_to_section (debug_pubnames_section);\n+  output_pubnames (pubname_table);\n+  /* ??? Only defined by DWARF3, but emitted by Darwin for DWARF2.\n+     It shouldn't hurt to emit it always, since pure DWARF2 consumers\n+     simply won't look for the section.  */\n+  switch_to_section (debug_pubtypes_section);\n+  output_pubnames (pubtype_table);\n+}\n+\n+\n /* Output the information that goes into the .debug_aranges table.\n    Namely, define the beginning and ending address range of the\n    text section generated for this compilation unit.  */\n@@ -24092,12 +24191,7 @@ dwarf2out_finish (const char *filename)\n       output_location_lists (comp_unit_die ());\n     }\n \n-  /* Output public names and types tables if necessary.  */\n-  output_pubnames (pubname_table);\n-  /* ??? Only defined by DWARF3, but emitted by Darwin for DWARF2.\n-     It shouldn't hurt to emit it always, since pure DWARF2 consumers\n-     simply won't look for the section.  */\n-  output_pubnames (pubtype_table);\n+  output_pubtables ();\n \n   /* Output the address range information if a CU (.debug_info section)\n      was emitted.  We output an empty table even if we had no functions"}]}