{"sha": "82198676c80764ca7cf05f891afaee83b9179dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxOTg2NzZjODA3NjRjYTdjZjA1Zjg5MWFmYWVlODNiOTE3OWRkMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-10T14:55:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-10T20:33:11Z"}, "message": "c++: ICE with invalid use of 'this' with static memfn [PR98800]\n\nHere instantiation of the fake 'this' parameter we used when parsing the\ntrailing return type of func() was failing because there is no actual 'this'\nparameter in the instantiation.  For PR97399 I told Patrick to do the 'this'\ninjection even for statics, but now I think I was wrong; the out-of-class\ndefinition case I was concerned about does not break with this patch.  And\nwe don't set current_class_ptr in the body of a static member function.\n\nAnd the OMP code should continue to parse 'this' and complain about it\nrather than give a syntax error.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98800\n\tPR c++/97399\n\t* parser.c (cp_parser_direct_declarator): Don't\n\tinject_this_parameter if static_p.\n\t(cp_parser_omp_var_list_no_open): Parse 'this' even if\n\tcurrent_class_ptr isn't set for a better diagnostic.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98800\n\t* g++.dg/gomp/this-1.C: Adjust diagnostic.\n\t* g++.dg/cpp0x/constexpr-this1.C: New test.", "tree": {"sha": "a9ab2b307a40e200e15998c040ca19d3d81b0cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ab2b307a40e200e15998c040ca19d3d81b0cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82198676c80764ca7cf05f891afaee83b9179dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82198676c80764ca7cf05f891afaee83b9179dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82198676c80764ca7cf05f891afaee83b9179dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82198676c80764ca7cf05f891afaee83b9179dd1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec633d3777bd71f7bde5e671b61ec18e5b7b43ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec633d3777bd71f7bde5e671b61ec18e5b7b43ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec633d3777bd71f7bde5e671b61ec18e5b7b43ea"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "b6f94bdda237be2a1e89772c9c2eabca9f10d286", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=82198676c80764ca7cf05f891afaee83b9179dd1", "patch": "@@ -22193,7 +22193,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \n \t\t  tree save_ccp = current_class_ptr;\n \t\t  tree save_ccr = current_class_ref;\n-\t\t  if (memfn && !friend_p)\n+\t\t  if (memfn && !friend_p && !static_p)\n \t\t    /* DR 1207: 'this' is in scope after the cv-quals.  */\n \t\t    inject_this_parameter (current_class_type, cv_quals);\n \n@@ -35283,7 +35283,6 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \tcp_parser_parse_tentatively (parser);\n       token = cp_lexer_peek_token (parser->lexer);\n       if (kind != 0\n-\t  && current_class_ptr\n \t  && cp_parser_is_keyword (token, RID_THIS))\n \t{\n \t  decl = finish_this_expr ();"}, {"sha": "e50218d070607d6186eda96ef5b572baab4270c5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-this1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-this1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-this1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-this1.C?ref=82198676c80764ca7cf05f891afaee83b9179dd1", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/98800\n+// { dg-do compile { target c++11 } }\n+\n+template <bool> struct enable_if_t {};\n+struct tmp {\n+  template <class>   constexpr bool is_integral();\n+  template <class E> static auto func() -> enable_if_t<is_integral<E>()>; // { dg-error \"without object\" }\n+};\n+template <class> constexpr bool tmp::is_integral() { return true; }\n+int main() { tmp::func<int>(); } // { dg-error \"no match\" }"}, {"sha": "e7bd5831118863c6e6c6c64e56e30e359c059f1d", "filename": "gcc/testsuite/g++.dg/gomp/this-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82198676c80764ca7cf05f891afaee83b9179dd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C?ref=82198676c80764ca7cf05f891afaee83b9179dd1", "patch": "@@ -3,7 +3,7 @@\n \n struct S\n {\n-  #pragma omp declare simd linear(this)\t\t// { dg-error \"is not a function argument\" }\n+  #pragma omp declare simd linear(this)\t// { dg-error \"invalid use of .this\" }\n   static void foo ();\n   void bar ();\n };\n@@ -35,7 +35,7 @@ S::bar ()\n template <int N>\n struct T\n {\n-  #pragma omp declare simd linear(this)\t\t// { dg-error \"is not a function argument\" }\n+  #pragma omp declare simd linear(this)\t// { dg-error \"invalid use of .this\" }\n   static void foo ();\n   void bar ();\n };"}]}