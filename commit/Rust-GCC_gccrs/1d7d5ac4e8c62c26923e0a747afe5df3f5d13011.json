{"sha": "1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3ZDVhYzRlOGM2MmMyNjkyM2UwYTc0N2FmZTVkZjNmNWQxMzAxMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-09-13T18:27:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-09-13T18:27:28Z"}, "message": "From Jie Zhang:\n\n\t* config/bfin/bfin.c (enum bfin_builtins): Add BFIN_BUILTIN_ONES,\n\tBFIN_BUILTIN_CPLX_MUL_16_S40, BFIN_BUILTIN_CPLX_MAC_16_S40,\n\tBFIN_BUILTIN_CPLX_MSU_16_S40, and BFIN_BUILTIN_CPLX_SQU.\n\t(bfin_init_builtins): Initialize __builtin_bfin_ones,\n\t__builtin_bfin_min_fr1x16, __builtin_bfin_max_fr1x16,\n\t__builtin_bfin_min_fr1x32, __builtin_bfin_max_fr1x32,\n\t__builtin_bfin_cmplx_add, __builtin_bfin_cmplx_sub,\n\t__builtin_bfin_cmplx_mul_s40, __builtin_bfin_cmplx_mac_s40,\n\t__builtin_bfin_cmplx_msu_s40 and __builtin_bfin_csqu_fr16.\n\t(bdesc_1arg): Add __builtin_bfin_ones.\n\t(bfin_expand_builtin): Expand __builtin_bfin_cmplx_mul_s40,\n\t__builtin_bfin_cmplx_mac_s40, __builtin_bfin_cmplx_msu_s40,\n\tand __builtin_bfin_csqu_fr16.\n\t* config/bfin/bfin.md (UNSPEC_ONES): New constant.\n\t(ones): New define_insn.\n\t(ssaddhi3_parts): New define_insn.\n\t(sssubhi3_parts): New define_insn.\n\t(flag_mulhi_parts): New define_insn.\n\nFrom-SVN: r128475", "tree": {"sha": "9d4f5512db93d9d4b82adb7caef6f9d5026eaadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d4f5512db93d9d4b82adb7caef6f9d5026eaadf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/comments", "author": null, "committer": null, "parents": [{"sha": "eae8e4741e77af8d8b496c86d74a4b7161e3ccc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae8e4741e77af8d8b496c86d74a4b7161e3ccc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae8e4741e77af8d8b496c86d74a4b7161e3ccc6"}], "stats": {"total": 223, "additions": 212, "deletions": 11}, "files": [{"sha": "393dd4473c142bc161901c217cf5f3ef1a3fabdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "patch": "@@ -1,3 +1,25 @@\n+2007-09-13  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\tFrom Jie Zhang:\n+\t* config/bfin/bfin.c (enum bfin_builtins): Add BFIN_BUILTIN_ONES,\n+\tBFIN_BUILTIN_CPLX_MUL_16_S40, BFIN_BUILTIN_CPLX_MAC_16_S40,\n+\tBFIN_BUILTIN_CPLX_MSU_16_S40, and BFIN_BUILTIN_CPLX_SQU.\n+\t(bfin_init_builtins): Initialize __builtin_bfin_ones,\n+\t__builtin_bfin_min_fr1x16, __builtin_bfin_max_fr1x16,\n+\t__builtin_bfin_min_fr1x32, __builtin_bfin_max_fr1x32,\n+\t__builtin_bfin_cmplx_add, __builtin_bfin_cmplx_sub,\n+\t__builtin_bfin_cmplx_mul_s40, __builtin_bfin_cmplx_mac_s40,\n+\t__builtin_bfin_cmplx_msu_s40 and __builtin_bfin_csqu_fr16.\n+\t(bdesc_1arg): Add __builtin_bfin_ones.\n+\t(bfin_expand_builtin): Expand __builtin_bfin_cmplx_mul_s40,\n+\t__builtin_bfin_cmplx_mac_s40, __builtin_bfin_cmplx_msu_s40,\n+\tand __builtin_bfin_csqu_fr16.\n+\t* config/bfin/bfin.md (UNSPEC_ONES): New constant.\n+\t(ones): New define_insn.\n+\t(ssaddhi3_parts): New define_insn.\n+\t(sssubhi3_parts): New define_insn.\n+\t(flag_mulhi_parts): New define_insn.\n+\n 2007-09-13  Seongbae Park <seongbae.park@gmail.com>\n \n \t* common.opt (femit-class-debug-always): Turn off by default."}, {"sha": "9183138b55d08bc1eb7fe7fd148f1ca3b10d8ebf", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 97, "deletions": 10, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "patch": "@@ -4881,6 +4881,7 @@ enum bfin_builtins\n {\n   BFIN_BUILTIN_CSYNC,\n   BFIN_BUILTIN_SSYNC,\n+  BFIN_BUILTIN_ONES,\n   BFIN_BUILTIN_COMPOSE_2X16,\n   BFIN_BUILTIN_EXTRACTLO,\n   BFIN_BUILTIN_EXTRACTHI,\n@@ -4937,6 +4938,12 @@ enum bfin_builtins\n   BFIN_BUILTIN_CPLX_MAC_16,\n   BFIN_BUILTIN_CPLX_MSU_16,\n \n+  BFIN_BUILTIN_CPLX_MUL_16_S40,\n+  BFIN_BUILTIN_CPLX_MAC_16_S40,\n+  BFIN_BUILTIN_CPLX_MSU_16_S40,\n+\n+  BFIN_BUILTIN_CPLX_SQU,\n+\n   BFIN_BUILTIN_MAX\n };\n \n@@ -4996,6 +5003,8 @@ bfin_init_builtins (void)\n   def_builtin (\"__builtin_bfin_csync\", void_ftype_void, BFIN_BUILTIN_CSYNC);\n   def_builtin (\"__builtin_bfin_ssync\", void_ftype_void, BFIN_BUILTIN_SSYNC);\n \n+  def_builtin (\"__builtin_bfin_ones\", short_ftype_int, BFIN_BUILTIN_ONES);\n+\n   def_builtin (\"__builtin_bfin_compose_2x16\", v2hi_ftype_int_int,\n \t       BFIN_BUILTIN_COMPOSE_2X16);\n   def_builtin (\"__builtin_bfin_extract_hi\", short_ftype_v2hi,\n@@ -5025,6 +5034,11 @@ bfin_init_builtins (void)\n   def_builtin (\"__builtin_bfin_abs_fr2x16\", v2hi_ftype_v2hi,\n \t       BFIN_BUILTIN_ABS_2X16);\n \n+  def_builtin (\"__builtin_bfin_min_fr1x16\", short_ftype_int_int,\n+\t       BFIN_BUILTIN_MIN_1X16);\n+  def_builtin (\"__builtin_bfin_max_fr1x16\", short_ftype_int_int,\n+\t       BFIN_BUILTIN_MAX_1X16);\n+\n   def_builtin (\"__builtin_bfin_add_fr1x16\", short_ftype_int_int,\n \t       BFIN_BUILTIN_SSADD_1X16);\n   def_builtin (\"__builtin_bfin_sub_fr1x16\", short_ftype_int_int,\n@@ -5056,6 +5070,11 @@ bfin_init_builtins (void)\n   def_builtin (\"__builtin_bfin_mulhisihh\", int_ftype_v2hi_v2hi,\n \t       BFIN_BUILTIN_MULHISIHH);\n \n+  def_builtin (\"__builtin_bfin_min_fr1x32\", int_ftype_int_int,\n+\t       BFIN_BUILTIN_MIN_1X32);\n+  def_builtin (\"__builtin_bfin_max_fr1x32\", int_ftype_int_int,\n+\t       BFIN_BUILTIN_MAX_1X32);\n+\n   def_builtin (\"__builtin_bfin_add_fr1x32\", int_ftype_int_int,\n \t       BFIN_BUILTIN_SSADD_1X32);\n   def_builtin (\"__builtin_bfin_sub_fr1x32\", int_ftype_int_int,\n@@ -5088,12 +5107,24 @@ bfin_init_builtins (void)\n \t       BFIN_BUILTIN_SSASHIFT_1X32);\n \n   /* Complex numbers.  */\n+  def_builtin (\"__builtin_bfin_cmplx_add\", v2hi_ftype_v2hi_v2hi,\n+\t       BFIN_BUILTIN_SSADD_2X16);\n+  def_builtin (\"__builtin_bfin_cmplx_sub\", v2hi_ftype_v2hi_v2hi,\n+\t       BFIN_BUILTIN_SSSUB_2X16);\n   def_builtin (\"__builtin_bfin_cmplx_mul\", v2hi_ftype_v2hi_v2hi,\n \t       BFIN_BUILTIN_CPLX_MUL_16);\n   def_builtin (\"__builtin_bfin_cmplx_mac\", v2hi_ftype_v2hi_v2hi_v2hi,\n \t       BFIN_BUILTIN_CPLX_MAC_16);\n   def_builtin (\"__builtin_bfin_cmplx_msu\", v2hi_ftype_v2hi_v2hi_v2hi,\n \t       BFIN_BUILTIN_CPLX_MSU_16);\n+  def_builtin (\"__builtin_bfin_cmplx_mul_s40\", v2hi_ftype_v2hi_v2hi,\n+\t       BFIN_BUILTIN_CPLX_MUL_16_S40);\n+  def_builtin (\"__builtin_bfin_cmplx_mac_s40\", v2hi_ftype_v2hi_v2hi_v2hi,\n+\t       BFIN_BUILTIN_CPLX_MAC_16_S40);\n+  def_builtin (\"__builtin_bfin_cmplx_msu_s40\", v2hi_ftype_v2hi_v2hi_v2hi,\n+\t       BFIN_BUILTIN_CPLX_MSU_16_S40);\n+  def_builtin (\"__builtin_bfin_csqu_fr16\", v2hi_ftype_v2hi,\n+\t       BFIN_BUILTIN_CPLX_SQU);\n }\n \n \n@@ -5141,6 +5172,8 @@ static const struct builtin_description bdesc_2arg[] =\n \n static const struct builtin_description bdesc_1arg[] =\n {\n+  { CODE_FOR_ones, \"__builtin_bfin_ones\", BFIN_BUILTIN_ONES, 0 },\n+\n   { CODE_FOR_signbitshi2, \"__builtin_bfin_norm_fr1x16\", BFIN_BUILTIN_NORM_1X16, 0 },\n   { CODE_FOR_ssneghi2, \"__builtin_bfin_negate_fr1x16\", BFIN_BUILTIN_NEG_1X16, 0 },\n   { CODE_FOR_abshi2, \"__builtin_bfin_abs_fr1x16\", BFIN_BUILTIN_ABS_1X16, 0 },\n@@ -5381,6 +5414,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       return target;\n \n     case BFIN_BUILTIN_CPLX_MUL_16:\n+    case BFIN_BUILTIN_CPLX_MUL_16_S40:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -5396,9 +5430,14 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       if (! register_operand (op1, GET_MODE (op1)))\n \top1 = copy_to_mode_reg (GET_MODE (op1), op1);\n \n-      emit_insn (gen_flag_macinit1v2hi_parts (accvec, op0, op1, const0_rtx,\n-\t\t\t\t\t      const0_rtx, const0_rtx,\n-\t\t\t\t\t      const1_rtx, GEN_INT (MACFLAG_NONE)));\n+      if (fcode == BFIN_BUILTIN_CPLX_MUL_16)\n+\temit_insn (gen_flag_macinit1v2hi_parts (accvec, op0, op1, const0_rtx,\n+\t\t\t\t\t\tconst0_rtx, const0_rtx,\n+\t\t\t\t\t\tconst1_rtx, GEN_INT (MACFLAG_W32)));\n+      else\n+\temit_insn (gen_flag_macinit1v2hi_parts (accvec, op0, op1, const0_rtx,\n+\t\t\t\t\t\tconst0_rtx, const0_rtx,\n+\t\t\t\t\t\tconst1_rtx, GEN_INT (MACFLAG_NONE)));\n       emit_insn (gen_flag_macv2hi_parts (target, op0, op1, const1_rtx,\n \t\t\t\t\t const1_rtx, const1_rtx,\n \t\t\t\t\t const0_rtx, accvec, const1_rtx, const0_rtx,\n@@ -5408,6 +5447,8 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n     case BFIN_BUILTIN_CPLX_MAC_16:\n     case BFIN_BUILTIN_CPLX_MSU_16:\n+    case BFIN_BUILTIN_CPLX_MAC_16_S40:\n+    case BFIN_BUILTIN_CPLX_MSU_16_S40:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       arg2 = CALL_EXPR_ARG (exp, 2);\n@@ -5431,20 +5472,66 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       emit_move_insn (tmp2, gen_lowpart (SImode, op0));\n       emit_insn (gen_movstricthi_1 (gen_lowpart (HImode, tmp2), const0_rtx));\n       emit_insn (gen_load_accumulator_pair (accvec, tmp1, tmp2));\n-      emit_insn (gen_flag_macv2hi_parts_acconly (accvec, op1, op2, const0_rtx,\n-\t\t\t\t\t\t const0_rtx, const0_rtx,\n-\t\t\t\t\t\t const1_rtx, accvec, const0_rtx,\n-\t\t\t\t\t\t const0_rtx,\n-\t\t\t\t\t\t GEN_INT (MACFLAG_W32)));\n-      tmp1 = (fcode == BFIN_BUILTIN_CPLX_MAC_16 ? const1_rtx : const0_rtx);\n-      tmp2 = (fcode == BFIN_BUILTIN_CPLX_MAC_16 ? const0_rtx : const1_rtx);\n+      if (fcode == BFIN_BUILTIN_CPLX_MAC_16\n+\t  || fcode == BFIN_BUILTIN_CPLX_MSU_16)\n+\temit_insn (gen_flag_macv2hi_parts_acconly (accvec, op1, op2, const0_rtx,\n+\t\t\t\t\t\t   const0_rtx, const0_rtx,\n+\t\t\t\t\t\t   const1_rtx, accvec, const0_rtx,\n+\t\t\t\t\t\t   const0_rtx,\n+\t\t\t\t\t\t   GEN_INT (MACFLAG_W32)));\n+      else\n+\temit_insn (gen_flag_macv2hi_parts_acconly (accvec, op1, op2, const0_rtx,\n+\t\t\t\t\t\t   const0_rtx, const0_rtx,\n+\t\t\t\t\t\t   const1_rtx, accvec, const0_rtx,\n+\t\t\t\t\t\t   const0_rtx,\n+\t\t\t\t\t\t   GEN_INT (MACFLAG_NONE)));\n+      if (fcode == BFIN_BUILTIN_CPLX_MAC_16\n+\t  || fcode == BFIN_BUILTIN_CPLX_MAC_16_S40)\n+\t{\n+\t  tmp1 = const1_rtx;\n+\t  tmp2 = const0_rtx;\n+\t}\n+      else\n+\t{\n+\t  tmp1 = const0_rtx;\n+\t  tmp2 = const1_rtx;\n+\t}\n       emit_insn (gen_flag_macv2hi_parts (target, op1, op2, const1_rtx,\n \t\t\t\t\t const1_rtx, const1_rtx,\n \t\t\t\t\t const0_rtx, accvec, tmp1, tmp2,\n \t\t\t\t\t GEN_INT (MACFLAG_NONE), accvec));\n \n       return target;\n \n+    case BFIN_BUILTIN_CPLX_SQU:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      accvec = gen_reg_rtx (V2PDImode);\n+      icode = CODE_FOR_flag_mulv2hi;\n+      tmp1 = gen_reg_rtx (V2HImode);\n+      tmp2 = gen_reg_rtx (V2HImode);\n+\n+      if (! target\n+\t  || GET_MODE (target) != V2HImode\n+\t  || ! (*insn_data[icode].operand[0].predicate) (target, V2HImode))\n+\ttarget = gen_reg_rtx (V2HImode);\n+      if (! register_operand (op0, GET_MODE (op0)))\n+\top0 = copy_to_mode_reg (GET_MODE (op0), op0);\n+\n+      emit_insn (gen_flag_mulv2hi (tmp1, op0, op0, GEN_INT (MACFLAG_NONE)));\n+\n+      emit_insn (gen_flag_mulhi_parts (tmp2, op0, op0, const0_rtx,\n+\t\t\t\t       const0_rtx, const1_rtx,\n+\t\t\t\t       GEN_INT (MACFLAG_NONE)));\n+\n+      emit_insn (gen_ssaddhi3_parts (target, tmp2, tmp2, const1_rtx,\n+\t\t\t\t\t  const0_rtx, const0_rtx));\n+\n+      emit_insn (gen_sssubhi3_parts (target, tmp1, tmp1, const0_rtx,\n+\t\t\t\t\t  const0_rtx, const1_rtx));\n+\n+      return target;\n+\n     default:\n       break;\n     }"}, {"sha": "b2a73f12091b4ba46206d4b3bb6fa4141d441cb0", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7d5ac4e8c62c26923e0a747afe5df3f5d13011/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=1d7d5ac4e8c62c26923e0a747afe5df3f5d13011", "patch": "@@ -137,7 +137,8 @@\n    (UNSPEC_LSETUP_END 10)\n    ;; Distinguish a 32-bit version of an insn from a 16-bit version.\n    (UNSPEC_32BIT 11)\n-   (UNSPEC_NOP 12)])\n+   (UNSPEC_NOP 12)\n+   (UNSPEC_ONES 12)])\n \n (define_constants\n   [(UNSPEC_VOLATILE_EH_RETURN 0)\n@@ -1314,6 +1315,14 @@\n    %0 = %1 ^ %2;\"\n   [(set_attr \"type\" \"alu0\")])\n \n+(define_insn \"ones\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(unspec:HI [(match_operand:SI 1 \"register_operand\" \"d\")]\n+\t\tUNSPEC_ONES))]\n+  \"\"\n+  \"%h0 = ONES %1;\"\n+  [(set_attr \"type\" \"alu0\")])\n+\n (define_insn \"smaxsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(smax:SI (match_operand:SI 1 \"register_operand\" \"d\")\n@@ -2943,6 +2952,60 @@\n   \"%h0 = %h1 + %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"ssaddhi3_parts\"\n+  [(set (vec_select:HI\n+\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n+\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n+\t(ss_plus:HI (vec_select:HI\n+\t\t     (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t     (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t    (vec_select:HI\n+\t\t     (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t     (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))))]\n+  \"\"\n+{\n+  const char *templates[] = {\n+    \"%h0 = %h1 + %h2 (S)%!\",\n+    \"%d0 = %h1 + %h2 (S)%!\",\n+    \"%h0 = %d1 + %h2 (S)%!\",\n+    \"%d0 = %d1 + %h2 (S)%!\",\n+    \"%h0 = %h1 + %d2 (S)%!\",\n+    \"%d0 = %h1 + %d2 (S)%!\",\n+    \"%h0 = %d1 + %d2 (S)%!\",\n+    \"%d0 = %d1 + %d2 (S)%!\" };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n+\t    + (INTVAL (operands[5]) << 2);\n+  return templates[alt];\n+}\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"sssubhi3_parts\"\n+  [(set (vec_select:HI\n+\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n+\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n+\t(ss_minus:HI (vec_select:HI\n+\t\t      (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t      (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))))]\n+  \"\"\n+{\n+  const char *templates[] = {\n+    \"%h0 = %h1 - %h2 (S)%!\",\n+    \"%d0 = %h1 - %h2 (S)%!\",\n+    \"%h0 = %d1 - %h2 (S)%!\",\n+    \"%d0 = %d1 - %h2 (S)%!\",\n+    \"%h0 = %h1 - %d2 (S)%!\",\n+    \"%d0 = %h1 - %d2 (S)%!\",\n+    \"%h0 = %d1 - %d2 (S)%!\",\n+    \"%d0 = %d1 - %d2 (S)%!\" };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n+\t    + (INTVAL (operands[5]) << 2);\n+  return templates[alt];\n+}\n+  [(set_attr \"type\" \"dsp32\")])\n+\n (define_insn \"sssubhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(ss_minus:HI (match_operand:HI 1 \"register_operand\" \"d\")\n@@ -3157,6 +3220,35 @@\n   \"%h0 = %h1 * %h2 %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"flag_mulhi_parts\"\n+  [(set (vec_select:HI\n+\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n+\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n+\t(unspec:HI [(vec_select:HI\n+\t\t     (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t     (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t    (vec_select:HI\n+\t\t     (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t     (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))\n+\t\t    (match_operand 6 \"const_int_operand\" \"n\")]\n+\t\t   UNSPEC_MUL_WITH_FLAG))]\n+  \"\"\n+{\n+  const char *templates[] = {\n+    \"%h0 = %h1 * %h2 %M6%!\",\n+    \"%d0 = %h1 * %h2 %M6%!\",\n+    \"%h0 = %d1 * %h2 %M6%!\",\n+    \"%d0 = %d1 * %h2 %M6%!\",\n+    \"%h0 = %h1 * %d2 %M6%!\",\n+    \"%d0 = %h1 * %d2 %M6%!\",\n+    \"%h0 = %d1 * %d2 %M6%!\",\n+    \"%d0 = %d1 * %d2 %M6%!\" };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n+\t    + (INTVAL (operands[5]) << 2);\n+  return templates[alt];\n+}\n+  [(set_attr \"type\" \"dsp32\")])\n+\n (define_insn \"flag_mulhisi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(unspec:SI [(match_operand:HI 1 \"register_operand\" \"d\")"}]}