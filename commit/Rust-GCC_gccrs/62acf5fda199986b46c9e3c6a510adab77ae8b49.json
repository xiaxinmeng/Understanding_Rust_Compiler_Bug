{"sha": "62acf5fda199986b46c9e3c6a510adab77ae8b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhY2Y1ZmRhMTk5OTg2YjQ2YzllM2M2YTUxMGFkYWI3N2FlOGI0OQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-11-05T22:41:13Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-11-05T22:41:13Z"}, "message": "(CC_FCOMI): Define\n\nFrom-SVN: r13100", "tree": {"sha": "7263b8b19f3147f3f578ec1f4a62c32ba861b49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7263b8b19f3147f3f578ec1f4a62c32ba861b49b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62acf5fda199986b46c9e3c6a510adab77ae8b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62acf5fda199986b46c9e3c6a510adab77ae8b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62acf5fda199986b46c9e3c6a510adab77ae8b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62acf5fda199986b46c9e3c6a510adab77ae8b49/comments", "author": null, "committer": null, "parents": [{"sha": "4f74d15b9dc2d95340d17f97038d0f07d4a4427e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f74d15b9dc2d95340d17f97038d0f07d4a4427e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f74d15b9dc2d95340d17f97038d0f07d4a4427e"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "a4209542dcf0d02b79ea6ad5e1fdc3360bf6b315", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62acf5fda199986b46c9e3c6a510adab77ae8b49/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62acf5fda199986b46c9e3c6a510adab77ae8b49/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=62acf5fda199986b46c9e3c6a510adab77ae8b49", "patch": "@@ -546,7 +546,7 @@ extern int ix86_arch;\n    : FP_REGNO_P (REGNO)\t\t\t\t\t\t\\\n    ? (((int) GET_MODE_CLASS (MODE) == (int) MODE_FLOAT\t\t\\\n        || (int) GET_MODE_CLASS (MODE) == (int) MODE_COMPLEX_FLOAT)\t\\\n-      && GET_MODE_UNIT_SIZE (MODE) <= 12)\t\t\t\\\n+      && GET_MODE_UNIT_SIZE (MODE) <= (LONG_DOUBLE_TYPE_SIZE == 96 ? 12 : 8))\\\n    : (int) (MODE) != (int) QImode ? 1\t\t\t\t\\\n    : (reload_in_progress | reload_completed) == 1)\n \n@@ -2233,7 +2233,7 @@ extern struct rtx_def *(*i386_compare_gen)(), *(*i386_compare_gen_eq)();\n /* Here we define machine-dependent flags and fields in cc_status\n    (see `conditions.h').  */\n \n-/* Set if the cc value is was actually from the 80387 and\n+/* Set if the cc value was actually from the 80387 and\n    we are testing eax directly (i.e. no sahf) */\n #define CC_TEST_AX 020000\n \n@@ -2245,6 +2245,10 @@ extern struct rtx_def *(*i386_compare_gen)(), *(*i386_compare_gen_eq)();\n    the state of equality is indicated by zero in the carry bit.  */\n #define CC_Z_IN_NOT_C 010000\n \n+/* Set if the CC value was actually from the 80387 and loaded directly\n+   into the eflags instead of via eax/sahf.  */\n+#define CC_FCOMI 040000\n+\n /* Store in cc_status the expressions\n    that the condition codes will describe\n    after execution of an instruction whose pattern is EXP."}]}