{"sha": "c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlZTA1NzkxNWNhMWFiZjU4MTJjZjdlYTdlZmM2NDA4ZTMyYzZiMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-10T07:54:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-10T07:54:15Z"}, "message": "* doc/extend.texi: Document the FR-V built-in functions.\n\nFrom-SVN: r87280", "tree": {"sha": "5133f1ddbe45c7980893d9540beced44c24523b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5133f1ddbe45c7980893d9540beced44c24523b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1/comments", "author": null, "committer": null, "parents": [{"sha": "5123971af819e3313bfb1b2716e9b20761d1294c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5123971af819e3313bfb1b2716e9b20761d1294c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5123971af819e3313bfb1b2716e9b20761d1294c"}], "stats": {"total": 409, "additions": 409, "deletions": 0}, "files": [{"sha": "4304f42b0ef19df6448e269789cbf64530e661bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "patch": "@@ -1,3 +1,7 @@\n+2004-09-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/extend.texi: Document the FR-V built-in functions.\n+\n 2004-09-09  James E Wilson  <wilson@specifixinc.com>\n \n \t* doc/sourcebuild.texi: Delete libbanshee reference."}, {"sha": "63cefd37cbfc56b241bfb23fcb5f26ff818698a5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ee057915ca1abf5812cf7ea7efc6408e32c6b1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c3ee057915ca1abf5812cf7ea7efc6408e32c6b1", "patch": "@@ -5293,6 +5293,7 @@ instructions, but allow the compiler to schedule those calls.\n @menu\n * Alpha Built-in Functions::\n * ARM Built-in Functions::\n+* FR-V Built-in Functions::\n * X86 Built-in Functions::\n * PowerPC AltiVec Built-in Functions::\n @end menu\n@@ -5526,6 +5527,410 @@ long long __builtin_arm_wxor (long long, long long)\n long long __builtin_arm_wzero ()\n @end smallexample\n \n+@node FR-V Built-in Functions\n+@subsection FR-V Built-in Functions\n+\n+GCC provides many FR-V-specific built-in functions.  In general,\n+these functions are intended to be compatible with those described\n+by @cite{FR-V Family, Softune C/C++ Compiler Manual (V6), Fujitsu\n+Semiconductor}.  The two exceptions are @code{__MDUNPACKH} and\n+@code{__MBTOHE}, the gcc forms of which pass 128-bit values by\n+pointer rather than by value.\n+\n+Most of the functions are named after specific FR-V instructions.\n+Such functions are said to be ``directly mapped'' and are summarised\n+here in tabular form.\n+\n+@menu\n+* Argument Types::\n+* Directly-mapped Integer Functions::\n+* Directly-mapped Media Functions::\n+* Other Built-in Functions::\n+@end menu\n+\n+@node Argument Types\n+@subsubsection Argument Types\n+\n+The arguments to the built-in functions can be divided into three groups:\n+register numbers, compile-time constants and run-time values.  In order\n+to make this classification clear at a glance, the arguments and return\n+values are given the following pseudo types:\n+\n+@multitable @columnfractions .20 .30 .15 .35\n+@item Pseudo type @tab Real C type @tab Constant? @tab Description\n+@item @code{uh} @tab @code{unsigned short} @tab No @tab an unsigned halfword\n+@item @code{uw1} @tab @code{unsigned int} @tab No @tab an unsigned word\n+@item @code{sw1} @tab @code{int} @tab No @tab a signed word\n+@item @code{uw2} @tab @code{unsigned long long} @tab No\n+@tab an unsigned doubleword\n+@item @code{sw2} @tab @code{long long} @tab No @tab a signed doubleword\n+@item @code{const} @tab @code{int} @tab Yes @tab an integer constant\n+@item @code{acc} @tab @code{int} @tab Yes @tab an ACC register number\n+@item @code{iacc} @tab @code{int} @tab Yes @tab an IACC register number\n+@end multitable\n+\n+These pseudo types are not defined by GCC, they are simply a notational\n+convenience used in this manual.\n+\n+Arguments of type @code{uh}, @code{uw1}, @code{sw1}, @code{uw2}\n+and @code{sw2} are evaluated at run time.  They correspond to\n+register operands in the underlying FR-V instructions.\n+\n+@code{const} arguments represent immediate operands in the underlying\n+FR-V instructions.  They must be compile-time constants.\n+\n+@code{acc} arguments are evaluated at compile time and specify the number\n+of an accumulator register.  For example, an @code{acc} argument of 2\n+will select the ACC2 register.\n+\n+@code{iacc} arguments are similar to @code{acc} arguments but specify the\n+number of an IACC register.  See @pxref{Other Built-in Functions}\n+for more details.\n+\n+@node Directly-mapped Integer Functions\n+@subsubsection Directly-mapped Integer Functions\n+\n+The functions listed below map directly to FR-V I-type instructions.\n+\n+@multitable @columnfractions .45 .32 .23\n+@item Function prototype @tab Example usage @tab Assembly output\n+@item @code{sw1 __ADDSS (sw1, sw1)}\n+@tab @code{@var{c} = __ADDSS (@var{a}, @var{b})}\n+@tab @code{ADDSS @var{a},@var{b},@var{c}}\n+@item @code{sw1 __SCAN (sw1, sw1)}\n+@tab @code{@var{c} = __SCAN (@var{a}, @var{b})}\n+@tab @code{SCAN @var{a},@var{b},@var{c}}\n+@item @code{sw1 __SCUTSS (sw1)}\n+@tab @code{@var{b} = __SCUTSS (@var{a})}\n+@tab @code{SCUTSS @var{a},@var{b}}\n+@item @code{sw1 __SLASS (sw1, sw1)}\n+@tab @code{@var{c} = __SLASS (@var{a}, @var{b})}\n+@tab @code{SLASS @var{a},@var{b},@var{c}}\n+@item @code{void __SMASS (sw1, sw1)}\n+@tab @code{__SMASS (@var{a}, @var{b})}\n+@tab @code{SMASS @var{a},@var{b}}\n+@item @code{void __SMSSS (sw1, sw1)}\n+@tab @code{__SMSSS (@var{a}, @var{b})}\n+@tab @code{SMSSS @var{a},@var{b}}\n+@item @code{void __SMU (sw1, sw1)}\n+@tab @code{__SMU (@var{a}, @var{b})}\n+@tab @code{SMU @var{a},@var{b}}\n+@item @code{sw2 __SMUL (sw1, sw1)}\n+@tab @code{@var{c} = __SMUL (@var{a}, @var{b})}\n+@tab @code{SMUL @var{a},@var{b},@var{c}}\n+@item @code{sw1 __SUBSS (sw1, sw1)}\n+@tab @code{@var{c} = __SUBSS (@var{a}, @var{b})}\n+@tab @code{SUBSS @var{a},@var{b},@var{c}}\n+@item @code{uw2 __UMUL (uw1, uw1)}\n+@tab @code{@var{c} = __UMUL (@var{a}, @var{b})}\n+@tab @code{UMUL @var{a},@var{b},@var{c}}\n+@end multitable\n+\n+@node Directly-mapped Media Functions\n+@subsubsection Directly-mapped Media Functions\n+\n+The functions listed below map directly to FR-V M-type instructions.\n+\n+@multitable @columnfractions .45 .32 .23\n+@item Function prototype @tab Example usage @tab Assembly output\n+@item @code{uw1 __MABSHS (sw1)}\n+@tab @code{@var{b} = __MABSHS (@var{a})}\n+@tab @code{MABSHS @var{a},@var{b}}\n+@item @code{void __MADDACCS (acc, acc)}\n+@tab @code{__MADDACCS (@var{b}, @var{a})}\n+@tab @code{MADDACCS @var{a},@var{b}}\n+@item @code{sw1 __MADDHSS (sw1, sw1)}\n+@tab @code{@var{c} = __MADDHSS (@var{a}, @var{b})}\n+@tab @code{MADDHSS @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MADDHUS (uw1, uw1)}\n+@tab @code{@var{c} = __MADDHUS (@var{a}, @var{b})}\n+@tab @code{MADDHUS @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MAND (uw1, uw1)}\n+@tab @code{@var{c} = __MAND (@var{a}, @var{b})}\n+@tab @code{MAND @var{a},@var{b},@var{c}}\n+@item @code{void __MASACCS (acc, acc)}\n+@tab @code{__MASACCS (@var{b}, @var{a})}\n+@tab @code{MASACCS @var{a},@var{b}}\n+@item @code{uw1 __MAVEH (uw1, uw1)}\n+@tab @code{@var{c} = __MAVEH (@var{a}, @var{b})}\n+@tab @code{MAVEH @var{a},@var{b},@var{c}}\n+@item @code{uw2 __MBTOH (uw1)}\n+@tab @code{@var{b} = __MBTOH (@var{a})}\n+@tab @code{MBTOH @var{a},@var{b}}\n+@item @code{void __MBTOHE (uw1 *, uw1)}\n+@tab @code{__MBTOHE (&@var{b}, @var{a})}\n+@tab @code{MBTOHE @var{a},@var{b}}\n+@item @code{void __MCLRACC (acc)}\n+@tab @code{__MCLRACC (@var{a})}\n+@tab @code{MCLRACC @var{a}}\n+@item @code{void __MCLRACCA (void)}\n+@tab @code{__MCLRACCA ()}\n+@tab @code{MCLRACCA}\n+@item @code{uw1 __Mcop1 (uw1, uw1)}\n+@tab @code{@var{c} = __Mcop1 (@var{a}, @var{b})}\n+@tab @code{Mcop1 @var{a},@var{b},@var{c}}\n+@item @code{uw1 __Mcop2 (uw1, uw1)}\n+@tab @code{@var{c} = __Mcop2 (@var{a}, @var{b})}\n+@tab @code{Mcop2 @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MCPLHI (uw2, const)}\n+@tab @code{@var{c} = __MCPLHI (@var{a}, @var{b})}\n+@tab @code{MCPLHI @var{a},#@var{b},@var{c}}\n+@item @code{uw1 __MCPLI (uw2, const)}\n+@tab @code{@var{c} = __MCPLI (@var{a}, @var{b})}\n+@tab @code{MCPLI @var{a},#@var{b},@var{c}}\n+@item @code{void __MCPXIS (acc, sw1, sw1)}\n+@tab @code{__MCPXIS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MCPXIS @var{a},@var{b},@var{c}}\n+@item @code{void __MCPXIU (acc, uw1, uw1)}\n+@tab @code{__MCPXIU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MCPXIU @var{a},@var{b},@var{c}}\n+@item @code{void __MCPXRS (acc, sw1, sw1)}\n+@tab @code{__MCPXRS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MCPXRS @var{a},@var{b},@var{c}}\n+@item @code{void __MCPXRU (acc, uw1, uw1)}\n+@tab @code{__MCPXRU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MCPXRU @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MCUT (acc, uw1)}\n+@tab @code{@var{c} = __MCUT (@var{a}, @var{b})}\n+@tab @code{MCUT @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MCUTSS (acc, sw1)}\n+@tab @code{@var{c} = __MCUTSS (@var{a}, @var{b})}\n+@tab @code{MCUTSS @var{a},@var{b},@var{c}}\n+@item @code{void __MDADDACCS (acc, acc)}\n+@tab @code{__MDADDACCS (@var{b}, @var{a})}\n+@tab @code{MDADDACCS @var{a},@var{b}}\n+@item @code{void __MDASACCS (acc, acc)}\n+@tab @code{__MDASACCS (@var{b}, @var{a})}\n+@tab @code{MDASACCS @var{a},@var{b}}\n+@item @code{uw2 __MDCUTSSI (acc, const)}\n+@tab @code{@var{c} = __MDCUTSSI (@var{a}, @var{b})}\n+@tab @code{MDCUTSSI @var{a},#@var{b},@var{c}}\n+@item @code{uw2 __MDPACKH (uw2, uw2)}\n+@tab @code{@var{c} = __MDPACKH (@var{a}, @var{b})}\n+@tab @code{MDPACKH @var{a},@var{b},@var{c}}\n+@item @code{uw2 __MDROTLI (uw2, const)}\n+@tab @code{@var{c} = __MDROTLI (@var{a}, @var{b})}\n+@tab @code{MDROTLI @var{a},#@var{b},@var{c}}\n+@item @code{void __MDSUBACCS (acc, acc)}\n+@tab @code{__MDSUBACCS (@var{b}, @var{a})}\n+@tab @code{MDSUBACCS @var{a},@var{b}}\n+@item @code{void __MDUNPACKH (uw1 *, uw2)}\n+@tab @code{__MDUNPACKH (&@var{b}, @var{a})}\n+@tab @code{MDUNPACKH @var{a},@var{b}}\n+@item @code{uw2 __MEXPDHD (uw1, const)}\n+@tab @code{@var{c} = __MEXPDHD (@var{a}, @var{b})}\n+@tab @code{MEXPDHD @var{a},#@var{b},@var{c}}\n+@item @code{uw1 __MEXPDHW (uw1, const)}\n+@tab @code{@var{c} = __MEXPDHW (@var{a}, @var{b})}\n+@tab @code{MEXPDHW @var{a},#@var{b},@var{c}}\n+@item @code{uw1 __MHDSETH (uw1, const)}\n+@tab @code{@var{c} = __MHDSETH (@var{a}, @var{b})}\n+@tab @code{MHDSETH @var{a},#@var{b},@var{c}}\n+@item @code{sw1 __MHDSETS (const)}\n+@tab @code{@var{b} = __MHDSETS (@var{a})}\n+@tab @code{MHDSETS #@var{a},@var{b}}\n+@item @code{uw1 __MHSETHIH (uw1, const)}\n+@tab @code{@var{b} = __MHSETHIH (@var{b}, @var{a})}\n+@tab @code{MHSETHIH #@var{a},@var{b}}\n+@item @code{sw1 __MHSETHIS (sw1, const)}\n+@tab @code{@var{b} = __MHSETHIS (@var{b}, @var{a})}\n+@tab @code{MHSETHIS #@var{a},@var{b}}\n+@item @code{uw1 __MHSETLOH (uw1, const)}\n+@tab @code{@var{b} = __MHSETLOH (@var{b}, @var{a})}\n+@tab @code{MHSETLOH #@var{a},@var{b}}\n+@item @code{sw1 __MHSETLOS (sw1, const)}\n+@tab @code{@var{b} = __MHSETLOS (@var{b}, @var{a})}\n+@tab @code{MHSETLOS #@var{a},@var{b}}\n+@item @code{uw1 __MHTOB (uw2)}\n+@tab @code{@var{b} = __MHTOB (@var{a})}\n+@tab @code{MHTOB @var{a},@var{b}}\n+@item @code{void __MMACHS (acc, sw1, sw1)}\n+@tab @code{__MMACHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMACHS @var{a},@var{b},@var{c}}\n+@item @code{void __MMACHU (acc, uw1, uw1)}\n+@tab @code{__MMACHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMACHU @var{a},@var{b},@var{c}}\n+@item @code{void __MMRDHS (acc, sw1, sw1)}\n+@tab @code{__MMRDHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMRDHS @var{a},@var{b},@var{c}}\n+@item @code{void __MMRDHU (acc, uw1, uw1)}\n+@tab @code{__MMRDHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMRDHU @var{a},@var{b},@var{c}}\n+@item @code{void __MMULHS (acc, sw1, sw1)}\n+@tab @code{__MMULHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMULHS @var{a},@var{b},@var{c}}\n+@item @code{void __MMULHU (acc, uw1, uw1)}\n+@tab @code{__MMULHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMULHU @var{a},@var{b},@var{c}}\n+@item @code{void __MMULXHS (acc, sw1, sw1)}\n+@tab @code{__MMULXHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMULXHS @var{a},@var{b},@var{c}}\n+@item @code{void __MMULXHU (acc, uw1, uw1)}\n+@tab @code{__MMULXHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MMULXHU @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MNOT (uw1)}\n+@tab @code{@var{b} = __MNOT (@var{a})}\n+@tab @code{MNOT @var{a},@var{b}}\n+@item @code{uw1 __MOR (uw1, uw1)}\n+@tab @code{@var{c} = __MOR (@var{a}, @var{b})}\n+@tab @code{MOR @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MPACKH (uh, uh)}\n+@tab @code{@var{c} = __MPACKH (@var{a}, @var{b})}\n+@tab @code{MPACKH @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQADDHSS (sw2, sw2)}\n+@tab @code{@var{c} = __MQADDHSS (@var{a}, @var{b})}\n+@tab @code{MQADDHSS @var{a},@var{b},@var{c}}\n+@item @code{uw2 __MQADDHUS (uw2, uw2)}\n+@tab @code{@var{c} = __MQADDHUS (@var{a}, @var{b})}\n+@tab @code{MQADDHUS @var{a},@var{b},@var{c}}\n+@item @code{void __MQCPXIS (acc, sw2, sw2)}\n+@tab @code{__MQCPXIS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQCPXIS @var{a},@var{b},@var{c}}\n+@item @code{void __MQCPXIU (acc, uw2, uw2)}\n+@tab @code{__MQCPXIU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQCPXIU @var{a},@var{b},@var{c}}\n+@item @code{void __MQCPXRS (acc, sw2, sw2)}\n+@tab @code{__MQCPXRS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQCPXRS @var{a},@var{b},@var{c}}\n+@item @code{void __MQCPXRU (acc, uw2, uw2)}\n+@tab @code{__MQCPXRU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQCPXRU @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQLCLRHS (sw2, sw2)}\n+@tab @code{@var{c} = __MQLCLRHS (@var{a}, @var{b})}\n+@tab @code{MQLCLRHS @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQLMTHS (sw2, sw2)}\n+@tab @code{@var{c} = __MQLMTHS (@var{a}, @var{b})}\n+@tab @code{MQLMTHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQMACHS (acc, sw2, sw2)}\n+@tab @code{__MQMACHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMACHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQMACHU (acc, uw2, uw2)}\n+@tab @code{__MQMACHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMACHU @var{a},@var{b},@var{c}}\n+@item @code{void __MQMACXHS (acc, sw2, sw2)}\n+@tab @code{__MQMACXHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMACXHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQMULHS (acc, sw2, sw2)}\n+@tab @code{__MQMULHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMULHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQMULHU (acc, uw2, uw2)}\n+@tab @code{__MQMULHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMULHU @var{a},@var{b},@var{c}}\n+@item @code{void __MQMULXHS (acc, sw2, sw2)}\n+@tab @code{__MQMULXHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMULXHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQMULXHU (acc, uw2, uw2)}\n+@tab @code{__MQMULXHU (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQMULXHU @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQSATHS (sw2, sw2)}\n+@tab @code{@var{c} = __MQSATHS (@var{a}, @var{b})}\n+@tab @code{MQSATHS @var{a},@var{b},@var{c}}\n+@item @code{uw2 __MQSLLHI (uw2, int)}\n+@tab @code{@var{c} = __MQSLLHI (@var{a}, @var{b})}\n+@tab @code{MQSLLHI @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQSRAHI (sw2, int)}\n+@tab @code{@var{c} = __MQSRAHI (@var{a}, @var{b})}\n+@tab @code{MQSRAHI @var{a},@var{b},@var{c}}\n+@item @code{sw2 __MQSUBHSS (sw2, sw2)}\n+@tab @code{@var{c} = __MQSUBHSS (@var{a}, @var{b})}\n+@tab @code{MQSUBHSS @var{a},@var{b},@var{c}}\n+@item @code{uw2 __MQSUBHUS (uw2, uw2)}\n+@tab @code{@var{c} = __MQSUBHUS (@var{a}, @var{b})}\n+@tab @code{MQSUBHUS @var{a},@var{b},@var{c}}\n+@item @code{void __MQXMACHS (acc, sw2, sw2)}\n+@tab @code{__MQXMACHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQXMACHS @var{a},@var{b},@var{c}}\n+@item @code{void __MQXMACXHS (acc, sw2, sw2)}\n+@tab @code{__MQXMACXHS (@var{c}, @var{a}, @var{b})}\n+@tab @code{MQXMACXHS @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MRDACC (acc)}\n+@tab @code{@var{b} = __MRDACC (@var{a})}\n+@tab @code{MRDACC @var{a},@var{b}}\n+@item @code{uw1 __MRDACCG (acc)}\n+@tab @code{@var{b} = __MRDACCG (@var{a})}\n+@tab @code{MRDACCG @var{a},@var{b}}\n+@item @code{uw1 __MROTLI (uw1, const)}\n+@tab @code{@var{c} = __MROTLI (@var{a}, @var{b})}\n+@tab @code{MROTLI @var{a},#@var{b},@var{c}}\n+@item @code{uw1 __MROTRI (uw1, const)}\n+@tab @code{@var{c} = __MROTRI (@var{a}, @var{b})}\n+@tab @code{MROTRI @var{a},#@var{b},@var{c}}\n+@item @code{sw1 __MSATHS (sw1, sw1)}\n+@tab @code{@var{c} = __MSATHS (@var{a}, @var{b})}\n+@tab @code{MSATHS @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MSATHU (uw1, uw1)}\n+@tab @code{@var{c} = __MSATHU (@var{a}, @var{b})}\n+@tab @code{MSATHU @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MSLLHI (uw1, const)}\n+@tab @code{@var{c} = __MSLLHI (@var{a}, @var{b})}\n+@tab @code{MSLLHI @var{a},#@var{b},@var{c}}\n+@item @code{sw1 __MSRAHI (sw1, const)}\n+@tab @code{@var{c} = __MSRAHI (@var{a}, @var{b})}\n+@tab @code{MSRAHI @var{a},#@var{b},@var{c}}\n+@item @code{uw1 __MSRLHI (uw1, const)}\n+@tab @code{@var{c} = __MSRLHI (@var{a}, @var{b})}\n+@tab @code{MSRLHI @var{a},#@var{b},@var{c}}\n+@item @code{void __MSUBACCS (acc, acc)}\n+@tab @code{__MSUBACCS (@var{b}, @var{a})}\n+@tab @code{MSUBACCS @var{a},@var{b}}\n+@item @code{sw1 __MSUBHSS (sw1, sw1)}\n+@tab @code{@var{c} = __MSUBHSS (@var{a}, @var{b})}\n+@tab @code{MSUBHSS @var{a},@var{b},@var{c}}\n+@item @code{uw1 __MSUBHUS (uw1, uw1)}\n+@tab @code{@var{c} = __MSUBHUS (@var{a}, @var{b})}\n+@tab @code{MSUBHUS @var{a},@var{b},@var{c}}\n+@item @code{void __MTRAP (void)}\n+@tab @code{__MTRAP ()}\n+@tab @code{MTRAP}\n+@item @code{uw2 __MUNPACKH (uw1)}\n+@tab @code{@var{b} = __MUNPACKH (@var{a})}\n+@tab @code{MUNPACKH @var{a},@var{b}}\n+@item @code{uw1 __MWCUT (uw2, uw1)}\n+@tab @code{@var{c} = __MWCUT (@var{a}, @var{b})}\n+@tab @code{MWCUT @var{a},@var{b},@var{c}}\n+@item @code{void __MWTACC (acc, uw1)}\n+@tab @code{__MWTACC (@var{b}, @var{a})}\n+@tab @code{MWTACC @var{a},@var{b}}\n+@item @code{void __MWTACCG (acc, uw1)}\n+@tab @code{__MWTACCG (@var{b}, @var{a})}\n+@tab @code{MWTACCG @var{a},@var{b}}\n+@item @code{uw1 __MXOR (uw1, uw1)}\n+@tab @code{@var{c} = __MXOR (@var{a}, @var{b})}\n+@tab @code{MXOR @var{a},@var{b},@var{c}}\n+@end multitable\n+\n+@node Other Built-in Functions\n+@subsubsection Other Built-in Functions\n+\n+This section describes built-in functions that are not named after\n+a specific FR-V instruction.\n+\n+@table @code\n+@item sw2 __IACCreadll (iacc @var{reg})\n+Return the full 64-bit value of IACC0@.  The @var{reg} argument is reserved\n+for future expansion and must be 0.\n+\n+@item sw1 __IACCreadl (iacc @var{reg})\n+Return the value of IACC0H if @var{reg} is 0 and IACC0L if @var{reg} is 1.\n+Other values of @var{reg} are rejected as invalid.\n+\n+@item void __IACCsetll (iacc @var{reg}, sw2 @var{x})\n+Set the full 64-bit value of IACC0 to @var{x}.  The @var{reg} argument\n+is reserved for future expansion and must be 0.\n+\n+@item void __IACCsetl (iacc @var{reg}, sw1 @var{x})\n+Set IACC0H to @var{x} if @var{reg} is 0 and IACC0L to @var{x} if @var{reg}\n+is 1.  Other values of @var{reg} are rejected as invalid.\n+\n+@item void __data_prefetch0 (const void *@var{x})\n+Use the @code{dcpl} instruction to load the contents of address @var{x}\n+into the data cache.\n+\n+@item void __data_prefetch (const void *@var{x})\n+Use the @code{nldub} instruction to load the contents of address @var{x}\n+into the data cache.  The instruction will be issued in slot I1@.\n+@end table\n+\n @node X86 Built-in Functions\n @subsection X86 Built-in Functions\n "}]}