{"sha": "5a03c8c4016a7a702d6de2d308bca153a6befb5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwM2M4YzQwMTZhN2E3MDJkNmRlMmQzMDhiY2ExNTNhNmJlZmI1ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:48:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:48:13Z"}, "message": "(cse_insn): Ignore paradoxical SUBREGs unless we are looking for such.\n\nFrom-SVN: r14625", "tree": {"sha": "8bcd80fc445b7119da11aac7fcb1335519c1d82f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bcd80fc445b7119da11aac7fcb1335519c1d82f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a03c8c4016a7a702d6de2d308bca153a6befb5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a03c8c4016a7a702d6de2d308bca153a6befb5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a03c8c4016a7a702d6de2d308bca153a6befb5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a03c8c4016a7a702d6de2d308bca153a6befb5d/comments", "author": null, "committer": null, "parents": [{"sha": "eadceb598a8e7ec27f6a0c44c6f2e4200c40a482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadceb598a8e7ec27f6a0c44c6f2e4200c40a482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadceb598a8e7ec27f6a0c44c6f2e4200c40a482"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "1331fc83dbd7dda69e9ca6666dfe2488bf97cda0", "filename": "gcc/cse.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a03c8c4016a7a702d6de2d308bca153a6befb5d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a03c8c4016a7a702d6de2d308bca153a6befb5d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=5a03c8c4016a7a702d6de2d308bca153a6befb5d", "patch": "@@ -6773,6 +6773,18 @@ cse_insn (insn, in_libcall_block)\n \t  if (code != REG && ! exp_equiv_p (p->exp, p->exp, 1, 0))\n \t    continue;\n \n+\t  /* Also skip paradoxical subregs, unless that's what we're\n+\t     looking for.  */\n+\t  if (code == SUBREG\n+\t      && (GET_MODE_SIZE (GET_MODE (p->exp))\n+\t\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (p->exp))))\n+\t      && ! (src != 0\n+\t\t    && GET_CODE (src) == SUBREG\n+\t\t    && GET_MODE (src) == GET_MODE (p->exp)\n+\t\t    && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (src)))\n+\t\t\t< GET_MODE_SIZE (GET_MODE (SUBREG_REG (p->exp))))))\n+\t    continue;\n+\n           if (src && GET_CODE (src) == code && rtx_equal_p (src, p->exp))\n \t    src = 0;\n           else if (src_folded && GET_CODE (src_folded) == code\n@@ -6846,6 +6858,25 @@ cse_insn (insn, in_libcall_block)\n           while (elt && GET_CODE (elt->exp) != REG\n \t         && ! exp_equiv_p (elt->exp, elt->exp, 1, 0))\n \t    elt = elt->next_same_value;\t     \n+\n+\t  /* A paradoxical subreg would be bad here: it'll be the right\n+\t     size, but later may be adjusted so that the upper bits aren't\n+\t     what we want.  So reject it.  */\n+\t  if (elt != 0\n+\t      && GET_CODE (elt->exp) == SUBREG\n+\t      && (GET_MODE_SIZE (GET_MODE (elt->exp))\n+\t\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (elt->exp))))\n+\t      /* It is okay, though, if the rtx we're trying to match\n+\t\t will ignore any of the bits we can't predict.  */\n+\t      && ! (src != 0\n+\t\t    && GET_CODE (src) == SUBREG\n+\t\t    && GET_MODE (src) == GET_MODE (elt->exp)\n+\t\t    && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (src)))\n+\t\t\t< GET_MODE_SIZE (GET_MODE (SUBREG_REG (elt->exp))))))\n+\t    {\n+\t      elt = elt->next_same_value;\n+\t      continue;\n+\t    }\n \t      \n           if (elt) src_elt_cost = elt->cost;\n "}]}