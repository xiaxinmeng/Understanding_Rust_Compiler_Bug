{"sha": "cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwMGY1MWFjZjIwZmQxZmYwM2NkOWQ0ZmRiNzRiYjEyYmQ3MWRhNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-09T11:30:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-09T11:30:07Z"}, "message": "(gen_lowpart_common, gen_highpart, operand_subword): Don't make a new\nREG for stack, frame, or arg pointer.\n\nFrom-SVN: r2382", "tree": {"sha": "62be2713d5be279e5f8dff73223f3d5af6399da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62be2713d5be279e5f8dff73223f3d5af6399da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5/comments", "author": null, "committer": null, "parents": [{"sha": "26ecfc761475c40d3de6aa7eca1595722888937e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ecfc761475c40d3de6aa7eca1595722888937e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ecfc761475c40d3de6aa7eca1595722888937e"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "f13d0d77d31484a3d782954be2e246ff51fbcd20", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "patch": "@@ -529,7 +529,14 @@ gen_lowpart_common (mode, x)\n       else if (REGNO (x) < FIRST_PSEUDO_REGISTER\n \t       /* integrate.c can't handle parts of a return value register. */\n \t       && (! REG_FUNCTION_VALUE_P (x)\n-\t\t   || ! rtx_equal_function_value_matters))\n+\t\t   || ! rtx_equal_function_value_matters)\n+\t       /* We want to keep the stack, frame, and arg pointers\n+\t\t  special.  */\n+\t       && REGNO (x) != FRAME_POINTER_REGNUM\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t       && REGNO (x) != ARG_POINTER_REGNUM\n+#endif\n+\t       && REGNO (x) != STACK_POINTER_REGNUM)\n \treturn gen_rtx (REG, mode, REGNO (x) + word);\n       else\n \treturn gen_rtx (SUBREG, mode, x, word);\n@@ -776,7 +783,13 @@ gen_highpart (mode, x)\n \t\t - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD))\n \t\t/ UNITS_PER_WORD);\n #endif\n-      if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n+      if (REGNO (x) < FIRST_PSEUDO_REGISTER\n+\t  /* We want to keep the stack, frame, and arg pointers special.  */\n+\t  && REGNO (x) != FRAME_POINTER_REGNUM\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  && REGNO (x) != ARG_POINTER_REGNUM\n+#endif\n+\t  && REGNO (x) != STACK_POINTER_REGNUM)\n \treturn gen_rtx (REG, mode, REGNO (x) + word);\n       else\n \treturn gen_rtx (SUBREG, mode, x, word);\n@@ -860,7 +873,14 @@ operand_subword (op, i, validate_address, mode)\n \treturn 0;\n       else if (REGNO (op) >= FIRST_PSEUDO_REGISTER\n \t       || (REG_FUNCTION_VALUE_P (op)\n-\t\t   && rtx_equal_function_value_matters))\n+\t\t   && rtx_equal_function_value_matters)\n+\t       /* We want to keep the stack, frame, and arg pointers\n+\t\t  special.  */\n+\t       || REGNO (op) == FRAME_POINTER_REGNUM\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t       || REGNO (op) == ARG_POINTER_REGNUM\n+#endif\n+\t       || REGNO (op) == STACK_POINTER_REGNUM)\n \treturn gen_rtx (SUBREG, word_mode, op, i);\n       else\n \treturn gen_rtx (REG, word_mode, REGNO (op) + i);"}]}