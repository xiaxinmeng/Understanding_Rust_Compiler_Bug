{"sha": "74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmZTc5MGJmZDQzMWMyNWQ3N2JjYTFiYmU2ZGY2ZDVkNmViMWM4Mg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-02-26T19:32:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-02-26T19:32:37Z"}, "message": "md.texi (Machine Constraints): Refer to all files with paths relative to gcc directory (i.e.\n\n\t* doc/md.texi (Machine Constraints): Refer to all files with paths\n\trelative to gcc directory (i.e. config/CPU/file).  Add missing\n\t@table @code ... @end table to M32C subsection.\n\nFrom-SVN: r111457", "tree": {"sha": "b8b0725ea4ddeb4affe5dbc5559f5dbd04179da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b0725ea4ddeb4affe5dbc5559f5dbd04179da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82/comments", "author": null, "committer": null, "parents": [{"sha": "1e41a98ca56a9641f356d6f4233b3237fe518b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e41a98ca56a9641f356d6f4233b3237fe518b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e41a98ca56a9641f356d6f4233b3237fe518b04"}], "stats": {"total": 138, "additions": 72, "deletions": 66}, "files": [{"sha": "38e3c59600a865fc833fbb19c5c8cfdaa14b661a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 46, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "patch": "@@ -1,3 +1,9 @@\n+2006-02-26  Zack Weinberg  <zackw@panix.com>\n+\n+\t* doc/md.texi (Machine Constraints): Refer to all files with paths\n+\trelative to gcc directory (i.e. config/CPU/file).  Add missing\n+\t@table @code ... @end table to M32C subsection.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & 1) ^ 1 as\n@@ -56,7 +62,7 @@\n 2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/tm.texi (Run-time Target): Document C_COMMON_OVERRIDE_OPTIONS.\n-\t* doc/invoke.texi (C++ Dialect Options): Document \n+\t* doc/invoke.texi (C++ Dialect Options): Document\n \t-fno-use-cxa-get-exception-ptr.\n \t* configure.ac: Define DEFAULT_USE_CXA_ATEXIT to 2 not 1.\n \t* configure: Regenerate.\n@@ -85,7 +91,7 @@\n \tand NE_EXPR) from the ordering operators (LT_EXPR, GT_EXPR,\n \tLE_EXPR and GE_EXPR), calling fold_comparison to perform the\n \ttransformations common to both.\n-\t(fold_div_compare): Fix latent bugs in the previously unreachable \n+\t(fold_div_compare): Fix latent bugs in the previously unreachable\n \tLT_EXPR and GE_EXPR cases.\n \n 2006-02-24  David Edelsohn  <edelsohn@gnu.org>\n@@ -139,7 +145,7 @@\n \t* emit-rtl.c (immed_double_const): Cleanup.\n \n 2006-02-23  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/26376\n \t* tree-ssa-structalias.c (find_func_aliases):  Use get_id_for_tree,\n \tremove assert.\n@@ -289,11 +295,11 @@\n \tof loops surrounding the references from the callers, and initialize\n \tDDR_SIZE_VECT to nb_loops.  Use both base_addr_differ_p and\n \tbase_object_differ_p analyzers.\n-\t(analyze_ziv_subscript, analyze_siv_subscript_cst_affine, \n+\t(analyze_ziv_subscript, analyze_siv_subscript_cst_affine,\n \tcompute_overlap_steps_for_affine_1_2,\n \tanalyze_subscript_affine_affine): Count the classified dependences.\n \tPrint a message when a test failed.\n-\t(can_use_analyze_subscript_affine_affine): New.\t\n+\t(can_use_analyze_subscript_affine_affine): New.\n \t(analyze_siv_subscript): Compute the data dependences on symbolic\n \tscevs that verify can_use_analyze_subscript_affine_affine.\n \t(chrec_steps_divide_constant_p): Returns true, false, or unknown.\n@@ -302,32 +308,32 @@\n \t(analyze_overlapping_iterations): Let symbolic affine scevs to be\n \tanalyzed.\n \t(subscript_dependence_tester): Moved...\n-\t(build_classic_dist_vector, build_classic_dir_vector): Don't use \n+\t(build_classic_dist_vector, build_classic_dir_vector): Don't use\n \tlambda_vector_clear on newly allocated vectors.  Get nb_loops from\n \tDDR_SIZE_VECT instead of getting it in parameter.\n-\t(subscript_dependence_tester): ... here.  Take as a parameter \n+\t(subscript_dependence_tester): ... here.  Take as a parameter\n \tloop_nest_depth.  Call build_classic_dist_vector and\n \tbuild_classic_dir_vector.\n-\t(compute_affine_dependence): Update subscript_dependence_tester \n-\tparameters.  Update datadep_stats counters.  Call \n+\t(compute_affine_dependence): Update subscript_dependence_tester\n+\tparameters.  Update datadep_stats counters.  Call\n \tcompute_subscript_distance.\n-\t(compute_self_dependence): Save the dist and dir vectors.  Call \n+\t(compute_self_dependence): Save the dist and dir vectors.  Call\n \tcompute_subscript_distance.\n \t(ddr_p, DEF_VEC_P(ddr_p), DEF_VEC_ALLOC_P(ddr_p,heap)): Moved...\n \t(compute_all_dependences): Reorder parameters as they were before\n \tconversion to VEC.  Pass nb_loops and loop_nest_depth.  Don't call\n-\tcompute_subscript_distance.  Update the use of \n+\tcompute_subscript_distance.  Update the use of\n \tcompute_affine_dependence and initialize_data_dependence_relation.\n \t(find_data_references_in_loop): Handle COMPONENT_REF.\n \t(compute_data_dependences_for_loop): Initialize dependence_stats.\n \tDon't call build_classic_dist_vector and build_classic_dir_vector.\n-\tUpdate the parameters of initialize_data_dependence_relation and \n+\tUpdate the parameters of initialize_data_dependence_relation and\n \tcompute_all_dependences.  Print the statistics from datadep_stats.\n \t(analyze_all_data_dependences): Static.  Not used until the pass for\n \tchecking the data dependences is contributed.\n \t* tree-data-ref.h (ddr_p, DEF_VEC_P(ddr_p),\n \tDEF_VEC_ALLOC_P(ddr_p,heap)): ... here.\n-\t(initialize_data_dependence_relation, compute_affine_dependence, \n+\t(initialize_data_dependence_relation, compute_affine_dependence,\n \tanalyze_all_data_dependences, compute_subscript_distance): Removed.\n \t(print_direction_vector): New.\n \t* lambda.h (gcd): ... here.\n@@ -376,9 +382,9 @@\n \t* tree-pass.h (PROP_tmt_usage): New property.\n \t(TODO_update_tmt_usage): New todo.\n \t* tree-ssa-alias.c (updating_used_alone): New variable.\n-\t(recalculate_used_alone): New function.\t  \n+\t(recalculate_used_alone): New function.\n \t(compute_may_aliases): Set updating_used_alone, call\n-\trecalculate_used_alone. \n+\trecalculate_used_alone.\n \t* tree-sra.c (pass_sra): Note that this pass destroys\n \tPROP_tmt_usage, and add TODO_update_tmt_usage.\n \t* tree-ssa-forwprop.c (pass_forwprop): Ditto.\n@@ -389,7 +395,7 @@\n \t* tree-ssa-operands.c (add_virtual_operand): Only append bare def\n \tfor clobber if used alone, and add assert to verify used_alone\n \tstatus.\n-\t\n+\n 2006-02-20  Angel Nunez Mencias  <anunez@de.ibm.com>\n \n \t* config/s390/s390.c (legitimize_pic_address): Assertions checking\n@@ -411,7 +417,7 @@\n \tthat were configured.  For all the other variables except\n \tlang_specs_files, include all the languages in the tree.\n \t* configure: Regenerate.\n-\t\n+\n \t* Makefile.in (stmp-fixinc): Copy includes from the prev-gcc directory,\n \tif there is one.  Run the commands to run fixincludes in the same\n \tsubshell.\n@@ -729,15 +735,15 @@\n \tPR middle-end/25600\n \t* fold-const.c (fold_binary): Fold (X >> C) != 0 into X < 0 when\n \tC is one less than the width of X (and related transformations).\n-\t* simplify_rtx.c (simplify_unary_operation_1): Transform \n+\t* simplify_rtx.c (simplify_unary_operation_1): Transform\n \t(neg (lt x 0)) into either (ashiftrt X C) or (lshiftrt X C)\n \tdepending on STORE_FLAG_VALUE, were C is one less then the\n \twidth of X.\n \n 2006-02-17  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/26341\n-\t* tree-ssa-operands.c (add_virtual_operand): Remove assert \n+\t* tree-ssa-operands.c (add_virtual_operand): Remove assert\n \tabout NAME_MEMORY_TAG's.\n \n 2006-02-17  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n@@ -749,7 +755,7 @@\n \tgeneral and floating-point registers to the 32-bit pattern.\n \t* pa.c (pa_secondary_reload): Don't abort if reload tries to find a\n \tsecondary reload to load a QI or HI mode constant into a floating\n-\tpoint register. \n+\tpoint register.\n \t* pa32-regs.h (VALID_FP_MODE_P): Allow QImode and HImode.\n \t* pa64-regs.h (VALID_FP_MODE_P): Likewise.\n \n@@ -798,7 +804,7 @@\n \tPR rtl-optimization/25603\n \t* reload.c (reg_inc_found_and_valid_p): New. Check REG_INC note.\n \t(regno_clobbered_p): Use it. Reusing SETS argument for REG_INC case.\n-\t* reload1.c (choose_reload_regs): Added call of regno_clobbered_p \n+\t* reload1.c (choose_reload_regs): Added call of regno_clobbered_p\n \twith new meaning of SETS.\n \n 2006-02-16  Joseph S. Myers  <joseph@codesourcery.com>\n@@ -886,7 +892,7 @@\n \t(add_virtual_operand): Here.  Add offset, size, and for_clobber\n \targuments.  Prune alias sets.\n \t(add_call_clobber_ops): Call add_virtual_operand.\n-\t\n+\n 2006-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/26300\n@@ -998,7 +1004,7 @@\n \t* params.def (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE): Ditto.\n \t* tree-ssa-structalias.c (create_variable_info_for): Use\n \tMAX_FIELDS_FOR_FIELD_SENSITIVE.\n-\t\n+\n 2006-02-14  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* doc/invoke.texi (-fprefetch-loop-arrays, -fprefetch-loop-arrays-rtl):\n@@ -1131,7 +1137,7 @@\n 2006-02-12  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* doc/invoke.texi (-Write-strings): Document that it is enabled by\n-\tdefault. \n+\tdefault.\n \t* c.opt (-Wwrite-strings): Declare variable warn_write_strings.\n \tClarify documentation.\n \t* c-common.h (warn_write_strings): Remove.\n@@ -1289,13 +1295,13 @@\n 2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/26134\n-\t* fold-const.c (fold_indirect_ref_1): Fold \n+\t* fold-const.c (fold_indirect_ref_1): Fold\n \t\"*(foo *)&complexfoo\" to \"__real__ complexfoo\"\n \tand \"((foo*)&complexfoo)[1]\" to \"__imag__ complexfoo\".\n \n 2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* tree-flow-inline.h (var_can_have_subvars): \n+\t* tree-flow-inline.h (var_can_have_subvars):\n \tVolatile variables should not have subvariables.\n \n 2006-02-09  Diego Novillo  <dnovillo@redhat.com>\n@@ -1324,7 +1330,7 @@\n \tDo return slot optimization if we have an INIT_EXPR.\n \n \tPR tree-opt/24365\n-\t* tree-inline.c (declare_return_variable): Also clear \n+\t* tree-inline.c (declare_return_variable): Also clear\n \tDECL_COMPLEX_GIMPLE_REG_P as needed in the modify_dest case.\n \n \tPR c++/16405\n@@ -1579,7 +1585,7 @@\n \n 2006-02-07  Pete Steinmetz  <steinmtz@us.ibm.com>\n \n-        * sched-rgn.c (compute_dom_prob_ps, compute_trg_info): Eradicate\n+\t* sched-rgn.c (compute_dom_prob_ps, compute_trg_info): Eradicate\n \tuse of float in probability computations.  Use edge probabilities\n \tin place of statically computed probabilities.\n \t(min_spec_prob): New static variable.\n@@ -1785,7 +1791,7 @@\n \t(insert_aux): Move AGGREGATE_TYPE_P check here.\n \t(compute_avail): Set bb local stmt uids.\n \t(pass_pre): Use TODO_update_ssa_only_virtuals.\n-\t\n+\n 2006-02-06  Ben Elliston  <bje@au.ibm.com>\n \n \t* configure.ac: Unconditionally disable decimal float by default.\n@@ -1931,7 +1937,7 @@\n \t* config/s390/2084.md (\"x_fsimptf\", \"x_fmultf\", \"x_fdivtf\",\n \t\"x_floadtf\", \"x_ftrunctf\", \"x_ftruncdf\"): New insn reservations.\n \t* config/s390/fixdfdi.h (__fixunstfdi, __fixtfdi): New functions.\n-\t* config/s390/s390.c (struct processor_costs): Add mxbr, sqxbr, dxbr \n+\t* config/s390/s390.c (struct processor_costs): Add mxbr, sqxbr, dxbr\n \tand dxr fields.\n \t(z900_cost, z990_cost, z9_109_cost): Values for the new fields added.\n \t(s390_rtx_costs): Use the new fields to calculate rtx costs.\n@@ -1943,41 +1949,41 @@\n \tbuiltin define.\n \t(LONG_DOUBLE_TYPE_SIZE): Set to 128 or 64.\n \t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE, WIDEST_HARDWARE_FP_SIZE): Define.\n-\t(HARD_REGNO_NREGS, HARD_REGNO_MODE_OK, CLASS_MAX_NREGS, \n+\t(HARD_REGNO_NREGS, HARD_REGNO_MODE_OK, CLASS_MAX_NREGS,\n \tCANNOT_CHANGE_MODE_CLASS): Consider TFmode.\n-\t* config/s390/s390.md (\"type\" attribute): Add fsimptf, floadtf, fmultf, \n+\t* config/s390/s390.md (\"type\" attribute): Add fsimptf, floadtf, fmultf,\n \tfdivtf, fsqrttf, ftrunctf, ftruncdf as possible values.\n \t(FPR mode macro): Add TFmode.\n \t(DSF mode macro): New.\n \t(<de>, <dee> mode attributes): Removed.\n \t(<xde>, <xdee>, <RRe>, <RXe>, <Rf> mode attributes): New.\n-\t(\"*cmp<mode>_ccs_0\", \"*cmp<mode>_ccs_0_ibm\", \"*cmp<mode>_ccs\", \n-\t\"*cmp<mode>_ccs_ibm\", \"fix_trunc<FPR:mode><GPR:mode>2_ieee\", \n-\t\"floatdi<mode>2\", \"floatsi<mode>2_ieee\", \"*add<mode>3\", \n-\t\"*add<mode>3_cc\", \"*add<mode>3_cconly\", \"*add<mode>3_ibm\", \n-\t\"*sub<mode>3\", \"*sub<mode>3_cc\", \"*sub<mode>3_cconly\", \n+\t(\"*cmp<mode>_ccs_0\", \"*cmp<mode>_ccs_0_ibm\", \"*cmp<mode>_ccs\",\n+\t\"*cmp<mode>_ccs_ibm\", \"fix_trunc<FPR:mode><GPR:mode>2_ieee\",\n+\t\"floatdi<mode>2\", \"floatsi<mode>2_ieee\", \"*add<mode>3\",\n+\t\"*add<mode>3_cc\", \"*add<mode>3_cconly\", \"*add<mode>3_ibm\",\n+\t\"*sub<mode>3\", \"*sub<mode>3_cc\", \"*sub<mode>3_cconly\",\n \t\"*sub<mode>3_ibm\", \"*mul<mode>3_ibm\", \"*fmadd<mode>\", \"*fmsub<mode>\",\n-\t\"*div<mode>3\", \"*div<mode>3_ibm\", \"*neg<mode>2_cc\", \n-\t\"*neg<mode>2_cconly\", \"*neg<mode>2\", \"*neg<mode>2_ibm\", \n+\t\"*div<mode>3\", \"*div<mode>3_ibm\", \"*neg<mode>2_cc\",\n+\t\"*neg<mode>2_cconly\", \"*neg<mode>2\", \"*neg<mode>2_ibm\",\n \t\"*abs<mode>2_cc\", \"*abs<mode>2_cconly\", \"*abs<mode>2\",\n-\t\"*abs<mode>2_ibm\", \"*negabs<mode>2_cc\", \"*negabs<mode>2_cconly\", \n+\t\"*abs<mode>2_ibm\", \"*negabs<mode>2_cc\", \"*negabs<mode>2_cconly\",\n \t\"*negabs<mode>2\", \"sqrt<mode>2\"):\n \tChanged <de> to <xde>. R constraint replaced by <Rf>.\n-\t(\"*mul<mode>3\"): Changed <dee> to <xdee>. R constraint replaced by \n+\t(\"*mul<mode>3\"): Changed <dee> to <xdee>. R constraint replaced by\n \t<Rf>.\n \t(\"fix_trunc<FPR:mode>di2\"): 'FPR:' removed.\n-        (\"*fmadd<mode>\", \"*fmsub<mode>\"): FPR mode replaced by DSF.\n-\t(\"*movtf_64\", \"*movtf_31\"): New insn definitions followed by 5 \n+\t(\"*fmadd<mode>\", \"*fmsub<mode>\"): FPR mode replaced by DSF.\n+\t(\"*movtf_64\", \"*movtf_31\"): New insn definitions followed by 5\n \tsplitters.\n-\t(\"movtf\", \"reload_outtf\", \"reload_intf\", \"trunctfdf2\", \"trunctfsf2\", \n+\t(\"movtf\", \"reload_outtf\", \"reload_intf\", \"trunctfdf2\", \"trunctfsf2\",\n \t\"extenddftf2\", \"extendsftf2\"): New expanders.\n-\t(\"*trunctfdf2_ieee\", \"*trunctfdf2_ibm\", \"*trunctfsf2_ieee\", \n+\t(\"*trunctfdf2_ieee\", \"*trunctfdf2_ibm\", \"*trunctfsf2_ieee\",\n \t\"*trunctfsf2_ibm\", \"*extenddftf2_ieee\", \"*extenddftf2_ibm\",\n \t\"*extendsftf2_ieee\", \"*extendsftf2_ibm\"): New insn patterns.\n \t* config/s390/s390.opt (mlong-double-128, mlong-double-64):\n \tNew options.\n \t* config/s390/t-crtstuff (TARGET_LIBGCC2_CFLAGS): Macro defined.\n-\t* config/s390/libgcc-glibc.ver (__divtc3, __multc3, __powitf2, \n+\t* config/s390/libgcc-glibc.ver (__divtc3, __multc3, __powitf2,\n \t__fixtfti, __fixunstfti, __floattitf, __fixtfdi, __fixunstfdi,\n \t__floatditf): Add a GCC_4.1.0 symbol version tag.\n \t* doc/invoke.texi (-mlong-double-128, -mlong-double-64): Document"}, {"sha": "462509d049ba951d4063af0efe0dd8ce4cb78706", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "patch": "@@ -1654,7 +1654,7 @@ However, here is a summary of the machine-dependent constraints\n available on some particular machines.\n \n @table @emph\n-@item ARM family---@file{arm.h}\n+@item ARM family---@file{config/arm/arm.h}\n @table @code\n @item f\n Floating-point register\n@@ -1707,7 +1707,7 @@ A memory reference suitable for iWMMXt load/store instructions.\n A memory reference suitable for the ARMv4 ldrsb instruction.\n @end table\n \n-@item AVR family---@file{avr.h}\n+@item AVR family---@file{config/avr/avr.h}\n @table @code\n @item l\n Registers from r0 to r15\n@@ -1770,7 +1770,7 @@ Constant integer 1\n A floating point constant 0.0\n @end table\n \n-@item CRX Architecture---@file{crx.h}\n+@item CRX Architecture---@file{config/crx/crx.h}\n @table @code\n \n @item b\n@@ -1801,7 +1801,7 @@ Constant that is one of -1, 4, -4, 7, 8, 12, 16, 20, 32, 48\n Floating point constant that is legal for store immediate\n @end table\n \n-@item PowerPC and IBM RS6000---@file{rs6000.h}\n+@item PowerPC and IBM RS6000---@file{config/rs6000/rs6000.h}\n @table @code\n @item b\n Address base register\n@@ -1879,7 +1879,7 @@ Constant suitable as a 32-bit mask operand\n System V Release 4 small data area reference\n @end table\n \n-@item MorphoTech family---@file{mt.h}\n+@item MorphoTech family---@file{config/mt/mt.h}\n @table @code\n @item I\n Constant for an arithmetic insn (16-bit signed integer).\n@@ -1908,7 +1908,7 @@ A 15-bit signed integer constant.\n A positive 16-bit constant.\n @end table\n \n-@item Intel 386---@file{i386.h}\n+@item Intel 386---@file{config/i386/i386.h}\n @table @code\n @item q\n @samp{a}, @code{b}, @code{c}, or @code{d} register for the i386.\n@@ -1997,7 +1997,7 @@ Constant in range @minus{}2147483648 to 2147483647 or symbolic reference known t\n Standard 80387 floating point constant\n @end table\n \n-@item Intel IA-64---@file{ia64.h}\n+@item Intel IA-64---@file{config/ia64/ia64.h}\n @table @code\n @item a\n General register @code{r0} to @code{r3} for @code{addl} instruction\n@@ -2060,7 +2060,7 @@ Integer constant in the range 1 to 4 for @code{shladd} instruction\n Memory operand except postincrement and postdecrement\n @end table\n \n-@item FRV---@file{frv.h}\n+@item FRV---@file{config/frv/frv.h}\n @table @code\n @item a\n Register in the class @code{ACC_REGS} (@code{acc0} to @code{acc7}).\n@@ -2153,7 +2153,7 @@ range of 1 to 2047.\n \n @end table\n \n-@item Blackfin family---@file{bfin.h}\n+@item Blackfin family---@file{config/bfin/bfin.h}\n @table @code\n @item a\n P register\n@@ -2249,8 +2249,8 @@ An integer constant with all bits set except exactly one.\n Any SYMBOL_REF.\n @end table\n \n-@item M32C---@file{m32c.c}\n-\n+@item M32C---@file{config/m32c/m32c.c}\n+@table @code\n @item Rsp\n @itemx Rfb\n @itemx Rsb\n@@ -2376,9 +2376,9 @@ Memory addressed using the small base register ($sb).\n \n @item S1\n $r1h\n+@end table\n \n-\n-@item MIPS---@file{mips.h}\n+@item MIPS---@file{config/mips/mips.h}\n @table @code\n @item d\n General-purpose integer register\n@@ -2442,7 +2442,7 @@ Memory reference in external OSF/rose PIC format\n (@samp{m} is preferable for @code{asm} statements)\n @end table\n \n-@item Motorola 680x0---@file{m68k.h}\n+@item Motorola 680x0---@file{config/m68k/m68k.h}\n @table @code\n @item a\n Address register\n@@ -2472,7 +2472,7 @@ Signed number whose magnitude is greater than 0x100\n Floating point constant that is not a 68881 constant\n @end table\n \n-@item Motorola 68HC11 & 68HC12 families---@file{m68hc11.h}\n+@item Motorola 68HC11 & 68HC12 families---@file{config/m68hc11/m68hc11.h}\n @table @code\n @item a\n Register `a'\n@@ -2531,7 +2531,7 @@ Constants in the range @minus{}8 to 2\n @end table\n \n @need 1000\n-@item SPARC---@file{sparc.h}\n+@item SPARC---@file{config/sparc/sparc.h}\n @table @code\n @item f\n Floating-point register on the SPARC-V8 architecture and\n@@ -2615,7 +2615,7 @@ Vector zero\n \n @end table\n \n-@item TMS320C3x/C4x---@file{c4x.h}\n+@item TMS320C3x/C4x---@file{config/c4x/c4x.h}\n @table @code\n @item a\n Auxiliary (address) register (ar0-ar7)\n@@ -2697,7 +2697,7 @@ Symbolic address\n \n @end table\n \n-@item S/390 and zSeries---@file{s390.h}\n+@item S/390 and zSeries---@file{config/s390/s390.h}\n @table @code\n @item a\n Address register (general purpose register except r0)\n@@ -2770,7 +2770,7 @@ Shift count operand.\n \n @end table\n \n-@item Xstormy16---@file{stormy16.h}\n+@item Xstormy16---@file{config/stormy16/stormy16.h}\n @table @code\n @item a\n Register r0.\n@@ -2840,7 +2840,7 @@ The constant 0.\n \n @end table\n \n-@item Xtensa---@file{xtensa.h}\n+@item Xtensa---@file{config/xtensa/xtensa.h}\n @table @code\n @item a\n General-purpose 32-bit register"}]}