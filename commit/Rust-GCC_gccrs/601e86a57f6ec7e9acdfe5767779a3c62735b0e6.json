{"sha": "601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxZTg2YTU3ZjZlYzdlOWFjZGZlNTc2Nzc3OWEzYzYyNzM1YjBlNg==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2018-08-06T09:07:57Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2018-08-06T09:07:57Z"}, "message": "Add CLOBBER_HIGH expression\n\nIncludes documentation.\n\n2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n\n\t* doc/rtl.texi (clobber_high): Add.\n\t(parallel): Add in clobber high\n\t* rtl.c (rtl_check_failed_code3): Add function.\n\t* rtl.def (CLOBBER_HIGH): Add expression.\n\t* rtl.h (RTL_CHECKC3): Add macro.\n\t(rtl_check_failed_code3): Add declaration.\n\t(XC3EXP): Add macro.\n\nFrom-SVN: r263326", "tree": {"sha": "4b7c46858f06d0eca3f66da9b402027d4f825a9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b7c46858f06d0eca3f66da9b402027d4f825a9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e9f49e4560d19812307d6f50bee4d418c42dfe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9f49e4560d19812307d6f50bee4d418c42dfe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9f49e4560d19812307d6f50bee4d418c42dfe0"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "f8834d9f4328a2dfa6710a3fd3a085d4f6a34525", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "patch": "@@ -1,3 +1,12 @@\n+2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n+\t* doc/rtl.texi (clobber_high): Add.\n+\t(parallel): Add in clobber high\n+\t* rtl.c (rtl_check_failed_code3): Add function.\n+\t* rtl.def (CLOBBER_HIGH): Add expression.\n+\t* rtl.h (RTL_CHECKC3): Add macro.\n+\t(rtl_check_failed_code3): Add declaration.\n+\t(XC3EXP): Add macro.\n+\n 2018-08-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/86386"}, {"sha": "20c57732679f074c7b7a6a5e98715e27a864eba3", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "patch": "@@ -3296,6 +3296,18 @@ There is one other known use for clobbering a pseudo register in a\n clobbered by the insn.  In this case, using the same pseudo register in\n the clobber and elsewhere in the insn produces the expected results.\n \n+@findex clobber_high\n+@item (clobber_high @var{x})\n+Represents the storing or possible storing of an unpredictable,\n+undescribed value into the upper parts of @var{x}. The mode of the expression\n+represents the lower parts of the register which will not be overwritten.\n+@code{reg} must be a reg expression.\n+\n+One place this is used is when calling into functions where the registers are\n+preserved, but only up to a given number of bits.  For example when using\n+Aarch64 SVE, calling a TLS descriptor will cause only the lower 128 bits of\n+each of the vector registers to be preserved.\n+\n @findex use\n @item (use @var{x})\n Represents the use of the value of @var{x}.  It indicates that the\n@@ -3349,7 +3361,8 @@ Represents several side effects performed in parallel.  The square\n brackets stand for a vector; the operand of @code{parallel} is a\n vector of expressions.  @var{x0}, @var{x1} and so on are individual\n side effect expressions---expressions of code @code{set}, @code{call},\n-@code{return}, @code{simple_return}, @code{clobber} or @code{use}.\n+@code{return}, @code{simple_return}, @code{clobber} @code{use} or\n+@code{clobber_high}.\n \n ``In parallel'' means that first all the values used in the individual\n side-effects are computed, and second all the actual side-effects are"}, {"sha": "985db1c14f040c286d299be7225e827c2ec3dce6", "filename": "gcc/rtl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "patch": "@@ -856,6 +856,17 @@ rtl_check_failed_code2 (const_rtx r, enum rtx_code code1, enum rtx_code code2,\n      func, trim_filename (file), line);\n }\n \n+void\n+rtl_check_failed_code3 (const_rtx r, enum rtx_code code1, enum rtx_code code2,\n+\t\t\tenum rtx_code code3, const char *file, int line,\n+\t\t\tconst char *func)\n+{\n+  internal_error\n+    (\"RTL check: expected code '%s', '%s' or '%s', have '%s' in %s, at %s:%d\",\n+     GET_RTX_NAME (code1), GET_RTX_NAME (code2), GET_RTX_NAME (code3),\n+     GET_RTX_NAME (GET_CODE (r)), func, trim_filename (file), line);\n+}\n+\n void\n rtl_check_failed_code_mode (const_rtx r, enum rtx_code code, machine_mode mode,\n \t\t\t    bool not_mode, const char *file, int line,"}, {"sha": "0ed27505545037d64756cd36047307ec4b314395", "filename": "gcc/rtl.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "patch": "@@ -312,6 +312,16 @@ DEF_RTL_EXPR(USE, \"use\", \"e\", RTX_EXTRA)\n    is considered undeletable before reload.  */\n DEF_RTL_EXPR(CLOBBER, \"clobber\", \"e\", RTX_EXTRA)\n \n+/* Indicate that the upper parts of something are clobbered in a way that we\n+   don't want to explain.  The MODE references the lower bits that will be\n+   preserved.  Anything above that size will be clobbered.\n+\n+   CLOBBER_HIGH only occurs as the operand of a PARALLEL rtx.  It cannot appear\n+   in other contexts, and unlike CLOBBER, it cannot appear on its own.\n+   CLOBBER_HIGH can only be used with fixed register rtxes.  */\n+\n+DEF_RTL_EXPR(CLOBBER_HIGH, \"clobber_high\", \"e\", RTX_EXTRA)\n+\n /* Call a subroutine.\n    Operand 1 is the address to call.\n    Operand 2 is the number of arguments.  */"}, {"sha": "5e07e9bee80ff4ba18a775f8137a14e7c0e99363", "filename": "gcc/rtl.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601e86a57f6ec7e9acdfe5767779a3c62735b0e6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=601e86a57f6ec7e9acdfe5767779a3c62735b0e6", "patch": "@@ -1100,6 +1100,14 @@ is_a_helper <rtx_note *>::test (rtx_insn *insn)\n \t\t\t       __FUNCTION__); \\\n      &_rtx->u.fld[_n]; }))\n \n+#define RTL_CHECKC3(RTX, N, C1, C2, C3) __extension__\t\t\t\\\n+(*({ __typeof (RTX) const _rtx = (RTX); const int _n = (N);\t\t\\\n+     const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n+     if (_code != (C1) && _code != (C2) && _code != (C3))\t\t\\\n+       rtl_check_failed_code3 (_rtx, (C1), (C2), (C3), __FILE__,\t\\\n+\t\t\t       __LINE__, __FUNCTION__);\t\t\t\\\n+     &_rtx->u.fld[_n]; }))\n+\n #define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n (*({ __typeof (RTVEC) const _rtvec = (RTVEC); const int _i = (I);\t\\\n      if (_i < 0 || _i >= GET_NUM_ELEM (_rtvec))\t\t\t\t\\\n@@ -1190,6 +1198,10 @@ extern void rtl_check_failed_code1 (const_rtx, enum rtx_code, const char *,\n extern void rtl_check_failed_code2 (const_rtx, enum rtx_code, enum rtx_code,\n \t\t\t\t    const char *, int, const char *)\n     ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n+extern void rtl_check_failed_code3 (const_rtx, enum rtx_code, enum rtx_code,\n+\t\t\t\t    enum rtx_code, const char *, int,\n+\t\t\t\t    const char *)\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_code_mode (const_rtx, enum rtx_code, machine_mode,\n \t\t\t\t\tbool, const char *, int, const char *)\n     ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n@@ -1208,6 +1220,7 @@ extern void rtvec_check_failed_bounds (const_rtvec, int, const char *, int,\n #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])\n #define RTL_CHECKC1(RTX, N, C)\t    ((RTX)->u.fld[N])\n #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])\n+#define RTL_CHECKC3(RTX, N, C1, C2, C3) ((RTX)->u.fld[N])\n #define RTVEC_ELT(RTVEC, I)\t    ((RTVEC)->elem[I])\n #define XWINT(RTX, N)\t\t    ((RTX)->u.hwint[N])\n #define CWI_ELT(RTX, I)\t\t    ((RTX)->u.hwiv.elem[I])\n@@ -1362,6 +1375,7 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n #define XCVECLEN(RTX, N, C)\tGET_NUM_ELEM (XCVEC (RTX, N, C))\n \n #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)\n+#define XC3EXP(RTX, N, C1, C2, C3)  (RTL_CHECKC3 (RTX, N, C1, C2, C3).rt_rtx)\n \f\n \n /* Methods of rtx_expr_list.  */\n@@ -2632,7 +2646,7 @@ do {\t\t\t\t\t\t\t\t        \\\n \n /* For a SET rtx, SET_DEST is the place that is set\n    and SET_SRC is the value it is set to.  */\n-#define SET_DEST(RTX) XC2EXP (RTX, 0, SET, CLOBBER)\n+#define SET_DEST(RTX) XC3EXP (RTX, 0, SET, CLOBBER, CLOBBER_HIGH)\n #define SET_SRC(RTX) XCEXP (RTX, 1, SET)\n #define SET_IS_RETURN_P(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1 (\"SET_IS_RETURN_P\", (RTX), SET)->jump)"}]}