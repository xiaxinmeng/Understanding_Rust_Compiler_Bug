{"sha": "86ba147f547e44230075efab78252c08bc8d8c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZiYTE0N2Y1NDdlNDQyMzAwNzVlZmFiNzgyNTJjMDhiYzhkOGMyZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-24T20:44:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-24T20:44:34Z"}, "message": "runtime: Copy runtime_printf from other Go library.\n\nFrom-SVN: r187848", "tree": {"sha": "6376f98a68555af3b62356fcc2d0f7b310afa452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6376f98a68555af3b62356fcc2d0f7b310afa452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ba147f547e44230075efab78252c08bc8d8c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ba147f547e44230075efab78252c08bc8d8c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ba147f547e44230075efab78252c08bc8d8c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ba147f547e44230075efab78252c08bc8d8c2e/comments", "author": null, "committer": null, "parents": [{"sha": "6fac31b418c9bbceaaab53ef8e4be166609bda4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fac31b418c9bbceaaab53ef8e4be166609bda4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fac31b418c9bbceaaab53ef8e4be166609bda4a"}], "stats": {"total": 291, "additions": 106, "deletions": 185}, "files": [{"sha": "1d761bca38106c59d262e6a3c5139edacffb7505", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -465,6 +465,7 @@ runtime_files = \\\n \truntime/mgc0.c \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n+\truntime/print.c \\\n \truntime/proc.c \\\n \truntime/runtime.c \\\n \truntime/signal_unix.c \\"}, {"sha": "af18b702531a2308e881a781fdc5e4db3fb8de95", "filename": "libgo/Makefile.in", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -209,7 +209,7 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/lock_futex.c runtime/thread-linux.c runtime/mcache.c \\\n \truntime/mcentral.c runtime/mem_posix_memalign.c runtime/mem.c \\\n \truntime/mfinal.c runtime/mfixalloc.c runtime/mgc0.c \\\n-\truntime/mheap.c runtime/msize.c runtime/proc.c \\\n+\truntime/mheap.c runtime/msize.c runtime/print.c runtime/proc.c \\\n \truntime/runtime.c runtime/signal_unix.c runtime/thread.c \\\n \truntime/yield.c runtime/rtems-task-variable-add.c iface.c \\\n \tmalloc.c map.c mprof.c reflect.c runtime1.c sema.c sigqueue.c \\\n@@ -242,9 +242,9 @@ am__objects_4 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-unsafe-newarray.lo go-unsafe-pointer.lo go-unwind.lo \\\n \tchan.lo cpuprof.lo $(am__objects_1) mcache.lo mcentral.lo \\\n \t$(am__objects_2) mfinal.lo mfixalloc.lo mgc0.lo mheap.lo \\\n-\tmsize.lo proc.lo runtime.lo signal_unix.lo thread.lo yield.lo \\\n-\t$(am__objects_3) iface.lo malloc.lo map.lo mprof.lo reflect.lo \\\n-\truntime1.lo sema.lo sigqueue.lo string.lo time.lo\n+\tmsize.lo print.lo proc.lo runtime.lo signal_unix.lo thread.lo \\\n+\tyield.lo $(am__objects_3) iface.lo malloc.lo map.lo mprof.lo \\\n+\treflect.lo runtime1.lo sema.lo sigqueue.lo string.lo time.lo\n am_libgo_la_OBJECTS = $(am__objects_4)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -882,6 +882,7 @@ runtime_files = \\\n \truntime/mgc0.c \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n+\truntime/print.c \\\n \truntime/proc.c \\\n \truntime/runtime.c \\\n \truntime/signal_unix.c \\\n@@ -2440,6 +2441,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mheap.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mprof.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/msize.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reflect.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rtems-task-variable-add.Plo@am__quote@\n@@ -3036,6 +3038,13 @@ msize.lo: runtime/msize.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o msize.lo `test -f 'runtime/msize.c' || echo '$(srcdir)/'`runtime/msize.c\n \n+print.lo: runtime/print.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT print.lo -MD -MP -MF $(DEPDIR)/print.Tpo -c -o print.lo `test -f 'runtime/print.c' || echo '$(srcdir)/'`runtime/print.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/print.Tpo $(DEPDIR)/print.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/print.c' object='print.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o print.lo `test -f 'runtime/print.c' || echo '$(srcdir)/'`runtime/print.c\n+\n proc.lo: runtime/proc.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT proc.lo -MD -MP -MF $(DEPDIR)/proc.Tpo -c -o proc.lo `test -f 'runtime/proc.c' || echo '$(srcdir)/'`runtime/proc.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/proc.Tpo $(DEPDIR)/proc.Plo"}, {"sha": "fbc711880320a501284b03b591a037b897a0b175", "filename": "libgo/merge.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmerge.sh?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -163,7 +163,7 @@ done\n   done\n done\n \n-runtime=\"chan.c cpuprof.c lock_futex.c lock_sema.c mcache.c mcentral.c mfinal.c mfixalloc.c mgc0.c mheap.c msize.c proc.c runtime.c runtime.h signal_unix.c malloc.h malloc.goc mprof.goc runtime1.goc sema.goc sigqueue.goc string.goc time.goc\"\n+runtime=\"chan.c cpuprof.c lock_futex.c lock_sema.c mcache.c mcentral.c mfinal.c mfixalloc.c mgc0.c mheap.c msize.c print.c proc.c runtime.c runtime.h signal_unix.c malloc.h malloc.goc mprof.goc runtime1.goc sema.goc sigqueue.goc string.goc time.goc\"\n for f in $runtime; do\n   merge_c $f $f\n done"}, {"sha": "c8ee10e8c8898c1ea58c573872bd6dd6bedfdc7f", "filename": "libgo/runtime/chan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fchan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fchan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -100,8 +100,8 @@ runtime_makechan_c(ChanType *t, int64 hint)\n \tc->dataqsiz = hint;\n \n \tif(debug)\n-\t\truntime_printf(\"makechan: chan=%p; elemsize=%lld; elemalign=%d; dataqsiz=%d\\n\",\n-\t\t\tc, (long long)elem->__size, elem->__align, c->dataqsiz);\n+\t\truntime_printf(\"makechan: chan=%p; elemsize=%D; elemalign=%d; dataqsiz=%d\\n\",\n+\t\t\tc, (int64)elem->__size, elem->__align, c->dataqsiz);\n \n \treturn c;\n }"}, {"sha": "a36f43a75e4b3191232fe0ff8efc3b2a0ca2ffbd", "filename": "libgo/runtime/go-assert.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-assert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-assert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-assert.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -7,12 +7,13 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n+#include \"runtime.h\"\n #include \"go-assert.h\"\n \n void\n __go_assert_fail (const char *file, unsigned int lineno)\n {\n   /* FIXME: Eventually we should dump a stack trace here.  */\n-  fprintf (stderr, \"%s:%u: libgo assertion failure\\n\", file, lineno);\n+  runtime_printf (\"%s:%U: libgo assertion failure\\n\", file, (uint64) lineno);\n   abort ();\n }"}, {"sha": "05325b1194f5910883f08ce5ac3de9beff0f88d1", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -24,13 +24,13 @@ __printpanics (struct __go_panic_stack *p)\n   if (p->__next != NULL)\n     {\n       __printpanics (p->__next);\n-      fprintf (stderr, \"\\t\");\n+      runtime_printf (\"\\t\");\n     }\n-  fprintf (stderr, \"panic: \");\n+  runtime_printf (\"panic: \");\n   runtime_printany (p->__arg);\n   if (p->__was_recovered)\n-    fprintf (stderr, \" [recovered]\");\n-  fputc ('\\n', stderr);\n+    runtime_printf (\" [recovered]\");\n+  runtime_printf (\"\\n\");\n }\n \n /* This implements __go_panic which is used for the panic"}, {"sha": "3fe879a48af6b889b44eab989cd57900aa6375d1", "filename": "libgo/runtime/go-print.c", "status": "modified", "additions": 5, "deletions": 138, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fgo-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-print.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -8,6 +8,7 @@\n #include <stdint.h>\n #include <stdio.h>\n \n+#include \"runtime.h\"\n #include \"array.h\"\n #include \"go-panic.h\"\n #include \"go-string.h\"\n@@ -16,155 +17,21 @@\n /* This implements the various little functions which are called by\n    the predeclared functions print/println/panic/panicln.  */\n \n-void\n-__go_print_space ()\n-{\n-  putc (' ', stderr);\n-}\n-\n-void\n-__go_print_nl ()\n-{\n-  putc ('\\n', stderr);\n-}\n-\n-void\n-__go_print_string (struct __go_string val)\n-{\n-  fprintf (stderr, \"%.*s\", (int) val.__length, (const char *) val.__data);\n-}\n-\n-void\n-__go_print_uint64 (uint64_t val)\n-{\n-  fprintf (stderr, \"%llu\", (unsigned long long) val);\n-}\n-\n-void\n-__go_print_int64 (int64_t val)\n-{\n-  fprintf (stderr, \"%lld\", (long long) val);\n-}\n-\n-void\n-__go_print_double (double v)\n-{\n-  char buf[20];\n-  int e, s, i, n;\n-  double h;\n-\n-  if (isnan (v))\n-    {\n-      fputs (\"NaN\", stderr);\n-      return;\n-    }\n-  if (__builtin_isinf (v))\n-    {\n-      putc (v < 0 ? '-' : '+', stderr);\n-      fputs (\"Inf\", stderr);\n-      return;\n-    }\n-\n-  /* The number of digits printed.  */\n-  n = 7;\n-  /* The exponent.  */\n-  e = 0;\n-  /* The sign.  */\n-  s = 0;\n-  if (v != 0)\n-    {\n-      if (v < 0)\n-\t{\n-\t  v = -v;\n-\t  s = 1;\n-\t}\n-\n-      /* Normalize.  */\n-      while (v >= 10)\n-\t{\n-\t  ++e;\n-\t  v /= 10;\n-\t}\n-      while (v < 1)\n-\t{\n-\t  --e;\n-\t  v *= 10;\n-\t}\n-\n-      /* Round.  */\n-      h = 5;\n-      for (i = 0; i < n; ++i)\n-\th /= 10;\n-\n-      v += h;\n-      if (v >= 10)\n-\t{\n-\t  ++e;\n-\t  v /= 10;\n-\t}\n-    }\n-\n-  /* The format is +d.dddd+edd.  */\n-  buf[0] = s ? '-' : '+';\n-  for (i = 0; i < n; ++i)\n-    {\n-      int d;\n-\n-      d = v;\n-      buf[i + 2] = d + '0';\n-      v -= d;\n-      v *= 10;\n-    }\n-  buf[1] = buf[2];\n-  buf[2] = '.';\n-\n-  buf[n + 2] = 'e';\n-  buf[n + 3] = e < 0 ? '-' : '+';\n-  if (e < 0)\n-    e = - e;\n-  buf[n + 4] = e / 100 + '0';\n-  buf[n + 5] = (e / 10) % 10 + '0';\n-  buf[n + 6] = e % 10 + '0';\n-  buf[n + 7] = '\\0';\n-  fputs (buf, stderr);\n-}\n-\n-void\n-__go_print_complex (__complex double val)\n-{\n-  putc ('(', stderr);\n-  __go_print_double (__builtin_creal (val));\n-  __go_print_double (__builtin_cimag (val));\n-  fputs (\"i)\", stderr);\n-}\n-\n-void\n-__go_print_bool (_Bool val)\n-{\n-  fputs (val ? \"true\" : \"false\", stderr);\n-}\n-\n-void\n-__go_print_pointer (void *val)\n-{\n-  fprintf (stderr, \"0x%lx\", (unsigned long) (uintptr_t) val);\n-}\n-\n void\n __go_print_empty_interface (struct __go_empty_interface e)\n {\n-  fprintf (stderr, \"(%p,%p)\", e.__type_descriptor, e.__object);\n+  runtime_printf (\"(%p,%p)\", e.__type_descriptor, e.__object);\n }\n \n void\n __go_print_interface (struct __go_interface i)\n {\n-  fprintf (stderr, \"(%p,%p)\", i.__methods, i.__object);\n+  runtime_printf (\"(%p,%p)\", i.__methods, i.__object);\n }\n \n void\n __go_print_slice (struct __go_open_array val)\n {\n-  fprintf (stderr, \"[%d/%d]\", val.__count, val.__capacity);\n-  __go_print_pointer (val.__values);\n+  runtime_printf (\"[%d/%d]\", val.__count, val.__capacity);\n+  runtime_printpointer (val.__values);\n }"}, {"sha": "1a40637c3dde13b4cfa2ebd32bc310585903105f", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -139,7 +139,7 @@ __go_free(void *v)\n \tm->mallocing = 1;\n \n \tif(!runtime_mlookup(v, nil, nil, &s)) {\n-\t\t// runtime_printf(\"free %p: not an allocated block\\n\", v);\n+\t\truntime_printf(\"free %p: not an allocated block\\n\", v);\n \t\truntime_throw(\"free runtime_mlookup\");\n \t}\n \tprof = runtime_blockspecial(v);\n@@ -367,7 +367,7 @@ runtime_mallocinit(void)\n \t\tif(p == nil)\n \t\t\truntime_throw(\"runtime: cannot reserve arena virtual address space\");\n \t\tif((uintptr)p & (((uintptr)1<<PageShift)-1))\n-\t\t\truntime_printf(\"runtime: SysReserve returned unaligned address %p; asked for %p\", p, (void*)(bitmap_size+arena_size));\n+\t\t\truntime_printf(\"runtime: SysReserve returned unaligned address %p; asked for %p\", p, bitmap_size+arena_size);\n \t}\n \tif((uintptr)p & (((uintptr)1<<PageShift)-1))\n \t\truntime_throw(\"runtime: SysReserve returned unaligned address\");\n@@ -467,15 +467,15 @@ func SetFinalizer(obj Eface, finalizer Eface) {\n \tconst FuncType *ft;\n \n \tif(obj.__type_descriptor == nil) {\n-\t\t// runtime\u00b7printf(\"runtime.SetFinalizer: first argument is nil interface\\n\");\n+\t\truntime_printf(\"runtime.SetFinalizer: first argument is nil interface\\n\");\n \t\tgoto throw;\n \t}\n \tif(obj.__type_descriptor->__code != GO_PTR) {\n-\t\t// runtime_printf(\"runtime.SetFinalizer: first argument is %S, not pointer\\n\", *obj.type->string);\n+\t\truntime_printf(\"runtime.SetFinalizer: first argument is %S, not pointer\\n\", *obj.__type_descriptor->__reflection);\n \t\tgoto throw;\n \t}\n \tif(!runtime_mlookup(obj.__object, &base, &size, nil) || obj.__object != base) {\n-\t\t// runtime_printf(\"runtime.SetFinalizer: pointer not at beginning of allocated block\\n\");\n+\t\truntime_printf(\"runtime.SetFinalizer: pointer not at beginning of allocated block\\n\");\n \t\tgoto throw;\n \t}\n \tft = nil;\n@@ -494,7 +494,7 @@ func SetFinalizer(obj Eface, finalizer Eface) {\n \treturn;\n \n badfunc:\n-\t// runtime_printf(\"runtime.SetFinalizer: second argument is %S, not func(%S)\\n\", *finalizer.type->string, *obj.type->string);\n+\truntime_printf(\"runtime.SetFinalizer: second argument is %S, not func(%S)\\n\", *finalizer.__type_descriptor->__reflection, *obj.__type_descriptor->__reflection);\n throw:\n \truntime_throw(\"runtime.SetFinalizer\");\n }"}, {"sha": "c84bdd67821448f6597b967b3e29e9bfe5a32743", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -159,7 +159,7 @@ scanblock(byte *b, int64 n)\n \tbool keepworking;\n \n \tif((int64)(uintptr)n != n || n < 0) {\n-\t\t// runtime_printf(\"scanblock %p %lld\\n\", b, (long long)n);\n+\t\truntime_printf(\"scanblock %p %D\\n\", b, n);\n \t\truntime_throw(\"scanblock\");\n \t}\n \n@@ -190,7 +190,7 @@ scanblock(byte *b, int64 n)\n \t\t// Each iteration scans the block b of length n, queueing pointers in\n \t\t// the work buffer.\n \t\tif(Debug > 1)\n-\t\t\truntime_printf(\"scanblock %p %lld\\n\", b, (long long) n);\n+\t\t\truntime_printf(\"scanblock %p %D\\n\", b, n);\n \n \t\tvp = (void**)b;\n \t\tn >>= (2+PtrSize/8);  /* n /= PtrSize (4 or 8) */\n@@ -346,7 +346,7 @@ debug_scanblock(byte *b, int64 n)\n \t\truntime_throw(\"debug_scanblock without DebugMark\");\n \n \tif((int64)(uintptr)n != n || n < 0) {\n-\t\t//runtime_printf(\"debug_scanblock %p %D\\n\", b, n);\n+\t\truntime_printf(\"debug_scanblock %p %D\\n\", b, n);\n \t\truntime_throw(\"debug_scanblock\");\n \t}\n \n@@ -1047,14 +1047,13 @@ runtime_gc(int32 force)\n \tmstats.pause_total_ns += t3 - t0;\n \tmstats.numgc++;\n \tif(mstats.debuggc)\n-\t\truntime_printf(\"pause %llu\\n\", (unsigned long long)t3-t0);\n+\t\truntime_printf(\"pause %D\\n\", t3-t0);\n \n \tif(gctrace) {\n-\t\truntime_printf(\"gc%d(%d): %llu+%llu+%llu ms %llu -> %llu MB %llu -> %llu (%llu-%llu) objects %llu handoff\\n\",\n-\t\t\tmstats.numgc, work.nproc, (unsigned long long)(t1-t0)/1000000, (unsigned long long)(t2-t1)/1000000, (unsigned long long)(t3-t2)/1000000,\n-\t\t\t(unsigned long long)heap0>>20, (unsigned long long)heap1>>20, (unsigned long long)obj0, (unsigned long long)obj1,\n-\t\t\t(unsigned long long) mstats.nmalloc, (unsigned long long)mstats.nfree,\n-\t\t\t(unsigned long long) nhandoff);\n+\t\truntime_printf(\"gc%d(%d): %D+%D+%D ms, %D -> %D MB %D -> %D (%D-%D) objects\\n\",\n+\t\t\tmstats.numgc, work.nproc, (t1-t0)/1000000, (t2-t1)/1000000, (t3-t2)/1000000,\n+\t\t\theap0>>20, heap1>>20, obj0, obj1,\n+\t\t\tmstats.nmalloc, mstats.nfree);\n \t}\n \t\n \truntime_MProf_GC();\n@@ -1152,8 +1151,8 @@ runtime_markallocated(void *v, uintptr n, bool noptr)\n {\n \tuintptr *b, obits, bits, off, shift;\n \n-\t// if(0)\n-\t\t// runtime_printf(\"markallocated %p+%p\\n\", v, n);\n+\tif(0)\n+\t\truntime_printf(\"markallocated %p+%p\\n\", v, n);\n \n \tif((byte*)v+n > (byte*)runtime_mheap.arena_used || (byte*)v < runtime_mheap.arena_start)\n \t\truntime_throw(\"markallocated: bad pointer\");\n@@ -1184,8 +1183,8 @@ runtime_markfreed(void *v, uintptr n)\n {\n \tuintptr *b, obits, bits, off, shift;\n \n-\t// if(0)\n-\t\t// runtime_printf(\"markallocated %p+%p\\n\", v, n);\n+\tif(0)\n+\t\truntime_printf(\"markallocated %p+%p\\n\", v, n);\n \n \tif((byte*)v+n > (byte*)runtime_mheap.arena_used || (byte*)v < runtime_mheap.arena_start)\n \t\truntime_throw(\"markallocated: bad pointer\");\n@@ -1227,7 +1226,7 @@ runtime_checkfreed(void *v, uintptr n)\n \tbits = *b>>shift;\n \tif((bits & bitAllocated) != 0) {\n \t\truntime_printf(\"checkfreed %p+%p: off=%p have=%p\\n\",\n-\t\t\tv, (void*)n, (void*)off, (void*)(bits & bitMask));\n+\t\t\tv, n, off, bits & bitMask);\n \t\truntime_throw(\"checkfreed: not freed\");\n \t}\n }"}, {"sha": "221c5af861e0ea5cbff3051688302340565f4573", "filename": "libgo/runtime/mheap.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmheap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmheap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmheap.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -191,7 +191,7 @@ MHeap_Grow(MHeap *h, uintptr npage)\n \t\t\tv = runtime_MHeap_SysAlloc(h, ask);\n \t\t}\n \t\tif(v == nil) {\n-\t\t\truntime_printf(\"runtime: out of memory: cannot allocate %llu-byte block (%llu in use)\\n\", (unsigned long long)ask, (unsigned long long)mstats.heap_sys);\n+\t\t\truntime_printf(\"runtime: out of memory: cannot allocate %D-byte block (%D in use)\\n\", (uint64)ask, mstats.heap_sys);\n \t\t\treturn false;\n \t\t}\n \t}\n@@ -277,7 +277,7 @@ MHeap_FreeLocked(MHeap *h, MSpan *s)\n \tPageID p;\n \n \tif(s->state != MSpanInUse || s->ref != 0) {\n-\t\t// runtime_printf(\"MHeap_FreeLocked - span %p ptr %p state %d ref %d\\n\", s, s->start<<PageShift, s->state, s->ref);\n+\t\truntime_printf(\"MHeap_FreeLocked - span %p ptr %p state %d ref %d\\n\", s, s->start<<PageShift, s->state, s->ref);\n \t\truntime_throw(\"MHeap_FreeLocked - invalid free\");\n \t}\n \tmstats.heap_idle += s->npages<<PageShift;\n@@ -397,10 +397,10 @@ runtime_MHeap_Scavenger(void* dummy)\n \n \t\tif(trace) {\n \t\t\tif(sumreleased > 0)\n-\t\t\t\truntime_printf(\"scvg%d: %p MB released\\n\", k, (void*)(sumreleased>>20));\n-\t\t\truntime_printf(\"scvg%d: inuse: %lld, idle: %lld, sys: %lld, released: %lld, consumed: %lld (MB)\\n\",\n-\t\t\t\tk, (long long)(mstats.heap_inuse>>20), (long long)(mstats.heap_idle>>20), (long long)(mstats.heap_sys>>20),\n-\t\t\t\t(long long)(mstats.heap_released>>20), (long long)((mstats.heap_sys - mstats.heap_released)>>20));\n+\t\t\t\truntime_printf(\"scvg%d: %p MB released\\n\", k, sumreleased>>20);\n+\t\t\truntime_printf(\"scvg%d: inuse: %D, idle: %D, sys: %D, released: %D, consumed: %D (MB)\\n\",\n+\t\t\t\tk, mstats.heap_inuse>>20, mstats.heap_idle>>20, mstats.heap_sys>>20,\n+\t\t\t\tmstats.heap_released>>20, (mstats.heap_sys - mstats.heap_released)>>20);\n \t\t}\n \t}\n }\n@@ -451,7 +451,7 @@ void\n runtime_MSpanList_Insert(MSpan *list, MSpan *span)\n {\n \tif(span->next != nil || span->prev != nil) {\n-\t\t// runtime_printf(\"failed MSpanList_Insert %p %p %p\\n\", span, span->next, span->prev);\n+\t\truntime_printf(\"failed MSpanList_Insert %p %p %p\\n\", span, span->next, span->prev);\n \t\truntime_throw(\"MSpanList_Insert\");\n \t}\n \tspan->next = list->next;"}, {"sha": "3b5591c1b17da676df7eb8cef82f45363a80e9e2", "filename": "libgo/runtime/msize.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmsize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fmsize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmsize.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -103,7 +103,7 @@ runtime_InitSizes(void)\n \t\tsizeclass++;\n \t}\n \tif(sizeclass != NumSizeClasses) {\n-\t\t// runtime_printf(\"sizeclass=%d NumSizeClasses=%d\\n\", sizeclass, NumSizeClasses);\n+\t\truntime_printf(\"sizeclass=%d NumSizeClasses=%d\\n\", sizeclass, NumSizeClasses);\n \t\truntime_throw(\"InitSizes - bad NumSizeClasses\");\n \t}\n \n@@ -122,13 +122,13 @@ runtime_InitSizes(void)\n \t\tfor(n=0; n < MaxSmallSize; n++) {\n \t\t\tsizeclass = runtime_SizeToClass(n);\n \t\t\tif(sizeclass < 1 || sizeclass >= NumSizeClasses || runtime_class_to_size[sizeclass] < n) {\n-\t\t\t\t// runtime_printf(\"size=%d sizeclass=%d runtime_class_to_size=%d\\n\", n, sizeclass, runtime_class_to_size[sizeclass]);\n-\t\t\t\t// runtime_printf(\"incorrect SizeToClass\");\n+\t\t\t\truntime_printf(\"size=%d sizeclass=%d runtime_class_to_size=%d\\n\", n, sizeclass, runtime_class_to_size[sizeclass]);\n+\t\t\t\truntime_printf(\"incorrect SizeToClass\");\n \t\t\t\tgoto dump;\n \t\t\t}\n \t\t\tif(sizeclass > 1 && runtime_class_to_size[sizeclass-1] >= n) {\n-\t\t\t\t// runtime_printf(\"size=%d sizeclass=%d runtime_class_to_size=%d\\n\", n, sizeclass, runtime_class_to_size[sizeclass]);\n-\t\t\t\t// runtime_printf(\"SizeToClass too big\");\n+\t\t\t\truntime_printf(\"size=%d sizeclass=%d runtime_class_to_size=%d\\n\", n, sizeclass, runtime_class_to_size[sizeclass]);\n+\t\t\t\truntime_printf(\"SizeToClass too big\");\n \t\t\t\tgoto dump;\n \t\t\t}\n \t\t}"}, {"sha": "72875fd53f757e2debcd96fd606f3a908ab0f0f3", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -236,3 +236,15 @@ runtime_showframe(const unsigned char *s)\n \t\ttraceback = runtime_gotraceback();\n \treturn traceback > 1 || (__builtin_strchr((const char*)s, '.') != nil && __builtin_memcmp(s, \"runtime.\", 7) != 0);\n }\n+\n+bool\n+runtime_isInf(float64 f, int32 sign)\n+{\n+\tif(!__builtin_isinf(f))\n+\t\treturn false;\n+\tif(sign == 0)\n+\t\treturn true;\n+\tif(sign > 0)\n+\t\treturn f > 0;\n+\treturn f < 0;\n+}"}, {"sha": "8828aa59e157cb3283662551d467e832ff680290", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -14,6 +14,7 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <fcntl.h>\n+#include <unistd.h>\n #include <pthread.h>\n #include <semaphore.h>\n #include <ucontext.h>\n@@ -275,6 +276,7 @@ int32\truntime_ncpu;\n  * common functions and data\n  */\n int32\truntime_findnull(const byte*);\n+void\truntime_dump(byte*, int32);\n \n /*\n  * very low level c-called\n@@ -286,6 +288,8 @@ void\truntime_goenvs(void);\n void\truntime_goenvs_unix(void);\n void\truntime_throw(const char*) __attribute__ ((noreturn));\n void\truntime_panicstring(const char*) __attribute__ ((noreturn));\n+void\truntime_prints(const char*);\n+void\truntime_printf(const char*, ...);\n void*\truntime_mal(uintptr);\n void\truntime_schedinit(void);\n void\truntime_initsig(void);\n@@ -373,18 +377,44 @@ void\truntime_futexwakeup(uint32*, uint32);\n void __wrap_rtems_task_variable_add(void **);\n #endif\n \n+/*\n+ * Names generated by gccgo.\n+ */\n+#define runtime_printbool\t__go_print_bool\n+#define runtime_printfloat\t__go_print_double\n+#define runtime_printint\t__go_print_int64\n+#define runtime_printiface\t__go_print_interface\n+#define runtime_printeface\t__go_print_empty_interface\n+#define runtime_printstring\t__go_print_string\n+#define runtime_printpointer\t__go_print_pointer\n+#define runtime_printuint\t__go_print_uint64\n+#define runtime_printslice\t__go_print_slice\n+#define runtime_printcomplex\t__go_print_complex\n+\n /*\n  * runtime go-called\n  */\n-void\truntime_panic(Eface);\n+void\truntime_printbool(_Bool);\n+void\truntime_printfloat(double);\n+void\truntime_printint(int64);\n+void\truntime_printiface(Iface);\n+void\truntime_printeface(Eface);\n+void\truntime_printstring(String);\n+void\truntime_printpc(void*);\n+void\truntime_printpointer(void*);\n+void\truntime_printuint(uint64);\n+void\truntime_printhex(uint64);\n+void\truntime_printslice(Slice);\n+void\truntime_printcomplex(__complex double);\n+\n struct __go_func_type;\n void reflect_call(const struct __go_func_type *, const void *, _Bool, _Bool,\n \t\t  void **, void **)\n   asm (\"reflect.call\");\n \n /* Functions.  */\n #define runtime_panic __go_panic\n-#define runtime_printf printf\n+#define runtime_write(d, v, n) write((d), (v), (n))\n #define runtime_malloc(s) __go_alloc(s)\n #define runtime_free(p) __go_free(p)\n #define runtime_strcmp(s1, s2) __builtin_strcmp((s1), (s2))\n@@ -432,6 +462,8 @@ void\truntime_newErrorString(String, Eface*)\n /*\n  * wrapped for go users\n  */\n+bool\truntime_isInf(float64 f, int32 sign);\n+#define runtime_isNaN(f) __builtin_isnan(f)\n void\truntime_semacquire(uint32 volatile *);\n void\truntime_semrelease(uint32 volatile *);\n int32\truntime_gomaxprocsfunc(int32 n);"}, {"sha": "0014068b2cd6dcdd6ecbcda27fa81c54ef4f9996", "filename": "libgo/runtime/thread-linux.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fthread-linux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ba147f547e44230075efab78252c08bc8d8c2e/libgo%2Fruntime%2Fthread-linux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fthread-linux.c?ref=86ba147f547e44230075efab78252c08bc8d8c2e", "patch": "@@ -68,7 +68,7 @@ runtime_futexwakeup(uint32 *addr, uint32 cnt)\n \t// I don't know that futex wakeup can return\n \t// EAGAIN or EINTR, but if it does, it would be\n \t// safe to loop and call futex again.\n-\truntime_printf(\"futexwakeup addr=%p returned %lld\\n\", addr, (long long)ret);\n+\truntime_printf(\"futexwakeup addr=%p returned %D\\n\", addr, ret);\n \t*(int32*)0x1006 = 0x1006;\n }\n "}]}