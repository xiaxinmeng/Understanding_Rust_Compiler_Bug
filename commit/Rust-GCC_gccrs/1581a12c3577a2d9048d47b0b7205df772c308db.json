{"sha": "1581a12c3577a2d9048d47b0b7205df772c308db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4MWExMmMzNTc3YTJkOTA0OGQ0N2IwYjcyMDVkZjc3MmMzMDhkYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-11-07T17:03:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-11-07T17:03:55Z"}, "message": "emit-rtl.c (emit_copy_of_insn_after): Duplicate notes in order.\n\n\t* emit-rtl.c (emit_copy_of_insn_after): Duplicate notes in order.\n\t* sel-sched-ir.c (create_copy_of_insn_rtx): Likewise.\n\t* rtl.h (duplicate_reg_notes): Declare.\n\t* rtlanal.c (duplicate_reg_note): New function.\n\nFrom-SVN: r241913", "tree": {"sha": "e4c649d63cdbc46e4c05389eea601fa29f22b40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c649d63cdbc46e4c05389eea601fa29f22b40a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1581a12c3577a2d9048d47b0b7205df772c308db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1581a12c3577a2d9048d47b0b7205df772c308db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1581a12c3577a2d9048d47b0b7205df772c308db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1581a12c3577a2d9048d47b0b7205df772c308db/comments", "author": null, "committer": null, "parents": [{"sha": "caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "331540092d1e23ffd8362738a1e95f0e89382606", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1581a12c3577a2d9048d47b0b7205df772c308db", "patch": "@@ -1,5 +1,10 @@\n 2016-11-07  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\t* emit-rtl.c (emit_copy_of_insn_after): Duplicate notes in order.\n+\t* sel-sched-ir.c (create_copy_of_insn_rtx): Likewise.\n+\t* rtl.h (duplicate_reg_notes): Declare.\n+\t* rtlanal.c (duplicate_reg_note): New function.\n+\n \tPR rtl-optimization/77309\n \t* combine.c (make_compound_operation): Allow EQ for IN_CODE, and\n \tdon't assume an equality comparison for plain COMPARE."}, {"sha": "9ea0c8fb8881f04271fb8287aea8c716036f4a3f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1581a12c3577a2d9048d47b0b7205df772c308db", "patch": "@@ -6168,17 +6168,19 @@ emit_copy_of_insn_after (rtx_insn *insn, rtx_insn *after)\n      which may be duplicated by the basic block reordering code.  */\n   RTX_FRAME_RELATED_P (new_rtx) = RTX_FRAME_RELATED_P (insn);\n \n+  /* Locate the end of existing REG_NOTES in NEW_RTX.  */\n+  rtx *ptail = &REG_NOTES (new_rtx);\n+  while (*ptail != NULL_RTX)\n+    ptail = &XEXP (*ptail, 1);\n+\n   /* Copy all REG_NOTES except REG_LABEL_OPERAND since mark_jump_label\n      will make them.  REG_LABEL_TARGETs are created there too, but are\n      supposed to be sticky, so we copy them.  */\n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     if (REG_NOTE_KIND (link) != REG_LABEL_OPERAND)\n       {\n-\tif (GET_CODE (link) == EXPR_LIST)\n-\t  add_reg_note (new_rtx, REG_NOTE_KIND (link),\n-\t\t\tcopy_insn_1 (XEXP (link, 0)));\n-\telse\n-\t  add_shallow_copy_of_reg_note (new_rtx, link);\n+\t*ptail = duplicate_reg_note (link);\n+\tptail = &XEXP (*ptail, 1);\n       }\n \n   INSN_CODE (new_rtx) = INSN_CODE (insn);"}, {"sha": "7a44e3bd3effe36ba7ab7adab88b2ef61a7b36fa", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1581a12c3577a2d9048d47b0b7205df772c308db", "patch": "@@ -3019,6 +3019,7 @@ extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n extern void add_reg_note (rtx, enum reg_note, rtx);\n extern void add_int_reg_note (rtx, enum reg_note, int);\n extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);\n+extern rtx duplicate_reg_note (rtx);\n extern void remove_note (rtx_insn *, const_rtx);\n extern void remove_reg_equal_equiv_notes (rtx_insn *);\n extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);"}, {"sha": "4d7aad0dff0351811d84b73e611802777d1929b0", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=1581a12c3577a2d9048d47b0b7205df772c308db", "patch": "@@ -2304,6 +2304,20 @@ add_shallow_copy_of_reg_note (rtx_insn *insn, rtx note)\n     add_reg_note (insn, REG_NOTE_KIND (note), XEXP (note, 0));\n }\n \n+/* Duplicate NOTE and return the copy.  */\n+rtx\n+duplicate_reg_note (rtx note)\n+{\n+  reg_note kind = REG_NOTE_KIND (note);\n+\n+  if (GET_CODE (note) == INT_LIST)\n+    return gen_rtx_INT_LIST ((machine_mode) kind, XINT (note, 0), NULL_RTX);\n+  else if (GET_CODE (note) == EXPR_LIST)\n+    return alloc_reg_note (kind, copy_insn_1 (XEXP (note, 0)), NULL_RTX);\n+  else\n+    return alloc_reg_note (kind, XEXP (note, 0), NULL_RTX);\n+}\n+\n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n \n void"}, {"sha": "02157b4c736f96d4c6dff379c07d18b0758152bb", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1581a12c3577a2d9048d47b0b7205df772c308db/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=1581a12c3577a2d9048d47b0b7205df772c308db", "patch": "@@ -5762,6 +5762,11 @@ create_copy_of_insn_rtx (rtx insn_rtx)\n   res = create_insn_rtx_from_pattern (copy_rtx (PATTERN (insn_rtx)),\n                                       NULL_RTX);\n \n+  /* Locate the end of existing REG_NOTES in NEW_RTX.  */\n+  rtx *ptail = &REG_NOTES (res);\n+  while (*ptail != NULL_RTX)\n+    ptail = &XEXP (*ptail, 1);\n+\n   /* Copy all REG_NOTES except REG_EQUAL/REG_EQUIV and REG_LABEL_OPERAND\n      since mark_jump_label will make them.  REG_LABEL_TARGETs are created\n      there too, but are supposed to be sticky, so we copy them.  */\n@@ -5770,11 +5775,8 @@ create_copy_of_insn_rtx (rtx insn_rtx)\n \t&& REG_NOTE_KIND (link) != REG_EQUAL\n \t&& REG_NOTE_KIND (link) != REG_EQUIV)\n       {\n-\tif (GET_CODE (link) == EXPR_LIST)\n-\t  add_reg_note (res, REG_NOTE_KIND (link),\n-\t\t\tcopy_insn_1 (XEXP (link, 0)));\n-\telse\n-\t  add_reg_note (res, REG_NOTE_KIND (link), XEXP (link, 0));\n+\t*ptail = duplicate_reg_note (link);\n+\tptail = &XEXP (*ptail, 1);\n       }\n \n   return res;"}]}