{"sha": "3773a46b934e6d5a8a0803409a813dbfba5b46bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3M2E0NmI5MzRlNmQ1YThhMDgwMzQwOWE4MTNkYmZiYTViNDZiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-07-20T19:13:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-07-20T19:13:01Z"}, "message": "gcc.c (default_compilers, cpp-output): Pass -fpreprocessed.\n\n\t* gcc.c (default_compilers, cpp-output): Pass -fpreprocessed.\n\t* toplev.c (documented_lang_options): Add -fpreprocessed.\n\t* cpplib.h (struct cpp_buffer): Add preprocessed.\n\t* cppinit.c (cpp_handle_option): Handle -fpreprocessed.\n\t(cpp_start_read): Don't expand macros or emit an initial #line\n\tdirective if -fpreprocessed.\n\n\t* cpplib.h (struct cpp_buffer): Added manual_pop for\n\tbetter C++ tokenization.\n\t* cpplib.c (cpp_get_token): Return CPP_EOF if manual_pop.\n\tAlso, support C++ tokenization for ->*, .*, <?, and >? operators.\n\t* c-common.c (cpp_token): Make non-static.\n\nFrom-SVN: r28190", "tree": {"sha": "f7bd40b9e6c61ade2fdde4c0b13b88e694cb8882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7bd40b9e6c61ade2fdde4c0b13b88e694cb8882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3773a46b934e6d5a8a0803409a813dbfba5b46bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3773a46b934e6d5a8a0803409a813dbfba5b46bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3773a46b934e6d5a8a0803409a813dbfba5b46bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3773a46b934e6d5a8a0803409a813dbfba5b46bc/comments", "author": null, "committer": null, "parents": [{"sha": "c8649fde97502156b0896b622c8c52f464d16db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8649fde97502156b0896b622c8c52f464d16db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8649fde97502156b0896b622c8c52f464d16db3"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "217ac93f8ab956259852c8c2b9be3c381d34b53a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -1,3 +1,20 @@\n+Tue Jul 20 12:12:27 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* gcc.c (default_compilers, cpp-output): Pass -fpreprocessed.\n+\t* toplev.c (documented_lang_options): Add -fpreprocessed.\n+\t* cpplib.h (struct cpp_buffer): Add preprocessed.\n+\t* cppinit.c (cpp_handle_option): Handle -fpreprocessed.\n+\t(cpp_start_read): Don't expand macros or emit an initial #line\n+\tdirective if -fpreprocessed.\n+\n+Tue Jul 20 12:12:09 1999  Michael Tiemann  <tiemann@holodeck.cygnus.com>\n+\n+\t* cpplib.h (struct cpp_buffer): Added manual_pop for\n+\tbetter C++ tokenization.\n+\t* cpplib.c (cpp_get_token): Return CPP_EOF if manual_pop.\n+\tAlso, support C++ tokenization for ->*, .*, <?, and >? operators.\n+\t* c-common.c (cpp_token): Make non-static.\n+\n Tue Jul 20 11:24:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* c-common.h: New file."}, {"sha": "fca01233694a726bbc940656820efad333ab3c90", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -34,7 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n cpp_reader  parse_in;\n cpp_options parse_options;\n-static enum cpp_token cpp_token;\n+enum cpp_token cpp_token;\n #endif\n \n #ifndef WCHAR_TYPE_SIZE"}, {"sha": "7269c569c31d11cafef43f16fd8b311e4610253a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -961,6 +961,11 @@ cpp_start_read (pfile, fname)\n       cpp_message (pfile, -1, \"End of search list.\\n\");\n     }\n \n+  /* Don't bother trying to do macro expansion if we've already done\n+     preprocessing.  */\n+  if (opts->preprocessed)\n+    pfile->no_macro_expand++;\n+\n   /* Open the main input file.\n      We do this in nonblocking mode so we don't get stuck here if\n      someone clever has asked cpp to process /dev/rmt0;\n@@ -988,7 +993,13 @@ cpp_start_read (pfile, fname)\n   ih_fake->limit = 0;\n   if (!finclude (pfile, f, ih_fake))\n     return 0;\n-  output_line_command (pfile, same_file);\n+  if (opts->preprocessed)\n+    /* If we've already processed this code, we want to trust the #line\n+       directives in the input.  But we still need to update our line\n+       counter accordingly.  */\n+    pfile->lineno = CPP_BUFFER (pfile)->lineno;\n+  else\n+    output_line_command (pfile, same_file);\n   pfile->only_seen_white = 2;\n \n   /* The -imacros files can be scanned now, but the -include files\n@@ -1155,6 +1166,10 @@ cpp_handle_option (pfile, argc, argv)\n \t  user_label_prefix = \"_\";\n \telse if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n \t  user_label_prefix = \"\";\n+\telse if (!strcmp (argv[i], \"-fpreprocessed\"))\n+\t  opts->preprocessed = 1;\n+\telse if (!strcmp (argv[i], \"-fno-preprocessed\"))\n+\t  opts->preprocessed = 0;\n \tbreak;\n \n       case 'I':\t\t\t/* Add directory to path for includes.  */"}, {"sha": "efd87e1ccaa22814dad1c0612fafdc12e926c55b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -2029,7 +2029,10 @@ cpp_get_token (pfile)\n     handle_eof:\n       if (CPP_BUFFER (pfile)->seen_eof)\n \t{\n-\t  if (CPP_PREV_BUFFER (CPP_BUFFER (pfile)) == CPP_NULL_BUFFER (pfile))\n+\t  if (CPP_PREV_BUFFER (CPP_BUFFER (pfile)) == CPP_NULL_BUFFER (pfile)\n+\t      /* If we've been reading from redirected input, the\n+\t\t frontend will pop the buffer.  */\n+\t      || CPP_BUFFER (pfile)->manual_pop)\n \t    return CPP_EOF;\n \n \t  cpp_pop_buffer (pfile);\n@@ -2172,8 +2175,25 @@ cpp_get_token (pfile)\n \t  c2 = PEEKC ();\n \t  if (c2 == '-' && opts->chill)\n \t    goto comment;  /* Chill style comment */\n-\t  if (c2 == '-' || c2 == '=' || c2 == '>')\n+\t  if (c2 == '-' || c2 == '=')\n \t    goto op2;\n+\t  if (c2 == '>')\n+\t    {\n+\t      if (opts->cplusplus && PEEKN (1) == '*')\n+\t\t{\n+\t\t  /* In C++, there's a ->* operator.  */\n+\t\top3:\n+\t\t  token = CPP_OTHER;\n+\t\t  pfile->only_seen_white = 0;\n+\t\t  CPP_RESERVE (pfile, 4);\n+\t\t  CPP_PUTC_Q (pfile, c);\n+\t\t  CPP_PUTC_Q (pfile, GETC ());\n+\t\t  CPP_PUTC_Q (pfile, GETC ());\n+\t\t  CPP_NUL_TERMINATE_Q (pfile);\n+\t\t  return token;\n+\t\t}\n+\t      goto op2;\n+\t    }\n \t  goto randomchar;\n \n \tcase '<':\n@@ -2219,7 +2239,8 @@ cpp_get_token (pfile)\n \t  c2 = PEEKC ();\n \t  if (c2 == '=')\n \t    goto op2;\n-\t  if (c2 != c)\n+\t  /* GNU C++ supports MIN and MAX operators <? and >?.  */\n+\t  if (c2 != c && (!opts->cplusplus || c2 != '?'))\n \t    goto randomchar;\n \t  FORWARD(1);\n \t  CPP_RESERVE (pfile, 4);\n@@ -2241,6 +2262,11 @@ cpp_get_token (pfile)\n \t      c = GETC ();\n \t      goto number;\n \t    }\n+\n+\t  /* In C++ there's a .* operator.  */\n+\t  if (opts->cplusplus && c2 == '*')\n+\t    goto op2;\n+\n \t  if (c2 == '.' && PEEKN(1) == '.')\n \t    {\n \t      CPP_RESERVE(pfile, 4);\n@@ -2549,7 +2575,7 @@ parse_name (pfile, c)\n /* Parse a string starting with C.  A single quoted string is treated\n    like a double -- some programs (e.g., troff) are perverse this way.\n    (However, a single quoted string is not allowed to extend over\n-   multiple lines.  */\n+   multiple lines.)  */\n static void\n parse_string (pfile, c)\n      cpp_reader *pfile;"}, {"sha": "d92228e6a035e29d9145cf8c08a1b91e3c093b75", "filename": "gcc/cpplib.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -136,6 +136,10 @@ struct cpp_buffer\n      escapes are used only in macro buffers, and backslash-newline is removed\n      from macro expansion text in collect_expansion and/or macarg.  */\n   char has_escapes;\n+\n+  /* Used by the C++ frontend to implement redirected input (such as for\n+     default argument and/or template parsing).  */\n+  char manual_pop;\n };\n \n struct file_name_map_list;\n@@ -454,6 +458,10 @@ struct cpp_options {\n   /* Nonzero means give all the error messages the ANSI standard requires.  */\n   char pedantic;\n \n+  /* Nonzero means we're looking at already preprocessed code, so don't\n+     bother trying to do macro expansion and whatnot.  */\n+  char preprocessed;\n+\n   char done_initializing;\n \n   /* Search paths for include files.  */"}, {"sha": "b5910c54b1b1271afc5954febf3aebb796bebc0f", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -694,7 +694,7 @@ static struct compiler default_compilers[] =\n    {\"%{!M:%{!MM:%{!E:cc1 %i %1 %{!Q:-quiet} %{d*} %{m*} %{a*}\\\n \t\t\t%{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*}\\\n \t\t\t%{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n-\t\t\t%{aux-info*} %{Qn:-fno-ident}\\\n+\t\t\t%{aux-info*} %{Qn:-fno-ident} -fpreprocessed\\\n \t\t\t%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t\t%{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n \t\t     %{!S:as %a %Y\\"}, {"sha": "ff7457c194112b7c9ef4f22e459ece55d268650f", "filename": "gcc/toplev.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3773a46b934e6d5a8a0803409a813dbfba5b46bc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3773a46b934e6d5a8a0803409a813dbfba5b46bc", "patch": "@@ -1028,6 +1028,8 @@ documented_lang_options[] =\n   { \"-fno-cond-mismatch\", \"\" },\n   { \"-fdollars-in-identifiers\", \"Allow the use of $ inside identifiers\" },\n   { \"-fno-dollars-in-identifiers\", \"\" },\n+  { \"-fpreprocessed\", \"\" },\n+  { \"-fno-preprocessed\", \"\" },\n   { \"-fshort-double\", \"Use the same size for double as for float\" },\n   { \"-fno-short-double\", \"\" },\n   { \"-fshort-enums\", \"Use the smallest fitting integer to hold enums\"},\n@@ -2299,6 +2301,14 @@ botch (s)\n   abort ();\n }\n \n+#ifdef __GNUC__\n+void\n+(abort) ()\n+{\n+  raise (6);\n+}\n+#endif\n+\n /* Same as `malloc' but report error if no memory available.  */\n \n PTR"}]}