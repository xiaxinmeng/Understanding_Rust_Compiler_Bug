{"sha": "4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0ZjI4MzdjNTM2YTU3OGYwM2Q0YTUxZmU2MGFhN2IxMzEyZWQ0NQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-04-14T10:50:45Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-04-14T10:50:45Z"}, "message": "bfin.h (MODES_TIEABLE_P): Allow more modes to be tied.\n\n\t* config/bfin/bfin.h (MODES_TIEABLE_P): Allow more modes to be tied.\n\t* config/bfin/bfin.md (movsi_insn): Delete two unused alternatives.\n\nFrom-SVN: r123813", "tree": {"sha": "e866fee0cb65b8a1c5d3d2c19e8c7de935502b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e866fee0cb65b8a1c5d3d2c19e8c7de935502b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/comments", "author": null, "committer": null, "parents": [{"sha": "7d33c31d9a49cbb19adc3741330bd6cb33818076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d33c31d9a49cbb19adc3741330bd6cb33818076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d33c31d9a49cbb19adc3741330bd6cb33818076"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "016c62ade409dd85a89632405d6fc234f00357df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "patch": "@@ -1,3 +1,8 @@\n+2007-04-14  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.h (MODES_TIEABLE_P): Allow more modes to be tied.\n+\t* config/bfin/bfin.md (movsi_insn): Delete two unused alternatives.\n+\n 2007-04-14  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config.gcc: Recognize fido."}, {"sha": "c600af395d666f260a2a460c5655564b3c13d359", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "patch": "@@ -684,7 +684,15 @@ enum reg_class\n    If `HARD_REGNO_MODE_OK (R, MODE1)' and `HARD_REGNO_MODE_OK (R,\n    MODE2)' are ever different for any R, then `MODES_TIEABLE_P (MODE1,\n    MODE2)' must be zero. */\n-#define MODES_TIEABLE_P(MODE1, MODE2) ((MODE1) == (MODE2))\n+#define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n+ ((MODE1) == (MODE2)\t\t\t\t\t\\\n+  || ((GET_MODE_CLASS (MODE1) == MODE_INT\t\t\\\n+       || GET_MODE_CLASS (MODE1) == MODE_FLOAT)\t\t\\\n+      && (GET_MODE_CLASS (MODE2) == MODE_INT\t\t\\\n+\t  || GET_MODE_CLASS (MODE2) == MODE_FLOAT)\t\\\n+      && (MODE1) != BImode && (MODE2) != BImode\t\t\\\n+      && GET_MODE_SIZE (MODE1) <= UNITS_PER_WORD\t\\\n+      && GET_MODE_SIZE (MODE2) <= UNITS_PER_WORD))\n \n /* `PREFERRED_RELOAD_CLASS (X, CLASS)'\n    A C expression that places additional restrictions on the register"}, {"sha": "853024cb148f377252a783539835996f48349214", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f2837c536a578f03d4a51fe60aa7b1312ed45/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=4d4f2837c536a578f03d4a51fe60aa7b1312ed45", "patch": "@@ -522,12 +522,10 @@\n ;; with a PLUS.  We generally require fewer secondary reloads this way.\n \n (define_insn \"*movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=da,x*y,*k,da,da,x,x,x,da,mr\")\n-\t(match_operand:SI 1 \"general_operand\" \"da,x*y,da,*k,xKs7,xKsh,xKuh,ix,mr,da\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=da,x*y,da,x,x,x,da,mr\")\n+\t(match_operand:SI 1 \"general_operand\" \"da,x*y,xKs7,xKsh,xKuh,ix,mr,da\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n  \"@\n-   %0 = %1;\n-   %0 = %1;\n    %0 = %1;\n    %0 = %1;\n    %0 = %1 (X);\n@@ -536,8 +534,8 @@\n    #\n    %0 = %1%!\n    %0 = %1%!\"\n-  [(set_attr \"type\" \"move,move,move,move,mvi,mvi,mvi,*,mcld,mcst\")\n-   (set_attr \"length\" \"2,2,2,2,2,4,4,*,*,*\")])\n+  [(set_attr \"type\" \"move,move,mvi,mvi,mvi,*,mcld,mcst\")\n+   (set_attr \"length\" \"2,2,2,4,4,*,*,*\")])\n \n (define_insn \"*movsi_insn32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")"}]}