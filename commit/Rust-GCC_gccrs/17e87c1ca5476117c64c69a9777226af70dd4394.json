{"sha": "17e87c1ca5476117c64c69a9777226af70dd4394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlODdjMWNhNTQ3NjExN2M2NGM2OWE5Nzc3MjI2YWY3MGRkNDM5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-25T07:27:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-25T07:27:54Z"}, "message": "re PR c++/63522 (ICE: unexpected expression 'ElementIndices' of kind template_parm_index)\n\n\tPR c++/63522\n\t* parser.c (cp_parser_type_parameter): Call\n\tcheck_for_bare_parameter_packs on default argument.\n\nFrom-SVN: r219066", "tree": {"sha": "5990fc414a2deda0b142c473f44ce96aada371f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5990fc414a2deda0b142c473f44ce96aada371f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e87c1ca5476117c64c69a9777226af70dd4394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e87c1ca5476117c64c69a9777226af70dd4394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e87c1ca5476117c64c69a9777226af70dd4394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e87c1ca5476117c64c69a9777226af70dd4394/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a5757a0c4a71d551642dd81f7c005c61fc9d5e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5757a0c4a71d551642dd81f7c005c61fc9d5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5757a0c4a71d551642dd81f7c005c61fc9d5e2"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "4eb87127342836b429f35ecaaf20c41733c28bc3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17e87c1ca5476117c64c69a9777226af70dd4394", "patch": "@@ -1,3 +1,9 @@\n+2014-12-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63522\n+\t* parser.c (cp_parser_type_parameter): Call\n+\tcheck_for_bare_parameter_packs on default argument.\n+\n 2014-12-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/63985"}, {"sha": "2af15763ce36e2bb51f7cd610ab241ee2ac41bcb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=17e87c1ca5476117c64c69a9777226af70dd4394", "patch": "@@ -13499,6 +13499,8 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \t\t\t    \"default arguments\");\n                 default_argument = NULL_TREE;\n               }\n+\t    else if (check_for_bare_parameter_packs (default_argument))\n+\t      default_argument = error_mark_node;\n \t    pop_deferring_access_checks ();\n \t  }\n \telse"}, {"sha": "8f9cdb18c2d8c5263ef5d7311a1af5fbee3ada31", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic164.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic164.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic164.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic164.C?ref=17e87c1ca5476117c64c69a9777226af70dd4394", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/63522\n+// { dg-do compile { target c++11 } }\n+\n+template <typename...> struct tuple;\n+template <typename...> void slice();\n+template <int Index, typename...> using slice_result = decltype(slice<Index>);\n+template <typename Tuple, typename... Tuples, int... ElementIndices,\n+          typename =\n+              typename tuple<slice_result<ElementIndices, Tuples...>,\n+                             slice_result<ElementIndices, Tuples...>...>::type> // { dg-error \"parameter pack\" }\n+void zip_with(Tuple...);\n+decltype(zip_with(0)) d;\t// { dg-error \"no match\" }"}, {"sha": "31d283131a3996ae9eb187f7b5466683c1a2c915", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34052.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e87c1ca5476117c64c69a9777226af70dd4394/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C?ref=17e87c1ca5476117c64c69a9777226af70dd4394", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile { target c++11 } }\n-template<typename... T, typename = T> struct A {}; // { dg-error \"must be at the end\" }\n+template<typename... T, typename = T> struct A {}; // { dg-error \"parameter pack\" }\n \n \n-template<template<typename... T, typename = T> class U> struct B // { dg-error \"must be at the end\" }\n+template<template<typename... T, typename = T> class U> struct B // { dg-error \"parameter pack\" }\n {\n-  template<int> U<int> foo(); // { dg-error \"mismatch|constant|invalid|invalid\" }\n+  template<int> U<int> foo(); // { dg-error \"mismatch|constant|wrong|invalid\" }\n };"}]}