{"sha": "a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "node_id": "C_kwDOANBUbNoAKGExZjdmOTU0MWMyYjIwZWI0NDc1MGI5YzE1Y2Q4MzFjNjJkNjdmMjE", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-09-28T16:21:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-09-29T11:41:59Z"}, "message": "c++: import/export NTTP objects\n\nThis adds smarts to the module machinery to handle NTTP object\nVAR_DECLs.  Like typeinfo objects, these must be ignored in the symbol\ntable, streamed specially and recreated on stream in.\n\n\tgcc/cp/\n\tPR c++/100616\n\t* module.cc (enum tree_tag): Add tt_nttp_var.\n\t(trees_out::decl_node): Handle NTTP objects.\n\t(trees_in::tree_node): Handle tt_nttp_var.\n\t(depset::hash::add_binding_entry): Skip NTTP objects.\n\n\tgcc/testsuite/\n\tPR c++/100616\n\t* g++.dg/modules/100616_a.H: New.\n\t* g++.dg/modules/100616_b.C: New.\n\t* g++.dg/modules/100616_c.C: New.\n\t* g++.dg/modules/100616_d.C: New.", "tree": {"sha": "529824b945287a36edabb58329af0cdbc9444ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529824b945287a36edabb58329af0cdbc9444ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0aafbc324aa90421f0ce99c6f5bbf64ed163da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0aafbc324aa90421f0ce99c6f5bbf64ed163da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0aafbc324aa90421f0ce99c6f5bbf64ed163da6"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "cbf3a77de01afdef4cad9666ba0727f28782129e", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "patch": "@@ -2737,6 +2737,7 @@ enum tree_tag {\n   tt_tinfo_var,\t\t/* Typeinfo object. */\n   tt_tinfo_typedef,\t/* Typeinfo typedef.  */\n   tt_ptrmem_type,\t/* Pointer to member type.  */\n+  tt_nttp_var,\t\t/* NTTP_OBJECT VAR_DECL.  */\n \n   tt_parm,\t\t/* Function parameter or result.  */\n   tt_enum_value,\t/* An enum value.  */\n@@ -8548,6 +8549,21 @@ trees_out::decl_node (tree decl, walk_kind ref)\n \t    }\n \t  return false;\n \t}\n+\n+      if (DECL_NTTP_OBJECT_P (decl))\n+\t{\n+\t  /* A NTTP parm object.  */\n+\t  if (streaming_p ())\n+\t    i (tt_nttp_var);\n+\t  tree_node (tparm_object_argument (decl));\n+\t  tree_node (DECL_NAME (decl));\n+\t  int tag = insert (decl);\n+\t  if (streaming_p ())\n+\t    dump (dumper::TREE)\n+\t      && dump (\"Wrote nttp object:%d %N\", tag, DECL_NAME (decl));\n+\t  return false;\n+\t}\n+\n       break;\n \n     case TYPE_DECL:\n@@ -9627,6 +9643,21 @@ trees_in::tree_node (bool is_use)\n       }\n       break;\n \n+    case tt_nttp_var:\n+      /* An NTTP object. */\n+      {\n+\ttree init = tree_node ();\n+\ttree name = tree_node ();\n+\tif (!get_overrun ())\n+\t  {\n+\t    res = get_template_parm_object (init, name);\n+\t    int tag = insert (res);\n+\t    dump (dumper::TREE)\n+\t      && dump (\"Created nttp object:%d %N\", tag, name);\n+\t  }\n+      }\n+      break;\n+\n     case tt_enum_value:\n       /* An enum const value.  */\n       {\n@@ -12760,6 +12791,10 @@ depset::hash::add_binding_entity (tree decl, WMB_Flags flags, void *data_)\n \t/* Ignore TINFO things.  */\n \treturn false;\n \n+      if (TREE_CODE (decl) == VAR_DECL && DECL_NTTP_OBJECT_P (decl))\n+\t/* Ignore NTTP objects.  */\n+\treturn false;\n+\n       if (!(flags & WMB_Using) && CP_DECL_CONTEXT (decl) != data->ns)\n \t{\n \t  /* A using that lost its wrapper or an unscoped enum"}, {"sha": "9bc42bcc05b85df6cb2c993e9f9c128ec9009f73", "filename": "gcc/testsuite/g++.dg/modules/100616_a.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_a.H?ref=a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options {-std=c++20 -fmodule-header} }\n+// { dg-module-cmi {} }\n+\n+template<auto> struct C { };\n+struct A { };"}, {"sha": "416fd524b2ced43cd8914b8766fb6f99712c2cb3", "filename": "gcc/testsuite/g++.dg/modules/100616_b.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_b.C?ref=a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options {-std=c++20 -fmodules-ts} }\n+\n+export module pr100616_b;\n+// { dg-module-cmi pr100616_b }\n+\n+import \"100616_a.H\";\n+export C<A{}> c1;"}, {"sha": "5c79f5eef6836d26985f8dbd5928fbf3ff195b4f", "filename": "gcc/testsuite/g++.dg/modules/100616_c.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_c.C?ref=a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options {-std=c++20 -fmodules-ts} }\n+\n+export module pr100616_c;\n+// { dg-module-cmi pr100616_c }\n+\n+import \"100616_a.H\";\n+export C<A{}> c2;"}, {"sha": "d9515db1140f3dae19570f194651818328102f28", "filename": "gcc/testsuite/g++.dg/modules/100616_d.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f7f9541c2b20eb44750b9c15cd831c62d67f21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2F100616_d.C?ref=a1f7f9541c2b20eb44750b9c15cd831c62d67f21", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options {-std=c++20 -fmodules-ts} }\n+\n+import \"100616_a.H\";\n+import pr100616_b;\n+import pr100616_c;\n+\n+C<A{}> c0;\n+using type = decltype(c0);\n+using type = decltype(c1);\n+using type = decltype(c2); // bogus error: types of c1 and c2 don't match"}]}