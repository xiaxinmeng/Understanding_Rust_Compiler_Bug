{"sha": "803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAzZDU2ZjUyYTZlZWU5ODcwYjBmNWM4MjFmMmJjMjRiMDI1YmYwYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-10-29T17:55:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-10-29T17:55:45Z"}, "message": "h8300.c (h8300_eightbit_constant_address_p): New.\n\n\t* config/h8300/h8300.c (h8300_eightbit_constant_address_p): New.\n\t(h8300_tiny_constant_address_p): Likewise.\n\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Use\n\th8300_eightbit_constant_address_p.\n\t(TINY_CONSTANT_ADDRESS_P): Use h8300_tiny_constant_address_p.\n\t* config/h8300/h8300-protos.h: Add the prototypes for the two\n\tnew functions.\n\nFrom-SVN: r58628", "tree": {"sha": "25fa6c8a4235d87e518bce3356a48de9b773b28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25fa6c8a4235d87e518bce3356a48de9b773b28c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/comments", "author": null, "committer": null, "parents": [{"sha": "6bb8a3f75af9ddb66a0e35fe2be54b6a4bf109e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb8a3f75af9ddb66a0e35fe2be54b6a4bf109e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb8a3f75af9ddb66a0e35fe2be54b6a4bf109e1"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "3fb826f2c390932fd5f57b9ee1a7edf381941040", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "patch": "@@ -1,3 +1,13 @@\n+2002-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (h8300_eightbit_constant_address_p): New.\n+\t(h8300_tiny_constant_address_p): Likewise.\n+\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Use\n+\th8300_eightbit_constant_address_p.\n+\t(TINY_CONSTANT_ADDRESS_P): Use h8300_tiny_constant_address_p.\n+\t* config/h8300/h8300-protos.h: Add the prototypes for the two\n+\tnew functions.\n+\n 2002-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* reload1.c (update_eliminables): Unconditionally check if"}, {"sha": "b88ade053bb0897296a9de4038cf241eea8ca285", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "patch": "@@ -60,6 +60,9 @@ extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n \n+extern int h8300_eightbit_constant_address_p PARAMS ((rtx));\n+extern int h8300_tiny_constant_address_p PARAMS ((rtx));\n+\n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx PARAMS ((int, rtx));\n #endif /* RTX_CODE */"}, {"sha": "55ac700ddcaa845fc793ec19524de7f27ea298c8", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "patch": "@@ -3856,3 +3856,56 @@ h8300_asm_named_section (name, flags)\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }\n #endif /* ! OBJECT_FORMAT_ELF */\n+\n+int\n+h8300_eightbit_constant_address_p (x)\n+     rtx x;\n+{\n+  /* The ranges the 8-bit area. */\n+  const unsigned HOST_WIDE_INT n1 = trunc_int_for_mode (0x0000ff00, SImode);\n+  const unsigned HOST_WIDE_INT n2 = trunc_int_for_mode (0x0000ffff, SImode);\n+  const unsigned HOST_WIDE_INT h1 = trunc_int_for_mode (0x00ffff00, SImode);\n+  const unsigned HOST_WIDE_INT h2 = trunc_int_for_mode (0x00ffffff, SImode);\n+  const unsigned HOST_WIDE_INT s1 = trunc_int_for_mode (0xffffff00, SImode);\n+  const unsigned HOST_WIDE_INT s2 = trunc_int_for_mode (0xffffffff, SImode);\n+\n+  unsigned HOST_WIDE_INT addr;\n+\n+  if (GET_CODE (x) != CONST_INT)\n+    return 0;\n+\n+  addr = INTVAL (x);\n+\n+  return (0\n+\t  || (TARGET_H8300  && IN_RANGE (addr, n1, n2))\n+\t  || (TARGET_H8300H && IN_RANGE (addr, h1, h2))\n+\t  || (TARGET_H8300S && IN_RANGE (addr, s1, s2)));\n+}\n+\n+int\n+h8300_tiny_constant_address_p (x)\n+     rtx x;\n+{\n+  /* The ranges for the 16-bit area.  */\n+  const unsigned HOST_WIDE_INT h1 = trunc_int_for_mode (0x00000000, SImode);\n+  const unsigned HOST_WIDE_INT h2 = trunc_int_for_mode (0x00007fff, SImode);\n+  const unsigned HOST_WIDE_INT h3 = trunc_int_for_mode (0x00ff8000, SImode);\n+  const unsigned HOST_WIDE_INT h4 = trunc_int_for_mode (0x00ffffff, SImode);\n+  const unsigned HOST_WIDE_INT s1 = trunc_int_for_mode (0x00000000, SImode);\n+  const unsigned HOST_WIDE_INT s2 = trunc_int_for_mode (0x00007fff, SImode);\n+  const unsigned HOST_WIDE_INT s3 = trunc_int_for_mode (0xffff8000, SImode);\n+  const unsigned HOST_WIDE_INT s4 = trunc_int_for_mode (0xffffffff, SImode);\n+\n+  unsigned HOST_WIDE_INT addr;\n+\n+  if (GET_CODE (x) != CONST_INT)\n+    return 0;\n+\n+  addr = INTVAL (x);\n+\n+  return (0\n+\t  || (TARGET_H8300H\n+\t      && IN_RANGE (addr, h1, h2) || IN_RANGE (addr, h3, h4))\n+\t  || (TARGET_H8300S\n+\t      && IN_RANGE (addr, s1, s2) || IN_RANGE (addr, s3, s4)));\n+}"}, {"sha": "1e4b1ddf0ee2b76227f2bfb777c7eb0f4dbc1991", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803d56f52a6eee9870b0f5c821f2bc24b025bf0a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=803d56f52a6eee9870b0f5c821f2bc24b025bf0a", "patch": "@@ -837,27 +837,14 @@ struct cum_arg\n /* Nonzero if X is a constant address suitable as an 8-bit absolute,\n    which is a special case of the 'R' operand.  */\n \n-#define EIGHTBIT_CONSTANT_ADDRESS_P(X)\t\t\t\t\t\\\n-  ((GET_CODE (X) == CONST_INT)\t\t\t\t\t\t\\\n-   && ((TARGET_H8300 && IN_RANGE (INTVAL (X) & 0xffff, 0xff00, 0xffff))\t\\\n-       || (TARGET_H8300H && IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\\\n-\t\t\t\t      0xffff00, 0xffffff))\t\t\\\n-       || (TARGET_H8300S && IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\\\n-\t\t\t\t      0xffffff00, 0xffffffff))))\n+#define EIGHTBIT_CONSTANT_ADDRESS_P(X)\t\t\\\n+  h8300_eightbit_constant_address_p (X)\n \n /* Nonzero if X is a constant address suitable as an 16-bit absolute\n    on H8/300H and H8S.  */\n \n-#define TINY_CONSTANT_ADDRESS_P(X)\t\t\t\t\t\\\n-  ((GET_CODE (X) == CONST_INT)\t\t\t\t\t\t\\\n-   && ((TARGET_H8300H\t\t\t\t\t\t\t\\\n-\t&& (IN_RANGE (INTVAL (X) & 0xffffffff, 0x000000, 0x007fff)\t\\\n-\t    || IN_RANGE (INTVAL (X) & 0xffffffff, 0xff8000, 0xffffff)))\t\\\n-       || (TARGET_H8300S\t\t\t\t\t\t\\\n-\t   && (IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\t\\\n-\t\t\t 0x00000000, 0x00007fff)\t\t\t\\\n-\t       || IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\t\\\n-\t\t\t    0xffff8000, 0xffffffff)))))\n+#define TINY_CONSTANT_ADDRESS_P(X)\t\t\\\n+  h8300_tiny_constant_address_p (X)\n \n /* 'U' if valid for a bset destination;\n    i.e. a register, register indirect, or the eightbit memory region"}]}