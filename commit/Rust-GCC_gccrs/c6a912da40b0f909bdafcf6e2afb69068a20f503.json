{"sha": "c6a912da40b0f909bdafcf6e2afb69068a20f503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhOTEyZGE0MGIwZjkwOWJkYWZjZjZlMmFmYjY5MDY4YTIwZjUwMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-02-10T00:22:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-02-10T00:22:25Z"}, "message": "builtins.c (DEF_BUILTIN): Add COND argument.\n\n        * builtins.c (DEF_BUILTIN): Add COND argument.\n        * tree.h (DEF_BUILTIN): Likewise.\n        * builtins.def (DEF_GCC_BUILTIN, DEF_LIB_BUILTIN, DEF_EXT_LIB_BUILTIN,\n        DEF_C94_BUILTIN, DEF_C99_BUILTIN, DEF_C99_C90RES_BUILTIN): Update to\n        match.\n        (DEF_BUILTIN_STUB): New.\n        (BUILT_IN_STACK_SAVE, BUILT_IN_STACK_RESTORE, BUILT_IN_INIT_TRAMPOLINE,\n        BUILT_IN_ADJUST_TRAMPOLINE, BUILT_IN_NONLOCAL_GOTO,\n        BUILT_IN_PROFILE_FUNC_ENTER, BUILT_IN_PROFILE_FUNC_EXIT): Use it.\n        * c-common.c (DEF_BUILTIN): Add COND argument.\n        * tree.c (local_define_builtin): New.\n        (build_common_builtin_nodes): New.\nada/\n        * utils.c (gnat_define_builtin): Remove.\n        (gnat_install_builtins): Use build_common_builtin_nodes.\nfortran/\n        * f95-lang.c (gfc_init_builtin_functions): Call\n        build_common_builtin_nodes; do not define any functions handled\n        by it.\njava/\n        * builtins.c (initialize_builtins): Call build_common_builtin_nodes.\n        * decl.c (java_init_decl_processing): Initialize const_ptr_type_node.\ntreelang/\n        * treetree.c (treelang_init_decl_processing): Call\n        build_common_builtin_nodes.\n\nFrom-SVN: r94785", "tree": {"sha": "4ed79a7176ee65e1fb619e14384a1bc2dd57d091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed79a7176ee65e1fb619e14384a1bc2dd57d091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a912da40b0f909bdafcf6e2afb69068a20f503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a912da40b0f909bdafcf6e2afb69068a20f503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a912da40b0f909bdafcf6e2afb69068a20f503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a912da40b0f909bdafcf6e2afb69068a20f503/comments", "author": null, "committer": null, "parents": [{"sha": "af9777199237969ff0cb1d720436f6811f6a1fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9777199237969ff0cb1d720436f6811f6a1fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9777199237969ff0cb1d720436f6811f6a1fc8"}], "stats": {"total": 380, "additions": 210, "deletions": 170}, "files": [{"sha": "785eae5075150588e900a6ffb0c46213c15ebc51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1,3 +1,18 @@\n+2005-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (DEF_BUILTIN): Add COND argument.\n+\t* tree.h (DEF_BUILTIN): Likewise.\n+\t* builtins.def (DEF_GCC_BUILTIN, DEF_LIB_BUILTIN, DEF_EXT_LIB_BUILTIN,\n+\tDEF_C94_BUILTIN, DEF_C99_BUILTIN, DEF_C99_C90RES_BUILTIN): Update to\n+\tmatch.\n+\t(DEF_BUILTIN_STUB): New.\n+\t(BUILT_IN_STACK_SAVE, BUILT_IN_STACK_RESTORE, BUILT_IN_INIT_TRAMPOLINE,\n+\tBUILT_IN_ADJUST_TRAMPOLINE, BUILT_IN_NONLOCAL_GOTO,\n+\tBUILT_IN_PROFILE_FUNC_ENTER, BUILT_IN_PROFILE_FUNC_EXIT): Use it.\n+\t* c-common.c (DEF_BUILTIN): Add COND argument.\n+\t* tree.c (local_define_builtin): New.\n+\t(build_common_builtin_nodes): New.\n+\n 2005-02-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_strip_sign_ops): New function to simplify a"}, {"sha": "f6b7f6891ab7302a69f091c33e6be7ecf3d16108", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1,3 +1,8 @@\n+2005-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* utils.c (gnat_define_builtin): Remove.\n+\t(gnat_install_builtins): Use build_common_builtin_nodes.\n+\n 2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n \n \t* a-rbtgso.adb, a-crbtgo.ads, a-crbtgo.adb, a-crbtgk.ads,"}, {"sha": "4d4fad4ecadeefd827edea1d0a966df87e46f60e", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -118,7 +118,6 @@ struct language_function GTY(())\n   int unused;\n };\n \n-static void gnat_define_builtin (const char *, tree, int, const char *, bool);\n static void gnat_install_builtins (void);\n static tree merge_sizes (tree, tree, tree, bool, bool);\n static tree compute_related_constant (tree, tree);\n@@ -405,110 +404,13 @@ gnat_init_decl_processing (void)\n   gnat_install_builtins ();\n }\n \n-/* Define a builtin function.  This is temporary and is just being done\n-   to initialize *_built_in_decls for the middle-end.  We'll want\n-   to do full builtin processing soon.  */\n-\n-static void\n-gnat_define_builtin (const char *name, tree type,\n-\t\t     int function_code, const char *library_name, bool const_p)\n-{\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n-\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  make_decl_rtl (decl);\n-  gnat_pushdecl (decl, Empty);\n-  DECL_BUILT_IN_CLASS (decl) = BUILT_IN_NORMAL;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n-  TREE_READONLY (decl) = const_p;\n-\n-  implicit_built_in_decls[function_code] = decl;\n-  built_in_decls[function_code] = decl;\n-}\n-\n /* Install the builtin functions the middle-end needs.  */\n \n static void\n gnat_install_builtins ()\n {\n-  tree ftype;\n-  tree tmp;\n-\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n-  ftype = build_function_type (long_integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n-\t\t       \"__builtin_expect\", true);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  ftype = build_function_type (ptr_void_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_memcpy\", ftype, BUILT_IN_MEMCPY,\n-\t\t       \"memcpy\", false);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_memcmp\", ftype, BUILT_IN_MEMCMP,\n-\t\t       \"memcmp\", false);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, integer_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_memset\", ftype, BUILT_IN_MEMSET,\n-\t\t       \"memset\", false);\n-\n-  tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ, \"clz\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL, \"clzl\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_long_integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL, \"clzll\",\n-\t\t       true);\n-\n-  /* The init_trampoline and adjust_trampoline builtins aren't used directly.\n-     They are inserted during lowering of nested functions.  */\n-\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, tmp);\n-  ftype = build_function_type (void_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_init_trampoline\", ftype,\n-\t\t       BUILT_IN_INIT_TRAMPOLINE, \"init_trampoline\", false);\n-\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, void_list_node);\n-  ftype = build_function_type (ptr_void_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_adjust_trampoline\", ftype,\n-\t\t       BUILT_IN_ADJUST_TRAMPOLINE, \"adjust_trampoline\", true);\n-\n-  /* The stack_save, stack_restore, and alloca builtins aren't used directly.\n-     They are inserted during gimplification to implement variable sized stack\n-     allocation.  */\n-\n-  ftype = build_function_type (ptr_void_type_node, void_list_node);\n-  gnat_define_builtin (\"__builtin_stack_save\", ftype, BUILT_IN_STACK_SAVE,\n-\t\t       \"stack_save\", false);\n-\n-  tmp = tree_cons (NULL_TREE, ptr_void_type_node, void_list_node);\n-  ftype = build_function_type (void_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_stack_restore\", ftype,\n-\t\t       BUILT_IN_STACK_RESTORE, \"stack_restore\", false);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  ftype = build_function_type (ptr_void_type_node, tmp);\n-  gnat_define_builtin (\"__builtin_alloca\", ftype, BUILT_IN_ALLOCA,\n-\t\t       \"alloca\", false);\n+  /* Builtins used by generic optimizers.  */\n+  build_common_builtin_nodes ();\n \n   /* Target specific builtins, such as the AltiVec family on ppc.  */\n   targetm.init_builtins ();"}, {"sha": "432ecc64b7f28c4178a146b962d342b0c5caf7ca", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -59,7 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA, AT, IM) #X,\n+#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA, AT, IM, COND) #X,\n const char *const built_in_names[(int) END_BUILTINS] =\n {\n #include \"builtins.def\""}, {"sha": "8857a936bb98018d20ef8699cefdff71978bab86", "filename": "gcc/builtins.def", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -69,7 +69,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_GCC_BUILTIN\n #define DEF_GCC_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n-               false, false, false, ATTRS, true)\n+               false, false, false, ATTRS, true, true)\n \n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n@@ -80,7 +80,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_LIB_BUILTIN\t\t\t\t\t\n #define DEF_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, false, ATTRS, true)\n+\t       true, true, false, ATTRS, true, true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is not one that is\n    specified by ANSI/ISO C.  So, when we're being fully conformant we\n@@ -89,29 +89,36 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_EXT_LIB_BUILTIN\t\t\t\t\n #define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, true, ATTRS, false)\n+   \t       true, true, true, ATTRS, false, true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C94 or above.  */\n #undef DEF_C94_BUILTIN\t\t\t\t\t\n #define DEF_C94_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, !flag_isoc94, ATTRS, TARGET_C99_FUNCTIONS)\n+   \t       true, true, !flag_isoc94, ATTRS, TARGET_C99_FUNCTIONS, true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\t\t\t\t\t\n #define DEF_C99_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS)\n+   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS, true)\n \n /* Builtin that is specified by C99 and C90 reserve the name for future use.\n    We can still recognize the builtin in C90 mode but we can't produce it\n    implicitly.  */\n #undef DEF_C99_C90RES_BUILTIN\t\t\t\t\t\n #define DEF_C99_C90RES_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS)\n+   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS, true)\n+\n+/* Allocate the enum and the name for a builtin, but do not actually\n+   define it here at all.  */\n+#undef DEF_BUILTIN_STUB\n+#define DEF_BUILTIN_STUB(ENUM, NAME) \\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, 0, 0, false, false, \\\n+\t       false, 0, false, false)\n \n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for\n@@ -610,8 +617,6 @@ DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_STACK_SAVE, \"stack_save\", BT_FN_PTR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_STACK_RESTORE, \"stack_restore\", BT_FN_VOID_PTR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_STDARG_START, \"stdarg_start\", BT_FN_VOID_VALIST_REF_VAR, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRFMON, \"strfmon\", BT_FN_SSIZE_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_STRFMON_3_4)\n DEF_LIB_BUILTIN        (BUILT_IN_STRFTIME, \"strftime\", BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR, ATTR_FORMAT_STRFTIME_3_0)\n@@ -623,12 +628,16 @@ DEF_GCC_BUILTIN        (BUILT_IN_VA_END, \"va_end\", BT_FN_VOID_VALIST_REF, ATTR_N\n DEF_GCC_BUILTIN        (BUILT_IN_VA_START, \"va_start\", BT_FN_VOID_VALIST_REF_VAR, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN__EXIT, \"_exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN__EXIT2, \"_Exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_INIT_TRAMPOLINE, \"init_trampoline\", BT_FN_VOID_PTR_PTR_PTR, ATTR_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ADJUST_TRAMPOLINE, \"adjust_trampoline\", BT_FN_PTR_PTR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_NONLOCAL_GOTO, \"nonlocal_goto\", BT_FN_PTR_PTR, ATTR_NORETURN_NOTHROW_LIST)\n+\n+/* Implementing nested functions.  */\n+DEF_BUILTIN_STUB (BUILT_IN_INIT_TRAMPOLINE, \"__builtin_init_trampoline\")\n+DEF_BUILTIN_STUB (BUILT_IN_ADJUST_TRAMPOLINE, \"__builtin_adjust_trampoline\")\n+DEF_BUILTIN_STUB (BUILT_IN_NONLOCAL_GOTO, \"__builtin_nonlocal_goto\")\n+\n+/* Implementing variable sized local variables.  */\n+DEF_BUILTIN_STUB (BUILT_IN_STACK_SAVE, \"__builtin_stack_save\")\n+DEF_BUILTIN_STUB (BUILT_IN_STACK_RESTORE, \"__builtin_stack_restore\")\n \n /* Profiling hooks.  */\n-DEF_GCC_BUILTIN (BUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\",\n-\t\t BT_FN_VOID, ATTR_NULL)\n-DEF_GCC_BUILTIN (BUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\", \n-\t\t BT_FN_VOID, ATTR_NULL)\n+DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\")\n+DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\")"}, {"sha": "15f364800c6b2fdcc5070e6cc4b95b8332cb16d8", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -3199,9 +3199,9 @@ c_common_nodes_and_builtins (void)\n \n   c_init_attributes ();\n \n-#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE,\t\t\t\\\n-\t\t    BOTH_P, FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT)\t\\\n-  if (NAME)\t\t\t\t\t\t\t\t\\\n+#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, FALLBACK_P, \\\n+\t\t    NONANSI_P, ATTRS, IMPLICIT, COND)\t\t\t\\\n+  if (NAME && COND)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       tree decl;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -3234,6 +3234,8 @@ c_common_nodes_and_builtins (void)\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n \n+  build_common_builtin_nodes ();\n+\n   targetm.init_builtins ();\n   if (flag_mudflap)\n     mudflap_init ();"}, {"sha": "6db9cd9f57d93ac88ee6df85fabecaff7a14c5df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1,3 +1,9 @@\n+2005-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Call\n+\tbuild_common_builtin_nodes; do not define any functions handled\n+\tby it.\n+\n 2005-02-08  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* expr.c (gfc_copy_expr): Don't copy 'op1' and 'op2' for"}, {"sha": "7f04b7ca2614442374249f559cfeef181e4f2c5c", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -794,8 +794,7 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_CABS, \"cabs\", true);\n   gfc_define_builtin (\"__builtin_cabsf\", func_cfloat_float, \n \t\t      BUILT_IN_CABSF, \"cabsf\", true);\n-\t\t      \n-  \n+ \n   gfc_define_builtin (\"__builtin_copysign\", mfunc_double[1], \n \t\t      BUILT_IN_COPYSIGN, \"copysign\", true);\n   gfc_define_builtin (\"__builtin_copysignf\", mfunc_float[1], \n@@ -809,61 +808,28 @@ gfc_init_builtin_functions (void)\n \n   /* Other builtin functions we use.  */\n \n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n-  ftype = build_function_type (long_integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n-\t\t      \"__builtin_expect\", true);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n-  ftype = build_function_type (pvoid_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_memcpy\", ftype, BUILT_IN_MEMCPY,\n-\t\t      \"memcpy\", false);\n-\n   tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ, \"clz\", true);\n+  gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n+\t\t      \"__builtin_clz\", true);\n \n   tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL, \"clzl\", true);\n+  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n+\t\t      \"__builtin_clzl\", true);\n \n   tmp = tree_cons (NULL_TREE, long_long_integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL, \"clzll\", true);\n-\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n-  ftype = build_function_type (void_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_init_trampoline\", ftype,\n-\t\t      BUILT_IN_INIT_TRAMPOLINE, \"init_trampoline\", false);\n-\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n-  ftype = build_function_type (pvoid_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_adjust_trampoline\", ftype,\n-\t\t      BUILT_IN_ADJUST_TRAMPOLINE, \"adjust_trampoline\", true);\n-\n-  /* The stack_save, stack_restore, and alloca builtins aren't used directly.\n-     They are inserted during gimplification to implement variable sized\n-     stack allocation.  */\n-\n-  ftype = build_function_type (pvoid_type_node, void_list_node);\n-  gfc_define_builtin (\"__builtin_stack_save\", ftype, BUILT_IN_STACK_SAVE,\n-\t\t      \"stack_save\", false);\n-\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n-  ftype = build_function_type (void_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_stack_restore\", ftype, BUILT_IN_STACK_RESTORE,\n-\t\t      \"stack_restore\", false);\n-\n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  ftype = build_function_type (pvoid_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_alloca\", ftype, BUILT_IN_ALLOCA,\n-\t\t      \"alloca\", false);\n+  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n+\t\t      \"__builtin_clzll\", true);\n+\n+  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n+  tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n+  ftype = build_function_type (long_integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n+\t\t      \"__builtin_expect\", true);\n \n+  build_common_builtin_nodes ();\n   targetm.init_builtins ();\n }\n "}, {"sha": "a24d4a4903749a44e01689e3f3c1114d0e13518c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1,3 +1,8 @@\n+2005-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (initialize_builtins): Call build_common_builtin_nodes.\n+\t* decl.c (java_init_decl_processing): Initialize const_ptr_type_node.\n+\n 2005-02-08  Marcin Dalecki  <martin@dalecki.de>\n \n \t* expr.c (add_type_assertion): Use the proper enumeration type,"}, {"sha": "fd8aa5a886692373598701681942973cd4d12e50", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -216,6 +216,8 @@ initialize_builtins (void)\n \t\t  double_ftype_double, \"_ZN4java4lang4Math4sqrtEd\");\n   define_builtin (BUILT_IN_TAN, \"__builtin_tan\",\n \t\t  double_ftype_double, \"_ZN4java4lang4Math3tanEd\");\n+\n+  build_common_builtin_nodes ();\n }\n \n /* If the call matches a builtin, return the"}, {"sha": "ad1b55e5dfab4a5dd06ae8eca407eab3fcef1b74", "filename": "gcc/java/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -692,7 +692,11 @@ java_init_decl_processing (void)\n   void_type_node = make_node (VOID_TYPE);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"void\"), void_type_node));\n   layout_type (void_type_node);\t/* Uses size_zero_node */\n+\n   ptr_type_node = build_pointer_type (void_type_node);\n+  const_ptr_type_node\n+    = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n+\n   t = make_node (VOID_TYPE);\n   layout_type (t); /* Uses size_zero_node */\n   return_address_type_node = build_pointer_type (t);"}, {"sha": "4e7f7bfcf9bb33c2607b470983be863e0c55d2bf", "filename": "gcc/tree.c", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -5782,6 +5782,124 @@ build_common_tree_nodes_2 (int short_double)\n   }\n }\n \n+/* A subroutine of build_common_builtin_nodes.  Define a builtin function.  */\n+\n+static void\n+local_define_builtin (const char *name, tree type, enum built_in_function code,\n+                      const char *library_name, int ecf_flags)\n+{\n+  tree decl;\n+\n+  decl = lang_hooks.builtin_function (name, type, code, BUILT_IN_NORMAL,\n+\t\t\t\t      library_name, NULL_TREE);\n+  if (ecf_flags & ECF_CONST)\n+    TREE_READONLY (decl) = 1;\n+  if (ecf_flags & ECF_PURE)\n+    DECL_IS_PURE (decl) = 1;\n+  if (ecf_flags & ECF_NORETURN)\n+    TREE_THIS_VOLATILE (decl) = 1;\n+  if (ecf_flags & ECF_NOTHROW)\n+    TREE_NOTHROW (decl) = 1;\n+  if (ecf_flags & ECF_MALLOC)\n+    DECL_IS_MALLOC (decl) = 1;\n+\n+  built_in_decls[code] = decl;\n+  implicit_built_in_decls[code] = decl;\n+}\n+\n+/* Call this function after instantiating all builtins that the language\n+   front end cares about.  This will build the rest of the builtins that\n+   are relied upon by the tree optimizers and the middle-end.  */\n+\n+void\n+build_common_builtin_nodes (void)\n+{\n+  tree tmp, ftype;\n+\n+  if (built_in_decls[BUILT_IN_MEMCPY] == NULL\n+      || built_in_decls[BUILT_IN_MEMMOVE] == NULL)\n+    {\n+      tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n+      tmp = tree_cons (NULL_TREE, const_ptr_type_node, tmp);\n+      tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n+      ftype = build_function_type (ptr_type_node, tmp);\n+\n+      if (built_in_decls[BUILT_IN_MEMCPY] == NULL)\n+\tlocal_define_builtin (\"__builtin_memcpy\", ftype, BUILT_IN_MEMCPY,\n+\t\t\t      \"memcpy\", ECF_NOTHROW);\n+      if (built_in_decls[BUILT_IN_MEMMOVE] == NULL)\n+\tlocal_define_builtin (\"__builtin_memmove\", ftype, BUILT_IN_MEMMOVE,\n+\t\t\t      \"memmove\", ECF_NOTHROW);\n+    }\n+\n+  if (built_in_decls[BUILT_IN_MEMCMP] == NULL)\n+    {\n+      tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n+      tmp = tree_cons (NULL_TREE, const_ptr_type_node, tmp);\n+      tmp = tree_cons (NULL_TREE, const_ptr_type_node, tmp);\n+      ftype = build_function_type (ptr_type_node, tmp);\n+      local_define_builtin (\"__builtin_memcmp\", ftype, BUILT_IN_MEMCMP,\n+\t\t\t    \"memcmp\", ECF_PURE | ECF_NOTHROW);\n+    }\n+\n+  if (built_in_decls[BUILT_IN_MEMSET] == NULL)\n+    {\n+      tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n+      tmp = tree_cons (NULL_TREE, integer_type_node, tmp);\n+      tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n+      ftype = build_function_type (ptr_type_node, tmp);\n+      local_define_builtin (\"__builtin_memset\", ftype, BUILT_IN_MEMSET,\n+\t\t\t    \"memset\", ECF_NOTHROW);\n+    }\n+\n+  if (built_in_decls[BUILT_IN_ALLOCA] == NULL)\n+    {\n+      tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n+      ftype = build_function_type (ptr_type_node, tmp);\n+      local_define_builtin (\"__builtin_alloca\", ftype, BUILT_IN_ALLOCA,\n+\t\t\t    \"alloca\", ECF_NOTHROW | ECF_MALLOC);\n+    }\n+\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n+  ftype = build_function_type (void_type_node, tmp);\n+  local_define_builtin (\"__builtin_init_trampoline\", ftype,\n+\t\t\tBUILT_IN_INIT_TRAMPOLINE,\n+\t\t\t\"__builtin_init_trampoline\", ECF_NOTHROW);\n+\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+  ftype = build_function_type (ptr_type_node, tmp);\n+  local_define_builtin (\"__builtin_adjust_trampoline\", ftype,\n+\t\t\tBUILT_IN_ADJUST_TRAMPOLINE,\n+\t\t\t\"__builtin_adjust_trampoline\",\n+\t\t\tECF_CONST | ECF_NOTHROW);\n+\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n+  ftype = build_function_type (void_type_node, tmp);\n+  local_define_builtin (\"__builtin_nonlocal_goto\", ftype,\n+\t\t\tBUILT_IN_NONLOCAL_GOTO,\n+\t\t\t\"__builtin_nonlocal_goto\",\n+\t\t\tECF_NORETURN | ECF_NOTHROW);\n+\n+  ftype = build_function_type (ptr_type_node, void_list_node);\n+  local_define_builtin (\"__builtin_stack_save\", ftype, BUILT_IN_STACK_SAVE,\n+\t\t\t\"__builtin_stack_save\", ECF_NOTHROW);\n+\n+  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+  ftype = build_function_type (void_type_node, tmp);\n+  local_define_builtin (\"__builtin_stack_restore\", ftype,\n+\t\t\tBUILT_IN_STACK_RESTORE,\n+\t\t\t\"__builtin_stack_restore\", ECF_NOTHROW);\n+\n+  ftype = build_function_type (void_type_node, void_list_node);\n+  local_define_builtin (\"__builtin_profile_func_enter\", ftype,\n+\t\t\tBUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\", 0);\n+  local_define_builtin (\"__builtin_profile_func_exit\", ftype,\n+\t\t\tBUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\", 0);\n+}\n+\n /* HACK.  GROSS.  This is absolutely disgusting.  I wish there was a\n    better way.\n "}, {"sha": "60ebc737b5caca0328b7608eab7cc6266bf8934e", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -182,7 +182,7 @@ extern const char *const built_in_class_names[4];\n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n \n-#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM) ENUM,\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND) ENUM,\n enum built_in_function\n {\n #include \"builtins.def\"\n@@ -3591,6 +3591,7 @@ extern int real_minus_onep (tree);\n extern void init_ttree (void);\n extern void build_common_tree_nodes (bool, bool);\n extern void build_common_tree_nodes_2 (int);\n+extern void build_common_builtin_nodes (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_range_type (tree, tree, tree);\n extern HOST_WIDE_INT int_cst_value (tree);"}, {"sha": "35d4710d1c7cfac77d12135edb187081f87e400c", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1,11 +1,16 @@\n+2005-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* treetree.c (treelang_init_decl_processing): Call\n+\tbuild_common_builtin_nodes.\n+\n 2005-02-06  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* treelang.texi: Don't use local treelang version number.  Don't\n \tgive last update date.\n \n 2005-02-01  James A. Morrison  <phython@gcc.gnu.org>\n \n-\t* (lex.l): Undef LINEMAP_POSITION_FOR_COLUMN before defining it.\n+\t* lex.l: Undef LINEMAP_POSITION_FOR_COLUMN before defining it.\n \n 2005-02-01  James A. Morrison  <phython@gcc.gnu.org>\n "}, {"sha": "54dcb46fd1cef568e4c47ebc788af8df354f40a2", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a912da40b0f909bdafcf6e2afb69068a20f503/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=c6a912da40b0f909bdafcf6e2afb69068a20f503", "patch": "@@ -1209,7 +1209,7 @@ treelang_init_decl_processing (void)\n   tree_push_type_decl (get_identifier (\"long double\"), long_double_type_node);\n   tree_push_type_decl (get_identifier (\"void\"), void_type_node);\n \n-  /* Add any target-specific builtin functions.  */\n+  build_common_builtin_nodes ();\n   (*targetm.init_builtins) ();\n \n   pedantic_lvalues = pedantic;"}]}