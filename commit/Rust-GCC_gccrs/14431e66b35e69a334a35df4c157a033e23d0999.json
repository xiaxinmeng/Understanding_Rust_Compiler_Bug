{"sha": "14431e66b35e69a334a35df4c157a033e23d0999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0MzFlNjZiMzVlNjlhMzM0YTM1ZGY0YzE1N2EwMzNlMjNkMDk5OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-08T12:53:09Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-21T14:13:41Z"}, "message": "Generate PTA features from a def file.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.h (PTA_*): Remove.\n\t(enum pta_flag): New.\n\t(DEF_PTA): Generate PTA_* values from i386-isa.def.\n\t* config/i386/i386-isa.def: New file.", "tree": {"sha": "ef96c2f34a2671ee867d1f2c98153a9ae060f5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef96c2f34a2671ee867d1f2c98153a9ae060f5b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14431e66b35e69a334a35df4c157a033e23d0999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14431e66b35e69a334a35df4c157a033e23d0999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14431e66b35e69a334a35df4c157a033e23d0999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14431e66b35e69a334a35df4c157a033e23d0999/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe11882ae34c49f6214f93867783ed1332f35f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11882ae34c49f6214f93867783ed1332f35f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe11882ae34c49f6214f93867783ed1332f35f0f"}], "stats": {"total": 219, "additions": 128, "deletions": 91}, "files": [{"sha": "a0d46cbc892cde831b2a5a250f3118782b60cc9a", "filename": "gcc/config/i386/i386-isa.def", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14431e66b35e69a334a35df4c157a033e23d0999/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14431e66b35e69a334a35df4c157a033e23d0999/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=14431e66b35e69a334a35df4c157a033e23d0999", "patch": "@@ -0,0 +1,110 @@\n+/* Definition for processor table alias flags.\n+   Copyright (C) 2001-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+DEF_PTA(3DNOW)\n+DEF_PTA(3DNOW_A)\n+DEF_PTA(64BIT)\n+DEF_PTA(ABM)\n+DEF_PTA(AES)\n+DEF_PTA(AVX)\n+DEF_PTA(BMI)\n+DEF_PTA(CX16)\n+DEF_PTA(F16C)\n+DEF_PTA(FMA)\n+DEF_PTA(FMA4)\n+DEF_PTA(FSGSBASE)\n+DEF_PTA(LWP)\n+DEF_PTA(LZCNT)\n+DEF_PTA(MMX)\n+DEF_PTA(MOVBE)\n+DEF_PTA(NO_SAHF)\n+DEF_PTA(PCLMUL)\n+DEF_PTA(POPCNT)\n+DEF_PTA(PREFETCH_SSE)\n+DEF_PTA(RDRND)\n+DEF_PTA(SSE)\n+DEF_PTA(SSE2)\n+DEF_PTA(SSE3)\n+DEF_PTA(SSE4_1)\n+DEF_PTA(SSE4_2)\n+DEF_PTA(SSE4A)\n+DEF_PTA(SSSE3)\n+DEF_PTA(TBM)\n+DEF_PTA(XOP)\n+DEF_PTA(AVX2)\n+DEF_PTA(BMI2)\n+DEF_PTA(RTM)\n+DEF_PTA(HLE)\n+DEF_PTA(PRFCHW)\n+DEF_PTA(RDSEED)\n+DEF_PTA(ADX)\n+DEF_PTA(FXSR)\n+DEF_PTA(XSAVE)\n+DEF_PTA(XSAVEOPT)\n+DEF_PTA(AVX512F)\n+DEF_PTA(AVX512ER)\n+DEF_PTA(AVX512PF)\n+DEF_PTA(AVX512CD)\n+DEF_PTA(NO_TUNE)\n+DEF_PTA(SHA)\n+DEF_PTA(PREFETCHWT1)\n+DEF_PTA(CLFLUSHOPT)\n+DEF_PTA(XSAVEC)\n+DEF_PTA(XSAVES)\n+DEF_PTA(AVX512DQ)\n+DEF_PTA(AVX512BW)\n+DEF_PTA(AVX512VL)\n+DEF_PTA(AVX512IFMA)\n+DEF_PTA(AVX512VBMI)\n+DEF_PTA(CLWB)\n+DEF_PTA(MWAITX)\n+DEF_PTA(CLZERO)\n+DEF_PTA(NO_80387)\n+DEF_PTA(PKU)\n+DEF_PTA(AVX5124VNNIW)\n+DEF_PTA(AVX5124FMAPS)\n+DEF_PTA(AVX512VPOPCNTDQ)\n+DEF_PTA(SGX)\n+DEF_PTA(AVX512VNNI)\n+DEF_PTA(GFNI)\n+DEF_PTA(VAES)\n+DEF_PTA(AVX512VBMI2)\n+DEF_PTA(VPCLMULQDQ)\n+DEF_PTA(AVX512BITALG)\n+DEF_PTA(RDPID)\n+DEF_PTA(PCONFIG)\n+DEF_PTA(WBNOINVD)\n+DEF_PTA(AVX512VP2INTERSECT)\n+DEF_PTA(PTWRITE)\n+DEF_PTA(AVX512BF16)\n+DEF_PTA(WAITPKG)\n+DEF_PTA(MOVDIRI)\n+DEF_PTA(MOVDIR64B)\n+DEF_PTA(ENQCMD)\n+DEF_PTA(CLDEMOTE)\n+DEF_PTA(SERIALIZE)\n+DEF_PTA(TSXLDTRK)\n+DEF_PTA(AMX_TILE)\n+DEF_PTA(AMX_INT8)\n+DEF_PTA(AMX_BF16)\n+DEF_PTA(UINTR)\n+DEF_PTA(HRESET)\n+DEF_PTA(KL)\n+DEF_PTA(WIDEKL)\n+DEF_PTA(AVXVNNI)"}, {"sha": "d2e6751331eac0f5d762e2020af12cf2219b7ebd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 18, "deletions": 91, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14431e66b35e69a334a35df4c157a033e23d0999/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14431e66b35e69a334a35df4c157a033e23d0999/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=14431e66b35e69a334a35df4c157a033e23d0999", "patch": "@@ -2415,97 +2415,24 @@ extern const char *const processor_names[];\n \n #include \"wide-int-bitmask.h\"\n \n-constexpr wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n-constexpr wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n-constexpr wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n-constexpr wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n-constexpr wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n-constexpr wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n-constexpr wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n-constexpr wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n-constexpr wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n-constexpr wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n-constexpr wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n-constexpr wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n-constexpr wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n-constexpr wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n-constexpr wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n-constexpr wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n-constexpr wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n-constexpr wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n-constexpr wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n-constexpr wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n-constexpr wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n-constexpr wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n-constexpr wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n-constexpr wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n-constexpr wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n-constexpr wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n-constexpr wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n-constexpr wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n-constexpr wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n-constexpr wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n-constexpr wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n-constexpr wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n-constexpr wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n-constexpr wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n-constexpr wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n-constexpr wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n-constexpr wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n-constexpr wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n-constexpr wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n-constexpr wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n-constexpr wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n-constexpr wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n-constexpr wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n-constexpr wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n-constexpr wide_int_bitmask PTA_NO_TUNE (HOST_WIDE_INT_1U << 44);\n-constexpr wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n-constexpr wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n-constexpr wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n-constexpr wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n-constexpr wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n-constexpr wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n-constexpr wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n-constexpr wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n-constexpr wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n-constexpr wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n-constexpr wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n-constexpr wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n-constexpr wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n-constexpr wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n-constexpr wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n-constexpr wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n-constexpr wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n-constexpr wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n-constexpr wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n-constexpr wide_int_bitmask PTA_AVX512VNNI (0, HOST_WIDE_INT_1U);\n-constexpr wide_int_bitmask PTA_GFNI (0, HOST_WIDE_INT_1U << 1);\n-constexpr wide_int_bitmask PTA_VAES (0, HOST_WIDE_INT_1U << 2);\n-constexpr wide_int_bitmask PTA_AVX512VBMI2 (0, HOST_WIDE_INT_1U << 3);\n-constexpr wide_int_bitmask PTA_VPCLMULQDQ (0, HOST_WIDE_INT_1U << 4);\n-constexpr wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n-constexpr wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n-constexpr wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n-constexpr wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n-constexpr wide_int_bitmask PTA_AVX512VP2INTERSECT (0, HOST_WIDE_INT_1U << 9);\n-constexpr wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n-constexpr wide_int_bitmask PTA_AVX512BF16 (0, HOST_WIDE_INT_1U << 11);\n-constexpr wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 12);\n-constexpr wide_int_bitmask PTA_MOVDIRI (0, HOST_WIDE_INT_1U << 13);\n-constexpr wide_int_bitmask PTA_MOVDIR64B (0, HOST_WIDE_INT_1U << 14);\n-constexpr wide_int_bitmask PTA_ENQCMD (0, HOST_WIDE_INT_1U << 15);\n-constexpr wide_int_bitmask PTA_CLDEMOTE (0, HOST_WIDE_INT_1U << 16);\n-constexpr wide_int_bitmask PTA_SERIALIZE (0, HOST_WIDE_INT_1U << 17);\n-constexpr wide_int_bitmask PTA_TSXLDTRK (0, HOST_WIDE_INT_1U << 18);\n-constexpr wide_int_bitmask PTA_AMX_TILE (0, HOST_WIDE_INT_1U << 19);\n-constexpr wide_int_bitmask PTA_AMX_INT8 (0, HOST_WIDE_INT_1U << 20);\n-constexpr wide_int_bitmask PTA_AMX_BF16 (0, HOST_WIDE_INT_1U << 21);\n-constexpr wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n-constexpr wide_int_bitmask PTA_HRESET (0, HOST_WIDE_INT_1U << 23);\n-constexpr wide_int_bitmask PTA_KL (0, HOST_WIDE_INT_1U << 24);\n-constexpr wide_int_bitmask PTA_WIDEKL (0, HOST_WIDE_INT_1U << 25);\n-constexpr wide_int_bitmask PTA_AVXVNNI (0, HOST_WIDE_INT_1U << 26);\n+enum pta_flag\n+{\n+#define DEF_PTA(NAME) _ ## NAME,\n+#include \"i386-isa.def\"\n+#undef DEF_PTA\n+  END_PTA\n+};\n+\n+/* wide_int_bitmask can handle only 128 flags.  */\n+STATIC_ASSERT (END_PTA <= 128);\n+\n+#define WIDE_INT_BITMASK_FROM_NTH(N) (N < 64 ? wide_int_bitmask (0, 1ULL << N) \\\n+\t\t\t\t      : wide_int_bitmask (1ULL << (N - 64), 0))\n+\n+#define DEF_PTA(NAME) constexpr wide_int_bitmask PTA_ ## NAME \\\n+  = WIDE_INT_BITMASK_FROM_NTH ((pta_flag) _ ## NAME);\n+#include \"i386-isa.def\"\n+#undef DEF_PTA\n \n constexpr wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;"}]}