{"sha": "a2a64b499a0251618fc156cc70c31a9692d079be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhNjRiNDk5YTAyNTE2MThmYzE1NmNjNzBjMzFhOTY5MmQwNzliZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-05T12:01:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-05T12:01:51Z"}, "message": "77864 Fix noexcept conditions for map/set default constructors\n\n\tPR libstdc++/77864\n\t* include/bits/stl_map.h (map::map()): Use nothrow constructibility\n\tof comparison function in conditional noexcept.\n\t* include/bits/stl_multimap.h (multimap::multimap()): Likewise.\n\t* include/bits/stl_multiset.h (multiset::multiset()): Likewise.\n\t* include/bits/stl_set.h (set::set()): Likewise.\n\t* testsuite/23_containers/map/cons/noexcept_default_construct.cc:\n\tNew test.\n\t* testsuite/23_containers/multimap/cons/noexcept_default_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/multiset/cons/noexcept_default_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/set/cons/noexcept_default_construct.cc:\n\tLikewise.\n\nFrom-SVN: r240780", "tree": {"sha": "846057cdbb5a40053f0ce56722698e149e385dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/846057cdbb5a40053f0ce56722698e149e385dff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2a64b499a0251618fc156cc70c31a9692d079be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a64b499a0251618fc156cc70c31a9692d079be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a64b499a0251618fc156cc70c31a9692d079be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a64b499a0251618fc156cc70c31a9692d079be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72d690a921b82fe58e5dfdfd68dbdb70477d0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72d690a921b82fe58e5dfdfd68dbdb70477d0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72d690a921b82fe58e5dfdfd68dbdb70477d0de"}], "stats": {"total": 167, "additions": 155, "deletions": 12}, "files": [{"sha": "57c887dd1ccb7c2c0c344d066e985ea842edc5d4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -1,5 +1,20 @@\n 2016-10-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/77864\n+\t* include/bits/stl_map.h (map::map()): Use nothrow constructibility\n+\tof comparison function in conditional noexcept.\n+\t* include/bits/stl_multimap.h (multimap::multimap()): Likewise.\n+\t* include/bits/stl_multiset.h (multiset::multiset()): Likewise.\n+\t* include/bits/stl_set.h (set::set()): Likewise.\n+\t* testsuite/23_containers/map/cons/noexcept_default_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/multimap/cons/noexcept_default_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/cons/noexcept_default_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/cons/noexcept_default_construct.cc:\n+\tLikewise.\n+\n \t* include/bits/node_handle.h (_Node_handle): Remove invalid and unused\n \talias declaration.\n "}, {"sha": "e5b2a1b6b9294ab74581fbb4855c6b995dc0da1c", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -168,9 +168,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  Default constructor creates no elements.\n        */\n       map()\n-#if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<allocator_type>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(\n+\t  is_nothrow_default_constructible<allocator_type>::value\n+\t  && is_nothrow_default_constructible<key_compare>::value)\n       : _M_t() { }\n \n       /**"}, {"sha": "d24042767df4e193b402754307c776781352555c", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -165,9 +165,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  Default constructor creates no elements.\n        */\n       multimap()\n-#if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<allocator_type>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(\n+\t  is_nothrow_default_constructible<allocator_type>::value\n+\t  && is_nothrow_default_constructible<key_compare>::value)\n       : _M_t() { }\n \n       /**"}, {"sha": "cc068a9981f14238432f9b5c75e17e81ca48cda5", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -145,9 +145,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  Default constructor creates no elements.\n        */\n       multiset()\n-#if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<allocator_type>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(\n+\t  is_nothrow_default_constructible<allocator_type>::value\n+\t  && is_nothrow_default_constructible<key_compare>::value)\n       : _M_t() { }\n \n       /**"}, {"sha": "3938351438500a3b0998bfcb8884fb92203ffa20", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -148,9 +148,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  Default constructor creates no elements.\n        */\n       set()\n-#if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<allocator_type>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(\n+\t  is_nothrow_default_constructible<allocator_type>::value\n+\t  && is_nothrow_default_constructible<key_compare>::value)\n       : _M_t() { }\n \n       /**"}, {"sha": "1286d37a119f5283772a16d5a256aee59a947472", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/noexcept_default_construct.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_default_construct.cc?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <map>\n+\n+using mtype1 = std::map<int, int>;\n+static_assert(std::is_nothrow_default_constructible<mtype1>::value, \"Error\");\n+\n+struct cmp\n+{\n+  cmp() { }\n+  bool operator()(int, int) const;\n+};\n+\n+using mtype2 = std::map<int, int, cmp>;\n+static_assert( !std::is_nothrow_default_constructible<mtype2>::value, \"Error\");"}, {"sha": "30c0656956a0e248d66cde9aa5c23af75f1284a0", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/noexcept_default_construct.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_default_construct.cc?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <map>\n+\n+using mtype1 = std::multimap<int, int>;\n+static_assert(std::is_nothrow_default_constructible<mtype1>::value, \"Error\");\n+\n+struct cmp\n+{\n+  cmp() { }\n+  bool operator()(int, int) const;\n+};\n+\n+using mtype2 = std::multimap<int, int, cmp>;\n+static_assert( !std::is_nothrow_default_constructible<mtype2>::value, \"Error\");"}, {"sha": "d42fcd5e17a62bce27c5a0496add1e55631fab96", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/noexcept_default_construct.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_default_construct.cc?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <set>\n+\n+using stype1 = std::multiset<int>;\n+static_assert(std::is_nothrow_default_constructible<stype1>::value, \"Error\");\n+\n+struct cmp\n+{\n+  cmp() { }\n+  bool operator()(int, int) const;\n+};\n+\n+using stype2 = std::multiset<int, cmp>;\n+static_assert( !std::is_nothrow_default_constructible<stype2>::value, \"Error\");"}, {"sha": "7aba0069f5c0c58c0a3baf393c86f3ef8ae49946", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/noexcept_default_construct.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a64b499a0251618fc156cc70c31a9692d079be/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_default_construct.cc?ref=a2a64b499a0251618fc156cc70c31a9692d079be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <set>\n+\n+using stype1 = std::set<int>;\n+static_assert(std::is_nothrow_default_constructible<stype1>::value, \"Error\");\n+\n+struct cmp\n+{\n+  cmp() { }\n+  bool operator()(int, int) const;\n+};\n+\n+using stype2 = std::set<int, cmp>;\n+static_assert( !std::is_nothrow_default_constructible<stype2>::value, \"Error\");"}]}