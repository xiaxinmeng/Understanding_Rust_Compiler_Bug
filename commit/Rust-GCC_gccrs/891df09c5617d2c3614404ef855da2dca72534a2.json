{"sha": "891df09c5617d2c3614404ef855da2dca72534a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxZGYwOWM1NjE3ZDJjMzYxNDQwNGVmODU1ZGEyZGNhNzI1MzRhMg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-02-14T14:58:22Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-02-14T14:58:22Z"}, "message": "re PR java/19907 (Incorrect code generated for ManifestElement.java)\n\n2005-02-14  Andrew Haley  <aph@redhat.com>\n\n        PR java/19907\n        * expr.c (expand_byte_code): Call promote_arguments().\n        (promote_arguments): New function.\n        * decl.c (check_local_unnamed_variable): Remve special case for\n        new verifier.\n        (find_local_variable): Promote all boolean types to int\n        when searching for local variable decls.\n\nFrom-SVN: r95015", "tree": {"sha": "a661e23976ca842861dc949f3ed1a8516a828a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a661e23976ca842861dc949f3ed1a8516a828a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891df09c5617d2c3614404ef855da2dca72534a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891df09c5617d2c3614404ef855da2dca72534a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891df09c5617d2c3614404ef855da2dca72534a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891df09c5617d2c3614404ef855da2dca72534a2/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d633cfe524a361b4a5d1845e9b7fb78c2d813d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d633cfe524a361b4a5d1845e9b7fb78c2d813d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d633cfe524a361b4a5d1845e9b7fb78c2d813d7c"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "22f9176b9a61fb80a91a044f082c694827b3194e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=891df09c5617d2c3614404ef855da2dca72534a2", "patch": "@@ -1,3 +1,13 @@\n+2005-02-14  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/19907\n+\t* expr.c (expand_byte_code): Call promote_arguments().\n+\t(promote_arguments): New function.\n+\t* decl.c (check_local_unnamed_variable): Remve special case for\n+\tnew verifier.\n+\t(find_local_variable): Promote all boolean types to int\n+\twhen searching for local variable decls.\n+\t\n 2005-02-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c, java-except.h, jcf-parse.c, jv-scan.c, lex.c,"}, {"sha": "b7aa61650d3548a5d06c847ce0f0aed302f9992d", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=891df09c5617d2c3614404ef855da2dca72534a2", "patch": "@@ -263,24 +263,14 @@ check_local_unnamed_variable (tree best, tree decl, tree type)\n \t initially held a pointer arg -- or vice versa -- we create a\n \t new VAR_DECL.  \n \n-\t ???: As long as verification is correct, this will be a\n+      \t ???: As long as verification is correct, this will be a\n \t compatible type.  But maybe we should create a dummy variable\n \t and replace all references to it with the DECL and a\n-\t NOP_EXPR.\n+\t NOP_EXPR.  \n       */\n       || (TREE_CODE (decl_type) == POINTER_TYPE\n \t  && TREE_CODE (decl) == PARM_DECL\n-\t  && TREE_CODE (type) == POINTER_TYPE)\n-\n-      /* The new verifier requires a similar treatment in the\n-\t situation where the parameter has an integral type which\n-\t promotes to `int'.  */\n-      || (flag_new_verifier\n-\t  && TREE_CODE (decl) == PARM_DECL\n-\t  && INTEGRAL_TYPE_P (decl_type)\n-\t  && TYPE_PRECISION (decl_type) <= 32\n-\t  && INTEGRAL_TYPE_P (type)\n-\t  && TYPE_PRECISION (type) <= 32))\n+\t  && TREE_CODE (type) == POINTER_TYPE))\n     {\n       if (best == NULL_TREE\n \t  || (decl_type == type && TREE_TYPE (best) != type))\n@@ -312,6 +302,16 @@ find_local_variable (int index, tree type, int pc ATTRIBUTE_UNUSED)\n       tmp = DECL_LOCAL_SLOT_CHAIN (tmp);\n     }\n \n+  /* gcj has a function called promote_type(), which is used by both\n+     the bytecode compiler and the source compiler.  Unfortunately,\n+     the type systems for the Java VM and the Java language are not\n+     the same: a boolean in the VM promotes to an int, not to a wide\n+     boolean.  If our caller wants something to hold a boolean, that\n+     had better be an int, because that slot might be re-used\n+     later in integer context.  */\n+  if (TREE_CODE (type) == BOOLEAN_TYPE)\n+    type = integer_type_node;\n+\n   /* If we don't find a match, create one with the type passed in.\n      The name of the variable is #n#m, which n is the variable index\n      in the local variable area and m is a dummy identifier for"}, {"sha": "7d515052ba0a5e6d4ce7fcc331d228e4579b4696", "filename": "gcc/java/expr.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891df09c5617d2c3614404ef855da2dca72534a2/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=891df09c5617d2c3614404ef855da2dca72534a2", "patch": "@@ -86,6 +86,7 @@ static void java_stack_pop (int);\n static tree build_java_throw_out_of_bounds_exception (tree); \n static tree build_java_check_indexed_type (tree, tree); \n static unsigned char peek_opcode_at_pc (struct JCF *, int, int);\n+static void promote_arguments (void);\n \n static GTY(()) tree operand_type[59];\n \n@@ -2961,6 +2962,8 @@ expand_byte_code (JCF *jcf, tree method)\n \treturn;\n     }\n \n+  promote_arguments ();\n+\n   /* Translate bytecodes.  */\n   linenumber_pointer = linenumber_table;\n   for (PC = 0; PC < length;)\n@@ -3643,4 +3646,28 @@ build_java_empty_stmt (void)\n   return t;\n }\n \n+/* Promote all args of integral type before generating any code.  */\n+\n+static void\n+promote_arguments (void)\n+{\n+  int i;\n+  tree arg;\n+  for (arg = DECL_ARGUMENTS (current_function_decl), i = 0;\n+       arg != NULL_TREE;  arg = TREE_CHAIN (arg), i++)\n+    {\n+      tree arg_type = TREE_TYPE (arg);\n+      if (INTEGRAL_TYPE_P (arg_type)\n+\t  && TYPE_PRECISION (arg_type) < 32)\n+\t{\n+\t  tree copy = find_local_variable (i, integer_type_node, -1);\n+\t  java_add_stmt (build2 (MODIFY_EXPR, integer_type_node,\n+\t\t\t\t copy,\n+\t\t\t\t fold_convert (integer_type_node, arg)));\n+\t}\n+      if (TYPE_IS_WIDE (arg_type))\n+\ti++;\n+    }\n+}\n+\n #include \"gt-java-expr.h\""}]}